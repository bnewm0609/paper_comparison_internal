{
    "value_generation_qa": {
        "prompt_multiple_abstract": "[System]\nImagine the following scenario: A user is making a table for a scholarly paper that contains information about multiple papers and compares these papers. To compare and contrast the papers, the user provides the title and abstract of each paper. The user also provides the table's caption and column names indicating the aspects by which papers should be compared. Your task is the following: Given a list of papers and table information, you should fill the values in the table. Based on the given column names of the table, grounded on each paper, you should find the part of that paper that discusses the aspects provided as column names.\nFirst, you should explain your thinking about questions that need to be asked to find specific aspects of the papers discussing the content related to column names in the given caption table. Then, find the answers to those questions in each paper. If there is no answer in the paper, write down \"N/A\" as a value for that column. After explaining your thinking, return a single JSON object in the following format:\n\n```json\n{json_format}\n```\n\n**Ensure that you follow these rules: (1) Only return a single JSON object. (2) JSON object should be complete and valid. (3) JSON object should contain each column. (4) Each paper should have a value for each column in the JSON object or \"N/A\" if there is no relevant value.**\n\n{input_info}",
        "system_instruction": "You are an intelligent and precise assistant that can understand the contents of research papers. You are knowledgable on different fields and domains of science, in particular computer science. You are able to interpret research papers, create questions and answers, and compare multiple papers.",
        "parse_str": "```json"
    },
    "baseline_paper_to_table": {
        "prompt_simple": "[System]\nWe would like you to build a table that has each paper as a row and, as each column, a dimension that compares between the papers. You will be given multiple papers labeled Paper 1, 2, and so on. You will be provided with the title and abstract of each paper. Please create a table that compares and contrasts the given papers. Make {col_num} dimensions which are phrases that can compare multiple papers, so that the table has {col_num} columns. The table should also have {paper_num} papers as rows. Return a JSON object of the following format:\n\n```json\n{json_format}\n```\n\n**Check that the table has {paper_num} papers as rows and {col_num} dimensions as columns.**.\n\n{input_info}",
        "prompt_medium": "[System]\nWe would like you to build a table that has each paper as a row and, as each column, a dimension that compares between the papers. You will be given multiple papers labeled Paper 1, 2, and so on. You will be provided with the title and abstract of each paper. You need to make a table that has a caption of \"{caption}\". Please create a table that compares and contrasts the given papers. Make {col_num} dimensions which are phrases that can compare multiple papers, so that the table has {col_num} columns. The table should also have {paper_num} papers as rows. Return a JSON object of the following format:\n\n```json\n{json_format}\n```\n\n**Check that the table has {paper_num} papers as rows and {col_num} dimensions as columns.**.\n\n{input_info}",
        "system_instruction": "You are an intelligent and precise assistant that can understand the contents of research papers. You are knowledgable on different fields and domains of science, in particular computer science. You are able to interpret research papers, create questions and answers, and compare multiple papers.",
        "parse_str": "```json"
    },
    "scheme_attribute_generation": {
        "system_instruction": "You are an intelligent and precise assistant that can understand the contents of research papers. You are knowledgable on different fields and domains of science, in particular computer science. You are able to interpret research papers, create questions and answers, and compare multiple papers.",
        "prompt_abstract": "[System]\nImagine the following scenario: A user is making a table for a scholarly paper that contains information about multiple papers and compares these papers. To compare and contrast the papers, the user provides the title and abstract of each paper. Your task is the following: Given a list of papers, you should find aspects that are shared by the given research papers. Then, within each aspect, you should identify {num_attributes} attributes that can be used to compare the given papers.\nFirst, you should return the list of similar aspects as a Python list as follows: \"[\"<similar aspect that all given papers shared>\", ...]\". Then, think of each aspect as the topic for the Related Work section of the user's paper. Finally, find attributes that can compare the given papers within the Related Work section. Return a JSON object in the following format:\n\n```json\n{{\n  \"<aspect 1>\": [\"<comparable attribute within the aspect 1>\", \"<comparable attribute within the aspect 1>\", ...],\n  ...\n}}\n```\n\n{input_info}",
        "parse_str": "```json"
    },
    "json_formatting": {
        "prompt": "[System]\nGiven the following string below, please format this information into a valid JSON object. Ensure that each piece of information is represented as a separate key-value pair in the JSON.\n\nThe JSON object should contain free-form columns of tables as keys and have dictionary composed of Paper indexes as keys and a list of free-form values as values. Return a JSON object of the following format: \"{{\"<column name 1> \": {{\"paper_1\": [\"<relevant value to the column name grounded on Paper 1>\"], \"paper_2\":[\" <relevant value to the column name grounded on Paper 2>\"], \"paper_3\": [\"<relevant value to the column name grounded on Paper 3>\"], ..}}, ..}}\". **Before and after the JSON object, add the character \"[JSON]\"**.\n\n[Input string]\n{input_info}",
        "system_instruction": "You are an intelligent and precise assistant that can format the data as guided.",
        "parse_str": "[JSON]"
    }
}
