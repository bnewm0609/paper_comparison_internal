{"id": 245934344, "updated": "2022-09-29 22:41:38.432", "metadata": {"title": "Identifying ATT&CK Tactics in Android Malware Control Flow Graph Through Graph Representation Learning and Interpretability", "authors": "[{\"first\":\"Jeffrey\",\"last\":\"Fairbanks\",\"middle\":[]},{\"first\":\"Andres\",\"last\":\"Orbe\",\"middle\":[]},{\"first\":\"Christine\",\"last\":\"Patterson\",\"middle\":[]},{\"first\":\"Janet\",\"last\":\"Layne\",\"middle\":[]},{\"first\":\"Edoardo\",\"last\":\"Serra\",\"middle\":[]},{\"first\":\"Marion\",\"last\":\"Scheepers\",\"middle\":[]}]", "venue": "2021 IEEE International Conference on Big Data (Big Data)", "journal": "2021 IEEE International Conference on Big Data (Big Data)", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "To mitigate a malware threat it is important to understand the malware\u2019s behavior. The MITRE ATT&ACK ontology specifies an enumeration of tactics, techniques, and procedures (TTP) that characterize malware. However, absent are automated procedures that would characterize, given the malware executable, which part of the execution flow is connected with a specific TTP. This paper is the first in providing an automation methodology to locate TTP in a sub-part of the control flow graph that describes the execution flow of a mal-ware executable. This methodology merges graph representation learning and tools for machine learning explanation.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/aaai/FairbanksOPSS22", "doi": "10.1109/bigdata52589.2021.9671343"}}, "content": {"source": {"pdf_hash": "9773f5b0db30bb552c588d2c0ea5f83034aa8c57", "pdf_src": "IEEE", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "4a8d3149ff4e6a11a040d9d415390bad1dad8827", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/9773f5b0db30bb552c588d2c0ea5f83034aa8c57.txt", "contents": "\nIdentifying ATT&CK Tactics in Android Malware Control Flow Graph Through Graph Representation Learning and Interpretability\n\n\nJeffrey Fairbanks jfairbanks@nnu.edu \nAndres Orbe \nChristine Patterson christinepatterson@u.boisestate.edu \nJanet Layne janetlayne@u.boisestate.edu \nEdoardo Serra edoardoserra@boisestate.edu \nMarion Scheepers mscheepe@boisestate.edu \n\nComputer Science Dept\nComputer Science Dept. New Jersey Institute of Technology Newark, New Jersey\nDepartment of Mathematics\nNorthwest Nazarene University Nampa\nIdahoUnited States, United States\n\n\nComputer Science Dept\nBoise State University Boise\nUnited States\n\n\nComputer Science Dept\nBoise State University Boise\nUnited States\n\n\nDepartment of Mathematics\nBoise State University Boise\nUnited States\n\n\nBoise State University Boise\nUnited States\n\nIdentifying ATT&CK Tactics in Android Malware Control Flow Graph Through Graph Representation Learning and Interpretability\n10.1109/BigData52589.2021.9671343Index Terms-Malware Tactics ClassificationMachine Learn- ing InterpretabilityGraph Representation LearningControl Flow Graph\nTo mitigate a malware threat it is important to understand the malware's behavior. The MITRE ATT&ACK ontology specifies an enumeration of tactics, techniques, and procedures (TTP) that characterize malware. However, absent are automated procedures that would characterize, given the malware executable, which part of the execution flow is connected with a specific TTP. This paper is the first in providing an automation methodology to locate TTP in a sub-part of the control flow graph that describes the execution flow of a malware executable. This methodology merges graph representation learning and tools for machine learning explanation.\n\nI. INTRODUCTION\n\nMalware applications create significant monetary damages and represent a menace for people. The challenging task of mitigating the effects of a malware application requires deep understanding of what the application does.\n\nConnecting malware actions with the specific macro tactics, techniques, and procedures (TTP) enumerated in the MITRE ATT&CK\u00ae ontology helps with understanding the malware actions. The Control Flow Graph (CFG) of an application (or malware) describes the actions of the program during execution, and the flow of all the internal and external function calls.\n\nTo the best of our knowledge related works focus only on the detection of malware or on the classification of the malware family. Often the MITRE ATT&CK\u00ae TTP are applied to associate a malware to a specific family of malware (e.g., spyware, Trojan, etc.), and this association of malware family to TTP is done by a human. The aim of this paper is to use the control flow graph to identify which subset of the actions in the graph has a high likelihood of being responsible for the specific TTP. Figure 1 illustrates the idea of associating a TTP with actions represented in a subgraph of the control flow graph. We propose a novel approach to identify ATT&CK\u00ae TTP in a CFG by applying Graph Machine Learning techniques on Android Malware. Specifically, our approach associates the TTP with a subgraph of a CFG. We use the Graph Neural Network and SIR-GN node representation learning approach to process the CFG, and create a model that classifies the associated TTP. Furthermore, we use attribution techniques to identify the subgraph in the CFG connected with the specific TTP.\n\n\nII. RELATED WORKS\n\nA number of researchers have used a variety of methods to explore the detection of malware by means of graphs. In their paper, Scalable Function Call Graph-based Malware Classification [1], M. Hassan et al. use machine learning and a control flow graph to correctly identify whether a given Android malware was malicious. However, this research does not include the classification of which techniques are used by the identified malware, and does not identify where the part of the control flow graph that represent these techniques. Similar work is reported in the paper Large-Scale Malware Indexing Using Function-Call Graphs [2] by Xin Hu et al., as well as in the paper Metamorphic Malware Detection using Control Flow Graph Mining [3] by Mojtaba et al. These papers made strides towards malware detection. They allow for the improvement of the classification of malware by means of machine learning. ML and AI applications for security can be found in [4]- [11]. MITRE has been essential in the development of malware detection research via creation of a database of TTP which is used to aid in classifying malware. With this given TTP, each malware can be given some subset of these TTP based on the CFG and the behavior of the malware, allowing for the labeling of the data. MITRE ATT&CK\u00ae (Adversarial Tactics, Techniques, and Common Knowledge) [12] labels a number of popular malware families with their given TTP; however, it does not identify the location in the control flow graph associated with the malware's TTP.\n\n\nA. MITRE ATT&CK\u00ae\n\nMITRE ATT&CK\u00ae [12] is a globally accessible knowledge base of adversary tactics and techniques based on real-world observations. ATT&CK\u00ae was developed in response to the challenge of defending against Advanced Persistent Threats (APT). The development of ATT&CK\u00ae focused on detection of APT after a network has been compromised [13]. The development of MITRE ATT&CK\u00ae has resulted in further research into TTP and malware. A. Georgiadou et al. in [14] use ATT&CK\u00ae to explore the organization of security procedures and the improvement of security risk comprehension through an analysis that associates a comprehensive set of organizational and individual culture factors and uses the MITRE ATT&CK\u00ae framework to map security vulnerabilities with specific adversary behaviors and patterns. The MITRE ATT&CK\u00ae framework has also been utilized by A. Gbadebo et al [15]. That research focuses on the extraction of adversary actions from threat report documents and automatic classification of these into tactics and techniques (TT). In [15] also mitigation advisories have been prepared for these attacks. Moreover, in [15] the authors use a machine learning model to automate the prediction of categories and account for bias correction by using an importance weighting scheme and compared their results with existing approaches. The MITRE ATT&CK\u00ae framework has led to valuable research on the detection and classification of malware, and MITRE ATT&CK\u00ae is an ever-adapting and expanding the knowledge base for designing threat models. ATT&CK\u00ae [12] highlights several popular malware classes, or Softwares, which contain a list of TTP. It is important to note that Malware tends to fall into groups of these software families, called malware.\n\nThe development of new malware often occurs by making slight modifications from the original version in an attempt to thwart programs designed to protect against malware.\n\nATT&CK\u00ae not only keeps track of groups of software but also tracks groups of malware developers.\n\n\nB. Control Flow Graphs\n\nA control flow graph (CFG) gives a graphical representation of the structure of a program by graphing the functions that the program calls as it executes. These functions can be external functions, such as API calls, or can be internal functions included in the packages that the developer adds into their workspace, which can also be the internal functions written by the programmer. The CFG represents how each function interacts with the other functions. Furthermore, CFGs show the Entry Block and Exit Block of the code, allowing one to see where the code begins and ends, which aids in the reverse engineering of a malware. As CFGs are valuable to the visualization and understanding of how a program works, their use in research related to malware is common. In the paper Control Flow Graphs as Malware Signatures [16], G. Bonfante et al. contribute to the use of CFGs in the detection of malware: This work extracts CFGs from malware and use these CFGs as signatures for malware detection. Another paper written by A. Kapoor et al. [17] uses bi-normal separation to detect malware. That research was proposed to aid in the classification of malware into malware families: Much of the prior research completed focused purely on the detection of malware. In the paper [18] regarding CFGs in malware detection, S. S. Anju et al. present a method of malware detection that is resilient to common obfuscation transformations. One approach to malware detection features finding signatures of the malware to obtain syntactic characteristics. However, small changes to malware reduces the effectiveness of this detection method. In [18] the authors focus on using syntactic and semantic features to detect malware by using CFGs, thus providing a more reliable malware detection method. Figure 2 shows an example of a CFG. Each CFG is a directed graph visualizing the flow of a program. The internal functions, whether they are written by the programmer or are in packages imported by the programmer, are denoted as a gray box with the name 'sub' with numbers following. The external functions, such as the Android API calls, are denoted as a light blue box. These API calls are calls which are made to the Android API library. An example of an API call is the call named \"getDeclaredField()\". This external API call returns a 'field' object for use within the flow of the program.\n\n\nC. Graph Neural Network\n\nIt has become increasingly common to use graphs to represent data. Graph neural networks can be used to process data that is represented by graphs. This is possible through machine learning and conversion of the information from the nodes and edges of the graphs to representing vectors. Then graph neural networks can be used in the detection of malware, as shown in by Peng Xu et al. [19] in their paper, Detecting and Categorizing Android Malware with Graph Neural Networks: A GNN is used to convert the structure of an Android application to a vector. These vectors are used to detect and categorize malware families. Hybrid-analysis [20] allows us to correlate the TTP to the CFG that each malware generates.\n\nIII. METHODOLOGY Our methodology has three parts: (1) data collection and processing for training a graph TTP classifier, (2) SIR-GN graph representation learning procedure integrated into the graph TTP classification, and (3) an attribution procedure that explains the TTP classification task by propagating the results through the graph representation learning procedure to identify a CFG subgraph responsible for the specific TTP.\n\n\nA. Data Collection\n\nWe use a sub-sample of the Android malware (apk) provided by Virus Total 1 . For each malware we use the Virus Total API to collect the human-curated list of TTP (from MITRE ATT&CK\u00ae). Successively we convert each android malware into its corresponding control flow graph (CFG). Figure 3 shows how, after the collection of the apk Android applications from VirusTotal, the apk are passed into a sandbox in order to collect the ATT&CK\u00ae TTPs.\n\nHybrid-Analysis Sandbox [20], also known as Falcon Sandbox, was used for this step as it allows the raw Android .apk executable samples to be passed in, and the needed ATT&CK\u00ae TTP can be extracted.\n\nThe data collection in this manner proceeds for some time as the Researchers API allows for 100 uploads to the sandbox every 24 hours. Through the implementation of Hybrid-Analysis Sandbox, the TTP can be gathered. Lastly, the CFG 1 www.virustotal.com is extracted from the collected samples by using AndroGuard [21], which statically extracts the CFG. During the process of collecting data, a catalog is made to ensure that each sample is processed exactly once with no duplicates. This architecture is shown in Figure 3. This process is also helpful in ensuring that the data consists of a graph and contains relevant information regarding the TTP before continuing with the machine learning process.\n\nAs a final output, the data collection part produces a set of different directed graphs, one for each Android apk, and a ground truth which associates to each graph a list of TTPs.\n\n\nB. Inferential SIR-GN for the TTP Classification Task\n\nGraph data are not directly processed through standard machine learning models. Graph representation learning such as Inferential SIR-GN [22], [23] produces a vector representation for each node.\n\nGiven the vector representation of Inferential SIR-GN, [23] provides a procedure to create a unique graph representation by creating a flattened structural pseudo-adjacency matrix.\n\nThis methodology assures a fast and comparable creation of vector representations for graphs. Once the vector representation of each graph is created, we use a standard machine learning model to classify the presence of a specific TTP. The main technique we use is a random forests classification algorithm. This algorithm gave the best classification performance. It is important to note that graph neural networks can achieve the same task. However, it is experimentally demonstrated that they do not perform as well as SIR-GN. In the following a detailed description of Inferential SIR-GN and the structural pseudo-adjacency matrix is given.\n\n1) Inferential SIR-GN: The algorithm Inferential SIR-GN, used for extracting node representations from the directed graph, is described in detail in Layne and Serra [23]. The model relies upon the methodology of SIR-GN, first described in [22], wherein a node's representation is iteratively updated by describing and then aggregating its neighbors. The size of a node's representation at each iteration is equal to a userchosen hyperparameter nc. Node descriptions are generated by clustering the current node description (which initializes as the node degree) into nc KMeans clusters. Normalization of the representation occurs before the clustering step at each iteration, then the distance from each cluster centroid is converted into a probability of membership of the node in each cluster. Once a node's structural description has been updated, its neighbors are aggregated into its description by summing for each cluster all neighbors' probabilities of membership per cluster. The resulting node representation is equal to the expected number of neighbors that the node possesses in each cluster. Each iteration corresponds to an added depth of exploration, where k iterations will generate a node description incorporating the k-hop neighborhood structure of a node.\n\nInferential SIR-GN differs from the standard model via multiple modifications, the first being that at the end of each iteration, we concatenate each node's structural description into a larger representation that captures the evolution of the structural information through deeper neighborhood exploration. After the final iteration, a Principal Component Analysis (PCA) is used to prevent degradation of the information as the representation size grows. The final representation is condensed to a size chosen as a hyperparameter.\n\nFor directed graphs, a node's initial representation begins as two vectors of size nc, one containing the node's in-degree, the other containing its out-degree. These two are concatenated together before clustering. At each iteration, clustering of this larger node vector is performed, followed by aggregation of the neighbors. For directed data, the aggregation is performed separately for a node's in-neighbors and out-neighbors into two intermediate vectors, then once again concatenated together for the next iteration.\n\nThe inferential capability of our proposed model is accomplished by pre-training the KMeans and scalers for each iteration -a new KMeans and Scaler are used for every depth of exploration -along with the PCA model that will be used to generate the final node representation. We pre-train on random graphs and store each model for use in inference. At inference time, repeated normalization followed by clustering and aggregation is accomplished using the pre-trained models, and the PCA fit during training is used to generate the final node representations. This drastically increases inference time, and the same pre-trained model can be used on a variety of different data sources, as is demonstrated extensively in Layne and Serra [23], along with a detailed algorithm and a description of the time complexity of the model.\n\n2) Structural Pseudo-Adjacency Matrix: Given the vector representation of SIR-GN, [23] provides a procedure to create a unique graph representation technique. Such techniques identify groups of nodes in a fixed number. Each group contains nodes with similar vector representations. Given this set of groups, the method creates a structural adjacency matrix working on the groups that, once flattened, represent the vector representation of the graph. Then, the vector representations of the two graphs are comparable if the computation of the node representations and the definition of the groups of nodes for the structural pseudo-adjacency matrices are identical for the two graphs. This approach guarantees this property because inferential SIR-GN [23] is a procedure able to perform inferences and that is pretrained on a specific family of directed random graphs. Note that since the groups of nodes are created on the basis of structural similarities among the nodes, the graph representation is invariant.\n\nMore specifically, these node representations are used to train a final scaler and KMeans, that clusters the entire graph data at inference time. Unlike the incremental KMeans, which only see the node representation/aggregation for the current level of depth being explored, this final KMeans is fit using the concatenated iterative node representations condensed by PCA. During inference, the nodes of the target graph are embedded as described above, then clustered one final time using the KMeans pre-trained on the full graph data. The distances to the cluster centroids are transformed into probabilities of membership in a cluster, as above. However, the aggregation method is markedly different for graph representation than for nodes. Graph representations are often created from node representations by sum or mean-pooling node representations. Layne and Serra [23] present a new method for node pooling, which creates a pseudo structural adjacency matrix of the size ngc \u00d7 ngc, where the matrix is the sum of each node vector multiplied by the transpose of each of its neighbors. This creates a matrix that is not only unique to a specific graph structure but also indifferent to node ordering, unlike typical adjacency matrices. The linearized matrix yields a set of features for use in downstream graph classification tasks.\n\n\nC. TTP Attribution to Identify Subgraphs in the CFG\n\nTo identify the subgraph in the CFG responsible for the TTP classification, we use SHAP [24] and the interpretability procedure provided for Graph Representation in inferential SIR-GN [23].\n\nMore specifically, SHAP is a procedure to interpret standard classification models based on the Shapley value solution concept for coalition games. SHAP, given a specific example represented by a vector of features, is able to give an attribution value for each feature in the input to the classifier. This attribution value explains the relevance of that feature for the classification. In particular, since our classification model is the random forest, we use SHAP defined for tree-based models [25], which is the most efficient.\n\nOnce each feature receives its attribution values, these values have to be propagated from the graph's vector representation to the graph itself. This task is accomplished using the propagation procedure described in [23]. This procedure moves the attribution value of each edge in the structural pseudo-adjacency matrix created for the graph representation to the original graph by weighting each original edge according to its contribution to the specific pseudo-edge feature value. Then, each edge of the graph is provided an attribution value describing its importance for the TTP classification. By selecting, based on attribution value, the important top edges, this procedure locates the subgraph of the CFG responsible for the specific TTP classification.\n\n\nIV. EXPERIMENTS\n\nIn this section we describe the data collection statistics, the TTP classification results, and qualitative evaluation of the subgraph identification in the control flow graphs.\n\n\nA. Data Collection Information\n\nWe collect 3250 malware apks, providing 3250 graphs with an average of 5775 nodes and 12581 edges per graph. In total, our dataset has 136993 nodes and 333854 edges. In Figure 5 the distributions of the nodes and edges in all the control flow graphs extracted are reported. This set of malware has the following TTPs: \"Initial Acces\", \"Execution\", \"Defense Evasion\", \"Discovery\", \"Credential Access\", \"Lateral Movement\", and \"Collection\". In terms of binary classification, the first four TTPs have a ratio 40-70 % (contains the TTP) vs 60-30% (does not contain the TTP). The remaining three TTPs are drastically unbalanced with a ratio of around 13% vs 87%. A detailed distribution of the tactics is reported in Figure 6. \n\n\nB. Classification Results\n\nIn this section we compare our procedure combining SIR-GN and standard classification models, with Graph Attention Network (GAN) [26] and Graph Isomorphic Network (GIN) [27]. The comparisons are made in terms of F1-score and accuracy in classifying the TTP. In particular, F1-score [28] is a measurement evaluating classification performances that is robust to unbalanced data. All the metrics are the average obtained among all the folds of a 10-fold cross validation. Table I shows the strong improvement in terms of average results among all the TTPs classification tasks, of the approach based on Inferential SIR-GN when compared with graph neural networks. It is possible to see the approach based on Inferential SIR-GN is producing the better result. This also motivates our choice to use only the attribution procedure for the structural pseudo-adjacency matrix. Next we show the specific classification results, detecting each specific ATT&CK\u00ae technique, of the graph neural networks and Inferential SIR-GN with different classification models.\n\n1) Graph Neural Networks: In this set of experiments we focus on Graph Isomorphic Networks (GIN) and Graph Attention Networks (GAT). As shown in Table II, the GIN model is able to achieve an average of only 67% average accuracy and 63% average F1 Score while classifying over 40 epochs. Each of the CFGs is batched into the model in groups of 20 graphs. Through the process of turning these parameters, it is found that CFG batches of 20 provided some of the best results, allowing for a balance between computational time and amount of nodes and edges per classification. The GIN implemented has five GIN layers with 50 hidden neurons. Many different layers are attempted to increase the F1 and Accuracy Scores but proved to perform the best with the aforementioned parameters. For instance, with three GIN layers, only a 64% average accuracy score is achieved, whereas, with six GIN layers, 61% average accuracy is achieved. Changing the hidden layers has minimal effect on the scores over the epochs. Furthermore, 'neighbor pooling type' and 'graph pooling type' are set to \"sum\" and received the highest results out of the parameters of \"sum\", \"mean\", and \"max\". Detailed results for each TTP classification task are reported in Table II. In the case of the graph attention network, the results are shown in Table III. Such results are always produced by parameter tuning as before. The performances are comparable or worse in comparison with GIN. 2) Inferential SIR-GN with Different Classification Model: In this set of experiments, we compare different classification models on the flattened structural pseudo-adjacency matrix representations for each control flow graph. The classification model considered are Decision Tree, K-Nearest Neighbor, Logistic Regression, and Random Forest, and the results are shown in Table IV, Table V,Table VI, and Table VII, respectively.\n\nThe random forest model with 1000 trees clearly produces the best results among all the other classification models and the graph neural networks.\n\n\nC. Identify the Subgraph for the TTP Classification\n\nWe perform a qualitative analysis to validate how the API calls of each subgraph responsible for a TTP classification are related to the TTP definition. The \"Initial Access\" represents the vectors adversaries use to gain an initial foothold into a mobile device. Our automatic procedure identifies as the most important API calls the ones of user interface (i.e., android/app and android/widget need for the ads that would pop up within the browser) and \"com/madhouse/android/ads/bj/getLeft\" (Madhouse is a famous mobile ad). Figure 7 shows the control flow graph of the malware with SHA-256 006c24ff3ea7248f01d615d882eb993b88e096772bfeb6840c0cdc 5527e0d97d. The nodes in green are the most relevant calls described above that characterize the \"Initial Access\" TTP of this adware. \n\n\nV. CONCLUSION\n\nThe identification of subgraphs in the control flow graph of a malware that characterizes the specific TTP of malware is an important task that facilitates the understanding of the malware behavior and then its mitigation. In this work, an automated procedure based on graph representation learning and interpretation, able to well classify the different TTP of malware and detect their related subgraphs in the CFG, is proposed. Given the experimental results, our methodology based on Inferential SIR-GN outperforms, in terms of accuracy and F1-score, the capability of graph isomorphic networks and graph attention networks, and it provides CFG subgraphs that effectively characterize the malware behavior.\n\nFig. 1 .\n1Identify ATT&CK\u00ae tactics in control flow graphs.\n\nFig. 2 .\n2A simple control flow graph showing external API calls and internal calls.\n\nFig. 3 .\n3Overview of the data collection process.\n\nFig. 4 .\n4The executables go through Hybrid Analysis Sandbox to extract the TTP and Androguard to extract the Control Flow Graph. They are then paired and cataloged.\n\nFig. 5 .\n5Number of nodes vs. edges in all the control flow graphs of the malware.\n\nFig. 6 .\n6Tactic distributions.\n\n\nFig. 7. \"Initial Access\" malware subgraph identification for the malware with SHA-256 006c24ff3ea7248f01d615d882eb993b88e096772bfeb6840c0cdc 5527e0d97d.\n\nTABLE I AVERAGE\nIBINARY TTP CLASSIFICATION RESULTS.Technique \nF1 Score Accuracy \nGIN \n0.627 \n0.669 \nGAT \n0.495 \n0.675 \nInferential SIR-GN + Random Forest \n0.927 \n0.896 \n\n\n\nTABLE II GRAPH\nIIISOMORPHIC NETWORK (GIN) CLASSIFICATION RESULTS FOR EACH TTP.TTP \nF1 Score Accuracy \nInitial Access \n0.727 \n0.571 \nExecution \n0.782 \n0.643 \nDefense Evasion \n0.765 \n0.612 \nCredential Access \n0.697 \n0.714 \nDiscovery \n0.400 \n0.667 \nLateral Movement \n0.568 \n0.667 \nCollection \n0.447 \n0.809 \nAverage Scores \n0.627 \n0.669 \n\n\n\nTABLE III GAT\nIIICLASSIFICATION RESULTS FOR EACH TTP.TTP \nF1 Score Accuracy \nInitial Access \n0.601 \n0.429 \nExecution \n0.782 \n0.642 \nDefense Evasion \n0.432 \n0.761 \nCredential Access \n0.382 \n0.619 \nDiscovery \n0.458 \n0.846 \nLateral Movement \n0.323 \n0.476 \nCollection \n0.487 \n0.952 \nAverage Scores \n0.495 \n0.675 \n\n\n\nTABLE IV INFERENTIAL\nIVSIR-GN + DECISION TREE TTPS CLASSIFICATION RESULTS. INFERENTIAL SIR-GN + K-NEAREST NEIGHBOUR TTPS CLASSIFICATIONTABLE VI INFERENTIAL SIR-GN + LOGISTIC REGRESSION TTPS CLASSIFICATION RESULTS.TABLE VII INFERENTIAL SIR-GN + RANDOM FOREST TTPS CLASSIFICATION RESULTS.TTP \nF1 Score Accuracy \nInitial Access \n0.860 \n0.830 \nExecution \n0.860 \n0.800 \nDefense Evasion \n0.920 \n0.860 \nCredential Access \n0.880 \n0.860 \nDiscovery \n0.980 \n0.960 \nLateral Movement \n0.840 \n0.790 \nCollection \n0.940 \n0.890 \nAverage Scores \n0.897 \n0.856 \n\nTABLE V \nRESULTS \n\nTTP \nF1 Score Accuracy \nInitial Access \n0.880 \n0.860 \nExecution \n0.880 \n0.820 \nDefense Evasion \n0.940 \n0.890 \nCredential Access \n0.890 \n0.880 \nDiscovery \n0.980 \n0.970 \nLateral Movement \n0.880 \n0.850 \nCollection \n0.960 \n0.930 \nAverage Scores \n0.916 \n0.886 \n\nTTP \nF1 Score Accuracy \nInitial Access \n0.810 \n0.760 \nExecution \n0.840 \n0.750 \nDefense Evasion \n0.930 \n0.870 \nCredential Access \n0.840 \n0.810 \nDiscovery \n0.990 \n0.970 \nLateral Movement \n0.820 \n0.750 \nCollection \n0.940 \n0.890 \nAverage Scores \n0.881 \n0.829 \n\nTTP \nF1 Score Accuracy \nInitial Access \n0.900 \n0.880 \nExecution \n0.880 \n0.830 \nDefense Evasion \n0.950 \n0.900 \nCredential Access \n0.910 \n0.900 \nDiscovery \n0.990 \n0.970 \nLateral Movement \n0.890 \n0.850 \nCollection \n0.970 \n0.940 \nAverage Scores \n0.927 \n0.896 \n\n\nIEEE International Conference on Big Data (Big Data) | 978-1-6654-3902-2/21/$31.00 \u00a92021 IEEE | DOI: 10.1109/BigData52589.2021.9671343\nVI. ACKNOWLEDGEMENTS\nScalable function call graph-based malware classification. M Hassen, P K Chan, Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy. the Seventh ACM on Conference on Data and Application Security and PrivacyM. Hassen and P. K. Chan, \"Scalable function call graph-based malware classification,\" in Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy, 2017, pp. 239-248.\n\nLarge-scale malware indexing using function-call graphs. X Hu, T Chiueh, K G Shin, Proceedings of the 16th ACM conference on Computer and communications security. the 16th ACM conference on Computer and communications securityX. Hu, T.-c. Chiueh, and K. G. Shin, \"Large-scale malware indexing using function-call graphs,\" in Proceedings of the 16th ACM conference on Computer and communications security, 2009, pp. 611-620.\n\nMetamorphic malware detection using control flow graph mining. M Eskandari, S Hashemi, International Journal of Computer Science and Network Security. 1112M. Eskandari and S. Hashemi, \"Metamorphic malware detection using control flow graph mining,\" International Journal of Computer Science and Network Security, vol. 11, no. 12, pp. 1-6, 2011.\n\nShare: A stackelberg honey-based adversarial reasoning engine. S Jajodia, N Park, E Serra, V Subrahmanian, ACM Transactions on Internet Technology (TOIT). 183S. Jajodia, N. Park, E. Serra, and V. Subrahmanian, \"Share: A stackel- berg honey-based adversarial reasoning engine,\" ACM Transactions on Internet Technology (TOIT), vol. 18, no. 3, pp. 1-41, 2018.\n\nLarge-scale sparse structural node representation. E Serra, M Joaristi, A Cuzzocrea, 2020 IEEE International Conference on Big Data (Big Data). IEEEE. Serra, M. Joaristi, and A. Cuzzocrea, \"Large-scale sparse structural node representation,\" in 2020 IEEE International Conference on Big Data (Big Data). IEEE, 2020, pp. 5247-5253.\n\nAn effective approach to inverse frequent set mining. A Guzzo, D Sacca, E Serra, 2009 Ninth IEEE International Conference on Data Mining. IEEEA. Guzzo, D. Sacca, and E. Serra, \"An effective approach to inverse frequent set mining,\" in 2009 Ninth IEEE International Conference on Data Mining. IEEE, 2009, pp. 806-811.\n\nA survey of quantitative models of terror group behavior and an analysis of strategic disclosure of behavioral models. E Serra, V Subrahmanian, IEEE Transactions on Computational Social Systems. 11E. Serra and V. Subrahmanian, \"A survey of quantitative models of terror group behavior and an analysis of strategic disclosure of behavioral models,\" IEEE Transactions on Computational Social Systems, vol. 1, no. 1, pp. 66-88, 2014.\n\nShortfall-based optimal placement of security resources for mobile iot scenarios. A Rullo, E Serra, E Bertino, J Lobo, European Symposium on Research in Computer Security. SpringerA. Rullo, E. Serra, E. Bertino, and J. Lobo, \"Shortfall-based optimal placement of security resources for mobile iot scenarios,\" in European Symposium on Research in Computer Security. Springer, 2017, pp. 419-436.\n\nA game of things: Strategic allocation of security resources for iot. A Rullo, D Midi, E Serra, E Bertino, 2017 IEEE/ACM Second International Conference on Internet-of-Things Design and Implementation (IoTDI). IEEEA. Rullo, D. Midi, E. Serra, and E. Bertino, \"A game of things: Strategic allocation of security resources for iot,\" in 2017 IEEE/ACM Second International Conference on Internet-of-Things Design and Implemen- tation (IoTDI). IEEE, 2017, pp. 185-190.\n\nConvolutional neural network ensemble fine-tuning for extended transfer learning. O Korzh, M Joaristi, E Serra, International Conference on Big Data. SpringerO. Korzh, M. Joaristi, and E. Serra, \"Convolutional neural network ensemble fine-tuning for extended transfer learning,\" in International Conference on Big Data. Springer, 2018, pp. 110-123.\n\nUnknown landscape identification with cnn transfer learning. E Serra, A Sharma, M Joaristi, O Korzh, 2018 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining (ASONAM). IEEEE. Serra, A. Sharma, M. Joaristi, and O. Korzh, \"Unknown landscape identification with cnn transfer learning,\" in 2018 IEEE/ACM Interna- tional Conference on Advances in Social Networks Analysis and Mining (ASONAM). IEEE, 2018, pp. 813-820.\n\nMitre att&ck. Mitre att&ck. [Online]. Available: https://attack.mitre.org/\n\nFinding cyber threats with att&ck-based analytics. B E Strom, J A Battaglia, M S Kemmerer, W Kupersanin, D P Miller, C Wampler, S M Whitley, R D Wolf, No. MTR170202The MITRE Corporation. Technical ReportB. E. Strom, J. A. Battaglia, M. S. Kemmerer, W. Kupersanin, D. P. Miller, C. Wampler, S. M. Whitley, and R. D. Wolf, \"Finding cyber threats with att&ck-based analytics,\" The MITRE Corporation, Bedford, MA, Technical Report No. MTR170202, 2017.\n\nAssessing mitre att&ck risk using a cyber-security culture framework. A Georgiadou, S Mouzakitis, D Askounis, Sensors. 2193267A. Georgiadou, S. Mouzakitis, and D. Askounis, \"Assessing mitre att&ck risk using a cyber-security culture framework,\" Sensors, vol. 21, no. 9, p. 3267, 2021.\n\nAutomated threat report classification over multi-source data. G Ayoade, S Chandra, L Khan, K Hamlen, B Thuraisingham, 2018 IEEE 4th International Conference on Collaboration and Internet Computing (CIC). IEEEG. Ayoade, S. Chandra, L. Khan, K. Hamlen, and B. Thuraisingham, \"Automated threat report classification over multi-source data,\" in 2018 IEEE 4th International Conference on Collaboration and Internet Com- puting (CIC). IEEE, 2018, pp. 236-245.\n\nControl flow graphs as malware signatures. G Bonfante, M Kaczmarek, J.-Y. Marion, International workshop on the Theory of Computer Viruses. G. Bonfante, M. Kaczmarek, and J.-Y. Marion, \"Control flow graphs as malware signatures,\" in International workshop on the Theory of Computer Viruses, 2007.\n\nControl flow graph based multiclass malware detection using bi-normal separation. A Kapoor, S Dhavale, Defence Science Journal. 662A. Kapoor and S. Dhavale, \"Control flow graph based multiclass mal- ware detection using bi-normal separation.\" Defence Science Journal, vol. 66, no. 2, 2016.\n\nMalware detection using assembly code and control flow graph optimization. S Anju, P Harmya, N Jagadeesh, R Darsana, Proceedings of the 1st Amrita ACM-W Celebration on Women in Computing in India. the 1st Amrita ACM-W Celebration on Women in Computing in IndiaS. Anju, P. Harmya, N. Jagadeesh, and R. Darsana, \"Malware detection using assembly code and control flow graph optimization,\" in Proceed- ings of the 1st Amrita ACM-W Celebration on Women in Computing in India, 2010, pp. 1-4.\n\nDetecting and categorizing android malware with graph neural networks. P Xu, C Eckert, A Zarras, Proceedings of the 36th Annual ACM Symposium on Applied Computing. the 36th Annual ACM Symposium on Applied ComputingP. Xu, C. Eckert, and A. Zarras, \"Detecting and categorizing android malware with graph neural networks,\" in Proceedings of the 36th Annual ACM Symposium on Applied Computing, 2021, pp. 409-412.\n\nSir-gn: A fast structural iterative representation learning approach for graph nodes. M Joaristi, E Serra, ACM Transactions on Knowledge Discovery from Data (TKDD). 156M. Joaristi and E. Serra, \"Sir-gn: A fast structural iterative representation learning approach for graph nodes,\" ACM Transactions on Knowledge Discovery from Data (TKDD), vol. 15, no. 6, pp. 1-39, 2021.\n\nInferential sir-gn: Scalable graph representation learning. J Layne, E Serra, J. Layne and E. Serra, \"Inferential sir-gn: Scalable graph representation learning,\" 2021.\n\nA unified approach to interpreting model predictions. S M Lundberg, S.-I Lee, Proceedings of the 31st international conference on neural information processing systems. the 31st international conference on neural information processing systemsS. M. Lundberg and S.-I. Lee, \"A unified approach to interpreting model predictions,\" in Proceedings of the 31st international conference on neural information processing systems, 2017, pp. 4768-4777.\n\nFrom local explanations to global understanding with explainable ai for trees. S M Lundberg, G Erion, H Chen, A Degrave, J M Prutkin, B Nair, R Katz, J Himmelfarb, N Bansal, S.-I Lee, Nature machine intelligence. 21S. M. Lundberg, G. Erion, H. Chen, A. DeGrave, J. M. Prutkin, B. Nair, R. Katz, J. Himmelfarb, N. Bansal, and S.-I. Lee, \"From local explanations to global understanding with explainable ai for trees,\" Nature machine intelligence, vol. 2, no. 1, pp. 56-67, 2020.\n\nP Veli\u010dkovi\u0107, G Cucurull, A Casanova, A Romero, P Lio, Y Bengio, arXiv:1710.10903Graph attention networks. arXiv preprintP. Veli\u010dkovi\u0107, G. Cucurull, A. Casanova, A. Romero, P. Lio, and Y. Ben- gio, \"Graph attention networks,\" arXiv preprint arXiv:1710.10903, 2017.\n\nHow powerful are graph neural networks?. K Xu, W Hu, J Leskovec, S Jegelka, arXiv:1810.00826arXiv preprintK. Xu, W. Hu, J. Leskovec, and S. Jegelka, \"How powerful are graph neural networks?\" arXiv preprint arXiv:1810.00826, 2018.\n\nJ Han, J Pei, M Kamber, Data mining: concepts and techniques. ElsevierJ. Han, J. Pei, and M. Kamber, Data mining: concepts and techniques. Elsevier, 2011.\n", "annotations": {"author": "[{\"end\":164,\"start\":127},{\"end\":177,\"start\":165},{\"end\":234,\"start\":178},{\"end\":275,\"start\":235},{\"end\":318,\"start\":276},{\"end\":360,\"start\":319},{\"end\":557,\"start\":361},{\"end\":624,\"start\":558},{\"end\":691,\"start\":625},{\"end\":762,\"start\":692},{\"end\":807,\"start\":763}]", "publisher": null, "author_last_name": "[{\"end\":144,\"start\":135},{\"end\":176,\"start\":172},{\"end\":197,\"start\":188},{\"end\":246,\"start\":241},{\"end\":289,\"start\":284},{\"end\":335,\"start\":326}]", "author_first_name": "[{\"end\":134,\"start\":127},{\"end\":171,\"start\":165},{\"end\":187,\"start\":178},{\"end\":240,\"start\":235},{\"end\":283,\"start\":276},{\"end\":325,\"start\":319}]", "author_affiliation": "[{\"end\":556,\"start\":362},{\"end\":623,\"start\":559},{\"end\":690,\"start\":626},{\"end\":761,\"start\":693},{\"end\":806,\"start\":764}]", "title": "[{\"end\":124,\"start\":1},{\"end\":931,\"start\":808}]", "venue": null, "abstract": "[{\"end\":1733,\"start\":1090}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3621,\"start\":3618},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4063,\"start\":4060},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4171,\"start\":4168},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4392,\"start\":4389},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":4398,\"start\":4394},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4788,\"start\":4784},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4997,\"start\":4993},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5311,\"start\":5307},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":5429,\"start\":5425},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":5841,\"start\":5837},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6012,\"start\":6008},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6095,\"start\":6091},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":6520,\"start\":6516},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":7835,\"start\":7831},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8054,\"start\":8050},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8288,\"start\":8284},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8646,\"start\":8642},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":9808,\"start\":9804},{\"end\":11545,\"start\":11541},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":12312,\"start\":12308},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":12318,\"start\":12314},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":12427,\"start\":12423},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13365,\"start\":13361},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":13439,\"start\":13435},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":16271,\"start\":16267},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":16447,\"start\":16443},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":17116,\"start\":17112},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":18249,\"start\":18245},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":18859,\"start\":18855},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":18955,\"start\":18951},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":19460,\"start\":19456},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":19713,\"start\":19709},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":21373,\"start\":21369},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":21413,\"start\":21409},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":21526,\"start\":21522}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":25945,\"start\":25886},{\"attributes\":{\"id\":\"fig_1\"},\"end\":26031,\"start\":25946},{\"attributes\":{\"id\":\"fig_2\"},\"end\":26083,\"start\":26032},{\"attributes\":{\"id\":\"fig_3\"},\"end\":26250,\"start\":26084},{\"attributes\":{\"id\":\"fig_4\"},\"end\":26334,\"start\":26251},{\"attributes\":{\"id\":\"fig_5\"},\"end\":26367,\"start\":26335},{\"attributes\":{\"id\":\"fig_6\"},\"end\":26522,\"start\":26368},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":26694,\"start\":26523},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":27031,\"start\":26695},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":27343,\"start\":27032},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":28678,\"start\":27344}]", "paragraph": "[{\"end\":1973,\"start\":1752},{\"end\":2331,\"start\":1975},{\"end\":3411,\"start\":2333},{\"end\":4958,\"start\":3433},{\"end\":6714,\"start\":4979},{\"end\":6886,\"start\":6716},{\"end\":6984,\"start\":6888},{\"end\":9390,\"start\":7011},{\"end\":10131,\"start\":9418},{\"end\":10566,\"start\":10133},{\"end\":11028,\"start\":10589},{\"end\":11227,\"start\":11030},{\"end\":11931,\"start\":11229},{\"end\":12113,\"start\":11933},{\"end\":12366,\"start\":12171},{\"end\":12548,\"start\":12368},{\"end\":13194,\"start\":12550},{\"end\":14471,\"start\":13196},{\"end\":15004,\"start\":14473},{\"end\":15530,\"start\":15006},{\"end\":16359,\"start\":15532},{\"end\":17373,\"start\":16361},{\"end\":18711,\"start\":17375},{\"end\":18956,\"start\":18767},{\"end\":19490,\"start\":18958},{\"end\":20255,\"start\":19492},{\"end\":20452,\"start\":20275},{\"end\":21210,\"start\":20487},{\"end\":22292,\"start\":21240},{\"end\":24173,\"start\":22294},{\"end\":24321,\"start\":24175},{\"end\":25158,\"start\":24377},{\"end\":25885,\"start\":25176}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":21717,\"start\":21710},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":22447,\"start\":22439},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":23535,\"start\":23527},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":23615,\"start\":23606},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":24159,\"start\":24117}]", "section_header": "[{\"end\":1750,\"start\":1735},{\"end\":3431,\"start\":3414},{\"end\":4977,\"start\":4961},{\"end\":7009,\"start\":6987},{\"end\":9416,\"start\":9393},{\"end\":10587,\"start\":10569},{\"end\":12169,\"start\":12116},{\"end\":18765,\"start\":18714},{\"end\":20273,\"start\":20258},{\"end\":20485,\"start\":20455},{\"end\":21238,\"start\":21213},{\"end\":24375,\"start\":24324},{\"end\":25174,\"start\":25161},{\"end\":25895,\"start\":25887},{\"end\":25955,\"start\":25947},{\"end\":26041,\"start\":26033},{\"end\":26093,\"start\":26085},{\"end\":26260,\"start\":26252},{\"end\":26344,\"start\":26336},{\"end\":26539,\"start\":26524},{\"end\":26710,\"start\":26696},{\"end\":27046,\"start\":27033},{\"end\":27365,\"start\":27345}]", "table": "[{\"end\":26694,\"start\":26575},{\"end\":27031,\"start\":26774},{\"end\":27343,\"start\":27086},{\"end\":28678,\"start\":27631}]", "figure_caption": "[{\"end\":25945,\"start\":25897},{\"end\":26031,\"start\":25957},{\"end\":26083,\"start\":26043},{\"end\":26250,\"start\":26095},{\"end\":26334,\"start\":26262},{\"end\":26367,\"start\":26346},{\"end\":26522,\"start\":26370},{\"end\":26575,\"start\":26541},{\"end\":26774,\"start\":26713},{\"end\":27086,\"start\":27050},{\"end\":27631,\"start\":27368}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":2836,\"start\":2828},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":8804,\"start\":8796},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":10875,\"start\":10867},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":11750,\"start\":11742},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":20664,\"start\":20656},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":21208,\"start\":21200},{\"end\":24911,\"start\":24903}]", "bib_author_first_name": "[{\"end\":28895,\"start\":28894},{\"end\":28905,\"start\":28904},{\"end\":28907,\"start\":28906},{\"end\":29338,\"start\":29337},{\"end\":29344,\"start\":29343},{\"end\":29354,\"start\":29353},{\"end\":29356,\"start\":29355},{\"end\":29769,\"start\":29768},{\"end\":29782,\"start\":29781},{\"end\":30115,\"start\":30114},{\"end\":30126,\"start\":30125},{\"end\":30134,\"start\":30133},{\"end\":30143,\"start\":30142},{\"end\":30461,\"start\":30460},{\"end\":30470,\"start\":30469},{\"end\":30482,\"start\":30481},{\"end\":30796,\"start\":30795},{\"end\":30805,\"start\":30804},{\"end\":30814,\"start\":30813},{\"end\":31179,\"start\":31178},{\"end\":31188,\"start\":31187},{\"end\":31574,\"start\":31573},{\"end\":31583,\"start\":31582},{\"end\":31592,\"start\":31591},{\"end\":31603,\"start\":31602},{\"end\":31957,\"start\":31956},{\"end\":31966,\"start\":31965},{\"end\":31974,\"start\":31973},{\"end\":31983,\"start\":31982},{\"end\":32434,\"start\":32433},{\"end\":32443,\"start\":32442},{\"end\":32455,\"start\":32454},{\"end\":32763,\"start\":32762},{\"end\":32772,\"start\":32771},{\"end\":32782,\"start\":32781},{\"end\":32794,\"start\":32793},{\"end\":33276,\"start\":33275},{\"end\":33278,\"start\":33277},{\"end\":33287,\"start\":33286},{\"end\":33289,\"start\":33288},{\"end\":33302,\"start\":33301},{\"end\":33304,\"start\":33303},{\"end\":33316,\"start\":33315},{\"end\":33330,\"start\":33329},{\"end\":33332,\"start\":33331},{\"end\":33342,\"start\":33341},{\"end\":33353,\"start\":33352},{\"end\":33355,\"start\":33354},{\"end\":33366,\"start\":33365},{\"end\":33368,\"start\":33367},{\"end\":33744,\"start\":33743},{\"end\":33758,\"start\":33757},{\"end\":33772,\"start\":33771},{\"end\":34023,\"start\":34022},{\"end\":34033,\"start\":34032},{\"end\":34044,\"start\":34043},{\"end\":34052,\"start\":34051},{\"end\":34062,\"start\":34061},{\"end\":34459,\"start\":34458},{\"end\":34471,\"start\":34470},{\"end\":34488,\"start\":34483},{\"end\":34796,\"start\":34795},{\"end\":34806,\"start\":34805},{\"end\":35080,\"start\":35079},{\"end\":35088,\"start\":35087},{\"end\":35098,\"start\":35097},{\"end\":35111,\"start\":35110},{\"end\":35564,\"start\":35563},{\"end\":35570,\"start\":35569},{\"end\":35580,\"start\":35579},{\"end\":35989,\"start\":35988},{\"end\":36001,\"start\":36000},{\"end\":36336,\"start\":36335},{\"end\":36345,\"start\":36344},{\"end\":36500,\"start\":36499},{\"end\":36502,\"start\":36501},{\"end\":36517,\"start\":36513},{\"end\":36970,\"start\":36969},{\"end\":36972,\"start\":36971},{\"end\":36984,\"start\":36983},{\"end\":36993,\"start\":36992},{\"end\":37001,\"start\":37000},{\"end\":37012,\"start\":37011},{\"end\":37014,\"start\":37013},{\"end\":37025,\"start\":37024},{\"end\":37033,\"start\":37032},{\"end\":37041,\"start\":37040},{\"end\":37055,\"start\":37054},{\"end\":37068,\"start\":37064},{\"end\":37370,\"start\":37369},{\"end\":37384,\"start\":37383},{\"end\":37396,\"start\":37395},{\"end\":37408,\"start\":37407},{\"end\":37418,\"start\":37417},{\"end\":37425,\"start\":37424},{\"end\":37677,\"start\":37676},{\"end\":37683,\"start\":37682},{\"end\":37689,\"start\":37688},{\"end\":37701,\"start\":37700},{\"end\":37867,\"start\":37866},{\"end\":37874,\"start\":37873},{\"end\":37881,\"start\":37880}]", "bib_author_last_name": "[{\"end\":28902,\"start\":28896},{\"end\":28912,\"start\":28908},{\"end\":29341,\"start\":29339},{\"end\":29351,\"start\":29345},{\"end\":29361,\"start\":29357},{\"end\":29779,\"start\":29770},{\"end\":29790,\"start\":29783},{\"end\":30123,\"start\":30116},{\"end\":30131,\"start\":30127},{\"end\":30140,\"start\":30135},{\"end\":30156,\"start\":30144},{\"end\":30467,\"start\":30462},{\"end\":30479,\"start\":30471},{\"end\":30492,\"start\":30483},{\"end\":30802,\"start\":30797},{\"end\":30811,\"start\":30806},{\"end\":30820,\"start\":30815},{\"end\":31185,\"start\":31180},{\"end\":31201,\"start\":31189},{\"end\":31580,\"start\":31575},{\"end\":31589,\"start\":31584},{\"end\":31600,\"start\":31593},{\"end\":31608,\"start\":31604},{\"end\":31963,\"start\":31958},{\"end\":31971,\"start\":31967},{\"end\":31980,\"start\":31975},{\"end\":31991,\"start\":31984},{\"end\":32440,\"start\":32435},{\"end\":32452,\"start\":32444},{\"end\":32461,\"start\":32456},{\"end\":32769,\"start\":32764},{\"end\":32779,\"start\":32773},{\"end\":32791,\"start\":32783},{\"end\":32800,\"start\":32795},{\"end\":33284,\"start\":33279},{\"end\":33299,\"start\":33290},{\"end\":33313,\"start\":33305},{\"end\":33327,\"start\":33317},{\"end\":33339,\"start\":33333},{\"end\":33350,\"start\":33343},{\"end\":33363,\"start\":33356},{\"end\":33373,\"start\":33369},{\"end\":33755,\"start\":33745},{\"end\":33769,\"start\":33759},{\"end\":33781,\"start\":33773},{\"end\":34030,\"start\":34024},{\"end\":34041,\"start\":34034},{\"end\":34049,\"start\":34045},{\"end\":34059,\"start\":34053},{\"end\":34076,\"start\":34063},{\"end\":34468,\"start\":34460},{\"end\":34481,\"start\":34472},{\"end\":34495,\"start\":34489},{\"end\":34803,\"start\":34797},{\"end\":34814,\"start\":34807},{\"end\":35085,\"start\":35081},{\"end\":35095,\"start\":35089},{\"end\":35108,\"start\":35099},{\"end\":35119,\"start\":35112},{\"end\":35567,\"start\":35565},{\"end\":35577,\"start\":35571},{\"end\":35587,\"start\":35581},{\"end\":35998,\"start\":35990},{\"end\":36007,\"start\":36002},{\"end\":36342,\"start\":36337},{\"end\":36351,\"start\":36346},{\"end\":36511,\"start\":36503},{\"end\":36521,\"start\":36518},{\"end\":36981,\"start\":36973},{\"end\":36990,\"start\":36985},{\"end\":36998,\"start\":36994},{\"end\":37009,\"start\":37002},{\"end\":37022,\"start\":37015},{\"end\":37030,\"start\":37026},{\"end\":37038,\"start\":37034},{\"end\":37052,\"start\":37042},{\"end\":37062,\"start\":37056},{\"end\":37072,\"start\":37069},{\"end\":37381,\"start\":37371},{\"end\":37393,\"start\":37385},{\"end\":37405,\"start\":37397},{\"end\":37415,\"start\":37409},{\"end\":37422,\"start\":37419},{\"end\":37432,\"start\":37426},{\"end\":37680,\"start\":37678},{\"end\":37686,\"start\":37684},{\"end\":37698,\"start\":37690},{\"end\":37709,\"start\":37702},{\"end\":37871,\"start\":37868},{\"end\":37878,\"start\":37875},{\"end\":37888,\"start\":37882}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":7375363},\"end\":29278,\"start\":28835},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":8270033},\"end\":29703,\"start\":29280},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":16582161},\"end\":30049,\"start\":29705},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":44152637},\"end\":30407,\"start\":30051},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":232371865},\"end\":30739,\"start\":30409},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":5662433},\"end\":31057,\"start\":30741},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":16876251},\"end\":31489,\"start\":31059},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":9072064},\"end\":31884,\"start\":31491},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":12647691},\"end\":32349,\"start\":31886},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":49397116},\"end\":32699,\"start\":32351},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":53081636},\"end\":33146,\"start\":32701},{\"attributes\":{\"id\":\"b11\"},\"end\":33222,\"start\":33148},{\"attributes\":{\"doi\":\"No. MTR170202\",\"id\":\"b12\",\"matched_paper_id\":11053302},\"end\":33671,\"start\":33224},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":234743699},\"end\":33957,\"start\":33673},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":53772734},\"end\":34413,\"start\":33959},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":16882043},\"end\":34711,\"start\":34415},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":59246217},\"end\":35002,\"start\":34713},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":207182180},\"end\":35490,\"start\":35004},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":232173816},\"end\":35900,\"start\":35492},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":236370811},\"end\":36273,\"start\":35902},{\"attributes\":{\"id\":\"b20\"},\"end\":36443,\"start\":36275},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":21889700},\"end\":36888,\"start\":36445},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":214265509},\"end\":37367,\"start\":36890},{\"attributes\":{\"doi\":\"arXiv:1710.10903\",\"id\":\"b23\"},\"end\":37633,\"start\":37369},{\"attributes\":{\"doi\":\"arXiv:1810.00826\",\"id\":\"b24\"},\"end\":37864,\"start\":37635},{\"attributes\":{\"id\":\"b25\"},\"end\":38020,\"start\":37866}]", "bib_title": "[{\"end\":28892,\"start\":28835},{\"end\":29335,\"start\":29280},{\"end\":29766,\"start\":29705},{\"end\":30112,\"start\":30051},{\"end\":30458,\"start\":30409},{\"end\":30793,\"start\":30741},{\"end\":31176,\"start\":31059},{\"end\":31571,\"start\":31491},{\"end\":31954,\"start\":31886},{\"end\":32431,\"start\":32351},{\"end\":32760,\"start\":32701},{\"end\":33273,\"start\":33224},{\"end\":33741,\"start\":33673},{\"end\":34020,\"start\":33959},{\"end\":34456,\"start\":34415},{\"end\":34793,\"start\":34713},{\"end\":35077,\"start\":35004},{\"end\":35561,\"start\":35492},{\"end\":35986,\"start\":35902},{\"end\":36497,\"start\":36445},{\"end\":36967,\"start\":36890}]", "bib_author": "[{\"end\":28904,\"start\":28894},{\"end\":28914,\"start\":28904},{\"end\":29343,\"start\":29337},{\"end\":29353,\"start\":29343},{\"end\":29363,\"start\":29353},{\"end\":29781,\"start\":29768},{\"end\":29792,\"start\":29781},{\"end\":30125,\"start\":30114},{\"end\":30133,\"start\":30125},{\"end\":30142,\"start\":30133},{\"end\":30158,\"start\":30142},{\"end\":30469,\"start\":30460},{\"end\":30481,\"start\":30469},{\"end\":30494,\"start\":30481},{\"end\":30804,\"start\":30795},{\"end\":30813,\"start\":30804},{\"end\":30822,\"start\":30813},{\"end\":31187,\"start\":31178},{\"end\":31203,\"start\":31187},{\"end\":31582,\"start\":31573},{\"end\":31591,\"start\":31582},{\"end\":31602,\"start\":31591},{\"end\":31610,\"start\":31602},{\"end\":31965,\"start\":31956},{\"end\":31973,\"start\":31965},{\"end\":31982,\"start\":31973},{\"end\":31993,\"start\":31982},{\"end\":32442,\"start\":32433},{\"end\":32454,\"start\":32442},{\"end\":32463,\"start\":32454},{\"end\":32771,\"start\":32762},{\"end\":32781,\"start\":32771},{\"end\":32793,\"start\":32781},{\"end\":32802,\"start\":32793},{\"end\":33286,\"start\":33275},{\"end\":33301,\"start\":33286},{\"end\":33315,\"start\":33301},{\"end\":33329,\"start\":33315},{\"end\":33341,\"start\":33329},{\"end\":33352,\"start\":33341},{\"end\":33365,\"start\":33352},{\"end\":33375,\"start\":33365},{\"end\":33757,\"start\":33743},{\"end\":33771,\"start\":33757},{\"end\":33783,\"start\":33771},{\"end\":34032,\"start\":34022},{\"end\":34043,\"start\":34032},{\"end\":34051,\"start\":34043},{\"end\":34061,\"start\":34051},{\"end\":34078,\"start\":34061},{\"end\":34470,\"start\":34458},{\"end\":34483,\"start\":34470},{\"end\":34497,\"start\":34483},{\"end\":34805,\"start\":34795},{\"end\":34816,\"start\":34805},{\"end\":35087,\"start\":35079},{\"end\":35097,\"start\":35087},{\"end\":35110,\"start\":35097},{\"end\":35121,\"start\":35110},{\"end\":35569,\"start\":35563},{\"end\":35579,\"start\":35569},{\"end\":35589,\"start\":35579},{\"end\":36000,\"start\":35988},{\"end\":36009,\"start\":36000},{\"end\":36344,\"start\":36335},{\"end\":36353,\"start\":36344},{\"end\":36513,\"start\":36499},{\"end\":36523,\"start\":36513},{\"end\":36983,\"start\":36969},{\"end\":36992,\"start\":36983},{\"end\":37000,\"start\":36992},{\"end\":37011,\"start\":37000},{\"end\":37024,\"start\":37011},{\"end\":37032,\"start\":37024},{\"end\":37040,\"start\":37032},{\"end\":37054,\"start\":37040},{\"end\":37064,\"start\":37054},{\"end\":37074,\"start\":37064},{\"end\":37383,\"start\":37369},{\"end\":37395,\"start\":37383},{\"end\":37407,\"start\":37395},{\"end\":37417,\"start\":37407},{\"end\":37424,\"start\":37417},{\"end\":37434,\"start\":37424},{\"end\":37682,\"start\":37676},{\"end\":37688,\"start\":37682},{\"end\":37700,\"start\":37688},{\"end\":37711,\"start\":37700},{\"end\":37873,\"start\":37866},{\"end\":37880,\"start\":37873},{\"end\":37890,\"start\":37880}]", "bib_venue": "[{\"end\":29003,\"start\":28914},{\"end\":29441,\"start\":29363},{\"end\":29854,\"start\":29792},{\"end\":30204,\"start\":30158},{\"end\":30551,\"start\":30494},{\"end\":30877,\"start\":30822},{\"end\":31252,\"start\":31203},{\"end\":31661,\"start\":31610},{\"end\":32094,\"start\":31993},{\"end\":32499,\"start\":32463},{\"end\":32900,\"start\":32802},{\"end\":33160,\"start\":33148},{\"end\":33409,\"start\":33388},{\"end\":33790,\"start\":33783},{\"end\":34162,\"start\":34078},{\"end\":34553,\"start\":34497},{\"end\":34839,\"start\":34816},{\"end\":35199,\"start\":35121},{\"end\":35654,\"start\":35589},{\"end\":36065,\"start\":36009},{\"end\":36333,\"start\":36275},{\"end\":36612,\"start\":36523},{\"end\":37101,\"start\":37074},{\"end\":37474,\"start\":37450},{\"end\":37674,\"start\":37635},{\"end\":37926,\"start\":37890},{\"end\":29079,\"start\":29005},{\"end\":29506,\"start\":29443},{\"end\":35264,\"start\":35201},{\"end\":35706,\"start\":35656},{\"end\":36688,\"start\":36614}]"}}}, "year": 2023, "month": 12, "day": 17}