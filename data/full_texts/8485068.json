{"id": 8485068, "updated": "2023-10-01 07:22:40.718", "metadata": {"title": "Aggregated Residual Transformations for Deep Neural Networks", "authors": "[{\"first\":\"Saining\",\"last\":\"Xie\",\"middle\":[]},{\"first\":\"Ross\",\"last\":\"Girshick\",\"middle\":[]},{\"first\":\"Piotr\",\"last\":\"Doll'ar\",\"middle\":[]},{\"first\":\"Zhuowen\",\"last\":\"Tu\",\"middle\":[]},{\"first\":\"Kaiming\",\"last\":\"He\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2016, "month": 11, "day": 16}, "abstract": "We present a simple, highly modularized network architecture for image classification. Our network is constructed by repeating a building block that aggregates a set of transformations with the same topology. Our simple design results in a homogeneous, multi-branch architecture that has only a few hyper-parameters to set. This strategy exposes a new dimension, which we call\"cardinality\"(the size of the set of transformations), as an essential factor in addition to the dimensions of depth and width. On the ImageNet-1K dataset, we empirically show that even under the restricted condition of maintaining complexity, increasing cardinality is able to improve classification accuracy. Moreover, increasing cardinality is more effective than going deeper or wider when we increase the capacity. Our models, named ResNeXt, are the foundations of our entry to the ILSVRC 2016 classification task in which we secured 2nd place. We further investigate ResNeXt on an ImageNet-5K set and the COCO detection set, also showing better results than its ResNet counterpart. The code and models are publicly available online.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1611.05431", "mag": "2953328958", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/cvpr/XieGDTH17", "doi": "10.1109/cvpr.2017.634"}}, "content": {"source": {"pdf_hash": "0171bdeb1c6e333287be655c667cfba5edb89b76", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1611.05431v2.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1611.05431", "status": "GREEN"}}, "grobid": {"id": "69d942c4d651ac139a485c90adc1a2ebd2de31ac", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/0171bdeb1c6e333287be655c667cfba5edb89b76.txt", "contents": "\nAggregated Residual Transformations for Deep Neural Networks\n\n\nSaining Xie s9xie@ucsd.edu \nFacebook AI Research\n\n\nRoss Girshick \nFacebook AI Research\n\n\nPiotr Doll\u00e1r pdollar@fb.com \nFacebook AI Research\n\n\nZhuowen Tu \nFacebook AI Research\n\n\nKaiming He kaiminghe@fb.com \nFacebook AI Research\n\n\nU C San \nFacebook AI Research\n\n\nDiego \nFacebook AI Research\n\n\nAggregated Residual Transformations for Deep Neural Networks\n\nWe present a simple, highly modularized network architecture for image classification. Our network is constructed by repeating a building block that aggregates a set of transformations with the same topology. Our simple design results in a homogeneous, multi-branch architecture that has only a few hyper-parameters to set. This strategy exposes a new dimension, which we call \"cardinality\" (the size of the set of transformations), as an essential factor in addition to the dimensions of depth and width. On the ImageNet-1K dataset, we empirically show that even under the restricted condition of maintaining complexity, increasing cardinality is able to improve classification accuracy. Moreover, increasing cardinality is more effective than going deeper or wider when we increase the capacity. Our models, named ResNeXt, are the foundations of our entry to the ILSVRC 2016 classification task in which we secured 2nd place. We further investigate ResNeXt on an ImageNet-5K set and the COCO detection set, also showing better results than its ResNet counterpart. The code and models are publicly available online 1 .\n\nIntroduction\n\nResearch on visual recognition is undergoing a transition from \"feature engineering\" to \"network engineering\" [25,24,44,34,36,38,14]. In contrast to traditional handdesigned features (e.g., SIFT [29] and HOG [5]), features learned by neural networks from large-scale data [33] require minimal human involvement during training, and can be transferred to a variety of recognition tasks [7,10,28]. Nevertheless, human effort has been shifted to designing better network architectures for learning representations.\n\nDesigning architectures becomes increasingly difficult with the growing number of hyper-parameters (width 2 , filter sizes, strides, etc.), especially when there are many layers. The VGG-nets [36] exhibit a simple yet effective strategy of constructing very deep networks: stacking build-1 https://github.com/facebookresearch/ResNeXt 2 Width refers to the number of channels in a layer.   [14]. Right: A block of ResNeXt with cardinality = 32, with roughly the same complexity. A layer is shown as (# in channels, filter size, # out channels).\n\ning blocks of the same shape. This strategy is inherited by ResNets [14] which stack modules of the same topology. This simple rule reduces the free choices of hyperparameters, and depth is exposed as an essential dimension in neural networks. Moreover, we argue that the simplicity of this rule may reduce the risk of over-adapting the hyperparameters to a specific dataset. The robustness of VGGnets and ResNets has been proven by various visual recognition tasks [7,10,9,28,31,14] and by non-visual tasks involving speech [42,30] and language [4,41,20].\n\nUnlike VGG-nets, the family of Inception models [38,17,39,37] have demonstrated that carefully designed topologies are able to achieve compelling accuracy with low theoretical complexity. The Inception models have evolved over time [38,39], but an important common property is a split-transform-merge strategy. In an Inception module, the input is split into a few lower-dimensional embeddings (by 1\u00d71 convolutions), transformed by a set of specialized filters (3\u00d73, 5\u00d75, etc.), and merged by concatenation. It can be shown that the solution space of this architecture is a strict subspace of the solution space of a single large layer (e.g., 5\u00d75) operating on a high-dimensional embedding. The split-transform-merge behavior of Inception modules is expected to approach the representational power of large and dense layers, but at a considerably lower computational complexity.\n\nDespite good accuracy, the realization of Inception models has been accompanied with a series of complicating fac-tors -the filter numbers and sizes are tailored for each individual transformation, and the modules are customized stage-by-stage. Although careful combinations of these components yield excellent neural network recipes, it is in general unclear how to adapt the Inception architectures to new datasets/tasks, especially when there are many factors and hyper-parameters to be designed.\n\nIn this paper, we present a simple architecture which adopts VGG/ResNets' strategy of repeating layers, while exploiting the split-transform-merge strategy in an easy, extensible way. A module in our network performs a set of transformations, each on a low-dimensional embedding, whose outputs are aggregated by summation. We pursuit a simple realization of this idea -the transformations to be aggregated are all of the same topology (e.g., Fig. 1 (right)). This design allows us to extend to any large number of transformations without specialized designs.\n\nInterestingly, under this simplified situation we show that our model has two other equivalent forms (Fig. 3). The reformulation in Fig. 3(b) appears similar to the Inception-ResNet module [37] in that it concatenates multiple paths; but our module differs from all existing Inception modules in that all our paths share the same topology and thus the number of paths can be easily isolated as a factor to be investigated. In a more succinct reformulation, our module can be reshaped by Krizhevsky et al.'s grouped convolutions [24] (Fig. 3(c)), which, however, had been developed as an engineering compromise.\n\nWe empirically demonstrate that our aggregated transformations outperform the original ResNet module, even under the restricted condition of maintaining computational complexity and model size -e.g., Fig. 1(right) is designed to keep the FLOPs complexity and number of parameters of Fig. 1(left). We emphasize that while it is relatively easy to increase accuracy by increasing capacity (going deeper or wider), methods that increase accuracy while maintaining (or reducing) complexity are rare in the literature.\n\nOur method indicates that cardinality (the size of the set of transformations) is a concrete, measurable dimension that is of central importance, in addition to the dimensions of width and depth. Experiments demonstrate that increasing cardinality is a more effective way of gaining accuracy than going deeper or wider, especially when depth and width starts to give diminishing returns for existing models.\n\nOur neural networks, named ResNeXt (suggesting the next dimension), outperform ResNet-101/152 [14], ResNet-200 [15], Inception-v3 [39], and Inception-ResNet-v2 [37] on the ImageNet classification dataset. In particular, a 101-layer ResNeXt is able to achieve better accuracy than ResNet-200 [15] but has only 50% complexity. Moreover, ResNeXt exhibits considerably simpler designs than all Inception models. ResNeXt was the foundation of our submission to the ILSVRC 2016 classification task, in which we secured second place. This paper further evaluates ResNeXt on a larger ImageNet-5K set and the COCO object detection dataset [27], showing consistently better accuracy than its ResNet counterparts. We expect that ResNeXt will also generalize well to other visual (and non-visual) recognition tasks.\n\n\nRelated Work\n\nMulti-branch convolutional networks. The Inception models [38,17,39,37] are successful multi-branch architectures where each branch is carefully customized. ResNets [14] can be thought of as two-branch networks where one branch is the identity mapping. Deep neural decision forests [22] are tree-patterned multi-branch networks with learned splitting functions.\n\nGrouped convolutions. The use of grouped convolutions dates back to the AlexNet paper [24], if not earlier. The motivation given by Krizhevsky et al. [24] is for distributing the model over two GPUs. Grouped convolutions are supported by Caffe [19], Torch [3], and other libraries, mainly for compatibility of AlexNet. To the best of our knowledge, there has been little evidence on exploiting grouped convolutions to improve accuracy. A special case of grouped convolutions is channel-wise convolutions in which the number of groups is equal to the number of channels. Channel-wise convolutions are part of the separable convolutions in [35].\n\nCompressing convolutional networks. Decomposition (at spatial [6,18] and/or channel [6,21,16] level) is a widely adopted technique to reduce redundancy of deep convolutional networks and accelerate/compress them. Ioannou et al. [16] present a \"root\"-patterned network for reducing computation, and branches in the root are realized by grouped convolutions. These methods [6,18,21,16] have shown elegant compromise of accuracy with lower complexity and smaller model sizes. Instead of compression, our method is an architecture that empirically shows stronger representational power.\n\nEnsembling. Averaging a set of independently trained networks is an effective solution to improving accuracy [24], widely adopted in recognition competitions [33]. Veit et al. [40] interpret a single ResNet as an ensemble of shallower networks, which results from ResNet's additive behaviors [15]. Our method harnesses additions to aggregate a set of transformations. But we argue that it is imprecise to view our method as ensembling, because the members to be aggregated are trained jointly, not independently.\n\n\nMethod\n\n\nTemplate\n\nWe adopt a highly modularized design following VGG/ResNets. Our network consists of a stack of resid-  Fig. 3(c)). Inside the brackets are the shape of a residual block, and outside the brackets is the number of stacked blocks on a stage. \"C=32\" suggests grouped convolutions [24] with 32 groups. The numbers of parameters and FLOPs are similar between these two models.\n\nual blocks. These blocks have the same topology, and are subject to two simple rules inspired by VGG/ResNets: (i) if producing spatial maps of the same size, the blocks share the same hyper-parameters (width and filter sizes), and (ii) each time when the spatial map is downsampled by a factor of 2, the width of the blocks is multiplied by a factor of 2. The second rule ensures that the computational complexity, in terms of FLOPs (floating-point operations, in # of multiply-adds), is roughly the same for all blocks. With these two rules, we only need to design a template module, and all modules in a network can be determined accordingly. So these two rules greatly narrow down the design space and allow us to focus on a few key factors. The networks constructed by these rules are in Table 1.\n\n\nRevisiting Simple Neurons\n\nThe simplest neurons in artificial neural networks perform inner product (weighted sum), which is the elementary transformation done by fully-connected and convolutional layers. Inner product can be thought of as a form of aggregating transformation:\nD i=1 w i x i ,(1)where x = [x 1 , x 2 , ..., x D ]\nis a D-channel input vector to the neuron and w i is a filter's weight for the i-th chan- Figure 2. A simple neuron that performs inner product.\n....... + x 1 x 2 x D x 3 w 1 w 2 w 3 w D x\nnel. This operation (usually including some output nonlinearity) is referred to as a \"neuron\". See Fig. 2.\n\nThe above operation can be recast as a combination of splitting, transforming, and aggregating. (i) Splitting: the vector x is sliced as a low-dimensional embedding, and in the above, it is a single-dimension subspace x i . (ii) Transforming: the low-dimensional representation is transformed, and in the above, it is simply scaled:\nw i x i . (iii) Aggregating: the transformations in all embeddings are ag- gregated by D i=1 .\n\nAggregated Transformations\n\nGiven the above analysis of a simple neuron, we consider replacing the elementary transformation (w i x i ) with a more generic function, which in itself can also be a network. In contrast to \"Network-in-Network\" [26] that turns out to increase the dimension of depth, we show that our \"Network-in-Neuron\" expands along a new dimension.\n\nFormally, we present aggregated transformations as:\nF(x) = C i=1 T i (x),(2)\nwhere T i (x) can be an arbitrary function. Analogous to a simple neuron, T i should project x into an (optionally lowdimensional) embedding and then transform it. In Eqn.(2), C is the size of the set of transformations to be aggregated. We refer to C as cardinality [2]. In Eqn.\n\n(2) C is in a position similar to D in Eqn.(1), but C need not equal D and can be an arbitrary number. While the dimension of width is related to the number of simple transformations (inner product), we argue that the dimension of cardinality controls the number of more complex transformations. We show by experiments that cardinality is an essential dimension and can be more effective than the dimensions of width and depth.\n\nIn this paper, we consider a simple way of designing the transformation functions: all T i 's have the same topology. This extends the VGG-style strategy of repeating layers of the same shape, which is helpful for isolating a few factors and extending to any large number of transformations. We set the individual transformation T i to be the bottleneckshaped architecture [14], as illustrated in Fig. 1 (right). In this case, the first 1\u00d71 layer in each T i produces the lowdimensional embedding.  , implemented as grouped convolutions [24]. Notations in bold text highlight the reformulation changes. A layer is denoted as (# input channels, filter size, # output channels).\n\nThe aggregated transformation in Eqn.\n\n(2) serves as the residual function [14] (Fig. 1 right):\ny = x + C i=1 T i (x),(3)\nwhere y is the output.\n\nRelation to Inception-ResNet. Some tensor manipulations show that the module in Fig. 1(right) (also shown in Fig. 3(a)) is equivalent to Fig. 3(b). 3 Fig. 3(b) appears similar to the Inception-ResNet [37] block in that it involves branching and concatenating in the residual function. But unlike all Inception or Inception-ResNet modules, we share the same topology among the multiple paths. Our module requires minimal extra effort designing each path.\n\nRelation to Grouped Convolutions. The above module becomes more succinct using the notation of grouped convolutions [24]. 4 This reformulation is illustrated in Fig. 3(c). All the low-dimensional embeddings (the first 1\u00d71 layers) can be replaced by a single, wider layer (e.g., 1\u00d71, 128-d in Fig 3(c)). Splitting is essentially done by the grouped convolutional layer when it divides its input channels into groups. The grouped convolutional layer in Fig. 3(c) performs 32 groups of convolutions whose input and output channels are 4-dimensional. The grouped convolutional layer concatenates them as the outputs of the layer. The block in Fig. 3(c) looks like the original bottleneck residual block in Fig. 1(left), except that Fig. 3(c) is a wider but sparsely connected module. 3 An informal but descriptive proof is as follows. Note the equality:\nA 1 B 1 + A 2 B 2 = [A 1 , A 2 ][B 1 ; B 2 ] where [ , ]\nis horizontal concatenation and [ ; ] is vertical concatenation. Let A i be the weight of the last layer and B i be the output response of the second-last layer in the block. In the case of C = 2, the element-wise addition in Fig. 3(a) is A 1 B 1 + A 2 B 2 , the weight of the last layer in Fig. 3(b) is [A 1 , A 2 ], and the concatenation of outputs of second-last layers in Fig. 3(b) is [B 1 ; B 2 ]. 4 In a group conv layer [24], input and output channels are divided into C groups, and convolutions are separately performed within each group. We note that the reformulations produce nontrivial topologies only when the block has depth \u22653. If the block has depth = 2 (e.g., the basic block in [14]), the reformulations lead to trivially a wide, dense module. See the illustration in Fig. 4.\n\n\nDiscussion.\n\nWe note that although we present reformulations that exhibit concatenation ( Fig. 3(b)) or grouped convolutions (Fig. 3(c)), such reformulations are not always applicable for the general form of Eqn.(3), e.g., if the transformation T i takes arbitrary forms and are heterogenous. We choose to use homogenous forms in this paper because they are simpler and extensible. Under this simplified case, grouped convolutions in the form of Fig. 3(c) are helpful for easing implementation.\n\n\nModel Capacity\n\nOur experiments in the next section will show that our models improve accuracy when maintaining the model complexity and number of parameters. This is not only interesting in practice, but more importantly, the complexity and number of parameters represent inherent capacity of models and thus are often investigated as fundamental properties of deep networks [8].\n\nWhen we evaluate different cardinalities C while preserving complexity, we want to minimize the modification of other hyper-parameters. We choose to adjust the width of cardinality C  the bottleneck (e.g., 4-d in Fig 1(right)), because it can be isolated from the input and output of the block. This strategy introduces no change to other hyper-parameters (depth or input/output width of blocks), so is helpful for us to focus on the impact of cardinality. In Fig. 1(left), the original ResNet bottleneck block [14] has 256 \u00b7 64 + 3 \u00b7 3 \u00b7 64 \u00b7 64 + 64 \u00b7 256 \u2248 70k parameters and proportional FLOPs (on the same feature map size). With bottleneck width d, our template in Fig. 1(right) has:\nC \u00b7 (256 \u00b7 d + 3 \u00b7 3 \u00b7 d \u00b7 d + d \u00b7 256)(4)\nparameters and proportional FLOPs. When C = 32 and d = 4, Eqn.(4) \u2248 70k. Table 2 shows the relationship between cardinality C and bottleneck width d.\n\nBecause we adopt the two rules in Sec. 3.1, the above approximate equality is valid between a ResNet bottleneck block and our ResNeXt on all stages (except for the subsampling layers where the feature maps size changes). Table 1 compares the original ResNet-50 and our ResNeXt-50 that is of similar capacity. 5 We note that the complexity can only be preserved approximately, but the difference of the complexity is minor and does not bias our results.\n\n\nImplementation details\n\nOur implementation follows [14] and the publicly available code of fb.resnet.torch [11]. On the ImageNet dataset, the input image is 224\u00d7224 randomly cropped from a resized image using the scale and aspect ratio augmentation of [38] implemented by [11]. The shortcuts are identity connections except for those increasing dimensions which are projections (type B in [14]). Downsampling of conv3, 4, and 5 is done by stride-2 convolutions in the 3\u00d73 layer of the first block in each stage, as suggested in [11]. We use SGD with a mini-batch size of 256 on 8 GPUs (32 per GPU). The weight decay is 0.0001 and the momentum is 0.9. We start from a learning rate of 0.1, and divide it by 10 for three times using the schedule in [11]. We adopt the weight initialization of [13]. In all ablation comparisons, we evaluate the error on the single 224\u00d7224 center crop from an image whose shorter side is 256.\n\nOur models are realized by the form of Fig. 3(c). We perform batch normalization (BN) [17] right after the con-volutions in Fig. 3(c). 6 ReLU is performed right after each BN, expect for the output of the block where ReLU is performed after the adding to the shortcut, following [14].\n\nWe note that the three forms in Fig. 3 are strictly equivalent, when BN and ReLU are appropriately addressed as mentioned above. We have trained all three forms and obtained the same results. We choose to implement by Fig. 3(c) because it is more succinct and faster than the other two forms.\n\n\nExperiments\n\n\nExperiments on ImageNet-1K\n\nWe conduct ablation experiments on the 1000-class Im-ageNet classification task [33]. We follow [14] to construct 50-layer and 101-layer residual networks. We simply replace all blocks in ResNet-50/101 with our blocks.\n\nNotations. Because we adopt the two rules in Sec. 3.1, it is sufficient for us to refer to an architecture by the template.\n\nFor example, Table 1 shows a ResNeXt-50 constructed by a template with cardinality = 32 and bottleneck width = 4d (Fig. 3). This network is denoted as ResNeXt-50 (32\u00d74d) for simplicity. We note that the input/output width of the template is fixed as 256-d (Fig. 3), and all widths are doubled each time when the feature map is subsampled (see Table 1).\n\nCardinality vs. Width. We first evaluate the trade-off between cardinality C and bottleneck width, under preserved complexity as listed in Table 2. Table 3 shows the results and Fig. 5 shows the curves of error vs. epochs. Comparing with ResNet-50 (Table 3 top and Fig. 5 left), the 32\u00d74d ResNeXt-50 has a validation error of 22.2%, which is 1.7% lower than the ResNet baseline's 23.9%. With cardinality C increasing from 1 to 32 while keeping complexity, the error rate keeps reducing. Furthermore, the 32\u00d74d ResNeXt also has a much lower training error than the ResNet counterpart, suggesting that the gains are not from regularization but from stronger representations.\n\nSimilar trends are observed in the case of ResNet-101 (Fig. 5 right, Table 3 bottom), where the 32\u00d74d ResNeXt-101 outperforms the ResNet-101 counterpart by 0.8%. Although this improvement of validation error is smaller than that of the 50-layer case, the improvement of training error is still big (20% for ResNet-101 and 16% for 32\u00d74d ResNeXt-101, Fig. 5 right). In fact, more training data will enlarge the gap of validation error, as we show on an ImageNet-5K set in the next subsection. Table 3 also suggests that with complexity preserved, increasing cardinality at the price of reducing width starts to show saturating accuracy when the bottleneck width is  small. We argue that it is not worthwhile to keep reducing width in such a trade-off. So we adopt a bottleneck width no smaller than 4d in the following.\n\nIncreasing Cardinality vs. Deeper/Wider. Next we investigate increasing complexity by increasing cardinality C or increasing depth or width. The following comparison can also be viewed as with reference to 2\u00d7 FLOPs of the ResNet-101 baseline. We compare the following variants that have \u223c15 billion FLOPs. (i) Going deeper to 200 layers. We adopt the ResNet-200 [15] implemented in [11].\n\n(ii) Going wider by increasing the bottleneck width. (iii) Increasing cardinality by doubling C. Table 4 shows that increasing complexity by 2\u00d7 consistently reduces error vs. the ResNet-101 baseline (22.0%). But the improvement is small when going deeper (ResNet-200, by 0.3%) or wider (wider ResNet-101, by 0.7%).\n\nOn the contrary, increasing cardinality C shows much better results than going deeper or wider. The 2\u00d764d ResNeXt-101 (i.e., doubling C on 1\u00d764d ResNet-101 baseline and keeping the width) reduces the top-1 error by 1.3% to 20.7%. The 64\u00d74d ResNeXt-101 (i.e., doubling C on 32\u00d74d ResNeXt-101 and keeping the width) reduces the top-1 error to 20.4%. We also note that 32\u00d74d ResNet-101 (21.2%) performs better than the deeper ResNet-200 and the wider ResNet-101, even though it has only \u223c50% complexity. This again shows that cardinality is a more effective dimension than the dimensions of depth and width. Removing shortcuts from the ResNeXt-50 increases the error by 3.9 points to 26.1%. Removing shortcuts from its ResNet-50 counterpart is much worse (31.2%). These comparisons suggest that the residual connections are helpful for optimization, whereas aggregated transformations are stronger representations, as shown by the fact that they perform consistently better than their counterparts with or without residual connections.\n\nPerformance. For simplicity we use Torch's built-in grouped convolution implementation, without special optimization. We note that this implementation was brute-force and not parallelization-friendly. On 8 GPUs of NVIDIA M40, training 32\u00d74d ResNeXt-101 in Table 3 takes 0.95s per mini-batch, vs. 0.70s of ResNet-101 baseline that has similar FLOPs. We argue that this is a reasonable overhead. We expect carefully engineered lower-level implementation (e.g., in CUDA) will reduce this overhead. We also expect that the inference time on CPUs will present less overhead. Training the 2\u00d7complexity model (64\u00d74d ResNeXt-101) takes 1.7s per mini-batch and 10 days total on 8 GPUs.\n\nComparisons with state-of-the-art results. Table 5 shows more results of single-crop testing on the ImageNet validation set. In addition to testing a 224\u00d7224 crop, we also evaluate a 320\u00d7320 crop following [15]. Our results compare favorably with ResNet, Inception-v3/v4, and Inception-ResNet-v2, achieving a single-crop top-5 error rate of 4.4%. In addition, our architecture design is much simpler than all Inception models, and requires considerably fewer hyper-parameters to be set by hand.\n\nResNeXt is the foundation of our entries to the ILSVRC 2016 classification task, in which we achieved 2 nd place. We note that many models (including ours) start to get saturated on this dataset after using multi-scale and/or multicrop testing. We had a single-model top-1/top-5 error rates of 17.7%/3.7% using the multi-scale dense testing in [14], on par with Inception-ResNet-v2's single-model results of 17.8%/3.7% that adopts multi-scale, multi-crop testing. We had an ensemble result of 3.03% top-5 error on the test set, on par with the winner's 2.99% and Inception-v4/Inception-ResNet-v2's 3.08% [37].  Table 5. State-of-the-art models on the ImageNet-1K validation set (single-crop testing). The test size of ResNet/ResNeXt is 224\u00d7224 and 320\u00d7320 as in [15] and of the Inception models is 299\u00d7299.   Table 6. Error (%) on ImageNet-5K. The models are trained on ImageNet-5K and tested on the ImageNet-1K val set, treated as a 5K-way classification task or a 1K-way classification task at test time. ResNeXt and its ResNet counterpart have similar complexity. The error is evaluated on the single crop of 224\u00d7224 pixels.\n\n\nExperiments on ImageNet-5K\n\nThe performance on ImageNet-1K appears to saturate. But we argue that this is not because of the capability of the models but because of the complexity of the dataset. Next we evaluate our models on a larger ImageNet subset that has 5000 categories.\n\nOur 5K dataset is a subset of the full ImageNet-22K set [33]. The 5000 categories consist of the original ImageNet-1K categories and additional 4000 categories that have the largest number of images in the full ImageNet set. The 5K set has 6.8 million images, about 5\u00d7 of the 1K set. There is no official train/val split available, so we opt to evaluate on the original ImageNet-1K validation set. On this 1K-class val set, the models can be evaluated as a 5K-way classification task (all labels predicted to be the other 4K classes are automatically erroneous) or as a 1K-way classification task (softmax is applied only on the 1K classes) at test time.\n\nThe implementation details are the same as in Sec. 4 are trained for the same number of mini-batches as the 1Ktraining models (so 1/5\u00d7 epochs). Table 6 and Fig. 6 show the comparisons under preserved complexity. ResNeXt-50 reduces the 5K-way top-1 error by 3.2% comparing with ResNet-50, and ResNetXt-101 reduces the 5K-way top-1 error by 2.3% comparing with ResNet-101. Similar gaps are observed on the 1K-way error. These demonstrate the stronger representational power of ResNeXt. Moreover, we find that the models trained on the 5K set (with 1K-way error 22.2%/5.7% in Table 6) perform competitively comparing with those trained on the 1K set (21.2%/5.6% in Table 3), evaluated on the same 1K-way classification task on the validation set. This result is achieved without increasing the training time (due to the same number of mini-batches) and without fine-tuning. We argue that this is a promising result, given that the training task of classifying 5K categories is a more challenging one.\n\n\nExperiments on CIFAR\n\nWe conduct more experiments on CIFAR-10 and 100 datasets [23]. We use the architectures as in [14] and replace the basic residual block by the bottleneck template of \uf8ee \uf8ef \uf8f0 1\u00d71, 64 3\u00d73, 64 1\u00d71, 256 \uf8f9 \uf8fa \uf8fb. Our networks start with a single 3\u00d73 conv layer, followed by 3 stages each having 3 residual blocks, and end with average pooling and a fully-connected classifier (total 29-layer deep), following [14]. We adopt the same translation and flipping data augmentation as [14]. Implementation details are in the appendix.\n\nWe compare two cases of increasing complexity based on the above baseline: (i) increase cardinality and fix all widths, or (ii) increase width of the bottleneck and fix cardinality = 1. We train and evaluate a series of networks under these changes. Fig. 7 shows the comparisons of test error rates vs. model sizes. We find that increasing cardinality is more effective than increasing width, consistent to what we have observed on ImageNet-1K. Table 7 shows the results and model sizes, comparing with the Wide ResNet [43] which is the best published record. Our model with a similar model size (34.4M) shows results better than Wide ResNet. Our larger method achieves 3.58% test error (average of 10 runs) on CIFAR-10 and 17.31% on CIFAR-100. To the best of our knowledge, these are the state-of-the-art results (with similar data augmentation) in the literature including unpublished technical reports. \n\n\nExperiments on COCO object detection\n\nNext we evaluate the generalizability on the COCO object detection set [27]. We train the models on the 80k training set plus a 35k val subset and evaluate on a 5k val subset (called minival), following [1]. We evaluate the COCOstyle Average Precision (AP) as well as AP@IoU=0.5 [27]. We adopt the basic Faster R-CNN [32] and follow [14] to plug ResNet/ResNeXt into it. The models are pre-trained on ImageNet-1K and fine-tuned on the detection set. Implementation details are in the appendix. Table 8 shows the comparisons. On the 50-layer baseline, ResNeXt improves AP@0.5 by 2.1% and AP by 1.0%, without increasing complexity. ResNeXt shows smaller improvements on the 101-layer baseline. We conjecture that more training data will lead to a larger gap, as observed on the ImageNet-5K set.\n\nIt is also worth noting that recently ResNeXt has been adopted in Mask R-CNN [12] that achieves state-of-the-art results on COCO instance segmentation and object detection tasks.\n\n\nA. Implementation Details: CIFAR\n\nWe train the models on the 50k training set and evaluate on the 10k test set. The input image is 32\u00d732 randomly cropped from a zero-padded 40\u00d740 image or its flipping, following [14]. No other data augmentation is used. The first layer is 3\u00d73 conv with 64 filters. There are 3 stages each having 3 residual blocks, and the output map size is 32, 16, and 8 for each stage [14]. The network ends with a global average pooling and a fully-connected layer. Width is increased by 2\u00d7 when the stage changes (downsampling), as in Sec. 3.1. The models are trained on 8 GPUs with a mini-batch size of 128, with a weight decay of 0.0005 and a momentum of 0.9. We start with a learning rate of 0.1 and train the models for 300 epochs, reducing the learning rate at the 150-th and 225-th epoch. Other implementation details are as in [11].\n\n\nB. Implementation Details: Object Detection\n\nWe adopt the Faster R-CNN system [32]. For simplicity we do not share the features between RPN and Fast R-CNN. In the RPN step, we train on 8 GPUs with each GPU holding 2 images per mini-batch and 256 anchors per image. We train the RPN step for 120k mini-batches at a learning rate of 0.02 and next 60k at 0.002. In the Fast R-CNN step, we train on 8 GPUs with each GPU holding 1 image and 64 regions per mini-batch. We train the Fast R-CNN step for 120k mini-batches at a learning rate of 0.005 and next 60k at 0.0005, We use a weight decay of 0.0001 and a momentum of 0.9. Other implementation details are as in https:// github.com/rbgirshick/py-faster-rcnn.\n\nFigure 1 .\n1Left: A block of ResNet\n\nFigure 3 .\n3Equivalent building blocks of ResNeXt. (a): Aggregated residual transformations, the same as Fig. 1 right. (b): A block equivalent to (a), implemented as early concatenation. (c): A block equivalent to (a,b)\n\nFigure 4 .\n4(Left): Aggregating transformations of depth = 2. (Right): An equivalent block, which is trivially wider.\n\nFigure 5 .\n5Training curves on ImageNet-1K. (Left): ResNet/ResNeXt-50 with preserved complexity (\u223c4.1 billion FLOPs, \u223c25 million parameters); (Right): ResNet/ResNeXt-101 with preserved complexity (\u223c7.8 billion FLOPs, \u223c44 million parameters). setting top-1 error (%)\n\nFigure 6 .\n6ImageNet-5K experiments. Models are trained on the 5K set and evaluated on the original 1K validation set, plotted as a 1K-way classification task. ResNeXt and its ResNet counterpart have similar complexity.\n\nTable 2 .\n2Relations between cardinality and width (for the template \nof conv2), with roughly preserved complexity on a residual block. \nThe number of parameters is \u223c70k for the template of conv2. The \nnumber of FLOPs is \u223c0.22 billion (# params\u00d756\u00d756 for conv2). \n\n\n\n\n. The 5K-training models are all trained from scratch, and # params CIFAR-10 CIFAR-100Table 7. Test error (%) and model size on CIFAR. Our results are the average of 10 runs.Wide ResNet [43] \n36.5M \n4.17 \n20.50 \nResNeXt-29, 8\u00d764d \n34.4M \n3.65 \n17.77 \nResNeXt-29, 16\u00d764d 68.1M \n3.58 \n17.31 \n\n\n\n\nFigure 7. Test error vs. model size on CIFAR-10. The results are computed with 10 runs, shown with standard error bars. The labels show the settings of the templates.Table 8. Object detection results on the COCO minival set. ResNeXt and its ResNet counterpart have similar complexity.4 \n8 \n16 \n32 \n64 \n128 \n\n# of parameters (M) \n\n3.5 \n\n3.6 \n\n3.7 \n\n3.8 \n\n3.9 \n\n4.0 \n\n4.1 \n\n4.2 \n\n4.3 \n\n4.4 \n\n4.5 \n\ntest error (%) \n\nResNet-29 (increase width) \nResNeXt-29 (increase cardinality) \n\n1x64d \n\n16x64d \n\n8x64d \n\n4x64d \n\n2x64d \n\n1x384d \n\n1x128d \n\n1x256d \n\n1x192d \n\nsetting \nAP@0.5 \nAP \n\nResNet-50 \n1 \u00d7 64d \n47.6 \n26.5 \nResNeXt-50 \n32 \u00d7 4d \n49.7 \n27.5 \nResNet-101 \n1 \u00d7 64d \n51.1 \n29.8 \nResNeXt-101 \n32 \u00d7 4d \n51.9 \n30.0 \n\n\nThe marginally smaller number of parameters and marginally higher FLOPs are mainly caused by the blocks where the map sizes change.\nWith BN, for the equivalent form inFig. 3(a), BN is employed after aggregating the transformations and before adding to the shortcut.\nAcknowledgmentS.X. and Z.T.'s research was partly supported by NSF IIS-1618477. The authors would like to thank Tsung-Yi Lin and Priya Goyal for valuable discussions.\nInsideoutside net: Detecting objects in context with skip pooling and recurrent neural networks. S Bell, C L Zitnick, K Bala, R Girshick, CVPR. S. Bell, C. L. Zitnick, K. Bala, and R. Girshick. Inside- outside net: Detecting objects in context with skip pooling and recurrent neural networks. In CVPR, 2016.\n\n\u00dcber unendliche, lineare punktmannichfaltigkeiten, arbeiten zur mengenlehre aus den jahren. G Cantor, 1872-1884. 1884G. Cantor.\u00dcber unendliche, lineare punktmannich- faltigkeiten, arbeiten zur mengenlehre aus den jahren 1872-1884. 1884.\n\nTorch: a modular machine learning software library. R Collobert, S Bengio, J Mari\u00e9thoz, IdiapTechnical reportR. Collobert, S. Bengio, and J. Mari\u00e9thoz. Torch: a modular machine learning software library. Technical report, Idiap, 2002.\n\nA Conneau, H Schwenk, L Barrault, Y Lecun, arXiv:1606.01781Very deep convolutional networks for natural language processing. A. Conneau, H. Schwenk, L. Barrault, and Y. Le- cun. Very deep convolutional networks for natural lan- guage processing. arXiv:1606.01781, 2016.\n\nHistograms of oriented gradients for human detection. N Dalal, B Triggs, CVPR. N. Dalal and B. Triggs. Histograms of oriented gradi- ents for human detection. In CVPR, 2005.\n\nExploiting linear structure within convolutional networks for efficient evaluation. E Denton, W Zaremba, J Bruna, Y Lecun, R Fergus, NIPS. E. Denton, W. Zaremba, J. Bruna, Y. LeCun, and R. Fergus. Exploiting linear structure within convo- lutional networks for efficient evaluation. In NIPS, 2014.\n\nDecaf: A deep convolutional activation feature for generic visual recognition. J Donahue, Y Jia, O Vinyals, J Hoffman, N Zhang, E Tzeng, T Darrell, ICML. J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang, E. Tzeng, and T. Darrell. Decaf: A deep convolutional activation feature for generic visual recognition. In ICML, 2014.\n\nD Eigen, J Rolfe, R Fergus, Y Lecun, arXiv:1312.1847Understanding deep architectures using a recursive convolutional network. D. Eigen, J. Rolfe, R. Fergus, and Y. LeCun. Under- standing deep architectures using a recursive convolu- tional network. arXiv:1312.1847, 2013.\n\nFast R-CNN. R Girshick, ICCV. R. Girshick. Fast R-CNN. In ICCV, 2015.\n\nRich feature hierarchies for accurate object detection and semantic segmentation. R Girshick, J Donahue, T Darrell, J Malik, CVPR. R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hierarchies for accurate object detection and semantic segmentation. In CVPR, 2014.\n\nTraining and investigating Residual Nets. S Gross, M Wilber, S. Gross and M. Wilber. Training and investi- gating Residual Nets. https://github.com/ facebook/fb.resnet.torch, 2016.\n\n. K He, G Gkioxari, P Doll\u00e1r, R Girshick, arXiv:1703.06870Mask R-CNN. K. He, G. Gkioxari, P. Doll\u00e1r, and R. Girshick. Mask R-CNN. arXiv:1703.06870, 2017.\n\nDelving deep into rectifiers: Surpassing human-level performance on imagenet classification. K He, X Zhang, S Ren, J Sun, ICCV. K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectifiers: Surpassing human-level performance on imagenet classification. In ICCV, 2015.\n\nDeep residual learning for image recognition. K He, X Zhang, S Ren, J Sun, CVPR. K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In CVPR, 2016.\n\nIdentity mappings in deep residual networks. K He, X Zhang, S Ren, J Sun, ECCV. K. He, X. Zhang, S. Ren, and J. Sun. Identity map- pings in deep residual networks. In ECCV, 2016.\n\nY Ioannou, D Robertson, R Cipolla, A Criminisi, arXiv:1605.06489Deep roots: Improving cnn efficiency with hierarchical filter groups. Y. Ioannou, D. Robertson, R. Cipolla, and A. Crimin- isi. Deep roots: Improving cnn efficiency with hierar- chical filter groups. arXiv:1605.06489, 2016.\n\nBatch normalization: Accelerating deep network training by reducing internal covariate shift. S Ioffe, C Szegedy, ICML. S. Ioffe and C. Szegedy. Batch normalization: Ac- celerating deep network training by reducing internal covariate shift. In ICML, 2015.\n\nSpeeding up convolutional neural networks with low rank expansions. M Jaderberg, A Vedaldi, A Zisserman, BMVC. M. Jaderberg, A. Vedaldi, and A. Zisserman. Speed- ing up convolutional neural networks with low rank expansions. In BMVC, 2014.\n\nY Jia, E Shelhamer, J Donahue, S Karayev, J Long, R Girshick, S Guadarrama, T Darrell, Caffe, arXiv:1408.5093Convolutional architecture for fast feature embedding. Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick, S. Guadarrama, and T. Darrell. Caffe: Convolutional architecture for fast feature embedding. arXiv:1408.5093, 2014.\n\nN Kalchbrenner, L Espeholt, K Simonyan, A Oord, A Graves, K Kavukcuoglu, arXiv:1610.10099Neural machine translation in linear time. N. Kalchbrenner, L. Espeholt, K. Simonyan, A. v. d. Oord, A. Graves, and K. Kavukcuoglu. Neural ma- chine translation in linear time. arXiv:1610.10099, 2016.\n\nCompression of deep convolutional neural networks for fast and low power mobile applications. Y.-D Kim, E Park, S Yoo, T Choi, L Yang, D Shin, ICLR. Y.-D. Kim, E. Park, S. Yoo, T. Choi, L. Yang, and D. Shin. Compression of deep convolutional neural networks for fast and low power mobile applications. In ICLR, 2016.\n\nDeep convolutional neural decision forests. P Kontschieder, M Fiterau, A Criminisi, S R Bul\u00f2, ICCV. P. Kontschieder, M. Fiterau, A. Criminisi, and S. R. Bul\u00f2. Deep convolutional neural decision forests. In ICCV, 2015.\n\nLearning multiple layers of features from tiny images. A Krizhevsky, Tech ReportA. Krizhevsky. Learning multiple layers of features from tiny images. Tech Report, 2009.\n\nImagenet classification with deep convolutional neural networks. A Krizhevsky, I Sutskever, G Hinton, NIPS. A. Krizhevsky, I. Sutskever, and G. Hinton. Im- agenet classification with deep convolutional neural networks. In NIPS, 2012.\n\nBackpropagation applied to handwritten zip code recognition. Y Lecun, B Boser, J S Denker, D Henderson, R E Howard, W Hubbard, L D , Neural computation. Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard, W. Hubbard, and L. D. Jackel. Backprop- agation applied to handwritten zip code recognition. Neural computation, 1989.\n\nNetwork in network. M Lin, Q Chen, S Yan, ICLR. M. Lin, Q. Chen, and S. Yan. Network in network. In ICLR, 2014.\n\nMicrosoft COCO: Common objects in context. T.-Y Lin, M Maire, S Belongie, J Hays, P Perona, D Ramanan, P Doll\u00e1r, C L Zitnick, ECCV. T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan, P. Doll\u00e1r, and C. L. Zitnick. Microsoft COCO: Common objects in context. In ECCV. 2014.\n\nFully convolutional networks for semantic segmentation. J Long, E Shelhamer, T Darrell, CVPR. J. Long, E. Shelhamer, and T. Darrell. Fully convolu- tional networks for semantic segmentation. In CVPR, 2015.\n\nDistinctive image features from scaleinvariant keypoints. IJCV. D G Lowe, D. G. Lowe. Distinctive image features from scale- invariant keypoints. IJCV, 2004.\n\nA Oord, S Dieleman, H Zen, K Simonyan, O Vinyals, A Graves, N Kalchbrenner, A Senior, K Kavukcuoglu, arXiv:1609.03499Wavenet: A generative model for raw audio. A. Oord, S. Dieleman, H. Zen, K. Simonyan, O. Vinyals, A. Graves, N. Kalchbrenner, A. Senior, and K. Kavukcuoglu. Wavenet: A generative model for raw audio. arXiv:1609.03499, 2016.\n\nLearning to segment object candidates. P O Pinheiro, R Collobert, P Dollar, NIPS. P. O. Pinheiro, R. Collobert, and P. Dollar. Learning to segment object candidates. In NIPS, 2015.\n\nFaster R-CNN: Towards real-time object detection with region proposal networks. S Ren, K He, R Girshick, J Sun, NIPS. S. Ren, K. He, R. Girshick, and J. Sun. Faster R- CNN: Towards real-time object detection with region proposal networks. In NIPS, 2015.\n\n. O Russakovsky, J Deng, H Su, J Krause, S Satheesh, S Ma, Z Huang, A Karpathy, A Khosla, M Bernstein, A C Berg, L Fei-Fei, ImageNet Large Scale Visual Recognition Challenge. IJCVO. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual Recognition Challenge. IJCV, 2015.\n\nOverfeat: Integrated recognition, localization and detection using convolutional networks. P Sermanet, D Eigen, X Zhang, M Mathieu, R Fergus, Y Lecun, ICLR. P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fer- gus, and Y. LeCun. Overfeat: Integrated recogni- tion, localization and detection using convolutional networks. In ICLR, 2014.\n\nRigid-motion scattering for texture classification. L Sifre, S Mallat, arXiv:1403.1687L. Sifre and S. Mallat. Rigid-motion scattering for texture classification. arXiv:1403.1687, 2014.\n\nVery deep convolutional networks for large-scale image recognition. K Simonyan, A Zisserman, ICLR. K. Simonyan and A. Zisserman. Very deep convolu- tional networks for large-scale image recognition. In ICLR, 2015.\n\nInception-v4, inception-resnet and the impact of residual connections on learning. C Szegedy, S Ioffe, V Vanhoucke, ICLR Workshop. C. Szegedy, S. Ioffe, and V. Vanhoucke. Inception- v4, inception-resnet and the impact of residual con- nections on learning. In ICLR Workshop, 2016.\n\nGoing deeper with convolutions. C Szegedy, W Liu, Y Jia, P Sermanet, S Reed, D Anguelov, D Erhan, V Vanhoucke, A Rabinovich, CVPR. C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabi- novich. Going deeper with convolutions. In CVPR, 2015.\n\nRethinking the inception architecture for computer vision. C Szegedy, V Vanhoucke, S Ioffe, J Shlens, Z Wojna, CVPR. C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna. Rethinking the inception architecture for computer vision. In CVPR, 2016.\n\nResidual networks behave like ensembles of relatively shallow network. A Veit, M Wilber, S Belongie, NIPS. A. Veit, M. Wilber, and S. Belongie. Residual net- works behave like ensembles of relatively shallow net- work. In NIPS, 2016.\n\nGoogle's neural machine translation system. Y Wu, M Schuster, Z Chen, Q V Le, M Norouzi, W Macherey, M Krikun, Y Cao, Q Gao, K Macherey, arXiv:1609.08144Bridging the gap between human and machine translation. Y. Wu, M. Schuster, Z. Chen, Q. V. Le, M. Norouzi, W. Macherey, M. Krikun, Y. Cao, Q. Gao, K. Macherey, et al. Google's neural machine trans- lation system: Bridging the gap between human and machine translation. arXiv:1609.08144, 2016.\n\nW Xiong, J Droppo, X Huang, F Seide, M Seltzer, A Stolcke, D Yu, G Zweig, arXiv:1609.03528The Microsoft 2016 Conversational Speech Recognition System. W. Xiong, J. Droppo, X. Huang, F. Seide, M. Seltzer, A. Stolcke, D. Yu, and G. Zweig. The Microsoft 2016 Conversational Speech Recognition System. arXiv:1609.03528, 2016.\n\nWide residual networks. S Zagoruyko, N Komodakis, BMVC. S. Zagoruyko and N. Komodakis. Wide residual net- works. In BMVC, 2016.\n\nVisualizing and understanding convolutional neural networks. M D Zeiler, R Fergus, ECCV. M. D. Zeiler and R. Fergus. Visualizing and under- standing convolutional neural networks. In ECCV, 2014.\n", "annotations": {"author": "[{\"end\":114,\"start\":64},{\"end\":152,\"start\":115},{\"end\":204,\"start\":153},{\"end\":239,\"start\":205},{\"end\":291,\"start\":240},{\"end\":323,\"start\":292},{\"end\":353,\"start\":324}]", "publisher": null, "author_last_name": "[{\"end\":75,\"start\":72},{\"end\":128,\"start\":120},{\"end\":165,\"start\":159},{\"end\":215,\"start\":213},{\"end\":250,\"start\":248},{\"end\":299,\"start\":296}]", "author_first_name": "[{\"end\":71,\"start\":64},{\"end\":119,\"start\":115},{\"end\":158,\"start\":153},{\"end\":212,\"start\":205},{\"end\":247,\"start\":240},{\"end\":293,\"start\":292},{\"end\":295,\"start\":294},{\"end\":329,\"start\":324}]", "author_affiliation": "[{\"end\":113,\"start\":92},{\"end\":151,\"start\":130},{\"end\":203,\"start\":182},{\"end\":238,\"start\":217},{\"end\":290,\"start\":269},{\"end\":322,\"start\":301},{\"end\":352,\"start\":331}]", "title": "[{\"end\":61,\"start\":1},{\"end\":414,\"start\":354}]", "venue": null, "abstract": "[{\"end\":1535,\"start\":416}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b24\"},\"end\":1665,\"start\":1661},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":1668,\"start\":1665},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":1671,\"start\":1668},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":1674,\"start\":1671},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":1677,\"start\":1674},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":1680,\"start\":1677},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":1683,\"start\":1680},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":1750,\"start\":1746},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1762,\"start\":1759},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":1827,\"start\":1823},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1939,\"start\":1936},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":1942,\"start\":1939},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":1945,\"start\":1942},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":2260,\"start\":2256},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2457,\"start\":2453},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2681,\"start\":2677},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":3078,\"start\":3075},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":3081,\"start\":3078},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3083,\"start\":3081},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":3086,\"start\":3083},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":3089,\"start\":3086},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3092,\"start\":3089},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":3138,\"start\":3134},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":3141,\"start\":3138},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3158,\"start\":3155},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":3161,\"start\":3158},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3164,\"start\":3161},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3219,\"start\":3215},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3222,\"start\":3219},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3225,\"start\":3222},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":3228,\"start\":3225},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3403,\"start\":3399},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3406,\"start\":3403},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":5301,\"start\":5297},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5640,\"start\":5636},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6742,\"start\":6738},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6759,\"start\":6755},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":6778,\"start\":6774},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":6808,\"start\":6804},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6939,\"start\":6935},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7278,\"start\":7274},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":7526,\"start\":7522},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7529,\"start\":7526},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":7532,\"start\":7529},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":7535,\"start\":7532},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7633,\"start\":7629},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":7750,\"start\":7746},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7917,\"start\":7913},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7981,\"start\":7977},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":8075,\"start\":8071},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":8086,\"start\":8083},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":8469,\"start\":8465},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8537,\"start\":8534},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8540,\"start\":8537},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8559,\"start\":8556},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":8562,\"start\":8559},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8565,\"start\":8562},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8704,\"start\":8700},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8846,\"start\":8843},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8849,\"start\":8846},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":8852,\"start\":8849},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8855,\"start\":8852},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9169,\"start\":9165},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":9218,\"start\":9214},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":9236,\"start\":9232},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":9352,\"start\":9348},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9870,\"start\":9866},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":12066,\"start\":12062},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":12534,\"start\":12531},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":13351,\"start\":13347},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":13515,\"start\":13511},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":13731,\"start\":13727},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":13947,\"start\":13946},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":14002,\"start\":13998},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":14373,\"start\":14369},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":14376,\"start\":14375},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15034,\"start\":15033},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15564,\"start\":15563},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":15591,\"start\":15587},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":15860,\"start\":15856},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":16832,\"start\":16829},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":17350,\"start\":17346},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":18029,\"start\":18028},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":18229,\"start\":18225},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18285,\"start\":18281},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":18430,\"start\":18426},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18450,\"start\":18446},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":18567,\"start\":18563},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18706,\"start\":18702},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18925,\"start\":18921},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":18969,\"start\":18965},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19188,\"start\":19184},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":19234,\"start\":19233},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19381,\"start\":19377},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":19805,\"start\":19801},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19821,\"start\":19817},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":22279,\"start\":22275},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":22299,\"start\":22295},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":24540,\"start\":24536},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":25174,\"start\":25170},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":25434,\"start\":25430},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":25592,\"start\":25588},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":26295,\"start\":26291},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26943,\"start\":26942},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":27974,\"start\":27970},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28011,\"start\":28007},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28317,\"start\":28313},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28387,\"start\":28383},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":28957,\"start\":28953},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29456,\"start\":29452},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":29587,\"start\":29584},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29664,\"start\":29660},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":29702,\"start\":29698},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":29718,\"start\":29714},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":30255,\"start\":30251},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":30571,\"start\":30567},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":30764,\"start\":30760},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":31215,\"start\":31211},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":31301,\"start\":31297}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":31962,\"start\":31926},{\"attributes\":{\"id\":\"fig_1\"},\"end\":32183,\"start\":31963},{\"attributes\":{\"id\":\"fig_2\"},\"end\":32302,\"start\":32184},{\"attributes\":{\"id\":\"fig_3\"},\"end\":32569,\"start\":32303},{\"attributes\":{\"id\":\"fig_4\"},\"end\":32790,\"start\":32570},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":33057,\"start\":32791},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":33351,\"start\":33058},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":34063,\"start\":33352}]", "paragraph": "[{\"end\":2062,\"start\":1551},{\"end\":2607,\"start\":2064},{\"end\":3165,\"start\":2609},{\"end\":4045,\"start\":3167},{\"end\":4546,\"start\":4047},{\"end\":5106,\"start\":4548},{\"end\":5718,\"start\":5108},{\"end\":6233,\"start\":5720},{\"end\":6642,\"start\":6235},{\"end\":7447,\"start\":6644},{\"end\":7825,\"start\":7464},{\"end\":8470,\"start\":7827},{\"end\":9054,\"start\":8472},{\"end\":9568,\"start\":9056},{\"end\":9960,\"start\":9590},{\"end\":10762,\"start\":9962},{\"end\":11042,\"start\":10792},{\"end\":11239,\"start\":11095},{\"end\":11390,\"start\":11284},{\"end\":11724,\"start\":11392},{\"end\":12185,\"start\":11849},{\"end\":12238,\"start\":12187},{\"end\":12543,\"start\":12264},{\"end\":12972,\"start\":12545},{\"end\":13650,\"start\":12974},{\"end\":13689,\"start\":13652},{\"end\":13747,\"start\":13691},{\"end\":13796,\"start\":13774},{\"end\":14251,\"start\":13798},{\"end\":15102,\"start\":14253},{\"end\":15953,\"start\":15160},{\"end\":16450,\"start\":15969},{\"end\":16833,\"start\":16469},{\"end\":17524,\"start\":16835},{\"end\":17717,\"start\":17568},{\"end\":18171,\"start\":17719},{\"end\":19096,\"start\":18198},{\"end\":19382,\"start\":19098},{\"end\":19676,\"start\":19384},{\"end\":19939,\"start\":19721},{\"end\":20064,\"start\":19941},{\"end\":20418,\"start\":20066},{\"end\":21092,\"start\":20420},{\"end\":21911,\"start\":21094},{\"end\":22300,\"start\":21913},{\"end\":22616,\"start\":22302},{\"end\":23650,\"start\":22618},{\"end\":24328,\"start\":23652},{\"end\":24824,\"start\":24330},{\"end\":25953,\"start\":24826},{\"end\":26233,\"start\":25984},{\"end\":26889,\"start\":26235},{\"end\":27888,\"start\":26891},{\"end\":28432,\"start\":27913},{\"end\":29340,\"start\":28434},{\"end\":30172,\"start\":29381},{\"end\":30352,\"start\":30174},{\"end\":31216,\"start\":30389},{\"end\":31925,\"start\":31264}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":11061,\"start\":11043},{\"attributes\":{\"id\":\"formula_1\"},\"end\":11094,\"start\":11061},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11283,\"start\":11240},{\"attributes\":{\"id\":\"formula_3\"},\"end\":11819,\"start\":11725},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12263,\"start\":12239},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13773,\"start\":13748},{\"attributes\":{\"id\":\"formula_6\"},\"end\":15159,\"start\":15103},{\"attributes\":{\"id\":\"formula_7\"},\"end\":17567,\"start\":17525}]", "table_ref": "[{\"end\":10761,\"start\":10754},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":17648,\"start\":17641},{\"end\":20086,\"start\":20079},{\"end\":20416,\"start\":20409},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":20566,\"start\":20559},{\"end\":20575,\"start\":20568},{\"end\":20676,\"start\":20668},{\"end\":21592,\"start\":21585},{\"end\":22406,\"start\":22399},{\"end\":23915,\"start\":23908},{\"end\":24380,\"start\":24373},{\"end\":25444,\"start\":25437},{\"end\":25642,\"start\":25635},{\"end\":27042,\"start\":27035},{\"end\":27471,\"start\":27464},{\"end\":27560,\"start\":27553},{\"end\":28886,\"start\":28879},{\"end\":29881,\"start\":29874}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1549,\"start\":1537},{\"attributes\":{\"n\":\"2.\"},\"end\":7462,\"start\":7450},{\"attributes\":{\"n\":\"3.\"},\"end\":9577,\"start\":9571},{\"attributes\":{\"n\":\"3.1.\"},\"end\":9588,\"start\":9580},{\"attributes\":{\"n\":\"3.2.\"},\"end\":10790,\"start\":10765},{\"attributes\":{\"n\":\"3.3.\"},\"end\":11847,\"start\":11821},{\"end\":15967,\"start\":15956},{\"attributes\":{\"n\":\"3.4.\"},\"end\":16467,\"start\":16453},{\"attributes\":{\"n\":\"4.\"},\"end\":18196,\"start\":18174},{\"attributes\":{\"n\":\"5.\"},\"end\":19690,\"start\":19679},{\"attributes\":{\"n\":\"5.1.\"},\"end\":19719,\"start\":19693},{\"attributes\":{\"n\":\"5.2.\"},\"end\":25982,\"start\":25956},{\"attributes\":{\"n\":\"5.3.\"},\"end\":27911,\"start\":27891},{\"attributes\":{\"n\":\"5.4.\"},\"end\":29379,\"start\":29343},{\"end\":30387,\"start\":30355},{\"end\":31262,\"start\":31219},{\"end\":31937,\"start\":31927},{\"end\":31974,\"start\":31964},{\"end\":32195,\"start\":32185},{\"end\":32314,\"start\":32304},{\"end\":32581,\"start\":32571},{\"end\":32801,\"start\":32792}]", "table": "[{\"end\":33057,\"start\":32803},{\"end\":33351,\"start\":33234},{\"end\":34063,\"start\":33638}]", "figure_caption": "[{\"end\":31962,\"start\":31939},{\"end\":32183,\"start\":31976},{\"end\":32302,\"start\":32197},{\"end\":32569,\"start\":32316},{\"end\":32790,\"start\":32583},{\"end\":33234,\"start\":33060},{\"end\":33638,\"start\":33354}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5004,\"start\":4990},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":5217,\"start\":5209},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":5246,\"start\":5240},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":5651,\"start\":5641},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5926,\"start\":5920},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":6009,\"start\":6003},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":9699,\"start\":9693},{\"end\":11193,\"start\":11185},{\"end\":11389,\"start\":11383},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13385,\"start\":13371},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13746,\"start\":13732},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13884,\"start\":13878},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13916,\"start\":13907},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13944,\"start\":13935},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13954,\"start\":13948},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14420,\"start\":14414},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14553,\"start\":14545},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14710,\"start\":14704},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14898,\"start\":14892},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":14967,\"start\":14955},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14990,\"start\":14981},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":15395,\"start\":15386},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15476,\"start\":15451},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15559,\"start\":15536},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":15952,\"start\":15946},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":16055,\"start\":16046},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":16091,\"start\":16081},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":16411,\"start\":16402},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17060,\"start\":17048},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17307,\"start\":17295},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17512,\"start\":17506},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19146,\"start\":19137},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19231,\"start\":19222},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19422,\"start\":19416},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19611,\"start\":19602},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20188,\"start\":20180},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20330,\"start\":20322},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":20604,\"start\":20598},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":20697,\"start\":20685},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":21170,\"start\":21148},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21456,\"start\":21443},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":27053,\"start\":27047},{\"end\":28690,\"start\":28684}]", "bib_author_first_name": "[{\"end\":34595,\"start\":34594},{\"end\":34603,\"start\":34602},{\"end\":34605,\"start\":34604},{\"end\":34616,\"start\":34615},{\"end\":34624,\"start\":34623},{\"end\":34899,\"start\":34898},{\"end\":35097,\"start\":35096},{\"end\":35110,\"start\":35109},{\"end\":35120,\"start\":35119},{\"end\":35281,\"start\":35280},{\"end\":35292,\"start\":35291},{\"end\":35303,\"start\":35302},{\"end\":35315,\"start\":35314},{\"end\":35606,\"start\":35605},{\"end\":35615,\"start\":35614},{\"end\":35811,\"start\":35810},{\"end\":35821,\"start\":35820},{\"end\":35832,\"start\":35831},{\"end\":35841,\"start\":35840},{\"end\":35850,\"start\":35849},{\"end\":36105,\"start\":36104},{\"end\":36116,\"start\":36115},{\"end\":36123,\"start\":36122},{\"end\":36134,\"start\":36133},{\"end\":36145,\"start\":36144},{\"end\":36154,\"start\":36153},{\"end\":36163,\"start\":36162},{\"end\":36355,\"start\":36354},{\"end\":36364,\"start\":36363},{\"end\":36373,\"start\":36372},{\"end\":36383,\"start\":36382},{\"end\":36640,\"start\":36639},{\"end\":36781,\"start\":36780},{\"end\":36793,\"start\":36792},{\"end\":36804,\"start\":36803},{\"end\":36815,\"start\":36814},{\"end\":37021,\"start\":37020},{\"end\":37030,\"start\":37029},{\"end\":37163,\"start\":37162},{\"end\":37169,\"start\":37168},{\"end\":37181,\"start\":37180},{\"end\":37191,\"start\":37190},{\"end\":37409,\"start\":37408},{\"end\":37415,\"start\":37414},{\"end\":37424,\"start\":37423},{\"end\":37431,\"start\":37430},{\"end\":37636,\"start\":37635},{\"end\":37642,\"start\":37641},{\"end\":37651,\"start\":37650},{\"end\":37658,\"start\":37657},{\"end\":37815,\"start\":37814},{\"end\":37821,\"start\":37820},{\"end\":37830,\"start\":37829},{\"end\":37837,\"start\":37836},{\"end\":37950,\"start\":37949},{\"end\":37961,\"start\":37960},{\"end\":37974,\"start\":37973},{\"end\":37985,\"start\":37984},{\"end\":38333,\"start\":38332},{\"end\":38342,\"start\":38341},{\"end\":38564,\"start\":38563},{\"end\":38577,\"start\":38576},{\"end\":38588,\"start\":38587},{\"end\":38737,\"start\":38736},{\"end\":38744,\"start\":38743},{\"end\":38757,\"start\":38756},{\"end\":38768,\"start\":38767},{\"end\":38779,\"start\":38778},{\"end\":38787,\"start\":38786},{\"end\":38799,\"start\":38798},{\"end\":38813,\"start\":38812},{\"end\":39086,\"start\":39085},{\"end\":39102,\"start\":39101},{\"end\":39114,\"start\":39113},{\"end\":39126,\"start\":39125},{\"end\":39134,\"start\":39133},{\"end\":39144,\"start\":39143},{\"end\":39474,\"start\":39470},{\"end\":39481,\"start\":39480},{\"end\":39489,\"start\":39488},{\"end\":39496,\"start\":39495},{\"end\":39504,\"start\":39503},{\"end\":39512,\"start\":39511},{\"end\":39739,\"start\":39738},{\"end\":39755,\"start\":39754},{\"end\":39766,\"start\":39765},{\"end\":39779,\"start\":39778},{\"end\":39781,\"start\":39780},{\"end\":39969,\"start\":39968},{\"end\":40149,\"start\":40148},{\"end\":40163,\"start\":40162},{\"end\":40176,\"start\":40175},{\"end\":40380,\"start\":40379},{\"end\":40389,\"start\":40388},{\"end\":40398,\"start\":40397},{\"end\":40400,\"start\":40399},{\"end\":40410,\"start\":40409},{\"end\":40423,\"start\":40422},{\"end\":40425,\"start\":40424},{\"end\":40435,\"start\":40434},{\"end\":40446,\"start\":40445},{\"end\":40448,\"start\":40447},{\"end\":40674,\"start\":40673},{\"end\":40681,\"start\":40680},{\"end\":40689,\"start\":40688},{\"end\":40813,\"start\":40809},{\"end\":40820,\"start\":40819},{\"end\":40829,\"start\":40828},{\"end\":40841,\"start\":40840},{\"end\":40849,\"start\":40848},{\"end\":40859,\"start\":40858},{\"end\":40870,\"start\":40869},{\"end\":40880,\"start\":40879},{\"end\":40882,\"start\":40881},{\"end\":41110,\"start\":41109},{\"end\":41118,\"start\":41117},{\"end\":41131,\"start\":41130},{\"end\":41325,\"start\":41324},{\"end\":41327,\"start\":41326},{\"end\":41420,\"start\":41419},{\"end\":41428,\"start\":41427},{\"end\":41440,\"start\":41439},{\"end\":41447,\"start\":41446},{\"end\":41459,\"start\":41458},{\"end\":41470,\"start\":41469},{\"end\":41480,\"start\":41479},{\"end\":41496,\"start\":41495},{\"end\":41506,\"start\":41505},{\"end\":41801,\"start\":41800},{\"end\":41803,\"start\":41802},{\"end\":41815,\"start\":41814},{\"end\":41828,\"start\":41827},{\"end\":42024,\"start\":42023},{\"end\":42031,\"start\":42030},{\"end\":42037,\"start\":42036},{\"end\":42049,\"start\":42048},{\"end\":42201,\"start\":42200},{\"end\":42216,\"start\":42215},{\"end\":42224,\"start\":42223},{\"end\":42230,\"start\":42229},{\"end\":42240,\"start\":42239},{\"end\":42252,\"start\":42251},{\"end\":42258,\"start\":42257},{\"end\":42267,\"start\":42266},{\"end\":42279,\"start\":42278},{\"end\":42289,\"start\":42288},{\"end\":42302,\"start\":42301},{\"end\":42304,\"start\":42303},{\"end\":42312,\"start\":42311},{\"end\":42672,\"start\":42671},{\"end\":42684,\"start\":42683},{\"end\":42693,\"start\":42692},{\"end\":42702,\"start\":42701},{\"end\":42713,\"start\":42712},{\"end\":42723,\"start\":42722},{\"end\":42971,\"start\":42970},{\"end\":42980,\"start\":42979},{\"end\":43173,\"start\":43172},{\"end\":43185,\"start\":43184},{\"end\":43403,\"start\":43402},{\"end\":43414,\"start\":43413},{\"end\":43423,\"start\":43422},{\"end\":43634,\"start\":43633},{\"end\":43645,\"start\":43644},{\"end\":43652,\"start\":43651},{\"end\":43659,\"start\":43658},{\"end\":43671,\"start\":43670},{\"end\":43679,\"start\":43678},{\"end\":43691,\"start\":43690},{\"end\":43700,\"start\":43699},{\"end\":43713,\"start\":43712},{\"end\":43948,\"start\":43947},{\"end\":43959,\"start\":43958},{\"end\":43972,\"start\":43971},{\"end\":43981,\"start\":43980},{\"end\":43991,\"start\":43990},{\"end\":44213,\"start\":44212},{\"end\":44221,\"start\":44220},{\"end\":44231,\"start\":44230},{\"end\":44421,\"start\":44420},{\"end\":44427,\"start\":44426},{\"end\":44439,\"start\":44438},{\"end\":44447,\"start\":44446},{\"end\":44449,\"start\":44448},{\"end\":44455,\"start\":44454},{\"end\":44466,\"start\":44465},{\"end\":44478,\"start\":44477},{\"end\":44488,\"start\":44487},{\"end\":44495,\"start\":44494},{\"end\":44502,\"start\":44501},{\"end\":44824,\"start\":44823},{\"end\":44833,\"start\":44832},{\"end\":44843,\"start\":44842},{\"end\":44852,\"start\":44851},{\"end\":44861,\"start\":44860},{\"end\":44872,\"start\":44871},{\"end\":44883,\"start\":44882},{\"end\":44889,\"start\":44888},{\"end\":45171,\"start\":45170},{\"end\":45184,\"start\":45183},{\"end\":45337,\"start\":45336},{\"end\":45339,\"start\":45338},{\"end\":45349,\"start\":45348}]", "bib_author_last_name": "[{\"end\":34600,\"start\":34596},{\"end\":34613,\"start\":34606},{\"end\":34621,\"start\":34617},{\"end\":34633,\"start\":34625},{\"end\":34906,\"start\":34900},{\"end\":35107,\"start\":35098},{\"end\":35117,\"start\":35111},{\"end\":35130,\"start\":35121},{\"end\":35289,\"start\":35282},{\"end\":35300,\"start\":35293},{\"end\":35312,\"start\":35304},{\"end\":35321,\"start\":35316},{\"end\":35612,\"start\":35607},{\"end\":35622,\"start\":35616},{\"end\":35818,\"start\":35812},{\"end\":35829,\"start\":35822},{\"end\":35838,\"start\":35833},{\"end\":35847,\"start\":35842},{\"end\":35857,\"start\":35851},{\"end\":36113,\"start\":36106},{\"end\":36120,\"start\":36117},{\"end\":36131,\"start\":36124},{\"end\":36142,\"start\":36135},{\"end\":36151,\"start\":36146},{\"end\":36160,\"start\":36155},{\"end\":36171,\"start\":36164},{\"end\":36361,\"start\":36356},{\"end\":36370,\"start\":36365},{\"end\":36380,\"start\":36374},{\"end\":36389,\"start\":36384},{\"end\":36649,\"start\":36641},{\"end\":36790,\"start\":36782},{\"end\":36801,\"start\":36794},{\"end\":36812,\"start\":36805},{\"end\":36821,\"start\":36816},{\"end\":37027,\"start\":37022},{\"end\":37037,\"start\":37031},{\"end\":37166,\"start\":37164},{\"end\":37178,\"start\":37170},{\"end\":37188,\"start\":37182},{\"end\":37200,\"start\":37192},{\"end\":37412,\"start\":37410},{\"end\":37421,\"start\":37416},{\"end\":37428,\"start\":37425},{\"end\":37435,\"start\":37432},{\"end\":37639,\"start\":37637},{\"end\":37648,\"start\":37643},{\"end\":37655,\"start\":37652},{\"end\":37662,\"start\":37659},{\"end\":37818,\"start\":37816},{\"end\":37827,\"start\":37822},{\"end\":37834,\"start\":37831},{\"end\":37841,\"start\":37838},{\"end\":37958,\"start\":37951},{\"end\":37971,\"start\":37962},{\"end\":37982,\"start\":37975},{\"end\":37995,\"start\":37986},{\"end\":38339,\"start\":38334},{\"end\":38350,\"start\":38343},{\"end\":38574,\"start\":38565},{\"end\":38585,\"start\":38578},{\"end\":38598,\"start\":38589},{\"end\":38741,\"start\":38738},{\"end\":38754,\"start\":38745},{\"end\":38765,\"start\":38758},{\"end\":38776,\"start\":38769},{\"end\":38784,\"start\":38780},{\"end\":38796,\"start\":38788},{\"end\":38810,\"start\":38800},{\"end\":38821,\"start\":38814},{\"end\":38828,\"start\":38823},{\"end\":39099,\"start\":39087},{\"end\":39111,\"start\":39103},{\"end\":39123,\"start\":39115},{\"end\":39131,\"start\":39127},{\"end\":39141,\"start\":39135},{\"end\":39156,\"start\":39145},{\"end\":39478,\"start\":39475},{\"end\":39486,\"start\":39482},{\"end\":39493,\"start\":39490},{\"end\":39501,\"start\":39497},{\"end\":39509,\"start\":39505},{\"end\":39517,\"start\":39513},{\"end\":39752,\"start\":39740},{\"end\":39763,\"start\":39756},{\"end\":39776,\"start\":39767},{\"end\":39786,\"start\":39782},{\"end\":39980,\"start\":39970},{\"end\":40160,\"start\":40150},{\"end\":40173,\"start\":40164},{\"end\":40183,\"start\":40177},{\"end\":40386,\"start\":40381},{\"end\":40395,\"start\":40390},{\"end\":40407,\"start\":40401},{\"end\":40420,\"start\":40411},{\"end\":40432,\"start\":40426},{\"end\":40443,\"start\":40436},{\"end\":40678,\"start\":40675},{\"end\":40686,\"start\":40682},{\"end\":40693,\"start\":40690},{\"end\":40817,\"start\":40814},{\"end\":40826,\"start\":40821},{\"end\":40838,\"start\":40830},{\"end\":40846,\"start\":40842},{\"end\":40856,\"start\":40850},{\"end\":40867,\"start\":40860},{\"end\":40877,\"start\":40871},{\"end\":40890,\"start\":40883},{\"end\":41115,\"start\":41111},{\"end\":41128,\"start\":41119},{\"end\":41139,\"start\":41132},{\"end\":41332,\"start\":41328},{\"end\":41425,\"start\":41421},{\"end\":41437,\"start\":41429},{\"end\":41444,\"start\":41441},{\"end\":41456,\"start\":41448},{\"end\":41467,\"start\":41460},{\"end\":41477,\"start\":41471},{\"end\":41493,\"start\":41481},{\"end\":41503,\"start\":41497},{\"end\":41518,\"start\":41507},{\"end\":41812,\"start\":41804},{\"end\":41825,\"start\":41816},{\"end\":41835,\"start\":41829},{\"end\":42028,\"start\":42025},{\"end\":42034,\"start\":42032},{\"end\":42046,\"start\":42038},{\"end\":42053,\"start\":42050},{\"end\":42213,\"start\":42202},{\"end\":42221,\"start\":42217},{\"end\":42227,\"start\":42225},{\"end\":42237,\"start\":42231},{\"end\":42249,\"start\":42241},{\"end\":42255,\"start\":42253},{\"end\":42264,\"start\":42259},{\"end\":42276,\"start\":42268},{\"end\":42286,\"start\":42280},{\"end\":42299,\"start\":42290},{\"end\":42309,\"start\":42305},{\"end\":42320,\"start\":42313},{\"end\":42681,\"start\":42673},{\"end\":42690,\"start\":42685},{\"end\":42699,\"start\":42694},{\"end\":42710,\"start\":42703},{\"end\":42720,\"start\":42714},{\"end\":42729,\"start\":42724},{\"end\":42977,\"start\":42972},{\"end\":42987,\"start\":42981},{\"end\":43182,\"start\":43174},{\"end\":43195,\"start\":43186},{\"end\":43411,\"start\":43404},{\"end\":43420,\"start\":43415},{\"end\":43433,\"start\":43424},{\"end\":43642,\"start\":43635},{\"end\":43649,\"start\":43646},{\"end\":43656,\"start\":43653},{\"end\":43668,\"start\":43660},{\"end\":43676,\"start\":43672},{\"end\":43688,\"start\":43680},{\"end\":43697,\"start\":43692},{\"end\":43710,\"start\":43701},{\"end\":43724,\"start\":43714},{\"end\":43956,\"start\":43949},{\"end\":43969,\"start\":43960},{\"end\":43978,\"start\":43973},{\"end\":43988,\"start\":43982},{\"end\":43997,\"start\":43992},{\"end\":44218,\"start\":44214},{\"end\":44228,\"start\":44222},{\"end\":44240,\"start\":44232},{\"end\":44424,\"start\":44422},{\"end\":44436,\"start\":44428},{\"end\":44444,\"start\":44440},{\"end\":44452,\"start\":44450},{\"end\":44463,\"start\":44456},{\"end\":44475,\"start\":44467},{\"end\":44485,\"start\":44479},{\"end\":44492,\"start\":44489},{\"end\":44499,\"start\":44496},{\"end\":44511,\"start\":44503},{\"end\":44830,\"start\":44825},{\"end\":44840,\"start\":44834},{\"end\":44849,\"start\":44844},{\"end\":44858,\"start\":44853},{\"end\":44869,\"start\":44862},{\"end\":44880,\"start\":44873},{\"end\":44886,\"start\":44884},{\"end\":44895,\"start\":44890},{\"end\":45181,\"start\":45172},{\"end\":45194,\"start\":45185},{\"end\":45346,\"start\":45340},{\"end\":45356,\"start\":45350}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":34804,\"start\":34497},{\"attributes\":{\"doi\":\"1872-1884. 1884\",\"id\":\"b1\"},\"end\":35042,\"start\":34806},{\"attributes\":{\"id\":\"b2\"},\"end\":35278,\"start\":35044},{\"attributes\":{\"doi\":\"arXiv:1606.01781\",\"id\":\"b3\"},\"end\":35549,\"start\":35280},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":206590483},\"end\":35724,\"start\":35551},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":7340116},\"end\":36023,\"start\":35726},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":6161478},\"end\":36352,\"start\":36025},{\"attributes\":{\"doi\":\"arXiv:1312.1847\",\"id\":\"b7\"},\"end\":36625,\"start\":36354},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":206770307},\"end\":36696,\"start\":36627},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":215827080},\"end\":36976,\"start\":36698},{\"attributes\":{\"id\":\"b10\"},\"end\":37158,\"start\":36978},{\"attributes\":{\"doi\":\"arXiv:1703.06870\",\"id\":\"b11\"},\"end\":37313,\"start\":37160},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":13740328},\"end\":37587,\"start\":37315},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":206594692},\"end\":37767,\"start\":37589},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":6447277},\"end\":37947,\"start\":37769},{\"attributes\":{\"doi\":\"arXiv:1605.06489\",\"id\":\"b15\"},\"end\":38236,\"start\":37949},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":5808102},\"end\":38493,\"start\":38238},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":17864746},\"end\":38734,\"start\":38495},{\"attributes\":{\"doi\":\"arXiv:1408.5093\",\"id\":\"b18\"},\"end\":39083,\"start\":38736},{\"attributes\":{\"doi\":\"arXiv:1610.10099\",\"id\":\"b19\"},\"end\":39374,\"start\":39085},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":15602035},\"end\":39692,\"start\":39376},{\"attributes\":{\"id\":\"b21\"},\"end\":39911,\"start\":39694},{\"attributes\":{\"id\":\"b22\"},\"end\":40081,\"start\":39913},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":195908774},\"end\":40316,\"start\":40083},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":41312633},\"end\":40651,\"start\":40318},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":16636683},\"end\":40764,\"start\":40653},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":14113767},\"end\":41051,\"start\":40766},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":1629541},\"end\":41258,\"start\":41053},{\"attributes\":{\"id\":\"b28\"},\"end\":41417,\"start\":41260},{\"attributes\":{\"doi\":\"arXiv:1609.03499\",\"id\":\"b29\"},\"end\":41759,\"start\":41419},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":140529},\"end\":41941,\"start\":41761},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":10328909},\"end\":42196,\"start\":41943},{\"attributes\":{\"id\":\"b32\"},\"end\":42578,\"start\":42198},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":4071727},\"end\":42916,\"start\":42580},{\"attributes\":{\"doi\":\"arXiv:1403.1687\",\"id\":\"b34\"},\"end\":43102,\"start\":42918},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":14124313},\"end\":43317,\"start\":43104},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":1023605},\"end\":43599,\"start\":43319},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":206592484},\"end\":43886,\"start\":43601},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":206593880},\"end\":44139,\"start\":43888},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":715122},\"end\":44374,\"start\":44141},{\"attributes\":{\"doi\":\"arXiv:1609.08144\",\"id\":\"b40\",\"matched_paper_id\":3603249},\"end\":44821,\"start\":44376},{\"attributes\":{\"doi\":\"arXiv:1609.03528\",\"id\":\"b41\"},\"end\":45144,\"start\":44823},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":15276198},\"end\":45273,\"start\":45146},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":62099841},\"end\":45469,\"start\":45275}]", "bib_title": "[{\"end\":34592,\"start\":34497},{\"end\":35603,\"start\":35551},{\"end\":35808,\"start\":35726},{\"end\":36102,\"start\":36025},{\"end\":36637,\"start\":36627},{\"end\":36778,\"start\":36698},{\"end\":37406,\"start\":37315},{\"end\":37633,\"start\":37589},{\"end\":37812,\"start\":37769},{\"end\":38330,\"start\":38238},{\"end\":38561,\"start\":38495},{\"end\":39468,\"start\":39376},{\"end\":39736,\"start\":39694},{\"end\":40146,\"start\":40083},{\"end\":40377,\"start\":40318},{\"end\":40671,\"start\":40653},{\"end\":40807,\"start\":40766},{\"end\":41107,\"start\":41053},{\"end\":41798,\"start\":41761},{\"end\":42021,\"start\":41943},{\"end\":42669,\"start\":42580},{\"end\":43170,\"start\":43104},{\"end\":43400,\"start\":43319},{\"end\":43631,\"start\":43601},{\"end\":43945,\"start\":43888},{\"end\":44210,\"start\":44141},{\"end\":44418,\"start\":44376},{\"end\":45168,\"start\":45146},{\"end\":45334,\"start\":45275}]", "bib_author": "[{\"end\":34602,\"start\":34594},{\"end\":34615,\"start\":34602},{\"end\":34623,\"start\":34615},{\"end\":34635,\"start\":34623},{\"end\":34908,\"start\":34898},{\"end\":35109,\"start\":35096},{\"end\":35119,\"start\":35109},{\"end\":35132,\"start\":35119},{\"end\":35291,\"start\":35280},{\"end\":35302,\"start\":35291},{\"end\":35314,\"start\":35302},{\"end\":35323,\"start\":35314},{\"end\":35614,\"start\":35605},{\"end\":35624,\"start\":35614},{\"end\":35820,\"start\":35810},{\"end\":35831,\"start\":35820},{\"end\":35840,\"start\":35831},{\"end\":35849,\"start\":35840},{\"end\":35859,\"start\":35849},{\"end\":36115,\"start\":36104},{\"end\":36122,\"start\":36115},{\"end\":36133,\"start\":36122},{\"end\":36144,\"start\":36133},{\"end\":36153,\"start\":36144},{\"end\":36162,\"start\":36153},{\"end\":36173,\"start\":36162},{\"end\":36363,\"start\":36354},{\"end\":36372,\"start\":36363},{\"end\":36382,\"start\":36372},{\"end\":36391,\"start\":36382},{\"end\":36651,\"start\":36639},{\"end\":36792,\"start\":36780},{\"end\":36803,\"start\":36792},{\"end\":36814,\"start\":36803},{\"end\":36823,\"start\":36814},{\"end\":37029,\"start\":37020},{\"end\":37039,\"start\":37029},{\"end\":37168,\"start\":37162},{\"end\":37180,\"start\":37168},{\"end\":37190,\"start\":37180},{\"end\":37202,\"start\":37190},{\"end\":37414,\"start\":37408},{\"end\":37423,\"start\":37414},{\"end\":37430,\"start\":37423},{\"end\":37437,\"start\":37430},{\"end\":37641,\"start\":37635},{\"end\":37650,\"start\":37641},{\"end\":37657,\"start\":37650},{\"end\":37664,\"start\":37657},{\"end\":37820,\"start\":37814},{\"end\":37829,\"start\":37820},{\"end\":37836,\"start\":37829},{\"end\":37843,\"start\":37836},{\"end\":37960,\"start\":37949},{\"end\":37973,\"start\":37960},{\"end\":37984,\"start\":37973},{\"end\":37997,\"start\":37984},{\"end\":38341,\"start\":38332},{\"end\":38352,\"start\":38341},{\"end\":38576,\"start\":38563},{\"end\":38587,\"start\":38576},{\"end\":38600,\"start\":38587},{\"end\":38743,\"start\":38736},{\"end\":38756,\"start\":38743},{\"end\":38767,\"start\":38756},{\"end\":38778,\"start\":38767},{\"end\":38786,\"start\":38778},{\"end\":38798,\"start\":38786},{\"end\":38812,\"start\":38798},{\"end\":38823,\"start\":38812},{\"end\":38830,\"start\":38823},{\"end\":39101,\"start\":39085},{\"end\":39113,\"start\":39101},{\"end\":39125,\"start\":39113},{\"end\":39133,\"start\":39125},{\"end\":39143,\"start\":39133},{\"end\":39158,\"start\":39143},{\"end\":39480,\"start\":39470},{\"end\":39488,\"start\":39480},{\"end\":39495,\"start\":39488},{\"end\":39503,\"start\":39495},{\"end\":39511,\"start\":39503},{\"end\":39519,\"start\":39511},{\"end\":39754,\"start\":39738},{\"end\":39765,\"start\":39754},{\"end\":39778,\"start\":39765},{\"end\":39788,\"start\":39778},{\"end\":39982,\"start\":39968},{\"end\":40162,\"start\":40148},{\"end\":40175,\"start\":40162},{\"end\":40185,\"start\":40175},{\"end\":40388,\"start\":40379},{\"end\":40397,\"start\":40388},{\"end\":40409,\"start\":40397},{\"end\":40422,\"start\":40409},{\"end\":40434,\"start\":40422},{\"end\":40445,\"start\":40434},{\"end\":40451,\"start\":40445},{\"end\":40680,\"start\":40673},{\"end\":40688,\"start\":40680},{\"end\":40695,\"start\":40688},{\"end\":40819,\"start\":40809},{\"end\":40828,\"start\":40819},{\"end\":40840,\"start\":40828},{\"end\":40848,\"start\":40840},{\"end\":40858,\"start\":40848},{\"end\":40869,\"start\":40858},{\"end\":40879,\"start\":40869},{\"end\":40892,\"start\":40879},{\"end\":41117,\"start\":41109},{\"end\":41130,\"start\":41117},{\"end\":41141,\"start\":41130},{\"end\":41334,\"start\":41324},{\"end\":41427,\"start\":41419},{\"end\":41439,\"start\":41427},{\"end\":41446,\"start\":41439},{\"end\":41458,\"start\":41446},{\"end\":41469,\"start\":41458},{\"end\":41479,\"start\":41469},{\"end\":41495,\"start\":41479},{\"end\":41505,\"start\":41495},{\"end\":41520,\"start\":41505},{\"end\":41814,\"start\":41800},{\"end\":41827,\"start\":41814},{\"end\":41837,\"start\":41827},{\"end\":42030,\"start\":42023},{\"end\":42036,\"start\":42030},{\"end\":42048,\"start\":42036},{\"end\":42055,\"start\":42048},{\"end\":42215,\"start\":42200},{\"end\":42223,\"start\":42215},{\"end\":42229,\"start\":42223},{\"end\":42239,\"start\":42229},{\"end\":42251,\"start\":42239},{\"end\":42257,\"start\":42251},{\"end\":42266,\"start\":42257},{\"end\":42278,\"start\":42266},{\"end\":42288,\"start\":42278},{\"end\":42301,\"start\":42288},{\"end\":42311,\"start\":42301},{\"end\":42322,\"start\":42311},{\"end\":42683,\"start\":42671},{\"end\":42692,\"start\":42683},{\"end\":42701,\"start\":42692},{\"end\":42712,\"start\":42701},{\"end\":42722,\"start\":42712},{\"end\":42731,\"start\":42722},{\"end\":42979,\"start\":42970},{\"end\":42989,\"start\":42979},{\"end\":43184,\"start\":43172},{\"end\":43197,\"start\":43184},{\"end\":43413,\"start\":43402},{\"end\":43422,\"start\":43413},{\"end\":43435,\"start\":43422},{\"end\":43644,\"start\":43633},{\"end\":43651,\"start\":43644},{\"end\":43658,\"start\":43651},{\"end\":43670,\"start\":43658},{\"end\":43678,\"start\":43670},{\"end\":43690,\"start\":43678},{\"end\":43699,\"start\":43690},{\"end\":43712,\"start\":43699},{\"end\":43726,\"start\":43712},{\"end\":43958,\"start\":43947},{\"end\":43971,\"start\":43958},{\"end\":43980,\"start\":43971},{\"end\":43990,\"start\":43980},{\"end\":43999,\"start\":43990},{\"end\":44220,\"start\":44212},{\"end\":44230,\"start\":44220},{\"end\":44242,\"start\":44230},{\"end\":44426,\"start\":44420},{\"end\":44438,\"start\":44426},{\"end\":44446,\"start\":44438},{\"end\":44454,\"start\":44446},{\"end\":44465,\"start\":44454},{\"end\":44477,\"start\":44465},{\"end\":44487,\"start\":44477},{\"end\":44494,\"start\":44487},{\"end\":44501,\"start\":44494},{\"end\":44513,\"start\":44501},{\"end\":44832,\"start\":44823},{\"end\":44842,\"start\":44832},{\"end\":44851,\"start\":44842},{\"end\":44860,\"start\":44851},{\"end\":44871,\"start\":44860},{\"end\":44882,\"start\":44871},{\"end\":44888,\"start\":44882},{\"end\":44897,\"start\":44888},{\"end\":45183,\"start\":45170},{\"end\":45196,\"start\":45183},{\"end\":45348,\"start\":45336},{\"end\":45358,\"start\":45348}]", "bib_venue": "[{\"end\":34639,\"start\":34635},{\"end\":34896,\"start\":34806},{\"end\":35094,\"start\":35044},{\"end\":35403,\"start\":35339},{\"end\":35628,\"start\":35624},{\"end\":35863,\"start\":35859},{\"end\":36177,\"start\":36173},{\"end\":36478,\"start\":36406},{\"end\":36655,\"start\":36651},{\"end\":36827,\"start\":36823},{\"end\":37018,\"start\":36978},{\"end\":37228,\"start\":37218},{\"end\":37441,\"start\":37437},{\"end\":37668,\"start\":37664},{\"end\":37847,\"start\":37843},{\"end\":38081,\"start\":38013},{\"end\":38356,\"start\":38352},{\"end\":38604,\"start\":38600},{\"end\":38898,\"start\":38845},{\"end\":39215,\"start\":39174},{\"end\":39523,\"start\":39519},{\"end\":39792,\"start\":39788},{\"end\":39966,\"start\":39913},{\"end\":40189,\"start\":40185},{\"end\":40469,\"start\":40451},{\"end\":40699,\"start\":40695},{\"end\":40896,\"start\":40892},{\"end\":41145,\"start\":41141},{\"end\":41322,\"start\":41260},{\"end\":41577,\"start\":41536},{\"end\":41841,\"start\":41837},{\"end\":42059,\"start\":42055},{\"end\":42735,\"start\":42731},{\"end\":42968,\"start\":42918},{\"end\":43201,\"start\":43197},{\"end\":43448,\"start\":43435},{\"end\":43730,\"start\":43726},{\"end\":44003,\"start\":43999},{\"end\":44246,\"start\":44242},{\"end\":44583,\"start\":44529},{\"end\":44972,\"start\":44913},{\"end\":45200,\"start\":45196},{\"end\":45362,\"start\":45358}]"}}}, "year": 2023, "month": 12, "day": 17}