{"id": 239036980, "updated": "2022-11-09 14:49:52.034", "metadata": {"title": "Error-Controlled, Progressive, and Adaptable Retrieval of Scientific Data with Multilevel Decomposition", "authors": "[{\"first\":\"Xin\",\"last\":\"Liang\",\"middle\":[]},{\"first\":\"Qian\",\"last\":\"Gong\",\"middle\":[]},{\"first\":\"Jieyang\",\"last\":\"Chen\",\"middle\":[]},{\"first\":\"Ben\",\"last\":\"Whitney\",\"middle\":[]},{\"first\":\"Lipeng\",\"last\":\"Wan\",\"middle\":[]},{\"first\":\"Qing\",\"last\":\"Liu\",\"middle\":[]},{\"first\":\"David\",\"last\":\"Pugmire\",\"middle\":[]},{\"first\":\"Rick\",\"last\":\"Archibald\",\"middle\":[]},{\"first\":\"Norbert\",\"last\":\"Podhorszki\",\"middle\":[]},{\"first\":\"Scott\",\"last\":\"Klasky\",\"middle\":[]}]", "venue": "SC21: International Conference for High Performance Computing, Networking, Storage and Analysis", "journal": "SC21: International Conference for High Performance Computing, Networking, Storage and Analysis", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "Extreme-scale simulations and high-resolution instruments have been generating an increasing amount of data, which poses significant challenges to not only data storage during the run, but also post-processing where data will be repeatedly retrieved and analyzed for a long period of time. The challenges in satisfying a wide range of post-hoc analysis needs while minimizing the I/O overhead caused by inappropriate and/or excessive data retrieval should never be left unmanaged. In this paper, we propose a data refactoring, compressing, and retrieval framework capable of 1) fine-grained data refactoring with regard to precision; 2) incrementally retrieving and recomposing the data in terms of various error bounds; and 3) adaptively retrieving data in multi-precision and multi-resolution with respect to different analysis. With the progressive data re-composition and the adaptable retrieval algorithms, our framework significantly reduces the amount of data retrieved when multiple incremental precision are requested and/or the downstream analysis time when coarse resolution is used. Experiments show that the amount of data retrieved under the same progressively requested error bound using our framework is 64% less than that using state-of-the-art single-error-bounded approaches. Parallel experiments with up to 1, 024 cores and $\\sim\\ 600$ GB data in total show that our approach yields $1.36\\times$ and $2.52\\times$ performance over existing approaches in writing to and reading from persistent storage systems, respectively.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/sc/0001GCWW0PAPK21", "doi": "10.1145/3458817.3476179"}}, "content": {"source": {"pdf_hash": "6d0a4942866648c66bd04caa2a92c7fe6c624feb", "pdf_src": "IEEE", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "https://www.osti.gov/biblio/1855631", "status": "GREEN"}}, "grobid": {"id": "8bffe6ff789b8b1636c89db28c1cc3e06a5d5763", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/6d0a4942866648c66bd04caa2a92c7fe6c624feb.txt", "contents": "\nError-Controlled, Progressive, and Adaptable Retrieval of Scientific Data with Multilevel Decomposition\nNovember 14-19, 2021. 2021. November\n\nXin Liang xliang@mst.edu \nQian Gong qgong@ornl.gov \nJieyang Chen chenj3@ornl.gov \nBen Whitney whitneybe@ornl.gov \nLipeng Wan wanl@ornl.gov \nQing Liu qliu@njit.edu \nDavid Pugmire pugmire@ornl.gov \nRick Archibald archibaldrk@ornl.gov \nNorbert Podhorszki pnorbert@ornl.gov \nScott Klasky klasky@ornl.gov \nXin Liang \nQian Gong \nJieyang Chen \nBen Whitney \nLipeng Wan \nQing Liu \nDavid Pugmire \nRick Archibald \nNorbert Podhorszki \nScott Klasky \n\nMissouri S&T Rolla\nMOUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nNew Jersey Institute of Technology New York\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\n\nOak Ridge National Laboratory Oak Ridge\nUSA\n\nError-Controlled, Progressive, and Adaptable Retrieval of Scientific Data with Multilevel Decomposition\n\nSC'21: The International Conference for High Performance Computing, Networking, Storage, and Analysis\nSt. Louis, MONovember 14-19, 2021. 2021. November10.1145/3458817.3476179ACM ISBN 978-1-4503-8442-1/21/11. . . $15.00 over existing approaches in writing to and reading from persistent storage systems, respectively. Data compression, error control, storage and I/O, data retrieval ACM Reference Format: 14-19, 2021, St. Louis, MO. ACM, New York, NY, USA, 13 pages. https://doi.\nExtreme-scale simulations and high-resolution instruments have been generating an increasing amount of data, which poses significant challenges to not only data storage during the run, but also post-processing where data will be repeatedly retrieved and analyzed for a long period of time. The challenges in satisfying a wide range of post-hoc analysis needs while minimizing the I/O overhead caused by inappropriate and/or excessive data retrieval should never be left unmanaged. In this paper, we propose a data refactoring, compressing, and retrieval framework capable of 1) fine-grained data refactoring with regard to precision; 2) incrementally retrieving and recomposing the data in terms of various error bounds; and 3) adaptively retrieving data in multi-precision and multi-resolution with respect to different analysis. With the progressive data re-composition and the adaptable retrieval algorithms, our framework significantly reduces the amount of data retrieved when multiple incremental precision are requested and/or the downstream analysis time when coarse resolution is used. Experiments show that the amount of data retrieved under the same progressively requested error bound using our framework is 64% less than that using state-of-the-art single-error-bounded approaches. Parallel experiments with up to 1, 024 cores and \u223c 600 GB data in total show that our approach yields 1.36\u00d7 and 2.52\u00d7 performance ACM acknowledges that this contribution was authored or co-authored by an employee, contractor, or affiliate of the United States government. As such, the United States government retains a nonexclusive, royalty-free right to publish or reproduce this article, or to allow others to do so, for government purposes only.Input datasets and versions: 4 datasets on SDRbench.URL to output from scripts that gathers execution environment information. https://github.com/lxAltria/Multiprecision-data-refa \u230b ctoring/blob/hpss/misc/environment.txt \u21a9\u2192\n\nINTRODUCTION\n\nThe data generated by large-scale experimental devices and the speed of computing processors have grown more rapidly than the capacity and I/O of storage over the last decade [20]. For example, data collectively generated by the experiments of Large Hadron Collider (LHC) particle accelerator, at the European Center for Nuclear Research (CERN), has exceeded 700 PB/year [2] and is expected to grow to the tens of exabytes level by 2025. Fusion simulation codes that model the next-generation fusion devices typically require 2 trillion particles and more than 1,000 timesteps for each run; one simulation could generate over 200 PB if physical attributes are fully preserved [1]. On the other hand, the parallel file systems (PFS) which the supercomputers are mounted to are typically at a scale of several hundred PB and are expensive to expand. To avoid the PFS being dominated by results from a single large-scale simulation/experiment, the generated data must be quickly moved to secondary storage tier, e.g., disk and tapes, for long-term archive.\n\nComparing to PFS, the bandwidth of lower storage tiers is several order of magnitude slower, at a speed of 1-2GB/s or less versus 2-2.5TB/s of PFS. Once the data is purged from the PFS, it would take weeks if not months to transfer them back from secondary storage systems. These storage shortage and I/O bottleneck have severely limited the capability and the speed of scientific discovery.\n\nTo alleviate the storage and I/O burden, scientists usually reduce the data in one way or another before moving them into lower storage tiers, by either writing out less experimental/simulation data or compressing the data through lossy or lossless algorithms. Triggering or filtering [10,21] is usually performed during data collection so that only interesting events are kept. Nevertheless, important information with scientific insights may be lost during this process. Lossless compressors such as [6,13,17,19,23,50] are able to reconstruct data to its full accuracy. However, because scientific data are normally high-precision floating-point numbers, lossless compressor can only achieve limited compression ratio (in most cases less than 2 [32,38,43]) due to the random mantissas in the floating-point representation. Lossy compressors including [18,27,45,46], in comparison, provide higher compression ratios but at the loss of data fidelity. Recently, error-controlled lossy compression techniques [14,[29][30][31]33] have been proposed to reduce data size while controlling distortion. These methods guarantee that the error of decompressed data is within a user-defined error bound.\n\nEven error-controlled lossy compressors have their shortcomings. First, the compression errors in raw data do not lead to the same errors in quantities of interest (QoI), which could be the very phenomena scientists wish to investigate. Compressing data using one error bound is unable to meet the various needs from different analyzers and may become useless if the QoI/analyzers change after data being compressed. Moreover, application scientists do not know the appropriate error bound ahead. Such error bound is usually obtained by playing the data compressed using different error bounds until the reconstructed QoI converges to the expectation. Although lossy compressors can reduce data with multiple error bounds and store them individually, such operation will adversely incur storage overhead and become extremely costly if the step size of the required error bounds is small. In addition, when application scientists find the current level of accuracy is insufficient, they must retrieve and reconstruct data from scratch for the next level of accuracy, which costs additional I/O and computation.\n\nAn alternative to multi-error-bounded lossy reduction is the progressive compression and transmission. Progressive compression tackles the I/O bottleneck by offering a capability to stream users as much information as needed or as possible under system constraints. Progressive compressors first decompose or refactor data into a multi-resolution/precision format before compression. The reconstruction can then be performed in an incremental manner, i.e., when users change the requested accuracy, only the partial data that leads to the next level of precision/resolution will be retrieved. A most well-known progressive compressor is JPEG [45,46]. JPEG decomposes image into a hierarchical structure of increasing resolution. During progressive transmission, the transmitter first sends a blurry preview of the image and keeps rendering until the image reaches its full precision. Progressive JPEG works in almost all modern web browser, however, it has rarely been used for scientific data because JPEG cannot provide a quantifiable numerical error bound.\n\nIn contrast to visualization, scientific discovery needs a quantitative bound on the fidelity in order to trust the data for use.\n\nOur work tackles the storage and I/O bottleneck in scientific computation using error-controlled progressive compression. We develop a data refactoring and compression framework whereby the data can be prioritized and progressively retrieved and recomposed with mathematically guaranteed error bounds at any stage. Our framework is built upon a multilevel, lossy compressor -MGARD [3,5]. MGARD decomposes data into a pyramid structure (a.k.a multiple levels) of coefficients through 2 projection and gives numerical bounds on the loss incurred by the reduction through rigorous mathematical analysis. A uniqueness of MGARD is that it offers fully computable, mathematical guaranteed error bounds on derived quantities [4]. However, original MGARD only supports resolution incremental re-composition, which leads to large discrepancies on accuracy between adjacent levels. This work significantly expands the original MGARD by implementing both resolution-and precision-based incremental re-composition, and offering a fine-grained error control throughout the progressive data retrieval. The contributions are summarized as follows.\n\n\u2022 We design a data refactoring algorithm and error control theory which enable efficient storage and error-bounded retrieval. The proposed algorithm decomposes data into a hierarchy of increasing resolution and precision by coupling MGARD with bit-plane encoding. The decomposed coefficients will be stored across the storage tiers (e.g., PFS, tape) matching their level of precision/resolution. Such mapping from the data hierarchy to storage hierarchy helps minimize I/O burden during data retrieval. \u2022 We implement a framework capable of progressively retrieving and recomposing data for incremental precision/resolution and the retrieval can terminate at any stage with bounded error. This progressiveness offers two benefits: 1) it allows asynchronous execution of data retrieval/streaming, re-composition, and analysis, all with known error bounds at any moment; 2) it further alleviates the I/O burden by only streaming the part of data leading to the next precision level till the analysis results converge. \u2022 We generalize a greedy algorithm to improve the retrieval efficiency toward multiple error metrics. This algorithm can be adaptable to diverse post-analysis, where it further reduces the retrieval size by altering the retrieval order of refactored data based on analysis and/or boost the analysis performance by offering coarse-grained representations. We also optimize our framework by making trade-offs between data processing and I/O. \u2022 We evaluate our framework and compare it with state-ofthe-art scientific data compressors on a cluster using up to 1, 024 cores with data from production simulations. Experiments demonstrate that the proposed approach can reduce the storage requirement by 50% when multiple precision is required and the retrieval size by up to 64% when incremental precision is requested, compared with the best existing error-controlled lossy compressors. This helps improve the total storing and retrieval performance to 1.36\u00d7 and 2.52\u00d7, respectively, when executed in parallel with 1, 024 cores.\n\nWe organize the paper as follows. In Section 2, we motivate the research problem and discuss the related works. In Section 3, we introduce bit-plane encoding and multilevel decomposition of MGARD, which are two building blocks of our framework. In Section 4, we present the theories leading to the error control in progressive compression. In Section 5, we show the design and implementation of the framework. In Section 6, we evaluate our method using real-world simulation data from scientific applications. Finally, we conclude with a vision for future work in Section 7.\n\n\nPROBLEM AND RELATED WORKS\n\nThe imbalance growth between data and storage capacity has become a severe problem over the last decade and will become more acute in the era of exascale computing, further hampering scientific discoveries. Lossy compression has been considered as a promising candidate to tackle the storage and I/O constraints. Despite the wide range of compression techniques available in the literature, their acceptance by the scientific application community has been low. Reason for this reticence include 1) scientists are worried the reduction process will compromise the very phenomena that the data were generated to investigate; 2) data reduced under a single error constraint may not fit with the various needs of different analysis. In addition, for many large-scale scientific experiments/simulation, data will still be humongous even after compression. In such case, the reduced data will again need to be moved to secondary storage tier (e.g., tape) where the space is larger but the bandwidth is lower, causing slow-down in data retrieval. Normally, the data generation (e.g., large-scale experiments, simulation) only happens occasionally but the produced data will be retrieved numerous times by different studies. Due to the slow bandwidth of secondary storage tier, the cost of inappropriate/excess data retrieval can be high. We hope to deliver users with just about the amount of data in an accuracy as needed by the analysis.\n\nMany efforts have been put to study the progressive representations for efficient data transmissions and analytics. For instance, SBHP [16] and JPEG2000 [45] used a block-based approach to support mixed progressiveness in resolution and precision. In [22], the authors studied the trade-off between reducing precision and resolution for visualization tasks, and proposed an algorithm to computing a best-fit progressive data stream toward a given metric. Another category of methods features data representation in adaptive resolution [11,34,35,49], which usually allows for progressive update as well. Although these approaches manage to increase the accuracy of data in a progressive manner, their error control is usually post hoc, i.e., data have to be decompressed and evaluated during compression to obtain the error. Furthermore, compressed data streams generated by these method are optimized toward a specific metric, leading to suboptimal efficiency when a different metric is needed during retrieval.\n\nError-bounded lossy compressors [3, 8, 15, 26, 29-31, 33, 39] tackle the challenge of data trust by reducing data with quantifiable error bounds. They take a user-specified error bound as input during compression and ensure that such error bound is respected in the decompressed data, eliminating the process of evaluation during compression. These compressors can be generally separated into two categories: prediction-based and transform-based.\n\nThe most well-known prediction-based compressor is SZ [30]. SZ consists of four stages in its compression pipeline: prediction, linearquantization, customized Huffman encoding, and lossless compression. While being excelling at reducing data under \u221e error bound, SZ has one major limitation that its compression/decompression process is heavily data dependent, i.e., the reconstruction of latter points is based on the reconstructed value of the previous ones in order to guarantee the same predicted values in compression and decompression. Such workflow of SZ has prevented it from changing the resolution of reduced representation or generating multi-precision ensembles from data compressed using a single error bound. ZFP [31] is a transform-based lossy compressor. It leverages a custom, near orthogonal transform and embedded bitplane encoding to decorrelate and encode the data. Though the embedded encoding of ZFP allows it to recompose data to different precision in theory (not available in the current implementation: current progressive ZFP only supports a fixed-rate mode which does not enforce the user-specified error bound), the re-composition to adaptable resolutions remains to be an obstacle. In addition, the error control theory of ZFP is only applied on raw data. We choose to build our data refactoring and retrieval framework upon a recently proposed lossy compressor -MGARD [3,5] because it supports multi-resolution re-composition and provides rigorous mathematical bounds on not only the raw data but linear derived quantities [4]. A major problem with MGARD is that its progressive re-composition at the resolution level is too coarse-grained, causing efficiency when intermediate accuracy is desired.\n\nIn this paper, we aim to answer two questions: 1) how to let the application scientists feel comfortable to use the reduced data for research investigation; 2) how to reduce the I/O burden and the overall data size requested during retrieval. Accordingly, we propose a data refactoring and retrieval framework that supports adaptable data retrieval with error control in fine-grained progressiveness. The progressive retrieval with incremental accuracy allows application scientists to retrieve as much as data as needed or allowed by the resource constraints and observe the error to converge to a level of satisfaction at the same time. We further leverage a greedy algorithm which is adaptable to various metrics from diverse analysis. Our data retrieval/re-composition framework provides fine-grained error control on multiple metrics, and its progressiveness significantly releases the I/O pressure.\n\n\nBACKGROUND\n\nOur precision incremental progressive data retrieval is inspired by bit-plane encoding, whereas the multilevel data decomposition and error control theory are built upon MGARD. We briefly introduce the two techniques in this section. Some commonly used notations in the paper are summarized in Table 1.\n\n\nBit-plane encoding\n\nBit-plane encoding has been traditionally used in media file compression. It views integer data in their binary format and slices them into separate bit-planes, where each plane is the collection of bits of data elements on a given bit position. The floating-point scientific data can be transformed into integers using exponent alignment. For -bit data, the 1 bit-plane contains the most significant bits Number of levels in multilevel decomposition. ,\u02dcFunctional of original/recomposed data. N Level subgrids. The 2 projection operator for level . \u03a0\n\nThe piecewise multilinear interpolation operator. The identity operator. \u0394 Functional of original multilevel coefficients in level . \u0394\u02dcFunctional of reconstructed multilevel coefficients in level .\n\n\n\u0394\u02dcF\n\nunctional of reconstructed multilevel coefficients in level using the first bit-planes. Q\n\nA bounded linear data analysis. \u2225\u00b7\u2225 \u221e \u221e norm for vectors.\n\n\u2225\u00b7\u2225 2 2 norm for vectors.\n\nNumber of encoded bit-planes for each data value.\n\nand N \u210e bit-plane contains the least significant bits. This sequential order of bit-planes offers an easy way to prioritize the information content of original data and allows users to progressively retrieve information up to the maximal achievable precision.\n\nHere we consider floating-point scientific data. Denote as the maximal exponent in the input data and \u2225\u00b7\u2225 \u221e as the -infinity norm of a vector, i.e. 2 \u22121 \u2264 \u2225 \u2225 \u221e < 2 , the error incurred by bitplane encoding is expressed as follows. Assuming that bit-planes are recorded during encoding (which indicates that data is aligned to exponent \u2212 + 1), the -th bit-plane will represent a precision of 2 \u2212 . Fetching the first (0 < < ) bit-planes leads to an \u221e error of 2 \u2212 in the reconstructed data. Although bit-plane encoding allows progressive data re-composition with bounded errors, the algorithm alone does not guarantee efficient compression as it does not consider the data correlation in continuous field. In this paper, we couple the bit-plane encoding with the decorrelating transform of MGARD to to obtain better compression, multi-resolution data representation, and adaptable data retrieval for varied error metrics.\n\n\nMultilevel decomposition and error control\n\nMGARD decomposes data into a pyramid of coefficients amenable to compression. Due to the space limit, below we only brief the data decomposition/re-composition algorithm and error control theory of MGARD. Please refer to [3][4][5] for full mathematical treatments.\n\n3.2.1 Multilevel decomposition. MGARD treats the data as the values taken by a continuous piecewise function on a grid N , where N has the same grid structure as the input data. It decomposes the data into multilevel coefficients through multilinear interpolation and 2 projection. Denote as the 2 projection and \u03a0 as the piecewise multilinear interpolant for level , MGARD decomposes the data in a bottom-up fashion as follows:\n\n(1) Start with = where is the finest (maximal) level. to obtain next-level representation \u22121 .\n\n(5) Decrement and repeat until = 0, where the coarsest representation is obtained.\n\nDue to the continuousness of original data and the fact that the decomposed coefficients are the difference between the original and the interpolated intermediate, values of many coefficients would be close to 0. Compression is achieved by quantizing and storing the coefficients instead of the original data. Re-composition is the inverse operation of decomposition where we start with the coarsest level = 0 and reconstruct the data in a top-down fashion. The original MGARD only supports a resolutionbased progressive re-composition. As depicted below, data representation at the resolution level is obtained by combining the coefficients from level 0 to :\n= =0 ( \u2212 \u22121 ) = =0 ( \u2212 \u22121 )\u0394 .(1)\nHowever, such data refactoring only provides coarse-grained error control leading to limited usage in domains where the quantifiable error is not a concern (e.g., visualization).\n\n\nError control.\n\nMGARD provides a comprehensive error control theory in terms of \u221e norm and 2 norm [3,5]. Denote\u02dcas the continuous piecewise function representing the recomposed data, the \u221e and 2 errors between and\u02dcare bounded as follows:\n|| \u2212\u02dc|| \u221e \u2264 \u221e =0 \u2225\u0394 \u2212 \u0394\u02dc\u2225 \u221e ,(2)|| \u2212\u02dc|| 2 2 \u2264 =0 ( )\u2225\u0394 \u2212 \u0394\u02dc\u2225 2 ,(3)\nwhere \u221e is a derived constant and ( ) is the volume of cells in level subgrids. Unique to other methods, MGARD also provides error control on any bounded linear analysis Q [4]. Specifically, the error of between Q ( ) and Q (\u02dc) can be guaranteed as follows:\n\u2225Q ( ) \u2212 Q (\u02dc)\u2225 \u2264 \u03a5 (Q) 2 ( =0 2 2 ( )\u2225\u0394 \u2212 \u0394\u02dc\u2225 2 2 ), (4)\nwhere is a user-specified parameter to indicate the smoothness of Q and \u03a5 (Q) is the operator norm computed from Q.\n\n\nQuality assessment\n\nThe quality of various approaches used in this work is evaluated using rate-distortion [9]. Analogous to bit-rate which stands for average number of bits per data in the compressed representation, we use percentage which represents the size of retrieved data over that of original data. As for distortion, we use both normalized \u221e error and PSNR as they are the most general and widely used metrics in the community [3,5,28,30,31,44]. Denoting as the total number of elements, PSNR is defined as follows:\n\nPSNR( ,\u02dc) = 20 log 10 (max( ) \u2212 min( )) \u2212 10 log 10 (\u2225 \u2212\u02dc\u2225 2 2 / ).\n\nGenerally speaking, \u221e error is influenced by several largely distorted points while PSNR measures global data loss as it is computed from mean squared error. The quality of different approaches is compared by checking the percentages under the same distortion.\n\n\nTHEORETICAL FOUNDATION\n\nWe couple bit-plane encoding with MGARD decomposition because it can provide fine-grained progressive precision for multilevel coefficients {\u0394 }. In what follows, we first derive how this approach enables progressive error control for both recomposed data and derived quantities, followed by how it enables progressive coefficient reconstruction which saves the computational cost.\n\n\nProgressive error control\n\nWe enable fine-grained progressive error control for \u221e errors, 2 errors, and QoI errors using auxiliary error matrices. The error matrix is an \u00d7 ( + 1) array where [ ] [ ] indicates the error bound of the multilevel coefficients in level when bit-planes are used to reconstruct the data. We further define the \u221e error matrix \u221e and the squared 2 error matrix 2 as follows:\n\u221e [ ] [ ] = \u2225\u0394 \u2212 \u0394\u02dc\u2225 \u221e , 2 [ ] [ ] = \u2225\u0394 \u2212 \u0394\u02dc\u2225 2 2 ,\nwhere \u0394\u02dcis the functional of reconstructed multilevel coefficients using the first bit-planes. Next, we show how to compute the error matrices and use them to control errors in bit-plane level.\n4.1.1 \u221e error.\nAccording to the definition of bit-plane encoding that is introduced in Section 3.1, \u221e can be directly inferred by the maximal multilevel coefficients in each level:\n\u221e [ ] [ ] = \uf8f1 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f3 ||\u0394 || \u221e = 0 2 \u2212 1 \u2264 \u2264 + 1 2 \u2212 \u22121 > + 1 .\nwhere is the precision (i.e., number of mantissa) of original data type and is the exponent of the maximum coefficient in level . Given \u221e , we have the following lemma for \u221e error control.\n\nLemma 1. When bit-planes of the coefficients in level ( = 0, 1, 2, . . . , ) are retrieved, the maximum error between original data and recomposed data\u02dccan be bounded by the following equation:\n|| \u2212\u02dc|| \u221e \u2264 \u221e =0 \u221e [ ] [ ],(5)\nwhere \u221e is the derived constant depending on data dimensions [3].\n\nThis lemma can be proved by a simple combination of Eq.\n\n(2) and the definition of \u221e :\n\u2225 \u2212\u02dc\u2225 \u221e \u2264 \u221e =0 \u2225\u0394 \u2212 \u0394\u02dc\u2225 \u221e \u2264 \u221e =0 \u221e [ ] [ ].\nTherefore, by coupling the bit-plane encoding with multilevel decomposition, we can also control the \u221e error of the recomposed data in a progressive fashion, based on \u221e and the number of bit-planes fetched in each level.\n\n\n4.1.2\n\n2 error and PSNR. We use Algorithm 1 to compute precise in 2 . At each bit location, we recover the corresponding data value (line 7), compute and accumulate the 2 errors (line 8), and clear the current bit to exclude that bit-plane (line 9).\n\n\nAlgorithm 1 Computation of 2 [ ].\n\nInput: level index ; level coefficients \u0394 ; aligned level exponent ; number of recording bit-planes .\n1 for = 0 \u2192 do 2 2 [ ] [ ] \u2190 0 \u22b2 Initialize auxiliary arrays 3 end for 4 for \u2208 \u0394 do 5 \u2190 exponent_align( , ) \u22b2 Get the integer after exponent alignment 6 for = \u2192 0 do 7 \u2032 \u2190 exponent_recover( , ) \u22b2 compute the reconstructed data 8 2 [ ] [ ] \u2190 2 [ ] [ ] + | \u2212 \u2032 | 2 \u22b2 accumulate 2 [ ] [ ] 9\n\u2190 clear_bit( , ) \u22b2 set the -th bit to 0 10 end for 11 end for 12 return 2 [ ] Once 2 is computed, the 2 errors and PSNR of the recomposed data can be controlled in a similar way to \u221e error, by combining Eq. (3) and the definition of 2 .\n\nLemma 2. When bit-planes of the coefficients in level ( = 0, 1, 2, . . . , ) are retrieved for -dimensional data, the 2 error and PSNR between the original data and recomposed data\u02dccan be bounded by the following equation:\n\u2225 \u2212\u02dc\u2225 2 2 \u2264 =0 ( ) 2 [ ] [ ],(6)( ,\u02dc) \u2265 20 log 10 max( ) \u2212 min( ) =0 ( ) 2 [ ] [ ]/ ,(7)\nwhere ( ) is the volume of cells in level subgrids.\n\n\nQoI error.\n\nAccording to Eq. (4), QoI error control can be translated to 2 error control by multiplying a level-wise weight 2 and global weight \u03a5 (Q). Thus, the QoI errors can be bounded using 2 as follows.\n\nLemma 3. When bit-planes of the coefficients in level ( = 0, 1, 2, . . . , ) are retrieved for -dimensional data, the QoI error between the result applied to original data and that applied to recomposed data\u02dccan be bounded by the following equation:\n\u2225Q ( ) \u2212 Q (\u02dc)\u2225 2 \u2264 \u03a5 (Q) 2 ( =0 2 2 ( ) 2 [ ] [ ]),(8)\nwhere Q is the target bounded linear analysis, is a tunable parameter, ( ) is the volume of cells in level subgrids, and \u03a5 (Q) is the operator norm computed from Q.\n\n\nProgressive coefficient reconstruction\n\nWe then show that the coefficient reconstruction of the coupled approach can be progressive, i.e., only the incremental bit-planes need to be reconstructed and used to recompose delta data.\n\nDenoting a previously recomposed representation as 1 where bit-planes are used to reconstruct coefficients in level and the target recomposed representation as 2 where \u2032 ( \u2032 \u2265 ) bitplanes are used. Because {\u0394 } is the multilinear functional of the multilevel values \u0394 ( ), i.e. \u0394 = \u2208N * \u0394 ( ) (\u00b7; ) where (\u00b7; ) is the multilinear nodal basis function at node , we have \u0394 \u2032 = \u0394 + \u0394 \u2032 \u2212 . Therefore, 2 can be rewritten as follows according to Eq. (1):\n2 = =0 ( \u2212 \u22121 )\u0394 \u2032 = =0 ( \u2212 \u22121 ) (\u0394 + \u0394 \u2032 \u2212 ) = =0 ( \u2212 \u22121 )\u0394 + =0 ( \u2212 \u22121 )\u0394 \u2032 \u2212 = 1 + =0 ( \u2212 \u22121 )\u0394 \u2032 \u2212(9)\nThis equation indicates that we shall perform the re-composition on the incremental data \u0394 \u2032 \u2212 and add the result to previously recomposed representation to obtain 2 . This reduces the time cost on coefficient reconstruction because \u0394 \u2032 \u2212 instead of \u0394 \u2032 will be reconstructed. As the coefficient reconstruction time dominates the re-composition time when precision is high, this progressiveness in computation will improve the performance of re-composition.\n\n\nREFACTORING/RETRIEVAL FRAMEWORK\n\nWith the error control and progressive reconstruction theory, we present our data refactoring/retrieval framework that enables the progressiveness, adaptivity, and fine-grained error control.\n\n\nData refactoring\n\nWe briefly introduce the data refactoring/writing phase in our framework at first. As illustrated in Fig. 1, our framework first takes in the input data and decomposes it into multilevel coefficients using MGARD. These multilevel coefficients are then decomposed into small precision fragments (each fragment is a separate file that contains multiple consecutive bit-planes. See Section 5.2.3) using bit-plane encoding and written into PFS. After that, part of these precision fragments which exceed the storage limit of PFS are packed and transmitted to secondary storage systems such as tapes for long-term archive. The precision fragments of higher importance are left in the PFS for quick access and fast queries.\n\nAlgorithm 2 Multilevel data refactoring with bit-plane encoding. Input: original data ; maximum level ; number of encoding bit-planes .\n1 \u2190 \u22b2 initialization 2 for = \u2192 0 do 3 \u22121 , u_mc[N * ] = decompose( ) \u22b2 decompose the current data 4 buffer \u2190 interleave(u_mc[N * ]) \u22b2 collect multilevel components 5 \u2225\u0394 \u2225 \u221e \u2190 max(buffer) \u22b2 compute \u2225\u0394 \u2225 \u221e 6 2 [ ] \u2190 compute_ 2 (buffer) \u22b2 compute 2 [ ] 7\nstreams[ ], [ ] \u2190 encoding(buffer, \u2225\u0394 \u2225 \u221e ) \u22b2 bit-plane encoding and lossless compression 8 end for 9 write_to_PFS(metadata) \u22b2 write metadata to PFS 10 write_to_PFS(streams) \u22b2 write data to PFS 11 select_and_write_to_tape(streams) \u22b2 move low-precision portions to tapes A simplified refactoring algorithm is presented in Algorithm 2. We decompose the original data using MGARD (line 3), extract the multilevel coefficients (line 4), compute the maximal coefficient for level-wise exponent align (line 5), collect the 2 errors (line 6) and encode the data in the granularity of bit-plane (line 7). When executed in parallel, an Allreduce operation needs to be performed to align the global \u221e bound on all processors.\n\nNote that a few metadata, of which the most important ones are listed in Table 2, need to be recorded during refactoring to provide error-controlled data retrieval. These metadata merely take constant storage space, which is negligible compared with data size. \n\n\nData retrieval and re-composition\n\nWith the refactored data, the retrieval/re-composition phase of our framework is depicted in Fig. 2. The retriever in the framework will compute how much data is needed for a requested error bound, and fetch that data from the corresponding places where they are stored. Note that data is fetched in the granularity of file (where each file contains a precision fragment), so there will be no random access within a file. In what follows, we will detail the retrieval process, along with our optimizations toward performance considerations.\n\n\nError-controlled data retrieval.\n\nWith the refactored precision fragments and collected metadata, we can compute the guarantee error bounds for any target error metric \u2208 { \u221e , 2 } { } based on Lemma 1, Lemma 2, and Lemma 3. The challenging problem for retrieval now becomes: in what order should we retrieve the bit-planes to achieve the minimal size?\n\nAs the optimal setting is hard to seek, we generalize a greedy algorithm [12] to figure out a feasible retrieval order that is adaptable to the target error metrics. Similar to [12], we make a reasonable assumption to simplify this problem. Specifically, we assume that the bit-planes in the same level are retrieved in order, i.e., the \u210e bit-plane is always retrieved before the ( + 1) \u210e bit-plane. This assumption is usually true because the front bit-planes contain more information with smaller size than the latter ones. Unlike [12] which targets on mean squared error only, we consider an adaptive approach based on the required error metrics. Also, we leverage the MGARD's theory instead of reconstruction and evaluation to estimate the error for higher efficiency.\n\nWe define a similar metric to determine the retrieval order of inter-level bit-planes. Under previous assumption, the error decrease caused by fetching a specific bit-plane can be quantitatively estimated. By rewriting the error bounds in Eq. is defined as its resulting error decrease over its size: Figure 1: The data writing workflow of our framework. Data are first refactored into inter-level coefficients, which are further decomposed into intra-level precision fragments (e.g., the small colored pieces). Selective precision fragments are stored in parallel file systems for fast access while the others are packed and moved to secondary storage. Figure 2: The data retrieval workflow of our framework. Our data retriever analyzes how many data are needed to meet the required tolerance 0 . If the data that are available on parallel file systems already do, we will reconstruct the data directly. Upon another request of tolerance 1 < 0 , our retriever computes and fetches the additional data needed from secondary storage systems based on a greedy algorithm, then recompose the delta data and add it to the current representation. There would be another re-composition process if there is a resolution change between the two required tolerances.\n( , ) = [ ] [ ] \u2212 [ ] [ + 1] [ ] [ ] ,(10)\nwhere [ ] [ ] is the size of the \u210e bit-plane in level . Based on this metric, we present our greedy-based bit-plane retrieval algorithm in Algorithm 3, using a max heap that sorts its element in terms of efficiency. We first investigate the least number of levels are required to meet the target tolerance and initialize the heap with the first bit-plane from each of the necessary levels in line 3-11. Specifically, we compute the minimal error we can get by accumulating the error of ( , ) (which indicates all bit-planes in current level are fetched) in line 3 and compare it with the target tolerance in line 6. Meanwhile, the current error 0 is initialized by accumulating the errors incurred by already fetched bit-planes (line 4) and the heap is initialized by pushing the tuple of efficiency and level index in each level (line 5). If adaptable resolution is enabled and the minimal achievable tolerance is less than the target one, we limit the number of levels from which the bit-planes can be fetched (line 8). After that,the retrieval order of bit-planes is determined in line 12-19. During each iteration, the level index with the highest efficiency is popped (line 13), which indicates the next bit-plane we are going to fetch. Then, the current error is decreased accordingly (line 14) and the index for the selected level is incremented (line 15). At the end of each iteration, we check whether the selected level has more bit-planes and push the next one to the heap if exists. The loop is repeated until the error tolerance is met or the heap becomes empty (line 12), which indicates all the recorded bit-planes have been fetched. At the end of the algorithm, the difference between the input and returned index array shows how many bit-planes need to be retrieved from each level. Figure 3 shows the efficiency of the proposed retrieval order on two example data fields under error metric PSNR when compared with naive orders such as level order and round-robin. It is observed that the greedy algorithm leads to the least retrieval size in all the cases. We also include bit-plane encoding to demonstrate the benefit of involving the decomposition. When used with QoI error metric, this retrieval algorithm can be adaptable to various analysis and derived quantities by altering the parameter that affects the error matrix. According to the level-wise factor 2 , negative indicates that errors on finer level are amplified less so bit-planes on coarser levels are preferred. In contrast, positive tends to fetch finer level bit-planes because their errors are amplified more. Thus, the selection of relies heavily on the underlying analysis, where smooth analysis such as average fits a negative while oscillating analysis such as convolution needs a positive [4]. Unlike original MGARD which limits such adaptivity to single analysis because it selects during compression/refactoring, the proposed approach can adapt to any analysis as it uses to determine retrieval order during re-composition.\n\n\nProgressive re-composition.\n\nTo make re-composition progressive, we maintain an index array which indicates how many bitplanes have already been fetched in each level. According to Eq. (9), we recompose the delta data each time when a new error tolerance is requested. As displayed in Algorithm 4, we first interpret the number of bit-planes needed for each level using the greedy algorithm mentioned in the previous section (line 1), and then start the re-composition from the coarsest level. In each iteration, we fetch and decode only the necessary bit-planes for current level (line 5), de-interleave the multilevel coefficients to put them in the right place (line 6), and recompose the delta data using MGARD (line 7). Note that we need to recompose the current representation to the resolution of delta if the delta data has a higher resolution than the current representation (line 9-11). At last, we update the index array and current re-composition level (line 12) before returning the current representation.\n\nCompared with recomposing using all of previous fetched bitplanes, progressive re-composition mainly saves time for decoding, because less precision fragments will be processed for additional \u22b2 recompose the delta 8 end for 9 for = \u2032 \u2192 \u2032\u2032 do \u22b2 recompose current data to the same resolution if need 10 \u2032 \u2190 recompose( \u2032 , {0}) 11 end for 12 \u2032 \u2190 \u2032\u2032 , \u2190 _ \u22b2 maintain necessary variables 13 return \u2032 +\u02dc\u22b2 add delta to current data accuracy. It also saves the memory for storing used precision fragments or the time to read them from PFS.\n\n\nOptimizations.\n\nWe optimize our framework by looking into the trade-off between data processing time and retrieval size. In what follows, we introduce three major optimizations that are adopted to implement the framework. Bit-plane encoding: we explore the effectiveness of two bitplane encoding algorithms, namely general bit-plane encoding and negabinary encoding, under different error metrics. General bitplane encoding method records data bit by bit, and it stores the sign of the data value after the first non-zero bit. This helps to improve the retrieval efficiency, but suffers from relative low performance due to extra branches. Negabinary encoding first converts the value to negabinary format, which represents data using the base of \u22122 (instead of 2 in the binary format). This conversion eliminates the sign for faster encoding process, but results in a looser bound for \u221e error because 2 more bit-planes are required to guarantee the same bound. This is validated in Fig. 4, where negabinary encoding needs higher retrieval percentages under a given tolerance than those of the general encoding method. However, this is not the case for PSNR, because it is computed from all the data points so the extreme cases will not dominate. Therefore, by default we use general encoding if \u221e error is the main target and negabinary encoding if 2 errors/PSNR/QoI errors will be of more interest. Adaptive lossless compression: we perform lossless compression, which is applied after bit-plane encoding to reduce the size, in an adaptive fashion, as we observe that bit-planes located in the middle lead to limited compression ratio while consuming considerable time. This is caused by the nature of bit-planes, where the most and least significant bit-planes tend to have more 0s because many converted integers do not have value for those bits. Figure 5 shows the compression ratios and time for bit-planes in the finest level of the two example data fields. It is observed that the bit-planes with indices 12 \u223c 26 in NYX velocity_x field have compression ratios close to 1 with nonnegligible computation time. Similar phenomena is observed in the QMCPACK data, where the bit-planes with indices 21 \u223c 32 exhibit the same behavior. Therefore, we adopt an adaptive strategy where we stop lossless compression when the compression ratio of current bit-plane is less than a threshold (e.g., 5% in our implementation). We also provide a parameter for users to indicate whether lossless compression will be restarted at some latter bit-planes. In this paper, we omit the restart process because 1) the restarting index can only be a rough guess and 2) most latter bit-planes will not be fetched.  Bit-plane merge: we propose to merge consecutively small bitplanes within the same level to improve the writing performance while keeping efficient retrieval. This is inspired by the fact that writing performance on PFS will be severely affected when multiple small files are written in parallel. However, merging too many bitplanes will make the progressiveness more coarse-grained, which may in turn lead to smaller retrieval percentages under given tolerance. To explore a suitable setting, we use a threshold to determine the number of bit-planes merged in each file and study the impact of different thresholds. For each level, we keep merging next bit-plane until the merged size exceeds the threshold, and write them into a single file. The corresponding rate-distortion and writing performance is shown in Fig. 6. The solid lines display the rate-distortion using different merging threshold, and their corresponding dashedlines (with the same color) indicate the time for writing the merged files into PFS. According to the figure, merging bit-planes with a threshold less than 1 almost keeps the rate-distortion the same as the one without merging (which corresponds to a merge threshold of 1 ), but reduces the writing time by half. Using a larger threshold further improves the writing time, but incurs certain negative impact on rate-distortion. As we do not want to impact the efficiency of retrieval, we set merge threshold to 1 by default. The merged file, which consists of multiple consecutive bit-planes, forms the precision fragments mentioned in Fig. 1 and Fig. 2. \n\n\nImplementation and interface\n\nWe implement our framework using a modular design, where each component is packed as a class object. The data refactor consists of a decomposer (which decomposes original data into coefficients), an interleaver (which linearizes the coefficients for encoding), an encoder (which encodes the coefficients and collects 2 ), a lossless compressor (which compresses the encoded coefficients), and a writer (which writes out the compressed files and metadata). The data retriever is composed of a corresponding reader (which reads metadata and then incremental data portion), an error estimator (which estimates the error for a given metric), a interpreter (which interprets the retrieval order), the same lossless compressor (which decompresses the encoded coefficients), a corresponding decoder (which decodes the coefficients), a corresponding de-interleaver (which inverses the interleaving process to put the coefficients to the correct place), and a corresponding recomposer (which recomposes the coefficients to reconstructed data).\n\nThis framework is general and fits other transform-based lossy compressor as well. For example, we can modify the decomposer and error estimator to make ZFP progressive in terms of \u221e and 2 errors, although it will not guarantee error in QoIs or support adaptable retrieval in terms of resolution and analysis. It also provides the users with the flexibility to link with their own I/O libraries and formats by revising only the writer and reader.\n\nThe interface of our method is similar to those of existing errorcontrolled lossy compressors such as SZ and ZFP, except that the error tolerance is specified during retrieval. During writing, the function refactor( , dims) takes the original data along with its dimensions as input, and outputs the precision fragments for each level. During reading, users need to create a retriever object that maintains the necessary information including current accuracy and number of bit-planes fetched etc. Then, the function recompose( ) will reconstruct data from its current representation to a level where the error is below . This function can be invoked multiple times with decreasing s to reconstruct data in a progressive fashion.\n\n\nEVALUATIONS\n\nWe evaluate our method in terms of error control, progressiveness, and adaptivity using four well-known real-world datasets from Scientific Data Reduction Benchmarks [42]. Specifically, we first validate the error control of our approach, then compare our method with three state-of-the-art single-error-bounded lossy compressors -SZ [30], ZFP [31], MGARD [5] -in the context of progressive retrieval, followed by our unique feature in adaptable retrieval. For all compressors we benchmarked, the latest releases were used as of Feb. 1st, 2021. For simplicity, we use PMGARD (Progressive MGARD) to refer our method.\n\n\nExperimental Setup\n\nWe conducted our experimental evaluations on the a cluster [7] using up to 1, 024 cores, where each node on the system has two 16core AMD EPYC 7302 processors and 256 GB of memory. This cluster is equipped with General Parallel File Systems [40] (GPFS) and High Performance Storage System [47] (HPSS). We use ADIOS [36] for parallel I/O with GPFS and HTAR for data transfer with HPSS. The datasets we use for evaluation are from various domains, including Hurricane Isabel climate simulation [24], NYX cosmology simulation [37], SCALE-LETKF weather simulation [48], and QM-CPACK [25] quantum Monte Carlo simulation. The details of the datasets are listed in Table 3. The data dimensions and sizes are shown on a per-core basis as our experiments are weak-scaling. \n\n\nProgressive and guaranteed error control\n\nWe first check the progressive error guarantees of the proposed approaches in term of \u221e and PSNR. Three terms are used to indicate different kinds of errors. Requested error bound stands for the error tolerance requested by the users (i.e., in Algorithm 3); estimated error means the error estimated using the theory in Section 4 (i.e., 0 in Algorithm 3); real error is the true error of the recomposed data under the given metric. The results on two datasets are displayed in Fig. 7. Based on the optimizations mentioned in Section 5.2.3, general bit-plane encoding is used for \u221e errors while negabinary encoding is used for PSNR in this evaluation. It is observed in the figure that our approach strictly respects the error bounds. For example, the true \u221e error of our recomposed data is strictly less than the estimated one, which is strictly less than the requested one. Thanks to the fine-grained progressiveness, the difference between the request error bound and estimated error bound is small. There is a small gap between true error and estimated error in Fig. 7(a), which is caused by the pessimistic estimation for \u221e error in MGARD's error control theory.  Figure 7: Requested, estimated, and real relative \u221e errors/P-SNR in our approaches.\n\n\nEfficiency of progressive retrieval\n\nWe compare the efficiency of our method with state-of-the-art single-error-bounded lossy compressors under a progressive retrieval scenario. Considering a scenario where a user hopes to evaluate how the analysis results change over the reconstructed data of different PSNR and monitors the analysis converges to the expectation. we use 6 incremental PSNR -40, 60, 80, 100, 120, 140, as an example for illustration. To accommodate the need of changed accuracy, the conventional single-error-bound compressors must compress and store multiple copies of data of different precision. In our case, ZFP and MGARD need to compress the data using 6 error bounds ranging from 10 \u22121 to 10 \u22126 , and SZ needs an extra copy compressed using an error bound of 10 \u22127 in order to meet the highest PSNR -140. In comparison, PMGAD only needs to refactor data once and keep a single copy in storage.\n\nRetrieval percentages for one precision: We show the retrieval percentages of different compressors when only one precision is requested in Table 4. As SZ and ZFP adopt different decorrelation methods, we only compare our approach with MGARD. Surprisingly, PMGARD leads to smaller retrieval percentages for most of the cases. This is mainly owing to its fine-grained error control, which avoids over-preservation of the requested PSNR. Instead, MGARD may provide a PSNR higher than the requested one because data are compressed and stored using \u221e errors. Retrieval percentages for progressive precision: Figure 8 presents the additional percentages needed to reconstruct data from previous PSNR to current PSNR. Note that ZFP has a retrieval percentage of 0 for some cases (e.g., PSNR 60 on QMCPACK), because it achieves a PSNR higher than 60 during the previous retrieval. MGARD has smaller retrieval percentages when PSNR is relatively low while larger ones when PSNR becomes high, because its decorrelation method (multilinear interpolation + 2 projection) has higher efficiency for low-precision cases but lower efficiency for high-precision cases. Our method leads to the smallest retrieval percentages on all the datasets with a large margin. The reasons are two-fold. First, the incremental nature of our progressive retrieval takes advantages of current representation to avoid redundancy; second, the fine-grained error control provides justin-enough PSNR to meet the requirement as mentioned in previous evaluation. In absolute terms, PMGARD reduces the retrieval percentage by 3.3\u00d7, 3.2\u00d7, 3.0\u00d7, and 2.8\u00d7, respectively, compared with the best of the other approaches, when reconstructing data from PSNR 120 to 140. Performance: We further study the storing/retrieval performance which considers all related data movement across multiple storage tiers. In this case, the storing process includes data compression/refactoring, writing to PFS, and moving to tapes. Similarly, the retrieval process involves fetching from tape, reading from PFS, and data decompression/re-composition. Under this situation, singleerror-bounded compressors need to compress data with different error bounds and store all compressed files to permanent storage. Our approach, instead, decomposes data once and relies on precision fragments to support retrieval under any error bound. Because each fragment corresponds to a separate file, our approach needs to write multiple files per process. We perform a weak-scaling experiment with up to 1, 024 cores using QMCPACK as an example, where the advantage of our approach is minimal.\n\nThe scalability of the storing process is depicted in Fig. 9. Compared with single-error-bounded compressors, PMGARD spends more time on writing to PFS due to the larger number of files to be written in parallel. But such writing time is small compared with compression time and negligible compared with moving time. Nevertheless, PMGARD has less compression time than that of the other compressors because it avoids the multiple compression with different error bounds. The expensive decomposition is performed only once thus the efficiency is improved a lot. Overall, as moving times dominates the storing process, PMGARD leads to the least storing time among all the approaches because it has the least data size. The total storing performance of PMGARD with 1, 024 cores is 1.36\u00d7 to that of the best existing approach.   \nS Z Z F P M G A R D P M G A R D S Z Z F P M G A R D P M G A R D S Z Z F P M G A R D P M G A R D S Z Z F P M G A R D P M G A R D Decompression\nReading from PFS Fetching from tape We then present the total time for the retrieval process in Fig. 10 and Fig. 11. Figure 10 shows the scalability of retrieval when data is reconstructed to the highest request PSNR 140 from a previous PSNR of 120 while Fig. 11 presents the retrieval time when different PSNRs are requested incrementally (the first 3 PSNRs omitted because of limited space). Similar to writing, the total retrieval time is dominated by fetching data from tapes so PMGARD leads the performance due to the least retrieval size. Its total reading performance is 2.52\u00d7 over that of the best among other approaches. We would like to note that PMGARD has comparable decompression performance to those of SZ and ZFP, which is significantly higher than that of MGARD. Such improvement comes from the progressive coefficient reconstruction that saves decoding time.\n\n\nAdaptable retrieval\n\nWe demonstrate the adaptivity of PMGARD, where it provides adaptable resolution which accelerates the performance of analysis and adaptable retrieval which further reduces the retrieved size under given distortion based on the analysis. Adaptable resolution: we demonstrate the benefit of adaptable resolution by integrating different compressors in a visualization workflow that generates iso-surfaces of a given dataset using the Flying Edges algorithm [41]. The retrieval PSNR for all the compressors is set to 60. We set the resolution-first mode in Algorithm 3 for PMGARD in this experiments, and we retrieve the multilevel coefficients in MGARD from coarse to fine until the target PSNR is met. For the iso-surface evaluation, we choose 9 iso-values uniformly distributed along the value range of the data. To compare the accuracy of the iso-surfaces that are generated from dataset reconstructed from different compressors, we calculate the average relative error of the total area of the 9 iso-surfaces compared with those generated from the original data. As shown in Table 5, all the compressors have acceptable analysis error ( \u223c 5%) under this PSNR. As the analysis takes up major time (compared with decompression), MGARD and PMGARD lead to much less execution time thanks to the coarse representation. However, MGARD has much higher retrieval percentages due to the coarse granularity, which will result in significant time for data movement as depicted before. On the other hand, PMGARD keeps both low retrieval percentage and reduced resolution, which promises the best performance.\n\nAdaptable retrieval with respect to analysis: our approach can adapt to different analysis to further improve the retrieval efficiency, by altering the smooth parameter in Eq. (10) when metric is set to . Unlike MGARD whose adaptivity is tied to the specific analysis by fixing during compression, we use during retrieval to adapt one compressed format to diverse analysis. We use PSNR and global average as the target analysis in this evaluation. According to [4], = 0 is a better choice for PSNR while = \u22121 is preferred for average because of their distinct characteristics. We show in Fig. 12 that our framework can adapt the retrieval order based on such information. As we can see from the figure, = 0 1 Retrieving losslessly compressed multilevel coefficients from coarse to fine. 2 Using resolution-first mode.  Figure 12: Impact of smooth parameter on data retrieval with respect to different analysis.\n\nleads to the highest PSNR while = \u22121 has the smallest error for average. On QMCPACK, the retrieval percentages under the same distortion can be reduced by 20% when PSNR\u2248 80 and 70% when \u221e error of average \u2248 2 \u00d7 10 \u22126 .\n\n\nCONCLUSION\n\nIn this paper, we present a refactoring/retrieval framework to tackle the storage and I/O challenges in scientific computing. Our framework enables progressive data retrieval with fine-grained error control toward multiple metrics, and can adapt to the varied needs from diverse analysis, providing an efficient and reliable way for domain scientists to manage their data. Experiments demonstrate that our method leads to up to 47% and 64% less storage and retrieval size, respectively, compared with the best existing approaches. Such reduction of data size translates to 1.36\u00d7 and 2.52\u00d7 performance in writing to and reading from persistent storage systems, respectively, in a parallel experiment with 1, 024 cores. In the future, we will explore more data decomposition and precision decomposition algorithms to further improve the efficiency of the framework. Figure 4: Change encoder in both test/test_refactor.cpp and test/test_reconstructor.cpp to switch encoders. For L^inf error, comment line 30 in include/ErrorEstimator/MaxErrorEstimator.hpp if encoder is not negabinary. PSNR and L^inf error collection is similar. Figure 5: need to instrument the code to collect performance and print the ratio. Change compressor in both test/test_refactor.cpp and test/test_reconstructor.cpp to MDR::DefaultLevelCompressor(); instrument the code in include/Lossless Compressor/DefaultLevelCompressor.hpp: print time and (stream_sizes[i]*1.0/compressed_size) in the loop. Figure 7: Similar to that of Figure 5. Figure 8: Similar to that of Figure 3. Run on all the datasets. Run other compressors as well. Figure 12: uncomment line 29 in test/test_reconstructor.cpp to collect average The other operations are the same. Change the last parameter in \"./test/test_reconstructor qmcpack.dat 1 6 40 60 80 100 120 140 0\" to alter s (the last 0 in the command).\n\nParallel: (require adios, mpi, htar) git checkout hpss Figure 6: change the min_size in line 22 of include/Writer/HPSSFileWriter.hpp to alter the size. Use mpirun to collect parallel time. Figure 9: Run with mpirun: \"mpirun -np $n ./test/test_refactor qmcpack.dat 3 32 3 33120 69 69\". Use htar to move to HPSS. Figure 10: Use htar to fetch from HPSS. Run with mpirun \"mpirun -np $n ./test/test_reconstructor qmcpack.dat 1 6 40 60 80 100 120 140 0\". Figure 11: re-use result from 10 and plot different statistics\n\nAuthor-Created or Modified Artifacts:\n\nPersistent ID: https://github.com/lxAltria/Multiprec \u230b ision-data-refactoring\n\n( 2 )\n2Compute the piecewise linear interpolant \u03a0 \u22121 and subtract it from to get the multilevel component \u0394 = ( \u2212 \u03a0 \u22121 ) in level . (3) Compute the projection of the multilevel component on next level, which can be denoted as \u22121 \u0394 . This projection, which is also called correction, is equal to \u22121 \u2212 \u03a0 \u22121 . (4) Add the obtained correction \u22121 \u2212 \u03a0 \u22121 to the interpolant \u03a0 \u22121\n\n\n(5), Eq. (6), and Eq. (8) in a level-wise fashion, the \u221e error, 2 error, and QoI error incurred by level when bit-planes are fetched are bounded by \u221e ( , ) = \u221e \u221e [ ] [ ], 2 ( , ) = ( ) 2 [ ] [ ], and ( , ) = \u03a5 (Q) 2 2 2 ( ) 2 [ ] [ ], respectively. Thus, the error decrease for the \u210e ( = 0, 1, . . . , \u2212 1) bit-plane in level under the target error metric \u2208 { \u221e , 2 } { } can be computed by [ ] [ ] \u2212 [ ] [ + 1]. Taking the size of bit-plane into account, the efficiency (denoted ) of the \u210e bit-plane in level under metric\n\nFigure 3 :\n3Efficiency of greedy-based retrieval.\n\nFigure 4 :\n4Retrieved percentage and the corresponding progressive decoding throughput (TP) under given error constraints using the two encoding methods (NB stands for negabinary encoding).\n\nFigure 5 :\n5Lossless reduction ratios and time for bit-planes in the finest level. The cyan line indicates the position for adaptive lossless compression termination: lossless compression will not be applied to bit-planes after that line.\n\nFigure 6 :\n6Impact of merge threshold. Solid lines display the rate-distortion during retrieval; dashed lines with the corresponding color indicate the corresponding writing time to PFS using 128 cores.\n\nFigure 8 :\n8Additional retrieval percentages under given PSNR when data of previous precision are available.\n\nFigure 9 :\n9Total storing time of different approaches when multiple precision is needed (weak-scaling on QMCPACK).\n\nFigure 10 :\n10Total retrieval time when data are reconstructed from PSNR 120 to 140 (weak-scaling on QMCPACK).\n\nFigure 11 :\n11Total retrieval time when data are progressively reconstructed using 1, 024 cores (QMCPACK).\n\nTable 1 :\n1NotationsSymbol \nDescription \n\n\n\nTable 2 :\n2Metadata recorded during refactoring/writingSize of encoded bit-planes in each level.Name \nType \nSize \nDescription \n\n\u2225\u0394 \u2225 \u221e \n\ndouble \nMaximum level-wise coefficient value. \n\n2 \n\ndouble \n\n\u00d7 ( + 1) \n\nSquared 2 error matrix. \ninteger \n\n\u00d7 \n\n\n\n\nAlgorithm 3 Interpretation of bit-plane retrieval for required error tolerance. : required error tolerance ; current recomposed level \u2032 ; total number of decomposition levels ; number of bit-planes fetched by nowInput[0 : ]; \nnumber of recorded bit-planes ; error metric \n\u2208 { \u221e , 2 } { }; level sizes \n; error matrix \n( = 2 ). (the last fives are read from metadata) \n1 read(metadata) \n\u22b2 read metadata \n\n2 \n\n\u2190 0, 0 \u2190 0, \n_\u210e \n\u2190 \u2205 \n3 for = 0 \u2192 do \n\u22b2 initialize index and heap \n\n4 \n\n\u2190 \n+ \n( , ) \n\u22b2 compute the achievable minimal error \n\n5 \n\n0 \u2190 0 + \n( , \n[ ]) \n\u22b2 accumulate current errors in each level \n\n6 \n\n_\u210e \n.push( { ( , \n[ ]), }) \n\u22b2 push bit-plane to heap \n\n7 \n\nif \n_ \nand \u2265 \u2032 and \n\u2264 then \n\n8 \n\n\u2190 \n\u22b2 limit the number of levels to if tolerance can be met \n\n9 \n\nbreak \n\n10 \n\nend if \n11 end for \n12 while \n_\u210e \n\u2260 \u2205 and 0 \u2264 do \n\n13 \n\n\u2190 \n_\u210e \n.pop() \n\u22b2 get index of level with the largest efficiency \n\n14 \n\n0 \u2190 0 \u2212 \n( , \n[ ]) + \n( , \n[ ] + 1) \n\n15 \n\n[ ] \u2190 \n[ ] + 1 \u22b2 increment bit-plane index for the selected level \n\n16 \n\nif \n[ ] \u2260 \u2212 1 then \n\u22b2 push next bit-plane to heap if exists \n\n17 \n\n_\u210e \n.push( { ( , \n[ ]), }) \n\n18 \n\nend if \n19 end while \n20 return index, L \n\n\n\nAlgorithm 4 Progressive data re-composition. : required error tolerance ; current data representation \u2032 ; current recomposed level \u2032 ; total number of decomposition levels ; number of bit-planes fetched * ] \u2190 deinterleave(buffer) \u22b2 put multilevel components in place 7\u02dc= recompose( \u22121\u02dc,\u0169 _mc[N * ])Inputfor current representation \n[0 : ]. \n\n1 \n\n_ \n, \u2032\u2032 \u2190 size_interpretation( , \u2032 , \n) \n\u22b2 Interpret size \n\n2 \n\n\u22121 \u2190 NULL \n3 for = 0 \u2192 do \n\n4 \n\nstreams[ ] \u2190 read( \n[ ], \n_ \n[ ]) \n\u22b2 read refactored data \n(may from PFS directly or from tapes) \n\n5 \n\nbuffer \u2190 decoding(streams[ ], \n_ \n[ ], \n[ ]) \n\u22b2 lossless \ndecompression and bit-plane decoding \n6\u0169_mc[N  \n\nTable 3 :\n3Datasets for evaluationDataset \n#Fields \nDimension/core \nSize/core \nHurricane Isabel \n13 \n100 \u00d7 500 \u00d7 500 \n1.21 GB \nNYX \n6 \n512 \u00d7 512 \u00d7 512 \n3 GB \nSCALE-LETKF \n12 \n98 \u00d7 1200 \u00d7 1200 \n6.31 GB \nQMCPACK \n1 \n288 \u00d7 115 \u00d7 69 \u00d7 69 0.59 GB \n\n\n\nTable 4 :\n4Retrieval percentages for one precisionDataset \nMethod \n\nPSNR \n40 \n60 \n80 \n100 \n120 \n140 \n\nHurricane \n\nMGARD \n0.28% 1.48% 9.58% 15.19% 21.26% 28.83% \nPMGARD 0.08% 1.75% 6.92% 12.44% 18.15% 24.94% \n\nNYX \n\nMGARD \n0.05% 0.41% 8.14% 18.39% 27.40% 39.04% \nPMGARD <0.01% 0.28% 5.05% 13.49% 23.06% 32.63% \n\nSCALE-LETKF \n\nMGARD \n0.12% 0.83% 9.52% 17.50% 25.34% 34.45% \nPMGARD 0.03% 1.00% 4.90% 11.66% 18.46% 25.83% \n\nQMCPACK \n\nMGARD \n0.13% 0.64% 2.53% 17.99% 30.15% 41.85% \nPMGARD 0.03% 0.43% 3.13% 10.02% 21.10% 30.36% \n\n\n\nTable 5 :\n5Performance of iso-surface analysis when target PSNR is 60 (NYX velocity_x)Method \nPercentage \nResolution \n\nDecompression \ntime (s) \n\nAnalysis \ntime (s) \n\nAnalysis \nerror \n\nSZ \n2.19% \n512 \u00d7 512 \u00d7 512 \n0.96 \n60.83 \n2.25% \nZFP \n1.78% \n512 \u00d7 512 \u00d7 512 \n0.51 \n59.99 \n5.89% \nMGARD 1 \n10.62% \n257 \u00d7 257 \u00d7 257 \n0.79 \n10.99 \n5.08% \nPMGARD 2 \n0.81% \n257 \u00d7 257 \u00d7 257 \n0.46 \n11.16 \n5.67% \n\n\nbased on per-element error accumulation because intuitive estimation of 2 errors leads to inaccuracy result. After initializing the array to 0 in line 1-3, we iterate through every element in level to accumulate the 2 errors in line 4-11. For each element, we first convert its value into integer representation under the common exponent, and then iterate from the least significant bit to the most significant bit (line 6-10) to accumulate the 2 error for each entry\nACKNOWLEDGMENTSThis research was supported by the Exascale Computing Project (17-SC-20-SC), a collaborative effort of U.S. Department of Energy Office of Science and the National Nuclear Security Administration. Specifically, this research was supported by the ADIOS2-ECP project. This material is also based upon work supported by the U.S. Department of Energy, Office of Science, Office of Advanced Scientific Computing Research (ASCR), Scientific Discovery through Advanced Computing (SciDAC) program, specifically the RAPIDS-2 SciDAC institute. Furthermore, the research in this project was also supported by the SIRIUS-2 ASCR research project and the Laboratory Directed Research and Development Program of Oak Ridge National Laboratory (ORNL). This research used resources of the Oak Ridge Leadership Computing Facility, which is a DOE Office of Science User Facility.Appendix: Artifact Description/Artifact EvaluationSUMMARY OF THE EXPERIMENTS REPORTED\nTeam at Princeton Plasma Physics Laboratory employs DOE supercomputers to understand heat-load width requirements of future ITER device. 2021. Team at Princeton Plasma Physics Laboratory employs DOE super- computers to understand heat-load width requirements of future ITER de- vice. https://www.olcf.ornl.gov/2021/02/18/scientists-use-supercomputers-to- study-reliable-fusion-reactor-design-operation. Online.\n\nMultilevel Techniques for Compression and Reduction of Scientific Data-The Univariate Case. Mark Ainsworth, Ozan Tugluk, Ben Whitney, Scott Klasky, Computing and Visualization in Science. 19Mark Ainsworth, Ozan Tugluk, Ben Whitney, and Scott Klasky. 2018. Multilevel Techniques for Compression and Reduction of Scientific Data-The Univariate Case. Computing and Visualization in Science 19, 5-6 (2018), 65-76.\n\nMultilevel Techniques for Compression and Reduction of Scientific Data-Quantitative Control of Accuracy in Derived Quantities. Mark Ainsworth, Ozan Tugluk, Ben Whitney, Scott Klasky, SIAM Journal on Scientific Computing. 41Mark Ainsworth, Ozan Tugluk, Ben Whitney, and Scott Klasky. 2019. Multilevel Techniques for Compression and Reduction of Scientific Data-Quantitative Control of Accuracy in Derived Quantities. SIAM Journal on Scientific Computing 41, 4 (2019), A2146-A2171.\n\nMultilevel Techniques for Compression and Reduction of Scientific Data-The Multivariate Case. Mark Ainsworth, Ozan Tugluk, Ben Whitney, Scott Klasky, SIAM Journal on Scientific Computing. 41Mark Ainsworth, Ozan Tugluk, Ben Whitney, and Scott Klasky. 2019. Multilevel Techniques for Compression and Reduction of Scientific Data-The Multivariate Case. SIAM Journal on Scientific Computing 41, 2 (2019), A1278-A1303.\n\nBlosc, an extremely fast, multi-threaded, meta-compressor library. Francesc Alted. 2017. Blosc, an extremely fast, multi-threaded, meta-compressor library.\n\n. Andes, Andes. [n.d.]. Available at https://www.olcf.ornl.gov/olcf-resources/compute- systems/andes. online.\n\nTTHRESH: Tensor Compression for Multidimensional Visual Data. Rafael Ballester-Ripoll, Peter Lindstrom, Renato Pajarola, IEEE transactions on visualization and computer graphics. Rafael Ballester-Ripoll, Peter Lindstrom, and Renato Pajarola. 2019. TTHRESH: Tensor Compression for Multidimensional Visual Data. IEEE transactions on visualization and computer graphics (2019).\n\nRate-distortion theory. Toby Berger, Wiley Encyclopedia of Telecommunications. Toby Berger. 2003. Rate-distortion theory. Wiley Encyclopedia of Telecommunica- tions (2003).\n\nDataCutter: Middleware for filtering very large scientific datasets on archival storage systems. Michael Beynon, Renato Ferreira, Tahsin Kurc, Alan Sussman, Joel Saltz, IEEE Symposium on Mass Storage Systems. Michael Beynon, Renato Ferreira, Tahsin Kurc, Alan Sussman, and Joel Saltz. 2000. DataCutter: Middleware for filtering very large scientific datasets on archival storage systems. In IEEE Symposium on Mass Storage Systems. 119-134.\n\nHarsh Bhatia, Duong Hoang, Garrett Morrison, Will Usher, Valerio Pascucci, Peer-Timo, Peter Bremer, Lindstrom, arXiv:2007.15219AMM: Adaptive Multilinear Meshes. arXiv preprintHarsh Bhatia, Duong Hoang, Garrett Morrison, Will Usher, Valerio Pascucci, Peer- Timo Bremer, and Peter Lindstrom. 2020. AMM: Adaptive Multilinear Meshes. arXiv preprint arXiv:2007.15219 (2020).\n\nImage compression via joint statistical characterization in the wavelet domain. W Robert, Buccigrossi, P Eero, Simoncelli, IEEE Transactions on Image Processing. 8Robert W Buccigrossi and Eero P Simoncelli. 1999. Image compression via joint statistical characterization in the wavelet domain. IEEE Transactions on Image Processing 8, 12 (1999), 1688-1701.\n\nFPC: A high-speed compressor for double-precision floating-point data. Martin Burtscher, Paruj Ratanaworabhan, IEEE Trans. Comput. 581Martin Burtscher and Paruj Ratanaworabhan. 2009. FPC: A high-speed compres- sor for double-precision floating-point data. IEEE Trans. Comput. 58, 1 (Jan 2009), 18-31.\n\nUse cases of lossy compression for floating-point data in scientific data sets. Franck Cappello, Sheng Di, Sihuan Li, Xin Liang, Ali Murat Gok, Dingwen Tao, Chun Hong Yoon, Xin-Chuan Wu, Yuri Alexeev, Frederic T Chong, The International Journal of High Performance Computing Applications. 1094342019853336Franck Cappello, Sheng Di, Sihuan Li, Xin Liang, Ali Murat Gok, Dingwen Tao, Chun Hong Yoon, Xin-Chuan Wu, Yuri Alexeev, and Frederic T Chong. 2019. Use cases of lossy compression for floating-point data in scientific data sets. The International Journal of High Performance Computing Applications (2019), 1094342019853336.\n\nNUMARCK: machine learning algorithm for resiliency and checkpointing. Zhengzhang Chen, Seung Woo Son, William Hendrix, Ankit Agrawal, Wei-Keng Liao, Alok Choudhary, Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis. the International Conference for High Performance Computing, Networking, Storage and AnalysisIEEE PressZhengzhang Chen, Seung Woo Son, William Hendrix, Ankit Agrawal, Wei-keng Liao, and Alok Choudhary. 2014. NUMARCK: machine learning algorithm for resiliency and checkpointing. In Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis. IEEE Press, 733- 744.\n\nSBHP-a low complexity wavelet coder. Christos Chrysafis, Amir Said, Alex Drukarev, 2000 IEEE International Conference on Acoustics, Speech, and Signal Processing. Proceedings (Cat. No. 00CH37100). IEEE4Asad Islam, and William A PearlmanChristos Chrysafis, Amir Said, Alex Drukarev, Asad Islam, and William A Pearl- man. 2000. SBHP-a low complexity wavelet coder. In 2000 IEEE International Conference on Acoustics, Speech, and Signal Processing. Proceedings (Cat. No. 00CH37100), Vol. 4. IEEE, 2035-2038.\n\nSPDP: An automatically synthesized lossless compression algorithm for floating-point data. Steven Claggett, Sahar Azimi, Martin Burtscher, the 2018 Data Compression Conference. Steven Claggett, Sahar Azimi, and Martin Burtscher. 2018. SPDP: An automati- cally synthesized lossless compression algorithm for floating-point data. In the 2018 Data Compression Conference. 337-346.\n\nInteractive desktop analysis of high resolution simulations: application to turbulent plume dynamics and current sheet formation. John Clyne, Pablo Mininni, Alan Norton, Mark Rast, New Journal of Physics. 9John Clyne, Pablo Mininni, Alan Norton, and Mark Rast. 2007. Interactive desktop analysis of high resolution simulations: application to turbulent plume dynamics and current sheet formation. New Journal of Physics 9, 301 (2007), 1-29.\n\n. Peter Deutsch, GZIP file format specification version 4.3L Peter Deutsch. 1996. GZIP file format specification version 4.3.\n\nComputing just what you need: Online data analysis and reduction at extreme scales. Ian T Foster, Mark Ainsworth, Bryce Allen, Julie Bessac, Franck Cappello, Jong Youl Choi, Emil M Constantinescu, Philip E Davis, Sheng Di, Wendy Zichao, Hanqi Di, Scott Guo, Kerstin Klasky, Tahsin M Kleese Van Dam, Qing Kur\u00e7, Abid Liu, Kshitij Malik, Klaus Mehta, Todd Mueller, George Munson, Manish Ostrouchov, Tom Parashar, Line Peterka, Dingwen Pouchard, Tao, European Conference on Parallel Processing. M. Wild, Matthew Wolf, Justin M. Wozniak, Wei Xu, and Shinjae YooOzan TuglukSpringerIan T. Foster, Mark Ainsworth, Bryce Allen, Julie Bessac, Franck Cappello, Jong Youl Choi, Emil M. Constantinescu, Philip E. Davis, Sheng Di, Zichao Wendy Di, Hanqi Guo, Scott Klasky, Kerstin Kleese van Dam, Tahsin M. Kur\u00e7, Qing Liu, Abid Malik, Kshitij Mehta, Klaus Mueller, Todd Munson, George Ostrouchov, Manish Parashar, Tom Peterka, Line Pouchard, Dingwen Tao, Ozan Tugluk, Ste- fan M. Wild, Matthew Wolf, Justin M. Wozniak, Wei Xu, and Shinjae Yoo. 2017. Computing just what you need: Online data analysis and reduction at extreme scales. In European Conference on Parallel Processing. Springer, 3-19.\n\nSpatial autocorrelation and spatial filtering: gaining understanding through theory and scientific visualization. A Daniel, Griffith, Springer Science & Business MediaDaniel A Griffith et al. 2003. Spatial autocorrelation and spatial filtering: gaining understanding through theory and scientific visualization. Springer Science & Business Media.\n\nA study of the trade-off between reducing precision and reducing resolution for data analysis and visualization. Duong Hoang, Pavol Klacansky, Harsh Bhatia, Peer-Timo, Peter Bremer, Valerio Lindstrom, Pascucci, IEEE transactions on visualization and computer graphics. 25Duong Hoang, Pavol Klacansky, Harsh Bhatia, Peer-Timo Bremer, Peter Lind- strom, and Valerio Pascucci. 2018. A study of the trade-off between reducing precision and reducing resolution for data analysis and visualization. IEEE trans- actions on visualization and computer graphics 25, 1 (2018), 1193-1203.\n\nA method for the construction of minimum-redundancy codes. A David, Huffman, Proceedings of the IRE. 40David A Huffman. 1952. A method for the construction of minimum-redundancy codes. Proceedings of the IRE 40, 9 (1952), 1098-1101.\n\nHurricane ISABEL simulation data. Hurricane ISABEL simulation data. 2019. http://vis.computer.org/vis2004contest/ data.html. Online.\n\nQMCPACK: an open source ab initio quantum Monte Carlo package for the electronic structure of atoms, molecules and solids. Jeongnim Kim, D Andrew, Baczewski, D Todd, Anouar Beaudet, Chandler Benali, Bennett, A Mark, Nick S Berrill, Edgar Josu\u00e9 Landinez Blunt, Michele Borda, Casula, M David, Ceperley, Journal of Physics: Condensed Matter. 30195901Jeongnim Kim, Andrew D Baczewski, Todd D Beaudet, Anouar Benali, M Chan- dler Bennett, Mark A Berrill, Nick S Blunt, Edgar Josu\u00e9 Landinez Borda, Michele Casula, David M Ceperley, et al. 2018. QMCPACK: an open source ab initio quantum Monte Carlo package for the electronic structure of atoms, molecules and solids. Journal of Physics: Condensed Matter 30, 19 (2018), 195901.\n\nIsabela for effective in situ compression of scientific data. Sriram Lakshminarasimhan, Neil Shah, Stephane Ethier, Seung-Hoe Ku, Choong-Seock Chang, Scott Klasky, Rob Latham, Rob Ross, Nagiza F Samatova, Concurrency and Computation: Practice and Experience. 25Sriram Lakshminarasimhan, Neil Shah, Stephane Ethier, Seung-Hoe Ku, Choong- Seock Chang, Scott Klasky, Rob Latham, Rob Ross, and Nagiza F Samatova. 2013. Isabela for effective in situ compression of scientific data. Concurrency and Computation: Practice and Experience 25, 4 (2013), 524-540.\n\nVapor: A visualization package tailored to analyze simulation data in earth system science. Shaomeng Li, Stanislaw Jaroszynski, Scott Pearse, Leigh Orf, John Clyne, Atmosphere. 10488Shaomeng Li, Stanislaw Jaroszynski, Scott Pearse, Leigh Orf, and John Clyne. 2019. Vapor: A visualization package tailored to analyze simulation data in earth system science. Atmosphere 10, 9 (2019), 488.\n\nSignificantly improving lossy compression quality based on an optimized hybrid prediction model. Xin Liang, Sheng Di, Sihuan Li, Dingwen Tao, Bogdan Nicolae, Zizhong Chen, Franck Cappello, Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis. the International Conference for High Performance Computing, Networking, Storage and AnalysisXin Liang, Sheng Di, Sihuan Li, Dingwen Tao, Bogdan Nicolae, Zizhong Chen, and Franck Cappello. 2019. Significantly improving lossy compression quality based on an optimized hybrid prediction model. In Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis. 1-26.\n\nEfficient Transformation Scheme for Lossy Data Compression with Point-wise Relative Error Bound. Xin Liang, Sheng Di, Dingwen Tao, Zizhong Chen, Franck Cappello, IEEE International Conference on Cluster Computing (CLUSTER). Xin Liang, Sheng Di, Dingwen Tao, Zizhong Chen, and Franck Cappello. 2018. Efficient Transformation Scheme for Lossy Data Compression with Point-wise Relative Error Bound. In IEEE International Conference on Cluster Computing (CLUSTER). 179-189.\n\nError-controlled lossy compression optimized for high compression ratios of scientific datasets. Xin Liang, Sheng Di, Dingwen Tao, Sihuan Li, Shaomeng Li, Hanqi Guo, Zizhong Chen, Franck Cappello, 2018 IEEE International Conference on Big Data. IEEEXin Liang, Sheng Di, Dingwen Tao, Sihuan Li, Shaomeng Li, Hanqi Guo, Zizhong Chen, and Franck Cappello. 2018. Error-controlled lossy compression optimized for high compression ratios of scientific datasets. In 2018 IEEE International Conference on Big Data. IEEE.\n\nFixed-rate compressed floating-point arrays. Peter Lindstrom, IEEE Transactions on Visualization and Computer Graphics. 20Peter Lindstrom. 2014. Fixed-rate compressed floating-point arrays. IEEE Trans- actions on Visualization and Computer Graphics 20, 12 (2014), 2674-2683.\n\nError Distributions of Lossy Floating-Point Compressors. Peter Lindstrom, Joint Statistical Meetings. Peter Lindstrom. 2017. Error Distributions of Lossy Floating-Point Compressors. Joint Statistical Meetings (2017), 2574-2589.\n\nFast and efficient compression of floating-point data. Peter Lindstrom, Martin Isenburg, IEEE Transactions on Visualization and Computer Graphics. 125Peter Lindstrom and Martin Isenburg. 2006. Fast and efficient compression of floating-point data. IEEE Transactions on Visualization and Computer Graphics 12, 5 (2006), 1245-1250.\n\nWavelets for adaptively refined '3rd-root-of-2'-subdivision meshes. Lars Linsen, Bernd Hamann, Ken Joy, Lars Linsen, Bernd Hamann, and Ken Joy. 2003. Wavelets for adaptively refined '3rd-root-of-2'-subdivision meshes. (2003).\n\nWavelet-Based Multiresolution with 'n-th-root-of-2' subdivision. Lars Linsen, Bernd Hamann, I Kenneth, Valerio Joy, Mark A Pascucci, Duchaineau, Computing. 72Lars Linsen, Bernd Hamann, Kenneth I Joy, Valerio Pascucci, and Mark A Duchaineau. 2004. Wavelet-Based Multiresolution with 'n-th-root-of-2' sub- division. Computing 72, 1-2 (2004), 129-142.\n\nHello ADIOS: the challenges and lessons of developing leadership class I/O frameworks. Qing Liu, Jeremy Logan, Yuan Tian, Hasan Abbasi, Norbert Podhorszki, Jong Youl Choi, Scott Klasky, Roselyne Tchoua, Jay Lofstead, Ron Oldfield, Concurrency and Computation: Practice and Experience. 26Qing Liu, Jeremy Logan, Yuan Tian, Hasan Abbasi, Norbert Podhorszki, Jong Youl Choi, Scott Klasky, Roselyne Tchoua, Jay Lofstead, Ron Oldfield, et al. 2014. Hello ADIOS: the challenges and lessons of developing leadership class I/O frameworks. Concurrency and Computation: Practice and Experience 26, 7 (2014), 1453-1473.\n\nNYX simulation. NYX simulation. 2019. https://amrex-astro.github.io/Nyx. Online.\n\nFast lossless compression of scientific floating-point data. Paruj Ratanaworabhan, Jian Ke, Martin Burtscher, Data Compression Conference (DCC'06). Paruj Ratanaworabhan, Jian Ke, and Martin Burtscher. 2006. Fast lossless compres- sion of scientific floating-point data. In Data Compression Conference (DCC'06).\n\n. IEEE. IEEE, 133-142.\n\nExploration of lossy compression for application-level checkpoint/restart. Naoto Sasaki, Kento Sato, Toshio Endo, Satoshi Matsuoka, 2015 IEEE International Parallel and Distributed Processing Symposium (IPDPS. Naoto Sasaki, Kento Sato, Toshio Endo, and Satoshi Matsuoka. 2015. Explo- ration of lossy compression for application-level checkpoint/restart. In 2015 IEEE International Parallel and Distributed Processing Symposium (IPDPS). 914-922.\n\nGPFS: A Shared-Disk File System for Large Computing Clusters. B Frank, Schmuck, Roger L Haskin, FAST. 2Frank B Schmuck and Roger L Haskin. 2002. GPFS: A Shared-Disk File System for Large Computing Clusters.. In FAST, Vol. 2.\n\nFlying edges: A highperformance scalable isocontouring algorithm. William Schroeder, Rob Maynard, Berk Geveci, 2015 IEEE 5th Symposium on Large Data Analysis and Visualization (LDAV). IEEEWilliam Schroeder, Rob Maynard, and Berk Geveci. 2015. Flying edges: A high- performance scalable isocontouring algorithm. In 2015 IEEE 5th Symposium on Large Data Analysis and Visualization (LDAV). IEEE, 33-40.\n\nScientific Data Reduction Benchmark. Scientific Data Reduction Benchmark. 2019. https://sdrbench.github.io/. Online.\n\nData compression for the exascale computing era-survey. Zhengzhang Seung Woo Son, William Chen, Ankit Hendrix, Wei-Keng Agrawal, Alok Liao, Choudhary, Supercomputing Frontiers and Innovations. 1Seung Woo Son, Zhengzhang Chen, William Hendrix, Ankit Agrawal, Wei-keng Liao, and Alok Choudhary. 2014. Data compression for the exascale computing era-survey. Supercomputing Frontiers and Innovations 1, 2 (2014), 76-88.\n\nOptimizing lossy compression rate-distortion from automatic online selection between SZ and ZFP. Dingwen Tao, Sheng Di, Xin Liang, Zizhong Chen, Franck Cappello, IEEE Transactions on Parallel and Distributed Systems. 30Dingwen Tao, Sheng Di, Xin Liang, Zizhong Chen, and Franck Cappello. 2019. Optimizing lossy compression rate-distortion from automatic online selection between SZ and ZFP. IEEE Transactions on Parallel and Distributed Systems 30, 8 (2019), 1857-1871.\n\nJPEG2000 Image Compression Fundamentals, Standards and Practice. David Taubman, Michael Marcellin, Springer Publishing CompanyIncorporatedDavid Taubman and Michael Marcellin. 2013. JPEG2000 Image Compression Fun- damentals, Standards and Practice. Springer Publishing Company, Incorporated.\n\nThe JPEG still picture compression standard. K Gregory, Wallace, IEEE Transactions on Consumer Electronics. 38Gregory K Wallace. 1992. The JPEG still picture compression standard. IEEE Transactions on Consumer Electronics 38, 1 (1992), xviii-xxxiv.\n\nThe parallel I/O architecture of the high-performance storage system (HPSS). W Richard, Robert A Watson, Coyne, Proceedings of IEEE 14th Symposium on Mass Storage Systems. IEEE 14th Symposium on Mass Storage SystemsIEEERichard W Watson and Robert A Coyne. 1995. The parallel I/O architecture of the high-performance storage system (HPSS). In Proceedings of IEEE 14th Symposium on Mass Storage Systems. IEEE, 27-44.\n\n. Scale-Letkf, SCALE-LETKF weather model. 2019. https://github.com/gylien/scale-letkf. On- line.\n\nAdaptive multilinear tensor product wavelets. Kenneth Weiss, Peter Lindstrom, IEEE transactions on visualization and computer graphics. 22Kenneth Weiss and Peter Lindstrom. 2015. Adaptive multilinear tensor product wavelets. IEEE transactions on visualization and computer graphics 22, 1 (2015), 985-994.\n\nWe conducted our experimental evaluations on Andes cluster at ORNL using up to 1,024 cores, where each node on the system has two 16-core AMD EPYC 7302 processors and 256 GB of memory. It is equipped with General Parallel File Systems (GPFS) and High Performance Storage System (HPSS). Zstd, Check log before proceeding: (update the commit because there was a refactor on one of the dependencies) commit ea399334ae78d8de40b0a1fbfb89ffe1ad46f59a (HEAD -> main. We use ADIOS for parallel I/O with GPFS and HTAR for data transfer with HPSS. We use ADIOS-2.6.0 and openMPI 4.0.4 which were available on the system. The dataset (NYX, Hurricane, SCALE, QMCPACK) we use are downloaded from SDRbench. origin/main, origin/HEAD) Compile the code using ./build_script.sh Please do \"mkdir -p refactored_data\" before any run Refactor commandZstd. 2019. https://github.com/facebook/zstd/releases. Online. We conducted our experimental evaluations on Andes cluster at ORNL using up to 1,024 cores, where each node on the system has two 16-core AMD EPYC 7302 processors and 256 GB of memory. It is equipped with General Parallel File Systems (GPFS) and High Performance Storage System (HPSS). We use ADIOS for parallel I/O with GPFS and HTAR for data transfer with HPSS. We use ADIOS-2.6.0 and openMPI 4.0.4 which were available on the sys- tem. The dataset (NYX, Hurricane, SCALE, QMCPACK) we use are downloaded from SDRbench (https://sdrbench.github.io/). Check log before proceeding: (update the commit because there was a refactor on one of the dependencies) commit ea399334ae78d8de40b0a1fbfb89ffe1ad46f59a (HEAD -> main, ori- gin/main, origin/HEAD) Compile the code using ./build_script.sh Please do \"mkdir -p refactored_data\" before any run Refactor command:\n\n$eb_n $s Dataset example: NYX velocity_x. dat 512x512x512$eb_n $s Dataset example: NYX velocity_x.dat 512x512x512\n\n. Sequential: Figure. 3example is for NYX, QMCPACK isSequential: Figure 3: (example is for NYX, QMCPACK is\n\nNeed to compute L2 error of PSNR. sample python script: eb_l2 = (value_range / pow(10, eb/20))*(value_range / pow(10, eb/20)) * len(data); Then collect total retrieve size to compute percentage Change interpretor in test/test_reconstructor.cpp in line 126 128 for different order For bitplane-greedy, use the default interpreter and. *****, since the executable takes L2 as input instead of PSNR directly. 32512/test/test_refactor velocity_x.dat 0***** since the executable takes L2 as input in- stead of PSNR directly. Need to compute L2 error of PSNR. sample python script: eb_l2 = (value_range / pow(10, eb/20))*(value_range / pow(10, eb/20)) * len(data); Then collect total retrieve size to com- pute percentage Change interpretor in test/test_reconstructor.cpp in line 126 128 for different order For bitplane-greedy, use the de- fault interpreter and \"./test/test_refactor velocity_x.dat 0 32 3 512\n", "annotations": {"author": "[{\"end\":168,\"start\":143},{\"end\":194,\"start\":169},{\"end\":224,\"start\":195},{\"end\":256,\"start\":225},{\"end\":282,\"start\":257},{\"end\":306,\"start\":283},{\"end\":338,\"start\":307},{\"end\":375,\"start\":339},{\"end\":413,\"start\":376},{\"end\":443,\"start\":414},{\"end\":454,\"start\":444},{\"end\":465,\"start\":455},{\"end\":479,\"start\":466},{\"end\":492,\"start\":480},{\"end\":504,\"start\":493},{\"end\":514,\"start\":505},{\"end\":529,\"start\":515},{\"end\":545,\"start\":530},{\"end\":565,\"start\":546},{\"end\":579,\"start\":566},{\"end\":606,\"start\":580},{\"end\":652,\"start\":607},{\"end\":698,\"start\":653},{\"end\":744,\"start\":699},{\"end\":790,\"start\":745},{\"end\":840,\"start\":791},{\"end\":886,\"start\":841},{\"end\":932,\"start\":887},{\"end\":978,\"start\":933},{\"end\":1024,\"start\":979},{\"end\":168,\"start\":143},{\"end\":194,\"start\":169},{\"end\":224,\"start\":195},{\"end\":256,\"start\":225},{\"end\":282,\"start\":257},{\"end\":306,\"start\":283},{\"end\":338,\"start\":307},{\"end\":375,\"start\":339},{\"end\":413,\"start\":376},{\"end\":443,\"start\":414},{\"end\":454,\"start\":444},{\"end\":465,\"start\":455},{\"end\":479,\"start\":466},{\"end\":492,\"start\":480},{\"end\":504,\"start\":493},{\"end\":514,\"start\":505},{\"end\":529,\"start\":515},{\"end\":545,\"start\":530},{\"end\":565,\"start\":546},{\"end\":579,\"start\":566},{\"end\":606,\"start\":580},{\"end\":652,\"start\":607},{\"end\":698,\"start\":653},{\"end\":744,\"start\":699},{\"end\":790,\"start\":745},{\"end\":840,\"start\":791},{\"end\":886,\"start\":841},{\"end\":932,\"start\":887},{\"end\":978,\"start\":933},{\"end\":1024,\"start\":979}]", "publisher": null, "author_last_name": "[{\"end\":152,\"start\":147},{\"end\":178,\"start\":174},{\"end\":207,\"start\":203},{\"end\":236,\"start\":229},{\"end\":267,\"start\":264},{\"end\":291,\"start\":288},{\"end\":320,\"start\":313},{\"end\":353,\"start\":344},{\"end\":394,\"start\":384},{\"end\":426,\"start\":420},{\"end\":453,\"start\":448},{\"end\":464,\"start\":460},{\"end\":478,\"start\":474},{\"end\":491,\"start\":484},{\"end\":503,\"start\":500},{\"end\":513,\"start\":510},{\"end\":528,\"start\":521},{\"end\":544,\"start\":535},{\"end\":564,\"start\":554},{\"end\":578,\"start\":572},{\"end\":152,\"start\":147},{\"end\":178,\"start\":174},{\"end\":207,\"start\":203},{\"end\":236,\"start\":229},{\"end\":267,\"start\":264},{\"end\":291,\"start\":288},{\"end\":320,\"start\":313},{\"end\":353,\"start\":344},{\"end\":394,\"start\":384},{\"end\":426,\"start\":420},{\"end\":453,\"start\":448},{\"end\":464,\"start\":460},{\"end\":478,\"start\":474},{\"end\":491,\"start\":484},{\"end\":503,\"start\":500},{\"end\":513,\"start\":510},{\"end\":528,\"start\":521},{\"end\":544,\"start\":535},{\"end\":564,\"start\":554},{\"end\":578,\"start\":572}]", "author_first_name": "[{\"end\":146,\"start\":143},{\"end\":173,\"start\":169},{\"end\":202,\"start\":195},{\"end\":228,\"start\":225},{\"end\":263,\"start\":257},{\"end\":287,\"start\":283},{\"end\":312,\"start\":307},{\"end\":343,\"start\":339},{\"end\":383,\"start\":376},{\"end\":419,\"start\":414},{\"end\":447,\"start\":444},{\"end\":459,\"start\":455},{\"end\":473,\"start\":466},{\"end\":483,\"start\":480},{\"end\":499,\"start\":493},{\"end\":509,\"start\":505},{\"end\":520,\"start\":515},{\"end\":534,\"start\":530},{\"end\":553,\"start\":546},{\"end\":571,\"start\":566},{\"end\":146,\"start\":143},{\"end\":173,\"start\":169},{\"end\":202,\"start\":195},{\"end\":228,\"start\":225},{\"end\":263,\"start\":257},{\"end\":287,\"start\":283},{\"end\":312,\"start\":307},{\"end\":343,\"start\":339},{\"end\":383,\"start\":376},{\"end\":419,\"start\":414},{\"end\":447,\"start\":444},{\"end\":459,\"start\":455},{\"end\":473,\"start\":466},{\"end\":483,\"start\":480},{\"end\":499,\"start\":493},{\"end\":509,\"start\":505},{\"end\":520,\"start\":515},{\"end\":534,\"start\":530},{\"end\":553,\"start\":546},{\"end\":571,\"start\":566}]", "author_affiliation": "[{\"end\":605,\"start\":581},{\"end\":651,\"start\":608},{\"end\":697,\"start\":654},{\"end\":743,\"start\":700},{\"end\":789,\"start\":746},{\"end\":839,\"start\":792},{\"end\":885,\"start\":842},{\"end\":931,\"start\":888},{\"end\":977,\"start\":934},{\"end\":1023,\"start\":980},{\"end\":605,\"start\":581},{\"end\":651,\"start\":608},{\"end\":697,\"start\":654},{\"end\":743,\"start\":700},{\"end\":789,\"start\":746},{\"end\":839,\"start\":792},{\"end\":885,\"start\":842},{\"end\":931,\"start\":888},{\"end\":977,\"start\":934},{\"end\":1023,\"start\":980}]", "title": "[{\"end\":104,\"start\":1},{\"end\":1128,\"start\":1025},{\"end\":104,\"start\":1},{\"end\":1128,\"start\":1025}]", "venue": "[{\"end\":1231,\"start\":1130},{\"end\":1231,\"start\":1130}]", "abstract": "[{\"end\":3576,\"start\":1609},{\"end\":3576,\"start\":1609}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3771,\"start\":3767},{\"end\":3966,\"start\":3963},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4271,\"start\":4268},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5329,\"start\":5325},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5332,\"start\":5329},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5545,\"start\":5542},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5548,\"start\":5545},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":5551,\"start\":5548},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5554,\"start\":5551},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5557,\"start\":5554},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":5560,\"start\":5557},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":5791,\"start\":5787},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":5794,\"start\":5791},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5797,\"start\":5794},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":5897,\"start\":5893},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5900,\"start\":5897},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":5903,\"start\":5900},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":5906,\"start\":5903},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6051,\"start\":6047},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":6055,\"start\":6051},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":6059,\"start\":6055},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":6063,\"start\":6059},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":6066,\"start\":6063},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":7992,\"start\":7988},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":7995,\"start\":7992},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8922,\"start\":8919},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8924,\"start\":8922},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9259,\"start\":9256},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13892,\"start\":13888},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":13910,\"start\":13906},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":14008,\"start\":14004},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":14292,\"start\":14288},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":14295,\"start\":14292},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":14298,\"start\":14295},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":14301,\"start\":14298},{\"end\":14827,\"start\":14798},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":15272,\"start\":15268},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":15945,\"start\":15941},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":16617,\"start\":16614},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16619,\"start\":16617},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":16772,\"start\":16769},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":20629,\"start\":20626},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":20632,\"start\":20629},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20635,\"start\":20632},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":22257,\"start\":22254},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":22259,\"start\":22257},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":22637,\"start\":22634},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":23006,\"start\":23003},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":23335,\"start\":23332},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23337,\"start\":23335},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":23340,\"start\":23337},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":23343,\"start\":23340},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":23346,\"start\":23343},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":23349,\"start\":23346},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":25535,\"start\":25532},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32442,\"start\":32438},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32546,\"start\":32542},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32902,\"start\":32898},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":37221,\"start\":37218},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":45727,\"start\":45723},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":45895,\"start\":45891},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":45905,\"start\":45901},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":45916,\"start\":45913},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":46257,\"start\":46254},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":46440,\"start\":46436},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":46488,\"start\":46484},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":46514,\"start\":46510},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":46691,\"start\":46687},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":46722,\"start\":46718},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":46759,\"start\":46755},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":46778,\"start\":46774},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":54122,\"start\":54118},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":55727,\"start\":55724},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3771,\"start\":3767},{\"end\":3966,\"start\":3963},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4271,\"start\":4268},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5329,\"start\":5325},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5332,\"start\":5329},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5545,\"start\":5542},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5548,\"start\":5545},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":5551,\"start\":5548},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5554,\"start\":5551},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5557,\"start\":5554},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":5560,\"start\":5557},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":5791,\"start\":5787},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":5794,\"start\":5791},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5797,\"start\":5794},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":5897,\"start\":5893},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5900,\"start\":5897},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":5903,\"start\":5900},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":5906,\"start\":5903},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6051,\"start\":6047},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":6055,\"start\":6051},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":6059,\"start\":6055},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":6063,\"start\":6059},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":6066,\"start\":6063},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":7992,\"start\":7988},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":7995,\"start\":7992},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8922,\"start\":8919},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8924,\"start\":8922},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9259,\"start\":9256},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13892,\"start\":13888},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":13910,\"start\":13906},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":14008,\"start\":14004},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":14292,\"start\":14288},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":14295,\"start\":14292},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":14298,\"start\":14295},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":14301,\"start\":14298},{\"end\":14827,\"start\":14798},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":15272,\"start\":15268},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":15945,\"start\":15941},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":16617,\"start\":16614},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16619,\"start\":16617},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":16772,\"start\":16769},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":20629,\"start\":20626},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":20632,\"start\":20629},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20635,\"start\":20632},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":22257,\"start\":22254},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":22259,\"start\":22257},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":22637,\"start\":22634},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":23006,\"start\":23003},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":23335,\"start\":23332},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23337,\"start\":23335},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":23340,\"start\":23337},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":23343,\"start\":23340},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":23346,\"start\":23343},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":23349,\"start\":23346},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":25535,\"start\":25532},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32442,\"start\":32438},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32546,\"start\":32542},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32902,\"start\":32898},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":37221,\"start\":37218},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":45727,\"start\":45723},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":45895,\"start\":45891},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":45905,\"start\":45901},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":45916,\"start\":45913},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":46257,\"start\":46254},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":46440,\"start\":46436},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":46488,\"start\":46484},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":46514,\"start\":46510},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":46691,\"start\":46687},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":46722,\"start\":46718},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":46759,\"start\":46755},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":46778,\"start\":46774},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":54122,\"start\":54118},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":55727,\"start\":55724}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":59265,\"start\":58892},{\"attributes\":{\"id\":\"fig_1\"},\"end\":59790,\"start\":59266},{\"attributes\":{\"id\":\"fig_2\"},\"end\":59841,\"start\":59791},{\"attributes\":{\"id\":\"fig_3\"},\"end\":60032,\"start\":59842},{\"attributes\":{\"id\":\"fig_4\"},\"end\":60272,\"start\":60033},{\"attributes\":{\"id\":\"fig_6\"},\"end\":60476,\"start\":60273},{\"attributes\":{\"id\":\"fig_8\"},\"end\":60586,\"start\":60477},{\"attributes\":{\"id\":\"fig_9\"},\"end\":60703,\"start\":60587},{\"attributes\":{\"id\":\"fig_11\"},\"end\":60815,\"start\":60704},{\"attributes\":{\"id\":\"fig_13\"},\"end\":60923,\"start\":60816},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":60967,\"start\":60924},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":61217,\"start\":60968},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":62382,\"start\":61218},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":63034,\"start\":62383},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":63280,\"start\":63035},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":63807,\"start\":63281},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":64199,\"start\":63808},{\"attributes\":{\"id\":\"fig_0\"},\"end\":59265,\"start\":58892},{\"attributes\":{\"id\":\"fig_1\"},\"end\":59790,\"start\":59266},{\"attributes\":{\"id\":\"fig_2\"},\"end\":59841,\"start\":59791},{\"attributes\":{\"id\":\"fig_3\"},\"end\":60032,\"start\":59842},{\"attributes\":{\"id\":\"fig_4\"},\"end\":60272,\"start\":60033},{\"attributes\":{\"id\":\"fig_6\"},\"end\":60476,\"start\":60273},{\"attributes\":{\"id\":\"fig_8\"},\"end\":60586,\"start\":60477},{\"attributes\":{\"id\":\"fig_9\"},\"end\":60703,\"start\":60587},{\"attributes\":{\"id\":\"fig_11\"},\"end\":60815,\"start\":60704},{\"attributes\":{\"id\":\"fig_13\"},\"end\":60923,\"start\":60816},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":60967,\"start\":60924},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":61217,\"start\":60968},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":62382,\"start\":61218},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":63034,\"start\":62383},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":63280,\"start\":63035},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":63807,\"start\":63281},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":64199,\"start\":63808}]", "paragraph": "[{\"end\":4645,\"start\":3592},{\"end\":5038,\"start\":4647},{\"end\":6233,\"start\":5040},{\"end\":7344,\"start\":6235},{\"end\":8405,\"start\":7346},{\"end\":8536,\"start\":8407},{\"end\":9670,\"start\":8538},{\"end\":11712,\"start\":9672},{\"end\":12288,\"start\":11714},{\"end\":13751,\"start\":12318},{\"end\":14764,\"start\":13753},{\"end\":15212,\"start\":14766},{\"end\":16944,\"start\":15214},{\"end\":17850,\"start\":16946},{\"end\":18167,\"start\":17865},{\"end\":18741,\"start\":18190},{\"end\":18940,\"start\":18743},{\"end\":19037,\"start\":18948},{\"end\":19096,\"start\":19039},{\"end\":19123,\"start\":19098},{\"end\":19174,\"start\":19125},{\"end\":19435,\"start\":19176},{\"end\":20358,\"start\":19437},{\"end\":20669,\"start\":20405},{\"end\":21099,\"start\":20671},{\"end\":21195,\"start\":21101},{\"end\":21279,\"start\":21197},{\"end\":21940,\"start\":21281},{\"end\":22153,\"start\":21975},{\"end\":22393,\"start\":22172},{\"end\":22719,\"start\":22462},{\"end\":22893,\"start\":22778},{\"end\":23420,\"start\":22916},{\"end\":23489,\"start\":23422},{\"end\":23751,\"start\":23491},{\"end\":24159,\"start\":23778},{\"end\":24560,\"start\":24189},{\"end\":24806,\"start\":24613},{\"end\":24987,\"start\":24822},{\"end\":25244,\"start\":25056},{\"end\":25439,\"start\":25246},{\"end\":25536,\"start\":25471},{\"end\":25593,\"start\":25538},{\"end\":25624,\"start\":25595},{\"end\":25889,\"start\":25669},{\"end\":26141,\"start\":25899},{\"end\":26280,\"start\":26179},{\"end\":26805,\"start\":26569},{\"end\":27029,\"start\":26807},{\"end\":27170,\"start\":27119},{\"end\":27379,\"start\":27185},{\"end\":27630,\"start\":27381},{\"end\":27851,\"start\":27687},{\"end\":28083,\"start\":27894},{\"end\":28534,\"start\":28085},{\"end\":29098,\"start\":28641},{\"end\":29325,\"start\":29134},{\"end\":30063,\"start\":29346},{\"end\":30200,\"start\":30065},{\"end\":31168,\"start\":30453},{\"end\":31431,\"start\":31170},{\"end\":32009,\"start\":31469},{\"end\":32363,\"start\":32046},{\"end\":33137,\"start\":32365},{\"end\":34394,\"start\":33139},{\"end\":37454,\"start\":34438},{\"end\":38476,\"start\":37486},{\"end\":39009,\"start\":38478},{\"end\":43295,\"start\":39028},{\"end\":44362,\"start\":43328},{\"end\":44810,\"start\":44364},{\"end\":45541,\"start\":44812},{\"end\":46172,\"start\":45557},{\"end\":46959,\"start\":46195},{\"end\":48255,\"start\":47004},{\"end\":49175,\"start\":48295},{\"end\":51794,\"start\":49177},{\"end\":52621,\"start\":51796},{\"end\":53639,\"start\":52764},{\"end\":55261,\"start\":53663},{\"end\":56173,\"start\":55263},{\"end\":56393,\"start\":56175},{\"end\":58260,\"start\":56408},{\"end\":58773,\"start\":58262},{\"end\":58812,\"start\":58775},{\"end\":58891,\"start\":58814},{\"end\":4645,\"start\":3592},{\"end\":5038,\"start\":4647},{\"end\":6233,\"start\":5040},{\"end\":7344,\"start\":6235},{\"end\":8405,\"start\":7346},{\"end\":8536,\"start\":8407},{\"end\":9670,\"start\":8538},{\"end\":11712,\"start\":9672},{\"end\":12288,\"start\":11714},{\"end\":13751,\"start\":12318},{\"end\":14764,\"start\":13753},{\"end\":15212,\"start\":14766},{\"end\":16944,\"start\":15214},{\"end\":17850,\"start\":16946},{\"end\":18167,\"start\":17865},{\"end\":18741,\"start\":18190},{\"end\":18940,\"start\":18743},{\"end\":19037,\"start\":18948},{\"end\":19096,\"start\":19039},{\"end\":19123,\"start\":19098},{\"end\":19174,\"start\":19125},{\"end\":19435,\"start\":19176},{\"end\":20358,\"start\":19437},{\"end\":20669,\"start\":20405},{\"end\":21099,\"start\":20671},{\"end\":21195,\"start\":21101},{\"end\":21279,\"start\":21197},{\"end\":21940,\"start\":21281},{\"end\":22153,\"start\":21975},{\"end\":22393,\"start\":22172},{\"end\":22719,\"start\":22462},{\"end\":22893,\"start\":22778},{\"end\":23420,\"start\":22916},{\"end\":23489,\"start\":23422},{\"end\":23751,\"start\":23491},{\"end\":24159,\"start\":23778},{\"end\":24560,\"start\":24189},{\"end\":24806,\"start\":24613},{\"end\":24987,\"start\":24822},{\"end\":25244,\"start\":25056},{\"end\":25439,\"start\":25246},{\"end\":25536,\"start\":25471},{\"end\":25593,\"start\":25538},{\"end\":25624,\"start\":25595},{\"end\":25889,\"start\":25669},{\"end\":26141,\"start\":25899},{\"end\":26280,\"start\":26179},{\"end\":26805,\"start\":26569},{\"end\":27029,\"start\":26807},{\"end\":27170,\"start\":27119},{\"end\":27379,\"start\":27185},{\"end\":27630,\"start\":27381},{\"end\":27851,\"start\":27687},{\"end\":28083,\"start\":27894},{\"end\":28534,\"start\":28085},{\"end\":29098,\"start\":28641},{\"end\":29325,\"start\":29134},{\"end\":30063,\"start\":29346},{\"end\":30200,\"start\":30065},{\"end\":31168,\"start\":30453},{\"end\":31431,\"start\":31170},{\"end\":32009,\"start\":31469},{\"end\":32363,\"start\":32046},{\"end\":33137,\"start\":32365},{\"end\":34394,\"start\":33139},{\"end\":37454,\"start\":34438},{\"end\":38476,\"start\":37486},{\"end\":39009,\"start\":38478},{\"end\":43295,\"start\":39028},{\"end\":44362,\"start\":43328},{\"end\":44810,\"start\":44364},{\"end\":45541,\"start\":44812},{\"end\":46172,\"start\":45557},{\"end\":46959,\"start\":46195},{\"end\":48255,\"start\":47004},{\"end\":49175,\"start\":48295},{\"end\":51794,\"start\":49177},{\"end\":52621,\"start\":51796},{\"end\":53639,\"start\":52764},{\"end\":55261,\"start\":53663},{\"end\":56173,\"start\":55263},{\"end\":56393,\"start\":56175},{\"end\":58260,\"start\":56408},{\"end\":58773,\"start\":58262},{\"end\":58812,\"start\":58775},{\"end\":58891,\"start\":58814}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":21974,\"start\":21941},{\"attributes\":{\"id\":\"formula_1\"},\"end\":22426,\"start\":22394},{\"attributes\":{\"id\":\"formula_2\"},\"end\":22461,\"start\":22426},{\"attributes\":{\"id\":\"formula_3\"},\"end\":22777,\"start\":22720},{\"attributes\":{\"id\":\"formula_4\"},\"end\":24612,\"start\":24561},{\"attributes\":{\"id\":\"formula_5\"},\"end\":24821,\"start\":24807},{\"attributes\":{\"id\":\"formula_6\"},\"end\":25055,\"start\":24988},{\"attributes\":{\"id\":\"formula_7\"},\"end\":25470,\"start\":25440},{\"attributes\":{\"id\":\"formula_8\"},\"end\":25668,\"start\":25625},{\"attributes\":{\"id\":\"formula_9\"},\"end\":26568,\"start\":26281},{\"attributes\":{\"id\":\"formula_10\"},\"end\":27062,\"start\":27030},{\"attributes\":{\"id\":\"formula_11\"},\"end\":27118,\"start\":27062},{\"attributes\":{\"id\":\"formula_12\"},\"end\":27686,\"start\":27631},{\"attributes\":{\"id\":\"formula_13\"},\"end\":28640,\"start\":28535},{\"attributes\":{\"id\":\"formula_14\"},\"end\":30452,\"start\":30201},{\"attributes\":{\"id\":\"formula_15\"},\"end\":34437,\"start\":34395},{\"attributes\":{\"id\":\"formula_16\"},\"end\":52763,\"start\":52622},{\"attributes\":{\"id\":\"formula_0\"},\"end\":21974,\"start\":21941},{\"attributes\":{\"id\":\"formula_1\"},\"end\":22426,\"start\":22394},{\"attributes\":{\"id\":\"formula_2\"},\"end\":22461,\"start\":22426},{\"attributes\":{\"id\":\"formula_3\"},\"end\":22777,\"start\":22720},{\"attributes\":{\"id\":\"formula_4\"},\"end\":24612,\"start\":24561},{\"attributes\":{\"id\":\"formula_5\"},\"end\":24821,\"start\":24807},{\"attributes\":{\"id\":\"formula_6\"},\"end\":25055,\"start\":24988},{\"attributes\":{\"id\":\"formula_7\"},\"end\":25470,\"start\":25440},{\"attributes\":{\"id\":\"formula_8\"},\"end\":25668,\"start\":25625},{\"attributes\":{\"id\":\"formula_9\"},\"end\":26568,\"start\":26281},{\"attributes\":{\"id\":\"formula_10\"},\"end\":27062,\"start\":27030},{\"attributes\":{\"id\":\"formula_11\"},\"end\":27118,\"start\":27062},{\"attributes\":{\"id\":\"formula_12\"},\"end\":27686,\"start\":27631},{\"attributes\":{\"id\":\"formula_13\"},\"end\":28640,\"start\":28535},{\"attributes\":{\"id\":\"formula_14\"},\"end\":30452,\"start\":30201},{\"attributes\":{\"id\":\"formula_15\"},\"end\":34437,\"start\":34395},{\"attributes\":{\"id\":\"formula_16\"},\"end\":52763,\"start\":52622}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":18166,\"start\":18159},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31250,\"start\":31243},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":46860,\"start\":46853},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":49324,\"start\":49317},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":54747,\"start\":54740},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":18166,\"start\":18159},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31250,\"start\":31243},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":46860,\"start\":46853},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":49324,\"start\":49317},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":54747,\"start\":54740}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":3590,\"start\":3578},{\"attributes\":{\"n\":\"2\"},\"end\":12316,\"start\":12291},{\"attributes\":{\"n\":\"3\"},\"end\":17863,\"start\":17853},{\"attributes\":{\"n\":\"3.1\"},\"end\":18188,\"start\":18170},{\"end\":18946,\"start\":18943},{\"attributes\":{\"n\":\"3.2\"},\"end\":20403,\"start\":20361},{\"attributes\":{\"n\":\"3.2.2\"},\"end\":22170,\"start\":22156},{\"attributes\":{\"n\":\"3.3\"},\"end\":22914,\"start\":22896},{\"attributes\":{\"n\":\"4\"},\"end\":23776,\"start\":23754},{\"attributes\":{\"n\":\"4.1\"},\"end\":24187,\"start\":24162},{\"end\":25897,\"start\":25892},{\"end\":26177,\"start\":26144},{\"attributes\":{\"n\":\"4.1.3\"},\"end\":27183,\"start\":27173},{\"attributes\":{\"n\":\"4.2\"},\"end\":27892,\"start\":27854},{\"attributes\":{\"n\":\"5\"},\"end\":29132,\"start\":29101},{\"attributes\":{\"n\":\"5.1\"},\"end\":29344,\"start\":29328},{\"attributes\":{\"n\":\"5.2\"},\"end\":31467,\"start\":31434},{\"attributes\":{\"n\":\"5.2.1\"},\"end\":32044,\"start\":32012},{\"attributes\":{\"n\":\"5.2.2\"},\"end\":37484,\"start\":37457},{\"attributes\":{\"n\":\"5.2.3\"},\"end\":39026,\"start\":39012},{\"attributes\":{\"n\":\"5.3\"},\"end\":43326,\"start\":43298},{\"attributes\":{\"n\":\"6\"},\"end\":45555,\"start\":45544},{\"attributes\":{\"n\":\"6.1\"},\"end\":46193,\"start\":46175},{\"attributes\":{\"n\":\"6.2\"},\"end\":47002,\"start\":46962},{\"attributes\":{\"n\":\"6.3\"},\"end\":48293,\"start\":48258},{\"attributes\":{\"n\":\"6.4\"},\"end\":53661,\"start\":53642},{\"attributes\":{\"n\":\"7\"},\"end\":56406,\"start\":56396},{\"end\":58898,\"start\":58893},{\"end\":59802,\"start\":59792},{\"end\":59853,\"start\":59843},{\"end\":60044,\"start\":60034},{\"end\":60284,\"start\":60274},{\"end\":60488,\"start\":60478},{\"end\":60598,\"start\":60588},{\"end\":60716,\"start\":60705},{\"end\":60828,\"start\":60817},{\"end\":60934,\"start\":60925},{\"end\":60978,\"start\":60969},{\"end\":63045,\"start\":63036},{\"end\":63291,\"start\":63282},{\"end\":63818,\"start\":63809},{\"attributes\":{\"n\":\"1\"},\"end\":3590,\"start\":3578},{\"attributes\":{\"n\":\"2\"},\"end\":12316,\"start\":12291},{\"attributes\":{\"n\":\"3\"},\"end\":17863,\"start\":17853},{\"attributes\":{\"n\":\"3.1\"},\"end\":18188,\"start\":18170},{\"end\":18946,\"start\":18943},{\"attributes\":{\"n\":\"3.2\"},\"end\":20403,\"start\":20361},{\"attributes\":{\"n\":\"3.2.2\"},\"end\":22170,\"start\":22156},{\"attributes\":{\"n\":\"3.3\"},\"end\":22914,\"start\":22896},{\"attributes\":{\"n\":\"4\"},\"end\":23776,\"start\":23754},{\"attributes\":{\"n\":\"4.1\"},\"end\":24187,\"start\":24162},{\"end\":25897,\"start\":25892},{\"end\":26177,\"start\":26144},{\"attributes\":{\"n\":\"4.1.3\"},\"end\":27183,\"start\":27173},{\"attributes\":{\"n\":\"4.2\"},\"end\":27892,\"start\":27854},{\"attributes\":{\"n\":\"5\"},\"end\":29132,\"start\":29101},{\"attributes\":{\"n\":\"5.1\"},\"end\":29344,\"start\":29328},{\"attributes\":{\"n\":\"5.2\"},\"end\":31467,\"start\":31434},{\"attributes\":{\"n\":\"5.2.1\"},\"end\":32044,\"start\":32012},{\"attributes\":{\"n\":\"5.2.2\"},\"end\":37484,\"start\":37457},{\"attributes\":{\"n\":\"5.2.3\"},\"end\":39026,\"start\":39012},{\"attributes\":{\"n\":\"5.3\"},\"end\":43326,\"start\":43298},{\"attributes\":{\"n\":\"6\"},\"end\":45555,\"start\":45544},{\"attributes\":{\"n\":\"6.1\"},\"end\":46193,\"start\":46175},{\"attributes\":{\"n\":\"6.2\"},\"end\":47002,\"start\":46962},{\"attributes\":{\"n\":\"6.3\"},\"end\":48293,\"start\":48258},{\"attributes\":{\"n\":\"6.4\"},\"end\":53661,\"start\":53642},{\"attributes\":{\"n\":\"7\"},\"end\":56406,\"start\":56396},{\"end\":58898,\"start\":58893},{\"end\":59802,\"start\":59792},{\"end\":59853,\"start\":59843},{\"end\":60044,\"start\":60034},{\"end\":60284,\"start\":60274},{\"end\":60488,\"start\":60478},{\"end\":60598,\"start\":60588},{\"end\":60716,\"start\":60705},{\"end\":60828,\"start\":60817},{\"end\":60934,\"start\":60925},{\"end\":60978,\"start\":60969},{\"end\":63045,\"start\":63036},{\"end\":63291,\"start\":63282},{\"end\":63818,\"start\":63809}]", "table": "[{\"end\":60967,\"start\":60945},{\"end\":61217,\"start\":61065},{\"end\":62382,\"start\":61432},{\"end\":63034,\"start\":62683},{\"end\":63280,\"start\":63070},{\"end\":63807,\"start\":63332},{\"end\":64199,\"start\":63895},{\"end\":60967,\"start\":60945},{\"end\":61217,\"start\":61065},{\"end\":62382,\"start\":61432},{\"end\":63034,\"start\":62683},{\"end\":63280,\"start\":63070},{\"end\":63807,\"start\":63332},{\"end\":64199,\"start\":63895}]", "figure_caption": "[{\"end\":59265,\"start\":58900},{\"end\":59790,\"start\":59268},{\"end\":59841,\"start\":59804},{\"end\":60032,\"start\":59855},{\"end\":60272,\"start\":60046},{\"end\":60476,\"start\":60286},{\"end\":60586,\"start\":60490},{\"end\":60703,\"start\":60600},{\"end\":60815,\"start\":60719},{\"end\":60923,\"start\":60831},{\"end\":60945,\"start\":60936},{\"end\":61065,\"start\":60980},{\"end\":61432,\"start\":61220},{\"end\":62683,\"start\":62385},{\"end\":63070,\"start\":63047},{\"end\":63332,\"start\":63293},{\"end\":63895,\"start\":63820},{\"end\":59265,\"start\":58900},{\"end\":59790,\"start\":59268},{\"end\":59841,\"start\":59804},{\"end\":60032,\"start\":59855},{\"end\":60272,\"start\":60046},{\"end\":60476,\"start\":60286},{\"end\":60586,\"start\":60490},{\"end\":60703,\"start\":60600},{\"end\":60815,\"start\":60719},{\"end\":60923,\"start\":60831},{\"end\":60945,\"start\":60936},{\"end\":61065,\"start\":60980},{\"end\":61432,\"start\":61220},{\"end\":62683,\"start\":62385},{\"end\":63070,\"start\":63047},{\"end\":63332,\"start\":63293},{\"end\":63895,\"start\":63820}]", "figure_ref": "[{\"end\":29453,\"start\":29447},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":31568,\"start\":31562},{\"end\":33448,\"start\":33440},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":33801,\"start\":33793},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":36246,\"start\":36238},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":40001,\"start\":39995},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":40871,\"start\":40863},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":42529,\"start\":42523},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":43294,\"start\":43276},{\"end\":47487,\"start\":47481},{\"end\":48078,\"start\":48069},{\"end\":48180,\"start\":48172},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":49789,\"start\":49781},{\"attributes\":{\"ref_id\":\"fig_9\"},\"end\":51856,\"start\":51850},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":52867,\"start\":52860},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":52879,\"start\":52872},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":52890,\"start\":52881},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":53026,\"start\":53019},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":55858,\"start\":55851},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":56091,\"start\":56082},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":57280,\"start\":57272},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":57543,\"start\":57535},{\"end\":57885,\"start\":57877},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":57914,\"start\":57906},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":57924,\"start\":57916},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":57953,\"start\":57945},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":58020,\"start\":58011},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":58325,\"start\":58317},{\"attributes\":{\"ref_id\":\"fig_9\"},\"end\":58459,\"start\":58451},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":58582,\"start\":58573},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":58720,\"start\":58711},{\"end\":29453,\"start\":29447},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":31568,\"start\":31562},{\"end\":33448,\"start\":33440},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":33801,\"start\":33793},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":36246,\"start\":36238},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":40001,\"start\":39995},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":40871,\"start\":40863},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":42529,\"start\":42523},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":43294,\"start\":43276},{\"end\":47487,\"start\":47481},{\"end\":48078,\"start\":48069},{\"end\":48180,\"start\":48172},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":49789,\"start\":49781},{\"attributes\":{\"ref_id\":\"fig_9\"},\"end\":51856,\"start\":51850},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":52867,\"start\":52860},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":52879,\"start\":52872},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":52890,\"start\":52881},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":53026,\"start\":53019},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":55858,\"start\":55851},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":56091,\"start\":56082},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":57280,\"start\":57272},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":57543,\"start\":57535},{\"end\":57885,\"start\":57877},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":57914,\"start\":57906},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":57924,\"start\":57916},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":57953,\"start\":57945},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":58020,\"start\":58011},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":58325,\"start\":58317},{\"attributes\":{\"ref_id\":\"fig_9\"},\"end\":58459,\"start\":58451},{\"attributes\":{\"ref_id\":\"fig_11\"},\"end\":58582,\"start\":58573},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":58720,\"start\":58711}]", "bib_author_first_name": "[{\"end\":66136,\"start\":66132},{\"end\":66152,\"start\":66148},{\"end\":66164,\"start\":66161},{\"end\":66179,\"start\":66174},{\"end\":66582,\"start\":66578},{\"end\":66598,\"start\":66594},{\"end\":66610,\"start\":66607},{\"end\":66625,\"start\":66620},{\"end\":67030,\"start\":67026},{\"end\":67046,\"start\":67042},{\"end\":67058,\"start\":67055},{\"end\":67073,\"start\":67068},{\"end\":67683,\"start\":67677},{\"end\":67707,\"start\":67702},{\"end\":67725,\"start\":67719},{\"end\":68019,\"start\":68015},{\"end\":68269,\"start\":68262},{\"end\":68284,\"start\":68278},{\"end\":68301,\"start\":68295},{\"end\":68312,\"start\":68308},{\"end\":68326,\"start\":68322},{\"end\":68611,\"start\":68606},{\"end\":68625,\"start\":68620},{\"end\":68640,\"start\":68633},{\"end\":68655,\"start\":68651},{\"end\":68697,\"start\":68692},{\"end\":69058,\"start\":69057},{\"end\":69081,\"start\":69080},{\"end\":69411,\"start\":69405},{\"end\":69428,\"start\":69423},{\"end\":69722,\"start\":69716},{\"end\":69738,\"start\":69733},{\"end\":69749,\"start\":69743},{\"end\":69757,\"start\":69754},{\"end\":69768,\"start\":69765},{\"end\":69787,\"start\":69780},{\"end\":69797,\"start\":69793},{\"end\":69802,\"start\":69798},{\"end\":69818,\"start\":69809},{\"end\":69827,\"start\":69823},{\"end\":69845,\"start\":69837},{\"end\":69847,\"start\":69846},{\"end\":70346,\"start\":70336},{\"end\":70358,\"start\":70353},{\"end\":70375,\"start\":70368},{\"end\":70390,\"start\":70385},{\"end\":70408,\"start\":70400},{\"end\":70419,\"start\":70415},{\"end\":71000,\"start\":70992},{\"end\":71016,\"start\":71012},{\"end\":71027,\"start\":71023},{\"end\":71558,\"start\":71552},{\"end\":71574,\"start\":71569},{\"end\":71588,\"start\":71582},{\"end\":71974,\"start\":71970},{\"end\":71987,\"start\":71982},{\"end\":72001,\"start\":71997},{\"end\":72014,\"start\":72010},{\"end\":72496,\"start\":72493},{\"end\":72498,\"start\":72497},{\"end\":72511,\"start\":72507},{\"end\":72528,\"start\":72523},{\"end\":72541,\"start\":72536},{\"end\":72556,\"start\":72550},{\"end\":72571,\"start\":72567},{\"end\":72576,\"start\":72572},{\"end\":72587,\"start\":72583},{\"end\":72589,\"start\":72588},{\"end\":72612,\"start\":72606},{\"end\":72614,\"start\":72613},{\"end\":72627,\"start\":72622},{\"end\":72637,\"start\":72632},{\"end\":72651,\"start\":72646},{\"end\":72661,\"start\":72656},{\"end\":72674,\"start\":72667},{\"end\":72689,\"start\":72683},{\"end\":72691,\"start\":72690},{\"end\":72712,\"start\":72708},{\"end\":72723,\"start\":72719},{\"end\":72736,\"start\":72729},{\"end\":72749,\"start\":72744},{\"end\":72761,\"start\":72757},{\"end\":72777,\"start\":72771},{\"end\":72792,\"start\":72786},{\"end\":72808,\"start\":72805},{\"end\":72823,\"start\":72819},{\"end\":72840,\"start\":72833},{\"end\":73708,\"start\":73707},{\"end\":74059,\"start\":74054},{\"end\":74072,\"start\":74067},{\"end\":74089,\"start\":74084},{\"end\":74114,\"start\":74109},{\"end\":74130,\"start\":74123},{\"end\":74579,\"start\":74578},{\"end\":75018,\"start\":75010},{\"end\":75025,\"start\":75024},{\"end\":75046,\"start\":75045},{\"end\":75059,\"start\":75053},{\"end\":75077,\"start\":75069},{\"end\":75096,\"start\":75095},{\"end\":75107,\"start\":75103},{\"end\":75109,\"start\":75108},{\"end\":75139,\"start\":75119},{\"end\":75154,\"start\":75147},{\"end\":75171,\"start\":75170},{\"end\":75679,\"start\":75673},{\"end\":75703,\"start\":75699},{\"end\":75718,\"start\":75710},{\"end\":75736,\"start\":75727},{\"end\":75753,\"start\":75741},{\"end\":75766,\"start\":75761},{\"end\":75778,\"start\":75775},{\"end\":75790,\"start\":75787},{\"end\":75805,\"start\":75797},{\"end\":76265,\"start\":76257},{\"end\":76279,\"start\":76270},{\"end\":76298,\"start\":76293},{\"end\":76312,\"start\":76307},{\"end\":76322,\"start\":76318},{\"end\":76653,\"start\":76650},{\"end\":76666,\"start\":76661},{\"end\":76677,\"start\":76671},{\"end\":76689,\"start\":76682},{\"end\":76701,\"start\":76695},{\"end\":76718,\"start\":76711},{\"end\":76731,\"start\":76725},{\"end\":77364,\"start\":77361},{\"end\":77377,\"start\":77372},{\"end\":77389,\"start\":77382},{\"end\":77402,\"start\":77395},{\"end\":77415,\"start\":77409},{\"end\":77835,\"start\":77832},{\"end\":77848,\"start\":77843},{\"end\":77860,\"start\":77853},{\"end\":77872,\"start\":77866},{\"end\":77885,\"start\":77877},{\"end\":77895,\"start\":77890},{\"end\":77908,\"start\":77901},{\"end\":77921,\"start\":77915},{\"end\":78299,\"start\":78294},{\"end\":78587,\"start\":78582},{\"end\":78814,\"start\":78809},{\"end\":78832,\"start\":78826},{\"end\":79157,\"start\":79153},{\"end\":79171,\"start\":79166},{\"end\":79183,\"start\":79180},{\"end\":79381,\"start\":79377},{\"end\":79395,\"start\":79390},{\"end\":79405,\"start\":79404},{\"end\":79422,\"start\":79415},{\"end\":79432,\"start\":79428},{\"end\":79434,\"start\":79433},{\"end\":79753,\"start\":79749},{\"end\":79765,\"start\":79759},{\"end\":79777,\"start\":79773},{\"end\":79789,\"start\":79784},{\"end\":79805,\"start\":79798},{\"end\":79822,\"start\":79818},{\"end\":79827,\"start\":79823},{\"end\":79839,\"start\":79834},{\"end\":79856,\"start\":79848},{\"end\":79868,\"start\":79865},{\"end\":79882,\"start\":79879},{\"end\":80420,\"start\":80415},{\"end\":80441,\"start\":80437},{\"end\":80452,\"start\":80446},{\"end\":80770,\"start\":80765},{\"end\":80784,\"start\":80779},{\"end\":80797,\"start\":80791},{\"end\":80811,\"start\":80804},{\"end\":81199,\"start\":81198},{\"end\":81435,\"start\":81428},{\"end\":81450,\"start\":81447},{\"end\":81464,\"start\":81460},{\"end\":81947,\"start\":81937},{\"end\":81970,\"start\":81963},{\"end\":81982,\"start\":81977},{\"end\":82000,\"start\":81992},{\"end\":82014,\"start\":82010},{\"end\":82402,\"start\":82395},{\"end\":82413,\"start\":82408},{\"end\":82421,\"start\":82418},{\"end\":82436,\"start\":82429},{\"end\":82449,\"start\":82443},{\"end\":82839,\"start\":82834},{\"end\":82856,\"start\":82849},{\"end\":83107,\"start\":83106},{\"end\":83389,\"start\":83388},{\"end\":83407,\"start\":83399},{\"end\":83878,\"start\":83871},{\"end\":83891,\"start\":83886},{\"end\":66136,\"start\":66132},{\"end\":66152,\"start\":66148},{\"end\":66164,\"start\":66161},{\"end\":66179,\"start\":66174},{\"end\":66582,\"start\":66578},{\"end\":66598,\"start\":66594},{\"end\":66610,\"start\":66607},{\"end\":66625,\"start\":66620},{\"end\":67030,\"start\":67026},{\"end\":67046,\"start\":67042},{\"end\":67058,\"start\":67055},{\"end\":67073,\"start\":67068},{\"end\":67683,\"start\":67677},{\"end\":67707,\"start\":67702},{\"end\":67725,\"start\":67719},{\"end\":68019,\"start\":68015},{\"end\":68269,\"start\":68262},{\"end\":68284,\"start\":68278},{\"end\":68301,\"start\":68295},{\"end\":68312,\"start\":68308},{\"end\":68326,\"start\":68322},{\"end\":68611,\"start\":68606},{\"end\":68625,\"start\":68620},{\"end\":68640,\"start\":68633},{\"end\":68655,\"start\":68651},{\"end\":68697,\"start\":68692},{\"end\":69058,\"start\":69057},{\"end\":69081,\"start\":69080},{\"end\":69411,\"start\":69405},{\"end\":69428,\"start\":69423},{\"end\":69722,\"start\":69716},{\"end\":69738,\"start\":69733},{\"end\":69749,\"start\":69743},{\"end\":69757,\"start\":69754},{\"end\":69768,\"start\":69765},{\"end\":69787,\"start\":69780},{\"end\":69797,\"start\":69793},{\"end\":69802,\"start\":69798},{\"end\":69818,\"start\":69809},{\"end\":69827,\"start\":69823},{\"end\":69845,\"start\":69837},{\"end\":69847,\"start\":69846},{\"end\":70346,\"start\":70336},{\"end\":70358,\"start\":70353},{\"end\":70375,\"start\":70368},{\"end\":70390,\"start\":70385},{\"end\":70408,\"start\":70400},{\"end\":70419,\"start\":70415},{\"end\":71000,\"start\":70992},{\"end\":71016,\"start\":71012},{\"end\":71027,\"start\":71023},{\"end\":71558,\"start\":71552},{\"end\":71574,\"start\":71569},{\"end\":71588,\"start\":71582},{\"end\":71974,\"start\":71970},{\"end\":71987,\"start\":71982},{\"end\":72001,\"start\":71997},{\"end\":72014,\"start\":72010},{\"end\":72496,\"start\":72493},{\"end\":72498,\"start\":72497},{\"end\":72511,\"start\":72507},{\"end\":72528,\"start\":72523},{\"end\":72541,\"start\":72536},{\"end\":72556,\"start\":72550},{\"end\":72571,\"start\":72567},{\"end\":72576,\"start\":72572},{\"end\":72587,\"start\":72583},{\"end\":72589,\"start\":72588},{\"end\":72612,\"start\":72606},{\"end\":72614,\"start\":72613},{\"end\":72627,\"start\":72622},{\"end\":72637,\"start\":72632},{\"end\":72651,\"start\":72646},{\"end\":72661,\"start\":72656},{\"end\":72674,\"start\":72667},{\"end\":72689,\"start\":72683},{\"end\":72691,\"start\":72690},{\"end\":72712,\"start\":72708},{\"end\":72723,\"start\":72719},{\"end\":72736,\"start\":72729},{\"end\":72749,\"start\":72744},{\"end\":72761,\"start\":72757},{\"end\":72777,\"start\":72771},{\"end\":72792,\"start\":72786},{\"end\":72808,\"start\":72805},{\"end\":72823,\"start\":72819},{\"end\":72840,\"start\":72833},{\"end\":73708,\"start\":73707},{\"end\":74059,\"start\":74054},{\"end\":74072,\"start\":74067},{\"end\":74089,\"start\":74084},{\"end\":74114,\"start\":74109},{\"end\":74130,\"start\":74123},{\"end\":74579,\"start\":74578},{\"end\":75018,\"start\":75010},{\"end\":75025,\"start\":75024},{\"end\":75046,\"start\":75045},{\"end\":75059,\"start\":75053},{\"end\":75077,\"start\":75069},{\"end\":75096,\"start\":75095},{\"end\":75107,\"start\":75103},{\"end\":75109,\"start\":75108},{\"end\":75139,\"start\":75119},{\"end\":75154,\"start\":75147},{\"end\":75171,\"start\":75170},{\"end\":75679,\"start\":75673},{\"end\":75703,\"start\":75699},{\"end\":75718,\"start\":75710},{\"end\":75736,\"start\":75727},{\"end\":75753,\"start\":75741},{\"end\":75766,\"start\":75761},{\"end\":75778,\"start\":75775},{\"end\":75790,\"start\":75787},{\"end\":75805,\"start\":75797},{\"end\":76265,\"start\":76257},{\"end\":76279,\"start\":76270},{\"end\":76298,\"start\":76293},{\"end\":76312,\"start\":76307},{\"end\":76322,\"start\":76318},{\"end\":76653,\"start\":76650},{\"end\":76666,\"start\":76661},{\"end\":76677,\"start\":76671},{\"end\":76689,\"start\":76682},{\"end\":76701,\"start\":76695},{\"end\":76718,\"start\":76711},{\"end\":76731,\"start\":76725},{\"end\":77364,\"start\":77361},{\"end\":77377,\"start\":77372},{\"end\":77389,\"start\":77382},{\"end\":77402,\"start\":77395},{\"end\":77415,\"start\":77409},{\"end\":77835,\"start\":77832},{\"end\":77848,\"start\":77843},{\"end\":77860,\"start\":77853},{\"end\":77872,\"start\":77866},{\"end\":77885,\"start\":77877},{\"end\":77895,\"start\":77890},{\"end\":77908,\"start\":77901},{\"end\":77921,\"start\":77915},{\"end\":78299,\"start\":78294},{\"end\":78587,\"start\":78582},{\"end\":78814,\"start\":78809},{\"end\":78832,\"start\":78826},{\"end\":79157,\"start\":79153},{\"end\":79171,\"start\":79166},{\"end\":79183,\"start\":79180},{\"end\":79381,\"start\":79377},{\"end\":79395,\"start\":79390},{\"end\":79405,\"start\":79404},{\"end\":79422,\"start\":79415},{\"end\":79432,\"start\":79428},{\"end\":79434,\"start\":79433},{\"end\":79753,\"start\":79749},{\"end\":79765,\"start\":79759},{\"end\":79777,\"start\":79773},{\"end\":79789,\"start\":79784},{\"end\":79805,\"start\":79798},{\"end\":79822,\"start\":79818},{\"end\":79827,\"start\":79823},{\"end\":79839,\"start\":79834},{\"end\":79856,\"start\":79848},{\"end\":79868,\"start\":79865},{\"end\":79882,\"start\":79879},{\"end\":80420,\"start\":80415},{\"end\":80441,\"start\":80437},{\"end\":80452,\"start\":80446},{\"end\":80770,\"start\":80765},{\"end\":80784,\"start\":80779},{\"end\":80797,\"start\":80791},{\"end\":80811,\"start\":80804},{\"end\":81199,\"start\":81198},{\"end\":81435,\"start\":81428},{\"end\":81450,\"start\":81447},{\"end\":81464,\"start\":81460},{\"end\":81947,\"start\":81937},{\"end\":81970,\"start\":81963},{\"end\":81982,\"start\":81977},{\"end\":82000,\"start\":81992},{\"end\":82014,\"start\":82010},{\"end\":82402,\"start\":82395},{\"end\":82413,\"start\":82408},{\"end\":82421,\"start\":82418},{\"end\":82436,\"start\":82429},{\"end\":82449,\"start\":82443},{\"end\":82839,\"start\":82834},{\"end\":82856,\"start\":82849},{\"end\":83107,\"start\":83106},{\"end\":83389,\"start\":83388},{\"end\":83407,\"start\":83399},{\"end\":83878,\"start\":83871},{\"end\":83891,\"start\":83886}]", "bib_author_last_name": "[{\"end\":66146,\"start\":66137},{\"end\":66159,\"start\":66153},{\"end\":66172,\"start\":66165},{\"end\":66186,\"start\":66180},{\"end\":66592,\"start\":66583},{\"end\":66605,\"start\":66599},{\"end\":66618,\"start\":66611},{\"end\":66632,\"start\":66626},{\"end\":67040,\"start\":67031},{\"end\":67053,\"start\":67047},{\"end\":67066,\"start\":67059},{\"end\":67080,\"start\":67074},{\"end\":67511,\"start\":67506},{\"end\":67700,\"start\":67684},{\"end\":67717,\"start\":67708},{\"end\":67734,\"start\":67726},{\"end\":68026,\"start\":68020},{\"end\":68276,\"start\":68270},{\"end\":68293,\"start\":68285},{\"end\":68306,\"start\":68302},{\"end\":68320,\"start\":68313},{\"end\":68332,\"start\":68327},{\"end\":68618,\"start\":68612},{\"end\":68631,\"start\":68626},{\"end\":68649,\"start\":68641},{\"end\":68661,\"start\":68656},{\"end\":68679,\"start\":68663},{\"end\":68690,\"start\":68681},{\"end\":68704,\"start\":68698},{\"end\":68715,\"start\":68706},{\"end\":69065,\"start\":69059},{\"end\":69078,\"start\":69067},{\"end\":69086,\"start\":69082},{\"end\":69098,\"start\":69088},{\"end\":69421,\"start\":69412},{\"end\":69443,\"start\":69429},{\"end\":69731,\"start\":69723},{\"end\":69741,\"start\":69739},{\"end\":69752,\"start\":69750},{\"end\":69763,\"start\":69758},{\"end\":69778,\"start\":69769},{\"end\":69791,\"start\":69788},{\"end\":69807,\"start\":69803},{\"end\":69821,\"start\":69819},{\"end\":69835,\"start\":69828},{\"end\":69853,\"start\":69848},{\"end\":70351,\"start\":70347},{\"end\":70366,\"start\":70359},{\"end\":70383,\"start\":70376},{\"end\":70398,\"start\":70391},{\"end\":70413,\"start\":70409},{\"end\":70429,\"start\":70420},{\"end\":71010,\"start\":71001},{\"end\":71021,\"start\":71017},{\"end\":71036,\"start\":71028},{\"end\":71567,\"start\":71559},{\"end\":71580,\"start\":71575},{\"end\":71598,\"start\":71589},{\"end\":71980,\"start\":71975},{\"end\":71995,\"start\":71988},{\"end\":72008,\"start\":72002},{\"end\":72019,\"start\":72015},{\"end\":72297,\"start\":72284},{\"end\":72505,\"start\":72499},{\"end\":72521,\"start\":72512},{\"end\":72534,\"start\":72529},{\"end\":72548,\"start\":72542},{\"end\":72565,\"start\":72557},{\"end\":72581,\"start\":72577},{\"end\":72604,\"start\":72590},{\"end\":72620,\"start\":72615},{\"end\":72630,\"start\":72628},{\"end\":72644,\"start\":72638},{\"end\":72654,\"start\":72652},{\"end\":72665,\"start\":72662},{\"end\":72681,\"start\":72675},{\"end\":72706,\"start\":72692},{\"end\":72717,\"start\":72713},{\"end\":72727,\"start\":72724},{\"end\":72742,\"start\":72737},{\"end\":72755,\"start\":72750},{\"end\":72769,\"start\":72762},{\"end\":72784,\"start\":72778},{\"end\":72803,\"start\":72793},{\"end\":72817,\"start\":72809},{\"end\":72831,\"start\":72824},{\"end\":72849,\"start\":72841},{\"end\":72854,\"start\":72851},{\"end\":73715,\"start\":73709},{\"end\":73725,\"start\":73717},{\"end\":74065,\"start\":74060},{\"end\":74082,\"start\":74073},{\"end\":74096,\"start\":74090},{\"end\":74107,\"start\":74098},{\"end\":74121,\"start\":74115},{\"end\":74140,\"start\":74131},{\"end\":74150,\"start\":74142},{\"end\":74585,\"start\":74580},{\"end\":74594,\"start\":74587},{\"end\":75022,\"start\":75019},{\"end\":75032,\"start\":75026},{\"end\":75043,\"start\":75034},{\"end\":75051,\"start\":75047},{\"end\":75067,\"start\":75060},{\"end\":75084,\"start\":75078},{\"end\":75093,\"start\":75086},{\"end\":75101,\"start\":75097},{\"end\":75117,\"start\":75110},{\"end\":75145,\"start\":75140},{\"end\":75160,\"start\":75155},{\"end\":75168,\"start\":75162},{\"end\":75177,\"start\":75172},{\"end\":75187,\"start\":75179},{\"end\":75697,\"start\":75680},{\"end\":75708,\"start\":75704},{\"end\":75725,\"start\":75719},{\"end\":75739,\"start\":75737},{\"end\":75759,\"start\":75754},{\"end\":75773,\"start\":75767},{\"end\":75785,\"start\":75779},{\"end\":75795,\"start\":75791},{\"end\":75814,\"start\":75806},{\"end\":76268,\"start\":76266},{\"end\":76291,\"start\":76280},{\"end\":76305,\"start\":76299},{\"end\":76316,\"start\":76313},{\"end\":76328,\"start\":76323},{\"end\":76659,\"start\":76654},{\"end\":76669,\"start\":76667},{\"end\":76680,\"start\":76678},{\"end\":76693,\"start\":76690},{\"end\":76709,\"start\":76702},{\"end\":76723,\"start\":76719},{\"end\":76740,\"start\":76732},{\"end\":77370,\"start\":77365},{\"end\":77380,\"start\":77378},{\"end\":77393,\"start\":77390},{\"end\":77407,\"start\":77403},{\"end\":77424,\"start\":77416},{\"end\":77841,\"start\":77836},{\"end\":77851,\"start\":77849},{\"end\":77864,\"start\":77861},{\"end\":77875,\"start\":77873},{\"end\":77888,\"start\":77886},{\"end\":77899,\"start\":77896},{\"end\":77913,\"start\":77909},{\"end\":77930,\"start\":77922},{\"end\":78309,\"start\":78300},{\"end\":78597,\"start\":78588},{\"end\":78824,\"start\":78815},{\"end\":78841,\"start\":78833},{\"end\":79164,\"start\":79158},{\"end\":79178,\"start\":79172},{\"end\":79187,\"start\":79184},{\"end\":79388,\"start\":79382},{\"end\":79402,\"start\":79396},{\"end\":79413,\"start\":79406},{\"end\":79426,\"start\":79423},{\"end\":79443,\"start\":79435},{\"end\":79455,\"start\":79445},{\"end\":79757,\"start\":79754},{\"end\":79771,\"start\":79766},{\"end\":79782,\"start\":79778},{\"end\":79796,\"start\":79790},{\"end\":79816,\"start\":79806},{\"end\":79832,\"start\":79828},{\"end\":79846,\"start\":79840},{\"end\":79863,\"start\":79857},{\"end\":79877,\"start\":79869},{\"end\":79891,\"start\":79883},{\"end\":80435,\"start\":80421},{\"end\":80444,\"start\":80442},{\"end\":80462,\"start\":80453},{\"end\":80777,\"start\":80771},{\"end\":80789,\"start\":80785},{\"end\":80802,\"start\":80798},{\"end\":80820,\"start\":80812},{\"end\":81205,\"start\":81200},{\"end\":81214,\"start\":81207},{\"end\":81230,\"start\":81216},{\"end\":81445,\"start\":81436},{\"end\":81458,\"start\":81451},{\"end\":81471,\"start\":81465},{\"end\":81961,\"start\":81948},{\"end\":81975,\"start\":81971},{\"end\":81990,\"start\":81983},{\"end\":82008,\"start\":82001},{\"end\":82019,\"start\":82015},{\"end\":82030,\"start\":82021},{\"end\":82406,\"start\":82403},{\"end\":82416,\"start\":82414},{\"end\":82427,\"start\":82422},{\"end\":82441,\"start\":82437},{\"end\":82458,\"start\":82450},{\"end\":82847,\"start\":82840},{\"end\":82866,\"start\":82857},{\"end\":83115,\"start\":83108},{\"end\":83124,\"start\":83117},{\"end\":83397,\"start\":83390},{\"end\":83414,\"start\":83408},{\"end\":83421,\"start\":83416},{\"end\":83740,\"start\":83729},{\"end\":83884,\"start\":83879},{\"end\":83901,\"start\":83892},{\"end\":84421,\"start\":84417},{\"end\":86443,\"start\":86438},{\"end\":66146,\"start\":66137},{\"end\":66159,\"start\":66153},{\"end\":66172,\"start\":66165},{\"end\":66186,\"start\":66180},{\"end\":66592,\"start\":66583},{\"end\":66605,\"start\":66599},{\"end\":66618,\"start\":66611},{\"end\":66632,\"start\":66626},{\"end\":67040,\"start\":67031},{\"end\":67053,\"start\":67047},{\"end\":67066,\"start\":67059},{\"end\":67080,\"start\":67074},{\"end\":67511,\"start\":67506},{\"end\":67700,\"start\":67684},{\"end\":67717,\"start\":67708},{\"end\":67734,\"start\":67726},{\"end\":68026,\"start\":68020},{\"end\":68276,\"start\":68270},{\"end\":68293,\"start\":68285},{\"end\":68306,\"start\":68302},{\"end\":68320,\"start\":68313},{\"end\":68332,\"start\":68327},{\"end\":68618,\"start\":68612},{\"end\":68631,\"start\":68626},{\"end\":68649,\"start\":68641},{\"end\":68661,\"start\":68656},{\"end\":68679,\"start\":68663},{\"end\":68690,\"start\":68681},{\"end\":68704,\"start\":68698},{\"end\":68715,\"start\":68706},{\"end\":69065,\"start\":69059},{\"end\":69078,\"start\":69067},{\"end\":69086,\"start\":69082},{\"end\":69098,\"start\":69088},{\"end\":69421,\"start\":69412},{\"end\":69443,\"start\":69429},{\"end\":69731,\"start\":69723},{\"end\":69741,\"start\":69739},{\"end\":69752,\"start\":69750},{\"end\":69763,\"start\":69758},{\"end\":69778,\"start\":69769},{\"end\":69791,\"start\":69788},{\"end\":69807,\"start\":69803},{\"end\":69821,\"start\":69819},{\"end\":69835,\"start\":69828},{\"end\":69853,\"start\":69848},{\"end\":70351,\"start\":70347},{\"end\":70366,\"start\":70359},{\"end\":70383,\"start\":70376},{\"end\":70398,\"start\":70391},{\"end\":70413,\"start\":70409},{\"end\":70429,\"start\":70420},{\"end\":71010,\"start\":71001},{\"end\":71021,\"start\":71017},{\"end\":71036,\"start\":71028},{\"end\":71567,\"start\":71559},{\"end\":71580,\"start\":71575},{\"end\":71598,\"start\":71589},{\"end\":71980,\"start\":71975},{\"end\":71995,\"start\":71988},{\"end\":72008,\"start\":72002},{\"end\":72019,\"start\":72015},{\"end\":72297,\"start\":72284},{\"end\":72505,\"start\":72499},{\"end\":72521,\"start\":72512},{\"end\":72534,\"start\":72529},{\"end\":72548,\"start\":72542},{\"end\":72565,\"start\":72557},{\"end\":72581,\"start\":72577},{\"end\":72604,\"start\":72590},{\"end\":72620,\"start\":72615},{\"end\":72630,\"start\":72628},{\"end\":72644,\"start\":72638},{\"end\":72654,\"start\":72652},{\"end\":72665,\"start\":72662},{\"end\":72681,\"start\":72675},{\"end\":72706,\"start\":72692},{\"end\":72717,\"start\":72713},{\"end\":72727,\"start\":72724},{\"end\":72742,\"start\":72737},{\"end\":72755,\"start\":72750},{\"end\":72769,\"start\":72762},{\"end\":72784,\"start\":72778},{\"end\":72803,\"start\":72793},{\"end\":72817,\"start\":72809},{\"end\":72831,\"start\":72824},{\"end\":72849,\"start\":72841},{\"end\":72854,\"start\":72851},{\"end\":73715,\"start\":73709},{\"end\":73725,\"start\":73717},{\"end\":74065,\"start\":74060},{\"end\":74082,\"start\":74073},{\"end\":74096,\"start\":74090},{\"end\":74107,\"start\":74098},{\"end\":74121,\"start\":74115},{\"end\":74140,\"start\":74131},{\"end\":74150,\"start\":74142},{\"end\":74585,\"start\":74580},{\"end\":74594,\"start\":74587},{\"end\":75022,\"start\":75019},{\"end\":75032,\"start\":75026},{\"end\":75043,\"start\":75034},{\"end\":75051,\"start\":75047},{\"end\":75067,\"start\":75060},{\"end\":75084,\"start\":75078},{\"end\":75093,\"start\":75086},{\"end\":75101,\"start\":75097},{\"end\":75117,\"start\":75110},{\"end\":75145,\"start\":75140},{\"end\":75160,\"start\":75155},{\"end\":75168,\"start\":75162},{\"end\":75177,\"start\":75172},{\"end\":75187,\"start\":75179},{\"end\":75697,\"start\":75680},{\"end\":75708,\"start\":75704},{\"end\":75725,\"start\":75719},{\"end\":75739,\"start\":75737},{\"end\":75759,\"start\":75754},{\"end\":75773,\"start\":75767},{\"end\":75785,\"start\":75779},{\"end\":75795,\"start\":75791},{\"end\":75814,\"start\":75806},{\"end\":76268,\"start\":76266},{\"end\":76291,\"start\":76280},{\"end\":76305,\"start\":76299},{\"end\":76316,\"start\":76313},{\"end\":76328,\"start\":76323},{\"end\":76659,\"start\":76654},{\"end\":76669,\"start\":76667},{\"end\":76680,\"start\":76678},{\"end\":76693,\"start\":76690},{\"end\":76709,\"start\":76702},{\"end\":76723,\"start\":76719},{\"end\":76740,\"start\":76732},{\"end\":77370,\"start\":77365},{\"end\":77380,\"start\":77378},{\"end\":77393,\"start\":77390},{\"end\":77407,\"start\":77403},{\"end\":77424,\"start\":77416},{\"end\":77841,\"start\":77836},{\"end\":77851,\"start\":77849},{\"end\":77864,\"start\":77861},{\"end\":77875,\"start\":77873},{\"end\":77888,\"start\":77886},{\"end\":77899,\"start\":77896},{\"end\":77913,\"start\":77909},{\"end\":77930,\"start\":77922},{\"end\":78309,\"start\":78300},{\"end\":78597,\"start\":78588},{\"end\":78824,\"start\":78815},{\"end\":78841,\"start\":78833},{\"end\":79164,\"start\":79158},{\"end\":79178,\"start\":79172},{\"end\":79187,\"start\":79184},{\"end\":79388,\"start\":79382},{\"end\":79402,\"start\":79396},{\"end\":79413,\"start\":79406},{\"end\":79426,\"start\":79423},{\"end\":79443,\"start\":79435},{\"end\":79455,\"start\":79445},{\"end\":79757,\"start\":79754},{\"end\":79771,\"start\":79766},{\"end\":79782,\"start\":79778},{\"end\":79796,\"start\":79790},{\"end\":79816,\"start\":79806},{\"end\":79832,\"start\":79828},{\"end\":79846,\"start\":79840},{\"end\":79863,\"start\":79857},{\"end\":79877,\"start\":79869},{\"end\":79891,\"start\":79883},{\"end\":80435,\"start\":80421},{\"end\":80444,\"start\":80442},{\"end\":80462,\"start\":80453},{\"end\":80777,\"start\":80771},{\"end\":80789,\"start\":80785},{\"end\":80802,\"start\":80798},{\"end\":80820,\"start\":80812},{\"end\":81205,\"start\":81200},{\"end\":81214,\"start\":81207},{\"end\":81230,\"start\":81216},{\"end\":81445,\"start\":81436},{\"end\":81458,\"start\":81451},{\"end\":81471,\"start\":81465},{\"end\":81961,\"start\":81948},{\"end\":81975,\"start\":81971},{\"end\":81990,\"start\":81983},{\"end\":82008,\"start\":82001},{\"end\":82019,\"start\":82015},{\"end\":82030,\"start\":82021},{\"end\":82406,\"start\":82403},{\"end\":82416,\"start\":82414},{\"end\":82427,\"start\":82422},{\"end\":82441,\"start\":82437},{\"end\":82458,\"start\":82450},{\"end\":82847,\"start\":82840},{\"end\":82866,\"start\":82857},{\"end\":83115,\"start\":83108},{\"end\":83124,\"start\":83117},{\"end\":83397,\"start\":83390},{\"end\":83414,\"start\":83408},{\"end\":83421,\"start\":83416},{\"end\":83740,\"start\":83729},{\"end\":83884,\"start\":83879},{\"end\":83901,\"start\":83892},{\"end\":84421,\"start\":84417},{\"end\":86443,\"start\":86438}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":66038,\"start\":65628},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":57661300},\"end\":66449,\"start\":66040},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":198465736},\"end\":66930,\"start\":66451},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":149921864},\"end\":67345,\"start\":66932},{\"attributes\":{\"id\":\"b4\"},\"end\":67502,\"start\":67347},{\"attributes\":{\"id\":\"b5\"},\"end\":67613,\"start\":67504},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":49268164},\"end\":67989,\"start\":67615},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":117000032},\"end\":68163,\"start\":67991},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17417196},\"end\":68604,\"start\":68165},{\"attributes\":{\"doi\":\"arXiv:2007.15219\",\"id\":\"b9\"},\"end\":68975,\"start\":68606},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1887438},\"end\":69332,\"start\":68977},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":5132658},\"end\":69634,\"start\":69334},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":199012975},\"end\":70264,\"start\":69636},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":2909637},\"end\":70953,\"start\":70266},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":6949872},\"end\":71459,\"start\":70955},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":20280062},\"end\":71838,\"start\":71461},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":16028174},\"end\":72280,\"start\":71840},{\"attributes\":{\"id\":\"b17\"},\"end\":72407,\"start\":72282},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":3434387},\"end\":73591,\"start\":72409},{\"attributes\":{\"id\":\"b19\"},\"end\":73939,\"start\":73593},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":52069446},\"end\":74517,\"start\":73941},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":10606404},\"end\":74751,\"start\":74519},{\"attributes\":{\"id\":\"b22\"},\"end\":74885,\"start\":74753},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":4913347},\"end\":75609,\"start\":74887},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":10297877},\"end\":76163,\"start\":75611},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":199582747},\"end\":76551,\"start\":76165},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":207925294},\"end\":77262,\"start\":76553},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":52200248},\"end\":77733,\"start\":77264},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":53358213},\"end\":78247,\"start\":77735},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":15277033},\"end\":78523,\"start\":78249},{\"attributes\":{\"id\":\"b30\"},\"end\":78752,\"start\":78525},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":12262331},\"end\":79083,\"start\":78754},{\"attributes\":{\"id\":\"b32\"},\"end\":79310,\"start\":79085},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":117338892},\"end\":79660,\"start\":79312},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":14302490},\"end\":80270,\"start\":79662},{\"attributes\":{\"id\":\"b35\"},\"end\":80352,\"start\":80272},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":7573897},\"end\":80664,\"start\":80354},{\"attributes\":{\"id\":\"b37\"},\"end\":80688,\"start\":80666},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":17594218},\"end\":81134,\"start\":80690},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":10218000},\"end\":81360,\"start\":81136},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":9917984},\"end\":81761,\"start\":81362},{\"attributes\":{\"id\":\"b41\"},\"end\":81879,\"start\":81763},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":3527510},\"end\":82296,\"start\":81881},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":49405466},\"end\":82767,\"start\":82298},{\"attributes\":{\"id\":\"b44\"},\"end\":83059,\"start\":82769},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":7051992},\"end\":83309,\"start\":83061},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":35014832},\"end\":83725,\"start\":83311},{\"attributes\":{\"id\":\"b47\"},\"end\":83823,\"start\":83727},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":136799},\"end\":84129,\"start\":83825},{\"attributes\":{\"id\":\"b49\"},\"end\":85879,\"start\":84131},{\"attributes\":{\"id\":\"b50\"},\"end\":85994,\"start\":85881},{\"attributes\":{\"id\":\"b51\"},\"end\":86102,\"start\":85996},{\"attributes\":{\"id\":\"b52\"},\"end\":87008,\"start\":86104},{\"attributes\":{\"id\":\"b0\"},\"end\":66038,\"start\":65628},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":57661300},\"end\":66449,\"start\":66040},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":198465736},\"end\":66930,\"start\":66451},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":149921864},\"end\":67345,\"start\":66932},{\"attributes\":{\"id\":\"b4\"},\"end\":67502,\"start\":67347},{\"attributes\":{\"id\":\"b5\"},\"end\":67613,\"start\":67504},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":49268164},\"end\":67989,\"start\":67615},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":117000032},\"end\":68163,\"start\":67991},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17417196},\"end\":68604,\"start\":68165},{\"attributes\":{\"doi\":\"arXiv:2007.15219\",\"id\":\"b9\"},\"end\":68975,\"start\":68606},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1887438},\"end\":69332,\"start\":68977},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":5132658},\"end\":69634,\"start\":69334},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":199012975},\"end\":70264,\"start\":69636},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":2909637},\"end\":70953,\"start\":70266},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":6949872},\"end\":71459,\"start\":70955},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":20280062},\"end\":71838,\"start\":71461},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":16028174},\"end\":72280,\"start\":71840},{\"attributes\":{\"id\":\"b17\"},\"end\":72407,\"start\":72282},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":3434387},\"end\":73591,\"start\":72409},{\"attributes\":{\"id\":\"b19\"},\"end\":73939,\"start\":73593},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":52069446},\"end\":74517,\"start\":73941},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":10606404},\"end\":74751,\"start\":74519},{\"attributes\":{\"id\":\"b22\"},\"end\":74885,\"start\":74753},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":4913347},\"end\":75609,\"start\":74887},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":10297877},\"end\":76163,\"start\":75611},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":199582747},\"end\":76551,\"start\":76165},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":207925294},\"end\":77262,\"start\":76553},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":52200248},\"end\":77733,\"start\":77264},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":53358213},\"end\":78247,\"start\":77735},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":15277033},\"end\":78523,\"start\":78249},{\"attributes\":{\"id\":\"b30\"},\"end\":78752,\"start\":78525},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":12262331},\"end\":79083,\"start\":78754},{\"attributes\":{\"id\":\"b32\"},\"end\":79310,\"start\":79085},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":117338892},\"end\":79660,\"start\":79312},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":14302490},\"end\":80270,\"start\":79662},{\"attributes\":{\"id\":\"b35\"},\"end\":80352,\"start\":80272},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":7573897},\"end\":80664,\"start\":80354},{\"attributes\":{\"id\":\"b37\"},\"end\":80688,\"start\":80666},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":17594218},\"end\":81134,\"start\":80690},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":10218000},\"end\":81360,\"start\":81136},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":9917984},\"end\":81761,\"start\":81362},{\"attributes\":{\"id\":\"b41\"},\"end\":81879,\"start\":81763},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":3527510},\"end\":82296,\"start\":81881},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":49405466},\"end\":82767,\"start\":82298},{\"attributes\":{\"id\":\"b44\"},\"end\":83059,\"start\":82769},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":7051992},\"end\":83309,\"start\":83061},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":35014832},\"end\":83725,\"start\":83311},{\"attributes\":{\"id\":\"b47\"},\"end\":83823,\"start\":83727},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":136799},\"end\":84129,\"start\":83825},{\"attributes\":{\"id\":\"b49\"},\"end\":85879,\"start\":84131},{\"attributes\":{\"id\":\"b50\"},\"end\":85994,\"start\":85881},{\"attributes\":{\"id\":\"b51\"},\"end\":86102,\"start\":85996},{\"attributes\":{\"id\":\"b52\"},\"end\":87008,\"start\":86104}]", "bib_title": "[{\"end\":66130,\"start\":66040},{\"end\":66576,\"start\":66451},{\"end\":67024,\"start\":66932},{\"end\":67675,\"start\":67615},{\"end\":68013,\"start\":67991},{\"end\":68260,\"start\":68165},{\"end\":69055,\"start\":68977},{\"end\":69403,\"start\":69334},{\"end\":69714,\"start\":69636},{\"end\":70334,\"start\":70266},{\"end\":70990,\"start\":70955},{\"end\":71550,\"start\":71461},{\"end\":71968,\"start\":71840},{\"end\":72491,\"start\":72409},{\"end\":74052,\"start\":73941},{\"end\":74576,\"start\":74519},{\"end\":75008,\"start\":74887},{\"end\":75671,\"start\":75611},{\"end\":76255,\"start\":76165},{\"end\":76648,\"start\":76553},{\"end\":77359,\"start\":77264},{\"end\":77830,\"start\":77735},{\"end\":78292,\"start\":78249},{\"end\":78580,\"start\":78525},{\"end\":78807,\"start\":78754},{\"end\":79375,\"start\":79312},{\"end\":79747,\"start\":79662},{\"end\":80413,\"start\":80354},{\"end\":80763,\"start\":80690},{\"end\":81196,\"start\":81136},{\"end\":81426,\"start\":81362},{\"end\":81935,\"start\":81881},{\"end\":82393,\"start\":82298},{\"end\":83104,\"start\":83061},{\"end\":83386,\"start\":83311},{\"end\":83869,\"start\":83825},{\"end\":84415,\"start\":84131},{\"end\":86436,\"start\":86104},{\"end\":66130,\"start\":66040},{\"end\":66576,\"start\":66451},{\"end\":67024,\"start\":66932},{\"end\":67675,\"start\":67615},{\"end\":68013,\"start\":67991},{\"end\":68260,\"start\":68165},{\"end\":69055,\"start\":68977},{\"end\":69403,\"start\":69334},{\"end\":69714,\"start\":69636},{\"end\":70334,\"start\":70266},{\"end\":70990,\"start\":70955},{\"end\":71550,\"start\":71461},{\"end\":71968,\"start\":71840},{\"end\":72491,\"start\":72409},{\"end\":74052,\"start\":73941},{\"end\":74576,\"start\":74519},{\"end\":75008,\"start\":74887},{\"end\":75671,\"start\":75611},{\"end\":76255,\"start\":76165},{\"end\":76648,\"start\":76553},{\"end\":77359,\"start\":77264},{\"end\":77830,\"start\":77735},{\"end\":78292,\"start\":78249},{\"end\":78580,\"start\":78525},{\"end\":78807,\"start\":78754},{\"end\":79375,\"start\":79312},{\"end\":79747,\"start\":79662},{\"end\":80413,\"start\":80354},{\"end\":80763,\"start\":80690},{\"end\":81196,\"start\":81136},{\"end\":81426,\"start\":81362},{\"end\":81935,\"start\":81881},{\"end\":82393,\"start\":82298},{\"end\":83104,\"start\":83061},{\"end\":83386,\"start\":83311},{\"end\":83869,\"start\":83825},{\"end\":84415,\"start\":84131},{\"end\":86436,\"start\":86104}]", "bib_author": "[{\"end\":66148,\"start\":66132},{\"end\":66161,\"start\":66148},{\"end\":66174,\"start\":66161},{\"end\":66188,\"start\":66174},{\"end\":66594,\"start\":66578},{\"end\":66607,\"start\":66594},{\"end\":66620,\"start\":66607},{\"end\":66634,\"start\":66620},{\"end\":67042,\"start\":67026},{\"end\":67055,\"start\":67042},{\"end\":67068,\"start\":67055},{\"end\":67082,\"start\":67068},{\"end\":67513,\"start\":67506},{\"end\":67702,\"start\":67677},{\"end\":67719,\"start\":67702},{\"end\":67736,\"start\":67719},{\"end\":68028,\"start\":68015},{\"end\":68278,\"start\":68262},{\"end\":68295,\"start\":68278},{\"end\":68308,\"start\":68295},{\"end\":68322,\"start\":68308},{\"end\":68334,\"start\":68322},{\"end\":68620,\"start\":68606},{\"end\":68633,\"start\":68620},{\"end\":68651,\"start\":68633},{\"end\":68663,\"start\":68651},{\"end\":68681,\"start\":68663},{\"end\":68692,\"start\":68681},{\"end\":68706,\"start\":68692},{\"end\":68717,\"start\":68706},{\"end\":69067,\"start\":69057},{\"end\":69080,\"start\":69067},{\"end\":69088,\"start\":69080},{\"end\":69100,\"start\":69088},{\"end\":69423,\"start\":69405},{\"end\":69445,\"start\":69423},{\"end\":69733,\"start\":69716},{\"end\":69743,\"start\":69733},{\"end\":69754,\"start\":69743},{\"end\":69765,\"start\":69754},{\"end\":69780,\"start\":69765},{\"end\":69793,\"start\":69780},{\"end\":69809,\"start\":69793},{\"end\":69823,\"start\":69809},{\"end\":69837,\"start\":69823},{\"end\":69855,\"start\":69837},{\"end\":70353,\"start\":70336},{\"end\":70368,\"start\":70353},{\"end\":70385,\"start\":70368},{\"end\":70400,\"start\":70385},{\"end\":70415,\"start\":70400},{\"end\":70431,\"start\":70415},{\"end\":71012,\"start\":70992},{\"end\":71023,\"start\":71012},{\"end\":71038,\"start\":71023},{\"end\":71569,\"start\":71552},{\"end\":71582,\"start\":71569},{\"end\":71600,\"start\":71582},{\"end\":71982,\"start\":71970},{\"end\":71997,\"start\":71982},{\"end\":72010,\"start\":71997},{\"end\":72021,\"start\":72010},{\"end\":72299,\"start\":72284},{\"end\":72507,\"start\":72493},{\"end\":72523,\"start\":72507},{\"end\":72536,\"start\":72523},{\"end\":72550,\"start\":72536},{\"end\":72567,\"start\":72550},{\"end\":72583,\"start\":72567},{\"end\":72606,\"start\":72583},{\"end\":72622,\"start\":72606},{\"end\":72632,\"start\":72622},{\"end\":72646,\"start\":72632},{\"end\":72656,\"start\":72646},{\"end\":72667,\"start\":72656},{\"end\":72683,\"start\":72667},{\"end\":72708,\"start\":72683},{\"end\":72719,\"start\":72708},{\"end\":72729,\"start\":72719},{\"end\":72744,\"start\":72729},{\"end\":72757,\"start\":72744},{\"end\":72771,\"start\":72757},{\"end\":72786,\"start\":72771},{\"end\":72805,\"start\":72786},{\"end\":72819,\"start\":72805},{\"end\":72833,\"start\":72819},{\"end\":72851,\"start\":72833},{\"end\":72856,\"start\":72851},{\"end\":73717,\"start\":73707},{\"end\":73727,\"start\":73717},{\"end\":74067,\"start\":74054},{\"end\":74084,\"start\":74067},{\"end\":74098,\"start\":74084},{\"end\":74109,\"start\":74098},{\"end\":74123,\"start\":74109},{\"end\":74142,\"start\":74123},{\"end\":74152,\"start\":74142},{\"end\":74587,\"start\":74578},{\"end\":74596,\"start\":74587},{\"end\":75024,\"start\":75010},{\"end\":75034,\"start\":75024},{\"end\":75045,\"start\":75034},{\"end\":75053,\"start\":75045},{\"end\":75069,\"start\":75053},{\"end\":75086,\"start\":75069},{\"end\":75095,\"start\":75086},{\"end\":75103,\"start\":75095},{\"end\":75119,\"start\":75103},{\"end\":75147,\"start\":75119},{\"end\":75162,\"start\":75147},{\"end\":75170,\"start\":75162},{\"end\":75179,\"start\":75170},{\"end\":75189,\"start\":75179},{\"end\":75699,\"start\":75673},{\"end\":75710,\"start\":75699},{\"end\":75727,\"start\":75710},{\"end\":75741,\"start\":75727},{\"end\":75761,\"start\":75741},{\"end\":75775,\"start\":75761},{\"end\":75787,\"start\":75775},{\"end\":75797,\"start\":75787},{\"end\":75816,\"start\":75797},{\"end\":76270,\"start\":76257},{\"end\":76293,\"start\":76270},{\"end\":76307,\"start\":76293},{\"end\":76318,\"start\":76307},{\"end\":76330,\"start\":76318},{\"end\":76661,\"start\":76650},{\"end\":76671,\"start\":76661},{\"end\":76682,\"start\":76671},{\"end\":76695,\"start\":76682},{\"end\":76711,\"start\":76695},{\"end\":76725,\"start\":76711},{\"end\":76742,\"start\":76725},{\"end\":77372,\"start\":77361},{\"end\":77382,\"start\":77372},{\"end\":77395,\"start\":77382},{\"end\":77409,\"start\":77395},{\"end\":77426,\"start\":77409},{\"end\":77843,\"start\":77832},{\"end\":77853,\"start\":77843},{\"end\":77866,\"start\":77853},{\"end\":77877,\"start\":77866},{\"end\":77890,\"start\":77877},{\"end\":77901,\"start\":77890},{\"end\":77915,\"start\":77901},{\"end\":77932,\"start\":77915},{\"end\":78311,\"start\":78294},{\"end\":78599,\"start\":78582},{\"end\":78826,\"start\":78809},{\"end\":78843,\"start\":78826},{\"end\":79166,\"start\":79153},{\"end\":79180,\"start\":79166},{\"end\":79189,\"start\":79180},{\"end\":79390,\"start\":79377},{\"end\":79404,\"start\":79390},{\"end\":79415,\"start\":79404},{\"end\":79428,\"start\":79415},{\"end\":79445,\"start\":79428},{\"end\":79457,\"start\":79445},{\"end\":79759,\"start\":79749},{\"end\":79773,\"start\":79759},{\"end\":79784,\"start\":79773},{\"end\":79798,\"start\":79784},{\"end\":79818,\"start\":79798},{\"end\":79834,\"start\":79818},{\"end\":79848,\"start\":79834},{\"end\":79865,\"start\":79848},{\"end\":79879,\"start\":79865},{\"end\":79893,\"start\":79879},{\"end\":80437,\"start\":80415},{\"end\":80446,\"start\":80437},{\"end\":80464,\"start\":80446},{\"end\":80779,\"start\":80765},{\"end\":80791,\"start\":80779},{\"end\":80804,\"start\":80791},{\"end\":80822,\"start\":80804},{\"end\":81207,\"start\":81198},{\"end\":81216,\"start\":81207},{\"end\":81232,\"start\":81216},{\"end\":81447,\"start\":81428},{\"end\":81460,\"start\":81447},{\"end\":81473,\"start\":81460},{\"end\":81963,\"start\":81937},{\"end\":81977,\"start\":81963},{\"end\":81992,\"start\":81977},{\"end\":82010,\"start\":81992},{\"end\":82021,\"start\":82010},{\"end\":82032,\"start\":82021},{\"end\":82408,\"start\":82395},{\"end\":82418,\"start\":82408},{\"end\":82429,\"start\":82418},{\"end\":82443,\"start\":82429},{\"end\":82460,\"start\":82443},{\"end\":82849,\"start\":82834},{\"end\":82868,\"start\":82849},{\"end\":83117,\"start\":83106},{\"end\":83126,\"start\":83117},{\"end\":83399,\"start\":83388},{\"end\":83416,\"start\":83399},{\"end\":83423,\"start\":83416},{\"end\":83742,\"start\":83729},{\"end\":83886,\"start\":83871},{\"end\":83903,\"start\":83886},{\"end\":84423,\"start\":84417},{\"end\":86445,\"start\":86438},{\"end\":66148,\"start\":66132},{\"end\":66161,\"start\":66148},{\"end\":66174,\"start\":66161},{\"end\":66188,\"start\":66174},{\"end\":66594,\"start\":66578},{\"end\":66607,\"start\":66594},{\"end\":66620,\"start\":66607},{\"end\":66634,\"start\":66620},{\"end\":67042,\"start\":67026},{\"end\":67055,\"start\":67042},{\"end\":67068,\"start\":67055},{\"end\":67082,\"start\":67068},{\"end\":67513,\"start\":67506},{\"end\":67702,\"start\":67677},{\"end\":67719,\"start\":67702},{\"end\":67736,\"start\":67719},{\"end\":68028,\"start\":68015},{\"end\":68278,\"start\":68262},{\"end\":68295,\"start\":68278},{\"end\":68308,\"start\":68295},{\"end\":68322,\"start\":68308},{\"end\":68334,\"start\":68322},{\"end\":68620,\"start\":68606},{\"end\":68633,\"start\":68620},{\"end\":68651,\"start\":68633},{\"end\":68663,\"start\":68651},{\"end\":68681,\"start\":68663},{\"end\":68692,\"start\":68681},{\"end\":68706,\"start\":68692},{\"end\":68717,\"start\":68706},{\"end\":69067,\"start\":69057},{\"end\":69080,\"start\":69067},{\"end\":69088,\"start\":69080},{\"end\":69100,\"start\":69088},{\"end\":69423,\"start\":69405},{\"end\":69445,\"start\":69423},{\"end\":69733,\"start\":69716},{\"end\":69743,\"start\":69733},{\"end\":69754,\"start\":69743},{\"end\":69765,\"start\":69754},{\"end\":69780,\"start\":69765},{\"end\":69793,\"start\":69780},{\"end\":69809,\"start\":69793},{\"end\":69823,\"start\":69809},{\"end\":69837,\"start\":69823},{\"end\":69855,\"start\":69837},{\"end\":70353,\"start\":70336},{\"end\":70368,\"start\":70353},{\"end\":70385,\"start\":70368},{\"end\":70400,\"start\":70385},{\"end\":70415,\"start\":70400},{\"end\":70431,\"start\":70415},{\"end\":71012,\"start\":70992},{\"end\":71023,\"start\":71012},{\"end\":71038,\"start\":71023},{\"end\":71569,\"start\":71552},{\"end\":71582,\"start\":71569},{\"end\":71600,\"start\":71582},{\"end\":71982,\"start\":71970},{\"end\":71997,\"start\":71982},{\"end\":72010,\"start\":71997},{\"end\":72021,\"start\":72010},{\"end\":72299,\"start\":72284},{\"end\":72507,\"start\":72493},{\"end\":72523,\"start\":72507},{\"end\":72536,\"start\":72523},{\"end\":72550,\"start\":72536},{\"end\":72567,\"start\":72550},{\"end\":72583,\"start\":72567},{\"end\":72606,\"start\":72583},{\"end\":72622,\"start\":72606},{\"end\":72632,\"start\":72622},{\"end\":72646,\"start\":72632},{\"end\":72656,\"start\":72646},{\"end\":72667,\"start\":72656},{\"end\":72683,\"start\":72667},{\"end\":72708,\"start\":72683},{\"end\":72719,\"start\":72708},{\"end\":72729,\"start\":72719},{\"end\":72744,\"start\":72729},{\"end\":72757,\"start\":72744},{\"end\":72771,\"start\":72757},{\"end\":72786,\"start\":72771},{\"end\":72805,\"start\":72786},{\"end\":72819,\"start\":72805},{\"end\":72833,\"start\":72819},{\"end\":72851,\"start\":72833},{\"end\":72856,\"start\":72851},{\"end\":73717,\"start\":73707},{\"end\":73727,\"start\":73717},{\"end\":74067,\"start\":74054},{\"end\":74084,\"start\":74067},{\"end\":74098,\"start\":74084},{\"end\":74109,\"start\":74098},{\"end\":74123,\"start\":74109},{\"end\":74142,\"start\":74123},{\"end\":74152,\"start\":74142},{\"end\":74587,\"start\":74578},{\"end\":74596,\"start\":74587},{\"end\":75024,\"start\":75010},{\"end\":75034,\"start\":75024},{\"end\":75045,\"start\":75034},{\"end\":75053,\"start\":75045},{\"end\":75069,\"start\":75053},{\"end\":75086,\"start\":75069},{\"end\":75095,\"start\":75086},{\"end\":75103,\"start\":75095},{\"end\":75119,\"start\":75103},{\"end\":75147,\"start\":75119},{\"end\":75162,\"start\":75147},{\"end\":75170,\"start\":75162},{\"end\":75179,\"start\":75170},{\"end\":75189,\"start\":75179},{\"end\":75699,\"start\":75673},{\"end\":75710,\"start\":75699},{\"end\":75727,\"start\":75710},{\"end\":75741,\"start\":75727},{\"end\":75761,\"start\":75741},{\"end\":75775,\"start\":75761},{\"end\":75787,\"start\":75775},{\"end\":75797,\"start\":75787},{\"end\":75816,\"start\":75797},{\"end\":76270,\"start\":76257},{\"end\":76293,\"start\":76270},{\"end\":76307,\"start\":76293},{\"end\":76318,\"start\":76307},{\"end\":76330,\"start\":76318},{\"end\":76661,\"start\":76650},{\"end\":76671,\"start\":76661},{\"end\":76682,\"start\":76671},{\"end\":76695,\"start\":76682},{\"end\":76711,\"start\":76695},{\"end\":76725,\"start\":76711},{\"end\":76742,\"start\":76725},{\"end\":77372,\"start\":77361},{\"end\":77382,\"start\":77372},{\"end\":77395,\"start\":77382},{\"end\":77409,\"start\":77395},{\"end\":77426,\"start\":77409},{\"end\":77843,\"start\":77832},{\"end\":77853,\"start\":77843},{\"end\":77866,\"start\":77853},{\"end\":77877,\"start\":77866},{\"end\":77890,\"start\":77877},{\"end\":77901,\"start\":77890},{\"end\":77915,\"start\":77901},{\"end\":77932,\"start\":77915},{\"end\":78311,\"start\":78294},{\"end\":78599,\"start\":78582},{\"end\":78826,\"start\":78809},{\"end\":78843,\"start\":78826},{\"end\":79166,\"start\":79153},{\"end\":79180,\"start\":79166},{\"end\":79189,\"start\":79180},{\"end\":79390,\"start\":79377},{\"end\":79404,\"start\":79390},{\"end\":79415,\"start\":79404},{\"end\":79428,\"start\":79415},{\"end\":79445,\"start\":79428},{\"end\":79457,\"start\":79445},{\"end\":79759,\"start\":79749},{\"end\":79773,\"start\":79759},{\"end\":79784,\"start\":79773},{\"end\":79798,\"start\":79784},{\"end\":79818,\"start\":79798},{\"end\":79834,\"start\":79818},{\"end\":79848,\"start\":79834},{\"end\":79865,\"start\":79848},{\"end\":79879,\"start\":79865},{\"end\":79893,\"start\":79879},{\"end\":80437,\"start\":80415},{\"end\":80446,\"start\":80437},{\"end\":80464,\"start\":80446},{\"end\":80779,\"start\":80765},{\"end\":80791,\"start\":80779},{\"end\":80804,\"start\":80791},{\"end\":80822,\"start\":80804},{\"end\":81207,\"start\":81198},{\"end\":81216,\"start\":81207},{\"end\":81232,\"start\":81216},{\"end\":81447,\"start\":81428},{\"end\":81460,\"start\":81447},{\"end\":81473,\"start\":81460},{\"end\":81963,\"start\":81937},{\"end\":81977,\"start\":81963},{\"end\":81992,\"start\":81977},{\"end\":82010,\"start\":81992},{\"end\":82021,\"start\":82010},{\"end\":82032,\"start\":82021},{\"end\":82408,\"start\":82395},{\"end\":82418,\"start\":82408},{\"end\":82429,\"start\":82418},{\"end\":82443,\"start\":82429},{\"end\":82460,\"start\":82443},{\"end\":82849,\"start\":82834},{\"end\":82868,\"start\":82849},{\"end\":83117,\"start\":83106},{\"end\":83126,\"start\":83117},{\"end\":83399,\"start\":83388},{\"end\":83416,\"start\":83399},{\"end\":83423,\"start\":83416},{\"end\":83742,\"start\":83729},{\"end\":83886,\"start\":83871},{\"end\":83903,\"start\":83886},{\"end\":84423,\"start\":84417},{\"end\":86445,\"start\":86438}]", "bib_venue": "[{\"end\":65763,\"start\":65628},{\"end\":66226,\"start\":66188},{\"end\":66670,\"start\":66634},{\"end\":67118,\"start\":67082},{\"end\":67412,\"start\":67347},{\"end\":67792,\"start\":67736},{\"end\":68068,\"start\":68028},{\"end\":68372,\"start\":68334},{\"end\":68765,\"start\":68733},{\"end\":69137,\"start\":69100},{\"end\":69463,\"start\":69445},{\"end\":69923,\"start\":69855},{\"end\":70539,\"start\":70431},{\"end\":71150,\"start\":71038},{\"end\":71636,\"start\":71600},{\"end\":72043,\"start\":72021},{\"end\":72898,\"start\":72856},{\"end\":73705,\"start\":73593},{\"end\":74208,\"start\":74152},{\"end\":74618,\"start\":74596},{\"end\":74785,\"start\":74753},{\"end\":75225,\"start\":75189},{\"end\":75868,\"start\":75816},{\"end\":76340,\"start\":76330},{\"end\":76850,\"start\":76742},{\"end\":77486,\"start\":77426},{\"end\":77978,\"start\":77932},{\"end\":78367,\"start\":78311},{\"end\":78625,\"start\":78599},{\"end\":78899,\"start\":78843},{\"end\":79151,\"start\":79085},{\"end\":79466,\"start\":79457},{\"end\":79945,\"start\":79893},{\"end\":80286,\"start\":80272},{\"end\":80500,\"start\":80464},{\"end\":80672,\"start\":80668},{\"end\":80898,\"start\":80822},{\"end\":81236,\"start\":81232},{\"end\":81544,\"start\":81473},{\"end\":81798,\"start\":81763},{\"end\":82072,\"start\":82032},{\"end\":82513,\"start\":82460},{\"end\":82832,\"start\":82769},{\"end\":83167,\"start\":83126},{\"end\":83481,\"start\":83423},{\"end\":83959,\"start\":83903},{\"end\":84589,\"start\":84423},{\"end\":85921,\"start\":85881},{\"end\":86016,\"start\":85998},{\"end\":86508,\"start\":86445},{\"end\":65763,\"start\":65628},{\"end\":66226,\"start\":66188},{\"end\":66670,\"start\":66634},{\"end\":67118,\"start\":67082},{\"end\":67412,\"start\":67347},{\"end\":67792,\"start\":67736},{\"end\":68068,\"start\":68028},{\"end\":68372,\"start\":68334},{\"end\":68765,\"start\":68733},{\"end\":69137,\"start\":69100},{\"end\":69463,\"start\":69445},{\"end\":69923,\"start\":69855},{\"end\":70539,\"start\":70431},{\"end\":71150,\"start\":71038},{\"end\":71636,\"start\":71600},{\"end\":72043,\"start\":72021},{\"end\":72898,\"start\":72856},{\"end\":73705,\"start\":73593},{\"end\":74208,\"start\":74152},{\"end\":74618,\"start\":74596},{\"end\":74785,\"start\":74753},{\"end\":75225,\"start\":75189},{\"end\":75868,\"start\":75816},{\"end\":76340,\"start\":76330},{\"end\":76850,\"start\":76742},{\"end\":77486,\"start\":77426},{\"end\":77978,\"start\":77932},{\"end\":78367,\"start\":78311},{\"end\":78625,\"start\":78599},{\"end\":78899,\"start\":78843},{\"end\":79151,\"start\":79085},{\"end\":79466,\"start\":79457},{\"end\":79945,\"start\":79893},{\"end\":80286,\"start\":80272},{\"end\":80500,\"start\":80464},{\"end\":80672,\"start\":80668},{\"end\":80898,\"start\":80822},{\"end\":81236,\"start\":81232},{\"end\":81544,\"start\":81473},{\"end\":81798,\"start\":81763},{\"end\":82072,\"start\":82032},{\"end\":82513,\"start\":82460},{\"end\":82832,\"start\":82769},{\"end\":83167,\"start\":83126},{\"end\":83481,\"start\":83423},{\"end\":83959,\"start\":83903},{\"end\":84589,\"start\":84423},{\"end\":85921,\"start\":85881},{\"end\":86016,\"start\":85998},{\"end\":86508,\"start\":86445},{\"end\":70634,\"start\":70541},{\"end\":72976,\"start\":72965},{\"end\":76945,\"start\":76852},{\"end\":83526,\"start\":83483},{\"end\":70634,\"start\":70541},{\"end\":72976,\"start\":72965},{\"end\":76945,\"start\":76852},{\"end\":83526,\"start\":83483}]"}}}, "year": 2023, "month": 12, "day": 17}