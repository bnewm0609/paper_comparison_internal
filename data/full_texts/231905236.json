{"id": 231905236, "updated": "2022-01-15 05:31:29.654", "metadata": {"title": "CIRCLE FORMATION BY ASYNCHRONOUS OPAQUE ROBOTS ON INFINITE GRID", "authors": "[{\"middle\":[],\"last\":\"Adhikary\",\"first\":\"Ranendu\"},{\"middle\":[\"Kumar\"],\"last\":\"Kundu\",\"first\":\"Manash\"},{\"middle\":[],\"last\":\"Sau\",\"first\":\"Buddhadeb\"}]", "venue": "Computer Science", "journal": "Computer Science", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "This paper presents a distributed algorithm for the Circle Formation problem under the infinite grid environment by asynchronous mobile opaque robots. Initially, all of the robots acquire distinct positions, and they must form a circle over the grid. The movements of the robots are only restricted along the grid lines; they do not share any global coordinate system. The robots are controlled by an asynchronous adversarial scheduler that operates in LookCompute-Move cycles. The robots are indistinguishable by their nature, and they do not have any memory of their past configurations nor previous actions. We consider the problem under a luminous model, where robots communicate via lights; other than that, they do not have any external communication systems. Our protocol solves the Circle Formation problem using seven colors. A subroutine of our algorithm also solves the Line Formation problem using three colors.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/aghcs/AdhikaryKS21", "doi": "10.7494/csci.2021.22.1.3840"}}, "content": {"source": {"pdf_hash": "d02aecfc6b45ea6f10cb10b861447333400a52f4", "pdf_src": "Anansi", "pdf_uri": "[\"https://journals.agh.edu.pl/csci/article/download/3840/2551\"]", "oa_url_match": true, "oa_info": {"license": "publisher-specific license", "open_access_url": "https://journals.agh.edu.pl/csci/article/download/3840/2551", "status": "GOLD"}}, "grobid": {"id": "2904388e6000a6dd316ed7b0997262bdf4b134a2", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/d02aecfc6b45ea6f10cb10b861447333400a52f4.txt", "contents": "\nCIRCLE FORMATION BY ASYNCHRONOUS OPAQUE ROBOTS ON INFINITE GRID\n\n\nRanendu Adhikary \nManash Kumar \nKundu Buddhadeb \nSau \nCIRCLE FORMATION BY ASYNCHRONOUS OPAQUE ROBOTS ON INFINITE GRID\n10.7494/csci.2021.22.1.3840E a r l y b i r d Computer Science \u2022 22(1) 2021 81Distributed computingAutonomous robotsCircle formationLine formationRobots with lightsAsynchronousLook-Compute-Move cycleGrid Citation Computer Science 22(1) 2021: 81-100\nThis paper presents a distributed algorithm for the Circle Formation problem under the infinite grid environment by asynchronous mobile opaque robots. Initially, all of the robots acquire distinct positions, and they must form a circle over the grid. The movements of the robots are only restricted along the grid lines; they do not share any global coordinate system. The robots are controlled by an asynchronous adversarial scheduler that operates in Look-Compute-Move cycles. The robots are indistinguishable by their nature, and they do not have any memory of their past configurations nor previous actions. We consider the problem under a luminous model, where robots communicate via lights; other than that, they do not have any external communication systems. Our protocol solves the Circle Formation problem using seven colors. A subroutine of our algorithm also solves the Line Formation problem using three colors.\n\nIntroduction\n\nExecuting a task by a team of people is always better than merely by a single person. This is certainly true for any team, whether it consists of people or robots. Completing a task by a single robot is cumbersome and sometimes not even possible. A team of autonomous mobile robots can distributively and collaboratively execute complex tasks. These simple low-cost robots are emerging as an alternative for single powerful and expensive robots. One of the research and development activities performed on these robots is distributed motion coordination. By controlling these robots' movements, we can form specific patterns and move in formation toward cooperating for the achievement of certain tasks. Motion-planning algorithms for robotic systems that are made up of robots that change their positions to form a given pattern are very important and may become challenging in the case of severe limitations, such as in the communication between robots, hardware constraints, natural calamities, etc. The significance of positioning the robots based on some given patterns may be useful for various tasks, such as bridge building, forming adjustable buttresses to support collapsing buildings, rescue operations on disaster sites, satellite recoveries in inhospitable areas, or tumor excision [24]. Also, distributed motion-planning algorithms for robotic systems are potentially useful in environments that are inhospitable to humans or are hard to control and observe (e.g., outer space, under water, forests, and battlefields).\n\n\nBackground and Problem definition\n\nIn the Circle Formation problem [8,9,15,[18][19][20][28][29][30], the robots must form a circle over a region. The robots are not given any knowledge about the circle through any coordinates. To form a circle, we need two things: 1) a center, and 2) a radius. Nevertheless, neither of these are indicated to the robots beforehand. Initially, the robots are at distinct locations; they each have a different coordinate system. These robots are assumed to be autonomous (i.e., there is no central authority to control them), homogeneous (i.e., they carry out the same protocol), anonymous (i.e., they have no unique identifiers), or identical (i.e., they are indistinguishable by their appearance) [16,17]. In the continuous setting, the robots are assumed to be able to execute accurate movements in arbitrary directions and by arbitrarily small amounts. Hence, the robots can maneuver to avoid collisions (even in densely crowded situations). Certain models also permit the robots to move along curved trajectories; in particular, along the circumference of a circle [18]. For robots with weak mechanical capabilities, it may not be possible to precisely execute such intricate movements. This motivates us to consider the problem in a grid-based terrain where the robots' movements are restricted to following grid lines and only by a particular unit distance with each step. Grid-type floor layouts can be easily implemented in real-life robot navigation systems by using magnets or optical guidance [2]. Clearly, the shape of a circle will not be the same as in the continuous domain in a grid-based domain. If the circle moves over a grid point, we will place a robot there; otherwise, we place it at the nearest grid point. As we mentioned before, these robots act without a central control; they work by a sequence of Look-Compute-Move cycles. In the Look phase, a robot registers all of the other robots' positions in its local coordinate system. After this, each robot computes the next position according to a deterministic algorithm (i.e., the Compute phase). In the Move phase, it will either move to the desired location along a straight line or make a null move. At each cycle, a robot can move to one of its four adjacent grid points. Now, depending on the activation schedule and timing assumptions of the Look-Compute-Move cycles, there are three models that have mainly been studied in the literature: an asynchronous model (Async), a fully synchronous model (Fsync), and a semi-synchronous model (Ssync). In the Fsync model, there is a global clock on which every robot agrees. The robots operate during a synchronous atomic round; all of the robots that are active in a round terminate their cycles by the subsequent round. The Ssync model is the same as the Fsync model; however, a subset of the robots activates during each round here. In the Async model, there is no notion of a global clock; each robot has its own clock and operates accordingly.\n\nThe robots operate under the luminous model or 'robots with lights' model introduced by Peleg [25]. In this model, the robots communicate with each other through lights and can assume a set number of predefined colors. These lights serve as both a form of persistent memory and as a form of communication. Other than this, the robots have oblivious memory; i.e., they do not remember any past computations nor have any other communication systems. The robots have obstructed visibility; i.e., a robot's view can be obstructed by other robots. If three robots are collinear, then the outside robots can only see a single robot (whereas the middle one can see two robots).\n\n\nEarlier Works\n\nWhile fundamental problems in autonomous mobile robots like Gathering [4,7,11,14,26], Arbitrary Pattern Formation [5,6,21], and Mutual Visibility [1,27] have been studied in grid environments, the Circle Formation problem has only been studied on a continuous Euclidean plane. In the Circle Formation problem, robots must place themselves over a circumference of a circle. If the robots are placed in such a way on the circumference of the circle where they are equidistant from each other, then the problem is defined as Uniform Circle Formation. The Circle Formation problem was first discussed by Sugihara and Suzuki [28]; they proposed a simple heuristic distributed algorithm. However, their algorithm formed an approximation of a circle (mainly, a Reuleaux triangle, which is a hybrid shape between a triangle and a circle). Tanaka [30] later improved this algorithm by generating a better approximation of a circle. Later on, Suzuki and Yamasihita [29] achieved a uniform circle formation for non-oblivious robots (those that remember all of their past actions). D\u00e9fago and Konogaya [8] provided an Ssync algorithm by which a group of oblivious robots eventually converge toward a uniform circle. In [9], D\u00e9fago and Souissi presented an Ssync non-uniform self-organized circle formation algorithm. However, they assumed that the robots agree on the chirality of the system and do not have obstructed visibilities. Until now, the results have assumed the scheduler to be Ssync. In the Async model, several results have assumed implicit agreements among the robots. Flocchini et al. [15] provided a simple algorithm for Uniform Circle Formation where the robots have the same orientation or chirality. Later on, the results were improved by a general result from Fujinaga et al. [20]. They assumed that the local coordinate system of all of the robots is right-handed. Imposing no assumptions on the local coordinates of the robots, the Uniform Circle Formation algorithm was devised in [18]. However, they assumed that the robots could move along circular arcs as well as straight-line segments. Finally, without any extra assumptions, a solution was provided for n = 4 robots in [19], and a solution for the special case of n = 4 appeared in [22]. Using one bit of internal memory in [3], the authors studied the Constrained Circle Formation problem. The Constrained Circle Formation problem demands that, in addition, the maximum distance that a robot moves to solve a problem should be minimized. In [12], the authors solved the problem for fat robots (those with a finite extent) under limited visibility but considering an agreement over a global coordinate system. An Ssync algorithm for transparent robots that perform rigid movements and agree on one axis was provided in [23]. In [10], the authors also considered the problem of circle formation, but their model of computation is different than ours. They considered a circle formation around an unknown target with limited sensing and communication capabilities using holonomic robots (a holonomic system is when the number of controllable degrees of freedom is equal to the total degrees of freedom). They assumed that there is a global coordinate system on which all of the robots agree. Also, they assumed that an inactive robot can sense its vicinity. The closest solution to our problem was studied in [13]; however, they considered the problem under an Fsync scheduler.\n\n\nOur contribution\n\nThe Circle Formation problem has been quite extensively studied in the continuous domain. In a continuous domain, a robot can move in any direction (sometimes in a curve) with arbitrary precision. The problem has never been studied in a discrete setting. We have devised a deterministic distributed algorithm that can solve the Circle Formation problem over a grid-based environment. The infinite grid is the most realistic model for a practical purpose. Here, the robots can only move in four directions with unit lengths. Also, the infinite grid is a natural discretization of a Euclidean plane. This simple model of movement along grid lines from one grid point to another can be easier to implement for robots with weak mechanical capabilities, as they may not be able to execute accurate movements in arbitrary directions or by arbitrarily small amounts. Although the simple model of movement may be easier to physically execute, the restrictions imposed on the movements of the robots pose the main difficulty of the algorithmic problem. We have assumed that all of the robots agree on the positive y-axis. Other than this, the robots do not have any other agreement among their local coordinate systems. The robots are controlled by an asynchronous adversarial scheduler. Although robots have unlimited visibility, they are opaque (i.e., they can block each others' views). They are not given any coordinates nor any knowledge about the total number of robots. Robots are equipped with lights by which they can communicate with other robots. These lights can also be used as memory (by which, a robot can only recall its previous state). Other than this, robots have oblivious memory. We have solved two problems in this grid-based environment: Line Formation and Circle Formation. From any arbitrary initial configuration, our algorithm solves Line Formation using three colors and Circle Formation using seven colors.\n\n\nModel and Definitions\n\nTwo robots are always on a circle, as we can take the line between them as a diameter. Now, three robots may or may not be on the circle. Suppose that all of them are collinear. If the middle robot makes a movement in this situation, then there is a circle that passes through all of them. So, we consider the number of robots to be at least 3. Now, we present the model and some basic definitions that will help us understand the protocols.\n\nRobots: We consider a set of n \u2265 3 homogeneous, autonomous, anonymous, and identical robots R = {r 1 , r 2 , . . . , r n } deployed on a two-dimensional infinite grid where each is initially positioned on distinct grid points. The robots are assumed to be dimensionless and modeled as points on the plane. The robots have an agreement over the positive direction of the y-axis; i.e., all of the robots have an agreement over up and down. They do not have a common origin nor any agreement over the x-axis. Actually, the robots do not have access to any global coordinate system other than the agreement over the positive direction of the y-axis. Total number of robots n is not known to them.\n\nLook-Compute-Move cycles: An active robot r operates according to the so-called Look-Compute-Move cycle (LCM for short). In the Look phase, a robot registers the positions of all of the other robots in its own local coordinate system. After this, the robot computes the next position and a color according to a deterministic algorithm; i.e., the Compute phase. In the Move phase, it will either move a unit length to the desired location along a straight line or make a null move.\n\nScheduler: We assume that the robots are controlled by an asynchronous adversarial scheduler. This implies that the amount of time spent in the Look, Compute, Move, and inactive states by different robots is finite but unbounded and unpredictable. As a result, the robots do not have a common notion of time, and the configuration that is perceived by a robot during the Look phase may significantly change before it actually makes a move.\n\nMovement: As the robots are deployed on an infinite grid, a robot can only move to its four adjacent grid points. The movements are not rigid ; i.e., in any Look-Compute-Move cycle, a robot can only move from one grid point to another. In discrete domains, a robot's movements are assumed to be atomic. This implies that the robots are always seen on grid points, not on edges.\n\nVisibility: The visibility range Geometric definitions: Given a configuration of robots at time t, the smallest enclosing rectangle is defined as the smallest axis-aligned rectangle that contains all of the robots. We denote the smallest enclosing rectangle by ABCD, where AB is the lowest boundary and CD the top boundary. We define the length of a line segment to be the number of grid points between the terminal robots (including the grid points where the terminal robots reside). Similarly, we define the length of a line. In our case, the length of a line segment and the length of a line that contains that line segment is the same. H denotes the height of the configuration, and L 1 and L H are the horizontal lines that contain AB and CD, respectively. Note that we can think of configuration ABCD as a union of horizontal line segments. We define L 1 , L 2 , . . . , and L H to be the horizontal lines that contain the robots of the configuration in increasing order ( Figure 1). So, L 1 and L H are the horizontal lines that contain the robots of AB and CD, respectively. We define L least ( = L 1 ) as the horizontal line such that there are no horizontal lines that contain robots between L 1 and L least . Also, we define L(r) to be the horizontal line that contains r. A robot r on a grid line segment L will be called non-terminal on L if it lies between two robots on L; otherwise, it will be called terminal on L. In an infinite grid, the distance between two points is defined by the 1 norm. The distance in the 1 norm is sometimes called the Manhattan distance.\n\n\nAlgorithm\n\nA circle is defined with a center and a radius. The easiest way to get this information is to take a line segment as a diameter and define the middle point of the line segment as the center. So, we first need to arrange the robots in such a way as to form a line. This phase is called Line Formation. After the completion of this phase, the main challenge will be to place the robots on the circumference of the circle. This phase is defined as Circle Formation. Our algorithm works in these two phases. In Line Formation, the robots from any arbitrary initial configuration will create a line segment, and in the last phase (Circle Formation), the robots will set up a circle from the line segment. The difficulty arises from the restriction on the movements and the opaqueness of the robots. Note that, in the grid type environment, a robot can only move one step at a time (according to each robot's own clock) to its four adjacent grid points. Apparently, if there are no adjacent grid points, a robot cannot move. Additionally, a robot's perceived view can be significantly different from the actual global picture due to its obstructed visibility.\n\n\nLine Formation\n\nIn this phase, we will put down all of the robots from the initial configuration to a line segment. We have assumed that the robots have an agreement over the positive y-axis; i.e., they have an accord over up and down. The main idea behind this phase is that the robots from the upper portion of the configuration will sequentially move to the lowest portion of the configuration. Finally, the configuration will transform into a line segment. A pseudo-code description of the procedure is presented in Algorithm 1. The lights used in this phase are {Of f , Line, M oving1}. Now, we characterize the initial configurations depending on the presence of the robots on the boundary of the smallest enclosing rectangle. Note that L 1 always has at least one robot on it (Figure 2). The robots on line L 1 can identify that they are at the lowest level of height. The crucial part of this phase is to define the movements of the robots. Note that L 1 contains the lower boundary line segment of the smallest enclosing rectangle. Any robot on L 1 can identify that it is on the lower portion of the smallest enclosing rectangle. Identifying this, the robots on L 1 will alter their lights to Line. If a robot cannot see a robot with color Line, it cannot gauge its height relative to L 1 . These robots will remain inactive. Upon waking up, if a robot perceives a robot with color   Line, then it will measure its height relative to L 1 . Clearly, L 2 is the adjacent of L 1 . For a terminal robot r on L 2 , we define V r to be the visible portion of the lower boundary of the smallest enclosing rectangle that r can see and S r to be the portion of L 1 where r will move. If L 2 contains a single robot, then V r with two extra grid points (one on each side of V r ) will be the region S r where r will move (Figures 3a,  3b). Now, suppose that L 2 contains more than one robot. Then, for a terminal robot r, we define L(r) \u22a5 to be the perpendicular line of L 2 at r. Let r L1 be the intersection point L(r) \u22a5 \u2229 V r on L 1 . Suppose that r and r are the terminal robots on L 2 ; then, S r is the region that starts at r L1 and ends at the opposite direction of r , with one extra grid point at the end of V r (Figure 3c). Now, if L 2 contains no robots, then the terminal robots of L least will move to L 2 . Now, if a robot r on L 2 finds an empty point on L 1 , then the movements of r can cause collisions. So, we will now state some conditions under which a robot will move. The conditions are described as function FindEmptyPoint(), which is defined below.\n\n\nFindEmptyPoint():\n\nFirst of all, the robots of L 1 will not execute this function. The function takes a terminal robot r of a horizontal line that can perceive a robot with color Line as an input and returns \"True\" if the following conditions are satisfied.\n\n\nCondition 1.\n\nIf r is on L 2 , then:\n\n1. First of all, it checks line L 1 such that all of the robots on it have color Line. 2. Now, it scans S r as shown in Figure 3 to find an empty grid point. If r finds more than one grid point, then the empty point that has the least distance from r will be chosen as the destination. Here, the distance is being measured under the 1 norm (i.e., Manhattan distance). 3. Even if it finds an empty grid point on L 1 , a move toward it can lead to a collision.\n\nTo avoid this, it must make sure that there are no robots with light M oving1 within Manhattan distance 2 in the direction in which it intends to move ( Figure  4). E a r l y b i r d Condition 2. If r is not on L 2 , then:\n1. L(r) = L least . r1 L1 L2 L3 r2\n(a) r 1 and r 2 find that L 2 is empty. So, they will change their color and move to L 2 . Suppose that r 1 moves first and r 2 has a pending move due to asynchrony.  Brief Discussion: First of all, the robots on L 1 will not move in this phase. Initially, all of the robots have lights that are set to Of f . Note that, if a robot r in the configuration can perceive a robot with color Line after waking up, then it can distinguish the height of L(r) from L 1 . Otherwise, these robots will remain inactive. The robots on L 1 will alter their lights to Line. Now, the terminal robots on L(r) summon function FindEmptyPoint(); if the result is \"True,\" then those robots are qualified for movement. Note that function FindEmptyPoint() treats the robots on L 2 and the robots on L least differently. If L 2 contains no robots, a terminal robot r on L least will move toward L 2 . However, it will not move immediately. First, it will alter its light to M oving1; then, it will redo the same computations in the next LCM cycle. If the function returns \"False,\" the robot will set its light to Of f . If a terminal robot r is on L 2 , r will first check whether there is a robot with color M oving1 in the direction that it wants to move. However, it will not move immediately. First, it will alter its light to M oving1; then, it will redo the same computations in the next LCM cycle. If the function returns \"False,\" the robot will set its light to Of f . Now, the crucial thing of this phase is to make the movements collision-less. To tackle this situation, we used two steps: (1) only those robots on line L 2 are allowed to move toward L 1 , and (2) a terminal robot on L(r) will move only if L 2 is empty and L(r) = L least . Note that we always have two empty points on L 1 . As we can have two terminal robots on a line at most, we will never have a problem with finding empty points. Now, if L 2 is empty, then the terminal robots on L least will move toward L 2 . Now, if L 2 is non-empty, then the terminal robots on L 2 find the desired empty point and move to L 1 . However, we can still have a collision due to asynchrony. In Figure  4, we have depicted this scenario. Robots r 1 and r 2 are terminal robots on L 3 . As L 2 is empty, FindEmptyPoint() is true for both r 1 and r 2 . Suppose that r 1 moves first and r 2 has a pending move due to asynchrony. Now, r 1 is a terminal robot on L 2 , and FindEmptyPoint() is true for r 1 . Let the desired empty point be a, as a is closest to the position of r 1 . Now, the asynchronous scheduler can make the movements of r 1 and r 2 simultaneously. So, r 1 and r 2 will collide with each other. However, this will never happen, as robot r 2 has color M oving1, it is within Manhattan distance 2 from r 1 , and it is in the direction in which r 1 intends to move. So, r 1 will not move.\n\nNote that L 1 has at least two empty points on it. So, a terminal robot r on L 2 will always find empty points on L 1 . Therefore, our main concern is about collision. We must make sure that there will be no collisions during the movements. Lemma 1. There exists a time t such that a robot r on L(r) will reach line L 1 .\n\nProof. Depending on the horizontal position of a robot r, we can characterize the behavior of the robot. We can primarily have three cases: Case 1. L(r) = L 1 (i.e., r is on lowest horizontal line); Case 2. L(r) = L 2 (i.e., r is on line adjacent to L 1 ); Case 3. L(r) = L least (i.e., r is on least top line that has robot on it). We will give correctness for each of the cases below. Case 1. Nothing to prove, as r is already at the desired location. Case 2. Only the terminal robots of L 2 will move. Suppose that r is the only robot on L 2 . Now, if FindEmptyPoint() returns \"True,\" then r will move to the desired point in S r . For robot r, FindEmptyPoint() can return \"False\" for two reasons. One where there is a robot -say, r -on L 3 within Manhattan distance 2 with color M oving1, and the other when one of the robots on L 1 has not altered its color to Line. For the second case, there will clearly be a time t when FindEmptyPoint() will return \"True\" for r. For the first case, if r is in the direction that r wants to move, then FindEmptyPoint() will return \"False\" for r and r will alter its light to Of f . Now, we can have two issues regarding this situation. If r has no pending move, then it will alter its light to Of f in the next LCM cycle. Note that r will remain inactive, as L 2 is non-empty. Eventually, there will be a time when r will become active and FindEmptyPoint() will return \"True\" for r. Now, if r has a pending move, then it will move to L 2 . Note that FindEmptyPoint() can now return \"False\" for one reason for the robot r ; this is when one of the robots on L 1 has not altered its color to Line. So, r will eventually move to L 2 . Clearly, there will be a time t when robot r will move to L 1 . Now, consider the case when there is more than one robot on L 2 . Note that, in this case, there cannot be a robot with light M oving1 on L 3 . Now, if r is a terminal robot on L 2 , then it will recall function FindEmptyPoint(). If FindEmptyPoint() returns \"True,\" then r will move to S r . Note that FindEmptyPoint() returns \"False\" for only these two reasons.\n\nCase 3. If r is a lone robot on L least , then it will eventually reach L 2 . Suppose that there is more than one robot on L least . Let the terminal robots be r and r . If only one of them moves toward L 2 , then the other robot will stay put. Suppose that both of them execute the Look-Compute-Move cycle synchronously. Then, both r and r will alter their colors to M oving1 if FindEmptyPoint() returns \"True.\" If they execute all of the future Look-Compute-Move cycles synchronously, then both will eventually move to L 2 . Suppose that, due to asynchrony, one of the robots makes a move first and the other has a pending move toward L 2 (a similar scenario is depicted in Figure 4). In this figure, robots r 1 and r 2 are terminal robots on L least (= L 3 ). FindEmptyPoint() returns \"True\" for both of them. So, they alter their colors to M oving1. In the next LCM cycle, they will again call function FindEmptyPoint(). Now, we can have two possible future events due to asynchrony: one in which FindEmptyPoint() returns \"True\" for r 1 and r 2 has not recalled the function yet, and another in which FindEmptyPoint() returns \"True\" for both r 1 and r 2 simultaneously. In the former case, r 2 will alter its light to Of f , as L 2 is now non-empty (r 1 is now on L 2 ). In the latter case, both will move to L 2 . So, in the first case, r 2 will remain inactive until r 1 moves to L 1 .\n\nIt is easy to see that a robot can always check whether a line formation has completed or not. Lemma 2. A robot r can always detect whether a line formation has completed or not. Theorem 1. Algorithm 1 Line Formation will transform any initial configuration into a line.\n\nProof. From Lemma 1 and 2, we can conclude that there will be a time t when we have all of the robots on a line.\n\n\nCircle Formation\n\nWhen Algorithm 1 terminates for all of the robots in the configuration, we have a configuration where all of the robots are on line L 1 and have color Line. For our circle to form, we have a line whose middle point that we will consider to be the center and whose length will be treated as the diameter. Remember that we have defined the length |L| of a line L to be the number of grid points between the terminal robots (including the grid points where the terminal robots reside). In Figure 5a, the length of the line is 11. Furthermore, the distance between two robots defined to be the number of grid points between them, including the grid points on which they reside. So, the distance between a robot and itself is one. A pseudo-code description of the procedure is presented in Algorithm 2. The lights used in this phase are {Corner, M oving2, M oving3, Done}.\n\nThe robots that are at the corners of L 1 can identify themselves. After the identification, the corner robots will alter their lights to Corner. Note that the corner robots will not move in this phase. Now, we will define a coordinate system on this line ( Figure 5). All of the robots have a given coordinate (l, d), where l denotes length |L 1 | and d denotes the distance from the nearest corner. We define r d to be robot r at distance d from the nearest corner. Clearly, a robot r on L 1 does not have any information about l or d. To obtain this information, a robot has to move upward or downward to see the line. Now, if robot r sees a corner robot on L 1 , then it will move upward (i.e., on L 2 ). Eventually, all of the other robots will move upward. Note that robot r can now see the corner robots of L 1 and have full knowledge about l and d. Now, circle C will have diameter l, and the center is at the middle point of l. Note that the center may not have coordinates with integer. We denote L(r) \u22a5 to be the line that is perpendicular to L 1 at r. c d denotes the intersection between circle C and line L(r d ) \u22a5 . Now, c d may not be a grid point. We define c d = c d . Note that c d is a grid point. We define middle to be the y-coordinates of the middle points of L 1 .\n\nNote that we can express these by one coordinate whether or not |L 1 | has one or two middle points. If l is odd, then the middle robot -say, r (l+1)/2 (middle = (l + 1)/2) -is at the center of circle C. If l is even, then we have two middle robots -say, r l/2 and r l/2+1 (middle = l/2) -and the center of circle C is at the middle of r l/2 and r l/2+1 . In Figure 5b, l = 11 is odd and (l + 1)/2 = 6. So, middle robot r 6 is at (11,6). Without a loss of generality, let us suppose that l is odd. All of the r robots on L 2 will move to the horizontal line -say, L c (l+1)/2 passing through point c (l+1)/2 . However, they will move sequentially. After reaching line L c (l+1)/2 , robot r (l+1)/2 is now on the circle. Now, the robots at (l, (l + 1)/2 \u2212 i) will move toward point c (l+1)/2\u2212i if the robots at (l, (l + 1)/2 \u2212 i + 1) have completed their movements where 1 \u2264 i \u2264 (l + 1)/2 \u2212 2 ( Figure 6). Hence, all of the robots will eventually be on circle C.\n\n\nL1 (a) Corner robots alter their colors to\n\nCorner.  (b) Scenario where r 4 has completed its movement. As there are no robots in between r 1 and r 4 , r 1 will start its movement. Brief Discussion: The terminal robots of L 1 will alter their lights to Corner. If it sees a robot with color Corner, a robot r on L 1 will move to line L 2 with color M oving2 (Figure 6a). Upon reaching its destination, r can identify its position on line L 1 . When all of the robots have reached L 2 , the robots will move to horizontal line L c (l+1)/2 . A robot at line L j will move to line L j+1 if there are no robots between L 1 and L j . Eventually, the robots will arrive at horizontal line L c (l+1)/2 (Figure 6b). If there is a robot r (l+1)/2 in the configuration, then it has clearly arrived at the desired location on the circle and it will alter its light to Done. The robots at (l, (l + 1)/2 \u2212 i) will move to point c (l+1)/2\u2212i if the robots at (l, (l + 1)/2 \u2212 i + 1) have color Done. Now, position (l, (l + 1)/2 \u2212 i + 1) may not contain a robot; however, that will not be a problem. Then, the robot will check for the nearest position (l, \u03c1) (Figure 6b) that contains a robot and can evaluate the task, where \u03c1 is the least distance from the middle point of L 1 such that it contains a robot. Eventually, all of the robots will place themselves on circle C. Theorem 2. Algorithm 2 Circle Formation will create a circle C from line L 1 .\n\n\nL1\n\nProof. The algorithm works in two folds: (1) first, it will move all of the non-corner robots of L 1 to the horizontal line L c middle passing through point c middle ; and (2) it will place the robots of L c middle on circle C one by one. Note that only the second phase starts when all of the robots are on horizontal line L c middle . So, we can treat each case separately. Case 1. Suppose that all of the robots are on line L 1 . Now, a robot r cannot gauge the position of itself nor the length of the line. If it is a corner robot, it will change its color to Corner. Suppose that r is a non-corner robot -if it sees a robot with color Corner, then it will move to line L 2 with color M oving2. Now, it can gauge the length of L 1 and the position of it on L 1 . Now, robot r will only move if there are no non-corner robots on L 1 . It will move toward horizontal line L c middle . Note that the movements occur sequentially. The robots move from one horizontal line L j to horizontal line L j+1 when there are no robots between L 1 and L j . Eventually, all of the robots will reach line L c middle . Certainly, there will be no collisions. Now, we must show that a robot r can always evaluate line L c middle . Note that the robots are moving upward. So, if r has completed its move and there are robots that have not completed their moves, then r may not see the corner. However, this is not the case in our algorithm, as r will only move if there are no robots in between L(r) and L 1 .\n\nCase 2. Suppose that all of the robots are on line L c middle . Now, if r is a middle robot, then it will alter its light to Done. Suppose that r is not a middle robot and is of coordinates (l, d). Now, if it sees a robot with color Done at position (l, \u03c1), then it will alter its light to M oving3 and will move toward point c r d . It may happen that there are no robots with color Done nor M oving3. This means that r is at position (l, \u03c1). Then, it will alter its light to M oving3 and will move toward c r d , where d = \u03c1. Hence, all of the robots will eventually have color Done. Clearly, there are no collisions. Now, we must show that a robot r of coordinates (l, d) can always evaluate point c r d . For this, r needs the length of line L 1 . Now, position c r middle\u2212i is closer than position c r middle\u2212i+1 to line L 1 . So, when robot r middle\u2212i+1 has completed its move, robot r middle\u2212i will move to point c r middle\u2212i+1 . Now, robot r middle\u2212i can see the corner robots and will eventually move to point c r middle\u2212i , where 1 \u2264 i \u2264 middle \u2212 2. Move to c r d Circle Formation: Note that Algorithm 2 creates a semi-circle configuration from any initial configuration. By merely modifying this algorithm, we can easily solve the circle formation problem. First, a non-corner robot on L 1 will check whether it can see at least one robot with color Corner. Now, if it can see exactly one robot with color Corner and there are no robots in the configuration with color M oving2, then it will move upward (in Figure 7a, r 1 and r 2 move upward). Now, if it can see exactly one robot with color Corner and there are robots in the configuration with color M oving2 (Figure 7b), then it will move downward if the closest M oving2 robot is in the up direction and vice versa (in Figure 7a, r 3 and r 4 move downward). Now, if there are two of the closest M oving2-colored robots or a non-corner robot can see both robots with color Corner, then it will move in either the up or down direction arbitrarily. Note that L 1 cuts the configuration into two halves -an upper half, and a lower half. The robots in both halves will execute Algorithm 2, and we will eventually have a circle (Figure 7d).  \n\n\nL1\n\n(c) Robots in both halves will execute Algorithm 2.\n\n\nL1\n\n(d) Completion of circle formation. \n\n\nConclusion\n\nOur algorithm solves the problem of line formation and circle formation deterministically from any initial configuration. This paper investigates the Circle Formation problem for a set of oblivious asynchronous opaque robots on an infinite grid. Although the robots have unlimited visibility, the view of a robot can be blocked by another robot. The main difficulty of working in a grid environment is the movements of the robots. A robot can only move to one of its four adjacent grid points. Now, if these adjacent points are non-empty, then the robot cannot move, as moving to these points would create a collision. On the contrary, this situation will never appear in the continuous domain. Also, a robot moves one unit of length at each step in a straight line in a grid environment, whereas a robot can move in any direction by any amount with infinite precision in a continuous environment. These restrictions on movements increase the difficulty of the problem. In this discrete setting, we have shown that, from any given initial configuration, our algorithm solves the Circle Formation problem deterministically using seven colors. Also, a subroutine of our algorithm deterministically solves the Line Formation problem using three colors.\n\nSeveral directions for future research may be explored. For instance, a more realistic model would be to consider fat robots (i.e., those with a finite extent). In a continuous environment, this problem has been studied. Another realistic model would be to work under limited visibility. The immediate next step would be to optimize the number of movements of the robots and try to use fewer colors. Another line of research could be to consider no agreements over the coordinate system.\n\nFigure 1 .\n1Illustrations for geometric definitions given in Section 2. of the robots is unlimited but can be obstructed by the presence of other robots. Robot r i can see another robot r j if and only if there are no robots on straight line segment r i r j . Lights: Each robot is equipped with an externally visible light, which can assume a O(1) number of predefined colors. The robots explicitly communicate with each other using these lights. The lights are not erased at the end of a cycle; otherwise, the robots are oblivious. The colors used in our algorithm are {Of f , Line, M oving1, Corner, M oving2, M oving3, Done}.\n\nFigure 2 .\n2Initial configuration always has at least one robot on L1\n\n\nShaded region Sr is place where r will place itself. Robot r's view is blocked by r 1 , and its Sr is different than global.\n\n\nSr and S r are corresponding regions in respect to robots r and r .\n\nFigure 3 .\n3Illustrations of desired empty points on L1.\n\n\n) r 1 finds an empty point a. But, r 2 is within Manhattan distance 2 in which direction r 1 wants to move. So, r 1 will not move.\n\nFigure 4 .\n4Illustration for function FindEmptyPoint().\n\n\nif r is on L least and L 2 is empty then 12 if r is a terminal robot then 13 if FindEmptyPoint() = True then 14 r.color \u2190 M oving1 15 else if r.color = M oving1 then 16 if r is on L 1 then 17 r.color \u2190 Line 18 else if r is on L 2 then 19 if r is a terminal robot then 20 if FindEmptyPoint() = True then 21 r.color \u2190 M oving1 22 Move toward the empty point on L 1 23 else 24 r.color \u2190 Of f 25 else if r is on L least and L 2 is empty then 26 if r is a terminal robot then 27 if FindEmptyPoint() if r is on L i+1 and L i is non-empty with i \u2265 2 then 33 r.color \u2190 Of f\n\nFigure 5 .\n5Prescribed Red dots are points where non-corner robots will place them.\n\nFigure 6 .\n6Illustration of movements of robots.\n\n\nd is the desired position of robot r d of coordinate (l, d). 4 L c middle is the horizontal line passing through point c middle . 5 if r.color = Line then 6 if r is a corner robot then 7 r.color \u2190 Corner 8 else if r is a non-corner robot of L 1 and sees a robot with color Corner then 9 r.color \u2190 M oving2 10 Move upward along L(r) \u22a5 11 else if r.color = M oving2 then 12 if L(r) = L 1 then 13 if L(r) is adjacent to L 1 i.e., r is on L 2 then 14 if There are only corner robots on L 1 then 15 Move upward along L(r) \u22a5 toward the line L c middle 16 else 17 if There are no robots between L(r) and L 1 then 18 if r is on line L c middle then 19 if r is at (l, middle) then 20 r.color \u2190 Done 21 else if r sees a robot with color Done at (l, \u03c1) then 22 r.color \u2190 M oving3 23 Move to c r d 24 else if There are no robots with color Done or M oving3 in the vicinity of r then 25 r.color \u2190 M oving3 26 Move to c r d 27 else 28 Move toward line L c middle 29 else if r.color = M oving3 then 30 if r is at c r d then 31 r.color \u2190 Done 32 else 33\n\n\n) r 1 and r 2 see exactly one corner robot; as there are no robots with color M oving2, they move upward.\n\n\n) r 3 and r 4 move downward; as closest M oving2 colored robots are in up direction, they move downward.\n\nFigure 7 .\n7Illustration of movements of robots for circle formation.\nAcknowledgements. The first author is supported by CSIR, Govt. of India. We thank the anonymous reviewers for their valuable comments, which helped us improve the quality and presentation of this paper.\nR Adhikary, K Bose, M K Kundu, B Sau, Algorithms for Sensor Systems -14th International Symposium on Algorithms and Experiments for Wireless Sensor Networks. Helsinki, FinlandSpringer11410ALGOSENSORSAdhikary R., Bose K., Kundu M.K., Sau B.: Mutual Visibility by Asynchronous Robots on Infinite Grid. In: Algorithms for Sensor Systems -14th Interna- tional Symposium on Algorithms and Experiments for Wireless Sensor Networks, ALGOSENSORS 2018, Helsinki, Finland, August 23-24, 2018, Revised Selected Papers, Lecture Notes in Computer Science, vol. 11410, pp. 83-101. Springer, 2018.\n\nI-Fork: a flexible AGV system using topological and grid maps. H M Barber\u00e1, J P C Quinonero, M A Z Izquierdo, A G Skarmeta, Robotics and Automation, 2003. Proceedings. ICRA'03. IEEE International Conference on. IEEE2Barber\u00e1 H.M., Quinonero J.P.C., Izquierdo M.A.Z., Skarmeta A.G.: I-Fork: a flexible AGV system using topological and grid maps. In: Robotics and Automa- tion, 2003. Proceedings. ICRA'03. IEEE International Conference on, vol. 2, pp. 2147-2152. IEEE, 2003.\n\nOptimum circle formation by autonomous robots. S Bhagat, K Mukhopadhyaya, Advanced Computing and Systems for Security. SpringerBhagat S., Mukhopadhyaya K.: Optimum circle formation by autonomous robots. In: Advanced Computing and Systems for Security, pp. 153-165. Springer, 2018.\n\nK Bose, R Adhikary, S G Chaudhuri, B Sau, arXiv:1709.00877Crash tolerant gathering on grid by asynchronous oblivious robots. arXiv preprintBose K., Adhikary R., Chaudhuri S.G., Sau B.: Crash tolerant gathering on grid by asynchronous oblivious robots. arXiv preprint arXiv:1709.00877, 2017.\n\nArbitrary Pattern Formation on Infinite Grid by Asynchronous Oblivious Robots. K Bose, R Adhikary, M K Kundu, B Sau, WALCOM: Algorithms and Computation -13th International Conference, WALCOM 2019. Guwahati, IndiaSpringer11355ProceedingsBose K., Adhikary R., Kundu M.K., Sau B.: Arbitrary Pattern Formation on Infinite Grid by Asynchronous Oblivious Robots. In: WALCOM: Algorithms and Computation -13th International Conference, WALCOM 2019, Guwahati, India, February 27 -March 2, 2019, Proceedings, Lecture Notes in Computer Science, vol. 11355, pp. 354-366. Springer, 2019.\n\nArbitrary pattern formation on infinite grid by asynchronous oblivious robots. K Bose, R Adhikary, M K Kundu, B Sau, Theoretical Computer Science. 815Bose K., Adhikary R., Kundu M.K., Sau B.: Arbitrary pattern formation on infinite grid by asynchronous oblivious robots. Theoretical Computer Science, vol. 815, pp. 213-227, 2020.\n\nGathering of robots on anonymous grids and trees without multiplicity detection. G D&apos;angelo, Di Stefano, G Klasing, R Navarra, A , Theoretical Computer Science. 610D'Angelo G., Di Stefano G., Klasing R., Navarra A.: Gathering of robots on anonymous grids and trees without multiplicity detection. Theoretical Computer Science, vol. 610, pp. 158-168, 2016.\n\nCircle formation for oblivious anonymous mobile robots with no common sense of orientation. X D\u00e9fago, A Konagaya, Proceedings of the second ACM international workshop on Principles of mobile computing. the second ACM international workshop on Principles of mobile computingD\u00e9fago X., Konagaya A.: Circle formation for oblivious anonymous mobile robots with no common sense of orientation. In: Proceedings of the second ACM inter- national workshop on Principles of mobile computing, pp. 97-104. 2002.\n\nNon-uniform circle formation algorithm for oblivious mobile robots with convergence toward uniformity. X D\u00e9fago, S Souissi, Theoretical Computer Science. 3961-3D\u00e9fago X., Souissi S.: Non-uniform circle formation algorithm for oblivious mobile robots with convergence toward uniformity. Theoretical Computer Science, vol. 396(1-3), pp. 97-112, 2008.\n\nSelf-Organized Circle Formation around an Unknown Target by a Multi-Robot Swarm using a Local Communication Strategy. A M Deshpande, R Kumar, M Radmanesh, N Veerabhadrappa, M Kumar, A A Minai, 2018 Annual American Control Conference (ACC). IEEEDeshpande A.M., Kumar R., Radmanesh M., Veerabhadrappa N., Kumar M., Minai A.A.: Self-Organized Circle Formation around an Unknown Target by a Multi-Robot Swarm using a Local Communication Strategy. In: 2018 Annual American Control Conference (ACC), pp. 4409-4413. IEEE, 2018.\n\nDi Stefano, G Navarra, A , Gathering of oblivious robots on infinite grids with minimum traveled distance. Information and Computation. 254Di Stefano G., Navarra A.: Gathering of oblivious robots on infinite grids with minimum traveled distance. Information and Computation, vol. 254, pp. 377- 391, 2017.\n\nCircle Formation by Asynchronous Fat Robots with Limited Visibility. A Dutta, S G Chaudhuri, S Datta, K Mukhopadhyaya, Distributed Computing and Internet Technology -8th International Conference, ICDCIT 2012. R. Ramanujam, S. RamaswamyBhubaneswar, IndiaSpringer7154ProceedingsDutta A., Chaudhuri S.G., Datta S., Mukhopadhyaya K.: Circle Formation by Asynchronous Fat Robots with Limited Visibility. In: R. Ramanujam, S. Ra- maswamy, eds., Distributed Computing and Internet Technology -8th Interna- tional Conference, ICDCIT 2012, Bhubaneswar, India, February 2-4, 2012. Pro- ceedings, Lecture Notes in Computer Science, vol. 7154, pp. 83-93. Springer, 2012.\n\nUniform circle formation for swarms of opaque robots with lights. C Feletti, C Mereghetti, B Palano, International Symposium on Stabilizing, Safety, and Security of Distributed Systems. SpringerFeletti C., Mereghetti C., Palano B.: Uniform circle formation for swarms of opaque robots with lights. In: International Symposium on Stabilizing, Safety, and Security of Distributed Systems, pp. 317-332. Springer, 2018.\n\nGathering Anonymous, Oblivious Robots on a Grid. M Fischer, D Jung, F Meyer Auf Der Heide, Algorithms for Sensor Systems -13th International Symposium on Algorithms and Experiments for Wireless Sensor Networks. Vienna, AustriaRevised Selected PapersFischer M., Jung D., Meyer auf der Heide F.: Gathering Anonymous, Oblivious Robots on a Grid. In: Algorithms for Sensor Systems -13th International Sym- posium on Algorithms and Experiments for Wireless Sensor Networks, ALGO- SENSORS 2017, Vienna, Austria, September 7-8, 2017, Revised Selected Papers, pp. 168-181. 2017.\n\nSelf-deployment algorithms for mobile sensors on a ring. P Flocchini, G Prencipe, N Santoro, International Symposium on Algorithms and Experiments for Sensor Systems, Wireless Networks and Distributed Robotics. Flocchini P., Prencipe G., Santoro N.: Self-deployment algorithms for mobile sensors on a ring. In: International Symposium on Algorithms and Experiments for Sensor Systems, Wireless Networks and Distributed Robotics, pp. 59-70.\n\n. Springer, Springer, 2006.\n\nP Flocchini, G Prencipe, N Santoro, Distributed Computing by Oblivious Mobile Robots. Synthesis Lectures on Distributed Computing Theory. Morgan & Claypool PublishersFlocchini P., Prencipe G., Santoro N.: Distributed Computing by Oblivious Mo- bile Robots. Synthesis Lectures on Distributed Computing Theory. Morgan & Claypool Publishers, 2012.\n\nP Flocchini, G Prencipe, N Santoro, Distributed Computing by Mobile Entities. Current Research in Moving and Computing. 11340Flocchini P., Prencipe G., Santoro N.: Distributed Computing by Mobile Entities. Current Research in Moving and Computing, vol. 11340, 2019.\n\nDistributed computing by mobile robots: Solving the uniform circle formation problem. P Flocchini, G Prencipe, N Santoro, G Viglietta, International Conference on Principles of Distributed Systems. SpringerFlocchini P., Prencipe G., Santoro N., Viglietta G.: Distributed computing by mobile robots: Solving the uniform circle formation problem. In: International Conference on Principles of Distributed Systems, pp. 217-232. Springer, 2014.\n\nDistributed computing by mobile robots: uniform circle formation. P Flocchini, G Prencipe, N Santoro, G Viglietta, Distributed Computing. 306Flocchini P., Prencipe G., Santoro N., Viglietta G.: Distributed computing by mobile robots: uniform circle formation. Distributed Computing, vol. 30(6), pp. 413-457, 2017.\n\nAsynchronous pattern formation by anonymous oblivious mobile robots. N Fujinaga, Y Yamauchi, S Kijima, M Yamashita, International Symposium on Distributed Computing. SpringerFujinaga N., Yamauchi Y., Kijima S., Yamashita M.: Asynchronous pattern for- mation by anonymous oblivious mobile robots. In: International Symposium on Distributed Computing, pp. 312-325. Springer, 2012.\n\nFast collisionless pattern formation by anonymous, position-aware robots. T Lukovszki, F M Der Heide, International Conference on Principles of Distributed Systems. SpringerLukovszki T., auf der Heide F.M.: Fast collisionless pattern formation by anony- mous, position-aware robots. In: International Conference on Principles of Dis- tributed Systems, pp. 248-262. Springer, 2014.\n\nM Mamino, G Viglietta, arXiv:1605.06093Square formation by asynchronous oblivious robots. arXiv preprintMamino M., Viglietta G.: Square formation by asynchronous oblivious robots. arXiv preprint arXiv:1605.06093, 2016.\n\nUniform circle formation by mobile robots. M Mondal, S G Chaudhuri, Proceedings of the Workshop Program of the 19th International Conference on Distributed Computing and Networking. the Workshop Program of the 19th International Conference on Distributed Computing and NetworkingMondal M., Chaudhuri S.G.: Uniform circle formation by mobile robots. In: Proceedings of the Workshop Program of the 19th International Conference on Distributed Computing and Networking, pp. 1-2. 2018.\n\nUseful metrics for modular robot motion planning. A Pamecha, I Ebert-Uphoff, G S Chirikjian, IEEE Transactions on Robotics and Automation. 134Pamecha A., Ebert-Uphoff I., Chirikjian G.S.: Useful metrics for modular robot motion planning. IEEE Transactions on Robotics and Automation, vol. 13(4), pp. 531-545, 1997.\n\nDistributed coordination algorithms for mobile robot swarms: New directions and challenges. D Peleg, International Workshop on Distributed Computing. SpringerPeleg D.: Distributed coordination algorithms for mobile robot swarms: New directions and challenges. In: International Workshop on Distributed Computing, pp. 1-12. Springer, 2005.\n\nUniversally Optimal Gathering Under Limited Visibility. P Poudel, G Sharma, Stabilization, Safety, and Security of Distributed Systems -19th International Symposium. Boston, MA, USAPoudel P., Sharma G.: Universally Optimal Gathering Under Limited Visibility. In: Stabilization, Safety, and Security of Distributed Systems -19th International Symposium, SSS 2017, Boston, MA, USA, November 5-8, 2017, Proceedings, pp. 323-340. 2017.\n\nSublinear-time mutual visibility for fat oblivious robots. P Poudel, G Sharma, A Aljohani, Proceedings of the 20th International Conference on Distributed Computing and Networking, ICDCN 2019. the 20th International Conference on Distributed Computing and Networking, ICDCN 2019Bangalore, IndiaACMPoudel P., Sharma G., Aljohani A.: Sublinear-time mutual visibility for fat obliv- ious robots. In: Proceedings of the 20th International Conference on Distributed Computing and Networking, ICDCN 2019, Bangalore, India, January 04-07, 2019, pp. 238-247. ACM, 2019.\n\nDistributed motion coordination of multiple mobile robots. K Sugihara, I Suzuki, Proceedings. 5th IEEE International Symposium on Intelligent Control. 5th IEEE International Symposium on Intelligent ControlIEEESugihara K., Suzuki I.: Distributed motion coordination of multiple mobile robots. In: Proceedings. 5th IEEE International Symposium on Intelligent Con- trol 1990, pp. 138-143. IEEE, 1990.\n\nDistributed anonymous mobile robots: Formation of geometric patterns. I Suzuki, M Yamashita, SIAM Journal on Computing. 284Suzuki I., Yamashita M.: Distributed anonymous mobile robots: Formation of geometric patterns. SIAM Journal on Computing, vol. 28(4), pp. 1347-1363, 1999.\n\nForming a circle by distributed anonymous mobile robots. O Tanaka, Hiroshima, JapanDepartment of Electrical Engineering, Hiroshima UniversityBachelor thesisTanaka O.: Forming a circle by distributed anonymous mobile robots. Bachelor thesis, Department of Electrical Engineering, Hiroshima University, Hiroshima, Japan, 1992.\n", "annotations": {"author": "[{\"start\":\"67\",\"end\":\"84\"},{\"start\":\"85\",\"end\":\"98\"},{\"start\":\"99\",\"end\":\"115\"},{\"start\":\"116\",\"end\":\"120\"}]", "publisher": null, "author_last_name": "[{\"start\":\"75\",\"end\":\"83\"},{\"start\":\"92\",\"end\":\"97\"},{\"start\":\"105\",\"end\":\"114\"}]", "author_first_name": "[{\"start\":\"67\",\"end\":\"74\"},{\"start\":\"85\",\"end\":\"91\"},{\"start\":\"99\",\"end\":\"104\"},{\"start\":\"116\",\"end\":\"119\"}]", "author_affiliation": null, "title": "[{\"start\":\"1\",\"end\":\"64\"},{\"start\":\"121\",\"end\":\"184\"}]", "venue": null, "abstract": "[{\"start\":\"433\",\"end\":\"1357\"}]", "bib_ref": "[{\"start\":\"2668\",\"end\":\"2672\",\"attributes\":{\"ref_id\":\"b24\"}},{\"start\":\"2975\",\"end\":\"2978\",\"attributes\":{\"ref_id\":\"b7\"}},{\"start\":\"2978\",\"end\":\"2980\",\"attributes\":{\"ref_id\":\"b8\"}},{\"start\":\"2980\",\"end\":\"2983\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"2983\",\"end\":\"2987\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"2987\",\"end\":\"2991\",\"attributes\":{\"ref_id\":\"b19\"}},{\"start\":\"2991\",\"end\":\"2995\",\"attributes\":{\"ref_id\":\"b20\"}},{\"start\":\"2995\",\"end\":\"2999\",\"attributes\":{\"ref_id\":\"b28\"}},{\"start\":\"2999\",\"end\":\"3003\",\"attributes\":{\"ref_id\":\"b29\"}},{\"start\":\"3003\",\"end\":\"3007\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"3639\",\"end\":\"3643\",\"attributes\":{\"ref_id\":\"b16\"}},{\"start\":\"3643\",\"end\":\"3646\",\"attributes\":{\"ref_id\":\"b17\"}},{\"start\":\"4010\",\"end\":\"4014\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"4445\",\"end\":\"4448\",\"attributes\":{\"ref_id\":\"b1\"}},{\"start\":\"6008\",\"end\":\"6012\",\"attributes\":{\"ref_id\":\"b25\"}},{\"start\":\"6672\",\"end\":\"6675\",\"attributes\":{\"ref_id\":\"b3\"}},{\"start\":\"6675\",\"end\":\"6677\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"6677\",\"end\":\"6680\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"6680\",\"end\":\"6683\",\"attributes\":{\"ref_id\":\"b13\"}},{\"start\":\"6683\",\"end\":\"6686\",\"attributes\":{\"ref_id\":\"b26\"}},{\"start\":\"6716\",\"end\":\"6719\",\"attributes\":{\"ref_id\":\"b4\"}},{\"start\":\"6719\",\"end\":\"6721\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"6721\",\"end\":\"6724\",\"attributes\":{\"ref_id\":\"b21\"}},{\"start\":\"6748\",\"end\":\"6751\",\"attributes\":{\"ref_id\":\"b0\"}},{\"start\":\"6751\",\"end\":\"6754\",\"attributes\":{\"ref_id\":\"b27\"}},{\"start\":\"7222\",\"end\":\"7226\",\"attributes\":{\"ref_id\":\"b28\"}},{\"start\":\"7440\",\"end\":\"7444\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"7557\",\"end\":\"7561\",\"attributes\":{\"ref_id\":\"b29\"}},{\"start\":\"7692\",\"end\":\"7695\",\"attributes\":{\"ref_id\":\"b7\"}},{\"start\":\"7809\",\"end\":\"7812\",\"attributes\":{\"ref_id\":\"b8\"}},{\"start\":\"8190\",\"end\":\"8194\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"8386\",\"end\":\"8390\",\"attributes\":{\"ref_id\":\"b20\"}},{\"start\":\"8594\",\"end\":\"8598\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"8788\",\"end\":\"8792\",\"attributes\":{\"ref_id\":\"b19\"}},{\"start\":\"8851\",\"end\":\"8855\",\"attributes\":{\"ref_id\":\"b22\"}},{\"start\":\"8893\",\"end\":\"8896\",\"attributes\":{\"ref_id\":\"b2\"}},{\"start\":\"9111\",\"end\":\"9115\",\"attributes\":{\"ref_id\":\"b11\"}},{\"start\":\"9388\",\"end\":\"9392\",\"attributes\":{\"ref_id\":\"b23\"}},{\"start\":\"9397\",\"end\":\"9401\",\"attributes\":{\"ref_id\":\"b9\"}},{\"start\":\"9976\",\"end\":\"9980\",\"attributes\":{\"ref_id\":\"b12\"}},{\"start\":\"30456\",\"end\":\"30460\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"30460\",\"end\":\"30462\",\"attributes\":{\"ref_id\":\"b5\"}}]", "figure": "[{\"start\":\"37988\",\"end\":\"38618\",\"attributes\":{\"id\":\"fig_0\"}},{\"start\":\"38619\",\"end\":\"38689\",\"attributes\":{\"id\":\"fig_1\"}},{\"start\":\"38690\",\"end\":\"38816\",\"attributes\":{\"id\":\"fig_2\"}},{\"start\":\"38817\",\"end\":\"38886\",\"attributes\":{\"id\":\"fig_3\"}},{\"start\":\"38887\",\"end\":\"38944\",\"attributes\":{\"id\":\"fig_4\"}},{\"start\":\"38945\",\"end\":\"39077\",\"attributes\":{\"id\":\"fig_5\"}},{\"start\":\"39078\",\"end\":\"39134\",\"attributes\":{\"id\":\"fig_6\"}},{\"start\":\"39135\",\"end\":\"39702\",\"attributes\":{\"id\":\"fig_7\"}},{\"start\":\"39703\",\"end\":\"39787\",\"attributes\":{\"id\":\"fig_8\"}},{\"start\":\"39788\",\"end\":\"39837\",\"attributes\":{\"id\":\"fig_9\"}},{\"start\":\"39838\",\"end\":\"40877\",\"attributes\":{\"id\":\"fig_10\"}},{\"start\":\"40878\",\"end\":\"40985\",\"attributes\":{\"id\":\"fig_11\"}},{\"start\":\"40986\",\"end\":\"41092\",\"attributes\":{\"id\":\"fig_12\"}},{\"start\":\"41093\",\"end\":\"41163\",\"attributes\":{\"id\":\"fig_13\"}}]", "paragraph": "[{\"start\":\"1373\",\"end\":\"2905\"},{\"start\":\"2943\",\"end\":\"5912\"},{\"start\":\"5914\",\"end\":\"6584\"},{\"start\":\"6602\",\"end\":\"10044\"},{\"start\":\"10065\",\"end\":\"11991\"},{\"start\":\"12017\",\"end\":\"12458\"},{\"start\":\"12460\",\"end\":\"13152\"},{\"start\":\"13154\",\"end\":\"13634\"},{\"start\":\"13636\",\"end\":\"14075\"},{\"start\":\"14077\",\"end\":\"14454\"},{\"start\":\"14456\",\"end\":\"16037\"},{\"start\":\"16051\",\"end\":\"17204\"},{\"start\":\"17223\",\"end\":\"19781\"},{\"start\":\"19803\",\"end\":\"20041\"},{\"start\":\"20058\",\"end\":\"20080\"},{\"start\":\"20082\",\"end\":\"20540\"},{\"start\":\"20542\",\"end\":\"20764\"},{\"start\":\"20800\",\"end\":\"23642\"},{\"start\":\"23644\",\"end\":\"23965\"},{\"start\":\"23967\",\"end\":\"26067\"},{\"start\":\"26069\",\"end\":\"27460\"},{\"start\":\"27462\",\"end\":\"27732\"},{\"start\":\"27734\",\"end\":\"27846\"},{\"start\":\"27867\",\"end\":\"28734\"},{\"start\":\"28736\",\"end\":\"30024\"},{\"start\":\"30026\",\"end\":\"30987\"},{\"start\":\"31034\",\"end\":\"32426\"},{\"start\":\"32433\",\"end\":\"33929\"},{\"start\":\"33931\",\"end\":\"36133\"},{\"start\":\"36140\",\"end\":\"36191\"},{\"start\":\"36198\",\"end\":\"36234\"},{\"start\":\"36249\",\"end\":\"37498\"},{\"start\":\"37500\",\"end\":\"37987\"}]", "formula": "[{\"start\":\"20765\",\"end\":\"20799\",\"attributes\":{\"id\":\"formula_0\"}}]", "table_ref": null, "section_header": "[{\"start\":\"1359\",\"end\":\"1371\",\"attributes\":{\"n\":\"1.\"}},{\"start\":\"2908\",\"end\":\"2941\",\"attributes\":{\"n\":\"1.1.\"}},{\"start\":\"6587\",\"end\":\"6600\",\"attributes\":{\"n\":\"1.2.\"}},{\"start\":\"10047\",\"end\":\"10063\",\"attributes\":{\"n\":\"1.3.\"}},{\"start\":\"11994\",\"end\":\"12015\",\"attributes\":{\"n\":\"2.\"}},{\"start\":\"16040\",\"end\":\"16049\",\"attributes\":{\"n\":\"3.\"}},{\"start\":\"17207\",\"end\":\"17221\",\"attributes\":{\"n\":\"3.1.\"}},{\"start\":\"19784\",\"end\":\"19801\"},{\"start\":\"20044\",\"end\":\"20056\"},{\"start\":\"27849\",\"end\":\"27865\",\"attributes\":{\"n\":\"3.2.\"}},{\"start\":\"30990\",\"end\":\"31032\"},{\"start\":\"32429\",\"end\":\"32431\"},{\"start\":\"36136\",\"end\":\"36138\"},{\"start\":\"36194\",\"end\":\"36196\"},{\"start\":\"36237\",\"end\":\"36247\",\"attributes\":{\"n\":\"4.\"}},{\"start\":\"37989\",\"end\":\"37999\"},{\"start\":\"38620\",\"end\":\"38630\"},{\"start\":\"38888\",\"end\":\"38898\"},{\"start\":\"39079\",\"end\":\"39089\"},{\"start\":\"39704\",\"end\":\"39714\"},{\"start\":\"39789\",\"end\":\"39799\"},{\"start\":\"41094\",\"end\":\"41104\"}]", "table": null, "figure_caption": "[{\"start\":\"38001\",\"end\":\"38618\"},{\"start\":\"38632\",\"end\":\"38689\"},{\"start\":\"38692\",\"end\":\"38816\"},{\"start\":\"38819\",\"end\":\"38886\"},{\"start\":\"38900\",\"end\":\"38944\"},{\"start\":\"38947\",\"end\":\"39077\"},{\"start\":\"39091\",\"end\":\"39134\"},{\"start\":\"39137\",\"end\":\"39702\"},{\"start\":\"39716\",\"end\":\"39787\"},{\"start\":\"39801\",\"end\":\"39837\"},{\"start\":\"39840\",\"end\":\"40877\"},{\"start\":\"40880\",\"end\":\"40985\"},{\"start\":\"40988\",\"end\":\"41092\"},{\"start\":\"41106\",\"end\":\"41163\"}]", "figure_ref": "[{\"start\":\"15435\",\"end\":\"15443\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"17990\",\"end\":\"17999\",\"attributes\":{\"ref_id\":\"fig_1\"}},{\"start\":\"19028\",\"end\":\"19045\",\"attributes\":{\"ref_id\":\"fig_4\"}},{\"start\":\"19429\",\"end\":\"19439\",\"attributes\":{\"ref_id\":\"fig_4\"}},{\"start\":\"20202\",\"end\":\"20210\",\"attributes\":{\"ref_id\":\"fig_4\"}},{\"start\":\"20695\",\"end\":\"20704\",\"attributes\":{\"ref_id\":\"fig_6\"}},{\"start\":\"22937\",\"end\":\"22946\",\"attributes\":{\"ref_id\":\"fig_6\"}},{\"start\":\"26745\",\"end\":\"26753\",\"attributes\":{\"ref_id\":\"fig_6\"}},{\"start\":\"28353\",\"end\":\"28362\",\"attributes\":{\"ref_id\":\"fig_8\"}},{\"start\":\"28994\",\"end\":\"29002\",\"attributes\":{\"ref_id\":\"fig_8\"}},{\"start\":\"30385\",\"end\":\"30394\",\"attributes\":{\"ref_id\":\"fig_8\"}},{\"start\":\"30920\",\"end\":\"30929\",\"attributes\":{\"ref_id\":\"fig_9\"}},{\"start\":\"31348\",\"end\":\"31358\",\"attributes\":{\"ref_id\":\"fig_9\"}},{\"start\":\"31685\",\"end\":\"31695\",\"attributes\":{\"ref_id\":\"fig_9\"}},{\"start\":\"32132\",\"end\":\"32142\",\"attributes\":{\"ref_id\":\"fig_9\"}},{\"start\":\"35450\",\"end\":\"35459\",\"attributes\":{\"ref_id\":\"fig_13\"}},{\"start\":\"35604\",\"end\":\"35615\",\"attributes\":{\"ref_id\":\"fig_13\"}},{\"start\":\"35716\",\"end\":\"35725\",\"attributes\":{\"ref_id\":\"fig_13\"}},{\"start\":\"36119\",\"end\":\"36129\",\"attributes\":{\"ref_id\":\"fig_13\"}}]", "bib_author_first_name": "[{\"start\":\"41367\",\"end\":\"41368\"},{\"start\":\"41379\",\"end\":\"41380\"},{\"start\":\"41387\",\"end\":\"41388\"},{\"start\":\"41389\",\"end\":\"41390\"},{\"start\":\"41398\",\"end\":\"41399\"},{\"start\":\"42014\",\"end\":\"42015\"},{\"start\":\"42016\",\"end\":\"42017\"},{\"start\":\"42027\",\"end\":\"42028\"},{\"start\":\"42029\",\"end\":\"42032\"},{\"start\":\"42044\",\"end\":\"42045\"},{\"start\":\"42046\",\"end\":\"42049\"},{\"start\":\"42061\",\"end\":\"42062\"},{\"start\":\"42063\",\"end\":\"42064\"},{\"start\":\"42471\",\"end\":\"42472\"},{\"start\":\"42481\",\"end\":\"42482\"},{\"start\":\"42706\",\"end\":\"42707\"},{\"start\":\"42714\",\"end\":\"42715\"},{\"start\":\"42726\",\"end\":\"42727\"},{\"start\":\"42728\",\"end\":\"42729\"},{\"start\":\"42741\",\"end\":\"42742\"},{\"start\":\"43077\",\"end\":\"43078\"},{\"start\":\"43085\",\"end\":\"43086\"},{\"start\":\"43097\",\"end\":\"43098\"},{\"start\":\"43099\",\"end\":\"43100\"},{\"start\":\"43108\",\"end\":\"43109\"},{\"start\":\"43653\",\"end\":\"43654\"},{\"start\":\"43661\",\"end\":\"43662\"},{\"start\":\"43673\",\"end\":\"43674\"},{\"start\":\"43675\",\"end\":\"43676\"},{\"start\":\"43684\",\"end\":\"43685\"},{\"start\":\"43986\",\"end\":\"43987\"},{\"start\":\"44003\",\"end\":\"44005\"},{\"start\":\"44015\",\"end\":\"44016\"},{\"start\":\"44026\",\"end\":\"44027\"},{\"start\":\"44037\",\"end\":\"44038\"},{\"start\":\"44359\",\"end\":\"44360\"},{\"start\":\"44369\",\"end\":\"44370\"},{\"start\":\"44872\",\"end\":\"44873\"},{\"start\":\"44882\",\"end\":\"44883\"},{\"start\":\"45237\",\"end\":\"45238\"},{\"start\":\"45239\",\"end\":\"45240\"},{\"start\":\"45252\",\"end\":\"45253\"},{\"start\":\"45261\",\"end\":\"45262\"},{\"start\":\"45274\",\"end\":\"45275\"},{\"start\":\"45292\",\"end\":\"45293\"},{\"start\":\"45301\",\"end\":\"45302\"},{\"start\":\"45303\",\"end\":\"45304\"},{\"start\":\"45641\",\"end\":\"45643\"},{\"start\":\"45653\",\"end\":\"45654\"},{\"start\":\"45664\",\"end\":\"45665\"},{\"start\":\"46016\",\"end\":\"46017\"},{\"start\":\"46025\",\"end\":\"46026\"},{\"start\":\"46027\",\"end\":\"46028\"},{\"start\":\"46040\",\"end\":\"46041\"},{\"start\":\"46049\",\"end\":\"46050\"},{\"start\":\"46673\",\"end\":\"46674\"},{\"start\":\"46684\",\"end\":\"46685\"},{\"start\":\"46698\",\"end\":\"46699\"},{\"start\":\"47073\",\"end\":\"47074\"},{\"start\":\"47084\",\"end\":\"47085\"},{\"start\":\"47092\",\"end\":\"47093\"},{\"start\":\"47653\",\"end\":\"47654\"},{\"start\":\"47666\",\"end\":\"47667\"},{\"start\":\"47678\",\"end\":\"47679\"},{\"start\":\"48066\",\"end\":\"48067\"},{\"start\":\"48079\",\"end\":\"48080\"},{\"start\":\"48091\",\"end\":\"48092\"},{\"start\":\"48412\",\"end\":\"48413\"},{\"start\":\"48425\",\"end\":\"48426\"},{\"start\":\"48437\",\"end\":\"48438\"},{\"start\":\"48765\",\"end\":\"48766\"},{\"start\":\"48778\",\"end\":\"48779\"},{\"start\":\"48790\",\"end\":\"48791\"},{\"start\":\"48801\",\"end\":\"48802\"},{\"start\":\"49187\",\"end\":\"49188\"},{\"start\":\"49200\",\"end\":\"49201\"},{\"start\":\"49212\",\"end\":\"49213\"},{\"start\":\"49223\",\"end\":\"49224\"},{\"start\":\"49505\",\"end\":\"49506\"},{\"start\":\"49517\",\"end\":\"49518\"},{\"start\":\"49529\",\"end\":\"49530\"},{\"start\":\"49539\",\"end\":\"49540\"},{\"start\":\"49890\",\"end\":\"49891\"},{\"start\":\"49903\",\"end\":\"49904\"},{\"start\":\"49905\",\"end\":\"49906\"},{\"start\":\"50198\",\"end\":\"50199\"},{\"start\":\"50208\",\"end\":\"50209\"},{\"start\":\"50461\",\"end\":\"50462\"},{\"start\":\"50471\",\"end\":\"50472\"},{\"start\":\"50473\",\"end\":\"50474\"},{\"start\":\"50951\",\"end\":\"50952\"},{\"start\":\"50962\",\"end\":\"50963\"},{\"start\":\"50978\",\"end\":\"50979\"},{\"start\":\"50980\",\"end\":\"50981\"},{\"start\":\"51309\",\"end\":\"51310\"},{\"start\":\"51613\",\"end\":\"51614\"},{\"start\":\"51623\",\"end\":\"51624\"},{\"start\":\"52049\",\"end\":\"52050\"},{\"start\":\"52059\",\"end\":\"52060\"},{\"start\":\"52069\",\"end\":\"52070\"},{\"start\":\"52612\",\"end\":\"52613\"},{\"start\":\"52624\",\"end\":\"52625\"},{\"start\":\"53023\",\"end\":\"53024\"},{\"start\":\"53033\",\"end\":\"53034\"},{\"start\":\"53289\",\"end\":\"53290\"}]", "bib_author_last_name": "[{\"start\":\"41369\",\"end\":\"41377\"},{\"start\":\"41381\",\"end\":\"41385\"},{\"start\":\"41391\",\"end\":\"41396\"},{\"start\":\"41400\",\"end\":\"41403\"},{\"start\":\"42018\",\"end\":\"42025\"},{\"start\":\"42033\",\"end\":\"42042\"},{\"start\":\"42050\",\"end\":\"42059\"},{\"start\":\"42065\",\"end\":\"42073\"},{\"start\":\"42473\",\"end\":\"42479\"},{\"start\":\"42483\",\"end\":\"42496\"},{\"start\":\"42708\",\"end\":\"42712\"},{\"start\":\"42716\",\"end\":\"42724\"},{\"start\":\"42730\",\"end\":\"42739\"},{\"start\":\"42743\",\"end\":\"42746\"},{\"start\":\"43079\",\"end\":\"43083\"},{\"start\":\"43087\",\"end\":\"43095\"},{\"start\":\"43101\",\"end\":\"43106\"},{\"start\":\"43110\",\"end\":\"43113\"},{\"start\":\"43655\",\"end\":\"43659\"},{\"start\":\"43663\",\"end\":\"43671\"},{\"start\":\"43677\",\"end\":\"43682\"},{\"start\":\"43686\",\"end\":\"43689\"},{\"start\":\"43988\",\"end\":\"44001\"},{\"start\":\"44006\",\"end\":\"44013\"},{\"start\":\"44017\",\"end\":\"44024\"},{\"start\":\"44028\",\"end\":\"44035\"},{\"start\":\"44361\",\"end\":\"44367\"},{\"start\":\"44371\",\"end\":\"44379\"},{\"start\":\"44874\",\"end\":\"44880\"},{\"start\":\"44884\",\"end\":\"44891\"},{\"start\":\"45241\",\"end\":\"45250\"},{\"start\":\"45254\",\"end\":\"45259\"},{\"start\":\"45263\",\"end\":\"45272\"},{\"start\":\"45276\",\"end\":\"45290\"},{\"start\":\"45294\",\"end\":\"45299\"},{\"start\":\"45305\",\"end\":\"45310\"},{\"start\":\"45644\",\"end\":\"45651\"},{\"start\":\"45655\",\"end\":\"45662\"},{\"start\":\"46018\",\"end\":\"46023\"},{\"start\":\"46029\",\"end\":\"46038\"},{\"start\":\"46042\",\"end\":\"46047\"},{\"start\":\"46051\",\"end\":\"46064\"},{\"start\":\"46675\",\"end\":\"46682\"},{\"start\":\"46686\",\"end\":\"46696\"},{\"start\":\"46700\",\"end\":\"46706\"},{\"start\":\"47075\",\"end\":\"47082\"},{\"start\":\"47086\",\"end\":\"47090\"},{\"start\":\"47094\",\"end\":\"47113\"},{\"start\":\"47655\",\"end\":\"47664\"},{\"start\":\"47668\",\"end\":\"47676\"},{\"start\":\"47680\",\"end\":\"47687\"},{\"start\":\"48039\",\"end\":\"48047\"},{\"start\":\"48068\",\"end\":\"48077\"},{\"start\":\"48081\",\"end\":\"48089\"},{\"start\":\"48093\",\"end\":\"48100\"},{\"start\":\"48414\",\"end\":\"48423\"},{\"start\":\"48427\",\"end\":\"48435\"},{\"start\":\"48439\",\"end\":\"48446\"},{\"start\":\"48767\",\"end\":\"48776\"},{\"start\":\"48780\",\"end\":\"48788\"},{\"start\":\"48792\",\"end\":\"48799\"},{\"start\":\"48803\",\"end\":\"48812\"},{\"start\":\"49189\",\"end\":\"49198\"},{\"start\":\"49202\",\"end\":\"49210\"},{\"start\":\"49214\",\"end\":\"49221\"},{\"start\":\"49225\",\"end\":\"49234\"},{\"start\":\"49507\",\"end\":\"49515\"},{\"start\":\"49519\",\"end\":\"49527\"},{\"start\":\"49531\",\"end\":\"49537\"},{\"start\":\"49541\",\"end\":\"49550\"},{\"start\":\"49892\",\"end\":\"49901\"},{\"start\":\"49907\",\"end\":\"49916\"},{\"start\":\"50200\",\"end\":\"50206\"},{\"start\":\"50210\",\"end\":\"50219\"},{\"start\":\"50463\",\"end\":\"50469\"},{\"start\":\"50475\",\"end\":\"50484\"},{\"start\":\"50953\",\"end\":\"50960\"},{\"start\":\"50964\",\"end\":\"50976\"},{\"start\":\"50982\",\"end\":\"50992\"},{\"start\":\"51311\",\"end\":\"51316\"},{\"start\":\"51615\",\"end\":\"51621\"},{\"start\":\"51625\",\"end\":\"51631\"},{\"start\":\"52051\",\"end\":\"52057\"},{\"start\":\"52061\",\"end\":\"52067\"},{\"start\":\"52071\",\"end\":\"52079\"},{\"start\":\"52614\",\"end\":\"52622\"},{\"start\":\"52626\",\"end\":\"52632\"},{\"start\":\"53025\",\"end\":\"53031\"},{\"start\":\"53035\",\"end\":\"53044\"},{\"start\":\"53291\",\"end\":\"53297\"}]", "bib_entry": "[{\"start\":\"41367\",\"end\":\"41949\",\"attributes\":{\"id\":\"b0\"}},{\"start\":\"41951\",\"end\":\"42422\",\"attributes\":{\"matched_paper_id\":\"1304584\",\"id\":\"b1\"}},{\"start\":\"42424\",\"end\":\"42704\",\"attributes\":{\"matched_paper_id\":\"125316606\",\"id\":\"b2\"}},{\"start\":\"42706\",\"end\":\"42996\",\"attributes\":{\"id\":\"b3\",\"doi\":\"arXiv:1709.00877\"}},{\"start\":\"42998\",\"end\":\"43572\",\"attributes\":{\"matched_paper_id\":\"53301760\",\"id\":\"b4\"}},{\"start\":\"43574\",\"end\":\"43903\",\"attributes\":{\"matched_paper_id\":\"53301760\",\"id\":\"b5\"}},{\"start\":\"43905\",\"end\":\"44265\",\"attributes\":{\"matched_paper_id\":\"7647085\",\"id\":\"b6\"}},{\"start\":\"44267\",\"end\":\"44767\",\"attributes\":{\"matched_paper_id\":\"468352\",\"id\":\"b7\"}},{\"start\":\"44769\",\"end\":\"45117\",\"attributes\":{\"matched_paper_id\":\"31155590\",\"id\":\"b8\"}},{\"start\":\"45119\",\"end\":\"45639\",\"attributes\":{\"matched_paper_id\":\"52017497\",\"id\":\"b9\"}},{\"start\":\"45641\",\"end\":\"45945\",\"attributes\":{\"id\":\"b10\"}},{\"start\":\"45947\",\"end\":\"46605\",\"attributes\":{\"matched_paper_id\":\"1082613\",\"id\":\"b11\"}},{\"start\":\"46607\",\"end\":\"47022\",\"attributes\":{\"matched_paper_id\":\"53026506\",\"id\":\"b12\"}},{\"start\":\"47024\",\"end\":\"47594\",\"attributes\":{\"matched_paper_id\":\"13989587\",\"id\":\"b13\"}},{\"start\":\"47596\",\"end\":\"48035\",\"attributes\":{\"matched_paper_id\":\"318116\",\"id\":\"b14\"}},{\"start\":\"48037\",\"end\":\"48064\",\"attributes\":{\"id\":\"b15\"}},{\"start\":\"48066\",\"end\":\"48410\",\"attributes\":{\"id\":\"b16\"}},{\"start\":\"48412\",\"end\":\"48677\",\"attributes\":{\"id\":\"b17\"}},{\"start\":\"48679\",\"end\":\"49119\",\"attributes\":{\"matched_paper_id\":\"7171023\",\"id\":\"b18\"}},{\"start\":\"49121\",\"end\":\"49434\",\"attributes\":{\"matched_paper_id\":\"7378416\",\"id\":\"b19\"}},{\"start\":\"49436\",\"end\":\"49814\",\"attributes\":{\"matched_paper_id\":\"19438704\",\"id\":\"b20\"}},{\"start\":\"49816\",\"end\":\"50196\",\"attributes\":{\"matched_paper_id\":\"5720583\",\"id\":\"b21\"}},{\"start\":\"50198\",\"end\":\"50416\",\"attributes\":{\"id\":\"b22\",\"doi\":\"arXiv:1605.06093\"}},{\"start\":\"50418\",\"end\":\"50899\",\"attributes\":{\"matched_paper_id\":\"4299916\",\"id\":\"b23\"}},{\"start\":\"50901\",\"end\":\"51215\",\"attributes\":{\"matched_paper_id\":\"14008463\",\"id\":\"b24\"}},{\"start\":\"51217\",\"end\":\"51555\",\"attributes\":{\"matched_paper_id\":\"25908873\",\"id\":\"b25\"}},{\"start\":\"51557\",\"end\":\"51988\",\"attributes\":{\"matched_paper_id\":\"4864785\",\"id\":\"b26\"}},{\"start\":\"51990\",\"end\":\"52551\",\"attributes\":{\"matched_paper_id\":\"57760852\",\"id\":\"b27\"}},{\"start\":\"52553\",\"end\":\"52951\",\"attributes\":{\"matched_paper_id\":\"61599595\",\"id\":\"b28\"}},{\"start\":\"52953\",\"end\":\"53230\",\"attributes\":{\"matched_paper_id\":\"7908791\",\"id\":\"b29\"}},{\"start\":\"53232\",\"end\":\"53556\",\"attributes\":{\"id\":\"b30\"}}]", "bib_title": "[{\"start\":\"41951\",\"end\":\"42012\"},{\"start\":\"42424\",\"end\":\"42469\"},{\"start\":\"42998\",\"end\":\"43075\"},{\"start\":\"43574\",\"end\":\"43651\"},{\"start\":\"43905\",\"end\":\"43984\"},{\"start\":\"44267\",\"end\":\"44357\"},{\"start\":\"44769\",\"end\":\"44870\"},{\"start\":\"45119\",\"end\":\"45235\"},{\"start\":\"45947\",\"end\":\"46014\"},{\"start\":\"46607\",\"end\":\"46671\"},{\"start\":\"47024\",\"end\":\"47071\"},{\"start\":\"47596\",\"end\":\"47651\"},{\"start\":\"48679\",\"end\":\"48763\"},{\"start\":\"49121\",\"end\":\"49185\"},{\"start\":\"49436\",\"end\":\"49503\"},{\"start\":\"49816\",\"end\":\"49888\"},{\"start\":\"50418\",\"end\":\"50459\"},{\"start\":\"50901\",\"end\":\"50949\"},{\"start\":\"51217\",\"end\":\"51307\"},{\"start\":\"51557\",\"end\":\"51611\"},{\"start\":\"51990\",\"end\":\"52047\"},{\"start\":\"52553\",\"end\":\"52610\"},{\"start\":\"52953\",\"end\":\"53021\"}]", "bib_author": "[{\"start\":\"41367\",\"end\":\"41379\"},{\"start\":\"41379\",\"end\":\"41387\"},{\"start\":\"41387\",\"end\":\"41398\"},{\"start\":\"41398\",\"end\":\"41405\"},{\"start\":\"42014\",\"end\":\"42027\"},{\"start\":\"42027\",\"end\":\"42044\"},{\"start\":\"42044\",\"end\":\"42061\"},{\"start\":\"42061\",\"end\":\"42075\"},{\"start\":\"42471\",\"end\":\"42481\"},{\"start\":\"42481\",\"end\":\"42498\"},{\"start\":\"42706\",\"end\":\"42714\"},{\"start\":\"42714\",\"end\":\"42726\"},{\"start\":\"42726\",\"end\":\"42741\"},{\"start\":\"42741\",\"end\":\"42748\"},{\"start\":\"43077\",\"end\":\"43085\"},{\"start\":\"43085\",\"end\":\"43097\"},{\"start\":\"43097\",\"end\":\"43108\"},{\"start\":\"43108\",\"end\":\"43115\"},{\"start\":\"43653\",\"end\":\"43661\"},{\"start\":\"43661\",\"end\":\"43673\"},{\"start\":\"43673\",\"end\":\"43684\"},{\"start\":\"43684\",\"end\":\"43691\"},{\"start\":\"43986\",\"end\":\"44003\"},{\"start\":\"44003\",\"end\":\"44015\"},{\"start\":\"44015\",\"end\":\"44026\"},{\"start\":\"44026\",\"end\":\"44037\"},{\"start\":\"44037\",\"end\":\"44041\"},{\"start\":\"44359\",\"end\":\"44369\"},{\"start\":\"44369\",\"end\":\"44381\"},{\"start\":\"44872\",\"end\":\"44882\"},{\"start\":\"44882\",\"end\":\"44893\"},{\"start\":\"45237\",\"end\":\"45252\"},{\"start\":\"45252\",\"end\":\"45261\"},{\"start\":\"45261\",\"end\":\"45274\"},{\"start\":\"45274\",\"end\":\"45292\"},{\"start\":\"45292\",\"end\":\"45301\"},{\"start\":\"45301\",\"end\":\"45312\"},{\"start\":\"45641\",\"end\":\"45653\"},{\"start\":\"45653\",\"end\":\"45664\"},{\"start\":\"45664\",\"end\":\"45668\"},{\"start\":\"46016\",\"end\":\"46025\"},{\"start\":\"46025\",\"end\":\"46040\"},{\"start\":\"46040\",\"end\":\"46049\"},{\"start\":\"46049\",\"end\":\"46066\"},{\"start\":\"46673\",\"end\":\"46684\"},{\"start\":\"46684\",\"end\":\"46698\"},{\"start\":\"46698\",\"end\":\"46708\"},{\"start\":\"47073\",\"end\":\"47084\"},{\"start\":\"47084\",\"end\":\"47092\"},{\"start\":\"47092\",\"end\":\"47115\"},{\"start\":\"47653\",\"end\":\"47666\"},{\"start\":\"47666\",\"end\":\"47678\"},{\"start\":\"47678\",\"end\":\"47689\"},{\"start\":\"48039\",\"end\":\"48049\"},{\"start\":\"48066\",\"end\":\"48079\"},{\"start\":\"48079\",\"end\":\"48091\"},{\"start\":\"48091\",\"end\":\"48102\"},{\"start\":\"48412\",\"end\":\"48425\"},{\"start\":\"48425\",\"end\":\"48437\"},{\"start\":\"48437\",\"end\":\"48448\"},{\"start\":\"48765\",\"end\":\"48778\"},{\"start\":\"48778\",\"end\":\"48790\"},{\"start\":\"48790\",\"end\":\"48801\"},{\"start\":\"48801\",\"end\":\"48814\"},{\"start\":\"49187\",\"end\":\"49200\"},{\"start\":\"49200\",\"end\":\"49212\"},{\"start\":\"49212\",\"end\":\"49223\"},{\"start\":\"49223\",\"end\":\"49236\"},{\"start\":\"49505\",\"end\":\"49517\"},{\"start\":\"49517\",\"end\":\"49529\"},{\"start\":\"49529\",\"end\":\"49539\"},{\"start\":\"49539\",\"end\":\"49552\"},{\"start\":\"49890\",\"end\":\"49903\"},{\"start\":\"49903\",\"end\":\"49918\"},{\"start\":\"50198\",\"end\":\"50208\"},{\"start\":\"50208\",\"end\":\"50221\"},{\"start\":\"50461\",\"end\":\"50471\"},{\"start\":\"50471\",\"end\":\"50486\"},{\"start\":\"50951\",\"end\":\"50962\"},{\"start\":\"50962\",\"end\":\"50978\"},{\"start\":\"50978\",\"end\":\"50994\"},{\"start\":\"51309\",\"end\":\"51318\"},{\"start\":\"51613\",\"end\":\"51623\"},{\"start\":\"51623\",\"end\":\"51633\"},{\"start\":\"52049\",\"end\":\"52059\"},{\"start\":\"52059\",\"end\":\"52069\"},{\"start\":\"52069\",\"end\":\"52081\"},{\"start\":\"52612\",\"end\":\"52624\"},{\"start\":\"52624\",\"end\":\"52634\"},{\"start\":\"53023\",\"end\":\"53033\"},{\"start\":\"53033\",\"end\":\"53046\"},{\"start\":\"53289\",\"end\":\"53299\"}]", "bib_venue": "[{\"start\":\"41525\",\"end\":\"41542\"},{\"start\":\"43195\",\"end\":\"43210\"},{\"start\":\"44469\",\"end\":\"44540\"},{\"start\":\"46182\",\"end\":\"46200\"},{\"start\":\"47235\",\"end\":\"47250\"},{\"start\":\"50600\",\"end\":\"50697\"},{\"start\":\"51723\",\"end\":\"51738\"},{\"start\":\"52183\",\"end\":\"52284\"},{\"start\":\"52704\",\"end\":\"52759\"},{\"start\":\"41405\",\"end\":\"41523\"},{\"start\":\"42075\",\"end\":\"42160\"},{\"start\":\"42498\",\"end\":\"42541\"},{\"start\":\"42764\",\"end\":\"42829\"},{\"start\":\"43115\",\"end\":\"43193\"},{\"start\":\"43691\",\"end\":\"43719\"},{\"start\":\"44041\",\"end\":\"44069\"},{\"start\":\"44381\",\"end\":\"44467\"},{\"start\":\"44893\",\"end\":\"44921\"},{\"start\":\"45312\",\"end\":\"45357\"},{\"start\":\"45668\",\"end\":\"45775\"},{\"start\":\"46066\",\"end\":\"46154\"},{\"start\":\"46708\",\"end\":\"46791\"},{\"start\":\"47115\",\"end\":\"47233\"},{\"start\":\"47689\",\"end\":\"47805\"},{\"start\":\"48102\",\"end\":\"48202\"},{\"start\":\"48448\",\"end\":\"48530\"},{\"start\":\"48814\",\"end\":\"48875\"},{\"start\":\"49236\",\"end\":\"49257\"},{\"start\":\"49552\",\"end\":\"49600\"},{\"start\":\"49918\",\"end\":\"49979\"},{\"start\":\"50237\",\"end\":\"50286\"},{\"start\":\"50486\",\"end\":\"50598\"},{\"start\":\"50994\",\"end\":\"51038\"},{\"start\":\"51318\",\"end\":\"51365\"},{\"start\":\"51633\",\"end\":\"51721\"},{\"start\":\"52081\",\"end\":\"52181\"},{\"start\":\"52634\",\"end\":\"52702\"},{\"start\":\"53046\",\"end\":\"53071\"},{\"start\":\"53232\",\"end\":\"53287\"}]"}}}, "year": 2023, "month": 12, "day": 17}