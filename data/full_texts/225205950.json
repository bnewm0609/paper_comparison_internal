{"id": 225205950, "updated": "2023-07-11 22:36:14.715", "metadata": {"title": "T-TER: Defeating A2 Trojans with Targeted Tamper-Evident Routing", "authors": "[{\"first\":\"Timothy\",\"last\":\"Trippel\",\"middle\":[]},{\"first\":\"Kang\",\"last\":\"Shin\",\"middle\":[\"G.\"]},{\"first\":\"Kevin\",\"last\":\"Bush\",\"middle\":[\"B.\"]},{\"first\":\"Matthew\",\"last\":\"Hicks\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 2023 ACM Asia Conference on Computer and Communications Security", "publication_date": {"year": 2023, "month": null, "day": null}, "abstract": "Since the inception of the Integrated Circuit (IC), the size of the transistors used to construct them has continually shrunk. While this advancement significantly improves computing capability, fabrication costs have skyrocketed. As a result, most IC designers must now outsource fabrication. Outsourcing, however, presents a security threat: comprehensive post-fabrication inspection is infeasible given the size of modern ICs, so it is nearly impossible to know if the foundry has altered the original design during fabrication (i.e., inserted a hardware Trojan). Defending against a foundry-side adversary is challenging because\u2014even with as few as two gates\u2014hardware Trojans can completely undermine software security. Researchers have attempted to both detect and prevent foundry-side attacks, but all existing defenses are ineffective against additive Trojans with footprints of a few gates or less. We present Targeted Tamper-Evident Routing (T-TER), a layout-level defense against untrusted foundries, capable of thwarting the insertion of even the stealthiest hardware Trojans. T-TER is directed and routing-centric: it prevents foundry-side attackers from routing Trojan wires to, or directly adjacent to, security-critical wires by shielding them with guard wires. Unlike shield wires commonly deployed for cross-talk reduction, T-TER guard wires pose an additional technical challenge: they must be tamper-evident in both the digital (deletion attacks) and analog (move and jog attacks) domains. We address this challenge by developing a class of designed-in guard wires that are added to the design specifically to protect security-critical wires. T-TER\u2019s guard wires incur minimal overhead, scale with design complexity, and provide tamper-evidence against attacks. We implement automated tools (on top of commercial CAD tools) for deploying guard wires around targeted nets within an open-source System-on-Chip. Lastly, using an existing IC threat assessment toolchain, we show T-TER defeats even the stealthiest known hardware Trojan, with \u2248 1% overhead.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3097831826", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/asiaccs/TrippelSBH23", "doi": "10.1145/3579856.3582837"}}, "content": {"source": {"pdf_hash": "9c2fb00357926edb930d94f6967e505122249ecf", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1906.08842", "status": "GREEN"}}, "grobid": {"id": "4bc7f3bfab1b2ba3185e1a7ddfd265afcbf8cc36", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/9c2fb00357926edb930d94f6967e505122249ecf.txt", "contents": "\nT-TER: Defeating A2 Trojans with Targeted Tamper-Evident Routing\n\n\nTimothy Trippel Kang \nG Shin kgshin@umich.edu \nKevin B Bush kevin.bush@ll.mit.edu \nMatthew Hicks mdhicks2@vt.edu \n\nMIT Lincoln Laboratory Lexington, Massachusetts\nUniversity of Michigan Ann Arbor\nMichiganUSA, USA\n\n\nVirginia Tech Blacksburg\nVirginiaUSA\n\nT-TER: Defeating A2 Trojans with Targeted Tamper-Evident Routing\n10.1145/3579856.3582837\n\n\nINTRODUCTION\n\nIntegrated circuits (ICs) are the foundation of computing systems. Security vulnerabilities in silicon are devastating as they subvert even formally verified software. For almost 50 years, the transistors within ICs have continued to shrink, enhancing performance while reducing power and area usage. However, these advances that push the laws of physics come with a financial cost: the price to build a 3 fabrication facility capable of producing ICs at a commercial scale is estimated to be $15-20B [30]. Even when entities can afford to make such an investment, they must continually run the IC fabrication line (approximately 40,000 wafers/month) as many fabrication processes cannot be readily stopped and restarted.\n\nThis extreme cost forces most semi-conductor companies, and even nation states, to become \"fabless\", i.e., they outsource fabrication. Today, only 3 companies in the world (Intel, Samsung, and TSMC) have capabilities to fabricate ICs at the 10/7 process nodes [31]. This presents a security threat: fabless semiconductor companies and nation states must trust these three manufacturers (and their partners) not to alter their designs at any point throughout the fabrication process (i.e., implant a hardware Trojan).\n\nThe most stealthy and controllable hardware Trojans involve inserting additional 1 circuit components designed to maliciously subvert the functionality of the chip (i.e., an additive hardware Trojan). Specifically, the A2 Trojan [65] utilizes only two additional cells-one analog capacitor and one digital logic gate-to provide a hardware foothold [26] within a microprocessor IC for an attacker to gain unauthorized supervisor privileges with user-mode code.\n\nThere are now only two ways of defending against hardware Trojans implanted at fabrication-time: post-fabrication detection [1,14,24,32,42,69] and pre-fabrication prevention [3,59,60,64]. The former tries to detect the presence of Trojan components after the chip has been fabricated, while the latter attempts to alter the IC's physical layout, at design time, in a way that makes foundryside alterations challenging to an attacker.\n\nDetection is more commonly studied than prevention and consists primarily of two techniques [51]: 1) side-channel analysis and 2) functional testing. Side-channel analysis attempts to detect noticeable deviations in power usage, electromagnetic (EM) emanations, performance (timing), etc. [1,24,38,42]. It often requires a \"golden\" reference chip to be effective, and can only detect the sidechannel signature deviations greater than those caused by process variation (i.e., the hardware Trojan must have a large physical footprint). Alternatively, functional testing attempts to inadvertently trigger the Trojan by activating as many logic paths through the circuit as possible. Functional testing does not require any \"golden\" reference chip, but it requires the Trojan's trigger to be activated by the IC's common mode operation, as exhaustive testing of even a moderately complex integrated circuit is infeasible.\n\nAlbeit less studied, prevention is another defense against fabricationtime hardware Trojans. To prevent such attacks, we advocate that the placement and routing of security critical circuit elements should be a first-class part of an IC's back-end design, on the level of performance, power, and cost. To the best of our knowledge, only three preventive fabrication-time defenses have been explored [3,4,64]. All of them are placement-centric, attempting to increase the device layer (core) density by filling empty spaces with with tamper-evident logic gates, thus making it challenging for an attacker to find open space in the design to insert their Trojan components (cells/gates). However, there are several problems with placement-centric defenses. As Ba et al. [4] point out, the BISA cell approach [64] is infeasible as it requires 100% placement density. Contrast this with the 60-80% density of current IC layouts that ensures routability. If 100% density were feasible, every IC design would be manufactured that way to save cost. Alternatively, Ba et al. [3,4] suggest targeted filling: only filling placement sites that are located closest to \"security-critical\" logic. While prioritizing security-critical logic is a significant improvement, focusing on the device layer only impedes attacks due to inflated timing requirements, it does not prevent them, as \u00a76.2.2 shows.\n\nUnfortunately, no single technique is effective in detecting, and/or preventing the insertion of the stealthiest known additive hardware Trojan, the A2 Trojan [65], which requires only two additional cells. To fill this gap, we propose Targeted Tamper-Evident Routing (T-TER), a routing-centric defense that prevents foundry-side attackers from routing Trojan wires to, or directly adjacent to, security-critical wires. We define T-TER as any routing method that protects security-critical wires from fabrication-time alterations. Specifically, we leverage concepts from the signal-integrity domain [18,19] and apply them to a security domain (addressing several technical challenges along the way): we route \"guard wires\" around security-critical wires that make it infeasible for an attacker to tap any such wire without detection (i.e., tamper-evident), something characteristic of additive Trojans [54] (Fig. 1). Extending signal-integrity domain techniques to the security domain entails two technical challenges:\n\n(1) completely shielding all surfaces of critical wires, (2) and be tamper-evident. Contrary to placement-centric defenses, which focus on preventing attack implementation, T-TER focuses on preventing attack integration, and thus, does not require filling all the empty space in an IC design to be effective.\n\nWe make the following contributions:\n\n\u2022 Targeted Tamper-Evident Routing (T-TER): a routing-centric, preventative, defense against stealthy IC fabrication-time attacks. T-TER places tamper-evident guard wires alongside security-critical wires, making fabrication-time modifications to such wires infeasible and/or detectable postfabrication. \u2022 Characterization of possible guard wire bypass attacks.\n\n\u2022 Attack-driven design of designed-in guard wires. Designed-in guard wires are added during the place-and-route phase of the IC design process for the sole purpose of defending security-critical wires. They have minimal routing constraints and can guard all surfaces of designer-targeted wires. \u2022 Automated routing toolchain for deploying guard wires within an IC layout that integrates with commercial and opensource VLSI CAD tools. \u2022 Evaluation of the effectiveness of T-TER compared to previous defenses against both digital and analog A2 Trojans embedded in a System-on-Chip intended to be a surrogate for DoD systems of interest [36], using a recently published fabrication-time threat assessment tool [54]. The results indicate T-TER is more effective than existing placement-centric defenses [3,4], and is capable of thwarting even the stealthiest additive hardware Trojans, including A2 [65]. 2 \n\n\nBACKGROUND 2.1 IC Design Process\n\nCreating an Integrated Circuit (IC) consisting of a billion transistors is a complex process that requires its decomposition into sub-processes and extensive use of automation via Computer Aided Design (CAD) tools. The IC design process consists of five main phases, as illustrated in Fig. 2 HDL code is \"compiled\" into a gate-level netlist. The gate-level netlist is then placed-and-routed (PaR), and a physical geometric blueprint of the chip is encoded in a Graphics Database System II (GDSII) file. Lastly, the IC is fabricated, and packaged into a device for mounting on a printed circuit board. In line with prior work on untrusted foundry [3,4,8,28,34,54,64,65], and economic forces, we assume all design phases-except fabrication-are trusted. Defensive Routing is deployed at the physical level, i.e., the PaR design phase. During PaR, the gate-level netlist is physically arranged onto a 3-dimensional grid, shown in Fig. 3. The 3D grid consists of a device layer, where circuit components (e.g., digital logic gates) are placed, and several routing layers vertically stacked above, where wires are routed to connect the circuit components on the device layers. Each layer is separated by an insulating dielectric, and vias are used to connect wires on adjacent layers.\n\n\nHardware Trojans\n\nA hardware Trojan is a malicious modification to a circuit designed to alter its operative functionality [7]. It consists of two main building blocks: a trigger and payload [12,24,54,62]. Prior work provides hardware Trojan taxonomies based on the type of trigger and payload designs they employ [12,24,54,55,62]. Likewise, we adopt the same taxonomy.\n\n\n2.2.1\n\nTrigger. The trigger is circuitry that initiates the delivery of the payload when it encounters a specific state. The goal of the trigger is to control payload deployment such that it is hidden from test cases (stealthy), but readily deployable by the attacker (controllable). Triggers are created by adding, removing, and/or manipulating existing circuit components [28,44,51,65], and can be digital or analog [26,43,65]. The ideal trigger-e.g., A2 [65]achieves stealth and controllability while being small (i.e., requiring few additional circuit components).\n\n\n2.2.2\n\nPayload. The payload is circuitry that, upon being signaled by the trigger, alters the functionality of the victim (host) circuit. Like the trigger, the payload can be analog or digital, and has a variety of possible malicious effects. Prior work demonstrates Trojan payloads that leak information [34], alter the state of the IC [65], and render the IC inoperable [44]. One attribute all documented controllable hardware Trojans have in common is that they must route a  Figure 3: Typical 3D physical IC layout designed during the place-and-route IC design phase (Fig. 2). On the bottom is a device layer, and stacked above are several routing layers. rogue wire to, or directly adjacent to, a security-critical wire within the victim IC [54].\n\n\n2.2.3\n\nFabrication-Time Attacks. Inserting a hardware Trojan at fabrication time is different from inserting a Trojan during the frontend design. Unlike behavioral or structural-level attackers that maliciously modify the HDL or gate-level netlist, respectively [2,23,58], the fabrication-time attacker only has access to the physical-level representation of the IC design (i.e., output of phase 3 in Fig. 2). Specifically, they must edit the geometric representation of the circuit layout, e.g., the GDSII file. While this is more challenging than editing the design at the behavioral-(HDL) or structural-level (netlist), where design specific semantics are more readily interpretable, it is even more difficult to defend. The post-fabrication defender receives a literal black box from the foundry. Comprehensively inspecting each fabricated die to verify the absence of malicious perturbations is infeasible for the most advanced hardware Trojans [65]. As previous research reveals, implanting a hardware Trojan into an IC layout requires three steps [54]: 1) Trojan Placement, 2) Victim/Trojan Integration, and 3) Intra-Trojan Routing. Trojan Placement is the process of finding empty space on the IC's device layer to add additional circuit components, e.g., logic gates, to construct the Trojan trigger and payload. Victim/Trojan Integration requires attaching a rogue Trojan wire, or routing it directly adjacent, to an unblocked surface on a security-critical wire(s). Lastly, Intra-Trojan Routing involves routing the Trojan circuit components to the Victim/Trojan integration point-the unblocked security-critical wire segment.\n\n\nLayout-Level Defenses.\n\nPrior work attempts to thwart fabrication-time attacks by increasing the difficulty of Trojan Placement: filling empty space on the IC's device layer with temperevident functional logic gates [3,4,64]. As shown in [54], this approach is only effective for Trojans with large footprints, as filling all placement sites is infeasible [4], and even targeting fill around security-critical logic [3] leaves the IC layout vulnerable to Trojans with small footprints [65]. Orthogonally, T-TER targets Victim/Trojan Integration by directing protection, at the routing level, around wires Trojans want to attach to.\n\n\nTime-Domain Reflectometry (TDR)\n\nTime-domain reflectometry (TDR) is an electrical analysis technique used to measure physical characteristics about a transmission line (i.e., a wire) such as length, number and distance between impedance discontinuities (e.g., bends), propagation delay, dielectric constant, etc. [15,21]. Foundries already use TDR to perform root cause analysis on chips that fail post-fabrication testing-often during bring-up of a new process node. TDR works by characterizing a wire within a circuit by injecting a single rising pulse down that wire and analyzing its reflection(s).\n\n\nIC Interconnect Models.\n\nThere are two ways to model IC interconnects: lumped and transmission-line models [5]. Lumped interconnect models approximate interconnects using networks of resistors and capacitors. Transmission-line models approximate interconnects as transmission lines with a characteristic impedance and propagation delay.\n\nThe choice of interconnect model is a function of maximum frequency component to wire length [49]. A common rule of thumb for IC interconnects is: a wire is considered a transmission line if its length is greater than \u224810% of the wavelength of the maximum frequency component it transmits [49]. In digital electronics, it is common to think of signals in terms of rise and fall times, rather than maximum frequency component. Thus, one can modify the prior rule of thumb to: a wire is considered as a transmission line if the transmitted signal rise time, , is less than twice the wire's propagation delay, [49]. Eq. (1) captures this rule of thumb.\nModel = Transmission Line, < 2 Lumped RC, otherwise(1)\nChoosing the right model is vital to understanding operational limitations and ensuring signal integrity within an IC layout. For example, an interconnect that carries a high-speed signal transitions will observe signal reflections from impedance discontinuities that are destructive to the signal integrity of the overall system. Modeling such interconnects using a lumped RC model can hide these destructive effects, while a transmission-line does would not.\n\n2.3.2 TDR for IC Fault Analysis. By Eq. (1), the faster the rising edge of TDR's incident pulse, the finer-grain of propagation delay changes are detectable. TDR was first developed as a fault-analysis technique for long transmission lines, such as telephone or optical communication lines [41,46]. As commercial TDR systems became more advanced, TDR became a standard IC packaging fault analysis tool [13,39,45]. Researchers have now demonstrated terahertzlevel TDR systems capable of locating faults in IC interconnects to nanometer-scale accuracies [11,37,50,52]. With such fine-grain resolution, TDR is an ideal tamper-analysis technique for ensuring the integrity of the guard wires used in T-TER ( \u00a7B).\n\n\nTHREAT MODEL\n\nWe adopt a threat model in which all phases of the IC design process are trusted except fabrication (Fig. 2). The untrusted foundry threat model stems from the extreme ramp-up costs associated with fabricating leading-edge silicon [30,31] that make outsourcing IC fabrication a necessity-even for nation states. In line with previous untrusted foundry threat models [34,43,51,54,63,65], we assume the worst case: that any fabrication-time modifications are carried out by a malicious actor within the foundry (or any foundry partners) that has access to the entire physical layout of the IC in the form of a GDSII file.\n\nWhile there are many types of hardware Trojans [43] ( \u00a72.2), we focus on additive Trojans, rather than subtractive or substitution Trojans. Additive Trojans require implanting additional circuit components and wiring into the IC design. We focus on additive Trojans as there are no documented stealthy and controllable examples of subtractive or substitution Trojans that we are aware of. The closest example of such Trojans are dopant-level Trojans [8,28,44], all of which have limited controllability and are detectable with imaging [48].\n\nPrevious work shows that to successfully implement an additive hardware Trojan, the adversary must complete the three steps-Trojan Placement, Victim/Trojan Integration, and Intra-Trojan Routing [54]-without being exposed. Namely, they must 1) find empty space on the device layer to insert the Trojan's components (logic gates/cells), 2) locate an unblocked segment on a security-critical wire to attach the Trojan to, and 3) route the Trojan components to that unblocked wire segment. They are restricted from modifying the dimensions of the chip and/or violating manufacturing design rules that would risk their exposure. They are allowed to move components and/or existing wiring around, but are constrained by available resources (e.g., time) and correctness from making mass perturbations to the layout. As process technologies scale, manufacturing design rules become increasingly complex [47]. Thus, rearranging components and/or existing wiring comes at a substantial cost. The time to complete any layout modifications, and verify such modifications have not violated design correctness, cannot disrupt the fabrication turn-around time expected by their customers. 3 Additionally, the attacker avoids any modifications that are detectable using existing test-case or side-channel based defenses. While it would be trivial for an attacker with infinite time and resources to reverse-engineer the physical layout into HDL, add a Trojan, and re-run the design through the entire IC design process ( Fig. 2) thus generating an entirely new layout, such an attack will be infeasible within the hard time limits of fabrication contracts, thus outside the scope of our threat model.\n\n\nTARGETED TAMPER-EVIDENT ROUTING (T-TER)\n\nT-TER aims to make the second step of Trojan insertion-Victim/Trojan Integration ( \u00a72.2.3)-intractable by shielding the surfaces of targeted wires (interconnects) with tamper-evident guard wires ( \u00a72.2.4), creating an additional obstacle for adversaries to overcome. Similar to prior work [3,4,35,54], T-TER is made practical by leveraging the observation that, for most hardware designs, only a subset of the IC is security-critical [17,23,35,53,66,67], or the target of a hardware Trojan. In designing T-TER, we pose three questions:\n\n(1) Which wires in the design are security-critical (should be guarded)? (2) How can an attacker bypass T-TER guard wires? (3) How do we design guard wires that are tamper-evident with respect to bypass attacks?\n\n\nIdentifying Security-Critical Nets to Guard\n\nWhile identifying security-critical features in a design is an orthogonal problem-and an ongoing area of research [17,23,35,53,66,67]identifying the nets (wires) that comprise said features is the first step in deploying T-TER. Currently, there exist two techniques for identifying security-critical nets: 1) manual [17,23,35] or 2) semi-autonomous [66,67]. In manual identification, a human expert analyzes the design's specification, and the corresponding HDL, and flags nets that implement features critical to the security of software or other hardware that interface to the design [17,23,35]. Alternatively, in semi-autonomous identification, a set of security-critical nets for a specific design are first manually identified [17,23], or mined from a list of published errata [66], and either: 1) used to train a classifier that identifies similar nets in other designs [66], 2) expanded using information flow [53] or fan-in analyses [54], or 3) translated to an entirely different design [67]. In this paper, we adopt the most common approach in this area of semi-autonomous identification [3,54].\n\n\nGuard Wire Bypass Attacks\n\nWith T-TER deployed, attackers must bypass guard wires-by exposing the surface of a security-critical wire(s)-to complete Victim/Trojan Integration, i.e., connect a rogue Trojan wire to a securitycritical wire(s) ( \u00a72.2.3). Given a set of interconnected guard wires ( Fig. 1), there are three ways an attacker can bypass them, colorcoded by attacker difficulty (Fig. 4): A) delete, B) move, or C) jog attacks. In a deletion attack (Fig. 4A), entire guard wire(s) are removed from the layout. While this attack is easy to implement, it is also easy to defend. A post-fabrication continuity check of a connected set of guard wires will detect a deletion attack. In a move attack (Fig. 4B), all interconnected guard wires are left intact, but translated to another location on the chip. Move attacks are the most difficult to implement: an attacker must find a contiguous group of unused routing tracks to translate each set of guard wires too. Even then, a post-fabrication cross-talk analysis between security-critical and guard wires would expose this attack [18,42]. Lastly, in a jog attack, guard wires are lengthened to make room for a rogue Trojan wire to connect to a security-critical wire using a via. Jog attacks strike a compromise in terms of implementation difficulty, and are the stealthiest of all bypass attacks. They are easier to implement than move attacks, and are undetectable with post-fabrication continuity tests or cross-talk analyses. The only artifacts of a jog attack are: 1) a change in the number of bends in the guard wire, i.e. number of impedance discontinuities, and/or 2) an increase in the guard wire's length. However, nanometer scale TDR [37,50] detects these changes ( \u00a7B).\n\n\nTamper-Evident Guard Wires\n\nWhile techniques for detecting all three bypass attacks exist, each of them requires the ability to measure physical characteristics (e.g., continuity, cross-talk, and length) about a guard wire postfabrication. How do we design guard wires whose physical characteristics are tamper-evident post-fabrication? Based on these considerations, we take a straw-man approach in designing guard wires capable of preventing even the stealthiest of attacks.\n\n\nA) Delete B) Move C) Jog\n\nSecurity-Critical Wires Guard Wires Attack Point to connect a Trojan wire to a security-critical wire, color-coded by attacker difficulty: A) delete guard wire(s), B) move an intact set of guard wires, or C) jog guard wires out of the way. We study the jog attack to assess defensive sensitivity, as it strikes a balance in attacker difficulty, and is the most difficult to detect.\n\n4.3.1 Na\u00efve Approach: Re-purpose Existing Wires. One idea for constructing guard wires is to re-purpose existing non-securitycritical wires, inherent to the host IC design, as guard wires. Such an approach creates hyper-local routing densities nearby securitycritical wires, thus limiting or eliminating the locations where an attacker can attach rogue Trojan wires. By re-purposing pre-existing wires as guard wires, the guard wires incur no hardware overhead. Unfortunately, there are additional routing constraints (e.g., toggle frequency, length, layer, location, timing sensitive, and spacing) that limit the pool of candidate guard wires. Even when such constraints are met, the guard wires are only tamper-evident with respect to deletion and move attacks. For an existing wire to also be tamperevident with respect to the more stealthy jog and bypass attacks, it must be timing-critical (i.e., if it is made longer, then it will cause timing violations that manifest as run-time errors). As Fig. 6 shows, deployment using existing guard wires is challenging. Namely, the lack of suitable wires in many designs makes it infeasible to block all surfaces of all security-critical wires.\n\n\nDesigned-in Guard Wires.\n\nTo fill the gaps of existing wires, we propose designed-in guard wires. Designed-in guard wires are not inherent to the host IC design. Rather, they are added to the design during the place-and-route IC design phase (Fig. 2). Since they do not implement any circuit functionality, they have fewer routing constraints. As we show in Fig. 6, completely blocking the accessible surface area of all security-critical wires is trivial. While designed-in guard wires incur hardware overhead, i.e., additional wires, they completely block an attacker from attaching a Trojan wire at fabrication time (Victim/Trojan Integration, \u00a72.2.3), as shown in Fig. 7. Additionally, designed-in guard wires are tamper-evident with respect to all bypass attacks, when coupled with post-fabrication analysis techniques like continuity checking, cross-talk analysis, and time-domain reflectometry ( \u00a72.3 and \u00a7B), respectively.\n\nThere are several designed-in guard wire architectures that may be deployed, listed in order of increasing difficulty of deployment: 1) fully-disjoint, 2) partially-connected, and 3) fully-connected. Fullydisjoint designed-in guard wires are not connected between sides, i.e., the guard wires on each side of a security-critical wire are never connected to one another. Partially-connected guard wires allow for a single guard wire to be utilized on multiple sides. For example, a security-critical wire could be guarded on the north, east, and west sides by a single guard wire that wraps around the security-critical wire. Lastly, fully-connected guard wires are formed when a single guard wire is routed around all sides of all security-critical wires, as shown in Fig. 1.\n\nTo detect tampering of designed-in guard wires post-fabrication, their analog characteristics of must be observable. This can be implemented either on-chip, e.g., with internal sensors [25] or ring oscillators [68], or off-chip, e.g., with two I/O pins and a onetime programmable fabric [35]. If fully-joint or partially-connected designed-in guard-wires are deployed, the one-time programmable fabric could be randomly programmed to route both ends of a single (fully-disjoint) or single-set (partially-connected) of guard wire(s) to the two pins. If fully-connected designed-in guard wires are deployed, the one-time programmable fabric is not needed, as both ends of the guard wires set can be routed to the two pins.\n\n\nIMPLEMENTATION\n\nWe develop an automated toolchain for deploying T-TER in modern IC designs. Our toolchain integrates with existing IC design flows (Fig. 2) that utilize commercial VLSI CAD tools. Specifically, we implement the T-TER toolchain around the Cadence Innovus Implementation System [10], a commercial place-and-route (PaR) CAD tool. The toolchain is invoked by modifying a place-and-route TCL script, 4 as shown in Fig. 5.\n\n\nPlace-&-Route Process\n\nThe PaR design phase (Fig. 2) is typically automated by a CAD tool, programmatically driven by TCL script(s). There are several steps to PaR that are performed in the following order: 1) floorplanning, 2) placement, 3) clock tree synthesis, 4) routing, and 5) filling. To ensure that all guard-wires are routed optimally, we modify the order of these PaR steps. Specifically, after floor-planning (1), we use our automated toolchain to place identified components and route identified wires and their guard wires. Our toolchain then permanently fixes the locations of these components and wires to prevent the PaR CAD tool from modifying their positions and/or shapes throughout the remainder of the PaR process. Lastly, we utilize the PaR CAD tool to place all other components (2), synthesize the clock tree (3), route remaining wires(4) and fill the design with filler (capacitor) cells.\n\n\nAutomated Toolchain\n\nThe T-TER toolchain automates the insertion of either existing or designed-in guard wires around wires in need of protection. The toolchain consists of three main phases (Fig. 5). The first phase (A) identifies security-critical nets. The second phase (B) identifies the unblocked surfaces of all of these nets within a GDSII-encoded layout. The last phase (C) guards the nets and their influencer nets by routing guard wires nearby. We provide additional implementation details on all three stages of the T-TER toolchain below. Phase A of our toolchain (Fig. 5A) utilizes a semi-autonomous approach to identifying such nets ( \u00a74.1). Specifically, our toolchain assumes the designer has manually flagged a set of root securitycritical nets in the behavioral-level HDL by appending a unique prefix-secure_-to each signal (net) name. During PaR, our toolchain performs a data-flow analysis of the circuit netlist to locate the direct fan-in-to a configurable depth-of each root net. Since the netlist is often modified by PaR CAD tools to meet various design constraints (e.g., power, performance, and area), we disable the optimization of all root nets during PaR. Given the interconnected nature of nets within an IC design, an adversary may elect to target a net that influences a root net, rather than the root net itself. Our toolchain addresses this indirection, using an autonomous approach that widens the set of targeted nets to the root nets and those that influence root nets (to a designer configurable degree). The remainder of our tool flow focuses on protecting this set of targeted nets. Our fan-in analysis tool is a custom-backend to the Icarus Verilog (IVL) front-end Verilog compiler [61], and is implemented in C++. It performs a breadth-first search over the circuit-level data-flow graph generated by IVL. We release our fan-in analysis tool under an open-source license.\n\n\n5.2.2\n\nIdentifying Unblocked Wire Surfaces. The second phase of T-TER is identifying the unblocked surfaces of targeted nets in a physical IC layout, i.e., potential locations of Trojan wire attachment. To do so, we implement, and open-source, a Python tool that analyzes the GDSII layout file containing only the placed-androuted targeted components and wires. Our tool implements a 3-D scanning window approach to search the 3-D boundary surrounding each targeted wire, and compute the areas on each wire's surfaces that are not blocked by other wires or circuit components. While it is traditional for designers to only route wires on defined routing tracks, i.e., on a pre-defined routing grid, it may be possible for an attacker to route Trojan wires off this grid, so long as they maintain the minimum spacing requirements dictated by the manufacturing design rules. Thus, our tool takes a conservative approach when scanning for unblocked wire surfaces, only scanning the 3-D boundary surrounding each targeted wire that extends up to the minimum-spacing requirements defined for the given, and adjacent (top/bottom), routing layers. If and only if another component or wire overlaps a region of the 3-D boundary surrounding a targeted wire, that surface region will be considered blocked. The output of this stage of our toolchain is a list of coordinates within the 3-D place-and-route grid that must be filled with guard wires during the next phase in the T-TER toolchain.\n\n\n5.2.3\n\nGuard Unblocked Wire Surfaces. The last stage of the T-TER toolchain (Fig. 5) is a custom guard wire routing tool, also implemented in Python. It takes as input exact locations of targeted wires and their unblocked sides (output from Phase B, \u00a75.2.2) and generates a TCL script that integrates with the Cadence Innovus Digital Implementation platform [10] to automatically route the guard wires. This TCL script is executed immediately after the targeted wires have been routed, but before placing the remaining components. Depending on the guard wires being deployed, existing or designed-in, different guard wire TCL scripts are generated (described below). 5 Note, in either case, our toolchain routes guard wires that are compliant with all manufacturing design rules.\n\nThere are numerous ways existing guard wires can be implemented. Since commercial PaR CAD tools do not offer an interface to enable fine-grain constraints between two unrelated signal wires, we develop an indirect method for implementing existing guard wires. We implement existing guard wires by constraining placement and routing resources nearby targeted wires. First, we identify all circuit components (i.e., logic gates) connected to all targeted wires, i.e., targeted components. Next, we draw a bounding box around these components and extend this boundary vertically by Y % of the overall box height, and horizontally by X % of the overall box width. Then, we set placement and routing density screens in the portion of the IC layout that lies outside the bounding box. These constraints limit the placement and routing resources outside the bounding box, thus forcing more components and wiring within the bounding box. With increased routing density nearby targeted wires, they are less accessible by Trojan payload delivery wires. The values of X, Y, and density screen configuration settings are optimized to maximize the net blockage metric computed by the GDS2Score metric.\n\nDesigned-in guard wires are more straightforward to implement. The automated guard wire deployment toolchain locates all unblocked surfaces (north, south, east, west, top, and bottom) of all targeted wires and routes guard wires in these regions. After all guard wire segments are routed, they are connected according to the architecture chosen ( \u00a74.3.2).\n\n\nEVALUATION\n\nWe evaluate T-TER in three areas. First, we explore the effectiveness of T-TER at closing the fabrication-time attack surface of three security-critical features within an open-source System-on-Chip (SoC), with regard to the stealthiest additive Trojan known: the A2 Trojan [65]. We compare the capabilities of T-TER with existing 5 While existing guard wires fail to defend against all types of guard wire attacks ( \u00a74.3.1), we implement a tool to deploy them in order to empirically show they are also inferior to designed-in guard wires in terms of surface-are coverage (Figs. 6 & 7), and thus should not be used in a security context. It contains a general-purpose processor core, five cryptographic cores, four digital signal processing cores, and a GPS core. We focus on three cores from in the SoC: the processor core, the DFT core, and the AES core. The OR1200 processor 6 is a 5-stage pipelined CPU that implements a 32-bit OR1K instruction set and Wishbone bus interface [40], and is the same design used in previous fabrication-time attack studies [54,65]. It supports Linux via BusyBox [57]. The AES core supports 128-bit key sizes. The DFT accelerator implements a Discrete Fourier Transform algorithm, a common component of radar and other sensing systems.\n\nWe target a 45 Silicon-On-Insulator (SOI) process technology with 10 available routing layers. We synthesize our design with Cadence Genus (v16.23), and placed-and-route it using Cadence Innovus (v17.1). All layout variations of our SoC target a 100 clock frequency and a core density of 60-80%. All CAD tools are run on a server with 2.5\n\nIntel Xeon E5-2640 CPU and 64GB of memory, running Red Hat Enterprise Linux (v6.9).\n\n6.1.2 A2 Trojan. The goal of T-TER is to protect security-critical features within SoCs from the stealthiest additive Trojan currently known, the A2 Trojan [65]. The A2 Trojan is stealthy, i.e., evades current prevention and detection defenses, due to its small size and complex triggering mechanism. When implemented within our surrogate SoC, in a 45 process, the analog variant of the A2 Trojan [65] requires only two additional cells that occupy 20 placements sites, while the entirely digital variant of the same attack requires 91 additional cells that occupy 1,444 placement sites. The analog A2 attack is not timing critical: the Trojan components may be placed anywhere on the placement grid, at any distance from the Victim/Trojan integration point. Conversely, the digital A2 attack is timing-critical: the length of the interconnect between the Trojan components and the Victim/Trojan integration point must be within three standard deviations from the mean net length in the overall SoC (this is an entirely worst-case estimate borrowed from [54]). We summarize the placement and routing resource requirements for the two variants of the A2 Trojan in Table 1.\n\n\nExemplar Nets of Interest.\n\nFor this evaluation, we need to protect nets that our example Trojan might want to use as integration points. Leveraging existing hardware Trojan payloads, we select three reference integration targets within our SoC design to protect with T-TER:\n\n(1) processor supervisor bit (supv), (2) DFT computation ready interrupt (next_out),\n\ncryptographic key bits (key [0:127]). The most popular hardware Trojans leverage the supervisor (supv) net as part of privilege escalation attacks [16,26,65]. Alternatively, hardware Trojans can also hide specific computations or state transitions, e.g., a Trojan that disables the DFT computation-ready interrupt signal (or next_out signal) that informs the CPU when a DFT computation is ready. Lastly, another popular hardware Trojan seeks to leak cryptographic key bits via side channels [34]. The A2 trigger can be attached to any of the nets that carry these signals to mount an attack, so we protect the interconnects that comprise these nets.\n\nThe initial stage (Fig. 5A) of our automated T-TER toolchain assumes the designer has manually annotated the root nets they have chosen to target with T-TER ( \u00a75.2.1). Thus, we manually annotate the above net (signal) definitions with the prefix secure_ within our SoC design's RTL. We then synthesize and place-and-route our design prior to generating a final, optimized, netlist for which our toolchain computes the fan-in to each manually annotated net-to a depth of two layers of logic gates-thereby expanding the final set of all targeted nets (i.e., those guarded by T-TER). Fig. 8 (far right) shows the number of interconnect wires that comprise each set of nets that implement the aforementioned features within our surrogate SoC.\n\n\nEffectiveness\n\nWe first evaluate the effectiveness of T-TER in thwarting the insertion of hardware Trojans at fabrication time. We compare the degree of protection provided by T-TER with that provided by deploying the current state-of-the-art preventive defense suggested by Ba et al. [3,4]. This placement-based defense involves filling as many empty placement sites as possible (they show filling 95% of all placement sites is the max feasible), prioritizing empty sites nearest security-critical nets. We use our automated toolchain ( \u00a75.2) to deploy both types of guard wires (existing and designed-in). We assume the best case scenario for Ba et al. 's placement defense [3,4] by filling 95% of the device layer with inverter cells-the smallest cells in our 45 cell library, for fine grain filling. We use the ICAS framework [54] to quantify the effectiveness of each defense. ICAS analyzes the physical layout of an IC (encoded in a GSDII file), and computes security metrics detailing the IC layout's fabrication-time attack surface. Namely, it computes three metrics: 1) trigger space, 2) net blockage, and 3) route distance. The trigger space metric characterizes the open space on the device layer (empty placement sites) available for an attacker to add their Trojan components. The net blockage metric computes the percentage of surface area of identified nets that are blocked by other circuit components or wiring. Lastly, the route distance metric computes the minimal distance between unblocked identified nets and unused placement sites that an adversary would have to route Of the three ICAS metrics, the net blockage metric is most adept to quantifying the deployability of each guard wire type (existing and designed-in), i.e., how effective each guard wire type is at shielding all targeted nets. Alternatively, the route distance metric is the adept at comparing T-TER with Ba et al.'s placement defense, as it is essentially a combination of the trigger space metric-an entirely placement-focused metric-and the net-blockage metric-an entirely routing-focused metric. Therefore, we utilize these two ICAS metrics in the following evaluation.\n\n\nNet Blockage Results.\n\nBoth existing and designed-in guard wires attempt to block targeted nets to prevent attackers from attaching rogue wires to them, thus minimizing/eliminating possible Victim/Trojan Integration points ( \u00a72.2.3). We use the net blockage metric to compute the surface-area-coverage differences between existing and designed-in guard wires. Fig. 6 compares the net blockage computed across three total IC layouts of the same SoC design, including: three guard wires variations-without guard wires, with existing guard wires, and with designed-in guard wires-across three different sets of targeted nets. All net-blockage results are with respect to each set of targeted nets in the SoC. Across all three sets of targeted nets, designed-in guard wire provide more protection than existing guard wires, as expected. Specifically, for all nets, designed-in guard wires achieve 100% net blockage. This means that there is no place on any targeted net within the SoC where an attacker can attach a rogue wire. Existing guard wires are unable to achieve 100% coverage due mainly to having to meet their own routing constraints which prevents our tool from locating enough nets to block all surfaces of all targeted nets, making them ineffective at thwarting attacks.\n\n\nRoute Distance Results.\n\nSince T-TER only limits the routing resources needed to insert a Trojan at fabrication time, it is vital to understand how T-TER reduces the overall fabrication-time attack surface, i.e., both Trojan routing and placement resources. We use the route distance metric to locate all possible combinations of unused placement sites and unblocked targeted nets-i.e., all possible Trojan attack configurations [54]. We use the route distance metric to illustrate the attack surface across each core within our SoC where that contains the root net of interest. We analyze the route distance metric with respect to each containing core, as it is common practice for IC layout engineers to lay out each core separately, before integrating them, plus this increases the clarity of presentation. Fig. 7 shows the route distance metric as computed across all three containing cores, with and without layout-level defenses including: 1) T-TER (both existing and designed-in guard wires) and 2) defensive placement. Each heatmap is intended to be analyzed column-wise, where each column is a histogram of the distances between unblocked targeted nets and trigger-spaces 7 within a size range. Namely, each heatmap illustrates the fabrication-time attack surface of each IC layout. If a circuit has no attack configurations, i.e., all targeted nets are blocked or there are no trigger-spaces, the route distance heatmap is completely dark (column ratios of 0). If it is impossible to eradicate all attack configurations, the most secure layout for such a circuit would have maximum distances between unblocked targeted net and trigger-spaces, i.e., a heatmap with the top row the lightest color (top row ratios of 1). This is because larger distances increase the signal delay for the hardware Trojan; increasing the challenge of the attacker to meet timing constraints for their attack. Overlaid on each heatmap are rectangles indicating the region of the attack surface that is exploitable by the color-coded Trojan, and check-or x-marks indicating whether any possible attack configurations exist for that attack. A check-mark indicates there are zero possible Trojan layouts (success)), where an x-mark indicates the opposite (vulnerable).\n\nDesigned-in guard wires outperform existing guard wires and placement-centric defenses. For all three example attack payloads, designed-in guard wires were able to close the fabrication-time attack-surface by completely blocking all targeted nets (Fig. 6). Therefore, even the stealthiest A2 Trojan [65] cannot be utilized to attack the features-of-interest within our SoC.\n\n\nPracticality\n\nT-TER is effective, but is it practical? We evaluate the cost of deploying T-TER across three exemplar security-critical features within our SoC that have been subject to attack. Specifically, we analyze the power, route density, and performance (timing) overheads incurred by deploying both existing and designed-in guard wires from \u00a76.2. Note, while T-TER guard-wires can be deployed on any routing layer, we chose to prioritize routing security-critical nets on metal layers three and four (out of 10 total layers) to measure overheads in the worst case, i.e., guard wires routed on layers 2-5. Measurements are taken with respect to each feature's containing core, similar to the route distance measurement. While it is common to analyze power, performance, and area, of an IC design, we instead analyze power, performance and route density. Area measurements refer to the device-layer area, i.e., width and length, since the height (number of routing layers) is fixed for a given process technology. Since T-TER does not require additional logic gates, we do not increase the width and height (area) of the core area, rather T-TER alters the total wire length in the design. Thus, measuring routing density overhead is more meaningful. We use the built-in features of Cadence tools to compute these overheads. Fig. 8 shows our results. Power and timing overheads were both less than 1%. In some cases, the timing was better for the guard wire designs. This is expected as T-TER does not require any additional logic gates, nor lengthen existing wires. Rather, the guard wires increase routing constraints that can push the PaR CAD tool to produce more optimal routing solutions. The route density overhead was less than 1% for all existing guard wires, and similar for designed-in guard wires when the number of targeted nets to guard is small, namely the supv and next_out nets. Intuitively, the more guard wires inserted, the higher the routing density increase. Keeping route density low is important to ensure automated CAD tools can route each design. However, even though all layouts targeted a placement density (density of logic gates on the device layer) of 60-80%, route density was relatively low even with guard wires. This was due to the characteristics of the designs and process technology (i.e., back-end-of-line metal stack option).\n\nIt is worth noting that in addition to low power, performance, and area overheads, deploying T-TER guard wires has minimal impact on the run-time of layout CAD tools. Without DR, the tools lay out each SoC core in less than 10 minutes, and with DR they lay out each core in less than 11 minutes. Tool run-time overheads are more impacted by the magnitude of features requiring protection than on circuit complexity.\n\n\nDISCUSSION\n\nT-TER aims to prevent fabrication-time Trojan attacks that target specific security-critical features in an IC design. Experiments on real circuit layouts of a SoC containing show that T-TER is effective, deployable, and tamper-evident. Discussed below are the limitations, scalability, signal integrity impact, flexibility, and extensibility of T-TER.\n\nLimitations. T-TER is a mitigation strategy for hardware designs where only a subset of the design is security-critical [17,53]. As our evaluation results show, the deployability and performance overhead of T-TER is low when the overall security-critical wire length is low. If every wire in a design is security-critical, then T-TER is not a good defensive strategy; in fact, the motive for outsourcing fabrication in such scenarios is tenuous. If fabrication must be outsourced, we recommend alternative mitigation strategies such as those proposed in [3,4,22,35,64]. The tradeoff is that these strategies have limited deployability, and a large, fixed, performance overhead that make them impractical for designs that require only a subset of security-critical functionality be protected.\n\nScalability. There are two notions of scalability to address. The first is scalability with regard to routability. Routing guard wires alongside security-critical wires can impact the routability of a layout, if the 1) percentage of overall wire length to guard, and 2) route-density without guard wires are both large. By placing and routing security-critical components and wires first, before any other portions of the circuit ( \u00a75.1), we are able to minimize securitycritical wire length. This makes security-critical wire length scale with the total length of security-critical wires, as opposed to the size of the overall design. As we see when going from OR1200 and RISC-V class processor to modern x86-64 processors, the proportion of security-critical functionality (hence wires) decreases as relatively more transistors are spent on performance. Moreover, by deploying T-TER within advanced process nodes-which is the motivating threat model-route density is minimized since these nodes provide multiple metallization options 8 with 10 (or more) routing layers. To demonstrate this empirically, we highlight the AES core ( Fig. 8-Route Density), where we guard over 1000 nets with little impact on power or performance. In fact, the reason we select the AES as a benchmark-even though it is arguably entirely security-critical-is because its key-bit nets exhibit a unique quality that stress tests T-TER. Specifically, they are global, highly-connected routes that are orders-of-magnitude longer than any other nets in the layout.\n\nThe second notion of scalability is with regard to the detection of bypass attacks. Although Moore's law is near its limit, transistors continue to shrink. Only three companies in the world are capable of manufacturing 7-10 transistors [31]. It is, therefore, vital for T-TER to scale with process technology. With respect to deletion attacks (Fig. 4A), T-TER scales with process technology advances as measuring interconnect continuity does not differ across process technologies. With respect to move attacks (Fig. 4B), T-TER scales with process technology advances as cross-talk is amplified when interconnects are smaller and more densely packed. Lastly, with respect to jog attacks, T-TER also scales, as TDR capabilities directly scale with microelectronic feature sizes, i.e., faster transistors translates to faster TDR rise times.\n\nSignal Integrity Impact. Routing long wires parallel to targeted nets increases coupling capacitance, thus creating cross-talk between the guard wires and the targeted nets they protect. However, designed-in guard wires are not actively driven during normal chip operation, and can be permanently grounded (using a one-time programmable fabric) after TDR analysis. Thus, cross-talk is not an issue-in fact, designed-in guard wires decrease cross-talk by acting as shields between targeted nets and the rest of the circuit.\n\nExtensibility of CAD Tools. Our T-TER deployment framework ( \u00a75) is built on top of a commercial IC CAD tool [10] and an open-source VLSI analysis tool [54]. Extending T-TER to work across other commercial IC layout CAD tools involves incorporating support for each vendor's CAD tool APIs. In the future, we see T-TER deployed as an integrated component of commercial VLSI CAD tools.\n\n\nCONCLUSION\n\nT-TER is a routing-centric preventive defense against additive fabrication -time Trojans that target security-critical hardware features. It makes routing Trojan wires to, or directly adjacent to, attacker-targeted wires in a victim IC intractable by surrounding their surfaces with tamper-evident guard wires. We propose the use of designed-in guard wires in conjunction with post-fabrication terahertz time-domain reflectometry (TDR) analysis to detect all bypass attacks we contrive (deletion, move, and jog attacks). We develop an automated toolchain for deploying T-TER guard wire. Lastly, we evaluate the effectiveness, deployability, and tamperevidence of T-TER at securing multiple security-critical features within an SoC that have been subject to attack by existing hardware Trojans. Our results show that T-TER thwarts the insertion of even the stealthiest known additive hardware Trojan-the A2 Trojan-with power, timing, and area overheads of \u2248 1%.\n\n\nACKNOWLEDGMENTS\n\nWe thank Brian Tyrrell, Matt Guyton, and other members of the MIT Lincoln Laboratory community for their thoughtful feedback that enhanced the quality of our work. \n\n\nA RELATED WORK\n\nFabrication-time attacks and defenses have been extensively studied. Attacks have spanned the trade-space of footprint size, stealth, and controllability. Specifically, some attacks have demonstrated stealth and controllability, at the cost of large footprints [8,26,34], while others have demonstrated small (or non-existent) footprints, at the cost of controllability and stealth [28,44]. The most formidable attack-the A2 attack [65]-has demonstrated all three: small footprint, stealth, and controllability.\n\nOn the defensive side, there are two main strategies: detective or preventive. Most prior work has focused on detective strategies, while few works have focused on preventive strategies. Detective strategies involve side-channel analysis [1,6,24,38], imaging [69], and on-chip sensors [14,20,32]. Until T-TER, preventive measures have been placement-focused [3,4,64].\n\nFabrication-time Attacks. The first fabrication-time insertion of a hardware Trojan was developed by Lin et al. [34] who proposed a Trojan designed to leak information over a deliberately created side channel. Specifically, they designed and implemented a hardware Trojan, with a footprint of approximately 100 logic gates, to create an artificial power side channel for leaking cryptographic keys. Albeit unique at the time, today such a large footprint makes the attack detectable via side channel defenses [1,6,14].\n\nThe most lethal fabrication-time attack is the A2 Trojan, developed by Yang et al. [65]. The A2 Trojan utilizes analog components to build a counter-based trigger circuit with a footprint of less than the size of one flip-flop. Its complex triggering mechanism makes it stealthy, i.e., unlikely to accidentally deploy during post-fabrication functional testing or under normal chip operation, yet is controllable from user-level software. Its unique design makes it the only Trojan to evade all detection schemes, except T-TER.\n\nFabrication-time Defenses. The first side-channel detection scheme was proposed by Agrawal et al. [1]. They used power, temperature, and electromagnetic (EM) side-channel measurements to record a fingerprint of a \"golden\" IC during normal, and compared this fingerprint to one acquired from an untrusted IC. Similarly, Jin et al. [24] create a timing-based fingerprint obtained by measuring the output delays resulting from applying various input combinations to a given IC. While side-channel detection schemes are effective against hardware Trojans with large footprints, they fail at detecting Trojans like A2 [65], whose side-channel signatures are well below operational noise margins.\n\nLike side-channel detection, imaging is another detective defense. Specifically, backside imaging is a non-destructive technique that can resolve device-layer components (Fig. 3) as this layer isn't blocked by any wires. Zhou et al. [69] propose filling the placement grid with highly reflective fill cells, as opposed to the standard fill cells used, to encode a watermark that can be captured using backside imaging. Thus, if the watermark has been perturbed during fabrication, an attack has occurred. Unfortunately, this technique requires hours to image a single IC, provides no visibility in metal layers, and its resolution seems capped at 45 nm processes.\n\nOf all fabrication-time Trojan defenses, R2D2 [20] is the only one that claims to detect the A2 Trojan. R2D2 works by using on-chip sensors to monitor the toggling frequency of a select few securitycritical signals within the design. If the toggling rate of any securitycritical signals exceed a pre-determined threshold, then an alarm signal is activated to indicate an A2 Trojan may have been triggered. The crux of this approach is that, unlike T-TER guard wires, the hardware used to construct the toggle frequency monitors is not tamper-evident. There is no way to tell if a foundry-side attacker disabled the R2D2 hardware while inserting her Trojan.\n\n\nB THREAT ANALYSIS OF BYPASS ATTACKS\n\nRecall, of the three ways an attacker can bypass T-TER guard wires to carry out a fabrication-time attack (Fig. 4 and  \u00a74.2), the jog attack is the stealthiest. An attacker mounts a jog attack by jogging, or moving, a portion of a guard wire to a nearby routing track, in order to make room for a rogue Trojan wire to attach to a targeted net (Fig. 4C). In such an attack, the guard wire is lengthened, or bends are added/removed. To evaluate the detectability of such an attack, we ask three questions:\n\n(1) What is the smallest jog attack, i.e., the minimum alteration in a guard wire's length and/or number of bends?\n\n(2) Is the smallest jog attack masked by process variation?\n\n(3) Can modern TDR detect the smallest jog attacks?  Fig. 4C. This edit either increases the length of the guard wire, or adds/removes bends-impedance discontinuities-in the guard wire to keep its overall length unchanged. This edit is minimal because the minimal metal pitch (MMP), or (horizontal) distance between the centers of adjacent routing tracks on the same routing layer, is much smaller than the (vertical) distance between overlapping routing tracks on adjacent routing layers. Specifically, the smallest jog attack would either: 1) increase a guard wire's length by: = 2 * , where is the MMP on layer , as defined in the design rules of a given process technology, or 2) add/remove bend(s) in the guard wire that are at least a distance of apart from existing bends. In either case, a feature resolution-of overall length or length between bends-of is required to detect the smallest jog attack. Table 2 summarizes the minimal-attack-edits ( distances), to a guard wire's features an attacker must make to bypass T-TER, according to the 45 process technology we target in this study.\n\nB.0.2 Process Variation vs. Smallest Jog Attack. Assume for a moment that we can measure the of overall length, or length between bends, of a guard wire to infinite accuracy. Even then, detecting the smallest jog attack requires the minimal attack edit distance, , be discernable from deviations between simulated and fabricated guard wire lengths due to process variation. Fortunately, is larger than the worst-case manufacturing process variation in a guard wire's length. Namely, with as the designed length of the guard wire, and _ , as the worst-case manufacturing error in the actual guard wire's length (+ or -):\n\u2212 _ + > + _(2)\nFor a guard wire on routing layer , the worst-case manufacturing error, _ , can be deduced from the manufacturing design rules as:\n_ = 2 * _ 2 = _(3)\nwhere _ is the minimum required spacing surrounding a wire routed on metal layer, .\n\nWe illustrate the worst-case manufacturing error, _ in Eqs. 2 & 3, in Fig. 9, where we plot the minimum length differences between unmodified (un-attacked) and minimally-jogged (attacked) guard wires, overlaid with error bars indicating the worst-case range of variation in a guard wires fabricated length caused by process variation. Across all routing layers in the process we study, unmodified vs. attacked guard wires are discernible. B.0.3 Attack Detection with TDR. When IC interconnects are injected with a pulsed waveform with a rise time less than twice the propagation delay of the interconnect, they behave like transmission lines (Eq. (1)). Hence, time-domain reflectometry (TDR) can be used to measure several characteristics of designed-in guard wires to ensure they have not been tampered with ( \u00a72.3). Specifically, the lengths of each guard wire, or lengths between bends on each guard wire, are computed by measuring the reflection time(s) of a single incident rising pulse applied to the guard wires under test. Once measured, the lengths can be compared with that predicted by a 3D electromagnetic field solver [33] to detect if they have been altered. While modeling all interconnects within a large complex IC using a field solver is computationally impractical, it is practical to analyze only a small subset of interconnects, e.g., the guard wires and surrounding circuit structures [37].\n\nPrior work demonstrates terahertz TDR systems [11,37,50,52] capable of measuring the propagation delay of an interconnect to a resolution of \u00b12.6 femptoseconds ( ). Such systems utilize laserdriven optoelectronic measurement techniques to achieve such high resolutions. According to the ideal transmission line model [49], the propagation delay, , is a function of the dielectric constant, , speed of light, , and length of the transmission line (guard wire), , as shown in Eq. (4).\n= * \u221a\ufe01(4)\nTDR is the ideal tamper detection tool as process variation has no impact on its accuracy. Knowing the dielectric constant, , of the insulating material surrounding the guard wires-the inter-layer dielectric (ILD)-is all that is required to compute their lengths, or the lengths between their bends (Eq. (4)). Since, the dielectric constant of the ILD is not dependent on its geometric properties, it is well controlled [9].\n\nUsing the TDR propagation delay model described in Eq. (4), and the previously studied resolution of optoelectrical terahertz TDR [11,37,50,52], we simulate the detection of the smallest jog  attacks on guard wires across every routing layer in our target 45 process. Namely, we simulate the difference in reflection times observed for single pulse TDR waveforms applied to (unmodified) guard wires that are 100 microns long, compared to the reflection time observed from similar guard wires that have been lengthened by the minimal attack edit distances, , across each routing layer ( Table 2). We assume a dielectric constant of 3.9, the nominal dielectric constant of silicon dioxide [27]. Taking into account a (Gaussian) standard error (across reflection time measurements) of \u00b1 2.6 , as reported by [37], we compute the minimum number of TDR measurements required to discriminate an unmodified guard wire from an attacked guard wire with confidence levels of 95% and 99%. We plot these results in Figure 10. Our results demonstrate that existing terahertz TDR systems are capable of detecting the smallest jog attacks across all routing layers (Table 2) in our target  45 process, requiring at most 14 and 24 TDR measurements to achieve confidence levels of 95% and 99%, respectively.\n\nFigure 1 :\n1T-TER is a preventive layout-level defense against fabrication-time Trojans. T-TER deploys tamper-evident guard wires around security-critical wires in a circuit layout-in a pattern similar to variant A or B-to prevent attackers from attaching Trojan wires to them.\n\nFigure 4 :\n4There are three ways an attacker could bypass T-TER guard wires\n\nFigure 5 :\n5Identifying Nets. The first phase of T-TER requires identifying nets in the design to guard, i.e., nets that are security-critical. T-TER is an automated toolchain consisting of three phases. Our toolchain first identifies which wires are security-critical, determines potential (unblocked) attachment points, and routes guard wires to block all attachment points. Identified components & wires are placed & routed before phase (A) of our toolchain is invoked. Before continuing with the traditional PaR flow, the protected nets and their guard wires are locked in-place to ensure they are untouched throughout the remainder of the layout process.\n\nFigure 6 :\n6Plot of the net blockage[54] computed across three different sets of targeted nets within our SoC layout, with and without guard wires. a rogue Trojan wire to \"connect\" the hardware Trojan to the host IC. The trigger space metric quantifies the difficulty of performing Trojan Placement, the net blockage quantifies the difficulty of performing Trojan/Victim Integration, and the route distance metric quantifies the difficulty of performing Intra-Trojan Routing ( \u00a72.2.3).\n\nFigure 7 :Figure 8 :\n78Plot of the ICAS route distance metric[54] computed across four different layouts of each core within our surrogate SoC, with and without guard wires and Ba et al.'s defensive placement[3,4]. Each heatmap illustrates the percentage of (targeted net, trigger-space) pairs (possible Trojan layout implementations) of varying distances apart. The heatmaps are intended to be analyzed by column, as each column encodes a histogram of possible attack configurations with trigger-spaces of a given size range (X-axis). Route distances (Y-axis) are displayed in terms of standard deviations from mean net length in each respective design. Heatmaps that are completely dark indicate no possible attack configurations exist, i.e., no placement/routing resources to insert any Trojan. Overlaid on each heatmap are rectangles indicating regions on the heatmap a given A2 Trojan (Tab. 1) may exploit, and markers (checks and x-marks) indicating if a non-zero number of specific Trojan layout implementations are possible. T-TER hardware overheads. The far right plot shows the number of wire (route) segments that implement the labeled security-critical feature (set of nets) in our surrogate SoC.\n\n\nDISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited. This material is based upon work supported by the Under Secretary of Defense for Research and Engineering under Air Force Contract No. FA8702-15-D-0001, and by the National Science Foundation Graduate Research Fellowship Program under Grant No. DGE 1256260. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the funding agencies.\n\nFigure 9 :\n9Worst-case manufacturing process variation (error bars) effect on unmodified and minimal jog attacks on 100-micron guard-wires.\n\nFigure 10 :\n10Number of TDR measurements required to detect the smallest jog attacks (\n\nTable 1 :\n1A2 Trojans used in T-TER effectiveness assessment.Trojan \n# Std \nCells \n\n# Placement \nSites \n\nTiming \nCritical? \n\nA2 Analog [65] \n2 \n20 \n\n\u2717 \n\nA2 Digital [65] \n91 \n1444 \n\n\u2713 \n\nstate-of-the-art layout-level defenses [3, 4, 64]. Next, we demon-\nstrate the practicality of T-TER, analyzing its power, performance, \nand area overheads. Finally, in Appendix B, we perform a threat \nassessment, demonstrating how guard wires are tamper-evident. \n\n6.1 Experimental Setup \n\n6.1.1 Surrogate SoC. We utilize the open-source Common Eval-\nuation Platform (CEP) SoC design [36] for our evaluation. The CEP \nplatform is designed as a surrogate SoC system for testing a variety \nof DoD-oriented IC technologies. \n\nTable 2 :\n2Minimum guard wire jog attack (Fig. 4C) edit-distances for each routing layer in the IBM 45 SOI process technology. B.0.1 Smallest Jog Attack. The minimum jog attack is to jog a top (or bottom) guard wire to an adjacent routing track, and attach to the targeted net from above (or below) with a via, as illustrated inRouting \nMin Wire \nMin Metal Min Attack \nTDR \n\nLayer \nSpacing ( ) Pitch ( ) \nEdit ( ) \nDetect? \n\n1 \n0.07 \n0.14 \n0.28 \n\u2713 \n\n2 \n0.07 \n0.14 \n0.28 \n\u2713 \n\n3 \n0.07 \n0.14 \n0.28 \n\u2713 \n\n4 \n0.09 \n0.19 \n0.38 \n\u2713 \n\n5 \n0.09 \n0.19 \n0.38 \n\u2713 \n\n6 \n0.14 \n0.28 \n0.56 \n\u2713 \n\n7 \n0.14 \n0.28 \n0.56 \n\u2713 \n\n8 \n0.80 \n1.60 \n3.20 \n\u2713 \n\n9 \n0.80 \n1.60 \n3.20 \n\u2713 \n\n10 \n2.00 \n4.00 \n8.00 \n\u2713 \n\n\n\nTable 2 )\n2with 95% and 99% confidence, per layer.\nIt is important to note that routing-centric and placement-centric defenses are compatible (belt and suspenders). A designer would first apply T-TER, then fill open placement sites in a targeted manner.\nTypically, fabrication turn-around times are \u22483 months[29,56].\nTool Command Language (TCL) scripts are the standard programmatic interface to commercial VLSI CAD tools. IC designers often develop a set of scripts for driving the CAD tools that automate most of the IC design process(Fig. 2).\nWe use the OR1200 version of the CEP rather RISC-V version since the OR1200 is the processor used in the A2 Trojan[65]. We are not aware of similar Trojans available in the RISC-V. We expect similar results for the RISC-V version of the CEP since both processors are RISC-based, in-order, scalar, pipelined, capable of running Linux, and operate at similar clock frequencies. Thus, from an IC layout perspective, they have similar features (e.g., wire lengths) and will have similar hardware overheads.\nTrigger spaces are contiguous groups of placement sites that are empty, or contain (removable) capacitive fill cells[54] \nThe metallization option defines the total number (and physical characteristics) of available routing (metal) layers defined within an IC's process technology.\n\nTrojan Detection using IC fingerprinting. Dakshi Agrawal, Selcuk Baktir, Deniz Karakoyunlu, Pankaj Rohatgi, Berk Sunar, IEEE Symposium on Security and Privacy (S&P). Dakshi Agrawal, Selcuk Baktir, Deniz Karakoyunlu, Pankaj Rohatgi, and Berk Sunar. 2007. Trojan Detection using IC fingerprinting. In IEEE Symposium on Security and Privacy (S&P).\n\nDesigner's hardware Trojan horse. Yousra Alkabani, Farinaz Koushanfar, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST). Yousra Alkabani and Farinaz Koushanfar. 2008. Designer's hardware Trojan horse. In IEEE International Workshop on Hardware-Oriented Security and Trust (HOST).\n\nHardware Trust through Layout Filling: a Hardware Trojan Prevention Technique. Papa-Sidy, Sophie Ba, Manikandan Dupuis, Giorgio Di Palanichamy, Bruno Natale, Rouzeyre, IEEE Computer Society Annual Symposium on VLSI (ISVLSI). Papa-Sidy Ba, Sophie Dupuis, Manikandan Palanichamy, Giorgio Di Natale, Bruno Rouzeyre, et al. 2016. Hardware Trust through Layout Filling: a Hardware Trojan Prevention Technique. In IEEE Computer Society Annual Symposium on VLSI (ISVLSI).\n\nHardware Trojan prevention using layout-level design approach. Papa-Sidy, Manikandan Ba, Sophie Palanichamy, Marie-Lise Dupuis, Giorgio Di Flottes, Bruno Natale, Rouzeyre, European Conference on Circuit Theory and Design. ECCTDPapa-Sidy Ba, Manikandan Palanichamy, Sophie Dupuis, Marie-Lise Flottes, Giorgio Di Natale, and Bruno Rouzeyre. 2015. Hardware Trojan prevention using layout-level design approach. In European Conference on Circuit Theory and Design (ECCTD).\n\nCircuits, Interconnections, and Packaging for VLSI. B Halil, Bakoglu, Halil B Bakoglu. 1990. Circuits, Interconnections, and Packaging for VLSI.\n\nElectromagnetic circuit fingerprints for hardware trojan detection. Josep Balasch, Benedikt Gierlichs, Ingrid Verbauwhede, IEEE International Symposium on Electromagnetic Compatibility (EMC). Josep Balasch, Benedikt Gierlichs, and Ingrid Verbauwhede. 2015. Electromag- netic circuit fingerprints for hardware trojan detection. In IEEE International Symposium on Electromagnetic Compatibility (EMC).\n\nHardware trojansprevention, detection, countermeasures (a literature review). Mark Beaumont, Bradley Hopkins, Tristan Newby, Defence Science and Technology Organization Edinburgh. AustraliaTechnical ReportMark Beaumont, Bradley Hopkins, and Tristan Newby. 2011. Hardware trojans- prevention, detection, countermeasures (a literature review). Technical Report. Defence Science and Technology Organization Edinburgh (Australia).\n\nStealthy dopant-level hardware trojans. T Georg, Francesco Becker, Christof Regazzoni, Wayne P Paar, Burleson, International Workshop on Cryptographic Hardware and Embedded Systems (CHES). Georg T Becker, Francesco Regazzoni, Christof Paar, and Wayne P Burleson. 2013. Stealthy dopant-level hardware trojans. In International Workshop on Cryptographic Hardware and Embedded Systems (CHES).\n\nModels of process variations in device and interconnect. Design of high performance microprocessor circuits. Duane Boning, Sani Nassif, Duane Boning and Sani Nassif. 2000. Models of process variations in device and interconnect. Design of high performance microprocessor circuits (2000).\n\nCadence Design Systems. Innovus Implementation System. n. d.Cadence Design Systems. [n. d.]. Innovus Implementation System. https: //www.cadence.com/content/cadence-www/global/en_US/home.html.\n\nElectro Optical Terahertz Pulse Reflectometry-an innovative fault isolation tool. Yongming Cai, Zhiyong Wang, Rajen Dias, Deepak Goyal, Electronic Components and Technology Conference (ECTC). Yongming Cai, Zhiyong Wang, Rajen Dias, and Deepak Goyal. 2010. Electro Optical Terahertz Pulse Reflectometry-an innovative fault isolation tool. In Electronic Components and Technology Conference (ECTC), 2010 Proceedings 60th.\n\nHardware Trojan: Threats and emerging solutions. Seetharam Rajat Subhra Chakraborty, Swarup Narasimhan, Bhunia, IEEE International High Level Design Validation and Test Workshop (HLDVT). IEEERajat Subhra Chakraborty, Seetharam Narasimhan, and Swarup Bhunia. 2009. Hardware Trojan: Threats and emerging solutions. In IEEE International High Level Design Validation and Test Workshop (HLDVT). IEEE.\n\nNondestructive analysis of interconnection in two-die BGA using TDR. Ming-Kun Chen, Cheng-Chi Tai, Yu-Jung Huang, IEEE Transactions on Instrumentation and Measurement. Ming-Kun Chen, Cheng-Chi Tai, and Yu-Jung Huang. 2006. Nondestructive analysis of interconnection in two-die BGA using TDR. IEEE Transactions on Instrumentation and Measurement (2006).\n\nTemperature tracking: An innovative run-time approach for hardware Trojan detection. Domenic Forte, Chongxi Bao, Ankur Srivastava, IEEE/ACM International Conference on Computer-Aided Design (ICCAD). Domenic Forte, Chongxi Bao, and Ankur Srivastava. 2013. Temperature tracking: An innovative run-time approach for hardware Trojan detection. In IEEE/ACM International Conference on Computer-Aided Design (ICCAD).\n\nCharacterization and modeling of multiple line interconnections from time domain measurements. A Leonard, Hayden, K Vijai, Tripathi, IEEE Transactions on Microwave Theory and Techniques. Leonard A Hayden and Vijai K Tripathi. 1994. Characterization and model- ing of multiple line interconnections from time domain measurements. IEEE Transactions on Microwave Theory and Techniques (1994).\n\nOvercoming an Untrusted Computing Base: Detecting and Removing Malicious Hardware Automatically. Matthew Hicks, Murph Finnicum, Samuel T King, Milo M K Martin, Jonathan M Smith, IEEE Symposium on Security and Privacy (S&P). Matthew Hicks, Murph Finnicum, Samuel T. King, Milo M. K. Martin, and Jonathan M. Smith. 2010. Overcoming an Untrusted Computing Base: Detecting and Removing Malicious Hardware Automatically. In IEEE Symposium on Security and Privacy (S&P).\n\nMatthew Hicks, Cynthia Sturton, Samuel T King, Jonathan M Smith, SPECS: A Lightweight Runtime Mechanism for Protecting Software from Security-Critical Processor Bugs. In International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). Matthew Hicks, Cynthia Sturton, Samuel T. King, and Jonathan M. Smith. 2015. SPECS: A Lightweight Runtime Mechanism for Protecting Software from Security- Critical Processor Bugs. In International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS).\n\nRasP: an area-efficient, on-chip network. Simon Hollis, W Simon, Moore, 2006 International Conference on Computer Design. IEEE. Simon Hollis and Simon W Moore. 2006. RasP: an area-efficient, on-chip network. In 2006 International Conference on Computer Design. IEEE, 63-69.\n\nPulse generation for on-chip data transmission. J Simon, Hollis, 12th Euromicro Conference on Digital System Design, Architectures, Methods and Tools. IEEESimon J Hollis. 2009. Pulse generation for on-chip data transmission. In 2009 12th Euromicro Conference on Digital System Design, Architectures, Methods and Tools. IEEE, 303-310.\n\nR2D2: Runtime reassurance and detection of A2 trojan. Yumin Hou, Kaveh Hu He, Yier Shamsi, Dong Jin, Huaqiang Wu, Wu, International Symposium on Hardware Oriented Security and Trust (HOST). IEEEYumin Hou, Hu He, Kaveh Shamsi, Yier Jin, Dong Wu, and Huaqiang Wu. 2018. R2D2: Runtime reassurance and detection of A2 trojan. In International Sympo- sium on Hardware Oriented Security and Trust (HOST). IEEE.\n\nReconstruction of nonuniform transmission lines from time-domain reflectometry. Te-Wen Ching-Wen Hsue, Pan, IEEE Transactions on Microwave Theory and Techniques. Ching-Wen Hsue and Te-Wen Pan. 1997. Reconstruction of nonuniform trans- mission lines from time-domain reflectometry. IEEE Transactions on Microwave Theory and Techniques (1997).\n\nSecuring Computer Hardware Using 3D Integrated Circuit (IC) Technology and Split Manufacturing for Obfuscation. Frank Imeson, Ariq Emtenan, Siddharth Garg, Mahesh Tripunitara, USENIX Security Symposium. Frank Imeson, Ariq Emtenan, Siddharth Garg, and Mahesh Tripunitara. 2013. Securing Computer Hardware Using 3D Integrated Circuit (IC) Technology and Split Manufacturing for Obfuscation. In USENIX Security Symposium.\n\nDFTT: Design for Trojan test. Yier Jin, Nathan Kupp, Yiorgos Makris, IEEE International Conference on Electronics, Circuits, and Systems (ICECS). Yier Jin, Nathan Kupp, and Yiorgos Makris. 2010. DFTT: Design for Trojan test. In IEEE International Conference on Electronics, Circuits, and Systems (ICECS).\n\nHardware Trojan detection using path delay fingerprint. Yier Jin, Yiorgos Makris, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST). Yier Jin and Yiorgos Makris. 2008. Hardware Trojan detection using path delay fingerprint. In IEEE International Workshop on Hardware-Oriented Security and Trust (HOST).\n\nDetecting hardware trojans using on-chip sensors in an ASIC design. Shane Kelly, Xuehui Zhang, Mohammed Tehranipoor, Andrew Ferraiuolo, Journal of Electronic Testing. 31Shane Kelly, Xuehui Zhang, Mohammed Tehranipoor, and Andrew Ferraiuolo. 2015. Detecting hardware trojans using on-chip sensors in an ASIC design. Journal of Electronic Testing 31, 1 (2015), 11-26.\n\nDesigning and Implementing Malicious Hardware. T Samuel, Joseph King, Anthony Tucek, Chris Cozzie, Weihang Grier, Yuanyuan Jiang, Zhou, Proceedings of the Usenix Workshop on Large-Scale Exploits and Emergent Threats (LEET). the Usenix Workshop on Large-Scale Exploits and Emergent Threats (LEET)Samuel T. King, Joseph Tucek, Anthony Cozzie, Chris Grier, Weihang Jiang, and Yuanyuan Zhou. 2008. Designing and Implementing Malicious Hardware. In Proceedings of the Usenix Workshop on Large-Scale Exploits and Emergent Threats (LEET).\n\nAlternative dielectrics to silicon dioxide for memory and logic devices. Jon-Paul Angus I Kingon, S K Maria, Streiffer, Nature. Angus I Kingon, Jon-Paul Maria, and SK Streiffer. 2000. Alternative dielectrics to silicon dioxide for memory and logic devices. Nature (2000).\n\nParametric trojans for fault-injection attacks on cryptographic hardware. Raghavan Kumar, Philipp Jovanovic, Wayne Burleson, Ilia Polian, Workshop on Fault Diagnosis and Tolerance in Cryptography (FDTC). Raghavan Kumar, Philipp Jovanovic, Wayne Burleson, and Ilia Polian. 2014. Parametric trojans for fault-injection attacks on cryptographic hardware. In Workshop on Fault Diagnosis and Tolerance in Cryptography (FDTC).\n\nBattling Fab Cycle Times. Mark Lapedus, Mark Lapedus. 2017. Battling Fab Cycle Times. https://semiengineering.com/ battling-fab-cycle-times/.\n\nBig Trouble At 3nm. Mark Lapedus, Mark Lapedus. 2018. Big Trouble At 3nm. https://semiengineering.com/big- trouble-at-3nm/.\n\nMark Lapedus, GF Puts 7nm On Hold. Mark Lapedus. 2018. GF Puts 7nm On Hold. https://semiengineering.com/gf- puts-7nm-on-hold/.\n\nAt-speed delay characterization for IC authentication and Trojan horse detection. Jie Li, John Lach, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST). Jie Li and John Lach. 2008. At-speed delay characterization for IC authentication and Trojan horse detection. In IEEE International Workshop on Hardware-Oriented Security and Trust (HOST).\n\nCharacterization of Interconnect Process Variation in CMOS Using Electrical Measurements and Field Solver. Nor Jun Jun Lim, Adila Johari, C Subhash, Narain D Rustagi, Arora, IEEE Transactions on Electron Devices. Jun Jun Lim, Nor Adila Johari, Subhash C Rustagi, and Narain D Arora. 2014. Characterization of Interconnect Process Variation in CMOS Using Electrical Measurements and Field Solver. IEEE Transactions on Electron Devices (2014).\n\nTrojan Side-Channels: Lightweight Hardware Trojans through Side-Channel Engineering. Lang Lin, Markus Kasper, Tim G\u00fcneysu, Christof Paar, Wayne Burleson, International Workshop on Cryptographic Hardware and Embedded Systems (CHES). Lang Lin, Markus Kasper, Tim G\u00fcneysu, Christof Paar, and Wayne Burleson. 2009. Trojan Side-Channels: Lightweight Hardware Trojans through Side-Channel En- gineering.. In International Workshop on Cryptographic Hardware and Embedded Systems (CHES).\n\nSWAN: mitigating hardware trojans with design ambiguity. Timothy Linscott, Pete Ehrett, Valeria Bertacco, Todd Austin, IEEE/ACM International Conference on Computer-Aided Design (ICCAD). IEEETimothy Linscott, Pete Ehrett, Valeria Bertacco, and Todd Austin. 2018. SWAN: mitigating hardware trojans with design ambiguity. In IEEE/ACM International Conference on Computer-Aided Design (ICCAD). IEEE.\n\n. Common Evaluation Platform. Common Evaluation Platform. https://github. com/mit-ll/CEP.\n\nContact-free fault location and imaging with on-chip terahertz time-domain reflectometry. Michael Nagel, Alexander Michalski, Heinrich Kurz, Optics Express. Michael Nagel, Alexander Michalski, and Heinrich Kurz. 2011. Contact-free fault location and imaging with on-chip terahertz time-domain reflectometry. Optics Express (2011).\n\nTeSR: A robust temporal self-referencing approach for hardware Trojan detection. Seetharam Narasimhan, Xinmu Wang, Dongdong Du, IEEE International Symposium on Hardware-Oriented Security and Trust (HOST). Rajat Subhra Chakraborty, and Swarup BhuniaSeetharam Narasimhan, Xinmu Wang, Dongdong Du, Rajat Subhra Chakraborty, and Swarup Bhunia. 2011. TeSR: A robust temporal self-referencing approach for hardware Trojan detection. In IEEE International Symposium on Hardware- Oriented Security and Trust (HOST).\n\nComparative TDR analysis as a packaging FA tool. C Odegard, C Lambert, ISTFA 1999: 25 th International Symposium for Testing and Failure Analysis. C Odegard and C Lambert. 1999. Comparative TDR analysis as a packaging FA tool. In ISTFA 1999: 25 th International Symposium for Testing and Failure Analysis.\n\nOpencores, Org, OpenRISC OR1200 Processor. n. d.OpenCores.org. [n. d.]. OpenRISC OR1200 Processor. https://github.com/ openrisc/or1200.\n\nSingle-mode fiber OTDR: Experiment and theory. Ian A Dan L Philen, Jane F White, Stephen C Kuhl, Mettler, IEEE Transactions on Microwave Theory and Techniques. Dan L Philen, Ian A White, Jane F Kuhl, and Stephen C Mettler. 1982. Single-mode fiber OTDR: Experiment and theory. IEEE Transactions on Microwave Theory and Techniques (1982).\n\nHardware Trojan horse detection using gate-level characterization. Miodrag Potkonjak, Ani Nahapetian, Michael Nelson, Tammara Massey, Proceedings of ACM/IEEE Design Automation Conference (DAC). ACM/IEEE Design Automation Conference (DAC)Miodrag Potkonjak, Ani Nahapetian, Michael Nelson, and Tammara Massey. 2009. Hardware Trojan horse detection using gate-level characterization. In Proceedings of ACM/IEEE Design Automation Conference (DAC).\n\nHardware Security: Threat Models and Metrics. Masoud Rostami, Farinaz Koushanfar, Jeyavijayan Rajendran, Ramesh Karri, Proceedings of the International Conference on Computer-Aided Design (ICCD). the International Conference on Computer-Aided Design (ICCD)Masoud Rostami, Farinaz Koushanfar, Jeyavijayan Rajendran, and Ramesh Karri. 2013. Hardware Security: Threat Models and Metrics. In Proceedings of the International Conference on Computer-Aided Design (ICCD).\n\nProcess reliability based trojans through NBTI and HCI effects. Yuriy Shiyanovskii, Aravind Wolff, C Rajendran, Papachristou, W Weyer, Clay, NASA/ESA Conference on Adaptive Hardware and Systems (AHS). Yuriy Shiyanovskii, F Wolff, Aravind Rajendran, C Papachristou, D Weyer, and W Clay. 2010. Process reliability based trojans through NBTI and HCI effects. In NASA/ESA Conference on Adaptive Hardware and Systems (AHS).\n\nElectronic Package Fault Isolation Using TDR. Smolyansky, ASM International. D Smolyansky. 2004. Electronic Package Fault Isolation Using TDR. ASM Inter- national (2004).\n\nMicrowave Locating Reflectometer. P I Somlo, Hollway, Electronics Letters. PI Somlo and DL Hollway. 1969. Microwave Locating Reflectometer. Electronics Letters (1969).\n\nDesign Rule Complexity Rising. Ed Sperling, Ed Sperling. 2018. Design Rule Complexity Rising. https://semiengineering.com/ design-rule-complexity-rising/.\n\nReversing stealthy dopant-level circuits. Takeshi Sugawara, Daisuke Suzuki, Ryoichi Fujii, Shigeaki Tawa, Ryohei Hori, Mitsuru Shiozaki, Takeshi Fujino, International Workshop on Cryptographic Hardware and Embedded Systems (CHES). Takeshi Sugawara, Daisuke Suzuki, Ryoichi Fujii, Shigeaki Tawa, Ryohei Hori, Mitsuru Shiozaki, and Takeshi Fujino. 2014. Reversing stealthy dopant-level circuits. In International Workshop on Cryptographic Hardware and Embedded Systems (CHES).\n\nAs Edge speeds increase, wires become transmission lines. James Sutherland, EDN. James Sutherland. 1999. As Edge speeds increase, wires become transmission lines. EDN (1999).\n\nAdvanced fault isolation technique using electro-optical terahertz pulse reflectometry. M Y Tay, M Cao, Venkata, Tran, Donna, Qiu, Alton, M Taday, Lin, Physical and Failure Analysis of Integrated Circuits (IPFA). IEEE International Symposium on theMY Tay, L Cao, M Venkata, L Tran, W Donna, W Qiu, J Alton, PF Taday, and M Lin. 2012. Advanced fault isolation technique using electro-optical terahertz pulse reflectometry. In Physical and Failure Analysis of Integrated Circuits (IPFA), 2012 19th IEEE International Symposium on the.\n\nA survey of hardware trojan taxonomy and detection. Mohammad Tehranipoor, Farinaz Koushanfar, IEEE Design & Test of Computers. 271Mohammad Tehranipoor and Farinaz Koushanfar. 2010. A survey of hardware trojan taxonomy and detection. IEEE Design & Test of Computers 27, 1 (2010).\n\nElectro Optical Terahertz Pulse Reflectometry: The world's fastest and most accurate fault isolation system. Teraview, TeraView. [n. d.]. Electro Optical Terahertz Pulse Reflectometry: The world's fastest and most accurate fault isolation system.\n\nComplete Information Flow Tracking from the Gates Up. Mohit Tiwari, M G Hassan, Bita Wassel, Shashidhar Mazloom, Frederic T Mysore, Timothy Chong, Sherwood, International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS. Mohit Tiwari, Hassan M.G. Wassel, Bita Mazloom, Shashidhar Mysore, Frederic T. Chong, and Timothy Sherwood. 2009. Complete Information Flow Tracking from the Gates Up. In International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). 109-120.\n\nICAS: an Extensible Framework for Estimating the Susceptibility of IC Layouts to Additive Trojans. Timothy Trippel, G Kang, Kevin B Shin, Matthew Bush, Hicks, IEEE Symposium on Security and Privacy (S&P). Timothy Trippel, Kang G. Shin, Kevin B. Bush, and Matthew Hicks. 2020. ICAS: an Extensible Framework for Estimating the Susceptibility of IC Layouts to Additive Trojans. In IEEE Symposium on Security and Privacy (S&P).\n\nBomberman: Defining and Defeating Hardware Ticking Timebombs at Design-time. Timothy Trippel, G Kang, Kevin B Shin, Matthew Bush, Hicks, To appear in the IEEE Symposium on Security and Privacy (S&P). Timothy Trippel, Kang G. Shin, Kevin B. Bush, and Matthew Hicks. 2021. Bomber- man: Defining and Defeating Hardware Ticking Timebombs at Design-time. In To appear in the IEEE Symposium on Security and Privacy (S&P).\n\nTSMC. 2019. TSMC Fabrication Schedule -2019. TSMC. 2019. TSMC Fabrication Schedule -2019. https://www.mosis.com/db/ pubf/fsched?ORG=TSMC.\n\n. Denys Vlasenko, n. d.Denys Vlasenko. [n. d.]. BusyBox. https://www.busybox.net/.\n\nFANCI: identification of stealthy malicious logic using boolean functional analysis. Adam Waksman, Matthew Suozzo, Simha Sethumadhavan, Proceedings of the ACM SIGSAC Conference on Computer & Communications Security (CCS). the ACM SIGSAC Conference on Computer & Communications Security (CCS)Adam Waksman, Matthew Suozzo, and Simha Sethumadhavan. 2013. FANCI: identification of stealthy malicious logic using boolean functional analysis. In Proceedings of the ACM SIGSAC Conference on Computer & Communications Security (CCS).\n\nAdib Nahiyan, Domenic Forte, and Mark M Tehranipoor. 2019. A physical design flow against front-side probing attacks by internal shielding. Huanyu Wang, Qihang Shi, Transactions on Computer-Aided Design of Integrated Circuits and Systems. Huanyu Wang, Qihang Shi, Adib Nahiyan, Domenic Forte, and Mark M Tehra- nipoor. 2019. A physical design flow against front-side probing attacks by internal shielding. Transactions on Computer-Aided Design of Integrated Circuits and Sys- tems (2019).\n\nRouting perturbation for enhanced security in split manufacturing. Yujie Wang, Pu Chen, Jiang Hu, Rajendran, 22nd Asia and South Pacific Design Automation Conference (ASP-DAC). IEEEYujie Wang, Pu Chen, Jiang Hu, and Jeyavijayan JV Rajendran. 2017. Routing perturbation for enhanced security in split manufacturing. In 22nd Asia and South Pacific Design Automation Conference (ASP-DAC). IEEE.\n\n. Stephen Williams, n. d.Stephen Williams. [n. d.].\n\n. Icarus Verilog, Icarus Verilog. http://iverilog.icarus.com/.\n\nTowards Trojan-free trusted ICs: Problem analysis and detection scheme. Francis Wolff, Chris Papachristou, Swarup Bhunia, Rajat S Chakraborty, Proceedings of the ACM Conference on Design, Automation and Test in Europe (DATE). the ACM Conference on Design, Automation and Test in Europe (DATE)Francis Wolff, Chris Papachristou, Swarup Bhunia, and Rajat S Chakraborty. 2008. Towards Trojan-free trusted ICs: Problem analysis and detection scheme. In Proceedings of the ACM Conference on Design, Automation and Test in Europe (DATE).\n\nHardware trojans: Lessons learned after one decade of research. Kan Xiao, Domenic Forte, Yier Jin, Ramesh Karri, Transactions on Design Automation of Electronic Systems. TODAESSwarup Bhunia, and Mohammad TehranipoorKan Xiao, Domenic Forte, Yier Jin, Ramesh Karri, Swarup Bhunia, and Moham- mad Tehranipoor. 2016. Hardware trojans: Lessons learned after one decade of research. Transactions on Design Automation of Electronic Systems (TODAES) (2016).\n\nBISA: Built-in self-authentication for preventing hardware Trojan insertion. Kan Xiao, Mohammed Tehranipoor, IEEE International Symposium on Hardware-Oriented Security and Trust (HOST). Kan Xiao and Mohammed Tehranipoor. 2013. BISA: Built-in self-authentication for preventing hardware Trojan insertion. In IEEE International Symposium on Hardware-Oriented Security and Trust (HOST).\n\nA2: Analog malicious hardware. Kaiyuan Yang, Matthew Hicks, Qing Dong, Todd Austin, Dennis Sylvester, IEEE Symposium on Security and Privacy (S&P). Kaiyuan Yang, Matthew Hicks, Qing Dong, Todd Austin, and Dennis Sylvester. 2016. A2: Analog malicious hardware. In IEEE Symposium on Security and Privacy (S&P).\n\nIdentifying Security Critical Properties for the Dynamic Verification of a Processor. Rui Zhang, Natalie Stanley, Christopher Griggs, Andrew Chi, Cynthia Sturton, International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). Rui Zhang, Natalie Stanley, Christopher Griggs, Andrew Chi, and Cynthia Sturton. 2017. Identifying Security Critical Properties for the Dynamic Verification of a Processor. In International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS).\n\nTransys: Leveraging Common Security Properties Across Hardware Designs. Rui Zhang, Cynthia Sturton, IEEE Symposium on Security and Privacy (S&P). Rui Zhang and Cynthia Sturton. 2020. Transys: Leveraging Common Security Properties Across Hardware Designs. In IEEE Symposium on Security and Privacy (S&P).\n\nRON: An on-chip ring oscillator network for hardware Trojan detection. Xuehui Zhang, Mohammad Tehranipoor, Design, Automation & Test in Europe. IEEE. Xuehui Zhang and Mohammad Tehranipoor. 2011. RON: An on-chip ring oscilla- tor network for hardware Trojan detection. In 2011 Design, Automation & Test in Europe. IEEE, 1-6.\n\nDetecting hardware trojans using backside optical imaging of embedded watermarks. Boyou Zhou, Ronen Adato, Mahmoud Zangeneh, Tianyu Yang, Aydan Uyar, Bennett Goldberg, Selim Unlu, Ajay Joshi, Proceedings of IEEE Design Automation Conference (DAC). IEEE Design Automation Conference (DAC)Boyou Zhou, Ronen Adato, Mahmoud Zangeneh, Tianyu Yang, Aydan Uyar, Bennett Goldberg, Selim Unlu, and Ajay Joshi. 2015. Detecting hardware trojans using backside optical imaging of embedded watermarks. In Proceedings of IEEE Design Automation Conference (DAC).\n", "annotations": {"author": "[{\"end\":89,\"start\":68},{\"end\":114,\"start\":90},{\"end\":150,\"start\":115},{\"end\":181,\"start\":151},{\"end\":281,\"start\":182},{\"end\":320,\"start\":282}]", "publisher": null, "author_last_name": "[{\"end\":88,\"start\":84},{\"end\":96,\"start\":92},{\"end\":127,\"start\":123},{\"end\":164,\"start\":159}]", "author_first_name": "[{\"end\":75,\"start\":68},{\"end\":83,\"start\":76},{\"end\":91,\"start\":90},{\"end\":120,\"start\":115},{\"end\":122,\"start\":121},{\"end\":158,\"start\":151}]", "author_affiliation": "[{\"end\":280,\"start\":183},{\"end\":319,\"start\":283}]", "title": "[{\"end\":65,\"start\":1},{\"end\":385,\"start\":321}]", "venue": null, "abstract": null, "bib_ref": "[{\"attributes\":{\"ref_id\":\"b29\"},\"end\":931,\"start\":927},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":1413,\"start\":1409},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":1900,\"start\":1896},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":2019,\"start\":2015},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2255,\"start\":2252},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2258,\"start\":2255},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":2261,\"start\":2258},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":2264,\"start\":2261},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":2267,\"start\":2264},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":2270,\"start\":2267},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2305,\"start\":2302},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":2308,\"start\":2305},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":2311,\"start\":2308},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":2314,\"start\":2311},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":2659,\"start\":2655},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2855,\"start\":2852},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":2858,\"start\":2855},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":2861,\"start\":2858},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":2864,\"start\":2861},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3884,\"start\":3881},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3886,\"start\":3884},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":3889,\"start\":3886},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4253,\"start\":4250},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":4292,\"start\":4288},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4552,\"start\":4549},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4554,\"start\":4552},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":5032,\"start\":5028},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5472,\"start\":5468},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":5475,\"start\":5472},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":5775,\"start\":5771},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":7310,\"start\":7306},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7401,\"start\":7398},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7403,\"start\":7401},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":7498,\"start\":7494},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":7501,\"start\":7500},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":8188,\"start\":8185},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8190,\"start\":8188},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8192,\"start\":8190},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":8195,\"start\":8192},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8198,\"start\":8195},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":8201,\"start\":8198},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":8204,\"start\":8201},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":8207,\"start\":8204},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":8946,\"start\":8943},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9015,\"start\":9011},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9018,\"start\":9015},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":9021,\"start\":9018},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":9024,\"start\":9021},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9138,\"start\":9134},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9141,\"start\":9138},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":9144,\"start\":9141},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":9147,\"start\":9144},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":9150,\"start\":9147},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":9570,\"start\":9566},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":9573,\"start\":9570},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":9576,\"start\":9573},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":9579,\"start\":9576},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":9614,\"start\":9610},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":9617,\"start\":9614},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":9620,\"start\":9617},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":10072,\"start\":10068},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":10104,\"start\":10100},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":10139,\"start\":10135},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":10513,\"start\":10509},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":10782,\"start\":10779},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":10785,\"start\":10782},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":10788,\"start\":10785},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":11471,\"start\":11467},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":11575,\"start\":11571},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":12376,\"start\":12373},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":12378,\"start\":12376},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":12381,\"start\":12378},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":12399,\"start\":12395},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":12516,\"start\":12513},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":12576,\"start\":12573},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":12646,\"start\":12642},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13108,\"start\":13104},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13111,\"start\":13108},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":13506,\"start\":13503},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":13831,\"start\":13827},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":14027,\"start\":14023},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":14345,\"start\":14341},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":15195,\"start\":15191},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":15198,\"start\":15195},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":15307,\"start\":15303},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":15310,\"start\":15307},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":15313,\"start\":15310},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":15457,\"start\":15453},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":15460,\"start\":15457},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":15463,\"start\":15460},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":15466,\"start\":15463},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":15861,\"start\":15857},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":15864,\"start\":15861},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":15996,\"start\":15992},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":15999,\"start\":15996},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":16002,\"start\":15999},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":16005,\"start\":16002},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":16008,\"start\":16005},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":16011,\"start\":16008},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":16298,\"start\":16294},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":16700,\"start\":16697},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":16703,\"start\":16700},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":16706,\"start\":16703},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":16786,\"start\":16782},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":17688,\"start\":17684},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":17964,\"start\":17963},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":18809,\"start\":18806},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":18811,\"start\":18809},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":18814,\"start\":18811},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":18817,\"start\":18814},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":18955,\"start\":18951},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":18958,\"start\":18955},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":18961,\"start\":18958},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":18964,\"start\":18961},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":18967,\"start\":18964},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":18970,\"start\":18967},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19431,\"start\":19427},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":19434,\"start\":19431},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":19437,\"start\":19434},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":19440,\"start\":19437},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":19443,\"start\":19440},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":19446,\"start\":19443},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19633,\"start\":19629},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":19636,\"start\":19633},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":19639,\"start\":19636},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":19666,\"start\":19662},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":19669,\"start\":19666},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19903,\"start\":19899},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":19906,\"start\":19903},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":19909,\"start\":19906},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":20049,\"start\":20045},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":20052,\"start\":20049},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":20099,\"start\":20095},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":20193,\"start\":20189},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":20234,\"start\":20230},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":20258,\"start\":20254},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":20313,\"start\":20309},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":20414,\"start\":20411},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":20417,\"start\":20414},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":21511,\"start\":21507},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":21514,\"start\":21511},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":22126,\"start\":22122},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":22129,\"start\":22126},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":26141,\"start\":26137},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":26166,\"start\":26162},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":26243,\"start\":26239},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":26971,\"start\":26967},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":29753,\"start\":29749},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31789,\"start\":31785},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":32095,\"start\":32094},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":34046,\"start\":34042},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":34100,\"start\":34099},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":34753,\"start\":34749},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":34831,\"start\":34827},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":34834,\"start\":34831},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":34870,\"start\":34866},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":35625,\"start\":35621},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":35866,\"start\":35862},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":36523,\"start\":36519},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":37152,\"start\":37148},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":37155,\"start\":37152},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":37158,\"start\":37155},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":37496,\"start\":37492},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":38681,\"start\":38678},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":38683,\"start\":38681},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":39072,\"start\":39069},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":39074,\"start\":39072},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":39227,\"start\":39223},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":42275,\"start\":42271},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":44400,\"start\":44396},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":47751,\"start\":47747},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":47754,\"start\":47751},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":48184,\"start\":48181},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":48186,\"start\":48184},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":48189,\"start\":48186},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":48192,\"start\":48189},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":48195,\"start\":48192},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":50202,\"start\":50198},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":51440,\"start\":51436},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":51483,\"start\":51479},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":53152,\"start\":53149},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":53155,\"start\":53152},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":53158,\"start\":53155},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":53274,\"start\":53270},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":53277,\"start\":53274},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":53324,\"start\":53320},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":53642,\"start\":53639},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":53644,\"start\":53642},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":53647,\"start\":53644},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":53650,\"start\":53647},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":53664,\"start\":53660},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":53690,\"start\":53686},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":53693,\"start\":53690},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":53696,\"start\":53693},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":53762,\"start\":53759},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":53764,\"start\":53762},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":53767,\"start\":53764},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":53886,\"start\":53882},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":54282,\"start\":54279},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":54284,\"start\":54282},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":54287,\"start\":54284},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":54377,\"start\":54373},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":54920,\"start\":54917},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":55153,\"start\":55149},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":55436,\"start\":55432},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":55748,\"start\":55744},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":56226,\"start\":56222},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":60657,\"start\":60653},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":60933,\"start\":60929},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":60986,\"start\":60982},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":60989,\"start\":60986},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":60992,\"start\":60989},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":60995,\"start\":60992},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":61257,\"start\":61253},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":61852,\"start\":61849},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":61989,\"start\":61985},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":61992,\"start\":61989},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":61995,\"start\":61992},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":61998,\"start\":61995},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":62546,\"start\":62542},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":62664,\"start\":62660},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":64204,\"start\":64200},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":64716,\"start\":64712},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":64862,\"start\":64859},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":64864,\"start\":64862},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":68305,\"start\":68301},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":68308,\"start\":68305},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":68657,\"start\":68653},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":69162,\"start\":69158}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":63424,\"start\":63146},{\"attributes\":{\"id\":\"fig_1\"},\"end\":63501,\"start\":63425},{\"attributes\":{\"id\":\"fig_2\"},\"end\":64162,\"start\":63502},{\"attributes\":{\"id\":\"fig_3\"},\"end\":64649,\"start\":64163},{\"attributes\":{\"id\":\"fig_4\"},\"end\":65859,\"start\":64650},{\"attributes\":{\"id\":\"fig_5\"},\"end\":66376,\"start\":65860},{\"attributes\":{\"id\":\"fig_6\"},\"end\":66517,\"start\":66377},{\"attributes\":{\"id\":\"fig_7\"},\"end\":66605,\"start\":66518},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":67313,\"start\":66606},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":67991,\"start\":67314},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":68043,\"start\":67992}]", "paragraph": "[{\"end\":1147,\"start\":426},{\"end\":1665,\"start\":1149},{\"end\":2126,\"start\":1667},{\"end\":2561,\"start\":2128},{\"end\":3480,\"start\":2563},{\"end\":4867,\"start\":3482},{\"end\":5887,\"start\":4869},{\"end\":6197,\"start\":5889},{\"end\":6235,\"start\":6199},{\"end\":6597,\"start\":6237},{\"end\":7502,\"start\":6599},{\"end\":8817,\"start\":7539},{\"end\":9189,\"start\":8838},{\"end\":9760,\"start\":9199},{\"end\":10514,\"start\":9770},{\"end\":12154,\"start\":10524},{\"end\":12788,\"start\":12181},{\"end\":13393,\"start\":12824},{\"end\":13732,\"start\":13421},{\"end\":14383,\"start\":13734},{\"end\":14899,\"start\":14439},{\"end\":15609,\"start\":14901},{\"end\":16245,\"start\":15626},{\"end\":16787,\"start\":16247},{\"end\":18473,\"start\":16789},{\"end\":19052,\"start\":18517},{\"end\":19265,\"start\":19054},{\"end\":20418,\"start\":19313},{\"end\":22158,\"start\":20448},{\"end\":22637,\"start\":22189},{\"end\":23047,\"start\":22666},{\"end\":24240,\"start\":23049},{\"end\":25173,\"start\":24269},{\"end\":25950,\"start\":25175},{\"end\":26672,\"start\":25952},{\"end\":27107,\"start\":26691},{\"end\":28023,\"start\":27133},{\"end\":29939,\"start\":28047},{\"end\":31424,\"start\":29949},{\"end\":32206,\"start\":31434},{\"end\":33396,\"start\":32208},{\"end\":33753,\"start\":33398},{\"end\":35038,\"start\":33768},{\"end\":35378,\"start\":35040},{\"end\":35463,\"start\":35380},{\"end\":36636,\"start\":35465},{\"end\":36913,\"start\":36667},{\"end\":36999,\"start\":36915},{\"end\":37650,\"start\":37001},{\"end\":38390,\"start\":37652},{\"end\":40557,\"start\":38408},{\"end\":41839,\"start\":40583},{\"end\":44095,\"start\":41867},{\"end\":44470,\"start\":44097},{\"end\":46841,\"start\":44487},{\"end\":47258,\"start\":46843},{\"end\":47625,\"start\":47273},{\"end\":48418,\"start\":47627},{\"end\":49960,\"start\":48420},{\"end\":50801,\"start\":49962},{\"end\":51325,\"start\":50803},{\"end\":51710,\"start\":51327},{\"end\":52685,\"start\":51725},{\"end\":52869,\"start\":52705},{\"end\":53399,\"start\":52888},{\"end\":53768,\"start\":53401},{\"end\":54288,\"start\":53770},{\"end\":54817,\"start\":54290},{\"end\":55509,\"start\":54819},{\"end\":56174,\"start\":55511},{\"end\":56832,\"start\":56176},{\"end\":57375,\"start\":56872},{\"end\":57491,\"start\":57377},{\"end\":57552,\"start\":57493},{\"end\":58650,\"start\":57554},{\"end\":59271,\"start\":58652},{\"end\":59417,\"start\":59287},{\"end\":59520,\"start\":59437},{\"end\":60934,\"start\":59522},{\"end\":61418,\"start\":60936},{\"end\":61853,\"start\":61429},{\"end\":63145,\"start\":61855}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":14438,\"start\":14384},{\"attributes\":{\"id\":\"formula_2\"},\"end\":59286,\"start\":59272},{\"attributes\":{\"id\":\"formula_3\"},\"end\":59436,\"start\":59418},{\"attributes\":{\"id\":\"formula_4\"},\"end\":61428,\"start\":61419}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":36635,\"start\":36628},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":58470,\"start\":58463},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":62449,\"start\":62441},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":63032,\"start\":63005}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":424,\"start\":412},{\"attributes\":{\"n\":\"2\"},\"end\":7537,\"start\":7505},{\"attributes\":{\"n\":\"2.2\"},\"end\":8836,\"start\":8820},{\"end\":9197,\"start\":9192},{\"end\":9768,\"start\":9763},{\"end\":10522,\"start\":10517},{\"attributes\":{\"n\":\"2.2.4\"},\"end\":12179,\"start\":12157},{\"attributes\":{\"n\":\"2.3\"},\"end\":12822,\"start\":12791},{\"attributes\":{\"n\":\"2.3.1\"},\"end\":13419,\"start\":13396},{\"attributes\":{\"n\":\"3\"},\"end\":15624,\"start\":15612},{\"attributes\":{\"n\":\"4\"},\"end\":18515,\"start\":18476},{\"attributes\":{\"n\":\"4.1\"},\"end\":19311,\"start\":19268},{\"attributes\":{\"n\":\"4.2\"},\"end\":20446,\"start\":20421},{\"attributes\":{\"n\":\"4.3\"},\"end\":22187,\"start\":22161},{\"end\":22664,\"start\":22640},{\"attributes\":{\"n\":\"4.3.2\"},\"end\":24267,\"start\":24243},{\"attributes\":{\"n\":\"5\"},\"end\":26689,\"start\":26675},{\"attributes\":{\"n\":\"5.1\"},\"end\":27131,\"start\":27110},{\"attributes\":{\"n\":\"5.2\"},\"end\":28045,\"start\":28026},{\"end\":29947,\"start\":29942},{\"end\":31432,\"start\":31427},{\"attributes\":{\"n\":\"6\"},\"end\":33766,\"start\":33756},{\"attributes\":{\"n\":\"6.1.3\"},\"end\":36665,\"start\":36639},{\"attributes\":{\"n\":\"6.2\"},\"end\":38406,\"start\":38393},{\"attributes\":{\"n\":\"6.2.1\"},\"end\":40581,\"start\":40560},{\"attributes\":{\"n\":\"6.2.2\"},\"end\":41865,\"start\":41842},{\"attributes\":{\"n\":\"6.3\"},\"end\":44485,\"start\":44473},{\"attributes\":{\"n\":\"7\"},\"end\":47271,\"start\":47261},{\"attributes\":{\"n\":\"8\"},\"end\":51723,\"start\":51713},{\"end\":52703,\"start\":52688},{\"end\":52886,\"start\":52872},{\"end\":56870,\"start\":56835},{\"end\":63157,\"start\":63147},{\"end\":63436,\"start\":63426},{\"end\":63513,\"start\":63503},{\"end\":64174,\"start\":64164},{\"end\":64671,\"start\":64651},{\"end\":66388,\"start\":66378},{\"end\":66530,\"start\":66519},{\"end\":66616,\"start\":66607},{\"end\":67324,\"start\":67315},{\"end\":68002,\"start\":67993}]", "table": "[{\"end\":67313,\"start\":66668},{\"end\":67991,\"start\":67643}]", "figure_caption": "[{\"end\":63424,\"start\":63159},{\"end\":63501,\"start\":63438},{\"end\":64162,\"start\":63515},{\"end\":64649,\"start\":64176},{\"end\":65859,\"start\":64674},{\"end\":66376,\"start\":65862},{\"end\":66517,\"start\":66390},{\"end\":66605,\"start\":66533},{\"end\":66668,\"start\":66618},{\"end\":67643,\"start\":67326},{\"end\":68043,\"start\":68004}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5784,\"start\":5776},{\"end\":7830,\"start\":7824},{\"end\":8471,\"start\":8465},{\"end\":10250,\"start\":10242},{\"end\":10342,\"start\":10334},{\"end\":10924,\"start\":10918},{\"end\":15734,\"start\":15726},{\"end\":18300,\"start\":18294},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20722,\"start\":20716},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20817,\"start\":20809},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20887,\"start\":20879},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":21133,\"start\":21125},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":24054,\"start\":24048},{\"end\":24492,\"start\":24485},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":24607,\"start\":24601},{\"end\":24917,\"start\":24911},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":25949,\"start\":25943},{\"end\":26829,\"start\":26822},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":27106,\"start\":27100},{\"end\":27162,\"start\":27154},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":28224,\"start\":28217},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":28609,\"start\":28601},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":31511,\"start\":31503},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":34354,\"start\":34341},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":37678,\"start\":37670},{\"end\":38239,\"start\":38233},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":40926,\"start\":40920},{\"end\":42658,\"start\":42652},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":44352,\"start\":44344},{\"end\":45808,\"start\":45802},{\"end\":49559,\"start\":49553},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":50314,\"start\":50305},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":50482,\"start\":50473},{\"end\":55689,\"start\":55681},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":56994,\"start\":56978},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":57223,\"start\":57215},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":57614,\"start\":57607},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":59598,\"start\":59592},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":62867,\"start\":62858}]", "bib_author_first_name": "[{\"end\":69373,\"start\":69367},{\"end\":69389,\"start\":69383},{\"end\":69403,\"start\":69398},{\"end\":69423,\"start\":69417},{\"end\":69437,\"start\":69433},{\"end\":69711,\"start\":69705},{\"end\":69729,\"start\":69722},{\"end\":70074,\"start\":70068},{\"end\":70089,\"start\":70079},{\"end\":70105,\"start\":70098},{\"end\":70108,\"start\":70106},{\"end\":70127,\"start\":70122},{\"end\":70528,\"start\":70518},{\"end\":70539,\"start\":70533},{\"end\":70563,\"start\":70553},{\"end\":70579,\"start\":70572},{\"end\":70582,\"start\":70580},{\"end\":70597,\"start\":70592},{\"end\":70967,\"start\":70966},{\"end\":71133,\"start\":71128},{\"end\":71151,\"start\":71143},{\"end\":71169,\"start\":71163},{\"end\":71542,\"start\":71538},{\"end\":71560,\"start\":71553},{\"end\":71577,\"start\":71570},{\"end\":71929,\"start\":71928},{\"end\":71946,\"start\":71937},{\"end\":71963,\"start\":71955},{\"end\":71982,\"start\":71975},{\"end\":72393,\"start\":72388},{\"end\":72406,\"start\":72402},{\"end\":72852,\"start\":72844},{\"end\":72865,\"start\":72858},{\"end\":72877,\"start\":72872},{\"end\":72890,\"start\":72884},{\"end\":73241,\"start\":73232},{\"end\":73274,\"start\":73268},{\"end\":73658,\"start\":73650},{\"end\":73674,\"start\":73665},{\"end\":73687,\"start\":73680},{\"end\":74027,\"start\":74020},{\"end\":74042,\"start\":74035},{\"end\":74053,\"start\":74048},{\"end\":74443,\"start\":74442},{\"end\":74462,\"start\":74461},{\"end\":74842,\"start\":74835},{\"end\":74855,\"start\":74850},{\"end\":74872,\"start\":74866},{\"end\":74874,\"start\":74873},{\"end\":74885,\"start\":74881},{\"end\":74889,\"start\":74886},{\"end\":74906,\"start\":74898},{\"end\":74908,\"start\":74907},{\"end\":75211,\"start\":75204},{\"end\":75226,\"start\":75219},{\"end\":75242,\"start\":75236},{\"end\":75244,\"start\":75243},{\"end\":75259,\"start\":75251},{\"end\":75261,\"start\":75260},{\"end\":75821,\"start\":75816},{\"end\":75831,\"start\":75830},{\"end\":76098,\"start\":76097},{\"end\":76443,\"start\":76438},{\"end\":76454,\"start\":76449},{\"end\":76466,\"start\":76462},{\"end\":76479,\"start\":76475},{\"end\":76493,\"start\":76485},{\"end\":76876,\"start\":76870},{\"end\":77250,\"start\":77245},{\"end\":77263,\"start\":77259},{\"end\":77282,\"start\":77273},{\"end\":77295,\"start\":77289},{\"end\":77587,\"start\":77583},{\"end\":77599,\"start\":77593},{\"end\":77613,\"start\":77606},{\"end\":77919,\"start\":77915},{\"end\":77932,\"start\":77925},{\"end\":78261,\"start\":78256},{\"end\":78275,\"start\":78269},{\"end\":78291,\"start\":78283},{\"end\":78311,\"start\":78305},{\"end\":78603,\"start\":78602},{\"end\":78618,\"start\":78612},{\"end\":78632,\"start\":78625},{\"end\":78645,\"start\":78640},{\"end\":78661,\"start\":78654},{\"end\":78677,\"start\":78669},{\"end\":79169,\"start\":79161},{\"end\":79187,\"start\":79186},{\"end\":79189,\"start\":79188},{\"end\":79443,\"start\":79435},{\"end\":79458,\"start\":79451},{\"end\":79475,\"start\":79470},{\"end\":79490,\"start\":79486},{\"end\":79813,\"start\":79809},{\"end\":79950,\"start\":79946},{\"end\":80055,\"start\":80051},{\"end\":80264,\"start\":80261},{\"end\":80273,\"start\":80269},{\"end\":80656,\"start\":80653},{\"end\":80685,\"start\":80684},{\"end\":80703,\"start\":80695},{\"end\":81078,\"start\":81074},{\"end\":81090,\"start\":81084},{\"end\":81102,\"start\":81099},{\"end\":81120,\"start\":81112},{\"end\":81132,\"start\":81127},{\"end\":81534,\"start\":81527},{\"end\":81549,\"start\":81545},{\"end\":81565,\"start\":81558},{\"end\":81580,\"start\":81576},{\"end\":82056,\"start\":82049},{\"end\":82073,\"start\":82064},{\"end\":82093,\"start\":82085},{\"end\":82381,\"start\":82372},{\"end\":82399,\"start\":82394},{\"end\":82414,\"start\":82406},{\"end\":82850,\"start\":82849},{\"end\":82861,\"start\":82860},{\"end\":83294,\"start\":83291},{\"end\":83296,\"start\":83295},{\"end\":83315,\"start\":83311},{\"end\":83317,\"start\":83316},{\"end\":83332,\"start\":83325},{\"end\":83334,\"start\":83333},{\"end\":83656,\"start\":83649},{\"end\":83671,\"start\":83668},{\"end\":83691,\"start\":83684},{\"end\":83707,\"start\":83700},{\"end\":84079,\"start\":84073},{\"end\":84096,\"start\":84089},{\"end\":84120,\"start\":84109},{\"end\":84138,\"start\":84132},{\"end\":84562,\"start\":84557},{\"end\":84584,\"start\":84577},{\"end\":84593,\"start\":84592},{\"end\":84620,\"start\":84619},{\"end\":85120,\"start\":85119},{\"end\":85122,\"start\":85121},{\"end\":85287,\"start\":85285},{\"end\":85459,\"start\":85452},{\"end\":85477,\"start\":85470},{\"end\":85493,\"start\":85486},{\"end\":85509,\"start\":85501},{\"end\":85522,\"start\":85516},{\"end\":85536,\"start\":85529},{\"end\":85554,\"start\":85547},{\"end\":85949,\"start\":85944},{\"end\":86151,\"start\":86150},{\"end\":86153,\"start\":86152},{\"end\":86160,\"start\":86159},{\"end\":86201,\"start\":86200},{\"end\":86656,\"start\":86648},{\"end\":86677,\"start\":86670},{\"end\":87183,\"start\":87178},{\"end\":87193,\"start\":87192},{\"end\":87195,\"start\":87194},{\"end\":87208,\"start\":87204},{\"end\":87227,\"start\":87217},{\"end\":87245,\"start\":87237},{\"end\":87247,\"start\":87246},{\"end\":87263,\"start\":87256},{\"end\":87783,\"start\":87776},{\"end\":87794,\"start\":87793},{\"end\":87806,\"start\":87801},{\"end\":87808,\"start\":87807},{\"end\":87822,\"start\":87815},{\"end\":88186,\"start\":88179},{\"end\":88197,\"start\":88196},{\"end\":88209,\"start\":88204},{\"end\":88211,\"start\":88210},{\"end\":88225,\"start\":88218},{\"end\":88665,\"start\":88660},{\"end\":88831,\"start\":88827},{\"end\":88848,\"start\":88841},{\"end\":88862,\"start\":88857},{\"end\":89415,\"start\":89409},{\"end\":89428,\"start\":89422},{\"end\":89831,\"start\":89826},{\"end\":89840,\"start\":89838},{\"end\":89852,\"start\":89847},{\"end\":90161,\"start\":90154},{\"end\":90213,\"start\":90207},{\"end\":90348,\"start\":90341},{\"end\":90361,\"start\":90356},{\"end\":90382,\"start\":90376},{\"end\":90398,\"start\":90391},{\"end\":90868,\"start\":90865},{\"end\":90882,\"start\":90875},{\"end\":90894,\"start\":90890},{\"end\":90906,\"start\":90900},{\"end\":91332,\"start\":91329},{\"end\":91347,\"start\":91339},{\"end\":91675,\"start\":91668},{\"end\":91689,\"start\":91682},{\"end\":91701,\"start\":91697},{\"end\":91712,\"start\":91708},{\"end\":91727,\"start\":91721},{\"end\":92036,\"start\":92033},{\"end\":92051,\"start\":92044},{\"end\":92072,\"start\":92061},{\"end\":92087,\"start\":92081},{\"end\":92100,\"start\":92093},{\"end\":92578,\"start\":92575},{\"end\":92593,\"start\":92586},{\"end\":92885,\"start\":92879},{\"end\":92901,\"start\":92893},{\"end\":93220,\"start\":93215},{\"end\":93232,\"start\":93227},{\"end\":93247,\"start\":93240},{\"end\":93264,\"start\":93258},{\"end\":93276,\"start\":93271},{\"end\":93290,\"start\":93283},{\"end\":93306,\"start\":93301},{\"end\":93317,\"start\":93313}]", "bib_author_last_name": "[{\"end\":69381,\"start\":69374},{\"end\":69396,\"start\":69390},{\"end\":69415,\"start\":69404},{\"end\":69431,\"start\":69424},{\"end\":69443,\"start\":69438},{\"end\":69720,\"start\":69712},{\"end\":69740,\"start\":69730},{\"end\":70066,\"start\":70057},{\"end\":70077,\"start\":70075},{\"end\":70096,\"start\":70090},{\"end\":70120,\"start\":70109},{\"end\":70134,\"start\":70128},{\"end\":70144,\"start\":70136},{\"end\":70516,\"start\":70507},{\"end\":70531,\"start\":70529},{\"end\":70551,\"start\":70540},{\"end\":70570,\"start\":70564},{\"end\":70590,\"start\":70583},{\"end\":70604,\"start\":70598},{\"end\":70614,\"start\":70606},{\"end\":70973,\"start\":70968},{\"end\":70982,\"start\":70975},{\"end\":71141,\"start\":71134},{\"end\":71161,\"start\":71152},{\"end\":71181,\"start\":71170},{\"end\":71551,\"start\":71543},{\"end\":71568,\"start\":71561},{\"end\":71583,\"start\":71578},{\"end\":71935,\"start\":71930},{\"end\":71953,\"start\":71947},{\"end\":71973,\"start\":71964},{\"end\":71987,\"start\":71983},{\"end\":71997,\"start\":71989},{\"end\":72400,\"start\":72394},{\"end\":72413,\"start\":72407},{\"end\":72856,\"start\":72853},{\"end\":72870,\"start\":72866},{\"end\":72882,\"start\":72878},{\"end\":72896,\"start\":72891},{\"end\":73266,\"start\":73242},{\"end\":73285,\"start\":73275},{\"end\":73293,\"start\":73287},{\"end\":73663,\"start\":73659},{\"end\":73678,\"start\":73675},{\"end\":73693,\"start\":73688},{\"end\":74033,\"start\":74028},{\"end\":74046,\"start\":74043},{\"end\":74064,\"start\":74054},{\"end\":74451,\"start\":74444},{\"end\":74459,\"start\":74453},{\"end\":74468,\"start\":74463},{\"end\":74478,\"start\":74470},{\"end\":74848,\"start\":74843},{\"end\":74864,\"start\":74856},{\"end\":74879,\"start\":74875},{\"end\":74896,\"start\":74890},{\"end\":74914,\"start\":74909},{\"end\":75217,\"start\":75212},{\"end\":75234,\"start\":75227},{\"end\":75249,\"start\":75245},{\"end\":75267,\"start\":75262},{\"end\":75828,\"start\":75822},{\"end\":75837,\"start\":75832},{\"end\":75844,\"start\":75839},{\"end\":76104,\"start\":76099},{\"end\":76112,\"start\":76106},{\"end\":76447,\"start\":76444},{\"end\":76460,\"start\":76455},{\"end\":76473,\"start\":76467},{\"end\":76483,\"start\":76480},{\"end\":76496,\"start\":76494},{\"end\":76500,\"start\":76498},{\"end\":76891,\"start\":76877},{\"end\":76896,\"start\":76893},{\"end\":77257,\"start\":77251},{\"end\":77271,\"start\":77264},{\"end\":77287,\"start\":77283},{\"end\":77307,\"start\":77296},{\"end\":77591,\"start\":77588},{\"end\":77604,\"start\":77600},{\"end\":77620,\"start\":77614},{\"end\":77923,\"start\":77920},{\"end\":77939,\"start\":77933},{\"end\":78267,\"start\":78262},{\"end\":78281,\"start\":78276},{\"end\":78303,\"start\":78292},{\"end\":78322,\"start\":78312},{\"end\":78610,\"start\":78604},{\"end\":78623,\"start\":78619},{\"end\":78638,\"start\":78633},{\"end\":78652,\"start\":78646},{\"end\":78667,\"start\":78662},{\"end\":78683,\"start\":78678},{\"end\":78689,\"start\":78685},{\"end\":79184,\"start\":79170},{\"end\":79195,\"start\":79190},{\"end\":79206,\"start\":79197},{\"end\":79449,\"start\":79444},{\"end\":79468,\"start\":79459},{\"end\":79484,\"start\":79476},{\"end\":79497,\"start\":79491},{\"end\":79821,\"start\":79814},{\"end\":79958,\"start\":79951},{\"end\":80063,\"start\":80056},{\"end\":80267,\"start\":80265},{\"end\":80278,\"start\":80274},{\"end\":80668,\"start\":80657},{\"end\":80682,\"start\":80670},{\"end\":80693,\"start\":80686},{\"end\":80711,\"start\":80704},{\"end\":80718,\"start\":80713},{\"end\":81082,\"start\":81079},{\"end\":81097,\"start\":81091},{\"end\":81110,\"start\":81103},{\"end\":81125,\"start\":81121},{\"end\":81141,\"start\":81133},{\"end\":81543,\"start\":81535},{\"end\":81556,\"start\":81550},{\"end\":81574,\"start\":81566},{\"end\":81587,\"start\":81581},{\"end\":82062,\"start\":82057},{\"end\":82083,\"start\":82074},{\"end\":82098,\"start\":82094},{\"end\":82392,\"start\":82382},{\"end\":82404,\"start\":82400},{\"end\":82417,\"start\":82415},{\"end\":82858,\"start\":82851},{\"end\":82869,\"start\":82862},{\"end\":83116,\"start\":83107},{\"end\":83121,\"start\":83118},{\"end\":83309,\"start\":83297},{\"end\":83323,\"start\":83318},{\"end\":83339,\"start\":83335},{\"end\":83348,\"start\":83341},{\"end\":83666,\"start\":83657},{\"end\":83682,\"start\":83672},{\"end\":83698,\"start\":83692},{\"end\":83714,\"start\":83708},{\"end\":84087,\"start\":84080},{\"end\":84107,\"start\":84097},{\"end\":84130,\"start\":84121},{\"end\":84144,\"start\":84139},{\"end\":84575,\"start\":84563},{\"end\":84590,\"start\":84585},{\"end\":84603,\"start\":84594},{\"end\":84617,\"start\":84605},{\"end\":84626,\"start\":84621},{\"end\":84632,\"start\":84628},{\"end\":84969,\"start\":84959},{\"end\":85128,\"start\":85123},{\"end\":85137,\"start\":85130},{\"end\":85296,\"start\":85288},{\"end\":85468,\"start\":85460},{\"end\":85484,\"start\":85478},{\"end\":85499,\"start\":85494},{\"end\":85514,\"start\":85510},{\"end\":85527,\"start\":85523},{\"end\":85545,\"start\":85537},{\"end\":85561,\"start\":85555},{\"end\":85960,\"start\":85950},{\"end\":86157,\"start\":86154},{\"end\":86164,\"start\":86161},{\"end\":86173,\"start\":86166},{\"end\":86179,\"start\":86175},{\"end\":86186,\"start\":86181},{\"end\":86191,\"start\":86188},{\"end\":86198,\"start\":86193},{\"end\":86207,\"start\":86202},{\"end\":86212,\"start\":86209},{\"end\":86668,\"start\":86657},{\"end\":86688,\"start\":86678},{\"end\":86993,\"start\":86985},{\"end\":87190,\"start\":87184},{\"end\":87202,\"start\":87196},{\"end\":87215,\"start\":87209},{\"end\":87235,\"start\":87228},{\"end\":87254,\"start\":87248},{\"end\":87269,\"start\":87264},{\"end\":87279,\"start\":87271},{\"end\":87791,\"start\":87784},{\"end\":87799,\"start\":87795},{\"end\":87813,\"start\":87809},{\"end\":87827,\"start\":87823},{\"end\":87834,\"start\":87829},{\"end\":88194,\"start\":88187},{\"end\":88202,\"start\":88198},{\"end\":88216,\"start\":88212},{\"end\":88230,\"start\":88226},{\"end\":88237,\"start\":88232},{\"end\":88674,\"start\":88666},{\"end\":88839,\"start\":88832},{\"end\":88855,\"start\":88849},{\"end\":88876,\"start\":88863},{\"end\":89420,\"start\":89416},{\"end\":89432,\"start\":89429},{\"end\":89836,\"start\":89832},{\"end\":89845,\"start\":89841},{\"end\":89855,\"start\":89853},{\"end\":89866,\"start\":89857},{\"end\":90170,\"start\":90162},{\"end\":90221,\"start\":90214},{\"end\":90354,\"start\":90349},{\"end\":90374,\"start\":90362},{\"end\":90389,\"start\":90383},{\"end\":90410,\"start\":90399},{\"end\":90873,\"start\":90869},{\"end\":90888,\"start\":90883},{\"end\":90898,\"start\":90895},{\"end\":90912,\"start\":90907},{\"end\":91337,\"start\":91333},{\"end\":91359,\"start\":91348},{\"end\":91680,\"start\":91676},{\"end\":91695,\"start\":91690},{\"end\":91706,\"start\":91702},{\"end\":91719,\"start\":91713},{\"end\":91737,\"start\":91728},{\"end\":92042,\"start\":92037},{\"end\":92059,\"start\":92052},{\"end\":92079,\"start\":92073},{\"end\":92091,\"start\":92088},{\"end\":92108,\"start\":92101},{\"end\":92584,\"start\":92579},{\"end\":92601,\"start\":92594},{\"end\":92891,\"start\":92886},{\"end\":92913,\"start\":92902},{\"end\":93225,\"start\":93221},{\"end\":93238,\"start\":93233},{\"end\":93256,\"start\":93248},{\"end\":93269,\"start\":93265},{\"end\":93281,\"start\":93277},{\"end\":93299,\"start\":93291},{\"end\":93311,\"start\":93307},{\"end\":93323,\"start\":93318}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":11254435},\"end\":69669,\"start\":69325},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":59813869},\"end\":69976,\"start\":69671},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":14793380},\"end\":70442,\"start\":69978},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":28638987},\"end\":70912,\"start\":70444},{\"attributes\":{\"id\":\"b4\"},\"end\":71058,\"start\":70914},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":10921969},\"end\":71458,\"start\":71060},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":15313203},\"end\":71886,\"start\":71460},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":405360},\"end\":72277,\"start\":71888},{\"attributes\":{\"id\":\"b8\"},\"end\":72566,\"start\":72279},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":236448161},\"end\":72760,\"start\":72568},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":39329609},\"end\":73181,\"start\":72762},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":976474},\"end\":73579,\"start\":73183},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":8810433},\"end\":73933,\"start\":73581},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":16189806},\"end\":74345,\"start\":73935},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":111152982},\"end\":74736,\"start\":74347},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":2345808},\"end\":75202,\"start\":74738},{\"attributes\":{\"id\":\"b16\"},\"end\":75772,\"start\":75204},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":2919547},\"end\":76047,\"start\":75774},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":16059051},\"end\":76382,\"start\":76049},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":49184384},\"end\":76788,\"start\":76384},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":111358163},\"end\":77131,\"start\":76790},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":1731177},\"end\":77551,\"start\":77133},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":6059342},\"end\":77857,\"start\":77553},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":324445},\"end\":78186,\"start\":77859},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":37269714},\"end\":78553,\"start\":78188},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":15161614},\"end\":79086,\"start\":78555},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":4318270},\"end\":79359,\"start\":79088},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":10743847},\"end\":79781,\"start\":79361},{\"attributes\":{\"id\":\"b28\"},\"end\":79924,\"start\":79783},{\"attributes\":{\"id\":\"b29\"},\"end\":80049,\"start\":79926},{\"attributes\":{\"id\":\"b30\"},\"end\":80177,\"start\":80051},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":17330900},\"end\":80544,\"start\":80179},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":29547519},\"end\":80987,\"start\":80546},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":6377312},\"end\":81468,\"start\":80989},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":53222787},\"end\":81866,\"start\":81470},{\"attributes\":{\"id\":\"b35\"},\"end\":81957,\"start\":81868},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":25140002},\"end\":82289,\"start\":81959},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":5713606},\"end\":82798,\"start\":82291},{\"attributes\":{\"id\":\"b38\"},\"end\":83105,\"start\":82800},{\"attributes\":{\"id\":\"b39\"},\"end\":83242,\"start\":83107},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":109308800},\"end\":83580,\"start\":83244},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":6411837},\"end\":84025,\"start\":83582},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":1184134},\"end\":84491,\"start\":84027},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":8901499},\"end\":84911,\"start\":84493},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":171086796},\"end\":85083,\"start\":84913},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":110584140},\"end\":85252,\"start\":85085},{\"attributes\":{\"id\":\"b46\"},\"end\":85408,\"start\":85254},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":2635771},\"end\":85884,\"start\":85410},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":114936871},\"end\":86060,\"start\":85886},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":16272416},\"end\":86594,\"start\":86062},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":206459491},\"end\":86874,\"start\":86596},{\"attributes\":{\"id\":\"b51\"},\"end\":87122,\"start\":86876},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":13909533},\"end\":87675,\"start\":87124},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":216394845},\"end\":88100,\"start\":87677},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":232108847},\"end\":88517,\"start\":88102},{\"attributes\":{\"id\":\"b55\"},\"end\":88656,\"start\":88519},{\"attributes\":{\"id\":\"b56\"},\"end\":88740,\"start\":88658},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":7074065},\"end\":89267,\"start\":88742},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":209088548},\"end\":89757,\"start\":89269},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":1522401},\"end\":90150,\"start\":89759},{\"attributes\":{\"id\":\"b60\"},\"end\":90203,\"start\":90152},{\"attributes\":{\"id\":\"b61\"},\"end\":90267,\"start\":90205},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":207168934},\"end\":90799,\"start\":90269},{\"attributes\":{\"id\":\"b63\"},\"end\":91250,\"start\":90801},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":13915850},\"end\":91635,\"start\":91252},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":7133559},\"end\":91945,\"start\":91637},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":607092},\"end\":92501,\"start\":91947},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":209005995},\"end\":92806,\"start\":92503},{\"attributes\":{\"id\":\"b68\",\"matched_paper_id\":14672396},\"end\":93131,\"start\":92808},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":531195},\"end\":93680,\"start\":93133}]", "bib_title": "[{\"end\":69365,\"start\":69325},{\"end\":69703,\"start\":69671},{\"end\":70055,\"start\":69978},{\"end\":70505,\"start\":70444},{\"end\":71126,\"start\":71060},{\"end\":71536,\"start\":71460},{\"end\":71926,\"start\":71888},{\"end\":72590,\"start\":72568},{\"end\":72842,\"start\":72762},{\"end\":73230,\"start\":73183},{\"end\":73648,\"start\":73581},{\"end\":74018,\"start\":73935},{\"end\":74440,\"start\":74347},{\"end\":74833,\"start\":74738},{\"end\":75814,\"start\":75774},{\"end\":76095,\"start\":76049},{\"end\":76436,\"start\":76384},{\"end\":76868,\"start\":76790},{\"end\":77243,\"start\":77133},{\"end\":77581,\"start\":77553},{\"end\":77913,\"start\":77859},{\"end\":78254,\"start\":78188},{\"end\":78600,\"start\":78555},{\"end\":79159,\"start\":79088},{\"end\":79433,\"start\":79361},{\"end\":80259,\"start\":80179},{\"end\":80651,\"start\":80546},{\"end\":81072,\"start\":80989},{\"end\":81525,\"start\":81470},{\"end\":82047,\"start\":81959},{\"end\":82370,\"start\":82291},{\"end\":82847,\"start\":82800},{\"end\":83289,\"start\":83244},{\"end\":83647,\"start\":83582},{\"end\":84071,\"start\":84027},{\"end\":84555,\"start\":84493},{\"end\":84957,\"start\":84913},{\"end\":85117,\"start\":85085},{\"end\":85450,\"start\":85410},{\"end\":85942,\"start\":85886},{\"end\":86148,\"start\":86062},{\"end\":86646,\"start\":86596},{\"end\":87176,\"start\":87124},{\"end\":87774,\"start\":87677},{\"end\":88177,\"start\":88102},{\"end\":88825,\"start\":88742},{\"end\":89407,\"start\":89269},{\"end\":89824,\"start\":89759},{\"end\":90339,\"start\":90269},{\"end\":90863,\"start\":90801},{\"end\":91327,\"start\":91252},{\"end\":91666,\"start\":91637},{\"end\":92031,\"start\":91947},{\"end\":92573,\"start\":92503},{\"end\":92877,\"start\":92808},{\"end\":93213,\"start\":93133}]", "bib_author": "[{\"end\":69383,\"start\":69367},{\"end\":69398,\"start\":69383},{\"end\":69417,\"start\":69398},{\"end\":69433,\"start\":69417},{\"end\":69445,\"start\":69433},{\"end\":69722,\"start\":69705},{\"end\":69742,\"start\":69722},{\"end\":70068,\"start\":70057},{\"end\":70079,\"start\":70068},{\"end\":70098,\"start\":70079},{\"end\":70122,\"start\":70098},{\"end\":70136,\"start\":70122},{\"end\":70146,\"start\":70136},{\"end\":70518,\"start\":70507},{\"end\":70533,\"start\":70518},{\"end\":70553,\"start\":70533},{\"end\":70572,\"start\":70553},{\"end\":70592,\"start\":70572},{\"end\":70606,\"start\":70592},{\"end\":70616,\"start\":70606},{\"end\":70975,\"start\":70966},{\"end\":70984,\"start\":70975},{\"end\":71143,\"start\":71128},{\"end\":71163,\"start\":71143},{\"end\":71183,\"start\":71163},{\"end\":71553,\"start\":71538},{\"end\":71570,\"start\":71553},{\"end\":71585,\"start\":71570},{\"end\":71937,\"start\":71928},{\"end\":71955,\"start\":71937},{\"end\":71975,\"start\":71955},{\"end\":71989,\"start\":71975},{\"end\":71999,\"start\":71989},{\"end\":72402,\"start\":72388},{\"end\":72415,\"start\":72402},{\"end\":72858,\"start\":72844},{\"end\":72872,\"start\":72858},{\"end\":72884,\"start\":72872},{\"end\":72898,\"start\":72884},{\"end\":73268,\"start\":73232},{\"end\":73287,\"start\":73268},{\"end\":73295,\"start\":73287},{\"end\":73665,\"start\":73650},{\"end\":73680,\"start\":73665},{\"end\":73695,\"start\":73680},{\"end\":74035,\"start\":74020},{\"end\":74048,\"start\":74035},{\"end\":74066,\"start\":74048},{\"end\":74453,\"start\":74442},{\"end\":74461,\"start\":74453},{\"end\":74470,\"start\":74461},{\"end\":74480,\"start\":74470},{\"end\":74850,\"start\":74835},{\"end\":74866,\"start\":74850},{\"end\":74881,\"start\":74866},{\"end\":74898,\"start\":74881},{\"end\":74916,\"start\":74898},{\"end\":75219,\"start\":75204},{\"end\":75236,\"start\":75219},{\"end\":75251,\"start\":75236},{\"end\":75269,\"start\":75251},{\"end\":75830,\"start\":75816},{\"end\":75839,\"start\":75830},{\"end\":75846,\"start\":75839},{\"end\":76106,\"start\":76097},{\"end\":76114,\"start\":76106},{\"end\":76449,\"start\":76438},{\"end\":76462,\"start\":76449},{\"end\":76475,\"start\":76462},{\"end\":76485,\"start\":76475},{\"end\":76498,\"start\":76485},{\"end\":76502,\"start\":76498},{\"end\":76893,\"start\":76870},{\"end\":76898,\"start\":76893},{\"end\":77259,\"start\":77245},{\"end\":77273,\"start\":77259},{\"end\":77289,\"start\":77273},{\"end\":77309,\"start\":77289},{\"end\":77593,\"start\":77583},{\"end\":77606,\"start\":77593},{\"end\":77622,\"start\":77606},{\"end\":77925,\"start\":77915},{\"end\":77941,\"start\":77925},{\"end\":78269,\"start\":78256},{\"end\":78283,\"start\":78269},{\"end\":78305,\"start\":78283},{\"end\":78324,\"start\":78305},{\"end\":78612,\"start\":78602},{\"end\":78625,\"start\":78612},{\"end\":78640,\"start\":78625},{\"end\":78654,\"start\":78640},{\"end\":78669,\"start\":78654},{\"end\":78685,\"start\":78669},{\"end\":78691,\"start\":78685},{\"end\":79186,\"start\":79161},{\"end\":79197,\"start\":79186},{\"end\":79208,\"start\":79197},{\"end\":79451,\"start\":79435},{\"end\":79470,\"start\":79451},{\"end\":79486,\"start\":79470},{\"end\":79499,\"start\":79486},{\"end\":79823,\"start\":79809},{\"end\":79960,\"start\":79946},{\"end\":80065,\"start\":80051},{\"end\":80269,\"start\":80261},{\"end\":80280,\"start\":80269},{\"end\":80670,\"start\":80653},{\"end\":80684,\"start\":80670},{\"end\":80695,\"start\":80684},{\"end\":80713,\"start\":80695},{\"end\":80720,\"start\":80713},{\"end\":81084,\"start\":81074},{\"end\":81099,\"start\":81084},{\"end\":81112,\"start\":81099},{\"end\":81127,\"start\":81112},{\"end\":81143,\"start\":81127},{\"end\":81545,\"start\":81527},{\"end\":81558,\"start\":81545},{\"end\":81576,\"start\":81558},{\"end\":81589,\"start\":81576},{\"end\":82064,\"start\":82049},{\"end\":82085,\"start\":82064},{\"end\":82100,\"start\":82085},{\"end\":82394,\"start\":82372},{\"end\":82406,\"start\":82394},{\"end\":82419,\"start\":82406},{\"end\":82860,\"start\":82849},{\"end\":82871,\"start\":82860},{\"end\":83118,\"start\":83107},{\"end\":83123,\"start\":83118},{\"end\":83311,\"start\":83291},{\"end\":83325,\"start\":83311},{\"end\":83341,\"start\":83325},{\"end\":83350,\"start\":83341},{\"end\":83668,\"start\":83649},{\"end\":83684,\"start\":83668},{\"end\":83700,\"start\":83684},{\"end\":83716,\"start\":83700},{\"end\":84089,\"start\":84073},{\"end\":84109,\"start\":84089},{\"end\":84132,\"start\":84109},{\"end\":84146,\"start\":84132},{\"end\":84577,\"start\":84557},{\"end\":84592,\"start\":84577},{\"end\":84605,\"start\":84592},{\"end\":84619,\"start\":84605},{\"end\":84628,\"start\":84619},{\"end\":84634,\"start\":84628},{\"end\":84971,\"start\":84959},{\"end\":85130,\"start\":85119},{\"end\":85139,\"start\":85130},{\"end\":85298,\"start\":85285},{\"end\":85470,\"start\":85452},{\"end\":85486,\"start\":85470},{\"end\":85501,\"start\":85486},{\"end\":85516,\"start\":85501},{\"end\":85529,\"start\":85516},{\"end\":85547,\"start\":85529},{\"end\":85563,\"start\":85547},{\"end\":85962,\"start\":85944},{\"end\":86159,\"start\":86150},{\"end\":86166,\"start\":86159},{\"end\":86175,\"start\":86166},{\"end\":86181,\"start\":86175},{\"end\":86188,\"start\":86181},{\"end\":86193,\"start\":86188},{\"end\":86200,\"start\":86193},{\"end\":86209,\"start\":86200},{\"end\":86214,\"start\":86209},{\"end\":86670,\"start\":86648},{\"end\":86690,\"start\":86670},{\"end\":86995,\"start\":86985},{\"end\":87192,\"start\":87178},{\"end\":87204,\"start\":87192},{\"end\":87217,\"start\":87204},{\"end\":87237,\"start\":87217},{\"end\":87256,\"start\":87237},{\"end\":87271,\"start\":87256},{\"end\":87281,\"start\":87271},{\"end\":87793,\"start\":87776},{\"end\":87801,\"start\":87793},{\"end\":87815,\"start\":87801},{\"end\":87829,\"start\":87815},{\"end\":87836,\"start\":87829},{\"end\":88196,\"start\":88179},{\"end\":88204,\"start\":88196},{\"end\":88218,\"start\":88204},{\"end\":88232,\"start\":88218},{\"end\":88239,\"start\":88232},{\"end\":88676,\"start\":88660},{\"end\":88841,\"start\":88827},{\"end\":88857,\"start\":88841},{\"end\":88878,\"start\":88857},{\"end\":89422,\"start\":89409},{\"end\":89434,\"start\":89422},{\"end\":89838,\"start\":89826},{\"end\":89847,\"start\":89838},{\"end\":89857,\"start\":89847},{\"end\":89868,\"start\":89857},{\"end\":90172,\"start\":90154},{\"end\":90223,\"start\":90207},{\"end\":90356,\"start\":90341},{\"end\":90376,\"start\":90356},{\"end\":90391,\"start\":90376},{\"end\":90412,\"start\":90391},{\"end\":90875,\"start\":90865},{\"end\":90890,\"start\":90875},{\"end\":90900,\"start\":90890},{\"end\":90914,\"start\":90900},{\"end\":91339,\"start\":91329},{\"end\":91361,\"start\":91339},{\"end\":91682,\"start\":91668},{\"end\":91697,\"start\":91682},{\"end\":91708,\"start\":91697},{\"end\":91721,\"start\":91708},{\"end\":91739,\"start\":91721},{\"end\":92044,\"start\":92033},{\"end\":92061,\"start\":92044},{\"end\":92081,\"start\":92061},{\"end\":92093,\"start\":92081},{\"end\":92110,\"start\":92093},{\"end\":92586,\"start\":92575},{\"end\":92603,\"start\":92586},{\"end\":92893,\"start\":92879},{\"end\":92915,\"start\":92893},{\"end\":93227,\"start\":93215},{\"end\":93240,\"start\":93227},{\"end\":93258,\"start\":93240},{\"end\":93271,\"start\":93258},{\"end\":93283,\"start\":93271},{\"end\":93301,\"start\":93283},{\"end\":93313,\"start\":93301},{\"end\":93325,\"start\":93313}]", "bib_venue": "[{\"end\":69489,\"start\":69445},{\"end\":69816,\"start\":69742},{\"end\":70201,\"start\":70146},{\"end\":70664,\"start\":70616},{\"end\":70964,\"start\":70914},{\"end\":71250,\"start\":71183},{\"end\":71638,\"start\":71585},{\"end\":72075,\"start\":71999},{\"end\":72386,\"start\":72279},{\"end\":72621,\"start\":72592},{\"end\":72952,\"start\":72898},{\"end\":73368,\"start\":73295},{\"end\":73747,\"start\":73695},{\"end\":74132,\"start\":74066},{\"end\":74532,\"start\":74480},{\"end\":74960,\"start\":74916},{\"end\":75480,\"start\":75269},{\"end\":75900,\"start\":75846},{\"end\":76198,\"start\":76114},{\"end\":76572,\"start\":76502},{\"end\":76950,\"start\":76898},{\"end\":77334,\"start\":77309},{\"end\":77697,\"start\":77622},{\"end\":78015,\"start\":77941},{\"end\":78353,\"start\":78324},{\"end\":78777,\"start\":78691},{\"end\":79214,\"start\":79208},{\"end\":79563,\"start\":79499},{\"end\":79807,\"start\":79783},{\"end\":79944,\"start\":79926},{\"end\":80084,\"start\":80065},{\"end\":80354,\"start\":80280},{\"end\":80757,\"start\":80720},{\"end\":81219,\"start\":81143},{\"end\":81655,\"start\":81589},{\"end\":81896,\"start\":81870},{\"end\":82114,\"start\":82100},{\"end\":82494,\"start\":82419},{\"end\":82945,\"start\":82871},{\"end\":83148,\"start\":83123},{\"end\":83402,\"start\":83350},{\"end\":83774,\"start\":83716},{\"end\":84221,\"start\":84146},{\"end\":84692,\"start\":84634},{\"end\":84988,\"start\":84971},{\"end\":85158,\"start\":85139},{\"end\":85283,\"start\":85254},{\"end\":85639,\"start\":85563},{\"end\":85965,\"start\":85962},{\"end\":86273,\"start\":86214},{\"end\":86721,\"start\":86690},{\"end\":86983,\"start\":86876},{\"end\":87386,\"start\":87281},{\"end\":87880,\"start\":87836},{\"end\":88300,\"start\":88239},{\"end\":88562,\"start\":88519},{\"end\":88962,\"start\":88878},{\"end\":89506,\"start\":89434},{\"end\":89934,\"start\":89868},{\"end\":90493,\"start\":90412},{\"end\":90969,\"start\":90914},{\"end\":91436,\"start\":91361},{\"end\":91783,\"start\":91739},{\"end\":92216,\"start\":92110},{\"end\":92647,\"start\":92603},{\"end\":92956,\"start\":92915},{\"end\":93379,\"start\":93325},{\"end\":78850,\"start\":78779},{\"end\":83819,\"start\":83776},{\"end\":84283,\"start\":84223},{\"end\":89033,\"start\":88964},{\"end\":90561,\"start\":90495},{\"end\":93420,\"start\":93381}]"}}}, "year": 2023, "month": 12, "day": 17}