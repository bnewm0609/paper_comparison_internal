{"id": 3346631, "updated": "2023-07-19 06:07:28.301", "metadata": {"title": "Are code examples on an online Q&A forum reliable?: a study of API misuse on stack overflow", "authors": "[{\"first\":\"Tianyi\",\"last\":\"Zhang\",\"middle\":[]},{\"first\":\"Ganesha\",\"last\":\"Upadhyaya\",\"middle\":[]},{\"first\":\"Anastasia\",\"last\":\"Reinhardt\",\"middle\":[]},{\"first\":\"Hridesh\",\"last\":\"Rajan\",\"middle\":[]},{\"first\":\"Miryung\",\"last\":\"Kim\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 40th International Conference on Software Engineering", "publication_date": {"year": 2018, "month": null, "day": null}, "abstract": "Programmers often consult an online Q&A forum such as Stack Overflow to learn new APIs. This paper presents an empirical study on the prevalence and severity of API misuse on Stack Overflow. To reduce manual assessment effort, we design ExampleCheck, an API usage mining framework that extracts patterns from over 380K Java repositories on GitHub and subsequently reports potential API usage violations in Stack Overflow posts. We analyze 217,818 Stack Overflow posts using ExampleCheck and find that 31% may have potential API usage violations that could produce unexpected behavior such as program crashes and resource leaks. Such API misuse is caused by three main reasons---missing control constructs, missing or incorrect order of API calls, and incorrect guard conditions. Even the posts that are accepted as correct answers or upvoted by other programmers are not necessarily more reliable than other posts in terms of API misuse. This study result calls for a new approach to augment Stack Overflow with alternative API usage details that are not typically shown in curated examples.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2794992746", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icse/0001URRK18", "doi": "10.1145/3180155.3180260"}}, "content": {"source": {"pdf_hash": "8f0d8d8c0f65b6ffe256fc6f715f66fd1efa32b2", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "https://dl.acm.org/doi/pdf/10.1145/3180155.3180260", "status": "BRONZE"}}, "grobid": {"id": "b9eb44d4e1a3f410652ffc6086292d00b5429d34", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/8f0d8d8c0f65b6ffe256fc6f715f66fd1efa32b2.txt", "contents": "\nAre Code Examples on an Online Q&A Forum Reli-able\n2018. May 27-June 3. 2018. May 27-June 3. 2018\n\nAcm Reference Format: Tianyi \nGanesha Zhang \nAnastasia Upadhyaya \nHridesh Reinhardt \nMiryung Rajan \nKim \nAre Code Examples on an Online Q&A Forum Reli-able\n\nProceedings of ICSE '18: 40th International Conference on Software Engineering\nICSE '18: 40th International Conference on Software EngineeringGothenburg, Sweden; Gothenburg, Sweden2018. May 27-June 3. 2018. May 27-June 3. 201810.1145/3180155.3180260* Anastasia Reinhardt contributed to this work as a summer intern at UCLA. ACM ISBN 978-1-4503-5638-1/18/05. . . $15.00\nProgrammers often consult an online Q&A forum such as Stack Overflow to learn new APIs. This paper presents an empirical study on the prevalence and severity of API misuse on Stack Overflow. To reduce manual assessment effort, we design ExampleCheck, an API usage mining framework that extracts patterns from over 380K Java repositories on GitHub and subsequently reports potential API usage violations in Stack Overflow posts. We analyze 217,818 Stack Overflow posts using ExampleCheck and find that 31% may have potential API usage violations that could produce unexpected behavior such as program crashes and resource leaks. Such API misuse is caused by three main reasons-missing control constructs, missing or incorrect order of API calls, and incorrect guard conditions. Even the posts that are accepted as correct answers or upvoted by other programmers are not necessarily more reliable than other posts in terms of API misuse. This study result calls for a new approach to augment Stack Overflow with alternative API usage details that are not typically shown in curated examples.CCS CONCEPTS\u2022 General and reference \u2192 Empirical studies; \u2022 Software and its engineering \u2192 Software reliability; Collaboration in software development;KEYWORDSonline Q&A forum, API usage pattern, code example assessment\n\nINTRODUCTION\n\nLibrary APIs are becoming the fundamental building blocks in modern software development. Programmers reuse existing functionalities in well-tested libraries and frameworks by stitching API calls together, rather than building everything from scratch. Online Q&A forums such as Stack Overflow have a large number of curated code examples [22,30]. Though such curated examples can serve as a good starting point, they could potentially impact the quality of production code, when integrated to a target application verbatim. Recently, Fischer et al. find that 29% of security-related snippets in Stack Overflow are insecure and these snippets could have been reused by over 1 million Android apps on Google play, which raises a big security concern [9]. Previous studies have also investigated the quality of online code examples in terms of compilability [23,37], unchecked obsolete usage [39], and comprehension issues [29]. However, none of these studies have investigated the reliability of online code examples in terms of API usage correctness. There is also no tool support to help developers easily recognize unreliable code examples in online Q&A forums.\n\nThis paper aims to assess the reliability of code examples on Stack Overflow by contrasting them against desirable API usage patterns mined from GitHub. Our insight is that commonly recurring API usage from a large code corpus may represent a desirable pattern that a programmer can use to assess or enhance code examples on Stack Overflow. The corpus should be large enough to provide sufficient API usage examples and to mine representative API usage patterns. We also believe that quantifying how many snippets are similar (or related but not similar) to a given example can improve developers' confidence about whether to trust the example as is.\n\nTherefore, we design an API usage mining technology, Exam-pleCheck that scales to over 380K GitHub repositories without sacrificing the fidelity and expressiveness of the underlying API usage representation. By leveraging an ultra-large-scale software mining infrastructure [7,31], ExampleCheck efficiently searches over GitHub and retrieves an average of 55144 code snippets for a given API within 10 minutes. We perform program slicing to remove statements that are not related to the given API, which improves accuracy in the mining process (Section 5). We combine frequent subsequence mining and SMT-based guard condition mining to retain important API usage features, including the temporal ordering of related API calls, enclosing control structures, and guard conditions that protect an API call. In terms of our study scope, we target 100 Java and Android APIs that are frequently discussed on Stack Overflow. We then inspect all patterns learned by Exam-pleCheck, create a data set of 180 desirable API usage patterns for the 100 APIs, and study the extent of API misuse in Stack Overflow. Out of 217,818 SO posts relevant to our API data set, 31% contain potential API misuse that could produce symptoms such as program crashes, resource leaks, and incomplete actions. Such API misuse is caused by three main reasons-missing control constructs, missing or incorrect order of API calls, and incorrect guard conditions. Database, crypto, and networking APIs are often misused, since they often require observing the ordering between multiple calls and complex exception handling logic. Though programmers often put more trust on highly voted posts in Stack Overflow, we do not observe a strong positive nor negative correlation between the number of votes and the reliability of Stack Overflow posts in terms of API usage correctness. This observation suggests that votes alone should not be used as the single indicator of the quality of Stack Overflow posts. Our study provides empirical evidence about the prevalence and severity of API misuse in online Q&A posts and indicates that Stack Overflow needs another mechanism that helps users to understand the limitation of existing curated examples. We propose a Chrome extension that suggests desirable or alternative API usage for a given Stack Overflow code example, along with supporting concrete examples mined from GitHub.\n\n\nMOTIVATING EXAMPLES\n\nSuppose Alice wants to write data to a file using FileChannel. Alice searches on Stack Overflow and finds two code examples, both of which are accepted as correct answers and upvoted by other programmers, as shown in Figure 1. Though such curated examples can serve as a good starting point for API investigation, both examples have API usage violations that may induce unexpected behavior in real applications. If Alice puts too much trust on the given example as is, she may inadvertently follow less ideal API usage.\n\nThe first post in Figure 1a does not call FileChannel.close to close the channel. If Alice copies this example to a program that 1 http://stackoverflow.com/questions/10065852 2 http://stackoverflow.com/questions/10506546 does not heavily access new file resources, this example may behave properly, because OS will clean up unmanaged file resources eventually after the program exits. However, if Alice reuses the example in a long-running program with heavy IO, such lingering file resources may cause file handle leaks. Since most operating systems limit the number of opened files, unclosed file streams can eventually run out of file handle resources [28]. Alice may also lose cached data in the file stream, if she uses FileChannel to write a big volume of data but forgots to flush or close the channel.\n\nEven though the second example in Figure 1b calls FileChannel-.close, it does not handle the potential exceptions thrown by File-Channel.write. Calling write could throw ClosedChannelException, if the channel is already closed. If Alice uses FileChannel in a concurrent program where multiple threads attempt to access the same channel, AsynchronousCloseException will occur if one thread closes the channel, while another thread is still writing data.\n\nAs a novice programmer, Alice may not easily recognize the potential limitation of given Stack Overflow examples. In this case, our approach ExampleCheck scans over 380K GitHub repositories and finds 2230 GitHub snippets that also call FileChannel.write. ExampleCheck then learns two common usage patterns from these relevant GitHub snippets. The mostly frequent usage supported by 1829 code snippets on GitHub indicates that a method call to write() must be contained inside a try and catch block. Another frequent usage supported by 1267 GitHub snippets indicates that write must be followed by close. By comparing code snippets in Figures 1a and 1b against these two API usage patterns, Alice may consider adding a missing call to close and an exception handling block during the example integration and adaptation.\n\n\nAPI USAGE MINING AND PATTERN SET\n\nAs it is difficult to know desirable or alternative API usage a priori, we design an API usage mining approach, called ExampleCheck that scales to massive code corpora such as GitHub. We then inspect the results manually and construct a data set of desirable API usage to be used for the Stack Overflow study in Section 4.\n\nIn terms of API scope, we target 100 popular Java APIs. From the Stack Overflow dump taken in October 2016, 3 we scan and parse all Java code snippets and extract API method calls. We rank the API methods based on frequency and remove trivial ones such as System.out.println. As a result, we select 70 frequently used API methods on Stack Overflow. They are in diverse domains, including Android, Collection, document processing (e.g., String, XML, JSON), graphical user interface (e.g., swing), IO, cryptography, security, Java runtime (e.g. Thread, Process), database, networking, date, and time. The rest 30 APIs come from an API misuse benchmark, MUBench [2], after we exclude those patterns without corresponding SO posts and those that cannot be generalized to other projects.\n\nGiven an API method of interest, ExampleCheck takes three phases to infer API usage. In Phase 1, given an API method of interest, ExampleCheck searches GitHub snippets that call the given API method, removes irrelevant statements via program slicing, and extracts API call sequences. In Phase 2, ExampleCheck finds common subsequences from individual sequences of API calls. In Phase 3, to retain conditions under which each API can be invoked, sequence := \u03f5 | call ; sequence | structur e { ; sequence ; } ; sequence call := name(t 1 , ...t n )@condition structur e := if | else | loop | try | catch(t ) | finally condition := boolean expression name := method name t := argument type | exception type | *\n\n\nFigure 2: Grammar of Structured API Call Sequences\n\nExampleCheck mines guard conditions associated with individual API calls. In order to accurately estimate the frequency of unique guard conditions, ExampleCheck uses a SMT solver, Z3 [6], to check the semantic equivalence of guard conditions, instead of considering the syntactic similarity between them only. We manually inspect all inferred patterns to construct the data set of desirable API usage. This data set is used to report potential API misuse in the Stack Overflow posts in our study discussed in Section 4.\n\n\nStructured Call Sequence Extraction and Slicing on GitHub\n\nGiven an API method of interest, ExampleCheck searches individual code snippets invoking the same method in the GitHub corpora.\n\nExampleCheck scans 380,125 Java repositories on GitHub, collected on September 2015. To filter out low-quality GitHub repositories, we only consider repositories with at least 100 revisions and 2 contributors. To scale code search to massive corpora, ExampleCheck leverages a distributed software mining infrastructure [7] to traverse the abstract syntax trees (ASTs) of Java files. ExampleCheck visits every AST method and looks for a method invocation of the API of interest. Figure 3 shows a code snippet retrieved from GitHub for the File.createNewFile API. This snippet creates a property file, if it does not exist by calling createNewFile (line 18).\n\nTo extract the essence of API usage, ExampleCheck models each code snippet as a structured call sequence, which abstracts away certain syntactic details such variable names, but still retains the temporal ordering, control structures, and guard conditions of API calls in a compact manner. Figure 2 defines the grammar of our API usage representation. A structured call sequence consists of relevant control structures and API calls, separated by the delimiter \";\". This delimiter is is a separator in our pattern grammar in Figure 2, not a semi-colon for ending each statement in Java. We resolve the argument types of each API call to distinguish method overloading. In certain cases, the argument consists of a complex expression such as write(e.getFormat()), where the partial program analysis may not be able to resolve the corresponding type. In that case, we represent unresolved types with * , which can be matched with any other types in the following mining phases. Each API call is associated with a guard condition that protects its usage or true, if it is not guarded by any condition. Catch blocks are also annotated with the corresponding exception types. We normalize a catch block with multiple exception types such as catch  prop.store(out, null); 22 in.close(); 23 }\n\n\nFigure 3: This method is extracted as an example of\n\nFile.createNewFile from the GitHub copora. Program slicing only retains the underlined statements when k bound is set to 1, since they have direct control or data dependences on the focal API call to createNewFile at line 18.\n\nExampleCheck builds the control flow graph of a GitHub snippet and identifies related control structures [1]. A control structure is related to the given API call, if there exists a path between the two and the API call is not post-dominated by the control structure. For instance, the API call to createNewFile (line 18) is control dependent on the if statements at lines 2 and 17 in Figure 3. From each control structure, we lift the contained predicate. This process is a pre-cursor for mining a common guard condition that protects each API method call in Phase 3. We use the conjunction of the lifted predicates in all relevant control structures. If an API call is in the false branch of a control structure, we negate the predicate when constructing the guard. In Figure 3, since createNewFile is in the false branch of the if statement at line 2 and the true branch of the if statement at line 17, its guard condition is temp.equals( props.txt ) && !file.exists(). The process of lifting control predicates can be further improved via symbolic execution to account for the effect of program statement before an API call. Project-specific predicates and variable names used in the guard conditions are later generalized in Phase 3 to unify equivalent guards regardless of project-specific details.\n\nExampleCheck performs intra-procedural program slicing [36] to filter out any statements not related to the API method of interest. For example, Properties API calls in Figure 3 should be removed, since they are irrelevant to createNewFile. During this process, ExampleCheck uses both backward and forward slicing to identify data-dependent statements up to k hops. Setting k to 1 retains only immediately dependent API calls in the call sequence, while setting k to \u221e includes all transitively dependent API calls. For instance, the Properties APIs such as load (line 9) and set (lines [11][12][13] are transitively dependent on createNewFile through variables file, out, and prop. Table 1 shows the call sequences extracted from Figure 3 with different k bounds. By removing irrelevant statements, program slicing significantly reduces the mining effort  and also improves the mining precision. Setting k to 1 leads to best performance empirically (discussed in Section 5).\n\n\nFrequent Subsequence Mining\n\nGiven a set of structured call sequences from Phase 1, ExampleCheck finds common subsequences using BIDE [34]. Computing the common subsequence is widely practiced in the literature of API usage mining [25,26,33,38] and has the benefit of filtering out API calls pertinent to only a few outlier examples. In this phase, Exam-pleCheck focuses on mining the temporal ordering of API calls only. The task of mining a common guard condition is done in Phase 3 instead. BIDE mines frequent closed sequences above a given minimum support threshold \u03c3 . A sequence is a frequent closed sequence, if it occurs frequently above the given threshold and there is no super-sequence with the same support. When matching API signature, ExampleCheck matches * with any other types in the same position in an API call. For example, write(int, * ) can be matched with write(int,String) but will not be matched with write(String,int). ExampleCheck ranks a list of sequence patterns based on the number of supporting GitHub examples, which we call support. ExampleCheck filters invalid sequence patterns that do not follow the grammar in Figure 2, as frequent sub-sequence mining can find invalid patterns with unbalanced brackets such as \"foo@true; }; }\".\n\n\nGuard Condition Mining\n\nGiven a common subsequence from Phase 2, ExampleCheck mines the common guard condition of each API call in the sequence. The rationale is that each method call in the common subsequence may have a guard to ensure that the constituent API call does not lead to a failure. Therefore, ExampleCheck collects all guard conditions from each call from Phase 1 and clusters them based on semantic equivalence. The guard conditions extracted from GitHub often contain project-specific predicates and variable names. In Figure 3,  ExampleCheck removes project-specific predicates (i.e., predicates that do not mention the receiver object or input arguments of the given API call) by substituting them with true. This ensures that the generalized guard condition is still implied by the original guard after removing project-specific predicates. In addition, since each code snippet may use different variable names, we normalize these names in the guard conditions. ExampleCheck uses rcv and argi as the symbolic names of the receiver and the i-th input argument. Table 2 illustrates how we canonicalize guard conditions of String.substring. This method takes an integer index as input and returns a substring that begins from the given index. The third guard condition in Column Guard contains a project-specific predicate, dir!=null. Since such predicate is not related to String.substring's arguments or receiver object, ExampleCheck substitutes dir!=null with true, as shown in Column Generalized. All three examples name the receiver object differently-s, log, and f respectively. Ex-ampleCheck replaces them with a unique symbol, rcv. Similarly, ExampleCheck replaces the input argument with arg0, as shown in Column Symbolized.\nlog.substring(index) -1<index && index<log.length()+1 -1<index && index<log.length()+1 -1<arg0 && arg0<rcv.length()+1 f.substring( f.indexOf(\"/\")) dir!=null && f.indexOf(\"/\")>=0 && f.indexOf(\"/\")<=f.length() true && f.indexOf(\"/\")>=0 && f.indexOf(\"/\")<=f.length() true && arg0>=0 && arg0<=rcv.length()\nExampleCheck initializes each cluster with each canonicalized guard. In the following clustering process, ExampleCheck checks the equivalence of every pair of clusters and merges them with if the guards are logically equivalent, until no more clusters can be merged. At the end, we count the number of guard conditions in each cluster as frequency. In a large corpus, the same logic predicate can be expressed in multiple ways. ExampleCheck checks the semantic equivalence of guard conditions, instead of syntactic similarity only. ExampleCheck formalizes the equivalence of two guard conditions as a satisfiability problem:\np \u21d4 q is valid iff. \u00ac((\u00acp \u2228 q) \u2227 (p \u2228 \u00acq)) is unsatisfiable.\nExampleCheck uses a SMT solver, Z3 [6] to check the logical equivalence between two guards during the merging process. As Z3 only supports primitive types, ExampleCheck declares variables of unsupported data types as integer variables and substitutes constants such as null with integers in Z3 queries. In addition, Exam-pleCheck substitutes API calls in a predicate to symbolic variables based on their return types. Compared with prior work [18], Exam-pleCheck is capable of proving the semantic equivalence of arbitrary predicates regardless of their syntactic similarity. For example, the symbolized guards of the first two examples in Table 2 are equivalent, even though they are expressed in different ways, (-1<arg0 && arg0<rcv.length()+1) and (0<=arg0 && arg0<=rcv.length()) respectively. Prior work [18] cannot reason about the equivalence between -1<arg0 and 0<=arg0. However, ExampleCheck groups these logically equivalent predicates into the same cluster using the integer theorem prover in Z3.\n\nIf ExampleCheck identifies a sequence pattern containing multiple guard patterns for each API call, ExampleCheck enumerates different guards for each API and ranks these patterns by the number of supporting code examples in the corpora. Similar to the subsequence mining in Phase 2, ExampleCheck uses a minimum support threshold \u03b8 to filter infrequent guard conditions.\n\nWe bootstrap ExampleCheck with both the sequence mining threshold \u03c3 and the guard condition mining threshold \u03b8 set to 0.5, which means sequence and guard condition patterns are reported, only if more than half of relevant GitHub snippets include them. If ExampleCheck learns no patterns with these initial thresholds, we gradually decrease both thresholds by 0.1 till finding patterns. If the mining process does not terminate after 2 hours due to too many candidate patterns, we kill the process and increase both thresholds by 0.1 accordingly. This threshold adjustment method is empirically effective to achieve a good precision (73%).\n\n\nManual Inspection of Mined API Usage\n\nExampleCheck scans over 380K GitHub projects and finds an average of 55144 relevant code snippets for each API method, ranging from 211 to 450,358 snippets. This result indicates that massive corpora can provide sufficient code snippets to learn API usage patterns from. ExampleCheck infers 245 API usage patterns for the 100 APIs in our study scope. This initial set of patterns may include invalid or incorrect patterns. Therefore, we manually inspect the 245 inferred patterns carefully and exclude incorrect ones based on online documentation and pattern frequencies. The overall precision is 73%, resulting in 180 validated, correct patterns that we can use for the empirical study in Section 4. These 180 validated patterns cover 85 of the 100 API methods. The rest 15 API methods do not converge to any API usage patterns that can be confirmed by online documentation, since they are simple to use and do not require additional guard conditions or additional API calls. For example, System.nanoTime can be used stand-alone to obtain the current system time. Even though these 15 API methods do not have any patterns, we still include them in the scope of Stack Overflow study, since they represent a category of simple API methods that programmers are less likely to make mistakes.\n\nDuring the inspection process, each pattern is annotated as either alternative or required. A code snippet should satisfy one of alternative patterns and must satisfy all required patterns. For example, ExampleCheck learns firstKey()@rcv.size()>0 and firstKey()@-!rcv.isEmpty() for SortedMap.firstKey. Both patterns ensure that a sorted map is not empty before getting the first key to avoid NoSuchElementException. They are considered alternative to each other. As an example of required patterns, programmers must handle potential IOException, when reading from a stream (e.g., FileChannel), and close it to avoid resource leaks. Table 3 shows 25 samples of validated API patterns in 9 domains. Alternative patterns are marked with \u2663. Column Description describes each pattern. For instance, TypedArray is allocated from a static pool to store the layout attributes, whenever a new application view is created in Android. It should be recycled immediately to avoid resource leaks and GC overhead, as mentioned in the JavaDoc. 4 This pattern is supported by 2126 of 3348 related snippets in GitHub and inferred by ExampleCheck (ranked #1). The entire data set of API usage patterns for all 100 APIs and the list of SO posts with potential API usage violations are publicly available. 5 \n\n\nAPI MISUSE STUDY ON STACK OVERFLOW\n\nWe use the data set of validated, desirable API usage patterns from Section 3 and study API misuse in Stack Overflow posts.\n\n\nData Collection\n\nWe collect all Stack Overflow posts relevant to the 100 Java APIs in our study scope from the Stack Overflow data dump. We extract code examples in the markdown <code> from SO posts with the Java tag and consider code examples in the answer posts only, since code appearing in the question posts is buggy and rarely used as examples. We gather additional information associated with each post, including view counts, vote scores (i.e., upvotes minus downvotes), and whether a post is accepted as a correct answer.\n\nPrevious studies have shown that online code snippets are often unparsable [23,37] and contain ambiguous API elements [5] due to the incompleteness of these snippets. ExampleCheck leverages a state-of-the-art partial program parsing and type resolution technique to handle these incomplete snippets, whose accuracy of API resolution is reported to be 97% [24]. Code examples that call overridden APIs or ambiguous APIs (i.e., APIs with the same name but from different Java classes) are filtered by checking the argument and receiver types respectively. In total, we find 217,818 SO posts with code examples for the 100 APIs in our study scope. Each post has 7644 view counts on average.\n\nExampleCheck checks whether the structured call sequence of a Stack Overflow code example is subsumed by the desirable API usage in the pattern set. A structured call sequence s is subsumed by a pattern p, only if p is a subsequence of s and the guard condition of each API call in s implies the guard of the corresponding API call in p. During this subsumption checking process, the guard conditions in Stack Overflow code examples are generalized in the same manner before checking logical implication using Z3. For a SO post with multiple method-level code snippets, ExampleCheck inlines invoked methods before extracting the structured call sequence in order to emulate a lightweight inter-procedural analysis.\n\n\nManual Inspection of Stack Overflow\n\nTo check whether Stack Overflow posts with potential API misuse reported by ExampleCheck indeed suggest undesirable API usage, the first and the third authors manually check 400 random samples of SO posts with reported API usage violations. We read the text descriptions and comments of each post and check whether the surrounding narrative discusses how to prevent the violated pattern. If there are multiple code snippets in a post, we first combine them all together and check them as a single code example. We also account for aliasing during code inspection. We examine whether  the reported API usage violation could produce any potential behavior anomaly, such as program crashes and resource leaks on a contrived input data or program state and whether such anomaly could have been eliminated by following the desirable pattern. For short posts, this inspection takes about 5 minutes each. For longer posts with a big chunk of code or multiple code fragments, it takes around 15 to 20 minutes. To reduce subjectivity, the two authors inspect these posts independently. The initial inter-rater agreement is 0.84, measured by Cohen's kappa coefficient [32]. The two authors resolve disagreements on all but two posts, and the kappa coefficient after the discussion is 0.99. The two authors disagree how helpful reported violations are in two posts, where API usage violations in these posts are either clarified in surrounding natural language explanations or mentioned in post comments.\n\nTrue Positive. 289 out of 400 inspected Stack Overflow posts (72%) contain real API misuse, confirmed by both authors. For instance, the following example demonstrates how to retrieve records from SQLiteDatabase using Cursor but forgets to close the database connection at the end. 6 Programmers should always close the connection to release all its resources. Otherwise, it may quickly run out of memory, when retrieving a large volume of data from the database frequently. In many cases, a code example may function well with some crafted input data, even though it does not follow desirable API usage. For example, programmers should check whether the return value of String.indexOf is negative to avoid IndexOutOfBoundsException. The example below does not follow this practice, but still works well with a hard-coded constant, text. 7 One can argue that the input data is hard-coded for illustration purposes only, as the role of Stack Overflow post is to provide a starting point rather than teaching complete details of correct API usage. However, if a programmer reuses this code example and replaces the hard-coded text with a function call reading from a html file, the reused code may crash if the html document does not have an expected element. Therefore, it is still beneficial to inform the users about desirable usage and potential pitfalls, especially for a novice programmer who may not be familiar with the given API.\n\n1 String text = <img src=\\ mysrc\\ width=\\ 128\\ height=\\ 92\\ border=\\ 0\\ alt=\\ alt\\ /><p><strong> ; 2 text = text.substring(text.indexOf( src=\\ )); 3 text = text.substring( src=\\ .length()); 4 text = text.substring(0, text.indexOf( \\ )); 5 System.out.println(text); False Positive. ExampleCheck mistakenly detects API misuse in 64 posts. The majority reason is that ExampleCheck checks for API misuse via a sequence comparison without deep knowledge of its specification, which is not sufficient in 56 posts. For instance, the following SO post calls substring (line 5) without explicitly checking whether the start index (index+1) is not a negative number and the end index (strValue.length()) is not greater than the length of the string. 8 While ExampleCheck warns potential API misuse, according to JDK specifications, indexOf never returns a negative integer \u2264 -2. Thus, the following code is still safe, because index+1 is guaranteed to be non-negative. Similarly, strValue.length() returns the string's length, which cannot be out of bounds. Such cases require having detailed specifications, such as the return value of indexOf() is always \u22651. ExampleCheck does not learn these alternative usage patterns, because they do not commonly appear in GitHub. For example, programmers should first call new SimpleDateFormat to instantiate SimpleDateFormat with a valid date pattern and then call format, which is supported by 18,977 related GitHub snippets. An alternative way is to instantiate SimpleDateFormat by calling getInstance, as shown in the following SO post. 9 This alternative usage is supported by 360 GitHub snippets and therefore not inferred by Exam-pleCheck due to its low frequency. In some SO posts, users explicitly state in surrounding natural language text that the given code example must be improved during integration or adaptation. The following example shows how to load a Class instance by name and then cast the class. 10 The author of this post comments that \"be aware that this might throw several Exceptions, e.g. if the class defined by the string does not exist or if AnotherClass.classMethod() doesn't return an instance of the class you want to cast to.\" ExampleCheck still flags the post because of a missing exception handling, since the desirable API usage is not reflected in the embedded code. However, it is certainly possible that SO users will read both the code and surrounding text carefully and investigate how to handle edge cases narrated in the text.\n\n\nIs API Misuse Prevalent on Stack Overflow?\n\nExampleCheck detects potential API misuse in 66,897 (31%) out of 217,818 Stack Overflow posts in our study. We manually label each API pattern with its corresponding domain as well as the consequence of each possible violation. Then we write scripts to categorize reported violations based on their domains and based on their consequences. Figure 4 shows the prevalence of API misuse from different domains. Database, IO, and network APIs are often misused, since they often require to handle potential runtime exceptions and close underlying streams to release resources properly at the end. Similarly, many cryptography related posts are flagged as unreliable, due to unhandled exceptions. Stack Overflow posts on string and text manipulation often forget to check the validity of input data (e.g., whether the input string is empty) or return values (e.g., whether the returned character index is -1).\n\nAmong posts with potential API misuse reported by Exam-pleCheck, 76% could potentially lead to program crashes, e.g., unhandled runtime exceptions. 18% could lead to incomplete action, e.g., not completing a transaction after modifying resources in Android, or not calling setVisible after modifying the look and feel of a swing GUI widget. 2% could lead to resource leaks in operating systems, e.g., not closing a stream. We fully acknowledge that not all detected violations could lead to bugs when ported to a target application. To accurately assess the runtime impact of SO code examples, one must systematically integrate these examples to real-world target applications and run regression tests.\n\nMany SO examples aim to answer a particular programming question. Therefore, authors of these examples may assume SO users who posted these questions already know about the used APIs and may not include complete details of desirable API usage. However, given that each post has 7,644 view counts on average, some users may not have similar background knowledge. Especially for novice programmers, it may be useful to show extra tips about desirable API usage evidenced by a large number of GitHub code snippets. We also find that SO posts with API misuse are more frequently viewed than those posts without API misuse, 8365 vs. 7276 on average. Therefore, there is an opportunity to help users consider better or alternative API usage mined from massive corpora, when they stumble upon SO posts with potential API misuse.\n\n\nAre highly voted posts more reliable?\n\nStack Overflow allows users to upvote and downvote a post to indicate the applicability and usefulness of the post. Therefore, votes are often considered the main quality metric of Stack Overflow examples [17]. However, we find that highly voted posts are not necessarily more reliable in terms of correct API usage. Figure 5 shows the percentage of SO posts with different vote scores that are detected with at least one API usage violation. We perform a linear regression on the vote score and the percentage of unreliable examples, as shown by the red line in Figure 5. We do not observe a strong positive or negative correlation between the vote of a post and its reliability in terms of API misuse. A previous study shows that concise code examples and detailed step-by-step explanations are two key factors of highly voted Stack Overflow posts [17]. Our manual inspection confirms that many unreliable examples are simplified to operate on crafted input data for illustration purposes only To improve the quality of curated examples, Stack Overflow needs another mechanism that helps developers understand the limitation of existing examples and decide how to integrate the given example to production code (Section 5). \n\n\nWhat are the characteristics of API misuse?\n\nWe classify the detected API usage violations into three categories based on the required edits to correct the violations. Missing Control Constructs. Many APIs should be used in a specific control-flow context to avoid unexpected behavior. This type of API usage violations can be further split based on the type of missing control constructs.\n\nMissing exception handling. If an API may throw an exception, the thrown exception should either be caught and handled a try-catch block or be declared in the method header. In total, we find 17,432 code examples that do not handle exceptions properly. For example, Integer.parseInt may throw NumberFormatException if the string does not contain a parsable integer. The following example will crash, if a user enters an invalid integer. 12 A good practice is to surround parseInt with a try-catch block to handle the potential exception. Unlike checked exceptions such as IOException, runtime exceptions such as NumberFormatException will not be checked at compile time. In such cases, it would be helpful to inform users about which runtime exceptions must be handled based on common exception handling usage in GitHub.\n\nThreats to Validity. Our study is limited to 100 Java APIs that frequently appear in Stack Overflow and thus may not generalize to other Java APIs or different languages. Our scope is limited to code snippets found on Stack Overflow. Other types of online resources such as programming blogs and other Q&A forums may have better curated examples. According to the manual inspection of 400 sampled SO posts with detected API usage violations, Ex-ampleCheck detects API misuse with 72% precision (Section 4.2). While the precision is rather low, ExampleCheck could be still useful in the case of false positives, since the goal of ExampleCheck is not to discard SO posts with potential API violations, but rather to suggest desirable or alternative API usage details to the users.  [23,37]. Due to the incompleteness of code snippets, 89% of API names in code snippets from online forums are ambiguous and cannot be easily resolved [5]. Subramanian [29]. The responses from GitHub users indicate that less than half of the SO examples are self-explanatory.\n\n\nRELATED WORK\n\nWhile our study also indicates the limitation of code example quality in Stack Overflow, our study focuses on API usage violations that may lead to unexpected behavior such as program crashes and resource leaks by contrasting SO code examples against desirable API usage mined from massive corpora. Our results strongly motivate the need of systematically augmenting Stack Overflow and helping the user to implicitly assess the given SO example with quantitative evidence about how many GitHub snippets follow (or do not follow) related API usage patterns. API Usage Mining. There is a large body of literature in mining implicit programming rules, API usage, and temporal properties of API calls. Since API usage mining is only a part of our data set construction process, we are not arguing the novelty of API mining employed in ExampleCheck. Nevertheless, we briefly describe how API usage mining in ExampleCheck is related to prior work.\n\nGruska et al. extract call sequences from programs and perform formal concept analysis [11] to infer pairwise temporal properties of API calls [14]. Many other specification mining techniques are dedicated to inferring temporal properties of API calls [3,8,10,19,20,35]. UP-Miner mines frequent sequence patterns but does not retain control constructs and guard conditions in API usage patterns [33]. Several techniques [15,16,27] model programs as item sets and infer pairwise programming rules using frequent itemset mining [13], which does not consider temporal ordering or guard conditions of API calls.\n\nExampleCheck mines from massive corpora of GitHub projects, several orders of magnitude larger than prior work [14,20,33,35]. ExampleCheck mines not only API call ordering but also guard conditions using predicate mining. To our best knowledge, Ramanathan et al. [21] and Nguyen et al. [18] are the only two predicate mining techniques. Ramanathan et al. apply inter-procedure data-flow analysis to collect all predicates related to a call site and then use frequent itemset mining to find common predicates. Unlike Ex-ampleCheck, Ramanathan et al. only mine a single project and cannot handle semantically equivalent predicates in different forms. Nguyen et al. improve upon Ramanathan et al. by normalizing predicates using several rewriting heuristics. Unlike these techniques, ExampleCheck formalizes the predicate equivalence problem as a satisfiability problem and leverages a SMT solver to group logically equivalent predicates during guard mining.\n\n\nCONCLUSION\n\nProgrammers often resort to code examples on online Q&A forums such as Stack Overflow to learn about how to use APIs correctly during software development. However, the reliability of code examples in Stack Overflow posts is under-investigated. To demonstrate the prevalence and severity of API misuse in online code examples, we mine frequent API usage patterns from 380,125 GitHub repositories, carefully check the resulting 245 mined patterns manually, and contrast 217,818 Stack Overflow posts with 180 validated patterns. Our study provides empirical evidence that almost one third of Stack Overflow posts may contain potential API usage violations that could produce symptoms such as program crashes and resource leaks. Even highly voted posts are not necessarily more reliable than other posts in terms of API usage correctness.\n\nCertainly, the purpose of Stack Overflow is to provide a starting point for investigation and its code examples do not necessarily include all details of how to reuse the given code. However, for novice developers, it may be useful to show extra tips about desirable API usage evidenced by a large number of GitHub snippets. Our work provides a foundation for enriching and enhancing code snippets in a collaborative Q&A forum by contrasting them against frequent usage patterns learned from massive code corpora. Such approach could help the user to implicitly assess the given code example and reduce the effort of integrating, adapting, and testing the curated example in a target application. As a future work, we plan to validate ExampleCheck with developers and solicit their feedback on its Chrome extension.\n\nFigure 1 :\n1886 (a) An example that does not close FileChannel properly 1 (b) An example that misses exception handling 2 Two code examples about how to write data to a file using FileChannel on Stack Overflow\n\n\n(IOException | SQLException){...} to multiple catch blocks with a single exception type such as catch (IOException){...} catch (SQLException){...}.\n\n\nUserInfo userInfo = new UserInfo();9 userInfo.setAppId(cursor.getString(cursor.getColumnIndex( COLUMN_APP_ID))); 10 // HERE YOU CAN MULTIPLE RECORD AND ADD TO LIST 11 listUserInfo.add(userInfo); 6 https://stackoverflow.com/questions/31531250\n\n\nfalse positives are correct but infrequent alternatives.\n\n1\n... some other code... 2 public String toString() { 3 Calendar c = new GregorianCalendar(); 4 c.set(Calendar.DAY_OF_WEEK, this.toCalendar());\n\nFigure 4 :\n4API Misuse Comparison between Different Domains (Section 4.2). Such curated examples are not sufficient for various input data and usage scenarios in real software systems, especially for handling corner cases. Therefore, votes alone should not be used as a single indicator of the quality of online code examples.\n\nFigure 5 :\n5API Misuse Comparison between Code Examples with Different Vote Scores on Stack Overflow\n\nTable 1 :\n1Structured call sequences sliced using k bounds.Guard conditions and argument types are omitted for pre-\nsentation purposes. \n\n\n\n\nthe identified guard condition of createNewFile (line 18) is temp.equals( props.txt ) && !file.exists(). Its first predicate temp.equals( props.txt ) checks whether a string variable temp contains a specific content. Neither the variable temp nor the predicate are related to the usage of createNewFile. Therefore, Exam-pleCheck first abstracts away such syntactic details before clustering guard conditions. For each guard condition from Phase 1,API Call \nGuard \nGeneralized \nSymbolized \n\ns.substring(start) \nstart>=0 && \nstart<=s.length() \n\nstart>=0 && \nstart<=s.length() \n\narg0>=0 && \narg0<=rcv.length() \n\n\n\nTable 2 :\n2Example guard conditions of String.substring. API Call shows three example call sites. Guard shows the guard condition associated with each call site. Generalized shows the guard conditions after eliminating project-specific predicates. Symbolized shows the guard conditions after symbolizing variable names.\n\nTable 3 :\n325 samples of manually validated API usage patterns after GitHub code mining.\n\n\nQuality Assessment of Online Code Examples. Prior work has investigated the quality of online code examples from different perspectives. The majority of code examples on Stack Overflow are free-standing program statements that cannot be accepted by compilers\n\n\net al. design a partial program parsing and type resolution technique for Stack Overflow code snippets, which ExampleCheck uses to resolve API names [24]. Zhou et al. find that 86 of 200 accepted posts on Stack Overflow use deprecated APIs but only 3 of them are reported by other programmers [39]. Fischer et al. investigate security-related code on Stack Overflow and find that 29% is insecure [9]. They further apply clone detection to check whether insecure code is reused from Stack Overflow to Android applications on Google Play and find that insecure code may have been copied to over 1 million Android apps. An et al. investigate copyright issues between Stack Overflow and GitHub [4] and find a large number of potential license violations. Treude and Robillard conduct a survey to investigate comprehension difficulty of code examples in Stack Overflow\nhttps://archive.org/details/stackexchange, accessed on Oct 17, 2016.\nhttps://developer.android.com/reference/android/content/res/TypedArray.html 5 http://web.cs.ucla.edu/~tianyi.zhang/examplecheck.html\nhttps://stackoverflow.com/questions/12742734\nClass<?> myclass = Class.forName( myClass_t ); 2 myClass_t myVar = (myClass_t)myclass.cast(AnotherClass.classMethod()); Sometimes, Stack Overflow users split a single code example into multiple fragments and provide step-by-step explanation, which is considered as a better way of answering questions in Stack Overflow[17]. ExampleCheck may report API misuse if two related API calls are split in different code fragments.11 This can be addressed by stitching these snippets together during analysis.8 http://stackoverflow.com/questions/7473462 9 https://stackoverflow.com/questions/2243850 10 https://stackoverflow.com/questions/4650708 11 https://stackoverflow.com/questions/11552754\nScanner scanner = new Scanner(System.in); 2 System.out.print( Enter Number of Students:\\t ); 3 int numStudents = :::::::::Integer.parseInt(scanner.nextLine());\nACKNOWLEDGMENTSWe would like to thank anonymous reviewers for the helpful feedback. This work is supported by AFRL grant FA8750-15-2-0075, and NSF grants CCF-1527923, CCF-1460325, CCF-1423370, CNS-1513263, and CCF-1518897. Anastasia Reinhardt's internship at UCLA is supported by CRA-W Distributed Research Experiences for Undergraduates (DREU) program.Missing if checks. Some APIs may return erroneous values such as null pointers, which must be checked properly to avoid crashing the succeeding execution. For example, TypedArray.getString may return null, if the given attribute is not defined in the style resource of an Android application. Therefore, the return value, customFont must be checked before passing it as an argument of setCustomFont (line 6) to avoid NullPointerException, which is violated by the following Stack Overflow example.  Missing or Incorrect Order of API calls. In certain cases, multiple APIs should be called together in a specific order to achieve 12 https://stackoverflow.com/questions/3137481 13 https://stackoverflow.com/questions/7197867 14 https://stackoverflow.com/questions/31427468\nControl flow analysis. Frances E , Allen , ACM Sigplan Notices. ACM5Frances E Allen. 1970. Control flow analysis. In ACM Sigplan Notices, Vol. 5. ACM, 1-19.\n\nMUBench: a benchmark for API-misuse detectors. Sven Amani, Sarah Nadi, A Hoan, Tien N Nguyen, Mira Nguyen, Mezini, Proceedings of the 13th International Conference on Mining Software Repositories. the 13th International Conference on Mining Software RepositoriesACMSven Amani, Sarah Nadi, Hoan A Nguyen, Tien N Nguyen, and Mira Mezini. 2016. MUBench: a benchmark for API-misuse detectors. In Proceedings of the 13th International Conference on Mining Software Repositories. ACM, 464-467.\n\nMining specifications. Glenn Ammons, Rastislav Bodik, James R Larus, 10.1145/503272.503275POPL '02: Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. New York, NY, USAACM PressGlenn Ammons, Rastislav Bodik, and James R. Larus. 2002. Mining specifica- tions. In POPL '02: Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. ACM Press, New York, NY, USA, 4-16. DOI:http://dx.doi.org/10.1145/503272.503275\n\nStack overflow: a code laundering platform. Le An, Ons Mlouki, Foutse Khomh, Giuliano Antoniol, Software Analysis, Evolution and Reengineering (SANER). IEEE 24th International Conference on. IEEELe An, Ons Mlouki, Foutse Khomh, and Giuliano Antoniol. 2017. Stack overflow: a code laundering platform?. In Software Analysis, Evolution and Reengineering (SANER), 2017 IEEE 24th International Conference on. IEEE, 283-293.\n\nRecovering traceability links between an API and its learning resources. Barth\u00e9l\u00e9my Dagenais, P Martin, Robillard, 34th International Conference on Software Engineering (ICSE). IEEEBarth\u00e9l\u00e9my Dagenais and Martin P Robillard. 2012. Recovering traceability links between an API and its learning resources. In 2012 34th International Conference on Software Engineering (ICSE). IEEE, 47-57.\n\nZ3: An efficient SMT solver. Leonardo De Moura, Nikolaj Bj\u00f8rner, International conference on Tools and Algorithms for the Construction and Analysis of Systems. SpringerLeonardo De Moura and Nikolaj Bj\u00f8rner. 2008. Z3: An efficient SMT solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 337-340.\n\nBoa: A language and infrastructure for analyzing ultra-large-scale software repositories. Robert Dyer, Anh Hoan, Hridesh Nguyen, Tien N Rajan, Nguyen, Proceedings of the 2013 International Conference on Software Engineering. the 2013 International Conference on Software EngineeringIEEE PressRobert Dyer, Hoan Anh Nguyen, Hridesh Rajan, and Tien N Nguyen. 2013. Boa: A language and infrastructure for analyzing ultra-large-scale software repositories. In Proceedings of the 2013 International Conference on Software Engineering. IEEE Press, 422-431.\n\nDynamically discovering likely program invariants to support program evolution. D Michael, Jake Ernst, Cockrell, G William, David Griswold, Notkin, IEEE Transactions on Software Engineering. 27Michael D Ernst, Jake Cockrell, William G Griswold, and David Notkin. 2001. Dynamically discovering likely program invariants to support program evolution. IEEE Transactions on Software Engineering 27, 2 (2001), 99-123.\n\nStack Overflow Considered Harmful? The Impact of Copy&Paste on Android Application Security. Felix Fischer, Konstantin B\u00f6ttinger, Huang Xiao, Christian Stransky, Security and Privacy (SP. Yasemin Acar, Michael Backes, and Sascha FahlFelix Fischer, Konstantin B\u00f6ttinger, Huang Xiao, Christian Stransky, Yasemin Acar, Michael Backes, and Sascha Fahl. 2017. Stack Overflow Considered Harmful? The Impact of Copy&Paste on Android Application Security. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 121-136.\n\nOnline inference and enforcement of temporal properties. Mark Gabel, Zhendong Su, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering. the 32nd ACM/IEEE International Conference on Software EngineeringACM1Mark Gabel and Zhendong Su. 2010. Online inference and enforcement of temporal properties. In Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ACM, 15-24.\n\nFormal concept analysis: mathematical foundations. Bernhard Ganter, Rudolf Wille, Springer Science & Business MediaBernhard Ganter and Rudolf Wille. 2012. Formal concept analysis: mathematical foundations. Springer Science & Business Media.\n\nVisualizing API Usage Examples at Scale. Elena Glassman, * , Tianyi Zhang, * , Bj\u00f6rn Hartmann, Miryung Kim, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM. *. the SIGCHI Conference on Human Factors in Computing Systems. ACM. *The two lead authors contributed equally to the work as part of an equal collaboration between both institutionsElena Glassman*, Tianyi Zhang*, Bj\u00f6rn Hartmann, and Miryung Kim. 2018. Visu- alizing API Usage Examples at Scale. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM. *The two lead authors contributed equally to the work as part of an equal collaboration between both institutions.\n\nEfficiently using prefix-trees in mining frequent itemsets. G\u00f6sta Grahne, Jianfei Zhu, FIMI. 90G\u00f6sta Grahne and Jianfei Zhu. 2003. Efficiently using prefix-trees in mining frequent itemsets.. In FIMI, Vol. 90.\n\nLearning from 6,000 projects: lightweight cross-project anomaly detection. Natalie Gruska, Andrzej Wasylkowski, Andreas Zeller, Proceedings of the 19th international symposium on Software testing and analysis. the 19th international symposium on Software testing and analysisACMNatalie Gruska, Andrzej Wasylkowski, and Andreas Zeller. 2010. Learning from 6,000 projects: lightweight cross-project anomaly detection. In Proceedings of the 19th international symposium on Software testing and analysis. ACM, 119-130.\n\nPR-Miner: automatically extracting implicit programming rules and detecting violations in large software code. Zhenmin Li, Yuanyuan Zhou, ACM SIGSOFT Software Engineering Notes. ACM30Zhenmin Li and Yuanyuan Zhou. 2005. PR-Miner: automatically extracting implicit programming rules and detecting violations in large software code. In ACM SIGSOFT Software Engineering Notes, Vol. 30. ACM, 306-315.\n\nDetecting missing method calls in object-oriented software. Martin Monperrus, Marcel Bruch, Mira Mezini, European Conference on Object-Oriented Programming. SpringerMartin Monperrus, Marcel Bruch, and Mira Mezini. 2010. Detecting missing method calls in object-oriented software. In European Conference on Object- Oriented Programming. Springer, 2-25.\n\nWhat makes a good code example?: A study of programming Q&A in StackOverflow. Jonathan Seyed Mehdi Nasehi, Frank Sillito, Chris Maurer, Burns, 28th IEEE International Conference on. IEEE. Software Maintenance (ICSM)Seyed Mehdi Nasehi, Jonathan Sillito, Frank Maurer, and Chris Burns. 2012. What makes a good code example?: A study of programming Q&A in StackOverflow. In Software Maintenance (ICSM), 2012 28th IEEE International Conference on. IEEE, 25-34.\n\nMining preconditions of APIs in large-scale code corpus. Anh Hoan, Robert Nguyen, Dyer, N Tien, Hridesh Nguyen, Rajan, Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. the 22nd ACM SIGSOFT International Symposium on Foundations of Software EngineeringACMHoan Anh Nguyen, Robert Dyer, Tien N Nguyen, and Hridesh Rajan. 2014. Mining preconditions of APIs in large-scale code corpus. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 166-177.\n\nAutomatic generation of object usage specifications from large method traces. Michael Pradel, Thomas R Gross, Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering. the 2009 IEEE/ACM International Conference on Automated Software EngineeringIEEE Computer SocietyMichael Pradel and Thomas R Gross. 2009. Automatic generation of object usage specifications from large method traces. In Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering. IEEE Computer Society, 371-382.\n\nStatically checking API protocol conformance with mined multi-object specifications. Michael Pradel, Ciera Jaspan, Jonathan Aldrich, Thomas R Gross, Proceedings of the 34th International Conference on Software Engineering. the 34th International Conference on Software EngineeringIEEE PressMichael Pradel, Ciera Jaspan, Jonathan Aldrich, and Thomas R Gross. 2012. Stati- cally checking API protocol conformance with mined multi-object specifications. In Proceedings of the 34th International Conference on Software Engineering. IEEE Press, 925-935.\n\nStatic specification inference using predicate mining. Ananth Murali Krishna Ramanathan, Suresh Grama, Jagannathan, In ACM SIGPLAN Notices. 42ACMMurali Krishna Ramanathan, Ananth Grama, and Suresh Jagannathan. 2007. Static specification inference using predicate mining. In ACM SIGPLAN Notices, Vol. 42. ACM, 123-134.\n\nHow developers search for code: a case study. Caitlin Sadowski, T Kathryn, Sebastian Elbaum Stolee, Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. the 2015 10th Joint Meeting on Foundations of Software EngineeringACMCaitlin Sadowski, Kathryn T Stolee, and Sebastian Elbaum. 2015. How developers search for code: a case study. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. ACM, 191-201.\n\nMaking sense of online code snippets. Siddharth Subramanian, Reid Holmes, Proceedings of the 10th Working Conference on Mining Software Repositories. the 10th Working Conference on Mining Software RepositoriesIEEE PressSiddharth Subramanian and Reid Holmes. 2013. Making sense of online code snip- pets. In Proceedings of the 10th Working Conference on Mining Software Repositories. IEEE Press, 85-88.\n\nLive API documentation. Siddharth Subramanian, Laura Inozemtseva, Reid Holmes, Proceedings of the 36th International Conference on Software Engineering. the 36th International Conference on Software EngineeringACMSiddharth Subramanian, Laura Inozemtseva, and Reid Holmes. 2014. Live API documentation. In Proceedings of the 36th International Conference on Software Engineering. ACM, 643-652.\n\nParseweb: a programmer assistant for reusing open source code on the web. Suresh Thummalapenta, Tao Xie, Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering. the twenty-second IEEE/ACM international conference on Automated software engineeringACMSuresh Thummalapenta and Tao Xie. 2007. Parseweb: a programmer assistant for reusing open source code on the web. In Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering. ACM, 204-213.\n\nMining exception-handling rules as sequence association rules. Suresh Thummalapenta, Tao Xie, Proceedings of the 31st International Conference on Software Engineering. the 31st International Conference on Software EngineeringIEEE Computer SocietySuresh Thummalapenta and Tao Xie. 2009. Mining exception-handling rules as sequence association rules. In Proceedings of the 31st International Conference on Software Engineering. IEEE Computer Society, 496-506.\n\nAlattin: mining alternative patterns for defect detection. Suresh Thummalapenta, Tao Xie, Automated Software Engineering. 18293Suresh Thummalapenta and Tao Xie. 2011. Alattin: mining alternative patterns for defect detection. Automated Software Engineering 18, 3 (2011), 293.\n\nEffective Interprocedural Resource Leak Detection. Emina Torlak, Satish Chandra, 10.1145/1806799.1806876Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering. the 32Nd ACM/IEEE International Conference on Software EngineeringNew York, NY, USAACM1Emina Torlak and Satish Chandra. 2010. Effective Interprocedural Resource Leak Detection. In Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering -Volume 1 (ICSE '10). ACM, New York, NY, USA, 535-544. DOI:http://dx.doi.org/10.1145/1806799.1806876\n\nUnderstanding Stack Overflow Code Fragments. Christoph Treude, P Martin, Robillard, Proceedings of the 33rd International Conference on Software Maintenance and Evolution. the 33rd International Conference on Software Maintenance and EvolutionIEEEChristoph Treude and Martin P Robillard. 2017. Understanding Stack Overflow Code Fragments. In Proceedings of the 33rd International Conference on Software Maintenance and Evolution. IEEE.\n\nArchetypal internetscale source code searching. Medha Umarji, Susan Elliott Sim, Crista Lopes, IFIP International Conference on Open Source Systems. SpringerMedha Umarji, Susan Elliott Sim, and Crista Lopes. 2008. Archetypal internet- scale source code searching. In IFIP International Conference on Open Source Systems. Springer, 257-263.\n\nCollective Program Analysis. Ganesha Upadhyaya, Hridesh Rajan, Proceedings of the 40th International Conference on Software Engineering. the 40th International Conference on Software EngineeringACMGanesha Upadhyaya and Hridesh Rajan. 2018. Collective Program Analysis. In Proceedings of the 40th International Conference on Software Engineering. ACM.\n\nUnderstanding interobserver agreement: the kappa statistic. J Anthony, Joanne M Viera, Garrett, Fam Med. 37Anthony J Viera, Joanne M Garrett, and others. 2005. Understanding interobserver agreement: the kappa statistic. Fam Med 37, 5 (2005), 360-363.\n\nMining succinct and high-coverage API usage patterns from source code. Jue Wang, Yingnong Dang, Hongyu Zhang, Kai Chen, Tao Xie, Dongmei Zhang, Proceedings of the 10th Working Conference on Mining Software Repositories. the 10th Working Conference on Mining Software RepositoriesIEEE PressJue Wang, Yingnong Dang, Hongyu Zhang, Kai Chen, Tao Xie, and Dongmei Zhang. 2013. Mining succinct and high-coverage API usage patterns from source code. In Proceedings of the 10th Working Conference on Mining Software Reposito- ries. IEEE Press, 319-328.\n\nFrequent closed sequence mining without candidate maintenance. Jianyong Wang, Jiawei Han, Chun Li, IEEE Transactions on Knowledge and Data Engineering. 19Jianyong Wang, Jiawei Han, and Chun Li. 2007. Frequent closed sequence mining without candidate maintenance. IEEE Transactions on Knowledge and Data Engineering 19, 8 (2007).\n\nDetecting object usage anomalies. Andrzej Wasylkowski, Andreas Zeller, Christian Lindig, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering. the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineeringACMAndrzej Wasylkowski, Andreas Zeller, and Christian Lindig. 2007. Detecting object usage anomalies. In Proceedings of the the 6th joint meeting of the Euro- pean software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering. ACM, 35-44.\n\nProgram slicing. Mark Weiser, Proceedings of the 5th international conference on Software engineering. the 5th international conference on Software engineeringIEEE PressMark Weiser. 1981. Program slicing. In Proceedings of the 5th international conference on Software engineering. IEEE Press, 439-449.\n\nFrom query to usable code: an analysis of stack overflow code snippets. Di Yang, Aftab Hussain, Cristina Videira Lopes, Proceedings of the 13th International Workshop on Mining Software Repositories. the 13th International Workshop on Mining Software RepositoriesACMDi Yang, Aftab Hussain, and Cristina Videira Lopes. 2016. From query to usable code: an analysis of stack overflow code snippets. In Proceedings of the 13th International Workshop on Mining Software Repositories. ACM, 391-402.\n\nMAPO: Mining and recommending API usage patterns. Hao Zhong, Tao Xie, Lu Zhang, Jian Pei, Hong Mei, European Conference on Object-Oriented Programming. SpringerHao Zhong, Tao Xie, Lu Zhang, Jian Pei, and Hong Mei. 2009. MAPO: Mining and recommending API usage patterns. In European Conference on Object-Oriented Programming. Springer, 318-343.\n\nAPI deprecation: a retrospective analysis and detection method for code examples on the web. Jing Zhou, Robert J Walker, Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software EngineeringACMJing Zhou and Robert J Walker. 2016. API deprecation: a retrospective analysis and detection method for code examples on the web. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 266-277.\n", "annotations": {"author": "[{\"end\":129,\"start\":100},{\"end\":144,\"start\":130},{\"end\":165,\"start\":145},{\"end\":184,\"start\":166},{\"end\":199,\"start\":185},{\"end\":204,\"start\":200}]", "publisher": null, "author_last_name": "[{\"end\":128,\"start\":100},{\"end\":143,\"start\":138},{\"end\":164,\"start\":155},{\"end\":183,\"start\":174},{\"end\":198,\"start\":193},{\"end\":203,\"start\":200}]", "author_first_name": "[{\"end\":137,\"start\":130},{\"end\":154,\"start\":145},{\"end\":173,\"start\":166},{\"end\":192,\"start\":185}]", "author_affiliation": null, "title": "[{\"end\":51,\"start\":1},{\"end\":255,\"start\":205}]", "venue": "[{\"end\":335,\"start\":257}]", "abstract": "[{\"end\":1933,\"start\":626}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b21\"},\"end\":2291,\"start\":2287},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":2294,\"start\":2291},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2700,\"start\":2697},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":2808,\"start\":2804},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":2811,\"start\":2808},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":2842,\"start\":2838},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":2873,\"start\":2869},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4042,\"start\":4039},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4045,\"start\":4042},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7356,\"start\":7352},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9250,\"start\":9249},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9803,\"start\":9800},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":10872,\"start\":10869},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":11718,\"start\":11715},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":13322,\"start\":13320},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":13730,\"start\":13727},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":14987,\"start\":14983},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":15519,\"start\":15515},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15523,\"start\":15519},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":15527,\"start\":15523},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":16044,\"start\":16040},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":16141,\"start\":16137},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":16144,\"start\":16141},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":16147,\"start\":16144},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":16150,\"start\":16147},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":19949,\"start\":19946},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20358,\"start\":20354},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20723,\"start\":20719},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":24288,\"start\":24287},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":24545,\"start\":24544},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":25322,\"start\":25318},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":25325,\"start\":25322},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":25364,\"start\":25361},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":25602,\"start\":25598},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":27848,\"start\":27844},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":28464,\"start\":28463},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":30360,\"start\":30359},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":31191,\"start\":31190},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31570,\"start\":31568},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":34849,\"start\":34845},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":35494,\"start\":35490},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":36699,\"start\":36697},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":37866,\"start\":37862},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":37869,\"start\":37866},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":38015,\"start\":38012},{\"end\":38028,\"start\":38017},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":38033,\"start\":38029},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":39187,\"start\":39183},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":39243,\"start\":39239},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":39351,\"start\":39348},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":39353,\"start\":39351},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":39356,\"start\":39353},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":39359,\"start\":39356},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":39362,\"start\":39359},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":39365,\"start\":39362},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":39495,\"start\":39491},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":39520,\"start\":39516},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":39523,\"start\":39520},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":39526,\"start\":39523},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":39626,\"start\":39622},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":39820,\"start\":39816},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":39823,\"start\":39820},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":39826,\"start\":39823},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":39829,\"start\":39826},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":39972,\"start\":39968},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":39995,\"start\":39991},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":46426,\"start\":46422},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":46528,\"start\":46526},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":46605,\"start\":46604}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":42538,\"start\":42328},{\"attributes\":{\"id\":\"fig_1\"},\"end\":42688,\"start\":42539},{\"attributes\":{\"id\":\"fig_3\"},\"end\":42932,\"start\":42689},{\"attributes\":{\"id\":\"fig_4\"},\"end\":42991,\"start\":42933},{\"attributes\":{\"id\":\"fig_5\"},\"end\":43136,\"start\":42992},{\"attributes\":{\"id\":\"fig_6\"},\"end\":43464,\"start\":43137},{\"attributes\":{\"id\":\"fig_7\"},\"end\":43566,\"start\":43465},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":43706,\"start\":43567},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":44318,\"start\":43707},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":44639,\"start\":44319},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":44729,\"start\":44640},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":44990,\"start\":44730},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":45856,\"start\":44991}]", "paragraph": "[{\"end\":3111,\"start\":1949},{\"end\":3763,\"start\":3113},{\"end\":6152,\"start\":3765},{\"end\":6695,\"start\":6176},{\"end\":7506,\"start\":6697},{\"end\":7960,\"start\":7508},{\"end\":8780,\"start\":7962},{\"end\":9139,\"start\":8817},{\"end\":9923,\"start\":9141},{\"end\":10631,\"start\":9925},{\"end\":11205,\"start\":10686},{\"end\":11394,\"start\":11267},{\"end\":12052,\"start\":11396},{\"end\":13339,\"start\":12054},{\"end\":13620,\"start\":13395},{\"end\":14926,\"start\":13622},{\"end\":15903,\"start\":14928},{\"end\":17171,\"start\":15935},{\"end\":18922,\"start\":17198},{\"end\":19849,\"start\":19225},{\"end\":20917,\"start\":19911},{\"end\":21288,\"start\":20919},{\"end\":21928,\"start\":21290},{\"end\":23257,\"start\":21969},{\"end\":24546,\"start\":23259},{\"end\":24708,\"start\":24585},{\"end\":25241,\"start\":24728},{\"end\":25930,\"start\":25243},{\"end\":26646,\"start\":25932},{\"end\":28179,\"start\":26686},{\"end\":29617,\"start\":28181},{\"end\":32120,\"start\":29619},{\"end\":33071,\"start\":32167},{\"end\":33775,\"start\":33073},{\"end\":34598,\"start\":33777},{\"end\":35866,\"start\":34640},{\"end\":36258,\"start\":35914},{\"end\":37080,\"start\":36260},{\"end\":38136,\"start\":37082},{\"end\":39094,\"start\":38153},{\"end\":39703,\"start\":39096},{\"end\":40660,\"start\":39705},{\"end\":41510,\"start\":40675},{\"end\":42327,\"start\":41512}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":19224,\"start\":18923},{\"attributes\":{\"id\":\"formula_1\"},\"end\":19910,\"start\":19850}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":15618,\"start\":15611},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":18259,\"start\":18252},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":20558,\"start\":20551},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":23898,\"start\":23891}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1947,\"start\":1935},{\"attributes\":{\"n\":\"2\"},\"end\":6174,\"start\":6155},{\"attributes\":{\"n\":\"3\"},\"end\":8815,\"start\":8783},{\"end\":10684,\"start\":10634},{\"attributes\":{\"n\":\"3.1\"},\"end\":11265,\"start\":11208},{\"end\":13393,\"start\":13342},{\"attributes\":{\"n\":\"3.2\"},\"end\":15933,\"start\":15906},{\"attributes\":{\"n\":\"3.3\"},\"end\":17196,\"start\":17174},{\"attributes\":{\"n\":\"3.4\"},\"end\":21967,\"start\":21931},{\"attributes\":{\"n\":\"4\"},\"end\":24583,\"start\":24549},{\"attributes\":{\"n\":\"4.1\"},\"end\":24726,\"start\":24711},{\"attributes\":{\"n\":\"4.2\"},\"end\":26684,\"start\":26649},{\"attributes\":{\"n\":\"4.3\"},\"end\":32165,\"start\":32123},{\"attributes\":{\"n\":\"4.4\"},\"end\":34638,\"start\":34601},{\"attributes\":{\"n\":\"4.5\"},\"end\":35912,\"start\":35869},{\"attributes\":{\"n\":\"6\"},\"end\":38151,\"start\":38139},{\"attributes\":{\"n\":\"7\"},\"end\":40673,\"start\":40663},{\"end\":42339,\"start\":42329},{\"end\":42994,\"start\":42993},{\"end\":43148,\"start\":43138},{\"end\":43476,\"start\":43466},{\"end\":43577,\"start\":43568},{\"end\":44329,\"start\":44320},{\"end\":44650,\"start\":44641}]", "table": "[{\"end\":43706,\"start\":43627},{\"end\":44318,\"start\":44156}]", "figure_caption": "[{\"end\":42538,\"start\":42341},{\"end\":42688,\"start\":42541},{\"end\":42932,\"start\":42691},{\"end\":42991,\"start\":42935},{\"end\":43136,\"start\":42995},{\"end\":43464,\"start\":43150},{\"end\":43566,\"start\":43478},{\"end\":43627,\"start\":43579},{\"end\":44156,\"start\":43709},{\"end\":44639,\"start\":44331},{\"end\":44729,\"start\":44652},{\"end\":44990,\"start\":44732},{\"end\":45856,\"start\":44993}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":6401,\"start\":6393},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":6724,\"start\":6715},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":7551,\"start\":7542},{\"end\":11882,\"start\":11874},{\"end\":12352,\"start\":12344},{\"end\":12587,\"start\":12579},{\"end\":14401,\"start\":14393},{\"end\":15105,\"start\":15097},{\"end\":15667,\"start\":15659},{\"end\":17061,\"start\":17053},{\"end\":17716,\"start\":17708},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":32515,\"start\":32507},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":34965,\"start\":34957},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":35211,\"start\":35203}]", "bib_author_first_name": "[{\"end\":48104,\"start\":48097},{\"end\":48106,\"start\":48105},{\"end\":48114,\"start\":48109},{\"end\":48283,\"start\":48279},{\"end\":48296,\"start\":48291},{\"end\":48304,\"start\":48303},{\"end\":48315,\"start\":48311},{\"end\":48317,\"start\":48316},{\"end\":48330,\"start\":48326},{\"end\":48749,\"start\":48744},{\"end\":48767,\"start\":48758},{\"end\":48780,\"start\":48775},{\"end\":48782,\"start\":48781},{\"end\":49255,\"start\":49253},{\"end\":49263,\"start\":49260},{\"end\":49278,\"start\":49272},{\"end\":49294,\"start\":49286},{\"end\":49713,\"start\":49703},{\"end\":49725,\"start\":49724},{\"end\":50055,\"start\":50047},{\"end\":50073,\"start\":50066},{\"end\":50474,\"start\":50468},{\"end\":50484,\"start\":50481},{\"end\":50498,\"start\":50491},{\"end\":50513,\"start\":50507},{\"end\":51010,\"start\":51009},{\"end\":51024,\"start\":51020},{\"end\":51043,\"start\":51042},{\"end\":51058,\"start\":51053},{\"end\":51441,\"start\":51436},{\"end\":51461,\"start\":51451},{\"end\":51478,\"start\":51473},{\"end\":51494,\"start\":51485},{\"end\":51922,\"start\":51918},{\"end\":51938,\"start\":51930},{\"end\":52354,\"start\":52346},{\"end\":52369,\"start\":52363},{\"end\":52583,\"start\":52578},{\"end\":52595,\"start\":52594},{\"end\":52604,\"start\":52598},{\"end\":52613,\"start\":52612},{\"end\":52621,\"start\":52616},{\"end\":52639,\"start\":52632},{\"end\":53287,\"start\":53282},{\"end\":53303,\"start\":53296},{\"end\":53515,\"start\":53508},{\"end\":53531,\"start\":53524},{\"end\":53552,\"start\":53545},{\"end\":54067,\"start\":54060},{\"end\":54080,\"start\":54072},{\"end\":54412,\"start\":54406},{\"end\":54430,\"start\":54424},{\"end\":54442,\"start\":54438},{\"end\":54785,\"start\":54777},{\"end\":54811,\"start\":54806},{\"end\":54826,\"start\":54821},{\"end\":55217,\"start\":55214},{\"end\":55230,\"start\":55224},{\"end\":55246,\"start\":55245},{\"end\":55260,\"start\":55253},{\"end\":55792,\"start\":55785},{\"end\":56347,\"start\":56340},{\"end\":56361,\"start\":56356},{\"end\":56378,\"start\":56370},{\"end\":56396,\"start\":56388},{\"end\":56866,\"start\":56860},{\"end\":56900,\"start\":56894},{\"end\":57177,\"start\":57170},{\"end\":57189,\"start\":57188},{\"end\":57208,\"start\":57199},{\"end\":57215,\"start\":57209},{\"end\":57634,\"start\":57625},{\"end\":57652,\"start\":57648},{\"end\":58023,\"start\":58014},{\"end\":58042,\"start\":58037},{\"end\":58060,\"start\":58056},{\"end\":58464,\"start\":58458},{\"end\":58483,\"start\":58480},{\"end\":58982,\"start\":58976},{\"end\":59001,\"start\":58998},{\"end\":59437,\"start\":59431},{\"end\":59456,\"start\":59453},{\"end\":59705,\"start\":59700},{\"end\":59720,\"start\":59714},{\"end\":60254,\"start\":60245},{\"end\":60264,\"start\":60263},{\"end\":60690,\"start\":60685},{\"end\":60704,\"start\":60699},{\"end\":60712,\"start\":60705},{\"end\":60724,\"start\":60718},{\"end\":61014,\"start\":61007},{\"end\":61033,\"start\":61026},{\"end\":61391,\"start\":61390},{\"end\":61407,\"start\":61401},{\"end\":61409,\"start\":61408},{\"end\":61656,\"start\":61653},{\"end\":61671,\"start\":61663},{\"end\":61684,\"start\":61678},{\"end\":61695,\"start\":61692},{\"end\":61705,\"start\":61702},{\"end\":61718,\"start\":61711},{\"end\":62199,\"start\":62191},{\"end\":62212,\"start\":62206},{\"end\":62222,\"start\":62218},{\"end\":62499,\"start\":62492},{\"end\":62520,\"start\":62513},{\"end\":62538,\"start\":62529},{\"end\":63160,\"start\":63156},{\"end\":63516,\"start\":63514},{\"end\":63528,\"start\":63523},{\"end\":63546,\"start\":63538},{\"end\":63554,\"start\":63547},{\"end\":63989,\"start\":63986},{\"end\":64000,\"start\":63997},{\"end\":64008,\"start\":64006},{\"end\":64020,\"start\":64016},{\"end\":64030,\"start\":64026},{\"end\":64378,\"start\":64374},{\"end\":64393,\"start\":64385}]", "bib_author_last_name": "[{\"end\":48289,\"start\":48284},{\"end\":48301,\"start\":48297},{\"end\":48309,\"start\":48305},{\"end\":48324,\"start\":48318},{\"end\":48337,\"start\":48331},{\"end\":48345,\"start\":48339},{\"end\":48756,\"start\":48750},{\"end\":48773,\"start\":48768},{\"end\":48788,\"start\":48783},{\"end\":49258,\"start\":49256},{\"end\":49270,\"start\":49264},{\"end\":49284,\"start\":49279},{\"end\":49303,\"start\":49295},{\"end\":49722,\"start\":49714},{\"end\":49732,\"start\":49726},{\"end\":49743,\"start\":49734},{\"end\":50064,\"start\":50056},{\"end\":50081,\"start\":50074},{\"end\":50479,\"start\":50475},{\"end\":50489,\"start\":50485},{\"end\":50505,\"start\":50499},{\"end\":50519,\"start\":50514},{\"end\":50527,\"start\":50521},{\"end\":51018,\"start\":51011},{\"end\":51030,\"start\":51025},{\"end\":51040,\"start\":51032},{\"end\":51051,\"start\":51044},{\"end\":51067,\"start\":51059},{\"end\":51075,\"start\":51069},{\"end\":51449,\"start\":51442},{\"end\":51471,\"start\":51462},{\"end\":51483,\"start\":51479},{\"end\":51503,\"start\":51495},{\"end\":51928,\"start\":51923},{\"end\":51941,\"start\":51939},{\"end\":52361,\"start\":52355},{\"end\":52375,\"start\":52370},{\"end\":52592,\"start\":52584},{\"end\":52610,\"start\":52605},{\"end\":52630,\"start\":52622},{\"end\":52643,\"start\":52640},{\"end\":53294,\"start\":53288},{\"end\":53307,\"start\":53304},{\"end\":53522,\"start\":53516},{\"end\":53543,\"start\":53532},{\"end\":53559,\"start\":53553},{\"end\":54070,\"start\":54068},{\"end\":54085,\"start\":54081},{\"end\":54422,\"start\":54413},{\"end\":54436,\"start\":54431},{\"end\":54449,\"start\":54443},{\"end\":54804,\"start\":54786},{\"end\":54819,\"start\":54812},{\"end\":54833,\"start\":54827},{\"end\":54840,\"start\":54835},{\"end\":55222,\"start\":55218},{\"end\":55237,\"start\":55231},{\"end\":55243,\"start\":55239},{\"end\":55251,\"start\":55247},{\"end\":55267,\"start\":55261},{\"end\":55274,\"start\":55269},{\"end\":55799,\"start\":55793},{\"end\":55815,\"start\":55801},{\"end\":56354,\"start\":56348},{\"end\":56368,\"start\":56362},{\"end\":56386,\"start\":56379},{\"end\":56402,\"start\":56397},{\"end\":56892,\"start\":56867},{\"end\":56906,\"start\":56901},{\"end\":56919,\"start\":56908},{\"end\":57186,\"start\":57178},{\"end\":57197,\"start\":57190},{\"end\":57222,\"start\":57216},{\"end\":57646,\"start\":57635},{\"end\":57659,\"start\":57653},{\"end\":58035,\"start\":58024},{\"end\":58054,\"start\":58043},{\"end\":58067,\"start\":58061},{\"end\":58478,\"start\":58465},{\"end\":58487,\"start\":58484},{\"end\":58996,\"start\":58983},{\"end\":59005,\"start\":59002},{\"end\":59451,\"start\":59438},{\"end\":59460,\"start\":59457},{\"end\":59712,\"start\":59706},{\"end\":59728,\"start\":59721},{\"end\":60261,\"start\":60255},{\"end\":60271,\"start\":60265},{\"end\":60282,\"start\":60273},{\"end\":60697,\"start\":60691},{\"end\":60716,\"start\":60713},{\"end\":60730,\"start\":60725},{\"end\":61024,\"start\":61015},{\"end\":61039,\"start\":61034},{\"end\":61399,\"start\":61392},{\"end\":61415,\"start\":61410},{\"end\":61424,\"start\":61417},{\"end\":61661,\"start\":61657},{\"end\":61676,\"start\":61672},{\"end\":61690,\"start\":61685},{\"end\":61700,\"start\":61696},{\"end\":61709,\"start\":61706},{\"end\":61724,\"start\":61719},{\"end\":62204,\"start\":62200},{\"end\":62216,\"start\":62213},{\"end\":62225,\"start\":62223},{\"end\":62511,\"start\":62500},{\"end\":62527,\"start\":62521},{\"end\":62545,\"start\":62539},{\"end\":63167,\"start\":63161},{\"end\":63521,\"start\":63517},{\"end\":63536,\"start\":63529},{\"end\":63560,\"start\":63555},{\"end\":63995,\"start\":63990},{\"end\":64004,\"start\":64001},{\"end\":64014,\"start\":64009},{\"end\":64024,\"start\":64021},{\"end\":64034,\"start\":64031},{\"end\":64383,\"start\":64379},{\"end\":64400,\"start\":64394}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":14740595},\"end\":48230,\"start\":48074},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":14423439},\"end\":48719,\"start\":48232},{\"attributes\":{\"doi\":\"10.1145/503272.503275\",\"id\":\"b2\",\"matched_paper_id\":13176469},\"end\":49207,\"start\":48721},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":2398095},\"end\":49628,\"start\":49209},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":1263727},\"end\":50016,\"start\":49630},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":15912959},\"end\":50376,\"start\":50018},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":14187723},\"end\":50927,\"start\":50378},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":2061682},\"end\":51341,\"start\":50929},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":25003307},\"end\":51859,\"start\":51343},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":6677530},\"end\":52293,\"start\":51861},{\"attributes\":{\"id\":\"b10\"},\"end\":52535,\"start\":52295},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":4492862},\"end\":53220,\"start\":52537},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":58722470},\"end\":53431,\"start\":53222},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":6578083},\"end\":53947,\"start\":53433},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1543510},\"end\":54344,\"start\":53949},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":16724498},\"end\":54697,\"start\":54346},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":206856272},\"end\":55155,\"start\":54699},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":9959129},\"end\":55705,\"start\":55157},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":13930648},\"end\":56253,\"start\":55707},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":12456744},\"end\":56803,\"start\":56255},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":92921},\"end\":57122,\"start\":56805},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":10538888},\"end\":57585,\"start\":57124},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":5552370},\"end\":57988,\"start\":57587},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":12649217},\"end\":58382,\"start\":57990},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":9346895},\"end\":58911,\"start\":58384},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":621511},\"end\":59370,\"start\":58913},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":1207061},\"end\":59647,\"start\":59372},{\"attributes\":{\"doi\":\"10.1145/1806799.1806876\",\"id\":\"b27\",\"matched_paper_id\":2395899},\"end\":60198,\"start\":59649},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":1524973},\"end\":60635,\"start\":60200},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":6893663},\"end\":60976,\"start\":60637},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":5026322},\"end\":61328,\"start\":60978},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":38150955},\"end\":61580,\"start\":61330},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":13124732},\"end\":62126,\"start\":61582},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":9129171},\"end\":62456,\"start\":62128},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":2023190},\"end\":63137,\"start\":62458},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":3720268},\"end\":63440,\"start\":63139},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":10548729},\"end\":63934,\"start\":63442},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":11036114},\"end\":64279,\"start\":63936},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":15352638},\"end\":64849,\"start\":64281}]", "bib_title": "[{\"end\":48095,\"start\":48074},{\"end\":48277,\"start\":48232},{\"end\":48742,\"start\":48721},{\"end\":49251,\"start\":49209},{\"end\":49701,\"start\":49630},{\"end\":50045,\"start\":50018},{\"end\":50466,\"start\":50378},{\"end\":51007,\"start\":50929},{\"end\":51434,\"start\":51343},{\"end\":51916,\"start\":51861},{\"end\":52576,\"start\":52537},{\"end\":53280,\"start\":53222},{\"end\":53506,\"start\":53433},{\"end\":54058,\"start\":53949},{\"end\":54404,\"start\":54346},{\"end\":54775,\"start\":54699},{\"end\":55212,\"start\":55157},{\"end\":55783,\"start\":55707},{\"end\":56338,\"start\":56255},{\"end\":56858,\"start\":56805},{\"end\":57168,\"start\":57124},{\"end\":57623,\"start\":57587},{\"end\":58012,\"start\":57990},{\"end\":58456,\"start\":58384},{\"end\":58974,\"start\":58913},{\"end\":59429,\"start\":59372},{\"end\":59698,\"start\":59649},{\"end\":60243,\"start\":60200},{\"end\":60683,\"start\":60637},{\"end\":61005,\"start\":60978},{\"end\":61388,\"start\":61330},{\"end\":61651,\"start\":61582},{\"end\":62189,\"start\":62128},{\"end\":62490,\"start\":62458},{\"end\":63154,\"start\":63139},{\"end\":63512,\"start\":63442},{\"end\":63984,\"start\":63936},{\"end\":64372,\"start\":64281}]", "bib_author": "[{\"end\":48109,\"start\":48097},{\"end\":48117,\"start\":48109},{\"end\":48291,\"start\":48279},{\"end\":48303,\"start\":48291},{\"end\":48311,\"start\":48303},{\"end\":48326,\"start\":48311},{\"end\":48339,\"start\":48326},{\"end\":48347,\"start\":48339},{\"end\":48758,\"start\":48744},{\"end\":48775,\"start\":48758},{\"end\":48790,\"start\":48775},{\"end\":49260,\"start\":49253},{\"end\":49272,\"start\":49260},{\"end\":49286,\"start\":49272},{\"end\":49305,\"start\":49286},{\"end\":49724,\"start\":49703},{\"end\":49734,\"start\":49724},{\"end\":49745,\"start\":49734},{\"end\":50066,\"start\":50047},{\"end\":50083,\"start\":50066},{\"end\":50481,\"start\":50468},{\"end\":50491,\"start\":50481},{\"end\":50507,\"start\":50491},{\"end\":50521,\"start\":50507},{\"end\":50529,\"start\":50521},{\"end\":51020,\"start\":51009},{\"end\":51032,\"start\":51020},{\"end\":51042,\"start\":51032},{\"end\":51053,\"start\":51042},{\"end\":51069,\"start\":51053},{\"end\":51077,\"start\":51069},{\"end\":51451,\"start\":51436},{\"end\":51473,\"start\":51451},{\"end\":51485,\"start\":51473},{\"end\":51505,\"start\":51485},{\"end\":51930,\"start\":51918},{\"end\":51943,\"start\":51930},{\"end\":52363,\"start\":52346},{\"end\":52377,\"start\":52363},{\"end\":52594,\"start\":52578},{\"end\":52598,\"start\":52594},{\"end\":52612,\"start\":52598},{\"end\":52616,\"start\":52612},{\"end\":52632,\"start\":52616},{\"end\":52645,\"start\":52632},{\"end\":53296,\"start\":53282},{\"end\":53309,\"start\":53296},{\"end\":53524,\"start\":53508},{\"end\":53545,\"start\":53524},{\"end\":53561,\"start\":53545},{\"end\":54072,\"start\":54060},{\"end\":54087,\"start\":54072},{\"end\":54424,\"start\":54406},{\"end\":54438,\"start\":54424},{\"end\":54451,\"start\":54438},{\"end\":54806,\"start\":54777},{\"end\":54821,\"start\":54806},{\"end\":54835,\"start\":54821},{\"end\":54842,\"start\":54835},{\"end\":55224,\"start\":55214},{\"end\":55239,\"start\":55224},{\"end\":55245,\"start\":55239},{\"end\":55253,\"start\":55245},{\"end\":55269,\"start\":55253},{\"end\":55276,\"start\":55269},{\"end\":55801,\"start\":55785},{\"end\":55817,\"start\":55801},{\"end\":56356,\"start\":56340},{\"end\":56370,\"start\":56356},{\"end\":56388,\"start\":56370},{\"end\":56404,\"start\":56388},{\"end\":56894,\"start\":56860},{\"end\":56908,\"start\":56894},{\"end\":56921,\"start\":56908},{\"end\":57188,\"start\":57170},{\"end\":57199,\"start\":57188},{\"end\":57224,\"start\":57199},{\"end\":57648,\"start\":57625},{\"end\":57661,\"start\":57648},{\"end\":58037,\"start\":58014},{\"end\":58056,\"start\":58037},{\"end\":58069,\"start\":58056},{\"end\":58480,\"start\":58458},{\"end\":58489,\"start\":58480},{\"end\":58998,\"start\":58976},{\"end\":59007,\"start\":58998},{\"end\":59453,\"start\":59431},{\"end\":59462,\"start\":59453},{\"end\":59714,\"start\":59700},{\"end\":59730,\"start\":59714},{\"end\":60263,\"start\":60245},{\"end\":60273,\"start\":60263},{\"end\":60284,\"start\":60273},{\"end\":60699,\"start\":60685},{\"end\":60718,\"start\":60699},{\"end\":60732,\"start\":60718},{\"end\":61026,\"start\":61007},{\"end\":61041,\"start\":61026},{\"end\":61401,\"start\":61390},{\"end\":61417,\"start\":61401},{\"end\":61426,\"start\":61417},{\"end\":61663,\"start\":61653},{\"end\":61678,\"start\":61663},{\"end\":61692,\"start\":61678},{\"end\":61702,\"start\":61692},{\"end\":61711,\"start\":61702},{\"end\":61726,\"start\":61711},{\"end\":62206,\"start\":62191},{\"end\":62218,\"start\":62206},{\"end\":62227,\"start\":62218},{\"end\":62513,\"start\":62492},{\"end\":62529,\"start\":62513},{\"end\":62547,\"start\":62529},{\"end\":63169,\"start\":63156},{\"end\":63523,\"start\":63514},{\"end\":63538,\"start\":63523},{\"end\":63562,\"start\":63538},{\"end\":63997,\"start\":63986},{\"end\":64006,\"start\":63997},{\"end\":64016,\"start\":64006},{\"end\":64026,\"start\":64016},{\"end\":64036,\"start\":64026},{\"end\":64385,\"start\":64374},{\"end\":64402,\"start\":64385}]", "bib_venue": "[{\"end\":48494,\"start\":48429},{\"end\":48931,\"start\":48914},{\"end\":50660,\"start\":50603},{\"end\":52092,\"start\":52026},{\"end\":52796,\"start\":52729},{\"end\":53708,\"start\":53643},{\"end\":55459,\"start\":55376},{\"end\":55986,\"start\":55910},{\"end\":56535,\"start\":56478},{\"end\":57373,\"start\":57307},{\"end\":57796,\"start\":57737},{\"end\":58200,\"start\":58143},{\"end\":58676,\"start\":58591},{\"end\":59138,\"start\":59081},{\"end\":59919,\"start\":59836},{\"end\":60443,\"start\":60372},{\"end\":61172,\"start\":61115},{\"end\":61861,\"start\":61802},{\"end\":62856,\"start\":62710},{\"end\":63298,\"start\":63242},{\"end\":63705,\"start\":63642},{\"end\":64595,\"start\":64507},{\"end\":48136,\"start\":48117},{\"end\":48427,\"start\":48347},{\"end\":48912,\"start\":48811},{\"end\":49359,\"start\":49305},{\"end\":49805,\"start\":49745},{\"end\":50176,\"start\":50083},{\"end\":50601,\"start\":50529},{\"end\":51118,\"start\":51077},{\"end\":51529,\"start\":51505},{\"end\":52024,\"start\":51943},{\"end\":52344,\"start\":52295},{\"end\":52727,\"start\":52645},{\"end\":53313,\"start\":53309},{\"end\":53641,\"start\":53561},{\"end\":54125,\"start\":54087},{\"end\":54501,\"start\":54451},{\"end\":54885,\"start\":54842},{\"end\":55374,\"start\":55276},{\"end\":55908,\"start\":55817},{\"end\":56476,\"start\":56404},{\"end\":56943,\"start\":56921},{\"end\":57305,\"start\":57224},{\"end\":57735,\"start\":57661},{\"end\":58141,\"start\":58069},{\"end\":58589,\"start\":58489},{\"end\":59079,\"start\":59007},{\"end\":59492,\"start\":59462},{\"end\":59834,\"start\":59753},{\"end\":60370,\"start\":60284},{\"end\":60784,\"start\":60732},{\"end\":61113,\"start\":61041},{\"end\":61433,\"start\":61426},{\"end\":61800,\"start\":61726},{\"end\":62278,\"start\":62227},{\"end\":62708,\"start\":62547},{\"end\":63240,\"start\":63169},{\"end\":63640,\"start\":63562},{\"end\":64086,\"start\":64036},{\"end\":64505,\"start\":64402}]"}}}, "year": 2023, "month": 12, "day": 17}