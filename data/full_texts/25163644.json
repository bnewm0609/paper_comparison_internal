{"id": 25163644, "updated": "2023-09-29 05:38:43.089", "metadata": {"title": "A Deep Reinforcement Learning Chatbot", "authors": "[{\"first\":\"Iulian\",\"last\":\"Serban\",\"middle\":[\"V.\"]},{\"first\":\"Chinnadhurai\",\"last\":\"Sankar\",\"middle\":[]},{\"first\":\"Mathieu\",\"last\":\"Germain\",\"middle\":[]},{\"first\":\"Saizheng\",\"last\":\"Zhang\",\"middle\":[]},{\"first\":\"Zhouhan\",\"last\":\"Lin\",\"middle\":[]},{\"first\":\"Sandeep\",\"last\":\"Subramanian\",\"middle\":[]},{\"first\":\"Taesup\",\"last\":\"Kim\",\"middle\":[]},{\"first\":\"Michael\",\"last\":\"Pieper\",\"middle\":[]},{\"first\":\"Sarath\",\"last\":\"Chandar\",\"middle\":[]},{\"first\":\"Nan\",\"last\":\"Ke\",\"middle\":[\"Rosemary\"]},{\"first\":\"Sai\",\"last\":\"Mudumba\",\"middle\":[]},{\"first\":\"Alexandre\",\"last\":\"Brebisson\",\"middle\":[\"de\"]},{\"first\":\"Jose\",\"last\":\"Sotelo\",\"middle\":[\"M.\",\"R.\"]},{\"first\":\"Dendi\",\"last\":\"Suhubdy\",\"middle\":[]},{\"first\":\"Vincent\",\"last\":\"Michalski\",\"middle\":[]},{\"first\":\"Alexandre\",\"last\":\"Nguyen\",\"middle\":[]},{\"first\":\"Joelle\",\"last\":\"Pineau\",\"middle\":[]},{\"first\":\"Yoshua\",\"last\":\"Bengio\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2017, "month": 9, "day": 7}, "abstract": "We present MILABOT: a deep reinforcement learning chatbot developed by the Montreal Institute for Learning Algorithms (MILA) for the Amazon Alexa Prize competition. MILABOT is capable of conversing with humans on popular small talk topics through both speech and text. The system consists of an ensemble of natural language generation and retrieval models, including template-based models, bag-of-words models, sequence-to-sequence neural network and latent variable neural network models. By applying reinforcement learning to crowdsourced data and real-world user interactions, the system has been trained to select an appropriate response from the models in its ensemble. The system has been evaluated through A/B testing with real-world users, where it performed significantly better than competing systems. Due to its machine learning architecture, the system is likely to improve with additional data.", "fields_of_study": "[\"Computer Science\",\"Mathematics\"]", "external_ids": {"arxiv": "1709.02349", "mag": "2751124354", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-1709-02349", "doi": null}}, "content": {"source": {"pdf_hash": "e2adcafe2380992c39eba95997be5cfebb224147", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1709.02349v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "d8c584d123719829792328e6507c46be9ba9bac0", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/e2adcafe2380992c39eba95997be5cfebb224147.txt", "contents": "\nA Deep Reinforcement Learning Chatbot\n\n\nIulian V Serban \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nChinnadhurai Sankar \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nMathieu Germain \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nSaizheng Zhang \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nZhouhan Lin \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nSandeep Subramanian \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nTaesup Kim \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nMichael Pieper \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nSarath Chandar \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nNan Rosemary Ke \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nSai Mudumba \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nAlexandre De Brebisson \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nJose M R Sotelo \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nDendi Suhubdy \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nVincent Michalski \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nAlexandre Nguyen \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nJoelle Pineau \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nYoshua Bengio \nMontreal Institute for Learning Algorithms\nMontrealQuebecCanada\n\nA Deep Reinforcement Learning Chatbot\n\nWe present MILABOT: a deep reinforcement learning chatbot developed by the Montreal Institute for Learning Algorithms (MILA) for the Amazon Alexa Prize competition. MILABOT is capable of conversing with humans on popular small talk topics through both speech and text. The system consists of an ensemble of natural language generation and retrieval models, including template-based models, bag-of-words models, sequence-to-sequence neural network and latent variable neural network models. By applying reinforcement learning to crowdsourced data and real-world user interactions, the system has been trained to select an appropriate response from the models in its ensemble. The system has been evaluated through A/B testing with real-world users, where it performed significantly better than competing systems. Due to its machine learning architecture, the system is likely to improve with additional data.\n\nIntroduction\n\nDialogue systems and conversational agents -including chatbots, personal assistants and voicecontrol interfaces -are becoming ubiquitous in modern society. Examples of these include personal assistants on mobile devices, technical support help over telephone lines, as well as online bots selling anything from fashion clothes and cosmetics to legal advice and self-help therapy. However, building intelligent conversational agents remains a major unsolved problem in artificial intelligence research.\n\nIn 2016, Amazon.com Inc proposed an international university competition with the goal of building a socialbot: a spoken conversational agent capable of conversing coherently and engagingly with humans on popular topics, such as entertainment, fashion, politics, sports, and technology. The socialbot converses through natural language speech through Amazon's Echo device (Stone & Soper 2014). This article describes the models, experiments and final system (MILABOT) developed by our team at University of Montreal. 1 Our main motivation for participating has been to help advance artificial intelligence research. To this end, the competition has provided a special opportunity for training and testing state-of-the-art machine learning algorithms with real users (also known as machine learning in the wild) in a relatively unconstrained setting. The ability to experiment with real users is unique in the artificial intelligence community, where the vast majority of work consists of experiments on fixed datasets (e.g. labeled datasets) and software simulations (e.g. game engines). In addition, the computational resources, technical support and financial support provided by Amazon has helped scale up our system and test the limits of state-of-the-art machine learning methods. Among other things, this support has enabled us to crowdsource 200, 000 labels on Amazon Mechanical Turk and to maintain over 32 dedicated Tesla K80 GPUs for running our live system. Our socialbot is based on a large-scale ensemble system leveraging deep learning and reinforcement learning. We develop a new set of deep learning models for natural language retrieval and generation -including recurrent neural networks, sequence-to-sequence models and latent variable modelsand evaluate them in the context of the competition. These models are combined into an ensemble, which generates a candidate set of dialogue responses. Further, we apply reinforcement learningincluding value function and policy gradient methods -to train the system to select an appropriate response from the models in its ensemble. In particular, we propose a novel reinforcement learning procedure, based on estimating a Markov decision process. Training is carried out on crowdsourced data and on interactions recorded between real-world users and a preliminary version of the system. The trained systems yield substantial improvements in A/B testing experiments with real-world users.\n\nIn the competition semi-finals, our best performing system reached an average user score of 3.15 on a scale 1 \u2212 5, with a minimal number of hand-crafted states and rules and without engaging in non-conversational activities (such as playing games or taking quizzes). 2 The performance of this best system is comparable to some of the top systems in the semi-finals. 3 Further, the same system averaged a high 14.5 \u2212 16.0 turns per dialogue. This improvement in back-and-forth exchanges between the user and system suggests that our system is likely to be the most interactive and engaging system among all systems in the competition. Finally, the system is bound to improve with additional data, as nearly all system components are learnable.\n\n\nSystem Overview\n\nEarly work on dialogue systems (Weizenbaum 1966, Colby 1981, Aust et al. 1995, McGlashan et al. 1992, Simpson & Eraser 1993 were based mainly on states and rules hand-crafted by human experts. Modern dialogue systems typically follow a hybrid architecture, combining hand-crafted states and rules with statistical machine learning algorithms (Suendermann-Oeft et al. 2015, Jur\u010d\u00ed\u010dek et al. 2014, Bohus et al. 2007, Williams 2011. Due to the complexity of human language, however, it will probably never be possible to enumerate states and rules required for building a socialbot capable of conversing with humans on open-domain, popular topics. In contrast to such rule-based systems, our core approach is built entirely on statistical machine learning. We believe that this is the most plausible path to artificially intelligent conversational agents. The system architecture we propose aims to make as few assumptions as possible about the process of understanding and generating natural human language. As such, the system utilizes only a small number of hand-crafted states and rules. However, every system component has been designed to be optimized (trained) using machine learning algorithms. These system components will be trained first independently on massive datasets and then jointly on real-world user interactions. This way, the system will learn all relevant states and rules for conducting open-domain conversations implicitly. Given an adequate amount of examples, such a system should outperform systems based on hand-crafted states and rules. Further, the system will continue to improve in perpetuity with additional data.\n\nOur system architecture is inspired by the success of ensemble-based machine learning systems. These systems consist of many independent sub-models combined intelligently together. Examples of such ensemble systems include the winner of the Netflix Prize (Koren et al. 2009), utilizing hundreds of machine learning models to predict user movie preferences, and IBM Watson (Ferrucci et al. 2010), the first machine learning system to win the quiz game Jeopardy! in 2011. More recently, Google observed substantial improvements building an ensemble-based neural machine translation system (Wu et al. 2016).\n\nOur system consists of an ensemble of response models. The response models take as input a dialogue and output a response in natural language text. In addition, the response models may also output one or several scalar values, indicating their internal confidence. As will be explained later, the response models have been engineered to generate responses on a diverse set of topics using a variety of strategies. As input, the overall system expects to be given a dialogue history (i.e. all utterances recorded in the dialogue so far, including the current user utterance) and confidence values of the automatic speech recognition system (ASR confidences). To generate a response, the system follows a three-step procedure. First, it uses all response models to generate a set of candidate responses. Second, if there exists a priority response in the set of candidate responses (i.e. a response which takes precedence over other responses), this response will be returned by the system. 4 For example, for the question \"What is your name?\", the response \"I am an Alexa Prize Socialbot\" is a priority response. Third, if there are no priority responses, the response is selected by the model selection policy. For example, the model selection policy may select a response by scoring all candidate responses and picking the highest-scored response. The overall process is illustrated in Figure 1.\n\nWhen the ASR confidences are below a certain threshold, the system requests the user to repeat their last utterance. Otherwise, the system does not utilize the ASR confidences. In particular, neither the response models nor the model selection policy make use of the ASR confidences. Nevertheless, the ASR system is far from perfect. Therefore, it is very plausible that the system could be improved significantly by conditioning the response models and model selection policy on the ASR confidences.\n\n\nResponse Models\n\nThere are 22 response models in the system, including retrieval-based neural networks, generationbased neural networks, knowledge base question answering systems and template-based systems. Examples of candidate model responses are shown in Table 1. This section aims to summarize these response models. First, the template-based models are described.\n\n\nTemplate-based Models\n\nWe start by describing the template-based response models in the system.\n\nAlicebot: Alicebot uses a set of AIML (artificial intelligence markup language) templates to produce a response given the dialogue history and user utterance (Wallace 2009, Shawar & Atwell 2007. We use the freely available Alice kernel available at www.alicebot.org. By default all templates generate non-priority responses, so we configure templates related to the socialbot's name, age and location to output priority responses. We modify a few templates further to make them consistent with the challenge (e.g. to avoid obscene language and to encourage the user to discuss certain topics, such as news, politics and movies). The majority of templates remain unchanged.\n\nThe Alicebot model also outputs a scalar confidence score. Since the AIML templates repeat the user's input utterance, they are not always correct sentences. Therefore, we use a string-based rules to determine if the response constitutes a correct sentence. If the response is correct sentence, it returns a high confidence and otherwise it returns a low confidence score. This process is illustrated in Algorithm 1.\n\nAlgorithm 1: Alicebot 1 input: dialogue history 2 response \u2190 apply AIML templates to dialogue history 3 if response is correct sentence then 4 if response is given priority then 5 confidence \u2190 1.0 6 else 7 confidence \u2190 0.5 8 else 9 confidence \u2190 0.0 10 output: response, priority, confidence Elizabot Similar to Alicebot, the Elizabot model performs string matching to select an answer from a set of templates. The model is based on the famous Eliza system, designed to mimic a Rogerian psychotherapist. (Weizenbaum 1966). 5 Therefore, in contrast with Alicebot, most of Elizabot's responses are personal questions which are meant to engage the user to continue the conversation.\n\nHere are two example templates:\n\n1. \"I am (.*)\" \u2192 \"Did you come to me because you are ...\" 2. \"What (.*)\" \u2192 \"Why do you ask?\"\n\nThe ellipses mark the parts of the response sentence which will be replaced with text from the user's utterance. The model detects the appropriate template and selects the corresponding response (if there are multiple templates, then a template is selected at random). The model then runs the template response through a set of reflections to better format the string for a response (e.g. \"I'd\" \u2192 \"you would\", \"your\" \u2192 \"my\").\n\nAlgorithm 2: Initiatorbot 1 input: dialogue history 2 if Initiatorbot was triggered in one of last two turns then 3 return \"\" 4 else if user did not give a greeting then 5 return a non-priority response with a random initiator phrase 6 else 7 return a priority response with a random initiator phrase Initiatorbot The Initiatorbot model acts as a conversation starter: it asks the user an open-ended question to get the conversation started and increase the engagement of the user. We wrote 40 question phrases for the Initiatorbot. Examples of phrases include \"What did you do today?\", \"Do you have pets?\" and \"What kind of news stories interest you the most?\". As a special case, the model can also start the conversation by stating an interesting fact. In this case, the initiator phrase is \"Did you know that <fact>?\", where fact is replaced by a statement. The set of facts is the same as used by the BoWFactGenerator model, described later.\n\nBefore returning a response, Initiatorbot first checks that it hasn't already been triggered in the last two turns of the conversation. If the user gives a greeting (e.g. \"hi\"), then Initiatorbot will return a response with priority. This is important because we observed that greetings often indicate the beginning of a conversation, where the user does not have a particular topic they would like to talk about. By asking a question, the system takes the initiative (i.e. control of the dialogue). The procedure is detailed in Algorithm 2.\n\n\nStorybot\n\nThe Storybot model outputs a short fiction story at the request of the user. We implemented this model as we observed that many users were asking the socialbot to tell stories. 6 Storybot determines if the user requested a story by checking if there was both a request word (e.g. say, tell.) and story-type word in the utterance (e.g. story, tale). The response states the story's title and author followed by the story body. For example, one set of responses from this model follows the pattern \"Alright, let me tell you the story <story_title> <story_body> by <story_author>\" where <story_title> is the title of the story, <story_body> is the main text and <story_author> is the name of the story's author. The stories were scraped from the website: www.english-for-students.com.\n\nAn example story is: ** The Ant and The Grasshopper ** The ants worked hard in summer. They sorted food for winter. At that time, a grasshopper remained idle. When winter came, the ants had enough to eat. But, the grasshopper had nothing to eat. He had to starve. He went to the ants and begged for foods. The ants asked in return, \"What did you do in summer?\" He replied, \"I idled away my time during summer\". The ant replied, \"Then you must starve in winter.\" MORAL: Never be idle.\n\nThe Storybot is the only component in the system performing a non-conversational activity. It is triggered only when a user specifically asks for a story, and in that case its response is a priority response. Otherwise, the Storybot response model is never triggered. Further, the rest of the system will not encourage the user to request stories.\n\n\nKnowledge Base-based Question Answering\n\nEvibot The Evibot response model forwards the user's utterance to Amazon's question-answering web-service Evi: www.evi.com. Evi was designed primarily to handle factual questions. Therefore, Evibot returns a priority response for direct questions, defined as user utterances containing a wh-word (e.g. \"who\", \"what\"), and otherwise returns a non-priority or, possibly, an empty response. If the query is a direct question and contains non-stop words, Evibot will follow a three step procedure to generate its response. First, Evibot forwards a query to www.evi.com containing the whole user utterance, and returns the resulting answer if its valid. If that fails, Evibot applies NLTK's named entity processor (Bird et al. 2009) to the query to find subqueries with named entities. For each subphrase that contains a named entity, Evibot forwards queries to www.evi.com, and returns the result upon a valid response. Finally, if the previous two steps fail, Evibot forwards queries for every subquery without named entities, and returns either a valid response or an empty response. The procedure is detailed in Algorithm 3.\n\nAlgorithm 3: Evibot 1 input: dialogue history 2 query \u2190 last user utterance 3 has-wh-words \u2190 true if utterance contains a wh-word, otherwise false 4 has-only-stop-words \u2190 true if utterance only has stop words, otherwise false 5 if has-only-stop-words and not has-wh-words then 6 return \"\" 7 evi-response \u2190 send query to www.evi.com 8 priority \u2190 true if has-wh-words and evi-response is valid, otherwise false 9 if evi-response is valid then 10 return evi-response, priority 11 else if has-wh-words then 12 priority \u2190 has-wh-words 13 subentities \u2190 entities extracted from query using NLTK's named entity processor BoWMovies The BoWMovies model is a template-based response model, which handles questions in the movie domain. The model has a list of entity names and tags (e.g. movie plot and release year). The model searches the user's utterance for known entities and tags. Entities are identified by string matching. This is done in a cascading order, by giving first preference to movie title matches, then actor name matches, and finally director name matches. Tags are also identified by string matching. However, if exact string matching fails for tags, then identification is performed by word embedding similarity. If both an entity and a tag are present, the agent will dispatch an API call to one of several data sources to retrieve the data item for the selected query type. The agent is limited by the data available in the APIs to which it has access. The model's responses follow predefined templates.\n\nMovie titles, actor names, and director names are extracted from the Internet Movie Database (IMDB). Movie descriptions are taken from Google Knowledge Graph's API. Other movie title queries are directed to the Open Movie Database (OMDB). 7 For actor and director queries, the Wikiedata API is used. First, a search for actor and director names is done on a Wikidata JSON dump.\n\nAs described earlier, the model uses word embeddings to match tags. These word embeddings are trained using Word2Vec on movie plot summaries and actor biographies extracted from the IMDB database (Mikolov et al. 2013).\n\nAlgorithm 4: BoWMovies -ComputeResponse 1 input: dialogue history 2 entity \u2190 entity contained both in last user utterance and list of movie titles, actors or directors 3 if no entity then 4 entity \u2190 entity contained in previous user utterances and movie titles, actors or directors 5 if no entity then 6 return \"\" 7 if entity is a movie title then 8 response \u2190 ComputeEntityResponse(entity, movie title) 9 else if entity is an actor name then 10 response \u2190 ComputeEntityResponse(entity, actor name) 11 else if entity is an director name then 12 response \u2190 ComputeEntityResponse(entity, director name) 13 return response Algorithm 5: BoWMovies -ComputeEntityResponse 1 input: entity and entity type 2 tag \u2190 string matching tag, where tag is valid for entity type (movie title, actor name, director name) 3 if no tag then 4 tag \u2190 word embedding matching tag, where tag is a single word and valid for the entity type (movie title, actor name, director name) 5 if no tag then 6 tag \u2190 word embedding matching tag, where tag is multiple words and valid for the entity type (movie title, actor name, director name) 7 if no tag then 8 return \"\" 9 api-response \u2190 call external API with query (entity, tag). 10 response \u2190 template with api-response inserted 11 return response 3.3 Retrieval-based Neural Networks VHRED models: The system contains several VHRED models, sequence-to-sequence models with Gaussian latent variables trained as variational auto-encoders , Kingma & Welling 2014, Rezende et al. 2014. The models are trained using the same procedure as Serban et al. (2017). The trained VHRED models generate candidate responses as follows. First, a set of K model responses are retrieved from a dataset using cosine similarity between the current dialogue history and the dialogue history in the dataset based on bag-of-words TF-IDF Glove word embeddings (Pennington et al. 2014). 8 An approximation of the log-likelihood for each of the 20 responses is computed by VHRED, and the response with the highest log-likelihood is returned. The system has 4 VHRED models based on datasets scraped from Reddit, one VHRED model based on news articles and one VHRED model based on movie subtitles:\n\n\u2022 VHREDRedditPolitics trained on https://www.reddit.com/r/politics and extracting responses from all Reddit datasets with K = 10,\n\n\u2022 VHREDRedditNews trained on Reddit https://www.reddit.com/r/news and extracting responses from all Reddit datasets with K = 20, \u2022 VHREDRedditSports trained on Reddit https://www.reddit.com/r/sports and extracting responses from all Reddit datasets with K = 20, \u2022 VHREDRedditMovies trained on Reddit https://www.reddit.com/r/movies and extracting responses from all Reddit datasets with K = 20, \u2022 VHREDWashingtonPost 9 trained on Reddit https://www.reddit.com/r/politics and extracting responses from user comments to WashingtonPost news articles, and \u2022 VHREDSubtitles 10 using the movie subtitles dataset SubTle (Ameixa et al. 2014) with K = 10.\n\nIn particular, VHREDRedditPolitics and VHREDWashingtonPost use a different retrieval procedure. These two models use a logistic regression model to score the responses instead of the approximate log-likelihood. The logistic regression model is trained on a set of 7500 Reddit threads and candidate responses annotated by Amazon Mechanical Turk workers on a Likert-type scale 1 \u2212 5. The candidate responses are selected from other Reddit threads according to cosine similarity w.r.t. Glove word embeddings. The label collection and training procedure for the logistic regression model are similar to the procedures described in Section 4. For each response, the logistic regression model takes as input the VHRED log-likelihood score, as well as several other input features, and outputs a scalar-valued score. Even though the logistic regression model did improve the appropriateness of responses selected for Reddit threads, VHREDRedditPolitics is used extremely rarely in the final system (see Section 4). This suggests that training a model to rerank responses based on labeled Reddit threads and responses cannot help improve performance.\n\nSkipThought Vector Models: The system contains a SkipThought Vector model  trained on the BookCorpus dataset ) and on the SemEval 2014 Task 1 (Marelli et al. 2014). The model was trained using the same procedure as Kiros et al. (2015) and is called SkipThoughtBooks.\n\nSkipThoughtBooks ensures that the system complies with the Amazon Alexa Prize competition rules. One rule, introduced early in the competition, is that socialbots were not supposed to state their own opinions related to political or religious topics. If a user wishes to discuss such topics, the socialbots should proceed by asking questions or stating facts. SkipThoughtBooks also handles idiosyncratic issues particular to the Alexa platform. For example, many users did not understand the purpose of a socialbot and asked our socialbot to play music. In this case, the system should instruct the user to exit the socialbot application and then play music.\n\nSkipThoughtBooks follows a two-step procedure to generate its response. The first step compares the user's last utterance to a set of trigger phrases. If a match is found, the model returns a corresponding priority response. 11 For example, if the user says \"What do you think about Donald trump?\", the model will return a priority response, such as \"Sometimes, truth is stranger than fiction.\". A match is found if: 1) the SkipThought Vector model's semantic relatedness score between the user's last utterance and a trigger phrase is above a predefined threshold, and 2) the user's last utterance contains keywords relevant to the trigger phrase. 12 In total, there are 315 trigger phrases (most are paraphrases of each other) and 35 response sets.\n\nIf the model did not find a match in the first step, it proceeds to the second step. In this step, the model selects its response from among all Reddit dataset responses. As before, a set of K model responses are retrieved using cosine similarity. The model then returns the response with the highest semantic relatedness score.\n\nDual Encoder Models: The system contains two Dual Encoder retrieval models (Lowe et al. 2015), DualEncoderRedditPolitics and DualEncoderRedditNews. Both models are composed of two sequence encoders ENC Q and ENC R with a single LSTM recurrent layer used to encode the dialogue history and a candidate response. The score for a candidate response is computed by a bilinear mapping of the dialogue history embedding and the candidate response embedding as Lowe et al. (2015). 9 For VHREDWashingtonPost, the K responses are extracted based on the cosine similarity between the current dialogue and the news article keywords. K varies depending on the number of user comments within a set of news articles above a certain cosine similarity threshold. 10 For VHREDSubtitles, cosine similarity is computed based on one-hot vectors for each word. 11 Trigger phrases may have multiple responses. In this case, a response is selected at random. 12 Some trigger phrases do not have keywords. In this case, matching is based only on semantic relatedness.\n\nThe models are trained using the method proposed by (Lowe et al. 2015). The response with the highest score from a set of K = 50 candidate responses are retrieved using TF-IDF cosine similarity based on Glove word embeddings. The model DualEncoderRedditPolitics is trained on the Reddit https://www.reddit.com/r/politics dataset and extracts responses from all Reddit datasets. The model DualEncoderRedditNews is trained on the Reddit https://www.reddit.com/r/news dataset and extracts responses from all Reddit datasets.\n\nBag-of-words Retrieval Models: The system contains three bag-of-words retrieval models based on TF-IDF Glove word embeddings (Pennington et al. 2014) and Word2Vec embeddings (Mikolov et al. 2013). 13 Similar to the VHRED models, these models retrieve the response with the highest cosine similarity. The BoWWashingtonPost model retrieves user comments from WashingtonPost news articles using Glove word embeddings. The model BoWTrump retrieves responses from a set of Twitter tweets scraped from Donald Trump's profile: https://twitter.com/realDonaldTrump. This model also uses Glove word embeddings and it only returns a response when at least one relevant keyword or phrase is found in the user's utterance (e.g. when the word \"Trump\" is mentioned by the user). The list of trigger keywords and phrases include: 'donald', 'trump', 'potus', 'president of the united states', 'president of the us', 'hillary', 'clinton', 'barack', and 'obama'. The model BoWFactGenerator retrieves responses from a set of about 2500 interesting and fun facts, including facts about animals, geography and history. The model uses Word2Vec word embeddings. The model BoWGameofThrones retrieves responses from a set of quotes scraped from https://twitter.com/ ThroneQuotes using Glove word embeddings. Tweets from this source were manually inspected and cleaned to remove any tweets that were not quotes from the series. As in the BoWTrump model, we use a list of trigger phrases to determine if the model's output is relevant to the user's utterance.\n\nWe populate this list with around 80 popular character names, place names and family names, which are large unique to the domain. We also added a few aliases to try and account for alternative speech transcriptions of these named entities. Some phrases include: 'ned stark', 'jon snow', 'john snow', 'samwell tarly', \"hodor\", \"dothraki\" and so on. 14\n\n\nRetrieval-based Logistic Regression\n\nBoWEscapePlan: The system contains a response model, called BoWEscapePlan, which returns a response from a set of 35 topic-independent, generic pre-defined responses, such as \"Could you repeat that again\", \"I don't know\" and \"Was that a question?\". Its main purpose is to maintain user engagement and keep the conversation going, when other models are unable to provide meaningful responses. This model uses a logistic regression classifier to select its response based on a set of higher-level features.\n\nTo train the logistic regression classifier, we annotated 12, 000 user utterances and candidate response pairs for appropriateness on a Likert-type scale 1 \u2212 5. The user utterances were extracted from interactions between Alexa users and a preliminary version of the system. The candidate responses were sampled at random from BoWEscapePlan's response list. The label collection and training procedure for the logistic regression model are similar to the procedures described in Section 4. The logistic regression model is trained with log-likelihood on a training set, with early-stopping on a development set, and evaluated on the testing set. However, the trained model's performance was poor. It obtained a Pearson correlation coefficient of 0.05 and a Spearman's rank correlation coefficient of 0.07. This indicates that the logistic regression model is only slightly better at selecting a topic-independent, generic response compared to selecting a response at uniform random. Future work should investigate collecting more labeled data and pre-training the logistic regression model.\n\n\nSearch Engine-based Neural Networks\n\nThe system contains a deep classifier model, called LSTMClassifierMSMarco, which chooses its response from a set of search engine results. The system searches the web with the last user utterance as query, and retrieves the first 10 search snippets. The retrieved snippets are preprocessed by stripping trailing words, removing unnecessary punctuation and truncating to the last full sentence. The model uses a bidirectional LSTM to separately map the last dialogue utterance and the snippet to their own embedding vectors. The resulting two representations are concatenated and passed through an MLP to predict a scalar-value between 0 \u2212 1 indicating how appropriate the snippet is as a response to the utterance.\n\nThe model is trained as a binary classification model on the Microsoft Marco dataset with crossentropy to predict the relevancy of a snippet given a user query (Nguyen et al. 2016). Given a search query and a search snippet, the model must output one when the search snippet is relevant and otherwise zero. Search queries and ground truth search snippets are taken as positive samples, while other search snippets are selected at random as negative samples. On this task, the model is able to reach a prediction accuracy of 72.96% w.r.t. the Microsoft Marco development set.\n\nThe system is able to use search APIs from various search engines including Google, Bing, and AIFounded (Im 2017). In the current model, we choose Google as the search engine, since qualitative inspection showed that this retrieved the most appropriate responses.\n\n\nGeneration-based Neural Networks\n\nThe system contains a generative recurrent neural network language model, called GRUQuestion-Generator, which can generate follow-up questions word-by-word, conditioned on the dialogue history. The input to the model consists of three components: a one-hot vector of the current word, a binary question label and a binary speaker label. The model contains two GRU layers (Cho et al. 2014) and softmax output layer. The model is trained on Reddit Politics and Reddit News conversations, wherein posts were labeled as questions by detecting question marks. We use the optimizer Adam (Kingma & Ba 2015), and perform early stopping by checking the perplexity on the validation set For generation, we first condition the model on a short question template (e.g. \"How about\", \"What about\", \"How do you think of\", \"What is your opinion of\"), and then generate the rest of the question by sampling from the model with the question label clamped to one. The generation procedure stops once a question mark is detected. Further, the length of the question is controlled by tuning the temperature of the softmax layer. Due to speed requirements, only two candidate responses are generated and the best one w.r.t. log-likelihood of the first 10 words is returned.\n\n\nModel Selection Policy\n\nAfter generating the candidate response set, the dialogue system uses a model selection policy to select the response it returns to the user. The system must select a response which increases the satisfaction of the user for the entire dialogue. It must make a trade-off between immediate and long-term user satisfaction. For example, suppose the user asks to talk about politics. If the system chooses to respond with a political joke, the user may be pleased for one turn. Afterwards, however, the user may be disappointed with the system's inability to debate political issues. Instead, if the system chooses to respond with a short news story, the user may be less pleased for one turn. However, the news story may influence the user to follow up with factual questions, which the system may be better adept at handling. To make the trade-off between immediate and long-term user satisfaction, we consider selecting the appropriate response as a sequential decision making problem. This section describes five approaches to learn the model selection policy. These approaches are all evaluated with real-world users in the next section.\n\nWe use the reinforcement learning framework (Sutton & Barto 1998). The system is an agent, which takes actions in an environment in order to maximize rewards. For each time step t = 1, . . . , T , the agent observes the dialogue history h t and must choose one of K actions (responses): a 1 t , . . . , a K t . After taking an action, the agent receives a reward r t and is transferred to the next state h t+1 (which includes the user's next response). Then, the agent is provided with a new set of K actions: a 1 t+1 , . . . , a K t+1 . The agent's goal is to maximize the discounted sum of rewards:\nR = T t=1 \u03b3 t r t ,(1)\nwhich is referred to as the expected cumulative return (or simply expected return). The parameter \u03b3 \u2208 (0, 1] is a discount factor.\n\nAn issue specific to our setting is that the set of actions changes depending on the state (dialogue history). This happens because the candidate responses are generated by response models, which also depend on the dialogue history. In addition, the response models are not deterministic. This means the set of candidate responses is likely to be different every time the agent encounters the same state h t . 15 This is in contrast to certain reinforcement learning problems, such as learning to play Atari 2600 games, where the set of actions is fixed given the state. To simplify notation, we will fix the number of actions to K henceforth.\n\nAction-value Parametrization: We use two different approaches to parametrize the agent's policy.\n\nThe first approach is based on an action-value function, defined by parameters \u03b8:\nQ \u03b8 (h t , a k t ) \u2208 R for k = 1, . . . , K,(2)\nwhich estimates expected return of taking action a k t (candidate response k) given dialogue history h t and given that the agent will continue to use the same policy afterwards. Given Q \u03b8 , the agent chooses the action with highest expected return:\n\u03c0 \u03b8 (h t ) = arg max k Q \u03b8 (h t , a k t ).(3)\nThe use of an action-value function for selecting dialogue responses is closely related to the recent work by Lowe et al. (2017), where a model is learned to predict the quality of a dialogue system response. However, in our case, Q \u03b8 is only conditioned on the dialogue context. On the other hand, the model proposed by Lowe et al. (2017) is conditioned both on the dialogue context and on a human reference response. The action-value function is also related to the the work by Yu et al. (2016), who learn an evaluation model, which is used to train a reinforcement learning agent to select appropriate dialogue response strategies.\n\nStochastic Policy Parametrization: The second approach parametrizes the policy as a discrete distribution over actions. Let \u03b8 be the parameters. The agent selects its action by sampling:\n\u03c0 \u03b8 (a k t |h t ) = e \u03bb \u22121 f \u03b8 (ht,a k t ) a t e \u03bb \u22121 f \u03b8 (ht,a t ) for k = 1, . . . , K,(4)where f \u03b8 (h t , a k\nThe next section describes the input features for the scoring model.\n\n\nInput Features\n\nAs input to the scoring model we compute 1458 features based on the given dialogue history and candidate response. The input features are based on a combination of word embeddings, dialogue acts, part-of-speech tags, unigram word overlap, bigram word overlap and model-specific features:\n\nWord embeddings of response: Average of candidate response word embeddings (Mikolov et al. 2013). 16 Word embeddings of last user utterance: Average of the last user utterance word embeddings. Word embeddings of context:\n\nAverage of the word embeddings of the last six utterances in dialogue context.\n\n\nWord embedding of user context:\n\nAverage of the word embeddings of the last three user utterances in dialogue context.\n\n\nWord embedding similarity metrics:\n\nThe Embedding Average, Embedding Extrema and Embedding Greedy similarity metrics described by Liu et al. (2016). Each similarity metric is computed between 1) the last user utterance and candidate response, 2) the last six utterances in the dialogue and candidate response, 3) the last three user utterances in the dialogue and candidate response, 4) the last six utterances in the dialogue and candidate response with stop-words removed, and 5) the last three user utterances in the dialogue and candidate response with stop-words removed.\n\n\nResponse model class:\n\nA one-hot vector with size equal to the number of response models, where entry i is equal to 1.0 when candidate response was generated by the model class with index i.\n\n\nPart-of-speech response class:\n\nThe part-of-speech tags for candidate response is estimated using a maximum entropy tagger trained on the Penn Treebank corpus. The sequence of part-ofspeech tags is then mapped to a one-hot vector, which constitutes the input feature.\n\n\nDialogue act response model class:\n\nThe outer-product between a one-hot vector representing the dialogue act (we consider 10 types of dialogue acts) and a one-hot vector for indicating the model class (Stolcke et al. 2000).\n\nWord overlap:\n\n1.0 when one or more non-stop-words overlap between candidate response and last user utterance, and otherwise zero.\n\nBigram overlap short-term: 1.0 when a bigram (two consecutive tokens) exists both in the candidate response and in the last user utterance, and otherwise zero.\n\nBigram overlap long-term: 1.0 when a bigram exists both in candidate response and in one of the last utterances in dialogue context, and otherwise zero.\n\nNamed-entity overlap short-term: 1.0 when a named-entity (an upper-cased word, which is not a stop-word) exists both in candidate response and in the last user utterance, and otherwise zero.\n\nNamed-entity overlap long-term: 1.0 when a named-entity exists both in candidate response and in one of the last utterances in dialogue context, and otherwise zero.\n\nGeneric response: 1.0 when candidate response consists of only stopwords or words shorter than 3 characters, and otherwise zero.\n\nWh-word response feature: 1.0 when candidate response contains a wh-word (e.g. what, where, and so on), and otherwise zero.\n\nWh-word context: 1.0 when last user utterance contains a wh-word, and otherwise zero.\n\nIntensifier word response: 1.0 when candidate response contains an intensifier word (e.g. amazingly, crazy, and so on), and otherwise zero.\n\nIntensifier word context: 1.0 when last user utterance contains an intensifier word, and otherwise zero.\n\n\nUnigram response:\n\nA set of binary features which are 1.0 when candidate response contains a specific word (including the words I, you and thanks), and otherwise zero. Negation response:\n\n1.0 when candidate response contains a negation word, such as not or n't, and otherwise zero. Non-stop-words response:\n\n1.0 when candidate response contains a non-stopword, and otherwise zero.\n\nWe do not include features based on the confidences of the speech recognition system, for experimental reasons. Speech recognition errors are a confounding factor in experiments with real-world users. Speech recognition errors are likely to affect user satisfaction. If features based on speech recognition confidences were included, one policy might learn to handle speech recognition errors better than another policy. In turn, this could make that policy perform better w.r.t. overall user satisfaction. However, that would be an effect caused by the imperfect speech recognition system, and would not reflect user satisfaction under a perfect speech recognition system. Excluding these features as input to the scoring model helps minimize this confounding effect.Nevertheless, even if these features are excluded, it should be noted that speech recognition errors still constitute a substantial confounding factor in our later experiments. Lastly, for the same reasons, none of the response models utilize speech recognition confidences.\n\nIn principle, it is possible to compute input features by encoding the dialogue context and candidate response using Recurrent Neural Networks (RNNs) or Convolutional Neural Networks (Con-vNets) (Socher et al. 2013, Cho et al. 2014, Yu et al. 2014. However, these models are known to require training on large corpora in order to achieve acceptable performance, which we do not have access to. In addition, we need to keep the scoring model's execution time under 150ms. Otherwise, the slowdown in the response time, could frustrate the user and lower the overall user satisfaction. This rules out large RNNs and ConvNets for the Amazon Alexa Prize competition, since these would require more computational runtime. However, future dialogue systems utilizing larger datasets should consider large-scale models.\n\n\nModel Architecture\n\nThis section describes the scoring model's architecture. The scoring model is a five-layered neural network. The first layer is the input, consisting of the 1458 features, described in the previous section. The second layer contains 500 hidden units, computed by applying a linear transformation followed by the rectified linear activation function (Nair & Hinton 2010, Glorot et al. 2011 to the input layer units. The third layer contains 20 hidden units, computed by applying a linear transformation to the preceding layer units. Similar to matrix factorization, this layer compresses the 500 hidden units down to 20 hidden units. The fourth layer contains 5 outputs units, which are probabilities (i.e. all values are positive and sum to one). These output units are computed by applying a linear transformation to the preceding layer units followed by a softmax transformation. This layer corresponds to the Amazon Mechanical Turk labels, which will be described in the next sub-section. The fifth layer is the final output scalar, computed by applying a linear transformation to the units in the third and fourth layers. The model is illustrated in Figure 2.\n\nBefore settling on this architecture, we experimented both with deeper and more shallow models. However, we found that both the deeper models and the more shallow models performed worse. Nevertheless, future work should explore alternative architectures.\n\nWe use five different machine learning approaches to learn the scoring model. These are described next.\n\n\nSupervised AMT: Learning with Crowdsourced Labels\n\nThis section describes the first approach to learning the scroing model, which is based on supervised learning from crowdsourced examples. This approach also serves as initialization for the approaches discussed later.\n\nCrowdsourcing: We use Amazon Mechanical Turk (AMT) to collect data for training the scoring model. We follow a setup similar to Liu et al. (2016). We show human evaluators a dialogue along with 4 candidate responses, and ask them to score how appropriate each candidate response is on a 1-5 Likert-type scale. The score 1 indicates that the response is inappropriate or does not make sense, 3 indicates that the response is acceptable, and 5 indicates that the response is excellent and highly appropriate.\n\nOur setup only asks human evaluators to rate the overall appropriateness of the candidate responses.\n\nIn principle, we could choose to evaluate other aspects of the candidate responses. For example, we could evaluate fluency. However, fluency ratings would not be very useful since most of our models retrieve their responses from existing corpora, which contain mainly fluent and grammatically correct responses. As another example, we could evaluate topical relevancy. However, we choose not to evaluate such criteria since it is known to be difficult to reach high inter-annotator agreement on them (Liu et al. 2016). In fact, it is well known that even asking for a single overall rating tends to produce only a fair agreement between human evaluators (Charras et al. 2016); disagreement between annotators tends to arise either when the dialogue context is short and ambiguous, or when the candidate response is only partially relevant and acceptable.\n\nThe dialogues are extracted from interactions between Alexa users and preliminary versions of our system. Only dialogues where the system does not have a priority response were extracted (when there is a priority response, the dialogue manager must always return the priority response). About 3/4 of these dialogues were sampled at random, and the remaining 1/4 dialogues were sampled at random excluding identical dialogues. 17 For each dialogue, the corresponding candidate responses are created by generating candidate responses from the response models.\n\nWe preprocess the dialogues and candidate responses by masking out profanities and swear words with stars (e.g. we map \"fuck\" to \"****\"). 18 Furthermore, we anonymize the dialogues and candidate responses by replacing first names with randomly selected gender-neutral names (for example, \"Hi John\" could be mapped to \"Hello Casey\"). Finally, the dialogues are truncated to the last 4 utterances and last 500 words. This reduces the cognitive load of the annotators. Examples from the crowdsourcing task are shown in Figure 3, Figure 4 and Figure 5. The dialogue example shown in Figure 5 is a fictitious example.\n\n17 Sampling at random is advantageous for our goal, because it ensures that candidate responses to frequent user statements and questions tend to be annotated by more turkers. This increases the average annotation accuracy for such utterances, which in turn increases the scoring model's accuracy for such utterances. 18 The masking is not perfect. Therefore, we also instruct turkers that the task may contain profane and obscene language. Further, it should also be noted that Amazon Mechanical Turk only employs adults.   We inspected the annotations manually. We observed that annotators tended to frequently overrate topic-independent, generic responses. Such responses may be considered acceptable for a single turn in a conversation, but are likely to be detrimental when repeated over and over again. In particular, annotators tended to overrate responses generated by the response models Alicebot, Elizabot, VHREDSubtitles and BoWEscapePlan. Responses generated by these models are often acceptable or good, but the majority of them are topic-independent, generic sentences. Therefore, for these response models, we mapped all labels 5 (\"excellent\") to 4 (\"good\"). Furthermore, for responses consisting of only stop-words, we decreased the labels by one level (e.g. 4 is mapped to 3). Finally, the BoWMovies response model suffered from a bug during the label collection period. Therefore, we decreased all labels given to BoWMovies responses to be at most 2 (\"poor\").\n\nIn total, we collected 199, 678 labels. We split this into training (train), development (dev) and testing (test) datasets consisting of respectively 137,549, 23,298 and 38,831 labels each.\n\nTraining: We optimize the scoring model w.r.t. log-likelihood (cross-entropy) to predict the 4th layer, which represents the AMT label classes. Formally, we optimize the parameters \u03b8:\n\u03b8 = arg max \u03b8 x,y log P \u03b8 (y|x),(6)\nwhere x are the input features, y is the corresponding AMT label class (a one-hot vector) and P \u03b8 (y|x) is the model's predicted probability of y given x, computed in the second last layer of the scoring model. We use the first-order gradient-descent optimizer Adam (Kingma & Ba 2015) We experiment with a variety of hyper-parameters, and select the best hyper-parameter combination based on the log-likelihood of the dev set. For the first hidden layer, we experiment with layer sizes in the set: {500, 200, 50}. For the second hidden layer, we experiment with layer sizes in the set: {50, 20, 5}.\n\nWe use L2 regularization on all model parameters, except for bias parameters. We experiment with L2 regularization coefficients in the set: {10.0, 1.0, 10 \u22121 , . . . , 10 \u22129 } Unfortunately, we do not have labels to train the last layer. Therefore, we fix the parameters of the last layer to the vector [1.0, 2.0, 3.0, 4.0, 5.0]. In other words, we assign a score of 1.0 for the label very poor, a score of 2.0 for the label poor, a score of 3.0 for the label acceptable, a score of 4.0 for the label good and a score of 5.0 for the label excellent. As this model was trained on crowdsourced data from Amazon Mechanical Turk (AMT), we call this model Supervised AMT.   Table 2 shows the performance w.r.t. Pearson correlation coefficient, Spearman's rank correlation coefficient and mean squared error. The metrics are computed after linearly transforming the AMT class categories to the scalar output score (i.e. by taking the dot-product between the one-hot class vector and the vector [1.0, 2.0, 3.0, 4.0, 5.0]). The Average Predictor is a baseline model, which always predicts with the average output score. As shown, Supervised AMT achieves a Pearson correlation coefficient of 0.40, a Spearman's rank correlation coefficient of 0.38 and a significant reduction in mean squared error. This indicates Supervised AMT performs significantly better than the baseline. Figure 6 shows the performance w.r.t. each AMT label class. In addition to Supervised AMT, the figure shows the performance of three baseline policies: 1) Random, which selects a response at random, 2) Alicebot, which selects an Alicebot response if available and otherwise selects a response at random, and 3) Evibot + Alicebot, which selects an Evibot response if available and otherwise selects an Alicebot response. For each policy, the figure shows the percentage of responses selected by the policy belonging to a particular AMT label class. In one end of the spectrum, we observe that Supervised AMT has a~30% point reduction compared to Random in responses belonging to the \"very poor\" class. For the same AMT label class, Supervised AMT has a reduction of~10% points compared to Alicebot and Evibot + Alicebot. In the other end of the spectrum, we observe that Supervised AMT performs significantly better than the three baselines w.r.t. the classes \"good\" and \"excellent\". In particular, Supervised AMT reaches~8% responses belonging to the class \"excellent\". This is more than double compared to all three baseline policies. This demonstrates that Supervised AMT has learned to select \"good\" and \"excellent\" responses, while avoiding \"very poor\" and \"poor\" responses.\n\nOverall, the results show that Supervised AMT improves substantially over all baseline policies. Nevertheless,~46% of the Supervised AMT responses belong to the classes \"very poor\" and \"poor\". This implies that there is ample space for improving both Supervised AMT and the set of candidate responses (i.e. the system's response models).\n\n\nSupervised Learned Reward: Learning with a Learned Reward Function\n\nIn the first scoring model Supervised AMT we fixed the last output layer weights to [1.0, 2.0, 3.0, 4.0, 5.0]. In other words, we assigned a score of 1.0 for very poor responses, 2.0 for poor responses, 3.0 for acceptable responses, and so on. It's not clear whether this score is correlated with scores given by real-world Alexa users, which is what we ultimately want to optimize the system for. This section describes another approach, which remedies this problem by learning to predict the Alexa user scores based on previously recorded dialogues.\n\nLearned Reward Function: Let h t be a dialogue history and let a t be the corresponding response, given by the system at time t. We aim to learn a linear regression model, g \u03c6 , which predicts the corresponding return (Alexa user score) at the current dialogue turn:\ng \u03c6 (h t , a t ) \u2208 [1, 5],(7)\nwhere \u03c6 are the model parameters. We call this a reward model, since it directly models the Alexa user score, which we aim to maximize. Specifically, we set R d to be the Alexa user score given at the end of dialogue d. It's optional for users to a give a score; users are prompted to give a score at the end, but they may opt out by stopping the application. Although not all users give scores, we do not consider examples without scores. 19 Furthermore, users are encouraged to give a score in the range 1 \u2212 5. The majority of users give whole number (integer) scores, but some users give decimal scores (e.g. 3.5). Therefore, we treat R d as a real-valued number in the range 1 \u2212 5.\n\nWe learn \u03c6 by minimizing the squared error between the model's prediction and the observed return:\n\u03c6 = arg max \u03c6 d t (g \u03c6 (h d t , a d t ) \u2212 R d ) 2(8)\nAs before, we optimize the model parameters with mini-batch stochastic gradient descent (SGD) using Adam. We use L2 regularization with coefficients in the set {10.0, 1.0, 0.1, 0.01, 0.001, 0.0001, 0.00001, 0.0}. We select the coefficient with the smallest squared error on a hold-out dataset.\n\nAs input to the reward model we compute 23 features based on the dialogue history and a candidate response. As training data is scarce, we use only higher-level features:\n\n\nAMT label class:\n\nA vector indicating the probability of the AMT label classes for the candidate response, computed using Supervised AMT, as well as the probability that the candidate response has priority. If the candidate response has priority, the vector is zero in all entries, except the last entry corresponding to the priority class: [0.0, 0.0, 0.0, 0.0, 0.0, 1.0].\n\n\nGeneric response:\n\nA binary feature, which is 1.0 when the response only contains stop-words and otherwise zero.\n\n\nResponse length:\n\nThe number of words in the response, and the square root of the number of words in the response.\n\n\nDialogue act:\n\nA one-hot vector, indicating whether the last user utterance's dialogue is a request, a question, a statement or contains profanity (Stolcke et al. 2000).\n\n\nSentiment class:\n\nA one-hot vector, indicating whether the last user utterance's dialogue is negative, neutral or positive. Generic user utterance: A binary feature, which is 1.0 when the last user utterance only contains stop-words, and otherwise zero. User utterance length: The number of words in the last user utterance, and the square root of the number of words in the response.\n\n\nConfusion indicator:\n\nA binary feature, which is 1.0 when the last user utterance is very short (less than three words) and contains at least one word indicating the user is confused (e.g. \"what\", \"silly\", \"stupid\"). Dialogue length:\n\nThe number of dialogue turns so far, as well as the square root and logarithm of the number of dialogue turns.\n\nIn total, our dataset for training the reward model has 4340 dialogues. We split this into a training set with 3255 examples and a test set with 1085 examples.\n\nTo increase data efficiency, we learn an ensemble model through a variant of the bagging technique (Breiman 1996). We create 5 new training sets, which are shuffled versions of the original training set. Each shuffled dataset is split into a sub-training set and sub-hold-out set. The subhold-out sets are created such that the examples in one set do not overlap with other sub-hold-out sets. A reward model is trained on each sub-training set, with its hyper-parameters selected on the sub-hold-out set. This increases data efficiency by allowing us to re-use the sub-hold-out sets for training, which would otherwise not have been used. The final reward model is an ensemble, where the output is an average of the underlying linear regression models.\n\nThe reward model obtains a mean squared error of 0.96 and a Spearman's rank correlation coefficient of 0.19 w.r.t. the real Alexa user on the test set. In comparison, a model predicting with the average user score obtains a mean squared error of 0.99 and (because it outputs a constant) a Spearman's rank correlation coefficient of zero. Although the reward model is better than predicting the average, its correlation is relatively low. There are two reasons for this. First, the amount of training data is very small. This makes it difficult to learn the relationships between the features and the Alexa user scores. Second, the Alexa user scores are likely to have high variance because, they are influenced by many different factors. The score of the user may be determined by a single turn in the dialogue (e.g. a single misunderstanding at the end of the dialogue could result in a very low user score, even if all the previous turns in the dialogue were excellent). The score of the user may be affected by the accuracy of the speech recognition module. More speech recognition errors will inevitably lead to frustrated users. In a preliminary study, we found that Spearman's rank correlation coefficient between the speech recognition confidences and the Alexa user scores was between 0.05 \u2212 0.09. In comparison to correlations with other factors, this implies that speech recognition performance plays an important role in determining user satisfaction. 20 In addition, extrinsic factors are likely to have a substantial influence on the user scores. The user scores are likely to depend not only on the dialogue, but also on the user's profile (e.g. whether the user is an adult or a child), the environment (e.g. whether the user is alone with the system or several users are taking turns conversing with the system), the user's expectations towards the system before starting the conversation (e.g. whether the system is capable of playing games) and the emotional state of the user (e.g. the user's mood).\n\nTraining: To prevent overfitting, we do not train the scoring model from scratch with the reward model as target. Instead, we first initialize the scoring model with the parameters of the Supervised AMT, and then train it with the reward model outputs to minimize the squared error:\n\u03b8 = arg max \u03b8 d t (f \u03b8 (h d t , a d\n\nOff-policy REINFORCE\n\nAs discussed earlier, one way to parametrize the policy is as a discrete probability distribution over actions. This parametrization allows us to learn the policy directly from recorded dialogues through a set of methods known as policy gradient methods. This section describes one such approach.\n\nOff-policy Reinforcement Learning: We use a variant of the classical REINFORCE algorithm (Williams 1992, Precup 2000, Precup et al. 2001, which we call Off-policy REINFORCE.\n\nRecall eq. (4), where the policy's distribution over actions is parametrized as softmax function applied to a function f \u03b8 with parameters \u03b8. As before, let {h d t , a d t , R d } d,t be a set of examples, where h d t is the dialogue history for dialogue d at time t, a d t is the agent's action for dialogue d at time t and R d is the return for dialogue d. Let D be the number of dialogues and let T d be the number of turns in dialogue d. Further, let \u03b8 d be the parameters of the stochastic policy \u03c0 \u03b8t used during dialogue d. The Off-policy REINFORCE algorithm updates the policy parameters \u03b8 by:\n\u2206\u03b8 \u221d c d t \u2207 \u03b8 log \u03c0 \u03b8 (a d t |h d t ) R d where d \u223c Uniform(1, D) and t \u223c Uniform(1, T d ),(10)\nwhere c d t is the importance weight ratio:\nc d t def = t t =1 \u03c0 \u03b8 (a d t |h d t ) t t =1 \u03c0 \u03b8 d (a d t |h d t )\n.\n\nThis ratio corrects for the discrepancy between the learned policy \u03c0 \u03b8 and the policy under which the data was collected \u03c0 \u03b8t (sometimes referred to as the behaviour policy). It up-weights examples with high probability under the learned policy and down-weights examples with low probability under the learned reward function.\n\nThe intuition behind the algorithm can be illustrated by analogy with learning from trial and error.\n\nWhen an example has a high return (i.e. high user score), the term \u2207 \u03b8 log \u03c0 \u03b8 (a d t |h d t ) R d will be a vector pointing in a direction increasing the probability of taking action a d t . On the other hand, when an example has low return (i.e. low user score), the term \u2207 \u03b8 log \u03c0 \u03b8 (a d t |h d t ) R d will be a vector close to zero or a vector pointing in the opposite direction, hence decreasing the probability of taking action a d t . The importance ratio c d t is known to exhibit very high, possibly infinite, variance (Precup et al. 2001). Therefore, we truncate the products in the nominator and denominator to only include the current time step t:\nc d t,trunc. def = \u03c0 \u03b8 (a d t |h d t ) \u03c0 \u03b8 d (a d t |h d t )\n.\n\nThis induces bias in the learning process, but also acts as a regularizer.\n\nReward Shaping: As mentioned before, one problem with the Off-policy REINFORCE algorithm presented in eq. (10) is that it suffers from high variance (Precup et al. 2001). The algorithm uses the return, observed only at the very end of an episode, to update the policy's action probabilities for all intermediate actions in an episode. With a small number of examples, the variance in the gradient estimator is overwhelming and this could easily lead the agent to over-estimate the utility of poor actions and, vice versa, to under-estimate the utility of good actions. One remedy for this problem is reward shaping, where the reward at each time step is estimated using an auxiliary function (Ng et al. 1999). For our purpose, we propose a simple variant of reward shaping which takes into account the sentiment of the user. When the user responds with a negative sentiment (e.g. an angry comment), we will assume that the preceding action was highly inappropriate and assign it a reward of zero. Given a dialogue d, at each time t we assign reward r d t :\nr d t def = \uf8f1 \uf8f2 \uf8f3 0\nif user utterance at time t + 1 has negative sentiment,\nR d T d otherwise.(13)\nWith reward shaping and truncated importance weights, the learning update becomes:\n\u2206\u03b8 \u221d c d t,trunc. \u2207 \u03b8 log \u03c0 \u03b8 (a d t |h d t ) r d t where d \u223c Uniform(1, D), t \u223c Uniform(1, T d ),(14)\nOff-policy Evaluation: To evaluate the policy, we estimate the expected return (Precup 2000):\nR \u03c0 \u03b8 [R] \u221d \u223c d,t c d t,trunc. r d t .(15)\nFurthermore, by substituting r d t with a constant reward of 1.0 for each time step, we can compute the estimated number of time steps per episode under the policy. As will be discussed later, this is an orthogonal metric based on which we can analyse and evaluate each policy. However, this estimate does not include the number of priority responses, since there are no actions for the agent to take when there is a priority response.\n\nTraining: We initialize the policy model with the parameters of Supervised AMT, and then train the parameters w.r.t. eq. (14) with stochastic gradient descent using Adam. We use a set of a few thousand dialogues recorded between Alexa users and a preliminary version of the system. About 60% of these examples are used for training, and about 20% are used for development and testing. To reduce the risk of overfitting, we only train the weights related to the second last layer using off-policy REINFORCE. We use a random grid search with different hyper-parameters, which include the temperature parameter \u03bb and the learning rate. We select the hyper-parameters with the highest expected return on the development set.\n\n\nOff-policy REINFORCE with Learned Reward Function\n\nSimilar to the Supervised Learned Reward policy, we may use the reward model for training with the Off-policy REINFORCE algorithm. This section describes how we combine the two approaches.\n\n\nReward Shaping with Learned Reward Model:\n\nWe use the reward model to compute a new estimate for the reward at each time step in each dialogue:\nr d t def = 0 if user utterance at time t + 1 has negative sentiment, g \u03c6 (h t , a t ) otherwise.(16)\nThis is substituted into eq. (14) for training and into eq. (15) for evaluation.\n\nTraining: As with Off-policy REINFORCE, we initialize the policy model with the parameters of the Supervised AMT model, and then train the parameters w.r.t. eq. (14) with mini-batch stochastic gradient descent using Adam. We use the same set of dialogues and split as Off-policy REINFORCE.\n\nWe use a random grid search with different hyper-parameters, As before, to reduce the risk of overfitting, we only train the weights related to the second last layer using this method. which include the temperature parameter \u03bb and the learning rate, and select the hyper-parameters with the highest expected return on the development set. In this case, the expected return is computed according to the learned reward model. As this policy uses the learned reward model, we call it Off-policy REINFORCE Learned Reward.\n\n\nQ-learning with the Abstract Discourse Markov Decision Process\n\nThe approaches described so far have each their own advantages and disadvantages. One way to quantify their differences is through a decomposition known as the bias-variance trade-off. At one end of the spectrum, the Supervised AMT policy has low variance, because it was trained with hundreds of thousands of human annotations at the level of each model response. However, for the same reason, Supervised AMT incurs a substantial bias, because the human annotations do not reflect the real user satisfaction for an entire conversation. At the other end of the spectrum, Off-policy REINFORCE suffers from high variance, because it was trained with only a few thousand dialogues and corresponding user scores. To make matters worse, the user scores are affected by many external factors (e.g. user profile, user expectations, and so on) and occur at the granularity of an entire conversation. Nevertheless, this method incurs low bias because it directly optimizes the objective metric we care about (i.e. the user score). 21 By utilizing a learned reward function, Supervised Learned Reward and Off-policy REINFORCE Learned Reward suffer less from bias, but since the learned reward function has its own variance component, they are both bound to have higher variance. In general, finding the optimal trade-off between bias and variance can be notoriously difficult. In 21 Due to truncated importance weights, however, the off-policy REINFORCE training procedure is still biased.\n\nthis section we propose a novel method for trading off bias and variance by learning the policy from simulations in an approximate Markov decision process.\n\nMotivation A Markov decision process (MDP) is a framework for modeling sequential decision making (Sutton & Barto 1998). In the general setting, an MDP is a model consisting of a discrete set of states H, a discrete set of actions A, a transition distribution function P , a reward distribution function R, and a discount factor \u03b3. As before, an agent aims to maximize its reward during each episode. Let t denote the time step of an episode with length T . At time step t, the agent is in state h t \u2208 H and takes action a t \u2208 A. Afterwards, the agent receives reward r t \u223c R(h t , a t ) and transitions to a new state h t+1 \u223c P (h t |a t ).\n\nGiven an MDP model for open-domain conversations, there are dozens of algorithms we could apply to learn the agent's policy (Sutton & Barto 1998). Unfortunately, such an MDP is difficult to build or estimate. We could try to naively estimate one from the recorded dialogues, but this would require solving two extremely difficult problems. First, we would need to learn the transition distribution P , which outputs the next user utterance in the dialogue given the dialogue history. This problem is likely to be as difficult as our original problem of finding an appropriate response to the user! Second, we would need to learn the reward distribution R for each time step. However, as we have shown earlier, it is very difficult to learn to predict the user score for an entire dialogue. Given the data we have available, estimating the reward for a single turn is likely also going to be difficult. Instead, we propose to tackle the problem by splitting it into three smaller parts. For each time step t, z t is a discrete random variable which represents the abstract state of the dialogue, h t represents the dialogue history, a t represents the action taken by the system (i.e. the selected response), y t represents the sampled AMT label and r t represents the sampled reward.\n\nThe Abstract Discourse Markov Decision Process The model we propose to learn is called the Abstract Discourse MDP. As illustrated in Figure 7, the model follows a hierarchical structure at each time step. At time t, the agent is in state z t \u2208 Z, a discrete random variable representing the abstract discourse state. This variable only represents a few high-level properties related to the dialogue history. We define the set Z is the Cartesian product:\nZ = Z Dialogue act \u00d7 Z User sentiment \u00d7 Z Generic user utterance ,(17)\nwhere Z Dialogue act , Z User sentiment and Z Generic user utterance are three discrete sets.\n\nThe first set consists of 10 dialogue acts: Z Dialogue act = {Accept, Reject, Request, Politics, Generic Question, Personal Question, Statement, Greeting, Goodbye, Other}.\n\nThese dialogue acts represent the high-level intention of the user's utterance (Stolcke et al. 2000).\n\nThe second set consists of sentiments types: Z User sentiment = {Negative, Neutral, Positive}. The third set represent a binary variable: Z Generic user utterance = {True, False}. This variable is True only when the user utterance is generic and topic-independent (i.e. when the user utterance only contains stop-words). We build a hand-crafted deterministic classifier, which maps a dialogue history to the corresponding classes in Z Dialogue act , Z User sentiment and Z Generic user utterance . We denote this mapping f h\u2192z . Although we only consider dialogue acts, sentiment and generic utterances, it is trivial to expand the abstract discourse state with other types of discrete or real-valued variables.\n\nGiven a sample z t , the Abstract Discourse MDP samples a dialogue history h t from a finite set of dialogue histories H. In particular, h t is sampled at uniformly random from the set of dialogue histories where the last utterance is mapped to z t :\nh t \u223c P (h|H, f h\u2192z , z t ) def = Uniform({h | h \u2208 H and f h\u2192z (h) = z t }).(18)\nIn other words, h t is a dialogue history where dialogue act, user sentiment and generic property is identical to the discrete variable z t .\n\nFor our purpose, H is the set of all recorded dialogues between Alexa users and a preliminary version of the system. This formally makes the Abstract Discourse MDP a non-parametric model, since sampling from the model requires access to the set of recorded dialogue histories H. This set grows over time when the system is deployed in practice. This is useful, because it allows to continuously improve the policy as new data becomes available. Further, it should be noted that the set Z is small enough that every possible state is observed several times in the recorded dialogues.\n\nGiven a sample h t , the agent chooses an action a t according to its policy \u03c0 \u03b8 (a t |h t ), with parameters \u03b8. A reward r t is then sampled such that r t \u223c R(h t , a t ), where R is a distribution function. In our case, we use the probability function P\u03b8, where the parameters\u03b8 are estimated using supervised learning on AMT labels in eq. (6). We specify a reward of \u22122.0 for a \"very poor\" response class, a reward of \u22121.0 for a \"poor\" response class, a reward of 0.0 for an \"acceptable\" response class, a reward of 1.0 for a \"good\" response class and a reward of 2.0 for an \"excellent\" response class. To reduce the number of hyperparameters, we use the expected reward instead of a sample: 22\nr t = P\u03b8(y|h t , a t ) T [\u22122.0, \u22121.0, 0.0, 1.0, 2.0].(19)\nNext, a variable y t \u2208 {\"very poor\", \"poor\", \"acceptable\", \"good\", \"excellent\"} is sampled:\ny t \u223c P\u03b8(y|h t , a t ).(20)\nThis variable represents one appropriateness interpretation of the output. This variable helps predict the future state z t+1 , because the overall appropriatness of a response has a significant impact on the user's next utterance (e.g. very poor responses often cause users to respond with What? or I don't understand.).\n\nFinally, a new state z t+1 is sampled according to P\u03c8:\nz t+1 \u223c P\u03c8(z|z t , h t , a t , y t ).(21)\nwhere P\u03c8 is the transition distribution with parameters\u03c8. The transition distribution is parametrized by three independent two-layer MLP models, which take as input the same features as the scoring function, as well as 1) a one-hot vector representing the sampled response class y t , 2) a one-hot vector representing the dialogue act of the last user utterance, 3) a one-hot vector representing the sentiment of the last user utterance, 4) a binary variable indicating whether the last user utterance was generic, and 5) a binary variable indicating whether the last user utterance contained a wh-word (e.g. what, who). The first MLP predicts the next dialogue act, the second MLP predicts the next sentiment type and the third MLP predicts whether the next user utterance is generic. The dataset for training the MLPs consists of 499, 757 transitions, of which 70% are used for training and 30% for evaluation. The MLPs are trained with maximum log-likelihood using mini-batch stochastic gradient descent. We use Adam and early-stop on a hold-out set. Due to the large number of examples, no regularization is used. The three MLP models obtain a joint perplexity of 19.51. In comparison, a baseline model, which always assigns the average class frequency as the output probability obtains a perplexity of 23.87. On average, this means that roughly 3 \u2212 4 possible z t+1 states can be eliminated by conditioning on the previous variables z t , h t , a t and y t . In other words, the previous state z t and h t , together with the agent's action a t has a significant effect on the future state z t+1 . This means that an agent trained in the Abstract Discourse MDP has the potential to learn to take into account future states of the dialogue when selecting its action. This is in contrast to policies learned using supervised learning, which do not consider future dialogue states.\n\nThe idea of modeling a high-level abstraction of the dialogue, z t , is related to the dialogue state tracking challenge (Williams et al. 2013(Williams et al. , 2016. In this challenge, the task is to map the dialogue history to a discrete state representing all salient information about the dialogue. Unlike the dialogue state tracking challenge, however, the variable z t only includes limited salient information about the dialogue. For example, in our implementation, z t does not include topical information. As such, z t is only a partial representation of the dialogue history.\n\nTraining Given the Abstract Discourse MDP, we are now able to learn policies directly from simulations. We use Q-learning with experience replay to learn the policy, since it is simple and has been shown to be effective with policies parametrized by neural networks (Mnih et al. 2013, Lin 1993. For experience replay, we use a memory buffer of size 1000. We use an -greedy exploration scheme with = 0.1. We experiment with discount factors \u03b3 \u2208 {0.1, 0.2, 0.5}. As before, the parameters are updated using Adam. To reduce the risk of overfitting, we only train the weights related to the final output layer and the skip-connection (shown in dotted lines in Figure 2) using Q-learning.\n\nTraining is carried out in two alternating phases. We train the policy for 100 episodes. Then, we evaluate the policy for 100 episodes w.r.t. average return. Afterwards, we continue training the policy for another 100 episodes. During evaluation, each dialogue history is sampled from a separate set of dialogue histories, H Eval , which is disjoint from the set of dialogue histories, H Train used at training time. This ensures that the policy is not overfitting our finite set of dialogue histories. For each hyper-parameter combination, we train the policy between 400 and 600 episodes. We select the policy which performs best w.r.t. average return. To keep notation brief, we call this policy Q-learning AMT.\n\n\nPreliminary Evaluation\n\nIn this section, we carry out a preliminary evaluation of the response model selection policies. Off-policy Evaluation: One way to evaluate the selection policies is by using the off-policy evaluation given in eq. (15). This equation provides an estimate of the expected Alexa user score under each policy. 23 As described earlier, the same equation can be used to estimate the expected number of time steps per episode (excluding priority responses).\n\nThe expected (average) Alexa user score and number of time steps per episode (excluding priority responses) are given in Table 3. Here we observe that the Off-policy REINFORCE performs best followed by Q-learning AMT and Supervised AMT w.r.t. expected Alexa user score. Off-policy REINFORCE reaches 2.45, which is a major 17.8% improvement over the second best performing model Q-learning AMT. However, this advantage should be taken with a grain of salt. As discussed earlier, the off-policy evaluation in eq. (15) is a biased estimator since the importance weights have been truncated. Moreover, Off-policy REINFORCE has been trained specifically to maximize this biased estimator, while all other policies have been trained to maximize other objective functions. Similarly, w.r.t. expected number of time steps, Off-policy REINFORCE reaches the highest number of time steps followed by Q-learning AMT and Supervised AMT. As before, we should take this result with a grain of salt, since this evaluation is also biased and does not take into account priority responses. Further, it's not clear that increasing the number of time steps will increase user scores. Nevertheless, Off-policy REINFORCE, Q-learning AMT and Supervised AMT appear to be our prime candidates for further experiments.\n\nResponse Model Selection Frequency: Figure 8 shows the frequency with which Supervised AMT, Off-policy REINFORCE and Q-learning AMT select different response models. We observe that the policy learned using Off-policy REINFORCE tends to strongly prefer Alicebot responses over other models. The Alicebot responses are among the safest and most topic-dependent, generic responses in the system, which suggests that Off-policy REINFORCE has learned a highly risk averse strategy.\n\nOn the other hand, the Q-learning AMT policy selects Alicebot responses substantially less often than both Off-policy REINFORCE and Supervised AMT. Instead, Q-learning AMT tends to prefer responses retrieved from Washington Post and from Google search results. These responses are semantically richer and have the potential to engage the user more deeply in a particular topic, but they are also more risky (e.g. a bad choice could derail the entire conversation.). This suggests that Q-learning AMT has learned a more risk tolerant strategy. One possible explanation for this difference is that Q-learning AMT was trained using simulations. By learning online from simulations, the policy has been able to explore new actions and discover high-level strategies lasting multiple time steps. In particular, the policy has been allowed to experiment with riskier actions and to learn remediation or fall-back strategies, in order to handle cases where a risky action fails. This might also explain its stronger preference for BoWFactGenerator responses, which might be serving as a fall-back strategy by outputting factual statements on the current topic. This would have been difficult to learn for Off-policy REINFORCE, since the sequence of actions for such high-level strategies are sparsely observed in the data and, when they are observed, the corresponding returns (Alexa user scores) have high variance.\n\nA second observation is that Q-learning AMT has the strongest preference for Initiatorbot among the three policies. This could indicate that Q-learning AMT leans towards a system-initiative strategy (e.g. a strategy where the system tries to maintain control of the conversation by asking questions, changing topics and so on). Further analysis is needed to confirm this.\n\nAbstract Discourse MDP Evaluation Next, we can evaluate the performance of each policy w.r.t. simulations in the Abstract Discourse MDP. We simulate 500 episodes under each policy and evaluate it w.r.t. average return, average reward per time step and dialogue length. In addition to evaluating the five policies described earlier, we also evaluate three heuristic policies: 1) a policy selecting responses at random called Random, 2) a policy selecting only Alicebot responses called Alicebot, 24 and 3) a policy selecting Evibot responses when possible and Alicebot responses otherwise, called Evibot + Alicebot 25 . Evaluating these models will serve to validate the approximate MDP. 24 When there are no valid Alicebot responses, this policy selects a response at random. 25 When there are no valid Evibot or Alicebot responses, this policy selects a response at random. The results are given in Table 4. We observe that Supervised AMT performs best w.r.t. average return and average reward per time step. However, this comes as no surprise. The reward function in the MDP is defined as Supervised AMT, so by construction this policy achieves the highest reward per time step. Next we observe that Q-learning AMT is on par with Supervised AMT, both achieving same \u22120.15 average reward per time step. Second in line comes Off-policy REINFORCE, achieving an average reward per time step of \u22120.16. However, Off-policy REINFORCE also achieved the highest average dialogue length of 43.24. At the other end of the spectrum comes, as expected, the Random policy performing worst w.r.t. all metrics. In comparison, both Alicebot and Evibot + Alicebot perform better w.r.t. all metrics, with Evibot + Alicebot achieving the best average return and average reward per time step out of the three heuristic policies. This validates the utility of the Abstract Discourse MDP as an environment for training and evaluating policies. Overall, Off-policy REINFORCE, Q-learning AMT and Supervised AMT still appear to be the best performing models in the preliminary evaluation. Finally, we compare Q-learning AMT with Supervised AMT w.r.t. the action taken in states from episodes simulated in the Abstract Discourse MDP. As shown in Figure 9, the two policies diverge w.r.t. several response models. When Supervised AMT would have selected topic-independent, generic Alicebot and Elizabot responses, Q-learning AMT often selects BoWFactGenerator, Initiatorbot and VHREDWashingtonPost responses. For example, there were 347 instances where Supervised AMT selected Alicebot, but where Q-learning AMT selected BoWFactGenerator. Similarly, where Supervised AMT would have preferred generic VHREDSubtitle responses, Q-learning AMT often selects responses from BoWFactGenerator, InitiatorBot and VHREDRedditSports. This supports our previous analysis showing that Q-learning AMT has learned a more risk tolerant strategy, which involves response models with semantically richer content.\n\nIn the next section, we evaluate these policies with real-world users.\n\n\nA/B Testing Experiments\n\nTo evaluate the dialogue manager policies described in the previous section, we carry out A/B testing experiments.\n\nDuring each A/B testing experiment, we evaluate several policies for selecting the response model. When Alexa users start a conversation with the system, they are automatically assigned to a random policy and afterwards their dialogues and final scores are recorded. However, the distribution over Alexa users is bound to change over time. Different types of users will use the system depending on the time of day, weekday and holiday season. In addition, the user expectations towards our system change over time as they interact with other socialbots in the competition. In other words, we must consider the Alexa user distribution as following a non-stationary stochastic process. Therefore, . Users who are returning to the system are likely to be influenced by their previous interactions with the system. For example, users who previously had a positive experience with the system may be biased towards giving high scores in their next interaction. Further, the users who return to the system are more likely to belong to a different user population than the users who only try the system once. This group of users may inherently have more free time and be more willing to engage with socialbots than other users. Discarding returning user scores ensures that the evaluation is not biased towards a subpopulation of users. By discarding scores from returning users, we also ensure that the evaluation counts every user exactly once. Finally, it should be noted that we ignore dialogues where the Alexa user did not give a score. This inevitably biases our evaluation, since users who do not provide a score are likely to have been dissatisfied with the system or to have been expecting different functionality (e.g. non-conversational activities, such as playing music, playing games or taking quizzes). One potential remedy is to have all dialogues evaluated by a third-party (e.g. by asking human annotators on Amazon Mechanical Turk to evaluate the dialogue), but that is beyond the scope of this work.\n\n\nA/B Testing Experiment #1\n\nThe first A/B testing experiment was carried out between July 29th, 2017 and August 6th, 2017. We tested six dialogue manager policies: Evibot + Alicebot, Supervised AMT, Supervised Learned Reward, Off-policy REINFORCE, Off-policy REINFORCE Learned Reward and Q-learning AMT.\n\nFor Off-policy REINFORCE and Off-policy REINFORCE Learned Reward, we use the greedy variant defined in eq. (5).\n\nThis experiment occurred early in the Amazon Alexa Prize competition. This means that Alexa users have few expectations towards our system (e.g. expectations that the system can converse on a particular topic, or that the system can engage in non-conversational activities, such as playing word games or taking quizzes). Further, the period July 29th -August 6th overlaps with the summer holidays in the United States. This means that we might expect more children to interact with system than during other seasons.\n\n\nPolicy Evaluation\n\nThe results are given in Table 5. 26 The table shows the average Alexa user scores, average dialogue length, average percentage of positive user utterances and average percentage of negative user utterances. In total, over a thousand user ratings were collected after discarding returning users. 27 Each policy was evaluated by about two hundred unique Alexa users.\n\n26 95% confidence intervals are computed under the assumption that the Alexa user scores for each policy are drawn from a normal distribution with its own mean and variance. This is an approximation, since the Alexa user scores only have support on the interval [1,5].\n\n27 Ratings were collected after the end of the semi-finals competition, where all ratings had been transcribed by human annotators.\n\nAs expected from our preliminary evaluation, we observe that Q-learning AMT and Off-policy REINFORCE perform best among all policies w.r.t. user scores. Q-learning AMT obtained an average user score of 3.15, which is significantly higher than all other policies at a 95% statistical significance level w.r.t. a one-tailed two-sample t-test. Interestingly, Off-policy REINFORCE achieved the longest dialogues with an average of 37.02/2 = 18.51 turns per dialogue. This suggests Offpolicy REINFORCE yields highly interactive and engaging conversations. However, Off-policy REINFORCE also had a slightly higher percentage of user utterances with negative sentiment compared to Q-learning AMT. This potentially indicates that the longer dialogues also include some frustrated interactions (e.g. users who repeat the same questions or statements in the hope that the system will return a more interesting response next time). The remaining policies achieved average Alexa user scores between 2.74 and 2.86, with the heuristic policy Evibot + Alicebot obtaining 2.86. This suggests that the other policies have not learned to select responses more appropriately than the Evibot + Alicebot heuristic.\n\nIn conclusion, the results indicate that the risk tolerant learned by the Q-learning AMT policy performs best among all policies. This shows that learning a policy through simulations in an Abstract Discourse MDP may serve as a fruitful path towards developing open-domain socialbots. In addition, the performance of Off-policy REINFORCE indicates that optimizing the policy directly towards Alexa user scores could also potentially yield improvements. However, further investigation is required.\n\nInitiatorbot Evaluation This experiment also allowed us to analyze the outcomes of different conversation starter phrases given by the Initiatorbot. We carried out this analysis by computing the average Alexa user score for each of the 40 possible phrases. We found that phrases related to news (e.g. \"Do you follow the news?\"), politics (e.g. \"Do you want to talk about politics?\") and travelling (e.g. \"Tell me, where do you like to go on vacation?\") performed poorly across all policies. On the other hand, phrases related to animals (e.g. \"Do you have pets?\" and \"What is the cutest animal you can think of?\"), movies (e.g. \"Let's talk about movies. What's the last movie you watched?\") and food (e.g. \"Let's talk about food. What is your favorite food?\") performed well across all policies. For example, conversations where the Initiatorbot asked questions related to news and politics had an average Alexa user score of only 2.91 for the top two systems (Off-policy REINFORCE and Q-learning AMT). Mean while, conversations where the Initiatorbot asked questions about animals, food and movies the corresponding average Alexa user score was 3.17. We expected the conversation topic to affect user engagement, however it is surprising that these particular topics (animals, food and movies) were the most preferred ones. One possible explanation is that our system does not perform well on news, politics and travelling topics. However, the system already had several response models dedicated to discussing news and politics: six sequence-to-sequence models extracting responses from Reddit news and Reddit politics, two models extracting responses from Washington Post user comments and the BoWTrump model extracting responses from Donald J. Trump's Twitter profile. In addition, Evibot is capable of answering many factual questions about news and politics and BoWFactGenerator contains hundreds of facts related to news and politics. As such, there may be another more plausible explanation for users' preferences towards topics, such as animals, movies and food. One likely explanation is the age group of the users. While inspecting our logs, we observed that many children were interacting with our system, and it would hardly come as a surprise that these children may prefer to talk about animals, movies and foods rather than news, politics and travels.\n\n\nA/B Testing Experiment #2\n\nThe second A/B testing experiment was carried out between August 6th, 2017 and August 13th, 2017. We tested two dialogue manager policies: Off-policy REINFORCE and Q-learning AMT. As before, we use the greedy variant of Off-policy REINFORCE defined in eq. (5).\n\nThis experiment occurred at the end of the Amazon Alexa Prize competition. This means that many Alexa users have already interacted with other socialbots in the competition, and therefore are likely to have developed expectations towards the systems. These expectations are likely to involve conversing on a particular topic or engaging in non-conversational activities, such as playing games). Further, the period August 6th -August 13th overlaps with the end of the summer holidays and the beginning of the school year in the United States. This means that we should expect less children to interact with the system than in the previous A/B testing experiment. Table 6: Second A/B testing experiment with two different policies (\u00b1 95% confidence intervals). Star * indicates policy is significantly better than other policies at 95% statistical significance level.\n\n\nPolicy\n\nUser score Dialogue length Pos. utterances Neg. utterances\n\nOff-policy REINFORCE* 3.10 \u00b1 0.12 34.86 \u00b1 3.66 3.21% \u00b1 0.44 7.96% \u00b1 0.82 Q-learning AMT 2.93 \u00b1 0.12 32.06 \u00b1 3.58 3.42% \u00b1 0.48 7.56% \u00b1 0.81\n\n\nPolicy Evaluation\n\nThe results are given in Table 6. In total, about eight hundred user ratings were collected after discarding returning users. As such, each policy was evaluated by about four hundred unique Alexa users.\n\nWe observe that both Off-policy REINFORCE and Q-learning AMT perform better than the policies in the previous experiment. However, in this experiment, Off-policy REINFORCE achieved an average Alexa user score of 3.06 while Q-learning AMT achieved a lower score of only 2.95. Nonetheless, Off-policy REINFORCE is not statistically significantly better. Further, Off-policy REINFORCE achieves a slightly higher percentage of negative user utterances and a slightly lower percentage of positive user utterances compared Q-learning AMT.\n\nAs discussed earlier, the performance difference compared to the previous A/B testing experiment could be due to the change in user profiles and user expectations. At this point in time, more of the Alexa users have interacted with socialbots from other teams. Mean while, all socialbots have been evolving. Therefore, user expectations towards our system are likely to be higher now. Further, since the summer holidays have ended, less children and more adults are expected to interact with our system. It is plausible that these adults also have higher expectations towards the system, and even more likely that they are less playful and less tolerant towards mistakes. Given this change in user profiles and expectations, the risk tolerant strategy learned by the Q-learning AMT policy is likely to fare poorly compared to the risk averse strategy learned by Off-policy REINFORCE.\n\n\nDiscussion\n\nThe two policies Q-learning AMT and Off-policy REINFORCE have demonstrated substantial improvements over all other policies, including policies learned using supervised learning and heuristic policies. As discussed earlier, the Q-learning AMT policy achieved an average Alexa user score comparable to some of the top teams in the competition semi-finals. Mean while, Off-policy REINFORCE a very high number of turns in the dialogue, suggesting that the resulting conversations are far more interactive and engaging. The results demonstrate the advantages of the overall ensemble approach, where many different models generate natural language responses and the system policy selects one response among them. The results also highlight the advantages of learning the policy using reinforcement learning techniques. By optimizing the policy to maximize with either real-world user scores or rewards in the Abstract Discourse MDP, with a proxy reward function, we have demonstrated that significant gains can be achieved w.r.t. both real-world user scores and number of dialogue turns.\n\n6 Future Work\n\n\nPersonalization\n\nOne important direction for future research is personalization, i.e. building a model of each user's personality, opinions and interests. This will allow the system to provide a better user experience by adapting the response models to known attributes of the user. We are in the process of implementing a state machine that given a user id, retrieves the relevant information attributes of the user from a database. If a particular user attribute is missing, then the state machine will ask the user for the relevant information and store it in the database. One important user attribute is the user's name. If no name is found in the database, the state machine may ask the user what they would like to be called and afterwards extracts the name from the user's response. If a personal name is detected, it is stored in the database to be available for other modules to insert into their responses. Name detection proceeds as follows. First we match the response against a small collection of templates, such as \"my name is ...\" or \"call me ...\". Then we use part-of-speech (POS) tags of the resulting matches to detect the end boundary of the name. To avoid clipping the name too early due to wrong POS tags, we also match words against a list of common names in the 1990 US Census data 28 .\n\nIn the future, we plan to explore learning user embeddings from previous interactions with each user. This will allow the system to become more personalized, by providing our response models with additional context beyond the immediate dialogue history.\n\n\nConclusion\n\nWe have proposed a new large-scale ensemble-based dialogue system framework for the Amazon Alexa Prize competition. Our system leverages a variety of machine learning techniques, including deep learning and reinforcement learning. We have developed a new set of deep learning models for natural language retrieval and generation, including recurrent neural networks, sequence-to-sequence models and latent variable models. Further, we have developed a novel reinforcement learning procedure and evaluated it against existing reinforcement learning methods in A/B testing experiments with real-world users. These innovations have enabled us to make substantial improvements upon our baseline system. On a scale 1 \u2212 5, our best performing system reached an average user score of 3.15, with a minimal amount of hand-crafted states and rules and without engaging in non-conversational activities (such as playing games). This is comparable to some of the top systems in the semi-finals. Furthermore, the same system averaged a high 14.5 \u2212 16.0 turns per conversation, which suggests that our system is one of the most interactive and engaging systems in the competition. Since nearly all our system components are trainable machine learning models, the system is likely to improve greatly with more interactions and additional data.\n\nFigure 1 :\n1Dialogue manager control flow.\n\n\n14 subphrases \u2190 list of subphrases with entities 15 for subphrase in subphrases do 16 evi-response \u2190 send subphrase to www.evi.com 17 if evi-response is valid then 18 return evi-response, priority 19 subphrases \u2190 list of all subphrases 20 for subphrase in subphrases do 21 evi-response \u2190 send subphrase to www.evi.\n\nFigure 2 :\n2Computational graph for scoring model, used for the model selection policies based on both action-value function and stochastic policy parametrizations. The model consists of an input layer with 1458 features, a hidden layer with 500 hidden units, a hidden layer with 20 hidden units, a softmax layer with 5 output probabilities (corresponding to the five AMT labels in Section 4.3), and a scalar-valued output layer. The dashed arrow indicates a skip connection.\n\nFigure 3 :\n3Consent screen for Amazon Mechanical Turk human intelligence tasks (HITs).\n\nFigure 4 :\n4Instructions screen for Amazon Mechanical Turk human intelligence tasks (HITs).\n\nFigure 5 :\n5Annotation screen for Amazon Mechanical Turk human intelligence tasks (HITs). The dialogue text is a fictitious example.\n\nFigure 6 :\n6Amazon Mechanical Turk class frequencies on the test set w.r.t. different policies.\n\nFigure 7 :\n7Probabilistic directed graphical model for the Abstract Discourse Markov Decision Process.\n\nFigure 8 :\n8Response model selection probabilities across response models for Supervised AMT, Off-policy REINFORCE and Q-learning AMT on the AMT label test dataset.\n\nFigure 9 :\n9Contingency table comparing selected response models between Supervised AMT and Q-learning AMT. The cells in the matrix show the number of times the Supervised AMT policy selected the row response model and the Q-learning AMT policy selected the column response model. The cell frequencies were computed by simulating 500 episodes under the Q-learning policy in the Abstract Discourse MDP. Note that all models retrieving responses from Reddit have been agglomerated into the class Reddit models.\n\nTable 1 :\n1Example dialogues and corresponding candidate responses generated by response models. The response of the final system is marked in bold. Hi. This is an Alexa Prize socialbot. USER: Hi SYSTEM: Do you have pets? USER: Yes, I have two rabbits. ... USER: Let's talk about movies. SYSTEM: What's your favorite movie? USER: star wars movie Alicebot: Hurrah! Two is a good number of rabbits. Elizabot: OK, but can you elaborate a bit? VHREDRedditMovies: Hmm. Nope, never heard of it. VHREDSubtitles: Would you like to see them? HelpResponse: I would really like to talk about news, politics or movies. BoWEscapePlan: I don't have an answer for this. BoWFactGenerator: Here's an interesting fact. The international telephone dialing code for Antarctica is 672. GRUQuestionGenerator: how about your New York City? Initiatorbot: How was your day? LSTMClassifierMSMarco: A third Anthology film will be released in 2020. DualEncoderRedditNews: Now whisper it to me , one more time bby. DualEncoderRedditPolitics: hahaha on mobile this ain't even close. I wish I could show you but this looks awful I'm sorry man. Alicebot: What did you like about the robots in that movie? Elizabot: How does that make you feel? Evi: Star Wars movie a movie in the Star Wars series. VHREDRedditMovies: Oh please. Please. Pleeeease. Let this happen. VHREDSubtitles: What? HelpResponse: I would really like to talk about news, politics or movies.Dialogue \nDialogue \nSYSTEM: Candidate Responses \nCandidate Responses \nBoWEscapePlan: I don't have an answer for \nthis. \nBoWFactGenerator: Did you know that male \nrabbits are called bucks, females are does? \nGRUQuestionGenerator: How about the \nAmerican family of it? \nInitiatorbot: Do you believe in love at first \nsight? \nLSTMClassifierMSMarco: Mar 23, 2017 Two \nParts: Learning What to Feed Your Rabbit \nLearning How to ... \nDualEncoderRedditNews: bye doggie \nDualEncoderRedditPolitics: Who's edger u \nshboys? \n\n\nTable 2 :\n2Scoring model evaluation on Amazon Mechanical Turk test set w.r.t. Pearson correlation coefficient, Spearman's rank correlation coefficient and mean squared error.Model \nPearson Spearman Mean squared error \n\nAverage Predictor \n0.00 \n0.00 \n1.30 \nSupervised AMT \n0.40 \n0.38 \n1.10 \n\n\n\n\n, R d } d,t be a set of examples, where t denotes the time step and d denotes the dialogue. Let R d \u2208 [1, 5] denote the observed real-valued return for dialogue d.Let {h d \nt , a d \nt \n\nTable 3 :\n3Off-policy evaluation w.r.t. expected (average) Alexa user score and number of time steps (excluding priority responses) on test set.Policy \nAlexa user score Time steps \n\nSupervised AMT \n2.06 \n8.19 \nSupervised Learned Reward \n0.94 \n3.66 \nOff-policy REINFORCE \n2.45 \n10.08 \nOff-policy REINFORCE Learned Reward \n1.29 \n5.02 \nQ-learning AMT \n2.08 \n8.28 \n\n\n\nTable 4 :\n4Policy evaluation using the Abstract Discourse MDP w.r.t. average return, average reward per time step and average episode length on dev set (\u00b1 standard deviations). The reward function is based on Supervised AMT.Policy \nAverage return Average reward per time step Average dialogue length \n\nRandom \n\u221232.18 \u00b1 31.77 \n\u22120.87 \u00b1 0.24 \n34.29 \u00b1 33.02 \nAlicebot \n\u221215.56 \u00b1 15.61 \n\u22120.37 \u00b1 0.16 \n42.01 \u00b1 42.00 \nEvibot + Alicebot \n\u221211.33 \u00b1 12.43 \n\u22120.29 \u00b1 0.19 \n37.5 \u00b1 38.69 \nSupervised AMT \n\u22126.46 \u00b1 8.01 \n\u22120.15 \u00b1 0.16 \n42.84 \u00b1 42.92 \nSupervised Learned Reward \u221224.19 \u00b1 23.30 \n\u22120.73 \u00b1 0.27 \n31.91 \u00b1 30.09 \nOff-policy REINFORCE \n\u22127.30 \u00b1 8.90 \n\u22120.16 \u00b1 0.16 \n43.24 \u00b1 43.58 \n\nOff-policy REINFORCE \nLearned Reward \n\u221210.19 \u00b1 11.15 \n\u22120.28 \u00b1 0.19 \n35.51 \u00b1 35.05 \n\nQ-learning AMT \n\u22126.54 \u00b1 8.02 \n\u22120.15 \u00b1 0.18 \n40.68 \u00b1 39.13 \n\n\n\nTable 5 :\n5First A/B testing experiment with six different policies (The \u00b1 95% confidence intervals). Star * indicates policy is significantly better than other policies at 95% statistical significance level.we take two steps to reduce confounding factors and correlation between users. First, during each A/B testing experiment, we evaluate all policies of interest simultaneously. This ensures that we have approximately the same number of users interacting with each policy w.r.t. time of day and weekday. This minimizes the effect of changes in the user distribution on the final user scores within that period. However, since the user distribution changes between the A/B testing experiments, we still cannot compare policy performance across A/B testing experiments. Second, we discard scores from returning users (i.e. users who have already evaluated the system once)Policy \nUser score \nDialogue length Pos. utterances Neg. utterances \n\nEvibot + Alicebot \n2.86 \u00b1 0.22 \n31.84 \u00b1 6.02 \n2.80% \u00b1 0.79 \n5.63% \u00b1 1.27 \nSupervised AMT \n2.80 \u00b1 0.21 \n34.94 \u00b1 8.07 \n4.00% \u00b1 1.05 \n8.06% \u00b1 1.38 \nSupervised Learned Reward \n2.74 \u00b1 0.21 \n27.83 \u00b1 5.05 \n2.56% \u00b1 0.70 \n6.46% \u00b1 1.29 \nOff-policy REINFORCE \n2.86 \u00b1 0.21 \n37.51 \u00b1 7.21 \n3.98% \u00b1 0.80 \n.25% \u00b1 1.28 \n\nOff-policy REINFORCE \nLearned Reward \n2.84 \u00b1 0.23 \n34.56 \u00b1 11.55 \n2.79% \u00b1 0.76 \n6.90% \u00b1 1.45 \n\nQ-learning AMT* \n3.15 \u00b1 0.20 \n30.26 \u00b1 4.64 \n3.75% \u00b1 0.93 \n5.41% \u00b1 1.16 \n\n\nOur team is called MILA Team, where MILA stands for the Montreal Institute for Learning Algorithms. 1st Proceedings of Alexa Prize (Alexa Prize 2017). arXiv:1709.02349v1 [cs.CL] 7 Sep 2017\nThroughout the semi-finals we carried out several A/B testing experiments to evaluate different variants of our system (see Section 5). The score 3.15 is based on the best performing system in the period between July 29th and August 6th, 2017. The score is not based on the leaderboard which averages the scores of all the variants of our system (including a supervised learning system and a heuristic baseline system).3  The competition rules forbid us from stating the performance of any other team.\nAn ordering of the models decides which response to return in case there are multiple priority responses.\nWe use the implementation available at: https://gist.github.com/bebraw/273706.\nRequests for telling stories is possibly a side-effect of user's interacting with bots from other teams, which often emphasized non-conversational activities, such as telling stories and playing quizzes and word games.\nSee www.omdbapi.com. This should not be confused with IMDB.8  We use the Glove embeddings trained on Wikipedia 2014 + Gigaword 5: https://nlp.stanford.edu/ projects/glove/.\nWe use the pre-trained Word2Vec embeddings: https://code.google.com/archive/p/word2vec/. 14 This model was implemented after the competition ended, but is included here for completeness.\nt ) is the scoring function, which assigns a scalar score to each response a k t given h t . The parameter \u03bb is called the temperature and controls the entropy of the distribution. The higher \u03bb is, the more uniform the selecting of actions will be. The stochastic policy can be transformed to a deterministic (greedy) policy by selecting the action with highest probability:\u03c0 greedy \u03b8 (h t ) = arg max k \u03c0 \u03b8 (a k t |h t ) = arg max k f \u03b8 (h t , a k t ).(5)Scoring Model: The action-value function Q \u03b8 (h t , a k t ) and scoring function f \u03b8 (h t , a k t ) are closely related. Both functions yield a ranking over the actions; higher values imply higher expected returns. When Q \u03b8 (h t , a k t ) = f \u03b8 (h t , a k t ), the action-value function policy in eq. (3) is equivalent to the greedy policy in eq. (5). For simplicity, we will use the same parametrization for both Q \u03b8 (h t , a k t ) and f \u03b8 (h t , a k t ). Therefore, we let both functions take the same features as input and process them using the same neural network architecture. We will refer to both functions as the scoring model.\nIn general, since some response models only output responses for certain user utterances, the number of candidate responses also changes depending on the state.16  We use the pre-trained Word2Vec embeddings: https://code.google.com/archive/p/word2vec/.\nBy ignoring dialogues without Alexa user scores, we introduce a significant bias in our reward model. In particular, it seems likely that the users who did not provide a score either found the system to be very poor or to lack particular functions/features they expected (e.g. non-conversational activities, such as playing games or taking quizzes.). A related problem arises in medical statistics, when patients undergo a treatment and, later, their outcome is not observed.\nt ) \u2212 g \u03c6 (h d t , a d t )) 2 ,(9)As before, we optimize the model parameters with stochastic gradient descent using Adam. As training this model does not depend on AMT labels, training is carried out on recorded dialogues. We train on several thousand recorded dialogue examples, where about 80% are used for training and about 20% are used as hold-out set. No regularization is used. We early stop on the squared error of the hold-out dataset w.r.t. Alexa user scores predicted by the reward model. As this scoring model was trained with a learned reward function, we call it Supervised Learned Reward. 20 This was confirmed by manual inspection of the conversation logs, where the majority of conversations had several speech recognition errors. In conversations with an excessive number of speech recognition errors (perhaps due to noisy environments), the users' utterances clearly showed frustration with the system.\nFor example, if we were to use a Gaussian distribution, we would have to at least also specify the variance parameter.\nFor the policies parametrized as action-value functions, we transform eq. (2) to eq. (4) by setting f \u03b8 = Q \u03b8 and fitting the temperature parameter \u03bb on the Off-policy REINFORCE development set.\nAcknowledgmentsWe thank Aaron Courville, Michael Noseworthy, Nicolas Angelard-Gontier, Ryan Lowe, Prasanna Parthasarathi and Peter Henderson for helpful advice related to the system architecture, crowdsourcing and reinforcement learning throughout the Alexa Prize competition. We thank Christian Droulers for building the graphical user interface for text-based chat. We thank Amazon for providing Tesla K80 GPUs through the Amazon Web Services platform. Some of the Titan X GPUs used for this research were donated by the NVIDIA Corporation. The authors acknowledge NSERC, Canada Research Chairs, CIFAR, IBM Research, Nuance Foundation, Microsoft Maluuba and Druide Informatique Inc. for funding.\nLuke, I am your father: dealing with out-of-domain requests by using movies subtitles, in 'Intelligent Virtual Agents. D Ameixa, L Coheur, P Fialho, P Quaresma, SpringerAmeixa, D., Coheur, L., Fialho, P. & Quaresma, P. (2014), Luke, I am your father: dealing with out-of-domain requests by using movies subtitles, in 'Intelligent Virtual Agents', Springer.\n\nThe philips automatic train timetable information system. H Aust, M Oerder, F Seide, V Steinbiss, Speech Communication. 173Aust, H., Oerder, M., Seide, F. & Steinbiss, V. (1995), 'The philips automatic train timetable information system', Speech Communication 17(3).\n\nS Bird, E Klein, E Loper, Natural Language Processing with Python. O'Reilly MediaBird, S., Klein, E. & Loper, E. (2009), Natural Language Processing with Python, O'Reilly Media.\n\nA convolutional neural network for modelling sentences. P Blunsom, E Grefenstette, N Kalchbrenner, Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics', Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics. the 52nd Annual Meeting of the Association for Computational Linguistics', the 52nd Annual Meeting of the Association for Computational LinguisticsBlunsom, P., Grefenstette, E. & Kalchbrenner, N. (2014), A convolutional neural network for mod- elling sentences, in 'Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics', Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics.\n\nOlympus: an open-source framework for conversational spoken language interface research. D Bohus, A Raux, T K Harris, M Eskenazi, A I Rudnicky, Proceedings of the workshop on bridging the gap: Academic and industrial research in dialog technologies. the workshop on bridging the gap: Academic and industrial research in dialog technologiesAssociation for Computational LinguisticsBohus, D., Raux, A., Harris, T. K., Eskenazi, M. & Rudnicky, A. I. (2007), Olympus: an open-source framework for conversational spoken language interface research, in 'Proceedings of the workshop on bridging the gap: Academic and industrial research in dialog technologies', Association for Computational Linguistics, pp. 32-39.\n\nBagging predictors. L Breiman, 123-140. 28Machine learning. 242Breiman, L. (1996), 'Bagging predictors', Machine learning 24(2), 123-140. 28 Obtained from: https://deron.meranda.us/data/.\n\nComparing systemresponse retrieval models for open-domain and casual conversational agent. F Charras, G D Duplessis, V Letard, A.-L Ligozat, S Rosset, Charras, F., Duplessis, G. D., Letard, V., Ligozat, A.-L. & Rosset, S. (2016), Comparing system- response retrieval models for open-domain and casual conversational agent, in 'Workshop on Chatbots and Conversational Agent Technologies'.\n\nLearning phrase representations using rnn encoder-decoder for statistical machine translation. K Cho, B Van Merrienboer, C Gulcehre, D Bahdanau, F Bougares, H Schwenk, Y Bengio, Cho, K., van Merrienboer, B., Gulcehre, C., Bahdanau, D., Bougares, F., Schwenk, H. & Bengio, Y. (2014), Learning phrase representations using rnn encoder-decoder for statistical machine translation, in 'EMNLP'.\n\nModeling a paranoid mind. K M Colby, Behavioral and Brain Sciences. 4Colby, K. M. (1981), 'Modeling a paranoid mind', Behavioral and Brain Sciences 4.\n\nBuilding watson: An overview of the deepqa project. D Ferrucci, E Brown, J Chu-Carroll, J Fan, D Gondek, A A Kalyanpur, A Lally, J W Murdock, E Nyberg, J Prager, 31AI magazineFerrucci, D., Brown, E., Chu-Carroll, J., Fan, J., Gondek, D., Kalyanpur, A. A., Lally, A., Murdock, J. W., Nyberg, E., Prager, J. et al. (2010), 'Building watson: An overview of the deepqa project', AI magazine 31(3).\n\nX Glorot, A Bordes, Y Bengio, Deep sparse rectifier neural networks, in 'Proceedings of the Fourteenth International Conference on Artificial Intelligence and Statistics. Glorot, X., Bordes, A. & Bengio, Y. (2011), Deep sparse rectifier neural networks, in 'Proceedings of the Fourteenth International Conference on Artificial Intelligence and Statistics', pp. 315-323.\n\n. J Im, Im, J. (2017). URL: http://search.aifounded.com/\n\nAlex: A statistical dialogue systems framework. F Jur\u010d\u00ed\u010dek, O Du\u0161ek, O Pl\u00e1tek, L \u017dilka, 'International Conference on Text. SpringerJur\u010d\u00ed\u010dek, F., Du\u0161ek, O., Pl\u00e1tek, O. & \u017dilka, L. (2014), Alex: A statistical dialogue systems framework, in 'International Conference on Text, Speech, and Dialogue', Springer, pp. 587-594.\n\nAdam: A method for stochastic optimization. D Kingma, J Ba, Kingma, D. & Ba, J. (2015), Adam: A method for stochastic optimization, in 'ICLR'.\n\nAuto-encoding variational Bayes. D P Kingma, M Welling, ICLRKingma, D. P. & Welling, M. (2014), 'Auto-encoding variational Bayes', ICLR .\n\nR Kiros, Y Zhu, R R Salakhutdinov, R Zemel, R Urtasun, A Torralba, S Fidler, Skip-thought vectors. Kiros, R., Zhu, Y., Salakhutdinov, R. R., Zemel, R., Urtasun, R., Torralba, A. & Fidler, S. (2015), Skip-thought vectors, in 'NIPS'.\n\nMatrix factorization techniques for recommender systems. Y Koren, R Bell, C Volinsky, Computer. 428Koren, Y., Bell, R. & Volinsky, C. (2009), 'Matrix factorization techniques for recommender systems', Computer 42(8).\n\nReinforcement learning for robots using neural networks. L.-J Lin, Carnegie-Mellon Univ Pittsburgh PA School of Computer ScienceTechnical reportLin, L.-J. (1993), Reinforcement learning for robots using neural networks, Technical report, Carnegie- Mellon Univ Pittsburgh PA School of Computer Science.\n\nHow NOT to evaluate your dialogue system: An empirical study of unsupervised evaluation metrics for dialogue response generation. C.-W Liu, R Lowe, I V Serban, M Noseworthy, L Charlin, J Pineau, arXiv:1603.08023Liu, C.-W., Lowe, R., Serban, I. V., Noseworthy, M., Charlin, L. & Pineau, J. (2016), 'How NOT to evaluate your dialogue system: An empirical study of unsupervised evaluation metrics for dialogue response generation', arXiv:1603.08023 .\n\nTowards an automatic Turing test: Learning to evaluate dialogue responses. R Lowe, M Noseworthy, I V Serban, N Angelard-Gontier, Y Bengio, J Pineau, Lowe, R., Noseworthy, M., Serban, I. V., Angelard-Gontier, N., Bengio, Y. & Pineau, J. (2017), Towards an automatic Turing test: Learning to evaluate dialogue responses, in 'ACL'.\n\nThe Ubuntu Dialogue Corpus: A Large Dataset for Research in Unstructured Multi-Turn Dialogue Systems. R Lowe, N Pow, I Serban, J Pineau, Lowe, R., Pow, N., Serban, I. & Pineau, J. (2015), The Ubuntu Dialogue Corpus: A Large Dataset for Research in Unstructured Multi-Turn Dialogue Systems, in 'SIGDIAL'.\n\nSemeval-2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment. M Marelli, L Bentivogli, M Baroni, R Bernardi, S Menini, R Zamparelli, Marelli, M., Bentivogli, L., Baroni, M., Bernardi, R., Menini, S. & Zamparelli, R. (2014), Semeval- 2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment., in 'SemEval Workshop, COLING'.\n\nDialogue management for telephone information systems. S Mcglashan, N Fraser, N Gilbert, E Bilange, P Heisterkamp, N Youd, McGlashan, S., Fraser, N., Gilbert, N., Bilange, E., Heisterkamp, P. & Youd, N. (1992), Dialogue management for telephone information systems, in 'ANLC'.\n\nT Mikolov, I Sutskever, K Chen, G S Corrado, J Dean, Distributed representations of words and phrases and their compositionality. Mikolov, T., Sutskever, I., Chen, K., Corrado, G. S. & Dean, J. (2013), Distributed representations of words and phrases and their compositionality, in 'NIPS'.\n\nPlaying atari with deep reinforcement learning. V Mnih, K Kavukcuoglu, D Silver, A Graves, I Antonoglou, D Wierstra, M Riedmiller, arXiv:1312.5602arXiv preprintMnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D. & Riedmiller, M. (2013), 'Playing atari with deep reinforcement learning', arXiv preprint arXiv:1312.5602 .\n\nRectified linear units improve restricted boltzmann machines. V Nair, G E Hinton, Proceedings of the 27th international conference on machine learning. the 27th international conference on machine learningNair, V. & Hinton, G. E. (2010), Rectified linear units improve restricted boltzmann machines, in 'Proceedings of the 27th international conference on machine learning (ICML-10)', pp. 807-814.\n\nPolicy invariance under reward transformations: Theory and application to reward shaping. A Y Ng, D Harada, S Russell, 99Ng, A. Y., Harada, D. & Russell, S. (1999), Policy invariance under reward transformations: Theory and application to reward shaping, in 'ICML', Vol. 99, pp. 278-287.\n\nMS MARCO: A Human Generated MAchine Reading COmprehension Dataset. T Nguyen, M Rosenberg, X Song, J Gao, S Tiwary, R Majumder, L Deng, arXiv:1611.09268arXiv preprintNguyen, T., Rosenberg, M., Song, X., Gao, J., Tiwary, S., Majumder, R. & Deng, L. (2016), 'MS MARCO: A Human Generated MAchine Reading COmprehension Dataset', arXiv preprint arXiv:1611.09268 .\n\nGlove: Global vectors for word representation. J Pennington, R Socher, C D Manning, EMNLP. 14Pennington, J., Socher, R. & Manning, C. D. (2014), Glove: Global vectors for word representation., in 'EMNLP', Vol. 14.\n\nEligibility traces for off-policy policy evaluation. D Precup, Computer Science Department Faculty Publication Series. Precup, D. (2000), 'Eligibility traces for off-policy policy evaluation', Computer Science Department Faculty Publication Series .\n\nOff-policy temporal-difference learning with function approximation. D Precup, R S Sutton, S Dasgupta, Precup, D., Sutton, R. S. & Dasgupta, S. (2001), Off-policy temporal-difference learning with function approximation, in 'ICML'.\n\nStochastic backpropagation and approximate inference in deep generative models. D J Rezende, S Mohamed, D Wierstra, Rezende, D. J., Mohamed, S. & Wierstra, D. (2014), Stochastic backpropagation and approximate inference in deep generative models, in 'ICML', pp. 1278-1286.\n\nA Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues. I V Serban, A Sordoni, R Lowe, L Charlin, J Pineau, A Courville, Y Bengio, Serban, I. V., Sordoni, A., Lowe, R., Charlin, L., Pineau, J., Courville, A. & Bengio, Y. (2017), A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues, in 'AAAI'.\n\nB A Shawar, E Atwell, Chatbots: are they really useful?, in 'LDV Forum. 22Shawar, B. A. & Atwell, E. (2007), Chatbots: are they really useful?, in 'LDV Forum', Vol. 22.\n\nBlack box and glass box evaluation of the sundial system. A Simpson, N M Eraser, Simpson, A. & Eraser, N. M. (1993), Black box and glass box evaluation of the sundial system, in 'Third European Conference on Speech Communication and Technology'.\n\nRecursive deep models for semantic compositionality over a sentiment treebank. R Socher, A Perelygin, J Y Wu, J Chuang, C D Manning, A Y Ng, C Potts, Proceedings of the conference on empirical methods in natural language processing. the conference on empirical methods in natural language processing16311642Socher, R., Perelygin, A., Wu, J. Y., Chuang, J., Manning, C. D., Ng, A. Y., Potts, C. et al. (2013), Recursive deep models for semantic compositionality over a sentiment treebank, in 'Proceedings of the conference on empirical methods in natural language processing (EMNLP)', Vol. 1631, p. 1642.\n\nDialogue act modeling for automatic tagging and recognition of conversational speech. A Stolcke, K Ries, N Coccaro, E Shriberg, R Bates, D Jurafsky, P Taylor, R Martin, C Van Ess-Dykema, M Meteer, 26Stolcke, A., Ries, K., Coccaro, N., Shriberg, E., Bates, R., Jurafsky, D., Taylor, P., Martin, R., Van Ess-Dykema, C. & Meteer, M. (2000), 'Dialogue act modeling for automatic tagging and recognition of conversational speech', Computational linguistics 26(3).\n\nAmazon Unveils a Listening, Talking, Music-Playing Speaker for Your Home. B Stone, S Soper, L P Bloomberg, Stone, B. & Soper, S. (2014), 'Amazon Unveils a Listening, Talking, Music-Playing Speaker for Your Home', Bloomberg L.P . Retrieved 2014-11-07.\n\nHalef: An open-source standard-compliant telephony-based modular spoken dialog system: A review and an outlook, in 'Natural language dialog systems and intelligent assistants. D Suendermann-Oeft, V Ramanarayanan, M Teckenbrock, F Neutatz, D Schmidt, SpringerSuendermann-Oeft, D., Ramanarayanan, V., Teckenbrock, M., Neutatz, F. & Schmidt, D. (2015), Halef: An open-source standard-compliant telephony-based modular spoken dialog system: A review and an outlook, in 'Natural language dialog systems and intelligent assistants', Springer.\n\nReinforcement learning: An introduction, number 1 in '1. R S Sutton, A G Barto, MIT Press CambridgeSutton, R. S. & Barto, A. G. (1998), Reinforcement learning: An introduction, number 1 in '1', MIT Press Cambridge.\n\nThe anatomy of alice', Parsing the Turing Test. R S Wallace, Wallace, R. S. (2009), 'The anatomy of alice', Parsing the Turing Test .\n\nEliza-a computer program for the study of natural language communication between man and machine. J Weizenbaum, ACM. 91Weizenbaum, J. (1966), 'Eliza-a computer program for the study of natural language communication between man and machine', ACM 9(1).\n\nAn empirical evaluation of a statistical dialog system in public use. J D Williams, Proceedings of the SIGDIAL 2011 Conference. the SIGDIAL 2011 ConferenceAssociation for Computational LinguisticsWilliams, J. D. (2011), An empirical evaluation of a statistical dialog system in public use, in 'Proceedings of the SIGDIAL 2011 Conference', Association for Computational Linguistics, pp. 130-141.\n\nIntroduction to the special issue on dialogue state tracking. J D Williams, A Raux, M Henderson, Dialogue & Discourse. 73Williams, J. D., Raux, A. & Henderson, M. (2016), 'Introduction to the special issue on dialogue state tracking', Dialogue & Discourse 7(3), 1-3.\n\nThe dialog state tracking challenge. J Williams, A Raux, D Ramachandran, A Black, Williams, J., Raux, A., Ramachandran, D. & Black, A. (2013), The dialog state tracking challenge, in 'SIGDIAL', pp. 404-413.\n\nSimple statistical gradient-following algorithms for connectionist reinforcement learning. R J Williams, Machine learning. 8Williams, R. J. (1992), 'Simple statistical gradient-following algorithms for connectionist reinforce- ment learning', Machine learning 8(3-4).\n\nGoogle's neural machine translation system: Bridging the gap between human and machine translation. Y Wu, M Schuster, Z Chen, Q V Le, M Norouzi, W Macherey, M Krikun, Y Cao, Q Gao, K Macherey, arXiv:1609.08144arXiv preprintWu, Y., Schuster, M., Chen, Z., Le, Q. V., Norouzi, M., Macherey, W., Krikun, M., Cao, Y., Gao, Q., Macherey, K. et al. (2016), 'Google's neural machine translation system: Bridging the gap between human and machine translation', arXiv preprint arXiv:1609.08144 .\n\nDeep learning for answer sentence selection. L Yu, K M Hermann, P Blunsom, S Pulman, Yu, L., Hermann, K. M., Blunsom, P. & Pulman, S. (2014), Deep learning for answer sentence selection, in 'NIPS, Workshop on Deep Learning'.\n\nStrategy and policy learning for non-taskoriented conversational systems. Z Yu, Z Xu, A W Black, A I Rudnicky, Yu, Z., Xu, Z., Black, A. W. & Rudnicky, A. I. (2016), Strategy and policy learning for non-task- oriented conversational systems., in 'SIGDIAL'.\n\nAligning books and movies: Towards story-like visual explanations by watching movies and reading books. Y Zhu, R Kiros, R Zemel, R Salakhutdinov, R Urtasun, A Torralba, S Fidler, Zhu, Y., Kiros, R., Zemel, R., Salakhutdinov, R., Urtasun, R., Torralba, A. & Fidler, S. (2015), Aligning books and movies: Towards story-like visual explanations by watching movies and reading books, in 'ICCV'.\n", "annotations": {"author": "[{\"end\":122,\"start\":41},{\"end\":208,\"start\":123},{\"end\":290,\"start\":209},{\"end\":371,\"start\":291},{\"end\":449,\"start\":372},{\"end\":535,\"start\":450},{\"end\":612,\"start\":536},{\"end\":693,\"start\":613},{\"end\":774,\"start\":694},{\"end\":856,\"start\":775},{\"end\":934,\"start\":857},{\"end\":1023,\"start\":935},{\"end\":1105,\"start\":1024},{\"end\":1185,\"start\":1106},{\"end\":1269,\"start\":1186},{\"end\":1352,\"start\":1270},{\"end\":1432,\"start\":1353},{\"end\":1512,\"start\":1433}]", "publisher": null, "author_last_name": "[{\"end\":56,\"start\":50},{\"end\":142,\"start\":136},{\"end\":224,\"start\":217},{\"end\":305,\"start\":300},{\"end\":383,\"start\":380},{\"end\":469,\"start\":458},{\"end\":546,\"start\":543},{\"end\":627,\"start\":621},{\"end\":708,\"start\":701},{\"end\":790,\"start\":788},{\"end\":868,\"start\":861},{\"end\":957,\"start\":945},{\"end\":1039,\"start\":1033},{\"end\":1119,\"start\":1112},{\"end\":1203,\"start\":1194},{\"end\":1286,\"start\":1280},{\"end\":1366,\"start\":1360},{\"end\":1446,\"start\":1440}]", "author_first_name": "[{\"end\":47,\"start\":41},{\"end\":49,\"start\":48},{\"end\":135,\"start\":123},{\"end\":216,\"start\":209},{\"end\":299,\"start\":291},{\"end\":379,\"start\":372},{\"end\":457,\"start\":450},{\"end\":542,\"start\":536},{\"end\":620,\"start\":613},{\"end\":700,\"start\":694},{\"end\":778,\"start\":775},{\"end\":787,\"start\":779},{\"end\":860,\"start\":857},{\"end\":944,\"start\":935},{\"end\":1028,\"start\":1024},{\"end\":1032,\"start\":1029},{\"end\":1111,\"start\":1106},{\"end\":1193,\"start\":1186},{\"end\":1279,\"start\":1270},{\"end\":1359,\"start\":1353},{\"end\":1439,\"start\":1433}]", "author_affiliation": "[{\"end\":121,\"start\":58},{\"end\":207,\"start\":144},{\"end\":289,\"start\":226},{\"end\":370,\"start\":307},{\"end\":448,\"start\":385},{\"end\":534,\"start\":471},{\"end\":611,\"start\":548},{\"end\":692,\"start\":629},{\"end\":773,\"start\":710},{\"end\":855,\"start\":792},{\"end\":933,\"start\":870},{\"end\":1022,\"start\":959},{\"end\":1104,\"start\":1041},{\"end\":1184,\"start\":1121},{\"end\":1268,\"start\":1205},{\"end\":1351,\"start\":1288},{\"end\":1431,\"start\":1368},{\"end\":1511,\"start\":1448}]", "title": "[{\"end\":38,\"start\":1},{\"end\":1550,\"start\":1513}]", "venue": null, "abstract": "[{\"end\":2459,\"start\":1552}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3370,\"start\":3350},{\"end\":5697,\"start\":5696},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":6238,\"start\":6222},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6250,\"start\":6238},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":6268,\"start\":6250},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6291,\"start\":6268},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":6314,\"start\":6291},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":6562,\"start\":6533},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6584,\"start\":6562},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":6603,\"start\":6584},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":6618,\"start\":6603},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8108,\"start\":8090},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":8229,\"start\":8207},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":8438,\"start\":8422},{\"end\":9431,\"start\":9430},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":10981,\"start\":10968},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":11003,\"start\":10981},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":12422,\"start\":12405},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":17023,\"start\":17006},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":19535,\"start\":19514},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":21016,\"start\":20993},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":21037,\"start\":21016},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":21110,\"start\":21090},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":21417,\"start\":21393},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":22492,\"start\":22472},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":23814,\"start\":23793},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":23885,\"start\":23866},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":25754,\"start\":25736},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":26133,\"start\":26115},{\"end\":26136,\"start\":26135},{\"end\":26410,\"start\":26408},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":26776,\"start\":26758},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":27377,\"start\":27354},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":27424,\"start\":27403},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":31684,\"start\":31664},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":32193,\"start\":32184},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":32767,\"start\":32751},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":32979,\"start\":32961},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":34864,\"start\":34843},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":36852,\"start\":36834},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":37063,\"start\":37045},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":37220,\"start\":37204},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":38132,\"start\":38111},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":38607,\"start\":38590},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":39724,\"start\":39703},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":42762,\"start\":42743},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":42779,\"start\":42762},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":42795,\"start\":42779},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":43749,\"start\":43730},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":43769,\"start\":43749},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":45324,\"start\":45307},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":46306,\"start\":46289},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":46464,\"start\":46443},{\"end\":48138,\"start\":48136},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":49992,\"start\":49974},{\"end\":54657,\"start\":54655},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":56297,\"start\":56276},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":57309,\"start\":57295},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":60713,\"start\":60699},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":60726,\"start\":60713},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":60746,\"start\":60726},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":62577,\"start\":62558},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":62999,\"start\":62979},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":63538,\"start\":63522},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":64264,\"start\":64251},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":68671,\"start\":68650},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":69340,\"start\":69319},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":71373,\"start\":71352},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":76470,\"start\":76449},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":76493,\"start\":76470},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":77198,\"start\":77181},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":77208,\"start\":77198},{\"end\":78650,\"start\":78648},{\"end\":83040,\"start\":83038},{\"end\":83129,\"start\":83127},{\"end\":88539,\"start\":88537},{\"end\":89135,\"start\":89132},{\"end\":89137,\"start\":89135}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":100411,\"start\":100368},{\"attributes\":{\"id\":\"fig_1\"},\"end\":100728,\"start\":100412},{\"attributes\":{\"id\":\"fig_2\"},\"end\":101205,\"start\":100729},{\"attributes\":{\"id\":\"fig_3\"},\"end\":101293,\"start\":101206},{\"attributes\":{\"id\":\"fig_4\"},\"end\":101386,\"start\":101294},{\"attributes\":{\"id\":\"fig_5\"},\"end\":101520,\"start\":101387},{\"attributes\":{\"id\":\"fig_6\"},\"end\":101617,\"start\":101521},{\"attributes\":{\"id\":\"fig_7\"},\"end\":101721,\"start\":101618},{\"attributes\":{\"id\":\"fig_8\"},\"end\":101887,\"start\":101722},{\"attributes\":{\"id\":\"fig_9\"},\"end\":102397,\"start\":101888},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":104339,\"start\":102398},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":104632,\"start\":104340},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":104819,\"start\":104633},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":105183,\"start\":104820},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":105998,\"start\":105184},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":107417,\"start\":105999}]", "paragraph": "[{\"end\":2976,\"start\":2475},{\"end\":5427,\"start\":2978},{\"end\":6171,\"start\":5429},{\"end\":7833,\"start\":6191},{\"end\":8439,\"start\":7835},{\"end\":9837,\"start\":8441},{\"end\":10339,\"start\":9839},{\"end\":10710,\"start\":10359},{\"end\":10808,\"start\":10736},{\"end\":11482,\"start\":10810},{\"end\":11900,\"start\":11484},{\"end\":12580,\"start\":11902},{\"end\":12613,\"start\":12582},{\"end\":12707,\"start\":12615},{\"end\":13134,\"start\":12709},{\"end\":14082,\"start\":13136},{\"end\":14625,\"start\":14084},{\"end\":15419,\"start\":14638},{\"end\":15904,\"start\":15421},{\"end\":16253,\"start\":15906},{\"end\":17420,\"start\":16297},{\"end\":18937,\"start\":17422},{\"end\":19316,\"start\":18939},{\"end\":19536,\"start\":19318},{\"end\":21726,\"start\":19538},{\"end\":21857,\"start\":21728},{\"end\":22505,\"start\":21859},{\"end\":23649,\"start\":22507},{\"end\":23917,\"start\":23651},{\"end\":24577,\"start\":23919},{\"end\":25329,\"start\":24579},{\"end\":25659,\"start\":25331},{\"end\":26704,\"start\":25661},{\"end\":27227,\"start\":26706},{\"end\":28760,\"start\":27229},{\"end\":29112,\"start\":28762},{\"end\":29656,\"start\":29152},{\"end\":30748,\"start\":29658},{\"end\":31502,\"start\":30788},{\"end\":32078,\"start\":31504},{\"end\":32343,\"start\":32080},{\"end\":33631,\"start\":32380},{\"end\":34797,\"start\":33658},{\"end\":35399,\"start\":34799},{\"end\":35553,\"start\":35423},{\"end\":36198,\"start\":35555},{\"end\":36296,\"start\":36200},{\"end\":36379,\"start\":36298},{\"end\":36677,\"start\":36428},{\"end\":37358,\"start\":36724},{\"end\":37546,\"start\":37360},{\"end\":37728,\"start\":37660},{\"end\":38034,\"start\":37747},{\"end\":38256,\"start\":38036},{\"end\":38336,\"start\":38258},{\"end\":38457,\"start\":38372},{\"end\":39036,\"start\":38496},{\"end\":39229,\"start\":39062},{\"end\":39499,\"start\":39264},{\"end\":39725,\"start\":39538},{\"end\":39740,\"start\":39727},{\"end\":39857,\"start\":39742},{\"end\":40018,\"start\":39859},{\"end\":40172,\"start\":40020},{\"end\":40364,\"start\":40174},{\"end\":40530,\"start\":40366},{\"end\":40660,\"start\":40532},{\"end\":40785,\"start\":40662},{\"end\":40872,\"start\":40787},{\"end\":41013,\"start\":40874},{\"end\":41119,\"start\":41015},{\"end\":41308,\"start\":41141},{\"end\":41428,\"start\":41310},{\"end\":41502,\"start\":41430},{\"end\":42546,\"start\":41504},{\"end\":43358,\"start\":42548},{\"end\":44544,\"start\":43381},{\"end\":44800,\"start\":44546},{\"end\":44905,\"start\":44802},{\"end\":45177,\"start\":44959},{\"end\":45685,\"start\":45179},{\"end\":45787,\"start\":45687},{\"end\":46643,\"start\":45789},{\"end\":47202,\"start\":46645},{\"end\":47816,\"start\":47204},{\"end\":49295,\"start\":47818},{\"end\":49486,\"start\":49297},{\"end\":49671,\"start\":49488},{\"end\":50306,\"start\":49708},{\"end\":52955,\"start\":50308},{\"end\":53294,\"start\":52957},{\"end\":53916,\"start\":53365},{\"end\":54184,\"start\":53918},{\"end\":54900,\"start\":54215},{\"end\":55000,\"start\":54902},{\"end\":55347,\"start\":55054},{\"end\":55519,\"start\":55349},{\"end\":55894,\"start\":55540},{\"end\":56009,\"start\":55916},{\"end\":56126,\"start\":56030},{\"end\":56298,\"start\":56144},{\"end\":56685,\"start\":56319},{\"end\":56921,\"start\":56710},{\"end\":57033,\"start\":56923},{\"end\":57194,\"start\":57035},{\"end\":57948,\"start\":57196},{\"end\":59968,\"start\":57950},{\"end\":60252,\"start\":59970},{\"end\":60608,\"start\":60312},{\"end\":60783,\"start\":60610},{\"end\":61386,\"start\":60785},{\"end\":61527,\"start\":61484},{\"end\":61597,\"start\":61596},{\"end\":61925,\"start\":61599},{\"end\":62027,\"start\":61927},{\"end\":62689,\"start\":62029},{\"end\":62752,\"start\":62751},{\"end\":62828,\"start\":62754},{\"end\":63886,\"start\":62830},{\"end\":63962,\"start\":63907},{\"end\":64068,\"start\":63986},{\"end\":64265,\"start\":64172},{\"end\":64744,\"start\":64309},{\"end\":65466,\"start\":64746},{\"end\":65708,\"start\":65520},{\"end\":65854,\"start\":65754},{\"end\":66037,\"start\":65957},{\"end\":66328,\"start\":66039},{\"end\":66847,\"start\":66330},{\"end\":68393,\"start\":66914},{\"end\":68550,\"start\":68395},{\"end\":69193,\"start\":68552},{\"end\":70478,\"start\":69195},{\"end\":70933,\"start\":70480},{\"end\":71098,\"start\":71005},{\"end\":71271,\"start\":71100},{\"end\":71374,\"start\":71273},{\"end\":72087,\"start\":71376},{\"end\":72339,\"start\":72089},{\"end\":72562,\"start\":72421},{\"end\":73146,\"start\":72564},{\"end\":73844,\"start\":73148},{\"end\":73994,\"start\":73903},{\"end\":74344,\"start\":74023},{\"end\":74400,\"start\":74346},{\"end\":76326,\"start\":74443},{\"end\":76913,\"start\":76328},{\"end\":77598,\"start\":76915},{\"end\":78314,\"start\":77600},{\"end\":78792,\"start\":78341},{\"end\":80086,\"start\":78794},{\"end\":80565,\"start\":80088},{\"end\":81976,\"start\":80567},{\"end\":82349,\"start\":81978},{\"end\":85319,\"start\":82351},{\"end\":85391,\"start\":85321},{\"end\":85533,\"start\":85419},{\"end\":87546,\"start\":85535},{\"end\":87851,\"start\":87576},{\"end\":87964,\"start\":87853},{\"end\":88481,\"start\":87966},{\"end\":88868,\"start\":88503},{\"end\":89138,\"start\":88870},{\"end\":89271,\"start\":89140},{\"end\":90466,\"start\":89273},{\"end\":90964,\"start\":90468},{\"end\":93333,\"start\":90966},{\"end\":93623,\"start\":93363},{\"end\":94491,\"start\":93625},{\"end\":94560,\"start\":94502},{\"end\":94700,\"start\":94562},{\"end\":94924,\"start\":94722},{\"end\":95458,\"start\":94926},{\"end\":96343,\"start\":95460},{\"end\":97440,\"start\":96358},{\"end\":97455,\"start\":97442},{\"end\":98769,\"start\":97475},{\"end\":99024,\"start\":98771},{\"end\":100367,\"start\":99039}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":35422,\"start\":35400},{\"attributes\":{\"id\":\"formula_1\"},\"end\":36427,\"start\":36380},{\"attributes\":{\"id\":\"formula_2\"},\"end\":36723,\"start\":36678},{\"attributes\":{\"id\":\"formula_3\"},\"end\":37639,\"start\":37547},{\"attributes\":{\"id\":\"formula_4\"},\"end\":37659,\"start\":37639},{\"attributes\":{\"id\":\"formula_5\"},\"end\":49707,\"start\":49672},{\"attributes\":{\"id\":\"formula_6\"},\"end\":54214,\"start\":54185},{\"attributes\":{\"id\":\"formula_7\"},\"end\":55053,\"start\":55001},{\"attributes\":{\"id\":\"formula_8\"},\"end\":60288,\"start\":60253},{\"attributes\":{\"id\":\"formula_9\"},\"end\":61483,\"start\":61387},{\"attributes\":{\"id\":\"formula_10\"},\"end\":61595,\"start\":61528},{\"attributes\":{\"id\":\"formula_12\"},\"end\":62750,\"start\":62690},{\"attributes\":{\"id\":\"formula_14\"},\"end\":63906,\"start\":63887},{\"attributes\":{\"id\":\"formula_15\"},\"end\":63985,\"start\":63963},{\"attributes\":{\"id\":\"formula_16\"},\"end\":64171,\"start\":64069},{\"attributes\":{\"id\":\"formula_17\"},\"end\":64308,\"start\":64266},{\"attributes\":{\"id\":\"formula_18\"},\"end\":65956,\"start\":65855},{\"attributes\":{\"id\":\"formula_19\"},\"end\":71004,\"start\":70934},{\"attributes\":{\"id\":\"formula_20\"},\"end\":72420,\"start\":72340},{\"attributes\":{\"id\":\"formula_21\"},\"end\":73902,\"start\":73845},{\"attributes\":{\"id\":\"formula_22\"},\"end\":74022,\"start\":73995},{\"attributes\":{\"id\":\"formula_23\"},\"end\":74442,\"start\":74401}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":10607,\"start\":10600},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":50984,\"start\":50977},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":78922,\"start\":78915},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":83258,\"start\":83251},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":88535,\"start\":88528},{\"end\":94295,\"start\":94288},{\"end\":94754,\"start\":94747}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2473,\"start\":2461},{\"attributes\":{\"n\":\"2\"},\"end\":6189,\"start\":6174},{\"attributes\":{\"n\":\"3\"},\"end\":10357,\"start\":10342},{\"attributes\":{\"n\":\"3.1\"},\"end\":10734,\"start\":10713},{\"end\":14636,\"start\":14628},{\"attributes\":{\"n\":\"3.2\"},\"end\":16295,\"start\":16256},{\"attributes\":{\"n\":\"3.4\"},\"end\":29150,\"start\":29115},{\"attributes\":{\"n\":\"3.5\"},\"end\":30786,\"start\":30751},{\"attributes\":{\"n\":\"3.6\"},\"end\":32378,\"start\":32346},{\"attributes\":{\"n\":\"4\"},\"end\":33656,\"start\":33634},{\"attributes\":{\"n\":\"4.1\"},\"end\":37745,\"start\":37731},{\"end\":38370,\"start\":38339},{\"end\":38494,\"start\":38460},{\"end\":39060,\"start\":39039},{\"end\":39262,\"start\":39232},{\"end\":39536,\"start\":39502},{\"end\":41139,\"start\":41122},{\"attributes\":{\"n\":\"4.2\"},\"end\":43379,\"start\":43361},{\"attributes\":{\"n\":\"4.3\"},\"end\":44957,\"start\":44908},{\"attributes\":{\"n\":\"4.4\"},\"end\":53363,\"start\":53297},{\"end\":55538,\"start\":55522},{\"end\":55914,\"start\":55897},{\"end\":56028,\"start\":56012},{\"end\":56142,\"start\":56129},{\"end\":56317,\"start\":56301},{\"end\":56708,\"start\":56688},{\"attributes\":{\"n\":\"4.5\"},\"end\":60310,\"start\":60290},{\"attributes\":{\"n\":\"4.6\"},\"end\":65518,\"start\":65469},{\"end\":65752,\"start\":65711},{\"attributes\":{\"n\":\"4.7\"},\"end\":66912,\"start\":66850},{\"attributes\":{\"n\":\"4.8\"},\"end\":78339,\"start\":78317},{\"attributes\":{\"n\":\"5\"},\"end\":85417,\"start\":85394},{\"attributes\":{\"n\":\"5.1\"},\"end\":87574,\"start\":87549},{\"end\":88501,\"start\":88484},{\"attributes\":{\"n\":\"5.2\"},\"end\":93361,\"start\":93336},{\"end\":94500,\"start\":94494},{\"end\":94720,\"start\":94703},{\"attributes\":{\"n\":\"5.3\"},\"end\":96356,\"start\":96346},{\"attributes\":{\"n\":\"6.1\"},\"end\":97473,\"start\":97458},{\"attributes\":{\"n\":\"7\"},\"end\":99037,\"start\":99027},{\"end\":100379,\"start\":100369},{\"end\":100740,\"start\":100730},{\"end\":101217,\"start\":101207},{\"end\":101305,\"start\":101295},{\"end\":101398,\"start\":101388},{\"end\":101532,\"start\":101522},{\"end\":101629,\"start\":101619},{\"end\":101733,\"start\":101723},{\"end\":101899,\"start\":101889},{\"end\":102408,\"start\":102399},{\"end\":104350,\"start\":104341},{\"end\":104830,\"start\":104821},{\"end\":105194,\"start\":105185},{\"end\":106009,\"start\":106000}]", "table": "[{\"end\":104339,\"start\":103826},{\"end\":104632,\"start\":104515},{\"end\":104819,\"start\":104798},{\"end\":105183,\"start\":104965},{\"end\":105998,\"start\":105409},{\"end\":107417,\"start\":106875}]", "figure_caption": "[{\"end\":100411,\"start\":100381},{\"end\":100728,\"start\":100414},{\"end\":101205,\"start\":100742},{\"end\":101293,\"start\":101219},{\"end\":101386,\"start\":101307},{\"end\":101520,\"start\":101400},{\"end\":101617,\"start\":101534},{\"end\":101721,\"start\":101631},{\"end\":101887,\"start\":101735},{\"end\":102397,\"start\":101901},{\"end\":103826,\"start\":102410},{\"end\":104515,\"start\":104352},{\"end\":104798,\"start\":104635},{\"end\":104965,\"start\":104832},{\"end\":105409,\"start\":105196},{\"end\":106875,\"start\":106011}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":9836,\"start\":9828},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":44543,\"start\":44535},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":47728,\"start\":47720},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":47738,\"start\":47730},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":47751,\"start\":47743},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":47791,\"start\":47783},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":51685,\"start\":51677},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":70621,\"start\":70613},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":77579,\"start\":77571},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":80132,\"start\":80124},{\"attributes\":{\"ref_id\":\"fig_9\"},\"end\":84580,\"start\":84572}]", "bib_author_first_name": "[{\"end\":112750,\"start\":112749},{\"end\":112760,\"start\":112759},{\"end\":112770,\"start\":112769},{\"end\":112780,\"start\":112779},{\"end\":113047,\"start\":113046},{\"end\":113055,\"start\":113054},{\"end\":113065,\"start\":113064},{\"end\":113074,\"start\":113073},{\"end\":113257,\"start\":113256},{\"end\":113265,\"start\":113264},{\"end\":113274,\"start\":113273},{\"end\":113492,\"start\":113491},{\"end\":113503,\"start\":113502},{\"end\":113519,\"start\":113518},{\"end\":114249,\"start\":114248},{\"end\":114258,\"start\":114257},{\"end\":114266,\"start\":114265},{\"end\":114268,\"start\":114267},{\"end\":114278,\"start\":114277},{\"end\":114290,\"start\":114289},{\"end\":114292,\"start\":114291},{\"end\":114890,\"start\":114889},{\"end\":115150,\"start\":115149},{\"end\":115161,\"start\":115160},{\"end\":115163,\"start\":115162},{\"end\":115176,\"start\":115175},{\"end\":115189,\"start\":115185},{\"end\":115200,\"start\":115199},{\"end\":115543,\"start\":115542},{\"end\":115550,\"start\":115549},{\"end\":115569,\"start\":115568},{\"end\":115581,\"start\":115580},{\"end\":115593,\"start\":115592},{\"end\":115605,\"start\":115604},{\"end\":115616,\"start\":115615},{\"end\":115865,\"start\":115864},{\"end\":115867,\"start\":115866},{\"end\":116043,\"start\":116042},{\"end\":116055,\"start\":116054},{\"end\":116064,\"start\":116063},{\"end\":116079,\"start\":116078},{\"end\":116086,\"start\":116085},{\"end\":116096,\"start\":116095},{\"end\":116098,\"start\":116097},{\"end\":116111,\"start\":116110},{\"end\":116120,\"start\":116119},{\"end\":116122,\"start\":116121},{\"end\":116133,\"start\":116132},{\"end\":116143,\"start\":116142},{\"end\":116386,\"start\":116385},{\"end\":116396,\"start\":116395},{\"end\":116406,\"start\":116405},{\"end\":116759,\"start\":116758},{\"end\":116863,\"start\":116862},{\"end\":116875,\"start\":116874},{\"end\":116884,\"start\":116883},{\"end\":116894,\"start\":116893},{\"end\":117179,\"start\":117178},{\"end\":117189,\"start\":117188},{\"end\":117312,\"start\":117311},{\"end\":117314,\"start\":117313},{\"end\":117324,\"start\":117323},{\"end\":117418,\"start\":117417},{\"end\":117427,\"start\":117426},{\"end\":117434,\"start\":117433},{\"end\":117436,\"start\":117435},{\"end\":117453,\"start\":117452},{\"end\":117462,\"start\":117461},{\"end\":117473,\"start\":117472},{\"end\":117485,\"start\":117484},{\"end\":117708,\"start\":117707},{\"end\":117717,\"start\":117716},{\"end\":117725,\"start\":117724},{\"end\":117929,\"start\":117925},{\"end\":118305,\"start\":118301},{\"end\":118312,\"start\":118311},{\"end\":118320,\"start\":118319},{\"end\":118322,\"start\":118321},{\"end\":118332,\"start\":118331},{\"end\":118346,\"start\":118345},{\"end\":118357,\"start\":118356},{\"end\":118696,\"start\":118695},{\"end\":118704,\"start\":118703},{\"end\":118718,\"start\":118717},{\"end\":118720,\"start\":118719},{\"end\":118730,\"start\":118729},{\"end\":118750,\"start\":118749},{\"end\":118760,\"start\":118759},{\"end\":119053,\"start\":119052},{\"end\":119061,\"start\":119060},{\"end\":119068,\"start\":119067},{\"end\":119078,\"start\":119077},{\"end\":119407,\"start\":119406},{\"end\":119418,\"start\":119417},{\"end\":119432,\"start\":119431},{\"end\":119442,\"start\":119441},{\"end\":119454,\"start\":119453},{\"end\":119464,\"start\":119463},{\"end\":119809,\"start\":119808},{\"end\":119822,\"start\":119821},{\"end\":119832,\"start\":119831},{\"end\":119843,\"start\":119842},{\"end\":119854,\"start\":119853},{\"end\":119869,\"start\":119868},{\"end\":120032,\"start\":120031},{\"end\":120043,\"start\":120042},{\"end\":120056,\"start\":120055},{\"end\":120064,\"start\":120063},{\"end\":120066,\"start\":120065},{\"end\":120077,\"start\":120076},{\"end\":120371,\"start\":120370},{\"end\":120379,\"start\":120378},{\"end\":120394,\"start\":120393},{\"end\":120404,\"start\":120403},{\"end\":120414,\"start\":120413},{\"end\":120428,\"start\":120427},{\"end\":120440,\"start\":120439},{\"end\":120734,\"start\":120733},{\"end\":120742,\"start\":120741},{\"end\":120744,\"start\":120743},{\"end\":121161,\"start\":121160},{\"end\":121163,\"start\":121162},{\"end\":121169,\"start\":121168},{\"end\":121179,\"start\":121178},{\"end\":121427,\"start\":121426},{\"end\":121437,\"start\":121436},{\"end\":121450,\"start\":121449},{\"end\":121458,\"start\":121457},{\"end\":121465,\"start\":121464},{\"end\":121475,\"start\":121474},{\"end\":121487,\"start\":121486},{\"end\":121766,\"start\":121765},{\"end\":121780,\"start\":121779},{\"end\":121790,\"start\":121789},{\"end\":121792,\"start\":121791},{\"end\":121987,\"start\":121986},{\"end\":122254,\"start\":122253},{\"end\":122264,\"start\":122263},{\"end\":122266,\"start\":122265},{\"end\":122276,\"start\":122275},{\"end\":122498,\"start\":122497},{\"end\":122500,\"start\":122499},{\"end\":122511,\"start\":122510},{\"end\":122522,\"start\":122521},{\"end\":122771,\"start\":122770},{\"end\":122773,\"start\":122772},{\"end\":122783,\"start\":122782},{\"end\":122794,\"start\":122793},{\"end\":122802,\"start\":122801},{\"end\":122813,\"start\":122812},{\"end\":122823,\"start\":122822},{\"end\":122836,\"start\":122835},{\"end\":123035,\"start\":123034},{\"end\":123037,\"start\":123036},{\"end\":123047,\"start\":123046},{\"end\":123263,\"start\":123262},{\"end\":123274,\"start\":123273},{\"end\":123276,\"start\":123275},{\"end\":123531,\"start\":123530},{\"end\":123541,\"start\":123540},{\"end\":123554,\"start\":123553},{\"end\":123556,\"start\":123555},{\"end\":123562,\"start\":123561},{\"end\":123572,\"start\":123571},{\"end\":123574,\"start\":123573},{\"end\":123585,\"start\":123584},{\"end\":123587,\"start\":123586},{\"end\":123593,\"start\":123592},{\"end\":124143,\"start\":124142},{\"end\":124154,\"start\":124153},{\"end\":124162,\"start\":124161},{\"end\":124173,\"start\":124172},{\"end\":124185,\"start\":124184},{\"end\":124194,\"start\":124193},{\"end\":124206,\"start\":124205},{\"end\":124216,\"start\":124215},{\"end\":124226,\"start\":124225},{\"end\":124244,\"start\":124243},{\"end\":124591,\"start\":124590},{\"end\":124600,\"start\":124599},{\"end\":124609,\"start\":124608},{\"end\":124611,\"start\":124610},{\"end\":124945,\"start\":124944},{\"end\":124965,\"start\":124964},{\"end\":124982,\"start\":124981},{\"end\":124997,\"start\":124996},{\"end\":125008,\"start\":125007},{\"end\":125364,\"start\":125363},{\"end\":125366,\"start\":125365},{\"end\":125376,\"start\":125375},{\"end\":125378,\"start\":125377},{\"end\":125571,\"start\":125570},{\"end\":125573,\"start\":125572},{\"end\":125756,\"start\":125755},{\"end\":125981,\"start\":125980},{\"end\":125983,\"start\":125982},{\"end\":126369,\"start\":126368},{\"end\":126371,\"start\":126370},{\"end\":126383,\"start\":126382},{\"end\":126391,\"start\":126390},{\"end\":126612,\"start\":126611},{\"end\":126624,\"start\":126623},{\"end\":126632,\"start\":126631},{\"end\":126648,\"start\":126647},{\"end\":126874,\"start\":126873},{\"end\":126876,\"start\":126875},{\"end\":127152,\"start\":127151},{\"end\":127158,\"start\":127157},{\"end\":127170,\"start\":127169},{\"end\":127178,\"start\":127177},{\"end\":127180,\"start\":127179},{\"end\":127186,\"start\":127185},{\"end\":127197,\"start\":127196},{\"end\":127209,\"start\":127208},{\"end\":127219,\"start\":127218},{\"end\":127226,\"start\":127225},{\"end\":127233,\"start\":127232},{\"end\":127585,\"start\":127584},{\"end\":127591,\"start\":127590},{\"end\":127593,\"start\":127592},{\"end\":127604,\"start\":127603},{\"end\":127615,\"start\":127614},{\"end\":127840,\"start\":127839},{\"end\":127846,\"start\":127845},{\"end\":127852,\"start\":127851},{\"end\":127854,\"start\":127853},{\"end\":127863,\"start\":127862},{\"end\":127865,\"start\":127864},{\"end\":128128,\"start\":128127},{\"end\":128135,\"start\":128134},{\"end\":128144,\"start\":128143},{\"end\":128153,\"start\":128152},{\"end\":128170,\"start\":128169},{\"end\":128181,\"start\":128180},{\"end\":128193,\"start\":128192}]", "bib_author_last_name": "[{\"end\":112757,\"start\":112751},{\"end\":112767,\"start\":112761},{\"end\":112777,\"start\":112771},{\"end\":112789,\"start\":112781},{\"end\":113052,\"start\":113048},{\"end\":113062,\"start\":113056},{\"end\":113071,\"start\":113066},{\"end\":113084,\"start\":113075},{\"end\":113262,\"start\":113258},{\"end\":113271,\"start\":113266},{\"end\":113280,\"start\":113275},{\"end\":113500,\"start\":113493},{\"end\":113516,\"start\":113504},{\"end\":113532,\"start\":113520},{\"end\":114255,\"start\":114250},{\"end\":114263,\"start\":114259},{\"end\":114275,\"start\":114269},{\"end\":114287,\"start\":114279},{\"end\":114301,\"start\":114293},{\"end\":114898,\"start\":114891},{\"end\":115158,\"start\":115151},{\"end\":115173,\"start\":115164},{\"end\":115183,\"start\":115177},{\"end\":115197,\"start\":115190},{\"end\":115207,\"start\":115201},{\"end\":115547,\"start\":115544},{\"end\":115566,\"start\":115551},{\"end\":115578,\"start\":115570},{\"end\":115590,\"start\":115582},{\"end\":115602,\"start\":115594},{\"end\":115613,\"start\":115606},{\"end\":115623,\"start\":115617},{\"end\":115873,\"start\":115868},{\"end\":116052,\"start\":116044},{\"end\":116061,\"start\":116056},{\"end\":116076,\"start\":116065},{\"end\":116083,\"start\":116080},{\"end\":116093,\"start\":116087},{\"end\":116108,\"start\":116099},{\"end\":116117,\"start\":116112},{\"end\":116130,\"start\":116123},{\"end\":116140,\"start\":116134},{\"end\":116150,\"start\":116144},{\"end\":116393,\"start\":116387},{\"end\":116403,\"start\":116397},{\"end\":116413,\"start\":116407},{\"end\":116762,\"start\":116760},{\"end\":116872,\"start\":116864},{\"end\":116881,\"start\":116876},{\"end\":116891,\"start\":116885},{\"end\":116900,\"start\":116895},{\"end\":117186,\"start\":117180},{\"end\":117192,\"start\":117190},{\"end\":117321,\"start\":117315},{\"end\":117332,\"start\":117325},{\"end\":117424,\"start\":117419},{\"end\":117431,\"start\":117428},{\"end\":117450,\"start\":117437},{\"end\":117459,\"start\":117454},{\"end\":117470,\"start\":117463},{\"end\":117482,\"start\":117474},{\"end\":117492,\"start\":117486},{\"end\":117714,\"start\":117709},{\"end\":117722,\"start\":117718},{\"end\":117734,\"start\":117726},{\"end\":117933,\"start\":117930},{\"end\":118309,\"start\":118306},{\"end\":118317,\"start\":118313},{\"end\":118329,\"start\":118323},{\"end\":118343,\"start\":118333},{\"end\":118354,\"start\":118347},{\"end\":118364,\"start\":118358},{\"end\":118701,\"start\":118697},{\"end\":118715,\"start\":118705},{\"end\":118727,\"start\":118721},{\"end\":118747,\"start\":118731},{\"end\":118757,\"start\":118751},{\"end\":118767,\"start\":118761},{\"end\":119058,\"start\":119054},{\"end\":119065,\"start\":119062},{\"end\":119075,\"start\":119069},{\"end\":119085,\"start\":119079},{\"end\":119415,\"start\":119408},{\"end\":119429,\"start\":119419},{\"end\":119439,\"start\":119433},{\"end\":119451,\"start\":119443},{\"end\":119461,\"start\":119455},{\"end\":119475,\"start\":119465},{\"end\":119819,\"start\":119810},{\"end\":119829,\"start\":119823},{\"end\":119840,\"start\":119833},{\"end\":119851,\"start\":119844},{\"end\":119866,\"start\":119855},{\"end\":119874,\"start\":119870},{\"end\":120040,\"start\":120033},{\"end\":120053,\"start\":120044},{\"end\":120061,\"start\":120057},{\"end\":120074,\"start\":120067},{\"end\":120082,\"start\":120078},{\"end\":120376,\"start\":120372},{\"end\":120391,\"start\":120380},{\"end\":120401,\"start\":120395},{\"end\":120411,\"start\":120405},{\"end\":120425,\"start\":120415},{\"end\":120437,\"start\":120429},{\"end\":120451,\"start\":120441},{\"end\":120739,\"start\":120735},{\"end\":120751,\"start\":120745},{\"end\":121166,\"start\":121164},{\"end\":121176,\"start\":121170},{\"end\":121187,\"start\":121180},{\"end\":121434,\"start\":121428},{\"end\":121447,\"start\":121438},{\"end\":121455,\"start\":121451},{\"end\":121462,\"start\":121459},{\"end\":121472,\"start\":121466},{\"end\":121484,\"start\":121476},{\"end\":121492,\"start\":121488},{\"end\":121777,\"start\":121767},{\"end\":121787,\"start\":121781},{\"end\":121800,\"start\":121793},{\"end\":121994,\"start\":121988},{\"end\":122261,\"start\":122255},{\"end\":122273,\"start\":122267},{\"end\":122285,\"start\":122277},{\"end\":122508,\"start\":122501},{\"end\":122519,\"start\":122512},{\"end\":122531,\"start\":122523},{\"end\":122780,\"start\":122774},{\"end\":122791,\"start\":122784},{\"end\":122799,\"start\":122795},{\"end\":122810,\"start\":122803},{\"end\":122820,\"start\":122814},{\"end\":122833,\"start\":122824},{\"end\":122843,\"start\":122837},{\"end\":123044,\"start\":123038},{\"end\":123054,\"start\":123048},{\"end\":123271,\"start\":123264},{\"end\":123283,\"start\":123277},{\"end\":123538,\"start\":123532},{\"end\":123551,\"start\":123542},{\"end\":123559,\"start\":123557},{\"end\":123569,\"start\":123563},{\"end\":123582,\"start\":123575},{\"end\":123590,\"start\":123588},{\"end\":123599,\"start\":123594},{\"end\":124151,\"start\":124144},{\"end\":124159,\"start\":124155},{\"end\":124170,\"start\":124163},{\"end\":124182,\"start\":124174},{\"end\":124191,\"start\":124186},{\"end\":124203,\"start\":124195},{\"end\":124213,\"start\":124207},{\"end\":124223,\"start\":124217},{\"end\":124241,\"start\":124227},{\"end\":124251,\"start\":124245},{\"end\":124597,\"start\":124592},{\"end\":124606,\"start\":124601},{\"end\":124621,\"start\":124612},{\"end\":124962,\"start\":124946},{\"end\":124979,\"start\":124966},{\"end\":124994,\"start\":124983},{\"end\":125005,\"start\":124998},{\"end\":125016,\"start\":125009},{\"end\":125373,\"start\":125367},{\"end\":125384,\"start\":125379},{\"end\":125581,\"start\":125574},{\"end\":125767,\"start\":125757},{\"end\":125992,\"start\":125984},{\"end\":126380,\"start\":126372},{\"end\":126388,\"start\":126384},{\"end\":126401,\"start\":126392},{\"end\":126621,\"start\":126613},{\"end\":126629,\"start\":126625},{\"end\":126645,\"start\":126633},{\"end\":126654,\"start\":126649},{\"end\":126885,\"start\":126877},{\"end\":127155,\"start\":127153},{\"end\":127167,\"start\":127159},{\"end\":127175,\"start\":127171},{\"end\":127183,\"start\":127181},{\"end\":127194,\"start\":127187},{\"end\":127206,\"start\":127198},{\"end\":127216,\"start\":127210},{\"end\":127223,\"start\":127220},{\"end\":127230,\"start\":127227},{\"end\":127242,\"start\":127234},{\"end\":127588,\"start\":127586},{\"end\":127601,\"start\":127594},{\"end\":127612,\"start\":127605},{\"end\":127622,\"start\":127616},{\"end\":127843,\"start\":127841},{\"end\":127849,\"start\":127847},{\"end\":127860,\"start\":127855},{\"end\":127874,\"start\":127866},{\"end\":128132,\"start\":128129},{\"end\":128141,\"start\":128136},{\"end\":128150,\"start\":128145},{\"end\":128167,\"start\":128154},{\"end\":128178,\"start\":128171},{\"end\":128190,\"start\":128182},{\"end\":128200,\"start\":128194}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":112986,\"start\":112630},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":3338885},\"end\":113254,\"start\":112988},{\"attributes\":{\"id\":\"b2\"},\"end\":113433,\"start\":113256},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":1306065},\"end\":114157,\"start\":113435},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":4936499},\"end\":114867,\"start\":114159},{\"attributes\":{\"doi\":\"123-140. 28\",\"id\":\"b5\",\"matched_paper_id\":47328136},\"end\":115056,\"start\":114869},{\"attributes\":{\"id\":\"b6\"},\"end\":115445,\"start\":115058},{\"attributes\":{\"id\":\"b7\"},\"end\":115836,\"start\":115447},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":145093484},\"end\":115988,\"start\":115838},{\"attributes\":{\"id\":\"b9\"},\"end\":116383,\"start\":115990},{\"attributes\":{\"id\":\"b10\"},\"end\":116754,\"start\":116385},{\"attributes\":{\"id\":\"b11\"},\"end\":116812,\"start\":116756},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":2735766},\"end\":117132,\"start\":116814},{\"attributes\":{\"id\":\"b13\"},\"end\":117276,\"start\":117134},{\"attributes\":{\"id\":\"b14\"},\"end\":117415,\"start\":117278},{\"attributes\":{\"id\":\"b15\"},\"end\":117648,\"start\":117417},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":58370896},\"end\":117866,\"start\":117650},{\"attributes\":{\"id\":\"b17\"},\"end\":118169,\"start\":117868},{\"attributes\":{\"doi\":\"arXiv:1603.08023\",\"id\":\"b18\"},\"end\":118618,\"start\":118171},{\"attributes\":{\"id\":\"b19\"},\"end\":118948,\"start\":118620},{\"attributes\":{\"id\":\"b20\"},\"end\":119253,\"start\":118950},{\"attributes\":{\"id\":\"b21\"},\"end\":119751,\"start\":119255},{\"attributes\":{\"id\":\"b22\"},\"end\":120029,\"start\":119753},{\"attributes\":{\"id\":\"b23\"},\"end\":120320,\"start\":120031},{\"attributes\":{\"doi\":\"arXiv:1312.5602\",\"id\":\"b24\"},\"end\":120669,\"start\":120322},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":15539264},\"end\":121068,\"start\":120671},{\"attributes\":{\"id\":\"b26\"},\"end\":121357,\"start\":121070},{\"attributes\":{\"doi\":\"arXiv:1611.09268\",\"id\":\"b27\"},\"end\":121716,\"start\":121359},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":1957433},\"end\":121931,\"start\":121718},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":1153355},\"end\":122182,\"start\":121933},{\"attributes\":{\"id\":\"b30\"},\"end\":122415,\"start\":122184},{\"attributes\":{\"id\":\"b31\"},\"end\":122689,\"start\":122417},{\"attributes\":{\"id\":\"b32\"},\"end\":123032,\"start\":122691},{\"attributes\":{\"id\":\"b33\"},\"end\":123202,\"start\":123034},{\"attributes\":{\"id\":\"b34\"},\"end\":123449,\"start\":123204},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":990233},\"end\":124054,\"start\":123451},{\"attributes\":{\"id\":\"b36\"},\"end\":124514,\"start\":124056},{\"attributes\":{\"id\":\"b37\"},\"end\":124766,\"start\":124516},{\"attributes\":{\"id\":\"b38\"},\"end\":125304,\"start\":124768},{\"attributes\":{\"id\":\"b39\"},\"end\":125520,\"start\":125306},{\"attributes\":{\"id\":\"b40\"},\"end\":125655,\"start\":125522},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":1896290},\"end\":125908,\"start\":125657},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":12027019},\"end\":126304,\"start\":125910},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":46014271},\"end\":126572,\"start\":126306},{\"attributes\":{\"id\":\"b44\"},\"end\":126780,\"start\":126574},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":2332513},\"end\":127049,\"start\":126782},{\"attributes\":{\"doi\":\"arXiv:1609.08144\",\"id\":\"b46\"},\"end\":127537,\"start\":127051},{\"attributes\":{\"id\":\"b47\"},\"end\":127763,\"start\":127539},{\"attributes\":{\"id\":\"b48\"},\"end\":128021,\"start\":127765},{\"attributes\":{\"id\":\"b49\"},\"end\":128413,\"start\":128023}]", "bib_title": "[{\"end\":113044,\"start\":112988},{\"end\":113489,\"start\":113435},{\"end\":114246,\"start\":114159},{\"end\":114887,\"start\":114869},{\"end\":115862,\"start\":115838},{\"end\":116860,\"start\":116814},{\"end\":117705,\"start\":117650},{\"end\":120731,\"start\":120671},{\"end\":121763,\"start\":121718},{\"end\":121984,\"start\":121933},{\"end\":123528,\"start\":123451},{\"end\":125753,\"start\":125657},{\"end\":125978,\"start\":125910},{\"end\":126366,\"start\":126306},{\"end\":126871,\"start\":126782}]", "bib_author": "[{\"end\":112759,\"start\":112749},{\"end\":112769,\"start\":112759},{\"end\":112779,\"start\":112769},{\"end\":112791,\"start\":112779},{\"end\":113054,\"start\":113046},{\"end\":113064,\"start\":113054},{\"end\":113073,\"start\":113064},{\"end\":113086,\"start\":113073},{\"end\":113264,\"start\":113256},{\"end\":113273,\"start\":113264},{\"end\":113282,\"start\":113273},{\"end\":113502,\"start\":113491},{\"end\":113518,\"start\":113502},{\"end\":113534,\"start\":113518},{\"end\":114257,\"start\":114248},{\"end\":114265,\"start\":114257},{\"end\":114277,\"start\":114265},{\"end\":114289,\"start\":114277},{\"end\":114303,\"start\":114289},{\"end\":114900,\"start\":114889},{\"end\":115160,\"start\":115149},{\"end\":115175,\"start\":115160},{\"end\":115185,\"start\":115175},{\"end\":115199,\"start\":115185},{\"end\":115209,\"start\":115199},{\"end\":115549,\"start\":115542},{\"end\":115568,\"start\":115549},{\"end\":115580,\"start\":115568},{\"end\":115592,\"start\":115580},{\"end\":115604,\"start\":115592},{\"end\":115615,\"start\":115604},{\"end\":115625,\"start\":115615},{\"end\":115875,\"start\":115864},{\"end\":116054,\"start\":116042},{\"end\":116063,\"start\":116054},{\"end\":116078,\"start\":116063},{\"end\":116085,\"start\":116078},{\"end\":116095,\"start\":116085},{\"end\":116110,\"start\":116095},{\"end\":116119,\"start\":116110},{\"end\":116132,\"start\":116119},{\"end\":116142,\"start\":116132},{\"end\":116152,\"start\":116142},{\"end\":116395,\"start\":116385},{\"end\":116405,\"start\":116395},{\"end\":116415,\"start\":116405},{\"end\":116764,\"start\":116758},{\"end\":116874,\"start\":116862},{\"end\":116883,\"start\":116874},{\"end\":116893,\"start\":116883},{\"end\":116902,\"start\":116893},{\"end\":117188,\"start\":117178},{\"end\":117194,\"start\":117188},{\"end\":117323,\"start\":117311},{\"end\":117334,\"start\":117323},{\"end\":117426,\"start\":117417},{\"end\":117433,\"start\":117426},{\"end\":117452,\"start\":117433},{\"end\":117461,\"start\":117452},{\"end\":117472,\"start\":117461},{\"end\":117484,\"start\":117472},{\"end\":117494,\"start\":117484},{\"end\":117716,\"start\":117707},{\"end\":117724,\"start\":117716},{\"end\":117736,\"start\":117724},{\"end\":117935,\"start\":117925},{\"end\":118311,\"start\":118301},{\"end\":118319,\"start\":118311},{\"end\":118331,\"start\":118319},{\"end\":118345,\"start\":118331},{\"end\":118356,\"start\":118345},{\"end\":118366,\"start\":118356},{\"end\":118703,\"start\":118695},{\"end\":118717,\"start\":118703},{\"end\":118729,\"start\":118717},{\"end\":118749,\"start\":118729},{\"end\":118759,\"start\":118749},{\"end\":118769,\"start\":118759},{\"end\":119060,\"start\":119052},{\"end\":119067,\"start\":119060},{\"end\":119077,\"start\":119067},{\"end\":119087,\"start\":119077},{\"end\":119417,\"start\":119406},{\"end\":119431,\"start\":119417},{\"end\":119441,\"start\":119431},{\"end\":119453,\"start\":119441},{\"end\":119463,\"start\":119453},{\"end\":119477,\"start\":119463},{\"end\":119821,\"start\":119808},{\"end\":119831,\"start\":119821},{\"end\":119842,\"start\":119831},{\"end\":119853,\"start\":119842},{\"end\":119868,\"start\":119853},{\"end\":119876,\"start\":119868},{\"end\":120042,\"start\":120031},{\"end\":120055,\"start\":120042},{\"end\":120063,\"start\":120055},{\"end\":120076,\"start\":120063},{\"end\":120084,\"start\":120076},{\"end\":120378,\"start\":120370},{\"end\":120393,\"start\":120378},{\"end\":120403,\"start\":120393},{\"end\":120413,\"start\":120403},{\"end\":120427,\"start\":120413},{\"end\":120439,\"start\":120427},{\"end\":120453,\"start\":120439},{\"end\":120741,\"start\":120733},{\"end\":120753,\"start\":120741},{\"end\":121168,\"start\":121160},{\"end\":121178,\"start\":121168},{\"end\":121189,\"start\":121178},{\"end\":121436,\"start\":121426},{\"end\":121449,\"start\":121436},{\"end\":121457,\"start\":121449},{\"end\":121464,\"start\":121457},{\"end\":121474,\"start\":121464},{\"end\":121486,\"start\":121474},{\"end\":121494,\"start\":121486},{\"end\":121779,\"start\":121765},{\"end\":121789,\"start\":121779},{\"end\":121802,\"start\":121789},{\"end\":121996,\"start\":121986},{\"end\":122263,\"start\":122253},{\"end\":122275,\"start\":122263},{\"end\":122287,\"start\":122275},{\"end\":122510,\"start\":122497},{\"end\":122521,\"start\":122510},{\"end\":122533,\"start\":122521},{\"end\":122782,\"start\":122770},{\"end\":122793,\"start\":122782},{\"end\":122801,\"start\":122793},{\"end\":122812,\"start\":122801},{\"end\":122822,\"start\":122812},{\"end\":122835,\"start\":122822},{\"end\":122845,\"start\":122835},{\"end\":123046,\"start\":123034},{\"end\":123056,\"start\":123046},{\"end\":123273,\"start\":123262},{\"end\":123285,\"start\":123273},{\"end\":123540,\"start\":123530},{\"end\":123553,\"start\":123540},{\"end\":123561,\"start\":123553},{\"end\":123571,\"start\":123561},{\"end\":123584,\"start\":123571},{\"end\":123592,\"start\":123584},{\"end\":123601,\"start\":123592},{\"end\":124153,\"start\":124142},{\"end\":124161,\"start\":124153},{\"end\":124172,\"start\":124161},{\"end\":124184,\"start\":124172},{\"end\":124193,\"start\":124184},{\"end\":124205,\"start\":124193},{\"end\":124215,\"start\":124205},{\"end\":124225,\"start\":124215},{\"end\":124243,\"start\":124225},{\"end\":124253,\"start\":124243},{\"end\":124599,\"start\":124590},{\"end\":124608,\"start\":124599},{\"end\":124623,\"start\":124608},{\"end\":124964,\"start\":124944},{\"end\":124981,\"start\":124964},{\"end\":124996,\"start\":124981},{\"end\":125007,\"start\":124996},{\"end\":125018,\"start\":125007},{\"end\":125375,\"start\":125363},{\"end\":125386,\"start\":125375},{\"end\":125583,\"start\":125570},{\"end\":125769,\"start\":125755},{\"end\":125994,\"start\":125980},{\"end\":126382,\"start\":126368},{\"end\":126390,\"start\":126382},{\"end\":126403,\"start\":126390},{\"end\":126623,\"start\":126611},{\"end\":126631,\"start\":126623},{\"end\":126647,\"start\":126631},{\"end\":126656,\"start\":126647},{\"end\":126887,\"start\":126873},{\"end\":127157,\"start\":127151},{\"end\":127169,\"start\":127157},{\"end\":127177,\"start\":127169},{\"end\":127185,\"start\":127177},{\"end\":127196,\"start\":127185},{\"end\":127208,\"start\":127196},{\"end\":127218,\"start\":127208},{\"end\":127225,\"start\":127218},{\"end\":127232,\"start\":127225},{\"end\":127244,\"start\":127232},{\"end\":127590,\"start\":127584},{\"end\":127603,\"start\":127590},{\"end\":127614,\"start\":127603},{\"end\":127624,\"start\":127614},{\"end\":127845,\"start\":127839},{\"end\":127851,\"start\":127845},{\"end\":127862,\"start\":127851},{\"end\":127876,\"start\":127862},{\"end\":128134,\"start\":128127},{\"end\":128143,\"start\":128134},{\"end\":128152,\"start\":128143},{\"end\":128169,\"start\":128152},{\"end\":128180,\"start\":128169},{\"end\":128192,\"start\":128180},{\"end\":128202,\"start\":128192}]", "bib_venue": "[{\"end\":112747,\"start\":112630},{\"end\":113106,\"start\":113086},{\"end\":113321,\"start\":113282},{\"end\":113711,\"start\":113534},{\"end\":114407,\"start\":114303},{\"end\":114927,\"start\":114911},{\"end\":115147,\"start\":115058},{\"end\":115540,\"start\":115447},{\"end\":115904,\"start\":115875},{\"end\":116040,\"start\":115990},{\"end\":116554,\"start\":116415},{\"end\":116935,\"start\":116902},{\"end\":117176,\"start\":117134},{\"end\":117309,\"start\":117278},{\"end\":117514,\"start\":117494},{\"end\":117744,\"start\":117736},{\"end\":117923,\"start\":117868},{\"end\":118299,\"start\":118171},{\"end\":118693,\"start\":118620},{\"end\":119050,\"start\":118950},{\"end\":119404,\"start\":119255},{\"end\":119806,\"start\":119753},{\"end\":120159,\"start\":120084},{\"end\":120368,\"start\":120322},{\"end\":120821,\"start\":120753},{\"end\":121158,\"start\":121070},{\"end\":121424,\"start\":121359},{\"end\":121807,\"start\":121802},{\"end\":122050,\"start\":121996},{\"end\":122251,\"start\":122184},{\"end\":122495,\"start\":122417},{\"end\":122768,\"start\":122691},{\"end\":123104,\"start\":123056},{\"end\":123260,\"start\":123204},{\"end\":123682,\"start\":123601},{\"end\":124140,\"start\":124056},{\"end\":124588,\"start\":124516},{\"end\":124942,\"start\":124768},{\"end\":125361,\"start\":125306},{\"end\":125568,\"start\":125522},{\"end\":125772,\"start\":125769},{\"end\":126036,\"start\":125994},{\"end\":126423,\"start\":126403},{\"end\":126609,\"start\":126574},{\"end\":126903,\"start\":126887},{\"end\":127149,\"start\":127051},{\"end\":127582,\"start\":127539},{\"end\":127837,\"start\":127765},{\"end\":128125,\"start\":128023},{\"end\":113337,\"start\":113323},{\"end\":113860,\"start\":113713},{\"end\":114498,\"start\":114409},{\"end\":120876,\"start\":120823},{\"end\":123750,\"start\":123684},{\"end\":126065,\"start\":126038}]"}}}, "year": 2023, "month": 12, "day": 17}