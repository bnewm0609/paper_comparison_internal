{"id": 84186333, "updated": "2023-10-02 03:09:53.606", "metadata": {"title": "Reachability in Vector Addition Systems is Primitive-Recursive in Fixed Dimension", "authors": "[{\"first\":\"J'erome\",\"last\":\"Leroux\",\"middle\":[]},{\"first\":\"Sylvain\",\"last\":\"Schmitz\",\"middle\":[]}]", "venue": "34th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS 2019)", "journal": null, "publication_date": {"year": 2019, "month": null, "day": null}, "abstract": "The reachability problem in vector addition systems is a central question, not only for the static verification of these systems, but also for many inter-reducible decision problems occurring in various fields. The currently best known upper bound on this problem is not primitive-recursive, even when considering systems of fixed dimension. We provide significant refinements to the classical decomposition algorithm of Mayr, Kosaraju, and Lambert and to its termination proof, which yield an ACKERMANN upper bound in the general case, and primitive-recursive upper bounds in fixed dimension. While this does not match the currently best known TOWER lower bound for reachability, it is optimal for related problems.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1903.08575", "mag": "3099076450", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/lics/LerouxS19", "doi": "10.1109/lics.2019.8785796"}}, "content": {"source": {"pdf_hash": "c103090eabfd47b0a6cc3aa32e66849322098d17", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1903.08575v1.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1903.08575", "status": "GREEN"}}, "grobid": {"id": "4d345b244ca0a4c8c28331e42f61d42e4cc5ccf0", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/c103090eabfd47b0a6cc3aa32e66849322098d17.txt", "contents": "\nPRIMITIVE-RECURSIVE IN FIXED DIMENSION\n20 Mar 2019\n\nJ\u00e9r\u00f4me Leroux \nSylvain Schmitz \nPRIMITIVE-RECURSIVE IN FIXED DIMENSION\n20 Mar 2019REACHABILITY IN VECTOR ADDITION SYSTEMS ISVector addition systemPetri netreachabilityfast-growing com- plexity\nThe reachability problem in vector addition systems is a central question, not only for the static verification of these systems, but also for many inter-reducible decision problems occurring in various fields. The currently best known upper bound on this problem is not primitive-recursive, even when considering systems of fixed dimension. We provide significant refinements to the classical decomposition algorithm of Mayr, Kosaraju, and Lambert and to its termination proof, which yield an ACKERMANN upper bound in the general case, and primitive-recursive upper bounds in fixed dimension. While this does not match the currently best known TOWER lower bound for reachability, it is optimal for related problems. q in (0, 0, 2) a 1 \u2212\u2192 q in (0, 2, 2) a 1 \u2212\u2192 q in (0, 4, 2) a 3 \u2212\u2192 q out (1, 4, 2) a 6 \u2212\u2192 q out (2, 3, 2) a 7 \u2212\u2192 q(3, 2, 0) a 8 \u2212\u2192 q(1, 1, 0) a 9 \u2212\u2192 q out (1, 1, 0)\n\nIntroduction\n\nVector addition systems with states (VASS) are basically finite state systems with vectors of integers as transition weights, as depicted in Fig. 1. Their semantics,  starting from an initial vector of natural numbers, simply adds component-wise the weights of the successive transitions, but the current values should remain nonnegative at all times on every coordinate. For instance, in the three-dimensional system of Fig. 1, is a path witnessing that q out (1, 1, 0) can be reached from q in (0, 0, 2), but for instance q(1, 1, 0) a 8 \u2212\u2192q(\u22121, 0, 0) is not a valid execution step due to the negative value in the first coordinate.\n\nVector addition systems with states are equivalent to Petri nets, and well-suited whenever one needs to model discrete resources, for instance threads in concurrent computations, molecules in chemical reactions, organisms in biological processes, etc. They are also a crucial ingredient in many algorithms. In particular, the decidability of their reachability problem [21,13,14,17] is the cornerstone of many decidability results-see for instance [28,Sec. 5] for a large sample of problems inter-reducible with VASS reachability in logic, formal languages, verification, etc.\n\nIn spite of its relevance to a wide range of problems, the complexity of the VASS reachability problem is still not well understood. Indeed, it turns out that this seemingly simple problem is both conceptually and computationally very complex.\n\nOn a conceptual level, the 1981 decidability proof by Mayr [21] was the culmination of more than a decade of research in the topic and is considered as one of the great achievements of theoretical computer science. Both Mayr's decomposition algorithm and its proof are however quite intricate. Kosaraju [13] and Lambert [14] contributed several simplifications of Mayr [21]'s original arguments and Leroux and Schmitz [18] recast the decomposition algorithm in a more abstract framework based on well-quasi-order ideals, while Leroux [17] provides a very simple algorithm with a short but non constructive proof, but none of these developments can be called 'easy' and the problem seems inherently involved.\n\nOn a computational level, on the one hand, the best known lower bound-which was from 1976 until very recently EXPSPACE-hardness [19]-is now TOWER-hardness [6]. This new lower bound puts the problem firmly in the realm of non-elementary complexity. In this realm, complexity is measured using the 'fast-growing' complexity classes (F \u03b1 ) \u03b1 from [27], which form a strict hierarchy indexed by ordinals. The already mentioned TOWER = F 3 corresponds to problems solvable in time bounded by a tower of exponentials; each F k for a finite k is primitive recursive, and ACKERMANN = F \u03c9 corresponds to problems solvable with Ackermannian resources (see Fig. 2). On the other hand, due to the intricacy of the decomposition algorithm, it eluded analysis for a long time until a 'cubic Ackermann' upper bound was obtained in [18] at level F \u03c9 3 , with a slightly improved F \u03c9 2 upper bound in [29]. Figure 2. Pinpointing F \u03c9 = ACKERMANN among the complexity classes beyond ELEMENTARY [27].\nELEMENTARY F3 = TOWER k Fk=PRIMITIVE-RECURSIVE F\u03c9 F \u03c9 2 F \u03c9 3 k F \u03c9 k = MULTIPLY-RECURSIVE\nThis leaves a gigantic gap between the known lower and upper bounds. This is however mitigated by the fact that the decomposition algorithm, on which the upper bounds were obtained, provably has a non primitive-recursive complexity. This was already observed by M\u00fcller [22], due to the algorithm's reliance on Karp and Miller trees [12]. Moreover, the full decomposition produced by the algorithm contains more information than just the existence of a reachability witness (which exists if and only if the full decomposition is not empty). For instance, Lambert [14] exploits the full decomposition to derive a pumping lemma for labelled VASS languages, Habermehl et al. [10] further show that one can compute a finite-state automaton recognising the downward-closure of a labelled VASS language with respect to the scattered subword ordering, and Czerwi\u0144ski et al. [5] show how to exploit the decomposition for deciding language boundedness properties. In particular, the result of Habermehl et al. means that one can decide, given two labelled VASS, whether an inclusion holds between the downward-closures of their languages, which is an ACKERMANN-hard problem [32]. Thus any algorithm that returns such a full decomposition must be non primitive-recursive.\n\nContributions. In this paper, we show that VASS reachability is in ACKERMANN = F \u03c9 , and more precisely in F d+4 when the dimension d of the system is fixed. This improvement over the bound F \u03c9 2 (resp. F \u03c9\u00b7(d+1) in fixed dimension) shown in [29] is obtained by analysing a decomposition algorithm similar to those of Mayr [21], Kosaraju [13], and Lambert [14]. In a nutshell, a decomposition algorithm defines both \u2022 a structure (resp. 'regular constraint graphs' for Mayr, 'generalised VASSes' for Kosaraju, and 'marked graph-transition sequences' for Lambert)-see Sec. 3-and \u2022 a condition on this structure that ensures there is an execution witnessing reachability (resp. 'consistent marking', 'property \u03b8', and 'perfectness')see Sec. 4.3.3.\n\nThe algorithms compute a decomposition by successive refinements of the structure until the condition is fulfilled, by which time the existence of an execution becomes guaranteed-see Sec. 4.\n\nWe work in this paper with a decomposition algorithm quite similar to that of Kosaraju [13], for which the reader will find good expositions for instance in [22,25,15]. We benefit however from two key insights (which in turn require significant adaptations throughout the algorithm).\n\nThe first key insight is a new termination argument for the decomposition process, based on the dimensions of the vector spaces spanned by the cycles of the structure (see Sec. 3.2). On its own, this new termination argument would already be enough to yield ACKERMANN upper bounds and primitive-recursive ones in fixed dimension.\n\nThe second key insight lies within the decomposition process itself, where we show using techniques inspired by Rackoff [24] that we can eschew the computation of Karp and Miller's coverability trees, and therefore the worst-case Ackermannian blow-up that arises from their use [3]-see Sec. 4.2.1. In itself, this new decomposition algorithm would not bring the complexity below the previous bounds, but combined with the first insight, it yields rather tight upper bounds, at level F d+4 in fixed dimension d-see Sec. 5.\n\nIn fact, the new upper bounds apply to other decision problems. As we discuss in Sec. 6, Zetzsche's ACKERMANN lower bound [32] can be refined to prove that the inclusion problem between the downward-closures of two labelled VASS languages is F d -hard in fixed dimension d \u2265 3, thus close to matching the F d+4 upper bound one obtains by applying the results of Habermehl et al. [10] to our decomposition algorithm.\n\nWe start in Sec. 2 by recalling basic definitions and notations on vector addition systems. The full proofs for the decomposition algorithm are presented in Appendices A to C.\n\n\nBackground\n\nNotations. Let N \u03c9 def = N \u228e {\u03c9} extend the set of natural numbers with an infinite element \u03c9 with n < \u03c9 for all n \u2208 N. We also use the partial order \u2291 over N \u03c9 defined by x \u2291 y if y \u2208 {x, \u03c9}.\n\nLet d \u2208 N be a dimension. The relations \u2264 and \u2291 are extended component-wise to vectors in N d \u03c9 . The components of a vector that are equal to \u03c9 intuitively denote arbitrarily large values; we call a vector in N d finite. Given a vector x \u2208 N d \u03c9 and a subset I \u2286 {1, . . . , d} of the components, we denote by x| I the vector obtained from x by replacing components not in I by \u03c9. Note that x \u2291 y implies x \u2264 y and that x \u2291 x| I for all x, y \u2208 N d \u03c9 and I \u2286 {1, . . . , d}. For instance, for d = 3, (3, 2, 1) \u2264 (4, \u03c9, 1) but (3, 2, 1) \u2291 (4, \u03c9, 1); if I = {2, 3}, then (3, 2, 1)| I = (\u03c9, 2, 1) and (4, \u03c9, 1)| I = (\u03c9, \u03c9, 1), and then (\u03c9, 2, 1) \u2291 (\u03c9, \u03c9, 1). We let 0 denote the zero vector and \u03c9 the vector with\n\u03c9(i) def = \u03c9 for all 1 \u2264 i \u2264 d. Observe that x \u2291 \u03c9 for all x \u2208 N d \u03c9 . For a vector x \u2208 N d \u03c9 ,\nits norm x is defined over its finite components as 1\u2264i\u2264d|x(i)<\u03c9 x(i) (a sum over an empty set is zero); for a vector x \u2208 Z d , we let as usual x def = 1\u2264i\u2264d |x(i)|. For instance, (3, \u03c9, 1) = 4 and (\u22124, 2, 1) = 7.\n\nVector Addition Systems. While we focus in this paper on reachability in vector addition systems with a finite set of control states, we also rely on notations for the simpler case of vector addition systems. A vector addition system (VAS) [12] of dimension d \u2208 N is a finite set A \u2286 Z d of vectors called actions. The semantics of a VAS is defined over configurations in N d \u03c9 . We associate to an action a \u2208 A the binary relation a \u2212 \u2192 over configurations by x a \u2212 \u2192 y if y = x + a, where addition is performed component-wise with the convention that \u03c9 + z = \u03c9 for every z \u2208 Z. Given a finite word \u03c3 = a 1 . . . a k \u2208 A * of actions we also define the binary relation \u03c3 \u2212 \u2192 over configurations by x \u03c3 \u2212 \u2192 y if there exists a sequence c 0 , . . . , c k of configurations such that\nx = c 0 a1 \u2212\u2192 c 1 \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 c k = y .\nThe VAS reachability problem consists in deciding given two finite configurations c in , c out in N d and a VAS A whether there exists a word \u03c3 \u2208 A * such that c in \u03c3 \u2212 \u2192 c out .\n\nVector Addition Systems with States. A vector addition system with states (VASS) [11] of dimension d \u2208 N is a triple G = (Q, q in , q out , T ) where Q is a non-empty finite set of states, q in \u2208 Q is the input state, q out \u2208 Q is the output state, and T is a finite set of transitions in Q \u00d7 Z d \u00d7 Q; A def = {a | \u2203p, q \u2208 Q . (p, a, q) \u2208 T } is the associated set of actions.\n\nExample 2.1. Figure 1 depicts the VASS G ex = (Q ex , q in , q out , T ex ) of dimension 3 where Q ex = {q in , q out , p, q} and T ex = {t 1 , t 2 , t 3 , t 4 , t 5 , t 6 , t 7 , t 8 , t 9 } with t1 = (qin , (0, 2, 0), qin ) , t2 = (qin , (2, 2, \u22121), p) ,\nt3 = (qin , (1, 0, 0), qout ) , t4 = (qin , (1, 0, \u22122), qout ) , t5 = (p, (1, 0, \u22122), qin ) , t6 = (qout , (1, \u22121, 0), qout ) , t7 = (qout , (1, \u22121, \u22122), q) , t8 = (q, (\u22122, \u22121, 0), q) , t9 = (q, (0, 0, 0), qout ) .\nWe focus on VASSes in this paper rather than VASes, because we exploit the properties of their underlying directed graphs. A path \u03c0 in a VASS G from a state p to a state q labelled by a word a 1 . . . a k of actions is a word of transitions of G of the form (p 1 , a 1 , q 1 ) . . . (p k , a k , q k ) with p 0 = p, q k = q, and q j = p j+1 for all 1 \u2264 j < k. Such a path is complete if p = q in and q = q out are the input and output states of G. A cycle on a state q is a path from q to q.\n\nExample 2.2. For instance, in Ex. 2.1, the execution presented in the introduction corresponds to the path \u03c0 ex = t 1 t 1 t 3 t 6 t 7 t 8 t 9 labelled by \u03c3 ex = a 1 a 1 a 3 a 6 a 7 a 8 a 9 , and is complete.\n\nWe write p \u2261 G q if there exists a path from p to q and a path from q to p; this defines an equivalence relation whose equivalence classes are called the strongly connected components of G. In Ex. 2.1, the strongly connected components are {q in , p} and {q, q out }. A VASS G = (Q, q in , q out , T ) is said to be strongly connected if Q is a strongly connected component of G.\n\nThe Parikh image of a path \u03c0 is the function \u03c6: T \u2192 N that maps each transition t \u2208 T to its number of occurrences in \u03c0. The displacement of a path \u03c0 labelled by a word a 1 . . . a k of actions is the vector \u2206(\u03c0) def = k j=1 a j ; note that this is equal to \u2206(\u03c6) def = t=(p,a,q)\u2208T \u03c6(t) \u00b7 a if \u03c6 is the Parikh image of \u03c0.\n\nExample 2.3. For the example path \u03c0 ex from Ex. 2.2, \u03c6 ex = (2, 0, 1, 0, 0, 1, 1, 1, 1) and \u2206(\u03c0 ex ) = (1, 1, \u22122).\n\nA state-configuration of a VASS G = (Q, q in , q out , T ) is a pair (q, x) \u2208 Q \u00d7 N d \u03c9 denoted by q(x) in the sequel. Given an action a we define the step relation a \u2212 \u2192 G over state-configurations by p(x) a \u2212 \u2192 G q(y) if (p, a, q) \u2208 T and x a \u2212 \u2192 y. By extension, given a word \u03c3 of actions \u03c3 = a 1 . . .\na k , p(x) \u03c3 \u2212 \u2192 G q(y) if there exists a sequence q 0 (c 0 ), . . . , q k (c k ) of state-configurations such that p(x) = q 0 (c 0 ) a 1 \u2212\u2192 G q 1 (c 1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (c k ) = q(y) . Notice that p(x) \u03c3 \u2212 \u2192 G q(y)\nif, and only if, there exists a path in G from p to q labelled by \u03c3 such that x \u03c3 \u2212 \u2192 y. In Ex. 2.1, q in ((0, 0, 2)) \u03c3ex \u2212\u2212\u2192 Gex q out ((1, 1, 0)). Finally, we write\np(x) * \u2212 \u2192 G q(y) if there exists \u03c3 \u2208 A * such that p(x) \u03c3 \u2212 \u2192 G q(y).\nReachability. We focus in this paper on the following decision problem.\n\nProblem: VASS reachability. input: a VASS G = (Q, q in , q out , T ) of dimension d and two finite configurations c in , c out \u2208 N d question: does q in (c in ) * \u2212 \u2192 G q out (c out ) hold?\n\nThe previously mentioned VAS reachability problem reduces to VASS reachability: given a VAS A and two finite configurations c in , c out , it suffices to consider the VASS reachability problem with input ({q}, q, q, {q} \u00d7 A \u00d7 {q}) and the same configurations c in , c out . A converse reduction is possible by encoding the states, at the expense of increasing the dimension by three [11].\n\n\nDecomposition Structures\n\nThe version of the decomposition algorithm we present in Sec. 4 proceeds globally as the ones of Mayr, Kosaraju, and Lambert, and we call the underlying structures KLM sequences after them.\n3.1. KLM Sequences. A KLM sequence \u03be of dimension d is a sequence \u03be = (x 0 G 0 y 0 )a 1 (x 1 G 1 y 1 ) . . . a k (x k G k y k )(1)\nwhere x 0 , y 0 , . . . , x k , y k are configurations, G 0 , . . . , G k are VASSes of dimension d, and a 1 , . . . , a k are actions. KLM sequences are essentially the same as Kosaraju's 'generalised VASSes' [13], except that we do not require G 0 , . . . , G k to be strongly connected.\n\nThe action language of a KLM sequence \u03be is the set L \u03be of words of actions of the form \u03c3 0 a 1 \u03c3 1 . . . a k \u03c3 k such that \u03c3 j is the label of a complete path of G j for every j, and such that there exists a sequence m 0 , n 0 , . . . , m k , n k of configurations in N d such that\nm 0 \u03c30 \u2212\u2192 n 0 a1 \u2212\u2192 \u00b7 \u00b7 \u00b7 m k \u03c3 k \u2212\u2192 n k (2) where m j \u2291 x j and n j \u2291 y j for every 0 \u2264 j \u2264 k.\nNote that the reachability problem for a VASS G and two finite configurations c in , c out \u2208 N d reduces to the non-emptiness of the action language of the KLM sequence (c in Gc out ). In fact, in that case, the action language is the set of words \u03c3 \u2208 A * such that q in (c in ) \u03c3 \u2212 \u2192 G q out (c out ). Example 3.1. In Ex. 2.1, \u03be ex = ((0, 0, 2)G ex (1, 1, 0)) is a KLM sequence with action language L \u03beex = {a 2+3n 1 a 3 a 1+4n 6 a 7 a 1+2n 8 a 9 | n \u2208 N} \u222a {a 2+3n 1 a 3 a 4n 6 a 7 a 1+2n 8 a 9 a 6 | n \u2208 N} .\n\n\nRanks and Sizes.\n\nVector Spaces. We associate to a transition t of a VASS G the vector space V G (t) \u2286 Q d spanned by the displacements of the cycles that contain t. The following lemma shows that this vector space only depends on the strongly connected components of G. Proof. Let V be the vector space spanned be the displacements of the cycles of G. Naturally, we have V G (t) \u2286 V. For the converse, let us consider a sequence \u03b8 1 , . . . , \u03b8 k of cycles such that \u03b8 j is a cycle on a state q j for every 1 \u2264 j \u2264 k, and such that \u2206(\u03b8 1 ), . . . , \u2206(\u03b8 k ) span the vector space V . Since G is strongly connected, there exists a path \u03c0 j from q j\u22121 to q j for every j \u2208 {1, . . . , k} with q 0 def = q k . Moreover, we can assume without loss of generality that t occurs in the cycle \u03b8 def = \u03c0 1 . . . \u03c0 k . Let \u03b8 \u2032 j be the cycle obtained from \u03b8 by inserting \u03b8 j in q j and formally defined as \u03b8 \u2032 j def = \u03c0 1 . . . \u03c0 j \u03b8 j \u03c0 j+1 . . . \u03c0 k . Observe that \u2206(\u03b8) and \u2206(\u03b8 \u2032 j ) are both in V G (t) since t occurs in the cycles \u03b8 and \u03b8 \u2032 j . As \u2206(\u03b8 j ) = \u2206(\u03b8 \u2032 j ) \u2212 \u2206(\u03b8), it follows that \u2206(\u03b8 j ) \u2208 V G (t). We derive that the vector space spanned by \u2206(\u03b8 1 ), . . . ,\n\u2206(\u03b8 k ) is included in V G (t). Hence V \u2286 V G (t).\nAs a corollary, if two transitions t and t \u2032 are induced by the same strongly connected component of a VASS G, then V G (t) = V G (t \u2032 ).\n\nRanks. The rank of a VASS G is the tuple rank(G) def = (r d , . . . , r 0 ) \u2208 N d+1 where r i is the number of transitions t \u2208 T such that the dimension of V G (t) is equal to i. The rank of a KLM sequence \u03be defined as (\nx 0 G 0 y 0 )a 1 (x 1 G 1 y 1 ) . . . a k (x k G k y k ) is the vector rank(\u03be) def = k j=0 rank(G j )\nwhere ranks are added component-wise. Ranks are ordered lexicographically by the relation \u2264 lex defined by (r d , . . . , r 0 ) \u2264 lex (s d , . . . , s 0 ) if they are equal or if the minimal i such that r i = s i satisfies r i < s i . Note that the linear order (N d+1 , < lex ) is well-founded, with order type \u03c9 d+1 . In Kosaraju's decomposition algorithm, the rank of a KLM sequence was defined as a multiset of triples (n j,1 , n j,2 , n j,3 ) for all 0 \u2264 j \u2264 k, with n j,1 \u2264 d, n j,2 def = |T j |, and n j,3 \u2264 2d, where the triples are ordered lexicographically and the multisets using Dershowitz and Manna multiset ordering [7]. This ranking function ranged over an order type in \u03c9 \u03c9 3 , and actually below \u03c9 \u03c9\u00b7(d+1) [29].\nExample 3.3. In Ex. 2.1, V G (t 3 ) = V G (t 4 ) = {(0, 0, 0)}, V G (t 1 ) = V G (t 2 ) = V G (t 5 ) = span((0, 2, 0), (3, 2, \u22123)) , V G (t 6 ) = V G (t 7 ) = V G (t 8 ) = V G (t 9 ) = span((\u22122, \u22121, 0), (1, \u22121, \u22122), (1, \u22121, 0)) .\nThus rank(G ex ) = (4, 3, 0, 2) = rank(\u03be ex ).\n\nSizes. The size of a VASS G = (Q, q in , q out , T ) is\n|G| def = |Q| + |T | + t\u2208T \u2206(t) .(3)\nThe size of a KLM sequence \u03be of the form (x 0 G 0 y 0 )a 1 . . . a k (x k G k y k ) is the natural number\n|\u03be| def = 2(d + 1) d+1 k + k j=1 aj + k j=0 ( xj + |Gj | + yj ) .(4)\n3.3. Characteristic System. The action language of a KLM sequence can be overapproximated thanks to a system of linear equations called its characteristic system, which we are about to define. Let us first associate to a VASS G = (Q, q in , q out , T ) a Kirchhoff system K G of linear equations such that \u03c6 \u2208 N T is a model of K G if, and only if, the following constraint holds\n1 qout \u2212 1 qin = t=(p,a,q)\u2208T \u03c6(t)(1 q \u2212 1 p ) ,(5)\nwhere 1 q : Q \u2192 {0, 1} is the characteristic function of q \u2208 Q defined by 1 q (p) def = 1 if p = q and 1 q (p) def = 0 otherwise. Let us observe that the Parikh image of a path from q in to q out in G is a model of K G .\n\nA characteristic sequence of a KLM sequence of the form \u03be = (x 0 G 0 , y 0 )a 1 . . . a k (x k , G k , y k ) where T j is the set of transitions of G j for each j is a sequence h = (m j , \u03c6 j , n j ) 0\u2264j\u2264k of triples (m j , \u03c6 j , n j ) \u2208 N d \u00d7 N Tj \u00d7 N d . We denote by h the value k j=0 m j + t\u2208Tj \u03c6 j (t) + n j . We also denote by (m h j , \u03c6 h j , n h j ) the jth triple (m j , \u03c6 j , n j ) occurring in h.\n\nThe characteristic system of \u03be is the system E \u03be of linear equations such that a characteristic sequence h = (m j , \u03c6 j , n j ) 0\u2264j\u2264k is a model of E \u03be if, and only if, the following two conditions hold:\n(1) m h j \u2291 x j , \u03c6 h j |= K Gj , n h j = m h j + \u2206(\u03c6 h j ), and n h j \u2291 y j for every 0 \u2264 j \u2264 k, and (2) n h j\u22121 a j \u2212\u2192 m h j for every 1 \u2264 j \u2264 k.\nA KLM sequence \u03be is said to be satisfiable if its characteristic system E \u03be is satisfiable. It is said to be unsatisfiable otherwise.\n\nExample 3.4. Let us consider \u03be ex = ((0, 0, 2)G ex (1, 1, 0)) from Ex. 2.1. Its characteristic system is\nm = (0, 0, 2) \u2227 n = (1, 1, 0) \u2227 n(1) = m(1) + 2\u03c6(t 2 ) + \u03c6(t 3 ) + \u03c6(t 4 ) + \u03c6(t 5 ) + \u03c6(t 6 ) + \u03c6(t 7 ) \u2212 2\u03c6(t 8 ) \u2227 n(2) = m(2) + 2\u03c6(t 1 ) + 2\u03c6(t 2 ) \u2212 \u03c6(t 6 ) \u2212 \u03c6(t 7 ) \u2212 \u03c6(t 8 ) \u2227 n(3) = m(3) \u2212 \u03c6(t 2 ) \u2212 2\u03c6(t 4 ) \u2212 2\u03c6(t 5 ) \u2212 2\u03c6(t 7 ) \u2227 \u22121 = \u2212\u03c6(t 2 ) \u2212 \u03c6(t 3 ) \u2212 \u03c6(t 4 ) + \u03c6(t 5 ) \u2227 0 = \u03c6(t 2 ) \u2212 \u03c6(t 3 ) \u2227 0 = \u03c6(t 7 ) \u2212 \u03c6(t 9 ) \u2227 1 = \u03c6(t 3 ) + \u03c6(t 4 ) \u2212 \u03c6(t 7 ) + \u03c6(t 9 ) ,\nwhere the last four equations correspond to K Gex . One can check that the tuple ((0, 0, 2), \u03c6 ex , (1, 1, 0)) is a model, where \u03c6 ex was defined in Ex. 2.3.\n\nLemma 3.5. The action language of an unsatisfiable KLM sequence is empty.\n\nProof. Assume that L \u03be contains a word \u03c3, and let us prove that E \u03be is satisfiable. As \u03c3 \u2208 L \u03be , there exists a decomposition of \u03c3 into \u03c3 0 a 1 \u03c3 1 . . . a k \u03c3 k such that \u03c3 j is the label of a complete path \u03c0 j of G j , and there exists a sequence m 0 , n 0 , . . . , m k , n k of vectors in N d with m j \u2291 x j and n j \u2291 y j for every 0 \u2264 j \u2264 k, and such that\nm 0 \u03c30 \u2212\u2192 n 0 a 1 \u2212\u2192 \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 m k \u03c3 k \u2212\u2192 n k .\nLet \u03c6 j be the Parikh image of \u03c0 j ; then the characteristic sequence (m j , \u03c6 j , n j ) 0\u2264j\u2264k is a model of E \u03be .\n\n3.4. Homogeneous Characteristic System. In the sequel, variables whose values are bounded by the characteristic system will provide a way of decomposing KLM sequences. Since E \u03be is a system of linear equations, bounded variables are characterised thanks to the homogeneous form E 0 \u03be of E \u03be , called the homogeneous characteristic system of \u03be that we are about to define.\n\nFirst, we define the homogeneous form K 0 G of the Kirchhoff system K G as the system of linear equation such that \u03c6 \u2208 N T is a model of K 0 G if, and only if, the following constraint holds\nt=(p,a,q)\u2208T \u03c6(t)(1 q \u2212 1 p ) = 0 .(6)\nThe homogenerous characteristic system E 0 \u03be is such that a sequence (m 0 , \u03c6 0 , n 0 ), . . . ,\n(m k , \u03c6 k , n k ) of triples (m j , \u03c6 j , n j ) \u2208 N d \u00d7 N Tj \u00d7 N d is a model of E 0\n\u03be if, and only if, the following two conditions hold:\n\n(1) i|xj (i) =\u03c9 m j (i) = 0, \u03c6 j |= K 0 Gj , n j = m j + \u2206(\u03c6 j ), and i|yj (i) =\u03c9 n j (i) = 0 for every 0 \u2264 j \u2264 k, and (2) n j\u22121 = m j for every 1 \u2264 j \u2264 k.\n\nExample 3.6. Let us consider \u03be ex = ((0, 0, 2)G ex (1, 1, 0)) from Ex. 2.1. Its homogeneous characteristic system is\nm = (0, 0, 0) \u2227 n = (0, 0, 0) \u2227 n(1) = m(1) + 2\u03c6(t 2 ) + \u03c6(t 3 ) + \u03c6(t 4 ) + \u03c6(t 5 ) + \u03c6(t 6 ) + \u03c6(t 7 ) \u2212 2\u03c6(t 8 ) \u2227 n(2) = m(2) + 2\u03c6(t 1 ) + 2\u03c6(t 2 ) \u2212 \u03c6(t 6 ) \u2212 \u03c6(t 7 ) \u2212 \u03c6(t 8 ) \u2227 n(3) = m(3) \u2212 \u03c6(t 2 ) \u2212 2\u03c6(t 4 ) \u2212 2\u03c6(t 5 ) \u2212 2\u03c6(t 7 ) \u2227 0 = \u2212\u03c6(t 2 ) \u2212 \u03c6(t 3 ) \u2212 \u03c6(t 4 ) + \u03c6(t 5 ) \u2227 0 = \u03c6(t 2 ) \u2212 \u03c6(t 3 ) \u2227 0 = \u03c6(t 7 ) \u2212 \u03c6(t 9 ) \u2227 0 = \u03c6(t 3 ) + \u03c6(t 4 ) \u2212 \u03c6(t 7 ) + \u03c6(t 9 ) ,\nwhere the last four equations correspond to K 0 Gex . By using classical linear algebra results [e.g., 23, Thm. 1], in Appendix B we prove the following characterisation of the bounded variables of E \u03be .\nLemma 3.7. Assume that \u03be = (x 0 G 0 y 0 )a 1 . . . (x k G k y k ) is satisfiable. Then for every 0 \u2264 j \u2264 k we have: \u2022 For every 1 \u2264 i \u2264 d, the set of values m h j (i) where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that m h0 j (i) > 0. \u2022 For every t \u2208 T j , the set of values \u03c6 h j (t) where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that \u03c6 h0 j (t) > 0. \u2022 For every 1 \u2264 i \u2264 d, the set of values n h j (i) where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that n h0 j (i) > 0.\nMoreover, the sum of the bounded values of E \u03be is bounded by |\u03be| |\u03be|\u22121 .\n\n\nThe Decomposition Algorithm\n\nLet us give an overview of the decomposition algorithm. Given an instance (G, c in , c out ) of the VASS reachability problem, the algorithm takes as input the KLM sequence \u03be 0 def = (c in Gc out ). In an initialisation phase, the algorithm computes a finite set clean(\u03be 0 ) of so-called clean KLM sequences (see Lem. 4.17) such that L \u03be0 = \u03be \u2032 0 \u2208clean(\u03be0) L \u03be \u2032 0 . At each step of the algorithm, given a clean KLM sequence \u03be,\n\n\u2022 either \u03be is normal, which is a condition that ensures that the action language L \u03be is non-empty (see Lem. 4.19), \u2022 or we can perform a decomposition step as per Lem. 4.18, which produces a finite (possibly empty) set dec(\u03be) of clean KLM sequences such that rank(\u03be \u2032 ) < lex rank(\u03be) for all \u03be \u2032 \u2208 dec(\u03be) and\nL \u03be = \u03be \u2032 \u2208dec(\u03be) L \u03be \u2032 .\nBoth the initialisation and the decomposition steps are the results of elementary steps presented in Sec. 4.1 and aiming to enforce various properties on KLM sequences. By repeatedly applying decomposition steps, the decomposition algorithm explores a decomposition forest labelled with clean KLM sequences, where the roots are labelled by the elements \u03be \u2032 0 \u2208 clean(\u03be 0 ), and where each node labelled by a non-normal KLM sequence \u03be has a child labelled \u03be \u2032 for each \u03be \u2032 \u2208 dec(\u03be). A decomposition forest has finitely many roots, finite branching degree, and, because the ranks decrease strictly along the branches and (N d , < lex ) is well-founded, it has finite branches. A decomposition forest is thus finite by K\u0151nig's Lemma, and the algorithm terminates.\n\nNote that, in order to answer the VASS reachability problem, we only need to explore a decomposition forest nondeterministically in search of a leaf labelled by a normal KLM sequence. However, a full decomposition fdec(\u03be 0 ), which we define as the set of all the normal KLM sequences in a decomposition forest for \u03be 0 , is computable, and such that\nL \u03be0 = \u03be \u2032 \u2208fdec(\u03be0) L \u03be \u2032 .(7)\nRemark 4.1. Note that decomposition steps are not deterministic, meaning that there might be several choices of sets dec(\u03be) for each \u03be. Thus there might be several decomposition forests for a KLM sequence \u03be 0 . This does not impact the correctness of the algorithm; in fact, we know from [18] that all the full decompositions one can obtain actually denote the same canonical ideal decomposition.\n\n\nElementary Decomposition\n\nSteps. As will be further explained in Sec. 4 \n4.1.1. Strongly Connected KLM Sequences. A KLM sequence \u03be = (x 0 G 0 y 0 )a 1 . . . a k (x k G k y k ) is said to be strongly connected if the VASSes G 0 , . . . , G k occurring in \u03be are strongly connected. Lemma 4.2.\nFor any KLM sequence \u03be that is not strongly connected, we can compute in time exp(|\u03be|) a finite set \u039e of strongly connected KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 and such that rank(\u03be \u2032 ) < lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| for every \u03be \u2032 \u2208 \u039e.\n\nProof. We just replace every triple (xGy) occurring in \u03be where G = (Q, q in , q out , T ) is a non strongly connected VASS by all the possible sequences (xG 0 \u03c9)a 1 . . . (\u03c9G n y)\nq in p qout q a1=(0, 2, 0) a2=(2, 2, \u22121) a5=(1, 0, \u22122) a6=(1, \u22121, 0) a7=(1, \u22121, \u22122) a9=(0, 0, 0) a8=(\u22122, \u22121, 0) Figure 3. The strongly connected VASSes G 1 ex (left) and G 2 ex (right). where n \u2265 1, G j = (Q j , r j , s j , T j ) is such that Q 0 , . . . , Q n are distinct strongly con- nected components of G, T j def = T \u2229 (Q j \u00d7 Z d \u00d7 Q j ) for every 0 \u2264 j \u2264 n, r 0 def = q in , s n def = q out , and (s j\u22121 , a j , r j ) is a transition in T for every 1 \u2264 j \u2264 n.\nWe obtain that way a finite set \u039e of strongly connected KLM sequences satisfying the lemma. In particular, regarding sizes, observe that\n|(xG 0 \u03c9)a 1 . . . (\u03c9G n y)| = 2(d + 1) d+1 ( x + y + (n + n j=1 a j + n j=0 |G j |)) \u2264 2(d + 1) d+1 ( x + y + |G|). Example 4.3. Consider again the VASS G ex of Ex. 2.1 and the KLM sequence \u03be ex = ((0, 0, 2)G ex (1, 1, 0)). The decomposition into strongly connected KLM sequences yields a set {\u03be 1 ex , \u03be 2 ex } where \u03be 1 ex def = ((0, 0, 2)G 1 ex (\u03c9, \u03c9, \u03c9))a 3 ((\u03c9, \u03c9, \u03c9)G 2 ex (1, 1, 0)) , \u03be 2 ex def = ((0, 0, 2)G 1 ex (\u03c9, \u03c9, \u03c9))a 4 ((\u03c9, \u03c9, \u03c9)G 2 ex (1, 1, 0)) , where G 1 ex and G 2 ex are displayed in Fig. 3. 4.1.2. Saturated KLM Sequences. A KLM sequence \u03be = (x 0 G 0 y 0 )a 1 . . . a k (x k G k y k )\nis said to be saturated if for every 0 \u2264 j \u2264 k and for every i \u2208 {1, . . . , d} the following two conditions hold:\n(1) if x j (i) = \u03c9, then the set of values m h j (i) where h is a model of E \u03be is unbounded, and (2) if y j (i) = \u03c9, then the set of values n h j (i) where h is a model of E \u03be is unbounded. Saturation corresponds essentially to Kosaraju's property \u03b81(b).\nLemma 4.4. From any strongly connected KLM sequence \u03be, we can compute in time exp(|\u03be| |\u03be| ) a finite set \u039e of saturated strongly connected KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 , and such that rank(\u03be \u2032 ) \u2264 lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| |\u03be| for every \u03be \u2032 \u2208 \u039e.\n\nProof. Thanks to Lem. 3.7, we can saturate a KLM sequence. In fact, we just have to replace some \u03c9 components by all the possible bounded values \u2264 |\u03be| |\u03be|\u22121 given by the characteristic system E \u03be for the variables m j , n j . \n\u03be 3 ex def = ((0, 0, 2)G 1 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 2 ex (1, 1, 0)) , \u03be 4 ex def = ((0, 0, 2)G 1 ex (0, \u03c9, 2))a 4 ((0, \u03c9, 0)G 2 ex (1, 1, 0)) . 4.1.3. Unbounded KLM Sequences. Consider a KLM sequence \u03be of form (x 0 G 0 y 0 )a 1 . . . a k (x k G k y k ), where T j denotes the set of transitions of G j . Observe that, if a transition t in T j is such that the set of values \u03c6 h j (t)\nwhere h ranges over the models of the characteristic system E \u03be of \u03be is bounded by some value B, then the number of times a word \u03c3 \u2208 L \u03be can use the transition t is bounded by B. It means that the VASS G j can be replaced by at most B copies of itself without the transition t, joined using the action \u2206(t) of t, while preserving the language L \u03be .\n\nFormally, in such a situation, we define T \u2032 j as the set of transitions t \u2208 T j such that the set of values \u03c6 h j (t) is unbounded. A KLM sequence \u03be is said to be unbounded if T \u2032 j = T j for every 0 \u2264 j \u2264 k, and otherwise to be bounded. Unboundedness corresponds essentially to Kosaraju's property \u03b81(a), but here we also need to show that the ranks decrease when performing this decomposition.\n\nLemma 4.6. Whether a KLM sequence \u03be is unbounded is in NP. Moreover, if \u03be is strongly connected and bounded, we can compute in time exp(|\u03be| |\u03be| ) a finite set \u039e of KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 and such that rank(\u03be \u2032 ) < lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| |\u03be| for every \u03be \u2032 \u2208 \u039e.\nProof. Let T \u2032 j be the set of transitions t \u2208 T j such that the set \u03c6 h j (t) where h is a model of E \u03be is unbounded. Let us introduce the VASS G \u2032 j obtained from G j by replacing T j by T \u2032 j .\nLet V j be the vector space spanned by the displacements of the cycles of G j , and let V \u2032 j be the vector space generated by the displacements of the cycles of\nG \u2032 j . Since T \u2032 j \u2286 T j , naturally V \u2032 j \u2286 V j . We are going to prove that if V \u2032 j = V j then T \u2032 j = T j . Claim 4.7. Assume that E \u03be is satisfiable. For every j, if V \u2032 j = V j then T \u2032 j = T j . Proof of Claim 4.7.\nLet us consider j \u2208 {0, . . . , k} such that V \u2032 j = V j and let us prove that T \u2032 j = T j . By summing up a finite number of solutions of E 0 \u03be (one for each transition t \u2208 T \u2032 j ), Lem. 3.7 shows that there exists a solution h 0 of E 0 \u03be such that \u03c6 h0 j (t) > 0 for every t \u2208 T \u2032 j . Let us consider a cycle of G j that contains all the transitions of T j ; such a cycle exists since G j is strongly connected. We denote by \u03c8 the Parikh image of that cycle. Notice that \u2206(\u03c8) \u2208 V j ; since V j = V \u2032 j , there exists a sequence \u03b8 1 , . . . , \u03b8 s of cycles of G \u2032 j , and a sequence \u03bb 1 , . . . , \u03bb s of rational numbers such that\n\u2206(\u03c8) = s r=1 \u03bb r \u2206(\u03c6 r ), where \u03c6 r is the Parikh image of \u03b8 r . Let p > 0 be a natural number such that p\u03bb r \u2208 Z for every r. Since \u03c6 h0 j (t) > 0 for every t \u2208 T \u2032 j , there exists q \u2208 N such that p\u03bb r \u03c6 r \u2264 q\u03c6 h0 j for every r. It follows that \u03c6 \u2032 r def = q\u03c6 h0 j \u2212 p\u03bb r \u03c6 r maps every t \u2208 T j \\ T \u2032 j to zero. Let \u03c6 \u2032 be the mapping p\u03c8 + s r=1 \u03c6 \u2032 r . We deduce that \u2206(\u03c6 \u2032 ) = \u2206(qs\u03c6 h0 j ) = qsn h0 j \u2212 qsm h0 j (8) since h 0 is a model of E 0 \u03be . It follows that the sequence h \u2032 0 obtained from qsh 0 by replacing the jth tuple by (qsm h0 j , \u03c6 \u2032 , qsn h0 j ) is a model of E 0 \u03be . Notice that \u03c6 h \u2032 0 j (t) = \u03c6 \u2032 (t) \u2265 p\u03c8(t) \u2265 1 for every t \u2208 T j . Lem. 3.7 shows that T j \u2286 T \u2032 j . Hence T \u2032 j = T j .\nLet us return to the proof of Lem. 4.6. First observe that we can decide in nondeterministic polynomial time whether E \u03be is satisfiable. If it is not the case, then L \u03be is empty and we can return the empty set. Otherwise, Lem. 3.7 shows that\nq in qout q q \u2032 out qout q a1=(0, 2, 0) a6=(1, \u22121, 0) a7=(1, \u22121, \u22122) a8=(\u22122, \u22121, 0) a9=(0, 0, 0) a6=(1, \u22121, 0) a6=(1, \u22121, 0) a8=(\u22122, \u22121, 0) Figure 4. The VASSes G 3 ex (left), G 4 ex (middle), and G 5 ex (right). qout q a6=(1, \u22121, 0) a8=(\u22122, \u22121, 0) Figure 5. The VASSes G 6 ex (left) and G 7 ex (right).\nthe sets T \u2032 1 , . . . , T \u2032 j are computable in polynomial time. If T \u2032 j = T j for every j, then \u03be is unbounded. Otherwise, \u03be is bounded, and there exists j such that T \u2032 j is strictly included in T j . Lemma 3.7 shows that a word \u03c3 \u2208 L \u03be cannot use a transition in T j \\T \u2032 j more than |\u03be| |\u03be|\u22121 times. It follows that we can replace the triple x j G j y j in \u03be by a triple where the transitions in T j \\ T \u2032 j are taken at most |\u03be| |\u03be|\u22121 times the VASS G \u2032 j . Hence |\u03be \u2032 | \u2264 |\u03be| |\u03be| . Since G j is strongly connected, Claim 4.7 shows that the KLM sequences \u03be \u2032 obtained that way satisfy rank(\u03be \u2032 ) < lex rank(\u03be).   1, 0)) , where G 6 ex and G 7 ex are shown in Fig. 5. The KLM sequence \u03be 6 ex is unsatisfiable, thus by Lem. 3.5, it can be discarded.\n\u03be 5 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 4 ex (1, 1, 0)) , \u03be 6 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 4 ((0, \u03c9, 0)G 5 ex (1, 1, 0)) , where G 3 ex , G 4 ex ,= ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (\u03c9, \u03c9, 0))a 9 ((\u03c9, \u03c9, 0)G 6 ex (1,4.2. Rigid KLM Sequences. A component i is said to be fixed by a VASS G = (Q, q in , q out , T ) if there exists a function f i : Q \u2192 N such that f i (q) = f i (p) + a(i)\nfor every transition (p, a, q) \u2208 T . Notice that we can compute in polynomial time the set of fixed components of G, and given such a component i, we can compute in polynomial time a function f i :\nQ \u2192 N such that f i (q) = f i (p) + a(i) for every transition (p, a, q) \u2208 T .\nA KLM sequence xGy where G = (Q, q in , q out , T ) is a VASS is said to be rigid if for every component i that is fixed by G there exists a function g i : Q \u2192 N such that g i (q) = g i (p) + a(i) for every transition (p, a, q) \u2208 T , and such\nthat g i (q in ) \u2291 x(i) and g i (q out ) \u2291 y(i). More generally, a KLM sequence \u03be = (x 0 G 0 y 0 )a 1 . . . a k (x k G k y k ) is said to be rigid if x j G j y j is rigid for every 0 \u2264 j \u2264 k.\nRigidity corresponds essentially to the rigid components introduced by Kosaraju.\n\nLemma 4.9. From any strongly connected KLM sequence \u03be, we can decide in time poly(|\u03be|) whether \u03be is not rigid. Moreover, in that case we can compute in time poly(|\u03be|) a KLM sequence \u03be \u2032 such that L \u03be = L \u03be \u2032 , rank(\u03be \u2032 ) < lex rank(\u03be), and |\u03be \u2032 | \u2264 |\u03be|.\n\nProof. Let us assume that \u03be is the KLM sequence xGy where G = (Q, q in , q out , T ) is strongly connected (the general case can be obtained the same way). We can compute in polynomial time by a straightforward constant propagation algorithm the set I of components that are fixed by G and for every i \u2208 I a function f i :\nQ \u2192 N such that f i (q) = f i (p) + a(i) for every transition (p, a, q) \u2208 T .\nClaim 4.10. \u03be is rigid if and only if the following three conditions hold for every i \u2208 I and for every q \u2208 Q:\n(i) y(i) \u2212 f i (q out ) = x(i) \u2212 f i (q in ) if x(i), y(i) \u2208 N, (ii) x(i) \u2212 f i (q in ) + f i (q) \u2265 0 if x(i) \u2208 N, and (iii) y(i) \u2212 f i (q out ) + f i (q) \u2265 0 if y(i) \u2208 N.\nProof of Claim 4.10. Assume first that \u03be is rigid. In that case, for every i \u2208 I there exists a function g i :\nQ \u2192 N such that g i (q) = g i (p) + a(i) for every transition (p, a, q) \u2208 T and such that g i (q in ) \u2291 x(i) and g i (q out ) \u2291 y(i). Since G is strongly connected, it follows that there exists an integer z i \u2208 Z such that g i (q) = z i + f i (q)\nfor every q \u2208 Q. This equality in q in and q out provides\nz i = x(i)\u2212f i (q in ) if x(i) \u2208 N and z i = y(i) \u2212 f i (q out ) if y(i) \u2208 N.\nWe deduce that conditions (i), (ii), and (iii) hold.\n\nConversely, assume that these conditions hold and let us prove that \u03be is rigid. Let i \u2208 I and let us prove that there exists a function g i : Q \u2192 N such that g i (q) = g i (p) + a(i) for every transition (p, a, q) \u2208 T and such that g i (q in ) \u2291 x(i) and g i (q out ) \u2291 y(i). If x(i) = \u03c9 and y(i) = \u03c9, notice that g i def = f i fullfills the required conditions. If x(i) \u2208 N, then condition (i) shows that we define g i : Q \u2192 N by\ng i (q) def = x(i) \u2212 f i (q in ) + f i (q).\nNotice that for every transition (p, a, q) \u2208 T , we have g i (q) = g i (p) + a(i). Observe that g i (q in ) = x(i). Let us show that g i (q out ) \u2291 y(i). If y(i) = \u03c9, the relation is immediate. Otherwise, by condition (i), we get g i (q out ) = y(i). We have proved that g i fullfills the required conditions. Symmetrically, we obtain the case y(i) \u2208 N and x(i) \u2208 N \u03c9 . We have shown that \u03be is rigid.\n\nBy Claim 4.10, we can decide in polynomial time whether \u03be is rigid. Moreover, if \u03be is not rigid, we can compute in polynomial time both i \u2208 I and q \u2208 Q such that one of the three conditions (i), (ii), and (iii) does not hold. If condition (i) does not hold, then \u03be cannot be satisfiable, and in particular L \u03be = \u2205. Thus we can consider for \u03be \u2032 the KLM sequence obtained from \u03be by removing all the transitions and all the states except q in and q out .\n\nOtherwise, if condition (i) holds, then either (ii) or (iii) does not hold. Since (i) holds, it follows that q \u2208 {q in , q out }. Let us show that\nL \u03be = L \u03be \u2032 where \u03be \u2032 def = xG \u2032 y and G \u2032 def = (Q \u2032 , q in , q out , T \u2032 ), Q \u2032 def = Q\\{q}, T \u2032 def = T \u2229 (Q \u2032 \u00d7 Z d \u00d7 Q \u2032 ).\nTo prove this inclusion, let us consider any \u03c3 \u2208 L \u03be . There exists two configurations m and n and a word \u03c3 = a 1 . . . a k of actions such that q in (m) \u03c3 \u2212 \u2192 G q out (n). Thus there exists a sequence q 0 (c 0 ), . . . , q k (c k ) of state-configurations such that\nq in (m) = q 0 (c 0 ) a1 \u2212\u2192 G \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (c k ) = q out (n) .(9)\nObserve that if x(i) \u2208 N, then c 0 (i) = x(i) and by induction we get\nx(i) \u2212 f i (q in ) + f i (q j ) = c j (i) \u2265 0 for every 0 \u2264 j \u2264 k. Symmetrically, if y(i) \u2208 N, then y(i) \u2212 f i (q out ) + f i (q j ) = c j (i) \u2265 0 for every 0 \u2264 j \u2264 k.\nThus q \u2208 {q 0 , . . . , q k } and in particular \u03c3 \u2208 L \u03be \u2032 . \nFacc G (x)(i) def = \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 \u03c9 if \u2203x \u2032 \u2265 x with x \u2032 (i) > x(i) s.t. q in (x) * \u2212 \u2192 G q in (x \u2032 ) x(i) otherwise Bacc G (y)(i) def = \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 \u03c9 if \u2203y \u2032 \u2265 y with y \u2032 (i) > y(i) s.t. q out (y \u2032 ) * \u2212 \u2192 G q out (y) y(i) otherwise\nObserve that Facc G (x)(i) = x(i) and Bacc G (y)(i) = y(i) for every component i fixed by G. A triple (xGy) is said to be pumpable if Facc G (x)(i) = \u03c9 and Bacc G (y)(i) = \u03c9 for every component i not fixed by G. More generally, a KLM sequence \u03be = (x 0 G 0 y 0 )a 1 (x 1 G 1 y 1 ) . . . a k (x k G k y k ) is said to be pumpable if (x j G j y j ) is pumpable for every 0 \u2264 j \u2264 k, and otherwise to be unpumpable.\n\nRemark 4.11. Pumpability, rigidity, and saturation together correspond essentially to Kosaraju's property \u03b82. In fact, we show in Appendix C.2 that if a KLM sequence xGy is pumpable, rigid, and saturated, then there exists a function f : Q \u2192 N d \u03c9 such that f (q) = f (p) + a for every (p, a, q) \u2208 T , and such that f (q in ) = Facc G (x) and f (q out ) = Bacc G (y).\n\nExample 4.12. The KLM sequence \u03be 7 ex from Ex. 4.8 is unpumpable: indeed, in the triple ((\u03c9, \u03c9, 0)G 6 ex (1, 1, 0)), the components 1 and 2 are not fixed, but we find Bacc G 6 ex ((1, 1, 0))(1) = Bacc G 6 ex ((1, 1, 0))(2) = 1. Deciding Pumpability. Observe that Facc G (x) and Bacc G (y) are computable by performing 2d calls to an oracle for the coverability problem [see, e.g., 16,Lem. 3.3]. By the results of Rackoff [24], we can therefore decide in exponential space whether a KLM sequence \u03be is pumpable.\n\nUnfolding. When a KLM sequence \u03be is unpumpable, there is a triple (xGy) and a component i not fixed by G such that Facc G (x)(i) < \u03c9 or Bacc G (y)(i) < \u03c9. Assume that we are in the former case. If \u03be is strongly connected, then there exists a finite B \u2208 N such that Facc G (x)(i) = B, and the idea is then to unfold G by tracking the value of the ith component in the control state. Classically, such a bound B is computed by constructing a Karp and Miller coverability tree, but this has a worst-case Ackermannian complexity [3]. Thus the decomposition algorithms of Mayr, Kosaraju, and Lambert might use an Ackermannian time in their very first decomposition step.\n\nHere, we refine this decomposition step using insights from Rackoff's results in [24]. We show that, if there is a component i not fixed by G such that Facc G (x)(i) < \u03c9, then there exists a component i \u2032 not fixed by G and such that a double exponential B suffices. Formally, let N B def = {0, . . . , B \u2212 1, \u03c9}. Consider any i \u2208 {1, . . . , d}, r \u2208 N B , and x(i) \u2208 N B ; the forward (i, B, r)-unfolding of a KLM triple xGy is the KLM triple xG \u2032 y where G \u2032 def = (Q \u00d7 N B , (q in , x(i)), (q out , r), T \u2032 ) and T \u2032 is the set of transitions ((p, m), a, (q, n)) where (p, a, q) \u2208 T and m, n \u2208 N B satisfy n = m + a(i) or (n = \u03c9 \u2227 m + a(i) \u2265 B), and such that m = \u03c9 implies q = q in . (The backward (i, B, r)-unfolding is defined symmetrically.) We show the following in Appendix A.\n\nLemma 4.13. Let \u03be = xGy be a KLM sequence and let I be the set of components i \u2208 {1, . . . , d} that are not fixed by G and such that Facc G (x)(i) < \u03c9. If I is not empty, then there exists i \u2208 I such that L \u03be = r\u2208NB L \u03ber where \u03be r is the forward\n(i, B, r)-unfolding of \u03be and B def = ( x + 2|G|) 1+d d .\nOf course, we also require that unfolding xGy decreases the rank. The condition that m = \u03c9 must imply q = q in in the unfolding is central for the proof of the following lemma.\n\nLemma 4.14. Let \u03be = xGy be a strongly connected KLM sequence and let i be a component not fixed by G and such that x(i) \u2208 N B for some B \u2208 N. Then the (i, B, r)-unfolding \u03be \u2032 of \u03be satisfies rank(\u03be \u2032 ) < lex rank(\u03be) for all r \u2208 N B .\n\nProof. Assume that G = (Q, q in , q out , T ) and let \u03be \u2032 = xG \u2032 y be the (i, B, r)-unfolding of G where G \u2032 = (Q \u00d7 N B , (q in , x(i)), (q out , r), T \u2032 ). Let V be the vector space generated by the displacements of the cycles of G. As G is strongly connected, Lem. 3.2 shows that V G (t) = V for every transition t in T .\n\nObserve that since i is not fixed by G, it means that there exists a vector v \u2208 V such that v(i) = 0. In particular the dimension of V is larger than or equal to one.\n\nLet us observe that every cycle of G \u2032 labelled by a word \u03c3 corresponds (by projecting on the first component of its control states) to a cycle of G also labelled by \u03c3. It follows that the displacement of every cycle of G \u2032 is in V , therefore V G \u2032 (t \u2032 ) \u2286 V for every transition t \u2032 in T \u2032 . Let us consider such a transition t \u2032 = ((p, m), a, (q, n)) from T \u2032 , such that (p, a, q) \u2208 T and m, n \u2208 N B . For the transitions t \u2032 \u2208 T \u2032 such that m = \u03c9, then n = \u03c9 and q = q in , thus there are at most |T |\u22121 such transitions. For the other transitions in T \u2032 , i.e., such that m = \u03c9, let us prove that\nV G \u2032 (t \u2032 ) is strictly included in V . If there is no cycle using t \u2032 , then V G \u2032 (t \u2032 ) = {0}\nand we are done. Otherwise, notice that this cycle keep tracks in G \u2032 of the precise displacement on the component i since there is no way to move from a state in Q \u00d7 {\u03c9} to a state in Q \u00d7 {0, . . . , B \u2212 1}. It follows that the displacement of such a cycle is zero on component i. Hence the vector v we singled out earlier is not in V G \u2032 (t \u2032 ) and we have proven that\nV G \u2032 (t \u2032 ) is strictly included in V .\nThis shows that rank(G \u2032 ) < lex rank(G).\n\nTogether, the previous two lemmas allow to show the following.\n\nLemma 4.15. Whether a KLM sequence \u03be is pumpable is in EXPSPACE. Moreover, if \u03be is strongly connected and unpumpable, we can compute in time exp(|\u03be| 2+d d ) a finite set \u039e of KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 and such that rank(\u03be \u2032 ) < lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| 2+d d for every \u03be \u2032 \u2208 \u039e. Proof. We have already argued that pumpability is decidable in exponential space. Assume that \u03be is strongly connected and unpumpable. Then there is a triple xGy in \u03be and a component i not fixed by G such that Facc G (x)(i) < \u03c9 or Bacc G (y)(i) < \u03c9. Let us consider the former case and define B def = ( x + 2|G|) 1+d d . Lemma 4.13 shows that L \u03be = r\u2208NB L \u03ber where \u03be r is the KLM sequence obtained from \u03be by replacing the KLM triple xGy by its (i \u2032 , B, r)-unfolding for a suitable i \u2032 . Lemma 4.14 shows that rank(\u03be r ) < lex rank(\u03be). Finally, B < |\u03be| 1+d d and thus |\u03be r | \u2264 (1 + B)|\u03be| \u2264 |\u03be| 2+d d .  (1, 1, 0)) , \u03be 9 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (\u03c9, \u03c9, 0))a 9 ((\u03c9, \u03c9, 0)G 9 ex (1, 1, 0)) , \u03be 10 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (\u03c9, \u03c9, 0))a 9 ((\u03c9, \u03c9, 0)G 10 ex (1, 1, 0)) ,\n\u03be 8 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (\u03c9, \u03c9, 0))a 9 ((\u03c9, \u03c9, 0)G 8 ex\nwhere G 8 ex , G 9 ex , and G 10 ex are shown in Fig. 6. When applying lemmata 4.2 and 4.4, \u03be 8 ex and \u03be 9 ex are respectively decomposed into \u03be 11 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (0, 2, 0))a 9 ((0, 2, 0)G 11 ex (0, 2, 0))a 6 ((1, 1, 0)G 11 ex (1, 1, 0)) , \u03be 12 ex def = ((0, 0, 2)G 3 ex (0, \u03c9, 2))a 3 ((1, \u03c9, 2)G 6 ex (\u03c9, \u03c9, 2))a 7 ((\u03c9, \u03c9, 0)G 7 ex (1, 1, 0))a 9 ((1, 1, 0)G 11 ex (1, 1, 0)   . From any KLM sequence \u03be, we can compute in time exp(g(|\u03be|)) a finite set clean(\u03be) of clean KLM sequences such that L \u03be = \u03be \u2032 \u2208clean(\u03be) L \u03be \u2032 and such that rank(\u03be \u2032 ) \u2264 lex rank(\u03be) and |\u03be \u2032 | \u2264 g(|\u03be|) for every \u03be \u2032 \u2208 clean(\u03be), where\ng(x) def = x x .\nProof. By Lem. 4.2, we can compute a finite set \u039e of strongly connected KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 and such that rank(\u03be \u2032 ) \u2264 lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| for every \u03be \u2032 \u2208 \u039e. By applying Lem. 4.4 to each KLM sequence in \u039e, we compute in exponential time a finite set \u039e \u2032 of saturated strongly connected KLM sequences such that \u03be \u2032 \u2208\u039e L \u03be \u2032 = \u03be \u2032\u2032 \u2208\u039e \u2032 L \u03be \u2032\u2032 and such that rank(\u03be \u2032\u2032 ) \u2264 lex rank(\u03be) and |\u03be \u2032\u2032 | \u2264 |\u03be| |\u03be| for every \u03be \u2032\u2032 \u2208 \u039e \u2032 . By Lem. 3.5, we can safely remove the unsatisfiable KLM sequences from \u039e \u2032 -which can be performed in nondeterministic time polynomial in \u03be \u2032\u2032 \u2208\u039e \u2032\u2032 |\u03be \u2032\u2032 | since each E \u03be \u2032\u2032 is of size polynomial in |\u03be \u2032\u2032 |and we obtain a set clean(\u03be) satisfying the lemma.\n\n\nDecomposition Lemma.\n\nIn order to decompose a KLM sequence into a finite set of normal KLM sequences, the decomposition algorithm applies as many times as possible the decomposition step defined by the following lemma.\n\nLemma 4.18 (Decomposition). Let \u03be be a clean KLM sequence. If \u03be is not normal, we can compute in time exp(h(|\u03be|)) a finite set dec(\u03be) of clean KLM sequences such that L \u03be = \u03be \u2032 \u2208dec(\u03be) L \u03be \u2032 and such that rank(\u03be \u2032 ) < lex rank(\u03be) and |\u03be \u2032 | \u2264 h(|\u03be|) for\nevery \u03be \u2032 \u2208 dec(\u03be), where h(x) def = x x 1+x .\nProof. Lemmata 4.6, 4.9 and 4.15 show that we can compute in double exponential time a finite set \u039e of KLM sequences such that L \u03be = \u03be \u2032 \u2208\u039e L \u03be \u2032 and such that rank(\u03be \u2032 ) < lex rank(\u03be) and |\u03be \u2032 | \u2264 |\u03be| |\u03be| for every \u03be \u2032 \u2208 \u039e by observing that 2 + d d \u2264 |\u03be|. For each KLM sequence \u03be \u2032 \u2208 \u039e, by applying Lem. 4.17 we compute in time exponential in g(|\u03be \u2032 |) a finite set clean(\u03be \u2032 ) of clean KLM sequences such that L \u03be \u2032 = \u03be \u2032\u2032 \u2208clean(\u03be \u2032 ) L \u03be \u2032\u2032 and such that rank(\u03be \u2032\u2032 ) \u2264 lex rank(\u03be \u2032 ) and |\u03be \u2032\u2032 | \u2264 g(|\u03be \u2032 |) for each \u03be \u2032\u2032 \u2208 clean(\u03be \u2032 ). We deduce the statement by letting dec(\u03be) def = \u03be \u2032 \u2208\u039e clean(\u03be \u2032 ).\n\n\nBounded Witness Lemma.\n\nThanks to the following lemma, we can stop the decomposition once we obtain a normal KLM sequence. The proof given in Appendix C follows the same lines as Kosaraju's, with the added twist that we extract a bound on the length of minimal words in L \u03be . is unpumpable and dec(\u03be 7 ex ) = {\u03be 11 ex , \u03be 12 ex } = fdec(\u03be ex ), since those last two KLM sequences are normal. The corresponding decomposition forest in depicted in Fig. 7. Observe that the union provided in Ex. 3.1 for L \u03beex corresponds exactly to the union of L \u03be 12 ex and L \u03be 11 ex .\n\n\nComplexity Upper Bounds\n\nIn this section, we derive upper bounds on the lengths of the branches in a decomposition forest of a KLM sequence \u03be 0 , from which we can in turn provide upper bounds on the size of normal KLM sequences, the length of small witnesses, the running time of the decomposition algorithm, and the size of the full decomposition. The idea is to exploit the ranking function defined in Sec. 3.2 in order to bound how many decomposition steps can be performed along a branch of a decomposition forest. We rely for this on a so-called 'length function theorem' from [26] to bound the length of descending sequences of ordinals. Finally, we classify the running time complexity using the 'fast-growing' complexity classes defined in [28]. A general introduction to these techniques can be found in [29].\n\n\nControlled Sequences of Ranks.\n\nFor the purposes of this section, it is more convenient to recast the ranking function rank() on KLM sequences from Sec. 3.2 in terms of ordinals. If rank(\u03be) = (r d , . . . , r 0 ), then we associate to \u03be the ordinal rank in \u03c9 d+1 defined by\n\u03b1 \u03be def = \u03c9 d \u00b7 r d + \u03c9 d\u22121 \u00b7 r d\u22121 + \u00b7 \u00b7 \u00b7 + \u03c9 0 \u00b7 r 0 .(10)\nThis is just a reformulation, because rank(\u03be) < lex rank(\u03be \u2032 ) if and only if \u03b1 \u03be < \u03b1 \u03be \u2032 . Along a branch \u03be \u2032 0 , \u03be 1 , \u03be 2 , . . . of a decomposition forest for a KLM sequence \u03be 0 , we see therefore a descending sequence of ordinal ranks\n\u03b1 \u03be \u2032 0 > \u03b1 \u03be1 > \u03b1 \u03be2 > \u00b7 \u00b7 \u00b7(11)\nThough all descending sequences of ordinals are finite, we cannot bound their lengths in general; e.g., K + 1 > K > K \u2212 1 > \u00b7 \u00b7 \u00b7 > 0 and \u03c9 > K > K \u2212 1 > \u00b7 \u00b7 \u00b7 > 0 are descending sequences of length K + 2 for all K in N. Nevertheless, a descending sequence of ordinal ranks like (11), found along a branch of a decomposition forest, is not arbitrary, because the successive KLM sequences are either \u03be \u2032 0 \u2208 clean(\u03be 0 ) or the result of some decomposition step, hence one cannot use an arbitrary K as in these examples.\n\n\nControlled Sequences of Ordinals.\n\nThe previous intuition is captured by the notion of controlled sequences. In general, for an ordinal \u03b1 < \u03c9 \u03c9 (like the ordinal ranks defined by (10)), let us write \u03b1 in Cantor normal form as \u03b1 = \u03c9 n \u00b7 c n + \u00b7 \u00b7 \u00b7 + \u03c9 0 \u00b7 c 0 with c 0 , . . . , c n and n in N, and define its size as N \u03b1 def = max{n, max 0\u2264i\u2264n c i }. Thus, for the ordinal rank \u03b1 \u03be defined in (10) for a KLM sequence \u03be with rank(\u03be) = (r d , . . . , r 0 ),\nN \u03b1 \u03be = max{d, max 0\u2264i\u2264d r i } .(12)\nLet n 0 be a natural number in N and h: N \u2192 N a monotone inflationary function, i.e., x \u2264 h(x) and x \u2264 y implies h(x) \u2264 h(y). A sequence \u03b1 0 , \u03b1 1 , . . . of ordinals below \u03c9 \u03c9 is (n 0 , h)-controlled if, for all j in N,\nN \u03b1 j \u2264 h j (n 0 ) ,(13)\ni.e., the size of the jth ordinal \u03b1 j is bounded by the jth iterate of h applied to n 0 ; in particular, N \u03b1 0 \u2264 n 0 for the first element of the sequence. Because for each n \u2208 N, there are only finitely many ordinals below \u03c9 \u03c9 of size at most n, the length of controlled descending sequences is bounded [see, e.g., 26]. One can actually give a precise bound on this length in terms of subrecursive functions, whose definition we are about to recall.\n\n\nSubrecursive\n\nFunctions. Algorithms shown to terminate via an ordinal ranking function can have a very high worst-case complexity. In order to express such large bounds, a convenient tool is found in subrecursive hierarchies, which employ recursion over ordinal indices to define faster and faster growing functions. We define here two such hierarchies.\n\nFundamental Sequences. A fundamental sequence for a limit ordinal \u03bb is a strictly ascending sequence (\u03bb(x)) x<\u03c9 of ordinals \u03bb(x) < \u03bb with supremum \u03bb. We use the standard assignment of fundamental sequences to limit ordinals \u03bb < \u03b5 0 , where \u03b5 0 denotes the least solution of x = \u03c9 x . For the purposes of this paper, it actually suffices to consider the case \u03bb \u2264 \u03c9 \u03c9 , defined inductively by\n\u03c9 \u03c9 (x) def = \u03c9 x+1 , (\u03b2 + \u03c9 k+1 )(x) def = \u03b2 + \u03c9 k \u00b7 (x + 1) ,\nwhere \u03b2 + \u03c9 k+1 is in Cantor normal form. This particular assignment satisfies, e.g., 0 < \u03bb(x) < \u03bb(y) for all x < y. For instance, \u03c9(x) = x + 1 and (\u03c9 3 + \u03c9 3 + \u03c9)(x) = \u03c9 3 + \u03c9 3 + x + 1.\n\nHardy and Cicho\u0144 Hierarchies. In the context of controlled sequences, the hierarchies of Hardy and Cicho\u0144 turn out to be especially well-suited [4]. Let h: N \u2192 N be a function. For each such h, the Hardy hierarchy (h \u03b1 ) \u03b1\u2264\u03c9 \u03c9 and the Cicho\u0144 hierarchy (h \u03b1 ) \u03b1\u2264\u03c9 \u03c9 relative to h are two families of functions h \u03b1 , h \u03b1 : N \u2192 N defined by induction over \u03b1 by\nh 0 (x) def = x , h 0 (x) def = 0 , h \u03b1+1 (x) def = h \u03b1 (h(x)) , h \u03b1+1 (x) def = 1 + h \u03b1 (h(x)) , h \u03bb (x) def = h \u03bb(x) (x) , h \u03bb (x) def = h \u03bb(x) (x) .\nThe Hardy functions are well-suited for expressing a large number of iterations of the provided function h. For instance, h k for some finite k is simply the kth iterate of h. This intuition carries over: h \u03b1 is a 'transfinite' iteration of the function h, using a kind of diagonalisation in the fundamental sequences to handle limit ordinals. For instance, if we use the successor function H(x) = x+1 as our function h, we see that a first diagonalisation yields H \u03c9 (x) = H x+1 (x) = 2x + 1. The next diagonalisation occurs at H \u03c9\u00b72 (x) = H \u03c9+x+1 (x) = H \u03c9 (2x + 1) = 4x + 3. Fast-forwarding a bit, we get for instance a function of exponential growth H \u03c9 2 (x) = 2 x+1 (x + 1) \u2212 1, and later a non-elementary function H \u03c9 3 akin to a tower of exponentials, and a non primitive-recursive function H \u03c9 \u03c9 of Ackermannian growth. In the following, we will use the fact that, if h is monotone inflationary, then so is h \u03b1 : if x \u2264 y, then x \u2264 h \u03b1 (x) \u2264 h \u03b1 (y). Regarding the Cicho\u0144 functions, if h is monotone inflationary, then by induction on \u03b1,\nh \u03b1 (x) \u2265 h \u03b1 (x) + x .(14)\nBut the main interest of Cicho\u0144 functions is that they capture how many iterations are performed by Hardy functions [4]: . Let n 0 \u2265 d + 1. The maximal length of (n 0 , h)controlled descending sequences of ordinals in \u03c9 d+1 is h \u03c9 d+1 (n 0 ).\nh h\u03b1(x) (x) = h \u03b1 (x) .(15)\nLet us apply Thm. 5.1 to the descending sequences of ordinal ranks from (11) found along a branch of a decomposition forest of \u03be 0 . Observe that by (4) and (12), N \u03b1 \u03be \u2264 |\u03be| for any KLM sequence \u03be. Thus, by monotonicity, a sequence like (11) is (g(|\u03be 0 |), h)-controlled, where g was defined in Lem. 4.17 and h in Lem. 4.18. By Thm. 5.1 and because g(|\u03be 0 |) \u2265 d + 1, the branches of a decomposition forest for \u03be 0 are of length at most\nL def = h \u03c9 d+1 (g(|\u03be 0 |)) .(16)\nIn turn, by (14) and (16),\nL \u2264 h \u03c9 d+1 (g(|\u03be 0 |)) ,(17)\nand if \u03be is any KLM sequence labelling a node of a decomposition forest for \u03be 0 , then by (15) and (16),\n|\u03be| \u2264 h L (g(|\u03be 0 |)) = h \u03c9 d+1 (g(|\u03be 0 |)) .(18)\nConsider now a VASS G of dimension d and two finite configurations c in and c out . Then according to (3) and (4),\n|c in Gc out | = 2(d + 1) d+1 (|G| + c in + c out ) .(19)\nThus, by combining (18) with Lem. 4.19, we obtain the following small witness property.\n\nProperty 5.2 (Small Witness). Let G = (Q, q in , q out , T ) be a VASS of dimension d, c in and c out be two finite configurations in N d , and n def\n= 2(d + 1) d+1 (|G| + c in + c out ). If q in (c in ) \u03c3 \u2212 \u2192 G q out (c out ) for some \u03c3, then there exists a word \u03c3 \u2032 \u2208 A * such that q in (c in ) \u03c3 \u2032 \u2212 \u2192 G q out (c out ) and |\u03c3 \u2032 | \u2264 \u2113 h \u03c9 d+1 (g(n)) ,\nwhere g, h, and \u2113 are defined in lemmata 4.17 to 4.19.\n\n\nFast-Growing Complexity.\n\nWe wish now to exploit the upper bounds from (16)(17)(18) and Pty. 5.2 to provide complexity upper bounds for the decomposition algorithm and the reachability problem. We will employ for this the fast-growing complexity classes defined in [28]. This is an ordinal-indexed hierarchy of complexity classes (F \u03b1 ) \u03b1<\u03b50 , that uses the Hardy functions (H \u03b1 ) \u03b1 relative to H(x) def = x + 1 as a standard against which we can measure high complexities.\n\n\nFast-Growing Complexity Classes. Let us first define\nF \u03b1 def = \u03b2<\u03c9 \u03b1 FDTIME H \u03b2 (n)(20)\nas the class of functions computed by deterministic Turing machines in time O(H \u03b2 (n)) for some \u03b2 < \u03c9 \u03b1 . This captures for instance the class of Kalmar elementary functions as F 3 and the class of primitive-recursive functions as F \u03c9 [20,30]. Then we let\nF \u03b1 def = p\u2208F\u03b1 DTIME H \u03c9 \u03b1 (p(n))(21)\ndenote the class of decision problems solved by deterministic Turing machines in time O H \u03c9 \u03b1 (p(n)) for some function p \u2208 F \u03b1 . The intuition behind this quantification over p is that, just like e.g. EXP = p\u2208poly DTIME 2 p(n) quantifies over polynomial functions to provide enough 'wiggle room' to account for polynomial reductions, F \u03b1 is closed under F \u03b1 reductions [28,Thms. 4.7 and 4.8].\n\nFor instance, TOWER def = F 3 defines the class of problems that can be solved using computational resources bounded by a tower of exponentials of elementary height in the size of the input, k\u2208N F k is the class of primitive-recursive decision problems, and ACKERMANN def = F \u03c9 is the class of problems that can be solved using computational resources bounded by the Ackermann function applied to some primitive-recursive function of the input size-here it does not matter for \u03b1 > 2 whether we are considering deterministic, nondeterministic, alternating, time, or space bounds [28,Sec. 4.2.1]. See Fig. 2 for a depiction.\n\n\nComplexity Upper Bounds.\n\nLet us first observe that, by Lem. 4.18, the branching degree |dec(\u03be)| of a node labelled by \u03be in a decomposition forest for \u03be 0 is exponential in h(|\u03be|), thus elementary in |\u03be|. Furthermore, by Lem. 4.17, the number |clean(\u03be 0 )| of initial clean KLM sequences is exponential in g(|\u03be 0 |), thus elementary in |\u03be 0 |. Thus, by (18), the size of the entire forest-i.e., the number of decomposition steps performed by the decomposition algorithm-is also elementary in h \u03c9 d+1 (g(|\u03be 0 |)). Finally, still by Lem. 4.18, each decomposition step on a KLM sequence \u03be can be performed in time elementary in |\u03be|, hence the entire decomposition forest can be computed in time elementary in h \u03c9 d+1 (g(|\u03be 0 |)). Consider an instance of the VASS reachability problem, namely a VASS G of dimension d and two finite configurations c in and c out , and let \u03be 0 def = (c in Gc out ). Then fdec(\u03be 0 ) = \u2205 if and only q in (c in ) * \u2212 \u2192 G q out (c out ), where by (19), |\u03be 0 | is elementary in the size of the instance. Let us examine the bound e(h \u03c9 d+1 (g(|\u03be 0 |))) from Lem. 5.3 and express it in the form of (21). The innermost g function composed with the blow-up incurred by (19) is a fixed elementary function in F <3 , thus is captured by the quantification over p \u2208 F <\u03b1 for all \u03b1 \u2265 3. The inner h function is also fixed and in F <3 , and [27,Thm. 4.2] allows to over-approximate h \u03c9 d+1 in terms of H \u03c9 d+4 . Finally, the outermost function e is also fixed and in F <3 , and [27,Lem. 4.6] shows how to 'shift' it into the innermost position.\n\n\nTheorem 5.4 (Upper Bound). VASS reachability is in ACKERMANN, and in F d+4\n\nif the dimension d is fixed.\n\n\nCombinatorial\n\nAlgorithm. An alternative proof of Thm. 5.4 could also exploit the following combinatorial algorithm. By Pty. 5.2, if q in (c in ) \u03c3 \u2212 \u2192 G q out (c out ) for some \u03c3, then there is a small witness \u03c3 \u2032 of length at most \u2113(h \u03c9 d+1 (g(n))). It suffices therefore to compute this upper bound-which can be performed in time elementary in the bound [27, Thm. 5.1]-, and to enumerate the paths in G of length up to that bound until we find a witness or exhaust the search space.\n\n\nApplication: Downward Language Inclusion\n\nThe ACKERMANN = F \u03c9 upper bound provided by Thm. 5.4 for the VASS reachability problem is still quite far from the currently best known lower bound, which is TOWER = F 3 hardness [6]. As mentioned in the introduction, this upper bound is nevertheless rather tight as far as the decomposition algorithm is concerned. In this section, we illustrate the usefulness of our new upper bound for another decision problem.\n\nLabelled VASSes. A labelled VASS (G, \u03a3, \u03bb) is a VASS G = (Q, q in , q out , T ) of dimension d together with a finite alphabet \u03a3 and labelling function \u03bb: T \u2192 \u03a3\u222a{\u03b5}, which is lifted homomorphically to a function T * \u2192 \u03a3 * . We overload the notations for step relations by writing p(x) w \u2212 \u2192 G q(y) if there exists a path \u03c0 \u2208 T * from p to q labelled by \u03c3 such that p(x) \u03c3 \u2212 \u2192 G q(y) and \u03bb(\u03c0) = w \u2208 \u03a3 * . Given two finite configurations c in and c out in N d , its labelled language is\nL \u03bb (c in , G, c out ) def = {w \u2208 \u03a3 * | q in (c in ) w \u2212 \u2192 G q out (c out )} .\nDownward-Closures. For two finite words u and v in \u03a3 * , we say that u embeds into v, denoted u \u2264 * v, if u = a 1 \u00b7 \u00b7 \u00b7 a k and v = v 0 a 1 v 1 a 2 \u00b7 \u00b7 \u00b7 a k v k for some a 1 , . . . , a k \u2208 \u03a3 and v 0 , . . . , v k \u2208 \u03a3 * . In other words, u embeds into v if we can obtain u from v by 'dropping' some letters from v; for instance, bca \u2264 * aabacba. For a language L \u2286 \u03a3 * , its downward-closure is \u2193L def = {u \u2208 \u03a3 * | \u2203v \u2208 L . u \u2264 * v}. A consequence of Higman's Lemma also known as Haine's Theorem is that, for any L \u2286 \u03a3 * , \u2193L is a regular language.\n\nExample 6.1. Let us consider again the VASS G ex from Ex. 2.1, along with the alphabet \u03a3 def = {a j | 1 \u2264 j \u2264 9} and the labelling function defined by \u03bb(t j ) def = a j for all 1 \u2264 j \u2264 9. Then \u2193L \u03bb ((0, 0, 2), G ex , (1, 1, 0)) is the language denoted by the regular expression a * 1 (a 3 + \u03b5)a * 6 (a 7 + \u03b5)a * 8 (a 9 + \u03b5)(a 6 + \u03b5) . Downward Language Inclusion. We are interested in this section in the following decision problem.\n\nProblem: VASS downward language inclusion. input: Two labelled VASSes (G, \u03a3, \u03bb) and (G \u2032 , \u03a3, \u03bb \u2032 ) and four finite configurations c in and c out of G and c \u2032 in and c \u2032 out of G \u2032 . question: Is \u2193L \u03bb (c in , G, c out ) \u2286 \u2193L \u03bb \u2032 (c \u2032 in , G \u2032 , c \u2032 out )? Now, by Haine's Theorem, \u2193L \u03bb (c in , G, c out ) is regular for any labelled VASS. However, that does not necessarily mean that one can actually compute a finite automaton A such that L(A) = \u2193L \u03bb (c in , G, c out ) from the labelled VASS and configurations. Nevertheless, Habermehl, Meyer, and Wimmel [10,Prop. 1] show that, given a full decomposition fdec(\u03be 0 ) of the KLM sequence \u03be 0 = (c in Gc out ), one can construct such a finite automaton in logarithmic space 1 -as a hint, the reader might see some resemblance between the regular expression of Ex. 6.1 and the full decomposition fdec(\u03be ex ) = {\u03be 11 ex , \u03be 12 ex } from Ex. 4.16. Since the inclusion problem for two regular languages represented by finite automata is in PSPACE, Lem. 5.3 entails the following. Lower Bounds. The computational and the descriptional complexity of computing downward-closures of languages is rather well studied [e.g., 31]. In the case of labelled VASS languages, Atig et al. [1,Thm. 10] show that there exists a family of labelled VASSes such that any finite automaton A such that L(A) = \u2193L \u03bb (c in , G, c out ) requires a number of states Ackermannian in the size of G. A stronger result was shown by Zetzsche [32,Cor. 17], which bars any alternative algorithm for the VASS downward language inclusion problem from performing significantly better than Cor. 6.2. \n\n\nConcluding Remarks\n\nWe have proven that a refinement of the decomposition algorithms of Mayr [21], Kosaraju [13], and Lambert [14] runs in Ackermannian time, and in primitiverecursive time for VASSes of fixed dimension. In turn, this provides respectively ACKERMANN and F d+4 upper bounds for both the VASS reachability and the VASS downward language inclusion problems. While the former only needs to find some normal KLM sequence in a decomposition forest and is only known to be TOWER-hard [6], the latter essentially requires to construct a full decomposition and was already known to be ACKERMANN-hard [32], and therefore ACKERMANNcomplete by our results. Thus it is unclear at the moment whether a better algorithm for VASS reachability might exist.\n\nAnother line for future research is the complexity of VASS reachability in fixed dimension. With a binary encoding, the problem is NP-complete in dimension one [9] and PSPACE-complete in dimension two [2]; with a unary encoding, both are NL-complete [8]. In dimension three and above, our F d+4 bound is currently the best known upper bound, but we expect that this could be refined further. 1 The result of Habermehl et al. is stated in terms of a full decomposition constructed by Lambert's algorithm, but the adaptation to our full decomposition is mostly straightforward.\n\n\nAppendix A. Pumpability\n\nIn this section we provide the details of the proof of Lem. 4.15.\n\nA.1. Rackoff Extraction. We start by proving the following result inspired by Rackoff [24].\n\nLemma A.1. Let us assume that\nq 0 (c 0 ) a 1 \u2212\u2192 G q 1 (c 1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (c k )\n. Let C \u2265 |G| and assume that for every i \u2208 {1, . . . , d} there exists j \u2208 {0, . . . , k} such that c j (i) \u2265 C 1+d d .\n\nIn that case there exists a configuration c \u2208 N d \u03c9 such that c(i) \u2265 C \u2212 |G| for every i \u2208 {1, . . . , d}, and a word \u03c3 such that |\u03c3| < C (d+1) d+1 and q 0 (c 0 ) \u03c3 \u2212 \u2192 G q k (c).\n\nThe previous lemma is a direct consequence of the following statement.\n\nLemma A.2. Let us assume that\nq 0 (c 0 ) a 1 \u2212\u2192 G q 1 (c 1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (c k )\n. Let C \u2265 |G| be such that for every i \u2208 {1, . . . , d} there exists j \u2208 {0, . . . , k} such that c j (i) \u2265 C 1+n n where n def = |{i | c 0 (i) \u2208 N}|. Then, there exists a configuration c and a word \u03c3 such that q 0 (c 0 ) \u03c3 \u2212 \u2192 G q k (c), c(i) \u2265 C \u2212 |G| for every i, and |\u03c3| < C (n+1) n+1 .\n\nProof. Let T be the set of transitions of G. Notice that if T is empty, the lemma is immediate. So, we can assume that T = \u2205, and in particular that |G| \u2265 2.\n\nWe prove the lemma by induction on n. Naturally, for the base case n = 0, then c 0 = \u03c9 and the proof is immediate by selecting for \u03c3 the label of a simple path from q 0 to q k ; notice that |\u03c3| < |Q| \u2264 C. For the induction step, let us assume that the lemma holds as soon as the cardinal of H def = {i \u2208 {1, . . . , d} | c 0 (i) = \u03c9} is strictly bounded by n \u2265 1, and let us consider an instance of the lemma such that |H| = n. We have by assumption\nq 0 (c 0 ) a1 \u2212\u2192 G q 1 (c 1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (c k ) .(22)\nAssume that for every i \u2208 {1, . . . , d} there exists j \u2208 {0, . . . , k} such that c j (i) \u2265 C 1+n n .\n\nNotice that for every i \u2208 H, there exists a minimal k i \u2208 {0, . . . , k} such that c ki (i) \u2265 C 1+n n . Letk def = min{k i | i \u2208 H}. Observe that for every j \u2208 {0, . . . ,k \u2212 1} and for every i \u2208 H, by minimality of k i we deduce that c j (i) < C 1+n n . It follows that the cardinal of the set {q j (c j ) | 0 \u2264 j <k} is bounded by |Q| \u00b7 (C 1+n n ) n \u2264 C 1+n+n n+1 . By removing cycles that occur on the execution from q 0 to qk, we can assume without loss of generality thatk \u2264 C 1+n+n n+1 .\nLet I def = {i \u2208 H | k i >k}. Observe thatn def = |I| satisfiesn < n. Let us define x j def = c j | I . Then qk(xk) ak +1 \u2212 \u2212\u2212 \u2192 G qk +1 (xk +1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (x k ) .(23)\nMoreover, for every i \u2208 {1, . . . , d} there exists j \u2208 {k, . . . , k} such that x j (i) \u2265 C 1+nn . In fact, if i \u2208 I then xk(i) = \u03c9 \u2265 C 1+nn , and if i \u2208 I, and since k i >k, there exists j \u2208 {k + 1, . . . , k} such that x j (i) \u2265 C 1+n n \u2265 C 1+nn . By induction hypothesis, there exists a configuration\u0109 and a word\u03c3 such that qk(xk)\u03c3 \u2212 \u2192 G q k (\u0109), c(i) \u2265 C \u2212 |G| for every i, and |\u03c3| < C (n+1)n +1 \u2264 C n n .\n\nLet \u03c3 def = a 1 . . . ak\u03c3. Observe that |\u03c3| < C 1+n+n n+1 + C n n . Let us prove that C 1+n+n n+1 + C n n \u2264 C (n+1) n+1 . Since C \u2265 2, it is sufficient to prove that (1 + n + n n+1 ) + n n \u2264 (n + 1) n+1 . If n = 1 the inequality is trivial. Otherwise, the first two elements of the binomial decomposition of (n + 1) n+1 provide (n + 1) n+1 \u2265 n n+1 + (n + 1)n n . Moreover (n + 1)n n \u2265 n n + n n+1 \u2265 n n + 2n \u2265 n n + n + 1. We have proven the inequality.\n\nLet Z \u03c9 def = Z \u228e {\u03c9}, and let us introduce for every prefix u of\u03c3 the vector z u in Z d \u03c9 defined by z u def = ck + \u2206(u). Observe that z u | I = xk + \u2206(u). Since qk(xk)\u03c3 \u2212 \u2192 G q k (\u0109), there exists a configuration q u (\u1e91 u ) such that qk(xk) u \u2212 \u2192 G q u (\u1e91 u ). In particular\u1e91 u = xk + \u2206(u), and we have proven that z u | I =\u1e91 u . It follows that z u (i) \u2265 0 for every i \u2208 I. Notice that for every i \u2208 H, we have z u (i) = \u03c9 \u2265 0. Moreover, for every i \u2208 H\\I, we have z u (i) = ck(i) + \u2206(u)(i) \u2265 C 1+n n \u2212 |G| \u00b7 |u| \u2265 C 1+n n \u2212 |G| \u00b7 C n n = C n n \u00b7 (C \u2212 |G|) \u2265 C \u2212 |G|. Hence z u (i) \u2265 C \u2212 |G|. We have proven that z u \u2208 N d \u03c9 . In particular, it follows that qk(ck)\u03c3 \u2212 \u2192 G q k (c) where c = z\u03c3. Notice that we have c(i) \u2265 C \u2212 |G| for every i. In fact, if i \u2208 H\\I then c(i) = z\u03c3(i), if i \u2208 I then c(i) =\u0109(i), and if i \u2208 H then c(i) = \u03c9. Finally, as q 0 (c 0 ) \u03c30 \u2212\u2192 qk(ck) we deduce that q 0 (c 0 ) \u03c3 \u2212 \u2192 G q k (c) and we have proven the induction.\n\nA.2. Unfoldings. Recall that N B def = {0, . . . , B\u22121, \u03c9} for any B \u2208 N, and that if i \u2208 {1, . . . , d}, r \u2208 N B , and x(i) \u2208 N B , then the forward (i, B, r)-unfolding of a KLM triple xGy is the KLM triple xG \u2032 y where G \u2032 def = (Q \u00d7 N B , (q in , x(i)), (q out , r), T \u2032 ) and T \u2032 is the set of transitions ((p, m), a, (q, n)) where (p, a, q) \u2208 T and m, n \u2208 N B satisfy n = m + a(i) or (n = \u03c9 \u2227 m + a(i) \u2265 B), and such that m = \u03c9 implies q = q in . The backward (i, B, r)-unfolding is defined symmetrically.\n\nLemma 4.13. Let \u03be = xGy be a KLM sequence and let I be the set of components i \u2208 {1, . . . , d} that are not fixed by G and such that Facc G (x)(i) < \u03c9. If I is not empty, then there exists i \u2208 I such that L \u03be = r\u2208NB L \u03ber where \u03be r is the forward\n(i, B, r)-unfolding of \u03be and B def = ( x + 2|G|) 1+d d .\nProof. The inclusion of the right hand side to the left hand side is immediate. Let us prove the other inclusion.\n\nLet \u03c3 def = a 1 . . . a k be a word in L \u03be . Then there exists a sequence q 0 (m 0 ), . . . , q k (m k ) of state-configurations such that q 0 = q in , q k = q out , m 0 , m k \u2208 N d , m 0 \u2291 x, m k \u2291 y, and such that\nq 0 (m 0 ) a 1 \u2212\u2192 G q 1 (m 1 ) \u00b7 \u00b7 \u00b7 a k \u2212 \u2212 \u2192 G q k (m k ) .\nWithout loss of generality, by restricting the set of states of G to {q 0 , . . . , q k }, we can assume that every state of G is visited. Let us prove that for every component i fixed by G such that Facc G (x)(i) = \u03c9, there exists a function f i : Q \u2192 N such that f (q in ) = Facc G (x)(i) and such that f i (q) = f i (p) + a(i) for every (p, a, q) \u2208 T . Since i is fixed by G, there exists a function f i : Q \u2192 Z such that f i (q) = f i (p) + a(i) for every (p, a, q) \u2208 T . As Facc G (x)(i) \u2208 N, by translating f i we can assume that f i (q in ) = Facc G (x)(i). Notice that m 0 \u2291 x \u2291 Facc G (x). It follows that m 0 (i) = Facc G (x)(i) and in particular that f i (q 0 ) = m 0 (i). Because q j\u22121 (m j\u22121 ) a j \u2212\u2192 G q j (m j ), we deduce by induction on j that f i (q j ) = m j (i) for every 0 \u2264 j \u2264 k. As Q = {q 0 , . . . , q k }, we deduce that f i (q) \u2208 N for every q \u2208 Q.\n\nObserve that, if there exists i \u2208 I such that for every j \u2208 {0, . . . , k} we have m j (i) < B, then \u03c3 \u2208 L \u03ber where r def = m k (i). Thus, we can assume that for every i \u2208 I, there exists j \u2208 {0, . . . , k} such that m j (i) \u2265 B. Let k \u2032 be the minimal natural number such that, for every i \u2208 I, there exists j \u2208 {0, . . . , k \u2032 } such that m j (i) \u2265 B. Since m 0 (i) < B for every i \u2208 I, it follows that k \u2032 \u2265 1. By minimality of k \u2032 , there exists i \u2208 I such that for every j \u2208 {0, . . . , k \u2032 \u2212 1} we have m j (i) < B. Observe that if q in \u2208 {q k \u2032 , . . . , q k }, we deduce that \u03c3 \u2208 L \u03be\u03c9 . So, it just remains to prove that q in \u2208 {q k \u2032 , . . . , q k }.\n\n\nAssume by contradiction that\nq in \u2208 {q k \u2032 , . . . , q k }. Since m 0 \u2291 x \u2291 Facc G (x) and I \u2286 {i | Facc G (x)(i) \u2208 N}, it follows that m 0 | I = Facc G (x)| I . Let c j def = m j | I for every 0 \u2264 j \u2264 k. Notice that we have q in (Facc G (x)| I ) = q 0 (c 0 ) a 1 \u2212\u2192 G q 1 (c 1 ) \u00b7 \u00b7 \u00b7 a k \u2032 \u2212 \u2212 \u2192 G q k \u2032 (c k \u2032 ) .(24)\nFor every i \u2208 {1, . . . , d}, there exists j \u2208 {0, . . . , k \u2032 } such that c j (i) \u2265 C 1+d d , where C def = x + 2|G|. In fact, if i \u2208 I then c 0 (i) = \u03c9, and if i \u2208 I then there exists j \u2208 {0, . . . , k \u2032 } such that m j (i) \u2265 B; From c j (i) = m j (i) we are done. Lemma A.1 shows that there exists a configurationx and a word u \u2032 such that q 0 (c 0 ) u \u2032 \u2212 \u2192 G q k \u2032 (x) and such thatx(i) \u2265 C \u2212 |G| for every 1 \u2264 i \u2264 d.\n\nSince q in \u2208 {q k \u2032 , . . . , q k }, we deduce that there exists a path in G from q k \u2032 to q in . We can consider a simple path of that form. Let u \u2032\u2032 be the label of that path. Because |u \u2032\u2032 | < |Q|, we know that for every prefix v of u \u2032\u2032 we have \u2206(v)(i) > \u2212|G|.\nIt follows thatx + \u2206(v) \u2265 0. We have proven that q k \u2032 (x) u \u2032\u2032 \u2212 \u2212 \u2192 G q in (z) where z satisfies z(i) > C \u2212 2|G| for every 1 \u2264 i \u2264 d. As q 0 (c 0 ) = q in (x| I ), we also know that q in (Facc G (x)| I ) u \u2212 \u2192 G q in (z) where u = u \u2032 u \u2032\u2032 . Since z(i) > x(i) = Facc G (x)(i) for every i \u2208 I, we deduce that \u2206(u)(i) > 0 for every i \u2208 I.\nFinally, let us prove that there exists a configuration\nx \u2032 \u2265 Facc G (x) such that q in (Facc G (x)) u \u2212 \u2192 G q in (x \u2032 )\n, and such that x \u2032 (i) > Facc G (x)(i) for every i \u2208 I. Let v be a prefix of u and let us first prove that Facc G (x)(i) + \u2206(v)(i) \u2265 0 for every\n1 \u2264 i \u2264 d. Note that if i \u2208 I, then because q in (Facc G (x)| I ) u \u2212 \u2192 G q in (z), we get the property. If Facc G (x)(i) = \u03c9 then Facc G (x)(i) + \u2206(v)(i) \u2265 0 is immediate.\nTherefore we can assume that Facc G (x)(i) = \u03c9 and i \u2208 I. In that case i is fixed by G. We have seen in that case that there exists a function f i : Q \u2192 N such that f i (q in ) = Facc G (x)(i) and f i (q) = f i (p) + a(i) for every (p, a, q) \u2208 T . We deduce that Facc G (x)(i) + \u2206(u)(i) = f i (q) \u2265 0 where q is any state reachable from q in by a path labelled by v. It follows that q in (Facc G (x)) u \u2212 \u2192 G q in (x \u2032 ) for x \u2032 def = Facc G (x)+\u2206(u). Notice that for every i \u2208 I this shows that x \u2032 (i) = Facc G (x), and that for every i \u2208 I and because \u2206(u)(i) > 0, we have x \u2032 (i) > Facc G (x)(i).\n\nBy monotony, notice that there exist a word \u03c3 and a configuration x \u2032\u2032 \u2265 x such that q in (x) \u03c3 \u2212 \u2192 G q in (x \u2032\u2032 ) and such that x \u2032\u2032 (i) > x(i) for every i such that x(i) \u2208 N and Facc G (x)(i) = \u03c9. It follows that, for every n \u2208 N large enough, there exists a configuration x n \u2265 x such that q in (x) \u03c3 n u \u2212\u2212\u2192 G q in (x n ). Notice that for n large enough, we have x n \u2265 x. Moreover, we have x n (i) > x(i) for every i \u2208 I. Hence Facc G (x)(i) = \u03c9 for every i \u2208 I and we get a contradiction.\n\n\nAppendix B. Unbounded Equations\n\nWe recall some elements of linear algebra adapted from [23]. be a sequence of integers and let c \u2208 Z m and let us define two sets X and X 0 by\nX def = x \u2208 N n m i=1 n j=1 a i,j x(j) = c(i) , X 0 def = x \u2208 N n m i=1 n j=1 a i,j x(j) = 0 .\nThen every vector in X can be decomposed as the sum of a vector x in X and a finite sum of vectors x 0 in X 0 such that:\nx \u2264 c \u00b7 (2 + max 1\u2264i\u2264m n j=1 |a i,j |) m , x 0 \u2264 (2 + max 1\u2264i\u2264m n j=1 |a i,j |) m .\nProof. Observe that if c(i) < 0 for some 1 \u2264 i \u2264 m, by replacing c(i) by \u2212c(i) and a i,j by \u2212a i,j for every 1 \u2264 j \u2264 n, we do not modify the sets X and X 0 . So, without loss of generality, we can assume that c \u2208 N m . We call P the set of pairs (u, v) \u2208 N n \u00d7 N m such that m i=1 n j=1 a i,j v(j) = u(i). We denote by P 0 the set of minimal (for \u2264) non-zero pairs in P . In [23,Theorem 1] it is shown that every pair in P is a finite sum of pairs in P 0 , and moreover, every pair (u, v) in P 0 satisfies u + v \u2264 C where\nC def = (1 + max 1\u2264i\u2264m ( n j=1 |a i,j | + 1)) m .\nLet x \u2032 \u2208 X. Since (c, x \u2032 ) is in P , it can be decomposed as a finite sum of pairs in P 0 . On the one hand, notice that the pairs (u, v) with u = 0 provides us with vectors v \u2208 X 0 satisfying v \u2264 C. On the other hand, notice that the decomposition of (v, x) cannot contains more that c pairs (u, v) with u = 0. Notice that such a pair satisfies v \u2264 C \u2212 1. It follows that those pairs sum up to a pair (c, x) in P such that x \u2264 c \u00b7 (C \u2212 1). As (c, x) \u2208 P , it follows that x \u2208 X. This concludes the proof.\n\nCorollary B.2. Every model h of E \u03be can be decomposed as the sum of a model h \u2032 of E \u03be and a finite sum of models h 0 of E 0 \u03be such that\nh \u2032 \u2264 |\u03be| |\u03be|\u22121 , h 0 \u2264 |\u03be| |\u03be|\u22123 .\nProof. Just apply Lem. B.1 where (a i,j ) i,j corresponds to the coefficients occurring in the characteristic system of \u03be in front of variables, and c corresponds to the constant terms. Observe that 2 + max 1\u2264i\u2264m n j=1 |a i,j | \u2264 |\u03be|, m \u2264 |\u03be| \u2212 3, and c \u2264 |\u03be| 2 . Proof. This is a direct consequence of Cor. B.2 by observing that if h is a model of E \u03be and h 0 is a model of E 0 \u03be then h + nh 0 is a model of E \u03be for every n \u2208 N.\n\n\nAppendix C. Normal KLM Sequences\n\nIn this section, we prove Lem. 4.19. Throughout this appendix, we assume that \u03be denotes a normal KLM sequence of the form (x 0 G 0 x 1 )a 1 . . . (x k , G k , y k ), where G j = (Q j , q in,j , q out,j , T j ) for each 0 \u2264 j \u2264 k.\n\nC.1. Models of Normal KLM Sequences.\n\nClaim C.1. There exists a model h of E \u03be such that \u03c6 h j (t) > 0 for every t \u2208 T j , and such that h \u2264 2|\u03be| |\u03be|\u22121 .\n\nProof. As \u03be is satisfiable, there exists a model h of E \u03be . By decomposing h thanks to Cor. B.2, we can assume that h \u2264 |\u03be| |\u03be|\u22121 . Moreover, since \u03be is unbounded, Cor. B.2 shows that for every 0 \u2264 j \u2264 k and for every t \u2208 T j , there exists a model h 0 of E 0 \u03be such that h 0 \u2264 |\u03be| |\u03be|\u22123 and such that \u03c6 h0 j (t) > 0. By adding to h, at most k j=0 |T j | models of E 0 \u03be , we get a model of E \u03be satisfying the claim.\n\nClaim C.2. There exists a model h 0 of E 0 \u03be such that for every 0 \u2264 j \u2264 k, for every 1 \u2264 i \u2264 d, and for every t \u2208 T j ,\n\u2022 if x j (i) = \u03c9 then m h0 j (i) > 0, \u2022 if y j (i) = \u03c9 then n h0 j (i) > 0, and \u2022 \u03c6 h0\nj (t) > 0, and moreover,\nh 0 \u2264 |\u03be| |\u03be|\u22122 .\nProof. Since \u03be is saturated, Cor. B.2 shows that for every i \u2208 {1, . . . , d} and j \u2208 {0, . . . , k}:\n\n\u2022 if x j (i) = \u03c9 then there exists a model h 0 of E 0 \u03be such that h 0 \u2264 |\u03be| |\u03be|\u22123 and such that m h0 j (i) > 0, and \u2022 if y j (i) = \u03c9 then there exists a model h 0 of E 0 \u03be such that h 0 \u2264 |\u03be| |\u03be|\u22123 and such that n h0 j (i) > 0. Moreover, since \u03be is unbounded, Cor. B.2 shows that for every j \u2208 {0, . . . , k} and for every t \u2208 T j there exists a model h 0 of E 0 \u03be such that h 0 \u2264 |\u03be| |\u03be|\u22123 and such that \u03c6 h0 j (t) > 0.\n\nIt follows that by summing up at most 2d(k + 1) + 0\u2264j\u2264k |T j | models of E 0 \u03be , we get a model h 0 of E 0 \u03be satisfying the claim.\n\nC.2. Flow Functions.\n\nClaim C.3. For all 0 \u2264 j \u2264 k, there exists a function F j : Q j \u2192 N d \u03c9 such that F j (q) = F j (p) + a for every transition (p, a, q) \u2208 T , and such that F j (q in,j ) = Facc Gj (x j ) and F j (q out,j ) = Bacc Gj (y j ).\n\nProof. It suffices to prove the claim for some KLM triple xGy which is pumpable, rigid, and saturated. Let us prove that for every i \u2208 {1, . . . , d}, there exists a function f i : Q \u2192 N \u03c9 such that f i (q) = f i (p) + a(i) for every transition (p, a, q) \u2208 T and such that f i (q in ) = Facc G (x)(i) and f i (q out ) = Bacc G (y)(i). Let i \u2208 {1, . . . , d}. Observe that if i is not fixed by G, then Facc G (x)(i) = \u03c9 = Bacc G (y)(i), and we can let f i be the constant function mapping to \u03c9. Otherwise, if i is not fixed, then Facc G (x)(i) = x(i) and Bacc G (y)(i) = y(i). Since xGy is saturated, we deduce that x(i) \u2208 N \u21d0\u21d2 y(i) \u2208 N. Note that, if x(i) = \u03c9 = y(i), then we can let f i be the constant function mapping to \u03c9. So, we can assume that x(i), y(i) \u2208 N. Since xGy is rigid, we deduce that there exists a function g i : Q \u2192 N such that g i (q) = g i (p) + a(i) for every transition (p, a, q) \u2208 T , and such that g i (q in ) \u2291 x(i) and g i (q out ) \u2291 y(i). As x(i), y(i) \u2208 N, we deduce that g i (q in ) = x(i) and g i (q out ) = y(i). It follows that we can let f i def = g i in that case. C.3. Pumping in Normal KLM Sequences. Let us introduce the acceleration operator \u2207 that maps a pair of configurations (x, x \u2032 ) such that x \u2264 x \u2032 into the configuration x\u2207x \u2032 defined for every 1 \u2264 i \u2264 d by:\n(x\u2207x \u2032 )(i) def = \u03c9 if x(i) < x \u2032 (i) x(i) otherwise\nClaim C.4. There exists a sequence (u j , v j ) 0\u2264j\u2264k of pairs of words such that |u j |, |v j | < |\u03be| (d+1) d+1 , and a sequence (x \u2032 j , y \u2032 j ) 0\u2264j\u2264k of pairs of configurations x \u2032 j \u2265 x j and y \u2032 j \u2265 y j such that for every 0 \u2264 j \u2264 k: \u2022 q in,j (x j ) uj \u2212 \u2212 \u2192 Gj q in,j (x \u2032 j ) and Facc Gj (x j ) = x j \u2207x \u2032 j , \u2022 q out ,j (y \u2032 j ) vj \u2212 \u2212 \u2192 Gj q out,j (y j ) and Bacc Gj (y j ) = y j \u2207y \u2032 j . Proof. Consider some triple xGy def = x j G j y j for some 0 \u2264 j \u2264 k; since \u03be is normal, this triple is pumpable. We just provide a proof for u and x \u2032 since v and y \u2032 can be obtained by symmetry. Let I be the set of components i \u2208 {1, . . . , d} such that x(i) \u2208 N and Facc G (x)(i) = \u03c9. Fix some i \u2208 I. Notice that there exists a cycle \u03b8 i on q in labelled by a word \u03c3 i , and a configuration x i \u2265 x such that x \u03c3i \u2212 \u2192 x i and x i (i) > x(i).\n\nLet us prove that for every n \u2208 N, there exists a configuration c \u2265 (n, . . . , n) such that q in (x| I ) * \u2212 \u2192 G q in (c). Notice that q in (x| I ) \u03c3i \u2212 \u2192 G q in (x i | I ). From x| I \u2264 x i | I , we deduce that there exists a configuration c i \u2208 N d such that x i | I = x| I + c i . As x| I (i) < x i | I (i), we get c i (i) > 0. By monotony, notice that we have q in (x| I ) * \u2212 \u2192 G q in (c) where c def = x| I + i\u2208I nc i . Notice that c \u2265 (n, . . . , n).\n\nBy selecting n large enough, and letting C def = |\u03be|, Lem. A.1 shows that there exists another configuration c and a word u such that q in (x| I ) u \u2212 \u2192 G q in (c) and such that c(i) \u2265 C \u2212 |G| for every i, and such that |u| < C (d+1) d+1 .\n\nLet us prove that there exists a configuration x \u2032 such that q in (x) u \u2212 \u2192 G q in (x \u2032 ). Let v be a prefix of u and let us prove that x(i) + \u2206(u)(i) \u2265 0 for every i. If i \u2208 I, the previous paragraph provides the bound. If x(i) = \u03c9, the proof is immediate. If i \u2208 I and x(i) = \u03c9, then the function F j introduced in Claim C.3 shows that x(i) + \u2206(u)(i) = F j (q)(i) \u2265 0 where q is the state reached after reading v from q in,j . Hence, we have proven the existence of x \u2032 . Notice that x \u2032 (i) = x(i) if i \u2208 I and x \u2032 (i) \u2265 C \u2212 |G| > x(i) for every i \u2208 I. We have proven the claim. Lemma 4.19 (Bounded Witness). From any normal KLM sequence \u03be, we can compute in space O(\u2113(|\u03be|)) a word \u03c3 \u2208 L \u03be such that |\u03c3| \u2264 \u2113(|\u03be|) where \u2113(x) def = x 3x .\n\nProof. We use the models h and h 0 of E \u03be and E 0 \u03be defined in claims C.1 and C.2, and the sequence (u j , v j ) 0\u2264j\u2264k and (x \u2032 j , y \u2032 j ) 0\u2264j\u2264k defined in Claim C.4. Now, let \u03c8 uj be the Parikh image of a cycle in G j on q in,j labelled by u j , and let \u03c8 vj be the Parikh image of a cycle in G j on q out,j labelled by v j . We define \u03c6 j def = r\u03c6 h0 j \u2212 (\u03c8 uj + \u03c8 vj ) where r def = 2|\u03be| 1+(d+1) d+1 . Observe that \u03c6 j (t) > 0 for every t \u2208 T j . Moreover, as \u03c6 j satisfies the homogeneous Kirchhoff system K 0 Gj and G j is strongly connected, Euler's Lemma shows that there exists a cycle on q in,j labelled by some word w j with a Parikh image equals to \u03c6 j . Notice that |w j | = t\u2208Tj \u03c6 j (t) \u2264 r|\u03be| |\u03be|\u22123 . Let s def = r|\u03be| |\u03be|\u22122 , thus such that |\u03be||w j | \u2264 s. In particular \u2206(w j ) = \u2206(\u03c6 j ) = r\u2206(\u03c6 h0 j ) \u2212 (\u2206(u j ) + \u2206(v j )). From \u2206(\u03c6 h0 j ) = n h0 j \u2212 m h0 j we deduce n 0 j = m 0 j + \u2206(w j )\n\nwhere m 0 j def = rm h0 j + \u2206(u j ) and n 0 j def = rn h0 j \u2212 \u2206(v j ). Let I j be the set of components fixed by G j . Let us prove that m 0 j , n 0 j \u2208 N d and m 0 j (i), n 0 j (i) > 0 for every i \u2208 I j . Observe that if i \u2208 I j then \u2206(u j )(i) = 0 since u j is the label of a cycle and in particular m 0 j (i) = rm h0 j (i) \u2265 0. If i \u2208 I j and x j (i) \u2208 N, because Facc Gj (x j )(i) = \u03c9 we known that \u2206(u j )(i) > 0. If i \u2208 I j and x j (i) = \u03c9, then m h0 j (i) > 0 and in particular m 0 j (i) \u2265 r + \u2206(u j )(i) \u2265 r + \u2206(u j )(i) \u2265 1 by definition of r and since |u j | < |\u03be| (d+1) d+1 . We have proven that m 0 j \u2265 0 and m 0 j (i) > 0 for every i \u2208 I j . Symmetrically, we see that n 0 j \u2208 N d and n 0 j (i) > 0 for every i \u2208 I j .\n\nNotice that x j = m h j + \u03c9m h0 j . Since u j is fireable from x j and |\u03be||u j | \u2264 r, we deduce that u j is fireable from m h j + rm h0 j , thus q in,j (m h j + rm h0 j ) uj \u2212 \u2212 \u2192 Gj q in,j (m h j + m 0 j ) .\n\nBy monotony, this means that\nq in,j (m h j + srm h0 j ) u s j \u2212 \u2212 \u2192 Gj q in,j (m h j + sm 0 j ) ,(27)\nand by symmetry, we also have q out,j (n h j + sn 0 j ) v s j \u2212 \u2212 \u2192 Gj q out,j (n h j + srn h0 j ) .\n\nMoreover, since |\u03be||w j | \u2264 s and m 0 j (i), n 0 j (i) > 0 for every i \u2208 I j , we deduce q in,j (m h j + sm 0 j ) w s j \u2212 \u2212 \u2192 q in,j (m h j + sn 0 j ) .\n\nObserve that \u03c6 h j satisfies the Kirchhoff system K Gj and \u03c6 h j (t) > 0 for every t \u2208 T j . As G j is strongly connected, Euler's Lemma shows that \u03c6 h j is the Parikh image of a path from q in,j to q out,j labelled by a word \u03c3 j . The function F j introduced in Claim C.3 shows that we have: q in,j (Facc Gj (x j )) \u03c3j \u2212 \u2212 \u2192 Gj q out,j (Bacc Gj (y j )) Notice that Facc Gj (x j ) = m vech j + \u03c9n 0 j and Bacc Gj (y j ) = n h j + \u03c9n 0 j . Since |\u03c3 j | \u2264 t\u2208Tj \u03c6 h j (t) \u2264 h \u2264 2|\u03be| 2+|\u03be| . It follows that |\u03be||\u03c3 j | \u2264 s. We deduce:\nq in,j (m h j + sn 0 j ) \u03c3j \u2212 \u2212 \u2192 Gj q out,j (n h j + sn 0 j ) .(30)\nThus, for every 0 \u2264 j \u2264 k,\nq in,j (m h j + srm h0 j ) u s j w s j \u03c3j v s j \u2212 \u2212\u2212\u2212\u2212\u2212 \u2192 Gj q out ,j (n h j + srn h0 j ) .(31)\nThis entails that \u03c3 def = (u s 0 w s 0 \u03c3 0 v s 0 )a 1 . . . (u s k w s k \u03c3 k v s k ) is in L \u03be . Notice that |\u03c3| \u2264 k + (k + 1) \u00b7 s \u00b7 (2|\u03be| (d+1) d+1 + 2|\u03be| |\u03be|\u22121 + r|\u03be| |\u03be|\u22123 ) \u2264 7|\u03be| 2(d+1) d+1 +2|\u03be|\u22121 . Observe that 2(d + 1) d+1 \u2264 |\u03be| and 7 \u2264 |\u03be|. Hence |\u03c3| \u2264 |\u03be| 3|\u03be| .\n\nFigure 1 .\n1A vector addition system with states.\n\nLemma 3. 2 .\n2Let t be a transition of a strongly connected VASS G. Then the vector space V G (t) is equal to the vector space spanned by the displacements of the cycles of G.\n\n4.2. 1 .\n1Pumpable KLM Sequences. Given a VASS G and two configurations x, y, the forward and backward accelerations are the vectors Facc G (x) and Bacc G (y) in N d \u03c9 defined respectively for every i \u2208 {1, . . . , d} as follows:\n\nFigure 6 .\n6The VASSes G 8 ex (left), G 9 ex (middle), and G 10 ex (right).\n\n\nExample 4.16. Consider again Ex. 4.12 and in particular component 1. Then B = 1 suffices, and we can unfold along the first component, yielding three new KLM triples\n\nFigure 7 .\n7A decomposition forest for \u03be ex .\n\nLemma 4 . 19 (\n419Bounded Witness). From any normal KLM sequence \u03be, we can compute in space O(\u2113(|\u03be|)) a word \u03c3 \u2208 L \u03be such that |\u03c3| \u2264 \u2113(|\u03be|) where \u2113(x) def = x 3x .Example 4.20. Let us consider examples 4.3 to 4.16. We have clean(\u03be ex ) = {\u03be 3 ex , \u03be 4 ex }, which are both bounded, and then dec(\u03be 3 ex ) = {\u03be 7 ex } and dec(\u03be 4 ex ) = \u2205. Then, \u03be 7 ex\n\nLemma 5. 3 .\n3Given a KLM sequence \u03be 0 of dimension d, we can compute fdec(\u03be 0 ) in time e(h \u03c9 d+1 (g(|\u03be 0 |))) for some fixed elementary function e and where g and h are defined in lemmata 4.17 and 4.18.\n\nCorollary 6 . 2\n62(of[10, Prop. 1]). The VASS downward language inclusion problem is in ACKERMANN, and in F d+4 if the dimension of the labelled VASSes is fixed to d.\n\n\nTheorem 6.3 ([32, Cor. 17]). The VASS downward language inclusion problem is ACKERMANN-hard, and F d -hard if the dimension of the labelled VASSes is fixed to d \u2265 3. Proof. The lower bound in the general case is stated in [32, Cor. 17]. Regarding the case in fixed dimension d \u2265 1, [32, Thm. 15] shows how to derive F d -hardness provided we can 'weakly implement' the Ackermann function A d (x) with a VASS of dimension d and size polynomial in d, where A d (x) is defined inductively by A 1 (x) def = 2x and A d+1 (x) def = A x d (1). The existence of such weak implementations is well-known; see for instance [29, Sec. 4.2.2].\n\n\nLemma B.1 (corollary of [23, Thm. 1]). Let (a i,j ) 1\u2264i\u2264m 1\u2264j\u2264n\n\nLemma 3 . 7 .\n37Assume that \u03be = (x 0 G 0 y 0 )a 1 . . . (x k G k y k ) is satisfiable. Then for every 0 \u2264 j \u2264 k we have:\u2022 For every 1 \u2264 i \u2264 d, the set of values m h j (i) where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that m h0 j (i) > 0. \u2022 For every t \u2208 T j , the set of values \u03c6 h j (t) where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that \u03c6 h0 j (t) > 0. \u2022 For every 1 \u2264 i \u2264 d, the set of values n h j (i)where h is a model of E \u03be is unbounded if, and only if, there exists a model h 0 of E 0 \u03be such that n h0 j (i) > 0.Moreover, the sum of the bounded values of E \u03be is bounded by |\u03be| |\u03be|\u22121 .\n\nC. 4 .\n4Proof of Lemma 4.19.\n\n\nand G 5 ex are displayed in Fig. 4. Applying Lem. 4.2 and Lem.4.4 \nto \u03be 5 \nex yields \n\u03be 7 \n\nex \n\ndef \n\n\n\n\nNormal KLM Sequences. A KLM sequence is said to be clean if it is satisfiable (see Sec. 3.3), strongly connected (see Sec. 4.1.1), and saturated (see Sec. 4.1.2). It is normal if it is clean, rigid (see Sec. 4.2), pumpable (see Sec. 4.2.1), and unbounded (see Sec. 4.1.3). 4.3.1. Cleaning Lemma. We can transform any KLM sequence into a finite set of clean KLM sequences thanks to the following lemma.) , \n\nwhere G 11 \nex = ({q}, {q}, {q}, \u2205) is the trivial VASS with no transitions, while G 10 \nex is \ndiscarded. \n\n4.3. \nAcknowledgementsThe authors thank the LICS 2019 reviewers for their thorough reviews. Work partially funded by ANR-17-CE40-0028 BraVAS. The second author is also partially funded by ANR-14-CE28-0005 prodaq.\nOn the upward/downward closures of Petri nets. M F Atig, R Meyer, S Muskalla, P Saivasan, 10.4230/LIPIcs.MFCS.2017.49Proc. MFCS'17. 14. LZIMFCS'1783M. F. Atig, R. Meyer, S. Muskalla, and P. Saivasan. On the upward/downward closures of Petri nets. In Proc. MFCS'17, volume 83 of Leibniz Int. Proc. Inf., pages 49:1-49:14. LZI, 2017. doi:10.4230/LIPIcs.MFCS.2017.49.\n\nReachability in two-dimensional vector addition systems with states is PSPACE-complete. M Blondin, A Finkel, S G\u00f6ller, C Haase, P Mckenzie, 10.1109/LICS.2015.14Proc. LICS'15. LICS'15IEEE PressM. Blondin, A. Finkel, S. G\u00f6ller, C. Haase, and P. McKenzie. Reachability in two-dimensional vector addition systems with states is PSPACE-complete. In Proc. LICS'15, pages 32-43. IEEE Press, 2015. doi:10.1109/LICS.2015.14.\n\nExponential space complete problems for Petri nets and commutative semigroups: Preliminary report. E Cardoza, R J Lipton, A R Meyer, 10.1145/800113.803630Proc. STOC'76. STOC'76ACME. Cardoza, R. J. Lipton, and A. R. Meyer. Exponential space complete problems for Petri nets and commutative semigroups: Preliminary report. In Proc. STOC'76, pages 50-54. ACM, 1976. doi:10.1145/800113.803630.\n\nOrdinal recursive bounds for Higman's Theorem. E A Cicho\u0144, E Tahhan Bittar, 10.1016/S0304-3975(97)00009-1Theor. Comput. Sci. 2011-2E. A. Cicho\u0144 and E. Tahhan Bittar. Ordinal recursive bounds for Higman's Theorem. Theor. Comput. Sci., 201(1-2):63-84, 1998. doi:10.1016/S0304-3975(97)00009-1 .\n\nUnboundedness problems for languages of vector addition systems. W Czerwi\u0144ski, P Hofman, G Zetzsche, 10.4230/LIPIcs.ICALP.2018.119Proc. ICALP'18. ICALP'18107W. Czerwi\u0144ski, P. Hofman, and G. Zetzsche. Unboundedness problems for languages of vector addition systems. In Proc. ICALP'18, volume 107 of LIPIcs, pages 119:1-119:15. LZI, 2018. doi:10.4230/LIPIcs.ICALP.2018.119.\n\nThe reachability problem for Petri nets is not elementary. W Czerwi\u0144ski, S Lasota, R Lazi\u0107, J Leroux, F Mazowiecki, arXiv:1809.07115Proc. STOC 2019. ACM. STOC 2019. ACMcs.LO], to appearW. Czerwi\u0144ski, S. Lasota, R. Lazi\u0107, J. Leroux, and F. Mazowiecki. The reachability problem for Petri nets is not elementary. In Proc. STOC 2019. ACM, 2019. arXiv:1809.07115 [cs.LO], to appear.\n\nProving termination with multiset orderings. N Dershowitz, Z Manna, 10.1145/359138.359142Comm. ACM. 228N. Dershowitz and Z. Manna. Proving termination with multiset orderings. Comm. ACM, 22(8):465-476, 1979. doi:10.1145/359138.359142.\n\nReachability in two-dimensional unary vector addition systems with states is NL-complete. M Englert, R Lazi\u0107, P Totzke, 10.1145/2933575.2933577Proc. LICS'16. LICS'16ACMM. Englert, R. Lazi\u0107, and P. Totzke. Reachability in two-dimensional unary vector addi- tion systems with states is NL-complete. In Proc. LICS'16, pages 477-484. ACM, 2016. doi:10.1145/2933575.2933577.\n\nReachability in succinct and parametric one-counter automata. C Haase, S Kreutzer, J Ouaknine, J Worrell, 10.1007/978-3-642-04081-8_25Proc. CONCUR'09. CONCUR'09Springer5710C. Haase, S. Kreutzer, J. Ouaknine, and J. Worrell. Reachability in succinct and parametric one-counter automata. In Proc. CONCUR'09, volume 5710 of Lect. Notes in Comput. Sci., pages 369-383. Springer, 2009. doi:10.1007/978-3-642-04081-8 25.\n\nThe downward-closure of Petri net languages. P Habermehl, R Meyer, H Wimmel, 10.1007/978-3-642-14162-1_39Proc. ICALP'10. ICALP'10Springer6199P. Habermehl, R. Meyer, and H. Wimmel. The downward-closure of Petri net languages. In Proc. ICALP'10, volume 6199 of Lect. Notes in Comput. Sci., pages 466-477. Springer, 2010. doi:10.1007/978-3-642-14162-1 39.\n\nOn the reachability problem for 5-dimensional vector addition systems. J E Hopcroft, J.-J Pansiot, 10.1016/0304-3975(79)90041-0Theor. Comput. Sci. 8J. E. Hopcroft and J.-J. Pansiot. On the reachability problem for 5-dimensional vector addi- tion systems. Theor. Comput. Sci., 8:135-159, 1979. doi:10.1016/0304-3975(79)90041-0 .\n\nParallel program schemata. R M Karp, R E Miller, 10.1016/S0022-0000(69)80011-5J. Comput. Syst. Sci. 32R. M. Karp and R. E. Miller. Parallel program schemata. J. Comput. Syst. Sci., 3(2):147-195, 1969. doi:10.1016/S0022-0000(69)80011-5.\n\nDecidability of reachability in vector addition systems. S R Kosaraju, 10.1145/800070.802201Proc. STOC'82. STOC'82ACMS. R. Kosaraju. Decidability of reachability in vector addition systems. In Proc. STOC'82, pages 267-281. ACM, 1982. doi:10.1145/800070.802201.\n\nA structure to decide reachability in Petri nets. J.-L Lambert, 10.1016/0304-3975(92)90173-DTheor. Comput. Sci. 991J.-L. Lambert. A structure to decide reachability in Petri nets. Theor. Comput. Sci., 99(1): 79-104, 1992. doi:10.1016/0304-3975(92)90173-D .\n\nVASS reachability in three steps. S Lasota, arXiv:1812.11966Preprintcs.LOS. Lasota. VASS reachability in three steps. Preprint, 2018. arXiv:1812.11966 [cs.LO].\n\nThe general vector addition system reachability problem by Presburger inductive invariants. J Leroux, 10.2168/LMCS-6(3:22)2010Logic. Meth. in Comput. Sci. 6J. Leroux. The general vector addition system reachability problem by Pres- burger inductive invariants. Logic. Meth. in Comput. Sci., 6(3:22):1-25, 2010. doi:10.2168/LMCS-6(3:22)2010.\n\nVector addition systems reachability problem (A simpler solution). J Leroux, Turing-100EPiC Series in Computing. 10EasyChairJ. Leroux. Vector addition systems reachability problem (A simpler solution). In Turing-100, volume 10 of EPiC Series in Computing, pages 214-228. EasyChair, 2012.\n\nDemystifying reachability in vector addition systems. J Leroux, S Schmitz, 10.1109/LICS.2015.16Proc. LICS'15. LICS'15IEEE PressJ. Leroux and S. Schmitz. Demystifying reachability in vector addition systems. In Proc. LICS'15, pages 56-67. IEEE Press, 2015. doi:10.1109/LICS.2015.16.\n\nThe reachability problem requires exponential space. R Lipton, 62Yale UniversityTechnical ReportR. Lipton. The reachability problem requires exponential space. Technical Report 62, Yale University, 1976.\n\nHierarchies of number-theoretic functions. M L\u00f6b, S Wainer, 10.1007/BF01967649I. Arch. Math. Logic. 131-2M. L\u00f6b and S. Wainer. Hierarchies of number-theoretic functions. I. Arch. Math. Logic, 13 (1-2):39-51, 1970. doi:10.1007/BF01967649.\n\nAn algorithm for the general Petri net reachability problem. E W Mayr, 10.1145/800076.802477Proc. STOC'81. STOC'81ACME. W. Mayr. An algorithm for the general Petri net reachability problem. In Proc. STOC'81, pages 238-246. ACM, 1981. doi:10.1145/800076.802477.\n\nThe reachability problem for VAS. H M\u00fcller, 10.1007/3-540-15204-0_21Advances in Petri Nets. Springer188H. M\u00fcller. The reachability problem for VAS. In Advances in Petri Nets 1984, volume 188 of Lect. Notes in Comput. Sci., pages 376-391. Springer, 1985. doi:10.1007/3-540-15204-0 21.\n\nMinimal solutions of linear Diophantine systems: Bounds and algorithms. L Pottier, 10.1007/3-540-53904-2_94Proc. RTA'91. RTA'91Springer488L. Pottier. Minimal solutions of linear Diophantine systems: Bounds and algorithms. In Proc. RTA'91, volume 488 of Lect. Notes in Comput. Sci., pages 162-173. Springer, 1991. doi:10.1007/3-540-53904-2 94.\n\nThe covering and boundedness problems for vector addition systems. C Rackoff, 10.1016/0304-3975(78)90036-1Theor. Comput. Sci. 62C. Rackoff. The covering and boundedness problems for vector addition systems. Theor. Comput. Sci., 6(2):223-231, 1978. doi:10.1016/0304-3975(78)90036-1 .\n\nThe mathematics of Petri nets. C Reutenauer, Masson and PrenticeC. Reutenauer. The mathematics of Petri nets. Masson and Prentice, 1990.\n\nComplexity bounds for ordinal-based termination. S Schmitz, 10.1007/978-3-319-11439-2_1Proc. RP'14. RP'14Springer8762S. Schmitz. Complexity bounds for ordinal-based termination. In Proc. RP'14, volume 8762 of Lect. Notes in Comput. Sci., pages 1-19. Springer, 2014. doi:10.1007/978-3-319-11439-2 1.\n\n. S Schmitz, 10.1145/2858784Complexity hierarchies beyond ELEMENTARY. ACM Trans. Comput. Theory. 81S. Schmitz. Complexity hierarchies beyond ELEMENTARY. ACM Trans. Comput. Theory, 8 (1):1-36, 2016. doi:10.1145/2858784.\n\nAutomata column: The complexity of reachability in vector addition systems. S Schmitz, 10.1145/2893582.2893585ACM SIGLOG News. 31S. Schmitz. Automata column: The complexity of reachability in vector addition systems. ACM SIGLOG News, 3(1):3-21, 2016. doi:10.1145/2893582.2893585 .\n\nAlgorithmic Complexity of Well-Quasi-Orders. Habilitation thesis. S Schmitz, \u00c9cole Normale Sup\u00e9rieure Paris-SaclayS. Schmitz. Algorithmic Complexity of Well-Quasi-Orders. Habilita- tion thesis,\u00c9cole Normale Sup\u00e9rieure Paris-Saclay, Nov. 2017. URL http://tel.archives-ouvertes.fr/tel-01663266.\n\nOrdinal recursion, and a refinement of the extended Grzegorczyk hierarchy. S S Wainer, 10.2307/2272973J. Symb. Log. 372S. S. Wainer. Ordinal recursion, and a refinement of the extended Grzegorczyk hierarchy. J. Symb. Log., 37(2):281-292, 1972. doi:10.2307/2272973.\n\nAn approach to computing downward closures. G Zetzsche, 10.1007/978-3-662-47666-6_35Proc. IC-ALP'15. IC-ALP'15Springer9135G. Zetzsche. An approach to computing downward closures. In Proc. IC- ALP'15, volume 9135 of Lect. Notes in Comput. Sci., pages 440-451. Springer, 2015. doi:10.1007/978-3-662-47666-6 35.\n\nThe complexity of downward closure comparisons. G Zetzsche, 10.4230/LIPIcs.ICALP.2016.123Proc. IC-ALP'16. IC-ALP'1655G. Zetzsche. The complexity of downward closure comparisons. In Proc. IC- ALP'16, volume 55 of Leibniz Int. Proc. Inf., pages 123:1-123:14. LZI, 2016. doi:10.4230/LIPIcs.ICALP.2016.123 .\n", "annotations": {"author": "[{\"end\":67,\"start\":53},{\"end\":84,\"start\":68}]", "publisher": null, "author_last_name": "[{\"end\":66,\"start\":60},{\"end\":83,\"start\":76}]", "author_first_name": "[{\"end\":59,\"start\":53},{\"end\":75,\"start\":68}]", "author_affiliation": null, "title": "[{\"end\":39,\"start\":1},{\"end\":123,\"start\":85}]", "venue": null, "abstract": "[{\"end\":1126,\"start\":246}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b7\"},\"end\":1680,\"start\":1679},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":2150,\"start\":2146},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2153,\"start\":2150},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2156,\"start\":2153},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":2159,\"start\":2156},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":2229,\"start\":2225},{\"end\":2235,\"start\":2229},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":2663,\"start\":2659},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2907,\"start\":2903},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2924,\"start\":2920},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":2973,\"start\":2969},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3022,\"start\":3018},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3138,\"start\":3134},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3441,\"start\":3437},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3467,\"start\":3464},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":3657,\"start\":3653},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4129,\"start\":4125},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":4197,\"start\":4193},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4288,\"start\":4284},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":4654,\"start\":4650},{\"end\":4699,\"start\":4691},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4717,\"start\":4713},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4947,\"start\":4943},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5056,\"start\":5052},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5250,\"start\":5247},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":5549,\"start\":5545},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5889,\"start\":5885},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":5970,\"start\":5966},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5985,\"start\":5981},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6003,\"start\":5999},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":6579,\"start\":6578},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6673,\"start\":6669},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":6743,\"start\":6739},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":6746,\"start\":6743},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6749,\"start\":6746},{\"end\":7322,\"start\":7310},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7479,\"start\":7476},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":7718,\"start\":7717},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":7847,\"start\":7843},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":8104,\"start\":8100},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9787,\"start\":9783},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10634,\"start\":10630},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":14337,\"start\":14333},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":14902,\"start\":14898},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":18182,\"start\":18179},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":18276,\"start\":18272},{\"end\":24361,\"start\":24351},{\"end\":24581,\"start\":24571},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26239,\"start\":26235},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26417,\"start\":26416},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":40161,\"start\":40158},{\"end\":40170,\"start\":40161},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":40202,\"start\":40198},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":40816,\"start\":40813},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":41040,\"start\":41036},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":49193,\"start\":49189},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":49359,\"start\":49355},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":49424,\"start\":49420},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":52898,\"start\":52895},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":54455,\"start\":54452},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":54768,\"start\":54764},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":55095,\"start\":55091},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":55230,\"start\":55226},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":55396,\"start\":55393},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":56039,\"start\":56035},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":56043,\"start\":56039},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":56047,\"start\":56043},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":56233,\"start\":56229},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":56767,\"start\":56763},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":56770,\"start\":56767},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":57195,\"start\":57191},{\"end\":57213,\"start\":57195},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":57798,\"start\":57794},{\"end\":57809,\"start\":57798},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":58198,\"start\":58194},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":58817,\"start\":58813},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":59034,\"start\":59030},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":59201,\"start\":59197},{\"end\":59210,\"start\":59201},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":59338,\"start\":59334},{\"end\":59347,\"start\":59338},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":60222,\"start\":60219},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":62566,\"start\":62562},{\"end\":62574,\"start\":62566},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":63230,\"start\":63227},{\"end\":63238,\"start\":63230},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":63467,\"start\":63463},{\"end\":63475,\"start\":63467},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":63715,\"start\":63711},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":63730,\"start\":63726},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":63748,\"start\":63744},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":64114,\"start\":64111},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":64229,\"start\":64225},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":64538,\"start\":64535},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":64579,\"start\":64576},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":64628,\"start\":64625},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":64768,\"start\":64767},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":65135,\"start\":65131},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":74983,\"start\":74979},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":75746,\"start\":75742},{\"end\":75756,\"start\":75746},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":87231,\"start\":87227}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":85946,\"start\":85896},{\"attributes\":{\"id\":\"fig_2\"},\"end\":86123,\"start\":85947},{\"attributes\":{\"id\":\"fig_5\"},\"end\":86354,\"start\":86124},{\"attributes\":{\"id\":\"fig_6\"},\"end\":86431,\"start\":86355},{\"attributes\":{\"id\":\"fig_7\"},\"end\":86599,\"start\":86432},{\"attributes\":{\"id\":\"fig_8\"},\"end\":86646,\"start\":86600},{\"attributes\":{\"id\":\"fig_10\"},\"end\":86998,\"start\":86647},{\"attributes\":{\"id\":\"fig_11\"},\"end\":87204,\"start\":86999},{\"attributes\":{\"id\":\"fig_12\"},\"end\":87372,\"start\":87205},{\"attributes\":{\"id\":\"fig_13\"},\"end\":88004,\"start\":87373},{\"attributes\":{\"id\":\"fig_14\"},\"end\":88070,\"start\":88005},{\"attributes\":{\"id\":\"fig_15\"},\"end\":88762,\"start\":88071},{\"attributes\":{\"id\":\"fig_16\"},\"end\":88792,\"start\":88763},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":88898,\"start\":88793},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":89422,\"start\":88899}]", "paragraph": "[{\"end\":1775,\"start\":1142},{\"end\":2353,\"start\":1777},{\"end\":2598,\"start\":2355},{\"end\":3307,\"start\":2600},{\"end\":4289,\"start\":3309},{\"end\":5641,\"start\":4381},{\"end\":6388,\"start\":5643},{\"end\":6580,\"start\":6390},{\"end\":6865,\"start\":6582},{\"end\":7196,\"start\":6867},{\"end\":7719,\"start\":7198},{\"end\":8136,\"start\":7721},{\"end\":8313,\"start\":8138},{\"end\":8520,\"start\":8328},{\"end\":9231,\"start\":8522},{\"end\":9541,\"start\":9328},{\"end\":10324,\"start\":9543},{\"end\":10547,\"start\":10369},{\"end\":10925,\"start\":10549},{\"end\":11183,\"start\":10927},{\"end\":11890,\"start\":11399},{\"end\":12099,\"start\":11892},{\"end\":12480,\"start\":12101},{\"end\":12802,\"start\":12482},{\"end\":12918,\"start\":12804},{\"end\":13225,\"start\":12920},{\"end\":13614,\"start\":13448},{\"end\":13757,\"start\":13686},{\"end\":13948,\"start\":13759},{\"end\":14338,\"start\":13950},{\"end\":14556,\"start\":14367},{\"end\":14977,\"start\":14688},{\"end\":15260,\"start\":14979},{\"end\":15868,\"start\":15357},{\"end\":17035,\"start\":15889},{\"end\":17224,\"start\":17087},{\"end\":17446,\"start\":17226},{\"end\":18277,\"start\":17549},{\"end\":18554,\"start\":18508},{\"end\":18611,\"start\":18556},{\"end\":18754,\"start\":18649},{\"end\":19203,\"start\":18824},{\"end\":19475,\"start\":19255},{\"end\":19884,\"start\":19477},{\"end\":20089,\"start\":19886},{\"end\":20371,\"start\":20238},{\"end\":20477,\"start\":20373},{\"end\":21014,\"start\":20857},{\"end\":21089,\"start\":21016},{\"end\":21451,\"start\":21091},{\"end\":21620,\"start\":21506},{\"end\":21993,\"start\":21622},{\"end\":22185,\"start\":21995},{\"end\":22320,\"start\":22224},{\"end\":22460,\"start\":22407},{\"end\":22617,\"start\":22462},{\"end\":22735,\"start\":22619},{\"end\":23317,\"start\":23114},{\"end\":24006,\"start\":23934},{\"end\":24466,\"start\":24038},{\"end\":24776,\"start\":24468},{\"end\":25563,\"start\":24803},{\"end\":25914,\"start\":25565},{\"end\":26343,\"start\":25947},{\"end\":26418,\"start\":26372},{\"end\":26878,\"start\":26637},{\"end\":27059,\"start\":26880},{\"end\":27664,\"start\":27528},{\"end\":28389,\"start\":28275},{\"end\":28907,\"start\":28645},{\"end\":29135,\"start\":28909},{\"end\":29872,\"start\":29524},{\"end\":30270,\"start\":29874},{\"end\":30557,\"start\":30272},{\"end\":30916,\"start\":30755},{\"end\":31771,\"start\":31140},{\"end\":32723,\"start\":32482},{\"end\":33782,\"start\":33028},{\"end\":34437,\"start\":34240},{\"end\":34758,\"start\":34516},{\"end\":35031,\"start\":34951},{\"end\":35286,\"start\":35033},{\"end\":35610,\"start\":35288},{\"end\":35799,\"start\":35689},{\"end\":36082,\"start\":35972},{\"end\":36387,\"start\":36330},{\"end\":36518,\"start\":36466},{\"end\":36950,\"start\":36520},{\"end\":37395,\"start\":36995},{\"end\":37848,\"start\":37397},{\"end\":37996,\"start\":37850},{\"end\":38392,\"start\":38126},{\"end\":38538,\"start\":38469},{\"end\":38767,\"start\":38707},{\"end\":39406,\"start\":38996},{\"end\":39775,\"start\":39408},{\"end\":40286,\"start\":39777},{\"end\":40953,\"start\":40288},{\"end\":41740,\"start\":40955},{\"end\":41988,\"start\":41742},{\"end\":42222,\"start\":42046},{\"end\":42456,\"start\":42224},{\"end\":42781,\"start\":42458},{\"end\":42949,\"start\":42783},{\"end\":43554,\"start\":42951},{\"end\":44023,\"start\":43653},{\"end\":44106,\"start\":44065},{\"end\":44170,\"start\":44108},{\"end\":45359,\"start\":44172},{\"end\":46166,\"start\":45483},{\"end\":46900,\"start\":46184},{\"end\":47121,\"start\":46925},{\"end\":47376,\"start\":47123},{\"end\":48032,\"start\":47424},{\"end\":48603,\"start\":48059},{\"end\":49425,\"start\":48631},{\"end\":49701,\"start\":49460},{\"end\":50003,\"start\":49764},{\"end\":50556,\"start\":50038},{\"end\":51015,\"start\":50594},{\"end\":51273,\"start\":51053},{\"end\":51749,\"start\":51299},{\"end\":52105,\"start\":51766},{\"end\":52497,\"start\":52107},{\"end\":52749,\"start\":52562},{\"end\":53108,\"start\":52751},{\"end\":54307,\"start\":53261},{\"end\":54578,\"start\":54336},{\"end\":55044,\"start\":54607},{\"end\":55105,\"start\":55079},{\"end\":55240,\"start\":55136},{\"end\":55405,\"start\":55291},{\"end\":55551,\"start\":55464},{\"end\":55702,\"start\":55553},{\"end\":55961,\"start\":55907},{\"end\":56437,\"start\":55990},{\"end\":56783,\"start\":56528},{\"end\":57214,\"start\":56822},{\"end\":57838,\"start\":57216},{\"end\":59400,\"start\":57867},{\"end\":59507,\"start\":59479},{\"end\":59995,\"start\":59525},{\"end\":60454,\"start\":60040},{\"end\":60940,\"start\":60456},{\"end\":61569,\"start\":61020},{\"end\":62003,\"start\":61571},{\"end\":63615,\"start\":62005},{\"end\":64373,\"start\":63638},{\"end\":64950,\"start\":64375},{\"end\":65043,\"start\":64978},{\"end\":65136,\"start\":65045},{\"end\":65167,\"start\":65138},{\"end\":65348,\"start\":65228},{\"end\":65529,\"start\":65350},{\"end\":65601,\"start\":65531},{\"end\":65632,\"start\":65603},{\"end\":65983,\"start\":65693},{\"end\":66142,\"start\":65985},{\"end\":66593,\"start\":66144},{\"end\":66761,\"start\":66659},{\"end\":67256,\"start\":66763},{\"end\":67848,\"start\":67438},{\"end\":68303,\"start\":67850},{\"end\":69254,\"start\":68305},{\"end\":69766,\"start\":69256},{\"end\":70014,\"start\":69768},{\"end\":70185,\"start\":70072},{\"end\":70402,\"start\":70187},{\"end\":71340,\"start\":70465},{\"end\":72001,\"start\":71342},{\"end\":72747,\"start\":72325},{\"end\":73013,\"start\":72749},{\"end\":73408,\"start\":73353},{\"end\":73619,\"start\":73474},{\"end\":74393,\"start\":73793},{\"end\":74888,\"start\":74395},{\"end\":75066,\"start\":74924},{\"end\":75282,\"start\":75162},{\"end\":75888,\"start\":75367},{\"end\":76446,\"start\":75939},{\"end\":76584,\"start\":76448},{\"end\":77050,\"start\":76621},{\"end\":77316,\"start\":77087},{\"end\":77354,\"start\":77318},{\"end\":77471,\"start\":77356},{\"end\":77889,\"start\":77473},{\"end\":78011,\"start\":77891},{\"end\":78123,\"start\":78099},{\"end\":78243,\"start\":78142},{\"end\":78665,\"start\":78245},{\"end\":78797,\"start\":78667},{\"end\":78819,\"start\":78799},{\"end\":79043,\"start\":78821},{\"end\":80351,\"start\":79045},{\"end\":81248,\"start\":80405},{\"end\":81707,\"start\":81250},{\"end\":81948,\"start\":81709},{\"end\":82689,\"start\":81950},{\"end\":83598,\"start\":82691},{\"end\":84331,\"start\":83600},{\"end\":84541,\"start\":84333},{\"end\":84571,\"start\":84543},{\"end\":84745,\"start\":84645},{\"end\":84899,\"start\":84747},{\"end\":85430,\"start\":84901},{\"end\":85526,\"start\":85500},{\"end\":85895,\"start\":85623}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":4380,\"start\":4290},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9327,\"start\":9232},{\"attributes\":{\"id\":\"formula_2\"},\"end\":10368,\"start\":10325},{\"attributes\":{\"id\":\"formula_3\"},\"end\":11398,\"start\":11184},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13447,\"start\":13226},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13685,\"start\":13615},{\"attributes\":{\"id\":\"formula_6\"},\"end\":14687,\"start\":14557},{\"attributes\":{\"id\":\"formula_7\"},\"end\":15356,\"start\":15261},{\"attributes\":{\"id\":\"formula_8\"},\"end\":17086,\"start\":17036},{\"attributes\":{\"id\":\"formula_9\"},\"end\":17548,\"start\":17447},{\"attributes\":{\"id\":\"formula_10\"},\"end\":18507,\"start\":18278},{\"attributes\":{\"id\":\"formula_11\"},\"end\":18648,\"start\":18612},{\"attributes\":{\"id\":\"formula_12\"},\"end\":18823,\"start\":18755},{\"attributes\":{\"id\":\"formula_13\"},\"end\":19254,\"start\":19204},{\"attributes\":{\"id\":\"formula_14\"},\"end\":20237,\"start\":20090},{\"attributes\":{\"id\":\"formula_15\"},\"end\":20856,\"start\":20478},{\"attributes\":{\"id\":\"formula_16\"},\"end\":21505,\"start\":21452},{\"attributes\":{\"id\":\"formula_17\"},\"end\":22223,\"start\":22186},{\"attributes\":{\"id\":\"formula_18\"},\"end\":22406,\"start\":22321},{\"attributes\":{\"id\":\"formula_19\"},\"end\":23113,\"start\":22736},{\"attributes\":{\"id\":\"formula_20\"},\"end\":23933,\"start\":23318},{\"attributes\":{\"id\":\"formula_21\"},\"end\":24802,\"start\":24777},{\"attributes\":{\"id\":\"formula_22\"},\"end\":25946,\"start\":25915},{\"attributes\":{\"id\":\"formula_23\"},\"end\":26636,\"start\":26419},{\"attributes\":{\"id\":\"formula_24\"},\"end\":27527,\"start\":27060},{\"attributes\":{\"id\":\"formula_25\"},\"end\":28274,\"start\":27665},{\"attributes\":{\"id\":\"formula_26\"},\"end\":28644,\"start\":28390},{\"attributes\":{\"id\":\"formula_27\"},\"end\":29523,\"start\":29136},{\"attributes\":{\"id\":\"formula_28\"},\"end\":30754,\"start\":30558},{\"attributes\":{\"id\":\"formula_29\"},\"end\":31139,\"start\":30917},{\"attributes\":{\"id\":\"formula_30\"},\"end\":32481,\"start\":31772},{\"attributes\":{\"id\":\"formula_31\"},\"end\":33027,\"start\":32724},{\"attributes\":{\"id\":\"formula_32\"},\"end\":33954,\"start\":33783},{\"attributes\":{\"id\":\"formula_33\"},\"end\":34069,\"start\":33954},{\"attributes\":{\"id\":\"formula_34\"},\"end\":34239,\"start\":34069},{\"attributes\":{\"id\":\"formula_35\"},\"end\":34515,\"start\":34438},{\"attributes\":{\"id\":\"formula_36\"},\"end\":34950,\"start\":34759},{\"attributes\":{\"id\":\"formula_37\"},\"end\":35688,\"start\":35611},{\"attributes\":{\"id\":\"formula_38\"},\"end\":35971,\"start\":35800},{\"attributes\":{\"id\":\"formula_39\"},\"end\":36329,\"start\":36083},{\"attributes\":{\"id\":\"formula_40\"},\"end\":36465,\"start\":36388},{\"attributes\":{\"id\":\"formula_41\"},\"end\":36994,\"start\":36951},{\"attributes\":{\"id\":\"formula_42\"},\"end\":38125,\"start\":37997},{\"attributes\":{\"id\":\"formula_43\"},\"end\":38468,\"start\":38393},{\"attributes\":{\"id\":\"formula_44\"},\"end\":38706,\"start\":38539},{\"attributes\":{\"id\":\"formula_45\"},\"end\":38995,\"start\":38768},{\"attributes\":{\"id\":\"formula_46\"},\"end\":42045,\"start\":41989},{\"attributes\":{\"id\":\"formula_47\"},\"end\":43652,\"start\":43555},{\"attributes\":{\"id\":\"formula_48\"},\"end\":44064,\"start\":44024},{\"attributes\":{\"id\":\"formula_49\"},\"end\":45482,\"start\":45360},{\"attributes\":{\"id\":\"formula_50\"},\"end\":46183,\"start\":46167},{\"attributes\":{\"id\":\"formula_51\"},\"end\":47423,\"start\":47377},{\"attributes\":{\"id\":\"formula_52\"},\"end\":49763,\"start\":49702},{\"attributes\":{\"id\":\"formula_53\"},\"end\":50037,\"start\":50004},{\"attributes\":{\"id\":\"formula_54\"},\"end\":51052,\"start\":51016},{\"attributes\":{\"id\":\"formula_55\"},\"end\":51298,\"start\":51274},{\"attributes\":{\"id\":\"formula_56\"},\"end\":52561,\"start\":52498},{\"attributes\":{\"id\":\"formula_57\"},\"end\":53260,\"start\":53109},{\"attributes\":{\"id\":\"formula_58\"},\"end\":54335,\"start\":54308},{\"attributes\":{\"id\":\"formula_59\"},\"end\":54606,\"start\":54579},{\"attributes\":{\"id\":\"formula_60\"},\"end\":55078,\"start\":55045},{\"attributes\":{\"id\":\"formula_61\"},\"end\":55135,\"start\":55106},{\"attributes\":{\"id\":\"formula_62\"},\"end\":55290,\"start\":55241},{\"attributes\":{\"id\":\"formula_63\"},\"end\":55463,\"start\":55406},{\"attributes\":{\"id\":\"formula_64\"},\"end\":55906,\"start\":55703},{\"attributes\":{\"id\":\"formula_65\"},\"end\":56527,\"start\":56493},{\"attributes\":{\"id\":\"formula_66\"},\"end\":56821,\"start\":56784},{\"attributes\":{\"id\":\"formula_67\"},\"end\":61019,\"start\":60941},{\"attributes\":{\"id\":\"formula_68\"},\"end\":65227,\"start\":65168},{\"attributes\":{\"id\":\"formula_69\"},\"end\":65692,\"start\":65633},{\"attributes\":{\"id\":\"formula_70\"},\"end\":66658,\"start\":66594},{\"attributes\":{\"id\":\"formula_71\"},\"end\":67437,\"start\":67257},{\"attributes\":{\"id\":\"formula_72\"},\"end\":70071,\"start\":70015},{\"attributes\":{\"id\":\"formula_73\"},\"end\":70464,\"start\":70403},{\"attributes\":{\"id\":\"formula_74\"},\"end\":72324,\"start\":72033},{\"attributes\":{\"id\":\"formula_75\"},\"end\":73352,\"start\":73014},{\"attributes\":{\"id\":\"formula_76\"},\"end\":73473,\"start\":73409},{\"attributes\":{\"id\":\"formula_77\"},\"end\":73792,\"start\":73620},{\"attributes\":{\"id\":\"formula_78\"},\"end\":75161,\"start\":75067},{\"attributes\":{\"id\":\"formula_79\"},\"end\":75366,\"start\":75283},{\"attributes\":{\"id\":\"formula_80\"},\"end\":75938,\"start\":75889},{\"attributes\":{\"id\":\"formula_81\"},\"end\":76620,\"start\":76585},{\"attributes\":{\"id\":\"formula_82\"},\"end\":78098,\"start\":78012},{\"attributes\":{\"id\":\"formula_83\"},\"end\":78141,\"start\":78124},{\"attributes\":{\"id\":\"formula_84\"},\"end\":80404,\"start\":80352},{\"attributes\":{\"id\":\"formula_87\"},\"end\":84644,\"start\":84572},{\"attributes\":{\"id\":\"formula_90\"},\"end\":85499,\"start\":85431},{\"attributes\":{\"id\":\"formula_91\"},\"end\":85622,\"start\":85527}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1140,\"start\":1128},{\"attributes\":{\"n\":\"2.\"},\"end\":8326,\"start\":8316},{\"attributes\":{\"n\":\"3.\"},\"end\":14365,\"start\":14341},{\"attributes\":{\"n\":\"3.2.\"},\"end\":15887,\"start\":15871},{\"attributes\":{\"n\":\"4.\"},\"end\":24036,\"start\":24009},{\"attributes\":{\"n\":\"4.1.\"},\"end\":26370,\"start\":26346},{\"attributes\":{\"n\":\"4.3.2.\"},\"end\":46923,\"start\":46903},{\"attributes\":{\"n\":\"4.3.3.\"},\"end\":48057,\"start\":48035},{\"attributes\":{\"n\":\"5.\"},\"end\":48629,\"start\":48606},{\"attributes\":{\"n\":\"5.1.\"},\"end\":49458,\"start\":49428},{\"attributes\":{\"n\":\"5.1.1.\"},\"end\":50592,\"start\":50559},{\"attributes\":{\"n\":\"5.1.2.\"},\"end\":51764,\"start\":51752},{\"attributes\":{\"n\":\"5.2.\"},\"end\":55988,\"start\":55964},{\"attributes\":{\"n\":\"5.2.1.\"},\"end\":56492,\"start\":56440},{\"attributes\":{\"n\":\"5.2.2.\"},\"end\":57865,\"start\":57841},{\"end\":59477,\"start\":59403},{\"attributes\":{\"n\":\"5.2.3.\"},\"end\":59523,\"start\":59510},{\"attributes\":{\"n\":\"6.\"},\"end\":60038,\"start\":59998},{\"attributes\":{\"n\":\"7.\"},\"end\":63636,\"start\":63618},{\"end\":64976,\"start\":64953},{\"end\":72032,\"start\":72004},{\"end\":74922,\"start\":74891},{\"end\":77085,\"start\":77053},{\"end\":85907,\"start\":85897},{\"end\":85960,\"start\":85948},{\"end\":86133,\"start\":86125},{\"end\":86366,\"start\":86356},{\"end\":86611,\"start\":86601},{\"end\":86662,\"start\":86648},{\"end\":87012,\"start\":87000},{\"end\":87221,\"start\":87206},{\"end\":88085,\"start\":88072},{\"end\":88770,\"start\":88764}]", "table": "[{\"end\":88898,\"start\":88857},{\"end\":89422,\"start\":89302}]", "figure_caption": "[{\"end\":85946,\"start\":85909},{\"end\":86123,\"start\":85962},{\"end\":86354,\"start\":86135},{\"end\":86431,\"start\":86368},{\"end\":86599,\"start\":86434},{\"end\":86646,\"start\":86613},{\"end\":86998,\"start\":86666},{\"end\":87204,\"start\":87014},{\"end\":87372,\"start\":87224},{\"end\":88004,\"start\":87375},{\"end\":88070,\"start\":88007},{\"end\":88762,\"start\":88088},{\"end\":88792,\"start\":88772},{\"end\":88857,\"start\":88795},{\"end\":89302,\"start\":88901}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":1289,\"start\":1283},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":1569,\"start\":1563},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":3961,\"start\":3955},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":4207,\"start\":4199},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":10948,\"start\":10940},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33653,\"start\":33648},{\"end\":33700,\"start\":33694},{\"end\":41519,\"start\":41501},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":45082,\"start\":45073},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":45356,\"start\":45347},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":45538,\"start\":45532},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":45792,\"start\":45783},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":45930,\"start\":45921},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":48487,\"start\":48481},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":57821,\"start\":57815},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":61779,\"start\":61769},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":61797,\"start\":61788},{\"end\":69573,\"start\":69566}]", "bib_author_first_name": "[{\"end\":89678,\"start\":89677},{\"end\":89680,\"start\":89679},{\"end\":89688,\"start\":89687},{\"end\":89697,\"start\":89696},{\"end\":89709,\"start\":89708},{\"end\":90085,\"start\":90084},{\"end\":90096,\"start\":90095},{\"end\":90106,\"start\":90105},{\"end\":90116,\"start\":90115},{\"end\":90125,\"start\":90124},{\"end\":90513,\"start\":90512},{\"end\":90524,\"start\":90523},{\"end\":90526,\"start\":90525},{\"end\":90536,\"start\":90535},{\"end\":90538,\"start\":90537},{\"end\":90852,\"start\":90851},{\"end\":90854,\"start\":90853},{\"end\":90864,\"start\":90863},{\"end\":90871,\"start\":90865},{\"end\":91163,\"start\":91162},{\"end\":91177,\"start\":91176},{\"end\":91187,\"start\":91186},{\"end\":91530,\"start\":91529},{\"end\":91544,\"start\":91543},{\"end\":91554,\"start\":91553},{\"end\":91563,\"start\":91562},{\"end\":91573,\"start\":91572},{\"end\":91895,\"start\":91894},{\"end\":91909,\"start\":91908},{\"end\":92176,\"start\":92175},{\"end\":92187,\"start\":92186},{\"end\":92196,\"start\":92195},{\"end\":92519,\"start\":92518},{\"end\":92528,\"start\":92527},{\"end\":92540,\"start\":92539},{\"end\":92552,\"start\":92551},{\"end\":92918,\"start\":92917},{\"end\":92931,\"start\":92930},{\"end\":92940,\"start\":92939},{\"end\":93298,\"start\":93297},{\"end\":93300,\"start\":93299},{\"end\":93315,\"start\":93311},{\"end\":93583,\"start\":93582},{\"end\":93585,\"start\":93584},{\"end\":93593,\"start\":93592},{\"end\":93595,\"start\":93594},{\"end\":93850,\"start\":93849},{\"end\":93852,\"start\":93851},{\"end\":94108,\"start\":94104},{\"end\":94347,\"start\":94346},{\"end\":94566,\"start\":94565},{\"end\":94883,\"start\":94882},{\"end\":95159,\"start\":95158},{\"end\":95169,\"start\":95168},{\"end\":95441,\"start\":95440},{\"end\":95636,\"start\":95635},{\"end\":95643,\"start\":95642},{\"end\":95893,\"start\":95892},{\"end\":95895,\"start\":95894},{\"end\":96128,\"start\":96127},{\"end\":96451,\"start\":96450},{\"end\":96790,\"start\":96789},{\"end\":97038,\"start\":97037},{\"end\":97194,\"start\":97193},{\"end\":97447,\"start\":97446},{\"end\":97741,\"start\":97740},{\"end\":98013,\"start\":98012},{\"end\":98316,\"start\":98315},{\"end\":98318,\"start\":98317},{\"end\":98551,\"start\":98550},{\"end\":98865,\"start\":98864}]", "bib_author_last_name": "[{\"end\":89685,\"start\":89681},{\"end\":89694,\"start\":89689},{\"end\":89706,\"start\":89698},{\"end\":89718,\"start\":89710},{\"end\":90093,\"start\":90086},{\"end\":90103,\"start\":90097},{\"end\":90113,\"start\":90107},{\"end\":90122,\"start\":90117},{\"end\":90134,\"start\":90126},{\"end\":90521,\"start\":90514},{\"end\":90533,\"start\":90527},{\"end\":90544,\"start\":90539},{\"end\":90861,\"start\":90855},{\"end\":90878,\"start\":90872},{\"end\":91174,\"start\":91164},{\"end\":91184,\"start\":91178},{\"end\":91196,\"start\":91188},{\"end\":91541,\"start\":91531},{\"end\":91551,\"start\":91545},{\"end\":91560,\"start\":91555},{\"end\":91570,\"start\":91564},{\"end\":91584,\"start\":91574},{\"end\":91906,\"start\":91896},{\"end\":91915,\"start\":91910},{\"end\":92184,\"start\":92177},{\"end\":92193,\"start\":92188},{\"end\":92203,\"start\":92197},{\"end\":92525,\"start\":92520},{\"end\":92537,\"start\":92529},{\"end\":92549,\"start\":92541},{\"end\":92560,\"start\":92553},{\"end\":92928,\"start\":92919},{\"end\":92937,\"start\":92932},{\"end\":92947,\"start\":92941},{\"end\":93309,\"start\":93301},{\"end\":93323,\"start\":93316},{\"end\":93590,\"start\":93586},{\"end\":93602,\"start\":93596},{\"end\":93861,\"start\":93853},{\"end\":94116,\"start\":94109},{\"end\":94354,\"start\":94348},{\"end\":94573,\"start\":94567},{\"end\":94890,\"start\":94884},{\"end\":95166,\"start\":95160},{\"end\":95177,\"start\":95170},{\"end\":95448,\"start\":95442},{\"end\":95640,\"start\":95637},{\"end\":95650,\"start\":95644},{\"end\":95900,\"start\":95896},{\"end\":96135,\"start\":96129},{\"end\":96459,\"start\":96452},{\"end\":96798,\"start\":96791},{\"end\":97049,\"start\":97039},{\"end\":97202,\"start\":97195},{\"end\":97455,\"start\":97448},{\"end\":97749,\"start\":97742},{\"end\":98021,\"start\":98014},{\"end\":98325,\"start\":98319},{\"end\":98560,\"start\":98552},{\"end\":98874,\"start\":98866}]", "bib_entry": "[{\"attributes\":{\"doi\":\"10.4230/LIPIcs.MFCS.2017.49\",\"id\":\"b0\",\"matched_paper_id\":4671763},\"end\":89994,\"start\":89630},{\"attributes\":{\"doi\":\"10.1109/LICS.2015.14\",\"id\":\"b1\",\"matched_paper_id\":8050534},\"end\":90411,\"start\":89996},{\"attributes\":{\"doi\":\"10.1145/800113.803630\",\"id\":\"b2\",\"matched_paper_id\":15203635},\"end\":90802,\"start\":90413},{\"attributes\":{\"doi\":\"10.1016/S0304-3975(97)00009-1\",\"id\":\"b3\",\"matched_paper_id\":32597391},\"end\":91095,\"start\":90804},{\"attributes\":{\"doi\":\"10.4230/LIPIcs.ICALP.2018.119\",\"id\":\"b4\",\"matched_paper_id\":3350909},\"end\":91468,\"start\":91097},{\"attributes\":{\"doi\":\"arXiv:1809.07115\",\"id\":\"b5\",\"matched_paper_id\":52301597},\"end\":91847,\"start\":91470},{\"attributes\":{\"doi\":\"10.1145/359138.359142\",\"id\":\"b6\",\"matched_paper_id\":2136945},\"end\":92083,\"start\":91849},{\"attributes\":{\"doi\":\"10.1145/2933575.2933577\",\"id\":\"b7\",\"matched_paper_id\":14316067},\"end\":92454,\"start\":92085},{\"attributes\":{\"doi\":\"10.1007/978-3-642-04081-8_25\",\"id\":\"b8\",\"matched_paper_id\":56046971},\"end\":92870,\"start\":92456},{\"attributes\":{\"doi\":\"10.1007/978-3-642-14162-1_39\",\"id\":\"b9\",\"matched_paper_id\":575390},\"end\":93224,\"start\":92872},{\"attributes\":{\"doi\":\"10.1016/0304-3975(79)90041-0\",\"id\":\"b10\",\"matched_paper_id\":43372474},\"end\":93553,\"start\":93226},{\"attributes\":{\"doi\":\"10.1016/S0022-0000(69)80011-5\",\"id\":\"b11\",\"matched_paper_id\":31976931},\"end\":93790,\"start\":93555},{\"attributes\":{\"doi\":\"10.1145/800070.802201\",\"id\":\"b12\",\"matched_paper_id\":17177691},\"end\":94052,\"start\":93792},{\"attributes\":{\"doi\":\"10.1016/0304-3975(92)90173-D\",\"id\":\"b13\",\"matched_paper_id\":29728488},\"end\":94310,\"start\":94054},{\"attributes\":{\"doi\":\"arXiv:1812.11966\",\"id\":\"b14\"},\"end\":94471,\"start\":94312},{\"attributes\":{\"doi\":\"10.2168/LMCS-6(3:22)2010\",\"id\":\"b15\",\"matched_paper_id\":17972832},\"end\":94813,\"start\":94473},{\"attributes\":{\"doi\":\"Turing-100\",\"id\":\"b16\",\"matched_paper_id\":2245739},\"end\":95102,\"start\":94815},{\"attributes\":{\"doi\":\"10.1109/LICS.2015.16\",\"id\":\"b17\",\"matched_paper_id\":11306975},\"end\":95385,\"start\":95104},{\"attributes\":{\"doi\":\"62\",\"id\":\"b18\"},\"end\":95590,\"start\":95387},{\"attributes\":{\"doi\":\"10.1007/BF01967649\",\"id\":\"b19\",\"matched_paper_id\":121640169},\"end\":95829,\"start\":95592},{\"attributes\":{\"doi\":\"10.1145/800076.802477\",\"id\":\"b20\",\"matched_paper_id\":5884932},\"end\":96091,\"start\":95831},{\"attributes\":{\"doi\":\"10.1007/3-540-15204-0_21\",\"id\":\"b21\",\"matched_paper_id\":26804395},\"end\":96376,\"start\":96093},{\"attributes\":{\"doi\":\"10.1007/3-540-53904-2_94\",\"id\":\"b22\",\"matched_paper_id\":52854223},\"end\":96720,\"start\":96378},{\"attributes\":{\"doi\":\"10.1016/0304-3975(78)90036-1\",\"id\":\"b23\",\"matched_paper_id\":24271985},\"end\":97004,\"start\":96722},{\"attributes\":{\"id\":\"b24\"},\"end\":97142,\"start\":97006},{\"attributes\":{\"doi\":\"10.1007/978-3-319-11439-2_1\",\"id\":\"b25\",\"matched_paper_id\":38432381},\"end\":97442,\"start\":97144},{\"attributes\":{\"doi\":\"10.1145/2858784\",\"id\":\"b26\"},\"end\":97662,\"start\":97444},{\"attributes\":{\"doi\":\"10.1145/2893582.2893585\",\"id\":\"b27\",\"matched_paper_id\":18538649},\"end\":97944,\"start\":97664},{\"attributes\":{\"id\":\"b28\"},\"end\":98238,\"start\":97946},{\"attributes\":{\"doi\":\"10.2307/2272973\",\"id\":\"b29\",\"matched_paper_id\":34993575},\"end\":98504,\"start\":98240},{\"attributes\":{\"doi\":\"10.1007/978-3-662-47666-6_35\",\"id\":\"b30\",\"matched_paper_id\":14921},\"end\":98814,\"start\":98506},{\"attributes\":{\"doi\":\"10.4230/LIPIcs.ICALP.2016.123\",\"id\":\"b31\",\"matched_paper_id\":7430854},\"end\":99119,\"start\":98816}]", "bib_title": "[{\"end\":89675,\"start\":89630},{\"end\":90082,\"start\":89996},{\"end\":90510,\"start\":90413},{\"end\":90849,\"start\":90804},{\"end\":91160,\"start\":91097},{\"end\":91527,\"start\":91470},{\"end\":91892,\"start\":91849},{\"end\":92173,\"start\":92085},{\"end\":92516,\"start\":92456},{\"end\":92915,\"start\":92872},{\"end\":93295,\"start\":93226},{\"end\":93580,\"start\":93555},{\"end\":93847,\"start\":93792},{\"end\":94102,\"start\":94054},{\"end\":94563,\"start\":94473},{\"end\":94880,\"start\":94815},{\"end\":95156,\"start\":95104},{\"end\":95633,\"start\":95592},{\"end\":95890,\"start\":95831},{\"end\":96125,\"start\":96093},{\"end\":96448,\"start\":96378},{\"end\":96787,\"start\":96722},{\"end\":97191,\"start\":97144},{\"end\":97738,\"start\":97664},{\"end\":98313,\"start\":98240},{\"end\":98548,\"start\":98506},{\"end\":98862,\"start\":98816}]", "bib_author": "[{\"end\":89687,\"start\":89677},{\"end\":89696,\"start\":89687},{\"end\":89708,\"start\":89696},{\"end\":89720,\"start\":89708},{\"end\":90095,\"start\":90084},{\"end\":90105,\"start\":90095},{\"end\":90115,\"start\":90105},{\"end\":90124,\"start\":90115},{\"end\":90136,\"start\":90124},{\"end\":90523,\"start\":90512},{\"end\":90535,\"start\":90523},{\"end\":90546,\"start\":90535},{\"end\":90863,\"start\":90851},{\"end\":90880,\"start\":90863},{\"end\":91176,\"start\":91162},{\"end\":91186,\"start\":91176},{\"end\":91198,\"start\":91186},{\"end\":91543,\"start\":91529},{\"end\":91553,\"start\":91543},{\"end\":91562,\"start\":91553},{\"end\":91572,\"start\":91562},{\"end\":91586,\"start\":91572},{\"end\":91908,\"start\":91894},{\"end\":91917,\"start\":91908},{\"end\":92186,\"start\":92175},{\"end\":92195,\"start\":92186},{\"end\":92205,\"start\":92195},{\"end\":92527,\"start\":92518},{\"end\":92539,\"start\":92527},{\"end\":92551,\"start\":92539},{\"end\":92562,\"start\":92551},{\"end\":92930,\"start\":92917},{\"end\":92939,\"start\":92930},{\"end\":92949,\"start\":92939},{\"end\":93311,\"start\":93297},{\"end\":93325,\"start\":93311},{\"end\":93592,\"start\":93582},{\"end\":93604,\"start\":93592},{\"end\":93863,\"start\":93849},{\"end\":94118,\"start\":94104},{\"end\":94356,\"start\":94346},{\"end\":94575,\"start\":94565},{\"end\":94892,\"start\":94882},{\"end\":95168,\"start\":95158},{\"end\":95179,\"start\":95168},{\"end\":95450,\"start\":95440},{\"end\":95642,\"start\":95635},{\"end\":95652,\"start\":95642},{\"end\":95902,\"start\":95892},{\"end\":96137,\"start\":96127},{\"end\":96461,\"start\":96450},{\"end\":96800,\"start\":96789},{\"end\":97051,\"start\":97037},{\"end\":97204,\"start\":97193},{\"end\":97457,\"start\":97446},{\"end\":97751,\"start\":97740},{\"end\":98023,\"start\":98012},{\"end\":98327,\"start\":98315},{\"end\":98562,\"start\":98550},{\"end\":98876,\"start\":98864}]", "bib_venue": "[{\"end\":89760,\"start\":89747},{\"end\":90169,\"start\":90156},{\"end\":90580,\"start\":90567},{\"end\":90927,\"start\":90909},{\"end\":91241,\"start\":91227},{\"end\":91622,\"start\":91602},{\"end\":91947,\"start\":91938},{\"end\":92241,\"start\":92228},{\"end\":92605,\"start\":92590},{\"end\":92991,\"start\":92977},{\"end\":93371,\"start\":93353},{\"end\":93653,\"start\":93633},{\"end\":93897,\"start\":93884},{\"end\":94164,\"start\":94146},{\"end\":94344,\"start\":94312},{\"end\":94626,\"start\":94599},{\"end\":94926,\"start\":94902},{\"end\":95212,\"start\":95199},{\"end\":95438,\"start\":95387},{\"end\":95690,\"start\":95670},{\"end\":95936,\"start\":95923},{\"end\":96183,\"start\":96161},{\"end\":96497,\"start\":96485},{\"end\":96846,\"start\":96828},{\"end\":97035,\"start\":97006},{\"end\":97242,\"start\":97231},{\"end\":97539,\"start\":97472},{\"end\":97789,\"start\":97774},{\"end\":98010,\"start\":97946},{\"end\":98354,\"start\":98342},{\"end\":98605,\"start\":98590},{\"end\":98920,\"start\":98905},{\"end\":89776,\"start\":89769},{\"end\":90178,\"start\":90171},{\"end\":90589,\"start\":90582},{\"end\":91251,\"start\":91243},{\"end\":91638,\"start\":91624},{\"end\":92250,\"start\":92243},{\"end\":92616,\"start\":92607},{\"end\":93001,\"start\":92993},{\"end\":93906,\"start\":93899},{\"end\":95221,\"start\":95214},{\"end\":95945,\"start\":95938},{\"end\":96505,\"start\":96499},{\"end\":97249,\"start\":97244},{\"end\":98616,\"start\":98607},{\"end\":98931,\"start\":98922}]"}}}, "year": 2023, "month": 12, "day": 17}