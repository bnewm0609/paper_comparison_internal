{"id": 62841513, "updated": "2023-10-04 06:48:29.773", "metadata": {"title": "Coverability in 1-VASS with Disequality Tests", "authors": "[{\"first\":\"Shaull\",\"last\":\"Almagor\",\"middle\":[]},{\"first\":\"Nathann\",\"last\":\"Cohen\",\"middle\":[]},{\"first\":\"Guillermo\",\"last\":\"P'erez\",\"middle\":[\"A.\"]},{\"first\":\"Mahsa\",\"last\":\"Shirmohammadi\",\"middle\":[]},{\"first\":\"James\",\"last\":\"Worrell\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2019, "month": 2, "day": 18}, "abstract": "We show that the control-state reachability problem for one-dimensional vector addition systems with disequality tests is solvable in polynomial time. For the test-free case we moreover show that control-state reachability is in NC, i.e., solvable in polylogarithmic parallel time.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1902.06576", "mag": "3082800586", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/concur/AlmagorCPS020", "doi": "10.4230/lipics.concur.2020.38"}}, "content": {"source": {"pdf_hash": "3742efc892231681521056c61db9da15554c37f6", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1902.06576v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "cd114d0a134d6cbba1326b405ec6ca9b624441e3", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/3742efc892231681521056c61db9da15554c37f6.txt", "contents": "\nCoverability in 1-VASS with Disequality Tests\n\n\nShaull Almagor \nNathann Cohen \nGuillermo A P\u00e9rez \nMahsa Shirmohammadi \nJames Worrell \nS Almagor \nN Cohen \nG A P\u00e9rez \nM Shirmohammadi \nJ Worrell \nS Almagor \nN Cohen \nG A P\u00e9rez \nM Shirmohammadi \nJ Worrell \n\nUniversity of Oxford\nUK\n\n\nCNRS & LRI\nFrance\n\n\nUniversity of Antwerp\nBelgium\n\n\nCNRS & IRIF\nFrance\n\n\nUniversity of Oxford\nUK\n\nCoverability in 1-VASS with Disequality Tests\nand phrases Counter automataVector addition systems with statesFormal verification\nWe show that the control-state reachability problem for one-dimensional vector addition systems with disequality tests is solvable in polynomial time. For the test-free case we moreover show that control-state reachability is in NC, i.e., solvable in polylogarithmic parallel time.ACM Subject Classification Theory of computation \u2192 Logic and verification\n\nIntroduction\n\nAlgorithmic properties of one-counter automata, including reachability, model checking, and equivalence, have been studied by many authors over several decades [2,3,4,5,6,7,8,10]. The above references are a small subset of the extensive literature on one-counter automata, but they well illustrate that there are many variations on the basic model and that these variations can lead to the model having substantially different algorithmic properties. Particular features mentioned in the references above, driven by applications to automated verification and program analysis, include equality tests, disequality tests, inequality tests, parametric tests, binary updates, polynomial updates, and parametric updates. Analysing the complexity of reachability in the presence of the features listed above leads to a rich complexity landscape. It is shown in [10] that control-state reachability is decidable in NL for a \"plain vanilla\" model of one-counter machine-namely with a counter taking values in the nonnegative integers with operations increment, decrement, and zero testing. Thinking of one-counter automata as one-dimensional vector addition systems with states (1-VASS), it is natural to allow the counter to be updated by adding integer constants in binary. In this case, still with equality tests, control-state reachability becomes NP-complete [8]. The NP upper bound here is non-trivial since, due to the binary encoding of integers, a computation that reaches the goal state may have length exponential in the size of the machine. If one enriches the model further by introducing inequality tests (comparing the counter with an integer constant) then control-state reachability becomes PSPACE-complete [5]. A model of intermediate complexity is one with equality and disequality tests (introduced in [4], with applications to temporal-logic model checking). In this case the complexity of control-state reachability is open (between NP and PSPACE).\n\nIn this paper we consider 1-VASS with disequality tests, but no equality tests. Our main result is that the control-state reachability problem in this setting is solvable in polynomial time. This result confirms the intuition that disequality tests are weaker than equality tests. The main technical challenge to obtaining a polynomial-time bound is that a run witnessing We have states s1, . . . , sn-one state for each clause-and an initial state s0. Suppose that state s corresponds to a clause C that mentions variables Xi 1 , Xi 2 , Xi 3 . Then we place a self-loop on s with increment ci := pi 1 pi 2 pi 3 and define the domain Ds \u2286 N of allowable counter values in state s to exclude all values u \u2208 {P, P + 1, . . . , P + pi 1 pi 2 pi 3 \u2212 1} such that val(u, \u00b7) satisfies the clause C. Given u \u2208 {0, 1, . . . , P \u2212 1}, the configuration (s0, u) is bounded iff val(u, \u00b7) satisfies \u03d5. Hence (s0, u) is unbounded for all u \u2208 N iff \u03d5 is unsatisfiable (see Appendix A for a complete proof). that a given control state is reachable may have length exponential in the description of the counter automaton. A standard way to overcome this obstacle in related settings is to show that one may restrict attention to computations that fit a regular pattern (usually in terms of iterating a \"small\" number of cycles). Here the presence of disequality tests proves to be surprisingly disruptive: it destroys the monotonicity of the transition relation and prevents from freely iterating positive-weight cycles. (For example, the failure of monotonicity means that it is coNP hard to determine whether all configurations in a given initial location are unbounded-see Figure 1-whereas the same problem for 1-VASS without tests is easily seen to be decidable in polynomial time.) Resolving the complexity of reachability for 1-VASS with both equality and disequality tests remains open. We hope that the techniques developed here can help solve this challenging problem.\n\nTo complement our main result we show that for 1-VASS without tests, control-state reachability (and hence also boundedness) is decidable in NC, i.e., the subclass of P consisting of problems solvable in polylogarithmic parallel time. Problems in NC are in particular solvable in polylogarithmic space. Related to this Rosier and Yen [11] have shown that boundedness for VASS is NL-complete in case there are absolute bounds on the dimension and bit-size of integer vectors.\n\nDue to constraints on space, most proofs appear in the appendix.\n\n\nDefinitions\n\nWe write N to denote the set of all nonnegative integers 0, 1, 2, . . . In presenting our results we assume familiarity of the reader with basic graph theory and computational complexity.\n\n\nOne-Dimensional Vector Addition Systems with States and Tests. A 1-VASS with disequality tests is a tuple\nV = (Q, D, \u2206, w), where Q is a set of states, D = {D q } q\u2208Q is a collection of cofinite subsets D q \u2286 N, \u2206 \u2286 Q \u00d7 Q\nis a set of transitions, and w : \u2206 \u2192 Z is a function that assigns an integer weight to each transition. In the special case that each D q equals N, we simply call V a 1-VASS (and we omit the collection D).\n\nA configuration of V is a pair (q, z) comprising a state q \u2208 Q and a nonnegative integer z \u2208 N referred to as the counter value. We write Conf for the set Q \u00d7 N of all configurations.\n\nWe define a partial order on Conf by (q, z) \u2264 (q , z ) if and only if q = q and z \u2264 z\n. A configuration (q, z) is valid if z \u2208 D q .\nA path in V is a sequence of states \u03c0 = q 1 , . . . , q n such that (q i , q i+1 ) \u2208 \u2206 for all i \u2208 {1, . . . , n \u2212 1}. We sometimes refer to such a path as a q 1 -q n path. Let \u03c0 = p 1 , p 2 , . . . , p m be another path such that q n = p 1 , we define \u03c0 1 \u00b7 \u03c0 2 := q 1 , . . . , q n , p 2 , . . . , p m . Given states p, q, r, a set P of p-q paths, and a set R of q-r paths, we define P \u00b7R := {\u03c0 \u00b7\u03c0 | \u03c0 \u2208 P, \u03c0 \u2208 R}. The weight of \u03c0 is defined to be weight(\u03c0) := n\u22121 i=1 w(q i , q i+1 ). A (possibly empty) prefix of \u03c0 is said to be minimal if it has minimal weight among all prefixes of \u03c0. Define pmin(\u03c0) to be the weight of a minimal prefix of \u03c0.\n\nA run is a sequence (q 1 , z 1 ), . . . , (q n , z n ) of configurations of V such that there is a path \u03c0 = q 1 , . . . , q n with z i+1 = z i + w(q i , q i+1 ) for i = 1, . . . , n \u2212 1. We write (q 1 , z 1 ) \u03c0 \u2192 (q n , z n ) to denote such a run. Observe that runs are not allowed to reach negative counter values. A valid run is a run whose configurations are all valid. Intuitively, a valid run through q can proceed if and only if the current counter value is in D q .\n\nIn computational problems all numbers in the description of V are given in binary. Given a state q we represent the cofinite set D q as the complement of an explicitly given subset of N. Given this convention, we can assume without loss of generality that for all states q the set D q is either N or N \\ {g} for some g \u2208 N; see Appendix B. For states q with D q = N \\ {g}, we refer to the single missing value g in the domain as the disequality guard on q.\n\nThe Coverability and Unboundedness Problems. Let V = (Q, \u2206, D, w) be a 1-VASS with disequality tests, and let s and t be two distinguished states of V. The Coverability Problem asks whether there exists a valid run in V from (s, 0) to (t, z) for some z \u2208 N (in which case we say that (s, 0) can cover t). The Unboundedness Problem asks whether the set of configurations reachable from (s, 0) is infinite (in which case we say that (s, 0) is unbounded).\n\nThe Coverability problem reduces to the Unboundedness problem by, intuitively, forcing (t, 0) to be unbounded using a positive cycle, and removing all states that cannot reach t in the underlying graph of V. In fact, the following holds.\n\n\nLemma 1.\n\nThere is an NC 2 -computable many-one reduction from the Coverability Problem to the Unboundedness Problem for 1-VASS with disequality tests.\n\nHenceforth, we focus on the complexity of deciding the Unboundedness Problem. In Section 3 we prove that the Unboundedness Problem for 1-VASS with disequality tests is decidable in polynomial time. Since NC 2 \u2286 P, by Lemma 1 we also have that the Coverability Problem in this setting is decidable in polynomial time. In Section 4 we prove that the Unboundedness Problem for 1-VASS (without disequality tests) is in NC 2 , and we deduce that the Coverability Problem for 1-VASS is decidable in NC 2 .\n\n\nUnboundedness for 1-VASS with Disequality Tests\n\nFix a 1-VASS V = (Q, D, \u2206, w) with disequality tests and a distinguished state s \u2208 Q. We are interested in determining whether the configuration (s, 0) is unbounded. For a (possibly infinite) path \u03c0 = q 1 , q 2 , . . ., denote by blocked(\u03c0) the set of z \u2208 N such that \u03c0 does not lift to a valid run from the configuration (q 1 , z), i.e., the unique induced run either contains a negative counter value or violates a disequality guard.\n\nExample. In Figure 2, since 41 is the guard on s 5 the run (s 4 , 93), (s 5 , 41), (s 6 , 93) is not valid and 93 \u2208 blocked(s 4 , s 5 , s 6 ). Observe that blocked(s 4 , s 5 , s 6 ) = [0, 52) \u222a {90, 93, 96} and blocked((s 4 , s 5 , s 6 ) \u03c9 ) = [0, 52) \u222a {52 \u2264 z \u2264 96 | z \u2261 0, 3, 6 (mod 9)}.\n\nRecall that for a path \u03c0, pmin(\u03c0) is the weight of a minimum-weight prefix of \u03c0. Let Q + \u2286 Q be the set of states q \u2208 Q such that there is a positive-weight simple cycle on q in the underlying graph of V. For q \u2208 Q + we pick a simple cycle \u03b3 q such that pmin(\u03b3 q ) \u2265 pmin(\u03b3) for any other positive-weight simple cycle \u03b3 on q; write W q for weight(\u03b3 q ).\nDefine Conf + := {(q, z) \u2208 Conf | q \u2208 Q + , z + pmin(\u03b3 q ) \u2265 0}.\nDefine a path to be primitive if no proper infix is a positive cycle (note though that a primitive path may itself be a positive cycle). We say that a run is primitive if the underlying path is primitive. Observe that if \u03c1 is a valid run, none of whose internal configurations lies in Conf + , then \u03c1 is primitive.\n\nExample. In Figure 2, for s 1 \u2208 Q + we pick the simple cycle \u03b3 s1 = s 1 , s 2 , s 1 with W s1 = 6. Since pmin(\u03b3 s1 ) = 12, we have that {z | (s 1 , z) \u2208 Conf + } = [12, \u221e). Moreover, the path s 4 , s 5 , s 6 , s 4 is primitive, but s 1 , s 2 , s 1 , s 3 is not primitive. In order to decide whether (s, 0) is unbounded, by Proposition 2, it suffices to compute the set of unbounded configurations in Conf + and determine whether (s, 0) can reach this set. Define Conf \u221e \u2286 Conf + to be the set of all unbounded configurations in Conf + . Observe that every configuration (q, z) \u2208 Conf + with z / \u2208 blocked(\u03b3 \u03c9 q ) can take the cycle \u03b3 q arbitrarily many times and is thus included in Conf \u221e . However, even if z \u2208 blocked(\u03b3 \u03c9 q ), it may still be the case that (q, z) is unbounded, by traversing more complicated paths. Figure 2, all configurations (s 4 , z) with z in N \\ blocked((s 4 , s 5 , s 6 ) \u03c9 ) = {52 \u2264 z \u2264 96 | z \u2261 0, 3, 6 (mod 9)} \u222a (96, \u221e) are trivially unbounded and thus included in Conf \u221e . It will transpire that {s 4 }\u00d7{54, 60, 63, 69} \u2286 Conf \u221e even though {54, 60, 63, 69} \u2208 blocked((s 4 , s 5 , s 6 ) \u03c9 ).\n\n\nExample. In\n\nIn order to reason about the aforementioned complicated paths, we proceed as follows. In Section 3.1 we introduce residue classes and chains, which form a partition of Conf + , and are the building blocks of our analysis. In Section 3.2 we characterize Conf \u221e as the limit of an inductive construction. This enables us to reason about the structure of Conf \u221e in Section 3.3. Finally, in Section 3.4 we show how to compute Conf \u221e and decide unboundedness.\n\n\nResidue Classes and Chains\n\nGiven q \u2208 Q + and 0 \u2264 r < W q , we call the set of configurations {(q, z) \u2208 Conf + | z \u2261 r (mod W q )} a q-residue class. We simply speak of a residue class if we do not want to specify the state q. Given a q-residue class R, a set C \u2286 R is called a q-chain if it is a maximal subset of R with the property that every pair of configurations (q, z), (q, z ) \u2208 C with z < z are connected by a valid run obtained by iterating the cycle \u03b3 q . Again, we speak of a chain if we do not want to specify the state q. We focus on states s1, s4, and s10 in the 1-VASS in Figure 2, each of which lies on a simple positive cycle. We also indicate which counter values prevent taking the associated positive cycle. For example, state s4 has the simple cycle \u03b3s 4 with Ws 4 = 9 and taking \u03b3s 4 from {s4} \u00d7 {90, 93, 96} is not allowed due to disequality guards along \u03b3s 4 . The columns underneath each state represent residue classes of that state in Conf + . We colour all unbounded chains in blue and all bounded chains in pink; thus all blue configurations form the set U0.\n\nWe draw a distinction between bounded chains and unbounded chains, where a chain is bounded if and only if the associated set of counter values is bounded. An unbounded q-chain C is contained in Conf \u221e since the cycle \u03b3 q can be taken arbitrarily many times from any configuration in C to yield a valid run.\n\n\nRemark 3.\n\nFor each q-residue class R, each guard value z induces at most two bounded chains, namely configurations below (q, z), and the singleton {(q, z)} (which is vacuously a chain). Since there are at most |Q| guards, each residue class decomposes as a disjoint union of at most 2|Q| bounded chains and a single unbounded chain.\n\nIntuitively, within each bounded chain we can iterate the cycle \u03b3 q until hitting a guard. We call a residue class R trivial if it consists solely of a single unbounded chain. Note that the union of all bounded q-chains is equal to Conf + \u2229 {q} \u00d7 blocked(\u03b3 \u03c9 q ). Figure 3 for the running example, the residue classes\n\n\nExample. As indicated in\n{s 4 } \u00d7 (52 + i + 9N) with i \u2208 {0, 1, 3, 4, 6, 7} are indeed trivial, while each residue class {s 4 } \u00d7 (52 + i + 9N) with i \u2208 {2, 5, 8} consists of two bounded chains {s 4 } \u00d7 {52 \u2264 z < 88 + i | z \u2261 i (mod 9)} and {s 4 } \u00d7 {88 + i}, and a single unbounded chain {s 4 } \u00d7 (88 + i + 9N).\nOne of the main ideas in this section is to show that a configuration is unbounded if and only if it can reach an unbounded chain via a valid run whose underlying path \u03c0 has the form\n\u03c0 = \u03c0 0 \u00b7 \u03b3 n1 q1 \u00b7 \u03c0 1 \u00b7 \u00b7 \u00b7 \u03c0 k\u22121 \u00b7 \u03b3 n k q k \u00b7 \u03c0 k ,\nwhere \u03c0 0 , . . . , \u03c0 k are primitive paths and n 1 , . . . , n k are non-negative integers. Moreover, we give a polynomial bound on the length of the \u03c0 i and the magnitude of k in terms of the size of the underlying 1-VASS (in general, the exponents n i may be exponential in the size of the 1-VASS). We also show how to detect the existence of such a path in polynomial time.  \n\n\nFigure 4\n\nThe sets U1 and U2 of the running example. The blue configurations are in U0; green ones are in U1 \\U0; yellow one is in U2 \\U1. The pink configurations are in Conf + \\U1 and Conf + \\U2, respectively. While computing U1, the green configurations (s4, 63) and (s4, 69) take the primitive path \u03c0 = s4, s7, s8, s9, s10 to U0. In all other pink configurations in s4-chains, although enabled, the path \u03c0 either hits a guard or ends in (s10, z) \u2208 Conf + \\ U1.\n\nRecall the structure of Conf as a partially ordered set. We will use standard ordertheoretic terminology and notation to refer to sets of configurations: in particular given sets\nof configurations S, S \u2286 Conf , we say that S is downward closed in S if for all (q, z) \u2208 S \u2229 S and (q, z ) \u2208 S with z \u2264 z, we have (q, z ) \u2208 S.\n\nInductive Characterization of Conf \u221e\n\nWe now give an inductive backward-reachability construction of the set of all configurations in Conf + that can reach an unbounded chain. Since unbounded configurations can, in particular, reach unbounded chains, this set is exactly Conf \u221e .\n\nIn order for our inductive construction to converge in a polynomial number of steps, we essentially consider meta-transitions of the form \u03b3 k q \u00b7 \u03c0 for \u03b3 q a simple cycle, k \u2208 N, and \u03c0 a primitive path. Formally, we define an increasing sequence U 0 \u2286 U 1 \u2286 U 2 \u2286 \u00b7 \u00b7 \u00b7 of subsets of Conf + such that n\u2208N U n = Conf \u221e . Define U 0 to be the union of the collection of unbounded chains. Given n \u2208 N we inductively construct U n+1 as follows. First, define U n \u2286 Conf + as the set of configurations (q, z) \u2208 U n whose distance to U n is minimal among all configurations in Conf + \\ U n (here the distance of a configuration (q, z) to U n is the length of the shortest valid run from (q, z) to U n ). Now define U n+1 \u2286 Conf + to be the smallest set such that U n , U n \u2286 U n+1 and U n+1 \u2229 C is downward closed in every chain C. Then n\u2208N U n is the set of configurations in Conf + that can reach an unbounded chain which, as noted above, is equal to Conf \u221e . Remark 4. By definition, a shortest run from a configuration (q, z) \u2208 U n+1 \\ U n to U n has no internal configurations in Conf + , and is therefore primitive. Figure 3 indicates the set U 0 for the running example. Note that U 0 contains all trivial residue classes. Observe that \n\n\nExample.\nhave that U 1 = U 0 \u222a ({s 4 } \u00d7 {54\n, 60, 63, 69}). The second iteration to compute U 2 only adds the configuration (s 1 , 12) to U 1 ; see Figure 4b. The sequence stabilizes in this iteration.\n\n\nThe Structure of Conf \u221e\n\nIn this section we analyze the structure of Conf \u221e , based on its inductive characterization. This analysis will be key in obtaining a polynomial-time algorithm to compute Conf \u221e .\n\nThe guiding intuition is that for all n the set U n is almost upward closed in each residue class R. By this we mean that if (q, z) is the least configuration in R \u2229 U n , then all but polynomially many configurations of R above (q, z) are also in U n . More specifically, we show that for any bounded chain C in R that lies above (q, z), although the number of configurations in C may be exponential in |Q|, the size of C \\ U n is bounded by a polynomial in |Q|. (Note here that the unique unbounded chain in R is contained in U 0 and hence is contained in U n for all n \u2208 N.) Using this observation, we provide a polynomial bound on the number of iterations until the inductive construction converges. Indeed, in every iteration, unless a fixed point has been reached, there must exist some bounded chain C such that the size of C \\ U n strictly decreases. After showing that C \\ U n is of polynomial size, we obtain a polynomial bound on the number of iterations until U n convergence by Remark 3.\n\nWe start by characterizing the paths between chains.\nProposition 5. Let (q, z), (q , z ) \u2208 Conf + and let (q, z) \u03c0 \u2192 (q , z ) be a (not necessarily valid) run such that \u03c0 is a primitive path. Then there exists a run (q, z) \u03c0 \u2192 (q , z ) of length at most |Q| 2 + 2 such that (1) pmin(\u03c0 ) \u2265 pmin(\u03c0), (2) z \u2265 z , and (3) the q -residue class of (q , z ) is either trivial or identical to that of (q , z ).\nGiven a q-residue class R, in general U n is not an upward closed subset of R. The following definitions are intended to measure the defect of U n in this regard.\n\nWe say that a bounded chain C that is contained in a residue class R is n-active if there exists a configuration in U n \u2229 R that lies below some configuration in C. Let C be an n-active chain. Recall that U n is downward closed in C and hence C \\ U n is upward closed in C. Suppose that C \\ U n is non-empty, write m 1 := min{x : (q, x) \u2208 C \\ U n } and m 2 := max{x :\n(q, x) \u2208 C \\ U n }, and define \u03b4 n (C) := {(q, x) \u2208 Conf + : m 1 \u2264 x \u2264 m 2 and (q, x) \u2208 U n }.\nThus \u03b4 n (C) contains all configurations in C \\ U n , as well as all configurations \"between\" elements of C \\ U n , apart from those that are themselves in U n . If C \\ U n = \u2205 then we define \u03b4 n (C) := \u2205. Finally for a residue class R we write\n\u03b4 n (R) := {\u03b4 n (C) : C \u2286 R an n-active chain} .(1)For (q, x min ) the least element in R \u2229 U n we have that |{(q, x) \u2208 R \\ U n : x min \u2264 x}| \u2264 |\u03b4 n (R)|.\nExample. In Figure 4a consider the 1-active chain C := {54, 63, 72, 81}. Since\nC \\ U 1 = {72, 81} we have that \u03b4 1 (C) = {72, 75, 78, 81}.\nLemma 6. For all n \u2208 N and every chain C we have that |\u03b4 n (C)| \u2264 |Q| \u00b7 |C \\ U n |.\n\nWe now come to the central technical part of the paper, controlling the growth of \u03b4 n (R) as a function of n:\nLemma 7.\nThere exists a polynomial poly 2 such that for each residue class R and all n \u2208 N we have |\u03b4 n+1 (R)| \u2264 max{|\u03b4 n (R )| : R a residue class} + poly 2 (|Q|) if R contains a chain that is (n + 1)-active but not n-active.\n\nBefore proceeding to prove Lemma 7, we demonstrate the underlying intuition. Consider a configuration (q, z) \u2208 R \u2229 U n that has a primitive path \u03c0 to a configuration (q , z ) \u2208 U n\u22121 . To prove Lemma 7, we argue that \u03c0 lifts to a valid run from a \"dense\" subset of configurations in {(q, z ) \u2208 R : z \u2265 z}. There are two main cases in this argument based on whether one of the larger configurations in the chain induces a valid run ending in a trivial residue class.\n\nExample. The first case occurs in obtaining U 1 from U 0 in the running example; see Figure 4a. Consider the s 4 -chain C := {54, 63, 72, 81}. The primitive path s 4 , s 7 , s 8 , s 9 , s 10 from the largest configuration (s 4 , 81) in C leads to a non-trivial s 10 -residue class (out of U 0 ). However, one among the n-next largest configurations in C, for n = |blocked(s 4 , s 7 , s 8 , s 9 , s 10 )| \u00b7 |Q|, lifts to a valid run to a trivial s 10 -residue class. In the example, this is the case for (s 4 , 63). The second case occurs in obtaining U 2 from U 1 in the running example; see Figure 4b. Consider the s 1 -chain C := {12, 18, 24, \u00b7 \u00b7 \u00b7 , 54}. The primitive path s 1 , s 3 , s 4 , from none of the configurations in this chain, ends in a trivial s 4 -residue class. However, we provide a subtle argument to bound |C \\ U 2 | with |\u03b4 1 (C)| + poly 2 (|Q|).\n\nProof of Lemma 7. Pick the minimal element (q, z 0 ) \u2208 R \u2229 U n+1 . Moreover, let (q , z ) \u2208 U n and (q, z 0 ) \u03c0 \u2192 (q , z ) be such that \u03c0 is a shortest run from (q, z 0 ) to U n . By Remark 4, \u03c0 is a primitive path. By Proposition 5 there is a run (q, z 0 ) \u03c0 \u2192 (q , z ), for some z \u2265 z , such that \u03c0 has length at most |Q| 2 + 2, and the residue class R of (q , z ) is either trivial or the same as the residue class of (q , z ). (Note that we do not claim that (q , z ) \u2208 U n , nor that \u03c0 lifts to a valid run.) We now identify two cases according to the order of W q in the group Z/ZW q of integers modulo W q , which is W q gcd(Wq,W q ) . Recall that this quantity is the smallest c \u2208 N such that W q \u00b7 c \u2261 0 (mod W q ).\n\n\nCase (i):\n\nW q gcd(Wq,W q ) > |Q|. We first show that |C \\ U n+1 | \u2264 (|Q| 2 + 2)(|Q| + 1) for every (n + 1)-active chain C in R.\n\nLet C be an (n + 1)-active chain of R and suppose for a contradiction that |C \\ U n+1 | > (|Q| 2 + 2)(|Q| + 1). Since C is (n + 1)-active, for every configuration (q, z) \u2208 C \\ U n+1 we have z \u2265 z 0 . Further, since pmin(\u03c0 ) + z 0 \u2265 0, \u03c0 can only be blocked on a configuration due to a violation of a disequality guard. Since the length of \u03c0 is at most |Q| 2 + 2, it follows that at most |Q| 2 + 2 elements of C \\ U n+1 lie in blocked(\u03c0 ).\n\nRecall that C \\ U n+1 is upward closed in C, so by the assumption that |C \\ U n+1 | > (|Q| 2 + 2)(|Q| + 1), there exists a set S := {(q, z 1 + iW q ) : 0 \u2264 i \u2264 |Q|} of |Q| + 1 \"consecutive\" elements of C \\ U n+1 , for some z 1 , such that no element of S lies in blocked(\u03c0 ). Then \u03c0 lifts to a valid run from each element of S. Moreover, since the order of W q in Z/ZW q is assumed to be greater than |Q|, the images of the elements of S, after following \u03c0 , lie in pairwise distinct q -residue classes. But the number of non-trivial q -residue classes is at most |Q| and hence some configuration in S has a run over \u03c0 to a trivial q -residue class and hence to U n . But then such a configuration lies in U n+1 , which is a contradiction.\n\nWe conclude that |C \\ U n+1 | \u2264 (|Q| 2 + 2)(|Q| + 1) for every (n + 1)-active chain C in R. But then |\u03b4 n+1 (C)| \u2264 |Q|(|Q| 2 + 2)(|Q| + 1) by Lemma 6. Finally, since R comprises at most 2|Q| bounded chains by Remark 3, we have that |\u03b4 n+1 (R)| \u2264 2|Q| 2 (|Q| 2 + 2)(|Q| + 1).\n\n\nCase (ii):\n\nW q gcd(Wq,W q ) \u2264 |Q|. For the residue classes R and R as above, define an injective partial mapping \u03a6 : \u03b4 n+1 (R) \u2192 \u03b4 n (R ) by \u03a6(q, x) = (q , x ) if and only if x = x + weight(\u03c0 ) and (q , x ) \u2208 \u03b4 n (R ). We will prove that \u03a6 is defined on all but poly 3 (|Q|) many configurations in \u03b4 n+1 (R), for some polynomial poly 3 , thereby showing that |\u03b4 n+1 (R)| \u2264 |\u03b4 n (R )|+poly 3 (|Q|). To this end, it suffices to show that \u03a6 is defined on all but poly 4 (|Q|) many configurations in \u03b4 n+1 (C) for every (n + 1)-active chain C in R, for some polynomial poly 4 .\n\nLet C be an (n+1)-active chain in R and let C 1 , . . . , C s be a list, given in increasing order, of the chains in R that are mapped into by \u03a6 from some configuration in \u03b4 n+1 (C). Then C 1 , . . . , C s are all n-active (as they are above (q , z ) \u2208 U n ). For i \u2208 {1, . . . , s}, write (q, x (i) min ) for the minimum configuration in \u03b4 n+1 (C) that is mapped by \u03a6 to C i and write (q, x (i) max ) for the maximum configuration in \u03b4 n+1 (C) that is mapped to C i . Then for each i = 1, . . . , s,\nevery configuration (q, x) \u2208 \u03b4 n+1 (C) such that x (i) min \u2264 x \u2264 x (i)\nmax and (q, x) \u2208 blocked(\u03c0 ) is mapped by \u03a6 to \u03b4 n (R ). Thus, writing (q, x max ) and (q, x min ) respectively for maximum and minimum configurations in \u03b4 n+1 (C), we have that \u03a6 is defined on all elements of \u03b4 n+1 (C) lying outside the set\n(q, x) \u2208 \u03b4 n+1 (C) : x \u2208 x (s) max , x max \u222a x min , x (1) min \u222a s\u22121 i=1 x (i) max , x (i+1) min(2)\nWe claim that the set (2) has cardinality at most (2|Q| + 1) \u00b7 poly 5 (|Q|), for some polynomial poly 5 . For this it will suffice to show that any sub-interval I of \u03b4 n+1 (C) of the form {(q, x) \u2208 \u03b4 n+1 (C) : a \u2264 x \u2264 b}, where a, b \u2265 x min , and such that it does not meet the domain of \u03a6, has cardinality at most poly 5 (|Q|). (Indeed, note that (2) is a union of at most 2|Q| + 1 such intervals since there are at most 2|Q| chains in R by Remark 3.)\n\nLet poly 6 (x) := (x 2 + 2)(x + 1) + 1. Since blocked(\u03c0 ) has cardinality at most |Q| 2 + 2, if we take poly 6 (|Q|) consecutive elements of C \\ U n+1 then there are at least |Q| + 1 consecutive elements that lie outside blocked(\u03c0 ) and at least one of these elements -say (q, x) -has a valid run over \u03c0 to the residue class R by the assumption that W q gcd(Wq,W q ) \u2264 |Q|. Since (q, x) \u2208 U n+1 we have that (q , x + weight(\u03c0 )) \u2208 U n and hence (q, x) is in the domain of \u03a6. We conclude that any sequence of at least poly 6 (|Q|) consecutive elements of C \\ U n+1 meets the domain of \u03a6. Hence any sub-interval I, as defined above, contains at most poly 6 (|Q|) elements of C \\U n+1 and, by Lemma 6, contains at most |Q|\u00b7poly 6 (|Q|) elements in total. Proposition 8 follows from Lemma 7 by induction, as follows.\n\n\nProposition 8.\n\nThere exists a polynomial poly 1 such that for each residue class R and all n \u2208 N we have |\u03b4 n (R)| \u2264 poly 1 (|Q|).\n\nProof. Let \u03b1 n be the number of chains in Conf + that are n-active. Since n-active chains are by definition bounded, we have that \u03b1 n \u2264 2|Q| 2 for all n \u2208 N (see Remark 3). We argue by induction on n that |\u03b4 n (R)| \u2264 \u03b1 n \u00b7 poly 2 (|Q|) for all n \u2208 N and all residue classes R. We conclude that |\u03b4 n (R)| \u2264 2|Q| 2 \u00b7 poly 2 (|Q|).\n\nThe base case is trivial as there are no 0-active chains and \u03b4 0 (R) is empty for all residue classes. The induction step has two cases. First, suppose that \u03b1 n+1 = \u03b1 n , i.e., all chains in Conf + that are (n + 1)-active were already n-active. Since U n \u2286 U n+1 , we have that \u03b4 n+1 (C) \u2286 \u03b4 n (C) for all chains C in R. We conclude that \u03b4 n+1 (R) \u2286 \u03b4 n (R) and so |\u03b4 n+1 (R)| \u2264 |\u03b4 n (R)|. Since |\u03b4 n (R)| \u2264 \u03b1 n \u00b7 poly 2 (|Q|) by induction hypothesis, and \u03b1 n = \u03b1 n+1 we get that |\u03b4 n+1 (R)| \u2264 \u03b1 n+1 \u00b7 poly 2 (|Q|).\n\nThe second case is that \u03b1 n+1 > \u03b1 n . Then by Lemma 7 we have |\u03b4 n+1 (R)| \u2264 max{|\u03b4 n (R )| : R a residue class} + poly 2 (|Q|). Since the right-hand side of the latter is at most \u2264 \u03b1 n \u00b7 poly 2 (|Q|) + poly 2 (|Q|), by induction hypothesis, and \u03b1 n+1 > \u03b1 n we get that |\u03b4 n+1 (R)| \u2264 \u03b1 n+1 \u00b7 poly 2 (|Q|).\n\nAs a consequence of Proposition 8 we have: Corollary 9. The sequence (U n ) n\u2208N stabilizes in at most poly 1 (|Q|) steps.\n\n\nComputing Conf \u221e and Deciding Unboundedness\n\nIn this section we show how to compute Conf \u221e in polynomial time and how to decide in polynomial time whether the initial configuration (s, 0) can reach Conf \u221e .\n\nWe start by showing that if a configuration can reach U n via a primitive run, then it can also reach U n via a polynomial-length run (see Appendix G for the proof).\n\n\nProposition 10.\n\nThere exists a polynomial poly 7 such that the following holds. Let (q, z), (q , z ) \u2208 Conf + and let (q, z) \u03c0 \u2192 (q , z ) be a valid run such that (q , z ) \u2208 U n and \u03c0 is primitive. Then there is a valid run (q, z) \u03c0 \u2192 (q , z ) such that (q , z ) \u2208 U n and \u03c0 has length at most poly 7 (|Q|).\n\nRecall that U n+1 consists of all configurations in Conf + with minimal distance to U n . Combining Remark 4 and Proposition 10, we have that the minimal distance from a configuration (q, z) \u2208 U n+1 \\ U n to U n is at most poly 7 (|Q|). It follows that we can restrict the search for configurations that can reach U n , to those within a polynomially-bounded distance to U n . By itself this is not sufficient to obtain a polynomial-time algorithm to decide whether U n is reachable. Indeed, it is easy to see that for many classes or target sets of configurations of a 1-VASS, bounded reachability is NP-hard, e.g., reaching singleton sets is NP-hard by reduction from SUBSET-SUM. However, using our analysis of the structure of U n in Section 3.3, we are able to formulate the bounded reachability problem above in a form that admits a polynomial-time algorithm.\n\nSpecifically, we consider the Bounded Coverability problem with a Disequality Objective: Given as input a 1-VASS V = (Q, D, \u2206, w) with a distinguished state q f , a positive integer L (written in unary), an initial configuration (q 0 , x 0 ), and a coverability objective of the form\nO = {(q f , x) | x \u2265 \u2227 m i=1 (x \u2261 a i mod W ) \u2227 n i=1 (x = b i )} ,(3)\nwhere , W and the a i and b i are non-negative integers given in binary, decide whether O is reachable from (q 0 , x 0 ) via a valid run of length at most L.\n\n\nProposition 11. The Bounded Coverability problem with a Disequality Objective is decidable in polynomial time.\n\nWe now show how to compute Conf \u221e in polynomial time. By Corollary 9, the sequence {U n } n\u2208N converges in at most poly 1 (|Q|) steps. It remains to show how to compute U n+1 from U n in polynomial time for each n.\n\nRecall that all unbounded chains are contained in U 0 and hence are contained in U n for all n. Recall also that the total number of bounded chains is at most 2|Q| and that U n is downward closed in each bounded chain. Thus U n is determined by giving, for every bounded chain C such that U n \u2229 C = \u2205, the maximum configuration in U n \u2229 C. In particular, U n can be described in space polynomial in the description of the given 1-VASS.\n\nRecall that U n+1 is obtained from U n by adding the configurations in Conf + \\U n that have minimum distance to U n and then closing downward in each bounded chain. By Remark 4 and Proposition 10, a configuration in Conf + \\ U n that has minimum distance to U n has distance at most poly 7 (|Q|). The idea to compute U n+1 from U n is as follows:\n\nFor each bounded chain C, and each configuration (q, x) \u2208 C \\ U n that is among the top poly 1 (|Q|) configurations in C, we determine the distance of (q, x) to U n up to a bound of poly 7 (|Q|). To do this we use the procedure described in Proposition 11, having first written U n as a polynomial-size union of sets of the form (3)-see below for details. The reason that it suffices to look only among the top poly 1 (|Q|) configurations in each bounded chain is because we know from Proposition 8 that |C \\ U n+1 | \u2264 poly 1 (|Q|) for every (n + 1)-active chain C.\n\nWe next show how to decompose U n into a polynomial union of sets of the form (3) in order to apply Proposition 11. Fixing q \u2208 Q + , let R 1 , . . . , R m be a list of the non-trivial qresidue classes and for each i \u2208 {1, . . . , m}, write a i for the corresponding residue modulo W q and define i := min(R i \u2229 U n ). Moreover, let b 1 , . . . , b k be a list of the counter values x such that x \u2265 i and (q, x) \u2208 R i \\ U n for some i. Note that m \u2264 |Q| and k \u2264 m poly 1 (|Q|). We decompose the set of configurations {(q, z) \u2208 U n } into the following two components:\n1. {(q, z) : z \u2265 pmin(\u03b3 q ) \u2227 m i=1 z \u2261 a i (mod W q )}, i.e., all configurations in trivial q-residue classes, 2. for all j \u2208 {1, . . . , m}, the set {(q, z) : z \u2265 j \u2227 i:i =j z \u2261 a i (mod W q ) \u2227 k i=1 z = b i }, which includes R j \u2229 U n for the non-trivial residue class R j .\nFinally, it remains to decide whether the configuration (s, 0) is unbounded. By Proposition 2, (s, 0) is unbounded if and only if it can reach Conf \u221e . Now a shortest run from (s, 0) to Conf \u221e is necessarily primitive: if an internal configuration in such a run lies in Conf + then it is also in Conf \u221e -a contradiction. By Proposition 10, a shortest run from (s, 0) to Conf \u221e has length at most poly 7 (|Q|). Thus we can decide whether such a run exists in polynomial time using Proposition 11. In conclusion we have \n\n\nUnboundedness for 1-VASS\n\nIn this section we show that the Unboundedness Problem for 1-VASS (i.e., with no disequality tests) is in NC 2 . Recall that NC i is the class of decision problems solvable in time O(log i n), with n the size of the input, on a parallel computer with a polynomial number of processors. Let V = (Q, \u2206, w) be a 1-VASS with a distinguished state s \u2208 Q. We want to decide whether the configuration (s, 0) is unbounded. Since V has no disequality tests, deleting a negative-weight or zero-weight cycle that appears as an infix of a valid run yields another valid run. It follows that (s, 0) is unbounded if and only if there is a valid run from (s, 0) consisting of a simple path (of length at most |Q|) followed by a positive-weight simple cycle (again, of length at most |Q|). We call such a run a lasso.\n\nLet V = (Q, \u2206, w) be a 1-VASS and let \u03c0 = q 1 , . . . , q n be a path in V. Recall that a (possibly empty) prefix of \u03c0 is said to be minimal if it has minimal weight among all prefixes of \u03c0. Likewise a (possibly empty) suffix of \u03c0 is said to be maximal if it has maximal weight among all suffixes. It is clear that q 1 , . . . , q m is a minimal prefix of \u03c0 if and only if q m , . . . , q n is a maximal suffix. In such a case let us call q m a nadir of \u03c0 (the nadir is the lowest point reached in any run over \u03c0). Recall that pmin(\u03c0) is the weight of a minimal prefix of \u03c0; correspondingly we define smax(\u03c0) to be the weight of a maximal suffix.\n\nGiven paths \u03c0 and \u03c0 , say that \u03c0 is dominated by \u03c0 if pmin(\u03c0) \u2264 pmin(\u03c0 ) and smax(\u03c0) \u2264 smax(\u03c0 ). Observe that if \u03c0 is dominated by \u03c0 then weight(\u03c0) \u2264 weight(\u03c0 ). Fix two states p, q \u2208 Q and let P be a set of p-q paths. We say that a set P of p-q paths is a Pareto set for P if for every \u03c0 \u2208 P there exists \u03c0 \u2208 P such that \u03c0 is dominated by \u03c0 .\n\nWe observe some simple properties of Pareto sets:\n\nLemma 13. Let p, q, r \u2208 Q. Then all of the following statements hold: 1. If P 1 , P 2 , P 3 are sets of p-q paths such that P 1 is a Pareto set of P 2 and P 2 is a Pareto set of P 3 , then P 1 is a Pareto set of P 3 .\n\n\n2.\n\nIf P, R are sets of p-q paths with respective Pareto sets P , R , then P \u222a R is a Pareto set for P \u222a R 3. If P is a set of p-q paths and R is a set of q-r paths with respective Pareto sets P , R , then P \u00b7 R is a Pareto set of P \u00b7 R.\n\nProposition 14. Let p, q \u2208 Q. Then every set P of p-q paths of length at most k has a Pareto set P of cardinality at most |Q| such that each path in P has length at most 2k. Moreover such a set P can be computed from P in NC 1 .\n\n\nAn NC 2 Upper Bound\n\nTheorem 15. The Unboundedness Problem and the Coverability Problem for 1-VASS are decidable in NC 2 .\n\nProof. By Lemma 1, it will suffice to show that Unboundedness is in NC 2 .\n\nLet V = (Q, \u2206, w) be a 1-VASS. Given p, q \u2208 Q and m \u2208 N, denote by Paths p,q,m the set of all p-q paths in V of length at most m.\n\nGiven a state s \u2208 Q, recall that (s, 0) is unbounded if and only if there exists a lasso run that starts at (s, 0). To determine the existence of such a run we compute a Pareto set P q for Paths s,q,|Q| and a Pareto set P q for Paths q,q,|Q| for every state q \u2208 Q. Having done this we look for q \u2208 Q and paths \u03c0 \u2208 P q and \u03c0 \u2208 P q such that \u03c0 \u00b7 \u03c0 induces a valid run from (s, 0) and \u03c0 has positive weight.\n\nIt remains to show how to compute a Pareto set of Paths p,q,|Q| for all pairs of states p, q \u2208 Q (together with the values weight(\u03c0) and pmin(\u03c0) for every path \u03c0 in the Pareto set) in NC 2 .\n\nFor k = 1, . . . , log |Q| , we show how to compute a family P k = {P p,q,k } p,q\u2208Q such that for all p, q \u2208 Q: 1. P p,q,k is a Pareto set for Paths p,q,2 k ; 2. P p,q,k \u2286 Paths p,q,4 k ; 3. |P p,q,k | \u2264 |Q|. By Item 1, if k = log |Q| then P p,q,k is a Pareto set for Paths p,q,|Q| . (Note that for k = log |Q| , P k consists of paths of length at most |Q| 2 .)\n\nThe construction of P k is by induction on k. Suppose we have computed P k with Properties 1-3 above. Fix p, q \u2208 Q. In order to compute P p,q,k+1 we observe that P := {\u03c0 1 \u00b7 \u03c0 2 : \u2203r \u2208 Q(\u03c0 1 \u2208 P p,r,k \u2227 \u03c0 2 \u2208 P r,q,k )}\n\nis a Pareto set for Paths p,q,2 k+1 by Items 2 and 3 of Lemma 13. Moreover |P | is at most r\u2208Q |P p,r,k ||P r,q,k | \u2264 |Q| 3 . Applying Proposition 14, we obtain a Pareto set P for P of cardinality at most |Q|. By Item 1 of Lemma 13, P is a Pareto set for Paths p,q,2 k+1 . Finally, it is clear from the length bound in Proposition 14 that all paths in P have length at most 4 k+1 . Thus we define P p,q,k+1 := P .\n\nIt remains to establish the NC 2 complexity bound for computing P log |Q| . For this it suffices to show that for all k the computation of P k+1 from P k can be carried out in NC 1 . But we may compute each set P p,q,k+1 in parallel (over p, q \u2208 Q), and the computation of each such set can be done in NC 1 by Proposition 14.\n\n\nA\n\nProof of the reduction in Figure 1 We associate with every value u \u2208 N, an assignment \u03c0 u : {X 1 , . . . , X m } \u2192 {0, 1} defined by \u03c0(X i ) = val(u, X i ).\n\nThe key observation is the following: let u \u2208 {0, . . . , P \u2212 1}, and consider a clause\nC i = i1 \u2228 i2 \u2228 i3 ,\nwhere ij is a literal of variable X ij , then \u03c0 u satisfies C i iff there exists some k \u2208 N such that u + kp i1 p i2 p i3 / \u2208 D i . Indeed, note that for every j \u2208 {1, 2, 3} and every k \u2208 N we have that p ij |u iff p ij |u + kp i1 p i2 p i3 . Recall that val(u, X ij ) = 1 iff p ij |u, and observe that since u < P , there exists k \u2208 N such that u + kp i1 p i2 p i3 \u2208 {P, P + 1, . . . , P + p i1 p i2 p i3 \u2212 1}. We thus have that \u03c0 u satisfies C i iff \u03c0 u+kpi 1 pi 2 pi 3 satisfies C i , iff u + kp i1 p i2 p i3 / \u2208 D i . Now, assume \u03d5 is satisfiable, and let \u03c0 be a satisfying assignment. We associate with \u03c0 the number u = j:\u03c0(Xj )=1 p j (mod P ) (note that taking modulo P simply means that if the product is exactly P , we take u = 0). Clearly \u03c0 = \u03c0 u . We claim that (s 0 , u) is bounded. Indeed, the only paths possible from (s 0 , u) start by choosing a state s i , and then repeatedly applying the cycle of cost c i . However, since \u03c0 u satisfies all clauses, then by the above, all such paths are blocked by a disequality guard after taking the c i for k times, for some k \u2208 N (which depends on i). Thus, (s 0 , u) is bounded.\n\nConversely, assume (s 0 , u) is bounded for some value u, we claim that \u03c0 u satisfies \u03d5. Indeed, by the same reasoning above, it follows that for every cycle of cost c i , we have u + kc i / \u2208 D i for some k \u2208 N, so \u03c0 u satisfies C i . Since this is true for all clauses, we have that \u03c0 u satisfies \u03d5.\n\nWe conclude that \u03d5 is satisfiable iff some configuration (s 0 , u) is bounded, which completes the reduction.\n\nFinally, we note that the reduction indeed takes polynomial time -indeed, the construction clearly has polynomially many states. Also, the first m primes p 1 , . . . , p m can be listed in time polynomial in m, and are representable in polynomially many bits. Therefore, the binary representation of the transition values and the amount of missing elements in the domain of each state are both polynomial.\n\n\nB Single disequality guards suffice\n\nGiven a 1-VASS V = (Q, \u2206, D, w) with disequality tests, we can assume that for all states q the set D q is either N or N \\ {g} for some g \u2208 N. This assumption is without loss of generality, as a state q with D q = N \\ {a 1 , . . . , a n } can be replaced with a sequence of new states q 1 , \u00b7 \u00b7 \u00b7 , q n , connected with 0-weight transitions, such that D qi = N \\ {a i } for i \u2208 {1, . . . , n}.\n\nThe transformation yields only a polynomial blow-up in the size of the 1-VASS, and there is a natural correspondence between runs in the original 1-VASS and the modified one.\n\n\nC Proof of Lemma 1\n\nConsider a 1-VASS V = (Q, \u2206, D, w) with disequality tests, and let s, t \u2208 Q. We reduce the Coverability problem to the Unboundedness problem as follows.\n\nWe obtain from V a new 1-VASS V as follows. First, we remove from V all the states that cannot reach t in the underlying graph. Second, we introduce a new state t with a self-loop of weight +1, that is reachable from t with a transition of weight 0. The output of the reduction is V with the distinguished state s.\n\nRecall that reachability in directed graphs can be decided in NL \u2286 NC 2 , and hence this reduction is NC 2 -computable.\n\nHenceforth assume that s can reach t in the underlying graph of V (otherwise s cannot cover t, and the reduction can output a trivial negative instance). We proceed to prove the correctness of the reduction.\n\nFirst, if (s, 0) can cover t in V, then in particular it can only cover t using states in V . We now have that (s, 0) is unbounded in V , by covering t, and then taking the transition to t and repeating the self loop unboundedly. Note that crucially, there are no disequality guards on t , and therefore once t is reached, we can take the transition to t and repeat the self loop unboundedly.\n\nConversely, suppose (s, 0) is unbounded in V , then either there is a valid run in V from (s, 0) to (t , z) for some z, in which case (s, 0) can cover t in V, or (s, 0) is unbounded already in V and, moreover, it is unbounded in V using only states that can reach t in the underlying graph. We claim that in the latter case, (s, 0) can cover t in V. Indeed, from (s, 0) there is a valid run to a configuration (q, z) with z that is large enough, such that a simple path from q to t in the underlying graph lifts to a valid run from (q, z) to (t, z ) for some z . Specifically, taking z > |Q| \u00b7 W \u00b7 G where W is the maximal absolute value of the weight of a transition in V, and G is the maximal disequality guard, suffices for such a run.\n\n\nD Proof of Proposition 2\n\nClearly if (s, 0) can reach an unbounded configuration in Conf + then it is unbounded. Conversely, if (s, 0) is unbounded, then there is a state q such that for all z 0 \u2208 N, there exist z, z \u2265 z 0 and a valid run \u03c0 starting in (s, 0) that visits (q, z) and ends in (q, z ). Thus, there is a positive cycle \u03b3 on q. The positive cycle \u03b3 on q may not be simple, but it certainly visits a state p with a simple positive cycle \u03b3 p on it. Pick z 0 such that z 0 > pmin(\u03b3) + x. for all x \u2208 blocked(\u03b3 \u03c9 p ) (Note that blocked(\u03b3 \u03c9 p ) is finite since \u03b3 p is a positive cycle. The maximum is thus well-defined.) Hence, there is a valid run from (s, 0) to (p, y) where y > max(blocked(\u03b3 \u03c9 p )). Observe that (p, y) \u2208 Conf + and it is unbounded.\n\n\nE Proof of Proposition 5\n\nSuppose that \u03c0 has length strictly greater than |Q| 2 + 2. Then we can find |Q| + 1 distinct proper prefixes (i.e. prefixes that are not just the initial state, or the entire path) of \u03c0 that end in the same state. That is, |Q| proper cycles on the same state. Let \u03c0 1 , . . . , \u03c0 |Q|+1 be a list of these prefixes, given in order of increasing length, and let the corresponding suffixes be \u03c0 1 , . . . , \u03c0 |Q|+1 . We now consider two cases. First, suppose that there exist i < j such that weight(\u03c0 i ) and weight(\u03c0 j ) have the same residue modulo W q . Then define \u03c0 := \u03c0 i \u00b7 \u03c0 j . In this case path \u03c0 lifts to a run from (q, z) to (q , z ) such that (q , z ) lies in the same q -residue class as (q , z ). The second case is that the respective residue classes of weight(\u03c0 1 ), . . . , weight(\u03c0 |Q|+1 ) modulo W q are all distinct. Then there exists i > 1 such that, defining \u03c0 := \u03c0 1 \u00b7 \u03c0 i , the path \u03c0 lifts to a run from (q, z) to (q , z ) such that (q , z ) lies in a trivial q -residue class (as there are at most |Q| non-trivial residue classes).\n\nContinuing in this fashion we can recursively remove cycles from the original path \u03c0 to eventually obtain a path \u03c0 that has length at most |Q| 2 + 2 and such that Item 3 is satisfied. Consider all maximal infixes that were removed from \u03c0 to obtain \u03c0 . Note that each such infix must necessarily be a cycle as they arise from iteratively removing cycles. Since \u03c0 was primitive, all of them must have non-positive weight. Hence, Items 1 and 2 also hold.\n\n\nF Proof of Lemma 6\n\nConsider two \"consecutive\" configurations (q, z), (q, z + W q ) \u2208 C \\ U n , then all configurations (q, z ) for z \u2264 z < z + W q lie in pairwise-distinct q-residue classes. In particular, since there are at most |Q| non-trivial residue classes, and since trivial residue classes are contained in U 0 , we have that at most |Q| such elements are in \u03b4 n (C).\n\n\nG Proof of Proposition 10\n\nBy Proposition 8 we can find a polynomial poly 7 such that\npoly 7 (|Q|) \u2265 |Q| 2 + |Q| + 3 + R non-trivial |\u03b4 n (R)|(5)\nfor all n \u2208 N. Set poly 7 (|Q|) := |Q| \u00b7 (poly 7 (|Q|)) 2 + |Q| 2 + 4, and consider a valid, primitive path \u03c0 such that length(\u03c0) > poly 7 (|Q|) and (q, z) \u03c0 \u2192 (q , z ). Since \u03c0 has length greater than |Q|\u00b7(poly 7 (|Q|)) 2 +2, there exists a state q \u2208 Q that occurs at least (poly 7 (|Q|)) 2 times in internal configurations within the first |Q| \u00b7 (poly 7 (|Q|)) 2 + 2 configurations of \u03c0. Thus, there exists a sequence of proper prefixes \u03c0 1 < . . . < \u03c0 poly 7 (|Q|) of \u03c0 that all end in q and such that one of the following two cases holds.\n\n(i) The numbers weight(\u03c0 i ) all have the same residue modulo W q .\n\n(ii) The numbers weight(\u03c0 i ) have pairwise distinct residues modulo W q . Indeed, since there are (poly 7 (|Q|)) 2 prefixes to choose from, either Case (i) holds, or there are strictly less than poly 7 (|Q|) prefixes per residue class. If the latter holds then there must be least poly 7 (|Q|) such distinct residue classes, so Case (ii) holds.\n\nIn either case, we decompose the computation \u03c0 as \u03c0 = \u03c0 poly 7 (|Q|) \u00b7 \u03c0 . Observe that since \u03c0 is primitive, then so is \u03c0 . Applying Proposition 5 to \u03c0 we obtain a path \u03c0 of length at most |Q| 2 + 1 such that \u03c0 poly 7 (|Q|) \u00b7 \u03c0 leads from (q, x) to either the same residue class as (q , z ) or to a trivial q -residue class.\n\nIt is important to note that we cannot assume \u03c0 is not blocked after the prefix \u03c0 poly 7 (|Q|) . However, since |blocked(\u03c0 )| \u2264 |Q| 2 , we can remove from the list of prefixes at most |Q| 2 prefixes such that the remaining prefixes do not cause \u03c0 to block. (Indeed, we will not modify the path by literally removing prefixes but rather cycles which correspond to the path from a prefix to a longer prefix. For now, we are only speaking about removing elements from the collection of prefixes we can choose from.) W.l.o.g, let \u03c0 1 , . . . \u03c0 d be the remaining prefixes.\n\nConsider the family of paths \u03b8 i := \u03c0 i \u00b7 \u03c0 for i \u2208 {1, . . . , d}. Note that every \u03b8 i is of length at most poly 7 (|Q|), and since the \u03b8 i are obtained by removing q -cycles, and since \u03c0 is primitive, the configurations reached by \u03b8 i are above (q , z ). We claim that one of the \u03b8 i is a valid run from (q, z) to U n .\n\nWe separate the analysis according to the cases above. In Case (i), if \u03c0 leads to a trivial residue class, then all the \u03b8 i reach U n , and we are done. Otherwise, \u03c0 leads to the same residue class as (q , z ). By our choice of poly 7 (|Q|) in (5), we have that d > R non-trivial |\u03b4 n (R)|. That is, there are more prefixes that do not cause \u03c0 to block than there are missing elements above (q , z ) in U n . We conclude that some \u03b8 i reaches U n . In Case (ii), the paths \u03b8 i all reach distinct residue classes. In particular, since there are more than |Q| such prefixes -i.e. d > |Q| by our choice of poly 7 (|Q|) -then some \u03b8 i reach trivial residue classes, and thus reach U n .\n\n\nH Proof of Proposition 11\n\nWe carry out a forward reachability analysis starting from the initial configuration (q 0 , x 0 ). The algorithm runs for L + 1 rounds. In the k-th round, we maintain for each state q a set S q,k of configurations (q, x) that are reachable from (q 0 , x 0 ) by valid runs of length k. Let R q,k denote the set of all configurations (q, x) that are reachable from (q 0 , x 0 ) by valid runs of length k. We maintain the invariant that if some configuration (q, x) \u2208 R q,k can reach the objective O in L \u2212 k steps via a path \u03c0 then some configuration (q, x ) \u2208 S q,k can also reach O via the same path \u03c0. We output that the objective is reachable if and only if one of the sets S q f ,k for some k \u2208 {0, . . . , L} intersects O. This last step is clearly sound, given the invariant.\n\nThe key to obtaining a polynomial-time runtime bound is to suitably prune the sets S q,k to keep them of polynomial size. In order to compute {S q,k+1 } q\u2208Q from {S q,k } q\u2208Q we proceed as follows. First define {S q,k } q\u2208Q to be the indexed set of all valid configurations reachable in one step from {S q,k } q\u2208Q . Now we obtain S q,k+1 from S q,k by the following two steps:\n\nFirst, we delete from S q,k all configurations (q, x) such that there are (n + L) configurations (q, x ) in S q,k with x > x and x \u2261 x (mod W ).\n\nSecondly, we delete from S q,k all configurations (q, x) such that there are (n + L)(m + 1) configurations (q, x ) in S q,k with x > x.\n\nClearly each set S q,k has cardinality at most (n + L)(m + 1), and moreover, it can be computed from the collection of sets {S q ,k\u22121 | q \u2208 Q} in polynomial time.\n\nIt remains to argue that the invariant is maintained between rounds. To this end, suppose some state (q, x) \u2208 R q,k+1 can reach the objective in L \u2212 k \u2212 1 steps via a path \u03c0. Then there exists a state (q , x ) \u2208 R q ,k that can reach the objective in L \u2212 k steps via the path q \u03c0. By the loop invariant there exists a state (q , x ) \u2208 S q ,k that can also reach the objective via the path q \u03c0. Hence there is a state (q, y) \u2208 S q ,k that can reach the objective via the path \u03c0. Now if (q, y) is deleted in the first stage of pruning then there is some configuration (q, y ) such that y > y, y \u2261 y (mod W ), and \u03c0 yields a valid computation from (q, y ) to the objective O. After the first stage of pruning, each residue class in S q,k contains at most n + L elements. Hence if (q, y ) is deleted in the second stage of pruning, there are at least n + L configurations (q, y ) in S q,k+1 that are above (q, y ) and are such that the run over \u03c0 from (q, y ) leads to a configuration (q f , z) with m i=1 z \u2261 a i mod W . Now from one of these configurations \u03c0 yields a valid run that reaches O since one of n + L choices of (q, y ) will avoid blocked(\u03c0) and lead to a configuration (q f , z) such that n i=1 z = b i .\n\n\nI Proof of Lemma 13\n\nItems 1 and 2 are obvious. Item 3 follows from the fact that if \u03c0 1 \u2208 P is dominated by \u03c0 1 \u2208 P and \u03c0 2 \u2208 R is dominated by \u03c0 2 \u2208 R then \u03c0 1 \u00b7 \u03c0 2 is dominated by \u03c0 1 \u00b7 \u03c0 2 . Indeed, pmin(\u03c0 1 \u00b7 \u03c0 2 ) = min(pmin(\u03c0 1 ), weight(\u03c0 1 ) + pmin(\u03c0 2 )) \u2264 min(pmin(\u03c0 1 ), weight(\u03c0 1 ) + pmin(\u03c0 2 )) = pmin(\u03c0 1 \u00b7 \u03c0 2 ) .\n\nWe can similarly argue that smax(\u03c0 1 \u00b7 \u03c0 2 ) \u2264 smax(\u03c0 1 \u00b7 \u03c0 2 ).\n\n\nJ Proof of Proposition 14\n\nFix a state r \u2208 Q. Consider all p-r paths that appear as a minimal prefix of some path in P . Pick a single such prefix \u03c0 1 of maximum weight. Likewise consider all r-q paths that appear as a maximal suffix of some path in P and pick a single such a prefix \u03c0 2 of maximum weight. Now form the path \u03c0 := \u03c0 1 \u00b7 \u03c0 2 . This path dominates any path in P with nadir r. We define P to be the set of paths \u03c0 formed in this way as r runs through Q. Without loss of generality, we will henceforth suppose the absolute weight of all paths in P is at most 2 k . That is, it can be encoded in binary using k + 1 bits. The NC 1 bound on computing P relies on the well-known fact that the sum of a list of binary integers can be computed in NC 1 [12,Chapter 1]. To obtain P we compute the weight of each prefix and suffix of every path in P in parallel. According to [12], this can be done in time O(log k) on a parallel computer with |P |k processors: one for each element of P and each midpoint 0 \u2264 m \u2264 k. Finally, for each state r \u2208 Q in parallel, we find a maximum-weight prefix of a path in P that connects p and r and a maximum-weight suffix of a path in P that connects r and q. It is straightforward to prove the latter is also in NC 1 (see Appendix K) thus completing the proof.\n\n\nK\n\nComputing the maximum of a list of numbers is in NC 1\n\nWe will actually prove that the problem is in AC 0 . Since AC 0 is known to be strictly contained in NC 1 [1], this is slightly stronger than what we require. Let us formalize the problem we focus on and define the complexity class AC 0 . Given n numbers x 0 , . . . , x n\u22121 encoded in binary as m-bit strings, the ITMAX problem asks to compute the maximum of the given list of numbers in binary.\n\nThe complexity class AC 0 consists of all decision problems decidable by a logspace-uniform family of Boolean circuits with unbounded fan-in {\u2227, \u2228}-gates, polynomial size, and constant depth [1]. We will make use of the following equivalent descriptive-complexity definition: The class AC 0 consists of the set of all languages describable in first-order logic with the addition of the BIT predicate [9]. The latter predicate is defined as follows BIT(x, i) def \u21d0\u21d2 the (i + 1)-th bit of x is set to 1.\n\nIn the sequel, let 0 be the index of the most significant bit in the binary representation of the given integers. That is, the first bit of the binary string is the most significant one.\n\nProposition 16. ITMAX can be computed in AC 0 . Proof. We proceed by first defining AC 0 circuits GEQ i,j (or rather first-order logic predicates using BIT) that output 1 for the input if and only if x i \u2265 x j holds. That is, for all i = j we define the following. Finally, in order to output a single maximal element, we build an AC 0 circuit M i , per input integer, which outputs 1 if i is the first index such that M i outputs 1. Concretely, for all 0 \u2264 i \u2264 n and all 0 \u2264 k \u2264 m, we let\nM i def \u21d0\u21d2 M i \u2227 (\u2200j \u2208 [0, i) : \u00acM j ) b k def \u21d0\u21d2 \u2203i \u2208 [0, m] : (M i \u2227 BIT(x i , k))\nwhere b k is the k-th output bit of the circuit. Since M i clearly holds only if M j does not hold, for all i = j, the circuit correctly outputs the binary representation of the first maximal element of the given list.\n\nFigure 1\n1A 1-VASS with disequality tests, derived from a 3-CNF formula \u03d5 having propositional variables X1, . . . , Xm and clauses C1, . . . , Cn. Let p1, . . . , pm be the first m primes and write P := p1 \u00b7 \u00b7 \u00b7 pm for their product. Define val : N \u00d7 {X1, . . . , Xm} \u2192 {0, 1} by val(u, Xi) = 1 if and only if pi | u.\n\nFigure 2\n2A 1-VASS with disequality tests. Disequality guards are denoted by =. For example, in state s1 the set Ds 1 is N \\ {60}, and no run goes through s1 if its current counter value is 60.\n\nProposition 2 .\n2A configuration (s, 0) is unbounded if, and only if, (s, 0) can reach an unbounded configuration in Conf + .\n\nFigure 3\n3Figure 3 We focus on states s1, s4, and s10 in the 1-VASS in Figure 2, each of which lies on a simple positive cycle. We also indicate which counter values prevent taking the associated positive cycle. For example, state s4 has the simple cycle \u03b3s 4 with Ws 4 = 9 and taking \u03b3s 4 from {s4} \u00d7 {90, 93, 96} is not allowed due to disequality guards along \u03b3s 4 . The columns underneath each state represent residue classes of that state in Conf + . We colour all unbounded chains in blue and all bounded chains in pink; thus all blue configurations form the set U0.\n\n\nThe set U1 is obtained from U0 inFigure 3.\n\n\nThe set U2.\n\nU 1 =\n1{(s 4 , 63), (s 4 , 69)}; see Figure 4a. These two configurations belong to two distinct chains. The downward closure of {(s 4 , 63)} in its chain is {s 4 } \u00d7 {54, 63}, and the downward closure of {(s 4 , 69)} in its chain is {s 4 } \u00d7 {60, 69}. We\n\nTheorem 12 .\n12The Unboundedness Problem and the Coverability Problem for 1-VASS with disequality tests are decidable in polynomial time.\n\n\nGT i,j def \u21d0\u21d2 \u2203 \u2208 [0, m] : BIT(x i , ) \u2227 \u00acBIT(x j , ) \u2227 (\u2200k \u2208 [0, ) : BIT(x j , k) \u2194 BIT(x i , k)) GEQ i,j def \u21d0\u21d2 (\u2200k \u2208 [0, m] : BIT(x i , k) \u2194 BIT(x j , k)) \u2228 GT i,jThen, we make use of those circuits to define new AC 0 circuits M i which recognize whether the i-th element x i from the input list of integers is a maximal oneM i def \u21d0\u21d2 \u2200j \u2208 [0, m] : GEQ i,j .\n\nComputational Complexity -A Modern Approach. Sanjeev Arora, Boaz Barak, Cambridge University PressSanjeev Arora and Boaz Barak. Computational Complexity -A Modern Approach. Cambridge University Press, 2009. URL: http://www.cambridge.org/catalogue/catalogue.asp?isbn= 9780521424264.\n\nThe complexity of flat freeze LTL. Benedikt Bollig, Karin Quaas, Arnaud Sangnier, 28th International Conference on Concurrency Theory. 8516Benedikt Bollig, Karin Quaas, and Arnaud Sangnier. The complexity of flat freeze LTL. In 28th International Conference on Concurrency Theory, CONCUR, volume 85 of LIPIcs, pages 33:1-33:16, 2017.\n\nOn parametric timed automata and one-counter machines. Daniel Bundala, Jo\u00ebl Ouaknine, Inf. Comput. 253Daniel Bundala and Jo\u00ebl Ouaknine. On parametric timed automata and one-counter machines. Inf. Comput., 253:272-303, 2017.\n\nModel checking memoryful linear-time logics over one-counter automata. S Demri, R Lazic, A Sangnier, Theor. Comput. Sci. 411S. Demri, R. Lazic, and A. Sangnier. Model checking memoryful linear-time logics over one-counter automata. Theor. Comput. Sci., 411(22-24):2298-2316, 2010.\n\nReachability in two-clock timed automata is PSPACEcomplete. John Fearnley, Marcin Jurdzinski, Inf. Comput. 243John Fearnley and Marcin Jurdzinski. Reachability in two-clock timed automata is PSPACE- complete. Inf. Comput., 243:26-36, 2015.\n\nReachability in register machines with polynomial updates. Alain Finkel, Stefan G\u00f6ller, Christoph Haase, Mathematical Foundations of Computer Science 2013 -38th International Symposium, MFCS. Springer8087Alain Finkel, Stefan G\u00f6ller, and Christoph Haase. Reachability in register machines with polynomial updates. In Mathematical Foundations of Computer Science 2013 -38th Interna- tional Symposium, MFCS, volume 8087 of Lecture Notes in Computer Science, pages 409-420. Springer, 2013.\n\nModel checking succinct and parametric one-counter automata. Stefan G\u00f6ller, Christoph Haase, Jo\u00ebl Ouaknine, James Worrell, Automata, Languages and Programming, 37th International Colloquium, ICALP. Springer6199Stefan G\u00f6ller, Christoph Haase, Jo\u00ebl Ouaknine, and James Worrell. Model checking succinct and parametric one-counter automata. In Automata, Languages and Programming, 37th International Colloquium, ICALP, volume 6199 of Lecture Notes in Computer Science, pages 575-586. Springer, 2010.\n\nReachability in succinct and parametric one-counter automata. C Haase, S Kreutzer, J Ouaknine, J Worrell, Proceedings of CONCUR. CONCUR5710C. Haase, S. Kreutzer, J. Ouaknine, and J. Worrell. Reachability in succinct and parametric one-counter automata. In Proceedings of CONCUR, volume 5710 of LNCS, pages 369-383.\n\n. Springer, Springer, 2009.\n\nGraduate texts in computer science. Neil Immerman, 10.1007/978-1-4612-0539-5doi:10.1007/978-1-4612-0539-5SpringerDescriptive complexityNeil Immerman. Descriptive complexity. Graduate texts in computer science. Springer, 1999. URL: https://doi.org/10.1007/978-1-4612-0539-5, doi:10.1007/978-1-4612-0539-5.\n\nIntruder deduction for AC -like equational theories with homomorphisms. P Lafourcade, D Lugiez, R Treinen, LSV-04-16LSV, ENS de CachanIn Research ReportP. Lafourcade, D. Lugiez, and R. Treinen. Intruder deduction for AC -like equational theories with homomorphisms. In Research Report LSV-04-16, LSV, ENS de Cachan, 2004.\n\nA multiparameter analysis of the boundedness problem for vector addition systems. Louis E Rosier, Hsu-Chun Yen, J. Comput. Syst. Sci. 321Louis E. Rosier and Hsu-Chun Yen. A multiparameter analysis of the boundedness problem for vector addition systems. J. Comput. Syst. Sci., 32(1):105-135, 1986.\n\nIntroduction to Circuit Complexity -A Uniform Approach. Heribert Vollmer, 10.1007/978-3-662-03927-4doi:10.1007/978-3-662-03927-4Texts in Theoretical Computer Science. An EATCS Series. SpringerHeribert Vollmer. Introduction to Circuit Complexity -A Uniform Approach. Texts in Theoretical Computer Science. An EATCS Series. Springer, 1999. URL: https://doi.org/ 10.1007/978-3-662-03927-4, doi:10.1007/978-3-662-03927-4.\n", "annotations": {"author": "[{\"end\":64,\"start\":49},{\"end\":79,\"start\":65},{\"end\":98,\"start\":80},{\"end\":119,\"start\":99},{\"end\":134,\"start\":120},{\"end\":145,\"start\":135},{\"end\":154,\"start\":146},{\"end\":165,\"start\":155},{\"end\":182,\"start\":166},{\"end\":193,\"start\":183},{\"end\":204,\"start\":194},{\"end\":213,\"start\":205},{\"end\":224,\"start\":214},{\"end\":241,\"start\":225},{\"end\":252,\"start\":242},{\"end\":278,\"start\":253},{\"end\":298,\"start\":279},{\"end\":330,\"start\":299},{\"end\":351,\"start\":331},{\"end\":377,\"start\":352}]", "publisher": null, "author_last_name": "[{\"end\":63,\"start\":56},{\"end\":78,\"start\":73},{\"end\":97,\"start\":92},{\"end\":118,\"start\":105},{\"end\":133,\"start\":126},{\"end\":144,\"start\":137},{\"end\":153,\"start\":148},{\"end\":164,\"start\":159},{\"end\":181,\"start\":168},{\"end\":192,\"start\":185},{\"end\":203,\"start\":196},{\"end\":212,\"start\":207},{\"end\":223,\"start\":218},{\"end\":240,\"start\":227},{\"end\":251,\"start\":244}]", "author_first_name": "[{\"end\":55,\"start\":49},{\"end\":72,\"start\":65},{\"end\":89,\"start\":80},{\"end\":91,\"start\":90},{\"end\":104,\"start\":99},{\"end\":125,\"start\":120},{\"end\":136,\"start\":135},{\"end\":147,\"start\":146},{\"end\":156,\"start\":155},{\"end\":158,\"start\":157},{\"end\":167,\"start\":166},{\"end\":184,\"start\":183},{\"end\":195,\"start\":194},{\"end\":206,\"start\":205},{\"end\":215,\"start\":214},{\"end\":217,\"start\":216},{\"end\":226,\"start\":225},{\"end\":243,\"start\":242}]", "author_affiliation": "[{\"end\":277,\"start\":254},{\"end\":297,\"start\":280},{\"end\":329,\"start\":300},{\"end\":350,\"start\":332},{\"end\":376,\"start\":353}]", "title": "[{\"end\":46,\"start\":1},{\"end\":423,\"start\":378}]", "venue": null, "abstract": "[{\"end\":861,\"start\":507}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1040,\"start\":1037},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1042,\"start\":1040},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1044,\"start\":1042},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1046,\"start\":1044},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1048,\"start\":1046},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1050,\"start\":1048},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":1052,\"start\":1050},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":1055,\"start\":1052},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":1736,\"start\":1732},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2236,\"start\":2233},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2596,\"start\":2593},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2694,\"start\":2691},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5142,\"start\":5138},{\"end\":10912,\"start\":10905},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":53291,\"start\":53287},{\"end\":53301,\"start\":53291},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":53412,\"start\":53408},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":53998,\"start\":53995},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":54481,\"start\":54478},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":54690,\"start\":54687}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":56091,\"start\":55772},{\"attributes\":{\"id\":\"fig_1\"},\"end\":56286,\"start\":56092},{\"attributes\":{\"id\":\"fig_2\"},\"end\":56413,\"start\":56287},{\"attributes\":{\"id\":\"fig_3\"},\"end\":56986,\"start\":56414},{\"attributes\":{\"id\":\"fig_4\"},\"end\":57031,\"start\":56987},{\"attributes\":{\"id\":\"fig_5\"},\"end\":57045,\"start\":57032},{\"attributes\":{\"id\":\"fig_6\"},\"end\":57301,\"start\":57046},{\"attributes\":{\"id\":\"fig_7\"},\"end\":57440,\"start\":57302},{\"attributes\":{\"id\":\"fig_8\"},\"end\":57804,\"start\":57441}]", "paragraph": "[{\"end\":2839,\"start\":877},{\"end\":4802,\"start\":2841},{\"end\":5278,\"start\":4804},{\"end\":5344,\"start\":5280},{\"end\":5547,\"start\":5360},{\"end\":5977,\"start\":5772},{\"end\":6162,\"start\":5979},{\"end\":6249,\"start\":6164},{\"end\":6945,\"start\":6297},{\"end\":7419,\"start\":6947},{\"end\":7877,\"start\":7421},{\"end\":8331,\"start\":7879},{\"end\":8570,\"start\":8333},{\"end\":8724,\"start\":8583},{\"end\":9225,\"start\":8726},{\"end\":9712,\"start\":9277},{\"end\":10004,\"start\":9714},{\"end\":10359,\"start\":10006},{\"end\":10739,\"start\":10425},{\"end\":11864,\"start\":10741},{\"end\":12334,\"start\":11880},{\"end\":13425,\"start\":12365},{\"end\":13734,\"start\":13427},{\"end\":14070,\"start\":13748},{\"end\":14389,\"start\":14072},{\"end\":14887,\"start\":14705},{\"end\":15323,\"start\":14944},{\"end\":15789,\"start\":15336},{\"end\":15969,\"start\":15791},{\"end\":16395,\"start\":16154},{\"end\":17634,\"start\":16397},{\"end\":17839,\"start\":17682},{\"end\":18047,\"start\":17867},{\"end\":19049,\"start\":18049},{\"end\":19103,\"start\":19051},{\"end\":19616,\"start\":19454},{\"end\":19985,\"start\":19618},{\"end\":20325,\"start\":20081},{\"end\":20559,\"start\":20481},{\"end\":20703,\"start\":20620},{\"end\":20814,\"start\":20705},{\"end\":21041,\"start\":20824},{\"end\":21508,\"start\":21043},{\"end\":22378,\"start\":21510},{\"end\":23104,\"start\":22380},{\"end\":23235,\"start\":23118},{\"end\":23675,\"start\":23237},{\"end\":24416,\"start\":23677},{\"end\":24692,\"start\":24418},{\"end\":25269,\"start\":24707},{\"end\":25771,\"start\":25271},{\"end\":26084,\"start\":25843},{\"end\":26637,\"start\":26185},{\"end\":27451,\"start\":26639},{\"end\":27585,\"start\":27470},{\"end\":27915,\"start\":27587},{\"end\":28432,\"start\":27917},{\"end\":28738,\"start\":28434},{\"end\":28861,\"start\":28740},{\"end\":29070,\"start\":28909},{\"end\":29237,\"start\":29072},{\"end\":29548,\"start\":29257},{\"end\":30414,\"start\":29550},{\"end\":30699,\"start\":30416},{\"end\":30928,\"start\":30771},{\"end\":31257,\"start\":31043},{\"end\":31694,\"start\":31259},{\"end\":32043,\"start\":31696},{\"end\":32610,\"start\":32045},{\"end\":33178,\"start\":32612},{\"end\":33976,\"start\":33458},{\"end\":34806,\"start\":34005},{\"end\":35454,\"start\":34808},{\"end\":35799,\"start\":35456},{\"end\":35850,\"start\":35801},{\"end\":36069,\"start\":35852},{\"end\":36309,\"start\":36076},{\"end\":36539,\"start\":36311},{\"end\":36664,\"start\":36563},{\"end\":36740,\"start\":36666},{\"end\":36871,\"start\":36742},{\"end\":37277,\"start\":36873},{\"end\":37469,\"start\":37279},{\"end\":37832,\"start\":37471},{\"end\":38053,\"start\":37834},{\"end\":38468,\"start\":38055},{\"end\":38795,\"start\":38470},{\"end\":38957,\"start\":38801},{\"end\":39046,\"start\":38959},{\"end\":40203,\"start\":39068},{\"end\":40506,\"start\":40205},{\"end\":40617,\"start\":40508},{\"end\":41024,\"start\":40619},{\"end\":41457,\"start\":41064},{\"end\":41633,\"start\":41459},{\"end\":41808,\"start\":41656},{\"end\":42124,\"start\":41810},{\"end\":42245,\"start\":42126},{\"end\":42454,\"start\":42247},{\"end\":42848,\"start\":42456},{\"end\":43588,\"start\":42850},{\"end\":44350,\"start\":43617},{\"end\":45433,\"start\":44379},{\"end\":45886,\"start\":45435},{\"end\":46264,\"start\":45909},{\"end\":46352,\"start\":46294},{\"end\":46955,\"start\":46413},{\"end\":47024,\"start\":46957},{\"end\":47371,\"start\":47026},{\"end\":47698,\"start\":47373},{\"end\":48268,\"start\":47700},{\"end\":48591,\"start\":48270},{\"end\":49275,\"start\":48593},{\"end\":50085,\"start\":49305},{\"end\":50463,\"start\":50087},{\"end\":50609,\"start\":50465},{\"end\":50746,\"start\":50611},{\"end\":50910,\"start\":50748},{\"end\":52126,\"start\":50912},{\"end\":52460,\"start\":52150},{\"end\":52526,\"start\":52462},{\"end\":53828,\"start\":52556},{\"end\":53887,\"start\":53834},{\"end\":54285,\"start\":53889},{\"end\":54788,\"start\":54287},{\"end\":54976,\"start\":54790},{\"end\":55467,\"start\":54978},{\"end\":55771,\"start\":55553}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":5771,\"start\":5656},{\"attributes\":{\"id\":\"formula_1\"},\"end\":6296,\"start\":6250},{\"attributes\":{\"id\":\"formula_2\"},\"end\":10424,\"start\":10360},{\"attributes\":{\"id\":\"formula_3\"},\"end\":14704,\"start\":14417},{\"attributes\":{\"id\":\"formula_4\"},\"end\":14943,\"start\":14888},{\"attributes\":{\"id\":\"formula_5\"},\"end\":16114,\"start\":15970},{\"attributes\":{\"id\":\"formula_6\"},\"end\":17681,\"start\":17646},{\"attributes\":{\"id\":\"formula_7\"},\"end\":19453,\"start\":19104},{\"attributes\":{\"id\":\"formula_8\"},\"end\":20080,\"start\":19986},{\"attributes\":{\"id\":\"formula_9\"},\"end\":20377,\"start\":20326},{\"attributes\":{\"id\":\"formula_10\"},\"end\":20480,\"start\":20377},{\"attributes\":{\"id\":\"formula_11\"},\"end\":20619,\"start\":20560},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20823,\"start\":20815},{\"attributes\":{\"id\":\"formula_13\"},\"end\":25842,\"start\":25772},{\"attributes\":{\"id\":\"formula_14\"},\"end\":26184,\"start\":26085},{\"attributes\":{\"id\":\"formula_15\"},\"end\":30770,\"start\":30700},{\"attributes\":{\"id\":\"formula_16\"},\"end\":33457,\"start\":33179},{\"attributes\":{\"id\":\"formula_18\"},\"end\":39067,\"start\":39047},{\"attributes\":{\"id\":\"formula_19\"},\"end\":46412,\"start\":46353},{\"attributes\":{\"id\":\"formula_20\"},\"end\":55552,\"start\":55468}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":875,\"start\":863},{\"attributes\":{\"n\":\"2\"},\"end\":5358,\"start\":5347},{\"end\":5655,\"start\":5550},{\"end\":8581,\"start\":8573},{\"attributes\":{\"n\":\"3\"},\"end\":9275,\"start\":9228},{\"end\":11878,\"start\":11867},{\"attributes\":{\"n\":\"3.1\"},\"end\":12363,\"start\":12337},{\"end\":13746,\"start\":13737},{\"end\":14416,\"start\":14392},{\"end\":15334,\"start\":15326},{\"attributes\":{\"n\":\"3.2\"},\"end\":16152,\"start\":16116},{\"end\":17645,\"start\":17637},{\"attributes\":{\"n\":\"3.3\"},\"end\":17865,\"start\":17842},{\"end\":23116,\"start\":23107},{\"end\":24705,\"start\":24695},{\"end\":27468,\"start\":27454},{\"attributes\":{\"n\":\"3.4\"},\"end\":28907,\"start\":28864},{\"end\":29255,\"start\":29240},{\"end\":31041,\"start\":30931},{\"attributes\":{\"n\":\"4\"},\"end\":34003,\"start\":33979},{\"end\":36074,\"start\":36072},{\"end\":36561,\"start\":36542},{\"end\":38799,\"start\":38798},{\"end\":41062,\"start\":41027},{\"end\":41654,\"start\":41636},{\"end\":43615,\"start\":43591},{\"end\":44377,\"start\":44353},{\"end\":45907,\"start\":45889},{\"end\":46292,\"start\":46267},{\"end\":49303,\"start\":49278},{\"end\":52148,\"start\":52129},{\"end\":52554,\"start\":52529},{\"end\":53832,\"start\":53831},{\"end\":55781,\"start\":55773},{\"end\":56101,\"start\":56093},{\"end\":56303,\"start\":56288},{\"end\":56423,\"start\":56415},{\"end\":57052,\"start\":57047},{\"end\":57315,\"start\":57303}]", "table": null, "figure_caption": "[{\"end\":56091,\"start\":55783},{\"end\":56286,\"start\":56103},{\"end\":56413,\"start\":56305},{\"end\":56986,\"start\":56425},{\"end\":57031,\"start\":56989},{\"end\":57045,\"start\":57034},{\"end\":57301,\"start\":57054},{\"end\":57440,\"start\":57318},{\"end\":57804,\"start\":57443}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":4509,\"start\":4501},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":9734,\"start\":9726},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":10761,\"start\":10753},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":11568,\"start\":11560},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":12933,\"start\":12925},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":14344,\"start\":14336},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17521,\"start\":17513},{\"end\":17795,\"start\":17786},{\"end\":20502,\"start\":20493},{\"end\":21604,\"start\":21595},{\"end\":22111,\"start\":22102},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":32961,\"start\":32930},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":38835,\"start\":38827}]", "bib_author_first_name": "[{\"end\":57858,\"start\":57851},{\"end\":57870,\"start\":57866},{\"end\":58132,\"start\":58124},{\"end\":58146,\"start\":58141},{\"end\":58160,\"start\":58154},{\"end\":58485,\"start\":58479},{\"end\":58499,\"start\":58495},{\"end\":58721,\"start\":58720},{\"end\":58730,\"start\":58729},{\"end\":58739,\"start\":58738},{\"end\":58995,\"start\":58991},{\"end\":59012,\"start\":59006},{\"end\":59236,\"start\":59231},{\"end\":59251,\"start\":59245},{\"end\":59269,\"start\":59260},{\"end\":59726,\"start\":59720},{\"end\":59744,\"start\":59735},{\"end\":59756,\"start\":59752},{\"end\":59772,\"start\":59767},{\"end\":60219,\"start\":60218},{\"end\":60228,\"start\":60227},{\"end\":60240,\"start\":60239},{\"end\":60252,\"start\":60251},{\"end\":60541,\"start\":60537},{\"end\":60880,\"start\":60879},{\"end\":60894,\"start\":60893},{\"end\":60904,\"start\":60903},{\"end\":61217,\"start\":61212},{\"end\":61219,\"start\":61218},{\"end\":61492,\"start\":61484}]", "bib_author_last_name": "[{\"end\":57864,\"start\":57859},{\"end\":57876,\"start\":57871},{\"end\":58139,\"start\":58133},{\"end\":58152,\"start\":58147},{\"end\":58169,\"start\":58161},{\"end\":58493,\"start\":58486},{\"end\":58508,\"start\":58500},{\"end\":58727,\"start\":58722},{\"end\":58736,\"start\":58731},{\"end\":58748,\"start\":58740},{\"end\":59004,\"start\":58996},{\"end\":59023,\"start\":59013},{\"end\":59243,\"start\":59237},{\"end\":59258,\"start\":59252},{\"end\":59275,\"start\":59270},{\"end\":59733,\"start\":59727},{\"end\":59750,\"start\":59745},{\"end\":59765,\"start\":59757},{\"end\":59780,\"start\":59773},{\"end\":60225,\"start\":60220},{\"end\":60237,\"start\":60229},{\"end\":60249,\"start\":60241},{\"end\":60260,\"start\":60253},{\"end\":60482,\"start\":60474},{\"end\":60550,\"start\":60542},{\"end\":60891,\"start\":60881},{\"end\":60901,\"start\":60895},{\"end\":60912,\"start\":60905},{\"end\":61226,\"start\":61220},{\"end\":61240,\"start\":61228},{\"end\":61500,\"start\":61493}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":58087,\"start\":57806},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":8490286},\"end\":58422,\"start\":58089},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":34908341},\"end\":58647,\"start\":58424},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":8777646},\"end\":58929,\"start\":58649},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":16486302},\"end\":59170,\"start\":58931},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":10095261},\"end\":59657,\"start\":59172},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":985071},\"end\":60154,\"start\":59659},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":56046971},\"end\":60470,\"start\":60156},{\"attributes\":{\"id\":\"b8\"},\"end\":60499,\"start\":60472},{\"attributes\":{\"doi\":\"10.1007/978-1-4612-0539-5\",\"id\":\"b9\"},\"end\":60805,\"start\":60501},{\"attributes\":{\"id\":\"b10\"},\"end\":61128,\"start\":60807},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":6419447},\"end\":61426,\"start\":61130},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":60741523},\"end\":61845,\"start\":61428}]", "bib_title": "[{\"end\":58122,\"start\":58089},{\"end\":58477,\"start\":58424},{\"end\":58718,\"start\":58649},{\"end\":58989,\"start\":58931},{\"end\":59229,\"start\":59172},{\"end\":59718,\"start\":59659},{\"end\":60216,\"start\":60156},{\"end\":61210,\"start\":61130},{\"end\":61482,\"start\":61428}]", "bib_author": "[{\"end\":57866,\"start\":57851},{\"end\":57878,\"start\":57866},{\"end\":58141,\"start\":58124},{\"end\":58154,\"start\":58141},{\"end\":58171,\"start\":58154},{\"end\":58495,\"start\":58479},{\"end\":58510,\"start\":58495},{\"end\":58729,\"start\":58720},{\"end\":58738,\"start\":58729},{\"end\":58750,\"start\":58738},{\"end\":59006,\"start\":58991},{\"end\":59025,\"start\":59006},{\"end\":59245,\"start\":59231},{\"end\":59260,\"start\":59245},{\"end\":59277,\"start\":59260},{\"end\":59735,\"start\":59720},{\"end\":59752,\"start\":59735},{\"end\":59767,\"start\":59752},{\"end\":59782,\"start\":59767},{\"end\":60227,\"start\":60218},{\"end\":60239,\"start\":60227},{\"end\":60251,\"start\":60239},{\"end\":60262,\"start\":60251},{\"end\":60484,\"start\":60474},{\"end\":60552,\"start\":60537},{\"end\":60893,\"start\":60879},{\"end\":60903,\"start\":60893},{\"end\":60914,\"start\":60903},{\"end\":61228,\"start\":61212},{\"end\":61242,\"start\":61228},{\"end\":61502,\"start\":61484}]", "bib_venue": "[{\"end\":57849,\"start\":57806},{\"end\":58222,\"start\":58171},{\"end\":58521,\"start\":58510},{\"end\":58768,\"start\":58750},{\"end\":59036,\"start\":59025},{\"end\":59362,\"start\":59277},{\"end\":59855,\"start\":59782},{\"end\":60283,\"start\":60262},{\"end\":60535,\"start\":60501},{\"end\":60877,\"start\":60807},{\"end\":61262,\"start\":61242},{\"end\":61610,\"start\":61556},{\"end\":60291,\"start\":60285}]"}}}, "year": 2023, "month": 12, "day": 17}