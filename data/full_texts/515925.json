{"id": 515925, "updated": "2023-11-12 14:51:36.84", "metadata": {"title": "Mastering the game of Go with deep neural networks and tree search", "authors": "[{\"first\":\"David\",\"last\":\"Silver\",\"middle\":[]},{\"first\":\"Aja\",\"last\":\"Huang\",\"middle\":[]},{\"first\":\"Chris\",\"last\":\"Maddison\",\"middle\":[\"J.\"]},{\"first\":\"Arthur\",\"last\":\"Guez\",\"middle\":[]},{\"first\":\"Laurent\",\"last\":\"Sifre\",\"middle\":[]},{\"first\":\"George\",\"last\":\"Driessche\",\"middle\":[\"van\",\"den\"]},{\"first\":\"Julian\",\"last\":\"Schrittwieser\",\"middle\":[]},{\"first\":\"Ioannis\",\"last\":\"Antonoglou\",\"middle\":[]},{\"first\":\"Veda\",\"last\":\"Panneershelvam\",\"middle\":[]},{\"first\":\"Marc\",\"last\":\"Lanctot\",\"middle\":[]},{\"first\":\"Sander\",\"last\":\"Dieleman\",\"middle\":[]},{\"first\":\"Dominik\",\"last\":\"Grewe\",\"middle\":[]},{\"first\":\"John\",\"last\":\"Nham\",\"middle\":[]},{\"first\":\"Nal\",\"last\":\"Kalchbrenner\",\"middle\":[]},{\"first\":\"Ilya\",\"last\":\"Sutskever\",\"middle\":[]},{\"first\":\"Timothy\",\"last\":\"Lillicrap\",\"middle\":[]},{\"first\":\"Madeleine\",\"last\":\"Leach\",\"middle\":[]},{\"first\":\"Koray\",\"last\":\"Kavukcuoglu\",\"middle\":[]},{\"first\":\"Thore\",\"last\":\"Graepel\",\"middle\":[]},{\"first\":\"Demis\",\"last\":\"Hassabis\",\"middle\":[]}]", "venue": "Nature", "journal": "Nature", "publication_date": {"year": 2016, "month": null, "day": null}, "abstract": "The game of Go has long been viewed as the most challenging of classic games for artificial intelligence owing to its enormous search space and the difficulty of evaluating board positions and moves. Here we introduce a new approach to computer Go that uses \u2018value networks\u2019 to evaluate board positions and \u2018policy networks\u2019 to select moves. These deep neural networks are trained by a novel combination of supervised learning from human expert games, and reinforcement learning from games of self-play. Without any lookahead search, the neural networks play Go at the level of state-of-the-art Monte Carlo tree search programs that simulate thousands of random games of self-play. We also introduce a new search algorithm that combines Monte Carlo simulation with value and policy networks. Using this search algorithm, our program AlphaGo achieved a 99.8% winning rate against other Go programs, and defeated the human European Go champion by 5 games to 0. This is the first time that a computer program has defeated a human professional player in the full-sized game of Go, a feat previously thought to be at least a decade away.", "fields_of_study": "[\"Medicine\"]", "external_ids": {"arxiv": null, "mag": "2257979135", "acl": null, "pubmed": "26819042", "pubmedcentral": null, "dblp": "journals/nature/SilverHMGSDSAPL16", "doi": "10.1038/nature16961"}}, "content": {"source": {"pdf_hash": "1119e04da5361dc433496ca320b3d834071e2aa2", "pdf_src": "ScienceParsePlus", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": null, "status": "CLOSED"}}, "grobid": {"id": "8a8f8bf1ca97cd382b997ddfa3fcf5f0312c98f5", "type": "plain-text", "url": "s3://ai2-s2-science-parse-plus-prod/parse-results/s2orc_worker/1119e04da5361dc433496ca320b3d834071e2aa2.txt", "contents": "\nMastering the game of Go with deep neural networks and tree search\n\n\nDavid Silver davidsilver@google.com \nAja Huang \nChris J Maddison \nArthur Guez \nLaurent Sifre \nGeorge Van Den Driessche \nJulian Schrittwieser \nIoannis Antonoglou \nVeda Panneershelvam \nMarc Lanctot \nSander Dieleman \nDominik Grewe \nJohn Nham \nNal Kalchbrenner \nIlya Sutskever \nTimothy Lillicrap \nMadeleine Leach \nKoray Kavukcuoglu \nThore Graepel \nDemis Hassabis demishassabis@google.com \nMastering the game of Go with deep neural networks and tree search\n45FECB366B7DBE6199C80EA3EBAAEE0510.1038/nature16961A.G.L.S.A.H.I.A.V.P.S.D.D.G.N.K.I.S.K.K. and D.S. designed and trained the neural networks in AlphaGo. J.S.J.N.A.H. and D.S. designed and implemented the evaluation framework for AlphaGo. D.S.M.Le.T.L.T.G.K.K. and D.H. managed and advised on the project. D.S.T.G.A.G. and D.H. wrote the paper\n\n\nAll games of perfect information have an optimal value function, v * (s), which determines the outcome of the game, from every board position or state s, under perfect play by all players.These games may be solved by recursively computing the optimal value function in a search tree containing approximately b d possible sequences of moves, where b is the game's breadth (number of legal moves per position) and d is its depth (game length).In large games, such as chess (b \u2248 35, d \u2248 80) 1 and especially Go (b \u2248 250, d \u2248 150) 1 , exhaustive search is infeasible 2,3 , but the effective search space can be reduced by two general principles.First, the depth of the search may be reduced by position evaluation: truncating the search tree at state s and replacing the subtree below s by an approximate value function v(s) \u2248 v * (s) that predicts the outcome from state s.This approach has led to superhuman performance in chess 4 , checkers 5 and othello 6 , but it was believed to be intractable in Go due to the complexity of the game 7 .Second, the breadth of the search may be reduced by sampling actions from a policy p(a|s) that is a probability distribution over possible moves a in position s.For example, Monte Carlo rollouts 8 search to maximum depth without branching at all, by sampling long sequences of actions for both players from a policy p. Averaging over such rollouts can provide an effective position evaluation, achieving superhuman performance in backgammon 8 and Scrabble 9 , and weak amateur level play in Go 10 .\n\nMonte Carlo tree search (MCTS) 11,12 uses Monte Carlo rollouts to estimate the value of each state in a search tree.As more simulations are executed, the search tree grows larger and the relevant values become more accurate.The policy used to select actions during search is also improved over time, by selecting children with higher values.Asymptotically, this policy converges to optimal play, and the evaluations converge to the optimal value function 12 .The strongest current Go programs are based on MCTS, enhanced by policies that are trained to predict human expert moves 13 .These policies are used to narrow the search to a beam of high-probability actions, and to sample actions during rollouts.This approach has achieved strong amateur play [13][14][15] .However, prior work has been limited to shallow policies [13][14][15] or value functions 16 based on a linear combination of input features.\n\nRecently, deep convolutional neural networks have achieved unprecedented performance in visual domains: for example, image classification 17 , face recognition 18 , and playing Atari games 19 .They use many layers of neurons, each arranged in overlapping tiles, to construct increasingly abstract, localized representations of an image 20 .We employ a similar architecture for the game of Go.We pass in the board position as a 19 \u00d7 19 image and use convolutional layers to construct a representation of the position.We use these neural networks to reduce the effective depth and breadth of the search tree: evaluating positions using a value network, and sampling actions using a policy network.\n\nWe train the neural networks using a pipeline consisting of several stages of machine learning (Fig. 1).We begin by training a supervised learning (SL) policy network p \u03c3 directly from expert human moves.This provides fast, efficient learning updates with immediate feedback and high-quality gradients.Similar to prior work 13,15 , we also train a fast policy p \u03c0 that can rapidly sample actions during rollouts.Next, we train a reinforcement learning (RL) policy network p \u03c1 that improves the SL policy network by optimizing the final outcome of games of selfplay.This adjusts the policy towards the correct goal of winning games, rather than maximizing predictive accuracy.Finally, we train a value network v \u03b8 that predicts the winner of games played by the RL policy network against itself.Our program AlphaGo efficiently combines the policy and value networks with MCTS.\n\n\nSupervised learning of policy networks\n\nFor the first stage of the training pipeline, we build on prior work on predicting expert moves in the game of Go using supervised learning 13,[21][22][23][24] .The SL policy network p \u03c3 (a | s) alternates between convolutional layers with weights \u03c3, and rectifier nonlinearities.A final softmax layer outputs a probability distribution over all legal moves a.The input s to the policy network is a simple representation of the board state (see Extended Data Table 2).The policy network is trained on randomly\n\nThe game of Go has long been viewed as the most challenging of classic games for artificial intelligence owing to its enormous search space and the difficulty of evaluating board positions and moves.Here we introduce a new approach to computer Go that uses 'value networks' to evaluate board positions and 'policy networks' to select moves.These deep neural networks are trained by a novel combination of supervised learning from human expert games, and reinforcement learning from games of self-play.Without any lookahead search, the neural networks play Go at the level of stateof-the-art Monte Carlo tree search programs that simulate thousands of random games of self-play.We also introduce a new search algorithm that combines Monte Carlo simulation with value and policy networks.Using this search algorithm, our program AlphaGo achieved a 99.8% winning rate against other Go programs, and defeated the human European Go champion by 5 games to 0. This is the first time that a computer program has defeated a human professional player in the full-sized game of Go, a feat previously thought to be at least a decade away.\n\nsampled state-action pairs (s, a), using stochastic gradient ascent to maximize the likelihood of the human move a selected in state s\n\u2206\u03c3 \u03c3 \u221d \u2202( |) \u2202 \u03c3 pas log\nWe trained a 13-layer policy network, which we call the SL policy network, from 30 million positions from the KGS Go Server.The network predicted expert moves on a held out test set with an accuracy of 57.0% using all input features, and 55.7% using only raw board position and move history as inputs, compared to the state-of-the-art from other research groups of 44.4% at date of submission 24 (full results in Extended Data Table 3).Small improvements in accuracy led to large improvements in playing strength (Fig. 2a); larger networks achieve better accuracy but are slower to evaluate during search.We also trained a faster but less accurate rollout policy p \u03c0 (a|s), using a linear softmax of small pattern features (see Extended Data Table 4) with weights \u03c0; this achieved an accuracy of 24.2%, using just 2 \u00b5s to select an action, rather than 3 ms for the policy network.\n\n\nReinforcement learning of policy networks\n\nThe second stage of the training pipeline aims at improving the policy network by policy gradient reinforcement learning (RL) 25,26 .The RL policy network p \u03c1 is identical in structure to the SL policy network, and its weights \u03c1 are initialized to the same values, \u03c1 = \u03c3.We play games between the current policy network p \u03c1 and a randomly selected previous iteration of the policy network.Randomizing from a pool of opponents in this way stabilizes training by preventing overfitting to the current policy.We use a reward function r(s) that is zero for all non-terminal time steps t < T. The outcome z t = \u00b1 r(s T ) is the terminal reward at the end of the game from the perspective of the current player at time step t: +1 for winning and \u22121 for losing.Weights are then updated at each time step t by stochastic gradient ascent in the direction that maximizes expected outcome 25\n\u2206\u03c1 \u03c1 \u221d \u2202( |) \u2202 \u03c1 pa s z log tt t\nWe evaluated the performance of the RL policy network in game play, sampling each move \u223c( \u22c5| ) \u03c1 a ps tt from its output probability distribution over actions.When played head-to-head, the RL policy network won more than 80% of games against the SL policy network.We also tested against the strongest open-source Go program, Pachi 14 , a sophisticated Monte Carlo search program, ranked at 2 amateur dan on KGS, that executes 100,000 simulations per move.Using no search at all, the RL policy network won 85% of games against Pachi.In comparison, the previous state-of-the-art, based only on supervised Positions and outcomes were sampled from human expert games.Each position was evaluated by a single forward pass of the value network v \u03b8 , or by the mean outcome of 100 rollouts, played out using either uniform random rollouts, the fast rollout policy p \u03c0 , the SL policy network p \u03c3 or the RL policy network p \u03c1 .The mean squared error between the predicted value and the actual game outcome is plotted against the stage of the game (how many moves had been played in the given position).\n\n\nReinforcement learning of value networks\n\nThe final stage of the training pipeline focuses on position evaluation, estimating a value function v p (s) that predicts the outcome from position s of games played by using policy p for both players [28][29][30]\nE ()=| =\u223c \u2026 vs zs sa p [, ] p tt tT\nIdeally, we would like to know the optimal value function under perfect play v * (s); in practice, we instead estimate the value function (\u2212 () )\n\n\u03b8 \u03b8 vs zv s\n\nThe naive approach of predicting game outcomes from data consisting of complete games leads to overfitting.The problem is that successive positions are strongly correlated, differing by just one stone, but the regression target is shared for the entire game.When trained on the KGS data set in this way, the value network memorized the game outcomes rather than generalizing to new positions, achieving a minimum MSE of 0.37 on the test set, compared to 0.19 on the training set.To mitigate this problem, we generated a new self-play data set consisting of 30 million distinct positions, each sampled from a separate game.Each game was played between the RL policy network and itself until the game terminated.Training on this data set led to MSEs of 0.226 and 0.234 on the training and test set respectively, indicating minimal overfitting.Figure 2b shows the position evaluation accuracy of the value network, compared to Monte Carlo rollouts using the fast rollout policy p \u03c0 ; the value function was consistently more accurate.A single evaluation of v \u03b8 (s) also approached the accuracy of Monte Carlo rollouts using the RL policy network p \u03c1 , but using 15,000 times less computation.\n\n\nSearching with policy and value networks\n\nAlphaGo combines the policy and value networks in an MCTS algorithm (Fig. 3) that selects actions by lookahead search.Each edge (s, a) of the search tree stores an action value Q(s, a), visit count N(s, a), and prior probability P(s, a).The tree is traversed by simulation (that is, descending the tree in complete games without backup), starting from the root state.At each time step t of each simulation, an action a t is selected from state s t\n\n\n=( () +(\n\n)) aQ sa us a argmax ,, t a tt so as to maximize action value plus a bonus\n() \u221d () +( ) usa Psa Nsa , , 1,\nthat is proportional to the prior probability but decays with repeated visits to encourage exploration.When the traversal reaches a leaf node s L at step L, the leaf node may be expanded.The leaf position s L is processed just once by the SL policy network p \u03c3 .The output probabilities are stored as prior probabilities P for each legal action a, () =( |) \u03c3 P sa pa s , .The leaf node is evaluated in two very different ways: first, by the value network v \u03b8 (s L ); and second, by the outcome z L of a random rollout played out until terminal step T using the fast rollout policy p \u03c0 ; these evaluations are combined, using a mixing parameter \u03bb, into a leaf evaluation\nV(s L ) \u03bb\u03bb () =( \u2212)() + \u03b8 Vs vs z 1 LL L\nAt the end of simulation, the action values and visit counts of all traversed edges are updated.Each edge accumulates the visit count and mean evaluation of all simulations passing through that edge\n\u2211 \u2211 () =() () = () () () = = Nsas ai Qsa Nsa saiVs ,1 ,,, 1 , 1,, i n i nL i 1 1\nwhere s L i is the leaf node from the ith simulation, and 1(s, a, i) indicates whether an edge (s, a) was traversed during the ith simulation.Once the search is complete, the algorithm chooses the most visited move from the root position.\n\nIt is worth noting that the SL policy network p \u03c3 performed better in AlphaGo than the stronger RL policy network p \u03c1 , presumably because humans select a diverse beam of promising moves, whereas RL optimizes for the single best move.However, the value function\n()\u2248( ) \u03b8 \u03c1 vs\nvs p derived from the stronger RL policy network performed\n\n\nEvaluating the playing strength of AlphaGo\n\nTo evaluate AlphaGo, we ran an internal tournament among variants of AlphaGo and several other Go programs, including the strongest commercial programs Crazy Stone 13 and Zen, and the strongest open source programs Pachi 14 and Fuego 15 .All of these programs are based  6-11).Each program used approximately 5 s computation time per move.To provide a greater challenge to AlphaGo, some programs (pale upper bars) were given four handicap stones (that is, free moves at the start of every game) against all opponents.Programs were evaluated on an Elo scale 37 : a 230 point gap corresponds to a 79% probability of winning, which roughly corresponds to one amateur dan rank advantage on KGS 38 ; an approximate correspondence to human ranks is also shown, horizontal lines show KGS ranks achieved online by that program.Games against the human European champion Fan Hui were also included; these games used longer time controls.95% confidence intervals are shown.b, Performance of AlphaGo, on a single machine, for different combinations of components.The version solely using the policy network does not perform any search.c, Scalability study of MCTS in AlphaGo with search threads and GPUs, using asynchronous search (light blue) or distributed search (dark blue), for 2 s per move.The results of the tournament (see Fig. 4a) suggest that singlemachine AlphaGo is many dan ranks stronger than any previous Go program, winning 494 out of 495 games (99.8%) against other Go programs.To provide a greater challenge to AlphaGo, we also played games with four handicap stones (that is, free moves for the opponent); AlphaGo won 77%, 86%, and 99% of handicap games against Crazy Stone, Zen and Pachi, respectively.The distributed version of AlphaGo was significantly stronger, winning 77% of games against single-machine AlphaGo and 100% of its games against other programs.\n\nWe also assessed variants of AlphaGo that evaluated positions using just the value network (\u03bb = 0) or just rollouts (\u03bb = 1) (see Fig. 4b).Even without rollouts AlphaGo exceeded the performance of all other Go programs, demonstrating that value networks provide a viable alternative to Monte Carlo evaluation in Go.However, the mixed evaluation (\u03bb = 0.5) performed best, winning \u226595% of games against other variants.This suggests that the two position-evaluation mechanisms are complementary: the value network approximates the outcome of games played by the strong but impractically slow p \u03c1 , while the rollouts can precisely score and evaluate the outcome of games played by the weaker but faster rollout policy p \u03c0 .Figure 5 visualizes the evaluation of a real game position by AlphaGo.\n\nFinally, we evaluated the distributed version of AlphaGo against Fan Hui, a professional 2 dan, and the winner of the 2013, 2014 and 2015 European Go championships.Over 5-9 October 2015 AlphaGo and Fan Hui competed in a formal five-game match.AlphaGo won the match 5 games to 0 (Fig. 6 and Extended Data Table 1).This is the first time that a computer Go program has defeated a human professional player, without handicap, in the full game of Go-a feat that was previously believed to be at least a decade away 3,7,31 .\n\n\nDiscussion\n\nIn this work we have developed a Go program, based on a combination of deep neural networks and tree search, that plays at the level of the strongest human players, thereby achieving one of artificial intelligence's \"grand challenges\" [31][32][33] .We have developed, for the first time, effective move selection and position evaluation functions for Go, based on deep neural networks that are trained by a novel combination   During the match against Fan Hui, AlphaGo evaluated thousands of times fewer positions than Deep Blue did in its chess match against Kasparov 4 ; compensating by selecting those positions more intelligently, using the policy network, and evaluating them more precisely, using the value network-an approach that is perhaps closer to how humans play.Furthermore, while Deep Blue relied on a handcrafted evaluation function, the neural networks of AlphaGo are trained directly from gameplay purely through general-purpose supervised and reinforcement learning methods.\n\nGo is exemplary in many ways of the difficulties faced by artificial intelligence 33,34 : a challenging decision-making task, an intractable search space, and an optimal solution so complex it appears infeasible to directly approximate using a policy or value function.The previous major breakthrough in computer Go, the introduction of MCTS, led to corresponding advances in many other domains; for example, general game-playing, classical planning, partially observed planning, scheduling, and constraint satisfaction 35,36 .By combining tree search with policy and value networks, AlphaGo has finally reached a professional level in Go, providing hope that human-level performance can now be achieved in other seemingly intractable artificial intelligence domains.\n\nOnline Content Methods, along with any additional Extended Data display items and Source Data, are available in the online version of the paper; references unique to these sections appear only in the online paper.\n\n\nMETHODS\n\nProblem setting.Many games of perfect information, such as chess, checkers, othello, backgammon and Go, may be defined as alternating Markov games 39 .In these games, there is a state space S (where state includes an indication of the current player to play); an action space () A s defining the legal actions in any given state s \u2208 S; a state transition function f(s, a, \u03be) defining the successor state after selecting action a in state s and random input \u03be (for example, dice); and finally a reward function r i (s) describing the reward received by player i in state s.We restrict our attention to two-player zero-sum games, r 1 (s) = \u2212r 2 (s) = r(s), with deterministic state transitions, f(s, a, \u03be) = f(s, a), and zero rewards except at a terminal time step T. The outcome of the game z t = \u00b1r(s T ) is the terminal reward at the end of the game from the perspective of the current player at time step t.A policy p(a|s) is a probability distribution over legal actions a \u2208 () A s .A value function is the expected outcome if all actions for both players are selected according to policy p, that is, E ()=| =\u223c ...\n\n\nvs zs sa p [, ]\n\np tt tT\n\n. Zero-sum games have a unique optimal value function v*(s) that determines the outcome from state s following perfect play by both players,\n\u204e \u204e ()= \uf8f1 \uf8f2 \uf8f4 \uf8f4 \uf8f3 \uf8f4 \uf8f4 = \u2212( () ) vs zs s vf sa if , max, otherwise TT a\nPrior work.The optimal value function can be computed recursively by minimax (or equivalently negamax) search 40 .Most games are too large for exhaustive minimax tree search; instead, the game is truncated by using an approximate value function v(s) \u2248 v * (s) in place of terminal rewards.Depth-first minimax search with alpha-beta pruning 40 has achieved superhuman performance in chess 4 , checkers 5 and othello 6 , but it has not been effective in Go 7 .\n\nReinforcement learning can learn to approximate the optimal value function directly from games of self-play 39 .The majority of prior work has focused on a linear combination v \u03b8 (s) = \u03d5(s) \u2022 \u03b8 of features \u03d5(s) with weights \u03b8.Weights were trained using temporal-difference learning 41 in chess 42,43 , checkers 44,45 and Go 30 ; or using linear regression in othello 6 and Scrabble 9 .Temporal-difference learning has also been used to train a neural network to approximate the optimal value function, achieving superhuman performance in backgammon 46 ; and achieving weak kyu-level performance in small-board Go 28,29,47 using convolutional networks.\n\nAn alternative approach to minimax search is Monte Carlo tree search (MCTS) 11,12 , which estimates the optimal value of interior nodes by a double approximation, , such as UCT 12 , that selects children with higher action values, Q n (s, a) = \u2212V n (f(s, a)), plus a bonus u(s, a) that encourages exploration; or in the absence of a search tree at state s, it samples actions from a fast rollout policy (|) \u03c0 pa s .As more simulations are executed and the search tree grows deeper, the simulation policy becomes informed by increasingly accurate statistics.In the limit, both approximations become exact and MCTS (for example, with UCT) converges 12 to the optimal value function .The strongest current Go programs are based on MCTS [13][14][15]36 .\n\nMCTS has previously been combined with a policy that is used to narrow the beam of the search tree to high-probability moves 13 ; or to bias the bonus term towards high-probability moves 48 .MCTS has also been combined with a value function that is used to initialize action values in newly expanded nodes 16 , or to mix Monte Carlo evaluation with minimax evaluation 49 .By contrast, AlphaGo's use of value functions is based on truncated Monte Carlo search algorithms 8,9 , which terminate rollouts before the end of the game and use a value function in place of the terminal reward.AlphaGo's position evaluation mixes full rollouts with truncated rollouts, resembling in some respects the well-known temporal-difference learning algorithm TD(\u03bb).AlphaGo also differs from prior work by using slower but more powerful representations of the policy and value function; evaluating deep neural networks is several orders of magnitude slower than linear representations and must therefore occur asynchronously.\n\nThe performance of MCTS is to a large degree determined by the quality of the rollout policy.Prior work has focused on handcrafted patterns 50 or learning rollout policies by supervised learning 13 , reinforcement learning 16 , simulation balancing 51,52 or online adaptation 30,53 ; however, it is known that rollout-based position evaluation is frequently inaccurate 54 .AlphaGo uses relatively simple rollouts, and instead addresses the challenging problem of position evaluation more directly using value networks.\n\nSearch algorithm.To efficiently integrate large neural networks into AlphaGo, we implemented an asynchronous policy and value MCTS algorithm (APV-MCTS).Each node s in the search tree contains edges (s, a) for all legal actions a \u2208 () A s .Each edge stores a set of statistics, ,, ,, ,, ,, ,, } vr vr where P(s, a) is the prior probability, W v (s, a) and W r (s, a) are Monte Carlo estimates of total action value, accumulated over N v (s, a) and N r (s, a) leaf evaluations and rollout rewards, respectively, and Q(s, a) is the combined mean action value for that edge.Multiple simulations are executed in parallel on separate search threads.\n() () () () () () PsaN sa NsaW sa WsaQ sa {,\nThe APV-MCTS algorithm proceeds in the four stages outlined in Fig. 3. Selection (Fig. 3a).The first in-tree phase of each simulation begins at the root of the search tree and finishes when the simulation reaches a leaf node at time step L. At each of these time steps, t < L, an action is selected according to the statistics in the search tree, =( () +( )) aQ sa us a argmax ,, , where c puct is a constant determining the level of exploration; this search control strategy initially prefers actions with high prior probability and low visit count, but asymptotically prefers actions with high action value.Evaluation (Fig. 3c).The leaf position s L is added to a queue for evaluation v \u03b8 (s L ) by the value network, unless it has previously been evaluated.The second rollout phase of each simulation begins at leaf node s L and continues until the end of the game.At each of these time-steps, t \u2265 L, actions are selected by both players according to the rollout policy, \u223c( \u22c5| ) \u03c0 aps tt .When the game reaches a terminal state, the outcome =\u00b1 () zr s tT is computed from the final score.Backup (Fig. 3d).At each in-tree step t \u2264 L of the simulation, the rollout statistics are updated as if it has lost n vl games, N r (s t , a t ) \u2190 N r (s t , a t ) + n vl ; W r (s t , a t ) \u2190 W r (s t , a t ) \u2212n vl ; this virtual loss 55 discourages other threads from simultaneously exploring the identical variation.At the end of the simulation, t he rollout statistics are updated in a backward pass through each step t \u2264 L, replacing the virtual losses by the outcome, N r (s t , a t ) \u2190 N r (s t , a t ) \u2212n vl + 1; W r (s t , a t ) \u2190 W r (s t , a t ) + n vl + z t .Asynchronously, a separate backward pass is initiated when the evaluation of the leaf position s L completes.The output of the value network v \u03b8 (s L ) is used to update value statistics in a second backward pass through each step t \u2264 L, N v (s t , a t ) \u2190 N v (s t , a t ) + 1, W v (s t , a t ) \u2190 W v (s t , a t ) + v \u03b8 (s L ).The overall evaluation of each state action is a weighted average of the Monte Carlo estimates,\n\u03bb\u03bb () =( \u2212) + () () () () Q sa ,1 Wsa Ns a Wsa Ns a , ,, , v v r r\n, that mixes together the value network and rollout evaluations with weighting parameter \u03bb.All updates are performed lock-free 56 .Expansion (Fig. 3b).When the visit count exceeds a threshold, N r (s, a) > n thr , the successor state s\u2032 = f(s, a) is added to the search tree.The new node is initialized to {N(s\u2032, a) = N r (s\u2032, a) = 0, W(s\u2032, a) = W r (s\u2032, a) = 0, P(s\u2032,a) = p \u03c3 (a|s\u2032)}, using a tree policy p \u03c4 (a|s\u2032) (similar to the rollout policy but with more features, see Extended Data Table 4) to provide placeholder prior probabilities for action selection.The position s\u2032 is also inserted into a queue for asynchronous GPU evaluation by the policy network.Prior probabilities are computed by the SL policy network (\u22c5|\u2032 ) \u03c3 \u03b2 ps with a softmax temperature set to \u03b2; these replace the placeholder prior probabilities, (\u2032 )\u2190 (|\u2032)\n\u03c3 \u03b2 P sa pa s ,\n, using an atomic update.The threshold n thr is adjusted dynamically to ensure that the rate at which positions are added to the policy queue matches the rate at which the GPUs evaluate the policy network.Positions are evaluated by both the policy network and the value network using a mini-batch size of 1 to minimize end-to-end evaluation time.\n\nWe also implemented a distributed APV-MCTS algorithm.This architecture consists of a single master machine that executes the main search, many remote worker CPUs that execute asynchronous rollouts, and many remote worker GPUs that execute asynchronous policy and value network evaluations.The entire search tree is stored on the master, which only executes the in-tree phase of each simulation.The leaf positions are communicated to the worker CPUs, which execute the rollout phase of simulation, and to the worker GPUs, which compute network features and evaluate the policy and value networks.The prior probabilities of the policy network are returned to the master, where they replace placeholder prior probabilities at the newly expanded node.The rewards from rollouts and the value network outputs are each returned to the master, and backed up the originating search path.\n\nAt the end of search AlphaGo selects the action with maximum visit count; this is less sensitive to outliers than maximizing action value 15 .The search tree is reused at subsequent time steps: the child node corresponding to the played action becomes the new root node; the subtree below this child is retained along with all its statistics, while the remainder of the tree is discarded.The match version of AlphaGo continues searching during the opponent's move.It extends the search if the action maximizing visit count and the action maximizing action value disagree.Time controls were otherwise shaped to use most time in the middle-game 57 .AlphaGo resigns when its overall evaluation drops below an estimated 10% probability of winning the game, that is, () <\u2212 .Qsa max ,0 8 a .AlphaGo does not employ the all-moves-as-first 10 or rapid action value estimation 58 heuristics used in the majority of Monte Carlo Go programs; when using policy networks as prior knowledge, these biased heuristics do not appear to give any additional benefit.In addition AlphaGo does not use progressive widening 13 , dynamic komi 59 or an opening book 60 .The parameters used by AlphaGo in the Fan Hui match are listed in Extended Data Table 5. Rollout policy.The rollout policy (|) \u03c0 pa s is a linear softmax policy based on fast, incrementally computed, local pattern-based features consisting of both 'response' patterns around the previous move that led to state s, and 'non-response' patterns around the candidate move a in state s.Each non-response pattern is a binary feature matching a specific 3 \u00d7 3 pattern centred on a, defined by the colour (black, white, empty) and liberty count (1, 2, \u22653) for each adjacent intersection.Each response pattern is a binary feature matching the colour and liberty count in a 12-point diamond-shaped pattern 21 centred around the previous move.Additionally, a small number of handcrafted local features encode common-sense Go rules (see Extended Data Table 4).Similar to the policy network, the weights \u03c0 of the rollout policy are trained from 8 million positions from human games on the Tygem server to maximize log likelihood by stochastic gradient descent.Rollouts execute at approximately 1,000 simulations per second per CPU thread on an empty board.\n\nOur rollout policy p \u03c0 (a|s) contains less handcrafted knowledge than stateof-the-art Go programs 13 .Instead, we exploit the higher-quality action selection within MCTS, which is informed both by the search tree and the policy network.We introduce a new technique that caches all moves from the search tree and then plays similar moves during rollouts; a generalization of the 'last good reply' heuristic 53 .At every step of the tree traversal, the most probable action is inserted into a hash table, along with the 3 \u00d7 3 pattern context (colour, liberty and stone counts) around both the previous move and the current move.At each step of the rollout, the pattern context is matched against the hash table; if a match is found then the stored move is played with high probability.Symmetries.In previous work, the symmetries of Go have been exploited by using rotationally and reflectionally invariant filters in the convolutional layers 24,28,29 .Although this may be effective in small neural networks, it actually hurts performance in larger networks, as it prevents the intermediate filters from identifying specific asymmetric patterns 23 .Instead, we exploit symmetries at run-time by dynamically transforming each position s using the dihedral group of eight reflections and rotations, d 1 (s), \u2026, d 8 (s).In an explicit symmetry ensemble, a mini-batch of all 8 positions is passed into the policy network or value network and computed in parallel.For the value network, the output values are simply averaged, ()=\u2211 (( ))\n\u03b8\u03b8 = vs vds j j1 8 1 8\n. For the policy network, the planes of output probabilities are rotated/reflected back into the original orientation, and averaged together to provide an ensemble prediction, (\u22c5|)=\u2211 (( \u22c5| ( )))\n\u03c3\u03c3 = \u2212 ps dpds j j j1 8 1 8 1\n; this approach was used in our raw network evaluation (see Extended Data Table 3).Instead, APV-MCTS makes use of an implicit symmetry ensemble that randomly selects a single rotation/reflection j \u2208 [1, 8] for each evaluation.We compute exactly one evaluation for that orientation only; in each simulation we compute the value of leaf node s L by v \u03b8 (d j (s L )), and allow the search procedure to average over these evaluations.Similarly, we compute the policy network for a single, randomly selected rotation/reflection, (( \u22c5| ( ))) Policy network: reinforcement learning.We further trained the policy network by policy gradient reinforcement learning 25,26 .Each iteration consisted of a minibatch of n games played in parallel, between the current policy network p \u03c1 that is being trained, and an opponent \u03c1 \u2212 p that uses parameters \u03c1 \u2212 from a previous iter- ation, randomly sampled from a pool of opponents, so as to increase the stability of training.Weights were initialized to \u03c1 = \u03c1 \u2212 = \u03c3.Every 500 iterations, we added the current parameters \u03c1 to the opponent pool.Each game i in the mini-batch was played out until termination at step T i , and then scored to determine the outcome =\u00b1 () zr s t i T i from each player's perspective.The games were then replayed to determine the policy gradient update, \u2206\u03c1 =\u2211 \u2211( \u2212())\n\u03b1 \u03c1 == \u2202( |) \u2202 \u03c1 zv s n i n t T pas t i t i 11 log i t i t i\n, using the REINFORCE algorithm 25 with baseline () vs t i for variance reduction.On the first pass through the training pipeline, the baseline was set to zero; on the second pass we used the value network v \u03b8 (s) as a baseline; this provided a small performance boost.The policy network was trained in this way for 10,000 minibatches of 128 games, using 50 GPUs, for one day.Value network: regression.We trained a value network ()\u2248( ) \u03b8 \u03c1 vs vs p to approx- imate the value function of the RL policy network p \u03c1 .To avoid overfitting to the strongly correlated positions within games, we constructed a new data set of uncorrelated self-play positions.This data set consisted of over 30 million positions, each drawn from a unique game of self-play.Each game was generated in three phases by randomly sampling a time step U \u223c unif{1, 450}, and sampling the first t = 1,\u2026 U \u2212 1 moves from the SL policy network, a t \u223c p \u03c3 (\u2022|s t ); then sampling one move uniformly at random from available moves, a U \u223c unif{1, 361} (repeatedly until a U is legal); then sampling the remaining sequence of moves until the game terminates, t = U + 1, \u2026 T, from the RL policy network, a t \u223c p \u03c1 (\u2022|s t ).Finally, the game is scored to determine the outcome z t = \u00b1r(s T ). .During the first two phases of generation we sample from noisier distributions so as to increase the diversity of the data set.The training method was identical to SL policy network training, except that the parameter update was based on mean squared error between the predicted values and the observed rewards, \u2206\u03b8 =\u2211(\u2212() )\n\u03b1 \u03b8 \u03b8 = \u2202() \u2202 \u03b8 zv s m k m kk vs 1 k\n. The value network was trained for 50 million mini-batches of 32 positions, using 50 GPUs, for one week.Features for policy/value network.Each position s was pre-processed into a set of 19 \u00d7 19 feature planes.The features that we use come directly from the raw representation of the game rules, indicating the status of each intersection of the Go board: stone colour, liberties (adjacent empty points of stone's chain), captures, legality, turns since stone was played, and (for the value network only) the current colour to play.In addition, we use one simple tactical feature that computes the outcome of a ladder search 7 .All features were computed relative to the current colour to play; for example, the stone colour at each intersection was represented as either player or opponent rather than black or white.Each integer feature value is split into multiple 19 \u00d7 19 planes of binary values (one-hot encoding).For example, separate binary feature planes are used to represent whether an intersection has 1 liberty, 2 liberties,\u2026, \u22658 liberties.The full set of feature planes are listed in Extended Data Table 2. Neural network architecture.The input to the policy network is a 19 \u00d7 19 \u00d7 48 image stack consisting of 48 feature planes.The first hidden layer zero pads the input into a 23 \u00d7 23 image, then convolves k filters of kernel size 5 \u00d7 5 with stride 1 with the input image and applies a rectifier nonlinearity.Each of the subsequent hidden layers 2 to 12 zero pads the respective previous hidden layer into a 21 \u00d7 21 image, then convolves k filters of kernel size 3 \u00d7 3 with stride 1, again followed by a rectifier nonlinearity.The final layer convolves 1 filter of kernel size 1 \u00d7 1 with stride 1, with a different bias for each position, and applies a softmax function.The match version of AlphaGo used k = 192 filters; Fig. 2b and Extended Data Table 3 additionally show the results of training with k = 128, 256 and 384 filters.\n\nThe input to the value network is also a 19 \u00d7 19 \u00d7 48 image stack, with an additional binary feature plane describing the current colour to play.Hidden layers 2 to 11 are identical to the policy network, hidden layer 12 is an additional convolution layer, hidden layer 13 convolves 1 filter of kernel size 1 \u00d7 1 with stride 1, and hidden layer 14 is a fully connected linear layer with 256 rectifier units.The output layer is a fully connected linear layer with a single tanh unit.Evaluation.We evaluated the relative strength of computer Go programs by running an internal tournament and measuring the Elo rating of each program.We estimate the probability that program a will beat program b by a logistic function () = +((()\u2212 () ) pa b beats ce be a 1 1e xp elo , and estimate the ratings e(\u2022) by Bayesian logistic regression, computed by the BayesElo program 37 using the standard constant c elo = 1/400.The scale was anchored to the BayesElo rating of professional Go player Fan Hui (2,908 at date of submission) 62 .All programs received a maximum of 5 s computation time per move; games were scored using Chinese rules with a komi of 7.5 points (extra points to compensate white for playing second).We also played handicap games where AlphaGo played white against existing Go programs; for these games we used a non-standard handicap system in which komi was retained but black was given additional stones on the usual handicap points.Using these rules, a handicap of K stones is equivalent to giving K \u2212 1 free moves to black, rather than K \u2212 1/2 free moves using standard no-komi handicap rules.We used these handicap rules because AlphaGo's value network was trained specifically to use a komi of 7.5.\n\nWith the exception of distributed AlphaGo, each computer Go program was executed on its own single machine, with identical specifications, using the latest available version and the best hardware configuration supported by that program (see Extended Data Table 6).In Fig. 4, approximate ranks of computer programs are based on the highest KGS rank achieved by that program; however, the KGS version may differ from the publicly available version.\n\nThe match against Fan Hui was arbitrated by an impartial referee.Five formal games and five informal games were played with 7.5 komi, no handicap, and Chinese rules.AlphaGo won these games 5-0 and 3-2 respectively (Fig. 6 and Extended Data Table 1).Time controls for formal games were 1 h main time plus three periods of 30 s byoyomi.Time controls for informal games were three periods of 30 s byoyomi.Time controls and playing conditions were chosen by Fan Hui in advance of the match; it was also agreed that the overall match outcome would be determined solely by the formal games.To approximately assess the relative rating of Fan Hui to computer Go programs, we appended the results of all ten games to our internal tournament results, ignoring differences in time controls.The policy network architecture consists of 128, or 256 lters in convolutional layers; an explicit symmetry ensemble over 2, 4 or 8 symmetries; using only the rst 4, 12 or 20 input feature planes listed in Extended Data Table 1.The results consist of the test and train accuracy on the KGS data set; and the percentage of games won by given policy network against AlphaGo's policy network (highlighted row 2): using the policy networks to select moves directly (raw wins); or using AlphaGo's search to select moves (AlphaGo wins); and nally the computation time for a single evaluation of the policy network.\n\n\nExtended Data\n\n\nExtended Data Table 4 | Input features for rollout and tree policy\n\nFeatures used by the rollout policy ( rst set) and tree policy ( rst and second set).Patterns are based on stone colour (black/white/empty) and liberties (1, 2, \u22653) at each intersection of the pattern.\n\n\nExtended Data\n\nFigure 1 |Figure 2 |\n12\nFigure 1 | Neural network training pipeline and architecture.a, A fast rollout policy p \u03c0 and supervised learning (SL) policy network p \u03c3 are trained to predict human expert moves in a data set of positions.A reinforcement learning (RL) policy network p \u03c1 is initialized to the SL policy network, and is then improved by policy gradient learning to maximize the outcome (that is, winning more games) against previous versions of the policy network.A new data set is generated by playing games of self-play with the RL policy network.Finally, a value network v \u03b8 is trained by regression to predict the expected outcome (that is, whether\n\n\nFigure 3 |\n3\nFigure3| Monte Carlo tree search in AlphaGo.a, Each simulation traverses the tree by selecting the edge with maximum action value Q, plus a bonus u(P) that depends on a stored prior probability P for that edge.b, The leaf node may be expanded; the new node is processed once by the policy network p \u03c3 and the output probabilities are stored as prior probabilities P for each action.c, At the end of a simulation, the leaf node\n\n\nFigure 4 |\n4\nFigure 4 | Tournament evaluation of AlphaGo.a, Results of a tournament between different Go programs (see Extended Data Tables6-11).Each program used approximately 5 s computation time per move.To provide a greater challenge to AlphaGo, some programs (pale upper bars) were given four handicap stones (that is, free moves at the start of every game) against all opponents.Programs were evaluated on an Elo scale 37 : a 230 point gap corresponds to a 79% probability of winning, which roughly corresponds to one amateur dan rank advantage on KGS38 ; an approximate correspondence to human ranks is also shown,\n\n\nFigure 5 |\n5\nFigure 5 | How AlphaGo (black, to play) selected its move in an informal game against Fan Hui.For each of the following statistics, the location of the maximum value is indicated by an orange circle.a, Evaluation of all successors s\u2032 of the root position s, using the value network v \u03b8 (s\u2032); estimated winning percentages are shown for the top evaluations.b, Action values Q(s, a) for each edge (s, a) in the tree from root position s; averaged over value network evaluations only (\u03bb = 0).c, Action values Q(s, a), averaged over rollout evaluations only (\u03bb = 1).\n\n\n\n\nPublishers Limited.All rights reserved ARTICLE RESEARCH on high-performance MCTS algorithms.In addition, we included the open source program GnuGo, a Go program using state-of-the-art search methods that preceded MCTS.All programs were allowed 5 s of computation time per move.\n\n\nFigure 6 |\n6\nFigure 6 | Games from the match between AlphaGo and the European champion, Fan Hui.Moves are shown in a numbered sequence corresponding to the order in which they were played.Repeated moves on the same intersection are shown in pairs below the board.The first\n\n\nReceived 11\n11\nNovember 2015; accepted 5 January 2016.\n\n\n.,\n\nThe first approximation, ()\u2248( ) V sv s nP n , uses n Monte Carlo simulations to estimate the value function of a simulation policy P n .The second approximation, uses a simulation policy P n in place of minimax optimal actions.The simulation policy selects actions according to a search control function (( )+ () ) Qs au sa argmax ,, a n\n\n\n1 . 1 .\n11\nPolicy network: classification.We trained the policy network p \u03c3 to classify positions according to expert moves played in the KGS data set.This data set contains 29.4 million positions from 160,000 games played by KGS 6 to 9 dan human players; 35.4% of the games are handicap games.The data set was split into a test set (the first million positions) and a training set (the remaining 28.4 million positions).Pass moves were excluded from the data set.Each position consisted of a raw board description s and the move a selected by the human.We augmented the data set to include all eight reflections and rotations of each position.Symmetry augmentation and input features were pre-computed for each position.For each training step, we sampled a randomly selected mini-batch of m samples from the augmented KGS data set, and applied an asynchronous stochastic gradient descent update to maximize the log likelihood of the action, The step size \u03b1 was initialized to 0.003 and was halved every 80 million training steps, without momentum terms, and a mini-batch size of m = 16.Updates were applied asynchronously on 50 GPUs using DistBelief61 ; gradients older than 100 steps were discarded.Training took around 3 weeks for 340 million training steps.\n\n\n\n\nWe have introduced a new search algorithm that successfully combines neural network evaluations with Monte Carlo rollouts.Our program AlphaGo integrates these components together, at scale, in a high-performance tree search engine.\nGame 1Game 2Game 3Fan Hui (Black), AlphaGo (White)AlphaGo (Black), Fan Hui (White)Fan Hui (Black), AlphaGo (White)AlphaGo wins by 2.5 pointsAlphaGo wins by resignationAlphaGo wins by resignationGame 4Game 5AlphaGo (Black), Fan Hui (White)Fan Hui (Black), AlphaGo (White)AlphaGo wins by resignationAlphaGo wins by resignation\n\u00a9 2016 Macmillan Publishers Limited.All rights reserved of supervised and reinforcement learning.\n\n\n\n\nOnly a single training example (s U+1 , z U+1 ) is added to the data set from each game.This data provides unbiased samples of the value function\nE () =| ++ vs \u03c1 zs [, ++ ... ap \u223c \u03c1 p UU UUT 11 11 ,]\n\nTable 1 | Details of match between AlphaGo and Fan Hui\n1\nThe match consisted of ve formal games with longer time controls, and ve informal games with shorter time controls.Time controls and playing conditions were chosen by Fan Hui in advance of the match.\nDateBlackWhiteCategory Result5/10/15 Fan HuiAlphaGo FormalAlphaGo wins by 2.5 points5/10/15 Fan HuiAlphaGo Informal Fan Hui wins by resignation6/10/15 AlphaGo Fan HuiFormalAlphaGo wins by resignation6/10/15 AlphaGo Fan HuiInformal AlphaGo wins by resignation7/10/15 Fan HuiAlphaGo FormalAlphaGo wins by resignation7/10/15 Fan HuiAlphaGo Informal AlphaGo wins by resignation8/10/15 AlphaGo Fan HuiFormalAlphaGo wins by resignation8/10/15 AlphaGo Fan HuiInformal AlphaGo wins by resignation9/10/15 Fan HuiAlphaGo FormalAlphaGo wins by resignation9/10/15 AlphaGo Fan HuiInformal Fan Hui wins by resignation\n\nTable 2 | Input features for neural networks\n2Feature#of planes DescriptionStone colour3 Player stone/opponent stone/emptyOnes1A constant plane filled with 1Turns since8H ow many turns sinceamove was playedLiberties8 Number of liberties (empty adjacent points)Capture size8H ow many opponent stones would be capturedSelf-atari size8H ow manyofown stones would be capturedLiberties after move8 Number of liberties after this move is playedLadder capture1 Whetheramove at this point isasuccessful ladder captureLadder escape1 Whetheramove at this point isasuccessful ladder escapeSensibleness1 Whetheramove is legal and does not fill its owneyesZeros1A constant plane filled with 0Player color1 Whether current player is black\n\nTable 3 | Supervised learning results for the policy network\n3ArchitectureEvaluationFiltersSymmetries FeaturesTest accu-Train accu-RawnetAlphaGoForwardracy%racy%wins %wins %time (ms)12854.657.036532.819214855.458.050504.825655.959.167557.125656.559.8673813.925656.960.2691427.625657.060.469555.31921447.651.425154.819254.757.130344.819254.757.238404.81928449.253.224236.819255.758.332336.819255.858.442336.8\n\nTable 5 |\n5\nParameters used by AlphaGo\nSymbol ParameterValue\u03b2Softmax temperature0.67\u03bbMixing parameter0.5n vlVirtual loss3n thrExpansion threshold40c puctExploration constant5\n\nTable 6 | Results of a tournament between different Go programs\n6\nEach program played with a maximum of 5 s thinking time per move; the games against Fan Hui were conducted using longer time controls, as described in Methods.CN4, ZN4 and PC4 were given 4 handicap stones; komi was 7.5 in all games.Elo ratings were computed by BayesElo.\nShort name Computer PlayerVersionTime settings CPUs GPUs KGS RankElo\u03b1 d rvpDistributed AlphaGo See Methods5 seconds1202176-\u03b1 rvpAlphaGoSee Methods5 seconds488-CSCrazyStone20155 seconds32-6 dZNZen55 seconds8-6dPCPachi10.99400,000 sims16-2 dFGFuegosvn1989100,000 sims16--GGGnuGo3.8level101-5 k431CS 4CrazyStone4 handicap stones 5 seconds32--ZN 4Zen4 handicap stones 5 seconds8--PC 4Pachi4 handicap stones 400,000 sims16--\n\nTable 8 | Results of a tournament between AlphaGo and distributed AlphaGo, testing scalability with hardware\n8AlphaGoSearch threadsCPUsGPUsEloAsynchronous14 88Asynchronous24 88Asynchronous44 88Asynchronous84 88Asynchronous16488Asynchronous32488Asynchronous40488Asynchronous40481Asynchronous40482Asynchronous40484Distributed1242864Distributed24764112Distributed401202176Distributed641920280\n\nTable 9 | Cross-table of win rates in per cent between programs\n9\u03b1 rvp\u03b1 vp\u03b1 rp\u03b1 rv\u03b1 r\u03b1 v\u03b1 p\u03b1 rvp-1 [0; 5]5 [4; 7]0 [0; 4]0 [0; 8]0 [0; 19]0 [0; 19]\u03b1 vp99 [95; 100]-6 1 [52; 69]35 [25; 48]6 [1; 27]0 [0; 22]1 [0; 6]\u03b1 rp95 [93; 96]39 [31; 48]-1 3 [7; 23]0 [0; 9]0 [0; 22]4 [1; 21]\n\nTable 10 | Cross-table of win rates in per cent between programs in the single-machine scalability study\n10\n[61;78]90 [84;94] 94 [83;98] 86 [72;94] 98 [91;100] 98 [92;99] [76;100] 96 [91;98] 38 [25;52] 28 30 [22;39] -7 2 [61;81] 81 [71;88] 86 [76;93] 92 [83;97] 93 [86;96] [69;91] 84 [75;90] 26 [17;38] 48 10 [6;16] 28 [19;39] -6 2 [53;70] 71 [61;80] 82 [71;89] 84 [74;90] [69;89] 78 [63;88] 18 [10;28] 88 6 [2;17] 19 [12;29] 38 [30;47] -6 1 [51;71] 65 [51;76] 73 [62;82] [59;85] 64 [55;73] 12 [3;34] 16 8 14 [6;28] 14 [7;24] 29 [20;39] 39 [29;49] -5 2 [41;63] 61 [50;71] [41;64] 41 [32;51] 5 [1;25] ;14] 16 [10;26] 27 [18;38] 39 [29;50] 48 [37;58] -4 [30;56] 41 [26;58] 4 [1;18] 40 4 0 [0;24] 17 [9;31] 19 [11;31] 26 [15;41] 48 [36;59] 56 [43;68] 57 [44;70] -2 9 [18;41] 2 [0;11] 40 2 4 [2;9] 16 [10;25] 22 [12;37] 36 [27;45] 59 [49;68] 74 [64;83] 59 [42;74] [59;82] -5 [1;17] 40 1 62 [48;75] 74 [62;83] 82 [72;90] 88 [66;97] 95 [75;99] 100 [70;100] 96 [82;99] [89;100] 95 [83;99] -\nThreads12481 63 24 04 04 04 0GPU888888842118 -7 0 32 8 2 [0;9] 8 [3;17] 18 [11;29] 35 [24;49] 48 [37;59]-5 2 [42;63] [32;57] 26 [17;36] 0 [0;30]4082 [1;8]8 [4\nGoogle DeepMind, 5 New Street Square, London EC4A 3TW, UK.\nGoogle, 1600 Amphitheatre Parkway, Mountain View, California 94043, USA.\n\u00a9 2016 Macmillan Publishers Limited. All rights reserved\nFeature planes used by the policy network (all but last feature) and value network (all features).\u00a9 2016 Macmillan Publishers Limited. All rights reserved\nEach program played with a maximum of 2 s thinking time per move. Elo ratings were computed by BayesElo.\u00a9 2016 Macmillan Publishers Limited. All rights reserved\n95% Agresti-Coull con dence intervals in grey. Each program played with 2 s per move; komi was 7.5 in all games.\u00a9 2016 Macmillan Publishers Limited. All rights reserved\nAcknowledgementsWe thank Fan Hui for agreeing to play against AlphaGo; T. Manning for refereeing the match; R. Munos and T. Schaul for helpful discussions and advice; A. Cain and M. Cant for work on the visuals; P. Dayan, G. Wayne, D. Kumaran, D. Purves, H. van Hasselt, A. Barreto and G. Ostrovski for reviewing the paper; and the rest of the DeepMind team for their support, ideas and encouragement.Supplementary Information is available in the online version of the paper.Extended DataEvaluating positions using rollouts only (\u03b1rp, \u03b1r), value nets only (\u03b1vp, \u03b1v), or mixing both (\u03b1rvp, \u03b1rv); either using the policy network p\u03c3(\u03b1rvp, \u03b1vp, \u03b1rp), or no policy network (\u03b1rvp, \u03b1vp, \u03b1rp), that is, instead using the placeholder probabilities from the tree policy p\u03c4 throughout.Each program used 5 s per move on a single machine with 48 CPUs and 8 GPUs.Elo ratings were computed by BayesElo.\nSearching for Solutions in Games and Arti cial Intelligence. L V Allis, 1994Maastricht, The NetherlandsUniv. LimburgPhD thesis\n\nGames solved: now and in the future. H Van Den Herik, J W Uiterwijk, J Van Rijswijck, Artif. Intell. 1342002\n\nThe games computers (and people) play. J Schae Er, Advances in Computers. 522000\n\n. M Campbell, A Hoane, F Deep Hsu, Blue, Artif. Intell. 1342002\n\nA world championship caliber checkers program. J Schae Er, Artif. Intell. 531992\n\nFrom simple features to sophisticated evaluation functions. M Buro, 1st International Conference on Computers and Games. 1999\n\n. M M\u00fcller, Computer, Go, Artif. Intell. 1342002\n\nOn-line policy improvement using Monte-Carlo search. G Tesauro, G Galperin, Advances in Neural Information Processing. 1996\n\nWorld-championship-caliber Scrabble. B Sheppard, Artif. Intell. 1342002\n\nMonte-Carlo Go developments. B Bouzy, B Helmstetter, 10th International Conference on Advances in Computer Games. 2003\n\nE cient selectivity and backup operators in Monte-Carlo tree search. R Coulom, 5th International Conference on Computers and Games. 2006\n\nBandit based Monte-Carlo planning. L Kocsis, C Szepesv\u00e1ri, 15th European Conference on Machine Learning. 2006\n\nComputing Elo ratings of move patterns in the game of Go. R Coulom, ICGA J. 302007\n\nState of the art open source Go program. P Baudi\u0161, J.-L Gailly, Pachi, Advances in Computer Games. Springer2012\n\nFuego -an open-source framework for board games and Go engine based on Monte-Carlo tree search. M M\u00fcller, M Enzenberger, B Arneson, R Segal, IEEE Trans. Comput. Intell. AI in Games. 22010\n\nCombining online and o ine learning in UCT. S Gelly, D Silver, 17th International Conference on Machine Learning. 2007\n\nImageNet classi cation with deep convolutional neural networks. A Krizhevsky, I Sutskever, G Hinton, Advances in Neural Information Processing Systems. 2012\n\nFace recognition: a convolutional neural-network approach. S Lawrence, C L Giles, A C Tsoi, A D Back, IEEE Trans. Neural Netw. 81997\n\nHuman-level control through deep reinforcement learning. V Mnih, Nature. 5182015\n\nDeep learning. Y Lecun, Y Bengio, G Hinton, Nature. 5212015\n\nBayesian pattern ranking for move prediction in the game of Go. D Stern, R Herbrich, T Graepel, International Conference of Machine Learning. 2006\n\nMimicking Go experts with convolutional neural networks. I Sutskever, V Nair, International Conference on Arti cial Neural Networks. 2008\n\nC J Maddison, A Huang, I Sutskever, D Silver, Move evaluation in Go using deep convolutional neural networks. 3rd International Conference on Learning Representations. 2015\n\nTraining deep convolutional neural networks to play go. C Clark, A J Storkey, 32nd International Conference on Machine Learning. 2015\n\nSimple statistical gradient-following algorithms for connectionist reinforcement learning. R J Williams, Mach. Learn. 81992\n\nPolicy gradient methods for reinforcement learning with function approximation. R Sutton, D Mcallester, S Singh, Y Mansour, Advances in Neural Information Processing Systems. 2000\n\nReinforcement Learning: an Introduction. R Sutton, A Barto, 1998MIT Press\n\nTemporal di erence learning of position evaluation in the game of Go. N N Schraudolph, P Dayan, T J Sejnowski, Adv. Neural Inf. Process. Syst. 61994\n\nEvaluation in Go by a neural network using soft segmentation. M Enzenberger, 10th Advances in Computer Games Conference. 2003267\n\nTemporal-di erence search in computer Go. D Silver, R Sutton, M M\u00fcller, Mach. Learn. 872012\n\nThe mystery of Go, the ancient game that computers still can't win. A Levinovitz, 2014Wired Magazine\n\nAll Systems Go. D Mechner, The Sciences. 381998\n\nComputational intelligence in mind games. J Mandziuk, Challenges for Computational Intelligence. 2007\n\nA chronology of computer chess and its literature. H Berliner, Artif. Intell. 101978\n\nA survey of Monte-Carlo tree search methods. C Browne, IEEE Trans. Comput. Intell. AI in Games. 42012\n\nThe grand challenge of computer Go: Monte Carlo tree search and extensions. S Gelly, Commun. ACM. 552012\n\nWhole-history rating: A Bayesian rating system for players of time-varying strength. R Coulom, International Conference on Computers and Games. 2008\n\nKGS. Rating system math. \n\nMarkov games as a framework for multi-agent reinforcement learning. M L Littman, 11th International Conference on Machine Learning. 1994\n\nAn analysis of alpha-beta pruning. D E Knuth, R W Moore, Artif. Intell. 61975\n\nLearning to predict by the method of temporal di erences. R Sutton, Mach. Learn. 31988\n\nLearning to play chess using temporal di erences. J Baxter, A Tridgell, L Weaver, Mach. Learn. 402000\n\nBootstrapping from game tree search. J Veness, D Silver, A Blair, W Uther, Advances in Neural Information Processing Systems. 2009\n\nSome studies in machine learning using the game of checkers II -recent progress. A L Samuel, IBM J. Res. Develop. 111967\n\nTemporal di erence learning applied to a high-performance game-playing program. J Schae Er, M Hlynka, V Jussila, 17th International Joint Conference on Arti cial Intelligence. 2001\n\nTD-gammon, a self-teaching backgammon program, achieves master-level play. G Tesauro, Neural Comput. 61994\n\nGo-playing program using neural nets. F Dahl, Honte, Machines that learn to play games. Nova Science1999\n\nMulti-armed bandits with episode context. C D Rosin, Ann. Math. Artif. Intell. 612011\n\nMonte Carlo tree search with heuristic evaluations using implicit minimax backups. M Lanctot, M H M Winands, T Pepels, N R Sturtevant, IEEE Conference on Computational Intelligence and Games. 2014\n\nModi cation of UCT with patterns in Monte-Carlo Go. S Gelly, Y Wang, R Munos, O Teytaud, INRIA. 60622006Tech. Rep\n\nMonte-Carlo simulation balancing. D Silver, G Tesauro, 26th International Conference on Machine Learning. 2009119\n\nMonte-Carlo simulation balancing in practice. S.-C Huang, R Coulom, S.-S Lin, 7th International Conference on Computers and Games. Springer-Verlag2011\n\nThe power of forgetting: improving the last-good-reply policy in Monte Carlo Go. H Baier, P D Drake, IEEE Trans. Comput. Intell. AI in Games. 22010\n\nInvestigating the limits of Monte-Carlo tree search methods in computer Go. S Huang, M M\u00fcller, 8th International Conference on Computers and Games. 2013\n\nOn the scalability of parallel UCT. R B Segal, Computers and Games. 65152011\n\nA lock-free multithreaded Monte-Carlo tree search algorithm. M Enzenberger, M M\u00fcller, 12th Advances in Computer Games Conference. 2009\n\nTime management for Monte-Carlo tree search applied to the game of Go. S.-C Huang, R Coulom, S.-S Lin, International Conference on Technologies and Applications of Arti cial Intelligence. 2010\n\nMonte-Carlo tree search and rapid action value estimation in computer Go. S Gelly, D Silver, Artif. Intell. 1752011\n\nBalancing MCTS by dynamically adjusting the komi value. P Baudi\u0161, ICGA J. 341312011\n\nActive opening book application for Monte-Carlo tree search in 19\u00d719 Go. H Baier, M H Winands, In Benelux Conference on Arti cial Intelligence. 2011\n\nLarge scale distributed deep networks. J Dean, Advances in Neural Information Processing Systems. 2012\n\nCS 100 [97; 100] 74 [66; 81] 98 [94; 99] 80 [70; 87] 5 [3; 7] 36 [16; 61] 8 [5; 14] ZN 99 [93; 100] 84 [67; 93] 98 [93; 99] 92 [67; 99] 6 [2; 19] 40 [12; 77] 100 [65; 100] PC 100 [98; 100] 99 [95; 100] 100 [98; 100] 98 [89; 100] 78 [73; 81] 87 [68; 95] 55 [47; 62] FG 100 [97; 100] 99 [93; 100] 100 [96; 100] 100 [91; 100] 78 [73; 83] 100 [65; 100] 65 [55; 73] GG 100 [44; 100] 100 [34; 100] 100 [68; 100] 100 [57; 100] 99 [97; 100] 67 [21; 94] 99 [95; 100] CS 4 77 [69; 84] 12 [8; 18] 53 [44; 61] 15 [8; 24] 0 [0; 3] 0 [0; 30] 0 [0; 8] ZN 4 86 [77; 92] 25 [16; 38] 67 [56; 76] 14 [7; 27] 0 [0; 12] 0 [0; 43] - PC 4 99Go ratings. 16; 48] \u03b1 p 100 [81; 100] 99 [94; 100] 96 [79; 99] 52 [35; 67] 22 [16; 29] 70 [52; 84. 97; 100] 82 [75; 88] 98 [95; 99] 89 [79; 95] 32 [26; 39] 13 [3; 36] 35 [25; 46\n\nEach program played with a maximum of 5 s thinking time per move. CN4, ZN4 and PC4 were given 4 handicap stones. Agresti-Coull con dence intervals in grey\n\nEach program played with 2 s per move. 95% Agresti-Coull con dence intervals in grey. komi was 7.5 in all games\n", "annotations": {"author": "[{\"end\":106,\"start\":70},{\"end\":117,\"start\":107},{\"end\":135,\"start\":118},{\"end\":148,\"start\":136},{\"end\":163,\"start\":149},{\"end\":189,\"start\":164},{\"end\":211,\"start\":190},{\"end\":231,\"start\":212},{\"end\":252,\"start\":232},{\"end\":266,\"start\":253},{\"end\":283,\"start\":267},{\"end\":298,\"start\":284},{\"end\":309,\"start\":299},{\"end\":327,\"start\":310},{\"end\":343,\"start\":328},{\"end\":362,\"start\":344},{\"end\":379,\"start\":363},{\"end\":398,\"start\":380},{\"end\":413,\"start\":399},{\"end\":454,\"start\":414}]", "publisher": null, "author_last_name": "[{\"end\":82,\"start\":76},{\"end\":116,\"start\":111},{\"end\":134,\"start\":126},{\"end\":147,\"start\":143},{\"end\":162,\"start\":157},{\"end\":188,\"start\":171},{\"end\":210,\"start\":197},{\"end\":230,\"start\":220},{\"end\":251,\"start\":237},{\"end\":265,\"start\":258},{\"end\":282,\"start\":274},{\"end\":297,\"start\":292},{\"end\":308,\"start\":304},{\"end\":326,\"start\":314},{\"end\":342,\"start\":333},{\"end\":361,\"start\":352},{\"end\":378,\"start\":373},{\"end\":397,\"start\":386},{\"end\":412,\"start\":405},{\"end\":428,\"start\":420}]", "author_first_name": "[{\"end\":75,\"start\":70},{\"end\":110,\"start\":107},{\"end\":123,\"start\":118},{\"end\":125,\"start\":124},{\"end\":142,\"start\":136},{\"end\":156,\"start\":149},{\"end\":170,\"start\":164},{\"end\":196,\"start\":190},{\"end\":219,\"start\":212},{\"end\":236,\"start\":232},{\"end\":257,\"start\":253},{\"end\":273,\"start\":267},{\"end\":291,\"start\":284},{\"end\":303,\"start\":299},{\"end\":313,\"start\":310},{\"end\":332,\"start\":328},{\"end\":351,\"start\":344},{\"end\":372,\"start\":363},{\"end\":385,\"start\":380},{\"end\":404,\"start\":399},{\"end\":419,\"start\":414}]", "author_affiliation": null, "title": "[{\"end\":67,\"start\":1},{\"end\":521,\"start\":455}]", "venue": null, "abstract": null, "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1357,\"start\":1356},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1396,\"start\":1395},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1433,\"start\":1431},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1434,\"start\":1433},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1796,\"start\":1795},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1809,\"start\":1808},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1823,\"start\":1822},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1905,\"start\":1904},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2103,\"start\":2102},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2349,\"start\":2348},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2364,\"start\":2363},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2403,\"start\":2401},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2441,\"start\":2438},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2443,\"start\":2441},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2864,\"start\":2862},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2989,\"start\":2987},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3164,\"start\":3160},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3168,\"start\":3164},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3172,\"start\":3168},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3235,\"start\":3231},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3239,\"start\":3235},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3243,\"start\":3239},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3265,\"start\":3263},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3456,\"start\":3454},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3478,\"start\":3476},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3507,\"start\":3505},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3654,\"start\":3652},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4340,\"start\":4337},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4342,\"start\":4340},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5074,\"start\":5071},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":5078,\"start\":5074},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5082,\"start\":5078},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":5086,\"start\":5082},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5090,\"start\":5086},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7125,\"start\":7123},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":7785,\"start\":7782},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":7787,\"start\":7785},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":8903,\"start\":8901},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":9914,\"start\":9910},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":9918,\"start\":9914},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":9922,\"start\":9918},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":13698,\"start\":13696},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13768,\"start\":13766},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":14224,\"start\":14222},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":16708,\"start\":16706},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16710,\"start\":16708},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":16712,\"start\":16710},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":16968,\"start\":16964},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":16972,\"start\":16968},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":16976,\"start\":16972},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":17299,\"start\":17298},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":17808,\"start\":17805},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":17810,\"start\":17808},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":18246,\"start\":18243},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":18248,\"start\":18246},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":18866,\"start\":18864},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":20187,\"start\":20185},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":20417,\"start\":20415},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20464,\"start\":20463},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":20477,\"start\":20476},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":20491,\"start\":20490},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":20531,\"start\":20530},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":20645,\"start\":20643},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":20819,\"start\":20817},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":20832,\"start\":20829},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20834,\"start\":20832},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":20849,\"start\":20846},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":20851,\"start\":20849},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":20861,\"start\":20859},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":20903,\"start\":20902},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":20918,\"start\":20917},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":21086,\"start\":21084},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":21267,\"start\":21264},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":21269,\"start\":21267},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":21367,\"start\":21365},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":21837,\"start\":21835},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":21925,\"start\":21921},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":21929,\"start\":21925},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":21933,\"start\":21929},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":21935,\"start\":21933},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":22066,\"start\":22064},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":22128,\"start\":22126},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":22247,\"start\":22245},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":22309,\"start\":22307},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":22411,\"start\":22409},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":22412,\"start\":22411},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":23090,\"start\":23088},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":23145,\"start\":23143},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":23173,\"start\":23171},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":23200,\"start\":23197},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":23202,\"start\":23200},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":23227,\"start\":23224},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":23229,\"start\":23227},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":23319,\"start\":23317},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":25485,\"start\":25483},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":26438,\"start\":26436},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":28527,\"start\":28525},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":29032,\"start\":29030},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":29221,\"start\":29219},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":29257,\"start\":29255},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":29490,\"start\":29488},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":29530,\"start\":29528},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":30230,\"start\":30228},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":30777,\"start\":30775},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":31085,\"start\":31083},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":31620,\"start\":31617},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":31623,\"start\":31620},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":31625,\"start\":31623},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":31822,\"start\":31820},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":33113,\"start\":33110},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":33115,\"start\":33113},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":33877,\"start\":33875},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":36084,\"start\":36083},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":38426,\"start\":38424},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":42924,\"start\":42922},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":45677,\"start\":45675}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":41921,\"start\":41259},{\"attributes\":{\"id\":\"fig_1\"},\"end\":42363,\"start\":41922},{\"attributes\":{\"id\":\"fig_2\"},\"end\":42987,\"start\":42364},{\"attributes\":{\"id\":\"fig_3\"},\"end\":43565,\"start\":42988},{\"attributes\":{\"id\":\"fig_4\"},\"end\":43847,\"start\":43566},{\"attributes\":{\"id\":\"fig_5\"},\"end\":44122,\"start\":43848},{\"attributes\":{\"id\":\"fig_7\"},\"end\":44179,\"start\":44123},{\"attributes\":{\"id\":\"fig_8\"},\"end\":44523,\"start\":44180},{\"attributes\":{\"id\":\"fig_11\"},\"end\":45787,\"start\":44524},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":46446,\"start\":45788},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":46649,\"start\":46447},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":47511,\"start\":46650},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":48237,\"start\":47512},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":48646,\"start\":48238},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":48822,\"start\":48647},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":49580,\"start\":48823},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":49971,\"start\":49581},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":50250,\"start\":49972},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":51394,\"start\":50251}]", "paragraph": "[{\"end\":2405,\"start\":868},{\"end\":3314,\"start\":2407},{\"end\":4011,\"start\":3316},{\"end\":4888,\"start\":4013},{\"end\":5440,\"start\":4931},{\"end\":6568,\"start\":5442},{\"end\":6704,\"start\":6570},{\"end\":7610,\"start\":6730},{\"end\":8536,\"start\":7656},{\"end\":9663,\"start\":8570},{\"end\":9922,\"start\":9708},{\"end\":10104,\"start\":9959},{\"end\":10117,\"start\":10106},{\"end\":11308,\"start\":10119},{\"end\":11800,\"start\":11353},{\"end\":11887,\"start\":11813},{\"end\":12589,\"start\":11920},{\"end\":12829,\"start\":12631},{\"end\":13149,\"start\":12911},{\"end\":13412,\"start\":13151},{\"end\":13485,\"start\":13427},{\"end\":15402,\"start\":13532},{\"end\":16193,\"start\":15404},{\"end\":16714,\"start\":16195},{\"end\":17721,\"start\":16729},{\"end\":18490,\"start\":17723},{\"end\":18705,\"start\":18492},{\"end\":19834,\"start\":18717},{\"end\":19861,\"start\":19854},{\"end\":20003,\"start\":19863},{\"end\":20533,\"start\":20075},{\"end\":21186,\"start\":20535},{\"end\":21937,\"start\":21188},{\"end\":22946,\"start\":21939},{\"end\":23466,\"start\":22948},{\"end\":24111,\"start\":23468},{\"end\":26241,\"start\":24157},{\"end\":27142,\"start\":26309},{\"end\":27505,\"start\":27159},{\"end\":28385,\"start\":27507},{\"end\":30675,\"start\":28387},{\"end\":32206,\"start\":30677},{\"end\":32424,\"start\":32230},{\"end\":33781,\"start\":32455},{\"end\":35420,\"start\":33843},{\"end\":37405,\"start\":35458},{\"end\":39117,\"start\":37407},{\"end\":39565,\"start\":39119},{\"end\":40954,\"start\":39567},{\"end\":41242,\"start\":41041},{\"end\":41920,\"start\":41284},{\"end\":42362,\"start\":41936},{\"end\":42986,\"start\":42378},{\"end\":43564,\"start\":43002},{\"end\":43846,\"start\":43569},{\"end\":44121,\"start\":43862},{\"end\":44178,\"start\":44139},{\"end\":44522,\"start\":44185},{\"end\":45786,\"start\":44536},{\"end\":46022,\"start\":45791},{\"end\":46445,\"start\":46348},{\"end\":46595,\"start\":46450},{\"end\":46907,\"start\":46708},{\"end\":48686,\"start\":48660},{\"end\":49160,\"start\":48890},{\"end\":51235,\"start\":50360}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":6729,\"start\":6705},{\"attributes\":{\"id\":\"formula_1\"},\"end\":8569,\"start\":8537},{\"attributes\":{\"id\":\"formula_2\"},\"end\":9958,\"start\":9923},{\"attributes\":{\"id\":\"formula_3\"},\"end\":11919,\"start\":11888},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12630,\"start\":12590},{\"attributes\":{\"id\":\"formula_5\"},\"end\":12903,\"start\":12830},{\"attributes\":{\"id\":\"formula_6\"},\"end\":12910,\"start\":12903},{\"attributes\":{\"id\":\"formula_7\"},\"end\":13426,\"start\":13413},{\"attributes\":{\"id\":\"formula_8\"},\"end\":20074,\"start\":20004},{\"attributes\":{\"id\":\"formula_9\"},\"end\":24156,\"start\":24112},{\"attributes\":{\"id\":\"formula_10\"},\"end\":26308,\"start\":26242},{\"attributes\":{\"id\":\"formula_11\"},\"end\":27158,\"start\":27143},{\"attributes\":{\"id\":\"formula_12\"},\"end\":32229,\"start\":32207},{\"attributes\":{\"id\":\"formula_13\"},\"end\":32454,\"start\":32425},{\"attributes\":{\"id\":\"formula_14\"},\"end\":33842,\"start\":33782},{\"attributes\":{\"id\":\"formula_15\"},\"end\":35457,\"start\":35421}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":5397,\"start\":5396},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":7164,\"start\":7163},{\"end\":7479,\"start\":7478},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":13807,\"start\":13803},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":16506,\"start\":16505},{\"end\":26806,\"start\":26805},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":29619,\"start\":29618},{\"end\":30378,\"start\":30377},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":32536,\"start\":32535},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":36576,\"start\":36575},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":37328,\"start\":37327},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":39381,\"start\":39380},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":39814,\"start\":39813},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":40573,\"start\":40572}]", "section_header": "[{\"end\":4929,\"start\":4891},{\"end\":7654,\"start\":7613},{\"end\":9706,\"start\":9666},{\"end\":11351,\"start\":11311},{\"end\":11811,\"start\":11803},{\"end\":13530,\"start\":13488},{\"end\":16727,\"start\":16717},{\"end\":18715,\"start\":18708},{\"end\":19852,\"start\":19837},{\"end\":40970,\"start\":40957},{\"end\":41039,\"start\":40973},{\"end\":41258,\"start\":41245},{\"end\":41280,\"start\":41260},{\"end\":41933,\"start\":41923},{\"end\":42375,\"start\":42365},{\"end\":42999,\"start\":42989},{\"end\":43859,\"start\":43849},{\"end\":44135,\"start\":44124},{\"end\":44183,\"start\":44181},{\"end\":44532,\"start\":44525},{\"end\":46705,\"start\":46651},{\"end\":47557,\"start\":47513},{\"end\":48299,\"start\":48239},{\"end\":48657,\"start\":48648},{\"end\":48887,\"start\":48824},{\"end\":49690,\"start\":49582},{\"end\":50036,\"start\":49973},{\"end\":50356,\"start\":50252}]", "table": "[{\"end\":46347,\"start\":46023},{\"end\":46649,\"start\":46596},{\"end\":47511,\"start\":46908},{\"end\":48237,\"start\":47559},{\"end\":48646,\"start\":48301},{\"end\":48822,\"start\":48687},{\"end\":49580,\"start\":49161},{\"end\":49971,\"start\":49692},{\"end\":50250,\"start\":50038},{\"end\":51394,\"start\":51236}]", "figure_caption": "[{\"end\":41921,\"start\":41283},{\"end\":42363,\"start\":41935},{\"end\":42987,\"start\":42377},{\"end\":43565,\"start\":43001},{\"end\":43847,\"start\":43568},{\"end\":44122,\"start\":43861},{\"end\":44179,\"start\":44138},{\"end\":44523,\"start\":44184},{\"end\":45787,\"start\":44535},{\"end\":46023,\"start\":45790},{\"end\":46596,\"start\":46449},{\"end\":46908,\"start\":46707},{\"end\":48687,\"start\":48659},{\"end\":49161,\"start\":48889},{\"end\":51236,\"start\":50359}]", "figure_ref": "[{\"end\":4115,\"start\":4114},{\"end\":7251,\"start\":7249},{\"end\":10969,\"start\":10967},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":11428,\"start\":11427},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14858,\"start\":14856},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":15540,\"start\":15538},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":16131,\"start\":16130},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":16480,\"start\":16479},{\"end\":23761,\"start\":23745},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":24226,\"start\":24225},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":24246,\"start\":24244},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":24785,\"start\":24783},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":25263,\"start\":25261},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":26458,\"start\":26456},{\"end\":37302,\"start\":37300},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":39392,\"start\":39391},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":39788,\"start\":39787}]", "bib_author_first_name": "[{\"end\":53019,\"start\":53018},{\"end\":53021,\"start\":53020},{\"end\":53123,\"start\":53122},{\"end\":53140,\"start\":53139},{\"end\":53142,\"start\":53141},{\"end\":53155,\"start\":53154},{\"end\":53235,\"start\":53234},{\"end\":53280,\"start\":53279},{\"end\":53292,\"start\":53291},{\"end\":53301,\"start\":53300},{\"end\":53306,\"start\":53302},{\"end\":53390,\"start\":53389},{\"end\":53485,\"start\":53484},{\"end\":53554,\"start\":53553},{\"end\":53655,\"start\":53654},{\"end\":53666,\"start\":53665},{\"end\":53764,\"start\":53763},{\"end\":53829,\"start\":53828},{\"end\":53838,\"start\":53837},{\"end\":53989,\"start\":53988},{\"end\":54093,\"start\":54092},{\"end\":54103,\"start\":54102},{\"end\":54227,\"start\":54226},{\"end\":54294,\"start\":54293},{\"end\":54307,\"start\":54303},{\"end\":54462,\"start\":54461},{\"end\":54472,\"start\":54471},{\"end\":54487,\"start\":54486},{\"end\":54498,\"start\":54497},{\"end\":54599,\"start\":54598},{\"end\":54608,\"start\":54607},{\"end\":54739,\"start\":54738},{\"end\":54753,\"start\":54752},{\"end\":54766,\"start\":54765},{\"end\":54892,\"start\":54891},{\"end\":54904,\"start\":54903},{\"end\":54906,\"start\":54905},{\"end\":54915,\"start\":54914},{\"end\":54917,\"start\":54916},{\"end\":54925,\"start\":54924},{\"end\":54927,\"start\":54926},{\"end\":55024,\"start\":55023},{\"end\":55064,\"start\":55063},{\"end\":55073,\"start\":55072},{\"end\":55083,\"start\":55082},{\"end\":55174,\"start\":55173},{\"end\":55183,\"start\":55182},{\"end\":55195,\"start\":55194},{\"end\":55315,\"start\":55314},{\"end\":55328,\"start\":55327},{\"end\":55397,\"start\":55396},{\"end\":55399,\"start\":55398},{\"end\":55411,\"start\":55410},{\"end\":55420,\"start\":55419},{\"end\":55433,\"start\":55432},{\"end\":55627,\"start\":55626},{\"end\":55636,\"start\":55635},{\"end\":55638,\"start\":55637},{\"end\":55797,\"start\":55796},{\"end\":55799,\"start\":55798},{\"end\":55911,\"start\":55910},{\"end\":55921,\"start\":55920},{\"end\":55935,\"start\":55934},{\"end\":55944,\"start\":55943},{\"end\":56053,\"start\":56052},{\"end\":56063,\"start\":56062},{\"end\":56157,\"start\":56156},{\"end\":56159,\"start\":56158},{\"end\":56174,\"start\":56173},{\"end\":56183,\"start\":56182},{\"end\":56185,\"start\":56184},{\"end\":56299,\"start\":56298},{\"end\":56409,\"start\":56408},{\"end\":56419,\"start\":56418},{\"end\":56429,\"start\":56428},{\"end\":56528,\"start\":56527},{\"end\":56578,\"start\":56577},{\"end\":56653,\"start\":56652},{\"end\":56765,\"start\":56764},{\"end\":56845,\"start\":56844},{\"end\":56979,\"start\":56978},{\"end\":57094,\"start\":57093},{\"end\":57254,\"start\":57253},{\"end\":57256,\"start\":57255},{\"end\":57359,\"start\":57358},{\"end\":57361,\"start\":57360},{\"end\":57370,\"start\":57369},{\"end\":57372,\"start\":57371},{\"end\":57461,\"start\":57460},{\"end\":57541,\"start\":57540},{\"end\":57551,\"start\":57550},{\"end\":57563,\"start\":57562},{\"end\":57631,\"start\":57630},{\"end\":57641,\"start\":57640},{\"end\":57651,\"start\":57650},{\"end\":57660,\"start\":57659},{\"end\":57807,\"start\":57806},{\"end\":57809,\"start\":57808},{\"end\":57928,\"start\":57927},{\"end\":57940,\"start\":57939},{\"end\":57950,\"start\":57949},{\"end\":58105,\"start\":58104},{\"end\":58176,\"start\":58175},{\"end\":58286,\"start\":58285},{\"end\":58288,\"start\":58287},{\"end\":58414,\"start\":58413},{\"end\":58425,\"start\":58424},{\"end\":58429,\"start\":58426},{\"end\":58440,\"start\":58439},{\"end\":58450,\"start\":58449},{\"end\":58452,\"start\":58451},{\"end\":58581,\"start\":58580},{\"end\":58590,\"start\":58589},{\"end\":58598,\"start\":58597},{\"end\":58607,\"start\":58606},{\"end\":58678,\"start\":58677},{\"end\":58688,\"start\":58687},{\"end\":58808,\"start\":58804},{\"end\":58817,\"start\":58816},{\"end\":58830,\"start\":58826},{\"end\":58992,\"start\":58991},{\"end\":59001,\"start\":59000},{\"end\":59003,\"start\":59002},{\"end\":59136,\"start\":59135},{\"end\":59145,\"start\":59144},{\"end\":59250,\"start\":59249},{\"end\":59252,\"start\":59251},{\"end\":59353,\"start\":59352},{\"end\":59368,\"start\":59367},{\"end\":59502,\"start\":59498},{\"end\":59511,\"start\":59510},{\"end\":59524,\"start\":59520},{\"end\":59696,\"start\":59695},{\"end\":59705,\"start\":59704},{\"end\":59795,\"start\":59794},{\"end\":59897,\"start\":59896},{\"end\":59906,\"start\":59905},{\"end\":59908,\"start\":59907},{\"end\":60013,\"start\":60012}]", "bib_author_last_name": "[{\"end\":53027,\"start\":53022},{\"end\":53137,\"start\":53124},{\"end\":53152,\"start\":53143},{\"end\":53169,\"start\":53156},{\"end\":53244,\"start\":53236},{\"end\":53289,\"start\":53281},{\"end\":53298,\"start\":53293},{\"end\":53310,\"start\":53307},{\"end\":53316,\"start\":53312},{\"end\":53399,\"start\":53391},{\"end\":53490,\"start\":53486},{\"end\":53561,\"start\":53555},{\"end\":53571,\"start\":53563},{\"end\":53575,\"start\":53573},{\"end\":53663,\"start\":53656},{\"end\":53675,\"start\":53667},{\"end\":53773,\"start\":53765},{\"end\":53835,\"start\":53830},{\"end\":53850,\"start\":53839},{\"end\":53996,\"start\":53990},{\"end\":54100,\"start\":54094},{\"end\":54114,\"start\":54104},{\"end\":54234,\"start\":54228},{\"end\":54301,\"start\":54295},{\"end\":54314,\"start\":54308},{\"end\":54321,\"start\":54316},{\"end\":54469,\"start\":54463},{\"end\":54484,\"start\":54473},{\"end\":54495,\"start\":54488},{\"end\":54504,\"start\":54499},{\"end\":54605,\"start\":54600},{\"end\":54615,\"start\":54609},{\"end\":54750,\"start\":54740},{\"end\":54763,\"start\":54754},{\"end\":54773,\"start\":54767},{\"end\":54901,\"start\":54893},{\"end\":54912,\"start\":54907},{\"end\":54922,\"start\":54918},{\"end\":54932,\"start\":54928},{\"end\":55029,\"start\":55025},{\"end\":55070,\"start\":55065},{\"end\":55080,\"start\":55074},{\"end\":55090,\"start\":55084},{\"end\":55180,\"start\":55175},{\"end\":55192,\"start\":55184},{\"end\":55203,\"start\":55196},{\"end\":55325,\"start\":55316},{\"end\":55333,\"start\":55329},{\"end\":55408,\"start\":55400},{\"end\":55417,\"start\":55412},{\"end\":55430,\"start\":55421},{\"end\":55440,\"start\":55434},{\"end\":55633,\"start\":55628},{\"end\":55646,\"start\":55639},{\"end\":55808,\"start\":55800},{\"end\":55918,\"start\":55912},{\"end\":55932,\"start\":55922},{\"end\":55941,\"start\":55936},{\"end\":55952,\"start\":55945},{\"end\":56060,\"start\":56054},{\"end\":56069,\"start\":56064},{\"end\":56171,\"start\":56160},{\"end\":56180,\"start\":56175},{\"end\":56195,\"start\":56186},{\"end\":56311,\"start\":56300},{\"end\":56416,\"start\":56410},{\"end\":56426,\"start\":56420},{\"end\":56436,\"start\":56430},{\"end\":56539,\"start\":56529},{\"end\":56586,\"start\":56579},{\"end\":56662,\"start\":56654},{\"end\":56774,\"start\":56766},{\"end\":56852,\"start\":56846},{\"end\":56985,\"start\":56980},{\"end\":57101,\"start\":57095},{\"end\":57264,\"start\":57257},{\"end\":57367,\"start\":57362},{\"end\":57378,\"start\":57373},{\"end\":57468,\"start\":57462},{\"end\":57548,\"start\":57542},{\"end\":57560,\"start\":57552},{\"end\":57570,\"start\":57564},{\"end\":57638,\"start\":57632},{\"end\":57648,\"start\":57642},{\"end\":57657,\"start\":57652},{\"end\":57666,\"start\":57661},{\"end\":57816,\"start\":57810},{\"end\":57937,\"start\":57929},{\"end\":57947,\"start\":57941},{\"end\":57958,\"start\":57951},{\"end\":58113,\"start\":58106},{\"end\":58181,\"start\":58177},{\"end\":58188,\"start\":58183},{\"end\":58294,\"start\":58289},{\"end\":58422,\"start\":58415},{\"end\":58437,\"start\":58430},{\"end\":58447,\"start\":58441},{\"end\":58463,\"start\":58453},{\"end\":58587,\"start\":58582},{\"end\":58595,\"start\":58591},{\"end\":58604,\"start\":58599},{\"end\":58615,\"start\":58608},{\"end\":58685,\"start\":58679},{\"end\":58696,\"start\":58689},{\"end\":58814,\"start\":58809},{\"end\":58824,\"start\":58818},{\"end\":58834,\"start\":58831},{\"end\":58998,\"start\":58993},{\"end\":59009,\"start\":59004},{\"end\":59142,\"start\":59137},{\"end\":59152,\"start\":59146},{\"end\":59258,\"start\":59253},{\"end\":59365,\"start\":59354},{\"end\":59375,\"start\":59369},{\"end\":59508,\"start\":59503},{\"end\":59518,\"start\":59512},{\"end\":59528,\"start\":59525},{\"end\":59702,\"start\":59697},{\"end\":59712,\"start\":59706},{\"end\":59802,\"start\":59796},{\"end\":59903,\"start\":59898},{\"end\":59916,\"start\":59909},{\"end\":60018,\"start\":60014}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":53083,\"start\":52957},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":17747291},\"end\":53193,\"start\":53085},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":6364294},\"end\":53275,\"start\":53195},{\"attributes\":{\"id\":\"b3\"},\"end\":53340,\"start\":53277},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":9020643},\"end\":53422,\"start\":53342},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":14614209},\"end\":53549,\"start\":53424},{\"attributes\":{\"id\":\"b6\"},\"end\":53599,\"start\":53551},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":10886094},\"end\":53724,\"start\":53601},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":2850073},\"end\":53797,\"start\":53726},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":9480541},\"end\":53917,\"start\":53799},{\"attributes\":{\"id\":\"b10\"},\"end\":54055,\"start\":53919},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":15184765},\"end\":54166,\"start\":54057},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":5733047},\"end\":54250,\"start\":54168},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":17734019},\"end\":54363,\"start\":54252},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":8323579},\"end\":54552,\"start\":54365},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":60146442},\"end\":54672,\"start\":54554},{\"attributes\":{\"id\":\"b16\"},\"end\":54830,\"start\":54674},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":2883848},\"end\":54964,\"start\":54832},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":205242740},\"end\":55046,\"start\":54966},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":1779661},\"end\":55107,\"start\":55048},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":651147},\"end\":55255,\"start\":55109},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":8507564},\"end\":55394,\"start\":55257},{\"attributes\":{\"id\":\"b22\"},\"end\":55568,\"start\":55396},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":6254050},\"end\":55703,\"start\":55570},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":2332513},\"end\":55828,\"start\":55705},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":1211821},\"end\":56009,\"start\":55830},{\"attributes\":{\"id\":\"b26\"},\"end\":56084,\"start\":56011},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":6314186},\"end\":56234,\"start\":56086},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":5236783},\"end\":56364,\"start\":56236},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":254739681},\"end\":56457,\"start\":56366},{\"attributes\":{\"id\":\"b30\"},\"end\":56559,\"start\":56459},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1704885},\"end\":56608,\"start\":56561},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":11585603},\"end\":56711,\"start\":56610},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":36154525},\"end\":56797,\"start\":56713},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":9316331},\"end\":56900,\"start\":56799},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":2485362},\"end\":57006,\"start\":56902},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":16392190},\"end\":57156,\"start\":57008},{\"attributes\":{\"id\":\"b37\"},\"end\":57183,\"start\":57158},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":8108362},\"end\":57321,\"start\":57185},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":28918417},\"end\":57400,\"start\":57323},{\"attributes\":{\"id\":\"b40\"},\"end\":57488,\"start\":57402},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":10389798},\"end\":57591,\"start\":57490},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":7493916},\"end\":57723,\"start\":57593},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":2126705},\"end\":57845,\"start\":57725},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":37030282},\"end\":58027,\"start\":57847},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":14742574},\"end\":58135,\"start\":58029},{\"attributes\":{\"id\":\"b46\"},\"end\":58241,\"start\":58137},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":207081359},\"end\":58328,\"start\":58243},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":5392817},\"end\":58526,\"start\":58330},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":15414292},\"end\":58641,\"start\":58528},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":13881100},\"end\":58756,\"start\":58643},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":9493918},\"end\":58908,\"start\":58758},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":13578069},\"end\":59057,\"start\":58910},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":2728802},\"end\":59211,\"start\":59059},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":5872023},\"end\":59289,\"start\":59213},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":6731489},\"end\":59425,\"start\":59291},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":14104078},\"end\":59619,\"start\":59427},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":18941952},\"end\":59736,\"start\":59621},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":46612710},\"end\":59821,\"start\":59738},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":11727595},\"end\":59971,\"start\":59823},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":372467},\"end\":60075,\"start\":59973},{\"attributes\":{\"doi\":\"CS 100 [97; 100] 74 [66; 81] 98 [94; 99] 80 [70; 87] 5 [3; 7] 36 [16; 61] 8 [5; 14] ZN 99 [93; 100] 84 [67; 93] 98 [93; 99] 92 [67; 99] 6 [2; 19] 40 [12; 77] 100 [65; 100] PC 100 [98; 100] 99 [95; 100] 100 [98; 100] 98 [89; 100] 78 [73; 81] 87 [68; 95] 55 [47; 62] FG 100 [97; 100] 99 [93; 100] 100 [96; 100] 100 [91; 100] 78 [73; 83] 100 [65; 100] 65 [55; 73] GG 100 [44; 100] 100 [34; 100] 100 [68; 100] 100 [57; 100] 99 [97; 100] 67 [21; 94] 99 [95; 100] CS 4 77 [69; 84] 12 [8; 18] 53 [44; 61] 15 [8; 24] 0 [0; 3] 0 [0; 30] 0 [0; 8] ZN 4 86 [77; 92] 25 [16; 38] 67 [56; 76] 14 [7; 27] 0 [0; 12] 0 [0; 43] - PC 4 99\",\"id\":\"b61\"},\"end\":60872,\"start\":60077},{\"attributes\":{\"id\":\"b62\"},\"end\":61028,\"start\":60874},{\"attributes\":{\"id\":\"b63\"},\"end\":61141,\"start\":61030}]", "bib_title": "[{\"end\":53120,\"start\":53085},{\"end\":53232,\"start\":53195},{\"end\":53387,\"start\":53342},{\"end\":53482,\"start\":53424},{\"end\":53652,\"start\":53601},{\"end\":53761,\"start\":53726},{\"end\":53826,\"start\":53799},{\"end\":53986,\"start\":53919},{\"end\":54090,\"start\":54057},{\"end\":54224,\"start\":54168},{\"end\":54291,\"start\":54252},{\"end\":54459,\"start\":54365},{\"end\":54596,\"start\":54554},{\"end\":54736,\"start\":54674},{\"end\":54889,\"start\":54832},{\"end\":55021,\"start\":54966},{\"end\":55061,\"start\":55048},{\"end\":55171,\"start\":55109},{\"end\":55312,\"start\":55257},{\"end\":55624,\"start\":55570},{\"end\":55794,\"start\":55705},{\"end\":55908,\"start\":55830},{\"end\":56154,\"start\":56086},{\"end\":56296,\"start\":56236},{\"end\":56406,\"start\":56366},{\"end\":56575,\"start\":56561},{\"end\":56650,\"start\":56610},{\"end\":56762,\"start\":56713},{\"end\":56842,\"start\":56799},{\"end\":56976,\"start\":56902},{\"end\":57091,\"start\":57008},{\"end\":57251,\"start\":57185},{\"end\":57356,\"start\":57323},{\"end\":57458,\"start\":57402},{\"end\":57538,\"start\":57490},{\"end\":57628,\"start\":57593},{\"end\":57804,\"start\":57725},{\"end\":57925,\"start\":57847},{\"end\":58102,\"start\":58029},{\"end\":58173,\"start\":58137},{\"end\":58283,\"start\":58243},{\"end\":58411,\"start\":58330},{\"end\":58578,\"start\":58528},{\"end\":58675,\"start\":58643},{\"end\":58802,\"start\":58758},{\"end\":58989,\"start\":58910},{\"end\":59133,\"start\":59059},{\"end\":59247,\"start\":59213},{\"end\":59350,\"start\":59291},{\"end\":59496,\"start\":59427},{\"end\":59693,\"start\":59621},{\"end\":59792,\"start\":59738},{\"end\":59894,\"start\":59823},{\"end\":60010,\"start\":59973},{\"end\":60938,\"start\":60874},{\"end\":61067,\"start\":61030}]", "bib_author": "[{\"end\":53029,\"start\":53018},{\"end\":53139,\"start\":53122},{\"end\":53154,\"start\":53139},{\"end\":53171,\"start\":53154},{\"end\":53246,\"start\":53234},{\"end\":53291,\"start\":53279},{\"end\":53300,\"start\":53291},{\"end\":53312,\"start\":53300},{\"end\":53318,\"start\":53312},{\"end\":53401,\"start\":53389},{\"end\":53492,\"start\":53484},{\"end\":53563,\"start\":53553},{\"end\":53573,\"start\":53563},{\"end\":53577,\"start\":53573},{\"end\":53665,\"start\":53654},{\"end\":53677,\"start\":53665},{\"end\":53775,\"start\":53763},{\"end\":53837,\"start\":53828},{\"end\":53852,\"start\":53837},{\"end\":53998,\"start\":53988},{\"end\":54102,\"start\":54092},{\"end\":54116,\"start\":54102},{\"end\":54236,\"start\":54226},{\"end\":54303,\"start\":54293},{\"end\":54316,\"start\":54303},{\"end\":54323,\"start\":54316},{\"end\":54471,\"start\":54461},{\"end\":54486,\"start\":54471},{\"end\":54497,\"start\":54486},{\"end\":54506,\"start\":54497},{\"end\":54607,\"start\":54598},{\"end\":54617,\"start\":54607},{\"end\":54752,\"start\":54738},{\"end\":54765,\"start\":54752},{\"end\":54775,\"start\":54765},{\"end\":54903,\"start\":54891},{\"end\":54914,\"start\":54903},{\"end\":54924,\"start\":54914},{\"end\":54934,\"start\":54924},{\"end\":55031,\"start\":55023},{\"end\":55072,\"start\":55063},{\"end\":55082,\"start\":55072},{\"end\":55092,\"start\":55082},{\"end\":55182,\"start\":55173},{\"end\":55194,\"start\":55182},{\"end\":55205,\"start\":55194},{\"end\":55327,\"start\":55314},{\"end\":55335,\"start\":55327},{\"end\":55410,\"start\":55396},{\"end\":55419,\"start\":55410},{\"end\":55432,\"start\":55419},{\"end\":55442,\"start\":55432},{\"end\":55635,\"start\":55626},{\"end\":55648,\"start\":55635},{\"end\":55810,\"start\":55796},{\"end\":55920,\"start\":55910},{\"end\":55934,\"start\":55920},{\"end\":55943,\"start\":55934},{\"end\":55954,\"start\":55943},{\"end\":56062,\"start\":56052},{\"end\":56071,\"start\":56062},{\"end\":56173,\"start\":56156},{\"end\":56182,\"start\":56173},{\"end\":56197,\"start\":56182},{\"end\":56313,\"start\":56298},{\"end\":56418,\"start\":56408},{\"end\":56428,\"start\":56418},{\"end\":56438,\"start\":56428},{\"end\":56541,\"start\":56527},{\"end\":56588,\"start\":56577},{\"end\":56664,\"start\":56652},{\"end\":56776,\"start\":56764},{\"end\":56854,\"start\":56844},{\"end\":56987,\"start\":56978},{\"end\":57103,\"start\":57093},{\"end\":57266,\"start\":57253},{\"end\":57369,\"start\":57358},{\"end\":57380,\"start\":57369},{\"end\":57470,\"start\":57460},{\"end\":57550,\"start\":57540},{\"end\":57562,\"start\":57550},{\"end\":57572,\"start\":57562},{\"end\":57640,\"start\":57630},{\"end\":57650,\"start\":57640},{\"end\":57659,\"start\":57650},{\"end\":57668,\"start\":57659},{\"end\":57818,\"start\":57806},{\"end\":57939,\"start\":57927},{\"end\":57949,\"start\":57939},{\"end\":57960,\"start\":57949},{\"end\":58115,\"start\":58104},{\"end\":58183,\"start\":58175},{\"end\":58190,\"start\":58183},{\"end\":58296,\"start\":58285},{\"end\":58424,\"start\":58413},{\"end\":58439,\"start\":58424},{\"end\":58449,\"start\":58439},{\"end\":58465,\"start\":58449},{\"end\":58589,\"start\":58580},{\"end\":58597,\"start\":58589},{\"end\":58606,\"start\":58597},{\"end\":58617,\"start\":58606},{\"end\":58687,\"start\":58677},{\"end\":58698,\"start\":58687},{\"end\":58816,\"start\":58804},{\"end\":58826,\"start\":58816},{\"end\":58836,\"start\":58826},{\"end\":59000,\"start\":58991},{\"end\":59011,\"start\":59000},{\"end\":59144,\"start\":59135},{\"end\":59154,\"start\":59144},{\"end\":59260,\"start\":59249},{\"end\":59367,\"start\":59352},{\"end\":59377,\"start\":59367},{\"end\":59510,\"start\":59498},{\"end\":59520,\"start\":59510},{\"end\":59530,\"start\":59520},{\"end\":59704,\"start\":59695},{\"end\":59714,\"start\":59704},{\"end\":59804,\"start\":59794},{\"end\":59905,\"start\":59896},{\"end\":59918,\"start\":59905},{\"end\":60020,\"start\":60012}]", "bib_venue": "[{\"end\":53016,\"start\":52957},{\"end\":53184,\"start\":53171},{\"end\":53267,\"start\":53246},{\"end\":53331,\"start\":53318},{\"end\":53414,\"start\":53401},{\"end\":53543,\"start\":53492},{\"end\":53590,\"start\":53577},{\"end\":53718,\"start\":53677},{\"end\":53788,\"start\":53775},{\"end\":53911,\"start\":53852},{\"end\":54049,\"start\":53998},{\"end\":54160,\"start\":54116},{\"end\":54242,\"start\":54236},{\"end\":54349,\"start\":54323},{\"end\":54545,\"start\":54506},{\"end\":54666,\"start\":54617},{\"end\":54824,\"start\":54775},{\"end\":54957,\"start\":54934},{\"end\":55037,\"start\":55031},{\"end\":55098,\"start\":55092},{\"end\":55249,\"start\":55205},{\"end\":55388,\"start\":55335},{\"end\":55562,\"start\":55442},{\"end\":55697,\"start\":55648},{\"end\":55821,\"start\":55810},{\"end\":56003,\"start\":55954},{\"end\":56050,\"start\":56011},{\"end\":56227,\"start\":56197},{\"end\":56355,\"start\":56313},{\"end\":56449,\"start\":56438},{\"end\":56525,\"start\":56459},{\"end\":56600,\"start\":56588},{\"end\":56705,\"start\":56664},{\"end\":56789,\"start\":56776},{\"end\":56893,\"start\":56854},{\"end\":56998,\"start\":56987},{\"end\":57150,\"start\":57103},{\"end\":57181,\"start\":57158},{\"end\":57315,\"start\":57266},{\"end\":57393,\"start\":57380},{\"end\":57481,\"start\":57470},{\"end\":57583,\"start\":57572},{\"end\":57717,\"start\":57668},{\"end\":57837,\"start\":57818},{\"end\":58021,\"start\":57960},{\"end\":58128,\"start\":58115},{\"end\":58223,\"start\":58190},{\"end\":58320,\"start\":58296},{\"end\":58520,\"start\":58465},{\"end\":58622,\"start\":58617},{\"end\":58747,\"start\":58698},{\"end\":58887,\"start\":58836},{\"end\":59050,\"start\":59011},{\"end\":59205,\"start\":59154},{\"end\":59279,\"start\":59260},{\"end\":59419,\"start\":59377},{\"end\":59613,\"start\":59530},{\"end\":59727,\"start\":59714},{\"end\":59810,\"start\":59804},{\"end\":59965,\"start\":59918},{\"end\":60069,\"start\":60020},{\"end\":60705,\"start\":60695},{\"end\":60985,\"start\":60940},{\"end\":61114,\"start\":61069},{\"end\":58237,\"start\":58225}]"}}}, "year": 2023, "month": 12, "day": 17}