{"id": 13928442, "updated": "2023-04-05 00:17:53.348", "metadata": {"title": "Deterministic Policy Gradient Algorithms", "authors": "[{\"first\":\"David\",\"last\":\"Silver\",\"middle\":[]},{\"first\":\"Guy\",\"last\":\"Lever\",\"middle\":[]},{\"first\":\"Nicolas\",\"last\":\"Heess\",\"middle\":[]},{\"first\":\"Thomas\",\"last\":\"Degris\",\"middle\":[]},{\"first\":\"Daan\",\"last\":\"Wierstra\",\"middle\":[]},{\"first\":\"Martin\",\"last\":\"Riedmiller\",\"middle\":[\"A.\"]}]", "venue": "ICML", "journal": "387-395", "publication_date": {"year": 2014, "month": null, "day": null}, "abstract": "In this paper we consider deterministic policy gradient algorithms for reinforcement learning with continuous actions. The deterministic policy gradient has a particularly appealing form: it is the expected gradient of the action-value function. This simple form means that the deterministic policy gradient can be estimated much more ef\ufb01ciently than the usual stochastic policy gradient. To ensure adequate exploration, we introduce an off-policy actor-critic algorithm that learns a deterministic target policy from an exploratory behaviour policy. We demonstrate that deterministic policy gradient algorithms can signi\ufb01cantly outperform their stochastic counterparts in high-dimensional action spaces.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2643747386", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icml/SilverLHDWR14", "doi": null}}, "content": {"source": {"pdf_hash": "018cf1e6ff5582533698a42198b69ddd18e98fd7", "pdf_src": "ScienceParsePlus", "pdf_uri": "[\"https://web.archive.org/web/20180726055702/https:/hal.inria.fr/hal-00938992/file/dpg-icml2014.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "5ec76b1429cc313aae880f281cdbfe1a61166fe2", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/018cf1e6ff5582533698a42198b69ddd18e98fd7.txt", "contents": "\nDeterministic Policy Gradient Algorithms\n\n\nDavid Silver \nNicolas Heess \nThomas Degris \nDaan Wierstra \nMartin Riedmiller \n@deepmind Com \n\nDAVID@DEEPMIND.COM DeepMind Technologies\nUniversity College London\nLondonUK Guy Lever, UK\n\n\nDeepMind Technologies\nLondonUK\n\nDeterministic Policy Gradient Algorithms\n\nIn this paper we consider deterministic policy gradient algorithms for reinforcement learning with continuous actions. The deterministic policy gradient has a particularly appealing form: it is the expected gradient of the action-value function. This simple form means that the deterministic policy gradient can be estimated much more efficiently than the usual stochastic policy gradient. To ensure adequate exploration, we introduce an off-policy actor-critic algorithm that learns a deterministic target policy from an exploratory behaviour policy. We demonstrate that deterministic policy gradient algorithms can significantly outperform their stochastic counterparts in high-dimensional action spaces.\n\nIntroduction\n\nPolicy gradient algorithms are widely used in reinforcement learning problems with continuous action spaces. The basic idea is to represent the policy by a parametric probability distribution \u03c0 \u03b8 (a|s) = P [a|s; \u03b8] that stochastically selects action a in state s according to parameter vector \u03b8. Policy gradient algorithms typically proceed by sampling this stochastic policy and adjusting the policy parameters in the direction of greater cumulative reward. In this paper we instead consider deterministic policies a = \u00b5 \u03b8 (s). It is natural to wonder whether the same approach can be followed as for stochastic policies: adjusting the policy parameters in the direction of the policy gradient. It was previously believed that the deterministic policy gradient did not exist, or could only be obtained when using a model (Peters, 2010). However, we show that the deterministic policy gradient does indeed exist, and furthermore it has a simple model-free form that simply follows the gradient of the action-value function. In addition, we show that the deterministic policy gradient is the limiting case, as policy variance tends to zero, of the stochastic policy gradient. From a practical viewpoint, there is a crucial difference between the stochastic and deterministic policy gradients. In the stochastic case, the policy gradient integrates over both state and action spaces, whereas in the deterministic case it only integrates over the state space. As a result, computing the stochastic policy gradient may require more samples, especially if the action space has many dimensions. In order to explore the full state and action space, a stochastic policy is often necessary. To ensure that our deterministic policy gradient algorithms continue to explore satisfactorily, we introduce an off-policy learning algorithm. The basic idea is to choose actions according to a stochastic behaviour policy (to ensure adequate exploration), but to learn about a deterministic target policy (exploiting the efficiency of the deterministic policy gradient). We use the deterministic policy gradient to derive an off-policy actorcritic algorithm that estimates the action-value function using a differentiable function approximator, and then updates the policy parameters in the direction of the approximate action-value gradient. We also introduce a notion of compatible function approximation for deterministic policy gradients, to ensure that the approximation does not bias the policy gradient. We apply our deterministic actor-critic algorithms to several benchmark problems: a high-dimensional bandit; several standard benchmark reinforcement learning tasks with low dimensional action spaces; and a high-dimensional task for controlling an octopus arm. Our results demonstrate a significant performance advantage to using deterministic policy gradients over stochastic policy gradients, particularly in high dimensional tasks. Furthermore, our algorithms require no more computation than prior methods: the computational cost of each update is linear in the action dimensionality and the number of policy parameters. Finally, there are many applications (for example in robotics) where a differentiable control policy is provided, but where there is no functionality to inject noise into the controller. In these cases, the stochastic policy gradient is inapplicable, whereas our methods may still be useful.\n\n\nBackground\n\n\nPreliminaries\n\nWe study reinforcement learning and control problems in which an agent acts in a stochastic environment by sequentially choosing actions over a sequence of time steps, in order to maximise a cumulative reward. We model the problem as a Markov decision process (MDP) which comprises: a state space S, an action space A, an initial state distribution with density p 1 (s 1 ), a stationary transition dynamics distribution with conditional density p(s t+1 |s t , a t ) satisfying the Markov property p(s t+1 |s 1 , a 1 , ..., s t , a t ) = p(s t+1 |s t , a t ), for any trajectory s 1 , a 1 , s 2 , a 2 , ..., s T , a T in state-action space, and a reward function r : S \u00d7A \u2192 R. A policy is used to select actions in the MDP. In general the policy is stochastic and denoted by \u03c0 \u03b8 : S \u2192 P(A), where P(A) is the set of probability measures on A and \u03b8 \u2208 R n is a vector of n parameters, and \u03c0 \u03b8 (a t |s t ) is the conditional probability density at a t associated with the policy. The agent uses its policy to interact with the MDP to give a trajectory of states, actions and rewards, h 1:T = s 1 , a 1 , r 1 ..., s T , a T , r T over S \u00d7 A \u00d7 R. The return r \u03b3 t is the total discounted reward from time-step t onwards,\nr \u03b3 t = \u221e k=t \u03b3 k\u2212t r(s k , a k ) where 0 < \u03b3 < 1. Value functions are defined to be the expected total dis- counted reward, V \u03c0 (s) = E [r \u03b3 1 |S 1 = s; \u03c0] and Q \u03c0 (s, a) = E [r \u03b3 1 |S 1 = s, A 1 = a; \u03c0]. 1\nThe agent's goal is to obtain a policy which maximises the cumulative discounted reward from the start state, denoted by the performance objective J(\u03c0) = E [r \u03b3 1 |\u03c0]. We denote the density at state s after transitioning for t time steps from state s by p(s \u2192 s , t, \u03c0). We also denote the (improper) discounted state distribution by \u03c1 \u03c0 (s ) := S \u221e t=1 \u03b3 t\u22121 p 1 (s)p(s \u2192 s , t, \u03c0)ds. We can then write the performance objective as an expectation,\nJ(\u03c0 \u03b8 ) = S \u03c1 \u03c0 (s) A \u03c0 \u03b8 (s, a)r(s, a)dads = E s\u223c\u03c1 \u03c0 ,a\u223c\u03c0 \u03b8 [r(s, a)](1)\nwhere E s\u223c\u03c1 [\u00b7] denotes the (improper) expected value with respect to discounted state distribution \u03c1(s). 2 In the remainder of the paper we suppose for simplicity that A = R m and that S is a compact subset of R d .\n\n\nStochastic Policy Gradient Theorem\n\nPolicy gradient algorithms are perhaps the most popular class of continuous action reinforcement learning algorithms. The basic idea behind these algorithms is to adjust 1 To simplify notation, we frequently drop the random variable in the conditional density and write p(st+1|st, at) = p(st+1|St = st, At = at); furthermore we superscript value functions by \u03c0 rather than \u03c0 \u03b8 . 2 The results in this paper may be extended to an average reward performance objective by choosing \u03c1(s) to be the stationary distribution of an ergodic MDP. the parameters \u03b8 of the policy in the direction of the performance gradient \u2207 \u03b8 J(\u03c0 \u03b8 ). The fundamental result underlying these algorithms is the policy gradient theorem (Sutton et al., 1999),\n\u2207 \u03b8 J(\u03c0 \u03b8 ) = S \u03c1 \u03c0 (s) A \u2207 \u03b8 \u03c0 \u03b8 (a|s)Q \u03c0 (s, a)dads = E s\u223c\u03c1 \u03c0 ,a\u223c\u03c0 \u03b8 [\u2207 \u03b8 log \u03c0 \u03b8 (a|s)Q \u03c0 (s, a)] (2)\nThe policy gradient is surprisingly simple. In particular, despite the fact that the state distribution \u03c1 \u03c0 (s) depends on the policy parameters, the policy gradient does not depend on the gradient of the state distribution. This theorem has important practical value, because it reduces the computation of the performance gradient to a simple expectation. The policy gradient theorem has been used to derive a variety of policy gradient algorithms (Degris et al., 2012a), by forming a sample-based estimate of this expectation. One issue that these algorithms must address is how to estimate the action-value function Q \u03c0 (s, a). Perhaps the simplest approach is to use a sample return r \u03b3 t to estimate the value of Q \u03c0 (s t , a t ), which leads to a variant of the REINFORCE algorithm (Williams, 1992).\n\n\nStochastic Actor-Critic Algorithms\n\nThe actor-critic is a widely used architecture based on the policy gradient theorem (Sutton et al., 1999;Peters et al., 2005;Bhatnagar et al., 2007;Degris et al., 2012a). The actor-critic consists of two eponymous components. An actor adjusts the parameters \u03b8 of the stochastic policy \u03c0 \u03b8 (s) by stochastic gradient ascent of Equation 2. Instead of the unknown true action-value function Q \u03c0 (s, a) in Equation 2, an action-value function Q w (s, a) is used, with parameter vector w. A critic estimates the action-value function Q w (s, a) \u2248 Q \u03c0 (s, a) using an appropriate policy evaluation algorithm such as temporal-difference learning. In general, substituting a function approximator Q w (s, a) for the true action-value function Q \u03c0 (s, a) may introduce bias. However, if the function approximator is compatible such that i) Q w (s, a) = \u2207 \u03b8 log \u03c0 \u03b8 (a|s) w and ii) the parameters w are chosen to minimise the mean-squared error 2 (w) = E s\u223c\u03c1 \u03c0 ,a\u223c\u03c0 \u03b8 (Q w (s, a) \u2212 Q \u03c0 (s, a)) 2 , then there is no bias (Sutton et al., 1999),\n\u2207 \u03b8 J(\u03c0 \u03b8 ) = E s\u223c\u03c1 \u03c0 ,a\u223c\u03c0 \u03b8 [\u2207 \u03b8 log \u03c0 \u03b8 (a|s)Q w (s, a)](3)\nMore intuitively, condition i) says that compatible function approximators are linear in \"features\" of the stochastic policy, \u2207 \u03b8 log \u03c0 \u03b8 (a|s), and condition ii) requires that the parameters are the solution to the linear regression problem that estimates Q \u03c0 (s, a) from these features. In practice, condition ii) is usually relaxed in favour of policy evaluation algorithms that estimate the value function more efficiently by temporal-difference learning (Bhatnagar et al., 2007;Degris et al., 2012b;Peters et al., 2005); indeed if both i) and ii) are satisfied then the overall algorithm is equivalent to not using a critic at all (Sutton et al., 2000), much like the REINFORCE algorithm (Williams, 1992).\n\n\nOff-Policy Actor-Critic\n\nIt is often useful to estimate the policy gradient off-policy from trajectories sampled from a distinct behaviour policy \u03b2(a|s) = \u03c0 \u03b8 (a|s). In an off-policy setting, the performance objective is typically modified to be the value function of the target policy, averaged over the state distribution of the behaviour policy (Degris et al., 2012b),\nJ \u03b2 (\u03c0 \u03b8 ) = S \u03c1 \u03b2 (s)V \u03c0 (s)ds = S A \u03c1 \u03b2 (s)\u03c0 \u03b8 (a|s)Q \u03c0 (s, a)dads\nDifferentiating the performance objective and applying an approximation gives the off-policy policy-gradient (Degris et al., 2012b)\n\u2207 \u03b8 J \u03b2 (\u03c0 \u03b8 ) \u2248 S A \u03c1 \u03b2 (s)\u2207 \u03b8 \u03c0 \u03b8 (a|s)Q \u03c0 (s, a)dads (4) = E s\u223c\u03c1 \u03b2 ,a\u223c\u03b2 \u03c0 \u03b8 (a|s) \u03b2 \u03b8 (a|s) \u2207 \u03b8 log \u03c0 \u03b8 (a|s)Q \u03c0 (s, a)(5)\nThis approximation drops a term that depends on the action-value gradient \u2207 \u03b8 Q \u03c0 (s, a); Degris et al. (2012b) argue that this is a good approximation since it can preserve the set of local optima to which gradient ascent converges. The Off-Policy Actor-Critic (OffPAC) algorithm (Degris et al., 2012b) uses a behaviour policy \u03b2(a|s) to generate trajectories. A critic estimates a state-value function, V v (s) \u2248 V \u03c0 (s), off-policy from these trajectories, by gradient temporal-difference learning (Sutton et al., 2009). An actor updates the policy parameters \u03b8, also off-policy from these trajectories, by stochastic gradient ascent of Equation 5. Instead of the unknown action-value function Q \u03c0 (s, a) in Equation 5, the temporal-difference error \u03b4 t is used,\n\u03b4 t = r t+1 + \u03b3V v (s t+1 ) \u2212 V v (s t )\n; this can be shown to provide an approximation to the true gradient (Bhatnagar et al., 2007). Both the actor and the critic use an importance sampling ratio \u03c0 \u03b8 (a|s) \u03b2 \u03b8 (a|s) to adjust for the fact that actions were selected according to \u03c0 rather than \u03b2.\n\n\nGradients of Deterministic Policies\n\nWe now consider how the policy gradient framework may be extended to deterministic policies. Our main result is a deterministic policy gradient theorem, analogous to the stochastic policy gradient theorem presented in the previous section. We provide several ways to derive and understand this result. First we provide an informal intuition behind the form of the deterministic policy gradient. We then give a formal proof of the deterministic policy gradient theorem from first principles. Finally, we show that the deterministic policy gradient theorem is in fact a limiting case of the stochastic policy gradient theorem. Details of the proofs are deferred until the appendices.\n\n\nAction-Value Gradients\n\nThe majority of model-free reinforcement learning algorithms are based on generalised policy iteration: interleaving policy evaluation with policy improvement (Sutton and Barto, 1998). Policy evaluation methods estimate the action-value function Q \u03c0 (s, a) or Q \u00b5 (s, a), for example by Monte-Carlo evaluation or temporal-difference learning. Policy improvement methods update the policy with respect to the (estimated) action-value function. The most common approach is a greedy maximisation (or soft maximisation) of the action-value function, \u00b5 k+1 (s) = argmax Q a \u00b5 k (s, a).\n\nIn continuous action spaces, greedy policy improvement becomes problematic, requiring a global maximisation at every step. Instead, a simple and computationally attractive alternative is to move the policy in the direction of the gradient of Q, rather than globally maximising Q. Specifically, for each visited state s, the policy parameters \u03b8 k+1 are updated in proportion to the gradient \u2207 \u03b8 Q \u00b5 k (s, \u00b5 \u03b8 (s)). Each state suggests a different direction of policy improvement; these may be averaged together by taking an expectation with respect to the state distribution \u03c1 \u00b5 (s),\n\u03b8 k+1 = \u03b8 k + \u03b1E s\u223c\u03c1 \u00b5 k \u2207 \u03b8 Q \u00b5 k (s, \u00b5 \u03b8 (s))(6)\nBy applying the chain rule we see that the policy improvement may be decomposed into the gradient of the actionvalue with respect to actions, and the gradient of the policy with respect to the policy parameters.\n\u03b8 k+1 = \u03b8 k + \u03b1E s\u223c\u03c1 \u00b5 k \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q \u00b5 k (s, a) a=\u00b5 \u03b8 (s)(7)\nBy convention \u2207 \u03b8 \u00b5 \u03b8 (s) is a Jacobian matrix such that each column is the gradient \u2207 \u03b8 [\u00b5 \u03b8 (s)] d of the dth action dimension of the policy with respect to the policy parameters \u03b8. However, by changing the policy, different states are visited and the state distribution \u03c1 \u00b5 will change. As a result it is not immediately obvious that this approach guarantees improvement, without taking account of the change to distribution. However, the theory below shows that, like the stochastic policy gradient theorem, there is no need to compute the gradient of the state distribution; and that the intuitive update outlined above is following precisely the gradient of the performance objective.\n\n\nDeterministic Policy Gradient Theorem\n\nWe now formally consider a deterministic policy \u00b5 \u03b8 : S \u2192 A with parameter vector \u03b8 \u2208 R n . We define a performance objective J(\u00b5 \u03b8 ) = E [r \u03b3 1 |\u00b5], and define probability distribution p(s \u2192 s , t, \u00b5) and discounted state distribution \u03c1 \u00b5 (s) analogously to the stochastic case. This again lets us to write the performance objective as an expectation,\nJ(\u00b5 \u03b8 ) = S \u03c1 \u00b5 (s)r(s, \u00b5 \u03b8 (s))ds = E s\u223c\u03c1 \u00b5 [r(s, \u00b5 \u03b8 (s))](8)\nWe now provide the deterministic analogue to the policy gradient theorem. The proof follows a similar scheme to (Sutton et al., 1999) and is provided in Appendix B.\n\nTheorem 1 (Deterministic Policy Gradient Theorem).\n\nSuppose that the MDP satisfies conditions A.1 (see Appendix; these imply that \u2207 \u03b8 \u00b5 \u03b8 (s) and \u2207 a Q \u00b5 (s, a) exist and that the deterministic policy gradient exists. Then,\n\u2207 \u03b8 J(\u00b5 \u03b8 ) = S \u03c1 \u00b5 (s)\u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) ds = E s\u223c\u03c1 \u00b5 \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) (9)\n\nLimit of the Stochastic Policy Gradient\n\nThe deterministic policy gradient theorem does not at first glance look like the stochastic version (Equation 2). However, we now show that, for a wide class of stochastic policies, including many bump functions, the deterministic policy gradient is indeed a special (limiting) case of the stochastic policy gradient. We parametrise stochastic policies \u03c0 \u00b5 \u03b8 ,\u03c3 by a deterministic policy \u00b5 \u03b8 : S \u2192 A and a variance parameter \u03c3, such that for \u03c3 = 0 the stochastic policy is equivalent to the deterministic policy, \u03c0 \u00b5 \u03b8 ,0 \u2261 \u00b5 \u03b8 . Then we show that as \u03c3 \u2192 0 the stochastic policy gradient converges to the deterministic gradient (see Appendix C for proof and technical conditions).\n\nTheorem 2. Consider a stochastic policy \u03c0 \u00b5 \u03b8 ,\u03c3 such that \u03c0 \u00b5 \u03b8 ,\u03c3 (a|s) = \u03bd \u03c3 (\u00b5 \u03b8 (s), a), where \u03c3 is a parameter controlling the variance and \u03bd \u03c3 satisfy conditions B.1 and the MDP satisfies conditions A.1 and A.2. Then,\nlim \u03c3\u21930 \u2207 \u03b8 J(\u03c0 \u00b5 \u03b8 ,\u03c3 ) = \u2207 \u03b8 J(\u00b5 \u03b8 )(10)\nwhere on the l.h.s. the gradient is the standard stochastic policy gradient and on the r.h.s. the gradient is the deterministic policy gradient.\n\nThis is an important result because it shows that the familiar machinery of policy gradients, for example compatible function approximation (Sutton et al., 1999), natural gradients (Kakade, 2001), actor-critic (Bhatnagar et al., 2007), or episodic/batch methods (Peters et al., 2005), is also applicable to deterministic policy gradients.\n\n\nDeterministic Actor-Critic Algorithms\n\nWe now use the deterministic policy gradient theorem to derive both on-policy and off-policy actor-critic algorithms. We begin with the simplest case -on-policy updates, using a simple Sarsa critic -so as to illustrate the ideas as clearly as possible. We then consider the off-policy case, this time using a simple Q-learning critic to illustrate the key ideas. These simple algorithms may have convergence issues in practice, due both to bias introduced by the function approximator, and also the instabilities caused by off-policy learning. We then turn to a more principled approach using compatible function approximation and gradient temporal-difference learning.\n\n\nOn-Policy Deterministic Actor-Critic\n\nIn general, behaving according to a deterministic policy will not ensure adequate exploration and may lead to suboptimal solutions. Nevertheless, our first algorithm is an on-policy actor-critic algorithm that learns and follows a deterministic policy. Its primary purpose is didactic; however, it may be useful for environments in which there is sufficient noise in the environment to ensure adequate exploration, even with a deterministic behaviour policy. Like the stochastic actor-critic, the deterministic actorcritic consists of two components. The critic estimates the action-value function while the actor ascends the gradient of the action-value function. Specifically, an actor adjusts the parameters \u03b8 of the deterministic policy \u00b5 \u03b8 (s) by stochastic gradient ascent of Equation 9. As in the stochastic actor-critic, we substitute a differentiable action-value function Q w (s, a) in place of the true action-value function Q \u00b5 (s, a). A critic estimates the action-value function Q w (s, a) \u2248 Q \u00b5 (s, a), using an appropriate policy evaluation algorithm. For example, in the following deterministic actor-critic algorithm, the critic uses Sarsa updates to estimate the action-value function (Sutton and Barto, 1998),\n\u03b4 t = r t + \u03b3Q w (s t+1 , a t+1 ) \u2212 Q w (s t , a t ) (11) w t+1 = w t + \u03b1 w \u03b4 t \u2207 w Q w (s t , a t ) (12) \u03b8 t+1 = \u03b8 t + \u03b1 \u03b8 \u2207 \u03b8 \u00b5 \u03b8 (s t ) \u2207 a Q w (s t , a t )| a=\u00b5 \u03b8 (s) (13)\n\nOff-Policy Deterministic Actor-Critic\n\nWe now consider off-policy methods that learn a deterministic target policy \u00b5 \u03b8 (s) from trajectories generated by an arbitrary stochastic behaviour policy \u03c0(s, a). As before, we modify the performance objective to be the value function of the target policy, averaged over the state distribution of the behaviour policy,\nJ \u03b2 (\u00b5 \u03b8 ) = S \u03c1 \u03b2 (s)V \u00b5 (s)ds = S \u03c1 \u03b2 (s)Q \u00b5 (s, \u00b5 \u03b8 (s))ds (14) \u2207 \u03b8 J \u03b2 (\u00b5 \u03b8 ) \u2248 S \u03c1 \u03b2 (s)\u2207 \u03b8 \u00b5 \u03b8 (a|s)Q \u00b5 (s, a)ds = E s\u223c\u03c1 \u03b2 \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s)(15)\nThis equation gives the off-policy deterministic policy gradient. Analogous to the stochastic case (see Equation 4), we have dropped a term that depends on \u2207 \u03b8 Q \u00b5 \u03b8 (s, a); justification similar to Degris et al. (2012b) can be made in support of this approximation. We now develop an actor-critic algorithm that updates the policy in the direction of the off-policy deterministic policy gradient. We again substitute a differentiable action-value function Q w (s, a) in place of the true action-value function Q \u00b5 (s, a) in Equation 15. A critic estimates the action-value function Q w (s, a) \u2248 Q \u00b5 (s, a), off-policy from trajectories generated by \u03b2(a|s), using an appropriate policy evaluation algorithm. In the following off-policy deterministic actorcritic (OPDAC) algorithm, the critic uses Q-learning updates to estimate the action-value function.\n\u03b4 t = r t + \u03b3Q w (s t+1 , \u00b5 \u03b8 (s t+1 )) \u2212 Q w (s t , a t ) (16) w t+1 = w t + \u03b1 w \u03b4 t \u2207 w Q w (s t , a t ) (17) \u03b8 t+1 = \u03b8 t + \u03b1 \u03b8 \u2207 \u03b8 \u00b5 \u03b8 (s t ) \u2207 a Q w (s t , a t )| a=\u00b5 \u03b8 (s) (18)\nWe note that stochastic off-policy actor-critic algorithms typically use importance sampling for both actor and critic (Degris et al., 2012b). However, because the deterministic policy gradient removes the integral over actions, we can avoid importance sampling in the actor; and by using Qlearning, we can avoid importance sampling in the critic.\n\n\nCompatible Function Approximation\n\nIn general, substituting an approximate Q w (s, a) into the deterministic policy gradient will not necessarily follow the true gradient (nor indeed will it necessarily be an ascent direction at all). Similar to the stochastic case, we now find a class of compatible function approximators Q w (s, a) such that the true gradient is preserved. In other words, we find a critic Q w (s, a) such that the gradient \u2207 a Q \u00b5 (s, a) can be replaced by \u2207 a Q w (s, a), without affecting the deterministic policy gradient. The following theorem applies to both on-policy, E[\u00b7] = E s\u223c\u03c1 \u00b5 [\u00b7], and off-policy,\nE[\u00b7] = E s\u223c\u03c1 \u03b2 [\u00b7], Theorem 3. A function approximator Q w (s, a) is com- patible with a deterministic policy \u00b5 \u03b8 (s), \u2207 \u03b8 J \u03b2 (\u03b8) = E \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q w (s, a)| a=\u00b5 \u03b8 (s) , if 1. \u2207 a Q w (s, a)| a=\u00b5 \u03b8 (s) = \u2207 \u03b8 \u00b5 \u03b8 (s) wand\n2. w minimises the mean-squared error, M SE(\u03b8, w) = E (s; \u03b8, w) (s; \u03b8, w) where (s; \u03b8, w) = \u2207 a Q w (s, a)| a=\u00b5 \u03b8 (s) \u2212 \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) Proof. If w minimises the MSE then the gradient of 2 w.r.t. w must be zero. We then use the fact that, by condition 1, \u2207 w (s; \u03b8, w) = \u2207 \u03b8 \u00b5 \u03b8 (s),\n\u2207 w M SE(\u03b8, w) = 0 E [\u2207 \u03b8 \u00b5 \u03b8 (s) (s; \u03b8, w)] = 0 E \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q w (s, a)| a=\u00b5 \u03b8 (s) = E \u2207 \u03b8 \u00b5 \u03b8 (s) \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) = \u2207 \u03b8 J \u03b2 (\u00b5 \u03b8 ) or \u2207 \u03b8 J(\u00b5 \u03b8 )\nFor any deterministic policy \u00b5 \u03b8 (s), there always exists a compatible function approximator of the form Q w (s, a) = (a \u2212 \u00b5 \u03b8 (s)) \u2207 \u03b8 \u00b5 \u03b8 (s) w + V v (s), where V v (s) may be any differentiable baseline function that is independent of the action a; for example a linear combination of state features \u03c6(s) and parameters v, V v (s) = v \u03c6(s) for parameters v. A natural interpretation is that V v (s) estimates the value of state s, while the first term estimates the advantage A w (s, a) of taking action a over action \u00b5 \u03b8 (s) in state s. The advantage function can be viewed as a linear function approximator, A w (s, a) = \u03c6(s, a) w with stateaction features \u03c6(s, a) def = \u2207 \u03b8 \u00b5 \u03b8 (s)(a \u2212 \u00b5 \u03b8 (s)) and parameters w. Note that if there are m action dimensions and n policy parameters, then \u2207 \u03b8 \u00b5 \u03b8 (s) is an n \u00d7 m Jacobian matrix, so the feature vector is n \u00d7 1, and the parameter vector w is also n \u00d7 1. A function approximator of this form satisfies condition 1 of Theorem 3. We note that a linear function approximator is not very useful for predicting action-values globally, since the actionvalue diverges to \u00b1\u221e for large actions. However, it can still be highly effective as a local critic. In particular, it represents the local advantage of deviating from the current policy, A w (s, \u00b5 \u03b8 (s) + \u03b4) = \u03b4 \u2207 \u03b8 \u00b5 \u03b8 (s) w, where \u03b4 represents a small deviation from the deterministic policy. As a result, a linear function approximator is sufficient to select the direction in which the actor should adjust its policy parameters. To satisfy condition 2 we need to find the parameters w that minimise the mean-squared error between the gradient of Q w and the true gradient. This can be viewed as a linear regression problem with \"features\" \u03c6(s, a) and \"targets\" \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) . In other words, features of the policy are used to predict the true gradient \u2207 a Q \u00b5 (s, a) at state s. However, acquiring unbiased samples of the true gradient is difficult. In practice, we use a linear function approximator Q w (s, a) = \u03c6(s, a) w to satisfy condition 1, but we learn w by a standard policy evaluation method (for example Sarsa or Q-learning, for the on-policy or off-policy deterministic actor-critic algorithms respectively) that does not exactly satisfy condition 2. We note that a reasonable solution to the policy evaluation problem will find Q w (s, a) \u2248 Q \u00b5 (s, a) and will therefore ap-proximately (for smooth function approximators) satisfy \u2207 a Q w (s, a)| a=\u00b5 \u03b8 (s) \u2248 \u2207 a Q \u00b5 (s, a)| a=\u00b5 \u03b8 (s) . To summarise, a compatible off-policy deterministic actorcritic (COPDAC) algorithm consists of two components. The critic is a linear function approximator that estimates the action-value from features \u03c6(s, a) = a \u2207 \u03b8 \u00b5 \u03b8 (s). This may be learnt off-policy from samples of a behaviour policy \u03b2(a|s), for example using Q-learning or gradient Qlearning. The actor then updates its parameters in the direction of the critic's action-value gradient. The following COPDAC-Q algorithm uses a simple Q-learning critic.\n\u03b4 t = r t + \u03b3Q w (s t+1 , \u00b5 \u03b8 (s t+1 )) \u2212 Q w (s t , a t ) (19) \u03b8 t+1 = \u03b8 t + \u03b1 \u03b8 \u2207 \u03b8 \u00b5 \u03b8 (s t ) \u2207 \u03b8 \u00b5 \u03b8 (s t ) w t (20) w t+1 = w t + \u03b1 w \u03b4 t \u03c6(s t , a t ) (21) v t+1 = v t + \u03b1 v \u03b4 t \u03c6(s t )(22)\nIt is well-known that off-policy Q-learning may diverge when using linear function approximation. A more recent family of methods, based on gradient temporal-difference learning, are true gradient descent algorithm and are therefore sure to converge (Sutton et al., 2009). The basic idea of these methods is to minimise the mean-squared projected Bellman error (MSPBE) by stochastic gradient descent; full details are beyond the scope of this paper. Similar to the OffPAC algorithm (Degris et al., 2012b), we use gradient temporal-difference learning in the critic. Specifically, we use gradient Q-learning in the critic (Maei et al., 2010), and note that under suitable conditions on the step-sizes, \u03b1 \u03b8 , \u03b1 w , \u03b1 u , to ensure that the critic is updated on a faster time-scale than the actor, the critic will converge to the parameters minimising the MSPBE (Sutton et al., 2009;Degris et al., 2012b). The following COPDAC-GQ algorithm combines COPDAC with a gradient Q-learning critic,\n\u03b4 t = r t + \u03b3Q w (s t+1 , \u00b5 \u03b8 (s t+1 )) \u2212 Q w (s t , a t ) (23) \u03b8 t+1 = \u03b8 t + \u03b1 \u03b8 \u2207 \u03b8 \u00b5 \u03b8 (s t ) \u2207 \u03b8 \u00b5 \u03b8 (s t ) w t (24) w t+1 = w t + \u03b1 w \u03b4 t \u03c6(s t , a t ) \u2212 \u03b1 w \u03b3\u03c6(s t+1 , \u00b5 \u03b8 (s t+1 )) \u03c6(s t , a t ) u t (25) v t+1 = v t + \u03b1 v \u03b4 t \u03c6(s t ) \u2212 \u03b1 v \u03b3\u03c6(s t+1 ) \u03c6(s t , a t ) u t (26) u t+1 = u t + \u03b1 u \u03b4 t \u2212 \u03c6(s t , a t ) u t \u03c6(s t , a t )(27)\nLike stochastic actor-critic algorithms, the computational complexity of all these updates is O(mn) per time-step. Finally, we show that the natural policy gradient (Kakade, 2001;Peters et al., 2005) can be extended to deterministic policies. The steepest ascent direction of our performance objective with respect to any metric M (\u03b8) is given by M (\u03b8) \u22121 \u2207 \u03b8 J(\u00b5 \u03b8 ) (Toussaint, 2012). The natural gradient is the steepest ascent direction with respect to the Fisher information metric M \u03c0 (\u03b8) = E s\u223c\u03c1 \u03c0 ,a\u223c\u03c0 \u03b8 \u2207 \u03b8 log \u03c0 \u03b8 (a|s)\u2207 \u03b8 log \u03c0 \u03b8 (a|s) ; this metric is invariant to reparameterisations of the policy (Bagnell and Schneider, 2003). For deterministic policies, we use the metric M \u00b5 (\u03b8) = E s\u223c\u03c1 \u00b5 \u2207 \u03b8 \u00b5 \u03b8 (s)\u2207 \u03b8 \u00b5 \u03b8 (s) which can be viewed as the limiting case of the Fisher information metric as policy variance is reduced to zero. By combining the deterministic policy gradient theorem with compatible function approximation we see that \u2207 \u03b8 J(\u00b5 \u03b8 ) = E s\u223c\u03c1 \u00b5 \u2207 \u03b8 \u00b5 \u03b8 (s)\u2207 \u03b8 \u00b5 \u03b8 (s) w and so the steepest ascent direction is simply M \u00b5 (\u03b8) \u22121 \u2207 \u03b8 J \u03b2 (\u00b5 \u03b8 ) = w. This algorithm can be implemented by simplifying Equations 20 or 24 to \u03b8 t+1 = \u03b8 t + \u03b1 \u03b8 w t .\n\n\nExperiments\n\n\nContinuous Bandit\n\nOur first experiment focuses on a direct comparison between the stochastic policy gradient and the deterministic policy gradient. The problem is a continuous bandit problem with a high-dimensional quadratic cost function, \u2212r(a) = (a \u2212 a * ) C(a \u2212 a * ). The matrix C is positive definite with eigenvalues chosen from {0.1, 1}, and a * = [4, ..., 4] . We consider action dimensions of m = 10, 25, 50. Although this problem could be solved analytically, given full knowledge of the quadratic, we are interested here in the relative performance of model-free stochastic and deterministic policy gradient algorithms. For the stochastic actor-critic in the bandit task (SAC-B) we use an isotropic Gaussian policy, \u03c0 \u03b8,y (\u00b7) \u223c N (\u03b8, exp(y)), and adapt both the mean and the variance of the policy. The deterministic actor-critic algorithm is based on COPDAC, using a target policy, \u00b5 \u03b8 = \u03b8 and a fixed-width Gaussian behaviour policy, \u03b2(\u00b7) \u223c N (\u03b8, \u03c3 2 \u03b2 ). The critic Q(a) is simply estimated by linear regression from the compatible features to the costs: for SAC-B the compatible features are \u2207 \u03b8 log \u03c0 \u03b8 (a); for COPDAC-B they are \u2207 \u03b8 \u00b5 \u03b8 (a)(a \u2212 \u03b8); a bias feature is also included in both cases. For this experiment the critic is recomputed from each successive batch of 2m steps; the actor is updated once per batch. To evaluate performance we measure the average cost per step incurred by the mean (i.e. exploration is not penalised for the on-policy algorithm). We performed a parameter sweep over all step-size parameters and variance parameters (initial y for SAC; \u03c3 2 \u03b2 for COPDAC). Figure 1 shows the performance of the best performing parameters for each algorithm, averaged over 5 runs. The results illustrate a significant performance advantage to the deterministic update, which grows larger with increasing dimensionality. We also ran an experiment in which the stochastic actorcritic used the same fixed variance \u03c3 2 \u03b2 as the deterministic actor-critic, so that only the mean was adapted. This did not improve the performance of the stochastic actor-critic: COPDAC-B still outperforms SAC-B by a very wide margin that grows larger with increasing dimension. \n\n\nContinuous Reinforcement Learning\n\nIn our second experiment we consider continuous-action variants of standard reinforcement learning benchmarks: mountain car, pendulum and 2D puddle world. Our goal is to see whether stochastic or deterministic actor-critic is more efficient under Gaussian exploration. The stochastic actor-critic (SAC) algorithm was the actor-critic algorithm in Degris et al. (2012a); this algorithm performed best out of several incremental actor-critic methods in a comparison on mountain car. It uses a Gaussian policy based on a linear combination of features, \u03c0 \u03b8,y (s, \u00b7) \u223c N (\u03b8 \u03c6(s), exp(y \u03c6(s))), which adapts both the mean and the variance of the policy; the critic uses a linear value function approximator V (s) = v \u03c6(s) with the same features, updated by temporal-difference learning. The deterministic algorithm is based on COPDAC-Q, using a linear target policy, \u00b5 \u03b8 (s) = \u03b8 \u03c6(s) and a fixed-width Gaussian behaviour policy, \u03b2(\u00b7|s) \u223c N (\u03b8 \u03c6(s), \u03c3 2 \u03b2 ). The critic again uses a linear value function V (s) = v \u03c6(s), as a baseline for the compatible action-value function. In both cases the features \u03c6(s) are generated by tile-coding the state-space. We also compare to an off-policy stochastic actor-critic algorithm (OffPAC), using the same behaviour policy \u03b2 as just described, but learning a stochastic policy \u03c0 \u03b8,y (s, \u00b7) as in SAC. This algorithm also used the same critic V (s) = v \u03c6(s) algorithm and the update algorithm described in Degris et al. (2012b) with \u03bb = 0 and \u03b1 u = 0.\n\nFor all algorithms, episodes were truncated after a maximum of 5000 steps. The discount was \u03b3 = 0.99 for mountain car and pendulum and \u03b3 = 0.999 for puddle world. Actions outside the legal range were capped. We performed a parameter sweep over step-size parameters; variance was initialised to 1/2 the legal range. Figure 2 shows the performance of the best performing parameters for each algorithm, averaged over 30 runs. COPDAC-Q slightly outperformed both SAC and OffPAC in all three domains.\n\n\nOctopus Arm\n\nFinally, we tested our algorithms on an octopus arm (Engel et al., 2005) task. The aim is to learn to control a simulated octopus arm to hit a target. The arm consists of 6 segments and is attached to a rotating base. There are 50 continuous state variables (x,y position/velocity of the nodes along the upper/lower side of the arm; angular position/velocity of the base) and 20 action variables that control three muscles (dorsal, transversal, central) in each segment as well as the clockwise and counter-clockwise rotation of the base. The goal is to strike the target with any part of the arm. The reward function is proportional to the change in distance between the arm and the target. An episode ends when the target is hit (with an additional reward of +50) or after 300 steps. Previous work (Engel et al., 2005) simplified the high-dimensional action space using 6 \"macroactions\" corresponding to particular patterns of muscle activations; or applied stochastic policy gradients to a lower dimensional octopus arm with 4 segments (Heess et al., 2012). Here, we apply deterministic policy gradients directly to a high-dimensional octopus arm with 6 segments. We applied the COPDAC-Q algorithm, using a sigmoidal multi-layer perceptron (8 hidden units and sigmoidal output units) to represent the policy \u00b5(s). The advantage function A w (s, a) was represented by compatible function approximation (see Section 4.3), while the state value function V v (s) was represented by a second multi-layer perceptron (40 hidden units and linear output units). 3 The results of 10 training runs are shown in Figure 3; the octopus arm converged to a good solution in all cases. A video of an 8 segment arm, trained by COPDAC-Q, is also available. 4\n\n\nDiscussion and Related Work\n\nUsing a stochastic policy gradient algorithm, the policy becomes more deterministic as the algorithm homes in on a good strategy. Unfortunately this makes the stochastic policy gradient harder to estimate, because the policy gradient \u2207 \u03b8 \u03c0 \u03b8 (a|s) changes more rapidly near the mean. Indeed, the variance of the stochastic policy gradient for a Gaussian policy N (\u00b5, \u03c3 2 ) is proportional to 1/\u03c3 2 (Zhao et al., 2012), which grows to infinity as the policy becomes deterministic. This problem is compounded in high dimensions, as illustrated by the continuous bandit task. The stochastic actor-critic estimates the stochastic policy gradient in Equation 2. The inner integral, A \u2207 \u03b8 \u03c0 \u03b8 (a|s)Q \u03c0 (s, a)da, is computed by sampling a high dimensional action space. In contrast, the deterministic policy gradient can be computed immediately in closed form. One may view our deterministic actor-critic as analogous, in a policy gradient context, to Q-learning (Watkins and Dayan, 1992). Q-learning learns a deterministic greedy policy, off-policy, while executing a noisy version of the greedy policy. Similarly, in our experiments COPDAC-Q was used to learn a deterministic policy, off-policy, while executing a noisy version of that policy. Note that we compared on-policy and off-policy algorithms in our experiments, which may at first sight appear odd. However, it is analogous to asking whether Q-learning or Sarsa is more efficient, by measuring the greedy policy learnt by each algorithm (Sutton and Barto, 1998). Our actor-critic algorithms are based on model-free, incremental, stochastic gradient updates; these methods are suitable when the model is unknown, data is plentiful and computation is the bottleneck. It is straightforward in principle to extend these methods to batch/episodic updates, for example by using LSTDQ (Lagoudakis and Parr, 2003) in place of the incremental Q-learning critic. There has also been a substantial literature on model-based policy gradient methods, largely focusing on deterministic and fullyknown transition dynamics (Werbos, 1990). These methods are strongly related to deterministic policy gradients when the transition dynamics are also deterministic. We are not the first to notice that the action-value gradient provides a useful signal for reinforcement learning. The NFQCA algorithm (Hafner and Riedmiller, 2011) uses two neural networks to represent the actor and critic respectively. The actor adjusts the policy, represented by the first neural network, in the direction of the action-value gradient, using an update similar to Equation 7. The critic updates the action-value function, represented by the second neural network, using neural fitted-Q learning (a batch Qlearning update for approximate value iteration). However, its critic network is incompatible with the actor network; it is unclear how the local optima learnt by the critic (assuming it converges) will interact with actor updates.\n\n\nConclusion\n\nWe have presented a framework for deterministic policy gradient algorithms. These gradients can be estimated more efficiently than their stochastic counterparts, avoiding a problematic integral over the action space. In practice, the deterministic actor-critic significantly outperformed its stochastic counterpart by several orders of magnitude in a bandit with 50 continuous action dimensions, and solved a challenging reinforcement learning problem with 20 continuous action dimensions and 50 state dimensions.\n\n\nProceedings of the 31 st International Conference on Machine Learning, Beijing, China, 2014. JMLR: W&CP volume 32. Copyright 2014 by the author(s).\n\nFigure 1 .Figure 2 .\n12Comparison of stochastic actor-critic (SAC-B) and deterministic actor-critic (COPDAC-B) on the continuous bandit task. Comparison of stochastic on-policy actor-critic (SAC), stochastic off-policy actor-critic (OffPAC), and deterministic off-policy actor-critic (COPDAC) on continuous-action reinforcement learning. Each point is the average test performance of the mean policy.\n\nFigure 3 .\n3Ten runs of COPDAC on a 6-segment octopus arm with 20 action dimensions and 50 state dimensions; each point represents the return per episode (above) and the number of time-steps for the arm to reach the target (below).\nRecall that the compatibility criteria apply to any differentiable baseline, including non-linear state-value functions. 4 http://www0.cs.ucl.ac.uk/staff/D.Silver/ web/Applications.html\nAcknowledgements\nCovariant policy search. J A D Bagnell, J Schneider, Proceeding of the International Joint Conference on Artifical Intelligence. eeding of the International Joint Conference on Artifical IntelligenceBagnell, J. A. D. and Schneider, J. (2003). Covariant policy search. In Proceeding of the International Joint Confer- ence on Artifical Intelligence.\n\nIncremental natural actor-critic algorithms. S Bhatnagar, R S Sutton, M Ghavamzadeh, M Lee, Neural Information Processing Systems 21. Bhatnagar, S., Sutton, R. S., Ghavamzadeh, M., and Lee, M. (2007). Incremental natural actor-critic algorithms. In Neural Information Processing Systems 21.\n\nModel-free reinforcement learning with continuous action in practice. T Degris, P M Pilarski, R S Sutton, American Control Conference. Degris, T., Pilarski, P. M., and Sutton, R. S. (2012a). Model-free reinforcement learning with continuous ac- tion in practice. In American Control Conference.\n\nLinear off-policy actor-critic. T Degris, M White, R S Sutton, 29th International Conference on Machine Learning. Degris, T., White, M., and Sutton, R. S. (2012b). Linear off-policy actor-critic. In 29th International Conference on Machine Learning.\n\nLearning to control an octopus arm with gaussian process temporal difference methods. Y Engel, P Szab\u00f3, D Volkinshtein, Neural Information Processing Systems 18. Engel, Y., Szab\u00f3, P., and Volkinshtein, D. (2005). Learning to control an octopus arm with gaussian process tempo- ral difference methods. In Neural Information Process- ing Systems 18.\n\nReinforcement learning in feedback control. R Hafner, M Riedmiller, Machine Learning. 84Hafner, R. and Riedmiller, M. (2011). Reinforcement learning in feedback control. Machine Learning, 84(1- 2):137-169.\n\nActor-critic reinforcement learning with energy-based policies. N Heess, D Silver, Y Teh, JMLR Workshop and Conference Proceedings: EWRL 2012. 24Heess, N., Silver, D., and Teh, Y. (2012). Actor-critic rein- forcement learning with energy-based policies. JMLR Workshop and Conference Proceedings: EWRL 2012, 24:43-58.\n\nA natural policy gradient. S Kakade, Neural Information Processing Systems. 14Kakade, S. (2001). A natural policy gradient. In Neural Information Processing Systems 14, pages 1531-1538.\n\nLeast-squares policy iteration. M G Lagoudakis, R Parr, Journal of Machine Learning Research. 4Lagoudakis, M. G. and Parr, R. (2003). Least-squares pol- icy iteration. Journal of Machine Learning Research, 4:1107-1149.\n\nToward off-policy learning control with function approximation. H R Maei, C Szepesv\u00e1ri, S Bhatnagar, R S Sutton, 27th International Conference on Machine Learning. Maei, H. R., Szepesv\u00e1ri, C., Bhatnagar, S., and Sutton, R. S. (2010). Toward off-policy learning control with function approximation. In 27th International Confer- ence on Machine Learning, pages 719-726.\n\nPolicy gradient methods. J Peters, Scholarpedia53698Peters, J. (2010). Policy gradient methods. Scholarpedia, 5(11):3698.\n\nNatural actor-critic. J Peters, S Vijayakumar, S Schaal, 16th European Conference on Machine Learning. Peters, J., Vijayakumar, S., and Schaal, S. (2005). Natural actor-critic. In 16th European Conference on Machine Learning, pages 280-291.\n\nReinforcement Learning: an Introduction. R Sutton, A Barto, MIT PressSutton, R. and Barto, A. (1998). Reinforcement Learning: an Introduction. MIT Press.\n\nFast gradient-descent methods for temporal-difference learning with linear function approximation. R S Sutton, H R Maei, D Precup, S Bhatnagar, D Silver, C Szepesv\u00e1ri, E Wiewiora, 26th International Conference on Machine Learning. 125Sutton, R. S., Maei, H. R., Precup, D., Bhatnagar, S., Sil- ver, D., Szepesv\u00e1ri, C., and Wiewiora, E. (2009). Fast gradient-descent methods for temporal-difference learn- ing with linear function approximation. In 26th Interna- tional Conference on Machine Learning, page 125.\n\nPolicy gradient methods for reinforcement learning with function approximation. R S Sutton, D A Mcallester, S P Singh, Y Mansour, Neural Information Processing Systems. 12Sutton, R. S., McAllester, D. A., Singh, S. P., and Man- sour, Y. (1999). Policy gradient methods for reinforce- ment learning with function approximation. In Neural Information Processing Systems 12, pages 1057-1063.\n\nComparing policy-gradient algorithms. R S Sutton, S P Singh, D A Mcallester, Sutton, R. S., Singh, S. P., and McAllester, D. A. (2000). Comparing policy-gradient algorithms. http://webdocs.cs.ualberta.ca/ sutton/papers/SSM- unpublished.pdf.\n\nSome notes on gradient descent. M Toussaint, Toussaint, M. (2012). Some notes on gradient descent. http://ipvs.informatik.uni-stuttgart.\n\nQ-learning. C Watkins, P Dayan, Machine Learning. 8Watkins, C. and Dayan, P. (1992). Q-learning. Machine Learning, 8(3):279-292.\n\nA menu of designs for reinforcement learning over time. P J Werbos, Neural networks for control. BradfordWerbos, P. J. (1990). A menu of designs for reinforcement learning over time. In Neural networks for control, pages 67-95. Bradford.\n\nSimple statistical gradientfollowing algorithms for connectionist reinforcement learning. R J Williams, Machine Learning. 8Williams, R. J. (1992). Simple statistical gradient- following algorithms for connectionist reinforcement learning. Machine Learning, 8:229-256.\n\nAnalysis and improvement of policy gradient estimation. T Zhao, H Hachiya, G Niu, M Sugiyama, Neural Networks. 26Zhao, T., Hachiya, H., Niu, G., and Sugiyama, M. (2012). Analysis and improvement of policy gradient estimation. Neural Networks, 26:118-129.\n", "annotations": {"author": "[{\"end\":57,\"start\":44},{\"end\":72,\"start\":58},{\"end\":87,\"start\":73},{\"end\":102,\"start\":88},{\"end\":121,\"start\":103},{\"end\":136,\"start\":122},{\"end\":228,\"start\":137},{\"end\":261,\"start\":229}]", "publisher": null, "author_last_name": "[{\"end\":56,\"start\":50},{\"end\":71,\"start\":66},{\"end\":86,\"start\":80},{\"end\":101,\"start\":93},{\"end\":120,\"start\":110},{\"end\":135,\"start\":132}]", "author_first_name": "[{\"end\":49,\"start\":44},{\"end\":65,\"start\":58},{\"end\":79,\"start\":73},{\"end\":92,\"start\":88},{\"end\":109,\"start\":103},{\"end\":131,\"start\":122}]", "author_affiliation": "[{\"end\":227,\"start\":138},{\"end\":260,\"start\":230}]", "title": "[{\"end\":41,\"start\":1},{\"end\":302,\"start\":262}]", "venue": null, "abstract": "[{\"end\":1010,\"start\":304}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b10\"},\"end\":1862,\"start\":1848},{\"end\":7047,\"start\":7046},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":7395,\"start\":7374},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7973,\"start\":7951},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8306,\"start\":8290},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":8451,\"start\":8430},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":8471,\"start\":8451},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8494,\"start\":8471},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":8515,\"start\":8494},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":9377,\"start\":9356},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9924,\"start\":9900},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9945,\"start\":9924},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9965,\"start\":9945},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":10098,\"start\":10077},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10150,\"start\":10134},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10524,\"start\":10502},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10725,\"start\":10704},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10964,\"start\":10943},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":11155,\"start\":11134},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":11373,\"start\":11353},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":11752,\"start\":11728},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":12847,\"start\":12835},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":15441,\"start\":15420},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":17113,\"start\":17092},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":17147,\"start\":17133},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":17186,\"start\":17162},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":17235,\"start\":17214},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":19270,\"start\":19246},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20200,\"start\":20179},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":21158,\"start\":21136},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":26177,\"start\":26156},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26410,\"start\":26388},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":26546,\"start\":26527},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":26786,\"start\":26765},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26807,\"start\":26786},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":27414,\"start\":27400},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":27434,\"start\":27414},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":27620,\"start\":27603},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":27875,\"start\":27846},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":31014,\"start\":30993},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":32107,\"start\":32086},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":32716,\"start\":32696},{\"end\":33097,\"start\":33067},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":33464,\"start\":33444},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":33703,\"start\":33683},{\"end\":34201,\"start\":34200},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":34835,\"start\":34816},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":35399,\"start\":35374},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":35934,\"start\":35910},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":36278,\"start\":36251},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":36494,\"start\":36480},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":36782,\"start\":36753}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":38051,\"start\":37902},{\"attributes\":{\"id\":\"fig_1\"},\"end\":38453,\"start\":38052},{\"attributes\":{\"id\":\"fig_2\"},\"end\":38686,\"start\":38454}]", "paragraph": "[{\"end\":4435,\"start\":1026},{\"end\":5680,\"start\":4466},{\"end\":6337,\"start\":5889},{\"end\":6628,\"start\":6412},{\"end\":7396,\"start\":6667},{\"end\":8307,\"start\":7502},{\"end\":9378,\"start\":8346},{\"end\":10151,\"start\":9441},{\"end\":10525,\"start\":10179},{\"end\":10726,\"start\":10595},{\"end\":11617,\"start\":10853},{\"end\":11916,\"start\":11659},{\"end\":12637,\"start\":11956},{\"end\":13244,\"start\":12664},{\"end\":13828,\"start\":13246},{\"end\":14091,\"start\":13880},{\"end\":14849,\"start\":14159},{\"end\":15243,\"start\":14891},{\"end\":15472,\"start\":15308},{\"end\":15524,\"start\":15474},{\"end\":15697,\"start\":15526},{\"end\":16536,\"start\":15856},{\"end\":16762,\"start\":16538},{\"end\":16950,\"start\":16806},{\"end\":17290,\"start\":16952},{\"end\":18001,\"start\":17332},{\"end\":19271,\"start\":18042},{\"end\":19808,\"start\":19488},{\"end\":20834,\"start\":19980},{\"end\":21364,\"start\":21017},{\"end\":21998,\"start\":21402},{\"end\":22518,\"start\":22225},{\"end\":25709,\"start\":22682},{\"end\":26893,\"start\":25906},{\"end\":28402,\"start\":27235},{\"end\":30608,\"start\":28438},{\"end\":32131,\"start\":30646},{\"end\":32628,\"start\":32133},{\"end\":34386,\"start\":32644},{\"end\":37373,\"start\":34418},{\"end\":37901,\"start\":37388}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":5888,\"start\":5681},{\"attributes\":{\"id\":\"formula_1\"},\"end\":6411,\"start\":6338},{\"attributes\":{\"id\":\"formula_2\"},\"end\":7501,\"start\":7397},{\"attributes\":{\"id\":\"formula_3\"},\"end\":9440,\"start\":9379},{\"attributes\":{\"id\":\"formula_4\"},\"end\":10594,\"start\":10526},{\"attributes\":{\"id\":\"formula_5\"},\"end\":10852,\"start\":10727},{\"attributes\":{\"id\":\"formula_6\"},\"end\":11658,\"start\":11618},{\"attributes\":{\"id\":\"formula_7\"},\"end\":13879,\"start\":13829},{\"attributes\":{\"id\":\"formula_8\"},\"end\":14158,\"start\":14092},{\"attributes\":{\"id\":\"formula_9\"},\"end\":15307,\"start\":15244},{\"attributes\":{\"id\":\"formula_10\"},\"end\":15813,\"start\":15698},{\"attributes\":{\"id\":\"formula_11\"},\"end\":16805,\"start\":16763},{\"attributes\":{\"id\":\"formula_12\"},\"end\":19447,\"start\":19272},{\"attributes\":{\"id\":\"formula_13\"},\"end\":19979,\"start\":19809},{\"attributes\":{\"id\":\"formula_14\"},\"end\":21016,\"start\":20835},{\"attributes\":{\"id\":\"formula_15\"},\"end\":22224,\"start\":21999},{\"attributes\":{\"id\":\"formula_16\"},\"end\":22681,\"start\":22519},{\"attributes\":{\"id\":\"formula_17\"},\"end\":25905,\"start\":25710},{\"attributes\":{\"id\":\"formula_18\"},\"end\":27234,\"start\":26894}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1024,\"start\":1012},{\"attributes\":{\"n\":\"2.\"},\"end\":4448,\"start\":4438},{\"attributes\":{\"n\":\"2.1.\"},\"end\":4464,\"start\":4451},{\"attributes\":{\"n\":\"2.2.\"},\"end\":6665,\"start\":6631},{\"attributes\":{\"n\":\"2.3.\"},\"end\":8344,\"start\":8310},{\"attributes\":{\"n\":\"2.4.\"},\"end\":10177,\"start\":10154},{\"attributes\":{\"n\":\"3.\"},\"end\":11954,\"start\":11919},{\"attributes\":{\"n\":\"3.1.\"},\"end\":12662,\"start\":12640},{\"attributes\":{\"n\":\"3.2.\"},\"end\":14889,\"start\":14852},{\"attributes\":{\"n\":\"3.3.\"},\"end\":15854,\"start\":15815},{\"attributes\":{\"n\":\"4.\"},\"end\":17330,\"start\":17293},{\"attributes\":{\"n\":\"4.1.\"},\"end\":18040,\"start\":18004},{\"attributes\":{\"n\":\"4.2.\"},\"end\":19486,\"start\":19449},{\"attributes\":{\"n\":\"4.3.\"},\"end\":21400,\"start\":21367},{\"attributes\":{\"n\":\"5.\"},\"end\":28416,\"start\":28405},{\"attributes\":{\"n\":\"5.1.\"},\"end\":28436,\"start\":28419},{\"attributes\":{\"n\":\"5.2.\"},\"end\":30644,\"start\":30611},{\"attributes\":{\"n\":\"5.3.\"},\"end\":32642,\"start\":32631},{\"attributes\":{\"n\":\"6.\"},\"end\":34416,\"start\":34389},{\"attributes\":{\"n\":\"7.\"},\"end\":37386,\"start\":37376},{\"end\":38073,\"start\":38053},{\"end\":38465,\"start\":38455}]", "table": null, "figure_caption": "[{\"end\":38051,\"start\":37904},{\"end\":38453,\"start\":38076},{\"end\":38686,\"start\":38467}]", "figure_ref": "[{\"end\":30034,\"start\":30026},{\"end\":32456,\"start\":32448},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":34255,\"start\":34247}]", "bib_author_first_name": "[{\"end\":38916,\"start\":38915},{\"end\":38920,\"start\":38917},{\"end\":38931,\"start\":38930},{\"end\":39286,\"start\":39285},{\"end\":39299,\"start\":39298},{\"end\":39301,\"start\":39300},{\"end\":39311,\"start\":39310},{\"end\":39326,\"start\":39325},{\"end\":39603,\"start\":39602},{\"end\":39613,\"start\":39612},{\"end\":39615,\"start\":39614},{\"end\":39627,\"start\":39626},{\"end\":39629,\"start\":39628},{\"end\":39861,\"start\":39860},{\"end\":39871,\"start\":39870},{\"end\":39880,\"start\":39879},{\"end\":39882,\"start\":39881},{\"end\":40166,\"start\":40165},{\"end\":40175,\"start\":40174},{\"end\":40184,\"start\":40183},{\"end\":40473,\"start\":40472},{\"end\":40483,\"start\":40482},{\"end\":40700,\"start\":40699},{\"end\":40709,\"start\":40708},{\"end\":40719,\"start\":40718},{\"end\":40981,\"start\":40980},{\"end\":41173,\"start\":41172},{\"end\":41175,\"start\":41174},{\"end\":41189,\"start\":41188},{\"end\":41425,\"start\":41424},{\"end\":41427,\"start\":41426},{\"end\":41435,\"start\":41434},{\"end\":41449,\"start\":41448},{\"end\":41462,\"start\":41461},{\"end\":41464,\"start\":41463},{\"end\":41756,\"start\":41755},{\"end\":41876,\"start\":41875},{\"end\":41886,\"start\":41885},{\"end\":41901,\"start\":41900},{\"end\":42137,\"start\":42136},{\"end\":42147,\"start\":42146},{\"end\":42350,\"start\":42349},{\"end\":42352,\"start\":42351},{\"end\":42362,\"start\":42361},{\"end\":42364,\"start\":42363},{\"end\":42372,\"start\":42371},{\"end\":42382,\"start\":42381},{\"end\":42395,\"start\":42394},{\"end\":42405,\"start\":42404},{\"end\":42419,\"start\":42418},{\"end\":42843,\"start\":42842},{\"end\":42845,\"start\":42844},{\"end\":42855,\"start\":42854},{\"end\":42857,\"start\":42856},{\"end\":42871,\"start\":42870},{\"end\":42873,\"start\":42872},{\"end\":42882,\"start\":42881},{\"end\":43191,\"start\":43190},{\"end\":43193,\"start\":43192},{\"end\":43203,\"start\":43202},{\"end\":43205,\"start\":43204},{\"end\":43214,\"start\":43213},{\"end\":43216,\"start\":43215},{\"end\":43427,\"start\":43426},{\"end\":43545,\"start\":43544},{\"end\":43556,\"start\":43555},{\"end\":43719,\"start\":43718},{\"end\":43721,\"start\":43720},{\"end\":43992,\"start\":43991},{\"end\":43994,\"start\":43993},{\"end\":44227,\"start\":44226},{\"end\":44235,\"start\":44234},{\"end\":44246,\"start\":44245},{\"end\":44253,\"start\":44252}]", "bib_author_last_name": "[{\"end\":38928,\"start\":38921},{\"end\":38941,\"start\":38932},{\"end\":39296,\"start\":39287},{\"end\":39308,\"start\":39302},{\"end\":39323,\"start\":39312},{\"end\":39330,\"start\":39327},{\"end\":39610,\"start\":39604},{\"end\":39624,\"start\":39616},{\"end\":39636,\"start\":39630},{\"end\":39868,\"start\":39862},{\"end\":39877,\"start\":39872},{\"end\":39889,\"start\":39883},{\"end\":40172,\"start\":40167},{\"end\":40181,\"start\":40176},{\"end\":40197,\"start\":40185},{\"end\":40480,\"start\":40474},{\"end\":40494,\"start\":40484},{\"end\":40706,\"start\":40701},{\"end\":40716,\"start\":40710},{\"end\":40723,\"start\":40720},{\"end\":40988,\"start\":40982},{\"end\":41186,\"start\":41176},{\"end\":41194,\"start\":41190},{\"end\":41432,\"start\":41428},{\"end\":41446,\"start\":41436},{\"end\":41459,\"start\":41450},{\"end\":41471,\"start\":41465},{\"end\":41763,\"start\":41757},{\"end\":41883,\"start\":41877},{\"end\":41898,\"start\":41887},{\"end\":41908,\"start\":41902},{\"end\":42144,\"start\":42138},{\"end\":42153,\"start\":42148},{\"end\":42359,\"start\":42353},{\"end\":42369,\"start\":42365},{\"end\":42379,\"start\":42373},{\"end\":42392,\"start\":42383},{\"end\":42402,\"start\":42396},{\"end\":42416,\"start\":42406},{\"end\":42428,\"start\":42420},{\"end\":42852,\"start\":42846},{\"end\":42868,\"start\":42858},{\"end\":42879,\"start\":42874},{\"end\":42890,\"start\":42883},{\"end\":43200,\"start\":43194},{\"end\":43211,\"start\":43206},{\"end\":43227,\"start\":43217},{\"end\":43437,\"start\":43428},{\"end\":43553,\"start\":43546},{\"end\":43562,\"start\":43557},{\"end\":43728,\"start\":43722},{\"end\":44003,\"start\":43995},{\"end\":44232,\"start\":44228},{\"end\":44243,\"start\":44236},{\"end\":44250,\"start\":44247},{\"end\":44262,\"start\":44254}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":2103968},\"end\":39238,\"start\":38890},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":1773733},\"end\":39530,\"start\":39240},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":2940568},\"end\":39826,\"start\":39532},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":16073320},\"end\":40077,\"start\":39828},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":14334246},\"end\":40426,\"start\":40079},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":207211627},\"end\":40633,\"start\":40428},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":7756162},\"end\":40951,\"start\":40635},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":14540458},\"end\":41138,\"start\":40953},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":3226593},\"end\":41358,\"start\":41140},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":14941137},\"end\":41728,\"start\":41360},{\"attributes\":{\"id\":\"b10\"},\"end\":41851,\"start\":41730},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":2914735},\"end\":42093,\"start\":41853},{\"attributes\":{\"id\":\"b12\"},\"end\":42248,\"start\":42095},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":12120103},\"end\":42760,\"start\":42250},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1211821},\"end\":43150,\"start\":42762},{\"attributes\":{\"id\":\"b15\"},\"end\":43392,\"start\":43152},{\"attributes\":{\"id\":\"b16\"},\"end\":43530,\"start\":43394},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":208910339},\"end\":43660,\"start\":43532},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":59728138},\"end\":43899,\"start\":43662},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2332513},\"end\":44168,\"start\":43901},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":2274728},\"end\":44424,\"start\":44170}]", "bib_title": "[{\"end\":38913,\"start\":38890},{\"end\":39283,\"start\":39240},{\"end\":39600,\"start\":39532},{\"end\":39858,\"start\":39828},{\"end\":40163,\"start\":40079},{\"end\":40470,\"start\":40428},{\"end\":40697,\"start\":40635},{\"end\":40978,\"start\":40953},{\"end\":41170,\"start\":41140},{\"end\":41422,\"start\":41360},{\"end\":41873,\"start\":41853},{\"end\":42347,\"start\":42250},{\"end\":42840,\"start\":42762},{\"end\":43542,\"start\":43532},{\"end\":43716,\"start\":43662},{\"end\":43989,\"start\":43901},{\"end\":44224,\"start\":44170}]", "bib_author": "[{\"end\":38930,\"start\":38915},{\"end\":38943,\"start\":38930},{\"end\":39298,\"start\":39285},{\"end\":39310,\"start\":39298},{\"end\":39325,\"start\":39310},{\"end\":39332,\"start\":39325},{\"end\":39612,\"start\":39602},{\"end\":39626,\"start\":39612},{\"end\":39638,\"start\":39626},{\"end\":39870,\"start\":39860},{\"end\":39879,\"start\":39870},{\"end\":39891,\"start\":39879},{\"end\":40174,\"start\":40165},{\"end\":40183,\"start\":40174},{\"end\":40199,\"start\":40183},{\"end\":40482,\"start\":40472},{\"end\":40496,\"start\":40482},{\"end\":40708,\"start\":40699},{\"end\":40718,\"start\":40708},{\"end\":40725,\"start\":40718},{\"end\":40990,\"start\":40980},{\"end\":41188,\"start\":41172},{\"end\":41196,\"start\":41188},{\"end\":41434,\"start\":41424},{\"end\":41448,\"start\":41434},{\"end\":41461,\"start\":41448},{\"end\":41473,\"start\":41461},{\"end\":41765,\"start\":41755},{\"end\":41885,\"start\":41875},{\"end\":41900,\"start\":41885},{\"end\":41910,\"start\":41900},{\"end\":42146,\"start\":42136},{\"end\":42155,\"start\":42146},{\"end\":42361,\"start\":42349},{\"end\":42371,\"start\":42361},{\"end\":42381,\"start\":42371},{\"end\":42394,\"start\":42381},{\"end\":42404,\"start\":42394},{\"end\":42418,\"start\":42404},{\"end\":42430,\"start\":42418},{\"end\":42854,\"start\":42842},{\"end\":42870,\"start\":42854},{\"end\":42881,\"start\":42870},{\"end\":42892,\"start\":42881},{\"end\":43202,\"start\":43190},{\"end\":43213,\"start\":43202},{\"end\":43229,\"start\":43213},{\"end\":43439,\"start\":43426},{\"end\":43555,\"start\":43544},{\"end\":43564,\"start\":43555},{\"end\":43730,\"start\":43718},{\"end\":44005,\"start\":43991},{\"end\":44234,\"start\":44226},{\"end\":44245,\"start\":44234},{\"end\":44252,\"start\":44245},{\"end\":44264,\"start\":44252}]", "bib_venue": "[{\"end\":39089,\"start\":39019},{\"end\":43767,\"start\":43759},{\"end\":39017,\"start\":38943},{\"end\":39372,\"start\":39332},{\"end\":39665,\"start\":39638},{\"end\":39940,\"start\":39891},{\"end\":40239,\"start\":40199},{\"end\":40512,\"start\":40496},{\"end\":40776,\"start\":40725},{\"end\":41027,\"start\":40990},{\"end\":41232,\"start\":41196},{\"end\":41522,\"start\":41473},{\"end\":41753,\"start\":41730},{\"end\":41954,\"start\":41910},{\"end\":42134,\"start\":42095},{\"end\":42479,\"start\":42430},{\"end\":42929,\"start\":42892},{\"end\":43188,\"start\":43152},{\"end\":43424,\"start\":43394},{\"end\":43580,\"start\":43564},{\"end\":43757,\"start\":43730},{\"end\":44021,\"start\":44005},{\"end\":44279,\"start\":44264}]"}}}, "year": 2023, "month": 12, "day": 17}