{"id": 119062319, "updated": "2023-11-08 15:13:53.669", "metadata": {"title": "Loading Classical Data into a Quantum Computer", "authors": "[{\"first\":\"John\",\"last\":\"Cortese\",\"middle\":[\"A.\"]},{\"first\":\"Timothy\",\"last\":\"Braje\",\"middle\":[\"M.\"]}]", "venue": null, "journal": "arXiv: Quantum Physics", "publication_date": {"year": 2018, "month": 3, "day": 5}, "abstract": "This document describes a family of quantum circuits which load classical data into a quantum state. When loading $N$ classical bits, the result quantum state is of order $\\log_2(N)$ qubits. Furthermore the gate depth of the data loading circuit is of order $\\log_2(N)$. Limitations to the efficiency of the data loading process such as the Holevo bound are discussed. Methods to improve the efficiency of the data loading procedure such as combining classical compression techniques with quantum decompression circuitry, are also discussed. Simulations using the Quipper language were conducted to verify the circuits behavior.", "fields_of_study": "[\"Physics\"]", "external_ids": {"arxiv": "1803.01958", "mag": "2792176898", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": null, "doi": null}}, "content": {"source": {"pdf_hash": "f93346052f7550a82c95a0b39962380db9728b8a", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1803.01958v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "181905e67bbc908bfc464b9e8009fd12d24d4325", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/f93346052f7550a82c95a0b39962380db9728b8a.txt", "contents": "\nLoading Classical Data into a Quantum Computer\n5 Mar 2018\n\nJohn A Cortese \nLincoln Laboratory Massachusetts Institute of Technology Lexington\nMassachusettsUSA\n\nTimothy M Braje \nLincoln Laboratory Massachusetts Institute of Technology Lexington\nMassachusettsUSA\n\nLoading Classical Data into a Quantum Computer\n5 Mar 2018DISTRIBUTION STATEMENT A. Approved for public release: distribution unlimited. Page 2\n\n\nList of Tables\n\n\nOverview\n\nThis document describes a family quantum circuits and associated techniques and design principles which collectively serve to efficiently transfer data, specifically binary data or bits, from the classical domain (classical world) into the quantum domain (quantum world). In addition, the quantum data is formatted into quantum states for follow-on processing by efficient quantum algorithms.\n\n\nBlock diagram description of a quantum algorithm\n\nThe three generic stages of execution in a quantum computer are shown in Figure 1. The work in this document concerns the leftmost, green stage shown in Figure 1 labeled Load classical data into quantum format.\n\nLoad classical data into quantum format Quantum Computation Extract quantum results into classical data Time \u223c # gates \n\n\nThe data loading quantum circuits\n\nQuantum circuits for loading classical data into quantum states for processing by a quantum computer are the focus of this document. As different quantum algorithms have varying constraints on how the classical input data is loaded and formatted into the corresponding quantum states, a number of data loading circuits will be presented. The utility and usage of each data loading circuit is discussed in the context of the quantum algorithms to which the classical data is being passed.\n\n\nQuantum state formats for representing classical data\n\nConsider the problem of mapping a matrix of classical single bit values (b ij ) into a quantum state. As an example, take the 2 by 2 matrix A = b 00 b 01 b 10 b 11 . Note that for bit b ij , the i subscript indicates the row, with i = 0 or 1, and the j subscript indicates the column, with j = 0 or 1. The corresponding quantum state which will hold the matrix A bit values is \u03c8 A . The quantum state \u03c8 A uses three (3) qubits to represent the four single bit values b ij , as well as the corresponding positions of the bits in the matrix.\n\n|\u03c8 A = |00 \u2297 |b 00 + |01 \u2297 |b 01 + |10 \u2297 |b 10 + |11 \u2297 |b 11 (1) \u2261 |00b 00 + |01b 01 + |10b 10 + |11b 11 .\n\nThe symbol \u2297 is the tensor product operator and will be used to delineate groups of qubits within a quantum state. Quantum information notation often drops the tensor symbol to write the state as shown in the second line of Equation 1. The first, leftmost qubit of the state represents the row within the matrix, corresponding to the i index. Similarly the second qubit represents the column, corresponding to the index j. The third, rightmost qubit represents the single bit value of the corresponding (row,column) matrix entry. As is traditional in quantum information, the overall quantum state normalization constant is dropped for readability. The overall state normalization constant is straightforward to compute and reinsert when necessary. For the state in Equation 1, the normalization constant is 1 2 , regardless of the values of the b ij .\n\nThis document describes several families of data loading circuits. Each family is optimal under a different set of constraints. Each circuit family is given in order of circuit complexity, with a corresponding discussion. The material in this document is concerned with the gate based model of quantum computation and the circuits are presented in a gate based framework.\n\n\nCircuit Family #1\n\nThe quantum circuit shown in Figure 2 loads a single classical bit into a qubit. In Figure  2, double wires are classical wires conveying a classical bit value = {0,1}. Single wires are quantum wires along which quantum states or qubits move. The box with the X inside is a quantum bit flip gate. The quantum bit flip gate acts the same on quantum states as a classical inverter gate does on classical bits, reversing the value of the qubit. In both the classical and quantum scenario bit flip gate action, a \"0\" goes to a \"1\" and a \"1\" goes to a \"0\". In the circuit shown in Figure 2, the quantum bit flip gate is a controlled gate. The control is a classical wire feeding into the top of the gate. The solid dot indicates the control wire for the corresponding box/gate action. If the classical control wire is a \"0\", then the bit flip gate is not executed. If the classical control wire is a \"1\", then the bit flip gate is executed. The circuit diagram data flow is always left to right in quantum circuits.\n\n{Classical Bit b} In circuit family #1, each classical bit is stored in one qubit and requires the execution of one quantum gate to implement the classical bit loaded into a qubit storage operation. To better understand the asymptotic behavior of the size of the circuits and other aspects of the circuit families, let the total number of classical bits being loaded into the quantum computer be N . If the input data consists of N words where each word is P bits long, then the total number of bits N are { b i } \u2208 {0, 1} with i = 1, 2, \u00b7 \u00b7 \u00b7 , N = N P . The circuit\n\u2022 Classical Bit b \u2208 {0, 1} |0 X |b{Bit = 1} \u2022 Bit f lip gate is executed. |0 X |1\nFigure 4: Loading a classical \"1\" bit into the |1 qubit quantum state.\n\nshown in Figure 5 which is loading the N = N P classical bits will require a quantum state consisting of N = N P qubits to store these bits. Computationally, the circuit requires the execution of N = N P gates in parallel. The gate depth corresponds to the time the circuit will take to execute on the input data. The gate depth of the quantum circuit in Figure 5 is 1. The gate depth for all family #1 data loading quantum circuits is 1. Figure 5: Loading N classical bits {b 1 , \u00b7 \u00b7 \u00b7 , b N } into N qubits in a quantum circuit with a gate depth equal to one.\n{Bit b 1 } \u2022 |0 X |b 1 . . . . . . {Bit b N } \u2022 |0 X |b N\nThe N qubit quantum state \u03c8 produced by the circuit is\n\u03c8 = |b 1 \u2297 |b 2 \u2297 \u00b7 \u00b7 \u00b7 |b N \u2261 |b 1 b 2 \u00b7 \u00b7 \u00b7 b N .(2)\nA table of the resource requirements for each data loading circuit family will gradually be compiled. For circuit family #1 described in this section, the resource requirements are given in Table 1.  Table 1: Resource requirements for data loading circuit family #1. N is the number of vector entries or words. Let N = 2 n . P is the number of bits per vector entry or word. The total number of classical bits is N = N P = 2 n P .\n\nThe quantum state shown in Equation 2 is not optimal for use as the input to a quantum algorithm exhibiting exponential speedup. Loading N classical bits into a quantum state composed of Log 2 ( N ) or fewer qubits is needed. This fact motivated the development of circuit family #2.\n\n\nCircuit Family #2\n\nCircuit family #1 loads N bits into a quantum state of size N using a gate depth of 1. The benefit of quantum circuits over classical circuits is the potential for the quantum circuit to exhibit exponential speedup in execution time, which translates to a logarithmic reduction in the gate depth. In order for this speedup to be possible, the size, meaning the number of qubits of the quantum state containing the relevant classical data, should be logarithmic in the number of classical bits being manipulated. That is, if there is no pattern or symmetry indicating preference among the incoming data items, then all the data must be considered equally. A circuit implementing a generic algorithm on N data items should have a gate depth which is logarithmic in N . For the case of N = 8 bits, the recursive exploration of the data is shown as a tree in Figure 6.\n\nThe size of the circuit family #1 quantum state is N qubits, which is typically too large for quantum circuitry to use and still exhibit exponential speedup over classical circuitry. It is possible to pack N classical bits into a quantum state of size Log 2 (N ) qubits. Such a Compute on Bits  compression of the classical bit count is a key factor enabling quantum algorithm design for exponential speedup over classical algorithms. Circuit family #2 exhibits this logarithmic compression of classical bits into qubits. As a result, circuit family #2 is an enabling technology for the implementation of quantum algorithms exhibiting exponential speedup over classical algorithms. The three qubit state |\u03c8 A on the right hand side of the circuit in Figure 7 is storing the four classical bit values of the matrix A.\n{b 1 , b 2 , b 3 , b 4 , b 5 , b 6 , b 7 , b 8 } Compute on Bits {b 1 , b 2 , b 3 , b 4 } Compute on Bits {b 1 , b 2 } Compute|0 H \u2022 \u00d7 \u03b2 |b 00 \u00d7 \u00d7 \u03b3 |b 01 \u00d7 Discard this qubit |0 H \u2022 \u00d7 Discard this qubit |b 10 \u00d7 \u00d7 Discard this qubit |b 11 \u00d7 Discard this qubit |0 H \u2022 \u2022 \u03b1\n|\u03c8 A = |\u03c8 \u03b1\u03b2\u03b3 = |\u03b1\u03b2\u03b3 = |00 \u2297 |b 00 + |01 \u2297 |b 01 + |10 \u2297 |b 10 + |11 \u2297 |b 11 . (3)\n\nKey aspects of circuit family #2 are shown in Figure 7 and will be described in the next several sections.\n\n\nMore about quantum circuits\n\nTo understand the circuit shown in Figure 7, more detail about the constituent gates must be given. Quantum circuits are composed of quantum gates. Quantum gates act linearly on their input. Therefore, knowing the action of any gate on all possible computational basis inputs suffices to completely characterize the gate. In this section, several gates will be described which are used in the circuit shown in Figure 7.\n\n\nThe quantum Swap gate\n\nThe quantum swap gate shown in Figure 8 will be used extensively in the circuits to follow.\n\n|\u03b1 \u00d7 |\u03b2 |\u03b2 \u00d7 |\u03b1 The quantum swap gate shown in Figure 8 can be implemented with three Controlled-Not (CNOT) gates as shown in Figure 9.  |0 \nH \u2022 |0 \u2297 |b 0 + |1 \u2297 |b 1 |b 0 \u00d7 \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe |b 1 \u00d7 Discard this qubit\n\nThe Controlled Swap gate\n\nThe controlled quantum swap gate (C-Swap or CS) is shown in Figure 10. Whether two qubit states are swapped depends on the quantum state of a control line. The three qubit input state to the quantum circuit in Figure 10 is | q 1 q 2 q 3 = | 0 b 0 b 1 . The three qubit output state at the right hand side of the circuit in Figure 10 is the superposition shown in Equation 4\n\n.\n| q 1 q 2 q 3 = | 0 b 0 b 1 + | 1 b 1 b 0 ,(4)\nwhere, as discussed previously, without loss of generality, the normalization coefficient, which in this case is 1 \u221a 2 , has been dropped from Equation 4.\n\n\nThe Toffoli gate\n\nThe Toffoli gate is a Controlled-Controlled-Not gate (CCNot). It has two control lines and executes a bit flip on a third qubit if and only if the two control qubits are both in the |1 state. A controlled swap gate can be implemented with three Toffoli gates as shown in Figure 11. Figure 11: The controlled quantum swap gate using Controlled Controlled Nots (CCNot's), which are equivalent to Toffoli gates. A simplification of the circuit in Figure 11 using only one Toffoli gate and two Controlled-Not gates is shown in Figure 12. A Toffoli gate can be decomposed into a sequence of one and two qubit gates. The circuit shown in Figure 13 is one such decomposition. The single qubit gate S in Figure 13 is the Phase gate, defined as S = Figure 13: A two qubit gate implementation of the three qubit Toffoli (CCNot) gate.\n|0 H \u2022 \u2022 \u2022 |0 \u2297 |b 0 + |1 \u2297 |b 1 |b 0 \u2022 \u2022 \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe |b 1 \u2022 Discard this qubit|0 H \u2022 |0 \u2297 |b 0 + |1 \u2297 |b 1 |b 0 \u2022 \u2022 \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe |b 1 \u2022 Discard this qubit1 0 0 i , where i is the square root of \u22121, namely i = \u221a \u22121 . \u2022 |a \u2022 \u2022 \u2022 |a \u2022 = |b \u2022 \u2022 |b |c H S S \u2020 S H |c\n\nControlled Swaps of multiple qubits\n\nLooking back at the recursive structure shown in Figure 7, one notes the need for a quantum circuit which will swap into superposition more than two bits. Building upon the one qubit circuit shown in Figure 10, a two qubit swap quantum circuit is shown in Figure 14. The controlled swap of multiple pairs of qubits is used extensively in the quantum circuits to follow. A quantum circuit implementing the controlled swap of two pairs of qubits is shown in Figure 15.\n\n\nReusing Discarded qubits\n\nThe quantum circuits shown in Figures 7, 10, 11, 12 and 15 all have Discarded qubits at the end of the computation. Ideally one would like to reuse the Discarded qubits later in Figure 15: Using controlled quantum Swap gates to exchange two pairs of two qubits. Note the use of quantum superposition to build the quantum state.\n|0 H \u2022 \u2022 |0 \u2297 |b 0 b 1 + |1 \u2297 |b 2 b 3 |b 0 \u00d7 \uf8fc \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fd \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fe |b 1 \u00d7 |b 2 \u00d7 Discard these qubits |b 3 \u00d7 \uf8fc \uf8fd \uf8fe\nthe computation. However the Discarded qubits are typically entangled with other qubits in the circuit, complicating the reuse of the discarded qubits in other circuit blocks. The qubit reuse problem is shown in Figure 16, which is the same circuit as Figure 10 on page 13 but with the qubit labels | q 1 , q 2 , q 3 added for clarity. In Figure 16, the variables b 0 and b 1 are individually either 0 or 1. There are four (4) possible Figure 16 the final circuit state is\n|q 1 = |0 H \u2022 |0 \u2297 |b 0 + |1 \u2297 |b 1 |q 2 = |b 0 \u00d7 \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe |q 3 = |b 1 \u00d7 Discard this qubit{ b 0 , b 1 } pairings. In| q 1 , q 2 , q 3 = | 0 b 0 b 1 + | 1 b 1 b 0 .(5)\nIdeally, one would like to see the final circuit quantum state be as shown in Equation 6.\n| q 1 , q 2 , q 3 = | 0 b 0 + | 1 b 1 |q 1 , q 2 \u2297 |junk |q 3 .(6)\nGiven the single qubit junk state |junk in Equation 6 is in a tensor product with the remaining two qubit state |q 1 , q 2 , the junk state can be removed without affecting the |q 1 , q 2 state. The junk state can be reused as an ancilla or in some other role later in the computation without fear of impacting earlier completed computational operations. The removal and reuse of the junk qubit can occur even if there are classical correlations between the junk state |junk and the state |q 1 , q 2 . While entanglement between |junk and |q 1 , q 2 would allow a manipulation of |junk to affect the state of |q 1 , q 2 , correlations do not.\n\nReturning to the quantum state in Equation 5 which is output by the circuit in Figure 16, \nif b 0 = b 1 ,\nIn this situation, obtaining a q 3 measurement outcome of 0 would leave | q 1 q 2 = | 1 1 , which is not the desired | q 1 q 2 state of | q 1 q 2 = | 0 0 + | 1 1 . Similarly, obtaining a q 3 measurement outcome of 1 would leave | q 1 q 2 = | 0 0 , which again is not the desired | q 1 q 2 state of | q 1 q 2 = | 0 0 + | 1 1 .\n\nFor the choice of b 0 = 0 and b 1 = 1 as in the measurement examples above, the desired form of | q 1 q 2 after a measurement of q 3 would leave | q 1 q 2 in the state | q 1 q 2 = | 0 0 + | 1 1 . The qubit reuse scenario requires post-processing of qubit q 3 so that measuring q 3 will not impact the remaining | q 1 q 2 superposition state, leaving | q 1 q 2 in the state | q 1 q 2 = | 0 b 0 + | 1 b 1 regardless of the measurement outcome of q 3 . Mathematically one would like a disentangling processing F producing a three qubit state as shown in Equation 8.\n| q 1 q 2 q 3 F =\u21d2 | q 1 q 2 \u2297 | q 3 ,(8)\nwhere q 3 represents the state of the third qubit after the disentangling process and | q 1 q 2 represents the state | q 1 q 2 q 3 with the state of q 3 traced out. The disentangling strategy allows Discarded qubits to be reused in the computation, lowering the overall number of qubits needed to implement the circuits to be discussed.\n\nThe inspiration for the disentangling approach is taken from Quantum Error Correction (QEC) techniques. In the circuit shown in Figure 17, the three gates within the dashed box implement the disentangling operation referred to above as F, which is a parity checking function as implemented for a variety of quantum codes. The innovation is the implementation of error correction circuitry to enable qubit reuse in a computation. The three terminal Toffoli gate inside the dashed disentangling box F of Figure 17 can be decomposed into CNOT's and single qubit unitaries. Table 2 lists the quantum states at various points in the circuit shown in Figure 17 for the four cases b 0 = {0, 1} and b 1 = {0, 1}. The ancilla qubit |a is always |0 at the input of the circuit. As in quantum error correction protocols, the ancilla qubit is measuring the parity of b 0 and b 1 , which is equivalent to the sum a = b 0 \u2295 b 1 modulo 2.\n\nMeasuring the |q 3 qubit and the ancilla qubit |a indicates which of the four bit pairs {b 0 , b 1 } were loaded into the two qubit state | q 1 , q 2 . Unlike the situation in quantum error correction, the measurement of |q 3 and the ancilla qubit |a will not destroy the desired superposition of the remaining qubits. One already knows what b 0 and b 1 are from the original classical bit specification, so the measurement does not gain any additional information about b 0 and b 1 from the |q 3 and the ancilla qubit |a measurement outcomes.\n\nThe qubits | q 3 and | a can be measured or left untouched at the end of the disentangling circuit. In either case these qubits, either singly or together, can be used in later parts of the computation. The | q 3 and | a qubits have been stripped by the disentangling operation F of their entangled connection to the | q 1 q 2 qubit state.\n\nThe same approach can be used iteratively to remove multiple discarded qubits in a circuit. Referring to Figure 7, one can apply the disentangling method to decouple all four (4)  The four qubit state | q 1 q 2 q 3 a at three locations in the quantum circuit shown in Figure 17 moving left to right. The final two qubit state | q 1 q 2 is shown in bold in the column labeled State after F.\nDisentangling Operation F |q 1 = |0 H \u2022 \u2022 |0 \u2297 |b 0 + |1 \u2297 |b 1 |q 2 = |b 0 \u00d7 \u2022 \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe |q 3 = |b 1 \u00d7 \u2022 Discard this qubit |a \u2261 |0 \u2022 Discard this qubit\nof the discarded qubits and make these four qubits available to computational subcircuits downstream without influencing the three qubit superposition state | \u03b1 \u03b2 \u03b3 . 1\n\n\nOptimizing the data flow from classical bits into quantum states\n\nInformation theory provides guidance on how to think about optimally transferring bits from the classical domain to the quantum domain using the minimum number of qubits and gates in the transfer operation. A block diagram of the transfer process is given in Figure 18. Figure 18: Classical to quantum data flow. The Red shaded boxes denote classical domain data. Green shaded boxes denote quantum data. The output quantum state is a product state:\nClassical Input Data { b 0 , b 1 , \u00b7 \u00b7 \u00b7 , b N } Quantum State | b 0 b 1 \u00b7 \u00b7 \u00b7 b N| b 0 b 1 \u00b7 \u00b7 \u00b7 b N = | b 0 \u2297 | b 1 \u2297 \u00b7 \u00b7 \u00b7 \u2297 | b N .\nThe process of transferring bits from the classical domain to the quantum domain is a channel in information theoretic language. The picture of the data transfer dynamics is represented as shown in Figure 19. Claude Shannon's channel capacity theorem, together with the source coding theorem, indicate that to optimize the classical to quantum transfer of data, one should compress the incoming bit stream to remove any redundancies among the input bits, transmit the compressed data through the channel, and decompress the data stream at the channel output to recover the original data bits. This sequence of operations is shown in Figure  20.\nClassical Input Data { b 0 , b 1 , \u00b7 \u00b7 \u00b7 , b N } Classical to Quantum mapping (Channel) Quantum State | b 0 b 1 \u00b7 \u00b7 \u00b7 b N\nAny improvement in data transfer rate depends on the compressibility of the incoming data stream. For incoming bits which are statistically Independent, Identically Distributed (IID) and equiprobable, there is no benefit to using a compression/decompression scheme. However, in other scenarios there will be a benefit. The improvement in data transfer performance can be quantified in terms of the number of bit to qubit stages such as shown in Figure 5 on page 8 needed to transfer N bits of information. For example, for IID classical bits for which binary 1's occur with probability p and 0's occur with probability 1 \u2212 p, with 0 < p 1 \u2212 p < 1, the compression parameter L defined above behaves as shown in Figure 23. Working from the curve in Figure 23 Figure 5 is 20, yielding a savings in the number of front end qubits and gate count through the use of compression/decompression techniques of N \u2212 M = 80 qubits. This should be compared to approaches which do not use compression/decompression methods, which for the circuit shown in Figure 5 would require N = 100 qubit stages to transfer 100 uncompressed classical bits.\n\n\nComputational Complexity of Compression and Decompression\n\nReferring to the leftmost (Green) block in Figure 1  As the qubits |b k , k = 1, \u00b7 \u00b7 \u00b7 , M , are individually either |0 or |1 , with no quantum superposition present, the orthogonality of the pure states single qubit |0 or |1 allows the quantum decompression algorithm and corresponding quantum decompression circuit to be classical compression/decompression algorithms to optimize the transfer of classical bits into qubits.\n\n\nThe recursive nature of Circuit Family #2\n\nThe circuit shown in Figure 7 on page 11 has a recursive structure which enables the asymptotic behavior of circuit family #2 to be extrapolated for large N . The recursive nature of the assembly of the quantum state \u03c8 A = |00 \u2297 |b 00 + |01 \u2297 |b 01 + |10 \u2297 |b 10 + |11 \u2297 |b 11 (9) for the 2 by 2 matrix A = b 00 b 01 b 10 b 11 is shown in Figure 25. Recall that each entry b ij in the matrix A is a single classical bit.\n\nb 00 b 01 Figure 25: The recursive assembly of the quantum state \u03a8 = |00b 00 + |01b 01 + |10b 10 + |11b 11 . The depth of the recursion is Log 2 (N ) = Log 2 (4) = 2.\n\u03c8a = 0 \u2297 b 00 + 1 \u2297 b 01 b 10 b 11 \u03c8 b = 0 \u2297 b 10 + 1 \u2297 b 11 \u03a8 = 0 \u2297 \u03c8 a + 1 \u2297 \u03c8 b\nConsideration of the recursive tree construction in Figure 25 allows for the calculation of the number of qubits needed, as well as the gate depth for assembling, a quantum state containing N classical bits.\n\n\nResource tabulation for Circuit Family #2\n\nThe general approach to loading N classical bits into Log 2 (N ) qubits is a generalization of the recursive method shown in Figure 25 for N = 2 2 . Without loss of generality for asymptotic calculations, let N be a power of 2 and define n such that N = 2 n . In this case there will be a total of n levels of recursion in the quantum circuit loading N classical bits into Log 2 (N ) qubits.\n\n\nAsymptotic Quantum Gate Depth and Execution Time Resource Calculation for Circuit Family #2\n\nThe data loading circuit depth must obey bounds compatible with the quantum algorithm to be implemented. For an exponential speedup over a classical polynomial complexity algorithm, the data loading circuit depth must scale ideally as O Log \n\nTallying all the gates in a generic family #2 circuit from start to finish yields the total gate depth.\nO(n) + O(n 2 ) = O(n 2 ) \u2261 O Log 2 { N } 2 .(12)\nThe total gate depth is proportional to time. Therefore the asymptotic time scaling for\ncircuit family #2 is O Log 2 { N } 2\n, which is acceptable, but not ideal, for an exponential 2 See Figure 1.\n\nspeedup quantum algorithm. Ideally one would like a gate depth which scales at most as O Log N .\n\n\nAsymptotic Space (Qubit) Resource Calculation for Circuit Family #2\n\nLooking at Figure 25, note the left most tree level uses N qubits and the next level to the right utilizes N 2 additional qubits. Moving to the right, for generic N , each succeeding level additionally needs a number of qubits equal to half of the number of qubits of the previous level. There are a total number of n = Log 2 (N ) levels. Tabulating the total number of qubits used by circuit family #2 as a summation yields Equation 13.\nT otal # of qubits = k=n k=1 N 2 k\u22121 = N 1 + 1 2 + 1 2 2 + 1 2 3 + \u00b7 \u00b7 \u00b7 + 1 2 n\u22121 = N 1 \u2212 1 2 n 1 \u2212 1 2 = 2 N 1 \u2212 1 N = 2 N \u2212 2 < 2 N .(13)\nNote the use of the finite sum identity k=n k=0\nx k = 1 + x + x 2 + \u00b7 \u00b7 \u00b7 + x n = 1 \u2212 x n+1 1 \u2212 x ,(14)\nvalid for |x| < 1, in Equations 13, 15 and 16.\n\nThe time and space tabulation for circuit family #2 added to the numbers in Table 1 Table 3: Resource requirements for data loading circuit families #1 and #2. The total number of classical bits is N = 2 n . Note that -is the integer ceiling function. The circuit families 2 e and 2 ne stand for erasure and no erasure. The circuit family #2 variations differ in whether ancilla qubits are erased and available for reuse upon completion of the data loading circuitry. (* = Note that some or all of any remaining ancilla qubits at circuit completion may be entangled with the quantum state qubits.) circuit family #2 ne does not permit ancilla qubit reuse. However for circuit family #2 e , ancilla qubits are erased and these qubits are available for reuse in other portions of the circuit. In family #2 e qubits are reused as the master state \u03c8 is constructed, decreasing the overall spatial (qubit) resource requirements for the data loading circuit.  Table 4: Resource requirements for data loading circuit families #1 and #2. The total number of classical bits is N = 2 n . Note that -is the integer ceiling function. The circuit families 2 e and 2 ne stand for erasure and no erasure. The erasure circuit family #2 e has additional circuitry to decouple discarded qubits from the circuit, erasing their contents and making the discarded qubits available for reuse. The circuit family #2 variations #2 e versus #2 ne differ only in whether ancilla qubits are erased and available for reuse at circuit completion. (* = Note that some or all of any remaining ancilla qubits at circuit completion may be entangled with the quantum state qubits.)\n#1 N N 0 N 1 #2 ne N Log 2 (N ) = n 2 N \u2212 2 \u2212 n 2N \u2212 2 Log 2 (N ) #2 e N Log 2 (N ) = n 0 n Log 2 (N )\n\nComputing total gate counts for Circuit Family\n#1 0 N N 0 0 0 #2 ne 2 N \u2212 2 \u2212 n 2N \u2212 2 0 N \u2212 1 2 N \u2212 n \u2212 2 0 #2 e 0 n 2 (2 N \u2212 2 \u2212 n) N \u2212 1 2 N \u2212 n \u2212 2 2 N \u2212 2 \u2212 nk=n k=1 N 2 k = N 2 k=n\u22121 k=0 1 2 k = N 2 1 \u2212 1 2 n 1 \u2212 1 2 = N 1 \u2212 1 N = N \u2212 1,(15)\nwhich is entered under the column labelled H in Table 4 for families #2 e and #2 ne .\n\n\nThe number of Controlled Swap gates (CSwap's)\n\nLooking back to Figure 25 on page 25 and the quantum circuits shown in Figures 7, 10 and 15, observe the tally of Controlled Swap (CSwap) gates is N 2 for the first time slice, 2 N 4 for the second time slice, 3 N 8 for the third time slice, and so on. This summation is shown in Equation 16. Let b be a variable which will later be set to 1 2 .\nN k=n k=1 k 2 k = N k=n k=1 k b k = N b \u2202 \u2202b k=n k=1 b k = N b \u2202 \u2202b 1 \u2212 b n+1 1 \u2212 b \u2212 1 (16) = N b \u2212 (n + 1) b n 1 \u2212 b \u2212 (1 \u2212 b n+1 )(\u22121) (1 \u2212 b) 2 = N \u2212 (n + 1) b n + 2 (1 \u2212 b n+1 ) . (17)\nAs just mentioned, in Equation 17 set b = 1 2 and note that b n = 1 N , so N b n = 1. Also note that 2b = 1. As a result Equation 17 becomes Equation 18.\nN k=n k=1 k 2 k = \u2212 (n+1) + 2 N \u2212 2 b N b n = \u2212 (n+1) + 2 N \u2212 1 = 2 N \u2212 n \u2212 2. (18)\nThe summation result shown in Equation 18 is entered under the column labelled CSWAP in Table 4 for circuit families #2 e and #2 ne . As a check, note that when N = 4, then n = Log 2 (N ) = 2 and 2 N \u2212 n \u2212 2 = 8 \u2212 2 \u2212 2 = 4. Referring to the N = 4 examples shown in Figures 7 and 25, on pages 11 and 25 respectively, one may verify that the number of CSwap's is indeed 4.\n\n\nThe number of Controlled Not \u2261 CNOT gate's\n\nFor circuit family #2 ne , the number of controlled Not gates is zero. Looking back to the quantum erasure circuit in Figure 17, when the erasure circuitry of circuit family #2 e is included in the gate count, two controlled Not gates are used for every qubit discarded or erased. Since in circuit family #2 e the number of discarded and erased qubits is seen in Tables 3 and 4 to be 2 N \u2212 2 \u2212 n, twice this number or 2 (2 N \u2212 2 \u2212 n ) is entered in Table 4 under the Controlled Not gate count column.\n\n\nThe number of Toffoli gates \u2261 CCNot gate's\n\nFor circuit family #2 ne , the number of Toffoli gates is zero. 3 Looking back to the quantum erasure circuit in Figure 17, when the erasure circuitry of circuit family #2 e is included in the gate count, one Toffoli is used for every qubit which is discarded or erased. Since in circuit family #2 e the number of discarded and erased qubits is seen in Tables 3 and 4 to be 2 N \u2212 2 \u2212 n, this is the number of Toffoli gates entered in Table 4.\n\n\nCircuit Family #3\n\nCircuit family #2 presents the basic approach to data loading. In either of the two #2 circuit families, 2 e or 2 ne , the data loading circuit depth is the primary concern. 4 For circuit family #2 the gate depth scaling with N was computed with the aid of the recursive tree diagram in Figure 25  Circuit family #3 reduces the CSwap gate depth for time slice #k from k to Log 2 ( k ). This reduction is implemented by using a tree-like circuit structure which enables parallel execution of the k CSwap's for the k'th time slice. The tree-like parallelization circuit takes a circuit of gate depth Log(k) to construct, thereby limiting the parallelization construction to a gate depth at time slice #k of Log 2 (k). Figure 26 demonstrates the circuit family #3 approach for the scenario of N = 8 classical bits. 5 Every gate within a time slice is executed simultaneously. Thus, in time slice #4 all four controlled swap's are executed in parallel. This is allowed as all four CSwap's act on qubits which are not involved with any other gate in that time slice. The tradeoff is that a circuit of gate depth Log 2 (k) is needed to set up the simultaneous execution of the four CSwap's in one time slice. This Log depth circuitry is shown in time slices # 2 and #3 in Figure 26. Focussing on qubits |a 0 , a 1 , a 2 , a 3 and the first three times slices of Figure 26 leads to Figure 27, where the CSwap gates shown in time slice # 4 of Figure 26 are removed for clarity.\n\nLocation in Circuit Quantum State |a 0 , a 1 , a 2 , a 3\n\nBefore Time Slice #1 |0000\n\nAfter Time Slice #1 (|0 + |1 ) \u2297 |000\n\nAfter Time Slice #2 (|00 + |11 ) \u2297 |00\n\nAfter Time Slice #3 |0000 + |1111 Table 5: Working through the quantum state transformations among the ancilla qubits in the circuit shown in Figure 27 for parallelizing the CSwap's execution. The resulting four qubit state |a 0 , a 1 , a 2 , a 3 is a Shor Cat state. Time slices #5 and #6 serve to decouple the ancilla qubits a 1 , a 2 and a 3 from the remaining qubits, allowing a 1 , a 2 and a 3 to be used elsewhere in the circuit. Warning: Note that for ease of presentation the sequence of qubits in the ket shown in the rightmost column of Table 5 is different than the top \u2192 down sequence of qubits shown in the Figure 27 circuit.\n\n\nGate depth analysis for Circuit Family #3\n\nAs done earlier, without loss of generality, let N = 2 n be the total number of classical bits to be loaded into a quantum state. Circuit family #3 follows the same general recursion scheme of circuit family #2, but with additional ancilla circuitry. As in circuit family #2, the recursion is broken down into a total of n stages. From the circuits in Figures 26 and 27, as well as the state transformations shown in Table 5, the gate depth of each of the k stages can be calculated. For stage k, where k \u2208 {1, 2, 3, \u00b7 \u00b7 \u00b7 , n}, one time slice is dedicated to the Hadamard and one time slice is dedicated to executing all of the stage k CSwap's. In addition, \n|a 1 = |0 \u2022 \u2022 \u2022 |a 1 \uf8fc \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fd \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fe |a 2 = |0 \u2022 |a 2 Ancilla qubits |a 3 = |0 \u2022 |a 3 |a 0 = |0 H \u2022 \u2022 \u2022 \u2022 \u2022 |b 0 \u00d7 \uf8fc \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fd \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fe |b 1 \u00d7 |0 \u2297 |b 0 b 1 b 2 b 3 + |1 \u2297 |b 4 b 5 b 6 b 7 |b 2 \u00d7 |b 3 \u00d7 \uf8fc \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fd \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fe |b 4 \u00d7 |b 5 \u00d7 Discard|a 1 = |0 \u2022 \u2022 |a 1 \uf8fc \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fd \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8fe |a 2 = |0\n|a 2 Ancilla qubits\n|a 3 = |0 |a 3 |a 0 = |0 H \u2022 \u2022 \u2022 \u2022 |a 0\nT ime Slice # 1 # 2 # 3 # 4 # 5 # 6 Log 2 (k) = Log 2 (e) n Ln( n ),\n\nwhere Ln( n ) is the natural logarithm of n, specifically Ln( n ) \u2261 Log e (n). Rewrite Ln(n) = Log 2 (n)\n\nLog 2 (e) yielding k=n k=1\n\nLog 2 (k) = n Log 2 ( n ).\n\nRecall that n = Log 2 (N ) and one obtains \n\nwhere the fact that Log 2 Log 2 ( N ) grows very slowly with increasing N , as shown in the plot of Figure 28, is used. Note that Log 2 Log 2 ( N ) is essentially a constant less than 10 in value for large, but finite, N in the numerical range of interest for the data loading circuitry. \n\n\nSummary\n\nAll the circuit families discussed in this document, in both the erasure and no erasure forms, have been simulated in the Quipper quantum computer simulation framework. Quipper is a well known classical computer based software tool used by the quantum computing community as a test and verification framework for proposed quantum circuits and algorithms.\n\nTo summarize, the work presented in this document describes the following.\n\n\u2022 A practical circuit family (#3) which loads N classical bits into a quantum data structure of size Log 2 (N ) qubits in a quantum circuit depth of O Log(N ) . Both this data structure size and this gate depth are critical requirements for generic quantum algorithms and circuits exhibiting exponential speedup over their classical algorithm and circuit counterparts.\n\n\u2022 Classical compression with quantum decompression can ease the complexity and gate count of the data loading circuitry, while optimizing the transfer of bits into qubits. The design methodology described shows how classical compression/quantum decompression schemes can be designed using classical compression and decompression algorithms.\n\n\u2022 Ancilla qubits are used in circuits detailed in this document, as well as in most circuits in the literature. Ancilla qubits are typically discarded after use, which means that in practice the ancilla qubits are preserved, but ignored, until the end of the computation [1]. In practice, rather than preserve but ignore these idle qubits until the completion of the computation, one would like to reuse these ancilla qubits so as to keep the spatial overhead (the # of qubits used by the computation and/or circuit) to a minimum. Section 2.5 of this document describes a procedure and associated family of quantum circuits which decouple discarded qubits from the main body of qubits in use during the computation, thereby enabling the discarded qubits to be reused later in the circuit and as a result minimizing overall spatial qubit usage in a quantum circuit computation.\n\nFigure 1 :\n1The three stages of execution in a quantum computer.\n\nFigure 2 :Figure 3 :\n23Loading a classical bit b into the qubit quantum state |b .{Bit = 0}\u2022 Bit f lip gate is not executed. Loading a classical \"0\" bit into the |0 qubit quantum state.\n\nFigure 6 :\n6Recursive Computation on N = 8 bits.\n\nFigure 7 :\n7A circuit family #2 implementation layout loading the four classical bits, { b 00 , b 01 , b 10 , b 11 } into the three qubits |\u03b1\u03b2\u03b3 . Recall that a classical bit b is loaded into a single qubit denoted |b using the quantum circuit/gate shown inFigure 2.\n\nFigure 8 :\n8The quantum Swap gate interchanges the states of two qubits.\n\nFigure 9 :\n9The Swap gate implemented with three Controlled-Not (CNOT) gates.\n\nFigure 10 :\n10The Controlled Swap (CSwap) gate.\n\nFigure 12 :\n12The controlled quantum swap gate using one CCNot (Toffoli) gate and two Controlled-Not gates.\n\nFigure 14 :\n14Using two Swap gate's to exchange two pairs of two qubits.\n\nFigure 16 :\n16The Controlled Swap (CSwap) gate.\n\n\nmeasuring the Discarded qubit q 3 would influence the remaining |q 1 q 2 possibly superposition state. For example, if b 0 = 0 and b 1 = 1, the state shown in Equation 5 becomes | q 1 q 2 q 3 = | 0 0 1 + | 1 1 0 .\n\nFigure 17 :\n17The Controlled Swap gate with an ancilla |a used to remove entanglement between qubits.Input StateState |q 1 , q 2 , q 3 , a b 0 b 1 |q 1 , q 2 , q 3 , a before F State |q 1 , q 2 , q 3 , a after F\n\nFigure 19 :\n19Classical to quantum data flow through a quantum channel. The Red shaded boxes denote classical domain data. Green shaded boxes denote quantum data. The black box will use the circuits shown inFigures 2 and 5.\n\nFigure 20 :Figure 21 :\n2021To optimize data flow, compress binary data in the classical domain and decompress in the quantum domain. Figures 21 and 22 present the basic concepts of the compression/decompression approach. In Figure 21, a block of N bits is compressed by a factor of L to a block of M bits, where M \u2264 N . The factor L = \u2212 E S [ Log ( p i ) ] is the average entropy of a bit in the incoming bit stream. For large blocks, meaning N >> 1, a single bit is mapped to L bits, where 0 \u2264 L \u2264 1. Therefore the block of length N bits is mapped by the compression algorithm to L N = M bits, where 0 \u2264 M \u2264 N . In our scheme the compression algorithm is implemented on a classical computer. The compression rate is 1 L , with L > 1. The red shading indicates all three blocks are implemented in the classical domain.\n\nFigure 22 :\n22, when p = 0.03, then M = 0.2N = N 5 . ( For this operating point, please see the red dot on the curve in Figure 23. ) When only 3% of the incoming bits are on average 1's, compression/decompression methods can reduce the number of loading circuits Quantifying circuit complexity reduction using compression techniques. The circuits shown in Figure 5 become M parallel stages instead of the N parallel stages shown. The number of qubits saved by the compression/decompression approach is N \u2212 M . The red shaded blocks occur in the classical domain, while the green block is in the quantum domain.\n\nFigure 5\n5from N to N 5 . For N = 100 and p = 0.03, the number of stages needed in the circuit shown in\n\n\non page 5, to ensure the data loading circuit implementation is a time complexity of order O [ Log(N ) ], the quantum gate circuit depth of the decompression stage must be of order O [ Log(N ) ]. A proof that the O [ Log(N ) ] decompression bound is achievable proceeds as follows. Recall that although the data structures involved in the quantum decompression algorithm are qubits, the qubits are storing classical bit values and are in the pure state |0 or |1 at the beginning of the decompression circuit. This fact is due to the nature of the data loading circuitry shown in Figures 24 which serves to transfer the M compressed bits output from the classical compression algorithm from the classical domain into the quantum domain.\n\nFigure 23 :Figure 24 :\n2324The circuits in Figure 5 become M parallel stages instead of the N parallel stages shown in Figure 5. The number of qubits saved by the use of the compression/decompression approach is N \u2212 M . The red dot indicates the ( p = 0.03, L = 0.2 ) operating point discussed in the main body. a quantum version of the classical decompression corresponding to the classical compression algorithm which was used. The classical gates in the classical decompression circuit (e.g. NAND) are implemented using quantum gates. In this manner, the extensive literature of classical decompression algorithms and circuits can be leveraged. Using the fact that one can represent each classical gate in the classical decompression algorithm with a quantum gate configuration consisting of, at most, a fixed, finite number of quantum gates, the proof of O [ Log(N ) ] quantum gate depth for the quantum decompression circuit follows from the corresponding proof of O [ Log(N ) ] gate depth of the classical decompression circuit. As there are many classical decompression algorithms with O [ Log(N ) ] classical gate depth, this concludes the discussion of the application of Loading M classical bits {b 1 , \u00b7 \u00b7 \u00b7 , b M } into M qubits in a quantum circuit with a gate depth equal to one.\n\n\nN and at most polylogarithmically in Log N . 2 For circuit family #2, the gate depth can be computed with the aid of the recursive tree diagram in Figure 25, together with the controlled swap based circuits shown in Figures 7, 10 and 15. Moving from left to right in Figure 25, the first layer requires one Hadamard gate and one controlled swap gate (CSwap). The second layer requires one Hadamard and two CSwap gates. The third layer requires one Hadamard and three CSwap gates. And so on. Tabulating the number of gates in these recursion layers leads to the summations in Equations 10 and 11. # of Hadamards = n = Log(N ).\n\n\nnumber of Hadamard gates Looking back to Figure 25 on page 25 and the quantum circuits shown in Figures 7, 10 and 15, observe the overall tally of Hadamard gates is N 2 for the first time slice, N 4 for the second time slice, N 8 for the third time slice, and so on. This summation is shown in\n\n2 .\n2and determined in Equation 12 on page 26 to be O Log 2 { N } Ideally one would like a gate depth which scales at most as O Log N . Looking back at the gate depth computation for circuit family #2, one finds the number and implementation of CSwap's is leading to the O Log 2 { N } 2 gate depth scaling behavior. Further examination of circuit family #2's architecture indicates the serial nature of the use of CSwap's in each time slice ultimately generates the limiting O Log { N } 2 scaling behavior.\n\nFigure 27 :\n27Gates used to minimize Circuit Family #3 gate depth. The precursor and post circuitry used in circuit family #3 for N = 8 are for setting up the parallel CSwap execution stages in Figure 26. bound Log 2 (k) \u2264 1 + Log 2 (k) is used. The key quantity in Equation 20 is the term k=n k=1 Log 2 (k). Rewriting the summation term in Equation 20 yields k=n k=1Log 2 (k) = Log 2 (e)\n\nLog 2\n2(k) = Log 2 ( N ) Log 2 Log 2 ( N ) \u2248 Log 2 ( N )(24)where the justification for the approximation in Equation 24 is given by the plot ofLog 2 Log 2 ( N ) shown in Figure 28. Using the result from Equation 24 in Equation 25 yields the gate depth of circuit family #3. Gate Depth = 3 n + k=n k=1 Log 2 (k) \u2248 O Log ( N ) ,\n\nFigure 28 :\n28Plot of Log 2 Log 2 ( N ) versus N . See Equation 24 for application.\n\nTable 2 :\n2\n\n\nFigure 26: Circuit family #3 for N = 8. The controlled quantum swap gate for two pairs of four qubits or eight data qubits. Note the use of superposition to build the quantum state. each stage has one ancilla construction circuit and a corresponding ancilla deconstruction circuit. Each of these latter circuits have gate depth Log 2 (k) . Thus the gate depth of a family # 3 circuit loading N classical bits is as given inEquation 19.these qubits \n\n|b 6 \n\u00d7 \n\n|b 7 \n\u00d7 \n\nT ime Slice # 1 # 2 # 3 \n# 4 \n# 5 # 6 \n\nGate Depth = \n\nk=n \n\nk=1 \n\n1 + 1 + Log 2 (k) \n(19) \n\nThink of the iterative disentangling application as peeling an onion, with each individual peeling action the application of the disentangling operation to one qubit.\nDo not count the Toffoli gate inside the Controlled Swap gate. That Toffoli gate is accounted for in the CSwap gate count. 4 SeeFigure 1.\nTherefore n = Log 2 (N ) = Log 2 (8) = 3.\nFor Stirling's approximation, see Mathematical Methods in the Physical Sciences by Mary Boas, Second Edition, Section 11, Page 472, Equation 11.1.\nThe authors would like to thank Professor Aram Harrow of the Massachusetts Institute of Technology Center for Theoretical Physics for stimulating discussions.Bibliography\nAn Introduction to quantum information and quantum circuits by John Watrous, Published in The Association of Computing Machinery -Special Interest Group in Algorithms and Computation Theory. ACM SIGACT42An Introduction to quantum information and quantum circuits by John Watrous, Published in The Association of Computing Machinery -Special Interest Group in Algorithms and Computation Theory (ACM SIGACT), June, 2011, Volume 42, Issue Number 2, Page 52-67.\n", "annotations": {"author": "[{\"end\":160,\"start\":60},{\"end\":262,\"start\":161}]", "publisher": null, "author_last_name": "[{\"end\":74,\"start\":67},{\"end\":176,\"start\":171}]", "author_first_name": "[{\"end\":64,\"start\":60},{\"end\":66,\"start\":65},{\"end\":168,\"start\":161},{\"end\":170,\"start\":169}]", "author_affiliation": "[{\"end\":159,\"start\":76},{\"end\":261,\"start\":178}]", "title": "[{\"end\":47,\"start\":1},{\"end\":309,\"start\":263}]", "venue": null, "abstract": null, "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2677,\"start\":2676},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":33574,\"start\":33571}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":34242,\"start\":34177},{\"attributes\":{\"id\":\"fig_1\"},\"end\":34429,\"start\":34243},{\"attributes\":{\"id\":\"fig_2\"},\"end\":34479,\"start\":34430},{\"attributes\":{\"id\":\"fig_3\"},\"end\":34746,\"start\":34480},{\"attributes\":{\"id\":\"fig_4\"},\"end\":34820,\"start\":34747},{\"attributes\":{\"id\":\"fig_6\"},\"end\":34899,\"start\":34821},{\"attributes\":{\"id\":\"fig_7\"},\"end\":34948,\"start\":34900},{\"attributes\":{\"id\":\"fig_8\"},\"end\":35057,\"start\":34949},{\"attributes\":{\"id\":\"fig_9\"},\"end\":35131,\"start\":35058},{\"attributes\":{\"id\":\"fig_10\"},\"end\":35180,\"start\":35132},{\"attributes\":{\"id\":\"fig_11\"},\"end\":35396,\"start\":35181},{\"attributes\":{\"id\":\"fig_12\"},\"end\":35609,\"start\":35397},{\"attributes\":{\"id\":\"fig_13\"},\"end\":35834,\"start\":35610},{\"attributes\":{\"id\":\"fig_14\"},\"end\":36654,\"start\":35835},{\"attributes\":{\"id\":\"fig_15\"},\"end\":37266,\"start\":36655},{\"attributes\":{\"id\":\"fig_16\"},\"end\":37371,\"start\":37267},{\"attributes\":{\"id\":\"fig_17\"},\"end\":38109,\"start\":37372},{\"attributes\":{\"id\":\"fig_18\"},\"end\":39404,\"start\":38110},{\"attributes\":{\"id\":\"fig_19\"},\"end\":40032,\"start\":39405},{\"attributes\":{\"id\":\"fig_20\"},\"end\":40328,\"start\":40033},{\"attributes\":{\"id\":\"fig_21\"},\"end\":40836,\"start\":40329},{\"attributes\":{\"id\":\"fig_22\"},\"end\":41226,\"start\":40837},{\"attributes\":{\"id\":\"fig_23\"},\"end\":41555,\"start\":41227},{\"attributes\":{\"id\":\"fig_24\"},\"end\":41640,\"start\":41556},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":41653,\"start\":41641},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":42218,\"start\":41654}]", "paragraph": "[{\"end\":827,\"start\":435},{\"end\":1090,\"start\":880},{\"end\":1211,\"start\":1092},{\"end\":1736,\"start\":1249},{\"end\":2333,\"start\":1794},{\"end\":2441,\"start\":2335},{\"end\":3295,\"start\":2443},{\"end\":3668,\"start\":3297},{\"end\":4700,\"start\":3690},{\"end\":5269,\"start\":4702},{\"end\":5422,\"start\":5352},{\"end\":5985,\"start\":5424},{\"end\":6098,\"start\":6044},{\"end\":6584,\"start\":6154},{\"end\":6869,\"start\":6586},{\"end\":7755,\"start\":6891},{\"end\":8573,\"start\":7757},{\"end\":8927,\"start\":8845},{\"end\":9035,\"start\":8929},{\"end\":9486,\"start\":9067},{\"end\":9603,\"start\":9512},{\"end\":9745,\"start\":9605},{\"end\":10215,\"start\":9842},{\"end\":10218,\"start\":10217},{\"end\":10420,\"start\":10266},{\"end\":11264,\"start\":10441},{\"end\":12027,\"start\":11561},{\"end\":12383,\"start\":12056},{\"end\":12972,\"start\":12500},{\"end\":13231,\"start\":13142},{\"end\":13941,\"start\":13299},{\"end\":14033,\"start\":13943},{\"end\":14374,\"start\":14049},{\"end\":14938,\"start\":14376},{\"end\":15317,\"start\":14981},{\"end\":16242,\"start\":15319},{\"end\":16787,\"start\":16244},{\"end\":17128,\"start\":16789},{\"end\":17519,\"start\":17130},{\"end\":17842,\"start\":17674},{\"end\":18359,\"start\":17911},{\"end\":19140,\"start\":18496},{\"end\":20391,\"start\":19263},{\"end\":20878,\"start\":20453},{\"end\":21344,\"start\":20924},{\"end\":21512,\"start\":21346},{\"end\":21803,\"start\":21596},{\"end\":22240,\"start\":21849},{\"end\":22577,\"start\":22336},{\"end\":22682,\"start\":22579},{\"end\":22819,\"start\":22732},{\"end\":22929,\"start\":22857},{\"end\":23027,\"start\":22931},{\"end\":23536,\"start\":23099},{\"end\":23725,\"start\":23678},{\"end\":23828,\"start\":23782},{\"end\":25476,\"start\":23830},{\"end\":25914,\"start\":25829},{\"end\":26309,\"start\":25964},{\"end\":26653,\"start\":26500},{\"end\":27109,\"start\":26738},{\"end\":27656,\"start\":27156},{\"end\":28145,\"start\":27703},{\"end\":29636,\"start\":28167},{\"end\":29694,\"start\":29638},{\"end\":29722,\"start\":29696},{\"end\":29761,\"start\":29724},{\"end\":29801,\"start\":29763},{\"end\":30441,\"start\":29803},{\"end\":31146,\"start\":30487},{\"end\":31538,\"start\":31519},{\"end\":31647,\"start\":31579},{\"end\":31753,\"start\":31649},{\"end\":31781,\"start\":31755},{\"end\":31809,\"start\":31783},{\"end\":31854,\"start\":31811},{\"end\":32144,\"start\":31856},{\"end\":32510,\"start\":32156},{\"end\":32586,\"start\":32512},{\"end\":32956,\"start\":32588},{\"end\":33298,\"start\":32958},{\"end\":34176,\"start\":33300}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":5304,\"start\":5270},{\"attributes\":{\"id\":\"formula_1\"},\"end\":5351,\"start\":5304},{\"attributes\":{\"id\":\"formula_2\"},\"end\":6043,\"start\":5986},{\"attributes\":{\"id\":\"formula_3\"},\"end\":6153,\"start\":6099},{\"attributes\":{\"id\":\"formula_4\"},\"end\":8700,\"start\":8574},{\"attributes\":{\"id\":\"formula_5\"},\"end\":8844,\"start\":8700},{\"attributes\":{\"id\":\"formula_6\"},\"end\":9814,\"start\":9746},{\"attributes\":{\"id\":\"formula_7\"},\"end\":10265,\"start\":10219},{\"attributes\":{\"id\":\"formula_8\"},\"end\":11342,\"start\":11265},{\"attributes\":{\"id\":\"formula_9\"},\"end\":11415,\"start\":11342},{\"attributes\":{\"id\":\"formula_10\"},\"end\":11522,\"start\":11415},{\"attributes\":{\"id\":\"formula_11\"},\"end\":12499,\"start\":12384},{\"attributes\":{\"id\":\"formula_12\"},\"end\":13065,\"start\":12973},{\"attributes\":{\"id\":\"formula_13\"},\"end\":13091,\"start\":13065},{\"attributes\":{\"id\":\"formula_14\"},\"end\":13141,\"start\":13091},{\"attributes\":{\"id\":\"formula_15\"},\"end\":13298,\"start\":13232},{\"attributes\":{\"id\":\"formula_16\"},\"end\":14048,\"start\":14034},{\"attributes\":{\"id\":\"formula_18\"},\"end\":14980,\"start\":14939},{\"attributes\":{\"id\":\"formula_19\"},\"end\":17673,\"start\":17520},{\"attributes\":{\"id\":\"formula_20\"},\"end\":18442,\"start\":18360},{\"attributes\":{\"id\":\"formula_21\"},\"end\":18495,\"start\":18442},{\"attributes\":{\"id\":\"formula_22\"},\"end\":19262,\"start\":19141},{\"attributes\":{\"id\":\"formula_23\"},\"end\":21595,\"start\":21513},{\"attributes\":{\"id\":\"formula_25\"},\"end\":22731,\"start\":22683},{\"attributes\":{\"id\":\"formula_26\"},\"end\":22856,\"start\":22820},{\"attributes\":{\"id\":\"formula_27\"},\"end\":23677,\"start\":23537},{\"attributes\":{\"id\":\"formula_28\"},\"end\":23781,\"start\":23726},{\"attributes\":{\"id\":\"formula_29\"},\"end\":25579,\"start\":25477},{\"attributes\":{\"id\":\"formula_30\"},\"end\":25744,\"start\":25628},{\"attributes\":{\"id\":\"formula_31\"},\"end\":25828,\"start\":25744},{\"attributes\":{\"id\":\"formula_32\"},\"end\":26499,\"start\":26310},{\"attributes\":{\"id\":\"formula_33\"},\"end\":26737,\"start\":26654},{\"attributes\":{\"id\":\"formula_34\"},\"end\":31440,\"start\":31147},{\"attributes\":{\"id\":\"formula_35\"},\"end\":31518,\"start\":31440},{\"attributes\":{\"id\":\"formula_36\"},\"end\":31578,\"start\":31539}]", "table_ref": "[{\"end\":6351,\"start\":6344},{\"end\":6361,\"start\":6354},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":15896,\"start\":15889},{\"end\":23913,\"start\":23906},{\"end\":23921,\"start\":23914},{\"end\":24791,\"start\":24784},{\"end\":25884,\"start\":25877},{\"end\":26833,\"start\":26826},{\"end\":27612,\"start\":27605},{\"end\":28144,\"start\":28137},{\"end\":29844,\"start\":29837},{\"end\":30357,\"start\":30350},{\"end\":30911,\"start\":30904}]", "section_header": "[{\"end\":422,\"start\":408},{\"attributes\":{\"n\":\"1\"},\"end\":433,\"start\":425},{\"attributes\":{\"n\":\"1.1\"},\"end\":878,\"start\":830},{\"attributes\":{\"n\":\"2\"},\"end\":1247,\"start\":1214},{\"attributes\":{\"n\":\"2.1\"},\"end\":1792,\"start\":1739},{\"attributes\":{\"n\":\"2.2\"},\"end\":3688,\"start\":3671},{\"attributes\":{\"n\":\"2.3\"},\"end\":6889,\"start\":6872},{\"attributes\":{\"n\":\"2.4\"},\"end\":9065,\"start\":9038},{\"attributes\":{\"n\":\"2.4.1\"},\"end\":9510,\"start\":9489},{\"attributes\":{\"n\":\"2.4.2\"},\"end\":9840,\"start\":9816},{\"attributes\":{\"n\":\"2.4.3\"},\"end\":10439,\"start\":10423},{\"attributes\":{\"n\":\"2.4.4\"},\"end\":11559,\"start\":11524},{\"attributes\":{\"n\":\"2.5\"},\"end\":12054,\"start\":12030},{\"attributes\":{\"n\":\"2.5.1\"},\"end\":17909,\"start\":17845},{\"attributes\":{\"n\":\"2.5.2\"},\"end\":20451,\"start\":20394},{\"attributes\":{\"n\":\"3\"},\"end\":20922,\"start\":20881},{\"attributes\":{\"n\":\"3.1\"},\"end\":21847,\"start\":21806},{\"attributes\":{\"n\":\"3.1.1\"},\"end\":22334,\"start\":22243},{\"attributes\":{\"n\":\"3.2\"},\"end\":23097,\"start\":23030},{\"attributes\":{\"n\":\"3.3\"},\"end\":25627,\"start\":25581},{\"attributes\":{\"n\":\"3.3.2\"},\"end\":25962,\"start\":25917},{\"attributes\":{\"n\":\"3.3.3\"},\"end\":27154,\"start\":27112},{\"attributes\":{\"n\":\"3.3.4\"},\"end\":27701,\"start\":27659},{\"attributes\":{\"n\":\"4\"},\"end\":28165,\"start\":28148},{\"attributes\":{\"n\":\"4.1\"},\"end\":30485,\"start\":30444},{\"attributes\":{\"n\":\"5\"},\"end\":32154,\"start\":32147},{\"end\":34188,\"start\":34178},{\"end\":34264,\"start\":34244},{\"end\":34441,\"start\":34431},{\"end\":34491,\"start\":34481},{\"end\":34758,\"start\":34748},{\"end\":34832,\"start\":34822},{\"end\":34912,\"start\":34901},{\"end\":34961,\"start\":34950},{\"end\":35070,\"start\":35059},{\"end\":35144,\"start\":35133},{\"end\":35409,\"start\":35398},{\"end\":35622,\"start\":35611},{\"end\":35858,\"start\":35836},{\"end\":36667,\"start\":36656},{\"end\":37276,\"start\":37268},{\"end\":38133,\"start\":38111},{\"end\":40333,\"start\":40330},{\"end\":40849,\"start\":40838},{\"end\":41233,\"start\":41228},{\"end\":41568,\"start\":41557},{\"end\":41651,\"start\":41642}]", "table": "[{\"end\":42218,\"start\":42091}]", "figure_caption": "[{\"end\":34242,\"start\":34190},{\"end\":34429,\"start\":34267},{\"end\":34479,\"start\":34443},{\"end\":34746,\"start\":34493},{\"end\":34820,\"start\":34760},{\"end\":34899,\"start\":34834},{\"end\":34948,\"start\":34915},{\"end\":35057,\"start\":34964},{\"end\":35131,\"start\":35073},{\"end\":35180,\"start\":35147},{\"end\":35396,\"start\":35183},{\"end\":35609,\"start\":35412},{\"end\":35834,\"start\":35625},{\"end\":36654,\"start\":35863},{\"end\":37266,\"start\":36670},{\"end\":37371,\"start\":37278},{\"end\":38109,\"start\":37374},{\"end\":39404,\"start\":38138},{\"end\":40032,\"start\":39407},{\"end\":40328,\"start\":40035},{\"end\":40836,\"start\":40335},{\"end\":41226,\"start\":40852},{\"end\":41555,\"start\":41235},{\"end\":41640,\"start\":41571},{\"end\":42091,\"start\":41656}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":961,\"start\":953},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":1041,\"start\":1033},{\"attributes\":{\"ref_id\":\"fig_21\"},\"end\":3727,\"start\":3719},{\"attributes\":{\"ref_id\":\"fig_21\"},\"end\":3783,\"start\":3774},{\"attributes\":{\"ref_id\":\"fig_21\"},\"end\":4274,\"start\":4266},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":5441,\"start\":5433},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":5787,\"start\":5779},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":5871,\"start\":5863},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":7754,\"start\":7746},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":8515,\"start\":8507},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":8983,\"start\":8975},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":9110,\"start\":9102},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":9485,\"start\":9477},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":9551,\"start\":9543},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":9660,\"start\":9652},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":9739,\"start\":9731},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":9911,\"start\":9902},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10061,\"start\":10052},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10174,\"start\":10165},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10721,\"start\":10712},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10732,\"start\":10723},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10894,\"start\":10885},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10973,\"start\":10964},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11082,\"start\":11073},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11146,\"start\":11137},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11190,\"start\":11181},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":11618,\"start\":11610},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11770,\"start\":11761},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11826,\"start\":11817},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12026,\"start\":12017},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12243,\"start\":12234},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12721,\"start\":12712},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12761,\"start\":12752},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12848,\"start\":12839},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12945,\"start\":12936},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":14031,\"start\":14022},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15456,\"start\":15447},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15830,\"start\":15821},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15973,\"start\":15964},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17243,\"start\":17235},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17407,\"start\":17398},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":18179,\"start\":18170},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":18190,\"start\":18181},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":18703,\"start\":18694},{\"attributes\":{\"ref_id\":\"fig_21\"},\"end\":19139,\"start\":19129},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":19716,\"start\":19708},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19982,\"start\":19973},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20019,\"start\":20010},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":20028,\"start\":20020},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":20311,\"start\":20303},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20504,\"start\":20496},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":20953,\"start\":20945},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":21272,\"start\":21263},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":21365,\"start\":21356},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":21657,\"start\":21648},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":21983,\"start\":21974},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":22928,\"start\":22920},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":23119,\"start\":23110},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":25989,\"start\":25980},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":26048,\"start\":26035},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":26255,\"start\":26244},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":27020,\"start\":27004},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27283,\"start\":27274},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27825,\"start\":27816},{\"attributes\":{\"ref_id\":\"fig_16\"},\"end\":28463,\"start\":28454},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":28892,\"start\":28883},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":29442,\"start\":29433},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":29532,\"start\":29523},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":29551,\"start\":29542},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":29611,\"start\":29602},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":29954,\"start\":29945},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":30432,\"start\":30423},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":30856,\"start\":30839},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":31965,\"start\":31956}]", "bib_author_first_name": null, "bib_author_last_name": null, "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":43341,\"start\":42884}]", "bib_title": null, "bib_author": null, "bib_venue": "[{\"end\":43073,\"start\":42884}]"}}}, "year": 2023, "month": 12, "day": 17}