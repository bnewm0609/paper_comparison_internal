{"id": 9237290, "updated": "2023-09-28 09:43:49.002", "metadata": {"title": "Automatically Generating Commit Messages from Diffs using Neural Machine Translation", "authors": "[{\"first\":\"Siyuan\",\"last\":\"Jiang\",\"middle\":[]},{\"first\":\"Ameer\",\"last\":\"Armaly\",\"middle\":[]},{\"first\":\"Collin\",\"last\":\"McMillan\",\"middle\":[]}]", "venue": "2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)", "journal": "2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)", "publication_date": {"year": 2017, "month": 8, "day": 30}, "abstract": "Commit messages are a valuable resource in comprehension of software evolution, since they provide a record of changes such as feature additions and bug repairs. Unfortunately, programmers often neglect to write good commit messages. Different techniques have been proposed to help programmers by automatically writing these messages. These techniques are effective at describing what changed, but are often verbose and lack context for understanding the rationale behind a change. In contrast, humans write messages that are short and summarize the high level rationale. In this paper, we adapt Neural Machine Translation (NMT) to automatically\"translate\"diffs into commit messages. We trained an NMT algorithm using a corpus of diffs and human-written commit messages from the top 1k Github projects. We designed a filter to help ensure that we only trained the algorithm on higher-quality commit messages. Our evaluation uncovered a pattern in which the messages we generate tend to be either very high or very low quality. Therefore, we created a quality-assurance filter to detect cases in which we are unable to produce good messages, and return a warning instead.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1708.09492", "mag": "2964322208", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-1708-09492", "doi": "10.1109/ase.2017.8115626"}}, "content": {"source": {"pdf_hash": "1d7424b3610bf7fb53fdd559f0298d9abf860019", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1708.09492v1.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1708.09492", "status": "GREEN"}}, "grobid": {"id": "e13856b1b1e78a537b8bba7202846f09f561a843", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/1d7424b3610bf7fb53fdd559f0298d9abf860019.txt", "contents": "\nAutomatically Generating Commit Messages from Diffs using Neural Machine Translation\n\n\nSiyuan Jiang sjiang1@nd.edu \nDepartment of Computer Science and Engineering\nUniversity of Notre Dame\nNotre Dame\nINUSA\n\nAmeer Armaly aarmaly@nd.edu \nDepartment of Computer Science and Engineering\nUniversity of Notre Dame\nNotre Dame\nINUSA\n\nCollin Mcmillan \nDepartment of Computer Science and Engineering\nUniversity of Notre Dame\nNotre Dame\nINUSA\n\nAutomatically Generating Commit Messages from Diffs using Neural Machine Translation\n\nCommit messages are a valuable resource in comprehension of software evolution, since they provide a record of changes such as feature additions and bug repairs. Unfortunately, programmers often neglect to write good commit messages. Different techniques have been proposed to help programmers by automatically writing these messages. These techniques are effective at describing what changed, but are often verbose and lack context for understanding the rationale behind a change. In contrast, humans write messages that are short and summarize the high level rationale. In this paper, we adapt Neural Machine Translation (NMT) to automatically \"translate\" diffs into commit messages. We trained an NMT algorithm using a corpus of diffs and human-written commit messages from the top 1k Github projects. We designed a filter to help ensure that we only trained the algorithm on higher-quality commit messages. Our evaluation uncovered a pattern in which the messages we generate tend to be either very high or very low quality. Therefore, we created a quality-assurance filter to detect cases in which we are unable to produce good messages, and return a warning instead.\n\nI. INTRODUCTION\n\nCommit messages are natural language descriptions of changes in source code. When a programmer updates code, a typical procedure is to upload the change to a version control system with a short commit message to describe the purpose of the change, e.g., \"adds support for 9 inch tablet screen size.\" The repository stores the message alongside a diff that represents the difference between the current and previous version of the affected files. The practice is extremely common: for this paper alone, we obtained over 2M diffs and messages from just 1k projects on GitHub.\n\nCommit messages are useful because they help programmers to understand the high level rationale for a change without reading the low level implementation details. They serve a valuable purpose in comprehension of software evolution, and act as a record of feature additions and bug repairs [7]. Unfortunately, programmers sometimes neglect commit messages [11], [36], likely due to the same time and market pressures that have been reported to affect many types of documentation [44], [12], [24]. In short, programmers use commit messages but often avoid writing them themselves.\n\nAutomated generation of commit messages has been proposed as an alternative to manual efforts by programmers. For example, Buse et al. [7] describe DeltaDoc, a tool that summarizes what changed in the control flow of a program between code versions. Likewise, Cortes-Coy et al. [32] built ChangeScribe, which summarizes changes such as method additions. These and other existing techniques (see Section II) have been shown to be effective in answering questions about what changed and where from one code version to another.\n\nWhat is missing from existing approaches is a short, high level description of the purpose behind commits. Current approaches are effective at summarizing what changed and where, but do not answer the question why [7]. Questions of why traditionally require human insight since they involve synthesis of different, complex data sources and context. However, as Mockus et al. [38] observed, many commit messages are similar and can be broadly categorized as related to bug repair, feature additions, etc. Plus, they follow similar grammatical patterns such as verb-direct object structure (e.g. \"adds support for...\") [23]. This observation leads us to believe that the text of commit messages can be learned and predicted if there is sufficient data. Our view is in line with the hypothesis of \"naturalness\" of software [20], that software artifacts follow patterns that can be learned from sufficiently large datasets.\n\nIn this paper, we adapt a neural machine translation (NMT) algorithm to the problem of commit message generation. Several NMT algorithms have been designed to translate between natural languages by training a neural network on pairs of sentences that humans have already translated. The datasets required are enormous by typical software engineering research standards, involving up to tens of millions of pairs of sentences [49], [34]. We trained an NMT algorithm using pairs of diffs and commit messages from 1k popular projects on GitHub. While we were able to obtain quite large datasets (over 2M commits), we encountered many commit messages that were gibberish or very low quality (a problem others have observed [11], [36]), which if left in the training data could be reflected in the NMT's output. Therefore, we designed a filter to ensure that we only trained the algorithm using messages with a verb-direct object pattern.\n\nWe investigate and report the effectiveness of the predictions from the process. We found promising results as well as key constraints on the accuracy of the predictions. In short, the NMT process performed quite well under select conditions, but poorly in others. We report these results and promising and poor conditions as a guide to other researchers and platform for advancement in this research area. To further promote advancement of the area, we make our implementation and data freely available in an online replication package.\n\nOur approach has two key advantages that make it a supplement to, rather than a competitor of, existing automatic commit message generation techniques. First, we produce short summary messages rather than exhaustive descriptions of code changes. And second, our approach produces messages for changes to many types of software artifact in the repository, not solely source code.\n\n\nA. The Problem\n\nIn this paper we target the problem of automatically generating commit messages. Commit messages are useful in the long term for program comprehension and maintainability, but cost significant time and effort in the short term. These short term pressures lead programmers to neglect writing commit messages, like other types of documentation [11], [36], [44], [12], [24]. Buse et al. [7] point out that programmers use commit messages for two reasons: 1) to summarize what changed, and 2) to briefly explain why the change was necessary. To date, research into commit message generation has exclusively focused on the question what. In this paper, we seek to begin answering why.\n\nExisting commit message generation techniques produce relatively long messages that include details such as the methods that were added or the number of files changes (what information). While useful, these techniques are a complement to, rather than a replacement for, high level why information that humans write such as \"adds support for 9 inch tablet screens.\" Normally, this high level information requires human judgment. But we hypothesize that there are patterns of commits, and that these patterns can be detected and used to generate messages for similar commits later. Given a large number of pairs of diffs and messages, we believe we can train an algorithm to write new messages for new commits, based on the new commits' similarity to older ones.\n\nPlease note that we do not claim to generate new insights for completely new types of commits -that task is likely to remain in the hands of human experts. However, we do aim to write messages that reflect knowledge that can be learned from records of previous commits. In the long run, we hope that this technology will help reduce manual effort by programmers in reading and understanding code changes in repositories. Figure 1 depicts an overview of our paper. We have divided the work into three segments: In Part A (Section IV), we present our approach to filtering for verb/direct-object (V-DO) commit message patterns and training an NMT algorithm to produce messages with this pattern. The V-DO filter was introduced because a large percentage of the messages in the repositories we downloaded were very low quality, and we needed to ensure that we trained the NMT algorithm only with examples matching an acceptable pattern. We then trained an NMT algorithm on the pairs of diffs and commit messages where the messages followed the V-DO pattern.\n\n\nB. Paper Overview\n\nIn Part B (Sections V and VI), we evaluate the quality of the commit messages produced by the algorithm with an automated method and a human study with 2 Ph.D. students and 18 professional programmers. We observe that while there are a significant number of positive results, there are also a significant number of negative results. Therefore, in Part C (Sections VII), we design a quality assurance (QA) filter to detect cases in which the NMT algorithm is likely to produce a negative result. We then modify our approach to produce a warning message instead of a commit message in those cases, and update our evaluation to show the effects of our modification. In short, we reduce the number of poor predicted messages by 44% at a cost of also mistakenly reducing high quality predictions by 11%.\n\n\nII. RELATED WORK\n\nWe split the related work into three categories: 1) the work that generates commit messages; 2) the work that summarizes source code; and 3) the work that applies deep learning algorithms in software engineering.\n\n\nA. Commit Message Generation Techniques\n\nWe categorize the commit message generation techniques into three groups based on the inputs of the techniques. The first group uses code changes of a commit as an input, and summarizes the changes to generate the commit message. For example, Buse et al. have built DeltaDoc, which extracts path predicates of changed statements, and follows a set of predefined rules to generate a summary [7]. Similarly, Linares-V\u00e1squez et al. have built ChangeScribe, which extracts changes between two Abstract Syntax Trees and summarizes the changes based on predefined rules [32].\n\nSupplementing the first group, the second group is based on related software documents. For example, Le et al. have built RCLinker, which links a bug report to the corresponding commit message [31]. Rastkar and Murphy have proposed to summarize multiple related documents for commits [43]. Integrating the ideas of the first and the second groups, Moreno et al. have built ARENA, which summarizes changes and finds related issues to generate release notes [39].\n\nThe third group is our technique using diffs (generated by \"git diff\") as inputs. Our technique is to translate a diff to a natural language sentence. Our technique supplements the first group in two ways. First, the techniques in the first group often generate multi-line summaries that contain pseudocode and template text. In contrast, our technique generates one-sentence descriptions, which can be used as a headline of the multi-line summaries. Second, our technique summarizes both code and non-code changes in diffs.\n\n\nB. Source Code Summarization\n\nSource code summarization techniques generate descriptions of source code pieces. The algorithms of the techniques can be adapted to generate summaries for changes in commits. Code summarization can be categorized into two groups: extractive and abstractive. Extractive summarization extracts relevant parts of source code and uses the relevant parts as a summary [16]. Abstractive summarization includes information that is not explicitly in the source code. For example, Sridhara et al. has designed a Natural Language Generation (NLG) system to create summaries of Java methods [50]. First, the NLG system finds important statements of a Java method. Second, the system uses a text generation algorithm to transform a statement to a natural language description. This algorithm has predefined text templates for different statement types, such as return statements and assignment statements. Both DeltaDoc and ChangeScribe (discussed in Section II-A) follow the similar NLG design.\n\nBesides the NLG approach to generate abstractive summaries, Iyer et al. have built Code-NN, which uses an Neural Machine Translation (NMT) algorithm to summarize code snippets [22]. This work is similar to our technique because our technique also uses an NMT algorithm. There are two key differences between our technique and Code-NN. First, the goal of Code-NN is summarizing code snippets and the goal of our technique is summarizing changes. Second, Code-NN parses code snippets and removed all the comments. In contrast, our technique's input is an entire diff with code, comments, and diff marks (e.g., + denoting insertion).\n\n\nC. Deep Learning in Software Engineering\n\nDeep learning algorithms are becoming more prevalent in Software Engineering research. Deep learning algorithms, as applied to software, automatically learn representations of software artifacts. For example, to detect code clones, traditional approaches predefine the representations of code fragments (some techniques use token sequences to represent code [25]; others use graphs [29], [9]). In contrast, the deep learning approach introduced by White et al. [53] learns the representations of code automatically. Similarly, deep learning algorithms are introduced in bug localization [30], software traceability [15], and code suggestions [54].\n\nOur technique is similar to the work done by Gu et al. [14], because both our and their techniques use Neural Machine Translation (NMT). Gu et al. use NMT to translate natural language queries to API method sequences [14]. Similarly, several code generation techniques use NMT to translate nat-ural language to programming language [33], [42]. In contrast, our technique translates diffs to natural language.\n\nOur technique is also similar to the work by Alexandru et al. [5], which investigates the suitability of NMT for program comprehension. Alexandru et al. use NMT for source code tokenization and token annotation. While Alexandru et al. target on lower-level source code understanding (token-level), we target on understanding higher-level of mixtures of code and text (diff-level).\n\n\nIII. BACKGROUND\n\nWe split the background section into three subsections. The first subsection is about the empirical studies on commit messages, which motivate us to generate short descriptions of commits. The second subsection describes RNN Encoder-Decoder, a popular Neural Network Translation model, which is an important background for the third subsection. The third subsection describes attentional RNN Encoder-Decoder, which is used in our work.\n\n\nA. Commit Messages\n\nOur work is motivated by the findings of the studies by Buse et al. Third, commit messages contain various types of information not solely summaries of code changes. Buse et al. manually analyzed 375 commit messages and found that the messages are not only about what the changes are but also about why the changes are made. Supported by the three findings, our technique aims to generate one-sentence commit messages which mimic the human-written commit messages.\n\n\nB. RNN Encoder-Decoder Model\n\nNeural Machine Translation (NMT) is neural networks that model the translation process from a source language sequence x = (x 1 , ..., x n ) to a target language sequence y = (y 1 , ..., y n ) with the conditional probability p(y|x) [5], [35]. Cho et al. introduced RNN Encoder-Decoder as an NMT model [10], which is commonly used and can produce state of the art translation performance [49], [34]. As a promising deep learning model, RNN Encoder-Decoder has been used in addressing other software engineering tasks [14], [5].\n\nRNN Encoder-Decoder has two recurrent neural networks (RNNs). One RNN is used to transform source language sequences into vector representations. This RNN is called the encoder. The other RNN is used to transform the vector representations to the target language sequences, which is called the decoder.\nx 1 h 1 x 2 h 2 \u2026 x T h T h T-1 \u2026 \u2026 Fig. 2.\nThe architecture of the encoder in RNN Encoder-Decoder\n<start> h' 0 y 1 h' 1 \u2026 y T' h' T'-1 \u2026 \u2026 h T y T'-1 h' T'-2 Fig. 3.\nThe architecture of the decoder in RNN Encoder-Decoder 1) Encoder: The input of the encoder is a variable-length sequence x = (x 1 , ..., x T ). The encoder takes one symbol at a time as shown in Figure 2. As an RNN, the encoder has a hidden state h, which is a fixed-length vector. At a time step t, the encoder computes the hidden state h t by:\nh t = f (h t\u22121 , x t )(1)\nwhere f is a non-linear function. Two common options for f are long short-term memory (LSTM) [21] and the gated recurrent unit (GRU) [10] (due to space limit, we do not describe these two unit types in detail here). For example, Bahdanau et al. use GRU [6] and Sutskever et al. use LSTM [51]. The last symbol of x should be an end-of-sequence (<eos>) symbol which notifies the encoder to stop and output the final hidden state h T , which is used as a vector representation of x.\n\n2) Decoder: Figure 3 shows the RNN of the decoder. The output of the decoder is the target sequence y = (y 1 , ..., y T ). One input of the decoder is a <start> symbol denoting the beginning of the target sequence. At a time step t, the decoder computes the hidden state h t and the conditional distribution of the next symbol y t by:\nh t = f (h t\u22121 , y t\u22121 , h T ) (2) p(y t |y t\u22121 , ..., y 1 , h T ) = g(h t , y t\u22121 , h T )(3)\nwhere h T (generated by the encoder) is called the context vector; f and g are non-linear functions. Function f here and f in Equation 1 are often the same. Function g must produce valid probabilities. For example, softmax can be used as g.\n\nThe decoder finishes when it predicts an <eos> symbol.\n\n3) Training Goal: The encoder and the decoder are jointly trained to maximize the conditional log-likelihood:\nmax \u03b8 1 N N i=1 log p(y i |x i ; \u03b8) (4)\nwhere \u03b8 is the set of the model parameters; N is the size of the training set; and each (x i , y i ) is a pair of a source sequence and a target sequence in the training set.\n\n\nC. Attentional RNN Encoder-Decoder and Nematus\n\nBahdanau et al. introduced the attentional RNN Encoder-Decoder, in which attention mechanism is introduced to deal with long source sequences [6]. We use this mechanism in our work because our source sequences, diffs, are much longer than natural language sentences. The attention mechanism includes several modifications in both the encoder and the decoder, which we describe in the following subsections.\n\n1) Encoder: The encoder in the attentional model is a bidirectional RNN, which has two RNNs: forward and backward. The two RNNs have the same architecture. The forward RNN is the same as the RNN in the original RNN Encoder-Decoder model (Figure 2), which reads the source sequence x as it is ordered, from x 1 to x T . The forward RNN generates a sequence of the hidden states (\n\u2212 \u2192 h 1, ... \u2212 \u2192 h T ).\nIn contrast, the backward RNN reads x in the reversed order, and generates a sequence of the hidden states (\n\u2190 \u2212 h T , ... \u2190 \u2212 h 1).\nIn the end, for each symbol x i in x, the encoder outputs\nh i = [ \u2212 \u2192 h i ; \u2190 \u2212 h i ], which is a concatenation of \u2212 \u2192 h i and \u2190 \u2212 h i . 2) Decoder:\nThe decoder computes the hidden state h t and the conditional distribution of the next symbol y t by:\nh t = f (h t\u22121 , y t\u22121 , c t ) (5) p(y t |y t\u22121 , ..., y 1 , c t ) = g(h t , y t\u22121 , c t )(6)\nwhere f and g are non-linear functions like f and g in Equations 2 and 3. c t is the distinct context vector for y t , and can be computed by\nc t = T i=1 \u03b1 ti h i (7)\nwhere T is the length of the input sequence; the weight \u03b1 ti can be trained jointly with the other components in the model, and h i is generated by the encoder. Since c t is designed to introduce the context's impact to y t , attentional RNN Encoder-Decoder works better on long source sequences. Therefore, we use this NMT model in this paper rather than the original one.\n\n\nIV. APPROACH\n\nThis section describes our approach, including the data set preparation and the NMT training procedure. This section corresponds to Part A in the paper overview Figure 1, and is detailed in Figure 4.\n\n\nA. Preparing a Data Set for NMT\n\nWe used the commit data set provided by Jiang and McMillan [23], which contains 2M commits. The data set includes commits from top 1k Java projects (ordered by the number of stars) in Github. We describe how we prepared the data set for NMT algorithms as follows.\n\n1) Preprocessing the Data Set: First, we extracted the first sentences from the commit messages. We used the first sentences as the target sequences because the first sentences often are the summaries of the entire commit messages. Similarly, Gu et al. used the first sentences of the API comments as their target sequences [14]. Second, we removed issue ids from the extracted sentences and removed commit ids from the diffs, because issue ids and commit ids are unique ids and increase the vocabularies of the source and the target languages dramatically, which in turn cause large memory use of NMT.\n\nThird, we removed merge and rollback commits (the same practice done by Jiang and McMillan [23]). Merges and rollbacks are removed because the diffs of merges and rollbacks are often more than thousands of lines, which NMT is not suitable to translate. For the same reason, we also removed any diff that is larger than 1MB.\n\nAfter the above steps, we have 1.8M commits remaining. Finally, we tokenized the extracted sentences and the diffs by white spaces and punctuations. We did not split CamelCase so that identifiers (e.g., class names or method names) are treated as individual words in this study.\n\n2) Setting Maximum Sequence Lengths for NMT Training: A maximum sequence length for both source and target sequences need to be set for an RNN Encoder-Decoder [6], [46]. Since NMT is for translating natural language sentences, maximum sequence lengths for both source and target sequences are often set between 50 to 100 [6], [46]. Because the lengths of our source and target sequences are very different, we set the maximum sequence lengths separately.\n\nFor our target sequences, we set the maximum length at 30 tokens (including words and punctuations), because the first sentences from the commit messages tend to be short. In our data set, 98% of the first sentences have less than 30 tokens.\n\nFor our source sequences, we set the maximum length at 100 tokens because 100 is the largest maximum length used by NMT in natural language translation. Many configurations are possible, and optimizing the maximum diff length for generating commit messages is an area of future work. In pilot  After applying the maximum lengths for source and target sequences (30 and 100), we have 75k commits remaining.\n\n3) V-DO Filter: We introduced Verb-Direct Object (V-DO) filter because we found that the existing messages have different writing styles and some of the messages are poor written, which may affect the performance of NMT.\n\nTo obtain a set of commit messages that are in a similar format, we filtered the messages for verb/direct-object pattern. We chose this pattern because a previous study shows that 47% of commit messages follow this pattern [23]. To find the pattern, we used a Natural Language Processing (NLP) tool, Stanford CoreNLP [37], to annotate the sentences with grammar dependencies. Grammar dependencies are a set of dependencies between parts of a sentences. Considering a phrase, \"program a game\", this phrase has a dependency, which is called \"dobj\" in Stanford CoreNLP, where the governor is \"program\" and the dependent is \"game\". For V-DO filter, we look for \"dobj\" dependencies which represent the verb/directobject pattern.\n\nFor each sentence, we checked whether the sentence is begun with a \"dobj\" dependency. If the sentence is begun with a \"dobj\", we mark the sentence as a \"dobj\" sentence. In the end, we have 32k commit messages that are \"dobj\" sentences. 4) Generating Training/Validation/Test Sets: We randomly selected 3k commits for testing, 3k commits for validation, and the rest 26k commits for training. 5) Selecting Vocabularies: NMT needs predefined vocabularies for commit messages and diffs. In the training set, the commit messages have 16k distinct tokens (words or punctuations) and the diffs have 65k distinct tokens. We selected all the 16k tokens in the commit messages to be the vocabulary of commit messages. We used the most frequent 50k tokens in the diffs to be the vocabulary of diffs. All the tokens that are not in the diff vocabulary only occur once in the training set. Additionally, the vocabulary size of 50k is often used by other NMT models [34].\n\n\nB. NMT Training and Testing\n\nIn this section, we describe how we trained and tested an NMT model for generating commit messages.\n\n1) Model: We used Nematus [47] in our work because it is robust, easy to use, and produced best constrained systems for seven translation directions (e.g., English to German, etc.) in WMT 2016 shared news translation task [49]. Nematus is based on Theano [52], and implements the attentional RNN encoder-decoder (see Section III-C) with several implementation differences [47].\n\n2) Training Setting: We borrowed the training setting that Sennrich et al. used to produce the best translation systems in WMT 2016 [49]. The training goal is cross-entropy minimization [45]. The learning algorithm is stochastic gradient descent (SGD) with Adadelta [55], which automatically adapts the learning rate. The size of minibatches is 80; the size of word embeddings is 512; the size of hidden layers is 1024.\n\nFor each epoch, the training set is reshuffled. The model is validated every 10k minibatches by BLEU [41], which is a commonly used similarity metric for machine translation. The maximum number of epochs is 5k; the maximum number of minibatches is 10M; and early stopping is used [47]. During the training, the model is saved every 30k minibatches. So after the training, a list of models are saved and the ensemble results of the last four models are used for evaluation.\n\nOne key difference between our and Sennrich et al.'s training processes is that Sennrich et al. used maximum sentence length of 50 for all the languages; we used 30 for commit messages and 100 for diffs as explained in Section IV-A2.\n\n3) Training Details: We trained on the training set of 26k pairs of commit messages and diffs, with a validation set of 3k pairs. We conducted the training on an Nvidia GeForce GTX 1070 with 8GB memory. The learning algorithm stopped at 210k minibatches. Because a model is saved every 30k minibatches, seven models are saved from this training. The training process took 38 hours. 4) Testing Details: While we describe our evaluation in the next section, certain technical details are relevant here. We ran Nematus with the last four saved models on the testing set and we obtained the ensemble result. We used the same GPU as we used in training. The testing process took 4.5 minutes. We note that we followed the standard evaluation procedure for NMT and used a test set of 3k [34], [48], [10].\n\n\nV. EVALUATION USING AN AUTOMATIC METRIC\n\nIn this section, we evaluate the generated messages from our approach that we described in the last section. Our objective is to assess the similarity between the generated messages and the reference messages in the test set. This section corresponds to Part B in the paper overview Figure 1. Note that this evaluation is distinct from the experiment with human evaluators that we describe in Section VI, which is also a component of \"Part B.\" In this section we ask: RQ1 Compared to the messages generated by a baseline, are the messages generated by the NMT model more or less similar to the reference messages? RQ2 Are the messages generated by the NMT model more or less similar to the reference messages when V-DO filter is enabled or disabled? We ask RQ1 to evaluate the NMT model compared to a baseline, which we describe in the following subsection. We ask RQ2 in order to evaluate the impact of V-DO filter. In the following subsections, we first introduce the baseline for RQ1. Then, we introduce the metric for measuring similarity between two messages. Finally, we report our results for the research questions.\n\n\nA. Baseline: MOSES\n\nWe used MOSES [28] as the baseline in RQ1. MOSES is a popular statistical machine translation software, which is often used as a baseline in evaluating machine translation systems [8], [27]. For example, Iyer et al. used MOSES as a baseline when they evaluated Code-NN [22]. To run MOSES for translating diffs to commit messages, we trained a 3gram language model using KenLM [18], [19], which is the same procedure in the study of Iyer et al. [22]. We did not use Code-NN as a baseline, because, in our pilot study of running Code-NN [22] to generate commit messages, Code-NN did not generate comparable results. A possible reason is that Code-NN needs parsing source sequences and diffs are not suitable for parsing.\n\n\nB. Similarity Metric: BLEU\n\nBLEU [41] is widely used to measure the similarity between two sentences in evaluation of machine translation systems [26], [34], [33]. Additionally, BLEU is recommended for assessing an entire test set instead of a sentence [41]. The calculation of BLEU needs the modified n-gram precisions. For any n, the modified n-gram precision is calculated by: \n\nwhere test is the set of pairs of the generated and the reference messages in the test set; gen is the set of distinct n-grams in a generated message; Cnt clip is defined in Equation (9); Cnt gen is the number of occurrences of an n-gram in a generated message; similarly, Cnt ref is the number of the occurrences of an n-gram in a reference message. Then, BLEU is:\nBLEU = BP \u00b7 exp( N n=1 1 N log(p n ))(10)BP = 1 if c > r e (1\u2212r/c) if c \u2264 r(11)\nwhere N is the maximum number of grams; p n is defined in Equation (8); BP is defined in Equation (11); r is the sum of the lengths of all the reference messages; c is the sum of the lengths of the generated messages. BLEU scores range from 0 to 100 (in percent). The default value of N is 4, which is used in our evaluation and is commonly used in other evaluations [26], [48], [34], [22], [33], [14].\n\n\nC. RQ1: Compared to the Baseline\n\nThe first two rows in Table I list the BLEU scores of MOSES and the NMT model we trained in Section IV-B, which we refer to as NMT1. The BLEU score of our model is 31.92 while the BLEU score of MOSES is 3.63, so according to the BLEU metric, the messages generated by the NMT model are more similar to the reference messages than the messages generated by the baseline. One key reason that the attentional NMT model outperforms MOSES is that MOSES does not handle well very long source sequences with short target sequences. Particularly, MOSES depends on Giza++ [40] for word alignments between source and target sequences, and is the baseline model. NMT1 is the NMT model with V-DO filter described in Section IV-B. NMT2 is a model trained without V-DO filter described in Section V-D. Len Gen is the total length of the generated messages (c in Equation (11)). Len Ref is the total length of the reference messages (r in Equation (11)). The modified n-gram precision pn, where n = 1, 2, 3, 4, is defined in Equation (8). * This BLEU score is calculated on a test set that is not V-DO filtered described in Section V-D. The other BLEU scores are tested on a V-DO filtered test set described in Section IV-A4. Giza++ becomes very inefficient when a source sequence is 9 times longer than the target sequence or vice versa [4]. Table I shows that the total length of the generated messages (Len Gen in Table I) of MOSES is much longer than the total length of the reference messages, which may cause the modified n-gram precisions (p 1 , p 2 , p 3 , and p 4 ), of MOSES to be small.\n\nTo further examine the messages generated by our model, we split the test set by the lengths of the diffs into four groups and calculated BLEU scores separately for each group. Figure 5 shows the distribution of the lengths of diffs in the test set and Table II shows the BLEU scores for the diffs. This table shows that the diffs that have more than 75 tokens have the highest BLEU score. One possible reason is that there are many more diffs that have more than 75 tokens than the other smaller diffs. Figure 6 shows the distribution of the diff lengths in the training set. This figure shows that the training set is populated by larger diffs, which may cause the model to fit the larger diffs better.\n\nIn Table II, the modified 4-gram precision, p 4 , is 7.6 when diff lengths are between 25 and 50, and becomes 42.3 when diff lengths are larger than 75. This increase of p 4 means that the number of the 4-grams that are shared by the generated and reference messages increase dramatically when the lengths of diffs increase to more than 75 tokens. In contrast, p 4 changes much less (3.1 to 4.5, 4.5 to 7.6) in other cases.\n\n\nD. RQ2: Impact of V-DO Filter\n\nBesides NMT1 (the NMT model trained with V-DO filter in Section IV), we trained another model without V-DO filter, which we refer to as NMT2. In this subsection, we compare NMT1 and NMT2 to see the impact of V-DO filter.\n\n1) Data Set and Training Process for NMT2: Without V-DO filter, the data set has 75k commits. First, we extracted the test set that is used by NMT1 so that we can compare the test results. Then, from the remaining 72k commits, we randomly selected 3k commits to be another test set, which may contain messages that do not follow the V-DO pattern. We refer to the first test set as Test1 (with V-DO filter), and the second test set as Test2 (without V-DO filter).\n\nThen, we randomly selected 3k for validation and used the rest 66k commits for training. We note that the training set of NMT1 has only 26k commits, so NMT2 has 2.5 times more training data than NMT1. The training set includes 45k distinct tokens in commit messages and 110k distinct tokens in diffs. Similar to the vocabulary setting we used in Section IV-A4, we used all the 45k tokens to be the vocabulary of commit messages. We used the most frequent 100k tokens in diffs to be the vocabulary of diffs. All the tokens that are not included in the vocabulary only occur once in the training set. We followed the same process described in Section IV-B. The training process took 41 hours. The testing process for Test1 took 21.5 minutes and Test2 took 20 minutes.\n\n2) Results: The third and fourth rows in Table I show the BLEU scores of NMT2 on Test1 and Test2, which are 32.81 and 23.10 respectively. Comparing the BLEU scores of NMT1 and Test1, the result shows that the messages generated by NMT2 are more similar to the reference messages in Test1. This finding indicates that although the training set without V-DO filter has low-quality messages, there are valuable commits that do not follow the V-DO pattern but help the NMT model improve over Test1 which follow the V-DO pattern.\n\nHowever, the BLEU score of Test2 is about 10 percent lower than the BLEU score of Test1, which means that NMT2 does not perform well over the commits that do not follow the V-DO pattern. For example, a reference message in Test2 is \"7807cb6 ca7a229\", which should be version numbers. For such reference messages in Test2, the NMT model cannot generate the same version numbers and is not meant to generate such numbers. However, similar messages in the training set cause the NMT model to try to generate such numbers for commit messages. For example, a generated message in Test2 is \"Dd38b1cc2 92007d1d7\" while the reference message is \"Run only on jdk7 for the moment\".\n\n\nVI. HUMAN EVALUATION\n\nIn this section, we ask human experts to evaluate the generated messages by the NMT model we described in Section IV. In Section V, we evaluated our model by the automatic metric, BLEU. Our human study complements the evaluation that uses BLEU in two ways. First, although BLEU is a widely used metric that enables us to compare our model with others and to deliver reproducibility, BLEU is not recommended for evaluating individual sentences [41]. Our human study can show how our model perform on individual messages. Second, BLEU calculates the textual similarity between the generated and the reference messages, while the human study can evaluate the semantic similarity.\n\nIn this study, we hired 20 participants for 30 minutes each to evaluate the similarity in a survey study. Two participants are computer science Ph.D. students and 18 participants are professional programmers with 2 to 14 years experience. In the rest of this subsection, we describe our survey design, the process of conducting the survey, and the survey results.\n\n\nA. Survey Design\n\nWe introduce our survey in the first page as: \"This survey will ask you to compare two commit messages by their meaning. You will be able to select a score between 0 to 7, where 0 means there is no similarity and 7 means that two messages are identical.\" We permitted the participants to search the internet for unfamiliar concepts. Then, we gave three scoring examples with recommended scores of 6, 3, and 1. Due to space limit, we present only the first example in Figure 7 (all the other examples are available in our online appendix, Section XI). Then, in the remaining pages of the survey, each page has one pair of the messages, and we asked the participants to score the similarity by meaning. Note that the participants do not know who/what generated the messages. The order of the messages in every page is randomly decided. In the end of the page, there is an optional text box for the participants to enter their justifications. A formal qualitative study about the participants' comments will need to be performed in the future but is beyond the scope of this study. Figure 8 shows one page of the survey.\n\n\nB. Survey Procedure\n\nFirst, the pairs of generated/reference messages are randomly ordered in a list. Then, for each participant, a survey is Explanation: The two messages have only one shared word, \"readme\". But the two messages are very similar in the meaning, because \"Added\" is a type of \"edit\".  8. One of the pages that we ask the participants to score the similarity.\n\nThere is an optional text box for the participants to write their justifications in the end of the page. This text box is omitted due to space limit. generated with the messages in the list from a given starting point. For example, for the first three participants, the surveys are generated with the messages starting from the first pair in the list. In 30 minutes, the first participant was able to score 107 pairs; the second participant was able to score 61 pairs; the third participant was able to score 99 pairs. So the first 61 pairs of messages were evaluated by three participants. For the fourth participant, we generated a survey starting from the 62th pair and the participant stopped at 99th pair in 30 minutes. So after the first four participants, we have 99 pairs scored by three participants. Although it would be ideal if we obtain three scores for every pair, we did not enforce all the pairs being scored by three participants because we want to have more pairs scored with the limited number of participants. In the end, 226 pairs were scored by three participants, 522 pairs were scored by two participants, and 235 pairs were scored by one participant.\n\nC. Results Figure 9 shows the distribution of the median scores of the semantic similarity of the generated/reference messages. To be conservative, we round down the median scores. For example, if a generated message has two scores, 1 and 2, and the median score is 1.5, we round down the median score to 1. In total, 983 generated commit messages have scores made by the participants. Zero and seven are the two most frequent scores. There are 248 messages scored 0 and 234 messages scored 7, which shows that the performance of our model tends to be either good or bad.\n\n\nVII. QUALITY ASSURANCE FILTER\n\nBased on the results from our study with human evaluators (Section VI), we propose a quality assurance filter (QA filter) to automatically detect the diffs for which the NMT model does not generate good commit messages. By building this filter, we investigate whether it is possible to automatically learn the cases where our NMT model does not perform well.\n\nIn this section, we describe the method of our filter, how we evaluate the filter, and the performance of the filter. This section corresponds to Part C in the paper overview Figure 1.\n\n\nA. QA Filter\n\nOur method of QA filter has three steps. First, we prepared the gold set. We used the evaluated messages and the corresponding diffs in the human study as our gold set. For each diff and the corresponding generated message, there is a score we obtained in the human study ( Figure 9) that indicates whether the generated message for the diff is similar to the reference message (i.e., the actual human-written message). To be conservative, we labeled the diffs that have scores of zero or one as \"bad\" and all the other diffs as not \"bad\".\n\nSecond, we extracted the features of the diffs. We used term frequency/inverse document frequency (tf/idf) for every word in a diff as the features. Tf/idf is widely used in machine learning for text processing [17], which is computed based on the frequency of a word in a diff and whether the word is common in the other diffs.\n\nFinally, we used the data set of diffs and their labels to train a linear SVM using stochastic gradient descent (SGD) as the learning algorithm. After we trained the SVM, to  Median Scores with Round Down\n\n\nNumber of Pairs\n\nPredict Labels Bad Not Bad Fig. 11. The predict results of the cross evaluation of QA filter. QA filter reduced 108 messages that are scored 0, 45 messages that are scored 1, 42 messages that are scored 2, 32 messages that are scored 3, 32 messages that are scored 4, 21 messages that are scored 5, 18 messages that are scored 6, and 16 messages that are scored 7. We note that although we trained the QA filter with binary labels, \"bad\" and \"not bad\", the evaluation result shows that QA filter is able to reduce more messages for lower scores.\n\npredict whether the NMT model will generate a \"bad\" commit message for a diff, we extract tf/idfs from the diff and run the trained SVM with the tf/idfs. Figure 10 illustrates our 10-fold cross-validation process. We shuffled the gold set first, and split the gold set into 10 folds. For each fold, we trained a SVM model on the other 9 folds, and tested the SVM model on the one fold. In the end, we obtained the test results for every fold. Figure 11 shows the predicts of all the folds. In terms of detecting diffs for which the NMT model will generate \"bad\" messages, QA filter has 44.9% precision and 43.8% recall. Furthermore, if we label the messages with scores of 6 or 7 as \"good\", in this evaluation, QA filter reduced 44% of the \"bad\" messages at a cost of 11% of the \"good\" messages. Table III shows a representative example of a generated message that was rated highly by the human experts. It includes the generated and reference messages, three scores made by three participants, and the corresponding diff. In this example, the reference message refers to a replacement of a call to a function called deactivate() with a call to a function close(). To a human reader, that is evident from the diff: a call to deactivate() is removed and a call to close() is added. The NMT algorithm also picked up on this change, generating text \"Close instead of mCursor.Deactivate.\"\n\n\nB. Cross-Validation Evaluation\n\n\nVIII. EXAMPLE RESULT\n\n\nIX. THREATS TO VALIDITY\n\nOne threat to validity is that our approach is experimented on only Java projects in Git repositories, so they may not be representative of all the commits. However, Java is a popular programming language [3], [1], [2], which is used in a large number of projects. In the future, we will extend our approach to other programming languages.\n\nAnother threat to validity is the quality of the commit messages. We collected actual human-written commit messages from Github, and used V-DO filter to obtain a set of relatively good-quality commit messages. But the humanwritten messages may not contain all the useful information that should be in a commit message. However, our objective in this paper is to generate commit messages that can be learned from the history of the repositories. Further improvement on human-written messages falls outside the scope of this paper. Another threat to validity is about the human study because of the limited number of the participants. We cannot guarantee that every final score for a generated commit message is fair. We tried to mitigate this threat by hiring as many professional programmers as we can, and having 23% of the evaluated messages scored by three participants and 53% of the evaluated messages scored by two participants.\n\n\nX. DISCUSSION AND CONCLUSION\n\nThe key advancement that this paper makes to the state-ofthe-art is a technique to generate short commit messages that summarize the high-level rationale for a change to software. As we note in Section I-A, we do not claim to be able to provide new insights for completely novel changes to software -that task is likely to remain in human hands for the foreseeable future. Instead, we learn from knowledge stored in a repository of changes that have already been described in commit messages. Several authors in the related literature have observed that many code changes follow similar patterns, and have a similar high-level rationale (e.g., [38], [23]). Traditionally programmers still need to manually write commit messages from scratch, even in cases where a commit has a rationale that has been described before. What this paper does is automate writing commit messages based on knowledge in a repository of past changes.\n\nOur strategy was, in a nutshell, to 1) collect a large repository of commits from large projects, 2) filter the commits to ensure relatively high-quality commit messages, and 3) train a Neural Machine Translation algorithm to \"translate\" from diffs to commit messages using the filtered repository. We then evaluated the generated commit messages in two ways. First we conducted an automated evaluation using accepted metrics and procedures from the relevant NMT literature (Section V). Second, as a verification and for deeper analysis, we also conducted an experiment with human evaluators (Section VI).\n\nWhat we discovered is that the NMT algorithm succeeded in identifying cases where the commit had a similar rationale to others in the repository. The evidence for this is the large bar for item 7 in Figure 9 -it means that the human evaluators rated a large number of the generated messages as very closely matching the reference messages. However, the algorithm also generated substantial noise in the form of low quality messages (note the large bar for item 0). A likely explanation is that these include the cases that involve new insights which the NMT algorithm is unable to provide. While creating these new insights from the data is currently beyond the power of existing neural network-based machine learning (a problem observed across application domains [13]), at a minimum we would like to return a warning message to the programmer to indicate that we are unable to generate a message, rather than return a low quality message. Therefore we created a Quality Assurance filter in Section VII. This filter helped reduce the number of low quality predictions, as evident in the reduced bar for item 0 in Figure 11.\n\nWhile we do view our work as meaningfully advancing the state-of-the-art, we by no means claim this work is definitive or completed. We release our complete data set and implementation via an online appendix, noted at the end of Section IV. Our hope is that other researchers will use this data set and implementation for further research efforts. Generally speaking, future improvements are likely to lie in targeted training for certain types of commits, combined with detection of change types. It is probable that very high quality predictions are possible for some types of software changes, but not others. This work provides a foundation for those and other future developments.\n\n\nXI. REPRODUCIBILITY\n\nOur data sets, scripts, and results are accessible via: https://sjiang1.github.io/commitgen/\n\n\nXII. ACKNOWLEDGMENTS\n\nThis work was partially supported by the NSF CCF-1452959 and CNS-1510329 grants, and the Office of Naval Research grant N000141410037. Any opinions, findings, and conclusions expressed herein are the authors and do not necessarily reflect those of the sponsors.\n\nFig. 1 .\n1The overview of our paper.\n\n\n[7] and by Jiang and McMillan[23].The results of the two studies indicate three things. First, commit messages are pervasive and desired. Buse et al. examined 1k commits from five mature software projects and found that 99.1% of the commits have non-empty messages. Jiang and McMillan collected over 2M commit messages from 1k projects. Second, human-written commit messages are short. In Buse et al.'s study, the average size of the 991 non-empty commit messages is 1.1 lines. Similarly, the study of Jiang and McMillan shows that 82% of the commit messages have only one sentence.\n\nFig. 4 .Figure 1\n41The detailed process in Part A,Figure 1. There are three main steps: 1) filtering and preprocessing the data; 2) training a Neural Machine Translation model; 3) evaluating the model, which is Part B,\n\n\nCnt clip (ngram) = min(Cnt gen (ngram), Cnt ref (ngram))\n\nFig. 5 .\n5The distribution of the lengths of diffs in the test set The number of tokens in the diffs in the training set The number of diffs Fig. 6. The distribution of the lengths of diffs in the training set\n\nFig. 9 .\n9The distribution of the median scores obtained in the human study. There are 983 scores in the figure. Each score is the median score of the scores made by one to three human experts for a generated message. The scores range from 0 to 7, where 0 denotes the generated message is not similar to the reference message at all, and 7 denotes the generated message is identical to the reference message. The most frequent scores are 0 and 7. There are 248 messages scored 0 and 234 messages scored 7. For the rest of the scores, the number of messages ranges from 68 to 100.\n\nFig. 10 .\n10Outline of our cross-validation process.\n\nTABLE I BLEU\nISCORES (%) OF MOSES AND OUR MODELS ON THE TEST SETModel \nBLEU \nLen Gen \nLen Ref \np 1 \np 2 \np 3 \np 4 \nMOSES 3.63 \n129889 22872 \n8.3 \n3.6 \n2.7 \n2.1 \nNMT1 \n31.92 \n24344 \n22872 \n38.1 31.1 29.5 29.7 \n\nNMT2 \n32.81 \n21287 \n22872 \n40.1 34.0 33.4 34.3 \n23.10 * \n20303 \n18658 \n30.2 23.3 20.7 19.6 \nMOSES \n\nTABLE II BLEU\nIISCORES (%) ON D I F F S OF DIFFERENT LENGTHS SeeTable Ifor explanation of each column name. The BLEU scores are calculated based on the test results generated by Model1, the NMT model with V-DO filter trained in Section IV-B.Diff Length \nBLEU Len Gen \nLen Ref \np 1 \np 2 \np 3 \np 4 \n\u2264 25 \n6.46 \n870 \n655 \n18.6 6.9 \n4.3 \n3.1 \n> 25, \u2264 50 9.31 \n3627 \n3371 \n23.1 10.8 6.6 \n4.5 \n> 50, \u2264 75 12.67 \n4779 \n4418 \n24.8 14.1 9.8 \n7.6 \n> 75 \n43.33 \n15068 \n14428 \n47.1 42.3 41.7 42.3 \n\n\nTABLE III EXAMPLE\nIIIRESULT Diff: ---a/core/.../CursorToBulkCursorAdaptor.java +++ b/core/.../CursorToBulkCursorAdaptor.java @@ -143,8 +143,7 @@ public final class CursorToBulkCursorAdaptor ...public void close() { \nmaybeUnregisterObserverProxy(); \n-mCursor.deactivate(); \n-\n+ mCursor.close(); \n} \npublic int requery(IContentObserver observer, ... \n\nGenerated Message: \n\"CursorToBulkCursorAdapter . Close must call \nmCursor . Close instead of mCursor . Deactivate . \" \n\nReference Message: \n\"Call close ( ) instead of deactivate ( ) in \nCursorToBulkCursorAdaptor . close ( ) \" \n\nScores: 7, 6, 7 \n\n\n\nPYPL popularity of programming language. PYPL popularity of programming language. http://pypl.github.io/PYPL. html. Accessed: 2017-05-11.\n\nStackoverflow developer survey results. Stackoverflow developer survey results 2016. https://insights. stackoverflow.com/survey/2016#technology. Accessed: 2017-05-11.\n\nTIOBE index for. TIOBE index for may 2017. https://www.tiobe.com/tiobe-index/. Ac- cessed: 2017-05-11.\n\nReplicating parser behavior using neural machine translation. C V Alexandru, S Panichella, H C Gall, 2017 IEEE 25th International Conference on Program Comprehension (ICPC). C. V. Alexandru, S. Panichella, and H. C. Gall. Replicating parser behav- ior using neural machine translation. In 2017 IEEE 25th International Conference on Program Comprehension (ICPC), 2017.\n\nNeural machine translation by jointly learning to align and translate. D Bahdanau, K Cho, Y Bengio, abs/1409.0473CoRRD. Bahdanau, K. Cho, and Y. Bengio. Neural machine translation by jointly learning to align and translate. CoRR, abs/1409.0473, 2014.\n\nAutomatically documenting program changes. R P Buse, W R Weimer, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, ASE '10. the IEEE/ACM International Conference on Automated Software Engineering, ASE '10New York, NY, USAACMR. P. Buse and W. R. Weimer. Automatically documenting program changes. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, ASE '10, pages 33-42, New York, NY, USA, 2010. ACM.\n\nFindings of the 2011 workshop on statistical machine translation. C Callison-Burch, P Koehn, C Monz, O F Zaidan, Proceedings of the Sixth Workshop on Statistical Machine Translation, WMT '11. the Sixth Workshop on Statistical Machine Translation, WMT '11Stroudsburg, PA, USAAssociation for Computational LinguisticsC. Callison-Burch, P. Koehn, C. Monz, and O. F. Zaidan. Findings of the 2011 workshop on statistical machine translation. In Proceedings of the Sixth Workshop on Statistical Machine Translation, WMT '11, pages 22-64, Stroudsburg, PA, USA, 2011. Association for Computational Linguistics.\n\nAchieving accuracy and scalability simultaneously in detecting application clones on android markets. K Chen, P Liu, Y Zhang, Proceedings of the 36th International Conference on Software Engineering, ICSE 2014. the 36th International Conference on Software Engineering, ICSE 2014New York, NY, USAACMK. Chen, P. Liu, and Y. Zhang. Achieving accuracy and scalability simultaneously in detecting application clones on android markets. In Proceedings of the 36th International Conference on Software Engineer- ing, ICSE 2014, pages 175-186, New York, NY, USA, 2014. ACM.\n\nLearning phrase representations using rnn encoder-decoder for statistical machine translation. K Cho, B Van Merrienboer, C Gulcehre, D Bahdanau, F Bougares, H Schwenk, Y Bengio, Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP). the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP)Doha, QatarAssociation for Computational LinguisticsK. Cho, B. van Merrienboer, C. Gulcehre, D. Bahdanau, F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase representations using rnn encoder-decoder for statistical machine translation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1724-1734, Doha, Qatar, October 2014. Association for Computational Linguistics.\n\nBoa: A language and infrastructure for analyzing ultra-large-scale software repositories. R Dyer, H A Nguyen, H Rajan, T N Nguyen, 35th International Conference on Software Engineering (ICSE). R. Dyer, H. A. Nguyen, H. Rajan, and T. N. Nguyen. Boa: A language and infrastructure for analyzing ultra-large-scale software repositories. In 2013 35th International Conference on Software Engineering (ICSE), pages 422-431, May 2013.\n\nDo code and comments coevolve? on the relation between source code and comment changes. B Fluri, M Wursch, H C Gall, Proceedings of the 14th Working Conference on Reverse Engineering, WCRE '07. the 14th Working Conference on Reverse Engineering, WCRE '07Washington, DC, USAIEEE Computer SocietyB. Fluri, M. Wursch, and H. C. Gall. Do code and comments co- evolve? on the relation between source code and comment changes. In Proceedings of the 14th Working Conference on Reverse Engineering, WCRE '07, pages 70-79, Washington, DC, USA, 2007. IEEE Computer Society.\n\nDeep learning. I Goodfellow, Y Bengio, A Courville, MIT PressI. Goodfellow, Y. Bengio, and A. Courville. Deep learning. MIT Press, 2016.\n\nDeep api learning. X Gu, H Zhang, D Zhang, S Kim, Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016. the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016New York, NY, USAACMX. Gu, H. Zhang, D. Zhang, and S. Kim. Deep api learning. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pages 631-642, New York, NY, USA, 2016. ACM.\n\nSemantically enhanced software traceability using deep learning techniques. J Guo, J Cheng, J Cleland-Huang, Proceedings of the 2017 International Conference on Software Engineering, ICSE '17. the 2017 International Conference on Software Engineering, ICSE '17J. Guo, J. Cheng, and J. Cleland-Huang. Semantically enhanced software traceability using deep learning techniques. In Proceedings of the 2017 International Conference on Software Engineering, ICSE '17, 2017.\n\nOn the use of automated text summarization techniques for summarizing source code. S Haiduc, J Aponte, L Moreno, A Marcus, Proceedings of the 2010 17th Working Conference on Reverse Engineering, WCRE '10. the 2010 17th Working Conference on Reverse Engineering, WCRE '10Washington, DC, USAIEEE Computer SocietyS. Haiduc, J. Aponte, L. Moreno, and A. Marcus. On the use of automated text summarization techniques for summarizing source code. In Proceedings of the 2010 17th Working Conference on Reverse Engineering, WCRE '10, pages 35-44, Washington, DC, USA, 2010. IEEE Computer Society.\n\nOn the use of automated text summarization techniques for summarizing source code. S Haiduc, J Aponte, L Moreno, A Marcus, 17th Working Conference on Reverse Engineering. S. Haiduc, J. Aponte, L. Moreno, and A. Marcus. On the use of automated text summarization techniques for summarizing source code. In 2010 17th Working Conference on Reverse Engineering, pages 35-44, Oct 2010.\n\nKenlm: Faster and smaller language model queries. K Heafield, Proceedings of the Sixth Workshop on Statistical Machine Translation, WMT '11. the Sixth Workshop on Statistical Machine Translation, WMT '11Stroudsburg, PA, USAAssociation for Computational LinguisticsK. Heafield. Kenlm: Faster and smaller language model queries. In Proceedings of the Sixth Workshop on Statistical Machine Translation, WMT '11, pages 187-197, Stroudsburg, PA, USA, 2011. Association for Computational Linguistics.\n\nScalable modified Kneser-Ney language model estimation. K Heafield, I Pouzyrevsky, J H Clark, P Koehn, Proceedings of the 51st. the 51stK. Heafield, I. Pouzyrevsky, J. H. Clark, and P. Koehn. Scalable modified Kneser-Ney language model estimation. In Proceedings of the 51st\n\nAnnual Meeting of the Association for Computational Linguistics. Sofia, Bulgaria8Annual Meeting of the Association for Computational Linguistics, Sofia, Bulgaria, 8 2013.\n\nOn the naturalness of software. A Hindle, E T Barr, Z Su, M Gabel, P Devanbu, Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012. the 2012 International Conference on Software Engineering, ICSE 2012Piscataway, NJ, USAIEEE PressA. Hindle, E. T. Barr, Z. Su, M. Gabel, and P. Devanbu. On the natural- ness of software. In Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012, pages 837-847, Piscataway, NJ, USA, 2012. IEEE Press.\n\nLong short-term memory. S Hochreiter, J Schmidhuber, Neural Computation. 9S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural Computation, 9:1735-1780, 1997.\n\nSummarizing source code using a neural attention model. S Iyer, I Konstas, A Cheung, L Zettlemoyer, Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics. the 54th Annual Meeting of the Association for Computational LinguisticsBerlin, GermanyAssociation for Computational Linguistics1S. Iyer, I. Konstas, A. Cheung, and L. Zettlemoyer. Summarizing source code using a neural attention model. In Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 2073-2083, Berlin, Germany, August 2016. Association for Computational Linguistics.\n\nTowards automatic generation of short summaries of commits. S Jiang, C Mcmillan, 2017 IEEE 25th International Conference on Program Comprehension (ICPC. S. Jiang and C. McMillan. Towards automatic generation of short summaries of commits. In 2017 IEEE 25th International Conference on Program Comprehension (ICPC), 2017.\n\nA survey of documentation practice within corrective maintenance. M Kajko-Mattsson, Empirical Softw. Engg. 101M. Kajko-Mattsson. A survey of documentation practice within correc- tive maintenance. Empirical Softw. Engg., 10(1):31-55, Jan. 2005.\n\nCcfinder: a multilinguistic token-based code clone detection system for large scale source code. T Kamiya, S Kusumoto, K Inoue, IEEE Transactions on Software Engineering. 287T. Kamiya, S. Kusumoto, and K. Inoue. Ccfinder: a multilinguistic token-based code clone detection system for large scale source code. IEEE Transactions on Software Engineering, 28(7):654-670, Jul 2002.\n\nOpenNMT: Open-Source Toolkit for Neural Machine Translation. G Klein, Y Kim, Y Deng, J Senellart, A M Rush, ArXiv e-printsG. Klein, Y. Kim, Y. Deng, J. Senellart, and A. M. Rush. OpenNMT: Open-Source Toolkit for Neural Machine Translation. ArXiv e-prints.\n\nFactored translation models. P Koehn, H Hoang, Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL). the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL)Prague, Czech RepublicAssociation for Computational LinguisticsP. Koehn and H. Hoang. Factored translation models. In Proceed- ings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning (EMNLP-CoNLL), pages 868-876, Prague, Czech Republic, June 2007. Association for Computational Linguistics.\n\nOpen source toolkit for statistical machine translation. P Koehn, H Hoang, A Birch, C Callison-Burch, M Federico, N Bertoldi, B Cowan, W Shen, C Moran, R Zens, Proceedings of the 45th annual meeting of the ACL on interactive poster and demonstration sessions. the 45th annual meeting of the ACL on interactive poster and demonstration sessionsAssociation for Computational LinguisticsP. Koehn, H. Hoang, A. Birch, C. Callison-Burch, M. Federico, N. Bertoldi, B. Cowan, W. Shen, C. Moran, R. Zens, et al. Moses: Open source toolkit for statistical machine translation. In Proceedings of the 45th annual meeting of the ACL on interactive poster and demonstration sessions, pages 177-180. Association for Computational Linguistics, 2007.\n\nIdentifying similar code with program dependence graphs. J Krinke, Proceedings Eighth Working Conference on Reverse Engineering. Eighth Working Conference on Reverse EngineeringJ. Krinke. Identifying similar code with program dependence graphs. In Proceedings Eighth Working Conference on Reverse Engineering, pages 301-309, 2001.\n\nCombining deep learning with information retrieval to localize buggy files for bug reports (n). A N Lam, A T Nguyen, H A Nguyen, T N Nguyen, 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). A. N. Lam, A. T. Nguyen, H. A. Nguyen, and T. N. Nguyen. Combining deep learning with information retrieval to localize buggy files for bug reports (n). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), pages 476-481, Nov 2015.\n\nRclinker: Automated linking of issue reports and commits leveraging rich contextual information. T D B Le, M Linares-Vasquez, D Lo, D Poshyvanyk, 2015 IEEE 23rd ICPC. T. D. B. Le, M. Linares-Vasquez, D. Lo, and D. Poshyvanyk. Rclinker: Automated linking of issue reports and commits leveraging rich contex- tual information. In 2015 IEEE 23rd ICPC, pages 36-47.\n\nChangescribe: A tool for automatically generating commit messages. M Linares-V\u00e1squez, L F Cort\u00e9s-Coy, J Aponte, D Poshyvanyk, IEEE/ACM 37th IEEE ICSE. 2M. Linares-V\u00e1squez, L. F. Cort\u00e9s-Coy, J. Aponte, and D. Poshyvanyk. Changescribe: A tool for automatically generating commit messages. In 2015 IEEE/ACM 37th IEEE ICSE, volume 2, pages 709-712.\n\nLatent predictor networks for code generation. W Ling, P Blunsom, E Grefenstette, K M Hermann, T Ko\u010disk\u00fd, F Wang, A Senior, Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics. the 54th Annual Meeting of the Association for Computational LinguisticsBerlin, GermanyAssociation for Computational Linguistics1W. Ling, P. Blunsom, E. Grefenstette, K. M. Hermann, T. Ko\u010disk\u00fd, F. Wang, and A. Senior. Latent predictor networks for code generation. In Proceedings of the 54th Annual Meeting of the Association for Com- putational Linguistics (Volume 1: Long Papers), pages 599-609, Berlin, Germany, August 2016. Association for Computational Linguistics.\n\nAchieving open vocabulary neural machine translation with hybrid word-character models. M Luong, C D Manning, abs/1604.00788CoRRM. Luong and C. D. Manning. Achieving open vocabulary neu- ral machine translation with hybrid word-character models. CoRR, abs/1604.00788, 2016.\n\nEffective approaches to attention-based neural machine translation. M Luong, H Pham, C D Manning, abs/1508.04025CoRRM. Luong, H. Pham, and C. D. Manning. Effective approaches to attention-based neural machine translation. CoRR, abs/1508.04025, 2015.\n\nCan development work describe itself?. W Maalej, H J Happel, 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010). W. Maalej and H. J. Happel. Can development work describe itself? In 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), pages 191-200, May 2010.\n\nThe Stanford CoreNLP natural language processing toolkit. C D Manning, M Surdeanu, J Bauer, J Finkel, S J Bethard, D Mcclosky, Association for Computational Linguistics (ACL) System Demonstrations. C. D. Manning, M. Surdeanu, J. Bauer, J. Finkel, S. J. Bethard, and D. McClosky. The Stanford CoreNLP natural language processing toolkit. In Association for Computational Linguistics (ACL) System Demonstrations, pages 55-60, 2014.\n\nIdentifying reasons for software changes using historic databases. A Mockus, L G Votta, Proceedings 2000 International Conference on Software Maintenance. 2000 International Conference on Software MaintenanceA. Mockus and L. G. Votta. Identifying reasons for software changes using historic databases. In Proceedings 2000 International Conference on Software Maintenance, pages 120-130, 2000.\n\nARENA: An approach for the automated generation of release notes. L Moreno, G Bavota, M D Penta, R Oliveto, A Marcus, G Canfora, IEEE Transactions on Software Engineering. 432L. Moreno, G. Bavota, M. D. Penta, R. Oliveto, A. Marcus, and G. Canfora. ARENA: An approach for the automated generation of release notes. IEEE Transactions on Software Engineering, 43(2):106- 127, Feb 2017.\n\nA systematic comparison of various statistical alignment models. F J Och, H Ney, Computational Linguistics. 291F. J. Och and H. Ney. A systematic comparison of various statistical alignment models. Computational Linguistics, 29(1):19-51, 2003.\n\nBleu: A method for automatic evaluation of machine translation. K Papineni, S Roukos, T Ward, W.-J Zhu, Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, ACL '02. the 40th Annual Meeting on Association for Computational Linguistics, ACL '02Stroudsburg, PA, USAAssociation for Computational LinguisticsK. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu: A method for automatic evaluation of machine translation. In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, ACL '02, pages 311-318, Stroudsburg, PA, USA, 2002. Association for Computational Linguistics.\n\nA syntactic neural model for general-purpose code generation. G N Pengcheng Yin, Annual Meeting of the Association for Computational Linguistics. Association for Computational LinguisticsG. N. Pengcheng Yin. A syntactic neural model for general-purpose code generation. In Annual Meeting of the Association for Computational Linguistics. Association for Computational Linguistics, 2017.\n\nWhy did this code change?. S Rastkar, G C Murphy, Proceedings of the 2013 ICSE, ICSE '13. the 2013 ICSE, ICSE '13S. Rastkar and G. C. Murphy. Why did this code change? In Proceedings of the 2013 ICSE, ICSE '13, pages 1193-1196, 2013.\n\nHow do professional developers comprehend software?. T Roehm, R Tiarks, R Koschke, W Maalej, Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012. the 2012 International Conference on Software Engineering, ICSE 2012Piscataway, NJ, USAIEEE PressT. Roehm, R. Tiarks, R. Koschke, and W. Maalej. How do professional developers comprehend software? In Proceedings of the 2012 Interna- tional Conference on Software Engineering, ICSE 2012, pages 255-265, Piscataway, NJ, USA, 2012. IEEE Press.\n\nThe cross-entropy method: a unified approach to combinatorial optimization, Monte-Carlo simulation and machine learning. R Y Rubinstein, D P Kroese, Springer Science & Business MediaR. Y. Rubinstein and D. P. Kroese. The cross-entropy method: a unified approach to combinatorial optimization, Monte-Carlo simulation and machine learning. Springer Science & Business Media, 2013.\n\nNematus: a toolkit for neural machine translation. R Sennrich, O Firat, K Cho, A Birch, B Haddow, J Hitschler, M Junczys-Dowmunt, S , A V Miceli Barone, J Mokry, M Nadejde, Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics. the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational LinguisticsValencia, SpainAssociation for Computational LinguisticsR. Sennrich, O. Firat, K. Cho, A. Birch, B. Haddow, J. Hitschler, M. Junczys-Dowmunt, S. L\"aubli, A. V. Miceli Barone, J. Mokry, and M. Nadejde. Nematus: a toolkit for neural machine translation. In Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics, pages 65-68, Valencia, Spain, April 2017. Association for Computa- tional Linguistics.\n\nNematus: a Toolkit for Neural Machine Translation. R Sennrich, O Firat, K Cho, A Birch, B Haddow, J Hitschler, M Junczys-Dowmunt, S L\u00e4ubli, A V Miceli Barone, J Mokry, M Nadejde, Proceedings of the Demonstrations at the 15th Conference of the European Chapter of the Association for Computational Linguistics. the Demonstrations at the 15th Conference of the European Chapter of the Association for Computational LinguisticsR. Sennrich, O. Firat, K. Cho, A. Birch, B. Haddow, J. Hitschler, M. Junczys-Dowmunt, S. L\u00e4ubli, A. V. Miceli Barone, J. Mokry, and M. Nadejde. Nematus: a Toolkit for Neural Machine Translation. In Proceedings of the Demonstrations at the 15th Conference of the European Chapter of the Association for Computational Linguistics, 2017.\n\nLinguistic input features improve neural machine translation. R Sennrich, B Haddow, abs/1606.02892CoRRR. Sennrich and B. Haddow. Linguistic input features improve neural machine translation. CoRR, abs/1606.02892, 2016.\n\nEdinburgh neural machine translation systems for WMT 16. R Sennrich, B Haddow, A Birch, abs/1606.02891CoRRR. Sennrich, B. Haddow, and A. Birch. Edinburgh neural machine translation systems for WMT 16. CoRR, abs/1606.02891, 2016.\n\nTowards automatically generating summary comments for java methods. G Sridhara, E Hill, D Muppaneni, L Pollock, K Vijay-Shanker, Proceedings of the IEEE/ACM international conference on Automated software engineering, ASE '10. the IEEE/ACM international conference on Automated software engineering, ASE '10New York, NY, USAACMG. Sridhara, E. Hill, D. Muppaneni, L. Pollock, and K. Vijay-Shanker. Towards automatically generating summary comments for java methods. In Proceedings of the IEEE/ACM international conference on Automated software engineering, ASE '10, pages 43-52, New York, NY, USA, 2010. ACM.\n\nSequence to sequence learning with neural networks. I Sutskever, O Vinyals, Q V Le, Z. Ghahramani, M. Welling, C. Cortes, N. DI. Sutskever, O. Vinyals, and Q. V. Le. Sequence to sequence learning with neural networks. In Z. Ghahramani, M. Welling, C. Cortes, N. D.\n\nK Q Lawrence, Weinberger, Advances in Neural Information Processing Systems. Curran Associates, Inc27Lawrence, and K. Q. Weinberger, editors, Advances in Neural Informa- tion Processing Systems 27, pages 3104-3112. Curran Associates, Inc., 2014.\n\nabs/1605.02688Theano Development Team. Theano: A Python framework for fast computation of mathematical expressions. arXiv e-prints. Theano Development Team. Theano: A Python framework for fast com- putation of mathematical expressions. arXiv e-prints, abs/1605.02688, May 2016.\n\nDeep learning code fragments for code clone detection. M White, M Tufano, C Vendome, D Poshyvanyk, Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016. the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016New York, NY, USAACMM. White, M. Tufano, C. Vendome, and D. Poshyvanyk. Deep learning code fragments for code clone detection. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineer- ing, ASE 2016, pages 87-98, New York, NY, USA, 2016. ACM.\n\nToward deep learning software repositories. M White, C Vendome, M Linares-Vasquez, D Poshyvanyk, 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories. M. White, C. Vendome, M. Linares-Vasquez, and D. Poshyvanyk. Toward deep learning software repositories. In 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories, pages 334-345, May 2015.\n\nAdadelta: an adaptive learning rate method. M D Zeiler, arXiv:1212.5701arXiv preprintM. D. Zeiler. Adadelta: an adaptive learning rate method. arXiv preprint arXiv:1212.5701, 2012.\n", "annotations": {"author": "[{\"end\":206,\"start\":88},{\"end\":325,\"start\":207},{\"end\":432,\"start\":326}]", "publisher": null, "author_last_name": "[{\"end\":100,\"start\":95},{\"end\":219,\"start\":213},{\"end\":341,\"start\":333}]", "author_first_name": "[{\"end\":94,\"start\":88},{\"end\":212,\"start\":207},{\"end\":332,\"start\":326}]", "author_affiliation": "[{\"end\":205,\"start\":117},{\"end\":324,\"start\":236},{\"end\":431,\"start\":343}]", "title": "[{\"end\":85,\"start\":1},{\"end\":517,\"start\":433}]", "venue": null, "abstract": "[{\"end\":1691,\"start\":519}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2578,\"start\":2575},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2645,\"start\":2641},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":2651,\"start\":2647},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":2768,\"start\":2764},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2774,\"start\":2770},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":2780,\"start\":2776},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3004,\"start\":3001},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":3148,\"start\":3144},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3609,\"start\":3606},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3771,\"start\":3767},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":4013,\"start\":4009},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4216,\"start\":4212},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":4742,\"start\":4738},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":4748,\"start\":4744},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5036,\"start\":5032},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":5042,\"start\":5038},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":6530,\"start\":6526},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":6536,\"start\":6532},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":6542,\"start\":6538},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":6548,\"start\":6544},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":6554,\"start\":6550},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6571,\"start\":6568},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":10171,\"start\":10168},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":10346,\"start\":10342},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":10546,\"start\":10542},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":10637,\"start\":10633},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":10809,\"start\":10805},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":11737,\"start\":11733},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":11954,\"start\":11950},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":12535,\"start\":12531},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":13392,\"start\":13388},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":13416,\"start\":13412},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":13421,\"start\":13418},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":13495,\"start\":13491},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":13621,\"start\":13617},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":13649,\"start\":13645},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":13676,\"start\":13672},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":13738,\"start\":13734},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":13900,\"start\":13896},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":14015,\"start\":14011},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":14021,\"start\":14017},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":14154,\"start\":14151},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15680,\"start\":15677},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":15686,\"start\":15682},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":15750,\"start\":15746},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":15836,\"start\":15832},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":15842,\"start\":15838},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":15965,\"start\":15961},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15970,\"start\":15967},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":16913,\"start\":16909},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":16953,\"start\":16949},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":17072,\"start\":17069},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":17107,\"start\":17103},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":18544,\"start\":18541},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":20543,\"start\":20539},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":21073,\"start\":21069},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":21444,\"start\":21440},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":22116,\"start\":22113},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":22122,\"start\":22118},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":22278,\"start\":22275},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":22284,\"start\":22280},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":23509,\"start\":23505},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":23603,\"start\":23599},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":24964,\"start\":24960},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":25128,\"start\":25124},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":25324,\"start\":25320},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":25357,\"start\":25353},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":25474,\"start\":25470},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":25613,\"start\":25609},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":25667,\"start\":25663},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":25747,\"start\":25743},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":26003,\"start\":25999},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":26182,\"start\":26178},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":27391,\"start\":27387},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":27397,\"start\":27393},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":27403,\"start\":27399},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":28612,\"start\":28608},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":28777,\"start\":28774},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":28783,\"start\":28779},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":28867,\"start\":28863},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":28974,\"start\":28970},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":28980,\"start\":28976},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":29042,\"start\":29038},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":29133,\"start\":29129},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":29352,\"start\":29348},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":29465,\"start\":29461},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":29471,\"start\":29467},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":29477,\"start\":29473},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":29572,\"start\":29568},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":30514,\"start\":30510},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":30520,\"start\":30516},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":30526,\"start\":30522},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":30532,\"start\":30528},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":30538,\"start\":30534},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":30544,\"start\":30540},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":31149,\"start\":31145},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":31604,\"start\":31601},{\"end\":31908,\"start\":31905},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":36451,\"start\":36447},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":41661,\"start\":41657},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":44223,\"start\":44220},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":44228,\"start\":44225},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":44233,\"start\":44230},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":45971,\"start\":45967},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":45977,\"start\":45973},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":47628,\"start\":47624},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":49116,\"start\":49113},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":49146,\"start\":49142}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":49110,\"start\":49073},{\"attributes\":{\"id\":\"fig_1\"},\"end\":49695,\"start\":49111},{\"attributes\":{\"id\":\"fig_2\"},\"end\":49915,\"start\":49696},{\"attributes\":{\"id\":\"fig_3\"},\"end\":49974,\"start\":49916},{\"attributes\":{\"id\":\"fig_4\"},\"end\":50185,\"start\":49975},{\"attributes\":{\"id\":\"fig_6\"},\"end\":50766,\"start\":50186},{\"attributes\":{\"id\":\"fig_7\"},\"end\":50820,\"start\":50767},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":51130,\"start\":50821},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":51618,\"start\":51131},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":52216,\"start\":51619}]", "paragraph": "[{\"end\":2283,\"start\":1710},{\"end\":2864,\"start\":2285},{\"end\":3390,\"start\":2866},{\"end\":4311,\"start\":3392},{\"end\":5246,\"start\":4313},{\"end\":5785,\"start\":5248},{\"end\":6165,\"start\":5787},{\"end\":6863,\"start\":6184},{\"end\":7625,\"start\":6865},{\"end\":8681,\"start\":7627},{\"end\":9501,\"start\":8703},{\"end\":9734,\"start\":9522},{\"end\":10347,\"start\":9778},{\"end\":10810,\"start\":10349},{\"end\":11336,\"start\":10812},{\"end\":12353,\"start\":11369},{\"end\":12985,\"start\":12355},{\"end\":13677,\"start\":13030},{\"end\":14087,\"start\":13679},{\"end\":14469,\"start\":14089},{\"end\":14924,\"start\":14489},{\"end\":15411,\"start\":14947},{\"end\":15971,\"start\":15444},{\"end\":16275,\"start\":15973},{\"end\":16374,\"start\":16320},{\"end\":16789,\"start\":16443},{\"end\":17295,\"start\":16816},{\"end\":17631,\"start\":17297},{\"end\":17966,\"start\":17726},{\"end\":18022,\"start\":17968},{\"end\":18133,\"start\":18024},{\"end\":18348,\"start\":18174},{\"end\":18805,\"start\":18399},{\"end\":19185,\"start\":18807},{\"end\":19318,\"start\":19210},{\"end\":19400,\"start\":19343},{\"end\":19593,\"start\":19492},{\"end\":19829,\"start\":19688},{\"end\":20228,\"start\":19855},{\"end\":20444,\"start\":20245},{\"end\":20743,\"start\":20480},{\"end\":21347,\"start\":20745},{\"end\":21672,\"start\":21349},{\"end\":21952,\"start\":21674},{\"end\":22408,\"start\":21954},{\"end\":22651,\"start\":22410},{\"end\":23058,\"start\":22653},{\"end\":23280,\"start\":23060},{\"end\":24005,\"start\":23282},{\"end\":24965,\"start\":24007},{\"end\":25096,\"start\":24997},{\"end\":25475,\"start\":25098},{\"end\":25896,\"start\":25477},{\"end\":26370,\"start\":25898},{\"end\":26605,\"start\":26372},{\"end\":27404,\"start\":26607},{\"end\":28571,\"start\":27448},{\"end\":29312,\"start\":28594},{\"end\":29695,\"start\":29343},{\"end\":30062,\"start\":29697},{\"end\":30545,\"start\":30143},{\"end\":32164,\"start\":30582},{\"end\":32870,\"start\":32166},{\"end\":33295,\"start\":32872},{\"end\":33549,\"start\":33329},{\"end\":34013,\"start\":33551},{\"end\":34780,\"start\":34015},{\"end\":35306,\"start\":34782},{\"end\":35979,\"start\":35308},{\"end\":36680,\"start\":36004},{\"end\":37045,\"start\":36682},{\"end\":38183,\"start\":37066},{\"end\":38560,\"start\":38207},{\"end\":39737,\"start\":38562},{\"end\":40310,\"start\":39739},{\"end\":40702,\"start\":40344},{\"end\":40888,\"start\":40704},{\"end\":41444,\"start\":40905},{\"end\":41774,\"start\":41446},{\"end\":41980,\"start\":41776},{\"end\":42545,\"start\":42000},{\"end\":43931,\"start\":42547},{\"end\":44354,\"start\":44015},{\"end\":45290,\"start\":44356},{\"end\":46250,\"start\":45323},{\"end\":46857,\"start\":46252},{\"end\":47983,\"start\":46859},{\"end\":48670,\"start\":47985},{\"end\":48786,\"start\":48694},{\"end\":49072,\"start\":48811}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":16319,\"start\":16276},{\"attributes\":{\"id\":\"formula_1\"},\"end\":16442,\"start\":16375},{\"attributes\":{\"id\":\"formula_2\"},\"end\":16815,\"start\":16790},{\"attributes\":{\"id\":\"formula_3\"},\"end\":17725,\"start\":17632},{\"attributes\":{\"id\":\"formula_4\"},\"end\":18173,\"start\":18134},{\"attributes\":{\"id\":\"formula_5\"},\"end\":19209,\"start\":19186},{\"attributes\":{\"id\":\"formula_6\"},\"end\":19342,\"start\":19319},{\"attributes\":{\"id\":\"formula_7\"},\"end\":19491,\"start\":19401},{\"attributes\":{\"id\":\"formula_8\"},\"end\":19687,\"start\":19594},{\"attributes\":{\"id\":\"formula_9\"},\"end\":19854,\"start\":19830},{\"attributes\":{\"id\":\"formula_11\"},\"end\":30104,\"start\":30063},{\"attributes\":{\"id\":\"formula_12\"},\"end\":30142,\"start\":30104}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":30611,\"start\":30604},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31917,\"start\":31910},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31991,\"start\":31984},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":32427,\"start\":32419},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":32883,\"start\":32875},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":34830,\"start\":34823},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":43352,\"start\":43343}]", "section_header": "[{\"end\":1708,\"start\":1693},{\"end\":6182,\"start\":6168},{\"end\":8701,\"start\":8684},{\"end\":9520,\"start\":9504},{\"end\":9776,\"start\":9737},{\"end\":11367,\"start\":11339},{\"end\":13028,\"start\":12988},{\"end\":14487,\"start\":14472},{\"end\":14945,\"start\":14927},{\"end\":15442,\"start\":15414},{\"end\":18397,\"start\":18351},{\"end\":20243,\"start\":20231},{\"end\":20478,\"start\":20447},{\"end\":24995,\"start\":24968},{\"end\":27446,\"start\":27407},{\"end\":28592,\"start\":28574},{\"end\":29341,\"start\":29315},{\"end\":30580,\"start\":30548},{\"end\":33327,\"start\":33298},{\"end\":36002,\"start\":35982},{\"end\":37064,\"start\":37048},{\"end\":38205,\"start\":38186},{\"end\":40342,\"start\":40313},{\"end\":40903,\"start\":40891},{\"end\":41998,\"start\":41983},{\"end\":43964,\"start\":43934},{\"end\":43987,\"start\":43967},{\"end\":44013,\"start\":43990},{\"end\":45321,\"start\":45293},{\"end\":48692,\"start\":48673},{\"end\":48809,\"start\":48789},{\"end\":49082,\"start\":49074},{\"end\":49713,\"start\":49697},{\"end\":49984,\"start\":49976},{\"end\":50195,\"start\":50187},{\"end\":50777,\"start\":50768},{\"end\":50834,\"start\":50822},{\"end\":51145,\"start\":51132},{\"end\":51637,\"start\":51620}]", "table": "[{\"end\":51130,\"start\":50886},{\"end\":51618,\"start\":51373},{\"end\":52216,\"start\":51813}]", "figure_caption": "[{\"end\":49110,\"start\":49084},{\"end\":49695,\"start\":49113},{\"end\":49915,\"start\":49716},{\"end\":49974,\"start\":49918},{\"end\":50185,\"start\":49986},{\"end\":50766,\"start\":50197},{\"end\":50820,\"start\":50780},{\"end\":50886,\"start\":50836},{\"end\":51373,\"start\":51148},{\"end\":51813,\"start\":51641}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":8056,\"start\":8048},{\"end\":16647,\"start\":16639},{\"end\":17317,\"start\":17309},{\"end\":19053,\"start\":19044},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20414,\"start\":20406},{\"end\":20443,\"start\":20435},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27739,\"start\":27731},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":32351,\"start\":32343},{\"end\":32678,\"start\":32670},{\"end\":37541,\"start\":37533},{\"end\":38153,\"start\":38145},{\"end\":38488,\"start\":38487},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":39758,\"start\":39750},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":40887,\"start\":40879},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":41187,\"start\":41179},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":42034,\"start\":42027},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":42710,\"start\":42701},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":42999,\"start\":42990},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":47066,\"start\":47058},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":47982,\"start\":47973}]", "bib_author_first_name": "[{\"end\":52692,\"start\":52691},{\"end\":52694,\"start\":52693},{\"end\":52707,\"start\":52706},{\"end\":52721,\"start\":52720},{\"end\":52723,\"start\":52722},{\"end\":53070,\"start\":53069},{\"end\":53082,\"start\":53081},{\"end\":53089,\"start\":53088},{\"end\":53294,\"start\":53293},{\"end\":53296,\"start\":53295},{\"end\":53304,\"start\":53303},{\"end\":53306,\"start\":53305},{\"end\":53795,\"start\":53794},{\"end\":53813,\"start\":53812},{\"end\":53822,\"start\":53821},{\"end\":53830,\"start\":53829},{\"end\":53832,\"start\":53831},{\"end\":54435,\"start\":54434},{\"end\":54443,\"start\":54442},{\"end\":54450,\"start\":54449},{\"end\":54996,\"start\":54995},{\"end\":55003,\"start\":55002},{\"end\":55022,\"start\":55021},{\"end\":55034,\"start\":55033},{\"end\":55046,\"start\":55045},{\"end\":55058,\"start\":55057},{\"end\":55069,\"start\":55068},{\"end\":55772,\"start\":55771},{\"end\":55780,\"start\":55779},{\"end\":55782,\"start\":55781},{\"end\":55792,\"start\":55791},{\"end\":55801,\"start\":55800},{\"end\":55803,\"start\":55802},{\"end\":56200,\"start\":56199},{\"end\":56209,\"start\":56208},{\"end\":56219,\"start\":56218},{\"end\":56221,\"start\":56220},{\"end\":56692,\"start\":56691},{\"end\":56706,\"start\":56705},{\"end\":56716,\"start\":56715},{\"end\":56834,\"start\":56833},{\"end\":56840,\"start\":56839},{\"end\":56849,\"start\":56848},{\"end\":56858,\"start\":56857},{\"end\":57396,\"start\":57395},{\"end\":57403,\"start\":57402},{\"end\":57412,\"start\":57411},{\"end\":57873,\"start\":57872},{\"end\":57883,\"start\":57882},{\"end\":57893,\"start\":57892},{\"end\":57903,\"start\":57902},{\"end\":58463,\"start\":58462},{\"end\":58473,\"start\":58472},{\"end\":58483,\"start\":58482},{\"end\":58493,\"start\":58492},{\"end\":58812,\"start\":58811},{\"end\":59314,\"start\":59313},{\"end\":59326,\"start\":59325},{\"end\":59341,\"start\":59340},{\"end\":59343,\"start\":59342},{\"end\":59352,\"start\":59351},{\"end\":59738,\"start\":59737},{\"end\":59748,\"start\":59747},{\"end\":59750,\"start\":59749},{\"end\":59758,\"start\":59757},{\"end\":59764,\"start\":59763},{\"end\":59773,\"start\":59772},{\"end\":60223,\"start\":60222},{\"end\":60237,\"start\":60236},{\"end\":60427,\"start\":60426},{\"end\":60435,\"start\":60434},{\"end\":60446,\"start\":60445},{\"end\":60456,\"start\":60455},{\"end\":61064,\"start\":61063},{\"end\":61073,\"start\":61072},{\"end\":61392,\"start\":61391},{\"end\":61669,\"start\":61668},{\"end\":61679,\"start\":61678},{\"end\":61691,\"start\":61690},{\"end\":62011,\"start\":62010},{\"end\":62020,\"start\":62019},{\"end\":62027,\"start\":62026},{\"end\":62035,\"start\":62034},{\"end\":62048,\"start\":62047},{\"end\":62050,\"start\":62049},{\"end\":62236,\"start\":62235},{\"end\":62245,\"start\":62244},{\"end\":62964,\"start\":62963},{\"end\":62973,\"start\":62972},{\"end\":62982,\"start\":62981},{\"end\":62991,\"start\":62990},{\"end\":63009,\"start\":63008},{\"end\":63021,\"start\":63020},{\"end\":63033,\"start\":63032},{\"end\":63042,\"start\":63041},{\"end\":63050,\"start\":63049},{\"end\":63059,\"start\":63058},{\"end\":63700,\"start\":63699},{\"end\":64071,\"start\":64070},{\"end\":64073,\"start\":64072},{\"end\":64080,\"start\":64079},{\"end\":64082,\"start\":64081},{\"end\":64092,\"start\":64091},{\"end\":64094,\"start\":64093},{\"end\":64104,\"start\":64103},{\"end\":64106,\"start\":64105},{\"end\":64560,\"start\":64559},{\"end\":64564,\"start\":64561},{\"end\":64570,\"start\":64569},{\"end\":64589,\"start\":64588},{\"end\":64595,\"start\":64594},{\"end\":64893,\"start\":64892},{\"end\":64912,\"start\":64911},{\"end\":64914,\"start\":64913},{\"end\":64928,\"start\":64927},{\"end\":64938,\"start\":64937},{\"end\":65219,\"start\":65218},{\"end\":65227,\"start\":65226},{\"end\":65238,\"start\":65237},{\"end\":65254,\"start\":65253},{\"end\":65256,\"start\":65255},{\"end\":65267,\"start\":65266},{\"end\":65278,\"start\":65277},{\"end\":65286,\"start\":65285},{\"end\":65945,\"start\":65944},{\"end\":65954,\"start\":65953},{\"end\":65956,\"start\":65955},{\"end\":66200,\"start\":66199},{\"end\":66209,\"start\":66208},{\"end\":66217,\"start\":66216},{\"end\":66219,\"start\":66218},{\"end\":66422,\"start\":66421},{\"end\":66432,\"start\":66431},{\"end\":66434,\"start\":66433},{\"end\":66751,\"start\":66750},{\"end\":66753,\"start\":66752},{\"end\":66764,\"start\":66763},{\"end\":66776,\"start\":66775},{\"end\":66785,\"start\":66784},{\"end\":66795,\"start\":66794},{\"end\":66797,\"start\":66796},{\"end\":66808,\"start\":66807},{\"end\":67191,\"start\":67190},{\"end\":67201,\"start\":67200},{\"end\":67203,\"start\":67202},{\"end\":67584,\"start\":67583},{\"end\":67594,\"start\":67593},{\"end\":67604,\"start\":67603},{\"end\":67606,\"start\":67605},{\"end\":67615,\"start\":67614},{\"end\":67626,\"start\":67625},{\"end\":67636,\"start\":67635},{\"end\":67968,\"start\":67967},{\"end\":67970,\"start\":67969},{\"end\":67977,\"start\":67976},{\"end\":68212,\"start\":68211},{\"end\":68224,\"start\":68223},{\"end\":68234,\"start\":68233},{\"end\":68245,\"start\":68241},{\"end\":68842,\"start\":68841},{\"end\":68844,\"start\":68843},{\"end\":69195,\"start\":69194},{\"end\":69206,\"start\":69205},{\"end\":69208,\"start\":69207},{\"end\":69456,\"start\":69455},{\"end\":69465,\"start\":69464},{\"end\":69475,\"start\":69474},{\"end\":69486,\"start\":69485},{\"end\":70044,\"start\":70043},{\"end\":70046,\"start\":70045},{\"end\":70060,\"start\":70059},{\"end\":70062,\"start\":70061},{\"end\":70354,\"start\":70353},{\"end\":70366,\"start\":70365},{\"end\":70375,\"start\":70374},{\"end\":70382,\"start\":70381},{\"end\":70391,\"start\":70390},{\"end\":70401,\"start\":70400},{\"end\":70414,\"start\":70413},{\"end\":70433,\"start\":70432},{\"end\":70437,\"start\":70436},{\"end\":70439,\"start\":70438},{\"end\":70456,\"start\":70455},{\"end\":70465,\"start\":70464},{\"end\":71273,\"start\":71272},{\"end\":71285,\"start\":71284},{\"end\":71294,\"start\":71293},{\"end\":71301,\"start\":71300},{\"end\":71310,\"start\":71309},{\"end\":71320,\"start\":71319},{\"end\":71333,\"start\":71332},{\"end\":71352,\"start\":71351},{\"end\":71362,\"start\":71361},{\"end\":71364,\"start\":71363},{\"end\":71381,\"start\":71380},{\"end\":71390,\"start\":71389},{\"end\":72044,\"start\":72043},{\"end\":72056,\"start\":72055},{\"end\":72259,\"start\":72258},{\"end\":72271,\"start\":72270},{\"end\":72281,\"start\":72280},{\"end\":72500,\"start\":72499},{\"end\":72512,\"start\":72511},{\"end\":72520,\"start\":72519},{\"end\":72533,\"start\":72532},{\"end\":72544,\"start\":72543},{\"end\":73092,\"start\":73091},{\"end\":73105,\"start\":73104},{\"end\":73116,\"start\":73115},{\"end\":73118,\"start\":73117},{\"end\":73306,\"start\":73305},{\"end\":73308,\"start\":73307},{\"end\":73887,\"start\":73886},{\"end\":73896,\"start\":73895},{\"end\":73906,\"start\":73905},{\"end\":73917,\"start\":73916},{\"end\":74443,\"start\":74442},{\"end\":74452,\"start\":74451},{\"end\":74463,\"start\":74462},{\"end\":74482,\"start\":74481},{\"end\":74816,\"start\":74815},{\"end\":74818,\"start\":74817}]", "bib_author_last_name": "[{\"end\":52704,\"start\":52695},{\"end\":52718,\"start\":52708},{\"end\":52728,\"start\":52724},{\"end\":53079,\"start\":53071},{\"end\":53086,\"start\":53083},{\"end\":53096,\"start\":53090},{\"end\":53301,\"start\":53297},{\"end\":53313,\"start\":53307},{\"end\":53810,\"start\":53796},{\"end\":53819,\"start\":53814},{\"end\":53827,\"start\":53823},{\"end\":53839,\"start\":53833},{\"end\":54440,\"start\":54436},{\"end\":54447,\"start\":54444},{\"end\":54456,\"start\":54451},{\"end\":55000,\"start\":54997},{\"end\":55019,\"start\":55004},{\"end\":55031,\"start\":55023},{\"end\":55043,\"start\":55035},{\"end\":55055,\"start\":55047},{\"end\":55066,\"start\":55059},{\"end\":55076,\"start\":55070},{\"end\":55777,\"start\":55773},{\"end\":55789,\"start\":55783},{\"end\":55798,\"start\":55793},{\"end\":55810,\"start\":55804},{\"end\":56206,\"start\":56201},{\"end\":56216,\"start\":56210},{\"end\":56226,\"start\":56222},{\"end\":56703,\"start\":56693},{\"end\":56713,\"start\":56707},{\"end\":56726,\"start\":56717},{\"end\":56837,\"start\":56835},{\"end\":56846,\"start\":56841},{\"end\":56855,\"start\":56850},{\"end\":56862,\"start\":56859},{\"end\":57400,\"start\":57397},{\"end\":57409,\"start\":57404},{\"end\":57426,\"start\":57413},{\"end\":57880,\"start\":57874},{\"end\":57890,\"start\":57884},{\"end\":57900,\"start\":57894},{\"end\":57910,\"start\":57904},{\"end\":58470,\"start\":58464},{\"end\":58480,\"start\":58474},{\"end\":58490,\"start\":58484},{\"end\":58500,\"start\":58494},{\"end\":58821,\"start\":58813},{\"end\":59323,\"start\":59315},{\"end\":59338,\"start\":59327},{\"end\":59349,\"start\":59344},{\"end\":59358,\"start\":59353},{\"end\":59745,\"start\":59739},{\"end\":59755,\"start\":59751},{\"end\":59761,\"start\":59759},{\"end\":59770,\"start\":59765},{\"end\":59781,\"start\":59774},{\"end\":60234,\"start\":60224},{\"end\":60249,\"start\":60238},{\"end\":60432,\"start\":60428},{\"end\":60443,\"start\":60436},{\"end\":60453,\"start\":60447},{\"end\":60468,\"start\":60457},{\"end\":61070,\"start\":61065},{\"end\":61082,\"start\":61074},{\"end\":61407,\"start\":61393},{\"end\":61676,\"start\":61670},{\"end\":61688,\"start\":61680},{\"end\":61697,\"start\":61692},{\"end\":62017,\"start\":62012},{\"end\":62024,\"start\":62021},{\"end\":62032,\"start\":62028},{\"end\":62045,\"start\":62036},{\"end\":62055,\"start\":62051},{\"end\":62242,\"start\":62237},{\"end\":62251,\"start\":62246},{\"end\":62970,\"start\":62965},{\"end\":62979,\"start\":62974},{\"end\":62988,\"start\":62983},{\"end\":63006,\"start\":62992},{\"end\":63018,\"start\":63010},{\"end\":63030,\"start\":63022},{\"end\":63039,\"start\":63034},{\"end\":63047,\"start\":63043},{\"end\":63056,\"start\":63051},{\"end\":63064,\"start\":63060},{\"end\":63707,\"start\":63701},{\"end\":64077,\"start\":64074},{\"end\":64089,\"start\":64083},{\"end\":64101,\"start\":64095},{\"end\":64113,\"start\":64107},{\"end\":64567,\"start\":64565},{\"end\":64586,\"start\":64571},{\"end\":64592,\"start\":64590},{\"end\":64606,\"start\":64596},{\"end\":64909,\"start\":64894},{\"end\":64925,\"start\":64915},{\"end\":64935,\"start\":64929},{\"end\":64949,\"start\":64939},{\"end\":65224,\"start\":65220},{\"end\":65235,\"start\":65228},{\"end\":65251,\"start\":65239},{\"end\":65264,\"start\":65257},{\"end\":65275,\"start\":65268},{\"end\":65283,\"start\":65279},{\"end\":65293,\"start\":65287},{\"end\":65951,\"start\":65946},{\"end\":65964,\"start\":65957},{\"end\":66206,\"start\":66201},{\"end\":66214,\"start\":66210},{\"end\":66227,\"start\":66220},{\"end\":66429,\"start\":66423},{\"end\":66441,\"start\":66435},{\"end\":66761,\"start\":66754},{\"end\":66773,\"start\":66765},{\"end\":66782,\"start\":66777},{\"end\":66792,\"start\":66786},{\"end\":66805,\"start\":66798},{\"end\":66817,\"start\":66809},{\"end\":67198,\"start\":67192},{\"end\":67209,\"start\":67204},{\"end\":67591,\"start\":67585},{\"end\":67601,\"start\":67595},{\"end\":67612,\"start\":67607},{\"end\":67623,\"start\":67616},{\"end\":67633,\"start\":67627},{\"end\":67644,\"start\":67637},{\"end\":67974,\"start\":67971},{\"end\":67981,\"start\":67978},{\"end\":68221,\"start\":68213},{\"end\":68231,\"start\":68225},{\"end\":68239,\"start\":68235},{\"end\":68249,\"start\":68246},{\"end\":68858,\"start\":68845},{\"end\":69203,\"start\":69196},{\"end\":69215,\"start\":69209},{\"end\":69462,\"start\":69457},{\"end\":69472,\"start\":69466},{\"end\":69483,\"start\":69476},{\"end\":69493,\"start\":69487},{\"end\":70057,\"start\":70047},{\"end\":70069,\"start\":70063},{\"end\":70363,\"start\":70355},{\"end\":70372,\"start\":70367},{\"end\":70379,\"start\":70376},{\"end\":70388,\"start\":70383},{\"end\":70398,\"start\":70392},{\"end\":70411,\"start\":70402},{\"end\":70430,\"start\":70415},{\"end\":70453,\"start\":70440},{\"end\":70462,\"start\":70457},{\"end\":70473,\"start\":70466},{\"end\":71282,\"start\":71274},{\"end\":71291,\"start\":71286},{\"end\":71298,\"start\":71295},{\"end\":71307,\"start\":71302},{\"end\":71317,\"start\":71311},{\"end\":71330,\"start\":71321},{\"end\":71349,\"start\":71334},{\"end\":71359,\"start\":71353},{\"end\":71378,\"start\":71365},{\"end\":71387,\"start\":71382},{\"end\":71398,\"start\":71391},{\"end\":72053,\"start\":72045},{\"end\":72063,\"start\":72057},{\"end\":72268,\"start\":72260},{\"end\":72278,\"start\":72272},{\"end\":72287,\"start\":72282},{\"end\":72509,\"start\":72501},{\"end\":72517,\"start\":72513},{\"end\":72530,\"start\":72521},{\"end\":72541,\"start\":72534},{\"end\":72558,\"start\":72545},{\"end\":73102,\"start\":73093},{\"end\":73113,\"start\":73106},{\"end\":73121,\"start\":73119},{\"end\":73317,\"start\":73309},{\"end\":73329,\"start\":73319},{\"end\":73893,\"start\":73888},{\"end\":73903,\"start\":73897},{\"end\":73914,\"start\":73907},{\"end\":73928,\"start\":73918},{\"end\":74449,\"start\":74444},{\"end\":74460,\"start\":74453},{\"end\":74479,\"start\":74464},{\"end\":74493,\"start\":74483},{\"end\":74825,\"start\":74819}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":52355,\"start\":52218},{\"attributes\":{\"id\":\"b1\"},\"end\":52523,\"start\":52357},{\"attributes\":{\"id\":\"b2\"},\"end\":52627,\"start\":52525},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":628588},\"end\":52996,\"start\":52629},{\"attributes\":{\"doi\":\"abs/1409.0473\",\"id\":\"b4\"},\"end\":53248,\"start\":52998},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":9792514},\"end\":53726,\"start\":53250},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":10745656},\"end\":54330,\"start\":53728},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":382653},\"end\":54898,\"start\":54332},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":5590763},\"end\":55679,\"start\":54900},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":14187723},\"end\":56109,\"start\":55681},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":16017158},\"end\":56674,\"start\":56111},{\"attributes\":{\"id\":\"b11\"},\"end\":56812,\"start\":56676},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":11540100},\"end\":57317,\"start\":56814},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":4708148},\"end\":57787,\"start\":57319},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":7843537},\"end\":58377,\"start\":57789},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":7843537},\"end\":58759,\"start\":58379},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":8313873},\"end\":59255,\"start\":58761},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":2561041},\"end\":59531,\"start\":59257},{\"attributes\":{\"id\":\"b18\"},\"end\":59703,\"start\":59533},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2846066},\"end\":60196,\"start\":59705},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":1915014},\"end\":60368,\"start\":60198},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":8820379},\"end\":61001,\"start\":60370},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":2520711},\"end\":61323,\"start\":61003},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":14585311},\"end\":61569,\"start\":61325},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":14375487},\"end\":61947,\"start\":61571},{\"attributes\":{\"id\":\"b25\"},\"end\":62204,\"start\":61949},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":2330566},\"end\":62904,\"start\":62206},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":61651780},\"end\":63640,\"start\":62906},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":10682739},\"end\":63972,\"start\":63642},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":206511804},\"end\":64460,\"start\":63974},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":8580643},\"end\":64823,\"start\":64462},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1839883},\"end\":65169,\"start\":64825},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":14434979},\"end\":65854,\"start\":65171},{\"attributes\":{\"doi\":\"abs/1604.00788\",\"id\":\"b33\"},\"end\":66129,\"start\":65856},{\"attributes\":{\"doi\":\"abs/1508.04025\",\"id\":\"b34\"},\"end\":66380,\"start\":66131},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":7227935},\"end\":66690,\"start\":66382},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":14068874},\"end\":67121,\"start\":66692},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":1957065},\"end\":67515,\"start\":67123},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":15433385},\"end\":67900,\"start\":67517},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":5219389},\"end\":68145,\"start\":67902},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":11080756},\"end\":68777,\"start\":68147},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":12718048},\"end\":69165,\"start\":68779},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":10872325},\"end\":69400,\"start\":69167},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":9956794},\"end\":69920,\"start\":69402},{\"attributes\":{\"id\":\"b44\"},\"end\":70300,\"start\":69922},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":905565},\"end\":71219,\"start\":70302},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":905565},\"end\":71979,\"start\":71221},{\"attributes\":{\"doi\":\"abs/1606.02892\",\"id\":\"b47\"},\"end\":72199,\"start\":71981},{\"attributes\":{\"doi\":\"abs/1606.02891\",\"id\":\"b48\"},\"end\":72429,\"start\":72201},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":9790585},\"end\":73037,\"start\":72431},{\"attributes\":{\"id\":\"b50\"},\"end\":73303,\"start\":73039},{\"attributes\":{\"id\":\"b51\"},\"end\":73550,\"start\":73305},{\"attributes\":{\"doi\":\"abs/1605.02688\",\"id\":\"b52\"},\"end\":73829,\"start\":73552},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":14867364},\"end\":74396,\"start\":73831},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":367166},\"end\":74769,\"start\":74398},{\"attributes\":{\"doi\":\"arXiv:1212.5701\",\"id\":\"b55\"},\"end\":74951,\"start\":74771}]", "bib_title": "[{\"end\":52689,\"start\":52629},{\"end\":53291,\"start\":53250},{\"end\":53792,\"start\":53728},{\"end\":54432,\"start\":54332},{\"end\":54993,\"start\":54900},{\"end\":55769,\"start\":55681},{\"end\":56197,\"start\":56111},{\"end\":56831,\"start\":56814},{\"end\":57393,\"start\":57319},{\"end\":57870,\"start\":57789},{\"end\":58460,\"start\":58379},{\"end\":58809,\"start\":58761},{\"end\":59311,\"start\":59257},{\"end\":59735,\"start\":59705},{\"end\":60220,\"start\":60198},{\"end\":60424,\"start\":60370},{\"end\":61061,\"start\":61003},{\"end\":61389,\"start\":61325},{\"end\":61666,\"start\":61571},{\"end\":62233,\"start\":62206},{\"end\":62961,\"start\":62906},{\"end\":63697,\"start\":63642},{\"end\":64068,\"start\":63974},{\"end\":64557,\"start\":64462},{\"end\":64890,\"start\":64825},{\"end\":65216,\"start\":65171},{\"end\":66419,\"start\":66382},{\"end\":66748,\"start\":66692},{\"end\":67188,\"start\":67123},{\"end\":67581,\"start\":67517},{\"end\":67965,\"start\":67902},{\"end\":68209,\"start\":68147},{\"end\":68839,\"start\":68779},{\"end\":69192,\"start\":69167},{\"end\":69453,\"start\":69402},{\"end\":70351,\"start\":70302},{\"end\":71270,\"start\":71221},{\"end\":72497,\"start\":72431},{\"end\":73884,\"start\":73831},{\"end\":74440,\"start\":74398}]", "bib_author": "[{\"end\":52706,\"start\":52691},{\"end\":52720,\"start\":52706},{\"end\":52730,\"start\":52720},{\"end\":53081,\"start\":53069},{\"end\":53088,\"start\":53081},{\"end\":53098,\"start\":53088},{\"end\":53303,\"start\":53293},{\"end\":53315,\"start\":53303},{\"end\":53812,\"start\":53794},{\"end\":53821,\"start\":53812},{\"end\":53829,\"start\":53821},{\"end\":53841,\"start\":53829},{\"end\":54442,\"start\":54434},{\"end\":54449,\"start\":54442},{\"end\":54458,\"start\":54449},{\"end\":55002,\"start\":54995},{\"end\":55021,\"start\":55002},{\"end\":55033,\"start\":55021},{\"end\":55045,\"start\":55033},{\"end\":55057,\"start\":55045},{\"end\":55068,\"start\":55057},{\"end\":55078,\"start\":55068},{\"end\":55779,\"start\":55771},{\"end\":55791,\"start\":55779},{\"end\":55800,\"start\":55791},{\"end\":55812,\"start\":55800},{\"end\":56208,\"start\":56199},{\"end\":56218,\"start\":56208},{\"end\":56228,\"start\":56218},{\"end\":56705,\"start\":56691},{\"end\":56715,\"start\":56705},{\"end\":56728,\"start\":56715},{\"end\":56839,\"start\":56833},{\"end\":56848,\"start\":56839},{\"end\":56857,\"start\":56848},{\"end\":56864,\"start\":56857},{\"end\":57402,\"start\":57395},{\"end\":57411,\"start\":57402},{\"end\":57428,\"start\":57411},{\"end\":57882,\"start\":57872},{\"end\":57892,\"start\":57882},{\"end\":57902,\"start\":57892},{\"end\":57912,\"start\":57902},{\"end\":58472,\"start\":58462},{\"end\":58482,\"start\":58472},{\"end\":58492,\"start\":58482},{\"end\":58502,\"start\":58492},{\"end\":58823,\"start\":58811},{\"end\":59325,\"start\":59313},{\"end\":59340,\"start\":59325},{\"end\":59351,\"start\":59340},{\"end\":59360,\"start\":59351},{\"end\":59747,\"start\":59737},{\"end\":59757,\"start\":59747},{\"end\":59763,\"start\":59757},{\"end\":59772,\"start\":59763},{\"end\":59783,\"start\":59772},{\"end\":60236,\"start\":60222},{\"end\":60251,\"start\":60236},{\"end\":60434,\"start\":60426},{\"end\":60445,\"start\":60434},{\"end\":60455,\"start\":60445},{\"end\":60470,\"start\":60455},{\"end\":61072,\"start\":61063},{\"end\":61084,\"start\":61072},{\"end\":61409,\"start\":61391},{\"end\":61678,\"start\":61668},{\"end\":61690,\"start\":61678},{\"end\":61699,\"start\":61690},{\"end\":62019,\"start\":62010},{\"end\":62026,\"start\":62019},{\"end\":62034,\"start\":62026},{\"end\":62047,\"start\":62034},{\"end\":62057,\"start\":62047},{\"end\":62244,\"start\":62235},{\"end\":62253,\"start\":62244},{\"end\":62972,\"start\":62963},{\"end\":62981,\"start\":62972},{\"end\":62990,\"start\":62981},{\"end\":63008,\"start\":62990},{\"end\":63020,\"start\":63008},{\"end\":63032,\"start\":63020},{\"end\":63041,\"start\":63032},{\"end\":63049,\"start\":63041},{\"end\":63058,\"start\":63049},{\"end\":63066,\"start\":63058},{\"end\":63709,\"start\":63699},{\"end\":64079,\"start\":64070},{\"end\":64091,\"start\":64079},{\"end\":64103,\"start\":64091},{\"end\":64115,\"start\":64103},{\"end\":64569,\"start\":64559},{\"end\":64588,\"start\":64569},{\"end\":64594,\"start\":64588},{\"end\":64608,\"start\":64594},{\"end\":64911,\"start\":64892},{\"end\":64927,\"start\":64911},{\"end\":64937,\"start\":64927},{\"end\":64951,\"start\":64937},{\"end\":65226,\"start\":65218},{\"end\":65237,\"start\":65226},{\"end\":65253,\"start\":65237},{\"end\":65266,\"start\":65253},{\"end\":65277,\"start\":65266},{\"end\":65285,\"start\":65277},{\"end\":65295,\"start\":65285},{\"end\":65953,\"start\":65944},{\"end\":65966,\"start\":65953},{\"end\":66208,\"start\":66199},{\"end\":66216,\"start\":66208},{\"end\":66229,\"start\":66216},{\"end\":66431,\"start\":66421},{\"end\":66443,\"start\":66431},{\"end\":66763,\"start\":66750},{\"end\":66775,\"start\":66763},{\"end\":66784,\"start\":66775},{\"end\":66794,\"start\":66784},{\"end\":66807,\"start\":66794},{\"end\":66819,\"start\":66807},{\"end\":67200,\"start\":67190},{\"end\":67211,\"start\":67200},{\"end\":67593,\"start\":67583},{\"end\":67603,\"start\":67593},{\"end\":67614,\"start\":67603},{\"end\":67625,\"start\":67614},{\"end\":67635,\"start\":67625},{\"end\":67646,\"start\":67635},{\"end\":67976,\"start\":67967},{\"end\":67983,\"start\":67976},{\"end\":68223,\"start\":68211},{\"end\":68233,\"start\":68223},{\"end\":68241,\"start\":68233},{\"end\":68251,\"start\":68241},{\"end\":68860,\"start\":68841},{\"end\":69205,\"start\":69194},{\"end\":69217,\"start\":69205},{\"end\":69464,\"start\":69455},{\"end\":69474,\"start\":69464},{\"end\":69485,\"start\":69474},{\"end\":69495,\"start\":69485},{\"end\":70059,\"start\":70043},{\"end\":70071,\"start\":70059},{\"end\":70365,\"start\":70353},{\"end\":70374,\"start\":70365},{\"end\":70381,\"start\":70374},{\"end\":70390,\"start\":70381},{\"end\":70400,\"start\":70390},{\"end\":70413,\"start\":70400},{\"end\":70432,\"start\":70413},{\"end\":70436,\"start\":70432},{\"end\":70455,\"start\":70436},{\"end\":70464,\"start\":70455},{\"end\":70475,\"start\":70464},{\"end\":71284,\"start\":71272},{\"end\":71293,\"start\":71284},{\"end\":71300,\"start\":71293},{\"end\":71309,\"start\":71300},{\"end\":71319,\"start\":71309},{\"end\":71332,\"start\":71319},{\"end\":71351,\"start\":71332},{\"end\":71361,\"start\":71351},{\"end\":71380,\"start\":71361},{\"end\":71389,\"start\":71380},{\"end\":71400,\"start\":71389},{\"end\":72055,\"start\":72043},{\"end\":72065,\"start\":72055},{\"end\":72270,\"start\":72258},{\"end\":72280,\"start\":72270},{\"end\":72289,\"start\":72280},{\"end\":72511,\"start\":72499},{\"end\":72519,\"start\":72511},{\"end\":72532,\"start\":72519},{\"end\":72543,\"start\":72532},{\"end\":72560,\"start\":72543},{\"end\":73104,\"start\":73091},{\"end\":73115,\"start\":73104},{\"end\":73123,\"start\":73115},{\"end\":73319,\"start\":73305},{\"end\":73331,\"start\":73319},{\"end\":73895,\"start\":73886},{\"end\":73905,\"start\":73895},{\"end\":73916,\"start\":73905},{\"end\":73930,\"start\":73916},{\"end\":74451,\"start\":74442},{\"end\":74462,\"start\":74451},{\"end\":74481,\"start\":74462},{\"end\":74495,\"start\":74481},{\"end\":74827,\"start\":74815}]", "bib_venue": "[{\"end\":53509,\"start\":53412},{\"end\":54002,\"start\":53920},{\"end\":54628,\"start\":54543},{\"end\":55264,\"start\":55174},{\"end\":56384,\"start\":56305},{\"end\":57094,\"start\":56979},{\"end\":57579,\"start\":57512},{\"end\":58078,\"start\":57994},{\"end\":58984,\"start\":58902},{\"end\":59393,\"start\":59385},{\"end\":59613,\"start\":59598},{\"end\":59955,\"start\":59868},{\"end\":60646,\"start\":60559},{\"end\":62562,\"start\":62405},{\"end\":63249,\"start\":63166},{\"end\":63819,\"start\":63771},{\"end\":65471,\"start\":65384},{\"end\":67331,\"start\":67278},{\"end\":68442,\"start\":68345},{\"end\":69280,\"start\":69257},{\"end\":69667,\"start\":69580},{\"end\":70753,\"start\":70615},{\"end\":71645,\"start\":71531},{\"end\":72754,\"start\":72657},{\"end\":74136,\"start\":74033},{\"end\":52257,\"start\":52218},{\"end\":52395,\"start\":52357},{\"end\":52540,\"start\":52525},{\"end\":52801,\"start\":52730},{\"end\":53067,\"start\":52998},{\"end\":53410,\"start\":53315},{\"end\":53918,\"start\":53841},{\"end\":54541,\"start\":54458},{\"end\":55172,\"start\":55078},{\"end\":55872,\"start\":55812},{\"end\":56303,\"start\":56228},{\"end\":56689,\"start\":56676},{\"end\":56977,\"start\":56864},{\"end\":57510,\"start\":57428},{\"end\":57992,\"start\":57912},{\"end\":58548,\"start\":58502},{\"end\":58900,\"start\":58823},{\"end\":59383,\"start\":59360},{\"end\":59596,\"start\":59533},{\"end\":59866,\"start\":59783},{\"end\":60269,\"start\":60251},{\"end\":60557,\"start\":60470},{\"end\":61154,\"start\":61084},{\"end\":61430,\"start\":61409},{\"end\":61740,\"start\":61699},{\"end\":62008,\"start\":61949},{\"end\":62403,\"start\":62253},{\"end\":63164,\"start\":63066},{\"end\":63769,\"start\":63709},{\"end\":64193,\"start\":64115},{\"end\":64627,\"start\":64608},{\"end\":64974,\"start\":64951},{\"end\":65382,\"start\":65295},{\"end\":65942,\"start\":65856},{\"end\":66197,\"start\":66131},{\"end\":66518,\"start\":66443},{\"end\":66888,\"start\":66819},{\"end\":67276,\"start\":67211},{\"end\":67687,\"start\":67646},{\"end\":68008,\"start\":67983},{\"end\":68343,\"start\":68251},{\"end\":68923,\"start\":68860},{\"end\":69255,\"start\":69217},{\"end\":69578,\"start\":69495},{\"end\":70041,\"start\":69922},{\"end\":70613,\"start\":70475},{\"end\":71529,\"start\":71400},{\"end\":72041,\"start\":71981},{\"end\":72256,\"start\":72201},{\"end\":72655,\"start\":72560},{\"end\":73089,\"start\":73039},{\"end\":73380,\"start\":73331},{\"end\":73682,\"start\":73566},{\"end\":74031,\"start\":73930},{\"end\":74564,\"start\":74495},{\"end\":74813,\"start\":74771}]"}}}, "year": 2023, "month": 12, "day": 17}