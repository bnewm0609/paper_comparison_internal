{"id": 214713995, "updated": "2023-10-06 17:41:32.316", "metadata": {"title": "Suphx: Mastering Mahjong with Deep Reinforcement Learning", "authors": "[{\"first\":\"Junjie\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Sotetsu\",\"last\":\"Koyamada\",\"middle\":[]},{\"first\":\"Qiwei\",\"last\":\"Ye\",\"middle\":[]},{\"first\":\"Guoqing\",\"last\":\"Liu\",\"middle\":[]},{\"first\":\"Chao\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Ruihan\",\"last\":\"Yang\",\"middle\":[]},{\"first\":\"Li\",\"last\":\"Zhao\",\"middle\":[]},{\"first\":\"Tao\",\"last\":\"Qin\",\"middle\":[]},{\"first\":\"Tie-Yan\",\"last\":\"Liu\",\"middle\":[]},{\"first\":\"Hsiao-Wuen\",\"last\":\"Hon\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2020, "month": 3, "day": 30}, "abstract": "Artificial Intelligence (AI) has achieved great success in many domains, and game AI is widely regarded as its beachhead since the dawn of AI. In recent years, studies on game AI have gradually evolved from relatively simple environments (e.g., perfect-information games such as Go, chess, shogi or two-player imperfect-information games such as heads-up Texas hold'em) to more complex ones (e.g., multi-player imperfect-information games such as multi-player Texas hold'em and StartCraft II). Mahjong is a popular multi-player imperfect-information game worldwide but very challenging for AI research due to its complex playing/scoring rules and rich hidden information. We design an AI for Mahjong, named Suphx, based on deep reinforcement learning with some newly introduced techniques including global reward prediction, oracle guiding, and run-time policy adaptation. Suphx has demonstrated stronger performance than most top human players in terms of stable rank and is rated above 99.99% of all the officially ranked human players in the Tenhou platform. This is the first time that a computer program outperforms most top human players in Mahjong.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2003.13590", "mag": "3013828496", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2003-13590", "doi": null}}, "content": {"source": {"pdf_hash": "b30c663690c3a096c7d92f307ba7d17bdfd48553", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2003.13590v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "68ca2b803a9e7646fab6c4d7df88b1642aa17107", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/b30c663690c3a096c7d92f307ba7d17bdfd48553.txt", "contents": "\nSuphx: Mastering Mahjong with Deep Reinforcement Learning *\n\n\nJunjie Li \nMicrosoft Research Asia\n\n\nSotetsu Koyamada \nKyoto University\n\n\nQiwei Ye \nMicrosoft Research Asia\n\n\nGuoqing Liu \nUniversity of Science and Technology of China\n\n\nChao Wang \nTsinghua University\n\n\nRuihan Yang \nNankai University\n\n\nLi Zhao \nMicrosoft Research Asia\n\n\nTao Qin \nMicrosoft Research Asia\n\n\nTie-Yan Liu \nMicrosoft Research Asia\n\n\nHsiao-Wuen Hon \nMicrosoft Research Asia\n\n\nSuphx: Mastering Mahjong with Deep Reinforcement Learning *\n\nArtificial Intelligence (AI) has achieved great success in many domains, and game AI is widely regarded as its beachhead since the dawn of AI. In recent years, studies on game AI have gradually evolved from relatively simple environments (e.g., perfect-information games such as Go, chess, shogi or two-player imperfect-information games such as heads-up Texas hold'em) to more complex ones (e.g., multi-player imperfect-information games such as multi-player Texas hold'em and StartCraft II). Mahjong is a popular multi-player imperfect-information game worldwide but very challenging for AI research due to its complex playing/scoring rules and rich hidden information. We design an AI for Mahjong, named Suphx, based on deep reinforcement learning with some newly introduced techniques including global reward prediction, oracle guiding, and run-time policy adaptation. Suphx has demonstrated stronger performance than most top human players in terms of stable rank and is rated above 99.99% of all the officially ranked human players in the Tenhou platform. This is the first time that a computer program outperforms most top human players in Mahjong.\n\nIntroduction\n\nBuilding superhuman programs for games is a long-standing goal of artificial intelligence (AI). Game AI has made great progress in past two decades (2,3,11,13,15,16,18). Recent studies have gradually evolved from relatively simple perfect-information or two-player games (e.g., shogi, chess, Go, and heads-up Texas hold'em) to more complicated imperfect-information multi-player ones (e.g., contract bridge (12), Dota (1), StarCraft II (21), and multi-player Texas hold'em (4)).\n\nMahjong, a multi-round tile-based game with imperfect information and multiple players, is very popular with hundreds of millions of players worldwide. In each round of a Mahjong game, four players compete with each other towards the first completion of a winning hand. Building a strong Mahjong program raises great challenges to the current studies on game AI.\n\nFirst, Mahjong has complicated scoring rules. Each game of Mahjong contains multiple rounds, and the final ranking (and so the reward) of a game is determined by the accumulated round scores of those rounds. The loss of one round does not always mean that a player plays poorly for that round (e.g., the player may tactically lose the last round to ensure rank 1 of the game if he/she has a big advantage in previous rounds), and so we cannot directly use the round score as a feedback signal for learning. Furthermore, Mahjong has a huge number of possible winning hands. Those winning hands can be very different from each other, and different hands result in different winning round scores of the round. Such scoring rules are much more complex than previously studied games including chess, Go, etc. A professional player needs to carefully choose what kind of winning hand to form in order to trade off the winning probability and winning score of the round.\n\nSecond, in Mahjong each player has up to 13 private tiles in his/her hand which are not visible to other players, and there are 14 titles in the dead wall, which are invisible to all the players throughout the game, and 70 tiles in the live wall, which will become visible once they are drawn and discarded by the players. As a result, on average, for each information set (a decision point of a player), there are more than 10 48 hidden states that are indistinguishable to him/her. Such a large set of hidden information makes Mahjong a much more difficult imperfect-information game than previously studied ones such as Texas hold'em poker. It is hard for a Mahjong player to determine which action is good only based on his/her own private tiles, since the goodness of an action highly depends on the private tiles of other players and the wall tiles that are invisible to everyone. Consequently, it is also difficult for an AI to connect the reward signal to the observed information.\n\nThird, the playing rule of Mahjong is complex: (1) there are different types of actions including Riichi, Chow, Pong, Kong, discard, and (2) the regular order of plays can be interrupted when making a meld (Pong or Kong), going Mahjong (declaring a winning hand), or robbing a Kong. Because each player can have up to 13 private tiles, it is hard to predict those interruptions, and therefore we even cannot build a regular game tree; even if we build a game tree, such a tree will have a huge number of paths between the consecutive actions of a player. This prevents the direct application of previously successful techniques for games such as Monte-Carlo tree search (14,15) and counterfactual regret minimization (3,4).\n\nDue to the above challenges, although there are several attempts (7)(8)(9)20), the best Mahjong AI is still far behind top human players.\n\nIn this work, we build Suphx (short for Super Phoenix), an AI system for 4-player Japanese Mahjong (Riichi Mahjong), which has one of the largest Mahjong communities in the world. Suphx adopts deep convolutional neural networks as its models. The networks are first trained through supervised learning from the logs of human professional players and then boosted through self-play reinforcement learning (RL), with the networks as the policy. We use the popular policy gradient algorithm (17) for self-play RL and introduce several techniques to address the aforementioned challenges.\n\n1. Global reward prediction trains a predictor to predict the final reward (after several future rounds) of a game based on the information of the current and previous rounds. This predictor provides effective learning signals so that the training of the policy network can be performed. In addition, we design look-ahead features to encode the rich possibilities of different winning hands and their winning scores of the round, as a support to the decision making of our RL agent.\n\n2. Oracle guiding introduces an oracle agent that can see the perfect information including the private tiles of other players and the wall tiles. This oracle agent is a super strong Mahjong AI due to the (unfair) perfect information access. In our RL training process, we gradually drop the perfect information from the oracle agent, and finally convert it to a normal agent which only takes observable information as input. With the help of the oracle agent, our normal agent improves much faster than standard RL training which only leverages observable information.\n\n3. As the complex playing rules of Mahjong lead to an irregular game tree and prevent the application of Monte-Carlo tree search techniques, we introduce parametric Monte-Carlo policy adaptation (pMCPA) to improve the run-time performance of our agent. pMCPA gradually modifies and adapts the offline-trained policy to a specific round in the online playing stage when the round goes on and there is more information observable (such as public tiles discarded by four players).\n\nWe evaluated Suphx on the most popular and competitive Mahjong platform, Tenhou (19), which has more than 350,000 active users. Suphx reached 10 dan at Tenhou, and its stable rank, which describes the long-term average of the performance of a player, surpasses most top human players.\n\n\nOverview of Suphx\n\nIn this section, we first describe the decision flow of Suphx, and then the network structures and features used in Suphx.  Table 1.\n\n\nModel\n\nBesides these five learned models, Suphx employs another rule-based winning model to decide whether to declare a winning hand and win the round. It basically checks whether a winning hand can be formed from a tile discarded by other players or drawn from the wall, and then makes decisions according to the following simple rules:\n\n\u2022 If this is not the last round of the game, declare and win the round;\n\n\u2022 If this is the last round of the game, -If after declaring a winning hand the accumulated round score of the whole game is the lowest among the four players, do not declare;\n\n-Otherwise, declare and win the round.\n\nThere are two kinds of situations that a Mahjong player needs to take actions, so does our AI Suphx (see Figure 1): 1. If no action is suggested by the three models, it is the turn for other players to take actions or the round ends with no wall tiles left.\n\u2022\n2. If one or more actions are suggested, Suphx proposes the action with the highest confidence score (outputted by those models). If the proposed action is not interrupted by higher-priority actions from other players, Suphx takes the action, and then goes to the Discard step in the first situation. Otherwise, the proposed action is interrupted and it becomes the turn for other players to take actions.  1 If a round ends with no wall tiles left, this is also known as an exhaustive draw.\n\n\nFeatures and Model Structures\n\nSince deep convolutional neural networks (CNNs) have demonstrated powerful representation capability and been verified in playing games like chess, shogi and Go, Suphx also adopts deep CNNs as the model architecture for its policy. Different from board games like Go and Chess, the information (as shown in Figure 2) available to players in Mahjong is not naturally in the format of images. We carefully design a set of features to encode the observed information into channels that can be digested by CNNs. As there are 34 unique tiles in Japanese Mahong, we use multiple 34 \u00d7 1 channels to represent a state. As shown in Fig. 3, we use four channels to encode the private tiles of a player. Open hand, doras, and the sequence of discarded tiles are encoded similarly into other channels. Categorical features are encoded into multiple channels, with each channel being either all 0's or all 1's. Integer features are partitioned into buckets and each bucket is encoded using a channel of either all 0's or all 1's.\n\nIn addition to the directly observable information, we also design some look-  Figure 3: Encoding of private tiles. We encode the private tiles of a player into four channels. There are four rows and 34 columns, with each row corresponding to one channel, and each column indicating one type of tile. The m-th column in the n-th channel means whether there are n tiles of the m-th type in the hand. ahead features, which indicate the probability and round score of winning a hand if we discard a specific tile from the current hand tiles and then draw tiles from the wall to replace some other hand tiles. In Japanese Mahjong, a winning hand of 14 tiles contains four melds and one pair. There are 89 kinds of melds and 34 kinds of pairs, which lead to a huge number of different possible winning hands. Furthermore, different hands result in different winning scores of the round according to the complex scoring rules. 2 It is impossible to enumerate all the combinations of different discarding/drawing behaviors and winning hands. Therefore, to reduce computational complexity, we make several simplifications while extracting look-ahead features: (1) We perform depth first search to find possible winning hands. (2) We ignore opponents' behaviors and only consider drawing and discarding behaviors of our own agent. With those simplifications, we obtain 100+ look-ahead features, with each feature corresponding to a 34dimensional vector. For example, a feature represents whether discarding a specific tile can lead to a winning hand of 12,000 round score with replacing 3 hand tiles by tiles drawn from the wall or discarded by other players.\n\nIn Suphx, all the models (i.e., the discard/Riichi/Chow/Pong/Kong models) use similar network structures (Figures 4 and 5), except the dimensions of the input and output layers ( Table 2). The discard model has 34 output neurons corresponding to 34 unique tiles, the Richii/Chow/Pong/Kong models have only two output neurons corresponding to whether or not to take a certain action. In addition to the state information and look-ahead features, the inputs of Chow/Pong/Kong models also contain information about what tiles to make a Chow/Pong/Kong. Note that there is no pooling layer in our models, because every column of a channel has its semantic meaning and pooling will lead to information loss.   \n\n\nLearning Algorithm\n\nThe learning of Suphx contains three major steps. First, we train the five models of Suphx by supervised learning, using (state, action) pairs of top human players collected from the Tenhou platform. Second, we improve the supervised models through self-play reinforcement learning (RL), with the models as policy. We adopt the popular policy gradient algorithm (Section 3.1) and introduce global reward prediction (Section 3.2) and oracle guiding (Section 3.3) to handle the unique challenges of Mahjong. Third, during online playing, we employ run-time policy adaptation (Section 3.4) to leverage the new observations on the current round in order to perform even better.\n\n\nDistributed Reinforcement Learning with Entropy Regularization\n\nThe training of Suphx is based on distributed reinforcement learning. In particular, we employ the policy gradient method and leverage importance sampling to handle the staleness of trajectories due to asynchronous distributed training:\nL (\u03b8) = E s,a\u223c\u03c0 \u03b8 \u03c0 \u03b8 (a|s) \u03c0 \u03b8 (a|s) A \u03c0 \u03b8 (s, a) ,(1)\nwhere \u03b8 is (the parameters of) an old policy generating trajectories for training, \u03b8 is the latest policy to update, and A \u03c0 \u03b8 (s, a) is the advantage of action a at  We find that RL training is sensitive to the entropy of the policy. If the entropy is too small, RL training converges quickly and self-play does not significantly improve the policy; if the entropy is too large, RL training becomes unstable and the learned policy is of large variance. Therefore, we regularize the entropy of policy during the RL training as follows:\n\u2207 \u03b8 J (\u03c0 \u03b8 ) = E s,a\u223c\u03c0 \u03b8 \u03c0 \u03b8 (s, a) \u03c0 \u03b8 (s, a) \u2207 \u03b8 log \u03c0 \u03b8 (a|s) A \u03c0 \u03b8 (s, a) + \u03b1\u2207 \u03b8 H(\u03c0 \u03b8 ) (2)\nwhere H(\u03c0 \u03b8 ) is the entropy of policy \u03c0 \u03b8 and \u03b1 > 0 is a trade-off coefficient.\n\nTo ensure stable exploration, we dynamically adjust \u03b1 to increase/decrease the entropy term if the entropy of our policy is smaller/larger than the target H target in a recent period:\n\u03b1 \u2190 \u03b1 + \u03b2 H target \u2212H(\u03c0 \u03b8 ) ,(3)\nwhereH(\u03c0 \u03b8 ) is the empirical entropy of the trajectories in a recent period, and \u03b2 > 0 is a small step size. The distributed RL system used by Suphx is shown in Figure 6. The system consists of multiple self-play workers, each containing a set of CPU-based Mahjong simulators and a set of GPU-based inference engines to generate trajectories. The update of the policy \u03c0 \u03b8 is decoupled from the generation of the trajectories: a parameter server is used to update the policy using multiple GPUs based on a replay buffer. During training, every Mahjong simulator randomly initializes a game with our RL agent as a player and other three opponents. When any of the four players needs to take an action, the simulator sends the current state (represented by a feature vector) to a GPU inference engine, which then returns an action to the simulator. GPU inference engines pull the up-to-date policy \u03c0 \u03b8 from the parameter server in a regular basis, to ensure that the self-play policy is close enough to the latest policy \u03c0 \u03b8 .\n\n\nGlobal Reward Prediction\n\nIn Mahjong, each game contains multiple rounds, e.g., 8-12 rounds in Tenhou. 3 A round starts with 13 private tiles dealt to each player, in turn players draw and discard tiles, the round ends until one of the players completes a winning hand or no tile is left in the wall, and then each player gets a round score. For example, the player who forms a winning hand gets a positive round score, and the others get zero or negative round scores. When all the rounds end, each player gets a game reward based on the rank of the accumulated round scores.\n\nPlayers receive round scores at the end of each round, and receive game rewards after 8-12 rounds. However, neither round scores nor game rewards are good signals for RL training:\n\n\u2022 Since multiple rounds in the same game share the same game reward, using game rewards as a feedback signal cannot differentiate well-played rounds and poorly-played rounds. Therefore, one should better measure the performance of each round separately.\n\n\u2022 While the round score is computed for each individual round, it may not be able to reflect the goodness of the actions, especially for top professional players. For example, in the last one or two rounds of a game, the rank-1 player with a big lead in terms of accumulated round scores will usually become more conservative, and may purposely let rank-3 or rank-4 players win this round so that he/she can safely keep rank 1 overall. That is, a negative round score may not necessarily mean a poor policy: it may sometimes reflect certain tactics and thus correspond to a fairly good policy.\n\nTherefore, to provide effective signal for RL training, we need to appropriately attribute the final game reward (a global reward) to each round of the game. For this purpose, we introduce a global reward predictor \u03a6, which predicts the final game reward given the information of the current round and all previous rounds of this game. In Suphx, the reward predictor \u03a6 is a recurrent neural network, more specifically, a two-layer gated recurrent unit (GRU) followed by two fully-connected layers, as shown in Figure 7.\n\nThe training data for this reward predictor \u03a6 come from the logs of top human players in Tenhou, and \u03a6 is trained by minimizing the following mean square error:\nmin 1 N N i=1 1 K i Ki j=1 (\u03a6(x 1 i , \u00b7 \u00b7 \u00b7 , x j i ) \u2212 R i ) 2 ,(4)\nwhere N denotes the number of games in the training data, R i denotes the final game reward of the i-th game, K i denotes the number of rounds in the i-th game, x k i denotes the feature vector of the k-th round in the i-th game, including the When \u03a6 is well trained, for a self-play game with K rounds, we use \u03a6(x k ) \u2212 \u03a6(x k\u22121 ) as the reward of the k-th round for RL training.\n\n\nOracle Guiding\n\nThere is rich hidden information in Mahjong (e.g., the private tiles of other players and the wall tiles). Without access to such hidden information, it is hard to take good actions. This is a fundamental reason why Mahjong is a difficult game. In this situation, although an agent can learn a policy by means of reinforcement learning, the learning could be very slow. To speed up the RL training, we introduce an oracle agent, which can see all the perfect information about a state: (1) private tiles of the player, (2) open (previously discarded) tiles of all the players, (3) other public information such as the accumulated round scores and Riichi bets, (4) private tiles of the other three players, and (5) the tiles in the wall. Only (1)(2) and (3) are available to the normal agent, 4 while (4) and (5) are additional \"perfect\" information that is only available to the oracle.\n\nWith the (unfair) access to the perfect information, the oracle agent will easily become a master of Mahjong after RL training. Here the challenge is how to leverage the oracle agent to guide and accelerate the training of our normal agent. According to our study, simple knowledge distillation does not work well: it is difficult for a normal agent, who only has limited information access, to mimic the behavior of a well-trained oracle agent, who is super strong and far beyond the capacity of a normal agent. Therefore, we need a smarter way to guide our normal agent with the oracle.\n\nTo this end, there might be different approaches. In Suphx, what we do is to first train the oracle agent through reinforcement learning, using all the features including the prefect ones. Then we gradually drop out the perfect features so that the oracle agent will eventually transit to a normal agent:\nL (\u03b8) = E s,a\u223c\u03c0 \u03b8 \u03c0 \u03b8 (a|[x n (s), \u03b4 t x o (s)]) \u03c0 \u03b8 (a|[x n (s), \u03b4 t x o (s)]) A \u03c0 \u03b8 ([x n (s), \u03b4 t x o (s)], a) ,(5)\nwhere x n (s) denote the normal features and x o (s) the additional perfect features of state s, and \u03b4 t is the dropout matrix at the t-th iteration whose elements are Bernoulli variables with P (\u03b4 t (i, j) = 1) = \u03b3 t . We gradually decay \u03b3 t from 1 to 0. When \u03b3 t = 0, all the prefect features are dropped out and the model transits from the oracle agent to a normal agent. After \u03b3 t becomes zero, we continue the training of the normal agent for a certain number of iterations. We adopt two tricks during the continual training. First, we decay the learning rate to one tenth. Second, we reject some state-action pairs if the importance weight is larger than a pre-defined threshold. According to our experiments, without these tricks, the continual training is not stable and does not lead to further improvements.\n\n\nParametric Monte-Carlo Policy Adaptation\n\nThe strategy of a top human player will be very different when his/her initial hand (private tiles) varies. For example, he/she will play aggressively to win more given a good initial hand, and conservatively to lose less given a poor initial hand. This is very different from previous games including Go and StarCraft. Therefore, we believe that we could build a stronger Mahjong agent if we are able to adapt the offline-trained policy in the run time.\n\nMonte-Carlo tree search (MCTS) is a well established technique in games like Go (14) for run-time performance improvement. Unfortunately, as aforementioned, the playing order of Mahjong is not fixed and it is hard to build a regular game tree. Therefore, MCTS cannot be directly applied to Mahjong. In this work, we design a new method, named parametric Monte-Carlo policy adaptation (pMCPA).\n\nWhen a round begins and the initial private hand is dealt to our agent, we adapt the offline-trained policy to this given initial hand as follows:\n\n1. Simulations: Randomly sample private tiles for the three opponents and wall tiles from the pool of tiles excluding our own private tiles, and then use the offline-trained policy to roll out and finish the whole trajectory. In total, K trajectories are generated in this way.\n\n2. Adaptation: Perform gradient updates using the rollout trajectories to finetune the offline policy.\n\n3. Inference: Use the finetuned policy to play against other players in this round.\n\nLet h denote the private hand tiles of our agent at a round, \u03b8 o denote the parameters of the policy trained off-line, and \u03b8 a the parameters of the new policy adapted to this round. Then we have\n\u03b8 a = arg max \u03b8 \u03c4 \u223c \u03b8o T (h) R(\u03c4 ) p(\u03c4 ; \u03b8) p(\u03c4 ; \u03b8 o ) ,(6)\nwhere T (h) is the set of trajectories with prefix h, and p(\u03c4 ; \u03b8) is the probability of policy \u03b8 generating trajectory \u03c4 . According to our study, the number K of simulations/trajectories does not need to be very large and pMCPA does not need to collect statistics for all the following states for this round. Since pMCPA is a parametric method, the updated policy (using the K simulations) can lead to updated estimation of those states not visited in the simulations as well. That is, such run-time adaptation can help to generalize our knowledge obtained from limited simulations to unseen states.\n\nPlease note that the policy adaptation is performed for each round independently. That is, after we adapt the policy of our agent in the current round, for the next round, we will restart from the offline-trained policy once again.\n\n\nOffline Evaluation\n\nIn this section, we report the effectiveness of each technical component of Suphx through offline experiments.\n\n\nSupervised Learning\n\nIn Suphx, the five models were first trained through supervised learning separately. Each training sample is a state-action pair collected from human professional players with state serving as the input and action serving as the label for supervised learning. For example, for the training of the discard model, the input of a sample is all the observable information (and the look-head features) of a state, and the label is the action taken by a human player, i.e., the tile discarded at this state.\n\nThe training data sizes and the test accuracy are reported in Table 3. The sizes of the validation data and test data are 10K and 50K respectively, for all the models. Since the discard model addresses a 34-class classification problem, we collected more training samples for it. As can be seen from the  \n\n\nReinforcement Learning\n\nTo demonstrate the value of each RL component in Suphx, we trained several Mahjong agents:\n\n\u2022 SL: the supervised learning agent. This agent (with all the five models) was trained in a supervised way, as illustrated in the previous subsection.\n\n\u2022 SL-weak: an under-trained version of the SL agent, which serves as opponent models while evaluating other agents.\n\n\u2022 RL-basic: the basic version of the reinforcement learning agent. In RLbasic, the discard model was initialized with the SL discard model and then boosted through the policy gradient method with round scores as reward and entropy regularization. The Riichi, Chow, Pong, and Kong models remain the same as those of the SL agent. 6\n\n\u2022 RL-1: the RL agent that enhances RL-basic with global reward prediction. The reward predictor was trained through supervised learning with human game logs from Tenhou.\n\n\u2022 RL-2: the RL agent that further enhances RL-1 with oracle guiding. Please note that in both RL-1 and RL-2, we also only trained the discard model using RL, and left the other four models the same as those of the SL agent.\n\nThe initial private tiles have large randomness and will greatly impact the win/loss of a game. To reduce the variance caused by initial private tiles, during the offline evaluation, we randomly generated one million games. Each agent plays against 3 SL-weak agents on these games. In such a setting, the evaluation of one agent took 20 Tesla K80 GPUs for two days. For the evaluation metric, we computed the stable rank of an agent following the rules of Tenhou (see Appendix C). To reduce the variance of stable rank, for each agent, we randomly sampled 800K games from the one million games, for 1000 times. Figure 8 shows the interquartile ranges 7 of stable ranks over the 1000 samplings for those agents. Note that for fair comparison, each RL agent was trained using 1.5 million games. The training of each agent costs 44 GPUs (4 Titan XP for the parameter server and 40 Tesla K80 for self-play workers) and two days. As can be seen, RL-basic leads to good improvement over SL, RL-1 outperforms RL-basic, and RL-2 brings additional gains against RL-1. These experimental results clearly demonstrate the value of reinforcement learning, as well as the additional values of global reward prediction and oracle guiding. With the global reward predictor distributing the game reward to each round, the trained agent can better maximize the final game reward instead of the round score. For example, in Figure 9, our agent (the south player) has a big lead with good hand in the last round of the game. Based on the current accumulated round scores of the four players, winning this round gets only marginal reward while losing this round will lead to a big punishment. Therefore instead of playing aggressively to win this round, our agent plays conservatively, chooses the safest tile to discard, and finally gets the first place/rank for this game. In contrast, RL-basic discards another tile to win the round, which brings a big risk of losing the 1-st rank of the entire game.\n\npercentiles, or between upper and lower quartiles, IQR = Q3 -Q1. In other words, the IQR is the first quartile subtracted from the third quartile; these quartiles can be clearly seen on a box plot on the data. It is a trimmed estimator, defined as the 25% trimmed range, and is a commonly used robust measure of scale.\" Figure 9: With global reward prediction, our agent (the south player) plays conservatively when its accumulated round score has a big lead in the last round of a game, even if its hand tiles are good and it has a certain probability to win this round. The RL-basic agent discards the red-boxed tile to win this round, but discarding this tile is risky since the same tile has not been discarded by any player in this round. In contrast, RL-1 and RL-2 agents play in a defense mode and discard the blue-boxed tile, which is a safe tile because the same tile has just been discarded by the west player.\n\n\nEvaluation of Run-Time Policy Adaptation\n\nIn addition to testing the enhancement to offline RL training, we also tested the run-time policy adaptation. The experimental setting is described as follows.\n\nWhen a round begins and the private tiles are dealt to our agent, 1. Data generation: We fix the hand tiles of our agent and simulate 100K trajectories. In each trajectory, the hand tiles of the other three players and wall tiles are randomly generated, and we use four copies of our agent to roll out and finish the trajectory.\n\n2. Policy adaptation: We fine-tune and update the policy trained offline over those 100K trajectories by using the basic policy gradient method.\n\n3. Test of the adapted policy: Our agent plays against the other three players using the updated policy on another 10K test set where the private tiles of our agent are still fixed. As the initial private tiles of our agent is fixed, the performance of the adapted agent on this test set can tell whether such run-time policy adaptation really makes our agent adapt and work better for the current private tiles.\n\nPlease note that run-time policy adaptation is time consuming due to the roll-outs and online learning. Therefore, at the current stage, we only tested this technique on hundreds of initial rounds. The wining rate of the adapted version of RL-2 against its non-adapted version is 66%, which demonstrates the advantage of run-time policy adaptation.\n\nPolicy adaption makes our agent work better for the current private hand, especially at the last 1 or 2 rounds of a game. Figure 10 shows an example of the last round of a game. Through simulations the agent learns to know that while it is easy to win this round with a nice round score, this is unfortunately not enough to avoid ending the game with the 4-th place. Thus, after adaptation, the agent plays more aggressively, takes more risks, and eventually wins the round with a much larger round score and successfully avoid ending the game with the 4-th place.\n\n\nOnline Evaluation\n\nTo evaluate the real performance of our Mahjong AI Suphx 8 , we let it play on Tenhou.net, the most popular online platform for Japanese Mahjong. Tenhou has two major rooms, the expert room and the phoenix room. The expert room is open to AI and human players of 4 dan and above, while the phoenix room is only open to human players of 7+ dan. According to this policy, Suphx can only play in the expert room.\n\nSuphx played 5000+ games in the expert room and achieved 10 dan in terms of record rank 9 and 8.74 dan in terms of stable rank. 10 It is the first and only AI in Tenhou that achieves 10 dan in terms of record rank.\n\nWe compare Suphx with several AI/human players in Table 4:\n\n\u2022 Bakuuchi (10): This is a Mahjong AI designed by the University of Tokyo based on Monte Carlo simulation and opponent modeling. It does not use reinforcement learning. 8 Suphx is equivalent to RL-2 trained with about 2.5 million games. Given that Tenhou.net has time constraint for each action, run-time policy adaptation was not integrated into Suphx while testing on Tenhou.net since it is time consuming. We believe the integration of run-time policy adaptation will further improve Suphx. 9 Record rank is the highest rank a player has ever achieved in Tenhou. As shown in Appendix B, the rank of a player is dynamic and usually changes over time. For example, if he/she does not play well recently, his/her rank will drop.\n\n10 See Appendix C for the definition of stable rank. Figure 10: In this example, to move out of the 4-th place of the game, the agent needs to win more than 12,000 round score in this round. Through simulations, the agent learns to know that discarding the red-boxed tile is easy to win this round; however, the corresponding winning round score will be less than 12,000. After adaptation, the agent discards the blue-boxed tile, which leads to lower probability of winning but more than 12,000 winning round score once it wins. By doing so, it takes risk and successfully move out of the 4-th place.\n\n\u2022 NAGA 11 : This is a Mahjong AI designed by Dwango Media Village based on deep convolutional neural networks. It does not use reinforcement learning either.\n\n\u2022 We also compare Suphx with top human players who have achieved 10 dan in terms of record rank. To be fair, we only compare their game playing in the expert room after they achieved 10 dan. Since these top human players spent the majority of their time in the phoenix room (partly due to its more friendly scoring rules) and only played occasionally in the expert room after they achieved 10 dan, we can hardly calculate a reliable stable rank for each individual of them. 12 Therefore, we treat them as one macro player to make a statistically reasonable comparison.\n\nWe can see that in terms of stable rank, Suphx is about 2 dan better than Bakuuchi and NAGA, the two best Mahjong AIs before Suphx. Although these top human players have achieved the same record rank (10 dan) as Suphx, they are not as strong as Suphx in terms of stable rank. Figure 11 plots the distributions of record ranks 13 of current active users in Tenhou, which shows that Suphx is above 99.99% human players in Tenhou.   As discussed in Appendix B, the record rank sometimes cannot reflect the true level of a player: for example, there are 100+ players with a record rank of 10 dan in Tenhou's history , but their true levels can be very different. The 12 We chose to compare with the performance of top human players according to their game playing in the expert room but not the phoenix room because these two rooms have different scoring rules and the stable ranks are not directly comparable. 13 Phoenix is a honorable title in Tenhou, when a 10-dan player gets 4000 ranking points. There are only 13 players (and 14 accounts) in Tenhou's history won this honorable title for 4-player Mahjong. stable rank is more stable (by its definition) and of finer granularity than the record rank; however, it could also be of large variance, especially when a player has not played enough number of games in Tenhou. Thus, in order to make more informative and reliable comparisons, we proceed as follows. For each AI/human player, we randomly sample K games from its/his/her logs in the expert room and compute the stable rank using those K games. We do such sampling for N times and show the statistics of the corresponding N stable ranks of each player in Figure 12. As can be seen, Suphx surpasses both the other two AIs and the average performance of top human professional players with a big margin. We further show more statistics of those AI/human players in Table 5. We have several interesting observations from the table:\n\n\u2022 Suphx is very strong at defense and has very low deal-in rate. This is confirmed by the comments from top human players on Suphx. 14 \u2022 Suphx has very low 4-th rank rate, which is the key to get a high stable rank in Tenhou according to its scoring rules.\n\nSuphx has developed its own playing styles, which are well recognized by top human players. For example, Suphx is very good at keeping safe tiles, prefers   Figure 13 is an example that Suphx keeps a safe tile to balance future attack and defense 16 .\n\n\nConclusion and Discussions\n\nSuphx is the strongest Mahjong AI system up to date, and is also the first Mahjong AI that surpassed most top human players in Tenhou.net, a famous online platform for Japanese Mahjong. Because of the complexity and unique challenges of Mahjong, we believe that even though Suphx has performed very well, there is still a lot of space for further improvement.\n\n\u2022 We introduced global reward prediction in Suphx. In the current system, the reward predictor takes limited information as its input. Clearly, more information will lead to better reward signal. For example, if a round is very easy to win due to our good luck of initial hand tiles, winning this round does not reflect the superiority of our policy and should not be rewarded too much; in contrast, winning a difficult round should be rewarded more.\n\nThat is, game difficulty should be taken into consideration while designing reward signals. We are investing how to leverage prefect information (e.g., by comparing the private initial hands of different players) to measure the difficulty of a round/game and then boost the reward predictor.\n\n\u2022 We introduced the concept of oracle guiding, and instantiated this concept using the gradual transition from an oracle agent to a normal agent by means of perfect feature dropout. In addition to this, there could be other approaches to leverage the perfect information. For one example, we can simultaneously train an oracle agent and a normal agent, let the oracle agent distill its knowledge to the normal agent while constraining the distance between these two agents. According to our preliminary experiments, this approach also works quite well. For another example, we can consider designing an oracle critic, which provides more effective 15 https://en.wikipedia.org/wiki/Japanese_Mahjong_yaku 16 Game replay can be found at https://tenhou.net/3/?log= 2019070722gm-0029-0000-3bee4a7e&tw=3. Figure 13: Suphx keeps a safe tile at state s t to balance future attack and defense. Although it is safe to discard the red-boxed tile at state s t (actually this is indeed the tile that most human players would discard), Suphx keeps this tile in hand; instead, it discards the blue-boxed tile, which might slow down the process of forming a winning hand. Doing so leads to more flexibility in future states and can better balance future attack and defense. Consider a future state s t+k in which another player declares Riichi that is unexpected to our agent. In this case, Suphx can discard the safe tile kept at state s t and does not break the winning hand it tries to form. In contrast, if Suphx discards this safe tile at state s t , it has no other safe tiles to discard at s t+k , and thus may have to break a meld or pair in its hand tiles that are close to a winning hand, consequently resulting in smaller winning probability.\n\nstate-level instant feedback (instead of round-level feedback) to accelerate the training of the policy function based on the perfect information.\n\n\u2022 For run-time policy adaptation, in the current system of Suphx, we did simulations at the beginning of each round when private tiles were dealt to our agent. Actually we can also do simulations after each tile is discarded by any player. That is, instead of only adapting the policy to the initial hands, we can continue the adaptation as the game goes on and more and more information becomes observable. Doing so should be able to further improve the performance of our policy. Moreover, since we gradually adapt our policy, we do not need too many samplings and roll-outs at each step. In other words, we can amortize the computational complexity of policy adaptation over the entire round. With this, it is even possible to use policy adaption in the online playing with affordable computational resources.\n\nSuphx is an agent that constantly learns and improves. Today's achievement of Suphx on Tenhou.net is just the beginning. Looking forward, we will introduce more novel technologies to Suphx, and continue to push the frontier of Mahjong AI and imperfect-information game playing.\n\nMost real world problems such as finance market predication and logistic optimization share the same characteristics with Mahjong rather than Go/chess -complex operation/reward rules, imperfect information, etc. We believe our techniques designed in Suphx for Mahjong, including global reward prediction, oracle guiding and parametric Monte-Carlo policy adaptation, have a great potential to benefit for a wide range of real-world applications.\n\n\nAppendix A: Rules of Mahjong\n\nMahjong is a tile-based game that was developed in China hundreds of years ago and is now popular worldwide with hundreds of millions of players. The game of Mahjong itself has numerous variations across the world, and Mahjong in different regions is different in both the rules and the tiles used. In this work, we focus on 4-player Japanese Mahjong (Riichi Mahjong) considering that Japanese Mahjong is very popular with a professional league 17 of top players in Japan and its rules (5) are clearly defined and well accepted. Since the playing/scoring rules of Japanese Mahjong are very complex and the focus of this work is not to give a comprehensive introduction to them, here we make some selections and simplifications and give a brief introduction to those rules. Comprehensive introductions can be found at Mahjong International League rules (5).\n\nThere are 136 tiles in Japanese Mahjong, consisting of 34 different kinds of tiles, with four of each kind. The 34 tiles are consists of three suit, Bamboo, Character and Dot, each from 1 to 9, and 7 different Honour tiles. A game contains multiple rounds and ends when one player loses all points, or some winning condition is triggered.\n\nEach player in a game will start with 25,000 points, and one of four players is designated as the dealer. At the beginning of each round, all the tiles are shuffled and arranged into four walls, each with 34 tiles. 52 tiles are dealt to 4 players (13 for each player as his/her private hand), 14 tiles form the dead wall, which are never played except when players declare Kongs and draw a replacement tile, and the remaining 70 tiles form the live wall. The 4 players take turns to draw and discard tiles. 18 The player who first builds a complete hand with at least one yaku wins the round and gets certain round score calculated by the rewarding rules:\n\n\u2022 A complete hand is a set of 4 melds plus a pair. A meld can be a Pong (three identical tiles), a Kong (four identical tiles), and a Chow (three consecutive simple tiles of the same suit). The pair consists of any two identical tiles, but it cannot be mixed with the four melds. A player can make a Chow/Pong/Kong from (1) a tile drawn from the wall by himself/herself, in which case this meld is concealed to others, or (2) a tile discarded by other players, in which case this meld is exposed to others. If a Kong is made from a tile drawn from the wall, it is called ClosedKong. After a player makes a Kong, he/she needs to draw an additional tile from the dead wall for replacement. A special case called AddKong converts an exposed Pong into a Kong when a player draws a tile that matches an exposed Pong he/she has.\n\n\u2022 A yaku is a certain pattern of players' tiles or a special condition. Yaku is the main factor to determine round score, and the value of yaku varies from different patterns. A winning hand could contain several different  A common list of yaku consist of 40 different types. Furthermore, dora, a special tile determined by rolling dice before drawing tiles, provides additional points as a bonus.\n\nThe last tile that a player forms a winning hand together with his/her private tiles can come from (1) a tile from the wall drawn by himself/herself or (2) a tile discarded by other players. For the first case, all other players will lose points to the winner. For the second case, the player who discards the tile will lose points to the winner.\n\nA special yaku is that player can declare Riichi when his/her hand is only one tile away from a winning hand. Once declaring a Riichi, the player can only claim winning hand from either a self-drawn tile or a tile discarded by other players, and he/she is not allowed to change his/her hand tiles any more. 19 The final ranking points a player gets from a game is determined by his/her level and the rank of his/her accumulated round score over the multiple rounds of the game, as shown in Table 6. ranking points when they win/lose ranked games. The amount earned or lost depends on the game result (which ranges from 1 to 4), the current level of the player, and the room that the player is in. There are four types of room in Tenhou, normal room, advanced room, expert room and phoenix room. The punishment (i.e., the negative ranking points) of losing a game is the same across these rooms, but the reward (i.e., the positive ranking points) of winning a game are different. The ranking system is designed to punish high-level players if he/she loses a game: a player of a higher level will lose more point for the 4-th rank of game than that of a lower-level player, e.g., -180 for a 10-dan player vs.\n\n-120 for a 6-dan player.\n\nWhen a player plays a game, he/she wins/loses some ranking points from the game, and his/her total ranking points change. If the total ranking points increase and reach the requirement of the next level, his/her rank increases 1 level; if the total ranking points decrease to 0, his/her rank decreases 1 level. When his/her rank level changes, he/she will get initial ranking points at the new level. The details of the ranking points across different rooms and levels are listed in Table 6. Therefore, the rank of a player is not stable and often change over time. We use record rank to denote the highest rank a player has ever achieved in Tenhou.\n\nFigure 1 :\n1Decision flow of Suphx.\n\nFigure 2 :\n2Example of a state. Mahjong's state contains several types of information: (1) the tile set including private tiles, open hand, and doras, (2) the sequence of discarded tiles, (3) integer features including accumulated round scores of the four players and the number of tiles left in the live wall, and (4) categorical features including round id, dealer, counters of repeat dealer, and Riichi bets.\n\nFigure 5 :\n5Structures of the Riichi, Chow, Pong, and Kong models\n\nFigure 6 :\n6Distributed RL system in Suphx state s with respect to policy \u03c0 \u03b8 .\n\nFigure 7 :\n7Reward predictor: GRU network score of this round, the current accumulated round score, the dealer position, the counters of repeat dealer and Riichi bets.\n\nFigure 8 :\n8Statistics of stable rank over one million games. The plot shows the three quartile values of a distribution along with extreme values. The \"whiskers\" extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently.\n\nFigure 11 :\n11Distributions of record ranks of human players in Tenhou. Each bar indicates the number of human players above a certain level in Tenhou.\n\nFigure 12 :\n12Statistics of stable ranks with K = 2000 and N = 5000.\n\n\nThe Draw situation: Suphx draws a tile from the wall. If its private tiles can form a winning hand with the drawn tile, the winning model decides whether to declare winning. If yes, it declares and the round is over. Otherwise, If it is an AddKong, other players may win the round using this AddKong tile. If some other player wins, the round is over; otherwise, make the AddKong and go back to the Draw situation.2. Riichi step: If the private tiles can make Riichi with the drawn tile, the Riichi model decides whether to declare Riichi. If not, go to the Discard step; otherwise, declare Riichi and then go to the Discard step.1. Kong step: If the private tiles can make an ClosedKong or AddKong \nwith the drawn tile, the Kong model decides whether to make the \nClosedKong or AddKong. If not, go to the Riichi step; otherwise, \nthere are two sub cases: \n\n(a) If it is an ClosedKong, make the ClosedKong and go back to the \nDraw situation. \n(b) 3. Discard step: The discard model chooses a tile to discard. After that, \nit is the other players' turn to take actions or the round ends with no \nwall tiles left. 1 \n\n\u2022 The Other-Discard situation: Other players discard a tile. If Suphx can \nform a winning hand with this tile, the winning model decides whether to \ndeclare winning. If yes, it declares and the round is over. Otherwise, it \nchecks whether a Chow, Pong, or Kong can be made with the discarded \ntile. If not, it is the other players' turn to take actions; otherwise, the \nChow, Pong, or Kong model decides what action to take: \n\n\n\nTable 2 :\n2Input/out dimensions of different modelsCNN Architecture \n\n3x1 conv \n256 \n\ninput \nDx34x1 \n\n3x1 conv \n256 \n\n3x1 conv \n256 \n\nRepeat 50x \n\n1x1 conv \n1 \noutput \n\n+ \n\n3x1 conv \n256 \n\ninput \nDx34x1 \n\n3x1 conv \n256 \n\n3x1 conv \n256 \n\nRepeat 50x \n\n3x1 conv \n32 \noutput \n\n+ \n\n2 layers \nof fc \n(1024, \n256) \n\nFigure 4: Structure of the discard model \n\nCNN Architecture \n\n3x1 conv \n256 \n\ninput \nDx34x1 \n\n3x1 conv \n256 \n\n3x1 conv \n256 \n\nRepeat 50x \n\n1x1 conv \n1 \noutput \n\n+ \n\n3x1 conv \n256 \n\ninput \nDx34x1 \n\n3x1 conv \n256 \n\n3x1 conv \n256 \n\nRepeat 50x \n\n3x1 conv \n32 \noutput \n\n+ \n\n2 layers \nof fc \n(1024, \n256) \n\n\n\n\ntable, we achieve an accuracy of 76.7% for the discard model, 85.7% for the Riichi model, 95.0% for the Chow model, 91.9% for the Pong model, and 94.0% for the Kong model. We also list the accuracy achieved by previous works (6) as a reference. 5Model \n\nTraining Data Size Test Accuracy Previous Accuracy (6) \nDiscard model \n15M \n76.7% \n68.8 % \nRiichi model \n5M \n85.7 % \n-\nChow model \n10M \n95.0% \n90.4% \nPong model \n10M \n91.9 % \n88.2% \nKong model \n4M \n94.0 % \n-\n\n\n\nTable 3 :\n3Results for supervised learning\n\nTable 4 :\n4Comparison with other AIs and top human players.\n\nTable 5 :\n5More statistics: rank distribution and win/deal-in rate \n\nwinning hand with half-flush 15 , etc. \n\nTable 6 :\n6Tenhou ranking systems: different levels and their requirements yaku's and the final round score will be accumulated across all the yaku's in hand. Different variations of Japanese Majong have different yaku patterns.\nA common list of different scoring patterns could be found at http://arcturus.su/wiki/ List_of_yaku\nThe number of rounds of a game is not fixed, depending on the win/loss of each round. More details can be found at https://tenhou.net/man/.\n\"Normal\" here means that the agent has no access to the perfect information.\nWe would like to point out that our numbers are not directly comparable to previous numbers due to different training/test data and model structures.\nThese four models can also be improved through reinforcement learning, although not as significant as the discard model. Therefore, to reduce training time, we inherit the SL models.7 According to Wikipedia, \"In descriptive statistics, the interquartile range (IQR) is a measure of statistical dispersion, being equal to the difference between 75-th and 25-th\nhttps://dmv.nico/ja/articles/mahjong_ai_naga/\nA quote from a pheonix human player can be found at https://twitter.com/Futokunaio_ Sota/status/1142399895577325568\nhttps://m-league.jp/18 The turns can be interrupted by a Kong/Kong and declaring a winning hand.\nhttp://mahjong.wikidot.com/riichi 20 https://en.wikipedia.org/wiki/Dan_(rank)\nhttps://tenhou.net/man/#RANKING\nAcknowledgementWe would like to sincerely thank Tsunoda Shungo and Tenhou.net for providing the expert game playing logs and online platform for our experiments. We would like to thank players on Tenhou.net for playing games with Suphx. We would like to thank MoYuan for helping us to collect the statistics of human professional players. We would also like to thank our interns Hao Zheng and Xiaohong Ji, as well as our colleagues Yatao Li, Wei Cao, Weidong Ma, and Di He for their contributions to developing the learning algorithms and training system of Suphx.Appendix B: Tenhou Ranking RulesTenhou uses the Japanese Martial Arts Ranking System 20 , which starts from rookie, 9 kyuu down to 1 kyuu, and then 1 dan up to 10 dan. Players earn/loseAppendix C: Stable RankTenhou uses stable rank to evaluate the long-term average performance of a player. The stable rank in the expert room is calculated as follows.21Let n 1 denote the number of games a player gets the highest accumulated round scores, n 4 the number of games he/she gets the lowest accumulated round scores, and n 2 and n 3 the numbers of games for the second/third highest accumulated round scores. Then the stable rank of the player in terms of dan isSince the accumulated round score of a game depends not only on the skills of the player but also on the private tiles of the four players and the wall tiles, the stable rank could be of large variance due to the randomness in the hidden information. Furthermore, when playing in Tenhou, opponents are randomly allocated by the Tenhou system, which brings in additional randomness. Thus, for a player in Tenhou, it is usually assumed that at least a few thousands of games are needed to get a relatively reliable stable rank.\nDota 2 with large scale deep reinforcement learning. Christopher Berner, Greg Brockman, Brooke Chan, Vicki Cheung, Przemys\u0142aw D\u0119biak, Christy Dennison, David Farhi, Quirin Fischer, Shariq Hashme, Chris Hesse, arXiv:1912.06680arXiv preprintChristopher Berner, Greg Brockman, Brooke Chan, Vicki Cheung, Prze- mys\u0142aw D\u0119biak, Christy Dennison, David Farhi, Quirin Fischer, Shariq Hashme, Chris Hesse, et al. Dota 2 with large scale deep reinforcement learning. arXiv preprint arXiv:1912.06680, 2019.\n\nHeads-up limit Hold'Em poker is solved. Michael Bowling, Neil Burch, Michael Johanson, Oskari Tammelin, Commun. ACM. 6011Michael Bowling, Neil Burch, Michael Johanson, and Oskari Tammelin. Heads-up limit Hold'Em poker is solved. Commun. ACM, 60(11):81-88, October 2017.\n\nSuperhuman AI for heads-up no-limit poker: Libratus beats top professionals. Noam Brown, Tuomas Sandholm, Science. 3596374Noam Brown and Tuomas Sandholm. Superhuman AI for heads-up no-limit poker: Libratus beats top professionals. Science, 359(6374):418-424, January 2018.\n\nSuperhuman ai for multiplayer poker. Noam Brown, Tuomas Sandholm, Science. 3656456Noam Brown and Tuomas Sandholm. Superhuman ai for multiplayer poker. Science, 365(6456):885-890, 2019.\n\nEuropean Mahjong Association. Rules for Japanese Mahjong. European Mahjong Association. Rules for Japanese Mahjong. http: //mahjong-europe.org/portal/images/docs/Riichi-rules-2016-EN. pdf.\n\nSupervised learning of imperfect information data in the game of mahjong via deep convolutional neural networks. Shiqi Gao, Fuminori Okuya, Yoshihiro Kawahara, Yoshimasa Tsuruoka, Information Processing Society of JapanShiqi Gao, Fuminori Okuya, Yoshihiro Kawahara, and Yoshimasa Tsuruoka. Supervised learning of imperfect information data in the game of mahjong via deep convolutional neural networks. Information Processing Society of Japan, 2018.\n\nBuilding a computer mahjong player via deep convolutional neural networks. Shiqi Gao, Fuminori Okuya, Yoshihiro Kawahara, Yoshimasa Tsuruoka, Shiqi Gao, Fuminori Okuya, Yoshihiro Kawahara, and Yoshimasa Tsuruoka. Building a computer mahjong player via deep convolutional neural networks. June 2019.\n\nMethod for constructing artificial intelligence player with abstraction to markov decision processes in multiplayer game of mahjong. Moyuru Kurita, Kunihito Hoki, Moyuru Kurita and Kunihito Hoki. Method for constructing artificial intelli- gence player with abstraction to markov decision processes in multiplayer game of mahjong. April 2019.\n\nBuilding a computer mahjong player based on monte carlo simulation and opponent models. N Mizukami, Y Tsuruoka, 2015 IEEE Conference on Computational Intelligence and Games (CIG). N Mizukami and Y Tsuruoka. Building a computer mahjong player based on monte carlo simulation and opponent models. In 2015 IEEE Conference on Computational Intelligence and Games (CIG), pages 275-283, August 2015.\n\nBuilding a computer mahjong player based on monte carlo simulation and opponent models. Naoki Mizukami, Yoshimasa Tsuruoka, 2015 IEEE Conference on Computational Intelligence and Games (CIG). IEEENaoki Mizukami and Yoshimasa Tsuruoka. Building a computer mahjong player based on monte carlo simulation and opponent models. In 2015 IEEE Conference on Computational Intelligence and Games (CIG), pages 275-283. IEEE, 2015.\n\nDeepStack: Expert-level artificial intelligence in heads-up no-limit poker. Matej Morav\u010d\u00edk, Martin Schmid, Neil Burch, Viliam Lis\u00fd, Dustin Morrill, Nolan Bard, Trevor Davis, Kevin Waugh, Michael Johanson, Michael Bowling, Science. 3566337Matej Morav\u010d\u00edk, Martin Schmid, Neil Burch, Viliam Lis\u00fd, Dustin Morrill, Nolan Bard, Trevor Davis, Kevin Waugh, Michael Johanson, and Michael Bowling. DeepStack: Expert-level artificial intelligence in heads-up no-limit poker. Science, 356(6337):508-513, May 2017.\n\nCompetitive bridge bidding with deep neural networks. Jiang Rong, Tao Qin, Bo An, Proceedings of the 18th International Conference on Autonomous Agents and MultiAgent Systems. the 18th International Conference on Autonomous Agents and MultiAgent SystemsInternational Foundation for Autonomous Agents and Multiagent SystemsJiang Rong, Tao Qin, and Bo An. Competitive bridge bidding with deep neural networks. In Proceedings of the 18th International Conference on Autonomous Agents and MultiAgent Systems, pages 16-24. International Foundation for Autonomous Agents and Multiagent Systems, 2019.\n\nMastering the game of go with deep neural networks and tree search. David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. 529David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel, and Demis Hassabis. Mastering the game of go with deep neural networks and tree search. Nature, 529(7587):484- 489, January 2016.\n\nMastering the game of go with deep neural networks and tree search. David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den, Julian Driessche, Ioannis Schrittwieser, Veda Antonoglou, Marc Panneershelvam, Lanctot, nature. 5297587484David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering the game of go with deep neural networks and tree search. nature, 529(7587):484, 2016.\n\nA general reinforcement learning algorithm that masters chess, shogi, and go through self-play. David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, Demis Hassabis, Science. 3626419David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, and Demis Hassabis. A general reinforcement learning algorithm that masters chess, shogi, and go through self-play. Science, 362(6419):1140-1144, December 2018.\n\nGeorge van den Driessche, Thore Graepel, and Demis Hassabis. David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy Lillicrap, Fan Hui, Laurent Sifre, Nature. 5507676Mastering the game of go without human knowledgeDavid Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy Lillicrap, Fan Hui, Laurent Sifre, George van den Driessche, Thore Graepel, and Demis Hassabis. Mastering the game of go without human knowledge. Nature, 550(7676):354-359, October 2017.\n\nPolicy gradient methods for reinforcement learning with function approximation. S Richard, David A Sutton, Mcallester, P Satinder, Yishay Singh, Mansour, Advances in neural information processing systems. Richard S Sutton, David A McAllester, Satinder P Singh, and Yishay Mansour. Policy gradient methods for reinforcement learning with function approximation. In Advances in neural information processing systems, pages 1057-1063, 2000.\n\nTemporal difference learning and TD-Gammon. Gerald Tesauro, Commun. ACM. 383Gerald Tesauro. Temporal difference learning and TD-Gammon. Commun. ACM, 38(3):58-68, 1995.\n\n. Shingo Tsunoda, Tenhou, Shingo Tsunoda. Tenhou. https://tenhou.net/. Accessed: 2019-6-17.\n\nNAGA: Deep learning mahjong AI. Dwango Media Village, Dwango Media Village. NAGA: Deep learning mahjong AI. https://dmv. nico/ja/articles/mahjong_ai_naga/. Accessed: 2019-6-29.\n\nGrandmaster level in starcraft ii using multi-agent reinforcement learning. Oriol Vinyals, Igor Babuschkin, Wojciech M Czarnecki, Micha\u00ebl Mathieu, Andrew Dudzik, Junyoung Chung, H David, Richard Choi, Timo Powell, Petko Ewalds, Georgiev, Nature. 5757782Oriol Vinyals, Igor Babuschkin, Wojciech M Czarnecki, Micha\u00ebl Mathieu, Andrew Dudzik, Junyoung Chung, David H Choi, Richard Powell, Timo Ewalds, Petko Georgiev, et al. Grandmaster level in starcraft ii using multi-agent reinforcement learning. Nature, 575(7782):350-354, 2019.\n", "annotations": {"author": "[{\"end\":99,\"start\":63},{\"end\":136,\"start\":100},{\"end\":172,\"start\":137},{\"end\":233,\"start\":173},{\"end\":266,\"start\":234},{\"end\":299,\"start\":267},{\"end\":334,\"start\":300},{\"end\":369,\"start\":335},{\"end\":408,\"start\":370},{\"end\":450,\"start\":409}]", "publisher": null, "author_last_name": "[{\"end\":72,\"start\":70},{\"end\":116,\"start\":108},{\"end\":145,\"start\":143},{\"end\":184,\"start\":181},{\"end\":243,\"start\":239},{\"end\":278,\"start\":274},{\"end\":307,\"start\":303},{\"end\":342,\"start\":339},{\"end\":381,\"start\":378},{\"end\":423,\"start\":420}]", "author_first_name": "[{\"end\":69,\"start\":63},{\"end\":107,\"start\":100},{\"end\":142,\"start\":137},{\"end\":180,\"start\":173},{\"end\":238,\"start\":234},{\"end\":273,\"start\":267},{\"end\":302,\"start\":300},{\"end\":338,\"start\":335},{\"end\":377,\"start\":370},{\"end\":419,\"start\":409}]", "author_affiliation": "[{\"end\":98,\"start\":74},{\"end\":135,\"start\":118},{\"end\":171,\"start\":147},{\"end\":232,\"start\":186},{\"end\":265,\"start\":245},{\"end\":298,\"start\":280},{\"end\":333,\"start\":309},{\"end\":368,\"start\":344},{\"end\":407,\"start\":383},{\"end\":449,\"start\":425}]", "title": "[{\"end\":60,\"start\":1},{\"end\":510,\"start\":451}]", "venue": null, "abstract": "[{\"end\":1667,\"start\":512}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1834,\"start\":1831},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1836,\"start\":1834},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":1839,\"start\":1836},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":1842,\"start\":1839},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":1845,\"start\":1842},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":1848,\"start\":1845},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":1851,\"start\":1848},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2094,\"start\":2090},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":2123,\"start\":2119},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2159,\"start\":2156},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4533,\"start\":4530},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":5157,\"start\":5153},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":5160,\"start\":5157},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":5203,\"start\":5200},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5205,\"start\":5203},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":5276,\"start\":5273},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5279,\"start\":5276},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5282,\"start\":5279},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5285,\"start\":5282},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":5839,\"start\":5835},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":7551,\"start\":7547},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":11262,\"start\":11261},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15815,\"start\":15814},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":18991,\"start\":18988},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31349,\"start\":31347},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":31665,\"start\":31664},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":31990,\"start\":31989},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":33462,\"start\":33460},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":34221,\"start\":34219},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":34465,\"start\":34463},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":41452,\"start\":41449},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":42304,\"start\":42302},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":44333,\"start\":44331},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":50936,\"start\":50935},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":51297,\"start\":51295}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":45944,\"start\":45908},{\"attributes\":{\"id\":\"fig_1\"},\"end\":46357,\"start\":45945},{\"attributes\":{\"id\":\"fig_3\"},\"end\":46424,\"start\":46358},{\"attributes\":{\"id\":\"fig_4\"},\"end\":46505,\"start\":46425},{\"attributes\":{\"id\":\"fig_5\"},\"end\":46674,\"start\":46506},{\"attributes\":{\"id\":\"fig_6\"},\"end\":46993,\"start\":46675},{\"attributes\":{\"id\":\"fig_7\"},\"end\":47146,\"start\":46994},{\"attributes\":{\"id\":\"fig_8\"},\"end\":47216,\"start\":47147},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":48762,\"start\":47217},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":49374,\"start\":48763},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":49840,\"start\":49375},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":49884,\"start\":49841},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":49945,\"start\":49885},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":50055,\"start\":49946},{\"attributes\":{\"id\":\"tab_13\",\"type\":\"table\"},\"end\":50285,\"start\":50056}]", "paragraph": "[{\"end\":2161,\"start\":1683},{\"end\":2525,\"start\":2163},{\"end\":3490,\"start\":2527},{\"end\":4481,\"start\":3492},{\"end\":5206,\"start\":4483},{\"end\":5345,\"start\":5208},{\"end\":5931,\"start\":5347},{\"end\":6415,\"start\":5933},{\"end\":6986,\"start\":6417},{\"end\":7465,\"start\":6988},{\"end\":7751,\"start\":7467},{\"end\":7905,\"start\":7773},{\"end\":8245,\"start\":7915},{\"end\":8318,\"start\":8247},{\"end\":8495,\"start\":8320},{\"end\":8535,\"start\":8497},{\"end\":8794,\"start\":8537},{\"end\":9288,\"start\":8797},{\"end\":10338,\"start\":9322},{\"end\":11990,\"start\":10340},{\"end\":12696,\"start\":11992},{\"end\":13392,\"start\":12719},{\"end\":13695,\"start\":13459},{\"end\":14287,\"start\":13752},{\"end\":14465,\"start\":14385},{\"end\":14650,\"start\":14467},{\"end\":15708,\"start\":14684},{\"end\":16287,\"start\":15737},{\"end\":16468,\"start\":16289},{\"end\":16723,\"start\":16470},{\"end\":17318,\"start\":16725},{\"end\":17839,\"start\":17320},{\"end\":18001,\"start\":17841},{\"end\":18450,\"start\":18071},{\"end\":19355,\"start\":18469},{\"end\":19945,\"start\":19357},{\"end\":20251,\"start\":19947},{\"end\":21188,\"start\":20371},{\"end\":21687,\"start\":21233},{\"end\":22081,\"start\":21689},{\"end\":22229,\"start\":22083},{\"end\":22508,\"start\":22231},{\"end\":22612,\"start\":22510},{\"end\":22697,\"start\":22614},{\"end\":22894,\"start\":22699},{\"end\":23557,\"start\":22956},{\"end\":23790,\"start\":23559},{\"end\":23923,\"start\":23813},{\"end\":24448,\"start\":23947},{\"end\":24755,\"start\":24450},{\"end\":24872,\"start\":24782},{\"end\":25024,\"start\":24874},{\"end\":25141,\"start\":25026},{\"end\":25473,\"start\":25143},{\"end\":25644,\"start\":25475},{\"end\":25869,\"start\":25646},{\"end\":27854,\"start\":25871},{\"end\":28776,\"start\":27856},{\"end\":28980,\"start\":28821},{\"end\":29310,\"start\":28982},{\"end\":29456,\"start\":29312},{\"end\":29870,\"start\":29458},{\"end\":30220,\"start\":29872},{\"end\":30786,\"start\":30222},{\"end\":31217,\"start\":30808},{\"end\":31433,\"start\":31219},{\"end\":31493,\"start\":31435},{\"end\":32223,\"start\":31495},{\"end\":32825,\"start\":32225},{\"end\":32984,\"start\":32827},{\"end\":33554,\"start\":32986},{\"end\":35492,\"start\":33556},{\"end\":35750,\"start\":35494},{\"end\":36003,\"start\":35752},{\"end\":36393,\"start\":36034},{\"end\":36845,\"start\":36395},{\"end\":37138,\"start\":36847},{\"end\":38877,\"start\":37140},{\"end\":39025,\"start\":38879},{\"end\":39839,\"start\":39027},{\"end\":40118,\"start\":39841},{\"end\":40564,\"start\":40120},{\"end\":41453,\"start\":40597},{\"end\":41793,\"start\":41455},{\"end\":42450,\"start\":41795},{\"end\":43274,\"start\":42452},{\"end\":43674,\"start\":43276},{\"end\":44022,\"start\":43676},{\"end\":45230,\"start\":44024},{\"end\":45256,\"start\":45232},{\"end\":45907,\"start\":45258}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":8796,\"start\":8795},{\"attributes\":{\"id\":\"formula_1\"},\"end\":13751,\"start\":13696},{\"attributes\":{\"id\":\"formula_2\"},\"end\":14384,\"start\":14288},{\"attributes\":{\"id\":\"formula_3\"},\"end\":14683,\"start\":14651},{\"attributes\":{\"id\":\"formula_4\"},\"end\":18070,\"start\":18002},{\"attributes\":{\"id\":\"formula_5\"},\"end\":20370,\"start\":20252},{\"attributes\":{\"id\":\"formula_6\"},\"end\":22955,\"start\":22895}]", "table_ref": "[{\"end\":7904,\"start\":7897},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":12178,\"start\":12171},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":24519,\"start\":24512},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":31492,\"start\":31485},{\"attributes\":{\"ref_id\":\"tab_11\"},\"end\":35434,\"start\":35427},{\"attributes\":{\"ref_id\":\"tab_13\"},\"end\":44521,\"start\":44514},{\"attributes\":{\"ref_id\":\"tab_13\"},\"end\":45748,\"start\":45741}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1681,\"start\":1669},{\"attributes\":{\"n\":\"2\"},\"end\":7771,\"start\":7754},{\"end\":7913,\"start\":7908},{\"attributes\":{\"n\":\"2.2\"},\"end\":9320,\"start\":9291},{\"attributes\":{\"n\":\"3\"},\"end\":12717,\"start\":12699},{\"attributes\":{\"n\":\"3.1\"},\"end\":13457,\"start\":13395},{\"attributes\":{\"n\":\"3.2\"},\"end\":15735,\"start\":15711},{\"attributes\":{\"n\":\"3.3\"},\"end\":18467,\"start\":18453},{\"attributes\":{\"n\":\"3.4\"},\"end\":21231,\"start\":21191},{\"attributes\":{\"n\":\"4\"},\"end\":23811,\"start\":23793},{\"attributes\":{\"n\":\"4.1\"},\"end\":23945,\"start\":23926},{\"attributes\":{\"n\":\"4.2\"},\"end\":24780,\"start\":24758},{\"attributes\":{\"n\":\"4.3\"},\"end\":28819,\"start\":28779},{\"attributes\":{\"n\":\"5\"},\"end\":30806,\"start\":30789},{\"attributes\":{\"n\":\"6\"},\"end\":36032,\"start\":36006},{\"end\":40595,\"start\":40567},{\"end\":45919,\"start\":45909},{\"end\":45956,\"start\":45946},{\"end\":46369,\"start\":46359},{\"end\":46436,\"start\":46426},{\"end\":46517,\"start\":46507},{\"end\":46686,\"start\":46676},{\"end\":47006,\"start\":46995},{\"end\":47159,\"start\":47148},{\"end\":48773,\"start\":48764},{\"end\":49851,\"start\":49842},{\"end\":49895,\"start\":49886},{\"end\":49956,\"start\":49947},{\"end\":50066,\"start\":50057}]", "table": "[{\"end\":48762,\"start\":47849},{\"end\":49374,\"start\":48815},{\"end\":49840,\"start\":49623},{\"end\":50055,\"start\":49958}]", "figure_caption": "[{\"end\":45944,\"start\":45921},{\"end\":46357,\"start\":45958},{\"end\":46424,\"start\":46371},{\"end\":46505,\"start\":46438},{\"end\":46674,\"start\":46519},{\"end\":46993,\"start\":46688},{\"end\":47146,\"start\":47009},{\"end\":47216,\"start\":47162},{\"end\":47849,\"start\":47219},{\"end\":48815,\"start\":48775},{\"end\":49623,\"start\":49377},{\"end\":49884,\"start\":49853},{\"end\":49945,\"start\":49897},{\"end\":50285,\"start\":50068}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":8650,\"start\":8642},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":9637,\"start\":9629},{\"end\":9951,\"start\":9945},{\"end\":10427,\"start\":10419},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":14854,\"start\":14846},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":17838,\"start\":17830},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":26490,\"start\":26482},{\"end\":27284,\"start\":27276},{\"end\":28184,\"start\":28176},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":30353,\"start\":30344},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":32287,\"start\":32278},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":33841,\"start\":33832},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":35228,\"start\":35219},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":35918,\"start\":35909},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":37948,\"start\":37939}]", "bib_author_first_name": "[{\"end\":53294,\"start\":53283},{\"end\":53307,\"start\":53303},{\"end\":53324,\"start\":53318},{\"end\":53336,\"start\":53331},{\"end\":53355,\"start\":53345},{\"end\":53371,\"start\":53364},{\"end\":53387,\"start\":53382},{\"end\":53401,\"start\":53395},{\"end\":53417,\"start\":53411},{\"end\":53431,\"start\":53426},{\"end\":53774,\"start\":53767},{\"end\":53788,\"start\":53784},{\"end\":53803,\"start\":53796},{\"end\":53820,\"start\":53814},{\"end\":54079,\"start\":54075},{\"end\":54093,\"start\":54087},{\"end\":54313,\"start\":54309},{\"end\":54327,\"start\":54321},{\"end\":54766,\"start\":54761},{\"end\":54780,\"start\":54772},{\"end\":54797,\"start\":54788},{\"end\":54817,\"start\":54808},{\"end\":55179,\"start\":55174},{\"end\":55193,\"start\":55185},{\"end\":55210,\"start\":55201},{\"end\":55230,\"start\":55221},{\"end\":55538,\"start\":55532},{\"end\":55555,\"start\":55547},{\"end\":55832,\"start\":55831},{\"end\":55844,\"start\":55843},{\"end\":56231,\"start\":56226},{\"end\":56251,\"start\":56242},{\"end\":56641,\"start\":56636},{\"end\":56658,\"start\":56652},{\"end\":56671,\"start\":56667},{\"end\":56685,\"start\":56679},{\"end\":56698,\"start\":56692},{\"end\":56713,\"start\":56708},{\"end\":56726,\"start\":56720},{\"end\":56739,\"start\":56734},{\"end\":56754,\"start\":56747},{\"end\":56772,\"start\":56765},{\"end\":57122,\"start\":57117},{\"end\":57132,\"start\":57129},{\"end\":57140,\"start\":57138},{\"end\":57732,\"start\":57727},{\"end\":57744,\"start\":57741},{\"end\":57757,\"start\":57752},{\"end\":57759,\"start\":57758},{\"end\":57776,\"start\":57770},{\"end\":57790,\"start\":57783},{\"end\":57804,\"start\":57798},{\"end\":57830,\"start\":57824},{\"end\":57853,\"start\":57846},{\"end\":57870,\"start\":57866},{\"end\":57891,\"start\":57887},{\"end\":57907,\"start\":57901},{\"end\":57925,\"start\":57918},{\"end\":57937,\"start\":57933},{\"end\":57947,\"start\":57944},{\"end\":57966,\"start\":57962},{\"end\":57985,\"start\":57978},{\"end\":58006,\"start\":57997},{\"end\":58019,\"start\":58014},{\"end\":58596,\"start\":58591},{\"end\":58608,\"start\":58605},{\"end\":58621,\"start\":58616},{\"end\":58623,\"start\":58622},{\"end\":58640,\"start\":58634},{\"end\":58654,\"start\":58647},{\"end\":58668,\"start\":58662},{\"end\":58684,\"start\":58678},{\"end\":58703,\"start\":58696},{\"end\":58723,\"start\":58719},{\"end\":58740,\"start\":58736},{\"end\":59164,\"start\":59159},{\"end\":59179,\"start\":59173},{\"end\":59194,\"start\":59188},{\"end\":59217,\"start\":59210},{\"end\":59237,\"start\":59230},{\"end\":59249,\"start\":59243},{\"end\":59260,\"start\":59256},{\"end\":59277,\"start\":59270},{\"end\":59293,\"start\":59285},{\"end\":59308,\"start\":59303},{\"end\":59325,\"start\":59318},{\"end\":59342,\"start\":59337},{\"end\":59358,\"start\":59353},{\"end\":59807,\"start\":59802},{\"end\":59822,\"start\":59816},{\"end\":59843,\"start\":59838},{\"end\":59861,\"start\":59854},{\"end\":59877,\"start\":59874},{\"end\":59891,\"start\":59885},{\"end\":59904,\"start\":59898},{\"end\":59918,\"start\":59913},{\"end\":59933,\"start\":59926},{\"end\":59945,\"start\":59939},{\"end\":59960,\"start\":59954},{\"end\":59974,\"start\":59967},{\"end\":59989,\"start\":59986},{\"end\":60002,\"start\":59995},{\"end\":60515,\"start\":60514},{\"end\":60530,\"start\":60525},{\"end\":60532,\"start\":60531},{\"end\":60554,\"start\":60553},{\"end\":60571,\"start\":60565},{\"end\":60923,\"start\":60917},{\"end\":61050,\"start\":61044},{\"end\":61394,\"start\":61389},{\"end\":61408,\"start\":61404},{\"end\":61429,\"start\":61421},{\"end\":61431,\"start\":61430},{\"end\":61450,\"start\":61443},{\"end\":61466,\"start\":61460},{\"end\":61483,\"start\":61475},{\"end\":61492,\"start\":61491},{\"end\":61507,\"start\":61500},{\"end\":61518,\"start\":61514},{\"end\":61532,\"start\":61527}]", "bib_author_last_name": "[{\"end\":53301,\"start\":53295},{\"end\":53316,\"start\":53308},{\"end\":53329,\"start\":53325},{\"end\":53343,\"start\":53337},{\"end\":53362,\"start\":53356},{\"end\":53380,\"start\":53372},{\"end\":53393,\"start\":53388},{\"end\":53409,\"start\":53402},{\"end\":53424,\"start\":53418},{\"end\":53437,\"start\":53432},{\"end\":53782,\"start\":53775},{\"end\":53794,\"start\":53789},{\"end\":53812,\"start\":53804},{\"end\":53829,\"start\":53821},{\"end\":54085,\"start\":54080},{\"end\":54102,\"start\":54094},{\"end\":54319,\"start\":54314},{\"end\":54336,\"start\":54328},{\"end\":54770,\"start\":54767},{\"end\":54786,\"start\":54781},{\"end\":54806,\"start\":54798},{\"end\":54826,\"start\":54818},{\"end\":55183,\"start\":55180},{\"end\":55199,\"start\":55194},{\"end\":55219,\"start\":55211},{\"end\":55239,\"start\":55231},{\"end\":55545,\"start\":55539},{\"end\":55560,\"start\":55556},{\"end\":55841,\"start\":55833},{\"end\":55853,\"start\":55845},{\"end\":56240,\"start\":56232},{\"end\":56260,\"start\":56252},{\"end\":56650,\"start\":56642},{\"end\":56665,\"start\":56659},{\"end\":56677,\"start\":56672},{\"end\":56690,\"start\":56686},{\"end\":56706,\"start\":56699},{\"end\":56718,\"start\":56714},{\"end\":56732,\"start\":56727},{\"end\":56745,\"start\":56740},{\"end\":56763,\"start\":56755},{\"end\":56780,\"start\":56773},{\"end\":57127,\"start\":57123},{\"end\":57136,\"start\":57133},{\"end\":57143,\"start\":57141},{\"end\":57739,\"start\":57733},{\"end\":57750,\"start\":57745},{\"end\":57768,\"start\":57760},{\"end\":57781,\"start\":57777},{\"end\":57796,\"start\":57791},{\"end\":57822,\"start\":57805},{\"end\":57844,\"start\":57831},{\"end\":57864,\"start\":57854},{\"end\":57885,\"start\":57871},{\"end\":57899,\"start\":57892},{\"end\":57916,\"start\":57908},{\"end\":57931,\"start\":57926},{\"end\":57942,\"start\":57938},{\"end\":57960,\"start\":57948},{\"end\":57976,\"start\":57967},{\"end\":57995,\"start\":57986},{\"end\":58012,\"start\":58007},{\"end\":58031,\"start\":58020},{\"end\":58603,\"start\":58597},{\"end\":58614,\"start\":58609},{\"end\":58632,\"start\":58624},{\"end\":58645,\"start\":58641},{\"end\":58660,\"start\":58655},{\"end\":58676,\"start\":58669},{\"end\":58694,\"start\":58685},{\"end\":58717,\"start\":58704},{\"end\":58734,\"start\":58724},{\"end\":58755,\"start\":58741},{\"end\":58764,\"start\":58757},{\"end\":59171,\"start\":59165},{\"end\":59186,\"start\":59180},{\"end\":59208,\"start\":59195},{\"end\":59228,\"start\":59218},{\"end\":59241,\"start\":59238},{\"end\":59254,\"start\":59250},{\"end\":59268,\"start\":59261},{\"end\":59283,\"start\":59278},{\"end\":59301,\"start\":59294},{\"end\":59316,\"start\":59309},{\"end\":59335,\"start\":59326},{\"end\":59351,\"start\":59343},{\"end\":59367,\"start\":59359},{\"end\":59814,\"start\":59808},{\"end\":59836,\"start\":59823},{\"end\":59852,\"start\":59844},{\"end\":59872,\"start\":59862},{\"end\":59883,\"start\":59878},{\"end\":59896,\"start\":59892},{\"end\":59911,\"start\":59905},{\"end\":59924,\"start\":59919},{\"end\":59937,\"start\":59934},{\"end\":59952,\"start\":59946},{\"end\":59965,\"start\":59961},{\"end\":59984,\"start\":59975},{\"end\":59993,\"start\":59990},{\"end\":60008,\"start\":60003},{\"end\":60523,\"start\":60516},{\"end\":60539,\"start\":60533},{\"end\":60551,\"start\":60541},{\"end\":60563,\"start\":60555},{\"end\":60577,\"start\":60572},{\"end\":60586,\"start\":60579},{\"end\":60931,\"start\":60924},{\"end\":61058,\"start\":61051},{\"end\":61066,\"start\":61060},{\"end\":61187,\"start\":61167},{\"end\":61402,\"start\":61395},{\"end\":61419,\"start\":61409},{\"end\":61441,\"start\":61432},{\"end\":61458,\"start\":61451},{\"end\":61473,\"start\":61467},{\"end\":61489,\"start\":61484},{\"end\":61498,\"start\":61493},{\"end\":61512,\"start\":61508},{\"end\":61525,\"start\":61519},{\"end\":61539,\"start\":61533},{\"end\":61549,\"start\":61541}]", "bib_entry": "[{\"attributes\":{\"doi\":\"arXiv:1912.06680\",\"id\":\"b0\"},\"end\":53725,\"start\":53230},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":3796371},\"end\":53996,\"start\":53727},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":5003977},\"end\":54270,\"start\":53998},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":195892791},\"end\":54456,\"start\":54272},{\"attributes\":{\"id\":\"b4\"},\"end\":54646,\"start\":54458},{\"attributes\":{\"id\":\"b5\"},\"end\":55097,\"start\":54648},{\"attributes\":{\"id\":\"b6\"},\"end\":55397,\"start\":55099},{\"attributes\":{\"id\":\"b7\"},\"end\":55741,\"start\":55399},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17947241},\"end\":56136,\"start\":55743},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":17947241},\"end\":56558,\"start\":56138},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1586260},\"end\":57061,\"start\":56560},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":67856252},\"end\":57657,\"start\":57063},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":515925},\"end\":58521,\"start\":57659},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":515925},\"end\":59061,\"start\":58523},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":54457125},\"end\":59739,\"start\":59063},{\"attributes\":{\"id\":\"b15\"},\"end\":60432,\"start\":59741},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":1211821},\"end\":60871,\"start\":60434},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":6023746},\"end\":61040,\"start\":60873},{\"attributes\":{\"id\":\"b18\"},\"end\":61133,\"start\":61042},{\"attributes\":{\"id\":\"b19\"},\"end\":61311,\"start\":61135},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":204972004},\"end\":61842,\"start\":61313}]", "bib_title": "[{\"end\":53765,\"start\":53727},{\"end\":54073,\"start\":53998},{\"end\":54307,\"start\":54272},{\"end\":55829,\"start\":55743},{\"end\":56224,\"start\":56138},{\"end\":56634,\"start\":56560},{\"end\":57115,\"start\":57063},{\"end\":57725,\"start\":57659},{\"end\":58589,\"start\":58523},{\"end\":59157,\"start\":59063},{\"end\":59800,\"start\":59741},{\"end\":60512,\"start\":60434},{\"end\":60915,\"start\":60873},{\"end\":61387,\"start\":61313}]", "bib_author": "[{\"end\":53303,\"start\":53283},{\"end\":53318,\"start\":53303},{\"end\":53331,\"start\":53318},{\"end\":53345,\"start\":53331},{\"end\":53364,\"start\":53345},{\"end\":53382,\"start\":53364},{\"end\":53395,\"start\":53382},{\"end\":53411,\"start\":53395},{\"end\":53426,\"start\":53411},{\"end\":53439,\"start\":53426},{\"end\":53784,\"start\":53767},{\"end\":53796,\"start\":53784},{\"end\":53814,\"start\":53796},{\"end\":53831,\"start\":53814},{\"end\":54087,\"start\":54075},{\"end\":54104,\"start\":54087},{\"end\":54321,\"start\":54309},{\"end\":54338,\"start\":54321},{\"end\":54772,\"start\":54761},{\"end\":54788,\"start\":54772},{\"end\":54808,\"start\":54788},{\"end\":54828,\"start\":54808},{\"end\":55185,\"start\":55174},{\"end\":55201,\"start\":55185},{\"end\":55221,\"start\":55201},{\"end\":55241,\"start\":55221},{\"end\":55547,\"start\":55532},{\"end\":55562,\"start\":55547},{\"end\":55843,\"start\":55831},{\"end\":55855,\"start\":55843},{\"end\":56242,\"start\":56226},{\"end\":56262,\"start\":56242},{\"end\":56652,\"start\":56636},{\"end\":56667,\"start\":56652},{\"end\":56679,\"start\":56667},{\"end\":56692,\"start\":56679},{\"end\":56708,\"start\":56692},{\"end\":56720,\"start\":56708},{\"end\":56734,\"start\":56720},{\"end\":56747,\"start\":56734},{\"end\":56765,\"start\":56747},{\"end\":56782,\"start\":56765},{\"end\":57129,\"start\":57117},{\"end\":57138,\"start\":57129},{\"end\":57145,\"start\":57138},{\"end\":57741,\"start\":57727},{\"end\":57752,\"start\":57741},{\"end\":57770,\"start\":57752},{\"end\":57783,\"start\":57770},{\"end\":57798,\"start\":57783},{\"end\":57824,\"start\":57798},{\"end\":57846,\"start\":57824},{\"end\":57866,\"start\":57846},{\"end\":57887,\"start\":57866},{\"end\":57901,\"start\":57887},{\"end\":57918,\"start\":57901},{\"end\":57933,\"start\":57918},{\"end\":57944,\"start\":57933},{\"end\":57962,\"start\":57944},{\"end\":57978,\"start\":57962},{\"end\":57997,\"start\":57978},{\"end\":58014,\"start\":57997},{\"end\":58033,\"start\":58014},{\"end\":58605,\"start\":58591},{\"end\":58616,\"start\":58605},{\"end\":58634,\"start\":58616},{\"end\":58647,\"start\":58634},{\"end\":58662,\"start\":58647},{\"end\":58678,\"start\":58662},{\"end\":58696,\"start\":58678},{\"end\":58719,\"start\":58696},{\"end\":58736,\"start\":58719},{\"end\":58757,\"start\":58736},{\"end\":58766,\"start\":58757},{\"end\":59173,\"start\":59159},{\"end\":59188,\"start\":59173},{\"end\":59210,\"start\":59188},{\"end\":59230,\"start\":59210},{\"end\":59243,\"start\":59230},{\"end\":59256,\"start\":59243},{\"end\":59270,\"start\":59256},{\"end\":59285,\"start\":59270},{\"end\":59303,\"start\":59285},{\"end\":59318,\"start\":59303},{\"end\":59337,\"start\":59318},{\"end\":59353,\"start\":59337},{\"end\":59369,\"start\":59353},{\"end\":59816,\"start\":59802},{\"end\":59838,\"start\":59816},{\"end\":59854,\"start\":59838},{\"end\":59874,\"start\":59854},{\"end\":59885,\"start\":59874},{\"end\":59898,\"start\":59885},{\"end\":59913,\"start\":59898},{\"end\":59926,\"start\":59913},{\"end\":59939,\"start\":59926},{\"end\":59954,\"start\":59939},{\"end\":59967,\"start\":59954},{\"end\":59986,\"start\":59967},{\"end\":59995,\"start\":59986},{\"end\":60010,\"start\":59995},{\"end\":60525,\"start\":60514},{\"end\":60541,\"start\":60525},{\"end\":60553,\"start\":60541},{\"end\":60565,\"start\":60553},{\"end\":60579,\"start\":60565},{\"end\":60588,\"start\":60579},{\"end\":60933,\"start\":60917},{\"end\":61060,\"start\":61044},{\"end\":61068,\"start\":61060},{\"end\":61189,\"start\":61167},{\"end\":61404,\"start\":61389},{\"end\":61421,\"start\":61404},{\"end\":61443,\"start\":61421},{\"end\":61460,\"start\":61443},{\"end\":61475,\"start\":61460},{\"end\":61491,\"start\":61475},{\"end\":61500,\"start\":61491},{\"end\":61514,\"start\":61500},{\"end\":61527,\"start\":61514},{\"end\":61541,\"start\":61527},{\"end\":61551,\"start\":61541}]", "bib_venue": "[{\"end\":53281,\"start\":53230},{\"end\":53842,\"start\":53831},{\"end\":54111,\"start\":54104},{\"end\":54345,\"start\":54338},{\"end\":54514,\"start\":54458},{\"end\":54759,\"start\":54648},{\"end\":55172,\"start\":55099},{\"end\":55530,\"start\":55399},{\"end\":55921,\"start\":55855},{\"end\":56328,\"start\":56262},{\"end\":56789,\"start\":56782},{\"end\":57237,\"start\":57145},{\"end\":58066,\"start\":58033},{\"end\":58772,\"start\":58766},{\"end\":59376,\"start\":59369},{\"end\":60016,\"start\":60010},{\"end\":60637,\"start\":60588},{\"end\":60944,\"start\":60933},{\"end\":61165,\"start\":61135},{\"end\":61557,\"start\":61551},{\"end\":57316,\"start\":57239}]"}}}, "year": 2023, "month": 12, "day": 17}