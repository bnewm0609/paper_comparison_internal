{"id": 258686311, "updated": "2023-10-05 00:42:14.164", "metadata": {"title": "Large Language Model Guided Tree-of-Thought", "authors": "[{\"first\":\"Jieyi\",\"last\":\"Long\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2023, "month": null, "day": null}, "abstract": "In this paper, we introduce the Tree-of-Thought (ToT) framework, a novel approach aimed at improving the problem-solving capabilities of auto-regressive large language models (LLMs). The ToT technique is inspired by the human mind's approach for solving complex reasoning tasks through trial and error. In this process, the human mind explores the solution space through a tree-like thought process, allowing for backtracking when necessary. To implement ToT as a software system, we augment an LLM with additional modules including a prompter agent, a checker module, a memory module, and a ToT controller. In order to solve a given problem, these modules engage in a multi-round conversation with the LLM. The memory module records the conversation and state history of the problem solving process, which allows the system to backtrack to the previous steps of the thought-process and explore other directions from there. To verify the effectiveness of the proposed technique, we implemented a ToT-based solver for the Sudoku Puzzle. Experimental results show that the ToT framework can significantly increase the success rate of Sudoku puzzle solving. Our implementation of the ToT-based Sudoku solver is available on GitHub: \\url{https://github.com/jieyilong/tree-of-thought-puzzle-solver}.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2305.08291", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2305-08291", "doi": "10.48550/arxiv.2305.08291"}}, "content": {"source": {"pdf_hash": "bda605928d6ebe4db906e69ab5d343df75918727", "pdf_src": "Arxiv", "pdf_uri": "[\"https://export.arxiv.org/pdf/2305.08291v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "26ec010f081442d13c3c625c7a24ac657cddd990", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/bda605928d6ebe4db906e69ab5d343df75918727.txt", "contents": "\nLarge Language Model Guided Tree-of-Thought\n\n\nJieyi Long jieyi@thetalabs.org \nTheta Labs, Inc. San Jose\n95128CA\n\nLarge Language Model Guided Tree-of-Thought\n\nIn this paper, we introduce the Tree-of-Thought (ToT) framework, a novel approach aimed at improving the problem-solving capabilities of auto-regressive large language models (LLMs). The ToT technique is inspired by the human mind's approach for solving complex reasoning tasks through trial and error. In this process, the human mind explores the solution space through a tree-like thought process, allowing for backtracking when necessary. To implement ToT as a software system, we augment an LLM with additional modules including a prompter agent, a checker module, a memory module, and a ToT controller. In order to solve a given problem, these modules engage in a multi-round conversation with the LLM. The memory module records the conversation and state history of the problem solving process, which allows the system to backtrack to the previous steps of the thought-process and explore other directions from there. To verify the effectiveness of the proposed technique, we implemented a ToT-based solver for the Sudoku Puzzle. Experimental results show that the ToT framework can significantly increase the success rate of Sudoku puzzle solving. Our implementation of the ToT-based Sudoku solver is available on GitHub:https://github.com/jieyilong/tree-of-thought-puzzle-solver.Preprint. Under review.\n\nIntroduction\n\nSelf-attention based auto-regressive large language models (LLMs) such as GPT-4 have recently taken the world by storm [1,2,3,4,5,6]. These LLMs excel at a variety of tasks that previously thought as extremely difficult or even impossible. For example, they are able to handle various logical and mathematical reasoning tasks, particularly those that entail \"short-range reasonings\" necessitating only a few steps to arrive at conclusions [6,7]. Such remarkable capabilities have even led to speculation that an early form of artificial general intelligence (AGI) may have already emerged [7]. However, today's LLMs still exhibit limitations in certain domains, especially for \"long-range\" reasoning tasks, where long-term planning and solution exploration are necessary [7]. When presenting a LLMs such as GPT-4 with a challenging problem solving task, especially the so called System-2 reasoning problems [8], the model does not always succeed. Although the generated answer may be indicative of the correct direction, the derivation process frequently includes logical errors. We hypothesize that there are two main contributing factors which limits the problem solving ability of LLMs:\n\nLack of correctness checking: To ensure correctness, a good practice for a human solver is to carry out verification procedures at every step of the problem-solving process, thereby ensuring the credibility of the final solution. In comparison, auto-regressive language models do not explicitly perform logical correctness checks as it generates a new token based on the previous tokens. This limits the model's capacity to rectify its own mistakes. A minor error could be amplified as the model generates more tokens, thereby leading to rapid solution quality deterioration and making it difficult to recover from mistakes.  It enhances the problem solving capability of an LLM by augmenting it with additional modules including a prompter agent, a checker module, a memory module, and a ToT controller.\n\nSolution generated linearly: As mentioned above, LLMs typically generate a token based on the preceding sequence of tokens without backward editing. On the contrary, when a human solver attempts to solve a problem, she might backtrack to previous steps if a derivation step is incorrect, or if she becomes stuck and is unable to make further progress towards arriving at the final answer. Fields Medal winner Terence Tao once shared his experiences solving hard math problems 1 : \"When I was a kid, I had a romanticized notion of mathematics, that hard problems were solved in Eureka moments of inspiration... With me, it's always, Let's try this. That gets me part of the way, or that doesn't work. Now let's try this. Oh, there's a little shortcut here... You work on it long enough and you happen to make progress towards a hard problem by a back door at some point. At the end, it's usually, oh, I've solved the problem.\" The problem solving process as he described is a tree-like thinking process, rather than a linear chain-of-thought [9]. The limitation of linear response generation is also apparent from a computational complexity perspective. The number of computation steps an auto-regressive LLM can perform is polynomial in terms of its input length. Unless P = NP holds which contradicts the widely accepted belief, there would be problems in NP that is not solvable by auto-regressive LLMs.\n\nInspired by these two shortcomings of auto-regressive LLMs, we propose a novel framework which augments an LLM with several additional modules including an automatic \"prompter agent\". This framework employs a solution search strategy we call the Tree-of-Thought (ToT 2 ). This strategy solves a problem through a multi-round conversation between the LLM and the prompter agent. Figure 1a provides a visual description of the ToT search strategy, in which the LLM plays a crucial role in guiding the search for solutions. To make it more concrete, let us assume the problem to be solved is an instance of the Sudoku puzzle. The \"root\" node represents the initial state, corresponding to when a human mind just reads through the problem description, and begins the thinking process. A blue node in the figure represents a valid partial solution, which can be used by the LLM as a basis to generate the next search step. In the context of Sudoku puzzle solving, this means presenting a partially filled Sudoku board to an LLM and letting the LLM fill in a few more cells. The rationale is that an LLM like GPT-4 has been trained on a vast amount of text corpus which includes many Sudoku puzzle solutions. Given a partially filled board, likely the LLM is able to recognize the pattern, and provide useful insights on how to proceed following the Sudoku rules. Hence, it is highly probable that a search guided by the LLM is significantly more efficient than a brute-force search. In the figure, the search steps guided by the LLM are represented by the solid arrows. However, these steps generated by the LLM are not guaranteed to be always logically correct. Thus, we introduce a \"checker module\" to perform correctness checks. In Figure 1a, a gray node with an \"X\" marker represents a \"dead-end\", i.e. a partial solution that the checker module considers as invalid. For Sudoku, this means the partially filled board violates the Sudoku rules. If the current node is invalid, obviously we need to return to a parent or an ancestor node in order to correct the mistake. This can be coordinated by a module called the \"ToT controller\" which oversees the ToT search. With the backtracking capability, the system can regenerate the solution and thus recover from errors. In addition, even when the current node is valid, if the system remains stuck at it for too long, the ToT controller could issue a backtrack signal to explore other possible solutions. This is similar to a scenario where a human mind realizes that there is no viable path towards reaching the final solution through a particular direction, prompting her to change course and explore alternative routes. This process continues until either a full solution is found (represented by a green node in the figure), or a pre-specified maximum round of conversations is reached.\n\nNote that while the above discussion utilized Sudoku solving as a tangible example to illustrate our main ideas, the ToT framework can potentially be applied to more general mathematical and logical reasoning tasks. For example, in the context of mathematical theorem proving, a full solution corresponds to the complete proof, encompassing a total of n derivation steps. On the other hand, a partial solution refers to a subset of these steps, specifically the initial k steps, where k is less than n. The checker verifies the logically correctness of a given partial proof. In parallel, the prompter agent and the ToT controller can offer hints and suggestions to the LLM, encouraging it to think about the subsequent proving step, or explore different directions for theorem proving when necessary.\n\nTo evaluate the effectiveness of the ToT framework, we implemented a ToT-based Sudoku puzzle solver and evaluate it on a suite of Sudoku puzzle benchmarks we created. As shown by the experimental results in Section 4.2, the ToT framework can significantly increase the success rate of Sudoku puzzle solving.\n\nThe remainder of the paper is organized as follows. Section 2 reviews the related literature and compared our approach with the most relevant works. Section 3 provides the details of the ToT system architecture. Section 4 describes our implementation of a ToT-based Sudoku puzzle solver and presents the experimental results. Finally, Section 5 discusses the limitation of the present work, and potential future extensions of the ToT framework.\n\n\nRelated Works\n\nDeveloping intelligent systems that can reason has long been one of the primary goals of artificial intelligence [10,11,12]. Recent advancements in large language models, particularly the discovery of their emergent properties and in-context learning abilities, have opened up a new avenue for machine reasoning [6,7,9]. It is discovered that prompting language models using chain-of-thought and other hints can elicit them to output step-by-step solutions for mathematical and logical reasoning tasks [9,13]. Building on these findings, recent studies have also explored the practice of sampling multiple solutions and using self-consistency or complexity-based criteria to determine the optimal response [14,15]. Experiments were also conducted to evaluate the performance of different prompts [15]. The self-taught reasoner (STaR) [16] is a technique which asks an LLM to generate reasoning chains and drop those producing incorrect answers. Then, the model is fine-tuned with the remaining valid reasoning chains.\n\nDespite showing high potential, these techniques often necessitate human involvement. For example, chain-of-thought style prompting techniques require carefully hand-crafted examples and is thus difficult to scale. Consequently, researchers have started to explore the possibility of automatic prompt generation. Early exploration in this domain includes AutoPrompt [17], prefix-tuning [18], and parameter-efficient prompt tuning [19]. This research direction received even more attention lately. In a recent study [20], the authors experimented with training verifiers to check if the solution provided by an LLM to an given mathematical problem is logically correct. If the trained verifier can effectively judge the LLM outputs, it would provide another avenue for prompt evaluation. Automatic prompt engineer [21] examines a method to select the best prompt from a set of model-generated candidates. The three-phase augment-prune-select method was suggested in [22]. It first generates multiple chain-of-thought candidates, which was then pruned based on whether the derived answer matches with the ground truths. Finally, a policy gradient based method was used to select the optimal combination of several rationale chains from the pool for CoT prompting.\n\nVery recently researchers have also turned their attention to augmenting LLM with additional agents for various purposes. This is also the research field that is most relevant to our current work. AutoGPT [23] is a program which combines GPT-4 with additional modules including an execution agent and a memory unit. It can chain together LLM \"thoughts\", in order to autonomously achieve whatever goal the user sets. PromptPG [24] proposes an approach that can learn to select in-context examples from a small amount of training data via policy gradient for prompt learning. The PromptPG agent learns to find optimal in-context examples from a candidate pool, with the goal of maximizing the prediction rewards on given training examples when interacting with the GPT-3 environment. DEPS [25] is a proposal that utilizes multi-step reasoning and sub-task error correction to tackle complex tasks with long-range dependencies. By being able to provide explanations for errors in sub-tasks within a trial, DEPS exhibits remarkable performance. ReAct [26] is an approach that employs emergent properties present in LLMs, such as traces of verbal reasoning, to enable agents to reason and take action, resulting in impressive performance on different text-based benchmarks. Building on top of ReAct, Reflexion [27] is an approach that equips an agent with dynamic memory and self-reflection capabilities, improving its existing reasoning trace and ability to choose task-specific actions. To achieve complete automation, a simple but effective heuristic was designed to enable the agent to identify hallucination instances and prevent repetitive action sequences. Our proposal shares some commonalities with these approaches, for example, the use of a memory module and additional agents for automatic prompt generation. However, our approach is unique in that it introduces a ToT controller which can explicitly conduct backtracking when necessary. This not only allows the system to recover from mistakes, but potentially can also enlarge the solution search space.\n\n3 Architecture\n\n\nThe Tree-of-Thought Framework\n\nFigure 1b depicts the software system that implements the ToT Framework. As mentioned earlier, it incorporates several components which enhance the problem solving capability of the LLM, including a prompter agent, a checker module, a memory module, and a ToT controller.\n\nThe problem solving process starts with the user inputting the problem description. The prompter agent then relays the problem to the LLM, with additional prompt text which encourages the LLM to come up with an intermediate solution instead of trying to reach the full solution in a single shot. After receiving the response from the LLM, the checker module is invoked to check the validity of the intermediate solution generated. If it passes the correctness check, the intermediate solution will be parsed and stored in the memory module. Then, based on the content of the memory module, the prompter agent generates a prompt to encourage the LLM to generate the next step. Conversely, if the LLM generates an invalid intermediate solution, the ToT controller will activate the prompter to offer hints to the LLM and request it to consider again. Note that in general, a valid intermediate solution does not always leads to the correct final solution. In order to prevent getting stuck, the ToT controller constantly monitors the search process and determines whether to continue trying from the current node or backtrack to a parent or an ancestor node and explore alternative directions.\n\nThe ToT strategy can be viewed as a tree-search algorithm using an LLM as a heuristic for generating the search steps. In this setting, the LLM is only used for the \"short-range reasoning\" tasks, i.e deriving the next intermediate solution, which is a type of tasks that have been shown to have a high success rate for LLMs [7]. On the other hand, by introducing the checker, the system have a higher likelihood to discover the mistakes it makes as it generates the solutions. Moreover, by allowing the system to backtrack from a valid but somewhat \"hopeless\" intermediate solution, the system is able to explore a larger solution space, which enhances the \"long-range reasoning\" capability of the system as a whole. The ToT framework thus combines the best of both world. Furthermore, this multi-round conversation technique increases the number of computation steps the system can perform. Thus, based on the time hierarchy theorem in computational complexity theory [28], the ToT framework can expand the range of problems that can potentially be solved compared to relying solely on a single round of conversation with an LLM.\n\n\nToT Modules\n\nIn this section we provide more details of the components of the ToT software system. Checker Module. The checker module can either be rule-based or implemented as a deep neural network. For problems that have an explicit polynomial time algorithm for correctness checking (i.e. problems in NP), rule-based checkers can be implemented. Numerous important mathematical and logical problems are in this category, for example, equation solving, polynomial factoring, 3SAT, and puzzles like Sudoku. With a rule-based checker, the ToT software can be viewed as a hybrid system which allows explicitly encoding prior knowledge (e.g. the Sudoku rules) into a neural network powered system. An alternative is to train and use a neural network based classifier as the checker [20]. This is especially useful for problems where a rule-based checker is difficult to implement, e.g. checking whether a mathematical proof is correct.\n\nMemory Module. The memory module can be used to store the entire conversation history between the LLM and the prompter agent, as well as other supplemental data useful for problem solving. The data stored can be served as the information source for the prompter agent to generate helpful hints for the LLM.\n\nToT Controller. The ToT controller oversees the entire ToT search. It can be implemented in a number of ways. It can be as simple as encoding two rules: 1) if the checker thinks the current partial solution is invalid, backtrack to the parent node, and 2) if the current partial solution is valid, but the ToT search tree has explored its C children and yet failed to find the final solution, then backtrack to the parent node. Here C is an pre-configured integer.\n\nA more advanced version of the ToT controller can employ a policy network to determine the backtracking policy. The network's inputs include the recent search history comprised of the sequence of the last k + 1 node visited in the search tree s i\u2212k , .., s i\u22121 , s i (k is a hyper-parameter). The network also takes in c i , a Boolean variable which indicates whether the checker module considers the current node s i is valid. We can sample from the policy to determine the next action a i :\na i \u223c \u03c0 t \u03c1 (a|c i , s i , .., s i\u2212k ), a \u2208 A cand(1)\nwhere \u03c0 t \u03c1 represents the policy network of the ToT controller with parameters \u03c1. The set of candidate actions A cand includes simply staying at the current node to generate the next step, and backtracking to the parent or an ancestor node at most L levels up in the search tree where L is a hyper-parameter. Thus, we can use one-hot encoding for the actions, where backtracking j levels up is represented by a vector where only the j th position is set to 1. The action vector a and checker output c i are processed by a feed-forward network (FFN) to for deep features extraction. A linear layer with learnable parameters W 1 and b 1 is added on top of the FFN to map its output to a vector g(a, c i ). The latest k + 1 visited nodes are concatenated into a string, and then added with position embedding (PE), and finally inputted into a self-attention model [1]. The idea is that by adding position embedding, the attention model will be able to make decisions based on the sequence of the recent node visits. A linear layer with learnable parameters W 2 and b 2 is added on top of the attention model to transform its output to a vector g(s i , .., s i\u2212k ) whose dimension matches with that of g(a, c i ). Finally, we calculate the inner-products of these two vectors, and use the softmax function to compute the probability of each action candidate:\ng(a, c i ) = W 1 \u00b7 FFN(a, c i ) + b 1 g(s i , .., s i\u2212k ) = W 2 \u00b7 Attention(PE(s i\u2212k ||..||s i\u22121 ||s i )) + b 2 \u03c0 t \u03c1 (a|c i , s i , .., s i\u2212k ) = exp(g(a, c i ) \u00b7 g(s i , .., s i\u2212k )) a \u2208A cand exp(g(a , c i ) \u00b7 g(s i , .., s i\u2212k ))(2)\nIn the above formula, \"||\" is the string concatenation operator. Section 3.3 will discuss the training algorithm for the ToT controller policy network.\n\nPrompter Agent. The prompter agent gives hints to the LLM for it to generate the next search step. The most basic hint can be a generic prompt using the following template: generic_tmpl = \"For the given problem: [problem description], we have come up with a partial solution: [partial solution summary]. Please derive the next step on top of this partial solution, and return the next step in the following JSON format {next_step: <next_step>}\". Note that the template requires the LLM to respond with a structured JSON string. This is a trick to make it easier for the checker to extract the next step from the LLM response. To create an actual prompt from this template, the prompter needs the [problem description] and the [partial solution summary], both of which can be queried from the memory module. \u03c0 w \u2190 \u03c0 t \u03c1 if epoch is even, \u03c0 p \u03b8 otherwise update the selected policy only, fix the other 7: for p i \u2208 P train do 8:\n\nr i \u2190 reward(ToTSystem(p i )) attempt to solve problem p i and obtain reward r i 9:\n\nw \u2190 w + \u03b1\u2207 w log\u03c0 w r i 10:\n\nend for 11: end for 12: end procedure Similar to the ToT controller, we can also implement the prompter agent as a policy network, which can generate prompts based on the current partial solution and the conversation history. \ne j i \u223c \u03c0 p \u03b8 (e|s i , .., s i\u2212k ), e j i \u2208 E cand for j = 1, 2, ..., l(3)\nwhere \u03c0 p \u03b8 represents the policy network of the prompter agent with parameters \u03b8. \n\nThe prompter policy network can be trained together with the ToT controller using multi-agent reinforcement learning methods. The training algorithm of the prompter's policy network is discussed in Section 3.3.\n\n\nToT System Training\n\nIn the previous sections, we have described the multi-agent ToT framework. This section dives into how we can train the agents, in particular, the policy networks of the ToT controller and the prompter agent. While there are many multi-agent reinforcement learning algorithms (MARL) proposed in the literature [29,30,31], in this work we adopt a relatively simple approach which uses a modified version of the REINFORCE algorithm [32] to train the policy networks of the ToT controller and the prompter agent directly. The more advanced MARL algorithms will be explored in the future.\n\nFirst, we define a run of the ToT system as the process where a user inputs the problem description, and the ToT system attempts to solve the problem until it thinks the problem is solved, or a prespecified maximum round of conversations is reached. Next, we define the reward r of a run: if the problem is correctly solved, then r = +1. Otherwise, if the system outputs an incorrect solution, or the maximum round of conversations is reached, then r = \u22121.\n\nAlgorithm 2 Problem Solving Using the ToT System 1: Input: problem description from the user p user , max num of conversation rounds K 2: procedure SOLVE(p user , K) 3: prompt \u2190 Prompter(p user ) 4: for round = 1, 2, .., K do 5: response \u2190 LLM(prompt) 6: result \u2190 Checker(response) 7: if result.isValidFinalSolution() then 8: return (result.solution) 9: end if 10: memory.store(result) 11: ctrl_signal \u2190 ToTController(memory) 12: prompt \u2190 Prompter(memory, ctrl_signal) 13: end for 14: return (nil) 15: end procedure\n\nThe training algorithm is provided in Algorithm 1. The algorithm takes two inputs, the training data set P train , and the number of training epochs N (Line 1-2). The two policy networks \u03c0 t \u03c1 (a i |s i , .., s i\u2212k ) and \u03c0 p \u03b8 (e i |s i , .., s i\u2212k ) are randomly initialized (Line 3-4). We train the two policy networks in turns, i.e. training one network with policy gradient while keeping the other fixed (Line 6). To be more specific, when the current epoch is an even number, we select the ToT controller policy \u03c0 t \u03c1 , and keep the parameters of the prompter agent fixed. Otherwise, we select the prompter agent policy \u03c0 p \u03b8 and fix the ToT controller policy. Next, the algorithm updates the parameters of the selected policy network using the policy gradient method (Line 7-9). For each problem in the training data, we attempt to solve it with a ToT system run. Based on the result, we obtain the reward for that run (Line 8). The entire training algorithm runs for N epochs.\n\n\nProblem Solving Using the ToT System\n\nAfter the ToT system is trained, we can use it for inference, i.e. problem solving. Algorithm 2 provides the pseudo code for solving problems using the ToT system. It starts with a user inputting description of the problem (Line 1-2). The prompter module then converts the user input into a prompt (Line 3) using a prompt template for user input, for example: user_input_prompt = \"For the given problem: [problem description], please derive the first step, and return the step in the following JSON format {next_step: <next_step>}\".\n\nNext, up to K rounds of conversations with the LLM are conducted for problem solving (Line 4). In each round, the LLM first produces a response for the given prompt (Line 5). Then, the checker analyzes the response, and returns a result (Line 6). The result contains the partial solution extracted from the LLM response, as well as information like whether the checker considers the solution as a valid final solution, a valid intermediate solution, or an invalid partial solution, etc. If the solution is a valid final solution, the algorithm simply returns it (Line 7-9). Otherwise, the result is stored in the memory module (Line 10). Based on the content of the memory module, the ToT controller issues control signals, e.g. backtracking for l levels, to the prompter (Line 11). Finally, based on the control signal, the prompter looks up the relevant information from the memory module, and produce the next prompt for the LLM (Line 12). If no valid final solution is found within K rounds of conversations, the algorithm return nil indicating it fails to solve the problem (Line 14).\n\n\nEvaluation\n\nThis section provides the evaluation methodology and experimental results for our proposed ToT framework. Our evaluation focuses on the ToT-based solver for the Sudoku problem. At the first glance, Sudoku problems seem to be just brain teasers with little practical importance. However, the generalized Sudoku problem on n 2 \u00d7 n 2 grids of n \u00d7 n blocks is known to be NP-complete [33]. If the ToT framework can solve instances of the generalized Sudoku problem (granted that it might takes an exponential number of rounds of conversations), in principle it can handle many other mathematical and logical reasoning tasks. In fact, it is straightforward to re-purpose the implementation described below to solve other puzzles, such as 3SAT, 3-coloring, etc. Below we first describe the implementation details of the solver. Then, we present the test suite used in our evaluation, as well as the experimental results.\n\n\nToT Solver for Sudoku Puzzles\n\nThe ToT-based Sudoku solver follows the generic framework described in Section 3 with some specific tweaks for the Sudoku problem. It allows a user to input a Sudoku puzzle using natural languages, for example: where * represents a cell to be filled\".\n\nWe have implemented the ToT-based Sudoku solver as described in Section 4.1 in Python. We adopted a rule-based approach for the checker module since the Sudoku rules are precise and easy to check. The memory module stores the conversation history between the prompter and the LLM, as well as a search tree which maintains all the partially filled Sudoku board the LLM has generated so far. This way, when backtracking happens, the previous board configuration can be retrieved. The ToT controller in our implementation is also rule-based. It returns to the parent node in the search tree if either the current node considered invalid by the checker, or the search algorithm has explored more than 5 children of the current node. Finally the prompter agent uses a variation of the generic template mentioned above, with the [problem description] being the initial configuration of the Sudoku board input by the user, and [partial solution summary] being the partially filled board represented by the current node in the search tree. The LLM utilized in this study is the \"gpt-3.5-turbo\" model, which is accessible through the OpenAI API suite. The temperature parameter was set to 1 in our experiments.\n\n\nExperimental Results\n\nWe have implemented four LLM-based Sudoku puzzle solvers and compared their performance: 1) zero-shot solver (zs) which directly posts the puzzle description to the LLM, 2) one-shot solver (os) which provides a chain-of-thought style step-by-step solution of a 3x3 Sudoku puzzle as an example in addition to the problem description, 3) few-shot solver (fs) which provides multiple examples with CoT-style solutions, and 4) our proposed Tree-of-Thought solver (tot). We constructed three benchmarks, comprising of ten 3x3, 4x4, and 5x5 Sudoku puzzles, respectively. The objective of a solver is to fill the n \u00d7 n Sudoku grid with digits so that each row and column contain all of the digits from 1 to n (n = 3, 4, 5 in our experiments). Here the term success rate refers to the fraction of problems in a benchmark set that are successfully solved by a solver. For example, if a solver is able to solve 4 out of 10 problems in the \"3x3 puzzles\" benchmark set, then the success rate of this solver for this benchmark set is 0.4. As expected, the zero-shot solver has the worst performance across all the three set of benchmarks. Adding CoT-style step-by-step examples significantly boosts the success rate, especially for the 3x3 puzzles. This is expected, since one can pretty much rely on \"short-range\" reasoning skills, which is a strength of the LLM models, to solve a small-sized 3x3 Sudoku puzzle, espcially when CoT-style hints are provided. However, as the puzzle size gets bigger, the success rate of the one-shot and few-shot solver dropped to around 0.5. This is because solving bigger puzzles requires trial and error, which is a capability LLMs generally lack of as discussed earlier.\n\nIn comparison, the ToT-based solver demonstrates superior performance when compared to the other solvers. For the 3x3 benchmark set, it was able to solve all the puzzles. The success rate improves by 11% compared to the second best for the two benchmark sets. For the 4x4 benchmark set, the ToT-based solver failed to find the solution for 1 out of the 10 puzzles before reaching the maximum round of conversations (which is set to 100 in our experiments). We suspect it is due to the limited capability of the rule-based ToT controller. In particular, the rule-based controller has no sense of whether the current partially-filled board can be completed without violating the Sudoku rules, which decreases the efficiency of the solution search. We expect a neural network based ToT controller will perform better, which we will verify in the future extension of this work. Despite this, the success rate of the ToT based solver is still 80% higher compared to that of the one-shot and few-shot based solvers. Finally, for the 5x5 puzzles, the ToT-based solver failed with 2 puzzles before reaching the maximum round of conversations. Nonetheless, the success rate is 60% higher compared to that of the one-shot and few-shot based solvers.\n\n\nDiscussions and Future Works\n\nIn this paper, we presented the Tree-of-Thought framework, which enhances LLMs with additional agents and memory modules, resulting in improved performance for mathematical problem-solving tasks. To evaluate the performance of this technique, we implemented a Sudoku puzzle solver based on the ToT framework. One of the limitations of the current implementation is that it utilizes a rule-based checker that contains custom logic, making it less easily adaptable to other problems. For more generic problems, for example, general mathematical and logical reasoning problems, where rule-based solution checking is difficult to implement, a future direction is to explore checkers based on neural network or other probabilistic models. Moreover, the experiments we conducted in this work also uses a rule-based ToT controller, which as we pointed out, has limited capabilities. In the future, we will implement the neural network based ToT controller which can hopefully enhance the system performance. Additionally, the policy-gradient based training algorithm proposed in this work is relatively simple and may be susceptible to training stability issues. To further optimize the ToT system, more advanced multi-agent reinforcement learning algorithms, particularly those designed for cooperative agents, could be adopted.\n\nAnother intriguing future direction is to investigate the potential of utilizing the \"self-play\" technique to enable the ToT system to develop novel problem solving strategies that are not found in the LLM's training text corpus. The self-play training method is a reinforcement learning technique which was popularized by the development of competitive game-playing agents such as AlphaGo and AlphaStar [34,35,36], where an AI agent learns to improve its own strategy by playing against itself. Today's LLMs are typically trained using self-supervised learning techniques. They may have limitations when it comes to problem-solving, as they may not be able to generate samples (i.e. novel problem solving strategies) that fall outside the distribution of the training data. In other words, they may not be able to \"think outside the box\", which is a crucial human trait that facilitates the discovery of new knowledge. Compared to self-supervised learning, self-play based reinforcement learning enables the system to access a much broader solution space beyond the provided training examples, allowing for greater improvement. AlphaGo and similar systems have demonstrated the ability to devise strategies that surpass even those of human experts. Inspired by these examples, for ToT system training, instead of relying on the training data set P train , we can introduce a \"quizzer\" module which can come up with problem descriptions on its own to train the ToT controller and the prompter agent. It is worth mentioning that one of the key enablers for training AlphaGo and similar system is that the environment reward can be precisely determined, as it is straightforward to determine whether the gameplay results in a win or a loss. The ToT framework incorporates a checker that can assess the correctness of the solution, functioning similarly to the environment, particularly for problems that have well-defined solution validation rules. Thus, the reinforcement learning training methods can be readily applied. We suspect that this self-driven learning approach, similar to the self-play method, could be an effective means of improving the ToT framework's problem-solving capabilities beyond the solution examples provided in the training text corpus for the LLMs.\n\nFigure 1 :\n1(a) Details of the Tree-of-Thought search strategy, where a solid arrow means a search step guided by the response from the LLM, and a dashed arrow indicates backtracking commanded by the ToT controller. (b) The software system implementing the Tree-of-Thought search strategy.\n\n\nInput: training set P train , num of training epochs N 2: procedure REINFORCE(P train ,\n\n\nFirst we define the prompt template as follows: prompt_tmpl = generic_tmpl || \"Here are a few examples: [in-context learning examples].\", where || is the string concatenation operator. The variable [in context learning examples] are in-context learning examples for the problem being solved, which can be picked by the prompter policy network from a set of candidates, similar to the PromptPG approach [24]. The rationale is that given the current and recently attempted intermediate solution, some in-context examples might work better than others as hints for the next step. Given the recently visited node sequence s i\u2212k , .., s i\u22121 , s i , our goal is to select l examples e i = {e 1 i , e 2 i , ..., e l i |e j i \u2208 E cand } where E cand is a pool of in-context learning example candidates. The examples are selected according on a policy:\n\n\nWith the set of selected examples, the prompter agent generates a prompt from the template: p i = prompter(prompt_tmpl, e i , s i ), which can be fed into the LLM to obtain the next intermediate solution s i+1 = LLM (p i ). The neural network architecture for the prompter's policy network is similar to that of the ToT controller. The only difference is that since the in-context examples are expressed in natural language, instead of FFN, we use an attention model to process them: h(e) = M 1 \u00b7 Attention(e) + c 1 h(s i , .., s i\u2212k ) = M 2 \u00b7 Attention(PE(s i\u2212k ||..||s i\u22121 ||s i )) + c 2 \u03c0 p \u03b8 (e|s i , .., s i\u2212k ) = exp(h(e) \u00b7 h(s i , .., s i\u2212k )) e \u2208E cand exp(h(e ) \u00b7 h(s i , .., s i\u2212k ))\n\nFigure 2 :\n2Experimental results comparing the success rate of different LLM-based Sudoku puzzle solvers across three sets of benchmarks.\n\n\n\"Please solve this 4x4 Sudoku puzzle [[3,*,*,2],[1,*,3,*],[*,1,*,3],[4,*,*,1]]\n\nFigure 2\n2compares the success rates of different LLM-based solvers across the three benchmarks.\nhttps://newsroom.ucla.edu/releases/Terence-Tao-Mozart-of-Math-72522 The word \"tot\" means a very young child, which is an interesting analogy as this work is a preliminary exploration into the potential for automated problem-solving utilizing language models.\n\n. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, Illia Polosukhin, Attention is all you needAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need, 2017.\n\nBert: Pre-training of deep bidirectional transformers for language understanding. Jacob Devlin, Ming-Wei Chang, Kenton Lee, Kristina Toutanova, Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirec- tional transformers for language understanding, 2019.\n\nImproving language understanding by generative pre-training. Alec Radford, Karthik Narasimhan, Alec Radford and Karthik Narasimhan. Improving language understanding by generative pre-training. 2018.\n\nLanguage models are unsupervised multitask learners. Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners. 2019.\n\n. Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskeverand Dario Amodei. Language models are few-shot learnersTom B. Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel M. Ziegler, Jeffrey Wu, Clemens Winter, Christopher Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCandlish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language models are few-shot learners, 2020.\n\n. Openai, Gpt-4 technical reportOpenAI. Gpt-4 technical report, 2023.\n\nS\u00e9bastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, Yi Zhang, Sparks of artificial general intelligence: Early experiments with gpt-4. S\u00e9bastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott Lundberg, Harsha Nori, Hamid Palangi, Marco Tulio Ribeiro, and Yi Zhang. Sparks of artificial general intelligence: Early experiments with gpt-4, 2023.\n\nSystems 1 and 2 thinking processes and cognitive reflection testing in medical students. Shu Tay, Paul Ryan, Anthony C Ryan, Canadian Medical Education Journal. 112016Shu Tay, Paul Ryan, and Anthony C Ryan. Systems 1 and 2 thinking processes and cognitive reflection testing in medical students. Canadian Medical Education Journal, 2016:97-103, 11 2016.\n\nChain-of-thought prompting elicits reasoning in large language models. Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed Chi, Quoc Le, Denny Zhou, Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed Chi, Quoc Le, and Denny Zhou. Chain-of-thought prompting elicits reasoning in large language models, 2023.\n\nAutomated Reasoning: Introduction and Applications. Larry Wos, Ross Overbeck, Ewing Lusk, Jim Boyle, Prentice Hall Professional Technical ReferenceLarry Wos, Ross Overbeck, Ewing Lusk, and Jim Boyle. Automated Reasoning: Introduction and Applications. Prentice Hall Professional Technical Reference, 1984.\n\nBuilding Expert Systems. Frederick Hayes-Roth, Donald A Waterman, Douglas B Lenat, Addison-Wesley Longman Publishing Co., IncUSAFrederick Hayes-Roth, Donald A. Waterman, and Douglas B. Lenat. Building Expert Systems. Addison- Wesley Longman Publishing Co., Inc., USA, 1983.\n\nRonald Fagin, Joseph Y Halpern, Yoram Moses, Moshe Y Vardi, Reasoning About Knowledge. Cambridge, MA, USAMIT PressRonald Fagin, Joseph Y. Halpern, Yoram Moses, and Moshe Y. Vardi. Reasoning About Knowledge. MIT Press, Cambridge, MA, USA, 2003.\n\nA neural network solves, explains, and generates university math problems by program synthesis and few-shot learning at human level. Iddo Drori, Sarah Zhang, Reece Shuttleworth, Leonard Tang, Albert Lu, Elizabeth Ke, Kevin Liu, Linda Chen, Sunny Tran, Newman Cheng, Roman Wang, Nikhil Singh, Taylor L Patti, Jayson Lynch, Avi Shporer, Nakul Verma, Eugene Wu, Gilbert Strang, Proceedings of the National Academy of Sciences. 11932Iddo Drori, Sarah Zhang, Reece Shuttleworth, Leonard Tang, Albert Lu, Elizabeth Ke, Kevin Liu, Linda Chen, Sunny Tran, Newman Cheng, Roman Wang, Nikhil Singh, Taylor L. Patti, Jayson Lynch, Avi Shporer, Nakul Verma, Eugene Wu, and Gilbert Strang. A neural network solves, explains, and generates university math problems by program synthesis and few-shot learning at human level. Proceedings of the National Academy of Sciences, 119(32), aug 2022.\n\nSelf-consistency improves chain of thought reasoning in language models. Xuezhi Wang, Jason Wei, Dale Schuurmans, Quoc Le, Ed Chi, Sharan Narang, Aakanksha Chowdhery, Denny Zhou, Xuezhi Wang, Jason Wei, Dale Schuurmans, Quoc Le, Ed Chi, Sharan Narang, Aakanksha Chowdhery, and Denny Zhou. Self-consistency improves chain of thought reasoning in language models, 2023.\n\nComplexity-based prompting for multi-step reasoning. Yao Fu, Hao Peng, Ashish Sabharwal, Peter Clark, Tushar Khot, Yao Fu, Hao Peng, Ashish Sabharwal, Peter Clark, and Tushar Khot. Complexity-based prompting for multi-step reasoning, 2023.\n\nEric Zelikman, Yuhuai Wu, Jesse Mu, Noah D Goodman, Star: Bootstrapping reasoning with reasoning. Eric Zelikman, Yuhuai Wu, Jesse Mu, and Noah D. Goodman. Star: Bootstrapping reasoning with reasoning, 2022.\n\nAutoprompt: Eliciting knowledge from language models with automatically generated prompts. Taylor Shin, Yasaman Razeghi, Robert L Logan, Eric Wallace, Sameer Singh, Taylor Shin, Yasaman Razeghi, Robert L. Logan IV au2, Eric Wallace, and Sameer Singh. Autoprompt: Eliciting knowledge from language models with automatically generated prompts, 2020.\n\nPrefix-tuning: Optimizing continuous prompts for generation. Lisa Xiang, Percy Li, Liang, Xiang Lisa Li and Percy Liang. Prefix-tuning: Optimizing continuous prompts for generation, 2021.\n\nThe power of scale for parameter-efficient prompt tuning. Brian Lester, Rami Al-Rfou, Noah Constant, Brian Lester, Rami Al-Rfou, and Noah Constant. The power of scale for parameter-efficient prompt tuning, 2021.\n\nTraining verifiers to solve math word problems. Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias Plappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, John Schulman, Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Mark Chen, Heewoo Jun, Lukasz Kaiser, Matthias Plappert, Jerry Tworek, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, and John Schulman. Training verifiers to solve math word problems, 2021.\n\nLarge language models are human-level prompt engineers. Yongchao Zhou, Andrei Ioan Muresanu, Ziwen Han, Keiran Paster, Silviu Pitis, Harris Chan, Jimmy Ba, Yongchao Zhou, Andrei Ioan Muresanu, Ziwen Han, Keiran Paster, Silviu Pitis, Harris Chan, and Jimmy Ba. Large language models are human-level prompt engineers, 2023.\n\nAutomatic prompt augmentation and selection with chain-of-thought from labeled data. Kashun Shum, Shizhe Diao, Tong Zhang, KaShun Shum, Shizhe Diao, and Tong Zhang. Automatic prompt augmentation and selection with chain-of-thought from labeled data, 2023.\n\nAuto-gpt: An autonomous gpt-4 experiment. Auto-gpt: An autonomous gpt-4 experiment, 2023. https://github.com/Significant-Gravitas/ Auto-GPT.\n\nDynamic prompt learning via policy gradient for semi-structured mathematical reasoning. Pan Lu, Liang Qiu, Kai-Wei Chang, Ying Nian Wu, Song-Chun Zhu, Tanmay Rajpurohit, Peter Clark, Ashwin Kalyan, Pan Lu, Liang Qiu, Kai-Wei Chang, Ying Nian Wu, Song-Chun Zhu, Tanmay Rajpurohit, Peter Clark, and Ashwin Kalyan. Dynamic prompt learning via policy gradient for semi-structured mathematical reasoning, 2023.\n\nDescribe, explain, plan and select: Interactive planning with large language models enables open-world multi-task agents. Zihao Wang, Shaofei Cai, Anji Liu, Xiaojian Ma, Yitao Liang, Zihao Wang, Shaofei Cai, Anji Liu, Xiaojian Ma, and Yitao Liang. Describe, explain, plan and select: Interactive planning with large language models enables open-world multi-task agents, 2023.\n\nReact: Synergizing reasoning and acting in language models. Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, Yuan Cao, Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models, 2023.\n\nReflexion: an autonomous agent with dynamic memory and self-reflection. Noah Shinn, Beck Labash, Ashwin Gopinath, Noah Shinn, Beck Labash, and Ashwin Gopinath. Reflexion: an autonomous agent with dynamic memory and self-reflection, 2023.\n\nOn the computational complexity of algorithms. Juris Hartmanis, R Stearns, Transactions of The American Mathematical Society -TRANS AMER MATH SOC. 117Juris Hartmanis and R. Stearns. On the computational complexity of algorithms. Transactions of The American Mathematical Society -TRANS AMER MATH SOC, 117:285-285, 05 1965.\n\nDeep reinforcement learning for multiagent systems: A review of challenges, solutions, and applications. Thanh Nguyen, Ngoc Duy Nguyen, Saeid Nahavandi, IEEE Transactions on Cybernetics. 032020Thanh Nguyen, Ngoc Duy Nguyen, and Saeid Nahavandi. Deep reinforcement learning for multiagent systems: A review of challenges, solutions, and applications. IEEE Transactions on Cybernetics, PP:1-14, 03 2020.\n\nA review of cooperative multi-agent deep reinforcement learning. Afshin Oroojlooyjadid, Davood Hajinezhad, Afshin OroojlooyJadid and Davood Hajinezhad. A review of cooperative multi-agent deep reinforcement learning, 2021.\n\nMulti-agent reinforcement learning: A selective overview of theories and algorithms. Kaiqing Zhang, Zhuoran Yang, Tamer Ba\u015far, Kaiqing Zhang, Zhuoran Yang, and Tamer Ba\u015far. Multi-agent reinforcement learning: A selective overview of theories and algorithms, 2021.\n\nPolicy gradient methods for reinforcement learning with function approximation. Richard S Sutton, David Mcallester, Satinder Singh, Yishay Mansour, Proceedings of the 12th International Conference on Neural Information Processing Systems, NIPS'99. the 12th International Conference on Neural Information Processing Systems, NIPS'99Cambridge, MA, USAMIT PressRichard S. Sutton, David McAllester, Satinder Singh, and Yishay Mansour. Policy gradient methods for reinforcement learning with function approximation. In Proceedings of the 12th International Conference on Neural Information Processing Systems, NIPS'99, page 1057-1063, Cambridge, MA, USA, 1999. MIT Press.\n\nReducing the generalised sudoku problem to the hamiltonian cycle problem. Michael Haythorpe, Michael Haythorpe. Reducing the generalised sudoku problem to the hamiltonian cycle problem, 2016.\n\nMastering the game of go with deep neural networks and tree search. David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den, Julian Driessche, Ioannis Schrittwieser, Veda Antonoglou, Marc Panneershelvam, Lanctot, Nature. 5297587David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering the game of go with deep neural networks and tree search. Nature, 529(7587):484-489, 2016.\n\nMastering chess and shogi by self-play with a general reinforcement learning algorithm. David Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, and Demis HassabisDavid Silver, Thomas Hubert, Julian Schrittwieser, Ioannis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanctot, Laurent Sifre, Dharshan Kumaran, Thore Graepel, Timothy Lillicrap, Karen Simonyan, and Demis Hassabis. Mastering chess and shogi by self-play with a general reinforcement learning algorithm, 2017.\n\nGrandmaster level in starcraft ii using multi-agent reinforcement learning. Oriol Vinyals, Igor Babuschkin, Wojciech Czarnecki, Micha\u00ebl Mathieu, Andrew Dudzik, Junyoung Chung, David Choi, Richard Powell, Timo Ewalds, Petko Georgiev, Junhyuk Oh, Dan Horgan, Manuel Kroiss, Nature. Ivo Danihelka, Aja Huang, Laurent Sifre, Trevor Cai, John Agapiou, Max Jaderberg, and David Silver112019Oriol Vinyals, Igor Babuschkin, Wojciech Czarnecki, Micha\u00ebl Mathieu, Andrew Dudzik, Junyoung Chung, David Choi, Richard Powell, Timo Ewalds, Petko Georgiev, Junhyuk Oh, Dan Horgan, Manuel Kroiss, Ivo Danihelka, Aja Huang, Laurent Sifre, Trevor Cai, John Agapiou, Max Jaderberg, and David Silver. Grandmaster level in starcraft ii using multi-agent reinforcement learning. Nature, 575, 11 2019.\n", "annotations": {"author": "[{\"end\":113,\"start\":47}]", "publisher": null, "author_last_name": "[{\"end\":57,\"start\":53}]", "author_first_name": "[{\"end\":52,\"start\":47}]", "author_affiliation": "[{\"end\":112,\"start\":79}]", "title": "[{\"end\":44,\"start\":1},{\"end\":157,\"start\":114}]", "venue": null, "abstract": "[{\"end\":1469,\"start\":159}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1607,\"start\":1604},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1609,\"start\":1607},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1611,\"start\":1609},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1613,\"start\":1611},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1615,\"start\":1613},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1617,\"start\":1615},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1927,\"start\":1924},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1929,\"start\":1927},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2077,\"start\":2074},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2259,\"start\":2256},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2395,\"start\":2392},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4526,\"start\":4523},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":9419,\"start\":9415},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":9422,\"start\":9419},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9425,\"start\":9422},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":9617,\"start\":9614},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9619,\"start\":9617},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":9621,\"start\":9619},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":9807,\"start\":9804},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":9810,\"start\":9807},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":10012,\"start\":10008},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":10015,\"start\":10012},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":10102,\"start\":10098},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":10140,\"start\":10136},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":10691,\"start\":10687},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":10711,\"start\":10707},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":10755,\"start\":10751},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10840,\"start\":10836},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":11138,\"start\":11134},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":11290,\"start\":11286},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":11793,\"start\":11789},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12013,\"start\":12009},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":12375,\"start\":12371},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":12635,\"start\":12631},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":12893,\"start\":12889},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":15489,\"start\":15486},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":16135,\"start\":16131},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":17079,\"start\":17075},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":19416,\"start\":19413},{\"end\":21199,\"start\":21197},{\"end\":21350,\"start\":21347},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":22274,\"start\":22270},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":22277,\"start\":22274},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":22280,\"start\":22277},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":22394,\"start\":22390},{\"end\":23172,\"start\":23170},{\"end\":23202,\"start\":23200},{\"end\":23232,\"start\":23230},{\"end\":23258,\"start\":23256},{\"end\":23288,\"start\":23286},{\"end\":23329,\"start\":23327},{\"end\":23357,\"start\":23355},{\"end\":23368,\"start\":23365},{\"end\":23393,\"start\":23390},{\"end\":23433,\"start\":23430},{\"end\":23476,\"start\":23473},{\"end\":23488,\"start\":23485},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":26567,\"start\":26563},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":33310,\"start\":33306},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":33313,\"start\":33310},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":33316,\"start\":33313},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":37486,\"start\":37485}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":35468,\"start\":35178},{\"attributes\":{\"id\":\"fig_2\"},\"end\":35558,\"start\":35469},{\"attributes\":{\"id\":\"fig_3\"},\"end\":36404,\"start\":35559},{\"attributes\":{\"id\":\"fig_4\"},\"end\":37100,\"start\":36405},{\"attributes\":{\"id\":\"fig_5\"},\"end\":37239,\"start\":37101},{\"attributes\":{\"id\":\"fig_6\"},\"end\":37320,\"start\":37240},{\"attributes\":{\"id\":\"fig_7\"},\"end\":37418,\"start\":37321}]", "paragraph": "[{\"end\":2674,\"start\":1485},{\"end\":3480,\"start\":2676},{\"end\":4887,\"start\":3482},{\"end\":7726,\"start\":4889},{\"end\":8529,\"start\":7728},{\"end\":8838,\"start\":8531},{\"end\":9284,\"start\":8840},{\"end\":10319,\"start\":9302},{\"end\":11582,\"start\":10321},{\"end\":13646,\"start\":11584},{\"end\":13662,\"start\":13648},{\"end\":13967,\"start\":13696},{\"end\":15160,\"start\":13969},{\"end\":16292,\"start\":15162},{\"end\":17228,\"start\":16308},{\"end\":17536,\"start\":17230},{\"end\":18002,\"start\":17538},{\"end\":18496,\"start\":18004},{\"end\":19906,\"start\":18551},{\"end\":20295,\"start\":20144},{\"end\":21223,\"start\":20297},{\"end\":21308,\"start\":21225},{\"end\":21337,\"start\":21310},{\"end\":21565,\"start\":21339},{\"end\":21724,\"start\":21641},{\"end\":21936,\"start\":21726},{\"end\":22544,\"start\":21960},{\"end\":23002,\"start\":22546},{\"end\":23519,\"start\":23004},{\"end\":24504,\"start\":23521},{\"end\":25077,\"start\":24545},{\"end\":26168,\"start\":25079},{\"end\":27097,\"start\":26183},{\"end\":27382,\"start\":27131},{\"end\":28585,\"start\":27384},{\"end\":30304,\"start\":28610},{\"end\":31545,\"start\":30306},{\"end\":32900,\"start\":31578},{\"end\":35177,\"start\":32902}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":18550,\"start\":18497},{\"attributes\":{\"id\":\"formula_1\"},\"end\":20143,\"start\":19907},{\"attributes\":{\"id\":\"formula_2\"},\"end\":21640,\"start\":21566}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1483,\"start\":1471},{\"attributes\":{\"n\":\"2\"},\"end\":9300,\"start\":9287},{\"attributes\":{\"n\":\"3.1\"},\"end\":13694,\"start\":13665},{\"attributes\":{\"n\":\"3.2\"},\"end\":16306,\"start\":16295},{\"attributes\":{\"n\":\"3.3\"},\"end\":21958,\"start\":21939},{\"attributes\":{\"n\":\"3.4\"},\"end\":24543,\"start\":24507},{\"attributes\":{\"n\":\"4\"},\"end\":26181,\"start\":26171},{\"attributes\":{\"n\":\"4.1\"},\"end\":27129,\"start\":27100},{\"attributes\":{\"n\":\"4.2\"},\"end\":28608,\"start\":28588},{\"attributes\":{\"n\":\"5\"},\"end\":31576,\"start\":31548},{\"end\":35189,\"start\":35179},{\"end\":37112,\"start\":37102},{\"end\":37330,\"start\":37322}]", "table": null, "figure_caption": "[{\"end\":35468,\"start\":35191},{\"end\":35558,\"start\":35471},{\"end\":36404,\"start\":35561},{\"end\":37100,\"start\":36407},{\"end\":37239,\"start\":37114},{\"end\":37320,\"start\":37242},{\"end\":37418,\"start\":37332}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":5276,\"start\":5267},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":6628,\"start\":6619}]", "bib_author_first_name": "[{\"end\":37687,\"start\":37681},{\"end\":37701,\"start\":37697},{\"end\":37715,\"start\":37711},{\"end\":37729,\"start\":37724},{\"end\":37746,\"start\":37741},{\"end\":37759,\"start\":37754},{\"end\":37761,\"start\":37760},{\"end\":37775,\"start\":37769},{\"end\":37789,\"start\":37784},{\"end\":38074,\"start\":38069},{\"end\":38091,\"start\":38083},{\"end\":38105,\"start\":38099},{\"end\":38119,\"start\":38111},{\"end\":38353,\"start\":38349},{\"end\":38370,\"start\":38363},{\"end\":38545,\"start\":38541},{\"end\":38559,\"start\":38555},{\"end\":38569,\"start\":38564},{\"end\":38582,\"start\":38577},{\"end\":38594,\"start\":38589},{\"end\":38607,\"start\":38603},{\"end\":38766,\"start\":38763},{\"end\":38768,\"start\":38767},{\"end\":38784,\"start\":38776},{\"end\":38795,\"start\":38791},{\"end\":38810,\"start\":38803},{\"end\":38825,\"start\":38820},{\"end\":38842,\"start\":38834},{\"end\":38859,\"start\":38853},{\"end\":38879,\"start\":38873},{\"end\":38893,\"start\":38887},{\"end\":38908,\"start\":38902},{\"end\":38925,\"start\":38917},{\"end\":38940,\"start\":38935},{\"end\":38963,\"start\":38955},{\"end\":38976,\"start\":38973},{\"end\":38992,\"start\":38987},{\"end\":39006,\"start\":39000},{\"end\":39021,\"start\":39015},{\"end\":39023,\"start\":39022},{\"end\":39040,\"start\":39033},{\"end\":39052,\"start\":39045},{\"end\":39072,\"start\":39061},{\"end\":39084,\"start\":39080},{\"end\":39095,\"start\":39091},{\"end\":39111,\"start\":39104},{\"end\":39888,\"start\":39879},{\"end\":39902,\"start\":39897},{\"end\":39924,\"start\":39919},{\"end\":39940,\"start\":39932},{\"end\":39953,\"start\":39949},{\"end\":39966,\"start\":39963},{\"end\":39979,\"start\":39974},{\"end\":39992,\"start\":39985},{\"end\":40005,\"start\":39998},{\"end\":40015,\"start\":40010},{\"end\":40032,\"start\":40026},{\"end\":40044,\"start\":40039},{\"end\":40059,\"start\":40054},{\"end\":40065,\"start\":40060},{\"end\":40077,\"start\":40075},{\"end\":40540,\"start\":40537},{\"end\":40550,\"start\":40546},{\"end\":40566,\"start\":40557},{\"end\":40879,\"start\":40874},{\"end\":40891,\"start\":40885},{\"end\":40902,\"start\":40898},{\"end\":40922,\"start\":40915},{\"end\":40935,\"start\":40930},{\"end\":40947,\"start\":40944},{\"end\":40955,\"start\":40953},{\"end\":40965,\"start\":40961},{\"end\":40975,\"start\":40970},{\"end\":41229,\"start\":41224},{\"end\":41239,\"start\":41235},{\"end\":41255,\"start\":41250},{\"end\":41265,\"start\":41262},{\"end\":41513,\"start\":41504},{\"end\":41532,\"start\":41526},{\"end\":41534,\"start\":41533},{\"end\":41552,\"start\":41545},{\"end\":41554,\"start\":41553},{\"end\":41760,\"start\":41754},{\"end\":41774,\"start\":41768},{\"end\":41776,\"start\":41775},{\"end\":41791,\"start\":41786},{\"end\":41804,\"start\":41799},{\"end\":41806,\"start\":41805},{\"end\":42136,\"start\":42132},{\"end\":42149,\"start\":42144},{\"end\":42162,\"start\":42157},{\"end\":42184,\"start\":42177},{\"end\":42197,\"start\":42191},{\"end\":42211,\"start\":42202},{\"end\":42221,\"start\":42216},{\"end\":42232,\"start\":42227},{\"end\":42244,\"start\":42239},{\"end\":42257,\"start\":42251},{\"end\":42270,\"start\":42265},{\"end\":42283,\"start\":42277},{\"end\":42297,\"start\":42291},{\"end\":42299,\"start\":42298},{\"end\":42313,\"start\":42307},{\"end\":42324,\"start\":42321},{\"end\":42339,\"start\":42334},{\"end\":42353,\"start\":42347},{\"end\":42365,\"start\":42358},{\"end\":42956,\"start\":42950},{\"end\":42968,\"start\":42963},{\"end\":42978,\"start\":42974},{\"end\":42995,\"start\":42991},{\"end\":43002,\"start\":43000},{\"end\":43014,\"start\":43008},{\"end\":43032,\"start\":43023},{\"end\":43049,\"start\":43044},{\"end\":43302,\"start\":43299},{\"end\":43310,\"start\":43307},{\"end\":43323,\"start\":43317},{\"end\":43340,\"start\":43335},{\"end\":43354,\"start\":43348},{\"end\":43491,\"start\":43487},{\"end\":43508,\"start\":43502},{\"end\":43518,\"start\":43513},{\"end\":43527,\"start\":43523},{\"end\":43529,\"start\":43528},{\"end\":43792,\"start\":43786},{\"end\":43806,\"start\":43799},{\"end\":43822,\"start\":43816},{\"end\":43824,\"start\":43823},{\"end\":43836,\"start\":43832},{\"end\":43852,\"start\":43846},{\"end\":44109,\"start\":44105},{\"end\":44122,\"start\":44117},{\"end\":44296,\"start\":44291},{\"end\":44309,\"start\":44305},{\"end\":44323,\"start\":44319},{\"end\":44498,\"start\":44494},{\"end\":44512,\"start\":44506},{\"end\":44531,\"start\":44523},{\"end\":44546,\"start\":44542},{\"end\":44559,\"start\":44553},{\"end\":44571,\"start\":44565},{\"end\":44588,\"start\":44580},{\"end\":44604,\"start\":44599},{\"end\":44618,\"start\":44613},{\"end\":44636,\"start\":44627},{\"end\":44656,\"start\":44645},{\"end\":44668,\"start\":44664},{\"end\":44987,\"start\":44979},{\"end\":45000,\"start\":44994},{\"end\":45005,\"start\":45001},{\"end\":45021,\"start\":45016},{\"end\":45033,\"start\":45027},{\"end\":45048,\"start\":45042},{\"end\":45062,\"start\":45056},{\"end\":45074,\"start\":45069},{\"end\":45337,\"start\":45331},{\"end\":45350,\"start\":45344},{\"end\":45361,\"start\":45357},{\"end\":45736,\"start\":45733},{\"end\":45746,\"start\":45741},{\"end\":45759,\"start\":45752},{\"end\":45771,\"start\":45767},{\"end\":45776,\"start\":45772},{\"end\":45790,\"start\":45781},{\"end\":45802,\"start\":45796},{\"end\":45820,\"start\":45815},{\"end\":45834,\"start\":45828},{\"end\":46179,\"start\":46174},{\"end\":46193,\"start\":46186},{\"end\":46203,\"start\":46199},{\"end\":46217,\"start\":46209},{\"end\":46227,\"start\":46222},{\"end\":46495,\"start\":46489},{\"end\":46508,\"start\":46501},{\"end\":46519,\"start\":46515},{\"end\":46527,\"start\":46524},{\"end\":46537,\"start\":46532},{\"end\":46554,\"start\":46547},{\"end\":46571,\"start\":46567},{\"end\":46812,\"start\":46808},{\"end\":46824,\"start\":46820},{\"end\":46839,\"start\":46833},{\"end\":47027,\"start\":47022},{\"end\":47040,\"start\":47039},{\"end\":47409,\"start\":47404},{\"end\":47422,\"start\":47418},{\"end\":47426,\"start\":47423},{\"end\":47440,\"start\":47435},{\"end\":47773,\"start\":47767},{\"end\":47796,\"start\":47790},{\"end\":48018,\"start\":48011},{\"end\":48033,\"start\":48026},{\"end\":48045,\"start\":48040},{\"end\":48278,\"start\":48271},{\"end\":48280,\"start\":48279},{\"end\":48294,\"start\":48289},{\"end\":48315,\"start\":48307},{\"end\":48329,\"start\":48323},{\"end\":48940,\"start\":48933},{\"end\":49125,\"start\":49120},{\"end\":49137,\"start\":49134},{\"end\":49150,\"start\":49145},{\"end\":49152,\"start\":49151},{\"end\":49169,\"start\":49163},{\"end\":49183,\"start\":49176},{\"end\":49197,\"start\":49191},{\"end\":49213,\"start\":49207},{\"end\":49232,\"start\":49225},{\"end\":49252,\"start\":49248},{\"end\":49269,\"start\":49265},{\"end\":49686,\"start\":49681},{\"end\":49701,\"start\":49695},{\"end\":49716,\"start\":49710},{\"end\":49739,\"start\":49732},{\"end\":49759,\"start\":49752},{\"end\":49771,\"start\":49765},{\"end\":49782,\"start\":49778},{\"end\":49799,\"start\":49792},{\"end\":49815,\"start\":49807},{\"end\":49830,\"start\":49825},{\"end\":49847,\"start\":49840},{\"end\":49864,\"start\":49859},{\"end\":50283,\"start\":50278},{\"end\":50297,\"start\":50293},{\"end\":50318,\"start\":50310},{\"end\":50337,\"start\":50330},{\"end\":50353,\"start\":50347},{\"end\":50370,\"start\":50362},{\"end\":50383,\"start\":50378},{\"end\":50397,\"start\":50390},{\"end\":50410,\"start\":50406},{\"end\":50424,\"start\":50419},{\"end\":50442,\"start\":50435},{\"end\":50450,\"start\":50447},{\"end\":50465,\"start\":50459}]", "bib_author_last_name": "[{\"end\":37695,\"start\":37688},{\"end\":37709,\"start\":37702},{\"end\":37722,\"start\":37716},{\"end\":37739,\"start\":37730},{\"end\":37752,\"start\":37747},{\"end\":37767,\"start\":37762},{\"end\":37782,\"start\":37776},{\"end\":37800,\"start\":37790},{\"end\":38081,\"start\":38075},{\"end\":38097,\"start\":38092},{\"end\":38109,\"start\":38106},{\"end\":38129,\"start\":38120},{\"end\":38361,\"start\":38354},{\"end\":38381,\"start\":38371},{\"end\":38553,\"start\":38546},{\"end\":38562,\"start\":38560},{\"end\":38575,\"start\":38570},{\"end\":38587,\"start\":38583},{\"end\":38601,\"start\":38595},{\"end\":38617,\"start\":38608},{\"end\":38774,\"start\":38769},{\"end\":38789,\"start\":38785},{\"end\":38801,\"start\":38796},{\"end\":38818,\"start\":38811},{\"end\":38832,\"start\":38826},{\"end\":38851,\"start\":38843},{\"end\":38871,\"start\":38860},{\"end\":38885,\"start\":38880},{\"end\":38900,\"start\":38894},{\"end\":38915,\"start\":38909},{\"end\":38933,\"start\":38926},{\"end\":38953,\"start\":38941},{\"end\":38971,\"start\":38964},{\"end\":38985,\"start\":38977},{\"end\":38998,\"start\":38993},{\"end\":39013,\"start\":39007},{\"end\":39031,\"start\":39024},{\"end\":39043,\"start\":39041},{\"end\":39059,\"start\":39053},{\"end\":39078,\"start\":39073},{\"end\":39089,\"start\":39085},{\"end\":39102,\"start\":39096},{\"end\":39118,\"start\":39112},{\"end\":39816,\"start\":39810},{\"end\":39895,\"start\":39889},{\"end\":39917,\"start\":39903},{\"end\":39930,\"start\":39925},{\"end\":39947,\"start\":39941},{\"end\":39961,\"start\":39954},{\"end\":39972,\"start\":39967},{\"end\":39983,\"start\":39980},{\"end\":39996,\"start\":39993},{\"end\":40008,\"start\":40006},{\"end\":40024,\"start\":40016},{\"end\":40037,\"start\":40033},{\"end\":40052,\"start\":40045},{\"end\":40073,\"start\":40066},{\"end\":40083,\"start\":40078},{\"end\":40544,\"start\":40541},{\"end\":40555,\"start\":40551},{\"end\":40571,\"start\":40567},{\"end\":40883,\"start\":40880},{\"end\":40896,\"start\":40892},{\"end\":40913,\"start\":40903},{\"end\":40928,\"start\":40923},{\"end\":40942,\"start\":40936},{\"end\":40951,\"start\":40948},{\"end\":40959,\"start\":40956},{\"end\":40968,\"start\":40966},{\"end\":40980,\"start\":40976},{\"end\":41233,\"start\":41230},{\"end\":41248,\"start\":41240},{\"end\":41260,\"start\":41256},{\"end\":41271,\"start\":41266},{\"end\":41524,\"start\":41514},{\"end\":41543,\"start\":41535},{\"end\":41560,\"start\":41555},{\"end\":41766,\"start\":41761},{\"end\":41784,\"start\":41777},{\"end\":41797,\"start\":41792},{\"end\":41812,\"start\":41807},{\"end\":42142,\"start\":42137},{\"end\":42155,\"start\":42150},{\"end\":42175,\"start\":42163},{\"end\":42189,\"start\":42185},{\"end\":42200,\"start\":42198},{\"end\":42214,\"start\":42212},{\"end\":42225,\"start\":42222},{\"end\":42237,\"start\":42233},{\"end\":42249,\"start\":42245},{\"end\":42263,\"start\":42258},{\"end\":42275,\"start\":42271},{\"end\":42289,\"start\":42284},{\"end\":42305,\"start\":42300},{\"end\":42319,\"start\":42314},{\"end\":42332,\"start\":42325},{\"end\":42345,\"start\":42340},{\"end\":42356,\"start\":42354},{\"end\":42372,\"start\":42366},{\"end\":42961,\"start\":42957},{\"end\":42972,\"start\":42969},{\"end\":42989,\"start\":42979},{\"end\":42998,\"start\":42996},{\"end\":43006,\"start\":43003},{\"end\":43021,\"start\":43015},{\"end\":43042,\"start\":43033},{\"end\":43054,\"start\":43050},{\"end\":43305,\"start\":43303},{\"end\":43315,\"start\":43311},{\"end\":43333,\"start\":43324},{\"end\":43346,\"start\":43341},{\"end\":43359,\"start\":43355},{\"end\":43500,\"start\":43492},{\"end\":43511,\"start\":43509},{\"end\":43521,\"start\":43519},{\"end\":43537,\"start\":43530},{\"end\":43797,\"start\":43793},{\"end\":43814,\"start\":43807},{\"end\":43830,\"start\":43825},{\"end\":43844,\"start\":43837},{\"end\":43858,\"start\":43853},{\"end\":44115,\"start\":44110},{\"end\":44125,\"start\":44123},{\"end\":44132,\"start\":44127},{\"end\":44303,\"start\":44297},{\"end\":44317,\"start\":44310},{\"end\":44332,\"start\":44324},{\"end\":44504,\"start\":44499},{\"end\":44521,\"start\":44513},{\"end\":44540,\"start\":44532},{\"end\":44551,\"start\":44547},{\"end\":44563,\"start\":44560},{\"end\":44578,\"start\":44572},{\"end\":44597,\"start\":44589},{\"end\":44611,\"start\":44605},{\"end\":44625,\"start\":44619},{\"end\":44643,\"start\":44637},{\"end\":44662,\"start\":44657},{\"end\":44677,\"start\":44669},{\"end\":44992,\"start\":44988},{\"end\":45014,\"start\":45006},{\"end\":45025,\"start\":45022},{\"end\":45040,\"start\":45034},{\"end\":45054,\"start\":45049},{\"end\":45067,\"start\":45063},{\"end\":45077,\"start\":45075},{\"end\":45342,\"start\":45338},{\"end\":45355,\"start\":45351},{\"end\":45367,\"start\":45362},{\"end\":45739,\"start\":45737},{\"end\":45750,\"start\":45747},{\"end\":45765,\"start\":45760},{\"end\":45779,\"start\":45777},{\"end\":45794,\"start\":45791},{\"end\":45813,\"start\":45803},{\"end\":45826,\"start\":45821},{\"end\":45841,\"start\":45835},{\"end\":46184,\"start\":46180},{\"end\":46197,\"start\":46194},{\"end\":46207,\"start\":46204},{\"end\":46220,\"start\":46218},{\"end\":46233,\"start\":46228},{\"end\":46499,\"start\":46496},{\"end\":46513,\"start\":46509},{\"end\":46522,\"start\":46520},{\"end\":46530,\"start\":46528},{\"end\":46545,\"start\":46538},{\"end\":46565,\"start\":46555},{\"end\":46575,\"start\":46572},{\"end\":46818,\"start\":46813},{\"end\":46831,\"start\":46825},{\"end\":46848,\"start\":46840},{\"end\":47037,\"start\":47028},{\"end\":47048,\"start\":47041},{\"end\":47416,\"start\":47410},{\"end\":47433,\"start\":47427},{\"end\":47450,\"start\":47441},{\"end\":47788,\"start\":47774},{\"end\":47807,\"start\":47797},{\"end\":48024,\"start\":48019},{\"end\":48038,\"start\":48034},{\"end\":48051,\"start\":48046},{\"end\":48287,\"start\":48281},{\"end\":48305,\"start\":48295},{\"end\":48321,\"start\":48316},{\"end\":48337,\"start\":48330},{\"end\":48950,\"start\":48941},{\"end\":49132,\"start\":49126},{\"end\":49143,\"start\":49138},{\"end\":49161,\"start\":49153},{\"end\":49174,\"start\":49170},{\"end\":49189,\"start\":49184},{\"end\":49205,\"start\":49198},{\"end\":49223,\"start\":49214},{\"end\":49246,\"start\":49233},{\"end\":49263,\"start\":49253},{\"end\":49284,\"start\":49270},{\"end\":49293,\"start\":49286},{\"end\":49693,\"start\":49687},{\"end\":49708,\"start\":49702},{\"end\":49730,\"start\":49717},{\"end\":49750,\"start\":49740},{\"end\":49763,\"start\":49760},{\"end\":49776,\"start\":49772},{\"end\":49790,\"start\":49783},{\"end\":49805,\"start\":49800},{\"end\":49823,\"start\":49816},{\"end\":49838,\"start\":49831},{\"end\":49857,\"start\":49848},{\"end\":49873,\"start\":49865},{\"end\":50291,\"start\":50284},{\"end\":50308,\"start\":50298},{\"end\":50328,\"start\":50319},{\"end\":50345,\"start\":50338},{\"end\":50360,\"start\":50354},{\"end\":50376,\"start\":50371},{\"end\":50388,\"start\":50384},{\"end\":50404,\"start\":50398},{\"end\":50417,\"start\":50411},{\"end\":50433,\"start\":50425},{\"end\":50445,\"start\":50443},{\"end\":50457,\"start\":50451},{\"end\":50472,\"start\":50466}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":37985,\"start\":37679},{\"attributes\":{\"id\":\"b1\"},\"end\":38286,\"start\":37987},{\"attributes\":{\"id\":\"b2\"},\"end\":38486,\"start\":38288},{\"attributes\":{\"id\":\"b3\"},\"end\":38759,\"start\":38488},{\"attributes\":{\"id\":\"b4\"},\"end\":39806,\"start\":38761},{\"attributes\":{\"id\":\"b5\"},\"end\":39877,\"start\":39808},{\"attributes\":{\"id\":\"b6\"},\"end\":40446,\"start\":39879},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":11436274},\"end\":40801,\"start\":40448},{\"attributes\":{\"id\":\"b8\"},\"end\":41170,\"start\":40803},{\"attributes\":{\"id\":\"b9\"},\"end\":41477,\"start\":41172},{\"attributes\":{\"id\":\"b10\"},\"end\":41752,\"start\":41479},{\"attributes\":{\"id\":\"b11\"},\"end\":41997,\"start\":41754},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":247997008},\"end\":42875,\"start\":41999},{\"attributes\":{\"id\":\"b13\"},\"end\":43244,\"start\":42877},{\"attributes\":{\"id\":\"b14\"},\"end\":43485,\"start\":43246},{\"attributes\":{\"id\":\"b15\"},\"end\":43693,\"start\":43487},{\"attributes\":{\"id\":\"b16\"},\"end\":44042,\"start\":43695},{\"attributes\":{\"id\":\"b17\"},\"end\":44231,\"start\":44044},{\"attributes\":{\"id\":\"b18\"},\"end\":44444,\"start\":44233},{\"attributes\":{\"id\":\"b19\"},\"end\":44921,\"start\":44446},{\"attributes\":{\"id\":\"b20\"},\"end\":45244,\"start\":44923},{\"attributes\":{\"id\":\"b21\"},\"end\":45501,\"start\":45246},{\"attributes\":{\"id\":\"b22\"},\"end\":45643,\"start\":45503},{\"attributes\":{\"id\":\"b23\"},\"end\":46050,\"start\":45645},{\"attributes\":{\"id\":\"b24\"},\"end\":46427,\"start\":46052},{\"attributes\":{\"id\":\"b25\"},\"end\":46734,\"start\":46429},{\"attributes\":{\"id\":\"b26\"},\"end\":46973,\"start\":46736},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":40185800},\"end\":47297,\"start\":46975},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":57189444},\"end\":47700,\"start\":47299},{\"attributes\":{\"id\":\"b29\"},\"end\":47924,\"start\":47702},{\"attributes\":{\"id\":\"b30\"},\"end\":48189,\"start\":47926},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1211821},\"end\":48857,\"start\":48191},{\"attributes\":{\"id\":\"b32\"},\"end\":49050,\"start\":48859},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":515925},\"end\":49591,\"start\":49052},{\"attributes\":{\"id\":\"b34\"},\"end\":50200,\"start\":49593},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":204972004},\"end\":50979,\"start\":50202}]", "bib_title": "[{\"end\":40535,\"start\":40448},{\"end\":42130,\"start\":41999},{\"end\":47020,\"start\":46975},{\"end\":47402,\"start\":47299},{\"end\":48269,\"start\":48191},{\"end\":49118,\"start\":49052},{\"end\":50276,\"start\":50202}]", "bib_author": "[{\"end\":37697,\"start\":37681},{\"end\":37711,\"start\":37697},{\"end\":37724,\"start\":37711},{\"end\":37741,\"start\":37724},{\"end\":37754,\"start\":37741},{\"end\":37769,\"start\":37754},{\"end\":37784,\"start\":37769},{\"end\":37802,\"start\":37784},{\"end\":38083,\"start\":38069},{\"end\":38099,\"start\":38083},{\"end\":38111,\"start\":38099},{\"end\":38131,\"start\":38111},{\"end\":38363,\"start\":38349},{\"end\":38383,\"start\":38363},{\"end\":38555,\"start\":38541},{\"end\":38564,\"start\":38555},{\"end\":38577,\"start\":38564},{\"end\":38589,\"start\":38577},{\"end\":38603,\"start\":38589},{\"end\":38619,\"start\":38603},{\"end\":38776,\"start\":38763},{\"end\":38791,\"start\":38776},{\"end\":38803,\"start\":38791},{\"end\":38820,\"start\":38803},{\"end\":38834,\"start\":38820},{\"end\":38853,\"start\":38834},{\"end\":38873,\"start\":38853},{\"end\":38887,\"start\":38873},{\"end\":38902,\"start\":38887},{\"end\":38917,\"start\":38902},{\"end\":38935,\"start\":38917},{\"end\":38955,\"start\":38935},{\"end\":38973,\"start\":38955},{\"end\":38987,\"start\":38973},{\"end\":39000,\"start\":38987},{\"end\":39015,\"start\":39000},{\"end\":39033,\"start\":39015},{\"end\":39045,\"start\":39033},{\"end\":39061,\"start\":39045},{\"end\":39080,\"start\":39061},{\"end\":39091,\"start\":39080},{\"end\":39104,\"start\":39091},{\"end\":39120,\"start\":39104},{\"end\":39818,\"start\":39810},{\"end\":39897,\"start\":39879},{\"end\":39919,\"start\":39897},{\"end\":39932,\"start\":39919},{\"end\":39949,\"start\":39932},{\"end\":39963,\"start\":39949},{\"end\":39974,\"start\":39963},{\"end\":39985,\"start\":39974},{\"end\":39998,\"start\":39985},{\"end\":40010,\"start\":39998},{\"end\":40026,\"start\":40010},{\"end\":40039,\"start\":40026},{\"end\":40054,\"start\":40039},{\"end\":40075,\"start\":40054},{\"end\":40085,\"start\":40075},{\"end\":40546,\"start\":40537},{\"end\":40557,\"start\":40546},{\"end\":40573,\"start\":40557},{\"end\":40885,\"start\":40874},{\"end\":40898,\"start\":40885},{\"end\":40915,\"start\":40898},{\"end\":40930,\"start\":40915},{\"end\":40944,\"start\":40930},{\"end\":40953,\"start\":40944},{\"end\":40961,\"start\":40953},{\"end\":40970,\"start\":40961},{\"end\":40982,\"start\":40970},{\"end\":41235,\"start\":41224},{\"end\":41250,\"start\":41235},{\"end\":41262,\"start\":41250},{\"end\":41273,\"start\":41262},{\"end\":41526,\"start\":41504},{\"end\":41545,\"start\":41526},{\"end\":41562,\"start\":41545},{\"end\":41768,\"start\":41754},{\"end\":41786,\"start\":41768},{\"end\":41799,\"start\":41786},{\"end\":41814,\"start\":41799},{\"end\":42144,\"start\":42132},{\"end\":42157,\"start\":42144},{\"end\":42177,\"start\":42157},{\"end\":42191,\"start\":42177},{\"end\":42202,\"start\":42191},{\"end\":42216,\"start\":42202},{\"end\":42227,\"start\":42216},{\"end\":42239,\"start\":42227},{\"end\":42251,\"start\":42239},{\"end\":42265,\"start\":42251},{\"end\":42277,\"start\":42265},{\"end\":42291,\"start\":42277},{\"end\":42307,\"start\":42291},{\"end\":42321,\"start\":42307},{\"end\":42334,\"start\":42321},{\"end\":42347,\"start\":42334},{\"end\":42358,\"start\":42347},{\"end\":42374,\"start\":42358},{\"end\":42963,\"start\":42950},{\"end\":42974,\"start\":42963},{\"end\":42991,\"start\":42974},{\"end\":43000,\"start\":42991},{\"end\":43008,\"start\":43000},{\"end\":43023,\"start\":43008},{\"end\":43044,\"start\":43023},{\"end\":43056,\"start\":43044},{\"end\":43307,\"start\":43299},{\"end\":43317,\"start\":43307},{\"end\":43335,\"start\":43317},{\"end\":43348,\"start\":43335},{\"end\":43361,\"start\":43348},{\"end\":43502,\"start\":43487},{\"end\":43513,\"start\":43502},{\"end\":43523,\"start\":43513},{\"end\":43539,\"start\":43523},{\"end\":43799,\"start\":43786},{\"end\":43816,\"start\":43799},{\"end\":43832,\"start\":43816},{\"end\":43846,\"start\":43832},{\"end\":43860,\"start\":43846},{\"end\":44117,\"start\":44105},{\"end\":44127,\"start\":44117},{\"end\":44134,\"start\":44127},{\"end\":44305,\"start\":44291},{\"end\":44319,\"start\":44305},{\"end\":44334,\"start\":44319},{\"end\":44506,\"start\":44494},{\"end\":44523,\"start\":44506},{\"end\":44542,\"start\":44523},{\"end\":44553,\"start\":44542},{\"end\":44565,\"start\":44553},{\"end\":44580,\"start\":44565},{\"end\":44599,\"start\":44580},{\"end\":44613,\"start\":44599},{\"end\":44627,\"start\":44613},{\"end\":44645,\"start\":44627},{\"end\":44664,\"start\":44645},{\"end\":44679,\"start\":44664},{\"end\":44994,\"start\":44979},{\"end\":45016,\"start\":44994},{\"end\":45027,\"start\":45016},{\"end\":45042,\"start\":45027},{\"end\":45056,\"start\":45042},{\"end\":45069,\"start\":45056},{\"end\":45079,\"start\":45069},{\"end\":45344,\"start\":45331},{\"end\":45357,\"start\":45344},{\"end\":45369,\"start\":45357},{\"end\":45741,\"start\":45733},{\"end\":45752,\"start\":45741},{\"end\":45767,\"start\":45752},{\"end\":45781,\"start\":45767},{\"end\":45796,\"start\":45781},{\"end\":45815,\"start\":45796},{\"end\":45828,\"start\":45815},{\"end\":45843,\"start\":45828},{\"end\":46186,\"start\":46174},{\"end\":46199,\"start\":46186},{\"end\":46209,\"start\":46199},{\"end\":46222,\"start\":46209},{\"end\":46235,\"start\":46222},{\"end\":46501,\"start\":46489},{\"end\":46515,\"start\":46501},{\"end\":46524,\"start\":46515},{\"end\":46532,\"start\":46524},{\"end\":46547,\"start\":46532},{\"end\":46567,\"start\":46547},{\"end\":46577,\"start\":46567},{\"end\":46820,\"start\":46808},{\"end\":46833,\"start\":46820},{\"end\":46850,\"start\":46833},{\"end\":47039,\"start\":47022},{\"end\":47050,\"start\":47039},{\"end\":47418,\"start\":47404},{\"end\":47435,\"start\":47418},{\"end\":47452,\"start\":47435},{\"end\":47790,\"start\":47767},{\"end\":47809,\"start\":47790},{\"end\":48026,\"start\":48011},{\"end\":48040,\"start\":48026},{\"end\":48053,\"start\":48040},{\"end\":48289,\"start\":48271},{\"end\":48307,\"start\":48289},{\"end\":48323,\"start\":48307},{\"end\":48339,\"start\":48323},{\"end\":48952,\"start\":48933},{\"end\":49134,\"start\":49120},{\"end\":49145,\"start\":49134},{\"end\":49163,\"start\":49145},{\"end\":49176,\"start\":49163},{\"end\":49191,\"start\":49176},{\"end\":49207,\"start\":49191},{\"end\":49225,\"start\":49207},{\"end\":49248,\"start\":49225},{\"end\":49265,\"start\":49248},{\"end\":49286,\"start\":49265},{\"end\":49295,\"start\":49286},{\"end\":49695,\"start\":49681},{\"end\":49710,\"start\":49695},{\"end\":49732,\"start\":49710},{\"end\":49752,\"start\":49732},{\"end\":49765,\"start\":49752},{\"end\":49778,\"start\":49765},{\"end\":49792,\"start\":49778},{\"end\":49807,\"start\":49792},{\"end\":49825,\"start\":49807},{\"end\":49840,\"start\":49825},{\"end\":49859,\"start\":49840},{\"end\":49875,\"start\":49859},{\"end\":50293,\"start\":50278},{\"end\":50310,\"start\":50293},{\"end\":50330,\"start\":50310},{\"end\":50347,\"start\":50330},{\"end\":50362,\"start\":50347},{\"end\":50378,\"start\":50362},{\"end\":50390,\"start\":50378},{\"end\":50406,\"start\":50390},{\"end\":50419,\"start\":50406},{\"end\":50435,\"start\":50419},{\"end\":50447,\"start\":50435},{\"end\":50459,\"start\":50447},{\"end\":50474,\"start\":50459}]", "bib_venue": "[{\"end\":41859,\"start\":41841},{\"end\":48540,\"start\":48439},{\"end\":38067,\"start\":37987},{\"end\":38347,\"start\":38288},{\"end\":38539,\"start\":38488},{\"end\":40156,\"start\":40085},{\"end\":40607,\"start\":40573},{\"end\":40872,\"start\":40803},{\"end\":41222,\"start\":41172},{\"end\":41502,\"start\":41479},{\"end\":41839,\"start\":41814},{\"end\":42421,\"start\":42374},{\"end\":42948,\"start\":42877},{\"end\":43297,\"start\":43246},{\"end\":43583,\"start\":43539},{\"end\":43784,\"start\":43695},{\"end\":44103,\"start\":44044},{\"end\":44289,\"start\":44233},{\"end\":44492,\"start\":44446},{\"end\":44977,\"start\":44923},{\"end\":45329,\"start\":45246},{\"end\":45543,\"start\":45503},{\"end\":45731,\"start\":45645},{\"end\":46172,\"start\":46052},{\"end\":46487,\"start\":46429},{\"end\":46806,\"start\":46736},{\"end\":47120,\"start\":47050},{\"end\":47484,\"start\":47452},{\"end\":47765,\"start\":47702},{\"end\":48009,\"start\":47926},{\"end\":48437,\"start\":48339},{\"end\":48931,\"start\":48859},{\"end\":49301,\"start\":49295},{\"end\":49679,\"start\":49593},{\"end\":50480,\"start\":50474}]"}}}, "year": 2023, "month": 12, "day": 17}