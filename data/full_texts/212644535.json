{"id": 212644535, "updated": "2023-09-22 04:50:51.449", "metadata": {"title": "Karate Club: An API Oriented Open-Source Python Framework for Unsupervised Learning on Graphs", "authors": "[{\"first\":\"Benedek\",\"last\":\"Rozemberczki\",\"middle\":[]},{\"first\":\"Oliver\",\"last\":\"Kiss\",\"middle\":[]},{\"first\":\"Rik\",\"last\":\"Sarkar\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 29th ACM International Conference on Information & Knowledge Management", "publication_date": {"year": 2020, "month": null, "day": null}, "abstract": "Graphs encode important structural properties of complex systems. Machine learning on graphs has therefore emerged as an important technique in research and applications. We present Karate Club - a Python framework combining more than 30 state-of-the-art graph mining algorithms. These unsupervised techniques make it easy to identify and represent common graph features. The primary goal of the package is to make community detection, node and whole graph embedding available to a wide audience of machine learning researchers and practitioners. Karate Club is designed with an emphasis on a consistent application interface, scalability, ease of use, sensible out of the box model behaviour, standardized dataset ingestion, and output generation. This paper discusses the design principles behind the framework with practical examples. We show Karate Club's efficiency in learning performance on a wide range of real world clustering problems and classification tasks along with supporting evidence of its competitive speed.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3093943311", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/cikm/RozemberczkiKS20", "doi": "10.1145/3340531.3412757"}}, "content": {"source": {"pdf_hash": "737885fce31272d6b528b7ad9cc7988d500b5aa2", "pdf_src": "ACM", "pdf_uri": "[\"https://arxiv.org/pdf/2003.04819v1.pdf\"]", "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "https://www.pure.ed.ac.uk/ws/files/180445151/Karate_Club_ROZEMBERCZKI_DOA17072020_AFV.pdf", "status": "GREEN"}}, "grobid": {"id": "753ad1ed6acc87887806786a63e8278d66bcb8f9", "type": "plain-text", "url": "s3://ai2-s2-science-parse-plus-prod/parse-results/s2orc_worker/737885fce31272d6b528b7ad9cc7988d500b5aa2.txt", "contents": "\nKarate Club: An API Oriented Open-Source Python Framework for Unsupervised Learning on Graphs\n2020. October 19-23, 2020\n\nBenedek Rozemberczki benedek.rozemberczki@ed.ac.uk \nThe University of Edinburgh Edinburgh\nUnited Kingdom\n\nOliver Kiss kiss_oliver@phd.ceu.edu \nCentral European University\nBudapestHungary\n\nRik Sarkar rsarkar@inf.ed.ac.uk \nThe University of Edinburgh Edinburgh\nUnited Kingdom\n\nKarate Club: An API Oriented Open-Source Python Framework for Unsupervised Learning on Graphs\n\nACM Reference Format\nthe 29th ACM International Conference on Information and Knowledge Management (CIKM '20)2020. October 19-23, 202010.1145/3340531.3412757Virtual Event, Ireland. ACM, New York, NY, USA, 8 pages. https://doi.org/network embeddinggraph embeddingrepresentation learningnetwork analyticsgraph mining\nGraphs encode important structural properties of complex systems. Machine learning on graphs has therefore emerged as an important technique in research and applications. We present Karate Club -a Python framework combining more than 30 state-of-the-art graph mining algorithms. These unsupervised techniques make it easy to identify and represent common graph features. The primary goal of the package is to make community detection, node and whole graph embedding available to a wide audience of machine learning researchers and practitioners. Karate Club is designed with an emphasis on a consistent application interface, scalability, ease of use, sensible out of the box model behaviour, standardized dataset ingestion, and output generation. This paper discusses the design principles behind the framework with practical examples. We show Karate Club's efficiency in learning performance on a wide range of real world clustering problems and classification tasks along with supporting evidence of its competitive speed.\n\nINTRODUCTION\n\nTechniques that extract features from graph data in an unsupervised manner [19,24,49] have seen an increasing success in the machine learning community. Features automatically extracted by these methods can serve as inputs for link prediction, node and graph classification, community detection and various other tasks tasks [19,24,25,30,44] in a wide range of real world research and application scenarios. Graph mining tools such as [13,17,23] have contributed to enhancement and development of machine learning Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. CIKM '20, October 19-23, 2020, Virtual Event, Ireland \u00a9 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 978-1-4503-6859-9/20/10. . . $15.00 https://doi.org /10.1145/3340531.3412757 pipelines. The need for complicated custom feature engineering is reduced by unsupervised graph mining techniques. This approach produces features that are naturally reusable on multiple types of tasks. Recent research [24,25,38] has made such feature extraction highly efficient and parallelizable.\n\nThe democratization of machine learning for tabular data was led by frameworks which made fast paced development possible. Tools such as [1,5,21,22,32] are available in general purpose scripting languages with easy to use consistent interfaces. On the other hand, current graph based learning frameworks are less mature and of limited scope [13,23]. For example, these packages host certain community detection algorithms, but none for whole graph or node embedding. In addition, some of these tools [17,23] have significant barriers for the end users in terms of installing prerequisites and custom data structures used for representing graphs. Present work. We propose Karate Club, an open source Python framework for unsupervised learning on graphs. We implemented Karate Club with consistent API oriented design principles in mind which makes the library end user friendly and modular. The name of the package is inspired by Zachary's Karate Club [52] -a network commonly used to demonstrate network algorithms. The design of this machine learning toolbox was motivated by the principles used to create the widely used scikit-learn package [5].\n\nThe design entails a number of fundamental engineering patterns. Each algorithm has a sensible default hyperparameter setting which helps non expert practitioners. To further ease the use of our package, algorithms have a limited number of shared, publicly available methods (e.g. fit). Models ingest data structures from the scientific Python ecosystem [13,41,42] as input and the generated output also follows these formats. The inner model mechanics are always implemented as private methods using optimized back-end libraries [9,29,41,42] for computing. These principles combined with the extensive documentation ensure that Karate Club is accessible to a wider audience than the currently available open-source graph mining frameworks.\n\nOur empirical evaluation focuses on three common graph mining tasks: non-overlapping community detection, node and graph classification. We compare the learning performance of node and graph level algorithms implemented in our framework on various real world social, web and collaboration networks (collected from Deezer, Reddit, Facebook, Twitch, Wikipedia and GitHub). With respect to the runtime, models in Karate Club show reasonable scalability which we demonstrate by the use of synthetic data.\n\nOur contributions. Specifically our work makes the following key contributions:\n\n(1) We release Karate Club, a Python graph mining framework which provides a wide range of easy to use community detection, node and whole graph embedding procedures. (2) We demonstrate with code the main ideas of the API oriented framework design: hyperparameter encapsulation and inspection, available public methods, dataset ingestion, output generation, and interfacing with downstream learning algorithms and evaluation methods. (3) We evaluate the learning performance of the framework on real world community detection, node and graph classification problems. We validate the scalability of the algorithms implemented in our framework. (4) We open sourced with the framework a detailed documentation and released multiple large graph classification datasets.\n\nThe remainder of this paper is structured as follows. In Section 2 we discuss the covered graph mining techniques. We overview the main principles behind Karate Club in Section 3 where we included detailed examples to explain these design ideas. The learning performance and scalability of the algorithms in the package are evaluated in Section 4. We review related data mining libraries in Section 5. The paper concludes with Section 6 where we discuss future directions. The source code of Karate Club can be downloaded from https: //github.com/benedekrozemberczki/karateclub; the Python package can be installed from the Python Package Index. Extensive documentation is available at https://karateclub.readthedocs.io/en/latest/ with detailed examples.\n\n\nGRAPH MINING PROCEDURES IN KARATE CLUB\n\nIn this section, we briefly discuss the various graph mining algorithms which are available in the 1.0. release of the Karate Club package.\n\n\nCommunity detection\n\nCommunity detection techniques cluster the vertices of the graph into densely connected groups of nodes. This grouping can be the final result or an input for a downstream learning algorithm (e.g. node classification or link prediction). Karate Club currently contains several methods for overlapping and non-overlapping community detection. Non-overlapping community detection is analogous to clustering, and assumes that a node can only belong to a single group; see, for example, [18,26,28,31]. While overlapping community detection is analogous to fuzzy clustering as nodes have an affiliation with multiple clusters; look for example [16,36,43,49,51].\n\n\nNode embedding\n\nNode embeddings map vertices of a graph into an Euclidean space in which those that are deemed to be similar according to a certain notion will be in close proximity. The Euclidean representation makes it easier to apply standard machine learning libraries for node classification, link prediction, clustering etc.\n\nNeighbourhood preserving embedding maintains the proximity of nodes in the graph when an embedding is created. These methods implicitly [24,25,33] or explicitly [6,15,27,37] decompose a proximity matrix (e.g. powers of the adjacency matrix or a sum of these matrices) to create the node embedding.\n\nStructural embedding conserves the structural roles of nodes in the embedding space [2,10,14]. Nodes with similar embeddings have a similar distribution of descriptive statistics (e.g. centrality and clustering coefficient) in their vicinity. Embeddings are distilled by the decomposition of matrices representing structural features of nodes.\n\nAttributed embedding retains the neighbourhood structure and generic feature similarity of nodes when the embedding is learned. This learning involves the joint factorization of the node-node and node-feature matrices with a direct [45,48] or implicit matrix decomposition technique [30,53].\n\nMeta embedding combines information from neighbourhood preserving, structural and attributed embeddings in order to create higher representation quality embeddings [46].\n\n\nWhole graph embedding and summarization\n\nWhole graph embedding and summarization techniques create fixed size representations of entire graphs as points in a Euclidean space. Those graphs which are close in the embedding space share structural patterns such as subtrees. These representations are used for a range of graph level tasks -graph classification, regression and whole graph clustering. Spectral fingerprints extract statistics from the eigenvectors and eigenvalues of the graph Laplacian [8,38,40]. Vectors of the descriptive statistics are used as the whole graph representation.\n\nImplicit factorization techniques create a graph -structural feature matrix [7,19] by enumerating string features in the graphs. This matrix is decomposed in order to create whole graph descriptors and feature embeddings jointly.\n\n\nDESIGN PRINCIPLES\n\nWhen we created Karate Club, we used an API oriented machine learning system design point of view [5,22] in order to make an end-user friendly machine learning tool. This API oriented design principle entails a few simple ideas. In this section we discuss these ideas and their apparent advantages with appropriate illustrative examples in great detail.\n\n\nEncapsulated model hyperparameters and inspection\n\nAn unsupervised Karate Club model instance is created by using the constructor of the appropriate Python object. This constructor has a default hyperparameter setting which allows for sensible out-ofthe-box model usage. In simple terms this means that the end user does not need to understand the inner model mechanics in great detail to use the methods implemented in our framework. We set these default hyperparameters to provide a reasonable learning and runtime performance. If needed, these model hyperparameters can be modified at the model instance creation time with the appropriate re-parametrization of the constructor. The hyperparameters are stored as public attributes to allow the inspection of model settings.\n\nWe demonstrate the encapsulation of hyperparameters by the code snippet in Figure 1. First, we want to create an embedding for a NetworkX generated Erdos-Renyi graph (line 4) with the standard hyperparameter settings. When the model is constructed and fitted (lines 6-7) we do not change default hyperparameters and we can print the standard setting of the dimensions hyperparameter (line 8). Second, we decided to set a different number of dimensions, so we created and fitted a new model (lines 10-11) and we print the new value of the dimensions hyperparameter (line 12).\n\n1 import networkx as nx 2 from karateclub import DeepWalk \n\n\nAPI Consistency and non-proliferation of classes\n\nEach unsupervised machine learning model in Karate Club is implemented as a separate class which inherits from the Estimator class. Algorithms implemented in our framework have a limited number of public methods as we do not assume that the end user is particularly interested in the algorithmic details related to a specific technique. All models are trained by the use of the fit method which takes the inputs (graph, node features) and calls the appropriate private methods to learn an embedding or clustering. Node and graph embeddings are returned by the get_embedding public method and cluster memberships are retrieved by calling get_memberships.\n\n1 import networkx as nx 2 from karateclub import DeepWalk We avoided the proliferation of classes with two specific strategies. First, the inputs used by our framework and the outputs generated do not rely on custom data classes. This helps to prevent the unnecessary growth of the number of classes and also helps with interfacing with downstream applications. Second, algorithms which use the same data pre-processing or algorithmic step (e.g. truncated random walk, Weisfeiler-Lehman hashing) were built on shared blocks.\n\nIn Figure 2 we create a random graph (line 4), and a DeepWalk model with the default hyperparameters (line 6), we fit this model (line 7) using the public fit method (line 7) and return the embedding by calling the public get_embedding method (line 8).\n\n1 import networkx as nx 2 from karateclub import Walklets The example in Figure 2 can be modified to create a Walklets embedding with minimal effort by changing the model import (line 2) and the constructor (line 6) -these modifications result in the snippet of Figure 3.\n\nLooking at these two snippets the advantage of the API driven design is evident as we only needed to do a few modifications. First, we had to change the import of the embedding model. Second, we needed to modify the model construction and the default hyperparameters were already set. Third, the public methods provided by the DeepWalk and Walklets classes behave the same way. An embedding is learned with fit and it is returned by get_embedding. This allows for quick and minimal changes to the code when an upstream unsupervised model used for feature extraction performs poorly.\n\n\nStandardized dataset ingestion\n\nWe designed Karate Club to use standardized dataset ingestion when a model is fitted. Practically this means that algorithms which have the same purpose use the same data types for model training. In detail:\n\n\u2022 Neighbourhood based and structural node embedding techniques use a single NetworkX graph as input for the fit method. \u2022 Attributed node embedding procedures take a NetworkX graph as input and the features are represented as a NumPy array or as a SciPy sparse matrix. In these matrices rows correspond to nodes and columns to features. \u2022 Graph level embedding methods and statistical graph fingerprints take a list of NetworkX graphs as an input. \u2022 Community detection methods use a NetworkX graph as an input.\n\n\nHigh performance model mechanics\n\nThe underlying mechanics of the graph mining algorithms were implemented using widely available Python libraries which are not operation system dependent and do not require the presence of other external libraries like TensorFlow or PyTorch does [1,21]. The internal graph representations in Karate Club use NetworkX. Dense linear algebra operations are done with NumPy and their sparse counterparts use SciPy. Implicit matrix factorization techniques [2,24,25,30,53] utilize the GenSim [29] package and methods which rely on graph signal processing use PyGSP [9].\n\n1 import community 2 import networkx as nx 3 from karateclub import LabelPropagation, SCD \n\n\nStandardized output generation and downstream interfacing\n\nThe standardized output generation of Karate Club ensures that unsupervised learning algorithms which serve the same purpose always return the same type of output with a consistent data point ordering. There is a very important consequence of this design principle. When a certain type of algorithm is replaced with the same type of algorithm, the downstream code which uses the output of the upstream unsupervised model does not have to be changed. Specifically the outputs generated with our framework use the following data structures:\n\n\u2022 Node embedding algorithms (neighbourhood preserving, attributed and structural) always return a NumPy float array when the get_embedding method is called. The number of rows in the array is the number of vertices and the row index always corresponds to the vertex index. Furthermore, the number of columns is the number of embedding dimensions. \u2022 Whole graph embedding methods (spectral fingerprints, implicit matrix factorization techniques) return a NumPy float array when the get_embedding method is called. The row index corresponds to the position of a single graph in the list of graphs inputted. In the same way, columns represent the embedding dimensions. \u2022 Community detection procedures return a dictionary when the get_memberships method is called. Node indices are keys and the values corresponding to the keys are the community memberships of vertices. Certain graph clustering techniques create a node embedding in order to find vertex clusters. These return a NumPy float array when the get_embedding method is called. This array is structured like the ones returned by node embedding algorithms.\n\nWe demonstrate the standardized output generation and interfacing by the code fragment in Figure 4. We create clusterings of a random graph and return dictionaries containing the cluster memberships. Using the external community library we can calculate the modularity of these clusterings (lines [15][16]. This shows that the standardized output generation makes interfacing with external graph mining and machine learning libraries easy.\n\n\nLimitations\n\nThe current design of Karate Club has certain limitations and we make strong assumptions about the input. We assume that that the NetworkX graph is undirected and consists of a single strongly connected component. All algorithms assume that nodes are indexed with integers consecutively and the starting node index is 0. Moreover, we assume that the graph is not multipartite, nodes are homogeneous and edges are unweighted (each edge has a unit weight).\n\nIn case of the whole graph embedding algorithms [7,8,12,19,38,40] all graphs in the set of graphs must amend the previously listed requirements with respect to the input. The Weisfeiler-Lehman feature based embedding techniques [7,19] allow nodes to have a single string feature which can be accessed with the feature key. Without the presence of this key these algorithms default to the use of degree centrality as a node feature.\n\n\nEXPERIMENTAL EVALUATION\n\nIn the experimental evaluation of Karate Club we will demonstrate two things. First, we will show that the implemented algorithms have a good performance with respect to embedding and extracted community quality on a variety of machine learning problems. Second, we support evidence that those algorithms which in theory scale linearly with the input size (number of nodes or number of graphs) scale linearly using our framework in practice. Throughout these experiments we will always use the standard hyperparameter settings of the 1.0. release of our package.\n\n\nLearning performance\n\nThe evaluation of the representation quality focuses on three types of machine learning tasks. These are: community detection with ground truth communities, node classification with the node embeddings, and whole graph classification with graph level embeddings.\n\n\nDatasets.\n\nIn order to evaluate the performance of vertex level algorithms (node embedding and community detection) we used attributed web, collaboration and social networks which are publicly available on SNAP [17,30]. We decided to use attributed networks because a large number of algorithms in Karate Club can exploit the presence of node features. These datasets are the following: The descriptive statistics of these node level datasets are summarized in Table 1. As one can see these networks have a large variety of size, level of clustering and diameter. Graph level embedding algorithms were evaluated on a variety of web and social graph datasets which we collected specifically for this paper. We made these graph collections publicly available. 1 The graph collections used for predictive performance evaluation are the following:\n\n\u2022 Reddit Threads: Discussion and non-discussion based threads from Reddit which we collected in May 2018. The task is to predict whether a thread is discussion based. \u2022 Twitch Egos: The ego-nets of Twitch users who participated in the partnership program in April 2018. The binary classification task is to predict using the ego-net whether the central gamer plays a single or multiple games. \u2022 Github Stargazers: The social networks of developers who starred popular machine learning and web development repositories until 2019 August. The task is to decide whether a social network belongs to a web or machine learning repository. \u2022 Deezer Egos: The ego-nets of Eastern European users collected from the music streaming service Deezer in February 2020. The related task is the prediction of gender for the ego node in the graph. We listed the size of these datasets with the respective descriptive statistics in Table 2. It is worth noting that the Reddit Threads and Twitch Egos both have at least 10 fold more graphs than the social graph datasets which are widely used for graph classification evaluation [44]. We would also like to emphasize that the use of graph kernels would not be feasible on graph datasets which are this numerous.  [51] .051 \u00b1 .001 .083 \u00b1 .001 .007 \u00b1 .001 .164 \u00b1 .001 M-NMF [43] .063 \u00b1 .001 .084 \u00b1 .001 .004 \u00b1 .001 .068 \u00b1 .001 NNSED [36] .063 \u00b1 .001 .034 \u00b1 .001 .004 \u00b1 .001 .072 \u00b1 .001\n\nSymmNMF [16] .062 \u00b1 .001 .074 \u00b1 .001 .007 \u00b1 .001 .206 \u00b1 .001\n\nEgo-Splitting [11] .157 \u00b1 .001 .202 \u00b1 .001 .223 \u00b1 .001 .346 \u00b1 .001\n\nEdMot [18] .085 \u00b1 .001 .180 \u00b1 .001 .008 \u00b1 .001 .272. \u00b1 .001\n\nLabelProp [28] .119 \u00b1 .001 .090 \u00b1 .002 .003 \u00b1 .001 .320 \u00b1 .004 SCD [26] .181 \u00b1 .001 .189 \u00b1 .001 .169 \u00b1 .001 .386 \u00b1 .001 GEMSEC [31] .102 \u00b1 .001 .127 \u00b1 .001 .008 \u00b1 .002 .244 \u00b1 .001 4.1.2 Community Detection. We evaluate the community detection performance by running the clustering algorithms on the node level datasets. In case of overlapping community detection algorithms [11,16,36,43,49,51] we assigned each node to the cluster that has the strongest affiliation score with the node (ties were broken randomly). The metric used for the clustering performance measurement is the average normalized mutual information (henceforth NMI) score calculated between the cluster membership vector and the factual class memberships. We report in Table 3 the NMI averages with the standard errors calculated from 100 experimental runs. Looking at Table 3 first we notice that the non-overlapping community detection techniques [11,18,26,28,31] materially outperform the overlapping models which create latent spaces [16,36,43,49,51] on every dataset in terms of NMI. Second, those algorithms which create clusters based on the presence of closed triangles (SCD [26], Ego-Splitting [11]) have a general strong performance. Finally, on problems where it can be assumed that the class membership vector is associated with structural properties (e.g. Wikipedia Crocodiles), the overlapping latent space creating community detection methods perform poorly in terms of NMI.\n\n\nGraph classification.\n\nIn each dataset we created representations for the graphs and use those as predictors for the downstream classification task. We repeated the feature distillation and supervised model training 100 times, used 80% of graphs for training and 20% for testing with seeded splits. Using the graph class vectors of the test set and class probabilities outputted by the logistic regression classifier we calculated mean area under the curve (henceforth AUC) values which are presented in Table 4 along with their standard errors. The results presented in Table 4 show that the representations created by implicit factorization [7,19] and spectral finger printing [8,34,38,40] techniques are predictive on most problems. In addition, we see evidence that algorithms from the latter group create somewhat higher quality representations.\n\n\nNode classification.\n\nIn this series of experiments we evaluated the node classification performance on the node level datasets. For each graph we learned a node embedding and used the features of this node embedding as predictors for a downstream logistic (softmax) regression model. We repeated the embedding and supervised model training 100 times, used 80% of the nodes for training and 20% for testing with seeded splits. Using the target vectors of the test set and the class probabilities outputted by the downstream model we calculated mean AUC scores. These average AUC values are reported in Table 5 with standard errors. The results in Table  5 generally demonstrate that the included neighbourhood based [4,6,15,20,24,25,27,33,37], structural role preserving [2,10], and attributed [3,30,45,48,50,53] node embedding techniques all generate reasonable quality representations for this classification task. There are additional conclusions; (i) multi-scale node embeddings such as GraRep [6], Walklets, [25], and MUSAE [30] create high quality node features , (ii) combining neighbourhood and attribute information results in the best representations [30,53], (iii) there is not a single model which is generally superior.\n\n\nScalability\n\nWe perform scalability tests for all three types of algorithms (community detection, node and whole graph embedding). For each of these categories we investigate the scalability of 4 chosen algorithms. We use Erdos-Renyi graphs where the input size and graph density can be manipulated directly.  [15] .685 \u00b1 .001 .845 \u00b1 .001 .576 \u00b1 .001 .752 \u00b1 .001\n\nNodeSketch [47] .722 \u00b1 .001 .631 \u00b1 .001 .520 \u00b1 .001 .579 \u00b1 .001\n\nDiff2Vec [33] .832 \u00b1 .001 .858 \u00b1 .001 .589 \u00b1 .001 .873 \u00b1 .001\n\nNetMF [27] .866 \u00b1 .001 .867 \u00b1 .001 .629 \u00b1 .002 .946 \u00b1 .001\n\nWalklets [25] .  Figure 5 plots runtime against size and density of the clustered while the average number of edges is fixed to be 10. In the densification scenario we clustered a graph with 2 12 nodes. Non-overlapping community detection techniques show a remarkable scalability with respect to graph size increase, and we also see that the densification of the graph results in longer runtimes. We measured the same way how the average runtime of node embedding varies with input size changes and densification and plotted these in Figure 6. These results show that under no preferential attachment all of the included methods scale linearly with input size changes. Moreover, implicit factorization runtimes are unaffected by the densification of the graph.\n\nIn case of the whole graph representation we plotted the average runtime as a function of the number of graphs and their size on  . The base graph used for the first plot had 64 nodes and 5 edges per node and for the second plot we used 2 10 graphs. First, a takeaway is that the runtime increases linearly with the size of the dataset assuming that size of the graphs is homogeneous. Second, the spectral fingerprinting techniques [8,40] do not scale well when the size of the graphs is increased which was expected. \n\n\nRELATED WORK\n\nIn this section we discuss how the design of our framework is related to existing machine learning frameworks, what differentiates it from other graph mining tools.\n\n\nAPI oriented machine learning frameworks\n\nScikit-learn [5,22] is a machine learning framework with consistent and easy to use design. The scikit-learn models are characterised by models with a consistent API, their constructors have encapsulated sensible hyperparameters and utilize widely used Python data structures for data ingestion and output generation. This compositional design of the framework results in a low number of model classes, reusable model blocks and enables fast deployment. The Karate Club API draws heavily from the ideas of scikit-learn and the output generated by Karate Club is suitable as input for scikit-learn's machine learning procedures.\n\n\nGraph mining libraries\n\nThe Karate Club framework is differentiated from other graph mining libraries because of lightweight prerequisites and wide coverage of the learning techniques. First, the SNAP and GraphTool packages both have C++ prerequisites which have to be pre-compiled and installed. Our framework only has Python dependencies and builds on top of the NetworkX project. Second, the SNAP [17] library only covers specific methods which were created by the authors of the framework. The NetworkX [13] and GraphTool [23] libraries only provide community detection tools. Node and whole graph embedding is not supported by these frameworks.\n\n\nCONCLUSION AND FUTURE DIRECTIONS\n\nIn this work we described Karate Club a Python framework built on the open source packages NetworkX [13], PyGSP [9], Gensim [29], NumPy [42], and SciPy Sparse [41] which performs unsupervised learning on graph data. Specifically, it supports community detection, node embedding, and whole graph embedding techniques. We discussed in detail the design principles which we followed when we created Karate Club, standard hyperparameter encapsulation, the assumptions about the format of input data and generated output, and available public methods. In order to demonstrate these principles we included illustrative examples of code. In a series of experiments on real world datasets we validated that the machine learning models in Karate Club produce high quality clusters and embeddings. We also demonstrated on synthetic data that the linear runtime algorithms scale well with increasing input size.\n\nAs discussed, Karate Club has certain limitations with regards to the types of graphs that it can handle. In the future we plan to extend it to operate on directed and weighted graphs. Another aim is to provide a general framework for unsupervised learning algorithms on heterogeneous, multiplex, temporal graphs and procedures for the hyperbolic embedding of nodes [35,39].\n\nFigure 1 :\n1.fit(graph) 8 print(model.dimensions)9 10 model = DeepWalk(dimensions=64) 11 model.fit(graph) 12 print(model.dimensions) Creating a synthetic graph, using a DeepWalk model with standard and modified hyperparameter settings.\n\nFigure 2 :\n2Creating a synthetic graph, using the DeepWalk constructor, fitting the embedding and returning it.\n\nFigure 3 :\n3Creating a synthetic graph, using the Walklets constructor, fitting the embedding and returning it.\n\nFigure 4 :\n4= SCD() 8 model.fit(graph) 9 scd_memberships = model.get_memberships() 10 11 model = LabelPropagation() 12 model.fit(graph) 13 lp_memberships = model.get_memberships()14 15 print(community.modularity(scd_memberships, graph)) 16 print(community.modularity(lp_memberships, graph)) Creating a synthetic graph, clustering with two community detection techniques and using an external library to evaluate the modularity of clusterings.\n\n\u2022\nWikipedia Crocodiles: In this graph nodes represent Wikipedia pages and edges are mutual links. The vertex features describe the presence of nouns in the article and the binary target variable indicates the volume of traffic on the site. \u2022 GitHub Developers: Vertices in this network are developers who use GitHub and edges represent mutual follower relationships between the users. Features are derived based on location, biography and other metadata, the binary target variable is whether someone is a machine learning or web developer. \u2022 Twitch England: Nodes of this graph are Twitch users from England and edges are mutual friendships between them. Node features were extracted based on the streaming history of the users while the binary node class describes whether the user creates explicit content. \u2022 Facebook Page-Page: A network of verified Facebook pages where nodes are pages and the links between nodes are mutual likes. Features are distilled from the page descriptions and the target is the category of the Facebook page (Politicians, Governments, Companies, TV Shows).\n\nFigure 5 :\n5Scalability of the community detection procedures in Karate Club. We vary the number of nodes and the density of an Erdos-Renyi graph.\n\nFigure 6 :\n6Scalability of node embedding procedures in Karate Club. We vary the number of nodes and the density of an Erdos-Renyi graph.\n\nFigure 7\n7Figure 7. The base graph used for the first plot had 64 nodes and 5 edges per node and for the second plot we used 2 10 graphs. First, a takeaway is that the runtime increases linearly with the size of the dataset assuming that size of the graphs is homogeneous. Second, the spectral fingerprinting techniques [8, 40] do not scale well when the size of the graphs is increased which was expected.\n\nFigure 7 :\n7Scalability of graph embedding and summarization procedures in Karate Club. We vary the number of Erdos-Renyi graphs and their size.\n\nTable 1 :\n1The social networks used for node level algorithms.Wikipedia \nCrocodiles \n\nGitHub \nDevelopers \n\nTwitch \nEngland \n\nFacebook \nPage-Page \nNodes \n11,631 \n37,700 \n7,126 \n22,470 \n\nDensity \n0.003 \n0.001 \n0.002 \n0.001 \n\nTransitivity \n0.026 \n0.013 \n0.042 \n0.232 \n\nDiameter \n11 \n7 \n10 \n15 \n\nFeatures \n13,183 \n4,005 \n2,545 \n4,714 \n\n\n\nTable 2 :\n2Statistics of graph datasets used for graph level algorithms.Nodes \nDensity \nDiameter \nDataset \nGraphs Min Max Min Max Min Max \nReddit Threads \n203,088 \n11 \n97 \n0.021 0.382 \n2 \n27 \nTwitch Egos \n127,094 \n14 \n52 \n0.038 0.967 \n1 \n2 \nGitHub StarGazers \n12,725 \n10 \n957 0.003 0.561 \n2 \n18 \nDeezer Egos \n9,629 \n11 \n363 0.015 0.909 \n2 \n2 \n\n\n\nTable 3 :\n3Mean NMI values with standard errors on the node level datasets calculated from 100 runs.Wikipedia \nCrocodiles \n\nGitHub \nDevelopers \n\nTwitch \nEngland \n\nFacebook \nPage-Page \nDANMF \n\nTable 4 :\n4Mean AUC values with standard errors on the graph level datasets calculated from 100 seed train-test splits.Reddit \nThreads \n\nTwitch \nEgos \n\nGitHub \nStarGazers \n\nDeezer \nEgos \nGL2Vec [7] \n.753 \u00b1 .002 .664 \u00b1 .002 \n.551 \u00b1 .001 \n.504 \u00b1 .001 \n\nGraph2Vec [19] \n.804 \u00b1 .002 .702 \u00b1 .003 \n.585 \u00b1 .001 \n.512 \u00b1 .001 \n\nSF [8] \n.814 \u00b1 .002 .678 \u00b1 .003 \n.558 \u00b1 .001 \n.501 \u00b1 .001 \n\nNetLSD [38] \n.827 \u00b1 .001 .631 \u00b1 .002 \n.632 \u00b1 .001 \n.522 \u00b1 .001 \n\nFGSD [40] \n.825 \u00b1 .002 .705 \u00b1 .003 \n.656 \u00b1 .001 \n.526 \u00b1 .001 \n\nGeoScattering [12] .800 \u00b1 .001 .697 \u00b1 .001 \n.546 \u00b1 .003 \n.522 \u00b1 .003 \n\nFEATHER [34] \n.830 \u00b1 .002 .720 \u00b1 .003 .748 \u00b1 .002 .540 \u00b1 .001 \n\n\n\nTable 5 :\n5Mean AUC values with standard errors on the node level datasets calculated from 100 seed train-test splits.Wikipedia \nCrocodiles \n\nGitHub \nDevelopers \n\nTwitch \nEngland \n\nFacebook \nPage-Page \nBoostNE \n\n\nFSCNMF[3] .912 \u00b1 .001 .856 \u00b1 .002 .621 \u00b1 .001 .891 \u00b1 .001 SINE [53] .904 \u00b1 .001 .910 \u00b1 .002 .646 \u00b1 .001 .979 \u00b1 .001 MUSAE [30] .931 \u00b1 .001 .903 \u00b1 .001 .628 \u00b1 .001 .981 \u00b1 .001875 \u00b1 .001 \n.899 \u00b1 .002 \n.622 \u00b1 .001 .973 \u00b1 .001 \n\nHOPE [20] \n.870 \u00b1 .001 \n.844 \u00b1 .001 \n.612 \u00b1 .001 .909 \u00b1 .001 \n\nGraRep [6] \n.888 \u00b1 .002 \n.876 \u00b1 .001 \n.609 \u00b1 .001 .952 \u00b1 .001 \n\nDeepWalk [24] \n.850 \u00b1 .001 \n.872 \u00b1 .002 \n.597 \u00b1 .002 .877 \u00b1 .001 \n\nNMF-ADMM [37] \n.747 \u00b1 .001 \n.784 \u00b1 .001 \n.619 \u00b1 .001 .937 \u00b1 .001 \n\nLAP [4] \n.784 \u00b1 .001 \n.529 \u00b1 .001 \n.511 \u00b1 .001 .501 \u00b1 .001 \n\nGraphWave [10] \n.517 \u00b1 .001 \n.620 \u00b1 .001 \n.583 \u00b1 .001 .613 \u00b1 .001 \n\nRole2Vec [2] \n.845 \u00b1 .001 \n.862 \u00b1 .002 \n.601 \u00b1 .002 .903 \u00b1 .002 \n\nBANE [48] \n.866 \u00b1 .002 \n.570 \u00b1 .001 \n.551 \u00b1 .001 .970 \u00b1 .002 \n\nTENE [50] \n.907 \u00b1 .001 \n.874 \u00b1 .001 \n.615 \u00b1 .001 .886 \u00b1 .001 \n\nTADW [45] \n.896 \u00b1 .001 \n.817 \u00b1 .001 \n.612 \u00b1 .002 .871 \u00b1 .001 \n\n\nCIKM '20, October 19-23, 2020, Virtual Event, Ireland\nhttps://snap.stanford.edu/data/\nACKNOWLEDGEMENTSBenedek Rozemberczki was supported by the Centre for Doctoral Training in Data Science, funded by EPSRC (grant EP/L016427/1).\nTensorflow: A system for large-scale machine learning. Mart\u00edn Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, 12th {USENIX} Symposium on Operating Systems Design and Implementation. Mart\u00edn Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, et al. 2016. Tensorflow: A system for large-scale machine learning. In 12th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 16). 265- 283.\n\nXiangnan Kong, and Hoda Eldardiry. 2019. role2vec: Role-based network embeddings. K Nesreen, Ryan A Ahmed, John Boaz Rossi, Lee, Rong Theodore L Willke, Zhou, Proc. DLG KDD. DLG KDDNesreen K Ahmed, Ryan A Rossi, John Boaz Lee, Theodore L Willke, Rong Zhou, Xiangnan Kong, and Hoda Eldardiry. 2019. role2vec: Role-based network embeddings. In Proc. DLG KDD.\n\nFscnmf: Fusing structure and content via non-negative matrix factorization for embedding information networks. Sambaran Bandyopadhyay, Harsh Kara, Aswin Kannan, M Narasimha Murty, arXiv:1804.05313arXiv preprintSambaran Bandyopadhyay, Harsh Kara, Aswin Kannan, and M Narasimha Murty. 2018. Fscnmf: Fusing structure and content via non-negative matrix factorization for embedding information networks. arXiv preprint arXiv:1804.05313 (2018).\n\nLaplacian eigenmaps and spectral techniques for embedding and clustering. Mikhail Belkin, Partha Niyogi, Advances in neural information processing systems. Mikhail Belkin and Partha Niyogi. 2002. Laplacian eigenmaps and spectral techniques for embedding and clustering. In Advances in neural information processing systems. 585-591.\n\nAPI design for machine learning software: experiences from the scikit-learn project. Lars Buitinck, Gilles Louppe, Mathieu Blondel, Fabian Pedregosa, Andreas Mueller, Olivier Grisel, Vlad Niculae, Peter Prettenhofer, Alexandre Gramfort, Jaques Grobler, Robert Layton, Jacob Vanderplas, Arnaud Joly, Brian Holt, Ga\u00ebl Varoquaux, ArXiv abs/1309.0238Lars Buitinck, Gilles Louppe, Mathieu Blondel, Fabian Pedregosa, Andreas Mueller, Olivier Grisel, Vlad Niculae, Peter Prettenhofer, Alexandre Gramfort, Jaques Grobler, Robert Layton, Jacob VanderPlas, Arnaud Joly, Brian Holt, and Ga\u00ebl Varoquaux. 2013. API design for machine learning software: experiences from the scikit-learn project. ArXiv abs/1309.0238 (2013).\n\nGrarep: Learning graph representations with global structural information. Shaosheng Cao, Wei Lu, Qiongkai Xu, Proceedings of the 24th ACM international on conference on information and knowledge management. the 24th ACM international on conference on information and knowledge managementACMShaosheng Cao, Wei Lu, and Qiongkai Xu. 2015. Grarep: Learning graph rep- resentations with global structural information. In Proceedings of the 24th ACM international on conference on information and knowledge management. ACM, 891-900.\n\nGL2vec: Graph Embedding Enriched by Line Graphs with Edge Features. Hong Chen, Hisashi Koga, International Conference on Neural Information Processing. SpringerHong Chen and Hisashi Koga. 2019. GL2vec: Graph Embedding Enriched by Line Graphs with Edge Features. In International Conference on Neural Information Processing. Springer, 3-14.\n\nA simple baseline algorithm for graph classification. Lara Nathan De, Pineau Edouard, Advances in Neural Information Processing Systems. Nathan de Lara and Pineau Edouard. 2018. A simple baseline algorithm for graph classification. In Advances in Neural Information Processing Systems.\n\n. Micha\u00ebl Defferrard, Lionel Martin, Rodrigo Pena, Nathana\u00ebl Perraudin, n.d.Micha\u00ebl Defferrard, Lionel Martin, Rodrigo Pena, and Nathana\u00ebl Perraudin. [n.d.].\n\n. 10.5281/zenodo.1003157PyGSP: Graph Signal Processing in Python. PyGSP: Graph Signal Processing in Python. https://doi.org/10.5281/zenodo. 1003157\n\nLearning structural node embeddings via diffusion wavelets. Claire Donnat, Marinka Zitnik, David Hallac, Jure Leskovec, Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data MiningACMClaire Donnat, Marinka Zitnik, David Hallac, and Jure Leskovec. 2018. Learning structural node embeddings via diffusion wavelets. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. ACM, 1320-1329.\n\nEgo-Splitting Framework: From Non-Overlapping to Overlapping Clusters. Alessandro Epasto, Silvio Lattanzi, Renato Paes Leme, Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '17. the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '17Alessandro Epasto, Silvio Lattanzi, and Renato Paes Leme. 2017. Ego-Splitting Framework: From Non-Overlapping to Overlapping Clusters. In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '17). 145-154.\n\nGeometric Scattering for Graph Data Analysis. Feng Gao, Guy Wolf, Matthew Hirn, Proceedings of the 36th International Conference on Machine Learning. the 36th International Conference on Machine Learning97Feng Gao, Guy Wolf, and Matthew Hirn. 2019. Geometric Scattering for Graph Data Analysis. In Proceedings of the 36th International Conference on Machine Learning, Vol. 97. 2122-2131.\n\nExploring network structure, dynamics, and function using NetworkX. Aric Hagberg, Pieter Swart, Daniel S Chult, Los Alamos National Lab.(LANL). Technical ReportUnited StatesAric Hagberg, Pieter Swart, and Daniel S Chult. 2008. Exploring network structure, dynamics, and function using NetworkX. Technical Report. Los Alamos National Lab.(LANL), Los Alamos, NM (United States).\n\nRolx: structural role extraction & mining in large graphs. Keith Henderson, Brian Gallagher, Tina Eliassi-Rad, Hanghang Tong, Sugato Basu, Leman Akoglu, Danai Koutra, Christos Faloutsos, Lei Li, Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining. the 18th ACM SIGKDD international conference on Knowledge discovery and data miningKeith Henderson, Brian Gallagher, Tina Eliassi-Rad, Hanghang Tong, Sugato Basu, Leman Akoglu, Danai Koutra, Christos Faloutsos, and Lei Li. 2012. Rolx: structural role extraction & mining in large graphs. In Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining. 1231-1239.\n\nMulti-Level Network Embedding with Boosted Low-Rank Matrix Approximation. Huan Liu, Jundong Li, Liang Wu, Proceedings of the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining. the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and MiningACMHuan Liu Jundong Li, Liang Wu. 2019. Multi-Level Network Embedding with Boosted Low-Rank Matrix Approximation. In Proceedings of the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining 2019. ACM, 50-56.\n\nSymmetric nonnegative matrix factorization for graph clustering. Da Kuang, Chris Ding, Haesun Park, Proceedings of the 2012 SIAM international conference on data mining. SIAM. the 2012 SIAM international conference on data mining. SIAMDa Kuang, Chris Ding, and Haesun Park. 2012. Symmetric nonnegative matrix factorization for graph clustering. In Proceedings of the 2012 SIAM international conference on data mining. SIAM, 106-117.\n\nJure Leskovec, Andrej Krevl, SNAP Datasets: Stanford Large Network Dataset Collection. Jure Leskovec and Andrej Krevl. 2014. SNAP Datasets: Stanford Large Network Dataset Collection. http://snap.stanford.edu/data.\n\nEdMot: An Edge Enhancement Approach for Motif-aware Community Detection. Pei-Zhen Li, Ling Huang, Chang-Dong Wang, Jian-Huang Lai, Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD '19. the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD '19Pei-Zhen Li, Ling Huang, Chang-Dong Wang, and Jian-Huang Lai. 2019. EdMot: An Edge Enhancement Approach for Motif-aware Community Detection. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD '19). 479-487.\n\n2017. graph2vec: Learning distributed representations of graphs. Annamalai Narayanan, Mahinthan Chandramohan, Rajasekar Venkatesan, Lihui Chen, Yang Liu, Annamalai Narayanan, Mahinthan Chandramohan, Rajasekar Venkatesan, Lihui Chen, and Yang Liu. 2017. graph2vec: Learning distributed representations of graphs. (2017).\n\nAsymmetric transitivity preserving graph embedding. Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, Wenwu Zhu, Proceedings of the 22nd ACM SIGKDD international conference on Knowledge discovery and data mining. the 22nd ACM SIGKDD international conference on Knowledge discovery and data miningMingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asym- metric transitivity preserving graph embedding. In Proceedings of the 22nd ACM SIGKDD international conference on Knowledge discovery and data mining. 1105- 1114.\n\nPyTorch: An imperative style, high-performance deep learning library. Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, Advances in Neural Information Processing Systems. Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. 2019. PyTorch: An imperative style, high-performance deep learning library. In Advances in Neural Information Processing Systems. 8024-8035.\n\nScikit-learn: Machine learning in Python. Fabian Pedregosa, Ga\u00ebl Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer, Ron Weiss, Vincent Dubourg, Journal of machine learning research. 12Fabian Pedregosa, Ga\u00ebl Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer, Ron Weiss, Vincent Dubourg, et al. 2011. Scikit-learn: Machine learning in Python. Journal of machine learning research 12, Oct (2011), 2825-2830.\n\nThe graph-tool python library. P Tiago, Peixoto, Tiago P Peixoto. 2014. The graph-tool python library. figshare (2014).\n\nDeepwalk: Online learning of social representations. Bryan Perozzi, Rami Al-Rfou, Steven Skiena, Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining. the 20th ACM SIGKDD international conference on Knowledge discovery and data miningACMBryan Perozzi, Rami Al-Rfou, and Steven Skiena. 2014. Deepwalk: Online learning of social representations. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 701-710.\n\nDon't Walk, Skip!: online learning of multi-scale network embeddings. Bryan Perozzi, Vivek Kulkarni, Haochen Chen, Steven Skiena, Proceedings of the 2017 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining. the 2017 IEEE/ACM International Conference on Advances in Social Networks Analysis and MiningACMBryan Perozzi, Vivek Kulkarni, Haochen Chen, and Steven Skiena. 2017. Don't Walk, Skip!: online learning of multi-scale network embeddings. In Proceedings of the 2017 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining 2017. ACM, 258-265.\n\nHigh quality, scalable and parallel community detection for large real graphs. Arnau Prat-P\u00e9rez, David Dominguez-Sal, Josep-Lluis Larriba-Pey, Proceedings of the 23rd international conference on World wide web. the 23rd international conference on World wide webArnau Prat-P\u00e9rez, David Dominguez-Sal, and Josep-Lluis Larriba-Pey. 2014. High quality, scalable and parallel community detection for large real graphs. In Pro- ceedings of the 23rd international conference on World wide web. 225-236.\n\nNetwork embedding as matrix factorization: Unifying deepwalk, line, pte, and node2vec. Jiezhong Qiu, Yuxiao Dong, Hao Ma, Jian Li, Kuansan Wang, Jie Tang, Proceedings of the Eleventh ACM International Conference on Web Search and Data Mining. the Eleventh ACM International Conference on Web Search and Data MiningACMJiezhong Qiu, Yuxiao Dong, Hao Ma, Jian Li, Kuansan Wang, and Jie Tang. 2018. Network embedding as matrix factorization: Unifying deepwalk, line, pte, and node2vec. In Proceedings of the Eleventh ACM International Conference on Web Search and Data Mining. ACM, 459-467.\n\nNear Linear Time Algorithm to Detect Community Structures in Large-scale Networks. Usha Nandini Raghavan, R\u00e9ka Albert, Soundar Kumara, Physical review E. 7636106Usha Nandini Raghavan, R\u00e9ka Albert, and Soundar Kumara. 2007. Near Lin- ear Time Algorithm to Detect Community Structures in Large-scale Networks. Physical review E 76, 3 (2007), 036106.\n\nGensim-statistical semantics in python. Radim Rehurek, Petr Sojka, Retrieved from genism. orgRadim Rehurek and Petr Sojka. 2011. Gensim-statistical semantics in python. Retrieved from genism. org (2011).\n\nCarl Benedek Rozemberczki, Rik Allen, Sarkar, arXiv:1909.13021Multi-scale Attributed Node Embedding. arXiv preprintBenedek Rozemberczki, Carl Allen, and Rik Sarkar. 2019. Multi-scale Attributed Node Embedding. arXiv preprint arXiv:1909.13021 (2019).\n\nGEM-SEC: Graph Embedding with Self Clustering. Ryan Benedek Rozemberczki, Rik Davies, Charles Sarkar, Sutton, Proceedings of the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining. the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and MiningACMBenedek Rozemberczki, Ryan Davies, Rik Sarkar, and Charles Sutton. 2019. GEM- SEC: Graph Embedding with Self Clustering. In Proceedings of the 2019 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining 2019. ACM, 65-72.\n\nLittle Ball of Fur: A Python Library for Graph Sampling. Oliver Benedek Rozemberczki, Rik Kiss, Sarkar, Proceedings of the 29th ACM International Conference on Information and Knowledge Management (CIKM '20). the 29th ACM International Conference on Information and Knowledge Management (CIKM '20)ACMBenedek Rozemberczki, Oliver Kiss, and Rik Sarkar. 2020. Little Ball of Fur: A Python Library for Graph Sampling. In Proceedings of the 29th ACM International Conference on Information and Knowledge Management (CIKM '20). ACM.\n\nFast Sequence-Based Embedding with Diffusion Graphs. Benedek Rozemberczki, Rik Sarkar, International Workshop on Complex Networks. SpringerBenedek Rozemberczki and Rik Sarkar. 2018. Fast Sequence-Based Embedding with Diffusion Graphs. In International Workshop on Complex Networks. Springer, 99-107.\n\nCharacteristic Functions on Graphs: Birds of a Feather, from Statistical Descriptors to Parametric Models. Benedek Rozemberczki, Rik Sarkar, Proceedings of the 29th ACM International on Conference on Information and Knowledge Management (CIKM '20). the 29th ACM International on Conference on Information and Knowledge Management (CIKM '20)ACMBenedek Rozemberczki and Rik Sarkar. 2020. Characteristic Functions on Graphs: Birds of a Feather, from Statistical Descriptors to Parametric Models. In Proceed- ings of the 29th ACM International on Conference on Information and Knowledge Management (CIKM '20). ACM.\n\nLow distortion delaunay embedding of trees in hyperbolic plane. Rik Sarkar, International Symposium on Graph Drawing. SpringerRik Sarkar. 2011. Low distortion delaunay embedding of trees in hyperbolic plane. In International Symposium on Graph Drawing. Springer, 355-366.\n\nA non-negative symmetric encoder-decoder approach for community detection. Bing-Jie Sun, Huawei Shen, Jinhua Gao, Wentao Ouyang, Xueqi Cheng, Proceedings of the 2017 ACM on Conference on Information and Knowledge Management. the 2017 ACM on Conference on Information and Knowledge ManagementACMBing-Jie Sun, Huawei Shen, Jinhua Gao, Wentao Ouyang, and Xueqi Cheng. 2017. A non-negative symmetric encoder-decoder approach for community detection. In Proceedings of the 2017 ACM on Conference on Information and Knowledge Management. ACM, 597-606.\n\nAlternating direction method of multipliers for non-negative matrix factorization with the beta-divergence. L Dennis, Cedric Sun, Fevotte, 2014 IEEE international conference on acoustics, speech and signal processing (ICASSP). IEEEDennis L Sun and Cedric Fevotte. 2014. Alternating direction method of multipli- ers for non-negative matrix factorization with the beta-divergence. In 2014 IEEE international conference on acoustics, speech and signal processing (ICASSP). IEEE, 6201-6205.\n\nNetlsd: hearing the shape of a graph. Anton Tsitsulin, Davide Mottin, Panagiotis Karras, Alexander Bronstein, Emmanuel M\u00fcller, Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data MiningAnton Tsitsulin, Davide Mottin, Panagiotis Karras, Alexander Bronstein, and Emmanuel M\u00fcller. 2018. Netlsd: hearing the shape of a graph. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. 2347-2356.\n\nMetric embedding, hyperbolic space, and social networks. Kevin Verbeek, Subhash Suri, Proceedings of the thirtieth annual symposium on Computational geometry. the thirtieth annual symposium on Computational geometryKevin Verbeek and Subhash Suri. 2014. Metric embedding, hyperbolic space, and social networks. In Proceedings of the thirtieth annual symposium on Computa- tional geometry. 501-510.\n\nHunt for the unique, stable, sparse and fast feature learning on graphs. Saurabh Verma, Zhi-Li Zhang, Advances in Neural Information Processing Systems. Saurabh Verma and Zhi-Li Zhang. 2017. Hunt for the unique, stable, sparse and fast feature learning on graphs. In Advances in Neural Information Processing Systems. 88-98.\n\nPauli Virtanen, Ralf Gommers, E Travis, Matt Oliphant, Tyler Haberland, David Reddy, Evgeni Cournapeau, Pearu Burovski, Warren Peterson, Jonathan Weckesser, Bright, arXiv:1907.10121SciPy 1.0-fundamental algorithms for scientific computing in Python. arXiv preprintPauli Virtanen, Ralf Gommers, Travis E Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser, Jonathan Bright, et al. 2019. SciPy 1.0-fundamental algorithms for scientific computing in Python. arXiv preprint arXiv:1907.10121 (2019).\n\nThe NumPy array: a structure for efficient numerical computation. Chris St\u00e9fan Van Der Walt, Gael Colbert, Varoquaux, Computing in Science & Engineering. 13St\u00e9fan van der Walt, S Chris Colbert, and Gael Varoquaux. 2011. The NumPy array: a structure for efficient numerical computation. Computing in Science & Engineering 13, 2 (2011), 22-30.\n\nCommunity Preserving Network Embedding. Xiao Wang, Peng Cui, Jing Wang, Jian Pei, Wenwu Zhu, Shiqiang Yang, Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence (AAAI'17. the Thirty-First AAAI Conference on Artificial Intelligence (AAAI'17Xiao Wang, Peng Cui, Jing Wang, Jian Pei, Wenwu Zhu, and Shiqiang Yang. 2017. Community Preserving Network Embedding. In Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence (AAAI'17). 203-209.\n\nDeep Graph Kernels. Pinar Yanardag, S V N Vishwanathan, Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data MiningPinar Yanardag and S.V.N. Vishwanathan. 2015. Deep Graph Kernels. In Proceed- ings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. 1365-1374.\n\nNetwork representation learning with rich text information. Cheng Yang, Zhiyuan Liu, Deli Zhao, Maosong Sun, Edward Chang, Twenty-Fourth International Joint Conference on Artificial Intelligence. Cheng Yang, Zhiyuan Liu, Deli Zhao, Maosong Sun, and Edward Chang. 2015. Network representation learning with rich text information. In Twenty-Fourth International Joint Conference on Artificial Intelligence.\n\nFast network embedding enhancement via high order proximity approximation. Cheng Yang, Maosong Sun, Zhiyuan Liu, Cunchao Tu, IJCAI. Cheng Yang, Maosong Sun, Zhiyuan Liu, and Cunchao Tu. 2017. Fast network embedding enhancement via high order proximity approximation.. In IJCAI. 3894-3900.\n\nNodeSketch: Highly-Efficient Graph Embeddings via Recursive Sketching. Dingqi Yang, Paolo Rosso, Bin Li, Philippe Cudre-Mauroux, Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data MiningDingqi Yang, Paolo Rosso, Bin Li, and Philippe Cudre-Mauroux. 2019. NodeSketch: Highly-Efficient Graph Embeddings via Recursive Sketching. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining. 1162-1172.\n\nBinarized attributed network embedding. Hong Yang, Shirui Pan, Peng Zhang, Ling Chen, Defu Lian, Chengqi Zhang, 2018 IEEE International Conference on Data Mining (ICDM). IEEEHong Yang, Shirui Pan, Peng Zhang, Ling Chen, Defu Lian, and Chengqi Zhang. 2018. Binarized attributed network embedding. In 2018 IEEE International Con- ference on Data Mining (ICDM). IEEE, 1476-1481.\n\nOverlapping community detection at scale: a nonnegative matrix factorization approach. Jaewon Yang, Jure Leskovec, Proceedings of the sixth ACM international conference on Web search and data mining. the sixth ACM international conference on Web search and data miningACMJaewon Yang and Jure Leskovec. 2013. Overlapping community detection at scale: a nonnegative matrix factorization approach. In Proceedings of the sixth ACM international conference on Web search and data mining. ACM, 587-596.\n\nEnhanced Network Embedding with Text Information. Shuang Yang, Bo Yang, 24th International Conference on Pattern Recognition (ICPR). IEEEShuang Yang and Bo Yang. 2018. Enhanced Network Embedding with Text Information. In 2018 24th International Conference on Pattern Recognition (ICPR). IEEE, 326-331.\n\nDeep Autoencoder-like Nonnegative Matrix Factorization for Community Detection. Fanghua Ye, Chuan Chen, Zibin Zheng, Proceedings of the 27th ACM International Conference on Information and Knowledge Management (CIKM '18. the 27th ACM International Conference on Information and Knowledge Management (CIKM '18Fanghua Ye, Chuan Chen, and Zibin Zheng. 2018. Deep Autoencoder-like Non- negative Matrix Factorization for Community Detection. In Proceedings of the 27th ACM International Conference on Information and Knowledge Management (CIKM '18). 1393-1402.\n\nAn information flow model for conflict and fission in small groups. W Wayne, Zachary, Journal of anthropological research. 33Wayne W Zachary. 1977. An information flow model for conflict and fission in small groups. Journal of anthropological research 33, 4 (1977), 452-473.\n\nSINE: Scalable Incomplete Network Embedding. Daokun Zhang, Jie Yin, Xingquan Zhu, Chengqi Zhang, 2018 IEEE International Conference on Data Mining (ICDM). IEEEDaokun Zhang, Jie Yin, Xingquan Zhu, and Chengqi Zhang. 2018. SINE: Scalable Incomplete Network Embedding. In 2018 IEEE International Conference on Data Mining (ICDM). IEEE, 737-746.\n", "annotations": {"author": "[{\"end\":227,\"start\":122},{\"end\":309,\"start\":228},{\"end\":396,\"start\":310}]", "publisher": null, "author_last_name": "[{\"end\":142,\"start\":130},{\"end\":239,\"start\":235},{\"end\":320,\"start\":314}]", "author_first_name": "[{\"end\":129,\"start\":122},{\"end\":234,\"start\":228},{\"end\":313,\"start\":310}]", "author_affiliation": "[{\"end\":226,\"start\":174},{\"end\":308,\"start\":265},{\"end\":395,\"start\":343}]", "title": "[{\"end\":94,\"start\":1},{\"end\":490,\"start\":397}]", "venue": "[{\"end\":512,\"start\":492}]", "abstract": "[{\"end\":1832,\"start\":807}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b19\"},\"end\":1927,\"start\":1923},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":1930,\"start\":1927},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":1933,\"start\":1930},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":2177,\"start\":2173},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":2180,\"start\":2177},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":2183,\"start\":2180},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2186,\"start\":2183},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":2189,\"start\":2186},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2287,\"start\":2283},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":2290,\"start\":2287},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":2293,\"start\":2290},{\"end\":2977,\"start\":2953},{\"end\":3169,\"start\":3145},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3393,\"start\":3389},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":3396,\"start\":3393},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3399,\"start\":3396},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3611,\"start\":3608},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3613,\"start\":3611},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":3616,\"start\":3613},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":3619,\"start\":3616},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":3622,\"start\":3619},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3816,\"start\":3812},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3819,\"start\":3816},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3975,\"start\":3971},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3978,\"start\":3975},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":4426,\"start\":4422},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4618,\"start\":4615},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4979,\"start\":4975},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":4982,\"start\":4979},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":4985,\"start\":4982},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5154,\"start\":5151},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":5157,\"start\":5154},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":5160,\"start\":5157},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5163,\"start\":5160},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":6592,\"start\":6589},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":8160,\"start\":8156},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":8163,\"start\":8160},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":8166,\"start\":8163},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":8169,\"start\":8166},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8316,\"start\":8312},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":8319,\"start\":8316},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":8322,\"start\":8319},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":8325,\"start\":8322},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":8327,\"start\":8325},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":8804,\"start\":8800},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8807,\"start\":8804},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8810,\"start\":8807},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8828,\"start\":8825},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8831,\"start\":8828},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":8834,\"start\":8831},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":8837,\"start\":8834},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9050,\"start\":9047},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":9053,\"start\":9050},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":9056,\"start\":9053},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":9544,\"start\":9540},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":9547,\"start\":9544},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":9595,\"start\":9591},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":9598,\"start\":9595},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":9769,\"start\":9765},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":10275,\"start\":10272},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":10278,\"start\":10275},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":10281,\"start\":10278},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":10445,\"start\":10442},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10448,\"start\":10445},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":10718,\"start\":10715},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":10721,\"start\":10718},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":15768,\"start\":15765},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":15771,\"start\":15768},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":15974,\"start\":15971},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":15977,\"start\":15974},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":15980,\"start\":15977},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":15983,\"start\":15980},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":15986,\"start\":15983},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":16010,\"start\":16006},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":16082,\"start\":16079},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":18193,\"start\":18189},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":18197,\"start\":18193},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":18854,\"start\":18851},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":18856,\"start\":18854},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":18859,\"start\":18856},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":18862,\"start\":18859},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":18865,\"start\":18862},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":18868,\"start\":18865},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":19034,\"start\":19031},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":19037,\"start\":19034},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20329,\"start\":20325},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":20332,\"start\":20329},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":20873,\"start\":20872},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":22073,\"start\":22069},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":22207,\"start\":22203},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":22266,\"start\":22262},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":22325,\"start\":22321},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":22387,\"start\":22383},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":22455,\"start\":22451},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":22515,\"start\":22511},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":22580,\"start\":22576},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":22637,\"start\":22633},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":22697,\"start\":22693},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":22944,\"start\":22940},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":22947,\"start\":22944},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":22950,\"start\":22947},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":22953,\"start\":22950},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":22956,\"start\":22953},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":22959,\"start\":22956},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":23489,\"start\":23485},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":23492,\"start\":23489},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":23495,\"start\":23492},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":23498,\"start\":23495},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":23501,\"start\":23498},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":23578,\"start\":23574},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":23581,\"start\":23578},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":23584,\"start\":23581},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":23587,\"start\":23584},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":23590,\"start\":23587},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":23723,\"start\":23719},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":23743,\"start\":23739},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":24674,\"start\":24671},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24677,\"start\":24674},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":24710,\"start\":24707},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":24713,\"start\":24710},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":24716,\"start\":24713},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":24719,\"start\":24716},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":25600,\"start\":25597},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":25602,\"start\":25600},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":25605,\"start\":25602},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":25608,\"start\":25605},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":25611,\"start\":25608},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":25614,\"start\":25611},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":25617,\"start\":25614},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":25620,\"start\":25617},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":25623,\"start\":25620},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":25655,\"start\":25652},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":25658,\"start\":25655},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":25678,\"start\":25675},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":25681,\"start\":25678},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":25684,\"start\":25681},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":25687,\"start\":25684},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":25690,\"start\":25687},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":25693,\"start\":25690},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":25882,\"start\":25879},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":25898,\"start\":25894},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":25914,\"start\":25910},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":26046,\"start\":26042},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":26049,\"start\":26046},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":26430,\"start\":26426},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":26495,\"start\":26491},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":26558,\"start\":26554},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":26618,\"start\":26614},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":26681,\"start\":26677},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":27865,\"start\":27862},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":27868,\"start\":27865},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":28190,\"start\":28187},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":28193,\"start\":28190},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":29208,\"start\":29204},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":29315,\"start\":29311},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":29334,\"start\":29330},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":29594,\"start\":29590},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":29605,\"start\":29602},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":29618,\"start\":29614},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":29630,\"start\":29626},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":29653,\"start\":29649},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":30762,\"start\":30758},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":30765,\"start\":30762},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30818,\"start\":30817},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":31412,\"start\":31410},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":35343,\"start\":35340}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":31003,\"start\":30767},{\"attributes\":{\"id\":\"fig_1\"},\"end\":31116,\"start\":31004},{\"attributes\":{\"id\":\"fig_2\"},\"end\":31229,\"start\":31117},{\"attributes\":{\"id\":\"fig_3\"},\"end\":31673,\"start\":31230},{\"attributes\":{\"id\":\"fig_4\"},\"end\":32762,\"start\":31674},{\"attributes\":{\"id\":\"fig_5\"},\"end\":32910,\"start\":32763},{\"attributes\":{\"id\":\"fig_6\"},\"end\":33049,\"start\":32911},{\"attributes\":{\"id\":\"fig_7\"},\"end\":33457,\"start\":33050},{\"attributes\":{\"id\":\"fig_8\"},\"end\":33603,\"start\":33458},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":33937,\"start\":33604},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":34283,\"start\":33938},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":34475,\"start\":34284},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":35119,\"start\":34476},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":35331,\"start\":35120},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":36204,\"start\":35332}]", "paragraph": "[{\"end\":3469,\"start\":1848},{\"end\":4619,\"start\":3471},{\"end\":5361,\"start\":4621},{\"end\":5863,\"start\":5363},{\"end\":5944,\"start\":5865},{\"end\":6711,\"start\":5946},{\"end\":7467,\"start\":6713},{\"end\":7649,\"start\":7510},{\"end\":8329,\"start\":7673},{\"end\":8662,\"start\":8348},{\"end\":8961,\"start\":8664},{\"end\":9306,\"start\":8963},{\"end\":9599,\"start\":9308},{\"end\":9770,\"start\":9601},{\"end\":10364,\"start\":9814},{\"end\":10595,\"start\":10366},{\"end\":10970,\"start\":10617},{\"end\":11748,\"start\":11024},{\"end\":12324,\"start\":11750},{\"end\":12384,\"start\":12326},{\"end\":13090,\"start\":12437},{\"end\":13616,\"start\":13092},{\"end\":13870,\"start\":13618},{\"end\":14143,\"start\":13872},{\"end\":14727,\"start\":14145},{\"end\":14969,\"start\":14762},{\"end\":15482,\"start\":14971},{\"end\":16083,\"start\":15519},{\"end\":16175,\"start\":16085},{\"end\":16775,\"start\":16237},{\"end\":17890,\"start\":16777},{\"end\":18331,\"start\":17892},{\"end\":18801,\"start\":18347},{\"end\":19234,\"start\":18803},{\"end\":19824,\"start\":19262},{\"end\":20111,\"start\":19849},{\"end\":20957,\"start\":20125},{\"end\":22373,\"start\":20959},{\"end\":22435,\"start\":22375},{\"end\":22503,\"start\":22437},{\"end\":22564,\"start\":22505},{\"end\":24025,\"start\":22566},{\"end\":24878,\"start\":24051},{\"end\":26113,\"start\":24903},{\"end\":26478,\"start\":26129},{\"end\":26543,\"start\":26480},{\"end\":26606,\"start\":26545},{\"end\":26666,\"start\":26608},{\"end\":27428,\"start\":26668},{\"end\":27948,\"start\":27430},{\"end\":28129,\"start\":27965},{\"end\":28801,\"start\":28174},{\"end\":29453,\"start\":28828},{\"end\":30390,\"start\":29490},{\"end\":30766,\"start\":30392}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":20582,\"start\":20575},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":21880,\"start\":21873},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":23312,\"start\":23305},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":23412,\"start\":23405},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":24539,\"start\":24532},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":24606,\"start\":24599},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":25490,\"start\":25483},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":25536,\"start\":25528}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1846,\"start\":1834},{\"attributes\":{\"n\":\"2\"},\"end\":7508,\"start\":7470},{\"attributes\":{\"n\":\"2.1\"},\"end\":7671,\"start\":7652},{\"attributes\":{\"n\":\"2.2\"},\"end\":8346,\"start\":8332},{\"attributes\":{\"n\":\"2.3\"},\"end\":9812,\"start\":9773},{\"attributes\":{\"n\":\"3\"},\"end\":10615,\"start\":10598},{\"attributes\":{\"n\":\"3.1\"},\"end\":11022,\"start\":10973},{\"attributes\":{\"n\":\"3.2\"},\"end\":12435,\"start\":12387},{\"attributes\":{\"n\":\"3.3\"},\"end\":14760,\"start\":14730},{\"attributes\":{\"n\":\"3.4\"},\"end\":15517,\"start\":15485},{\"attributes\":{\"n\":\"3.5\"},\"end\":16235,\"start\":16178},{\"attributes\":{\"n\":\"3.6\"},\"end\":18345,\"start\":18334},{\"attributes\":{\"n\":\"4\"},\"end\":19260,\"start\":19237},{\"attributes\":{\"n\":\"4.1\"},\"end\":19847,\"start\":19827},{\"attributes\":{\"n\":\"4.1.1\"},\"end\":20123,\"start\":20114},{\"attributes\":{\"n\":\"4.1.3\"},\"end\":24049,\"start\":24028},{\"attributes\":{\"n\":\"4.1.4\"},\"end\":24901,\"start\":24881},{\"attributes\":{\"n\":\"4.2\"},\"end\":26127,\"start\":26116},{\"attributes\":{\"n\":\"5\"},\"end\":27963,\"start\":27951},{\"attributes\":{\"n\":\"5.1\"},\"end\":28172,\"start\":28132},{\"attributes\":{\"n\":\"5.2\"},\"end\":28826,\"start\":28804},{\"attributes\":{\"n\":\"6\"},\"end\":29488,\"start\":29456},{\"end\":30778,\"start\":30768},{\"end\":31015,\"start\":31005},{\"end\":31128,\"start\":31118},{\"end\":31241,\"start\":31231},{\"end\":31676,\"start\":31675},{\"end\":32774,\"start\":32764},{\"end\":32922,\"start\":32912},{\"end\":33059,\"start\":33051},{\"end\":33469,\"start\":33459},{\"end\":33614,\"start\":33605},{\"end\":33948,\"start\":33939},{\"end\":34294,\"start\":34285},{\"end\":34486,\"start\":34477},{\"end\":35130,\"start\":35121}]", "table": "[{\"end\":33937,\"start\":33667},{\"end\":34283,\"start\":34011},{\"end\":34475,\"start\":34385},{\"end\":35119,\"start\":34596},{\"end\":35331,\"start\":35239},{\"end\":36204,\"start\":35508}]", "figure_caption": "[{\"end\":31003,\"start\":30780},{\"end\":31116,\"start\":31017},{\"end\":31229,\"start\":31130},{\"end\":31673,\"start\":31243},{\"end\":32762,\"start\":31677},{\"end\":32910,\"start\":32776},{\"end\":33049,\"start\":32924},{\"end\":33457,\"start\":33061},{\"end\":33603,\"start\":33471},{\"end\":33667,\"start\":33616},{\"end\":34011,\"start\":33950},{\"end\":34385,\"start\":34296},{\"end\":34596,\"start\":34488},{\"end\":35239,\"start\":35132},{\"end\":35508,\"start\":35334}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11833,\"start\":11825},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13629,\"start\":13621},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13953,\"start\":13945},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14142,\"start\":14134},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17990,\"start\":17982},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":26693,\"start\":26685},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":27210,\"start\":27202}]", "bib_author_first_name": "[{\"end\":36494,\"start\":36488},{\"end\":36506,\"start\":36502},{\"end\":36522,\"start\":36515},{\"end\":36536,\"start\":36529},{\"end\":36547,\"start\":36543},{\"end\":36562,\"start\":36555},{\"end\":36577,\"start\":36569},{\"end\":36591,\"start\":36585},{\"end\":36610,\"start\":36602},{\"end\":36626,\"start\":36619},{\"end\":37101,\"start\":37100},{\"end\":37115,\"start\":37111},{\"end\":37117,\"start\":37116},{\"end\":37129,\"start\":37125},{\"end\":37134,\"start\":37130},{\"end\":37151,\"start\":37147},{\"end\":37495,\"start\":37487},{\"end\":37516,\"start\":37511},{\"end\":37528,\"start\":37523},{\"end\":37548,\"start\":37537},{\"end\":37898,\"start\":37891},{\"end\":37913,\"start\":37907},{\"end\":38240,\"start\":38236},{\"end\":38257,\"start\":38251},{\"end\":38273,\"start\":38266},{\"end\":38289,\"start\":38283},{\"end\":38308,\"start\":38301},{\"end\":38325,\"start\":38318},{\"end\":38338,\"start\":38334},{\"end\":38353,\"start\":38348},{\"end\":38377,\"start\":38368},{\"end\":38394,\"start\":38388},{\"end\":38410,\"start\":38404},{\"end\":38424,\"start\":38419},{\"end\":38443,\"start\":38437},{\"end\":38455,\"start\":38450},{\"end\":38466,\"start\":38462},{\"end\":38947,\"start\":38938},{\"end\":38956,\"start\":38953},{\"end\":38969,\"start\":38961},{\"end\":39464,\"start\":39460},{\"end\":39478,\"start\":39471},{\"end\":39791,\"start\":39787},{\"end\":39809,\"start\":39803},{\"end\":40029,\"start\":40022},{\"end\":40048,\"start\":40042},{\"end\":40064,\"start\":40057},{\"end\":40080,\"start\":40071},{\"end\":40394,\"start\":40388},{\"end\":40410,\"start\":40403},{\"end\":40424,\"start\":40419},{\"end\":40437,\"start\":40433},{\"end\":40959,\"start\":40949},{\"end\":40974,\"start\":40968},{\"end\":40991,\"start\":40985},{\"end\":41512,\"start\":41508},{\"end\":41521,\"start\":41518},{\"end\":41535,\"start\":41528},{\"end\":41923,\"start\":41919},{\"end\":41939,\"start\":41933},{\"end\":41953,\"start\":41947},{\"end\":41955,\"start\":41954},{\"end\":42293,\"start\":42288},{\"end\":42310,\"start\":42305},{\"end\":42326,\"start\":42322},{\"end\":42348,\"start\":42340},{\"end\":42361,\"start\":42355},{\"end\":42373,\"start\":42368},{\"end\":42387,\"start\":42382},{\"end\":42404,\"start\":42396},{\"end\":42419,\"start\":42416},{\"end\":43005,\"start\":43001},{\"end\":43018,\"start\":43011},{\"end\":43028,\"start\":43023},{\"end\":43548,\"start\":43546},{\"end\":43561,\"start\":43556},{\"end\":43574,\"start\":43568},{\"end\":43919,\"start\":43915},{\"end\":43936,\"start\":43930},{\"end\":44211,\"start\":44203},{\"end\":44220,\"start\":44216},{\"end\":44238,\"start\":44228},{\"end\":44255,\"start\":44245},{\"end\":44794,\"start\":44785},{\"end\":44815,\"start\":44806},{\"end\":44839,\"start\":44830},{\"end\":44857,\"start\":44852},{\"end\":44868,\"start\":44864},{\"end\":45101,\"start\":45093},{\"end\":45110,\"start\":45106},{\"end\":45120,\"start\":45116},{\"end\":45131,\"start\":45126},{\"end\":45144,\"start\":45139},{\"end\":45644,\"start\":45640},{\"end\":45656,\"start\":45653},{\"end\":45673,\"start\":45664},{\"end\":45685,\"start\":45681},{\"end\":45698,\"start\":45693},{\"end\":45716,\"start\":45709},{\"end\":45731,\"start\":45725},{\"end\":45747,\"start\":45741},{\"end\":45760,\"start\":45753},{\"end\":45777,\"start\":45773},{\"end\":46180,\"start\":46174},{\"end\":46196,\"start\":46192},{\"end\":46217,\"start\":46208},{\"end\":46235,\"start\":46228},{\"end\":46252,\"start\":46244},{\"end\":46269,\"start\":46262},{\"end\":46285,\"start\":46278},{\"end\":46300,\"start\":46295},{\"end\":46318,\"start\":46315},{\"end\":46333,\"start\":46326},{\"end\":46704,\"start\":46703},{\"end\":46851,\"start\":46846},{\"end\":46865,\"start\":46861},{\"end\":46881,\"start\":46875},{\"end\":47376,\"start\":47371},{\"end\":47391,\"start\":47386},{\"end\":47409,\"start\":47402},{\"end\":47422,\"start\":47416},{\"end\":47994,\"start\":47989},{\"end\":48012,\"start\":48007},{\"end\":48039,\"start\":48028},{\"end\":48503,\"start\":48495},{\"end\":48515,\"start\":48509},{\"end\":48525,\"start\":48522},{\"end\":48534,\"start\":48530},{\"end\":48546,\"start\":48539},{\"end\":48556,\"start\":48553},{\"end\":49083,\"start\":49079},{\"end\":49106,\"start\":49102},{\"end\":49122,\"start\":49115},{\"end\":49390,\"start\":49385},{\"end\":49404,\"start\":49400},{\"end\":49554,\"start\":49550},{\"end\":49580,\"start\":49577},{\"end\":49852,\"start\":49848},{\"end\":49878,\"start\":49875},{\"end\":49894,\"start\":49887},{\"end\":50432,\"start\":50426},{\"end\":50458,\"start\":50455},{\"end\":50957,\"start\":50950},{\"end\":50975,\"start\":50972},{\"end\":51312,\"start\":51305},{\"end\":51330,\"start\":51327},{\"end\":51877,\"start\":51874},{\"end\":52166,\"start\":52158},{\"end\":52178,\"start\":52172},{\"end\":52191,\"start\":52185},{\"end\":52203,\"start\":52197},{\"end\":52217,\"start\":52212},{\"end\":52739,\"start\":52738},{\"end\":52754,\"start\":52748},{\"end\":53162,\"start\":53157},{\"end\":53180,\"start\":53174},{\"end\":53199,\"start\":53189},{\"end\":53217,\"start\":53208},{\"end\":53237,\"start\":53229},{\"end\":53737,\"start\":53732},{\"end\":53754,\"start\":53747},{\"end\":54153,\"start\":54146},{\"end\":54167,\"start\":54161},{\"end\":54404,\"start\":54399},{\"end\":54419,\"start\":54415},{\"end\":54430,\"start\":54429},{\"end\":54443,\"start\":54439},{\"end\":54459,\"start\":54454},{\"end\":54476,\"start\":54471},{\"end\":54490,\"start\":54484},{\"end\":54508,\"start\":54503},{\"end\":54525,\"start\":54519},{\"end\":54544,\"start\":54536},{\"end\":55021,\"start\":55016},{\"end\":55047,\"start\":55043},{\"end\":55337,\"start\":55333},{\"end\":55348,\"start\":55344},{\"end\":55358,\"start\":55354},{\"end\":55369,\"start\":55365},{\"end\":55380,\"start\":55375},{\"end\":55394,\"start\":55386},{\"end\":55796,\"start\":55791},{\"end\":55808,\"start\":55807},{\"end\":55812,\"start\":55809},{\"end\":56258,\"start\":56253},{\"end\":56272,\"start\":56265},{\"end\":56282,\"start\":56278},{\"end\":56296,\"start\":56289},{\"end\":56308,\"start\":56302},{\"end\":56679,\"start\":56674},{\"end\":56693,\"start\":56686},{\"end\":56706,\"start\":56699},{\"end\":56719,\"start\":56712},{\"end\":56966,\"start\":56960},{\"end\":56978,\"start\":56973},{\"end\":56989,\"start\":56986},{\"end\":57002,\"start\":56994},{\"end\":57493,\"start\":57489},{\"end\":57506,\"start\":57500},{\"end\":57516,\"start\":57512},{\"end\":57528,\"start\":57524},{\"end\":57539,\"start\":57535},{\"end\":57553,\"start\":57546},{\"end\":57919,\"start\":57913},{\"end\":57930,\"start\":57926},{\"end\":58380,\"start\":58374},{\"end\":58389,\"start\":58387},{\"end\":58714,\"start\":58707},{\"end\":58724,\"start\":58719},{\"end\":58736,\"start\":58731},{\"end\":59253,\"start\":59252},{\"end\":59511,\"start\":59505},{\"end\":59522,\"start\":59519},{\"end\":59536,\"start\":59528},{\"end\":59549,\"start\":59542}]", "bib_author_last_name": "[{\"end\":36500,\"start\":36495},{\"end\":36513,\"start\":36507},{\"end\":36527,\"start\":36523},{\"end\":36541,\"start\":36537},{\"end\":36553,\"start\":36548},{\"end\":36567,\"start\":36563},{\"end\":36583,\"start\":36578},{\"end\":36600,\"start\":36592},{\"end\":36617,\"start\":36611},{\"end\":36632,\"start\":36627},{\"end\":37109,\"start\":37102},{\"end\":37123,\"start\":37118},{\"end\":37140,\"start\":37135},{\"end\":37145,\"start\":37142},{\"end\":37169,\"start\":37152},{\"end\":37175,\"start\":37171},{\"end\":37509,\"start\":37496},{\"end\":37521,\"start\":37517},{\"end\":37535,\"start\":37529},{\"end\":37554,\"start\":37549},{\"end\":37905,\"start\":37899},{\"end\":37920,\"start\":37914},{\"end\":38249,\"start\":38241},{\"end\":38264,\"start\":38258},{\"end\":38281,\"start\":38274},{\"end\":38299,\"start\":38290},{\"end\":38316,\"start\":38309},{\"end\":38332,\"start\":38326},{\"end\":38346,\"start\":38339},{\"end\":38366,\"start\":38354},{\"end\":38386,\"start\":38378},{\"end\":38402,\"start\":38395},{\"end\":38417,\"start\":38411},{\"end\":38435,\"start\":38425},{\"end\":38448,\"start\":38444},{\"end\":38460,\"start\":38456},{\"end\":38476,\"start\":38467},{\"end\":38951,\"start\":38948},{\"end\":38959,\"start\":38957},{\"end\":38972,\"start\":38970},{\"end\":39469,\"start\":39465},{\"end\":39483,\"start\":39479},{\"end\":39801,\"start\":39792},{\"end\":39817,\"start\":39810},{\"end\":40040,\"start\":40030},{\"end\":40055,\"start\":40049},{\"end\":40069,\"start\":40065},{\"end\":40090,\"start\":40081},{\"end\":40401,\"start\":40395},{\"end\":40417,\"start\":40411},{\"end\":40431,\"start\":40425},{\"end\":40446,\"start\":40438},{\"end\":40966,\"start\":40960},{\"end\":40983,\"start\":40975},{\"end\":41001,\"start\":40992},{\"end\":41516,\"start\":41513},{\"end\":41526,\"start\":41522},{\"end\":41540,\"start\":41536},{\"end\":41931,\"start\":41924},{\"end\":41945,\"start\":41940},{\"end\":41961,\"start\":41956},{\"end\":42303,\"start\":42294},{\"end\":42320,\"start\":42311},{\"end\":42338,\"start\":42327},{\"end\":42353,\"start\":42349},{\"end\":42366,\"start\":42362},{\"end\":42380,\"start\":42374},{\"end\":42394,\"start\":42388},{\"end\":42414,\"start\":42405},{\"end\":42422,\"start\":42420},{\"end\":43009,\"start\":43006},{\"end\":43021,\"start\":43019},{\"end\":43031,\"start\":43029},{\"end\":43554,\"start\":43549},{\"end\":43566,\"start\":43562},{\"end\":43579,\"start\":43575},{\"end\":43928,\"start\":43920},{\"end\":43942,\"start\":43937},{\"end\":44214,\"start\":44212},{\"end\":44226,\"start\":44221},{\"end\":44243,\"start\":44239},{\"end\":44259,\"start\":44256},{\"end\":44804,\"start\":44795},{\"end\":44828,\"start\":44816},{\"end\":44850,\"start\":44840},{\"end\":44862,\"start\":44858},{\"end\":44872,\"start\":44869},{\"end\":45104,\"start\":45102},{\"end\":45114,\"start\":45111},{\"end\":45124,\"start\":45121},{\"end\":45137,\"start\":45132},{\"end\":45148,\"start\":45145},{\"end\":45651,\"start\":45645},{\"end\":45662,\"start\":45657},{\"end\":45679,\"start\":45674},{\"end\":45691,\"start\":45686},{\"end\":45707,\"start\":45699},{\"end\":45723,\"start\":45717},{\"end\":45739,\"start\":45732},{\"end\":45751,\"start\":45748},{\"end\":45771,\"start\":45761},{\"end\":45784,\"start\":45778},{\"end\":46190,\"start\":46181},{\"end\":46206,\"start\":46197},{\"end\":46226,\"start\":46218},{\"end\":46242,\"start\":46236},{\"end\":46260,\"start\":46253},{\"end\":46276,\"start\":46270},{\"end\":46293,\"start\":46286},{\"end\":46313,\"start\":46301},{\"end\":46324,\"start\":46319},{\"end\":46341,\"start\":46334},{\"end\":46710,\"start\":46705},{\"end\":46719,\"start\":46712},{\"end\":46859,\"start\":46852},{\"end\":46873,\"start\":46866},{\"end\":46888,\"start\":46882},{\"end\":47384,\"start\":47377},{\"end\":47400,\"start\":47392},{\"end\":47414,\"start\":47410},{\"end\":47429,\"start\":47423},{\"end\":48005,\"start\":47995},{\"end\":48026,\"start\":48013},{\"end\":48051,\"start\":48040},{\"end\":48507,\"start\":48504},{\"end\":48520,\"start\":48516},{\"end\":48528,\"start\":48526},{\"end\":48537,\"start\":48535},{\"end\":48551,\"start\":48547},{\"end\":48561,\"start\":48557},{\"end\":49100,\"start\":49084},{\"end\":49113,\"start\":49107},{\"end\":49129,\"start\":49123},{\"end\":49398,\"start\":49391},{\"end\":49410,\"start\":49405},{\"end\":49575,\"start\":49555},{\"end\":49586,\"start\":49581},{\"end\":49594,\"start\":49588},{\"end\":49873,\"start\":49853},{\"end\":49885,\"start\":49879},{\"end\":49901,\"start\":49895},{\"end\":49909,\"start\":49903},{\"end\":50453,\"start\":50433},{\"end\":50463,\"start\":50459},{\"end\":50471,\"start\":50465},{\"end\":50970,\"start\":50958},{\"end\":50982,\"start\":50976},{\"end\":51325,\"start\":51313},{\"end\":51337,\"start\":51331},{\"end\":51884,\"start\":51878},{\"end\":52170,\"start\":52167},{\"end\":52183,\"start\":52179},{\"end\":52195,\"start\":52192},{\"end\":52210,\"start\":52204},{\"end\":52223,\"start\":52218},{\"end\":52746,\"start\":52740},{\"end\":52758,\"start\":52755},{\"end\":52767,\"start\":52760},{\"end\":53172,\"start\":53163},{\"end\":53187,\"start\":53181},{\"end\":53206,\"start\":53200},{\"end\":53227,\"start\":53218},{\"end\":53244,\"start\":53238},{\"end\":53745,\"start\":53738},{\"end\":53759,\"start\":53755},{\"end\":54159,\"start\":54154},{\"end\":54173,\"start\":54168},{\"end\":54413,\"start\":54405},{\"end\":54427,\"start\":54420},{\"end\":54437,\"start\":54431},{\"end\":54452,\"start\":54444},{\"end\":54469,\"start\":54460},{\"end\":54482,\"start\":54477},{\"end\":54501,\"start\":54491},{\"end\":54517,\"start\":54509},{\"end\":54534,\"start\":54526},{\"end\":54554,\"start\":54545},{\"end\":54562,\"start\":54556},{\"end\":55041,\"start\":55022},{\"end\":55055,\"start\":55048},{\"end\":55066,\"start\":55057},{\"end\":55342,\"start\":55338},{\"end\":55352,\"start\":55349},{\"end\":55363,\"start\":55359},{\"end\":55373,\"start\":55370},{\"end\":55384,\"start\":55381},{\"end\":55399,\"start\":55395},{\"end\":55805,\"start\":55797},{\"end\":55825,\"start\":55813},{\"end\":56263,\"start\":56259},{\"end\":56276,\"start\":56273},{\"end\":56287,\"start\":56283},{\"end\":56300,\"start\":56297},{\"end\":56314,\"start\":56309},{\"end\":56684,\"start\":56680},{\"end\":56697,\"start\":56694},{\"end\":56710,\"start\":56707},{\"end\":56722,\"start\":56720},{\"end\":56971,\"start\":56967},{\"end\":56984,\"start\":56979},{\"end\":56992,\"start\":56990},{\"end\":57016,\"start\":57003},{\"end\":57498,\"start\":57494},{\"end\":57510,\"start\":57507},{\"end\":57522,\"start\":57517},{\"end\":57533,\"start\":57529},{\"end\":57544,\"start\":57540},{\"end\":57559,\"start\":57554},{\"end\":57924,\"start\":57920},{\"end\":57939,\"start\":57931},{\"end\":58385,\"start\":58381},{\"end\":58394,\"start\":58390},{\"end\":58717,\"start\":58715},{\"end\":58729,\"start\":58725},{\"end\":58742,\"start\":58737},{\"end\":59259,\"start\":59254},{\"end\":59268,\"start\":59261},{\"end\":59517,\"start\":59512},{\"end\":59526,\"start\":59523},{\"end\":59540,\"start\":59537},{\"end\":59555,\"start\":59550}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":6287870},\"end\":37016,\"start\":36433},{\"attributes\":{\"id\":\"b1\"},\"end\":37374,\"start\":37018},{\"attributes\":{\"doi\":\"arXiv:1804.05313\",\"id\":\"b2\"},\"end\":37815,\"start\":37376},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":17572432},\"end\":38149,\"start\":37817},{\"attributes\":{\"doi\":\"ArXiv abs/1309.0238\",\"id\":\"b4\"},\"end\":38861,\"start\":38151},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":17341970},\"end\":39390,\"start\":38863},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":209339206},\"end\":39731,\"start\":39392},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":53047406},\"end\":40018,\"start\":39733},{\"attributes\":{\"id\":\"b8\"},\"end\":40177,\"start\":40020},{\"attributes\":{\"doi\":\"10.5281/zenodo.1003157\",\"id\":\"b9\"},\"end\":40326,\"start\":40179},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":3340632},\"end\":40876,\"start\":40328},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":34864991},\"end\":41460,\"start\":40878},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":59336129},\"end\":41849,\"start\":41462},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":16050699},\"end\":42227,\"start\":41851},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":458476},\"end\":42925,\"start\":42229},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":52100789},\"end\":43479,\"start\":42927},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":5972573},\"end\":43913,\"start\":43481},{\"attributes\":{\"id\":\"b17\"},\"end\":44128,\"start\":43915},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":184487268},\"end\":44718,\"start\":44130},{\"attributes\":{\"id\":\"b19\"},\"end\":45039,\"start\":44720},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":4957091},\"end\":45568,\"start\":45041},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":202786778},\"end\":46130,\"start\":45570},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":10659969},\"end\":46670,\"start\":46132},{\"attributes\":{\"id\":\"b23\"},\"end\":46791,\"start\":46672},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":3051291},\"end\":47299,\"start\":46793},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":207699173},\"end\":47908,\"start\":47301},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":448012},\"end\":48406,\"start\":47910},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":3952914},\"end\":48994,\"start\":48408},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":18741059},\"end\":49343,\"start\":48996},{\"attributes\":{\"id\":\"b29\"},\"end\":49548,\"start\":49345},{\"attributes\":{\"doi\":\"arXiv:1909.13021\",\"id\":\"b30\"},\"end\":49799,\"start\":49550},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":21894316},\"end\":50367,\"start\":49801},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":219531416},\"end\":50895,\"start\":50369},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":51682527},\"end\":51196,\"start\":50897},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":218674393},\"end\":51808,\"start\":51198},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":18268637},\"end\":52081,\"start\":51810},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":24916369},\"end\":52628,\"start\":52083},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":2520398},\"end\":53117,\"start\":52630},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":44061224},\"end\":53673,\"start\":53119},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":10574825},\"end\":54071,\"start\":53675},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":1081340},\"end\":54397,\"start\":54073},{\"attributes\":{\"doi\":\"arXiv:1907.10121\",\"id\":\"b41\"},\"end\":54948,\"start\":54399},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":16907816},\"end\":55291,\"start\":54950},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":29154877},\"end\":55769,\"start\":55293},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":207227372},\"end\":56191,\"start\":55771},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":2452205},\"end\":56597,\"start\":56193},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":3890286},\"end\":56887,\"start\":56599},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":196176794},\"end\":57447,\"start\":56889},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":59525833},\"end\":57824,\"start\":57449},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":3348307},\"end\":58322,\"start\":57826},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":54436622},\"end\":58625,\"start\":58324},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":53036450},\"end\":59182,\"start\":58627},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":197843028},\"end\":59458,\"start\":59184},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":53116443},\"end\":59801,\"start\":59460}]", "bib_title": "[{\"end\":36486,\"start\":36433},{\"end\":37098,\"start\":37018},{\"end\":37889,\"start\":37817},{\"end\":38936,\"start\":38863},{\"end\":39458,\"start\":39392},{\"end\":39785,\"start\":39733},{\"end\":40386,\"start\":40328},{\"end\":40947,\"start\":40878},{\"end\":41506,\"start\":41462},{\"end\":41917,\"start\":41851},{\"end\":42286,\"start\":42229},{\"end\":42999,\"start\":42927},{\"end\":43544,\"start\":43481},{\"end\":44201,\"start\":44130},{\"end\":45091,\"start\":45041},{\"end\":45638,\"start\":45570},{\"end\":46172,\"start\":46132},{\"end\":46844,\"start\":46793},{\"end\":47369,\"start\":47301},{\"end\":47987,\"start\":47910},{\"end\":48493,\"start\":48408},{\"end\":49077,\"start\":48996},{\"end\":49846,\"start\":49801},{\"end\":50424,\"start\":50369},{\"end\":50948,\"start\":50897},{\"end\":51303,\"start\":51198},{\"end\":51872,\"start\":51810},{\"end\":52156,\"start\":52083},{\"end\":52736,\"start\":52630},{\"end\":53155,\"start\":53119},{\"end\":53730,\"start\":53675},{\"end\":54144,\"start\":54073},{\"end\":55014,\"start\":54950},{\"end\":55331,\"start\":55293},{\"end\":55789,\"start\":55771},{\"end\":56251,\"start\":56193},{\"end\":56672,\"start\":56599},{\"end\":56958,\"start\":56889},{\"end\":57487,\"start\":57449},{\"end\":57911,\"start\":57826},{\"end\":58372,\"start\":58324},{\"end\":58705,\"start\":58627},{\"end\":59250,\"start\":59184},{\"end\":59503,\"start\":59460}]", "bib_author": "[{\"end\":36502,\"start\":36488},{\"end\":36515,\"start\":36502},{\"end\":36529,\"start\":36515},{\"end\":36543,\"start\":36529},{\"end\":36555,\"start\":36543},{\"end\":36569,\"start\":36555},{\"end\":36585,\"start\":36569},{\"end\":36602,\"start\":36585},{\"end\":36619,\"start\":36602},{\"end\":36634,\"start\":36619},{\"end\":37111,\"start\":37100},{\"end\":37125,\"start\":37111},{\"end\":37142,\"start\":37125},{\"end\":37147,\"start\":37142},{\"end\":37171,\"start\":37147},{\"end\":37177,\"start\":37171},{\"end\":37511,\"start\":37487},{\"end\":37523,\"start\":37511},{\"end\":37537,\"start\":37523},{\"end\":37556,\"start\":37537},{\"end\":37907,\"start\":37891},{\"end\":37922,\"start\":37907},{\"end\":38251,\"start\":38236},{\"end\":38266,\"start\":38251},{\"end\":38283,\"start\":38266},{\"end\":38301,\"start\":38283},{\"end\":38318,\"start\":38301},{\"end\":38334,\"start\":38318},{\"end\":38348,\"start\":38334},{\"end\":38368,\"start\":38348},{\"end\":38388,\"start\":38368},{\"end\":38404,\"start\":38388},{\"end\":38419,\"start\":38404},{\"end\":38437,\"start\":38419},{\"end\":38450,\"start\":38437},{\"end\":38462,\"start\":38450},{\"end\":38478,\"start\":38462},{\"end\":38953,\"start\":38938},{\"end\":38961,\"start\":38953},{\"end\":38974,\"start\":38961},{\"end\":39471,\"start\":39460},{\"end\":39485,\"start\":39471},{\"end\":39803,\"start\":39787},{\"end\":39819,\"start\":39803},{\"end\":40042,\"start\":40022},{\"end\":40057,\"start\":40042},{\"end\":40071,\"start\":40057},{\"end\":40092,\"start\":40071},{\"end\":40403,\"start\":40388},{\"end\":40419,\"start\":40403},{\"end\":40433,\"start\":40419},{\"end\":40448,\"start\":40433},{\"end\":40968,\"start\":40949},{\"end\":40985,\"start\":40968},{\"end\":41003,\"start\":40985},{\"end\":41518,\"start\":41508},{\"end\":41528,\"start\":41518},{\"end\":41542,\"start\":41528},{\"end\":41933,\"start\":41919},{\"end\":41947,\"start\":41933},{\"end\":41963,\"start\":41947},{\"end\":42305,\"start\":42288},{\"end\":42322,\"start\":42305},{\"end\":42340,\"start\":42322},{\"end\":42355,\"start\":42340},{\"end\":42368,\"start\":42355},{\"end\":42382,\"start\":42368},{\"end\":42396,\"start\":42382},{\"end\":42416,\"start\":42396},{\"end\":42424,\"start\":42416},{\"end\":43011,\"start\":43001},{\"end\":43023,\"start\":43011},{\"end\":43033,\"start\":43023},{\"end\":43556,\"start\":43546},{\"end\":43568,\"start\":43556},{\"end\":43581,\"start\":43568},{\"end\":43930,\"start\":43915},{\"end\":43944,\"start\":43930},{\"end\":44216,\"start\":44203},{\"end\":44228,\"start\":44216},{\"end\":44245,\"start\":44228},{\"end\":44261,\"start\":44245},{\"end\":44806,\"start\":44785},{\"end\":44830,\"start\":44806},{\"end\":44852,\"start\":44830},{\"end\":44864,\"start\":44852},{\"end\":44874,\"start\":44864},{\"end\":45106,\"start\":45093},{\"end\":45116,\"start\":45106},{\"end\":45126,\"start\":45116},{\"end\":45139,\"start\":45126},{\"end\":45150,\"start\":45139},{\"end\":45653,\"start\":45640},{\"end\":45664,\"start\":45653},{\"end\":45681,\"start\":45664},{\"end\":45693,\"start\":45681},{\"end\":45709,\"start\":45693},{\"end\":45725,\"start\":45709},{\"end\":45741,\"start\":45725},{\"end\":45753,\"start\":45741},{\"end\":45773,\"start\":45753},{\"end\":45786,\"start\":45773},{\"end\":46192,\"start\":46174},{\"end\":46208,\"start\":46192},{\"end\":46228,\"start\":46208},{\"end\":46244,\"start\":46228},{\"end\":46262,\"start\":46244},{\"end\":46278,\"start\":46262},{\"end\":46295,\"start\":46278},{\"end\":46315,\"start\":46295},{\"end\":46326,\"start\":46315},{\"end\":46343,\"start\":46326},{\"end\":46712,\"start\":46703},{\"end\":46721,\"start\":46712},{\"end\":46861,\"start\":46846},{\"end\":46875,\"start\":46861},{\"end\":46890,\"start\":46875},{\"end\":47386,\"start\":47371},{\"end\":47402,\"start\":47386},{\"end\":47416,\"start\":47402},{\"end\":47431,\"start\":47416},{\"end\":48007,\"start\":47989},{\"end\":48028,\"start\":48007},{\"end\":48053,\"start\":48028},{\"end\":48509,\"start\":48495},{\"end\":48522,\"start\":48509},{\"end\":48530,\"start\":48522},{\"end\":48539,\"start\":48530},{\"end\":48553,\"start\":48539},{\"end\":48563,\"start\":48553},{\"end\":49102,\"start\":49079},{\"end\":49115,\"start\":49102},{\"end\":49131,\"start\":49115},{\"end\":49400,\"start\":49385},{\"end\":49412,\"start\":49400},{\"end\":49577,\"start\":49550},{\"end\":49588,\"start\":49577},{\"end\":49596,\"start\":49588},{\"end\":49875,\"start\":49848},{\"end\":49887,\"start\":49875},{\"end\":49903,\"start\":49887},{\"end\":49911,\"start\":49903},{\"end\":50455,\"start\":50426},{\"end\":50465,\"start\":50455},{\"end\":50473,\"start\":50465},{\"end\":50972,\"start\":50950},{\"end\":50984,\"start\":50972},{\"end\":51327,\"start\":51305},{\"end\":51339,\"start\":51327},{\"end\":51886,\"start\":51874},{\"end\":52172,\"start\":52158},{\"end\":52185,\"start\":52172},{\"end\":52197,\"start\":52185},{\"end\":52212,\"start\":52197},{\"end\":52225,\"start\":52212},{\"end\":52748,\"start\":52738},{\"end\":52760,\"start\":52748},{\"end\":52769,\"start\":52760},{\"end\":53174,\"start\":53157},{\"end\":53189,\"start\":53174},{\"end\":53208,\"start\":53189},{\"end\":53229,\"start\":53208},{\"end\":53246,\"start\":53229},{\"end\":53747,\"start\":53732},{\"end\":53761,\"start\":53747},{\"end\":54161,\"start\":54146},{\"end\":54175,\"start\":54161},{\"end\":54415,\"start\":54399},{\"end\":54429,\"start\":54415},{\"end\":54439,\"start\":54429},{\"end\":54454,\"start\":54439},{\"end\":54471,\"start\":54454},{\"end\":54484,\"start\":54471},{\"end\":54503,\"start\":54484},{\"end\":54519,\"start\":54503},{\"end\":54536,\"start\":54519},{\"end\":54556,\"start\":54536},{\"end\":54564,\"start\":54556},{\"end\":55043,\"start\":55016},{\"end\":55057,\"start\":55043},{\"end\":55068,\"start\":55057},{\"end\":55344,\"start\":55333},{\"end\":55354,\"start\":55344},{\"end\":55365,\"start\":55354},{\"end\":55375,\"start\":55365},{\"end\":55386,\"start\":55375},{\"end\":55401,\"start\":55386},{\"end\":55807,\"start\":55791},{\"end\":55827,\"start\":55807},{\"end\":56265,\"start\":56253},{\"end\":56278,\"start\":56265},{\"end\":56289,\"start\":56278},{\"end\":56302,\"start\":56289},{\"end\":56316,\"start\":56302},{\"end\":56686,\"start\":56674},{\"end\":56699,\"start\":56686},{\"end\":56712,\"start\":56699},{\"end\":56724,\"start\":56712},{\"end\":56973,\"start\":56960},{\"end\":56986,\"start\":56973},{\"end\":56994,\"start\":56986},{\"end\":57018,\"start\":56994},{\"end\":57500,\"start\":57489},{\"end\":57512,\"start\":57500},{\"end\":57524,\"start\":57512},{\"end\":57535,\"start\":57524},{\"end\":57546,\"start\":57535},{\"end\":57561,\"start\":57546},{\"end\":57926,\"start\":57913},{\"end\":57941,\"start\":57926},{\"end\":58387,\"start\":58374},{\"end\":58396,\"start\":58387},{\"end\":58719,\"start\":58707},{\"end\":58731,\"start\":58719},{\"end\":58744,\"start\":58731},{\"end\":59261,\"start\":59252},{\"end\":59270,\"start\":59261},{\"end\":59519,\"start\":59505},{\"end\":59528,\"start\":59519},{\"end\":59542,\"start\":59528},{\"end\":59557,\"start\":59542}]", "bib_venue": "[{\"end\":37199,\"start\":37192},{\"end\":39151,\"start\":39071},{\"end\":40627,\"start\":40546},{\"end\":41204,\"start\":41112},{\"end\":41665,\"start\":41612},{\"end\":42607,\"start\":42524},{\"end\":43236,\"start\":43143},{\"end\":43716,\"start\":43657},{\"end\":44458,\"start\":44368},{\"end\":45333,\"start\":45250},{\"end\":47073,\"start\":46990},{\"end\":47634,\"start\":47541},{\"end\":48172,\"start\":48121},{\"end\":48722,\"start\":48651},{\"end\":50114,\"start\":50021},{\"end\":50666,\"start\":50578},{\"end\":51538,\"start\":51447},{\"end\":52374,\"start\":52308},{\"end\":53425,\"start\":53344},{\"end\":53890,\"start\":53834},{\"end\":55554,\"start\":55486},{\"end\":56010,\"start\":55927},{\"end\":57197,\"start\":57116},{\"end\":58094,\"start\":58026},{\"end\":58935,\"start\":58848},{\"end\":36704,\"start\":36634},{\"end\":37190,\"start\":37177},{\"end\":37485,\"start\":37376},{\"end\":37971,\"start\":37922},{\"end\":38234,\"start\":38151},{\"end\":39069,\"start\":38974},{\"end\":39542,\"start\":39485},{\"end\":39868,\"start\":39819},{\"end\":40243,\"start\":40203},{\"end\":40544,\"start\":40448},{\"end\":41110,\"start\":41003},{\"end\":41610,\"start\":41542},{\"end\":41993,\"start\":41963},{\"end\":42522,\"start\":42424},{\"end\":43141,\"start\":43033},{\"end\":43655,\"start\":43581},{\"end\":44000,\"start\":43944},{\"end\":44366,\"start\":44261},{\"end\":44783,\"start\":44720},{\"end\":45248,\"start\":45150},{\"end\":45835,\"start\":45786},{\"end\":46379,\"start\":46343},{\"end\":46701,\"start\":46672},{\"end\":46988,\"start\":46890},{\"end\":47539,\"start\":47431},{\"end\":48119,\"start\":48053},{\"end\":48649,\"start\":48563},{\"end\":49148,\"start\":49131},{\"end\":49383,\"start\":49345},{\"end\":49649,\"start\":49612},{\"end\":50019,\"start\":49911},{\"end\":50576,\"start\":50473},{\"end\":51026,\"start\":50984},{\"end\":51445,\"start\":51339},{\"end\":51926,\"start\":51886},{\"end\":52306,\"start\":52225},{\"end\":52855,\"start\":52769},{\"end\":53342,\"start\":53246},{\"end\":53832,\"start\":53761},{\"end\":54224,\"start\":54175},{\"end\":54647,\"start\":54580},{\"end\":55102,\"start\":55068},{\"end\":55484,\"start\":55401},{\"end\":55925,\"start\":55827},{\"end\":56387,\"start\":56316},{\"end\":56729,\"start\":56724},{\"end\":57114,\"start\":57018},{\"end\":57617,\"start\":57561},{\"end\":58024,\"start\":57941},{\"end\":58455,\"start\":58396},{\"end\":58846,\"start\":58744},{\"end\":59305,\"start\":59270},{\"end\":59613,\"start\":59557}]"}}}, "year": 2023, "month": 12, "day": 17}