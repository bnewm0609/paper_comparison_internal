{"id": 256105739, "updated": "2023-10-05 04:53:54.163", "metadata": {"title": "Approximating Knapsack and Partition via Dense Subset Sums", "authors": "[{\"first\":\"Mingyang\",\"last\":\"Deng\",\"middle\":[]},{\"first\":\"Ce\",\"last\":\"Jin\",\"middle\":[]},{\"first\":\"Xiao\",\"last\":\"Mao\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2023, "month": null, "day": null}, "abstract": "Knapsack and Partition are two important additive problems whose fine-grained complexities in the $(1-\\varepsilon)$-approximation setting are not yet settled. In this work, we make progress on both problems by giving improved algorithms. - Knapsack can be $(1 - \\varepsilon)$-approximated in $\\tilde O(n + (1/\\varepsilon) ^ {2.2} )$ time, improving the previous $\\tilde O(n + (1/\\varepsilon) ^ {2.25} )$ by Jin (ICALP'19). There is a known conditional lower bound of $(n+\\varepsilon)^{2-o(1)}$ based on $(\\min,+)$-convolution hypothesis. - Partition can be $(1 - \\varepsilon)$-approximated in $\\tilde O(n + (1/\\varepsilon) ^ {1.25} )$ time, improving the previous $\\tilde O(n + (1/\\varepsilon) ^ {1.5} )$ by Bringmann and Nakos (SODA'21). There is a known conditional lower bound of $(1/\\varepsilon)^{1-o(1)}$ based on Strong Exponential Time Hypothesis. Both of our new algorithms apply the additive combinatorial results on dense subset sums by Galil and Margalit (SICOMP'91), Bringmann and Wellnitz (SODA'21). Such techniques have not been explored in the context of Knapsack prior to our work. In addition, we design several new methods to speed up the divide-and-conquer steps which naturally arise in solving additive problems.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2301.09333", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/soda/DengJM23", "doi": "10.1137/1.9781611977554.ch113"}}, "content": {"source": {"pdf_hash": "46534a157516ee560d9b97c166a62fc716bfd720", "pdf_src": "Arxiv", "pdf_uri": "[\"https://export.arxiv.org/pdf/2301.09333v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "036d883968ca09283ca176f8fd19547fcf9abbc9", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/46534a157516ee560d9b97c166a62fc716bfd720.txt", "contents": "\nApproximating Knapsack and Partition via Dense Subset Sums\n23 Jan 2023 January 24, 2023\n\nMingyang Deng *dengm@mit.edu \nMIT\nMIT\nMIT\n\n\nCe Jin \u2020cejin@mit.edu. \nMIT\nMIT\nMIT\n\n\nXiao Mao \nMIT\nMIT\nMIT\n\n\nApproximating Knapsack and Partition via Dense Subset Sums\n23 Jan 2023 January 24, 2023\nKnapsack and Partition are two important additive problems whose fine-grained complexities in the (1 \u2212 \u03b5)-approximation setting are not yet settled. In this work, we make progress on both problems by giving improved algorithms.There is a known conditional lower bound of (n + 1/\u03b5) 2\u2212o(1) based on (min, +)-convolution hypothesis.\u2022 Partition can be (1 \u2212 \u03b5)-approximated in\u00d5(n + (1/\u03b5) 1.25 ) time, improving the previous O(n + (1/\u03b5) 1.5 ) by Bringmann and Nakos (SODA'21). There is a known conditional lower bound of (1/\u03b5) 1\u2212o(1) based on Strong Exponential Time Hypothesis.Both of our new algorithms apply the additive combinatorial results on dense subset sums by Galil and Margalit (SICOMP'91), Bringmann and Wellnitz (SODA'21). Such techniques have not been explored in the context of Knapsack prior to our work. In addition, we design several new methods to speed up the divide-and-conquer steps which naturally arise in solving additive problems.\n\nIntroduction\n\n\nBackground\n\nKnapsack, Subset Sum, and Partition are three fundamental problems in computer science and mathematical optimization, and are actively being studied in fields such as integer programming and fine-grained complexity. In the Knapsack problem (sometimes also called 0-1 Knapsack), we are given a set I of n items where each item i \u2208 I has weight w i > 0 and profit p i > 0, as well as a knapsack capacity W , and we want to choose a subset J \u2286 I satisfying the weight constraint j\u2208J w j \u2264 W such that the total profit j\u2208J p j is maximized. The Subset Sum problem is a special case of Knapsack, where the weight of an item is always equal to their profit. The Partition problem is a special case of Subset Sum, where the capacity equals half of the total weight of the items. In other words, in Partition we want to partition the input items into two parts so that their sums is as close as possible.\n\nThese three problems are well-known to be hard: they appeared in Karp's original list of 21 NPhard problems [Kar72]. To cope with NP-hardness, a natural direction is to study their approximation algorithms. Given a parameter \u03b5 > 0, and an input instance with optimal value OPT, a (1 \u2212 \u03b5)approximation algorithm is required to output a number SOL such that (1\u2212\u03b5)OPT \u2264 SOL \u2264 OPT. Fortunately, these three problems are well-known to have fully polynomial-time approximation schemes (FPTASes), namely (1 \u2212 \u03b5)-approximation algorithm that runs in poly(n, 1/\u03b5) time, for any \u03b5 > 0.\n\nThere has been a long line of research since the 70's on getting approximation schemes for these problems with improved time complexities in terms of n and 1/\u03b5 [IK75, Law79, GL79, KP99, KMPS03, KP04, Rhe15, JK18, Cha18, MWW19, Jin19, BN21,BC22]. On the other hand, recent advances in fine-grained complexity have pointed out the limit of such improvements, under wellbelieved hardness assumptions [CMWW19, KPS17, ABHS19,BN21]. Here, we briefly describe the most recent results along this line.\n\n\u2022 Knapsack: The best known algorithm by Jin [Jin19] runs in\u00d5(n + \u03b5 \u22122.25 ) time, and is based on the previous algorithm of Chan [Cha18] in\u00d5(n + \u03b5 \u22122.4 ) time. [CMWW19] and [KPS17] showed a conditional lower bound of (n + 1 \u03b5 ) 2\u2212o(1) , based on the (min, +)-convolution hypothesis.\n\n\u2022 Subset Sum: The best known algorithm by Bringmann and Nakos [BN21] runs in\u00d5(n + \u03b5 \u22122 /2 \u2126( \u221a log(1/\u03b5)) ) time (improving [KMPS03] by low-order factors). Bringmann and Nakos [BN21] showed a matching lower bound based on the (min, +)-convolution hypothesis.\n\n\u2022 Partition: The first breakthrough by Mucha, W\u0119grzycki and W\u0142odarczyk [MWW19] gave a randomized algorithm in\u00d5(n+1/\u03b5 5/3 ) time. Later, Bringmann and Nakos [BN21] improved it to deterministic\u00d5(n + 1/\u03b5 \u22123/2 ) time. Abboud, Bringmann, Hermelin, and Shabtay [ABHS19] showed that Partition cannot be approximated in poly(n)/\u03b5 1\u2212\u03b4 time for any \u03b4 > 0, under the Strong Exponential Time Hypothesis.\n\nWe can see that the complexity of Subset Sum is already settled, but for Knapsack and Partition there still remain gaps between the best known algorithms and their conditional lower bounds.\n\n\nOur Results\n\nIn this work, we make progress on this direction, by giving improved approximation schemes for Knapsack and Partition.\n\nTheorem 1.1. There is a randomized algorithm for (1 \u2212 \u03b5)-approximating Knapsack with running time 1\u00d5 n + \u03b5 \u221211/5 /2 \u2126( \u221a log(1/\u03b5)) .\n\nTheorem 1.2. There is a deterministic algorithm for (1 \u2212 \u03b5)-approximating Partition with running time\u00d5 n + \u03b5 \u22125/4 .\n\n\nTechnical Overview\n\nA useful result in additive combinatorics for many subset sum related problems is the one from by Galil and Margalit [GM91], which was later improved by Bringmann and Wellnitz [BW21] (based on results of S\u00e1rk\u00f6zy [S\u00e1r94]). These combinatorial results reveal structural properties on the set S(X) of subset sums of a positive integer set X, defined as S(X) := { y\u2208Y y : Y \u2286 X}, in the case when X is \"dense\". Intuitively, it states that if the total number of items is large, then a large portion of the subset sum can be computed very efficiently, so only a small margin of the sumsets with value up to some \u03bb needs to be approximated. We apply these combinatorial results to Partition and, surprisingly, to the \"two-dimensional\" problem of Knapsack where each item has both weights and values.\n\n\nKnapsack\n\nFaster knapsack via dense subset sums Our improved approximation scheme for knapsack relies on multiple technical components from the previous algorithms by Chan [Cha18] and Jin [Jin19]. However, one novel key idea that makes our improvement possible is a technique previously not explored in the context of knapsack algorithms: the additive combinatorics result for dense subset sum by Galil and Margalit [GM91]. One particular result useful to us roughly says the following: when X consists of n distinct integers in [\u2113, 2\u2113] for a small enough \u2113 \u226a n 2 , then there is a long enough interval [\u03bb, ( x\u2208X x) \u2212 \u03bb] that is densely filled with elements in S(X), in the sense that every two adjacent elements must be very close to each other. A formal version of the statement is in Lemma 2.6. As we will see, such density statements will be useful in the framework of Jin [Jin19]. Jin's approximation algorithm for Knapsack separately deals with items with high and low efficiency, defined as the profit-to-weight ratio p i /w i . Intuitively, it is not very profitable to include too many low-efficiency items in the solution. Indeed, after some technical steps, Jin managed to place an upper bound B on the total profit contributed by low-efficiency items in any optimal solution, so that it is still correct to only compute the answers for low-efficiency items up to B (which would take much shorter time than original). The way Jin proved such a bound B was by a certain greedy exchange argument: given a solution set with too many low-efficiency items (which occupies a total capacity of W L ), remove them and try to fill in the freed up space of W L using high-efficiency items instead. This would potentially lead to a better solution, contradicting the optimality of the given solution.\n\nNaturally, such an exchange is not always profitable, since the high-efficiency items may not be able to fill up the entire space W L . Jin's argument accounts for this issue by additionally making sure that all items have size in an interval [\u2113, 2\u2113], so that the wasted space after the exchange cannot be larger 2\u2113 (otherwise one can always fit in another high-efficiency item). In our new algorithm, we refine this argument using combinatorial results on dense subset sums: observe that the task of minimizing the wasted space is equivalent to a subset sum problem on the sizes of high-efficiency items. By setting up parameters appropriately, we can make sure that the dense subset sum result applies, leading to a much smaller wasted space.\n\nHaving refined this argument, we can improve Jin [Jin19] by putting a stricter upper bound on the total profit contributed by low-efficiency items, leading to an improved running time.\n\n\nPartition\n\nDensified divide and conquer There have been many FPTAS algorithms for problems such as Subset Sum, Partition, Knapsack that employ the technique of divide and conquer, e.g. [Cha18,Jin19,BN21]. Unlike previous methods, our improvement crucially relies on performing divideand-conquer on the sorted list of items. To motivate our idea, we note that in most divide and conquer based algorithms, the bottleneck to the running time is incurred at the bottom levels, where we need to merge two sets of answers often with the same complexity of those at the top levels. However, intuitively, if our list is sorted, at the bottom levels the items have values contained in a small interval, and hence the sumsets of these items are clustered in several small intervals with large gaps between them. To exploit this property, instead of using the usual 1D FFT to merge the sumsets, we \"densify\" the sumsets and merge them using 2D FFT, so that our running time is only dependent on the total length of these small intervals.\n\nWe note that the idea of 2D-FFT has been employed before to Subset Sum by Koiliaris and Xu [KX19], but it is used in a different spirit: while we use 2D-FFT to \"densify\" sumsets, in [KX19] it is used to bound the size of the solution for each sum. 2\n\nCombining with additive combinatorics result The additive combinatorics result for dense subset sum by Galil and Margalit [GM91] has also been used to an extent in the\u00d5(n + 1/\u03b5 5/3 ) algorithm by [MWW19]. In our algorithm we combine this with densified divide and conquer. Note that \u03bb can be much smaller than the total sum \u03c3 of the items, and this would mean that an \u03b5\u03c3 additive error is an \u03b5 \u2032 \u03bb additive error for a much larger \u03b5 \u2032 = \u03b5\u03c3/\u03bb, so we only need to ensure (1 \u2212 \u03b5 \u2032 )-multiplicative approximation instead of (1 \u2212 \u03b5) during the computation.\n\n\nPaper Organization\n\nWe will give useful definitions and lemmas in Section 2. In Section 3 we present our algorithm for Knapsack. In Section 4 we present our algorithm for Partition. Some standard reductions and known lemmas from previous works are deferred to appendix.\n\n\nPreliminaries\n\nWe write N = {0, 1, 2, . . . } and N + = {1, 2, . . . }. For n \u2208 N we write [n] = {1, 2, . . . , n}.\n\n\nProblem Statements\n\nIn the Knapsack problem, the input is a list of n items (p 1 , w 1 ), . . . , (p n , w n ) \u2208 N \u00d7 N together with a knapsack capacity W \u2208 N, and the optimal value is\nOPT := max J\u2286[n] j\u2208J p j j\u2208J w j \u2264 W .\nIn the easier Partition problem, the input is a list of n integers x 1 , . . . , x n \u2208 N, and the optimal value is OPT := max\nJ\u2286[n] j\u2208J x j j\u2208J x j \u2264 1 2 i\u2208[n]\nx i .\n\nGiven a Knapsack (or a Partition) instance and a parameter \u03b5 \u2208 (0, 1), an (1 \u2212 \u03b5)-approximation algorithm is required to output a number SOL such that (1 \u2212 \u03b5)OPT \u2264 SOL \u2264 OPT.\n\nIn both problems, we can assume n = O(\u03b5 \u22124 ) and hence log n = O(log \u03b5 \u22121 ). For larger n, Lawler's algorithm [Law79] for Knapsack in O(n log 1 \u03b5 + ( 1 \u03b5 ) 4 ) time is already near-optimal. We will sometimes describe algorithms with approximation ratio 1\u2212O(\u03b5) (or 1\u2212\u03b5\u00b7poly log(1/\u03b5)), which can be made 1 \u2212 \u03b5 by scaling down \u03b5 by a constant factor (or a logarithmic factor) at the beginning.\n\n\nSumsets and Subset Sums\n\nIn a multiset A, an element a could appear multiple times (the number of times it appears is the multiplicity of a in A). We use A \u228e B to denote union without removing duplicates (i.e., possibly resulting in a multiset).\n\nFor a multiset Y \u2282 N, let \u03a3(Y ) = y\u2208Y y denote the sum of its elements (without removing duplicates).\n\nFor a multiset X \u2282 N, let S(X) = {\u03a3(Y ) : Y \u2286 X} be the set of its subset sums, and let S(X; t) = S(X) \u2229 [0, t] be the set of its subset sums up to t.\n\nFor a number c and a set X, define c \u00b7 X = {cx : x \u2208 X}. For two sets X, Y , define their sumset X + Y = {x + y : x \u2208 X, y \u2208 Y }. Given sets X \u2286 [n], Y \u2286 [n], the sumset X + Y can be computed in O(n log n) time using FFT. This simple fact has a straightforward generalization to 2 dimension, which we state below. \nA 1 + A 2 := (x 1 + x 2 , y 1 + y 2 ) : (x 1 , y 1 ) \u2208 A 1 , (x 2 , y 2 ) \u2208 A 2\nin O(nm log(nm)) time deterministically.\n\n\nKnapsack Problem and Profit functions\n\nIn the knapsack problem, assume 0 < w i \u2264 W and p i > 0 for every item i. Then a trivial lower bound of the maximum total profit is max j p j . At the beginning, we can discard all items i with p i \u2264 \u03b5 n max j p j , reducing the total profit by at most \u03b5 max j p j , which is only an O(\u03b5) fraction of the optimal total profit. So we can assume max j p j min j p j \u2264 n \u03b5 . For a set I of items, we use f I to denote its profit function, defined as +\u221e). Note that f I is a monotone nondecreasing step function. Adopting the terminology of Chan [Cha18], the complexity of a monotone step function refers to the number of its steps.\nf I (x) = max i\u2208J p i : i\u2208J w i \u2264 x, J \u2286 I over x \u2208 [0,\nLet I 1 , I 2 be two disjoint subsets of items, and I = I 1 \u228e I 2 . It is straightforward to see that\nf I = f I 1 \u2295f I 2 , where \u2295 denotes (max, +)-convolution, defined by (f \u2295g)(x) = max 0\u2264x \u2032 \u2264x (f (x \u2032 )+g(x\u2212x \u2032 )).\n2.4 (1 \u2212 \u03b4, \u2206) approximation up to t Both our algorithms for Knapsack and Partition frequently use the notion of (1\u2212\u03b4, \u2206)-approximation up to t. Their definitions are analogous, as stated below.\n\nDefinition 2.2 (Approximation for Profit Functions). For functionsf , f and real numbers t,\n\u2206 \u2208 R \u22650 , \u03b4 \u2208 [0, 1), we say thatf is a (1 \u2212 \u03b4, \u2206) approximation of f up to t, if f (w) \u2264 f (w) holds for all w \u2265 0, andf (w) \u2265 (1 \u2212 \u03b4)f (w) \u2212 \u2206 holds whenever f (w) \u2264 t, w \u2265 0.\nThe following notion of approximation will be useful in our Partition algorithm. Similar notions have been termed as \"weak approximation\" in the literature [MWW19,BN21], in contrast to \"strong approximation\" that would be required for approximating general Subset Sum instances.\n\n\nDefinition 2.3 (Approximation for Integer Sets). For integer sets\nA, B \u2286 N, and real numbers t, \u2206 \u2208 R \u22650 , \u03b4 \u2208 [0, 1), we say that A is a (1 \u2212 \u03b4, \u2206) approximation of B up to t, if 1. for every b \u2208 B \u2229 [0, t], there exists a \u2208 A such that (1 \u2212 \u03b4)b \u2212 \u2206 \u2264 a \u2264 b, and, 2. for every a \u2208 A, there exists b \u2208 B such that (1 \u2212 \u03b4)b \u2212 \u2206 \u2264 a \u2264 b.\nOne can assume A \u2286 N \u2229 [0, t] in this case without loss of generality.\n\nFor the case of t = +\u221e, we simply omit the phrase \"up to t\". We also refer to (1, \u2206) approximation as \u2206-additive approximation, and refer to (1 \u2212 \u03b4, 0) approximation as (1 \u2212 \u03b4)-multiplicative approximation, or simply (1 \u2212 \u03b4) approximation.\n\nWe have the following simple facts regarding approximating merged sumsets and profit functions.\nProposition 2.4. For i \u2208 {1, 2}, suppose A i is a (1 \u2212 \u03b4, \u2206 i ) approximation of S(X i ) up to t. Then, (A 1 + A 2 ) \u2229 [0, t] is a (1 \u2212 \u03b4, \u2206 1 + \u2206 2 ) approximation of S(X 1 \u228e X 2 ) up to t. Proof. For any b \u2208 S(X 1 \u228e X 2 ) \u2229 [0, t] where b = b 1 + b 2 for b i \u2208 S(X i ) \u2229 [0, t] (i \u2208 {1, 2}), there exits a i \u2208 A i such that (1 \u2212 \u03b4)b i \u2212 \u2206 i \u2264 a i \u2264 b i . Hence, a 1 + a 2 \u2264 b 1 + b 2 = b \u2264 t, and a 1 + a 2 \u2265 (1 \u2212 \u03b4)b 1 \u2212 \u2206 1 + (1 \u2212 \u03b4)b 2 \u2212 \u2206 2 = (1 \u2212 \u03b4)b \u2212 (\u2206 1 + \u2206 2 ).\nThe converse direction can be verified similarly.\n\nThe following fact can be proved similarly.\nProposition 2.5. For i \u2208 {1, 2}, supposef i is a (1 \u2212 \u03b4, \u2206 i ) approximation of the profit function f I i up to t. Then, (f 1 \u2295f 2 ) is a (1 \u2212 \u03b4, \u2206 1 + \u2206 2 ) approximation of f I 1 \u228eI 2 up to t.\nFollowing Chan [Cha18] and Jin [Jin19], given a monotone step function f (we sometimes also call it a profit function, although it might not be equal to the profit function f I of any particular item set I) with range contained in {0} \u222a [A, B], one can round f down to powers of 1/(1 \u2212 \u03b5), and obtain another profit functionf which has complexity only O(\u03b5 \u22121 log(B/A)), and (1 \u2212 \u03b5)approximates f . In our algorithm we will always have B/A \u2264 poly(n/\u03b5), so we may always assume that the intermediate profit functions computed during our algorithm are monotone step functions with complexity\u00d5(\u03b5 \u22121 ), by incurring (1 \u2212 \u03b5) approximation factor each time.\n\n\nAdditive Combinatorics\n\nWe need several results on dense subset sums developed by a series of works including [S\u00e1r94, GM91, Lev03, BW21]. The following structural lemma follows from Theorem 4.1 and Theorem 4.2 of Bringmann and Wellnitz [BW21].\n\nLemma 2.6. Let n distinct positive integers X = {x 1 , . . . , x n } \u2286 [\u2113, 2\u2113] be given, where \u2113 = o(n 2 / log n).\n\nThen, for a universal constant c \u2265 1, for every c\u2113 2 /n \u2264 t \u2264 \u03a3(X)/2, there exists t \u2032 \u2208 S(X) such that 0 \u2264 t \u2032 \u2212 t \u2264 8\u2113/n.\n\nA proof of Lemma 2.6 is included in Appendix B. The following algorithmic lemma follows from the main theorem of [BW21], and will be used in our Partition algorithm.\n\nLemma 2.7 (Follows from [BW21]). Given n distinct positive integers X = {x 1 , . . . , x n } \u2286 [\u2113, 2\u2113], there exists \u03bb =\u0398(\u2113 2 /n) such that, if \u03bb \u2264 \u03a3(X)/2, then in\u00d5(n) time we can construct a deterministic data structure supporting the following query in O(1) time: given L, R such that \u03bb \u2264 L \u2264 R \u2264 \u03a3(X)/2, report whether there exists t \u2208 [L, R] such that t \u2208 S(X).\n\nRemark 2.8. We remark that the main theorem stated in [BW21] only supports querying whether a given \u03bb \u2264 t \u2264 \u03a3(X)/2 is a subset sum. In our application, we require a version supporting range queries. This is easy to achieve by building an additional prefix sum array in the proof of [BW21, Theorem 4.6], which supports range sum queries.\n\n\nApproximating Knapsack\n\n\nKnown Lemmas\n\nBy known reductions (e.g., [Cha18,Jin19]), we can focus on solving the following cleaner problem, which already captures the main difficulty of knapsack.\n\nProblem 1. Assume \u03b5 \u2208 (0, 1/2) and 1/\u03b5 \u2208 N + . Given a list I of items (p 1 , w 1 ), . . . , (p n , w n ) with weights w i \u2208 N and profits p i being multiples of \u03b5 in the interval [1, 2), compute a profit function that (1 \u2212 \u03b5)-approximates f I up to 2/\u03b5. Lemma 3.1. If for some c \u2265 2, Problem 1 can be solved in\u00d5(n + 1/\u03b5 c ) time, then (1 \u2212 \u03b5)approximating Knapsack can also be solved in\u00d5(n + 1/\u03b5 c ) time.   \nf I up to B in\u00d5(n + \u03b5 \u22122 B 1/3 /2 \u2126( \u221a log(1/\u03b5)) ) time.f I in\u00d5(n+\u03b5 \u22123/2 m/2 \u2126( \u221a log(1/\u03b5)) ) time. 3\nThe following useful lemma allows us to merge multiple profit functions, which was proved by Chan using divide-and-conquer and improved algorithms for (min, +)-convolution [BCD + 14, Wil14, CW16]. \n1 \u2212 O(\u03b5))-approximates f 1 \u2295 \u00b7 \u00b7 \u00b7 \u2295 f m , in O(n) + O(( 1 \u03b5 ) 2 m/2 \u2126( \u221a log(1/\u03b5)) log B/A) time.\n\nGreedy Exchange Argument via Dense Subset Sum\n\nThe goal of this section is to prove the following Lemma 3.5. Our algorithm is based on a greedy exchange argument similar to [Jin19, Lemma 20], but we can obtain better bounds by combining with number theoretic results on dense subset sums.\n\nLemma 3.5. Given a list I of n items with p i being multiples of \u03b5 in interval [1, 2), and integer 1 \u2264 m \u2264 n with m = O(1/\u03b5), one can compute in O(n + \u03b5 \u221211/5 /2 \u2126( \u221a log(1/\u03b5)) ) time a profit function that (m\u03b5)-additively approximates f I up to 2m. 3 In the proceedings version of our paper, we incorrectly claimed that the task in Lemma 3.3 can be done i\u00f1\nO(n + \u03b5 \u22123/2 m 3/4 /2 \u2126( \u221a log(1/\u03b5)) ) time.\nHere, the statement of Lemma 3.3 has been corrected. As a result, several parameters in Section 3.2 have been adjusted accordingly. This correction did not affect the final time bound of our main result (Theorem 1.1), since the step that invokes Lemma 3.3 is not a bottleneck in our algorithm.\n\nThe proof of Lemma 3.5 assumes the following ingredient, which will be proved in later sections using random partitioning.\n\nLemma 3.6. Given a list I of n = O(1/\u03b5) items with p i being multiples of \u03b5 in interval [1, 2), one can compute in\u00d5(n 4/5 \u03b5 \u22127/5 /2 \u2126( \u221a log(1/\u03b5)) ) time a profit function that (n\u03b5)-additively approximates f I . Now we proceed to describe the algorithm for Lemma 3.5. Given items (p 1 , w 1 ), . . . , (p n , w n ), where p i \u2208 [1, 2) are multiples of \u03b5, we sort them by non-increasing order of efficiency, p 1 /w 1 \u2265 p 2 /w 2 \u2265 \u00b7 \u00b7 \u00b7 \u2265 p n /w n . Then, we consider prefixes of this sequence of items, and define the following measure of diversity:\nDefinition 3.7 (D(i)). For 1 \u2264 i \u2264 n, let D(i) = min J C([i]\\J), where the minimization is over all subsets J \u2286 [i] with |J| \u2264 2m, and C([i]\\J) denote the number of distinct values in {p j : j \u2208 [i]\\J}.\nWe have the following immediate observations about D(i).\nObservation 3.8. 1. For all 2 \u2264 i \u2264 n, 0 \u2264 D(i) \u2212 D(i \u2212 1) \u2264 1.\n2. D(i) (and the minimizer J) can be computed in\u00d5(i) time by the following greedy algorithm: Start with all values p 1 , p 2 , . . . , p i . Repeat the following up to 2m times: remove the value p j with the minimum multiplicity, and add j into J.\n\nNow, we set parameter \u2206 = \u230a\u03b5 \u22125/8 \u230b. Define i \u2208 {1, 2, . . . , n} to be the maximum such that D(i) \u2264 \u2206, which can be found using Observation 3.8 with a binary search in\u00d5(n) time.\n\nThe following lemma is the key component in our proof of Lemma 3.5. \np s \u2264 B,(1)and s\u2208S p s \u2265 (1 \u2212 \u03b5) s\u2208S p s ,(2)\nand\ns\u2208S w s \u2264 s\u2208S w s .(3)\nProof. If D(i) < \u2206, then by the definition of i we have i = n, and we can simply letS = S, sinc\u1ebd p = 0 always holds. So in the following we assume D(i) = \u2206.  [1, 2)).\n\nDefine item set I \u2032 := [i] \\S. Since |S| < s\u2208S p s / min s\u2208S p s \u2264 s\u2208S p s \u2264 s\u2208S p s \u2264 2m, by the definition of D(i), we know that {p i : i \u2208 I \u2032 } contains at least D(i) = \u2206 distinct elements.\n\nWe apply Lemma 2.6 on the set of integers X = {p i /\u03b5 : i \u2208 I \u2032 } \u2286 [1/\u03b5, 2/\u03b5) which contains at least \u2206 distinct integers, where the premise 1/\u03b5 = o(\u2206 2 / log \u2206) in Lemma 2.6 is satisfied by our choice of \u2206 = \u230a\u03b5 \u22125/8 \u230b. Lemma 2.6 states that for every t \u2208 [c\u03b5 \u22122 /\u2206, 0.5\u2206/\u03b5], there exists t \u2032 \u2208 S(X) such that 0 \u2264 t \u2032 \u2212 t \u2264 8\u03b5 \u22121 /\u2206. Here we set\nt := (1 \u2212 \u03b5)p * \u03b5 + \u03b5 \u22121 \u2206 , which satisfies t > p * (1 \u2212 \u03b5)/\u03b5 > (1 \u2212 \u03b5)B/\u03b5 = (1 \u2212 \u03b5)(9c\u03b5 \u22121 /\u2206)/\u03b5 > c\u03b5 \u22122 /\u2206, and t < (B + 2)/\u03b5 + \u03b5 \u22121 /\u2206 = 9c\u03b5 \u22122 /\u2206 + 2/\u03b5 + \u03b5 \u22121 /\u2206 \u2264 O(\u03b5 \u221211/8 ) \u2264 0.5\u2206/\u03b5.\nThen the conclusion of Lemma 2.6 says that there is a subset R \u2286 I \u2032 of items with total profitp := \u03b5 \u00b7 t \u2032 , satisfying\n1/\u2206 \u2264p \u2212 p * (1 \u2212 \u03b5) \u2264 9/\u2206.(4)\nNote that (4) implies\np * \u2212p \u2265 \u03b5 \u00b7 p * \u2212 9/\u2206 > \u03b5 \u00b7 B \u2212 9/\u2206 = \u03b5 \u00b7 9c\u03b5 \u22121 /\u2206 \u2212 9/\u2206 \u2265 0. Recall that R \u2286 I \u2032 = [i] \\S and K \u2286S \u2229 ([n] \\ [i])\n, which must both be non-empty. Since the efficiency of items are sorted in non-increasing order, we have min r\u2208R p r /w r \u2265 max k\u2208K p k /w k . Now we define the set of itemsS \u2032 := (S \\ K) \u222a R.\n\nThen, we have\ns\u2208S p s \u2212 s\u2208S \u2032 p s = k\u2208K p k \u2212 r\u2208R p r = p * \u2212p \u2265 0, and s\u2208S w s \u2212 s\u2208S \u2032 w s = k\u2208K w k \u2212 r\u2208R w r \u2265 k\u2208K p k max k\u2208K (p k /w k ) \u2212 r\u2208R p r min r\u2208R (p r /w r ) \u2265 1 min r\u2208R (p r /w r ) \u00b7 k\u2208K p k \u2212 r\u2208R p r = 1 min r\u2208R (p r /w r ) \u00b7 (p * \u2212p) \u2265 0.\nHence, s\u2208S \u2032 p s \u2264 s\u2208S p s and s\u2208S \u2032 w s \u2264 s\u2208S w s . On the other hand, by (4), we know that In the third part, the correctness of only computing up to B is justified by Lemma 3.9, which shows that if we only consider approximating sets with total profit up to 2m, then we can assume the items in [n] \\ [i] only contributes profit at most B (1), at the cost of only incurring an (1 \u2212 \u03b5) approximation factor (2).\n\uf8eb \uf8ed s\u2208S \u2032 \u2229[i] p s + s\u2208S \u2032 \u2229([n]\\[i]) (1 \u2212 \u03b5)p s \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed s\u2208S\u2229[i] p s + s\u2208S\u2229([n]\\[i]) (1 \u2212 \u03b5)p s \uf8f6 \uf8f8 = r\u2208R p r \u2212 k\u2208K (1 \u2212 \u03b5)p k =p \u2212 (1 \u2212 \u03b5)p * \u2265 1/\u2206 > 0,\nTo analyze the error, notice that in the first part we incur an additive error of (2m\u03b5). In the second and third part and the final merging step we incur (1 \u2212 O(\u03b5)) multiplicative error, which turns into O(m\u03b5) additive error since we only care about approximating up to 2m. Hence the overall additive error is O(m\u03b5), which can be made m\u03b5 by lowering the value of \u03b5. Now we show that Lemma 3.5 can be used to solve Problem 1, which is sufficient for proving Theorem 1.1.\n\nProof of Theorem 1.1. To solve Problem 1, we divide [1, 2\u03b5 \u22121 ) into O(log(1/\u03b5)) many intervals [m, 2m) where m are powers of 2, and use Lemma 3.5 to obtain profit functions achieving m\u03b5-additive approximation up to 2m. Then, taking their pointwise minima yields an (1 \u2212 O(\u03b5)) approximation.\n\nIn the following sections, we will prove Lemma 3.6.\n\n\nApproximation using \u2206-multiples of small set \u2206\n\nWe first introduce several additional tools borrowed from previous works that will be used in our final proof of Lemma 3.6.\n\nFollowing [Cha18]'s terminology, we say a monotone step function is p-uniform if its function values are 0, p, 2p, . . . , lp for some l. A p-uniform function is said to be pseudo-concave, if the differences of consecutive x-breakpoints are nondecreasing from left to right. An example of a puniform and pseudo-concave function is the profit function f I of a set I of items with the same profit p i = p, which can be exactly computed by simple greedy: the function f I takes values 0, p, 2p, . . . , np, with x-breakpoints w 1 , w 1 + w 2 , . . . , w 1 + \u00b7 \u00b7 \u00b7 + w n , where w i 's are sorted in nondecreasing order.\n\nAs in [Cha18] and [Jin19], we will use the method of approximation via \u2206-multiples. For a set \u2206 of numbers, we say that p is a \u2206-multiple if it is a multiple of \u03b4 for some \u03b4 \u2208 \u2206. Chan [Cha18] used the SMAWK algorithm [AKM + 87] and suitable rounding to prove the following lemma: . If every f i is p i -uniform and pseudo-concave for some p i \u2208 [1, 2] which is a \u2206-multiple, then we can compute a monotone step function that O(|\u2206|\u03b4)-additively approximates min{f 1 \u2295 \u00b7 \u00b7 \u00b7 \u2295 f m , B} in\u00d5(Bm/\u03b4) time.\n\nChan [Cha18] gave a construction of a small set \u2206 such that every real number in [1, 2] can be approximated by a \u2206-multiple. Here, we present a more simplified construction.\n\nLemma 3.11. For parameters 0 < \u03b5 < \u03b4 < 1/2, let r = \u2308log 1+\u03b5 (1 + 2\u03b4)\u2309 = O(\u03b4/\u03b5), and define a i = \u03b4(1 + \u03b5) i for 0 \u2264 i \u2264 r + 1. Let \u2206 = {a i } be the set of a i . Then for any t \u2208 [1, 2], there is a multiple of some a i in the range [t, t + 2\u03b5]. Thus, every real number in [1, 2] can be approximated by a \u2206 multiple with O(\u03b5) additive error, where |\u2206| = r + 2 = O(\u03b4/\u03b5) and all elements in \u2206 are within [\u03b4, 8\u03b4].\n\nProof. Let c be the largest integer such that (t + 2\u03b5)/c \u2265 a 0 . Since c is largest, c + 1 \u2265 (t + 2\u03b5)/a 0 \u2265 1/\u03b4, so (c + 1)/c \u2264 (1/\u03b4)/(1/\u03b4 \u2212 1) = 1 + \u03b4/(1 \u2212 \u03b4) \u2264 1 + 2\u03b4 \u2264 a r+1 /a 0 . Since (t + 2\u03b5)/(c + 1) < a 0 , we know (t + 2\u03b5)/c < a r+1 . Let k be the largest integer in [0, r] such that a k \u2264 (t + 2\u03b5)/c. Note a k+1 > (t + 2\u03b5)/c, so a k = a k+1 /(1 + \u03b5) \u2265 t/c using the fact that t \u2264 2. As a result, a k \u2208 [t/c, (t + 2\u03b5)/c], thus ca k \u2208 [t, t + 2\u03b5].\n\n\nRandom Partitioning\n\nAssume that n < 1/\u03b5. In the section, we will use random partitioning to prove Lemma 3.6, restated below.\n\nLemma 3.6. Given a list I of n = O(1/\u03b5) items with p i being multiples of \u03b5 in interval [1, 2), one can compute in\u00d5(n 4/5 \u03b5 \u22127/5 /2 \u2126( \u221a log(1/\u03b5)) ) time a profit function that (n\u03b5)-additively approximates f I .\n\nProof. Set \u2206 1 = \u0398( \u221a n) and \u2206 0 = \u0398(n 7 10 \u03b5 2 5 2 c \u221a log(1/\u03b5) ) for some small constant c > 0. Assume that \u2206 0 is a power of 2 without loss of generality. Note that \u2206 0 = O(\u2206 1 ), which follows from n = O(1/\u03b5).\n\nClaim 3.12. We can partition elements of I into \u0398(\u2206 1 ) groups G 1 , G 2 , . . . , G k , each of size O(n/\u2206 1 ), while all elements within group G i are (1 + \u03b5)-approximated by multiples of p i for some p i = \u0398(\u2206 1 \u03b5).\n\nProof. In Lemma 3.11, plugging in \u03b4 = \u03b5\u2206 1 , we obtain a set A of size O(\u2206 1 ) whose elements are of order \u0398(\u2206 1 \u03b5), and each item in I can be (1 + \u03b5)-approximated by A-multiples.\n\nWe group the elements in I by their divisor in A. We then evenly split groups with size more than n/\u2206 1 into two until all groups have sizes of at most n/\u2206 1 .\n\nFrom now on, assume that G 1 , G 2 , . . . , G k are groups satisfying conditions in Claim 3.12. We now randomly partition {1, 2, . . . , k} into \u2206 0 parts, I 1 , . . . , I \u2206 0 , by assigning each 1 \u2264 i \u2264 k into some I j (1 \u2264 j \u2264 \u2206 0 ) independently and uniformly. Then, set X j = i\u2208I j G i for every 1 \u2264 j \u2264 \u2206 0 . It is easy to see {X j } is a partition of I.\n\nClaim 3.13. With probability \u2265 3/4, |I j | = O(\u2206 1 /\u2206 0 ), and hence |X j | \u2264 O(n/\u2206 0 ).\n\nProof. By Chernoff bound 5 , for some large constant c > 0, |I j | \u2265 ck/\u2206 0 happens with probability at most 1/(4\u2206 0 ). Thus |I j | = O(\u2206 1 /\u2206 0 ) holds for all j with probability \u2265 3/4 by union bound. By Claim 3.12, |X j | \u2264 |I j |O(n/\u2206 1 ) = O(m/\u2206 0 ). Now assume the event in Claim 3.13 happens.\n\nClaim 3.14. We can approximate x\u2208X j f x with additive error O(n\u03b5/\u2206 0 ) for all 1 \u2264 j \u2264 \u2206 0 i\u00f1 O(n 2 \u03b5 \u22121 /(\u2206 0 \u2206 1 )) =\u00d5(n 4/5 \u03b5 \u22127/5 /2 \u2126( \u221a log(1/\u03b5)) ) time.\n\nProof. Fix a single j. By Claim 3.13, x\u2208X j f x is the convolution of O(n/\u2206 0 ) elements, each being a multiple of order \u0398(\u2206 1 \u03b5). By applying Lemma 3.10 with parameters B = O(n/\u2206 0 ), \u03b4 = \u0398(\u2206 1 \u03b5), |\u2206| = |I j | = O(\u2206 1 /\u2206 0 ), we can approximate x\u2208X j f x with additive error O(\u2206 2 1 \u03b5/\u2206 0 ) = O(n\u03b5/\u2206 0 ) within time\u00d5((n/\u2206 0 ) 2 /(\u2206 1 \u03b5)).\n\nWe can do so for all 1 \u2264 j \u2264 \u2206 0 , with running time\u00d5(n 2 /(\u2206 0 \u2206 1 \u03b5)) =\u00d5(n 4/5 \u03b5 \u22127/5 /2 \u2126( \u221a log(1/\u03b5)) ).\n\nNow we can replace x\u2208X j f x by the approximation obtained in Claim 3.14, since the total additive error inflicted will be O(n\u03b5/\u2206 0 )\u2206 0 = O(n\u03b5).\n\nWe use divide and conquer to combine the answer of x\u2208X j f x . The merge process can be viewed as a complete binary tree with \u2206 0 leaves. For S \u2286 {1, 2, . . . , \u2206 0 }, define F (S) = x\u2208\u222a (s\u2208S) Xs f x . Claim 3.14 allows us to approximate F (S) for all |S| = 1. Now we have the following claim regarding combining two subtrees S 1 and S 2 .\n\nClaim 3.15. Assume i \u2264 log 2 \u2206 0 and |S 1 | = |S 2 | = 2 i , where S 1 , S 2 \u2286 {1, 2, . . . , \u2206 0 } and S 1 \u2229 S 2 = \u2205. Assume that A 1 is an approximation of F (S 1 ) with additive error err 1 , A 2 is an approximation of F (S 2 ) with additive error err 2 . Then with probability \u2265 1 \u2212 1/(5\u2206 0 ), we can compute an approximation of F (S 1 \u222a S 2 ) with additive error\nerr 1 + err 2 + O(2 0.9i n\u03b5/\u2206 0 ) in time O(\u03b5 \u22122 \u2206 0.5 0 /(\u2206 0.5 1 2 \u0398( \u221a log(1/\u03b5)) )).\nProof. Define \u03b4 i = 2 0.9i n\u03b5/\u2206 0 . A naive way to approximate F (S 1 \u222a S 2 ) is to round each value in A 1 and A 2 to a multiple of \u03b4 i , and then invoke the (min, +) convolution as in Lemma 3.4. In the following we will show a better method exploiting the fact that {X i } is a random partition.\n\nLet the global optimal solution be to choose the subset T of items. Define H 1 = i\u2208S 1 X i , H 2 = i\u2208S 2 X i . Note that the groups G 1 , . . . , G k are assigned into X 1 , . . . , X \u2206 0 uniformly randomly. Pick u = Cn 2 i /(\u2206 1 \u2206 0 ) log n for a large constant C > 0. By Chernoff bound, the probability that Pr(| x\u2208T \u2229H 1 x \u2212 x\u2208T \u2229H 2 x| \u2265 u) \u2264 1/(5n). 6 Now assume that | x\u2208T \u2229H 1 x \u2212 x\u2208T \u2229H 2 x| \u2264 u, and we show how to approximate F (S 1 \u222a S 2 ) under the assumption. During the (min, +) convolution, we first round the values of F (S 1 ), F (S 2 ) to multiples of \u03b4 i . Then we only need to consider the pairs that differ in value by at most u. We then divide the arrays into blocks with values within a difference of u from each other, and do (min, +)-convolution between the pairs of blocks with indices differing by at most 1. The block sizes are at most u/\u03b4 i =\u00d5(\u03b5 \u22121 \u2206 0.5 0 \u2206 \u22120.5 1 /2 0.4i ), so the running time for each (min, +)convolution is O(\u03b5 \u22122 \u2206 0 /(\u2206 1 2 0.8i 2 \u2126( \u221a log(1/\u03b5)) )) using Williams's O(n 2 /2 \u2126( \u221a log(1/\u03b5)) )-time algorithm for length-n (min, +)-convolution [Wil14]. Since the value in the merged answer is bounded b\u1ef9 O(2 i n/\u2206 0 ) by Claim 3.13, there are\u00d5(2 i n/(\u2206 0 u)) min-plus convolutions in total, with total com-plexity\u00d5(\u03b5 \u22122 2 i n/(\u2206 1 2 0.8i 2 \u2126( \u221a log(1/\u03b5)) u)) = O(\u03b5 \u22122 \u2206 0.5 0 /(\u2206 0.5 1 2 \u0398( \u221a log(1/\u03b5)) )).\n\nNow we conclude the proof by applying Claim 3.15 to the divide and conquer process. Assume all the \u2264 \u2206 0 many calls to Claim 3.15 yield correct approximations, which happens with success probability \u2265 3/4 by union bound.\n\nTo analyze the error term, note that there are O(\u2206 0 /2 i ) merges of two subtrees with 2 i parts each, where Claim 3.15 inflicts additive error O(2 0.9i n\u03b5/\u2206 0 ) for each such a merge. Thus the total additive error is bounded by 2 i \u2264\u2206 0 (2 0.9i n\u03b5/\u2206 0 )(\u2206 0 /2 i ) = O(n\u03b5). Now we analyze the time complexity. Note that the total complexity for the i-th layer is\nO((\u2206 0 /2 i ) \u00b7 \u03b5 \u22122 \u2206 0.5 0 \u2206 \u22120.5 1 /2 \u2126( \u221a log(1/\u03b5)) ) = O(\u03b5 \u22122 \u2206 1.5 0 \u2206 \u22120.5 1 /2 \u2126( \u221a log(1/\u03b5)) )\n= O(n 4 5 \u03b5 \u2212 7 5 /2 \u2126( \u221a log(1/\u03b5)) ).\n\nAs there are logarithmically many layers, the total complexity for the divide and conquer part is O(n 4 5 \u03b5 \u2212 7 5 /2 \u2126( \u221a log(1/\u03b5)) ).\n\nThus our total complexity is O(n 4 5 \u03b5 \u2212 7 5 /2 \u2126( \u221a log(1/\u03b5)) ), and with a success probability of \u2265 1/2 (which can be amplified by repetition) by union bound.\n\nA small detail is that when n is so small that n 7/10 < \u03b5 \u22122/5 , \u2206 0 < 1 and our reasoning falls apart. In such cases, one can simply set \u2206 0 = 1 and the running time still holds.\n\n\nApproximating Partition\n\nIn this section, we will solve the following problem.\n\nProblem 2. Assume \u03b5 \u2208 (0, 1/2) and 1/\u03b5 \u2208 N + . Given a set X of n distinct integers in the interval [1/\u03b5, 2/\u03b5), compute a set A \u2282 N that n-additively approximates S(X).\n\nBy a tedious reduction that is heavily based on known techniques, one can show the following.\n\nLemma 4.1. If for some c \u2265 1, Problem 2 can be solved in\u00d5(n + 1/\u03b5 c ) time, then (1 \u2212 \u03b5)approximating Partition can also be solved in\u00d5(n + 1/\u03b5 c ) time.\n\nLemma 4.1 will be proved in the appendix. Now we proceed to describe our main algorithm for solving Problem 2. In the following lemma, we merge the approximations of S(X 1 ), S(X 2 ) and obtain an approximation of S(X 1 \u228e X 2 ). When X 1 , X 2 come from a short interval [\u2113, \u2113 + d], we can use densification via 2D FFT to obtain a speedup over the straightforward algorithm.\n\nLemma 4.2. Let \u03b4 \u2208 (0, 1/2), and \u2113, d, t,\n\u2206 \u2208 N + such that d \u2264 \u2113 \u2264 t. Let X 1 , X 2 \u2286 N + \u2229 [\u2113, \u2113 + d] be two integer sets. Given A 1 , A 2 \u2282 N as input where for i \u2208 {1, 2}, A i is an (1 \u2212 \u03b4) approximation of S(X i ) up to t, one can compute a set A \u2282 N + of size |A| \u2264 Z that (1 \u2212 \u03b4, \u2206 \u2212 1)-approximates S(X 1 \u228e X 2 ) up to t, in\u00d5(Z + |A 1 | + |A 2 |) time, where Z \u2264 O min t \u2206 , t \u2113 \u00b7 td \u2113\u2206 .\nProof. Let\u2206 := \u2308\u2206/2\u2309. We will run one of the following two algorithms that minimizes Z.\n\nAlgorithm 1 (1D FFT). For i \u2208 {1, 2}, by rounding the integers in A i down to multiples of\u2206, we obtain set A \u2032 i \u2282\u2206 \u00b7 N that (\u2206 \u2212 1)-additively approximates A i . Then, since A \u2032 i \u2286 [0, t], their sumset A \u2032 1 + A \u2032 2 can be computed by FFT in\u00d5(\u2308t/\u2206\u2309) \u2264\u00d5(\u2308t/\u2206\u2309) time. Note that A := A \u2032 1 + A \u2032 2 approximates A 1 + A 2 with additive error at most 2(\u2206 \u2212 1) \u2264 \u2206 \u2212 1, so A is a (1 \u2212 \u03b4, \u2206 \u2212 1)approximation of S(X 1 \u228e X 2 ) up to t, due to Proposition 2.4.\n\nAlgorithm 2 (Densification with 2D FFT). For every a \u2208 A i , there exists s \u2208 S(X i ; t) such that 0 \u2264 s \u2212 a \u2264 s\u03b4. Note that s is the sum of at most t/\u2113 many integers from [\u2113, \u2113 + d], so s can be expressed as s = k\u2113 + b \u2032 for some k \u2208 N \u2229 [0, t/\u2113] and 0 \u2264 b \u2032 \u2264 dt/\u2113. Hence, a \u2208 A i can be expressed as a = k\u2113 + b for some k \u2208 N \u2229 [0, t/\u2113] and \u2212s\u03b4 \u2264 b \u2264 dt/\u2113. Then, by rounding b down to integer multiples of\u2206, we obtain A \u2032 i \u2282 N that (\u2206 \u2212 1)-additively approximates A i , such that every a \u2032 \u2208 A \u2032 i can be expressed as a \u2032 = k\u2113 + j\u2206,\nfor some k \u2208 N \u2229 [0, t/\u2113] and j \u2208 Z \u2229 [\u22121 \u2212 s\u03b4/\u2206, dt/(\u2113\u2206)].\nUsing this 2-dimensional (k, j) representation of A \u2032 i , we can compute A \u2032 1 + A \u2032 2 using 2D FFT (Lemma 2.1): the first dimension has size O(t/\u2113), and the second dimension has size at most\ndt/(\u2113\u2206) + s\u03b4/\u2206 + O(1) \u2264 O td \u2113\u2206 ,\nwhere the inequality follows from s \u2264 t and an assumption\n\u03b4 \u2264 O(d/\u2113),(5)\nwhich will be justified later. Hence, the running time of this 2D FFT is\nO t \u2113 \u00b7 td \u2113\u2206 .\nSimilarly to Algorithm 1, one also can show that in this case A :\n= A \u2032 1 + A \u2032 2 is a (1 \u2212 \u03b4, \u2206 \u2212 1)- approximation of S(X 1 \u228e X 2 ) up to t.\nTo justify assumption (5), observe that if \u03b4 \u2265 d/(\u2113 + d) holds instead, or equivalently, (1 \u2212 \u03b4)(\u2113 + d) \u2264 \u2113, then one can round every integer in X 1 , X 2 \u2282 [\u2113, \u2113 + d] down to exactly \u2113 while still ensuring (1 \u2212 \u03b4) approximation, and hence immediately obtain an A \u2282 \u2113 \u00b7 N of size |A| \u2264 \u2308t/\u2113\u2309 that (1 \u2212 \u03b4)-approximates S(X 1 \u228e X 2 ) up to t.\n\nWe then apply Lemma 4.2 with scaling, and obtain the following lemma that has purely multiplicative approximation.\n\nLemma 4.3. Let \u03b4, \u03b4 0 \u2208 (0, 1/2), and \u2113, d,\nT \u2208 N + such that d \u2264 \u2113 \u2264 T . Let X 1 , X 2 \u2286 N + \u2229 [\u2113, \u2113 + d] be two integer sets. Given A 1 , A 2 \u2282 N as input where for i \u2208 {1, 2}, A i is an (1 \u2212 \u03b4) approximation of S(X i ) up to T , one can compute a set A \u2282 N + of size |A| \u2264 Z that (1 \u2212 \u03b4 \u2212 \u03b4 0 )-approximates S(X 1 \u228e X 2 ) up to T , in\u00d5 Z + (|A 1 | + |A 2 |) log(2T /\u2113) time, where Z \u2264 O min log(2T /\u2113) \u03b4 0 , T \u2113 \u00b7 d \u2113\u03b4 0 .\nProof. Initialize set A = {0}. We iterate over all r being integer powers of 2 such that \u2113/6 \u2264 r \u2264 T . For each r, apply Lemma 4.2 to A 1 and A 2 with t := 6r and \u2206 := \u2308\u03b4 0 r\u2309, and obtain a set A r \u2286 N \u2229 [0, 6r] that (1 \u2212 \u03b4, \u2308\u03b4 0 r\u2309 \u2212 1)-approximates S(X 1 \u228e X 2 ) up to 6r. We then insert all elements in A r \u2229 [r, 6r] into A. We will show that eventually A is a (1 \u2212 \u03b4 0 \u2212 \u03b4)-approximation of S(X 1 \u228e X 2 ) up to T . Observe that for every a \u2208 A r \u2229 [r, 6r], there exists s \u2208 S(X 1 \u228e X 2 ) such that a \u2264 s and\na \u2265 (1 \u2212 \u03b4)s \u2212 (\u2308\u03b4 0 r\u2309 \u2212 1) > (1 \u2212 \u03b4)s \u2212 \u03b4 0 r \u2265 (1 \u2212 \u03b4 \u2212 \u03b4 0 )s,\nwhere the last step follows from s \u2265 a \u2265 r.\n\nConversely, for every positive s \u2208 S(X 1 \u228e X 2 ; T ) (which must satisfy \u2113 \u2264 s \u2264 T ), let r be a power of two such that 3r \u2264 s \u2264 6r. Then there exists a \u2208 A r such that a \u2264 s \u2264 6r and\na \u2265 (1 \u2212 \u03b4)s \u2212 (\u2308\u03b4 0 r\u2309 \u2212 1) \u2265 (1 \u2212 \u03b4)s \u2212 \u03b4 0 r \u2265 s/2 \u2212 r/2 \u2265 r,\nso a \u2208 A r \u2229 [r, 6r] and hence will be included in A, and similarly as before we have a \u2265 (1 \u2212 \u03b4 0 \u2212 \u03b4)s.\nHence, we have established that A is a (1 \u2212 \u03b4 0 \u2212 \u03b4)-approximation of S(X 1 \u228e X 2 ) up to T .\nIt remains to bound the total running time and the size of A. There are O(log(2T /L)) many iterations of r, where for each r \u2208 [\u2113/6, T ] with t := 6r and \u2206 := \u2308\u03b4 0 r\u2309, Lemma 4.2 gives the upper bound\nZ r \u2264 O min t \u2206 , t \u2113 \u00b7 td \u2113\u2206 \u2264 O min r \u03b4 0 r , r \u2113 \u00b7 rd \u2113\u03b4 0 r \u2264 O min 1 \u03b4 0 , r \u2113 \u00b7 d \u2113\u03b4 0 .\nHence, summing over all powers of two in the range [\u2113/6, T ], we have\nZ \u2264 r Z r \u2264 O min log(2T /\u2113) \u03b4 0 , T \u2113 \u00b7 d \u2113\u03b4 0 .\nLemma 4.3 implies the following immediate corollary by dropping the upper bound T .\n\nCorollary 4.4. Let \u03b4, \u03b4 0 \u2208 (0, 1/2), and \u2113, d \u2208 N + such that d \u2264 \u2113. Let X 1 , X 2 \u2286 N + \u2229 [\u2113, \u2113 + d] be two integer sets of total size |X 1 |+ |X 2 | = n.\nGiven A 1 , A 2 \u2282 N as input where for i \u2208 {1, 2}, A i is an (1 \u2212 \u03b4) approximation of S(X i ), one can compute a set A \u2282 N + of size |A| \u2264 Z that (1 \u2212 \u03b4 0 \u2212 \u03b4)-approximates S(X 1 \u228e X 2 ), in\u00d5 Z + (|A 1 | + |A 2 |) log n time, where Z \u2264 O min 1 \u03b4 0 , nd \u2113\u03b4 0 + n \u00b7 log n .\nProof. Immediately follows from Lemma 4.3 by setting T = n \u00b7 (\u2113 + d), which is an upper bound on the largest element of S(X 1 \u228e X 2 ). Now, we apply Corollary 4.4 in a divide-and-conquer fashion, to approximate the subset sums of X \u2286 N + \u2229 [\u2113, 2\u2113].\n\nLemma 4.5. Let \u03b4 \u2208 (0, 1/2) and \u2113 \u2208 N + .\n\nGiven an integer set X \u2286 N + \u2229 [\u2113, 2\u2113] of n integers, one can compute a set A \u2282 N + that (1 \u2212 \u03b4)-approximates S(X), in\u00d5(n + \u221a n/\u03b4) time.\n\nProof. Let X = {x 1 , x 2 , . . . , x n } where \u2113 \u2264 x 1 < x 2 < \u00b7 \u00b7 \u00b7 < x n \u2264 2\u2113. Set \u03b4 0 := \u03b4/\u2308log 2 n\u2309. We will use a divide-and-conquer approach to merge the items of X using Corollary 4.4. Build a balanced binary tree with n leaf nodes representing the items x 1 , . . . , x n from left to right. At each internal node representing x [l.\n\n.r] , we use Corollary 4.4 to merge the results of the two child nodes (representing x [l..m] and x [m+1..r] respectively, where m = \u230a(l + r)/2\u230b), and obtain an approximation of S({x l , x l+1 , . . . , x r }). Finally we obtain an approximation of S(X) at the root node.\n\nThe binary tree has \u2308log 2 n\u2309 levels, where each level of applying Corollary 4.4 worsens the approximation factor by \u03b4 0 . Hence, the overall approximation factor of S(X) is 1\u2212\u03b4 0 \u00b7\u2308log 2 n\u2309 = 1\u2212\u03b4 as required.\n\nIt remains to bound the total running time of all invocations of Corollary 4.4. Note that in each invocation, the (|A 1 | + |A 2 |) log n summand in the stated time complexity is always absorbed (up to log n factors) by the output sizes of the two child nodes, which are in turn bounded by the running times of these two child invocations. So it suffices to bound the sum of the Z quantity stated in Corollary 4.4. We separately bound for each level of the binary tree. At the i-th level (0 \u2264 i < \u2308log 2 n\u2309), there are at most m i = 2 i invocations of Corollary 4.4, where each invocation involves at most n i = \u2308n/2 i \u2309 items in X. Note that n i m i \u2264 2n. Suppose these m i invocations involve x [1..k 1 ] , x [k 1 +1..k 2 ] , . . . , x [k m i \u22121 +1..n] respectively. Then the j-th invocation has d value (stated in Corollary 4.4) at most d j \u2264 x k j \u2212 x k j\u22121 . Hence, the sum of these d values is at most\nm i j=1 d j \u2264 m i j=1 (x k j \u2212 x k j\u22121 ) \u2264 x n \u2212 x 1 \u2264 \u2113.(6)\nNow we are ready to bound the sum of the Z quantity over the m i invocations at level i (0 \u2264 i < \u2308log 2 n\u2309). We consider two cases.\n\n\u2022 Case 1: n i \u2264 \u221a n.\n\nThen, by Corollary 4.4,\nm i j=1 Z j \u2264 m i j=1 n i d j \u2113\u03b4 0 + n i \u00b7 log n = n i m i j=1 d j \u2113\u03b4 0 + m i n i \u00b7 log n \u2264 n i \u03b4 0 + m i n i \u00b7 log n (by (6))\n\u2264\u00d5 \u221a n \u03b4 0 + n .\n\n\u2022 Case 2: n i > \u221a n.\n\nThen, m i \u2264 2n/n i < 2 \u221a n. By Corollary 4.4,\nm i j=1 Z j \u2264 m i \u00b7 1 \u03b4 0 \u00b7 log n \u2264\u00d5( \u221a n/\u03b4 0 ).\nHence, in either case we have m i j=1 Z j \u2264\u00d5(n + \u221a n/\u03b4). Hence, the total running time over all levels 0 \u2264 i < \u2308log 2 n\u2309 is also\u00d5(n + \u221a n/\u03b4).\n\nFinally, we solve Problem 2 by combining Lemma 4.5 with the additive combinatorics results of [GM91,BW21].\n\nLemma 4.6. We can solve Problem 2 in\u00d5 n + min{\u03b5 \u22121 n 1/2 , \u03b5 \u22121 + \u03b5 \u22122 /n 3/2 } time, which is at most\u00d5(n + 1/\u03b5 5/4 ) .\n\nProof. Recall that in Problem 2, for \u03b5 > 0 where \u2113 = 1/\u03b5 is an integer, we are given a set X \u2286 N + \u2229 [\u2113, 2\u2113) of n distinct integers, and need to compute a set A \u2282 N that n-additively approximates S(X).\n\nWe will choose to run one of the following two algorithms depending on the parameters.\n\nAlgorithm 1. Directly apply Lemma 4.5 with \u03b4 := \u03b5, in\u00d5(n + \u221a n/\u03b5) time.\n\nWhen n \u2264\u00d5(1/\u03b5 1/2 ), the running time of Algorithm 1 is\u00d5(n + 1/\u03b5 5/4 ).\n\nAlgorithm 2. Let \u03c3 = \u03a3(X), and let \u03bb be the threshold value from Theorem 2.7 satisfying \u03bb =\u0398(\u2113 2 /n). The following algorithm applies when \u03bb \u2264 \u03c3/2, which holds in particular when 1/\u03b5 \u226a n 2 . Initialize A = \u2205. We set \u03b4 := n/(n + \u03bb), and apply Lemma 4.5 in\u00d5(n + \u221a n/\u03b4) time to compute a set A \u03b4 that (1 \u2212 \u03b4)-approximates S(X). Observe that A \u03b4 \u2229 [0, \u03bb] is an n-additive approximation of S(X) up to \u03bb. Hence, we insert all elements in A \u03b4 \u2229 [0, \u03bb] to A.\n\nThen, using the data structure from Lemma 2.7, we compute an n-additive approximation of S(X) \u2229 [\u03bb, \u03c3/2] and insert them into A. To do this, we start from the left endpoint \u03bb of the interval [\u03bb, \u03c3/2], and each time use binary search (implementable using range queries supported by Lemma 2.7) to find the next subset sum in the interval, and then jump n steps to the right since we allow an additive error of n. The time complexity is O(\u2308 \u03c3/2\u2212\u03bb n \u2309 \u00b7 log \u03c3) \u2264\u00d5(\u2113). Now we have constructed A that n-additively approximates S(X) up to \u03c3/2. Using the simple fact that t \u2208 \u03a3(X) if and only if \u03c3 \u2212 t \u2208 \u03a3(X), we can symmetrically use A to obtain an approximation of the remaining half. Specifically, letting A \u2032 := {\u03c3 \u2212 a \u2212 n : a \u2208 A}, it is straightforward to verify that A \u222a A \u2032 is an n-additive approximation of S(X) (up to \u03c3). So we return A \u222a A \u2032 .\n\nThe overall time complexity of Algorithm 2 is O(n + \u2113 + \u221a n/\u03b4) \u2264\u00d5 n + 1/\u03b5 + \u221a n(n + \u03bb) n \u2264\u00d5 n + 1/\u03b5 + 1/\u03b5 2 n 3/2 .\n\nWhen n \u226b 1/\u03b5 1/2 , the running time is\u00d5(n + 1/\u03b5 5/4 ).\n\nCombined with the reduction in Lemma 4.1, this proves our main Theorem 1.2.\n\n\nB Proof of Lemma 2.6\n\nWe need several results on dense subset sums developed by a series of works including [S\u00e1r94, Lev03, GM91, BW21]. The following definitions and theorems are from [BW21]. The sets considered here contain distinct positive integers.\nDefinition B.1 (Density). A set X \u2282 N + is \u03b4-dense if it satisfies |X| 2 \u2265 \u03b4 \u00b7 max X.\nDefinition B.2 (Almost Divisor). Let X(d) := X \u2229 dZ denote the set of all numbers in X that are divisible by d. Let X(d) := X \\ X(d) denote the set of all numbers in X not divisible by d. We say an integer d > 1 is an \u03b1-almost divisor of X if |X(d)| \u2264 \u03b1 \u00b7 \u03a3(X)/|X| 2 . Now, let \u03bb := d \u00b7 \u03bb X \u2032 . From Property 3 in Theorem B.3, we know that\n\u03a3(X)/2 d \u2264 2 3 \u03a3(X \u2032 ) < \u03a3(X \u2032 ) \u2212 \u03bb X \u2032 .\nHence, given any \u03bb \u2264 t \u2264 \u03a3(X)/2, we have\n\u03bb X \u2032 \u2264 \u2308t/d\u2309 \u2264 \u03a3(X \u2032 ) \u2212 \u03bb X \u2032 .\nSo \u2308t/d\u2309 \u2208 S(X \u2032 ), which implies t \u2032 := d \u00b7 \u2308t/d\u2309 \u2208 S(X). From Property 1 in Theorem B.3, we have\n0 \u2264 t \u2032 \u2212 t < d \u2264 4 \u00b7 |X| \u00b7 (2\u2113)/|X| 2 = 8\u2113/n.\nFinally, we upper-bound \u03bb as\n\u03bb = d \u00b7 C \u03bb \u00b7 (max X \u2032 ) \u00b7 \u03a3(X \u2032 )/|X \u2032 | 2 \u2264 d \u00b7 C \u03bb \u00b7 (max X \u2032 ) 2 /|X \u2032 | \u2264 d \u00b7 C \u03bb \u00b7 (2\u2113/d) 2 /|X \u2032 | \u2264 d \u00b7 C \u03bb \u00b7 (2\u2113/d) 2 /(0.75n) (by Property 2) = (16C \u03bb /3) \u00b7 \u2113 2 dn \u2264 O(\u2113 2 /n).\n\nC Known reductions from the Partition Problem\n\nRecall that we defined the following simpler problem.\n\nProblem 2. Assume \u03b5 \u2208 (0, 1/2) and 1/\u03b5 \u2208 N + . Given a set X of n distinct integers in the interval [1/\u03b5, 2/\u03b5), compute a set A \u2282 N that n-additively approximates S(X).\n\nIn the following, we will reduce Partition to this problem. By a simple greedy argument, we can assume OPT \u2265 t/2. Lemma C.1 (e.g., [MWW19,Lemma 4.3]). One may assume w.l.o.g. that for any Subset Sum instance OPT \u2265 t/2. Otherwise the instance can be solved exactly in\u00d5(n) time.\n\nThen, we have the following important lemma about (1 \u2212 \u03b5)-approximating Partition. The key insight behind this lemma was first observed in [MWW19], indicating that approximating Partition is much easier than approximating general Subset Sum instances.\n\nLemma C.2 (c.f. [MWW19]). Let X \u2282 N + be a multiset with sum of elements \u03c3 = \u03a3(X), and let \u03b5 \u2208 (0, 1/2). Given a set A \u2282 N that \u03b5\u03c3/4-additively approximates S(X), one can immediately solve (1 \u2212 \u03b5)-approximation Partition on X.\n\nProof. Recall that t = \u03c3/2, and OPT = max{\u03a3(Y ) : \u03a3(Y ) \u2264 t, Y \u2286 X}.\n\nGiven A, let a := max{a \u2208 A : a \u2264 t}. We claim that\n\n(1 \u2212 \u03b5)OPT \u2264 min{a, t(1 \u2212 \u03b5/2)} \u2264 OPT, which allows us to solve (1 \u2212 \u03b5)-approximation Partition on X. We prove this claim by separately considering two cases.\n\nSince the total incurred additive loss is at most n \u00b7 (\u2308 \u03c3 100n/\u03b5 \u2309 \u2212 1) \u2264 \u03b5\u03c3 100 , we know that S(Y ) is an \u03b5\u03c3/100-additive approximation of S(X). Now, we can without loss of generality assume y \u2208 [1/\u03b5, 100n/\u03b5 2 ] \u2229 N + for all y \u2208 Y , since otherwise we could simply scale all elements in X, Y (as well as \u03c3, t).\n\nThen, define another multiset Z \u2282 N + as follows: for every y \u2208 Y , round y down to 2 k \u00b7 z 0 for some k \u2208 N \u2229 [0, log 2 (100n/\u03b5) + 1] and z 0 \u2208 N + \u2229 [100/\u03b5, 200/\u03b5), and insert 2 k \u00b7 z 0 into Z. Observe that, every y \u2208 Y incurs a multiplicative error of at most \u03b5/100 after rounding. Hence, S(Z) is an (1 \u2212 \u03b5/100) approximation of S(Y ). In particular, S(Z) approximates S(Y ) with additive error at most (\u03b5/100) \u00b7 \u03a3(Y ) \u2264 \u03b5\u03c3/100. Combined with previous discussion, this means that S(Z) is an \u03b5\u03c3/50-additive approximation of S(X).\n\nThen, we process Z using Lemma C.3, and obtain another set Z \u2032 \u2282 N + so that S(Z \u2032 ) = S(Z), and the multiplicity of any element in Z \u2032 is at most 2. Moreover, by the fourth property of Lemma C.3, we still have that every z \u2208 Z \u2032 can be expressed as z = 2 k \u00b7 z 0 for some non-negative integer k \u2264 O(log(n/\u03b5)) and integer z 0 \u2208 N + \u2229 [100/\u03b5, 200/\u03b5). Now, we can partition Z \u2032 into O(log(n/\u03b5)) groups so that each group contains distinct integers from 2 k \u00b7 (N + \u2229 [100/\u03b5, 200/\u03b5)) for some non-negative integer k \u2264 O(log(n/\u03b5)).\n\nPick a smaller \u03b5 \u2032 = \u0398 \u03b5 log(n/\u03b5) (assuming \u03b5/\u03b5 \u2032 \u2208 N + ). For each group Z \u2032 j mentioned above, we compute a set A j \u2286 N that approximates S(Z \u2032 j ) with \u03b5 \u2032 \u03a3(Z \u2032 j )/100 additive error. This can be done as follows: recall that Z \u2032 j contains distinct integers from 2 k \u00b7 (N + \u2229 [100/\u03b5, 200/\u03b5)); we scale the integers in Z \u2032 j to (\u03b5/\u03b5 \u2032 ) \u00b7 (N + \u2229 [100/\u03b5, 200/\u03b5\u2309)) and then invoke the algorithm for Problem 2 which approximates S(Z \u2032 j ) with additive error |Z \u2032 j | \u2264 \u03a3(Z \u2032 j ) (\u03b5/\u03b5 \u2032 )\u00b7100/\u03b5 = \u03b5 \u2032 \u03a3(Z \u2032 j )/100 as desired. The total running time for these invocations is (up to poly log(n/\u03b5) factors) j (|Z j |+(100/\u03b5 \u2032 ) c ) \u2264\u00d5(n+1/\u03b5 c ). Now, using the computed A j \u2286 N that approximates S(Z \u2032 j ) with \u03b5 \u2032 \u03a3(Z \u2032 j )/100 additive error, we will compute an approximation of S(Z \u2032 ) (recall that Z \u2032 = j Z \u2032 j is a partition). To do this, we first round every element in every A j down to integer multiples of \u2308\u03b5 \u2032 \u03c3/100\u2309, and this rounded A \u2032 j still approximates S(Z \u2032 j ) with additive error at most \u03b5 \u2032 \u03a3(Z \u2032 j )/100 + \u03b5 \u2032 \u03c3/100 \u2264 \u03b5 \u2032 \u03c3/50. Finally, we use FFT to compute the sumset of all these A \u2032 j (there are O(log(n/\u03b5)) of them), and this will be our approximation of S(Z \u2032 ). The accumulated additive error here is at most O(log(n/\u03b5)) \u00b7 \u03b5 \u2032 \u03c3/50 \u2264 \u03b5\u03c3/50, and the running time of these FFTs is O(log(n/\u03b5)) \u00b7\u00d5 \u03c3 \u2308\u03b5 \u2032 \u03c3/100\u2309 \u2264\u00d5(1/\u03b5). We have obtained an \u03b5\u03c3/50-additive approximation of S(Z \u2032 ). Previously we established S(Z \u2032 ) = S(Z) and S(Z) is an \u03b5\u03c3/50-additive approximation of S(X), so we have obtained an \u03b5\u03c3/50-additive approximation of S(X). By Lemma C.2, this is sufficient for solving (1\u2212\u03b5)-approximation Partition on X.\n\nThe overall running time of this reduction is\u00d5(n + 1/\u03b5 c ).\n\nLemma 2. 1\n1(2-dimensional FFT, e.g., [Bla10, Chapter 12.8]). Given two sets A 1 , A 2 \u2286 [n] \u00d7 [m], one can compute\n\n\nLemma 3.1 will be proved in the appendix. Based on Chan's techniques[Cha18], Jin[Jin19] obtained the following lemmas for (1 \u2212 \u03b5)approximating knapsack up to a small B or when there are few distinct values p i .\n\nLemma 3 . 2 (\n32Follows from Lemma 17 of[Jin19]). Given a list I of items (p 1 , w 1 ), . . . , (p n , w n ) with weights w i \u2208 N and profits p i being multiples of \u03b5 in the interval [1, 2), one can (1 \u2212 \u03b5)-approximate the profit function\n\nLemma 3. 3 (\n3Follows from Theorem 3 of[Cha18]). Given a list I of items (p 1 , w 1 ), . . . , (p n , w n ) with weights w i \u2208 N and profits p i being multiples of \u03b5 in the interval [1, 2), if there are only m distinct profit values p i , then one can (1\u2212\u03b5)-approximate the profit function\n\n\nLemma 3.4 ([Cha18, Lemma 2(i)]). Let f 1 , . . . , f m be monotone step functions with total complexity O(n) and ranges contained in {0} \u222a [A, B]. Then we can compute a monotone step function that has complexity\u00d5( 1 \u03b5 log B/A) and (\n\nLemma 3. 9 (\n9Greedy Exchange Lemma). Let S \u2286 [n] be any item set with total profit s\u2208S p s \u2264 2m. Let B := 9c\u03b5 \u22121 /\u2206, where c \u2265 1 is the universal constant in Lemma 2.6. Then, there exists an item setS \u2286 [n], such that the total profitp contributed by items [n] \\ [i] inS satisfiesp := s\u2208S\u2229([n]\\[i])\n\n) ) time. 2 .\n2contradicting the definition ofS being a maximizer.Hence, we have established thatS satisfies (1). Now we are ready to prove Lemma 3.5.Proof of Lemma 3.5. Recall that i \u2208 {1, 2, . . . , n} is the maximum such that D(i) \u2264 \u2206, which can be found using Observation 3.8 with a binary search in\u00d5(n) time. Let J \u2282 [i] with |J| \u2264 2m be the minimizer for D(i). Now, we approximately compute the profit functions f J , f [i]\\J , f [n]\\[i] for three item sets J, [i] \\ J, [n] \\ [i] using different algorithms, described as follows: 1. Use Lemma 3.6 to compute f 1 that (2m\u03b5)-additively approximates f J , in OBy definition of i, items in [i] \\ J have no more than \u2206 distinct profit values. Hence we can use Lemma 3.3 to compute f 2 that (1 \u2212 \u03b5)-approximates f [i]\\J , in\u00d5(\u2206\u03b5 \u22123/2 ) =\u00d5(\u03b5 \u221217/8 ) time. 3. Use Lemma 3.2 to compute f 3 that (1 \u2212 \u03b5)-approximates the f [n]\\[i] up to B = \u0398(\u03b5 \u22121 /\u2206) (defined in Lemma 3.9), in\u00d5(B 1/3 \u03b5 \u22122 ) \u2264\u00d5(\u03b5 \u221217/8 ) time.Finally, merge the three parts f 1 , f 2 , f 3 using Lemma 3.4 in\u00d5(\u03b5 \u22122 ) time, and return the result. 4\n\n\nLemma 3.10 ([Cha18, Lemma 5]). Let f 1 , . . . , f m be monotone step functions with ranges contained in [0, B]. Let \u2206 \u2282 [\u03b4, 8\u03b4]\n\n\namong allS satisfying s\u2208S w s \u2264 s\u2208S w s and s\u2208S p s \u2264 s\u2208S p s . Then, we can find a subset K \u2286S \u2229 ([n] \\ [i]) with total profit p * = k\u2208K p k \u2208 (B, B + 2], which can be obtained by removing items from S \u2229 ([n] \\ [i]) (recall that each item has profit inWe defineS \u2286 [n] as the maximizer of \n\ns\u2208S\u2229[i] \n\np s + \n\ns\u2208S\u2229([n]\\[i]) \n\n(1 \u2212 \u03b5)p s \nWe claim thatS satisfies the \nproperties (1), (2), (3). Observe that (2), (3) immediately follow from the definition ofS. The main \npart is to verify (1). \nSuppose for contradiction that (1) does not hold. \nThroughout this paper, we use\u00d5(f ) to denote O(f \u00b7 poly log(f )).\nIn fact, it can be verified that by combining our way of doing 2D-FFT with the other techniques in [KX19] we can get an alternative deterministic solution for Subset Sum running in\u00d5( \u221a nt) time. It is interesting to see if the two ways of using 2D-FFT can be combined to improve the running time for Subset Sum deterministically.\nAlthough the running time of the second and third algorithm is dominated by the first algorithm, a simple rebalancing of parameters does not seem to yield better complexity, due to various constraints in the parameter settings for Lemma 3.6.\nFor independent random variables x1, . . . , xn \u2208 {0, 1} and \u03b4 > 0, 0 \u2264 w1, . . . , wn \u2264 1, let X = n i=1 wixi and \u00b5 = E[x], then Pr[|x \u2212 \u00b5| \u2265 \u03b4\u00b5] \u2264 2e \u2212\u03b4 2 \u00b5/3 .\nWe apply Chernoff bound with wj = Rj /(2n/\u22061) where Rj = x\u2208T \u2229G j x. Now consider S1. We set xj = 1 if j \u2208 \u222at\u2208S 1 It and xj = 0 otherwise. Since the partition {It} 1\u2264t\u2264\u2206 0 is random, the expected value of k j=1 wj xj will be \u0398(\u220612 i /\u22060). From Chernoff bound, this value will be u/(4n/\u22061) away from expected value with probability \u2264 2e \u0398(\u2212(u/(4n/\u2206 1 )) 2 /(\u2206 1 2 i /\u2206 0 )) \u2264 1/(10n). By union bound, both x\u2208T \u2229H 2 x and x\u2208T \u2229H 1 x will be within difference u/2 from the expected value with probability \u2265 1 \u2212 1/(5n), in which case their difference will be bounded by u.\nTheorem B.3 ([BW21, Theorem 4.1]). Let \u03b4 \u2265 1 and \u03b1 \u2264 \u03b4/16. Given an \u03b4-dense set X of size n, there exists a positive integer d such that X \u2032 := X(d)/d is \u03b4-dense and has no \u03b1-almost divisor, and the following additional properties are satisfied:\nSETHbased lower bounds for subset sum and bicriteria path. Amir Abboud, Karl Bringmann, Danny Hermelin, Dvir Shabtay, 10.1137/1.9781611975482.3Proceedings of the 30th ACM-SIAM Symposium on Discrete Algorithms (SODA). the 30th ACM-SIAM Symposium on Discrete Algorithms (SODA)Amir Abboud, Karl Bringmann, Danny Hermelin, and Dvir Shabtay. SETH- based lower bounds for subset sum and bicriteria path. In Proceedings of the 30th ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 41-57, 2019. doi:10.1137/1.9781611975482.3. 1\n\nGeometric applications of a matrix-searching algorithm. Alok Aggarwal, Maria M Klawe, Shlomo Moran, Peter Shor, Robert Wilber, 10.1007/BF01840359Algorithmica. 21AKM + 87[AKM + 87] Alok Aggarwal, Maria M. Klawe, Shlomo Moran, Peter Shor, and Robert Wilber. Geometric applications of a matrix-searching algorithm. Algorithmica, 2(1):195-208, November 1987. doi:10.1007/BF01840359. 11\n\nFaster knapsack algorithms via bounded monotone min-plus-convolution. Karl Bringmann, Alejandro Cassis, 10.4230/LIPIcs.ICALP.2022.3149th International Colloquium on Automata, Languages, and Programming, ICALP 2022. Paris, France229202221. Schloss Dagstuhl -Leibniz-Zentrum f\u00fcr InformatikKarl Bringmann and Alejandro Cassis. Faster knapsack algorithms via bounded monotone min-plus-convolution. In 49th International Colloquium on Automata, Lan- guages, and Programming, ICALP 2022, July 4-8, 2022, Paris, France, volume 229 of LIPIcs, pages 31:1-31:21. Schloss Dagstuhl -Leibniz-Zentrum f\u00fcr Informatik, 2022. doi:10.4230/LIPIcs.ICALP.2022.31. 1\n\nDavid Bremner, Timothy M Chan, Erik D Demaine, Jeff Erickson, Ferran Hurtado, John Iacono, Stefan Langerman, 10.1007/s00453-012-9734-3Mihai P\u01cetra\u015fcu, and Perouz Taslakian. Necklaces, convolutions, and x+y. 69BCD + 14[BCD + 14] David Bremner, Timothy M. Chan, Erik D. Demaine, Jeff Erickson, Ferran Hur- tado, John Iacono, Stefan Langerman, Mihai P\u01cetra\u015fcu, and Perouz Taslakian. Necklaces, convolutions, and x+y. Algorithmica, 69(2):294-314, June 2014. doi:10.1007/s00453-012-9734-3. 7\n\nFast algorithms for signal processing. E Richard, Blahut, Cambridge University Press4Richard E Blahut. Fast algorithms for signal processing. Cambridge University Press, 2010. 4\n\nA fine-grained perspective on approximating subset sum and partition. Karl Bringmann, Vasileios Nakos, 10.1137/1.9781611976465.108Proceedings of the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual Conference. the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual Conference35Karl Bringmann and Vasileios Nakos. A fine-grained perspective on approximating subset sum and partition. In Proceedings of the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual Conference, January 10 -13, 2021, pages 1797-1815. SIAM, 2021. doi:10.1137/1.9781611976465.108. 1, 3, 5\n\nOn near-linear-time algorithms for dense subset sum. Karl Bringmann, Philip Wellnitz, 10.1137/1.9781611976465.107Proceedings of the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual Conference. the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual ConferenceSIAM1822Karl Bringmann and Philip Wellnitz. On near-linear-time algorithms for dense subset sum. In Proceedings of the 2021 ACM-SIAM Symposium on Discrete Algorithms, SODA 2021, Virtual Conference, January 10 -13, 2021, pages 1777-1796. SIAM, 2021. doi:10.1137/1.9781611976465.107. 2, 6, 18, 22\n\nApproximation Schemes for 0-1 Knapsack. Timothy M Chan, 10.4230/OASIcs.SOSA.2018.5Proceedings of the 1st Symposium on Simplicity in Algorithms (SOSA). the 1st Symposium on Simplicity in Algorithms (SOSA)511Timothy M. Chan. Approximation Schemes for 0-1 Knapsack. In Proceedings of the 1st Symposium on Simplicity in Algorithms (SOSA), pages 5:1-5:12, 2018. doi:10.4230/OASIcs.SOSA.2018.5. 1, 2, 3, 5, 6, 7, 11\n\nOn problems equivalent to (min,+)-convolution. Marek Cygan, Marcin Mucha, Karol W\u0119grzycki, Micha\u0142 W\u0142odarczyk, 10.1145/3293465ACM Trans. Algorithms. 151Marek Cygan, Marcin Mucha, Karol W\u0119grzycki, and Micha\u0142 W\u0142odarczyk. On problems equivalent to (min,+)-convolution. ACM Trans. Algorithms, 15(1):14:1-14:25, January 2019. doi:10.1145/3293465. 1\n\nDeterministic APSP, orthogonal vectors, and more: Quickly derandomizing Razborov-Smolensky. Timothy M Chan, Ryan Williams, 10.1137/1.9781611974331.ch87Proceedings of the 27th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA). the 27th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA)Timothy M. Chan and Ryan Williams. Deterministic APSP, orthogonal vectors, and more: Quickly derandomizing Razborov-Smolensky. In Proceedings of the 27th An- nual ACM-SIAM Symposium on Discrete Algorithms (SODA), pages 1246-1255, 2016. doi:10.1137/1.9781611974331.ch87. 7\n\nComputational complexity of approximation algorithms for combinatorial problems. George Gens, Eugene Levner, 10.1007/3-540-09526-8_26Mathematical Foundations of Computer Science 1979, Proceedings, 8th Symposium. Olomouc, CzechoslovakiaSpringer74George Gens and Eugene Levner. Computational complexity of approximation algo- rithms for combinatorial problems. In Mathematical Foundations of Computer Science 1979, Proceedings, 8th Symposium, Olomouc, Czechoslovakia, September 3-7, 1979, volume 74 of Lecture Notes in Computer Science, pages 292-300. Springer, 1979. doi:10.1007/3-540-09526-8\\_26. 1\n\nAn almost linear-time algorithm for the dense subsetsum problem. Zvi Galil, Oded Margalit, 10.1137/0220072SIAM J. Comput. 20622Zvi Galil and Oded Margalit. An almost linear-time algorithm for the dense subset- sum problem. SIAM J. Comput., 20(6):1157-1189, 1991. doi:10.1137/0220072. 2, 3, 6, 18, 22\n\nFast approximation algorithms for the knapsack and sum of subset problems. H Oscar, Chul E Ibarra, Kim, 10.1145/321906.321909Journal of the ACM (JACM). 224Oscar H. Ibarra and Chul E. Kim. Fast approximation algorithms for the knapsack and sum of subset problems. Journal of the ACM (JACM), 22(4):463-468, October 1975. doi:10.1145/321906.321909. 1\n\nAn improved FPTAS for 0-1 knapsack. Ce Jin, 10.4230/LIPIcs.ICALP.2019.7646th International Colloquium on Automata, Languages, and Programming, ICALP 2019. Patras, Greece1321114. Schloss Dagstuhl -Leibniz-Zentrum f\u00fcr InformatikCe Jin. An improved FPTAS for 0-1 knapsack. In 46th International Colloquium on Automata, Languages, and Programming, ICALP 2019, July 9-12, 2019, Patras, Greece, volume 132 of LIPIcs, pages 76:1-76:14. Schloss Dagstuhl -Leibniz-Zentrum f\u00fcr Informatik, 2019. doi:10.4230/LIPIcs.ICALP.2019.76. 1, 2, 3, 6, 7, 11\n\nA faster fptas for the unbounded knapsack problem. Klaus Jansen, Stefan E J Kraft, 10.1016/j.ejc.2017.07.016European Journal of Combinatorics. 68Klaus Jansen and Stefan E.J. Kraft. A faster fptas for the unbounded knapsack problem. European Journal of Combinatorics, 68:148 -174, 2018. doi:10.1016/j.ejc.2017.07.016. 1\n\nReducibility among combinatorial problems. M Richard, Karp, Complexity of computer computations. SpringerRichard M Karp. Reducibility among combinatorial problems. In Complexity of com- puter computations, pages 85-103. Springer, 1972. 1\n\nAn efficient fully polynomial approximation scheme for the subset-sum problem. Hans Kellerer, Renata Mansini, Ulrich Pferschy, Maria Grazia Speranza, 10.1016/S0022-0000(03)00006-0J. Comput. Syst. Sci. 662Hans Kellerer, Renata Mansini, Ulrich Pferschy, and Maria Grazia Speranza. An effi- cient fully polynomial approximation scheme for the subset-sum problem. J. Comput. Syst. Sci., 66(2):349-370, 2003. doi:10.1016/S0022-0000(03)00006-0. 1\n\nA new fully polynomial time approximation scheme for the knapsack problem. Hans Kellerer, Ulrich Pferschy, 10.1023/A:1009813105532Journal of Combinatorial Optimization. 31Hans Kellerer and Ulrich Pferschy. A new fully polynomial time approximation scheme for the knapsack problem. Journal of Combinatorial Optimization, 3(1):59-71, July 1999. doi:10.1023/A:1009813105532. 1\n\nImproved dynamic programming in connection with an fptas for the knapsack problem. Hans Kellerer, Ulrich Pferschy, 10.1023/B:JOCO.0000021934.29833.6bJournal of Combinatorial Optimization. 81Hans Kellerer and Ulrich Pferschy. Improved dynamic programming in connection with an fptas for the knapsack problem. Journal of Combinatorial Optimization, 8(1):5-11, March 2004. doi:10.1023/B:JOCO.0000021934.29833.6b. 1\n\nOn the fine-grained complexity of one-dimensional dynamic programming. Marvin K\u00fcnnemann, Ramamohan Paturi, Stefan Schneider, 10.4230/LIPIcs.ICALP.2017.21Proceedings of the 44th International Colloquium on Automata, Languages, and Programming (ICALP). the 44th International Colloquium on Automata, Languages, and Programming (ICALP)21Marvin K\u00fcnnemann, Ramamohan Paturi, and Stefan Schneider. On the fine-grained complexity of one-dimensional dynamic programming. In Proceedings of the 44th In- ternational Colloquium on Automata, Languages, and Programming (ICALP), pages 21:1-21:15, 2017. doi:10.4230/LIPIcs.ICALP.2017.21. 1\n\nFaster pseudopolynomial time algorithms for subset sum. Konstantinos Koiliaris, Chao Xu, 10.1145/3329863ACM Trans. Algorithms. 15324Konstantinos Koiliaris and Chao Xu. Faster pseudopolynomial time algorithms for sub- set sum. ACM Trans. Algorithms, 15(3):40:1-40:20, June 2019. doi:10.1145/3329863. 3, 24\n\nFast approximation algorithms for knapsack problems. Eugene L Lawler, 10.1287/moor.4.4.339Mathematics of Operations Research. 444Eugene L. Lawler. Fast approximation algorithms for knapsack problems. Mathematics of Operations Research, 4(4):339-356, 1979. doi:10.1287/moor.4.4.339. 1, 4\n\nBlocks and progressions in subset sum sets. F Vsevolod, Lev, ACTA ARITHMETICA-WARSZAWA. 106222Vsevolod F Lev. Blocks and progressions in subset sum sets. ACTA ARITHMETICA- WARSZAWA-, 106(2):123-142, 2003. 6, 22\n\nA subquadratic approximation scheme for partition. Marcin Mucha, Karol W\u0119grzycki, Micha\u0142 W\u0142odarczyk, 10.1137/1.9781611975482.5Proceedings of the 30th ACM-SIAM Symposium on Discrete Algorithms (SODA). the 30th ACM-SIAM Symposium on Discrete Algorithms (SODA)324Marcin Mucha, Karol W\u0119grzycki, and Micha\u0142 W\u0142odarczyk. A subquadratic ap- proximation scheme for partition. In Proceedings of the 30th ACM-SIAM Sym- posium on Discrete Algorithms (SODA), pages 70-88, 2019. Full version at https://arxiv.org/abs/1804.02269v2. doi:10.1137/1.9781611975482.5. 1, 3, 5, 23, 24\n\nFaster fully polynomial approximation schemes for knapsack problems. Donguk Rhee, Massachusetts Institute of TechnologyMaster's thesisDonguk Rhee. Faster fully polynomial approximation schemes for knapsack prob- lems. Master's thesis, Massachusetts Institute of Technology, 2015. URL: http://hdl.handle.net/1721\n\nFine addition theorems, II. A S\u00e1rk\u00f6zy, Journal of Number Theory. 48222A. S\u00e1rk\u00f6zy. Fine addition theorems, II. Journal of Number Theory, 48(2):197-218, 1994. 2, 6, 22\n\nFaster all-pairs shortest paths via circuit complexity. Ryan Williams, 10.1145/2591796.2591811Proceedings of the 46th Annual ACM Symposium on Theory of Computing (STOC). the 46th Annual ACM Symposium on Theory of Computing (STOC)713Ryan Williams. Faster all-pairs shortest paths via circuit complexity. In Proceedings of the 46th Annual ACM Symposium on Theory of Computing (STOC), pages 664-673, 2014. doi:10.1145/2591796.2591811. 7, 13\n\n) and 1/\u03b5 \u2208 N + . Given a list I of items. Problem 1. Assume \u03b5 \u2208 (0, 1/2. w 1 ), . . . , (p n , w n ) with restrict the profit values into small intervals, as follows: divide the items into O(logProblem 1. Assume \u03b5 \u2208 (0, 1/2) and 1/\u03b5 \u2208 N + . Given a list I of items (p 1 , w 1 ), . . . , (p n , w n ) with restrict the profit values into small intervals, as follows: divide the items into O(log\n\neach containing items with p i \u2208 [2 j , 2 j+1 ] for some j (which can be rescaled to [1, 2]). Finally, use the merging lemma Lemma 3.4 to merge the profit functions of all groups, in\u00d5(n + \u03b5 \u22122 ) overall time. Now, having restricted the profit values into [1, 2), we can round every profit value to a multiple of \u03b5, which incurs only (1 \u2212 O(\u03b5)) approximation factor in total. O(log \u03b5 \u22121 ) groups (see Section 2.3). Finally, the following greedy lemma takes care of the case with total profit above \u2126(\u03b5 \u22121O(log \u03b5 \u22121 ) groups (see Section 2.3), each containing items with p i \u2208 [2 j , 2 j+1 ] for some j (which can be rescaled to [1, 2]). Finally, use the merging lemma Lemma 3.4 to merge the profit functions of all groups, in\u00d5(n + \u03b5 \u22122 ) overall time. Now, having restricted the profit values into [1, 2), we can round every profit value to a multiple of \u03b5, which incurs only (1 \u2212 O(\u03b5)) approximation factor in total. Finally, the following greedy lemma takes care of the case with total profit above \u2126(\u03b5 \u22121 ).\n\nSuppose p i \u2208 [1, 2] for all i \u2208 I. For B = \u2126(\u03b5 \u22121 ), the profit function f I can be approximated with additive error O(\u03b5B) in O. A Lemma, n log n) timeLemma A.1. Suppose p i \u2208 [1, 2] for all i \u2208 I. For B = \u2126(\u03b5 \u22121 ), the profit function f I can be approximated with additive error O(\u03b5B) in O(n log n) time.\n\nSimply sort the items in nonincreasing order of efficiency p i /w i , and define the profit functio\u00f1 f resulting from greedy, with function values 0. , w 1 + \u00b7 \u00b7 \u00b7 + w n . It clearly approximates f I with an additive error of max i. p i \u2264 2 \u2264 O(\u03b5B) for B = \u2126(\u03b5 \u22121Proof. Simply sort the items in nonincreasing order of efficiency p i /w i , and define the profit functio\u00f1 f resulting from greedy, with function values 0, p 1 , p 1 + p 2 , . . . , p 1 + \u00b7 \u00b7 \u00b7 + p n and x-breakpoints 0, w 1 , w 1 + w 2 , . . . , w 1 + \u00b7 \u00b7 \u00b7 + w n . It clearly approximates f I with an additive error of max i p i \u2264 2 \u2264 O(\u03b5B) for B = \u2126(\u03b5 \u22121 ).\n\nThis greedy approach achieves (1 \u2212 O(\u03b5))-approximation for large profit values. Henceit isThis greedy approach achieves (1 \u2212 O(\u03b5))-approximation for large profit values. Hence, it is\n\nLet X be a multi-set and set C \u03b4 := 1699200 \u00b7 log(2n) log. C \u03bb := 169920 \u00b7 log. 2C \u03b1 := 42480 \u00b7 logTheorem B.4 ([BW21, Theorem 4.2]). Let X be a multi-set and set C \u03b4 := 1699200 \u00b7 log(2n) log 2 (2), C \u03b1 := 42480 \u00b7 log(2), C \u03bb := 169920 \u00b7 log(2).\n\nIf X is C \u03b4 -dense and has no C \u03b1 -almost divisor, then for \u03bb X := C \u03bb \u00b7 (max X) \u00b7 \u03a3(X)/|X| 2 we have. \u03bb X , \u03a3(X) \u2212 \u03bb X ] \u2229 Z \u2286 S(XIf X is C \u03b4 -dense and has no C \u03b1 -almost divisor, then for \u03bb X := C \u03bb \u00b7 (max X) \u00b7 \u03a3(X)/|X| 2 we have [\u03bb X , \u03a3(X) \u2212 \u03bb X ] \u2229 Z \u2286 S(X).\n\nLet d be the positive integer guaranteed by Theorem B.3 such that X \u2032 := X(d)/d is C \u03b4 -dense and has no C \u03b1 -almost divisor. Then, by Theorem B.4, for \u03bb X \u2032 := C \u03bb \u00b7 (max X \u2032 ) \u00b7 \u03a3(X \u2032 )/|X \u2032 | 2 we have. C , = , Proof. Let C \u03b4 = \u0398C \u03bb = \u0398(1) be defined as in Theorem B.4. Then, X is C \u03b4dense since C \u03b4 \u00b7 \u2113 = o(n 2 ). \u03bb X \u2032 , \u03a3(X \u2032 ) \u2212 \u03bb X \u2032 ] \u2229 Z \u2286 S(X \u2032Proof. Let C \u03b4 = \u0398(log n), C \u03b1 = \u0398(1), C \u03bb = \u0398(1) be defined as in Theorem B.4. Then, X is C \u03b4 - dense since C \u03b4 \u00b7 \u2113 = o(n 2 ). Let d be the positive integer guaranteed by Theorem B.3 such that X \u2032 := X(d)/d is C \u03b4 -dense and has no C \u03b1 -almost divisor. Then, by Theorem B.4, for \u03bb X \u2032 := C \u03bb \u00b7 (max X \u2032 ) \u00b7 \u03a3(X \u2032 )/|X \u2032 | 2 we have [\u03bb X \u2032 , \u03a3(X \u2032 ) \u2212 \u03bb X \u2032 ] \u2229 Z \u2286 S(X \u2032 ).\n\nSince X \u2032 is C \u03b4 -dense, we have \u03bb X \u2032 /\u03a3(X \u2032 ) = C \u03bb \u00b7 (max X \u2032 )/|X \u2032 | 2 \u2264 C \u03bb /C \u03b4 < 0.1. \u2022 Case 1: a \u2264 t(1 \u2212 \u03b5/2)Since X \u2032 is C \u03b4 -dense, we have \u03bb X \u2032 /\u03a3(X \u2032 ) = C \u03bb \u00b7 (max X \u2032 )/|X \u2032 | 2 \u2264 C \u03bb /C \u03b4 < 0.1. \u2022 Case 1: a \u2264 t(1 \u2212 \u03b5/2).\n\nWe have s \u2264 a + \u03b5\u03c3/4 \u2264 t(1 \u2212 \u03b5/2) + \u03b5\u03c3/4 = t, so s \u2208 S(X; t) and hence OPT \u2265 s \u2265 a. By Lemma C.1 we can assume t/2 \u2264 OPT \u2264 t. Then by definition of A there exists a \u2032 \u2208 A such that a \u2032 \u2264 OPT \u2264 t and a \u2032 \u2265 OPT \u2212 \u03b5\u03c3/4 \u2265 OPT \u2212 \u03b5OPT. Then, by definition of a. ) such that s \u2212 \u03b5\u03c3/4 \u2264 a \u2264 s. we have a \u2265 a \u2032 \u2265 (1 \u2212 \u03b5)OPTBy definition of A, there exists s \u2208 S(X) such that s \u2212 \u03b5\u03c3/4 \u2264 a \u2264 s. We have s \u2264 a + \u03b5\u03c3/4 \u2264 t(1 \u2212 \u03b5/2) + \u03b5\u03c3/4 = t, so s \u2208 S(X; t) and hence OPT \u2265 s \u2265 a. By Lemma C.1 we can assume t/2 \u2264 OPT \u2264 t. Then by definition of A there exists a \u2032 \u2208 A such that a \u2032 \u2264 OPT \u2264 t and a \u2032 \u2265 OPT \u2212 \u03b5\u03c3/4 \u2265 OPT \u2212 \u03b5OPT. Then, by definition of a, we have a \u2265 a \u2032 \u2265 (1 \u2212 \u03b5)OPT.\n\nHence, we have established (1 \u2212 \u03b5)OPT \u2264 a = min{a, t(1 \u2212 \u03b5/2)} \u2264 OPT. Hence, we have established (1 \u2212 \u03b5)OPT \u2264 a = min{a, t(1 \u2212 \u03b5/2)} \u2264 OPT.\n\nBy definition of A, there exists s \u2208 S(X) such that s \u2212 \u03b5\u03c3/4 \u2264 a \u2264 s. We have s \u2264 a + \u03b5\u03c3/4 \u2264 t + \u03b5\u03c3/4 = t(1 + \u03b5/2). and s \u2265 a > t(1 \u2212 \u03b5/2)By definition of A, there exists s \u2208 S(X) such that s \u2212 \u03b5\u03c3/4 \u2264 a \u2264 s. We have s \u2264 a + \u03b5\u03c3/4 \u2264 t + \u03b5\u03c3/4 = t(1 + \u03b5/2), and s \u2265 a > t(1 \u2212 \u03b5/2).\n\nUsing the crucial fact that t = \u03c3/2, we see that min{s, \u03c3 \u2212 s} \u2208 S(X; t) and hence OPT \u2265 min{s, \u03c3 \u2212 s}. Then. By taking complement, we know \u03c3 \u2212 s \u2208 S(X) as well. since s \u2208 (t(1 \u2212 \u03b5/2), t(1 + \u03b5/2)], we have min{s, \u03c3 \u2212 s} \u2265 t(1 \u2212 \u03b5/2)By taking complement, we know \u03c3 \u2212 s \u2208 S(X) as well. Using the crucial fact that t = \u03c3/2, we see that min{s, \u03c3 \u2212 s} \u2208 S(X; t) and hence OPT \u2265 min{s, \u03c3 \u2212 s}. Then, since s \u2208 (t(1 \u2212 \u03b5/2), t(1 + \u03b5/2)], we have min{s, \u03c3 \u2212 s} \u2265 t(1 \u2212 \u03b5/2).\n\nHence, we have established (1 \u2212 \u03b5)OPT \u2264 t(1 \u2212 \u03b5/2) = min{a, t(1 \u2212 \u03b5/2)} \u2264 OPT. Hence, we have established (1 \u2212 \u03b5)OPT \u2264 t(1 \u2212 \u03b5/2) = min{a, t(1 \u2212 \u03b5/2)} \u2264 OPT.\n\nWe are going to further simplify the input instance X. First we need the following lemma, which reduces the number of duplicate items in the input, by grouping them into powers of two. The proof of this lemma appeared in [MWW19], based on an earlier proof of a similar statement. Using Lemma C.2, we can solve (1 \u2212 \u03b5)-approximation Partition by finding an additive approximation of S(X). KX19, Lemma 2.4Using Lemma C.2, we can solve (1 \u2212 \u03b5)-approximation Partition by finding an additive approx- imation of S(X). We are going to further simplify the input instance X. First we need the following lemma, which reduces the number of duplicate items in the input, by grouping them into powers of two. The proof of this lemma appeared in [MWW19], based on an earlier proof of a similar statement [KX19, Lemma 2.4].\n\nGiven a multiset S of n integers from. C Lemma, MWW19, Lemma 4.1. one can compute a multiset T in O(n log n) time such that: \u2022 S(S; t) = S(T ; t)Lemma C.3 ([MWW19, Lemma 4.1]). Given a multiset S of n integers from [t], one can compute a multiset T in O(n log n) time such that: \u2022 S(S; t) = S(T ; t).\n\n. \u2022 |t | \u2264 |s|, \u2022 |T | \u2264 |S|.\n\n\u2022 No element in T has multiplicity exceeding two. \u2022 No element in T has multiplicity exceeding two.\n\nthere is a corresponding x \u2208 S such that y = 2 k \u00b7 x for some k \u2208 N. Now we prove the main lemma. \u2022 For Every Y \u2208 T, \u2022 For every y \u2208 T , there is a corresponding x \u2208 S such that y = 2 k \u00b7 x for some k \u2208 N. Now we prove the main lemma.\n\nIf for some c \u2265 1, Problem 2 can be solved in\u00d5(n + 1/\u03b5 c ) time, then (1 \u2212 \u03b5)-t = \u03c3/2 = \u03a3(X)/2. We define a multiset Y \u2282 N + as follows: for every x \u2208 X, round x down to the nearest integer multiple of \u2308 \u03c3 100n/\u03b5 \u2309. Lemma 4.1.. denoted as y, and insert y into Y if y is nonzeroLemma 4.1. If for some c \u2265 1, Problem 2 can be solved in\u00d5(n + 1/\u03b5 c ) time, then (1 \u2212 \u03b5)- t = \u03c3/2 = \u03a3(X)/2. We define a multiset Y \u2282 N + as follows: for every x \u2208 X, round x down to the nearest integer multiple of \u2308 \u03c3 100n/\u03b5 \u2309, denoted as y, and insert y into Y if y is nonzero.\n", "annotations": {"author": "[{\"end\":133,\"start\":90},{\"end\":171,\"start\":134},{\"end\":195,\"start\":172}]", "publisher": null, "author_last_name": "[{\"end\":103,\"start\":99},{\"end\":140,\"start\":137},{\"end\":180,\"start\":177}]", "author_first_name": "[{\"end\":98,\"start\":90},{\"end\":136,\"start\":134},{\"end\":176,\"start\":172}]", "author_affiliation": "[{\"end\":132,\"start\":120},{\"end\":170,\"start\":158},{\"end\":194,\"start\":182}]", "title": "[{\"end\":59,\"start\":1},{\"end\":254,\"start\":196}]", "venue": null, "abstract": "[{\"end\":1234,\"start\":284}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2276,\"start\":2269},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2977,\"start\":2972},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2982,\"start\":2977},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3158,\"start\":3151},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3163,\"start\":3158},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3284,\"start\":3277},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3368,\"start\":3361},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3400,\"start\":3392},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3412,\"start\":3405},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3584,\"start\":3578},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3647,\"start\":3639},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3697,\"start\":3691},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3853,\"start\":3846},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3937,\"start\":3931},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4038,\"start\":4030},{\"end\":4593,\"start\":4591},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4888,\"start\":4882},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4947,\"start\":4941},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":4984,\"start\":4977},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5740,\"start\":5733},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":5756,\"start\":5749},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5983,\"start\":5977},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6445,\"start\":6438},{\"end\":7613,\"start\":7606},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":8165,\"start\":8158},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8488,\"start\":8481},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":8494,\"start\":8488},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8499,\"start\":8494},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":9421,\"start\":9415},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":9512,\"start\":9506},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9703,\"start\":9697},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9778,\"start\":9771},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":11203,\"start\":11196},{\"end\":12908,\"start\":12905},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":13007,\"start\":13000},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":13992,\"start\":13985},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":13997,\"start\":13992},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":15641,\"start\":15634},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":15657,\"start\":15650},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16514,\"start\":16508},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16877,\"start\":16871},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16955,\"start\":16949},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":17352,\"start\":17346},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":17704,\"start\":17697},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":17710,\"start\":17704},{\"end\":18824,\"start\":18816},{\"end\":19176,\"start\":19175},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":24410,\"start\":24403},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":25025,\"start\":25018},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":25203,\"start\":25196},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":25525,\"start\":25518},{\"end\":30640,\"start\":30639},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":31385,\"start\":31378},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":41594,\"start\":41588},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":41599,\"start\":41594},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":43901,\"start\":43895},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":45281,\"start\":45274},{\"end\":45288,\"start\":45281},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":45567,\"start\":45560},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":45697,\"start\":45690},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":49460,\"start\":49453},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":49472,\"start\":49465},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":49645,\"start\":49638},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":49884,\"start\":49877}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":49382,\"start\":49266},{\"attributes\":{\"id\":\"fig_1\"},\"end\":49596,\"start\":49383},{\"attributes\":{\"id\":\"fig_2\"},\"end\":49836,\"start\":49597},{\"attributes\":{\"id\":\"fig_3\"},\"end\":50127,\"start\":49837},{\"attributes\":{\"id\":\"fig_4\"},\"end\":50362,\"start\":50128},{\"attributes\":{\"id\":\"fig_5\"},\"end\":50663,\"start\":50363},{\"attributes\":{\"id\":\"fig_6\"},\"end\":51726,\"start\":50664},{\"attributes\":{\"id\":\"fig_7\"},\"end\":51857,\"start\":51727},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":52404,\"start\":51858}]", "paragraph": "[{\"end\":2159,\"start\":1263},{\"end\":2736,\"start\":2161},{\"end\":3231,\"start\":2738},{\"end\":3514,\"start\":3233},{\"end\":3773,\"start\":3516},{\"end\":4166,\"start\":3775},{\"end\":4357,\"start\":4168},{\"end\":4491,\"start\":4373},{\"end\":4625,\"start\":4493},{\"end\":4742,\"start\":4627},{\"end\":5558,\"start\":4765},{\"end\":7361,\"start\":5571},{\"end\":8107,\"start\":7363},{\"end\":8293,\"start\":8109},{\"end\":9322,\"start\":8307},{\"end\":9573,\"start\":9324},{\"end\":10126,\"start\":9575},{\"end\":10398,\"start\":10149},{\"end\":10516,\"start\":10416},{\"end\":10703,\"start\":10539},{\"end\":10868,\"start\":10743},{\"end\":10908,\"start\":10903},{\"end\":11084,\"start\":10910},{\"end\":11476,\"start\":11086},{\"end\":11724,\"start\":11504},{\"end\":11827,\"start\":11726},{\"end\":11979,\"start\":11829},{\"end\":12295,\"start\":11981},{\"end\":12416,\"start\":12376},{\"end\":13086,\"start\":12458},{\"end\":13244,\"start\":13143},{\"end\":13556,\"start\":13362},{\"end\":13649,\"start\":13558},{\"end\":14107,\"start\":13829},{\"end\":14516,\"start\":14446},{\"end\":14757,\"start\":14518},{\"end\":14854,\"start\":14759},{\"end\":15378,\"start\":15329},{\"end\":15423,\"start\":15380},{\"end\":16269,\"start\":15619},{\"end\":16515,\"start\":16296},{\"end\":16631,\"start\":16517},{\"end\":16756,\"start\":16633},{\"end\":16923,\"start\":16758},{\"end\":17290,\"start\":16925},{\"end\":17628,\"start\":17292},{\"end\":17823,\"start\":17670},{\"end\":18234,\"start\":17825},{\"end\":18534,\"start\":18337},{\"end\":18923,\"start\":18682},{\"end\":19282,\"start\":18925},{\"end\":19621,\"start\":19328},{\"end\":19745,\"start\":19623},{\"end\":20295,\"start\":19747},{\"end\":20555,\"start\":20499},{\"end\":20867,\"start\":20620},{\"end\":21047,\"start\":20869},{\"end\":21117,\"start\":21049},{\"end\":21167,\"start\":21164},{\"end\":21357,\"start\":21191},{\"end\":21552,\"start\":21359},{\"end\":21900,\"start\":21554},{\"end\":22212,\"start\":22092},{\"end\":22265,\"start\":22244},{\"end\":22575,\"start\":22382},{\"end\":22590,\"start\":22577},{\"end\":23245,\"start\":22833},{\"end\":23871,\"start\":23402},{\"end\":24164,\"start\":23873},{\"end\":24217,\"start\":24166},{\"end\":24391,\"start\":24268},{\"end\":25010,\"start\":24393},{\"end\":25511,\"start\":25012},{\"end\":25686,\"start\":25513},{\"end\":26098,\"start\":25688},{\"end\":26555,\"start\":26100},{\"end\":26683,\"start\":26579},{\"end\":26896,\"start\":26685},{\"end\":27111,\"start\":26898},{\"end\":27331,\"start\":27113},{\"end\":27512,\"start\":27333},{\"end\":27673,\"start\":27514},{\"end\":28035,\"start\":27675},{\"end\":28125,\"start\":28037},{\"end\":28425,\"start\":28127},{\"end\":28587,\"start\":28427},{\"end\":28929,\"start\":28589},{\"end\":29039,\"start\":28931},{\"end\":29186,\"start\":29041},{\"end\":29527,\"start\":29188},{\"end\":29896,\"start\":29529},{\"end\":30282,\"start\":29985},{\"end\":31640,\"start\":30284},{\"end\":31862,\"start\":31642},{\"end\":32228,\"start\":31864},{\"end\":32371,\"start\":32333},{\"end\":32507,\"start\":32373},{\"end\":32669,\"start\":32509},{\"end\":32850,\"start\":32671},{\"end\":32931,\"start\":32878},{\"end\":33101,\"start\":32933},{\"end\":33196,\"start\":33103},{\"end\":33350,\"start\":33198},{\"end\":33726,\"start\":33352},{\"end\":33769,\"start\":33728},{\"end\":34212,\"start\":34125},{\"end\":34667,\"start\":34214},{\"end\":35205,\"start\":34669},{\"end\":35457,\"start\":35266},{\"end\":35549,\"start\":35492},{\"end\":35637,\"start\":35565},{\"end\":35719,\"start\":35654},{\"end\":36137,\"start\":35797},{\"end\":36253,\"start\":36139},{\"end\":36298,\"start\":36255},{\"end\":37192,\"start\":36681},{\"end\":37303,\"start\":37260},{\"end\":37488,\"start\":37305},{\"end\":37659,\"start\":37554},{\"end\":37953,\"start\":37754},{\"end\":38118,\"start\":38049},{\"end\":38252,\"start\":38169},{\"end\":38410,\"start\":38254},{\"end\":38931,\"start\":38683},{\"end\":38974,\"start\":38933},{\"end\":39112,\"start\":38976},{\"end\":39455,\"start\":39114},{\"end\":39728,\"start\":39457},{\"end\":39939,\"start\":39730},{\"end\":40848,\"start\":39941},{\"end\":41041,\"start\":40910},{\"end\":41063,\"start\":41043},{\"end\":41088,\"start\":41065},{\"end\":41232,\"start\":41216},{\"end\":41254,\"start\":41234},{\"end\":41301,\"start\":41256},{\"end\":41492,\"start\":41351},{\"end\":41600,\"start\":41494},{\"end\":41721,\"start\":41602},{\"end\":41924,\"start\":41723},{\"end\":42012,\"start\":41926},{\"end\":42085,\"start\":42014},{\"end\":42158,\"start\":42087},{\"end\":42610,\"start\":42160},{\"end\":43458,\"start\":42612},{\"end\":43575,\"start\":43460},{\"end\":43631,\"start\":43577},{\"end\":43708,\"start\":43633},{\"end\":43963,\"start\":43733},{\"end\":44389,\"start\":44050},{\"end\":44473,\"start\":44433},{\"end\":44606,\"start\":44508},{\"end\":44682,\"start\":44654},{\"end\":44971,\"start\":44918},{\"end\":45141,\"start\":44973},{\"end\":45419,\"start\":45143},{\"end\":45672,\"start\":45421},{\"end\":45900,\"start\":45674},{\"end\":45970,\"start\":45902},{\"end\":46023,\"start\":45972},{\"end\":46183,\"start\":46025},{\"end\":46499,\"start\":46185},{\"end\":47032,\"start\":46501},{\"end\":47560,\"start\":47034},{\"end\":49204,\"start\":47562},{\"end\":49265,\"start\":49206}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10742,\"start\":10704},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10902,\"start\":10869},{\"attributes\":{\"id\":\"formula_2\"},\"end\":12375,\"start\":12296},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13142,\"start\":13087},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13361,\"start\":13245},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13828,\"start\":13650},{\"attributes\":{\"id\":\"formula_6\"},\"end\":14445,\"start\":14176},{\"attributes\":{\"id\":\"formula_7\"},\"end\":15328,\"start\":14855},{\"attributes\":{\"id\":\"formula_8\"},\"end\":15618,\"start\":15424},{\"attributes\":{\"id\":\"formula_9\"},\"end\":18291,\"start\":18235},{\"attributes\":{\"id\":\"formula_10\"},\"end\":18336,\"start\":18291},{\"attributes\":{\"id\":\"formula_11\"},\"end\":18633,\"start\":18535},{\"attributes\":{\"id\":\"formula_12\"},\"end\":19327,\"start\":19283},{\"attributes\":{\"id\":\"formula_13\"},\"end\":20498,\"start\":20296},{\"attributes\":{\"id\":\"formula_14\"},\"end\":20619,\"start\":20556},{\"attributes\":{\"id\":\"formula_15\"},\"end\":21129,\"start\":21118},{\"attributes\":{\"id\":\"formula_16\"},\"end\":21163,\"start\":21129},{\"attributes\":{\"id\":\"formula_17\"},\"end\":21190,\"start\":21168},{\"attributes\":{\"id\":\"formula_18\"},\"end\":22091,\"start\":21901},{\"attributes\":{\"id\":\"formula_19\"},\"end\":22243,\"start\":22213},{\"attributes\":{\"id\":\"formula_20\"},\"end\":22381,\"start\":22266},{\"attributes\":{\"id\":\"formula_21\"},\"end\":22832,\"start\":22591},{\"attributes\":{\"id\":\"formula_22\"},\"end\":23401,\"start\":23246},{\"attributes\":{\"id\":\"formula_23\"},\"end\":29984,\"start\":29897},{\"attributes\":{\"id\":\"formula_24\"},\"end\":32332,\"start\":32229},{\"attributes\":{\"id\":\"formula_25\"},\"end\":34124,\"start\":33770},{\"attributes\":{\"id\":\"formula_26\"},\"end\":35265,\"start\":35206},{\"attributes\":{\"id\":\"formula_27\"},\"end\":35491,\"start\":35458},{\"attributes\":{\"id\":\"formula_28\"},\"end\":35564,\"start\":35550},{\"attributes\":{\"id\":\"formula_29\"},\"end\":35653,\"start\":35638},{\"attributes\":{\"id\":\"formula_30\"},\"end\":35796,\"start\":35720},{\"attributes\":{\"id\":\"formula_31\"},\"end\":36680,\"start\":36299},{\"attributes\":{\"id\":\"formula_32\"},\"end\":37259,\"start\":37193},{\"attributes\":{\"id\":\"formula_33\"},\"end\":37553,\"start\":37489},{\"attributes\":{\"id\":\"formula_34\"},\"end\":37753,\"start\":37660},{\"attributes\":{\"id\":\"formula_35\"},\"end\":38048,\"start\":37954},{\"attributes\":{\"id\":\"formula_36\"},\"end\":38168,\"start\":38119},{\"attributes\":{\"id\":\"formula_37\"},\"end\":38682,\"start\":38411},{\"attributes\":{\"id\":\"formula_38\"},\"end\":40909,\"start\":40849},{\"attributes\":{\"id\":\"formula_39\"},\"end\":41215,\"start\":41089},{\"attributes\":{\"id\":\"formula_40\"},\"end\":41350,\"start\":41302},{\"attributes\":{\"id\":\"formula_41\"},\"end\":44049,\"start\":43964},{\"attributes\":{\"id\":\"formula_42\"},\"end\":44432,\"start\":44390},{\"attributes\":{\"id\":\"formula_43\"},\"end\":44507,\"start\":44474},{\"attributes\":{\"id\":\"formula_44\"},\"end\":44653,\"start\":44607},{\"attributes\":{\"id\":\"formula_45\"},\"end\":44869,\"start\":44683}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1248,\"start\":1236},{\"attributes\":{\"n\":\"1.1\"},\"end\":1261,\"start\":1251},{\"attributes\":{\"n\":\"1.2\"},\"end\":4371,\"start\":4360},{\"attributes\":{\"n\":\"1.3\"},\"end\":4763,\"start\":4745},{\"attributes\":{\"n\":\"1.3.1\"},\"end\":5569,\"start\":5561},{\"attributes\":{\"n\":\"1.3.2\"},\"end\":8305,\"start\":8296},{\"attributes\":{\"n\":\"1.4\"},\"end\":10147,\"start\":10129},{\"attributes\":{\"n\":\"2\"},\"end\":10414,\"start\":10401},{\"attributes\":{\"n\":\"2.1\"},\"end\":10537,\"start\":10519},{\"attributes\":{\"n\":\"2.2\"},\"end\":11502,\"start\":11479},{\"attributes\":{\"n\":\"2.3\"},\"end\":12456,\"start\":12419},{\"end\":14175,\"start\":14110},{\"attributes\":{\"n\":\"2.5\"},\"end\":16294,\"start\":16272},{\"attributes\":{\"n\":\"3\"},\"end\":17653,\"start\":17631},{\"attributes\":{\"n\":\"3.1\"},\"end\":17668,\"start\":17656},{\"attributes\":{\"n\":\"3.2\"},\"end\":18680,\"start\":18635},{\"attributes\":{\"n\":\"3.3\"},\"end\":24266,\"start\":24220},{\"attributes\":{\"n\":\"3.4\"},\"end\":26577,\"start\":26558},{\"attributes\":{\"n\":\"4\"},\"end\":32876,\"start\":32853},{\"end\":43731,\"start\":43711},{\"end\":44916,\"start\":44871},{\"end\":49277,\"start\":49267},{\"end\":49611,\"start\":49598},{\"end\":49850,\"start\":49838},{\"end\":50376,\"start\":50364},{\"end\":50678,\"start\":50665}]", "table": "[{\"end\":52404,\"start\":52113}]", "figure_caption": "[{\"end\":49382,\"start\":49279},{\"end\":49596,\"start\":49385},{\"end\":49836,\"start\":49614},{\"end\":50127,\"start\":49852},{\"end\":50362,\"start\":50130},{\"end\":50663,\"start\":50378},{\"end\":51726,\"start\":50680},{\"end\":51857,\"start\":51729},{\"end\":52113,\"start\":51860}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":21355,\"start\":21349}]", "bib_author_first_name": "[{\"end\":54084,\"start\":54080},{\"end\":54097,\"start\":54093},{\"end\":54114,\"start\":54109},{\"end\":54129,\"start\":54125},{\"end\":54609,\"start\":54605},{\"end\":54625,\"start\":54620},{\"end\":54627,\"start\":54626},{\"end\":54641,\"start\":54635},{\"end\":54654,\"start\":54649},{\"end\":54667,\"start\":54661},{\"end\":55006,\"start\":55002},{\"end\":55027,\"start\":55018},{\"end\":55583,\"start\":55578},{\"end\":55600,\"start\":55593},{\"end\":55602,\"start\":55601},{\"end\":55613,\"start\":55609},{\"end\":55615,\"start\":55614},{\"end\":55629,\"start\":55625},{\"end\":55646,\"start\":55640},{\"end\":55660,\"start\":55656},{\"end\":55675,\"start\":55669},{\"end\":56104,\"start\":56103},{\"end\":56317,\"start\":56313},{\"end\":56338,\"start\":56329},{\"end\":56911,\"start\":56907},{\"end\":56929,\"start\":56923},{\"end\":57489,\"start\":57482},{\"end\":57491,\"start\":57490},{\"end\":57905,\"start\":57900},{\"end\":57919,\"start\":57913},{\"end\":57932,\"start\":57927},{\"end\":57950,\"start\":57944},{\"end\":58296,\"start\":58289},{\"end\":58298,\"start\":58297},{\"end\":58309,\"start\":58305},{\"end\":58853,\"start\":58847},{\"end\":58866,\"start\":58860},{\"end\":59434,\"start\":59431},{\"end\":59446,\"start\":59442},{\"end\":59743,\"start\":59742},{\"end\":59755,\"start\":59751},{\"end\":59757,\"start\":59756},{\"end\":60054,\"start\":60052},{\"end\":60610,\"start\":60605},{\"end\":60625,\"start\":60619},{\"end\":60629,\"start\":60626},{\"end\":60918,\"start\":60917},{\"end\":61196,\"start\":61192},{\"end\":61213,\"start\":61207},{\"end\":61229,\"start\":61223},{\"end\":61245,\"start\":61240},{\"end\":61252,\"start\":61246},{\"end\":61634,\"start\":61630},{\"end\":61651,\"start\":61645},{\"end\":62017,\"start\":62013},{\"end\":62034,\"start\":62028},{\"end\":62420,\"start\":62414},{\"end\":62441,\"start\":62432},{\"end\":62456,\"start\":62450},{\"end\":63038,\"start\":63026},{\"end\":63054,\"start\":63050},{\"end\":63335,\"start\":63329},{\"end\":63337,\"start\":63336},{\"end\":63609,\"start\":63608},{\"end\":63833,\"start\":63827},{\"end\":63846,\"start\":63841},{\"end\":63864,\"start\":63858},{\"end\":64416,\"start\":64410},{\"end\":64683,\"start\":64682},{\"end\":64881,\"start\":64877},{\"end\":66798,\"start\":66797},{\"end\":68505,\"start\":68504},{\"end\":68509,\"start\":68508},{\"end\":71837,\"start\":71836},{\"end\":72102,\"start\":72101},{\"end\":72330,\"start\":72329}]", "bib_author_last_name": "[{\"end\":54091,\"start\":54085},{\"end\":54107,\"start\":54098},{\"end\":54123,\"start\":54115},{\"end\":54137,\"start\":54130},{\"end\":54618,\"start\":54610},{\"end\":54633,\"start\":54628},{\"end\":54647,\"start\":54642},{\"end\":54659,\"start\":54655},{\"end\":54674,\"start\":54668},{\"end\":55016,\"start\":55007},{\"end\":55034,\"start\":55028},{\"end\":55591,\"start\":55584},{\"end\":55607,\"start\":55603},{\"end\":55623,\"start\":55616},{\"end\":55638,\"start\":55630},{\"end\":55654,\"start\":55647},{\"end\":55667,\"start\":55661},{\"end\":55685,\"start\":55676},{\"end\":56112,\"start\":56105},{\"end\":56120,\"start\":56114},{\"end\":56327,\"start\":56318},{\"end\":56344,\"start\":56339},{\"end\":56921,\"start\":56912},{\"end\":56938,\"start\":56930},{\"end\":57496,\"start\":57492},{\"end\":57911,\"start\":57906},{\"end\":57925,\"start\":57920},{\"end\":57942,\"start\":57933},{\"end\":57961,\"start\":57951},{\"end\":58303,\"start\":58299},{\"end\":58318,\"start\":58310},{\"end\":58858,\"start\":58854},{\"end\":58873,\"start\":58867},{\"end\":59440,\"start\":59435},{\"end\":59455,\"start\":59447},{\"end\":59749,\"start\":59744},{\"end\":59764,\"start\":59758},{\"end\":59769,\"start\":59766},{\"end\":60058,\"start\":60055},{\"end\":60617,\"start\":60611},{\"end\":60635,\"start\":60630},{\"end\":60926,\"start\":60919},{\"end\":60932,\"start\":60928},{\"end\":61205,\"start\":61197},{\"end\":61221,\"start\":61214},{\"end\":61238,\"start\":61230},{\"end\":61261,\"start\":61253},{\"end\":61643,\"start\":61635},{\"end\":61660,\"start\":61652},{\"end\":62026,\"start\":62018},{\"end\":62043,\"start\":62035},{\"end\":62430,\"start\":62421},{\"end\":62448,\"start\":62442},{\"end\":62466,\"start\":62457},{\"end\":63048,\"start\":63039},{\"end\":63057,\"start\":63055},{\"end\":63344,\"start\":63338},{\"end\":63618,\"start\":63610},{\"end\":63623,\"start\":63620},{\"end\":63839,\"start\":63834},{\"end\":63856,\"start\":63847},{\"end\":63875,\"start\":63865},{\"end\":64421,\"start\":64417},{\"end\":64691,\"start\":64684},{\"end\":64890,\"start\":64882},{\"end\":66804,\"start\":66799},{\"end\":71843,\"start\":71838},{\"end\":72113,\"start\":72103},{\"end\":72346,\"start\":72331}]", "bib_entry": "[{\"attributes\":{\"doi\":\"10.1137/1.9781611975482.3\",\"id\":\"b0\",\"matched_paper_id\":15802062},\"end\":54547,\"start\":54021},{\"attributes\":{\"doi\":\"10.1007/BF01840359\",\"id\":\"b1\",\"matched_paper_id\":7932878},\"end\":54930,\"start\":54549},{\"attributes\":{\"doi\":\"10.4230/LIPIcs.ICALP.2022.31\",\"id\":\"b2\",\"matched_paper_id\":248834416},\"end\":55576,\"start\":54932},{\"attributes\":{\"doi\":\"10.1007/s00453-012-9734-3\",\"id\":\"b3\"},\"end\":56062,\"start\":55578},{\"attributes\":{\"id\":\"b4\"},\"end\":56241,\"start\":56064},{\"attributes\":{\"doi\":\"10.1137/1.9781611976465.108\",\"id\":\"b5\",\"matched_paper_id\":225093741},\"end\":56852,\"start\":56243},{\"attributes\":{\"doi\":\"10.1137/1.9781611976465.107\",\"id\":\"b6\",\"matched_paper_id\":224706436},\"end\":57440,\"start\":56854},{\"attributes\":{\"doi\":\"10.4230/OASIcs.SOSA.2018.5\",\"id\":\"b7\",\"matched_paper_id\":10271344},\"end\":57851,\"start\":57442},{\"attributes\":{\"doi\":\"10.1145/3293465\",\"id\":\"b8\",\"matched_paper_id\":9374418},\"end\":58195,\"start\":57853},{\"attributes\":{\"doi\":\"10.1137/1.9781611974331.ch87\",\"id\":\"b9\",\"matched_paper_id\":11198145},\"end\":58764,\"start\":58197},{\"attributes\":{\"doi\":\"10.1007/3-540-09526-8_26\",\"id\":\"b10\",\"matched_paper_id\":33715239},\"end\":59364,\"start\":58766},{\"attributes\":{\"doi\":\"10.1137/0220072\",\"id\":\"b11\",\"matched_paper_id\":33537238},\"end\":59665,\"start\":59366},{\"attributes\":{\"doi\":\"10.1145/321906.321909\",\"id\":\"b12\",\"matched_paper_id\":14619586},\"end\":60014,\"start\":59667},{\"attributes\":{\"doi\":\"10.4230/LIPIcs.ICALP.2019.76\",\"id\":\"b13\",\"matched_paper_id\":128317990},\"end\":60552,\"start\":60016},{\"attributes\":{\"doi\":\"10.1016/j.ejc.2017.07.016\",\"id\":\"b14\",\"matched_paper_id\":9557898},\"end\":60872,\"start\":60554},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":33509266},\"end\":61111,\"start\":60874},{\"attributes\":{\"doi\":\"10.1016/S0022-0000(03)00006-0\",\"id\":\"b16\",\"matched_paper_id\":31929343},\"end\":61553,\"start\":61113},{\"attributes\":{\"doi\":\"10.1023/A:1009813105532\",\"id\":\"b17\",\"matched_paper_id\":41401698},\"end\":61928,\"start\":61555},{\"attributes\":{\"doi\":\"10.1023/B:JOCO.0000021934.29833.6b\",\"id\":\"b18\",\"matched_paper_id\":36474745},\"end\":62341,\"start\":61930},{\"attributes\":{\"doi\":\"10.4230/LIPIcs.ICALP.2017.21\",\"id\":\"b19\",\"matched_paper_id\":7587494},\"end\":62968,\"start\":62343},{\"attributes\":{\"doi\":\"10.1145/3329863\",\"id\":\"b20\",\"matched_paper_id\":196834978},\"end\":63274,\"start\":62970},{\"attributes\":{\"doi\":\"10.1287/moor.4.4.339\",\"id\":\"b21\",\"matched_paper_id\":7655435},\"end\":63562,\"start\":63276},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":119611724},\"end\":63774,\"start\":63564},{\"attributes\":{\"doi\":\"10.1137/1.9781611975482.5\",\"id\":\"b23\",\"matched_paper_id\":4677999},\"end\":64339,\"start\":63776},{\"attributes\":{\"id\":\"b24\"},\"end\":64652,\"start\":64341},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":123327935},\"end\":64819,\"start\":64654},{\"attributes\":{\"doi\":\"10.1145/2591796.2591811\",\"id\":\"b26\",\"matched_paper_id\":17179623},\"end\":65258,\"start\":64821},{\"attributes\":{\"id\":\"b27\"},\"end\":65654,\"start\":65260},{\"attributes\":{\"id\":\"b28\"},\"end\":66665,\"start\":65656},{\"attributes\":{\"id\":\"b29\"},\"end\":66973,\"start\":66667},{\"attributes\":{\"id\":\"b30\"},\"end\":67599,\"start\":66975},{\"attributes\":{\"id\":\"b31\"},\"end\":67783,\"start\":67601},{\"attributes\":{\"id\":\"b32\"},\"end\":68030,\"start\":67785},{\"attributes\":{\"id\":\"b33\"},\"end\":68296,\"start\":68032},{\"attributes\":{\"id\":\"b34\"},\"end\":69027,\"start\":68298},{\"attributes\":{\"id\":\"b35\"},\"end\":69266,\"start\":69029},{\"attributes\":{\"id\":\"b36\"},\"end\":69937,\"start\":69268},{\"attributes\":{\"id\":\"b37\"},\"end\":70078,\"start\":69939},{\"attributes\":{\"id\":\"b38\"},\"end\":70357,\"start\":70080},{\"attributes\":{\"id\":\"b39\"},\"end\":70824,\"start\":70359},{\"attributes\":{\"id\":\"b40\"},\"end\":70983,\"start\":70826},{\"attributes\":{\"id\":\"b41\"},\"end\":71795,\"start\":70985},{\"attributes\":{\"id\":\"b42\"},\"end\":72097,\"start\":71797},{\"attributes\":{\"id\":\"b43\"},\"end\":72128,\"start\":72099},{\"attributes\":{\"id\":\"b44\"},\"end\":72229,\"start\":72130},{\"attributes\":{\"id\":\"b45\"},\"end\":72465,\"start\":72231},{\"attributes\":{\"id\":\"b46\"},\"end\":73022,\"start\":72467}]", "bib_title": "[{\"end\":54078,\"start\":54021},{\"end\":54603,\"start\":54549},{\"end\":55000,\"start\":54932},{\"end\":56311,\"start\":56243},{\"end\":56905,\"start\":56854},{\"end\":57480,\"start\":57442},{\"end\":57898,\"start\":57853},{\"end\":58287,\"start\":58197},{\"end\":58845,\"start\":58766},{\"end\":59429,\"start\":59366},{\"end\":59740,\"start\":59667},{\"end\":60050,\"start\":60016},{\"end\":60603,\"start\":60554},{\"end\":60915,\"start\":60874},{\"end\":61190,\"start\":61113},{\"end\":61628,\"start\":61555},{\"end\":62011,\"start\":61930},{\"end\":62412,\"start\":62343},{\"end\":63024,\"start\":62970},{\"end\":63327,\"start\":63276},{\"end\":63606,\"start\":63564},{\"end\":63825,\"start\":63776},{\"end\":64680,\"start\":64654},{\"end\":64875,\"start\":64821},{\"end\":67842,\"start\":67785}]", "bib_author": "[{\"end\":54093,\"start\":54080},{\"end\":54109,\"start\":54093},{\"end\":54125,\"start\":54109},{\"end\":54139,\"start\":54125},{\"end\":54620,\"start\":54605},{\"end\":54635,\"start\":54620},{\"end\":54649,\"start\":54635},{\"end\":54661,\"start\":54649},{\"end\":54676,\"start\":54661},{\"end\":55018,\"start\":55002},{\"end\":55036,\"start\":55018},{\"end\":55593,\"start\":55578},{\"end\":55609,\"start\":55593},{\"end\":55625,\"start\":55609},{\"end\":55640,\"start\":55625},{\"end\":55656,\"start\":55640},{\"end\":55669,\"start\":55656},{\"end\":55687,\"start\":55669},{\"end\":56114,\"start\":56103},{\"end\":56122,\"start\":56114},{\"end\":56329,\"start\":56313},{\"end\":56346,\"start\":56329},{\"end\":56923,\"start\":56907},{\"end\":56940,\"start\":56923},{\"end\":57498,\"start\":57482},{\"end\":57913,\"start\":57900},{\"end\":57927,\"start\":57913},{\"end\":57944,\"start\":57927},{\"end\":57963,\"start\":57944},{\"end\":58305,\"start\":58289},{\"end\":58320,\"start\":58305},{\"end\":58860,\"start\":58847},{\"end\":58875,\"start\":58860},{\"end\":59442,\"start\":59431},{\"end\":59457,\"start\":59442},{\"end\":59751,\"start\":59742},{\"end\":59766,\"start\":59751},{\"end\":59771,\"start\":59766},{\"end\":60060,\"start\":60052},{\"end\":60619,\"start\":60605},{\"end\":60637,\"start\":60619},{\"end\":60928,\"start\":60917},{\"end\":60934,\"start\":60928},{\"end\":61207,\"start\":61192},{\"end\":61223,\"start\":61207},{\"end\":61240,\"start\":61223},{\"end\":61263,\"start\":61240},{\"end\":61645,\"start\":61630},{\"end\":61662,\"start\":61645},{\"end\":62028,\"start\":62013},{\"end\":62045,\"start\":62028},{\"end\":62432,\"start\":62414},{\"end\":62450,\"start\":62432},{\"end\":62468,\"start\":62450},{\"end\":63050,\"start\":63026},{\"end\":63059,\"start\":63050},{\"end\":63346,\"start\":63329},{\"end\":63620,\"start\":63608},{\"end\":63625,\"start\":63620},{\"end\":63841,\"start\":63827},{\"end\":63858,\"start\":63841},{\"end\":63877,\"start\":63858},{\"end\":64423,\"start\":64410},{\"end\":64693,\"start\":64682},{\"end\":64892,\"start\":64877},{\"end\":66806,\"start\":66797},{\"end\":68508,\"start\":68504},{\"end\":68512,\"start\":68508},{\"end\":71845,\"start\":71836},{\"end\":72115,\"start\":72101},{\"end\":72348,\"start\":72329}]", "bib_venue": "[{\"end\":54236,\"start\":54164},{\"end\":54706,\"start\":54694},{\"end\":55145,\"start\":55064},{\"end\":55782,\"start\":55712},{\"end\":56101,\"start\":56064},{\"end\":56469,\"start\":56373},{\"end\":57063,\"start\":56967},{\"end\":57591,\"start\":57524},{\"end\":57999,\"start\":57978},{\"end\":58427,\"start\":58348},{\"end\":58976,\"start\":58899},{\"end\":59486,\"start\":59472},{\"end\":59817,\"start\":59792},{\"end\":60169,\"start\":60088},{\"end\":60695,\"start\":60662},{\"end\":60969,\"start\":60934},{\"end\":61312,\"start\":61292},{\"end\":61722,\"start\":61685},{\"end\":62116,\"start\":62079},{\"end\":62592,\"start\":62496},{\"end\":63095,\"start\":63074},{\"end\":63400,\"start\":63366},{\"end\":63650,\"start\":63625},{\"end\":63974,\"start\":63902},{\"end\":64408,\"start\":64341},{\"end\":64717,\"start\":64693},{\"end\":64989,\"start\":64915},{\"end\":65301,\"start\":65260},{\"end\":66029,\"start\":65656},{\"end\":66795,\"start\":66667},{\"end\":67123,\"start\":66975},{\"end\":67679,\"start\":67601},{\"end\":67863,\"start\":67844},{\"end\":68133,\"start\":68032},{\"end\":68502,\"start\":68298},{\"end\":69121,\"start\":69029},{\"end\":69522,\"start\":69268},{\"end\":70007,\"start\":69939},{\"end\":70194,\"start\":70080},{\"end\":70467,\"start\":70359},{\"end\":70903,\"start\":70826},{\"end\":71263,\"start\":70985},{\"end\":71834,\"start\":71797},{\"end\":72178,\"start\":72130},{\"end\":72327,\"start\":72231},{\"end\":72681,\"start\":72467},{\"end\":54295,\"start\":54238},{\"end\":55160,\"start\":55147},{\"end\":56552,\"start\":56471},{\"end\":57146,\"start\":57065},{\"end\":57645,\"start\":57593},{\"end\":58493,\"start\":58429},{\"end\":59001,\"start\":58978},{\"end\":60185,\"start\":60171},{\"end\":62675,\"start\":62594},{\"end\":64033,\"start\":63976},{\"end\":65050,\"start\":64991}]"}}}, "year": 2023, "month": 12, "day": 17}