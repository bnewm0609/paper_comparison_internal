{"id": 253157699, "updated": "2023-10-05 09:14:21.801", "metadata": {"title": "Constrained Approximate Similarity Search on Proximity Graph", "authors": "[{\"first\":\"Weijie\",\"last\":\"Zhao\",\"middle\":[]},{\"first\":\"Shulong\",\"last\":\"Tan\",\"middle\":[]},{\"first\":\"Ping\",\"last\":\"Li\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Search engines and recommendation systems are built to efficiently display relevant information from those massive amounts of candidates. Typically a three-stage mechanism is employed in those systems: (i) a small collection of items are first retrieved by (e.g.,) approximate near neighbor search algorithms; (ii) then a collection of constraints are applied on the retrieved items; (iii) a fine-grained ranking neural network is employed to determine the final recommendation. We observe a major defect of the original three-stage pipeline: Although we only target to retrieve $k$ vectors in the final recommendation, we have to preset a sufficiently large $s$ ($s>k$) for each query, and ``hope'' the number of survived vectors after the filtering is not smaller than $k$. That is, at least $k$ vectors in the $s$ similar candidates satisfy the query constraints. In this paper, we investigate this constrained similarity search problem and attempt to merge the similarity search stage and the filtering stage into one single search operation. We introduce AIRSHIP, a system that integrates a user-defined function filtering into the similarity search framework. The proposed system does not need to build extra indices nor require prior knowledge of the query constraints. We propose three optimization strategies: (1) starting point selection, (2) multi-direction search, and (3) biased priority queue selection. Experimental evaluations on both synthetic and real data confirm the effectiveness of the proposed AIRSHIP algorithm. We focus on constrained graph-based approximate near neighbor (ANN) search in this study, in part because graph-based ANN is known to achieve excellent performance. We believe it is also possible to develop constrained hashing-based ANN or constrained quantization-based ANN.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2210.14958", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2210-14958", "doi": "10.48550/arxiv.2210.14958"}}, "content": {"source": {"pdf_hash": "598ec7a43eb1e5c9e57f47c524a6c89ea6bb6cd9", "pdf_src": "Arxiv", "pdf_uri": "[\"https://export.arxiv.org/pdf/2210.14958v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "c786edfaf13f3783905ad059225d36bc0b1f26fc", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/598ec7a43eb1e5c9e57f47c524a6c89ea6bb6cd9.txt", "contents": "\nConstrained Approximate Similarity Search on Proximity Graph\n\n\nWeijie Zhao \nCognitive Computing Lab Baidu Research\n10900 NE 8th St. Bellevue98004WAUSA\n\nShulong Tan \nCognitive Computing Lab Baidu Research\n10900 NE 8th St. Bellevue98004WAUSA\n\nPing Li pingli98@gmail.com \nCognitive Computing Lab Baidu Research\n10900 NE 8th St. Bellevue98004WAUSA\n\nConstrained Approximate Similarity Search on Proximity Graph\n\nSearch engines and recommendation systems are built to efficiently display relevant information from those massive amounts of candidates. Typically a three-stage mechanism is employed in those systems: (i) a small collection of items are first retrieved by (e.g.,) approximate near neighbor search algorithms; (ii) then a collection of constraints are applied on the retrieved items; (iii) a fine-grained ranking neural network is employed to determine the final recommendation. We observe a major defect of the original three-stage pipeline: Although we only target to retrieve k vectors in the final recommendation, we have to preset a sufficiently large s (s > k) for each query, and \"hope\" the number of survived vectors after the filtering is not smaller than k. That is, at least k vectors in the s similar candidates satisfy the query constraints.In this paper, we investigate this constrained similarity search problem and attempt to merge the similarity search stage and the filtering stage into one single search operation. We introduce AIRSHIP, a system that integrates a user-defined function filtering into the similarity search framework. The proposed system does not need to build extra indices nor require prior knowledge of the query constraints. We propose three optimization strategies: (1) starting point selection, (2) multi-direction search, and (3) biased priority queue selection. Our first starting point selection optimization is to locate good starting points for the graph searching algorithm. We would like to start the graph search inside a cluster of satisfied vectors. In this scenario, a small number of satisfied vectors can be retrieved along the path to the query vector. Then, we propose a multi-direction search optimization that enables multi-direction searching. Compared with the single priority queue used in the original graph search, we have two priority queues to keep search candidates: on stores the satisfied vectors and the other maintains remaining unsatisfied vectors. When both priority queues are not empty, we choose each queue with a weight ratio, alter_ratio. On top of that, we propose a biased priority queue selection to adaptively select the queue for searching: when the top candidate from the satisfied vector queue is better than the one from the other queue, we override the alter_ratio restriction and select the satisfied vector queue. All three optimizations improve the similarity search performance. The proposed algorithm has a hyper-parameter alter_ratio that is data/query dependent. We present an estimation method to adaptively choose the hyper-parameter. Experimental evaluations on both synthetic and real data confirm the effectiveness of the proposed AIRSHIP algorithm.We focus on constrained graph-based approximate near neighbor (ANN) search in this study, in part because graph-based ANN is known to achieve excellent performance. We believe it is also possible to develop constrained hashing-based ANN or constrained quantization-based ANN.\n\nIntroduction\n\nThe task of searching for similar items is the standard routine in numerous industrial applications as well as research problems in computer science and other fields. Finding the exact near (or nearest) neighbors is often expensive and typically an approximate solution would be sufficient. The research on developing efficient algorithms for approximate near neighbor (ANN) search dated back at least to the 1970's (Friedman et al., 1975(Friedman et al., , 1977. In recent years, ANN algorithms have become the crucial component in modern recommender systems (Davidson et al., 2010;Dror et al., 2011;Fan et al., 2019;Kanakia et al., 2019), Among many application domains. In this paper, we study ANN algorithms for an important application scenario, that is, the retrieved items must satisfy certain pre-specified constraints. More specifically, we focus on graph-based ANN algorithms under constraints. We should emphasize that, although this research problem was motivated from the production needs at Baidu, we only report experiments using public datasets.\n\n\nAlgorithms for Approximate Near Neighbor (ANN) Search\n\nBroadly speaking, most approximate similarity search methods fall in the following 5 categories:\n\n\u2022 Hash-based methods. Traditionally, hashing-based methods (Broder et al., 1997;Indyk and Motwani, 1998;Charikar, 2002;Datar et al., 2004;Li and Church, 2005;Lv et al., 2007;Paulev\u00e9 et al., 2010;Li, 2012, 2014;Wang and Dasgupta, 2016;Li, 2019;Li et al., 2021) partition the base vectors into a constant number of buckets via a specific hashing function. The chosen hashing function guarantees a collision probability is positively correlated to the specific similarity of two vectors, i.e., similar vectors have a high probability to be assigned to the same hash bucket. Relatively recently, learning to hash methods (Kulis and Darrell, 2009;Grauman and Fergus, 2013;Lai et al., 2015;Wang et al., 2016a;Dong et al., 2020) become popular. Typically they learn the hashing on a sample of data so that the learned hash function can better fit the data distribution compared with the classic data-independent hashing algorithms.\n\n\u2022 Tree-based methods (Friedman et al., 1975(Friedman et al., , 1977Jagadish et al., 2005;Cayton, 2008;Ram and Gray, 2012;Curtin et al., 2013;Ram and Sinha, 2019) partition the high-dimensional data space into smaller regions via a decision tree/space partitioning tree. The partitioned spaces are organized within a tree: A leaf node in the tree corresponds to the finest granularity of the partitioned space, and edges between tree nodes represent the hierarchical relationship of partitioned spaces. Hamilton et al. (2020) recently propose a tree-based method that builds an inverted index for each label/attributes. It is infeasible to build an index for each label combination without prior knowledge of the query constraints. Our proposed solution performs the original index and does not need to build any additional indices. Moreover, we do not need to know the query constraints beforehand.\n\n\u2022 Quantization-based algorithms (J\u00e9gou et al., 2011;Ge et al., 2013;Wang et al., 2016b;Wu et al., 2017;Xu et al., 2018;Echihabi et al., 2021) learn a code-book from base vectors and quantize the original high-dimensional vectors into a low-dimensional quantized values. The quantized value is a low-dimensional representation of the original vectors. The distances between quantized vectors approximate the distances between original vectors.\n\n\u2022 Graph-based algorithms achieve a lot of attention recently due to its superior performance to other similarity search techniques on many real-world datasets and industrial applications (Hajebi et al., 2011;Wu et al., 2014;Malkov et al., 2014;Malkov and Yashunin, 2020;Fu et al., 2019;Tan et al., 2021a;Xu et al., 2022). Graph-based algorithms build a proximity graph as an index and perform a graph searching to answer the query. We investigate the constrained similarity search on the graph-based algorithm. Recently, Zhao et al. (2020) develop the first GPU-based graph-based ANN algorithm.\n\n\u2022 Neural ranking. To resolve issues related to proximity search in various neural models, in recent years, the subject of \"neural ranking\" has attracted increasingly more attentions (Zhu et al., 2018Zhuo et al., 2020;Gao et al., 2020;Tan et al., 2021b;Yu et al., 2022;Zhao et al., 2022). Effective algorithms for neural ranking can be very desirable in practice. For example, while the standard \"two-tower\" model is popular and fairly effective, practitioners might hope to replace the simple \"cosine\" loss function with a most sophisticated deep neural nets for better retrieval accuracy. However, once we have replaced the cosine by a neural net, we can no longer use the standard ANN techniques to achieve fast ranking.\n\nAmong the above methods, hashing-based methods are typically the simplest but the performance highly depends on the data and the chosen hashing functions. Graph-based ANN methods typically outperforms other methods, often considerably. In this study, we focus on graph-based ANN methods.\n\n\nApproximate Near Neighbor Search Under Constraints\n\nIn this paper, we consider a practical scenario commonly encountered in industrial applications, as illustrated in Figure 1. That is, the returned search results have to satisfy certain constraints. While engineers and researchers from industry would probably agree this is a ubiquitous task in general, how to effectively solve the problem depends on the pattern of the constraints.  Figure 1: The three-stage pipeline v.s our proposed constrained similarity search workflow.\n\nIn Figure 1 (upper), we describe the usual strategy. That is, we consider there are initially n vectors. For a particular query, the ANN search algorithm returns s vectors (from the n vectors). After applying the constraints on the s vectors, the number is reduced to c. Finally, we apply the re-ranking algorithm (which can be either simply based on the similarity or based on the prediction results from a neural net or other learning model) to obtain the final top-k results. Obviously, with this strategy, practitioners would like to make sure that c > k, but this is not always easy to achieve unless we increase s to be much larger than k. For example, when the target is to retrieve the top-1000 vectors, practitioners may have to first retrieve the top-5000 or even top-10000 vectors and then apply the constraints on the retrieved vectors. In this study, we hope to develop better schemes to improve the efficiency.\n\nDifferent from the pipeline in the upper part of Figure 1, there is another obvious strategy by simply applying the constraints on the original n vectors before conducting approximate near neighbor search. If engineers know (or guess) beforehand that directly filtering on the n vectors would result in only a small number of vectors, then this would be a good strategy, provided that the cost for applying the constraints on all n vectors is not too high (for example, when indices have been built for those constraints). In this paper, we do not consider this scenario.\n\nAs illustrated in the bottom part of Figure 1, in this study, our goal is to directly retrieve the top-k vectors which satisfy the constraints. We focus on the graph-based ANN algorithm in this paper and we believe that one can also develop, with efforts, retrieval algorithms of similar nature based on other ANN methods such as hashing-based or quantization-based ANN algorithms. We leave them for future research.\n\n\nConstrained Similarity Search\n\nMore formally, we merge the similarity search stage and the filtering stage into one single search operation. The merging has two principal advantages:\n\n1. The constrained similarity search targets to return top-k similar candidates that satisfy the constraints. We do not need to estimate s to ensure the search performance.\n\n2. The similarity search algorithm takes the constraints into the consideration-additional indices and optimizations can be potentially applied to the search.\n\nProblem Statement. We have a collection of n d-dimensional base vectors V = {v 1 , v 2 , \u00b7 \u00b7 \u00b7 , v n }. Each vector has m attributes: the attributes of the i th vector are {a i1 , a i2 , \u00b7 \u00b7 \u00b7 , a im }. In addition, we are given Q queries. The j th query consists of a query vector q j and a user-defined function f j as the constraint. For each query vector q j , we are required to return k similar candidates (r j1 , r j2 , \u00b7 \u00b7 \u00b7 , r jk ) from base vectors and each candidate r j\u00b7 satisfies the constraint, i.e., f j (r j\u00b7 ) \u2192 true.\n\nChallenges & approaches. We identify two main challenges for the constrained similarity search. The first challenge is that we are required to efficiently identify the \"interesting region\" that contains vectors that meet the given constraints. There is no sub-linear algorithm to tackle this challenge without any assumptions to the query constraints and vector distributions: Before knowing queries, it is impractical to build indices for all possible constraints in pre-processing. On the other hand, after queries arrive, building indices for all different constraints is more time-consuming than a linear scan. Therefore, we have one assumption in this paper: for each constraint, there are at least p% of base vectors are satisfied vectors. Secondly, the distributions of the vectors that satisfy the constraints are unknown. We need to retrieve similar vectors from them. However, similarity search techniques require us to construct an index beforehand. In this paper, we propose an adaptive searching algorithm on proximity graph that explores the clusterness of the vector distribution-vectors which meet the constraints are very likely to cluster in real-world datasets because the vector representations are trained based on those attributes. We leverage a heuristic algorithm to determine hyper-parameters in the proposed searching algorithm.\n\nWhy not inverted index? We have explained this earlier but we would like to re-iterate the problem since it is a common question. Basically, for applications in which it is efficient to build indices for the constraints and the fraction of data vectors after filtering is small, then we might want to go with this straightforward approach. In real applications, however, it is often inefficient to build indices for all the (potentially combinatorial number of) constraints. Creating this many indices is not only time-consuming but also space-intensive, because we would need to duplicate a vector each time it is captured by a query constraint. Note that the satisfied vectors for different query constraints may overlap. Hence, in this paper we seek more efficient solutions for scenarios in which the inverted index approach is not applicable.\n\nContributions. Our major contributions are summarized as follows:\n\n\u2022 We introduce AIRSHIP (an acronym for AttrIbute-constRained Similarity searcH on proxImity graPh) that integrates a user-defined function filtering into the similarity search framework. AIRSHIP requires no extra indices nor prior knowledge of the query constraints.\n\n\u2022 We propose three optimizations for the attribute-constrained searching problem: starting point selection, multi-direction search, and biased priority queue selection.\n\n\u2022 We present an estimation method to choose the hyper-parameter of the searching algorithm.\n\n\u2022 We experimentally evaluate the proposed algorithm on both synthetic and real datasets. The empirical results confirm the effectiveness of our optimizations.\n\n\nAIRSHIP: Attribute-Constrained Similarity Search\n\nIn this section, we introduce our solutions to the attribute-restricted similarity search problem. We begin with a baseline adaption of graph-based similarity search methods. Then, we discuss the drawbacks of the baseline solution and propose our optimizations step by step. Each optimization is built on top of the previous one.\n\n\nVanilla Graph-Based Similarity Search\n\nAlgorithm 1 illustrates the workflow of the vanilla graph-based similarity search. From Lines 1-3, a random starting point S is selected and base data structures are initialized. In each iteration, the vector that is closest to the query point is extracted from the priority queue (Line 5). The algorithm is terminated when we have obtained K candidates and the current searched vector is worse than the worst vector in topk (Lines 6-8). The only difference to the original graph-based similarity search algorithm locates in Lines 9-14: We only update the top-K candidates when the current searched vector satisfies the query constraint. After that, Lines 15-21 iterate over all unvisited neighbors of now_idx, add them to the priority queue, and mark them as visited.\n\nNote that this vanilla algorithm is inefficient when the query vector does not locate near the satisfied vectors. Figure 2(a) presents an example: The searching algorithm goes from the starting point toward the query vector, however, no satisfied vectors can be found in that path. The searching algorithm keeps expanding the searching radius and cannot touch any satisfied vector until it enumerates a lot of very similar but unsatisfied vectors.\n\n\nAlgorithm 1 Vanilla Graph-Based Similarity Search\n\nInput: A Proximity graph G(V, E); a query vector q; a user-defined query constraint f ; a number of output candidates K. Output: Top-K vectors for the query q with the constraint f .\n\n1. Initialize a min-heap priority queue pq; a max-heap priority queue topk. 2. find a random starting point  \nS 3. d \u2190 dist(S, q) ; pq \u2190 pq \u222a {(d, S)} ; visited \u2190 {S} 4. while pq = \u2205 do 5. (now_dist, now_idx) \u2190 pq.pop_min() 6. if |topk| = K and now_dist > topk.peek_max() then 7. break 8. end if 9. if f (now_idx) = true then 10. topk \u2190 topk \u222a {now_dist, now_idx} 11. if |topk| > K then 12. topk.pop_max () 13. end if 14. end if 15. for each next_idx \u2208 neighbors of now_idx in G do 16. if next_idx \u2208 visited then 17. d \u2190 dist(next_idx, q) 18. pq \u2190 pq \u222a {(d, next_idx)} 19. visited \u2190 visited \u222a\n\nAIRSHIP-Start\n\n\nStarting Points Selection\n\nOur first optimization in the proposed AIRSHIP system is to locate good starting points for the graph searching algorithm. We denote this method as AIRSHIP-Start. We would like to start the graph search inside an \"interesting region\"-a cluster of satisfied vectors. In this scenario (Figure 2(b)), a small number of satisfied vectors can be retrieved along the path to the query vector.\n\nLinear Scan. The most straightforward solution to find satisfied vectors is linear scan that goes over all vectors and checks whether it meets the constraints. Consider the time complexity of evaluating the constraint (a user-defined function) is O(f ). The linear scan takes O(nf ) time, where n is the number of base vectors. Note that a brute force nearest neighbor search requires O(nd) to compute distances between the query vector and all query vectors. Common constraints (e.g., checking if the attribute of a vector belongs to a range or a collection of categories) takes constant time-O(1). In this case, the time complexity of linear scan is O(n)-it is d times faster than the brute force nearest neighbor search especially when we are tackling with high dimensional data (i.e. d > 100). We urge that this linear scan is necessary for selective query constraints-there are only a small/constant number of satisfied vectors. Because we do not know the query constraints in the pre-processing stage, it is infeasible to build an index for each possible constraint. In addition, even if we have prior knowledge of the constraints, it is expensive to construct and store all those indices. The indices roughly require O(nc) time and space, where c is the number of distinct constraints-c can be as large as the number of the queries. In this extreme scenario, after retrieved the small constant number of satisfied vectors, we do not need any advanced techniques other than a brute force distance computation to rank these vectors. Thus, as mentioned above in Section 1, we have the following assumption:\n\nAssumption 1. For each constraint, at least p% of base vectors are satisfied vectors. Formally,\n|{v i |f j (v i ) \u2192 true, v i \u2208 V }| \u2265 p 100 \u00b7 n \u2200f j\nThis assumption holds for real-world recommendation system applications, e.g., the query constraints filter out the retrieved vectors from a collection of categories. When Assumption 1 does not hold, a linear scan can be employed to retrieve the satisfied vectors and brute force distance computation is applied to rank them.\n\nSampling. Although the linear scan that checks the constraints is faster than a brute force similarity search, it still requires us an inevitable linear time to perform the similarity search. In Here we introduce our second assumption on the data distribution:\n\nAssumption 2. Satisfied vectors are clustered in a constant number (r) of regions-they are not randomly distributed.\n\nThis assumption commonly holds in the real-world datasets when the constraints are applied to the data labels-vectors with the same label are clustered in the high-dimensional (embedded) space. On the other hand, when the assumption does not hold, consider the case that the satisfied vectors of a given query constraint are randomly distributed, i.e., a vector satisfies the constraint with a fixed probability prob. Given this kind of constraints, when we target to find top-k candidates, it is equivalent to retrieve top-( k prob ) results in expectation with any similarity search techniques-we can view the fixed satisfied probability prob as the probability to keep a retrieved item in the top candidates. Therefore, no optimization can be applied to the randomly distributed satisfied vectors.\n\nWith Assumption 2, we do not have to retrieve all satisfied vectors as the linear scan method, because satisfied vectors are clustered as regions and we can perform similarity search within these regions. Therefore, we are only required to locate a sample of satisfied vectors as searching starting points for the proximity graph searching algorithm. We obtain a sample of s base vectors when we construct the graph index in the pre-processing stage. Due to Assumption 1, we have p \u00b7 s satisfied vectors in the sample in expectation. The starting point selection in the sample takes O(s) time for constant-time constraints.\n\nInitialization with multiple starting points. After we obtain a collection of satisfied vectors from the sampling method, a straightforward question is: which vector should we use as the starting point? We put all of them into the priority queue. The priority queue extracts the vector that is closest to the query point at the beginning of the search. Instead of simply using the single closest satisfied vector as the starting point, our approach enables other vectors can still be extracted during the search-when the previously extracted vectors connect to the candidates that are far away from the query point.\n\n\nMulti-Direction Search\n\nAlthough AIRSHIP-start alleviates the drawback of the vanilla solution, it is still inefficient when we want to retrieve a larger number of similar vectors (a larger K). Figure 2 shows that only the satisfied vectors along the path to the query vector are retrieved at the beginning of the search. When we try to obtain more satisfied vectors, we still have to first navigate to the query point and then enumerate numerous similar but unsatisfied vectors.\n\nAIRSHIP-Alter. Following this intuition, we propose an optimization AIRSHIP-Alter that enables multi-direction searching. Comparing with the single priority queue used in the original graph search, we have two priority queues to keep search candidates (Algorithm 2). pq sat stores the satisfied vectors and pq other maintains remaining unsatisfied vectors. Line 9 selects a priority queue by Algorithm 3. When both priority queues are not empty, we choose each queue with a weight ratio-alter_ratio (Algorithm 3 Line 6). The alter_ratio (0 < alter_ratio \u2264 1) is used to determine the proportion of search candidates from the pq sat . For example, both queues are selected alternatively after the other when alter_ratio = 0.5. The greater the alter_ratio is, the more biased we are to select the priority queue with satisfied vectors (pq sat ). Back to Algorithm 2, Line 10-13 maintain the number of times we select pq sat (cnt sat ) and count the total number of processed iterations (cnt total ). Once the priority queue is determined, we extract the search candidate from the queue (Line 18-23) as the original searching algorithm. Another major difference from the original searching algorithm is Line 27-31: We insert the neighbors of the current searching vector into two separate priority queues according to their constraint satisfactory-satisfied vectors are assigned to pq sat and the remaining ones are pushed to pq other .\n\nSearching with the candidates from pq sat \"exploits\" the clusterness of satisfied vectors, while using the candidates from pq other \"explores\" other regions that close to the query vector. This two-priorityqueue design enables us to bias satisfied vectors and have a trade-off between the \"exploitation\" and \"exploration\". Figure 2(c) presents an example when alter_ratio = 0.5, we alternatively extract the vectors from two priority queues and a good amount of satisfied vectors are retrieved.\n\nAlgorithm 2 AIRSHIP-Alter Input: A Proximity graph G(V, E); a collection of starting points S; a query vector q; a user-defined query constraint f ; a number of output candidates K. Output: Top-K vectors for the query q with the constraint f .\n\n1. Initialize two min-heap priority queues pq sat and pq other ; a max-heap priority queue topk. \n2. visited \u2190 \u2205 3. for each S i \u2208 S do 4. d \u2190 dist(S i , q) 5. pq sat \u2190 pq sat \u222a {(d, S i )} 6. visited \u2190 visited \u222a {S i } 7. end\n\nalter_ratio Estimation\n\nAs a hyper-parameter, alter_ratio can be enumerated and tuned for applications to achieve the best performance. It is also common to have no prior knowledge of the query constraints, i.e., no pre-tuning can be applied. In this section, we derive a low-overhead heuristic algorithm to estimate alter_ratio. Intuitively, alter_ratio should be positively correlated with the clusterness of satisfied vectors: The more clustered satisfied vectors, the larger alter_ratio should be. In the extreme case when all satisfied vectors are distributed in the same region and no unsatisfied vectors are within this region, alter_ratio should be 1 to obtain the optimal performance, as we do not need to explore unsatisfied vectors. Here, we adapt the concept of k-nearest-neighbor statistics (Hastie et al., 2009) as the estimation of alter_ratio. With a given constraint f and a collection of satisfied vectors from the samples (SSV ), our estimation of alter_ratio is:\n1 |SSV | v\u2208SSV |{v |f (v ) = true \u2200v \u2208 top-k_neighbor(v)}| k(1)\nwhere top-k_neighbor(v) is the nearest k neighbors of vertex v. Note that we do not need any extra computation to obtain these neighbors in the query time. Since the proximity graph approximates a k-nearest-neighbor graph by its definition, we can view the immediate neighbors of v in the proximity graph as its nearest k neighbors. We sort the edges in the proximity graph according to their distance to the vertex. Therefore, no distance computation is required in the query time to obtain the estimation of alter_ratio. For each sampled satisfied vectors, we only need to go over its first k edges and check whether its neighbors are satisfied vectors. alter_ratio is estimated as the average number of satisfied neighbors among all sampled satisfied vectors.\n\n\nBiased Priority Queue Selection\n\nAs depicted in Figure 2(d), when the path from the starting point to the query vector are inside the region of satisfied vectors, the exploration of pq other are doing \"useless\" efforts, as it is not exploring the direction toward the query vector. These ineffective operations are brought by parameter alter_ratio that forces us to explore unsatisfied vectors. We propose AIRSHIP-Alter-Prefer to overcome this disadvantage: when the top candidate from the satisfied vector queue is better than the one from the other queue, we override the alter_ratio restriction and select the satisfied vector queue. This optimization is realized by adding another if statement in the priority queue selection (Algorithm 3):\n\nAlgorithm 3 select_priority_queue Input: Two priority queues pq sat and pq other ; cnt sat ; cnt total ; alter_ratio. Output: A priority queue for the current searching iteration. pq \u2190 pq other 9. end if 10. return pq if the top candidate from pq sat is better than the one from pq other , we select pq sat without considering alter_ratio. This optimization is aggressive: it benefits the searching when the satisfied vectors are highly clustered, while it also reduces the explorations of unsatisfied vectors-what may hurt the performance when top similar satisfied vectors do not reside near the clusters of sampled starting points. We investigate this optimization in Section 3.2.\n\n\nExperimental Evaluation\n\nThe objective of the experimental evaluation is to investigate the overall performance and the impact of optimizations of the proposed system AIRSHIP. Specifically, the experiments are designed to answer the following questions:\n\n\u2022 How does the proposed system compare with other state-of-the-art similarity search algorithms?\n\n\u2022 What is the effect of the proposed optimizations, namely AIRSHIP-Start, AIRSHIP-Alter, and AIRSHIP-Alter-Prefer?\n\n\u2022 How is our estimation to alter_ratio on different data distributions? Does searching performance with the estimated ratio match the best enumerated/hand-picked constant?\n\n\u2022 How does the data distribution affect the performance of the proposed system? Implementation. We implement the vanilla graph-based similarity search and AIRSHIP as a C++11 prototype. The code is compiled with g++-7.5.0 enabling the \"O3\" optimization. The code contains special function calls to harness detailed profiling data.\n\nSystem. We execute the experiments on a single node server. The server has one Intel(R) Xeon(R) Platinum 8276 CPU @ 2.20GHz (64 bit)-28 cores 56 threads-and 1 TB of memory. Ubuntu 20.04 LTS 64-bit is the operating system.\n\n\nBaselines.\n\nWe have two baseline algorithms in the experiments: Vanilla and product quantization (PQ) (J\u00e9gou et al., 2011). Vanilla, which uses the same code base of Zhao et al. (2020), is an adaption of HNSW (Malkov and Yashunin, 2020) to our constrained similarity search problem. We add the query constraint filter before pushing top-k results into the result heap. All our proposed AIRSHIP optimizations are built on top of the vanilla solution. PQ is one of the most popular quantization-based similarity search algorithms. It quantizes the high-dimensional vector to a limited number of integers to accelerate the distance computation. For the PQ comparison, we go over all vectors and check whether they meet the query constraint. Then, top-k similar vectors are chosen by the distances on the quantized vectors instead of the original data vector.\n\nMethodology. We pre-build the index for each algorithm as a pre-processing-the index construction time is not included in the experiments. All experiments are executed with one single thread to have a fair comparison. Since all algorithms support inter-query parallel, we can assume their performances are linearly scalable to the number of threads. We use Euclidean distance as the similarity measure-0 distance represents the highest similarity. The performance of an algorithm is evaluated by two factors: searching time (Query Per Second ) and retrieval quality (recall ).\n\nSearching Time. We measure wall-clock time of each algorithm and present the number of completed Query Per Second (throughput) as the searching time measurement. We employ Query Per Second as the metric instead of the execution time of a query batch, because Query Per Second can be compared without normalizing query batch to the same size. All experiments are performed 3 times and we report the average value as the result.\n\nRetrieval Quality. Recall is a commonly-used retrieval quality measurement for similarity search algorithms. Suppose the candidate point set returned by an algorithm is A, and the correct K nearest neighbors of the query is B, recall is defined as: Recall(A) = |A\u2229B| |B| . A higher recall corresponds to a better approximation to the correct nearest neighbor result.\n\nData. Two datasets are used in the experimental evaluation, one un-labeled data with synthetic labels and one real data with real labels. SIFT1m 1 has 1 million 128-dimensional vectors and does not have labels for each data vector. We cluster the vectors using k-means (Jain, 2010) (k = 10) into 10 clusters and assign the corresponding cluster id as the label for each vector. The randomness of the label is also studied. Consider R% randomness, when we assign the label for each vector, we have a probability R% to set a random label in {1, 2, \u00b7 \u00b7 \u00b7 , 10} instead of its corresponding cluster id. We have 0%, 50%, and 100% random labels on SIFT in the following experiments. The dataset with real labels we used is MNIST with 784 dimensions 2 . We use the first 1 million vectors in this paper to have the same base vector size as the SIFT dataset.\n\nQueries. The queries in the original similarity search datasets do not have constraints. We synthesize two categories of constraints. (a) equal: the returned similar vectors should have the same label as the query vector; (b) unequal-X%: for each query, we randomly choose X% labels that are unequal to the label of the query vector. The labels of returned similar vectors should be one of these randomly chosen labels. We extract 10,000 vectors from the testing data as the query vectors. The label of the SIFT1m query vector is generated in the same fashion as the base vectors. Equal label queries. The first row of Figure 3 illustrate the comparison when our query constraints are: the returned similar vectors should have the same label as the query vector. Since the data with the same label is clustered-similar vectors have the same label to the query vector, this kind of constraint has no substantial difference to the original similar search without considering the constraints. Therefore, all 3 graph-based methods have comparable performance. PQ iterates all vectors to locate the satisfied vectors. Since it is linear to the number of base vectors, inferior performance is observed.\n\n\nPerformance Comparison\n\nUnequal label queries. When the query constraint targets to locate unequal labels-which is the setting of the constrained similarity search, substantial gaps are shown in the second to the fourth row of Figure 3. Choosing a good starting point slightly improve the vanilla solution in unequal-10%. For other constraints, vanilla and AIRSHIP-Start have almost identical performance. There is a substantial gap between AIRSHIP and other methods. Note that the y-axis is in the logarithmic scale. For unequal-10%, AIRSHIP achieves a consistent 10-100x speedup for all top-1, 10, and 100 tasks. The gap is reduced with more relaxed constraints. In unequal-20%, the gap becomes smaller because there are more satisfied vectors than unequal-10%-the vanilla solution and AIRSHIP-Start have a greater chance to find the satisfied vectors. unequal-80% is very similar to the unconstrained general similarity search problem. Thus, vanilla and AIRSHIP-Start shows better performance. AIRSHIP has a consistent execution time across all 4 query constraints. This confirms that our proposed solution is stable for various query constraints without building extra indices. \n\n\nOptimization Effectiveness\n\nalter_ratio estimation. We evaluate the estimation of our alter_ratio in Figure 4 by comparing the searching performance using the estimated ratio (AIRSHIP-ALTER-est) with methods using constant alter_ratio. We enumerate the ratio in 0.2, 0.4, 0.6, 0.8, and 1.0. The comparison is conducted on 3 different label randomness data (0%, 1%, 10%, 50%, and 100%) and 2 query constraints (unequal-10% and unequal-80%). For clustered data (0%random), higher alter_ratio yields better performance. When the randomness of the label goes upper, i.e., 50%and100%, A low alter_ratio gains the best throughput (Queries Per Second). Our estimated alter_ratio (AIRSHIP-ALTER-est) shows a comparable performance to the best constant alter_ratio. Therefore, we can conclude that our estimation method effectively determines the ratio without having prior knowledge of the query constraint.\n\nBiased priority queue selection. We introduced an aggressive priority queue selection algorithm in Section 2.5: When the top candidate from the satisfied vector queue is better than the one from the other queue, we override the alter_ratio restriction and select the satisfied vector queue. We denote this optimization as AIRSHIP-Alter-Prefer or AIRSHIP for short since it consists of all the proposed optimizations. Figure 4 shows that AIRSHIP obtains the best performance in most randomness and query constraint combinations. For 50% and 100% label randomness cases, it was slightly slower than AIRSHIP-ALTER-est since the biased queue selection is designed for the clustered satisfied vectors.\n\n\nNumber of Satisfied Vector Clusters\n\nIn previous experiments, our dataset has k = 10 distinct labels that correspond to k clusters of satisfied vectors. It can be viewed as the dataset contains k classes. In Figure 5, we report a comparison when we vary k for 10, 100, and 1,000 distinct labels. The top-1 results illustrate more diverged curves than the top-100 ones because top-1 is more sensitive-we have to find the exact  (1) searching \"5\" by \"6\" ; (2) searching \"1\" by \"7\".\n\nMNIST is a hand-written digits datasets. Each vector in MNIST has its label (10 classes from 0 to 9). We use MNIST as an experiment to check the performance of AIRSHIP on real-world data distribution. Figure 6 shows a performance comparison with two queries. (a) 6 \u2192 5: the query point is from class 6 and the returned similar vectors must be class 5; (b) 7 \u2192 1: given a query vector from class 7 and find the most similar vector from class 1. PQ suffers from computing the distances between all satisfied vectors (10%). AIRSHIP achieves around 100X speedup over the vanilla graph search. The speedup is consistent across top-1, 10, and 100 results. Figure 7 visualizes one query image and its top-3 retrieved candidates for the 6 \u2192 5 constraint. This kind of constrained query can be employed not only in the recommendation system but also in the security context and negative sampling finding tasks. Although this task seems to be simple by partitioning the\n\n\nQuery\n\nTop results with label \"5\" Figure 7: An Example of searching \"5\" by \"6\" on MNIST.\n\nbase vectors according to their labels. However, there can be around 2 10 different queries when we target to obtain a vector within a collection of labels-it is time-consuming and space-inefficient to construct this large number of indices. Our proposed algorithm AIRSHIP does not need to build extra indices-we just perform the similarity search on the original proximity graph without worrying about the unknown query constraints.\n\n\nDiscussion\n\nBased on the results reported above, we can answer the questions driving our experimental evaluation. AIRSHIP substantially improves over other similarity search algorithms, i.e., HNSW, PQ. The speedup can be 10-100X depending on the data distributions. The starting point selection optimization (AIRSHIP-Start) slightly improves over the vanilla graph search algorithm. The multidirection priority queue search (AIRSHIP-Alter) is the major source of the speedup. The biased priority queue selection is beneficial when the satisfied labels are highly clustered. Our estimation to alter_ratio on different data distributions (0%, 1%, 10%, 50%, and 100% randomness) shows a comparable performance compared with enumerated constants. The performance of AIRSHIP is consistent across all combinations of data randomness and query constraints.\n\n\nConclusion\n\nWe investigate the constrained similarity search problem, and introduce AIRSHIP, a system that integrates a user-defined function filtering into the similarity search framework. The proposed system does not need to build extra indices nor require prior knowledge of the query constraints. We propose three optimizations for the constrained searching problem: starting point selection, multi-direction search, and biased priority queue selection. All three optimizations improve the similarity search performance. The proposed algorithm has a hyper-parameter alter_ratio that is data/query dependent. We present an estimation method to adaptively choose this hyper-parameter. Experimentally evaluations of the proposed algorithm on both synthetic and real-world data confirm the effectiveness of our optimizations: AIRSHIP is 10-100X faster than baseline solutions.\n\nFigure 2 :\n2Examples for the vanilla similarity search, AIRSHIP-Alter, and AIRSHIP-Alter-Prefer.\n\nFigure 3\n3depicts the comparison of PQ, vanilla graph-based similarity search, AIRSHIP-Start, and AIRSHIP-AIRSHIP is the algorithm with all proposed optimizations.\n\nFigure 3 :\n3Results on SIFT. The number of cluster k = 10. Different constraints are applied.\n\nFigure 4 :\n4Results for alpha ratio estimation on SIFT over different amounts of random labels.\n\nFigure 6 :\n6Results on MNIST.\n\n{next_idx} 20 .\n20end if \n\n21. \n\nend for \n22. end while \n23. return topk \n\nSatisfie d V ctors \n\nQue ry \nS arch \nar a \n\nVanilla similarity search \nAIRSHIP-Alter \nAIRSHIP-Alter-Prefer \n\nS arch \nar a \n\nSatisfie d V ctors \nSatisfie d V ctors \n\nS arch \nar a \n\n(a) \n(c) \n(d) \n\nSatisfie d V ctors \n\nQue ry \n\n\n\n\nfor 8. while pq sat = \u2205 and pq other = \u2205 do pq \u2190 select_priority_queue(pq sat , pq other , cnt sat , cnt total , alter_ratio) 10. if pq = pq sat then 11. cnt sat \u2190 cnt sat + 1 cnt total \u2190 cnt total + 1 14. (now_dist, now_idx) \u2190 pq.pop_min() 15. if |topk| = K and now_dist > topk.peek_max() then if pq = pq sat then 19. topk \u2190 topk \u222a {now_dist, now_idx} for each next_idx \u2208 neighbors of now_idx in G do 25. if next_idx \u2208 visited then pq sat \u2190 pq sat \u222a {(d, next_idx)} pq other \u2190 pq other \u222a {(d, next_idx)}9. \n\n12. \n\nend if \n\n13. \n\n16. \n\nbreak \n\n17. \n\nend if \n\n18. \n\n20. \n\nif |topk| > K then \n\n21. \n\ntopk.pop_max () \n\n22. \n\nend if \n\n23. \n\nend if \n\n24. \n\n26. \n\nd \u2190 dist(next_idx, q) \n\n27. \n\nif f (next_idx) = true then \n\n28. \n\n29. \n\nelse \n\n30. \n\n31. \n\nend if \n\n32. \n\nvisited \u2190 visited \u222a {next_idx} \n\n33. \n\nend if \n\n34. \n\nend for \n35. end while \n36. return topk \n\n\n\npq \u2190 pq sat 3. else if pq sat = \u2205 then1. if (pq other = \u2205) then \n\n2. \n\n4. \n\npq \u2190 pq other \n5. else if cntsat \ncnt total \u2264 alter_ratio then \n\n6. \n\npq \u2190 pq sat \n7. else \n\n8. \n\n\n\n\nFigure 5: Results for varying the number of clusters, k. most similar satisfied vector. AIRSHIP has a better performance when the number of labels (classes) is small for top-1 situation, because there are fewer satisfied vector clusters to explore. The difference disappears when we consider top-100 results, since the expected numbers of vectors to be explored are the same for all three cases-the top-100 candidates are distributed across the same proportion (20% or 80%) of satisfied clusters.0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nSIFT top-1 \nConstraint: unequal-20% \n\nAIRSHIP k=10 \nAIRSHIP k=100 \nAIRSHIP k=1000 \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nSIFT top-100 \n\nConstraint: unequal-20% \n\nAIRSHIP k=10 \nAIRSHIP k=100 \nAIRSHIP k=1000 \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nSIFT top-1 \n\nConstraint: unequal-80% \n\nAIRSHIP k=10 \nAIRSHIP k=100 \nAIRSHIP k=1000 \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nSIFT top-100 \n\nConstraint: unequal-80% \n\nAIRSHIP k=10 \nAIRSHIP k=100 \nAIRSHIP k=1000 \n\n3.4 MNIST \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 1 \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nMNIST 6 5 top-1 \n\nPQ \nVanilla \nAIRSHIP \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n10 1 \n\n10 2 \n\n10 3 \n\n10 4 \n\nQueries Per Second \n\nMNIST 6 5 top-10 \n\nPQ \nVanilla \nAIRSHIP \n\n0 \n0.2 \n0.4 \n0.6 \n0.8 \n1 \n\nAvg. Recall \n\n\nhttp://corpus-texmex.irisa.fr/ 2 https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass.html#mnist8m\nThe constrained similarity search problem arises from many practical applications in search and advertising when the authors worked with product teams. Obvious solutions in some cases did work well but there are many practical scenarios which required more effective solutions. Evaluating the constraints can be very expensive unless they are properly indexed. When engineers first apply ANN on the original data and apply filtering on the remaining data vectors, they often have to substantially increase the number vectors returned for ANN (e.g., returning 10000 vectors while the target is to find top-1000 vectors which also satisfy the constraints), leading to substantial performance loss. Our proposed solution has been deployed for production by the ads team, The empirical evaluations presented in this paper, however, are solely based on public datasets.We choose to develop solutions for the constrained similarity search problem, based on graph-based ANN. This is because graph-based ANN is in the production system owing to its excellent performance. Among graph-based ANN, hashing-based ANN, and quantization-based ANN algorithms, typically hashing-based ANN is the simplest in terms of indexing building and the performance is acceptable if a proper hashing function is chosen(Shrivastava and Li, 2014). Nevertheless, if the goal is to optimize for high efficiency (even at the cost of building extra indexing for graphs), then graph-based ANN should be the choice. We expect that researchers and engineers, with non-trivial effects, can also develop solutions for constrained similarity search based on other ANN techniques.\nSyntactic clustering of the web. Andrei Z Broder, Steven C Glassman, Mark S Manasse, Geoffrey Zweig, Comput. Networks. Andrei Z. Broder, Steven C. Glassman, Mark S. Manasse, and Geoffrey Zweig. Syntactic clustering of the web. Comput. Networks, 29(8-13):1157-1166, 1997.\n\nFast nearest neighbor retrieval for bregman divergences. Lawrence Cayton, Proceedings of the Twenty-Fifth International Conference on Machine learning (ICML). the Twenty-Fifth International Conference on Machine learning (ICML)Helsinki, FinlandLawrence Cayton. Fast nearest neighbor retrieval for bregman divergences. In Proceedings of the Twenty-Fifth International Conference on Machine learning (ICML), pages 112-119, Helsinki, Finland, 2008.\n\nSimilarity estimation techniques from rounding algorithms. S Moses, Charikar, Proceedings of the Thiry-Fourth Annual ACM Symposium on Theory of Computing (STOC). the Thiry-Fourth Annual ACM Symposium on Theory of Computing (STOC)Montreal, CanadaMoses S Charikar. Similarity estimation techniques from rounding algorithms. In Proceedings of the Thiry-Fourth Annual ACM Symposium on Theory of Computing (STOC), pages 380-388, Montreal, Canada, 2002.\n\nFast exact max-kernel search. Parikshit Ryan R Curtin, Alexander G Ram, Gray, Proceedings of the 13th SIAM International Conference on Data Mining (SDM). the 13th SIAM International Conference on Data Mining (SDM)Austin,TXRyan R Curtin, Parikshit Ram, and Alexander G Gray. Fast exact max-kernel search. In Proceedings of the 13th SIAM International Conference on Data Mining (SDM), pages 1-9, Austin,TX, 2013.\n\nLocality-sensitive hashing scheme based on p-stable distributions. Mayur Datar, Nicole Immorlica, Piotr Indyk, S Vahab, Mirrokni, Proceedings of the Twentieth Annual Symposium on Computational Geometry (SCG). the Twentieth Annual Symposium on Computational Geometry (SCG)Brooklyn, NYMayur Datar, Nicole Immorlica, Piotr Indyk, and Vahab S Mirrokni. Locality-sensitive hashing scheme based on p-stable distributions. In Proceedings of the Twentieth Annual Symposium on Computational Geometry (SCG), pages 253-262, Brooklyn, NY, 2004.\n\nThe youtube video recommendation system. James Davidson, Benjamin Liebald, Junning Liu, Palash Nandy, Taylor Van Vleet, Ullas Gargi, Sujoy Gupta, Yu He, Mike Lambert, Blake Livingston, Dasarathi Sampath, Proceedings of the 2010 ACM Conference on Recommender Systems (RecSys). the 2010 ACM Conference on Recommender Systems (RecSys)Barcelona, SpainJames Davidson, Benjamin Liebald, Junning Liu, Palash Nandy, Taylor Van Vleet, Ullas Gargi, Sujoy Gupta, Yu He, Mike Lambert, Blake Livingston, and Dasarathi Sampath. The youtube video recommendation system. In Proceedings of the 2010 ACM Conference on Recommender Systems (RecSys), pages 293-296, Barcelona, Spain, 2010.\n\nLearning space partitions for nearest neighbor search. Yihe Dong, Piotr Indyk, Ilya Razenshteyn, Tal Wagner, International Conference on Learning Representations (ICLR. 2020Yihe Dong, Piotr Indyk, Ilya Razenshteyn, and Tal Wagner. Learning space partitions for nearest neighbor search. In International Conference on Learning Representations (ICLR), 2020.\n\nYoelle Maarek, and Idan Szpektor. I want to answer; who has a question?: Yahoo! answers recommender system. Gideon Dror, Yehuda Koren, Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD). the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD)San Diego, CAGideon Dror, Yehuda Koren, Yoelle Maarek, and Idan Szpektor. I want to answer; who has a question?: Yahoo! answers recommender system. In Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), pages 1109-1117, San Diego, CA, 2011.\n\nNew trends in high-d vector similarity search: Al-driven, progressive, and distributed. Karima Echihabi, Kostas Zoumpatianos, Themis Palpanas, Proc. VLDB Endow. VLDB EndowKarima Echihabi, Kostas Zoumpatianos, and Themis Palpanas. New trends in high-d vector similarity search: Al-driven, progressive, and distributed. Proc. VLDB Endow., page 3198-3201, jul 2021.\n\nMOBIUS: towards the next generation of query-ad matching in baidu's sponsored search. Jiacheng Miao Fan, Shuai Guo, Shuo Zhu, Mingming Miao, Ping Sun, Li, Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD). the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD)Anchorage, AKMiao Fan, Jiacheng Guo, Shuai Zhu, Shuo Miao, Mingming Sun, and Ping Li. MOBIUS: towards the next generation of query-ad matching in baidu's sponsored search. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD), pages 2509-2517, Anchorage, AK, 2019.\n\nAn algorithm for finding nearest neighbors. Jerome H Friedman, F Baskett, L Shustek, IEEE Transactions on Computers. 24Jerome H. Friedman, F. Baskett, and L. Shustek. An algorithm for finding nearest neighbors. IEEE Transactions on Computers, 24:1000-1006, 1975.\n\nAn algorithm for finding best matches in logarithmic expected time. Jerome H Friedman, J Bentley, R Finkel, ACM Transactions on Mathematical Software. 3Jerome H. Friedman, J. Bentley, and R. Finkel. An algorithm for finding best matches in logarithmic expected time. ACM Transactions on Mathematical Software, 3:209-226, 1977.\n\nFast approximate nearest neighbor search with the navigating spreading-out graph. Cong Fu, Chao Xiang, Changxu Wang, Deng Cai, Proc. VLDB Endow. 125Cong Fu, Chao Xiang, Changxu Wang, and Deng Cai. Fast approximate nearest neighbor search with the navigating spreading-out graph. Proc. VLDB Endow., 12(5):461-474, 2019.\n\nWeihao Gao, Xiangjun Fan, Chong Wang, Jiankai Sun, Kai Jia, Wenzhi Xiao, Ruofan Ding, Xingyan Bin, Hui Yang, Xiaobing Liu, arXiv:2007.07203Deep retrieval: Learning a retrievable structure for large-scale recommendations. arXiv preprintWeihao Gao, Xiangjun Fan, Chong Wang, Jiankai Sun, Kai Jia, Wenzhi Xiao, Ruofan Ding, Xingyan Bin, Hui Yang, and Xiaobing Liu. Deep retrieval: Learning a retrievable structure for large-scale recommendations. arXiv preprint arXiv:2007.07203, 2020.\n\nOptimized product quantization for approximate nearest neighbor search. Tiezheng Ge, Kaiming He, Qifa Ke, Jian Sun, Proceedings of the 2013 IEEE Conference on Computer Vision and Pattern Recognition (CVPR). the 2013 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)Portland, ORTiezheng Ge, Kaiming He, Qifa Ke, and Jian Sun. Optimized product quantization for approximate nearest neighbor search. In Proceedings of the 2013 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 2946-2953, Portland, OR, 2013.\n\nLearning binary hash codes for large-scale image search. Kristen Grauman, Rob Fergus, Machine Learning for Computer Vision. Kristen Grauman and Rob Fergus. Learning binary hash codes for large-scale image search. In Machine Learning for Computer Vision, pages 49-87. 2013.\n\nFast approximate nearestneighbor search with k-nearest neighbor graph. Kiana Hajebi, Yasin Abbasi-Yadkori, Hossein Shahbazi, Hong Zhang, Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI). Toby Walshthe 22nd International Joint Conference on Artificial Intelligence (IJCAI)Barcelona, Catalonia, SpainKiana Hajebi, Yasin Abbasi-Yadkori, Hossein Shahbazi, and Hong Zhang. Fast approximate nearest- neighbor search with k-nearest neighbor graph. In Toby Walsh, editor, Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI), pages 1312-1317, Barcelona, Catalonia, Spain, 2011.\n\nMosAIc: Finding artistic connections across culture with conditional image retrieval. Mark Hamilton, Stephanie Fu, Mindren Lu, Johnny Bui, Darius Bopp, Zhenbang Chen, Felix Tran, Margaret Wang, Marina Rogers, Lei Zhang, Chris Hoder, William T Freeman, Proceedings of NeurIPS 2020 Competition and Demonstration Track. NeurIPS 2020 Competition and Demonstration TrackMark Hamilton, Stephanie Fu, Mindren Lu, Johnny Bui, Darius Bopp, Zhenbang Chen, Felix Tran, Margaret Wang, Marina Rogers, Lei Zhang, Chris Hoder, and William T. Freeman. MosAIc: Finding artistic connections across culture with conditional image retrieval. In Proceedings of NeurIPS 2020 Competition and Demonstration Track, pages 133-155, 2020.\n\nThe elements of statistical learning: data mining, inference, and prediction. Trevor J Hastie, Robert Tibshirani, Jerome H Friedman, Springer2 editionTrevor J. Hastie, Robert Tibshirani, and Jerome H. Friedman. The elements of statistical learning: data mining, inference, and prediction. Springer, 2 edition, 2009.\n\nApproximate nearest neighbors: Towards removing the curse of dimensionality. Piotr Indyk, Rajeev Motwani, Proceedings of the Thirtieth Annual ACM Symposium on the Theory of Computing (STOC). the Thirtieth Annual ACM Symposium on the Theory of Computing (STOC)Dallas, TXPiotr Indyk and Rajeev Motwani. Approximate nearest neighbors: Towards removing the curse of dimensionality. In Proceedings of the Thirtieth Annual ACM Symposium on the Theory of Computing (STOC), pages 604-613, Dallas, TX, 1998.\n\nidistance: An adaptive b+-tree based indexing method for nearest neighbor search. V Hosagrahar, Beng Chin Jagadish, Kian-Lee Ooi, Cui Tan, Rui Yu, Zhang, ACM Transactions on Database Systems (TODS). 302Hosagrahar V Jagadish, Beng Chin Ooi, Kian-Lee Tan, Cui Yu, and Rui Zhang. idistance: An adaptive b+-tree based indexing method for nearest neighbor search. ACM Transactions on Database Systems (TODS), 30(2):364-397, 2005.\n\nData clustering: 50 years beyond k-means. K Anil, Jain, Pattern Recognit. Lett. 318Anil K. Jain. Data clustering: 50 years beyond k-means. Pattern Recognit. Lett., 31(8):651-666, 2010.\n\nProduct quantization for nearest neighbor search. Herv\u00e9 J\u00e9gou, Matthijs Douze, Cordelia Schmid, IEEE Trans. Pattern Anal. Mach. Intell. 331Herv\u00e9 J\u00e9gou, Matthijs Douze, and Cordelia Schmid. Product quantization for nearest neighbor search. IEEE Trans. Pattern Anal. Mach. Intell., 33(1):117-128, 2011.\n\nA scalable hybrid research paper recommender system for microsoft academic. Anshul Kanakia, Zhihong Shen, Darrin Eide, Kuansan Wang, Proceedings of the World Wide Web Conference (WWW). the World Wide Web Conference (WWW)San Francisco, CAAnshul Kanakia, Zhihong Shen, Darrin Eide, and Kuansan Wang. A scalable hybrid research paper recommender system for microsoft academic. In Proceedings of the World Wide Web Conference (WWW), pages 2893-2899, San Francisco, CA, 2019.\n\nLearning to hash with binary reconstructive embeddings. Brian Kulis, Trevor Darrell, Advances in Neural Information Processing Systems (NIPS). Vancouver, CanadaBrian Kulis and Trevor Darrell. Learning to hash with binary reconstructive embeddings. In Advances in Neural Information Processing Systems (NIPS), pages 1042-1050, Vancouver, Canada, 2009.\n\nSimultaneous feature learning and hash coding with deep neural networks. Hanjiang Lai, Yan Pan, Ye Liu, Shuicheng Yan, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR). the IEEE Conference on Computer Vision and Pattern Recognition (CVPR)Boston, MAHanjiang Lai, Yan Pan, Ye Liu, and Shuicheng Yan. Simultaneous feature learning and hash coding with deep neural networks. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 3270-3278, Boston, MA, 2015.\n\nSign-full random projections. Ping Li, Proceedings of the Thirty-Third AAAI Conference on Artificial Intelligence (AAAI). the Thirty-Third AAAI Conference on Artificial Intelligence (AAAI)Honolulu, HIPing Li. Sign-full random projections. In Proceedings of the Thirty-Third AAAI Conference on Artificial Intelligence (AAAI), pages 4205-4212, Honolulu, HI, 2019.\n\nUsing sketches to estimate associations. Ping Li, Kenneth Ward Church, Proceedings of the Human Language Technology Conference and the Conference on Empirical Methods in Natural Language Processing (HLT/EMNLP). the Human Language Technology Conference and the Conference on Empirical Methods in Natural Language Processing (HLT/EMNLP)Vancouver, CanadaPing Li and Kenneth Ward Church. Using sketches to estimate associations. In Proceedings of the Human Language Technology Conference and the Conference on Empirical Methods in Natural Language Processing (HLT/EMNLP), pages 708-715, Vancouver, Canada, 2005.\n\nConsistent sampling through extremal process. Ping Li, Xiaoyun Li, Gennady Samorodnitsky, Weijie Zhao, Proceedings of the Web Conference (WWW). the Web Conference (WWW)SloveniaVirtual Event / LjubljanaPing Li, Xiaoyun Li, Gennady Samorodnitsky, and Weijie Zhao. Consistent sampling through extremal process. In Proceedings of the Web Conference (WWW), pages 1317-1327, Virtual Event / Ljubljana, Slovenia, April 19-23, 2021, 2021.\n\nMulti-probe LSH: Efficient indexing for high-dimensional similarity search. Qin Lv, William Josephson, Zhe Wang, Moses Charikar, Kai Li, Proceedings of the 33rd International Conference on Very Large Data Bases (VLDB). the 33rd International Conference on Very Large Data Bases (VLDB)Vienna, AustriaQin Lv, William Josephson, Zhe Wang, Moses Charikar, and Kai Li. Multi-probe LSH: Efficient indexing for high-dimensional similarity search. In Proceedings of the 33rd International Conference on Very Large Data Bases (VLDB), page 950-961, Vienna, Austria, 2007.\n\nApproximate nearest neighbor algorithm based on navigable small world graphs. Yury Malkov, Alexander Ponomarenko, Andrey Logvinov, Vladimir Krylov, Information Systems. 45Yury Malkov, Alexander Ponomarenko, Andrey Logvinov, and Vladimir Krylov. Approximate nearest neighbor algorithm based on navigable small world graphs. Information Systems, 45:61-68, 2014.\n\nEfficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs. A Yury, Dmitry A Malkov, Yashunin, IEEE Trans. Pattern Anal. Mach. Intell. 424Yury A. Malkov and Dmitry A. Yashunin. Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs. IEEE Trans. Pattern Anal. Mach. Intell., 42(4): 824-836, 2020.\n\nLocality sensitive hashing: A comparison of hash function types and querying mechanisms. Lo\u00efc Paulev\u00e9, Herv\u00e9 J\u00e9gou, Laurent Amsaleg, Pattern Recognition Letters. 3111Lo\u00efc Paulev\u00e9, Herv\u00e9 J\u00e9gou, and Laurent Amsaleg. Locality sensitive hashing: A comparison of hash function types and querying mechanisms. Pattern Recognition Letters, 31(11):1348-1358, 2010.\n\nMaximum inner-product search using cone trees. Parikshit Ram, Alexander G Gray, Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD). the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD)Beijing, ChinaParikshit Ram and Alexander G Gray. Maximum inner-product search using cone trees. In Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), pages 931-939, Beijing, China, 2012.\n\nRevisiting kd-tree for nearest neighbor search. Parikshit Ram, Kaushik Sinha, Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD). the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD)Anchorage, AKParikshit Ram and Kaushik Sinha. Revisiting kd-tree for nearest neighbor search. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD), pages 1378-1388, Anchorage, AK, 2019.\n\nFast near neighbor search in high-dimensional binary data. Anshumali Shrivastava, Ping Li, Proceedings of the European Conference on Machine Learning and Knowledge Discovery in Databases (ECML-PKDD), Part I. the European Conference on Machine Learning and Knowledge Discovery in Databases (ECML-PKDD), Part IBristol, UKAnshumali Shrivastava and Ping Li. Fast near neighbor search in high-dimensional binary data. In Proceedings of the European Conference on Machine Learning and Knowledge Discovery in Databases (ECML-PKDD), Part I, pages 474-489, Bristol, UK, 2012.\n\nIn defense of minhash over simhash. Anshumali Shrivastava, Ping Li, Proceedings of the Seventeenth International Conference on Artificial Intelligence and Statistics (AISTATS). the Seventeenth International Conference on Artificial Intelligence and Statistics (AISTATS)Reykjavik, IcelandAnshumali Shrivastava and Ping Li. In defense of minhash over simhash. In Proceedings of the Seventeenth International Conference on Artificial Intelligence and Statistics (AISTATS), pages 886-894, Reykjavik, Iceland, 2014.\n\nOn efficient retrieval of top similarity vectors. Shulong Tan, Zhixin Zhou, Zhaozhuo Xu, Ping Li, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP). the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)Hong Kong, ChinaShulong Tan, Zhixin Zhou, Zhaozhuo Xu, and Ping Li. On efficient retrieval of top similarity vectors. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 5235-5245, Hong Kong, China, 2019.\n\nFast item ranking under neural network based measures. Shulong Tan, Zhixin Zhou, Zhaozhuo Xu, Ping Li, Proceedings of the Thirteenth ACM International Conference on Web Search and Data Mining (WSDM). the Thirteenth ACM International Conference on Web Search and Data Mining (WSDM)Houston, TXShulong Tan, Zhixin Zhou, Zhaozhuo Xu, and Ping Li. Fast item ranking under neural network based measures. In Proceedings of the Thirteenth ACM International Conference on Web Search and Data Mining (WSDM), pages 591-599, Houston, TX, 2020.\n\nNorm adjusted proximity graph for fast inner product retrieval. Shulong Tan, Zhaozhuo Xu, Weijie Zhao, Hongliang Fei, Zhixin Zhou, Ping Li, Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD). the 27th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)SingaporeShulong Tan, Zhaozhuo Xu, Weijie Zhao, Hongliang Fei, Zhixin Zhou, and Ping Li. Norm adjusted proximity graph for fast inner product retrieval. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD), pages 1552-1560, Virtual Event, Singapore, 2021a.\n\nFast neural ranking on bipartite graph indices. Shulong Tan, Weijie Zhao, Ping Li, Proc. VLDB Endow. VLDB Endow15Shulong Tan, Weijie Zhao, and Ping Li. Fast neural ranking on bipartite graph indices. Proc. VLDB Endow., 15(4):794-803, 2021b.\n\nLearning to hash for indexing big data -A survey. Jun Wang, Wei Liu, Sanjiv Kumar, Shih-Fu Chang, Proc. IEEE. IEEE104Jun Wang, Wei Liu, Sanjiv Kumar, and Shih-Fu Chang. Learning to hash for indexing big data -A survey. Proc. IEEE, 104(1):34-57, 2016a.\n\nSupervised quantization for similarity search. Xiaojuan Wang, Ting Zhang, Guo-Jun Qi, Jinhui Tang, Jingdong Wang, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR). the IEEE Conference on Computer Vision and Pattern Recognition (CVPR)Las Vegas, NVXiaojuan Wang, Ting Zhang, Guo-Jun Qi, Jinhui Tang, and Jingdong Wang. Supervised quantization for similarity search. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), pages 2018-2026, Las Vegas, NV, 2016b.\n\nAn algorithm for l1 nearest neighbor search via monotonic embedding. Xinan Wang, Sanjoy Dasgupta, Proceedings of the 30th International Conference on Neural Information Processing Systems (NIPS). the 30th International Conference on Neural Information Processing Systems (NIPS)Barcelona, SpainXinan Wang and Sanjoy Dasgupta. An algorithm for l1 nearest neighbor search via monotonic embedding. In Proceedings of the 30th International Conference on Neural Information Processing Systems (NIPS), page 991-999, Barcelona, Spain, 2016.\n\nMultiscale quantization for fast similarity search. Xiang Wu, Ruiqi Guo, Ananda Theertha Suresh, Sanjiv Kumar, N Daniel, David Holtmann-Rice, Felix Simcha, Yu, Advances in Neural Information Processing Systems (NIPS). Long Beach, CAXiang Wu, Ruiqi Guo, Ananda Theertha Suresh, Sanjiv Kumar, Daniel N Holtmann-Rice, David Simcha, and Felix Yu. Multiscale quantization for fast similarity search. In Advances in Neural Information Processing Systems (NIPS), pages 5745-5755, Long Beach, CA, 2017.\n\nFast and unified local search for random walk based k-nearest-neighbor query in large graphs. Yubao Wu, Ruoming Jin, Xiang Zhang, Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data (SIGMOD). the 2014 ACM SIGMOD International Conference on Management of Data (SIGMOD)Snowbird, UTYubao Wu, Ruoming Jin, and Xiang Zhang. Fast and unified local search for random walk based k-nearest-neighbor query in large graphs. In Proceedings of the 2014 ACM SIGMOD International Conference on Management of Data (SIGMOD), page 1139-1150, Snowbird, UT, 2014.\n\nOnline product quantization. Donna Xu, Ivor W Tsang, Ying Zhang, IEEE Trans. Knowl. Data Eng. 3011Donna Xu, Ivor W. Tsang, and Ying Zhang. Online product quantization. IEEE Trans. Knowl. Data Eng., 30(11):2185-2198, 2018.\n\nProximity graph maintenance for fast online nearest neighbor search. Zhaozhuo Xu, Weijie Zhao, Shulong Tan, Zhixin Zhou, Ping Li, arXiv:2206.10839arXiv preprintZhaozhuo Xu, Weijie Zhao, Shulong Tan, Zhixin Zhou, and Ping Li. Proximity graph maintenance for fast online nearest neighbor search. arXiv preprint arXiv:2206.10839, 2022.\n\nEGM: enhanced graph-based model for large-scale video advertisement search. Tan Yu, Jie Liu, Yi Yang, Yi Li, Hongliang Fei, Ping Li, Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD). Aidong Zhang and Huzefa Rangwalathe 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)Washington, DC2022Tan Yu, Jie Liu, Yi Yang, Yi Li, Hongliang Fei, and Ping Li. EGM: enhanced graph-based model for large-scale video advertisement search. In Aidong Zhang and Huzefa Rangwala, editors, Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD), pages 4443-4451, Washington, DC, 2022.\n\nSONG: approximate nearest neighbor search on GPU. Weijie Zhao, Shulong Tan, Ping Li, Proceedings of the 36th IEEE International Conference on Data Engineering (ICDE). the 36th IEEE International Conference on Data Engineering (ICDE)Dallas, TXWeijie Zhao, Shulong Tan, and Ping Li. SONG: approximate nearest neighbor search on GPU. In Proceedings of the 36th IEEE International Conference on Data Engineering (ICDE), pages 1033-1044, Dallas, TX, 2020.\n\nGUITAR: Gradient pruning toward fast neural ranking. Weijie Zhao, Shulong Tan, Ping Li, preprintWeijie Zhao, Shulong Tan, and Ping Li. GUITAR: Gradient pruning toward fast neural ranking. preprint, 2022.\n\nM\u00f6bius transformation for fast inner product search on graph. Zhixin Zhou, Shulong Tan, Zhaozhuo Xu, Ping Li, Advances in Neural Information Processing Systems (NeurIPS). Vancouver, CanadaZhixin Zhou, Shulong Tan, Zhaozhuo Xu, and Ping Li. M\u00f6bius transformation for fast inner product search on graph. In Advances in Neural Information Processing Systems (NeurIPS), pages 8216-8227, Vancouver, Canada, 2019.\n\nLearning tree-based deep model for recommender systems. Han Zhu, Xiang Li, Pengye Zhang, Guozheng Li, Jie He, Han Li, Kun Gai, Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD). the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD)London, UKHan Zhu, Xiang Li, Pengye Zhang, Guozheng Li, Jie He, Han Li, and Kun Gai. Learning tree-based deep model for recommender systems. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD), pages 1079-1088, London, UK, 2018.\n\nJoint optimization of tree-based index and deep model for recommender systems. Han Zhu, Daqing Chang, Ziru Xu, Pengye Zhang, Xiang Li, Jie He, Han Li, Jian Xu, Kun Gai, Advances in Neural Information Processing Systems (NeurIPS). Vancouver, CanadaHan Zhu, Daqing Chang, Ziru Xu, Pengye Zhang, Xiang Li, Jie He, Han Li, Jian Xu, and Kun Gai. Joint optimization of tree-based index and deep model for recommender systems. In Advances in Neural Information Processing Systems (NeurIPS), pages 3973-3982, Vancouver, Canada, 2019.\n\nLearning optimal tree models under beam search. Jingwei Zhuo, Ziru Xu, Wei Dai, Han Zhu, Han Li, Jian Xu, Kun Gai, Proceedings of the 37th International Conference on Machine Learning (ICML). the 37th International Conference on Machine Learning (ICML)Virtual EventJingwei Zhuo, Ziru Xu, Wei Dai, Han Zhu, Han Li, Jian Xu, and Kun Gai. Learning optimal tree models under beam search. In Proceedings of the 37th International Conference on Machine Learning (ICML), pages 11650-11659, Virtual Event, 2020.\n", "annotations": {"author": "[{\"end\":152,\"start\":64},{\"end\":241,\"start\":153},{\"end\":345,\"start\":242},{\"end\":152,\"start\":64},{\"end\":241,\"start\":153},{\"end\":345,\"start\":242}]", "publisher": null, "author_last_name": "[{\"end\":75,\"start\":71},{\"end\":164,\"start\":161},{\"end\":249,\"start\":247},{\"end\":75,\"start\":71},{\"end\":164,\"start\":161},{\"end\":249,\"start\":247}]", "author_first_name": "[{\"end\":70,\"start\":64},{\"end\":160,\"start\":153},{\"end\":246,\"start\":242},{\"end\":70,\"start\":64},{\"end\":160,\"start\":153},{\"end\":246,\"start\":242}]", "author_affiliation": "[{\"end\":151,\"start\":77},{\"end\":240,\"start\":166},{\"end\":344,\"start\":270},{\"end\":151,\"start\":77},{\"end\":240,\"start\":166},{\"end\":344,\"start\":270}]", "title": "[{\"end\":61,\"start\":1},{\"end\":406,\"start\":346},{\"end\":61,\"start\":1},{\"end\":406,\"start\":346}]", "venue": null, "abstract": "[{\"end\":3430,\"start\":408},{\"end\":3430,\"start\":408}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3884,\"start\":3862},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3908,\"start\":3884},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4029,\"start\":4006},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4047,\"start\":4029},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":4064,\"start\":4047},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4085,\"start\":4064},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4743,\"start\":4722},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4767,\"start\":4743},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4782,\"start\":4767},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4801,\"start\":4782},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":4821,\"start\":4801},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":4837,\"start\":4821},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":4858,\"start\":4837},{\"end\":4873,\"start\":4858},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":4897,\"start\":4873},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4906,\"start\":4897},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":4922,\"start\":4906},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5305,\"start\":5280},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":5330,\"start\":5305},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5347,\"start\":5330},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":5366,\"start\":5347},{\"end\":5384,\"start\":5366},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":5632,\"start\":5610},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5656,\"start\":5632},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":5678,\"start\":5656},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":5691,\"start\":5678},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":5710,\"start\":5691},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5730,\"start\":5710},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":5750,\"start\":5730},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":6113,\"start\":6091},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6541,\"start\":6521},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6557,\"start\":6541},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":6576,\"start\":6557},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":6592,\"start\":6576},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":6608,\"start\":6592},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6629,\"start\":6608},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7141,\"start\":7120},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":7157,\"start\":7141},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":7177,\"start\":7157},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":7203,\"start\":7177},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7219,\"start\":7203},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":7237,\"start\":7219},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":7253,\"start\":7237},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":7472,\"start\":7454},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":7728,\"start\":7711},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":7746,\"start\":7728},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7763,\"start\":7746},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":7781,\"start\":7763},{\"end\":7797,\"start\":7781},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":7815,\"start\":7797},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":26135,\"start\":26114},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":29873,\"start\":29853},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":29935,\"start\":29917},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":29987,\"start\":29960},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3884,\"start\":3862},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3908,\"start\":3884},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4029,\"start\":4006},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4047,\"start\":4029},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":4064,\"start\":4047},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4085,\"start\":4064},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4743,\"start\":4722},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4767,\"start\":4743},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4782,\"start\":4767},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4801,\"start\":4782},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":4821,\"start\":4801},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":4837,\"start\":4821},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":4858,\"start\":4837},{\"end\":4873,\"start\":4858},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":4897,\"start\":4873},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4906,\"start\":4897},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":4922,\"start\":4906},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5305,\"start\":5280},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":5330,\"start\":5305},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5347,\"start\":5330},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":5366,\"start\":5347},{\"end\":5384,\"start\":5366},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":5632,\"start\":5610},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5656,\"start\":5632},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":5678,\"start\":5656},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":5691,\"start\":5678},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":5710,\"start\":5691},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5730,\"start\":5710},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":5750,\"start\":5730},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":6113,\"start\":6091},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6541,\"start\":6521},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6557,\"start\":6541},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":6576,\"start\":6557},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":6592,\"start\":6576},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":6608,\"start\":6592},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6629,\"start\":6608},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7141,\"start\":7120},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":7157,\"start\":7141},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":7177,\"start\":7157},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":7203,\"start\":7177},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7219,\"start\":7203},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":7237,\"start\":7219},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":7253,\"start\":7237},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":7472,\"start\":7454},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":7728,\"start\":7711},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":7746,\"start\":7728},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7763,\"start\":7746},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":7781,\"start\":7763},{\"end\":7797,\"start\":7781},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":7815,\"start\":7797},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":26135,\"start\":26114},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":29873,\"start\":29853},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":29935,\"start\":29917},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":29987,\"start\":29960}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":40613,\"start\":40516},{\"attributes\":{\"id\":\"fig_1\"},\"end\":40778,\"start\":40614},{\"attributes\":{\"id\":\"fig_2\"},\"end\":40873,\"start\":40779},{\"attributes\":{\"id\":\"fig_3\"},\"end\":40970,\"start\":40874},{\"attributes\":{\"id\":\"fig_4\"},\"end\":41001,\"start\":40971},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":41304,\"start\":41002},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":42166,\"start\":41305},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":42343,\"start\":42167},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":43833,\"start\":42344},{\"attributes\":{\"id\":\"fig_0\"},\"end\":40613,\"start\":40516},{\"attributes\":{\"id\":\"fig_1\"},\"end\":40778,\"start\":40614},{\"attributes\":{\"id\":\"fig_2\"},\"end\":40873,\"start\":40779},{\"attributes\":{\"id\":\"fig_3\"},\"end\":40970,\"start\":40874},{\"attributes\":{\"id\":\"fig_4\"},\"end\":41001,\"start\":40971},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":41304,\"start\":41002},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":42166,\"start\":41305},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":42343,\"start\":42167},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":43833,\"start\":42344}]", "paragraph": "[{\"end\":4507,\"start\":3446},{\"end\":4661,\"start\":4565},{\"end\":5587,\"start\":4663},{\"end\":6487,\"start\":5589},{\"end\":6931,\"start\":6489},{\"end\":7527,\"start\":6933},{\"end\":8251,\"start\":7529},{\"end\":8540,\"start\":8253},{\"end\":9071,\"start\":8595},{\"end\":9997,\"start\":9073},{\"end\":10570,\"start\":9999},{\"end\":10988,\"start\":10572},{\"end\":11173,\"start\":11022},{\"end\":11347,\"start\":11175},{\"end\":11507,\"start\":11349},{\"end\":12044,\"start\":11509},{\"end\":13400,\"start\":12046},{\"end\":14249,\"start\":13402},{\"end\":14316,\"start\":14251},{\"end\":14584,\"start\":14318},{\"end\":14754,\"start\":14586},{\"end\":14847,\"start\":14756},{\"end\":15007,\"start\":14849},{\"end\":15389,\"start\":15060},{\"end\":16199,\"start\":15431},{\"end\":16648,\"start\":16201},{\"end\":16884,\"start\":16702},{\"end\":16995,\"start\":16886},{\"end\":17909,\"start\":17523},{\"end\":19521,\"start\":17911},{\"end\":19618,\"start\":19523},{\"end\":19998,\"start\":19673},{\"end\":20260,\"start\":20000},{\"end\":20378,\"start\":20262},{\"end\":21180,\"start\":20380},{\"end\":21805,\"start\":21182},{\"end\":22422,\"start\":21807},{\"end\":22904,\"start\":22449},{\"end\":24339,\"start\":22906},{\"end\":24835,\"start\":24341},{\"end\":25080,\"start\":24837},{\"end\":25179,\"start\":25082},{\"end\":26292,\"start\":25334},{\"end\":27119,\"start\":26357},{\"end\":27866,\"start\":27155},{\"end\":28551,\"start\":27868},{\"end\":28807,\"start\":28579},{\"end\":28905,\"start\":28809},{\"end\":29021,\"start\":28907},{\"end\":29194,\"start\":29023},{\"end\":29525,\"start\":29196},{\"end\":29748,\"start\":29527},{\"end\":30606,\"start\":29763},{\"end\":31184,\"start\":30608},{\"end\":31612,\"start\":31186},{\"end\":31980,\"start\":31614},{\"end\":32832,\"start\":31982},{\"end\":34030,\"start\":32834},{\"end\":35215,\"start\":34057},{\"end\":36117,\"start\":35246},{\"end\":36815,\"start\":36119},{\"end\":37297,\"start\":36855},{\"end\":38258,\"start\":37299},{\"end\":38349,\"start\":38268},{\"end\":38784,\"start\":38351},{\"end\":39636,\"start\":38799},{\"end\":40515,\"start\":39651},{\"end\":4507,\"start\":3446},{\"end\":4661,\"start\":4565},{\"end\":5587,\"start\":4663},{\"end\":6487,\"start\":5589},{\"end\":6931,\"start\":6489},{\"end\":7527,\"start\":6933},{\"end\":8251,\"start\":7529},{\"end\":8540,\"start\":8253},{\"end\":9071,\"start\":8595},{\"end\":9997,\"start\":9073},{\"end\":10570,\"start\":9999},{\"end\":10988,\"start\":10572},{\"end\":11173,\"start\":11022},{\"end\":11347,\"start\":11175},{\"end\":11507,\"start\":11349},{\"end\":12044,\"start\":11509},{\"end\":13400,\"start\":12046},{\"end\":14249,\"start\":13402},{\"end\":14316,\"start\":14251},{\"end\":14584,\"start\":14318},{\"end\":14754,\"start\":14586},{\"end\":14847,\"start\":14756},{\"end\":15007,\"start\":14849},{\"end\":15389,\"start\":15060},{\"end\":16199,\"start\":15431},{\"end\":16648,\"start\":16201},{\"end\":16884,\"start\":16702},{\"end\":16995,\"start\":16886},{\"end\":17909,\"start\":17523},{\"end\":19521,\"start\":17911},{\"end\":19618,\"start\":19523},{\"end\":19998,\"start\":19673},{\"end\":20260,\"start\":20000},{\"end\":20378,\"start\":20262},{\"end\":21180,\"start\":20380},{\"end\":21805,\"start\":21182},{\"end\":22422,\"start\":21807},{\"end\":22904,\"start\":22449},{\"end\":24339,\"start\":22906},{\"end\":24835,\"start\":24341},{\"end\":25080,\"start\":24837},{\"end\":25179,\"start\":25082},{\"end\":26292,\"start\":25334},{\"end\":27119,\"start\":26357},{\"end\":27866,\"start\":27155},{\"end\":28551,\"start\":27868},{\"end\":28807,\"start\":28579},{\"end\":28905,\"start\":28809},{\"end\":29021,\"start\":28907},{\"end\":29194,\"start\":29023},{\"end\":29525,\"start\":29196},{\"end\":29748,\"start\":29527},{\"end\":30606,\"start\":29763},{\"end\":31184,\"start\":30608},{\"end\":31612,\"start\":31186},{\"end\":31980,\"start\":31614},{\"end\":32832,\"start\":31982},{\"end\":34030,\"start\":32834},{\"end\":35215,\"start\":34057},{\"end\":36117,\"start\":35246},{\"end\":36815,\"start\":36119},{\"end\":37297,\"start\":36855},{\"end\":38258,\"start\":37299},{\"end\":38349,\"start\":38268},{\"end\":38784,\"start\":38351},{\"end\":39636,\"start\":38799},{\"end\":40515,\"start\":39651}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":17478,\"start\":16996},{\"attributes\":{\"id\":\"formula_1\"},\"end\":19672,\"start\":19619},{\"attributes\":{\"id\":\"formula_2\"},\"end\":25308,\"start\":25180},{\"attributes\":{\"id\":\"formula_3\"},\"end\":26356,\"start\":26293},{\"attributes\":{\"id\":\"formula_0\"},\"end\":17478,\"start\":16996},{\"attributes\":{\"id\":\"formula_1\"},\"end\":19672,\"start\":19619},{\"attributes\":{\"id\":\"formula_2\"},\"end\":25308,\"start\":25180},{\"attributes\":{\"id\":\"formula_3\"},\"end\":26356,\"start\":26293}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":3444,\"start\":3432},{\"attributes\":{\"n\":\"1.1\"},\"end\":4563,\"start\":4510},{\"attributes\":{\"n\":\"1.2\"},\"end\":8593,\"start\":8543},{\"attributes\":{\"n\":\"1.3\"},\"end\":11020,\"start\":10991},{\"attributes\":{\"n\":\"2\"},\"end\":15058,\"start\":15010},{\"attributes\":{\"n\":\"2.1\"},\"end\":15429,\"start\":15392},{\"end\":16700,\"start\":16651},{\"end\":17493,\"start\":17480},{\"attributes\":{\"n\":\"2.2\"},\"end\":17521,\"start\":17496},{\"attributes\":{\"n\":\"2.3\"},\"end\":22447,\"start\":22425},{\"attributes\":{\"n\":\"2.4\"},\"end\":25332,\"start\":25310},{\"attributes\":{\"n\":\"2.5\"},\"end\":27153,\"start\":27122},{\"attributes\":{\"n\":\"3\"},\"end\":28577,\"start\":28554},{\"end\":29761,\"start\":29751},{\"attributes\":{\"n\":\"3.1\"},\"end\":34055,\"start\":34033},{\"attributes\":{\"n\":\"3.2\"},\"end\":35244,\"start\":35218},{\"attributes\":{\"n\":\"3.3\"},\"end\":36853,\"start\":36818},{\"end\":38266,\"start\":38261},{\"attributes\":{\"n\":\"3.5\"},\"end\":38797,\"start\":38787},{\"attributes\":{\"n\":\"4\"},\"end\":39649,\"start\":39639},{\"end\":40527,\"start\":40517},{\"end\":40623,\"start\":40615},{\"end\":40790,\"start\":40780},{\"end\":40885,\"start\":40875},{\"end\":40982,\"start\":40972},{\"end\":41018,\"start\":41003},{\"attributes\":{\"n\":\"1\"},\"end\":3444,\"start\":3432},{\"attributes\":{\"n\":\"1.1\"},\"end\":4563,\"start\":4510},{\"attributes\":{\"n\":\"1.2\"},\"end\":8593,\"start\":8543},{\"attributes\":{\"n\":\"1.3\"},\"end\":11020,\"start\":10991},{\"attributes\":{\"n\":\"2\"},\"end\":15058,\"start\":15010},{\"attributes\":{\"n\":\"2.1\"},\"end\":15429,\"start\":15392},{\"end\":16700,\"start\":16651},{\"end\":17493,\"start\":17480},{\"attributes\":{\"n\":\"2.2\"},\"end\":17521,\"start\":17496},{\"attributes\":{\"n\":\"2.3\"},\"end\":22447,\"start\":22425},{\"attributes\":{\"n\":\"2.4\"},\"end\":25332,\"start\":25310},{\"attributes\":{\"n\":\"2.5\"},\"end\":27153,\"start\":27122},{\"attributes\":{\"n\":\"3\"},\"end\":28577,\"start\":28554},{\"end\":29761,\"start\":29751},{\"attributes\":{\"n\":\"3.1\"},\"end\":34055,\"start\":34033},{\"attributes\":{\"n\":\"3.2\"},\"end\":35244,\"start\":35218},{\"attributes\":{\"n\":\"3.3\"},\"end\":36853,\"start\":36818},{\"end\":38266,\"start\":38261},{\"attributes\":{\"n\":\"3.5\"},\"end\":38797,\"start\":38787},{\"attributes\":{\"n\":\"4\"},\"end\":39649,\"start\":39639},{\"end\":40527,\"start\":40517},{\"end\":40623,\"start\":40615},{\"end\":40790,\"start\":40780},{\"end\":40885,\"start\":40875},{\"end\":40982,\"start\":40972},{\"end\":41018,\"start\":41003}]", "table": "[{\"end\":41304,\"start\":41021},{\"end\":42166,\"start\":41811},{\"end\":42343,\"start\":42207},{\"end\":43833,\"start\":42842},{\"end\":41304,\"start\":41021},{\"end\":42166,\"start\":41811},{\"end\":42343,\"start\":42207},{\"end\":43833,\"start\":42842}]", "figure_caption": "[{\"end\":40613,\"start\":40529},{\"end\":40778,\"start\":40625},{\"end\":40873,\"start\":40792},{\"end\":40970,\"start\":40887},{\"end\":41001,\"start\":40984},{\"end\":41811,\"start\":41307},{\"end\":42207,\"start\":42169},{\"end\":42842,\"start\":42346},{\"end\":40613,\"start\":40529},{\"end\":40778,\"start\":40625},{\"end\":40873,\"start\":40792},{\"end\":40970,\"start\":40887},{\"end\":41001,\"start\":40984},{\"end\":41811,\"start\":41307},{\"end\":42207,\"start\":42169},{\"end\":42842,\"start\":42346}]", "figure_ref": "[{\"end\":8718,\"start\":8710},{\"end\":8988,\"start\":8980},{\"end\":9084,\"start\":9076},{\"end\":10056,\"start\":10048},{\"end\":10617,\"start\":10609},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":16323,\"start\":16315},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17818,\"start\":17806},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":22627,\"start\":22619},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27178,\"start\":27170},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33461,\"start\":33453},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34268,\"start\":34260},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":35327,\"start\":35319},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":36544,\"start\":36536},{\"end\":37034,\"start\":37026},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":37508,\"start\":37500},{\"end\":37957,\"start\":37949},{\"end\":38303,\"start\":38295},{\"end\":8718,\"start\":8710},{\"end\":8988,\"start\":8980},{\"end\":9084,\"start\":9076},{\"end\":10056,\"start\":10048},{\"end\":10617,\"start\":10609},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":16323,\"start\":16315},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17818,\"start\":17806},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":22627,\"start\":22619},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27178,\"start\":27170},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33461,\"start\":33453},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34268,\"start\":34260},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":35327,\"start\":35319},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":36544,\"start\":36536},{\"end\":37034,\"start\":37026},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":37508,\"start\":37500},{\"end\":37957,\"start\":37949},{\"end\":38303,\"start\":38295}]", "bib_author_first_name": "[{\"end\":45627,\"start\":45621},{\"end\":45629,\"start\":45628},{\"end\":45644,\"start\":45638},{\"end\":45646,\"start\":45645},{\"end\":45661,\"start\":45657},{\"end\":45663,\"start\":45662},{\"end\":45681,\"start\":45673},{\"end\":45925,\"start\":45917},{\"end\":46367,\"start\":46366},{\"end\":46795,\"start\":46786},{\"end\":46822,\"start\":46811},{\"end\":47240,\"start\":47235},{\"end\":47254,\"start\":47248},{\"end\":47271,\"start\":47266},{\"end\":47280,\"start\":47279},{\"end\":47748,\"start\":47743},{\"end\":47767,\"start\":47759},{\"end\":47784,\"start\":47777},{\"end\":47796,\"start\":47790},{\"end\":47810,\"start\":47804},{\"end\":47814,\"start\":47811},{\"end\":47827,\"start\":47822},{\"end\":47840,\"start\":47835},{\"end\":47850,\"start\":47848},{\"end\":47859,\"start\":47855},{\"end\":47874,\"start\":47869},{\"end\":47896,\"start\":47887},{\"end\":48431,\"start\":48427},{\"end\":48443,\"start\":48438},{\"end\":48455,\"start\":48451},{\"end\":48472,\"start\":48469},{\"end\":48843,\"start\":48837},{\"end\":48856,\"start\":48850},{\"end\":49449,\"start\":49443},{\"end\":49466,\"start\":49460},{\"end\":49487,\"start\":49481},{\"end\":49813,\"start\":49805},{\"end\":49829,\"start\":49824},{\"end\":49839,\"start\":49835},{\"end\":49853,\"start\":49845},{\"end\":49864,\"start\":49860},{\"end\":50433,\"start\":50427},{\"end\":50435,\"start\":50434},{\"end\":50447,\"start\":50446},{\"end\":50458,\"start\":50457},{\"end\":50721,\"start\":50715},{\"end\":50723,\"start\":50722},{\"end\":50735,\"start\":50734},{\"end\":50746,\"start\":50745},{\"end\":51061,\"start\":51057},{\"end\":51070,\"start\":51066},{\"end\":51085,\"start\":51078},{\"end\":51096,\"start\":51092},{\"end\":51301,\"start\":51295},{\"end\":51315,\"start\":51307},{\"end\":51326,\"start\":51321},{\"end\":51340,\"start\":51333},{\"end\":51349,\"start\":51346},{\"end\":51361,\"start\":51355},{\"end\":51374,\"start\":51368},{\"end\":51388,\"start\":51381},{\"end\":51397,\"start\":51394},{\"end\":51412,\"start\":51404},{\"end\":51859,\"start\":51851},{\"end\":51871,\"start\":51864},{\"end\":51880,\"start\":51876},{\"end\":51889,\"start\":51885},{\"end\":52388,\"start\":52381},{\"end\":52401,\"start\":52398},{\"end\":52674,\"start\":52669},{\"end\":52688,\"start\":52683},{\"end\":52712,\"start\":52705},{\"end\":52727,\"start\":52723},{\"end\":53337,\"start\":53333},{\"end\":53357,\"start\":53348},{\"end\":53369,\"start\":53362},{\"end\":53380,\"start\":53374},{\"end\":53392,\"start\":53386},{\"end\":53407,\"start\":53399},{\"end\":53419,\"start\":53414},{\"end\":53434,\"start\":53426},{\"end\":53447,\"start\":53441},{\"end\":53459,\"start\":53456},{\"end\":53472,\"start\":53467},{\"end\":53487,\"start\":53480},{\"end\":53489,\"start\":53488},{\"end\":54043,\"start\":54037},{\"end\":54045,\"start\":54044},{\"end\":54060,\"start\":54054},{\"end\":54079,\"start\":54073},{\"end\":54081,\"start\":54080},{\"end\":54358,\"start\":54353},{\"end\":54372,\"start\":54366},{\"end\":54859,\"start\":54858},{\"end\":54876,\"start\":54872},{\"end\":54881,\"start\":54877},{\"end\":54900,\"start\":54892},{\"end\":54909,\"start\":54906},{\"end\":54918,\"start\":54915},{\"end\":55245,\"start\":55244},{\"end\":55443,\"start\":55438},{\"end\":55459,\"start\":55451},{\"end\":55475,\"start\":55467},{\"end\":55772,\"start\":55766},{\"end\":55789,\"start\":55782},{\"end\":55802,\"start\":55796},{\"end\":55816,\"start\":55809},{\"end\":56223,\"start\":56218},{\"end\":56237,\"start\":56231},{\"end\":56595,\"start\":56587},{\"end\":56604,\"start\":56601},{\"end\":56612,\"start\":56610},{\"end\":56627,\"start\":56618},{\"end\":57080,\"start\":57076},{\"end\":57454,\"start\":57450},{\"end\":57466,\"start\":57459},{\"end\":57471,\"start\":57467},{\"end\":58068,\"start\":58064},{\"end\":58080,\"start\":58073},{\"end\":58092,\"start\":58085},{\"end\":58114,\"start\":58108},{\"end\":58529,\"start\":58526},{\"end\":58541,\"start\":58534},{\"end\":58556,\"start\":58553},{\"end\":58568,\"start\":58563},{\"end\":58582,\"start\":58579},{\"end\":59095,\"start\":59091},{\"end\":59113,\"start\":59104},{\"end\":59133,\"start\":59127},{\"end\":59152,\"start\":59144},{\"end\":59481,\"start\":59480},{\"end\":59494,\"start\":59488},{\"end\":59496,\"start\":59495},{\"end\":59860,\"start\":59856},{\"end\":59875,\"start\":59870},{\"end\":59890,\"start\":59883},{\"end\":60180,\"start\":60171},{\"end\":60197,\"start\":60186},{\"end\":60700,\"start\":60691},{\"end\":60713,\"start\":60706},{\"end\":61220,\"start\":61211},{\"end\":61238,\"start\":61234},{\"end\":61765,\"start\":61756},{\"end\":61783,\"start\":61779},{\"end\":62289,\"start\":62282},{\"end\":62301,\"start\":62295},{\"end\":62316,\"start\":62308},{\"end\":62325,\"start\":62321},{\"end\":63069,\"start\":63062},{\"end\":63081,\"start\":63075},{\"end\":63096,\"start\":63088},{\"end\":63105,\"start\":63101},{\"end\":63611,\"start\":63604},{\"end\":63625,\"start\":63617},{\"end\":63636,\"start\":63630},{\"end\":63652,\"start\":63643},{\"end\":63664,\"start\":63658},{\"end\":63675,\"start\":63671},{\"end\":64201,\"start\":64194},{\"end\":64213,\"start\":64207},{\"end\":64224,\"start\":64220},{\"end\":64441,\"start\":64438},{\"end\":64451,\"start\":64448},{\"end\":64463,\"start\":64457},{\"end\":64478,\"start\":64471},{\"end\":64696,\"start\":64688},{\"end\":64707,\"start\":64703},{\"end\":64722,\"start\":64715},{\"end\":64733,\"start\":64727},{\"end\":64748,\"start\":64740},{\"end\":65244,\"start\":65239},{\"end\":65257,\"start\":65251},{\"end\":65761,\"start\":65756},{\"end\":65771,\"start\":65766},{\"end\":65783,\"start\":65777},{\"end\":65807,\"start\":65801},{\"end\":65816,\"start\":65815},{\"end\":65830,\"start\":65825},{\"end\":65851,\"start\":65846},{\"end\":66299,\"start\":66294},{\"end\":66311,\"start\":66304},{\"end\":66322,\"start\":66317},{\"end\":66809,\"start\":66804},{\"end\":66818,\"start\":66814},{\"end\":66820,\"start\":66819},{\"end\":66832,\"start\":66828},{\"end\":67075,\"start\":67067},{\"end\":67086,\"start\":67080},{\"end\":67100,\"start\":67093},{\"end\":67112,\"start\":67106},{\"end\":67123,\"start\":67119},{\"end\":67411,\"start\":67408},{\"end\":67419,\"start\":67416},{\"end\":67427,\"start\":67425},{\"end\":67436,\"start\":67434},{\"end\":67450,\"start\":67441},{\"end\":67460,\"start\":67456},{\"end\":68053,\"start\":68047},{\"end\":68067,\"start\":68060},{\"end\":68077,\"start\":68073},{\"end\":68508,\"start\":68502},{\"end\":68522,\"start\":68515},{\"end\":68532,\"start\":68528},{\"end\":68722,\"start\":68716},{\"end\":68736,\"start\":68729},{\"end\":68750,\"start\":68742},{\"end\":68759,\"start\":68755},{\"end\":69122,\"start\":69119},{\"end\":69133,\"start\":69128},{\"end\":69144,\"start\":69138},{\"end\":69160,\"start\":69152},{\"end\":69168,\"start\":69165},{\"end\":69176,\"start\":69173},{\"end\":69184,\"start\":69181},{\"end\":69747,\"start\":69744},{\"end\":69759,\"start\":69753},{\"end\":69771,\"start\":69767},{\"end\":69782,\"start\":69776},{\"end\":69795,\"start\":69790},{\"end\":69803,\"start\":69800},{\"end\":69811,\"start\":69808},{\"end\":69820,\"start\":69816},{\"end\":69828,\"start\":69825},{\"end\":70247,\"start\":70240},{\"end\":70258,\"start\":70254},{\"end\":70266,\"start\":70263},{\"end\":70275,\"start\":70272},{\"end\":70284,\"start\":70281},{\"end\":70293,\"start\":70289},{\"end\":70301,\"start\":70298},{\"end\":45627,\"start\":45621},{\"end\":45629,\"start\":45628},{\"end\":45644,\"start\":45638},{\"end\":45646,\"start\":45645},{\"end\":45661,\"start\":45657},{\"end\":45663,\"start\":45662},{\"end\":45681,\"start\":45673},{\"end\":45925,\"start\":45917},{\"end\":46367,\"start\":46366},{\"end\":46795,\"start\":46786},{\"end\":46822,\"start\":46811},{\"end\":47240,\"start\":47235},{\"end\":47254,\"start\":47248},{\"end\":47271,\"start\":47266},{\"end\":47280,\"start\":47279},{\"end\":47748,\"start\":47743},{\"end\":47767,\"start\":47759},{\"end\":47784,\"start\":47777},{\"end\":47796,\"start\":47790},{\"end\":47810,\"start\":47804},{\"end\":47814,\"start\":47811},{\"end\":47827,\"start\":47822},{\"end\":47840,\"start\":47835},{\"end\":47850,\"start\":47848},{\"end\":47859,\"start\":47855},{\"end\":47874,\"start\":47869},{\"end\":47896,\"start\":47887},{\"end\":48431,\"start\":48427},{\"end\":48443,\"start\":48438},{\"end\":48455,\"start\":48451},{\"end\":48472,\"start\":48469},{\"end\":48843,\"start\":48837},{\"end\":48856,\"start\":48850},{\"end\":49449,\"start\":49443},{\"end\":49466,\"start\":49460},{\"end\":49487,\"start\":49481},{\"end\":49813,\"start\":49805},{\"end\":49829,\"start\":49824},{\"end\":49839,\"start\":49835},{\"end\":49853,\"start\":49845},{\"end\":49864,\"start\":49860},{\"end\":50433,\"start\":50427},{\"end\":50435,\"start\":50434},{\"end\":50447,\"start\":50446},{\"end\":50458,\"start\":50457},{\"end\":50721,\"start\":50715},{\"end\":50723,\"start\":50722},{\"end\":50735,\"start\":50734},{\"end\":50746,\"start\":50745},{\"end\":51061,\"start\":51057},{\"end\":51070,\"start\":51066},{\"end\":51085,\"start\":51078},{\"end\":51096,\"start\":51092},{\"end\":51301,\"start\":51295},{\"end\":51315,\"start\":51307},{\"end\":51326,\"start\":51321},{\"end\":51340,\"start\":51333},{\"end\":51349,\"start\":51346},{\"end\":51361,\"start\":51355},{\"end\":51374,\"start\":51368},{\"end\":51388,\"start\":51381},{\"end\":51397,\"start\":51394},{\"end\":51412,\"start\":51404},{\"end\":51859,\"start\":51851},{\"end\":51871,\"start\":51864},{\"end\":51880,\"start\":51876},{\"end\":51889,\"start\":51885},{\"end\":52388,\"start\":52381},{\"end\":52401,\"start\":52398},{\"end\":52674,\"start\":52669},{\"end\":52688,\"start\":52683},{\"end\":52712,\"start\":52705},{\"end\":52727,\"start\":52723},{\"end\":53337,\"start\":53333},{\"end\":53357,\"start\":53348},{\"end\":53369,\"start\":53362},{\"end\":53380,\"start\":53374},{\"end\":53392,\"start\":53386},{\"end\":53407,\"start\":53399},{\"end\":53419,\"start\":53414},{\"end\":53434,\"start\":53426},{\"end\":53447,\"start\":53441},{\"end\":53459,\"start\":53456},{\"end\":53472,\"start\":53467},{\"end\":53487,\"start\":53480},{\"end\":53489,\"start\":53488},{\"end\":54043,\"start\":54037},{\"end\":54045,\"start\":54044},{\"end\":54060,\"start\":54054},{\"end\":54079,\"start\":54073},{\"end\":54081,\"start\":54080},{\"end\":54358,\"start\":54353},{\"end\":54372,\"start\":54366},{\"end\":54859,\"start\":54858},{\"end\":54876,\"start\":54872},{\"end\":54881,\"start\":54877},{\"end\":54900,\"start\":54892},{\"end\":54909,\"start\":54906},{\"end\":54918,\"start\":54915},{\"end\":55245,\"start\":55244},{\"end\":55443,\"start\":55438},{\"end\":55459,\"start\":55451},{\"end\":55475,\"start\":55467},{\"end\":55772,\"start\":55766},{\"end\":55789,\"start\":55782},{\"end\":55802,\"start\":55796},{\"end\":55816,\"start\":55809},{\"end\":56223,\"start\":56218},{\"end\":56237,\"start\":56231},{\"end\":56595,\"start\":56587},{\"end\":56604,\"start\":56601},{\"end\":56612,\"start\":56610},{\"end\":56627,\"start\":56618},{\"end\":57080,\"start\":57076},{\"end\":57454,\"start\":57450},{\"end\":57466,\"start\":57459},{\"end\":57471,\"start\":57467},{\"end\":58068,\"start\":58064},{\"end\":58080,\"start\":58073},{\"end\":58092,\"start\":58085},{\"end\":58114,\"start\":58108},{\"end\":58529,\"start\":58526},{\"end\":58541,\"start\":58534},{\"end\":58556,\"start\":58553},{\"end\":58568,\"start\":58563},{\"end\":58582,\"start\":58579},{\"end\":59095,\"start\":59091},{\"end\":59113,\"start\":59104},{\"end\":59133,\"start\":59127},{\"end\":59152,\"start\":59144},{\"end\":59481,\"start\":59480},{\"end\":59494,\"start\":59488},{\"end\":59496,\"start\":59495},{\"end\":59860,\"start\":59856},{\"end\":59875,\"start\":59870},{\"end\":59890,\"start\":59883},{\"end\":60180,\"start\":60171},{\"end\":60197,\"start\":60186},{\"end\":60700,\"start\":60691},{\"end\":60713,\"start\":60706},{\"end\":61220,\"start\":61211},{\"end\":61238,\"start\":61234},{\"end\":61765,\"start\":61756},{\"end\":61783,\"start\":61779},{\"end\":62289,\"start\":62282},{\"end\":62301,\"start\":62295},{\"end\":62316,\"start\":62308},{\"end\":62325,\"start\":62321},{\"end\":63069,\"start\":63062},{\"end\":63081,\"start\":63075},{\"end\":63096,\"start\":63088},{\"end\":63105,\"start\":63101},{\"end\":63611,\"start\":63604},{\"end\":63625,\"start\":63617},{\"end\":63636,\"start\":63630},{\"end\":63652,\"start\":63643},{\"end\":63664,\"start\":63658},{\"end\":63675,\"start\":63671},{\"end\":64201,\"start\":64194},{\"end\":64213,\"start\":64207},{\"end\":64224,\"start\":64220},{\"end\":64441,\"start\":64438},{\"end\":64451,\"start\":64448},{\"end\":64463,\"start\":64457},{\"end\":64478,\"start\":64471},{\"end\":64696,\"start\":64688},{\"end\":64707,\"start\":64703},{\"end\":64722,\"start\":64715},{\"end\":64733,\"start\":64727},{\"end\":64748,\"start\":64740},{\"end\":65244,\"start\":65239},{\"end\":65257,\"start\":65251},{\"end\":65761,\"start\":65756},{\"end\":65771,\"start\":65766},{\"end\":65783,\"start\":65777},{\"end\":65807,\"start\":65801},{\"end\":65816,\"start\":65815},{\"end\":65830,\"start\":65825},{\"end\":65851,\"start\":65846},{\"end\":66299,\"start\":66294},{\"end\":66311,\"start\":66304},{\"end\":66322,\"start\":66317},{\"end\":66809,\"start\":66804},{\"end\":66818,\"start\":66814},{\"end\":66820,\"start\":66819},{\"end\":66832,\"start\":66828},{\"end\":67075,\"start\":67067},{\"end\":67086,\"start\":67080},{\"end\":67100,\"start\":67093},{\"end\":67112,\"start\":67106},{\"end\":67123,\"start\":67119},{\"end\":67411,\"start\":67408},{\"end\":67419,\"start\":67416},{\"end\":67427,\"start\":67425},{\"end\":67436,\"start\":67434},{\"end\":67450,\"start\":67441},{\"end\":67460,\"start\":67456},{\"end\":68053,\"start\":68047},{\"end\":68067,\"start\":68060},{\"end\":68077,\"start\":68073},{\"end\":68508,\"start\":68502},{\"end\":68522,\"start\":68515},{\"end\":68532,\"start\":68528},{\"end\":68722,\"start\":68716},{\"end\":68736,\"start\":68729},{\"end\":68750,\"start\":68742},{\"end\":68759,\"start\":68755},{\"end\":69122,\"start\":69119},{\"end\":69133,\"start\":69128},{\"end\":69144,\"start\":69138},{\"end\":69160,\"start\":69152},{\"end\":69168,\"start\":69165},{\"end\":69176,\"start\":69173},{\"end\":69184,\"start\":69181},{\"end\":69747,\"start\":69744},{\"end\":69759,\"start\":69753},{\"end\":69771,\"start\":69767},{\"end\":69782,\"start\":69776},{\"end\":69795,\"start\":69790},{\"end\":69803,\"start\":69800},{\"end\":69811,\"start\":69808},{\"end\":69820,\"start\":69816},{\"end\":69828,\"start\":69825},{\"end\":70247,\"start\":70240},{\"end\":70258,\"start\":70254},{\"end\":70266,\"start\":70263},{\"end\":70275,\"start\":70272},{\"end\":70284,\"start\":70281},{\"end\":70293,\"start\":70289},{\"end\":70301,\"start\":70298}]", "bib_author_last_name": "[{\"end\":45636,\"start\":45630},{\"end\":45655,\"start\":45647},{\"end\":45671,\"start\":45664},{\"end\":45687,\"start\":45682},{\"end\":45932,\"start\":45926},{\"end\":46373,\"start\":46368},{\"end\":46383,\"start\":46375},{\"end\":46809,\"start\":46796},{\"end\":46826,\"start\":46823},{\"end\":46832,\"start\":46828},{\"end\":47246,\"start\":47241},{\"end\":47264,\"start\":47255},{\"end\":47277,\"start\":47272},{\"end\":47286,\"start\":47281},{\"end\":47296,\"start\":47288},{\"end\":47757,\"start\":47749},{\"end\":47775,\"start\":47768},{\"end\":47788,\"start\":47785},{\"end\":47802,\"start\":47797},{\"end\":47820,\"start\":47815},{\"end\":47833,\"start\":47828},{\"end\":47846,\"start\":47841},{\"end\":47853,\"start\":47851},{\"end\":47867,\"start\":47860},{\"end\":47885,\"start\":47875},{\"end\":47904,\"start\":47897},{\"end\":48436,\"start\":48432},{\"end\":48449,\"start\":48444},{\"end\":48467,\"start\":48456},{\"end\":48479,\"start\":48473},{\"end\":48848,\"start\":48844},{\"end\":48862,\"start\":48857},{\"end\":49458,\"start\":49450},{\"end\":49479,\"start\":49467},{\"end\":49496,\"start\":49488},{\"end\":49822,\"start\":49814},{\"end\":49833,\"start\":49830},{\"end\":49843,\"start\":49840},{\"end\":49858,\"start\":49854},{\"end\":49868,\"start\":49865},{\"end\":49872,\"start\":49870},{\"end\":50444,\"start\":50436},{\"end\":50455,\"start\":50448},{\"end\":50466,\"start\":50459},{\"end\":50732,\"start\":50724},{\"end\":50743,\"start\":50736},{\"end\":50753,\"start\":50747},{\"end\":51064,\"start\":51062},{\"end\":51076,\"start\":51071},{\"end\":51090,\"start\":51086},{\"end\":51100,\"start\":51097},{\"end\":51305,\"start\":51302},{\"end\":51319,\"start\":51316},{\"end\":51331,\"start\":51327},{\"end\":51344,\"start\":51341},{\"end\":51353,\"start\":51350},{\"end\":51366,\"start\":51362},{\"end\":51379,\"start\":51375},{\"end\":51392,\"start\":51389},{\"end\":51402,\"start\":51398},{\"end\":51416,\"start\":51413},{\"end\":51862,\"start\":51860},{\"end\":51874,\"start\":51872},{\"end\":51883,\"start\":51881},{\"end\":51893,\"start\":51890},{\"end\":52396,\"start\":52389},{\"end\":52408,\"start\":52402},{\"end\":52681,\"start\":52675},{\"end\":52703,\"start\":52689},{\"end\":52721,\"start\":52713},{\"end\":52733,\"start\":52728},{\"end\":53346,\"start\":53338},{\"end\":53360,\"start\":53358},{\"end\":53372,\"start\":53370},{\"end\":53384,\"start\":53381},{\"end\":53397,\"start\":53393},{\"end\":53412,\"start\":53408},{\"end\":53424,\"start\":53420},{\"end\":53439,\"start\":53435},{\"end\":53454,\"start\":53448},{\"end\":53465,\"start\":53460},{\"end\":53478,\"start\":53473},{\"end\":53497,\"start\":53490},{\"end\":54052,\"start\":54046},{\"end\":54071,\"start\":54061},{\"end\":54090,\"start\":54082},{\"end\":54364,\"start\":54359},{\"end\":54380,\"start\":54373},{\"end\":54870,\"start\":54860},{\"end\":54890,\"start\":54882},{\"end\":54904,\"start\":54901},{\"end\":54913,\"start\":54910},{\"end\":54921,\"start\":54919},{\"end\":54928,\"start\":54923},{\"end\":55250,\"start\":55246},{\"end\":55256,\"start\":55252},{\"end\":55449,\"start\":55444},{\"end\":55465,\"start\":55460},{\"end\":55482,\"start\":55476},{\"end\":55780,\"start\":55773},{\"end\":55794,\"start\":55790},{\"end\":55807,\"start\":55803},{\"end\":55821,\"start\":55817},{\"end\":56229,\"start\":56224},{\"end\":56245,\"start\":56238},{\"end\":56599,\"start\":56596},{\"end\":56608,\"start\":56605},{\"end\":56616,\"start\":56613},{\"end\":56631,\"start\":56628},{\"end\":57083,\"start\":57081},{\"end\":57457,\"start\":57455},{\"end\":57478,\"start\":57472},{\"end\":58071,\"start\":58069},{\"end\":58083,\"start\":58081},{\"end\":58106,\"start\":58093},{\"end\":58119,\"start\":58115},{\"end\":58532,\"start\":58530},{\"end\":58551,\"start\":58542},{\"end\":58561,\"start\":58557},{\"end\":58577,\"start\":58569},{\"end\":58585,\"start\":58583},{\"end\":59102,\"start\":59096},{\"end\":59125,\"start\":59114},{\"end\":59142,\"start\":59134},{\"end\":59159,\"start\":59153},{\"end\":59486,\"start\":59482},{\"end\":59503,\"start\":59497},{\"end\":59513,\"start\":59505},{\"end\":59868,\"start\":59861},{\"end\":59881,\"start\":59876},{\"end\":59898,\"start\":59891},{\"end\":60184,\"start\":60181},{\"end\":60202,\"start\":60198},{\"end\":60704,\"start\":60701},{\"end\":60719,\"start\":60714},{\"end\":61232,\"start\":61221},{\"end\":61241,\"start\":61239},{\"end\":61777,\"start\":61766},{\"end\":61786,\"start\":61784},{\"end\":62293,\"start\":62290},{\"end\":62306,\"start\":62302},{\"end\":62319,\"start\":62317},{\"end\":62328,\"start\":62326},{\"end\":63073,\"start\":63070},{\"end\":63086,\"start\":63082},{\"end\":63099,\"start\":63097},{\"end\":63108,\"start\":63106},{\"end\":63615,\"start\":63612},{\"end\":63628,\"start\":63626},{\"end\":63641,\"start\":63637},{\"end\":63656,\"start\":63653},{\"end\":63669,\"start\":63665},{\"end\":63678,\"start\":63676},{\"end\":64205,\"start\":64202},{\"end\":64218,\"start\":64214},{\"end\":64227,\"start\":64225},{\"end\":64446,\"start\":64442},{\"end\":64455,\"start\":64452},{\"end\":64469,\"start\":64464},{\"end\":64484,\"start\":64479},{\"end\":64701,\"start\":64697},{\"end\":64713,\"start\":64708},{\"end\":64725,\"start\":64723},{\"end\":64738,\"start\":64734},{\"end\":64753,\"start\":64749},{\"end\":65249,\"start\":65245},{\"end\":65266,\"start\":65258},{\"end\":65764,\"start\":65762},{\"end\":65775,\"start\":65772},{\"end\":65799,\"start\":65784},{\"end\":65813,\"start\":65808},{\"end\":65823,\"start\":65817},{\"end\":65844,\"start\":65831},{\"end\":65858,\"start\":65852},{\"end\":65862,\"start\":65860},{\"end\":66302,\"start\":66300},{\"end\":66315,\"start\":66312},{\"end\":66328,\"start\":66323},{\"end\":66812,\"start\":66810},{\"end\":66826,\"start\":66821},{\"end\":66838,\"start\":66833},{\"end\":67078,\"start\":67076},{\"end\":67091,\"start\":67087},{\"end\":67104,\"start\":67101},{\"end\":67117,\"start\":67113},{\"end\":67126,\"start\":67124},{\"end\":67414,\"start\":67412},{\"end\":67423,\"start\":67420},{\"end\":67432,\"start\":67428},{\"end\":67439,\"start\":67437},{\"end\":67454,\"start\":67451},{\"end\":67463,\"start\":67461},{\"end\":68058,\"start\":68054},{\"end\":68071,\"start\":68068},{\"end\":68080,\"start\":68078},{\"end\":68513,\"start\":68509},{\"end\":68526,\"start\":68523},{\"end\":68535,\"start\":68533},{\"end\":68727,\"start\":68723},{\"end\":68740,\"start\":68737},{\"end\":68753,\"start\":68751},{\"end\":68762,\"start\":68760},{\"end\":69126,\"start\":69123},{\"end\":69136,\"start\":69134},{\"end\":69150,\"start\":69145},{\"end\":69163,\"start\":69161},{\"end\":69171,\"start\":69169},{\"end\":69179,\"start\":69177},{\"end\":69188,\"start\":69185},{\"end\":69751,\"start\":69748},{\"end\":69765,\"start\":69760},{\"end\":69774,\"start\":69772},{\"end\":69788,\"start\":69783},{\"end\":69798,\"start\":69796},{\"end\":69806,\"start\":69804},{\"end\":69814,\"start\":69812},{\"end\":69823,\"start\":69821},{\"end\":69832,\"start\":69829},{\"end\":70252,\"start\":70248},{\"end\":70261,\"start\":70259},{\"end\":70270,\"start\":70267},{\"end\":70279,\"start\":70276},{\"end\":70287,\"start\":70285},{\"end\":70296,\"start\":70294},{\"end\":70305,\"start\":70302},{\"end\":45636,\"start\":45630},{\"end\":45655,\"start\":45647},{\"end\":45671,\"start\":45664},{\"end\":45687,\"start\":45682},{\"end\":45932,\"start\":45926},{\"end\":46373,\"start\":46368},{\"end\":46383,\"start\":46375},{\"end\":46809,\"start\":46796},{\"end\":46826,\"start\":46823},{\"end\":46832,\"start\":46828},{\"end\":47246,\"start\":47241},{\"end\":47264,\"start\":47255},{\"end\":47277,\"start\":47272},{\"end\":47286,\"start\":47281},{\"end\":47296,\"start\":47288},{\"end\":47757,\"start\":47749},{\"end\":47775,\"start\":47768},{\"end\":47788,\"start\":47785},{\"end\":47802,\"start\":47797},{\"end\":47820,\"start\":47815},{\"end\":47833,\"start\":47828},{\"end\":47846,\"start\":47841},{\"end\":47853,\"start\":47851},{\"end\":47867,\"start\":47860},{\"end\":47885,\"start\":47875},{\"end\":47904,\"start\":47897},{\"end\":48436,\"start\":48432},{\"end\":48449,\"start\":48444},{\"end\":48467,\"start\":48456},{\"end\":48479,\"start\":48473},{\"end\":48848,\"start\":48844},{\"end\":48862,\"start\":48857},{\"end\":49458,\"start\":49450},{\"end\":49479,\"start\":49467},{\"end\":49496,\"start\":49488},{\"end\":49822,\"start\":49814},{\"end\":49833,\"start\":49830},{\"end\":49843,\"start\":49840},{\"end\":49858,\"start\":49854},{\"end\":49868,\"start\":49865},{\"end\":49872,\"start\":49870},{\"end\":50444,\"start\":50436},{\"end\":50455,\"start\":50448},{\"end\":50466,\"start\":50459},{\"end\":50732,\"start\":50724},{\"end\":50743,\"start\":50736},{\"end\":50753,\"start\":50747},{\"end\":51064,\"start\":51062},{\"end\":51076,\"start\":51071},{\"end\":51090,\"start\":51086},{\"end\":51100,\"start\":51097},{\"end\":51305,\"start\":51302},{\"end\":51319,\"start\":51316},{\"end\":51331,\"start\":51327},{\"end\":51344,\"start\":51341},{\"end\":51353,\"start\":51350},{\"end\":51366,\"start\":51362},{\"end\":51379,\"start\":51375},{\"end\":51392,\"start\":51389},{\"end\":51402,\"start\":51398},{\"end\":51416,\"start\":51413},{\"end\":51862,\"start\":51860},{\"end\":51874,\"start\":51872},{\"end\":51883,\"start\":51881},{\"end\":51893,\"start\":51890},{\"end\":52396,\"start\":52389},{\"end\":52408,\"start\":52402},{\"end\":52681,\"start\":52675},{\"end\":52703,\"start\":52689},{\"end\":52721,\"start\":52713},{\"end\":52733,\"start\":52728},{\"end\":53346,\"start\":53338},{\"end\":53360,\"start\":53358},{\"end\":53372,\"start\":53370},{\"end\":53384,\"start\":53381},{\"end\":53397,\"start\":53393},{\"end\":53412,\"start\":53408},{\"end\":53424,\"start\":53420},{\"end\":53439,\"start\":53435},{\"end\":53454,\"start\":53448},{\"end\":53465,\"start\":53460},{\"end\":53478,\"start\":53473},{\"end\":53497,\"start\":53490},{\"end\":54052,\"start\":54046},{\"end\":54071,\"start\":54061},{\"end\":54090,\"start\":54082},{\"end\":54364,\"start\":54359},{\"end\":54380,\"start\":54373},{\"end\":54870,\"start\":54860},{\"end\":54890,\"start\":54882},{\"end\":54904,\"start\":54901},{\"end\":54913,\"start\":54910},{\"end\":54921,\"start\":54919},{\"end\":54928,\"start\":54923},{\"end\":55250,\"start\":55246},{\"end\":55256,\"start\":55252},{\"end\":55449,\"start\":55444},{\"end\":55465,\"start\":55460},{\"end\":55482,\"start\":55476},{\"end\":55780,\"start\":55773},{\"end\":55794,\"start\":55790},{\"end\":55807,\"start\":55803},{\"end\":55821,\"start\":55817},{\"end\":56229,\"start\":56224},{\"end\":56245,\"start\":56238},{\"end\":56599,\"start\":56596},{\"end\":56608,\"start\":56605},{\"end\":56616,\"start\":56613},{\"end\":56631,\"start\":56628},{\"end\":57083,\"start\":57081},{\"end\":57457,\"start\":57455},{\"end\":57478,\"start\":57472},{\"end\":58071,\"start\":58069},{\"end\":58083,\"start\":58081},{\"end\":58106,\"start\":58093},{\"end\":58119,\"start\":58115},{\"end\":58532,\"start\":58530},{\"end\":58551,\"start\":58542},{\"end\":58561,\"start\":58557},{\"end\":58577,\"start\":58569},{\"end\":58585,\"start\":58583},{\"end\":59102,\"start\":59096},{\"end\":59125,\"start\":59114},{\"end\":59142,\"start\":59134},{\"end\":59159,\"start\":59153},{\"end\":59486,\"start\":59482},{\"end\":59503,\"start\":59497},{\"end\":59513,\"start\":59505},{\"end\":59868,\"start\":59861},{\"end\":59881,\"start\":59876},{\"end\":59898,\"start\":59891},{\"end\":60184,\"start\":60181},{\"end\":60202,\"start\":60198},{\"end\":60704,\"start\":60701},{\"end\":60719,\"start\":60714},{\"end\":61232,\"start\":61221},{\"end\":61241,\"start\":61239},{\"end\":61777,\"start\":61766},{\"end\":61786,\"start\":61784},{\"end\":62293,\"start\":62290},{\"end\":62306,\"start\":62302},{\"end\":62319,\"start\":62317},{\"end\":62328,\"start\":62326},{\"end\":63073,\"start\":63070},{\"end\":63086,\"start\":63082},{\"end\":63099,\"start\":63097},{\"end\":63108,\"start\":63106},{\"end\":63615,\"start\":63612},{\"end\":63628,\"start\":63626},{\"end\":63641,\"start\":63637},{\"end\":63656,\"start\":63653},{\"end\":63669,\"start\":63665},{\"end\":63678,\"start\":63676},{\"end\":64205,\"start\":64202},{\"end\":64218,\"start\":64214},{\"end\":64227,\"start\":64225},{\"end\":64446,\"start\":64442},{\"end\":64455,\"start\":64452},{\"end\":64469,\"start\":64464},{\"end\":64484,\"start\":64479},{\"end\":64701,\"start\":64697},{\"end\":64713,\"start\":64708},{\"end\":64725,\"start\":64723},{\"end\":64738,\"start\":64734},{\"end\":64753,\"start\":64749},{\"end\":65249,\"start\":65245},{\"end\":65266,\"start\":65258},{\"end\":65764,\"start\":65762},{\"end\":65775,\"start\":65772},{\"end\":65799,\"start\":65784},{\"end\":65813,\"start\":65808},{\"end\":65823,\"start\":65817},{\"end\":65844,\"start\":65831},{\"end\":65858,\"start\":65852},{\"end\":65862,\"start\":65860},{\"end\":66302,\"start\":66300},{\"end\":66315,\"start\":66312},{\"end\":66328,\"start\":66323},{\"end\":66812,\"start\":66810},{\"end\":66826,\"start\":66821},{\"end\":66838,\"start\":66833},{\"end\":67078,\"start\":67076},{\"end\":67091,\"start\":67087},{\"end\":67104,\"start\":67101},{\"end\":67117,\"start\":67113},{\"end\":67126,\"start\":67124},{\"end\":67414,\"start\":67412},{\"end\":67423,\"start\":67420},{\"end\":67432,\"start\":67428},{\"end\":67439,\"start\":67437},{\"end\":67454,\"start\":67451},{\"end\":67463,\"start\":67461},{\"end\":68058,\"start\":68054},{\"end\":68071,\"start\":68068},{\"end\":68080,\"start\":68078},{\"end\":68513,\"start\":68509},{\"end\":68526,\"start\":68523},{\"end\":68535,\"start\":68533},{\"end\":68727,\"start\":68723},{\"end\":68740,\"start\":68737},{\"end\":68753,\"start\":68751},{\"end\":68762,\"start\":68760},{\"end\":69126,\"start\":69123},{\"end\":69136,\"start\":69134},{\"end\":69150,\"start\":69145},{\"end\":69163,\"start\":69161},{\"end\":69171,\"start\":69169},{\"end\":69179,\"start\":69177},{\"end\":69188,\"start\":69185},{\"end\":69751,\"start\":69748},{\"end\":69765,\"start\":69760},{\"end\":69774,\"start\":69772},{\"end\":69788,\"start\":69783},{\"end\":69798,\"start\":69796},{\"end\":69806,\"start\":69804},{\"end\":69814,\"start\":69812},{\"end\":69823,\"start\":69821},{\"end\":69832,\"start\":69829},{\"end\":70252,\"start\":70248},{\"end\":70261,\"start\":70259},{\"end\":70270,\"start\":70267},{\"end\":70279,\"start\":70276},{\"end\":70287,\"start\":70285},{\"end\":70296,\"start\":70294},{\"end\":70305,\"start\":70302}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":9022773},\"end\":45858,\"start\":45588},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":12169321},\"end\":46305,\"start\":45860},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":4229473},\"end\":46754,\"start\":46307},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":7081816},\"end\":47166,\"start\":46756},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":747083},\"end\":47700,\"start\":47168},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":1145979},\"end\":48370,\"start\":47702},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":189999681},\"end\":48727,\"start\":48372},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":14971120},\"end\":49353,\"start\":48729},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":237332007},\"end\":49717,\"start\":49355},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":195801634},\"end\":50381,\"start\":49719},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":4574636},\"end\":50645,\"start\":50383},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":10811510},\"end\":50973,\"start\":50647},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":44175941},\"end\":51293,\"start\":50975},{\"attributes\":{\"doi\":\"arXiv:2007.07203\",\"id\":\"b13\"},\"end\":51777,\"start\":51295},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1189578},\"end\":52322,\"start\":51779},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":12506870},\"end\":52596,\"start\":52324},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":8794559},\"end\":53245,\"start\":52598},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":237156250},\"end\":53957,\"start\":53247},{\"attributes\":{\"id\":\"b18\"},\"end\":54274,\"start\":53959},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":6110572},\"end\":54774,\"start\":54276},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":967678},\"end\":55200,\"start\":54776},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":11152703},\"end\":55386,\"start\":55202},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":5850884},\"end\":55688,\"start\":55388},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":153313763},\"end\":56160,\"start\":55690},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":6898425},\"end\":56512,\"start\":56162},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":1307328},\"end\":57044,\"start\":56514},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":13746841},\"end\":57407,\"start\":57046},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":464920},\"end\":58016,\"start\":57409},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":235324829},\"end\":58448,\"start\":58018},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":142325},\"end\":59011,\"start\":58450},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":9896397},\"end\":59372,\"start\":59013},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":8915893},\"end\":59765,\"start\":59374},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":2666044},\"end\":60122,\"start\":59767},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":514516},\"end\":60641,\"start\":60124},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":196172014},\"end\":61150,\"start\":60643},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":55403},\"end\":61718,\"start\":61152},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":10964961},\"end\":62230,\"start\":61720},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":207912298},\"end\":63005,\"start\":62232},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":210884024},\"end\":63538,\"start\":63007},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":236980241},\"end\":64144,\"start\":63540},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":247936018},\"end\":64386,\"start\":64146},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":1596835},\"end\":64639,\"start\":64388},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":2433132},\"end\":65168,\"start\":64641},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":11223180},\"end\":65702,\"start\":65170},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":1462606},\"end\":66198,\"start\":65704},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":14407122},\"end\":66773,\"start\":66200},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":4428632},\"end\":66996,\"start\":66775},{\"attributes\":{\"doi\":\"arXiv:2206.10839\",\"id\":\"b47\"},\"end\":67330,\"start\":66998},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":251518274},\"end\":67995,\"start\":67332},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":218906516},\"end\":68447,\"start\":67997},{\"attributes\":{\"id\":\"b50\"},\"end\":68652,\"start\":68449},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":202763396},\"end\":69061,\"start\":68654},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":25648541},\"end\":69663,\"start\":69063},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":67769983},\"end\":70190,\"start\":69665},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":220251120},\"end\":70695,\"start\":70192},{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":9022773},\"end\":45858,\"start\":45588},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":12169321},\"end\":46305,\"start\":45860},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":4229473},\"end\":46754,\"start\":46307},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":7081816},\"end\":47166,\"start\":46756},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":747083},\"end\":47700,\"start\":47168},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":1145979},\"end\":48370,\"start\":47702},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":189999681},\"end\":48727,\"start\":48372},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":14971120},\"end\":49353,\"start\":48729},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":237332007},\"end\":49717,\"start\":49355},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":195801634},\"end\":50381,\"start\":49719},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":4574636},\"end\":50645,\"start\":50383},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":10811510},\"end\":50973,\"start\":50647},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":44175941},\"end\":51293,\"start\":50975},{\"attributes\":{\"doi\":\"arXiv:2007.07203\",\"id\":\"b13\"},\"end\":51777,\"start\":51295},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1189578},\"end\":52322,\"start\":51779},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":12506870},\"end\":52596,\"start\":52324},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":8794559},\"end\":53245,\"start\":52598},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":237156250},\"end\":53957,\"start\":53247},{\"attributes\":{\"id\":\"b18\"},\"end\":54274,\"start\":53959},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":6110572},\"end\":54774,\"start\":54276},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":967678},\"end\":55200,\"start\":54776},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":11152703},\"end\":55386,\"start\":55202},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":5850884},\"end\":55688,\"start\":55388},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":153313763},\"end\":56160,\"start\":55690},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":6898425},\"end\":56512,\"start\":56162},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":1307328},\"end\":57044,\"start\":56514},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":13746841},\"end\":57407,\"start\":57046},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":464920},\"end\":58016,\"start\":57409},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":235324829},\"end\":58448,\"start\":58018},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":142325},\"end\":59011,\"start\":58450},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":9896397},\"end\":59372,\"start\":59013},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":8915893},\"end\":59765,\"start\":59374},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":2666044},\"end\":60122,\"start\":59767},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":514516},\"end\":60641,\"start\":60124},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":196172014},\"end\":61150,\"start\":60643},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":55403},\"end\":61718,\"start\":61152},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":10964961},\"end\":62230,\"start\":61720},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":207912298},\"end\":63005,\"start\":62232},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":210884024},\"end\":63538,\"start\":63007},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":236980241},\"end\":64144,\"start\":63540},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":247936018},\"end\":64386,\"start\":64146},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":1596835},\"end\":64639,\"start\":64388},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":2433132},\"end\":65168,\"start\":64641},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":11223180},\"end\":65702,\"start\":65170},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":1462606},\"end\":66198,\"start\":65704},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":14407122},\"end\":66773,\"start\":66200},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":4428632},\"end\":66996,\"start\":66775},{\"attributes\":{\"doi\":\"arXiv:2206.10839\",\"id\":\"b47\"},\"end\":67330,\"start\":66998},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":251518274},\"end\":67995,\"start\":67332},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":218906516},\"end\":68447,\"start\":67997},{\"attributes\":{\"id\":\"b50\"},\"end\":68652,\"start\":68449},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":202763396},\"end\":69061,\"start\":68654},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":25648541},\"end\":69663,\"start\":69063},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":67769983},\"end\":70190,\"start\":69665},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":220251120},\"end\":70695,\"start\":70192}]", "bib_title": "[{\"end\":45619,\"start\":45588},{\"end\":45915,\"start\":45860},{\"end\":46364,\"start\":46307},{\"end\":46784,\"start\":46756},{\"end\":47233,\"start\":47168},{\"end\":47741,\"start\":47702},{\"end\":48425,\"start\":48372},{\"end\":48835,\"start\":48729},{\"end\":49441,\"start\":49355},{\"end\":49803,\"start\":49719},{\"end\":50425,\"start\":50383},{\"end\":50713,\"start\":50647},{\"end\":51055,\"start\":50975},{\"end\":51849,\"start\":51779},{\"end\":52379,\"start\":52324},{\"end\":52667,\"start\":52598},{\"end\":53331,\"start\":53247},{\"end\":54351,\"start\":54276},{\"end\":54856,\"start\":54776},{\"end\":55242,\"start\":55202},{\"end\":55436,\"start\":55388},{\"end\":55764,\"start\":55690},{\"end\":56216,\"start\":56162},{\"end\":56585,\"start\":56514},{\"end\":57074,\"start\":57046},{\"end\":57448,\"start\":57409},{\"end\":58062,\"start\":58018},{\"end\":58524,\"start\":58450},{\"end\":59089,\"start\":59013},{\"end\":59478,\"start\":59374},{\"end\":59854,\"start\":59767},{\"end\":60169,\"start\":60124},{\"end\":60689,\"start\":60643},{\"end\":61209,\"start\":61152},{\"end\":61754,\"start\":61720},{\"end\":62280,\"start\":62232},{\"end\":63060,\"start\":63007},{\"end\":63602,\"start\":63540},{\"end\":64192,\"start\":64146},{\"end\":64436,\"start\":64388},{\"end\":64686,\"start\":64641},{\"end\":65237,\"start\":65170},{\"end\":65754,\"start\":65704},{\"end\":66292,\"start\":66200},{\"end\":66802,\"start\":66775},{\"end\":67406,\"start\":67332},{\"end\":68045,\"start\":67997},{\"end\":68714,\"start\":68654},{\"end\":69117,\"start\":69063},{\"end\":69742,\"start\":69665},{\"end\":70238,\"start\":70192},{\"end\":45619,\"start\":45588},{\"end\":45915,\"start\":45860},{\"end\":46364,\"start\":46307},{\"end\":46784,\"start\":46756},{\"end\":47233,\"start\":47168},{\"end\":47741,\"start\":47702},{\"end\":48425,\"start\":48372},{\"end\":48835,\"start\":48729},{\"end\":49441,\"start\":49355},{\"end\":49803,\"start\":49719},{\"end\":50425,\"start\":50383},{\"end\":50713,\"start\":50647},{\"end\":51055,\"start\":50975},{\"end\":51849,\"start\":51779},{\"end\":52379,\"start\":52324},{\"end\":52667,\"start\":52598},{\"end\":53331,\"start\":53247},{\"end\":54351,\"start\":54276},{\"end\":54856,\"start\":54776},{\"end\":55242,\"start\":55202},{\"end\":55436,\"start\":55388},{\"end\":55764,\"start\":55690},{\"end\":56216,\"start\":56162},{\"end\":56585,\"start\":56514},{\"end\":57074,\"start\":57046},{\"end\":57448,\"start\":57409},{\"end\":58062,\"start\":58018},{\"end\":58524,\"start\":58450},{\"end\":59089,\"start\":59013},{\"end\":59478,\"start\":59374},{\"end\":59854,\"start\":59767},{\"end\":60169,\"start\":60124},{\"end\":60689,\"start\":60643},{\"end\":61209,\"start\":61152},{\"end\":61754,\"start\":61720},{\"end\":62280,\"start\":62232},{\"end\":63060,\"start\":63007},{\"end\":63602,\"start\":63540},{\"end\":64192,\"start\":64146},{\"end\":64436,\"start\":64388},{\"end\":64686,\"start\":64641},{\"end\":65237,\"start\":65170},{\"end\":65754,\"start\":65704},{\"end\":66292,\"start\":66200},{\"end\":66802,\"start\":66775},{\"end\":67406,\"start\":67332},{\"end\":68045,\"start\":67997},{\"end\":68714,\"start\":68654},{\"end\":69117,\"start\":69063},{\"end\":69742,\"start\":69665},{\"end\":70238,\"start\":70192}]", "bib_author": "[{\"end\":45638,\"start\":45621},{\"end\":45657,\"start\":45638},{\"end\":45673,\"start\":45657},{\"end\":45689,\"start\":45673},{\"end\":45934,\"start\":45917},{\"end\":46375,\"start\":46366},{\"end\":46385,\"start\":46375},{\"end\":46811,\"start\":46786},{\"end\":46828,\"start\":46811},{\"end\":46834,\"start\":46828},{\"end\":47248,\"start\":47235},{\"end\":47266,\"start\":47248},{\"end\":47279,\"start\":47266},{\"end\":47288,\"start\":47279},{\"end\":47298,\"start\":47288},{\"end\":47759,\"start\":47743},{\"end\":47777,\"start\":47759},{\"end\":47790,\"start\":47777},{\"end\":47804,\"start\":47790},{\"end\":47822,\"start\":47804},{\"end\":47835,\"start\":47822},{\"end\":47848,\"start\":47835},{\"end\":47855,\"start\":47848},{\"end\":47869,\"start\":47855},{\"end\":47887,\"start\":47869},{\"end\":47906,\"start\":47887},{\"end\":48438,\"start\":48427},{\"end\":48451,\"start\":48438},{\"end\":48469,\"start\":48451},{\"end\":48481,\"start\":48469},{\"end\":48850,\"start\":48837},{\"end\":48864,\"start\":48850},{\"end\":49460,\"start\":49443},{\"end\":49481,\"start\":49460},{\"end\":49498,\"start\":49481},{\"end\":49824,\"start\":49805},{\"end\":49835,\"start\":49824},{\"end\":49845,\"start\":49835},{\"end\":49860,\"start\":49845},{\"end\":49870,\"start\":49860},{\"end\":49874,\"start\":49870},{\"end\":50446,\"start\":50427},{\"end\":50457,\"start\":50446},{\"end\":50468,\"start\":50457},{\"end\":50734,\"start\":50715},{\"end\":50745,\"start\":50734},{\"end\":50755,\"start\":50745},{\"end\":51066,\"start\":51057},{\"end\":51078,\"start\":51066},{\"end\":51092,\"start\":51078},{\"end\":51102,\"start\":51092},{\"end\":51307,\"start\":51295},{\"end\":51321,\"start\":51307},{\"end\":51333,\"start\":51321},{\"end\":51346,\"start\":51333},{\"end\":51355,\"start\":51346},{\"end\":51368,\"start\":51355},{\"end\":51381,\"start\":51368},{\"end\":51394,\"start\":51381},{\"end\":51404,\"start\":51394},{\"end\":51418,\"start\":51404},{\"end\":51864,\"start\":51851},{\"end\":51876,\"start\":51864},{\"end\":51885,\"start\":51876},{\"end\":51895,\"start\":51885},{\"end\":52398,\"start\":52381},{\"end\":52410,\"start\":52398},{\"end\":52683,\"start\":52669},{\"end\":52705,\"start\":52683},{\"end\":52723,\"start\":52705},{\"end\":52735,\"start\":52723},{\"end\":53348,\"start\":53333},{\"end\":53362,\"start\":53348},{\"end\":53374,\"start\":53362},{\"end\":53386,\"start\":53374},{\"end\":53399,\"start\":53386},{\"end\":53414,\"start\":53399},{\"end\":53426,\"start\":53414},{\"end\":53441,\"start\":53426},{\"end\":53456,\"start\":53441},{\"end\":53467,\"start\":53456},{\"end\":53480,\"start\":53467},{\"end\":53499,\"start\":53480},{\"end\":54054,\"start\":54037},{\"end\":54073,\"start\":54054},{\"end\":54092,\"start\":54073},{\"end\":54366,\"start\":54353},{\"end\":54382,\"start\":54366},{\"end\":54872,\"start\":54858},{\"end\":54892,\"start\":54872},{\"end\":54906,\"start\":54892},{\"end\":54915,\"start\":54906},{\"end\":54923,\"start\":54915},{\"end\":54930,\"start\":54923},{\"end\":55252,\"start\":55244},{\"end\":55258,\"start\":55252},{\"end\":55451,\"start\":55438},{\"end\":55467,\"start\":55451},{\"end\":55484,\"start\":55467},{\"end\":55782,\"start\":55766},{\"end\":55796,\"start\":55782},{\"end\":55809,\"start\":55796},{\"end\":55823,\"start\":55809},{\"end\":56231,\"start\":56218},{\"end\":56247,\"start\":56231},{\"end\":56601,\"start\":56587},{\"end\":56610,\"start\":56601},{\"end\":56618,\"start\":56610},{\"end\":56633,\"start\":56618},{\"end\":57085,\"start\":57076},{\"end\":57459,\"start\":57450},{\"end\":57480,\"start\":57459},{\"end\":58073,\"start\":58064},{\"end\":58085,\"start\":58073},{\"end\":58108,\"start\":58085},{\"end\":58121,\"start\":58108},{\"end\":58534,\"start\":58526},{\"end\":58553,\"start\":58534},{\"end\":58563,\"start\":58553},{\"end\":58579,\"start\":58563},{\"end\":58587,\"start\":58579},{\"end\":59104,\"start\":59091},{\"end\":59127,\"start\":59104},{\"end\":59144,\"start\":59127},{\"end\":59161,\"start\":59144},{\"end\":59488,\"start\":59480},{\"end\":59505,\"start\":59488},{\"end\":59515,\"start\":59505},{\"end\":59870,\"start\":59856},{\"end\":59883,\"start\":59870},{\"end\":59900,\"start\":59883},{\"end\":60186,\"start\":60171},{\"end\":60204,\"start\":60186},{\"end\":60706,\"start\":60691},{\"end\":60721,\"start\":60706},{\"end\":61234,\"start\":61211},{\"end\":61243,\"start\":61234},{\"end\":61779,\"start\":61756},{\"end\":61788,\"start\":61779},{\"end\":62295,\"start\":62282},{\"end\":62308,\"start\":62295},{\"end\":62321,\"start\":62308},{\"end\":62330,\"start\":62321},{\"end\":63075,\"start\":63062},{\"end\":63088,\"start\":63075},{\"end\":63101,\"start\":63088},{\"end\":63110,\"start\":63101},{\"end\":63617,\"start\":63604},{\"end\":63630,\"start\":63617},{\"end\":63643,\"start\":63630},{\"end\":63658,\"start\":63643},{\"end\":63671,\"start\":63658},{\"end\":63680,\"start\":63671},{\"end\":64207,\"start\":64194},{\"end\":64220,\"start\":64207},{\"end\":64229,\"start\":64220},{\"end\":64448,\"start\":64438},{\"end\":64457,\"start\":64448},{\"end\":64471,\"start\":64457},{\"end\":64486,\"start\":64471},{\"end\":64703,\"start\":64688},{\"end\":64715,\"start\":64703},{\"end\":64727,\"start\":64715},{\"end\":64740,\"start\":64727},{\"end\":64755,\"start\":64740},{\"end\":65251,\"start\":65239},{\"end\":65268,\"start\":65251},{\"end\":65766,\"start\":65756},{\"end\":65777,\"start\":65766},{\"end\":65801,\"start\":65777},{\"end\":65815,\"start\":65801},{\"end\":65825,\"start\":65815},{\"end\":65846,\"start\":65825},{\"end\":65860,\"start\":65846},{\"end\":65864,\"start\":65860},{\"end\":66304,\"start\":66294},{\"end\":66317,\"start\":66304},{\"end\":66330,\"start\":66317},{\"end\":66814,\"start\":66804},{\"end\":66828,\"start\":66814},{\"end\":66840,\"start\":66828},{\"end\":67080,\"start\":67067},{\"end\":67093,\"start\":67080},{\"end\":67106,\"start\":67093},{\"end\":67119,\"start\":67106},{\"end\":67128,\"start\":67119},{\"end\":67416,\"start\":67408},{\"end\":67425,\"start\":67416},{\"end\":67434,\"start\":67425},{\"end\":67441,\"start\":67434},{\"end\":67456,\"start\":67441},{\"end\":67465,\"start\":67456},{\"end\":68060,\"start\":68047},{\"end\":68073,\"start\":68060},{\"end\":68082,\"start\":68073},{\"end\":68515,\"start\":68502},{\"end\":68528,\"start\":68515},{\"end\":68537,\"start\":68528},{\"end\":68729,\"start\":68716},{\"end\":68742,\"start\":68729},{\"end\":68755,\"start\":68742},{\"end\":68764,\"start\":68755},{\"end\":69128,\"start\":69119},{\"end\":69138,\"start\":69128},{\"end\":69152,\"start\":69138},{\"end\":69165,\"start\":69152},{\"end\":69173,\"start\":69165},{\"end\":69181,\"start\":69173},{\"end\":69190,\"start\":69181},{\"end\":69753,\"start\":69744},{\"end\":69767,\"start\":69753},{\"end\":69776,\"start\":69767},{\"end\":69790,\"start\":69776},{\"end\":69800,\"start\":69790},{\"end\":69808,\"start\":69800},{\"end\":69816,\"start\":69808},{\"end\":69825,\"start\":69816},{\"end\":69834,\"start\":69825},{\"end\":70254,\"start\":70240},{\"end\":70263,\"start\":70254},{\"end\":70272,\"start\":70263},{\"end\":70281,\"start\":70272},{\"end\":70289,\"start\":70281},{\"end\":70298,\"start\":70289},{\"end\":70307,\"start\":70298},{\"end\":45638,\"start\":45621},{\"end\":45657,\"start\":45638},{\"end\":45673,\"start\":45657},{\"end\":45689,\"start\":45673},{\"end\":45934,\"start\":45917},{\"end\":46375,\"start\":46366},{\"end\":46385,\"start\":46375},{\"end\":46811,\"start\":46786},{\"end\":46828,\"start\":46811},{\"end\":46834,\"start\":46828},{\"end\":47248,\"start\":47235},{\"end\":47266,\"start\":47248},{\"end\":47279,\"start\":47266},{\"end\":47288,\"start\":47279},{\"end\":47298,\"start\":47288},{\"end\":47759,\"start\":47743},{\"end\":47777,\"start\":47759},{\"end\":47790,\"start\":47777},{\"end\":47804,\"start\":47790},{\"end\":47822,\"start\":47804},{\"end\":47835,\"start\":47822},{\"end\":47848,\"start\":47835},{\"end\":47855,\"start\":47848},{\"end\":47869,\"start\":47855},{\"end\":47887,\"start\":47869},{\"end\":47906,\"start\":47887},{\"end\":48438,\"start\":48427},{\"end\":48451,\"start\":48438},{\"end\":48469,\"start\":48451},{\"end\":48481,\"start\":48469},{\"end\":48850,\"start\":48837},{\"end\":48864,\"start\":48850},{\"end\":49460,\"start\":49443},{\"end\":49481,\"start\":49460},{\"end\":49498,\"start\":49481},{\"end\":49824,\"start\":49805},{\"end\":49835,\"start\":49824},{\"end\":49845,\"start\":49835},{\"end\":49860,\"start\":49845},{\"end\":49870,\"start\":49860},{\"end\":49874,\"start\":49870},{\"end\":50446,\"start\":50427},{\"end\":50457,\"start\":50446},{\"end\":50468,\"start\":50457},{\"end\":50734,\"start\":50715},{\"end\":50745,\"start\":50734},{\"end\":50755,\"start\":50745},{\"end\":51066,\"start\":51057},{\"end\":51078,\"start\":51066},{\"end\":51092,\"start\":51078},{\"end\":51102,\"start\":51092},{\"end\":51307,\"start\":51295},{\"end\":51321,\"start\":51307},{\"end\":51333,\"start\":51321},{\"end\":51346,\"start\":51333},{\"end\":51355,\"start\":51346},{\"end\":51368,\"start\":51355},{\"end\":51381,\"start\":51368},{\"end\":51394,\"start\":51381},{\"end\":51404,\"start\":51394},{\"end\":51418,\"start\":51404},{\"end\":51864,\"start\":51851},{\"end\":51876,\"start\":51864},{\"end\":51885,\"start\":51876},{\"end\":51895,\"start\":51885},{\"end\":52398,\"start\":52381},{\"end\":52410,\"start\":52398},{\"end\":52683,\"start\":52669},{\"end\":52705,\"start\":52683},{\"end\":52723,\"start\":52705},{\"end\":52735,\"start\":52723},{\"end\":53348,\"start\":53333},{\"end\":53362,\"start\":53348},{\"end\":53374,\"start\":53362},{\"end\":53386,\"start\":53374},{\"end\":53399,\"start\":53386},{\"end\":53414,\"start\":53399},{\"end\":53426,\"start\":53414},{\"end\":53441,\"start\":53426},{\"end\":53456,\"start\":53441},{\"end\":53467,\"start\":53456},{\"end\":53480,\"start\":53467},{\"end\":53499,\"start\":53480},{\"end\":54054,\"start\":54037},{\"end\":54073,\"start\":54054},{\"end\":54092,\"start\":54073},{\"end\":54366,\"start\":54353},{\"end\":54382,\"start\":54366},{\"end\":54872,\"start\":54858},{\"end\":54892,\"start\":54872},{\"end\":54906,\"start\":54892},{\"end\":54915,\"start\":54906},{\"end\":54923,\"start\":54915},{\"end\":54930,\"start\":54923},{\"end\":55252,\"start\":55244},{\"end\":55258,\"start\":55252},{\"end\":55451,\"start\":55438},{\"end\":55467,\"start\":55451},{\"end\":55484,\"start\":55467},{\"end\":55782,\"start\":55766},{\"end\":55796,\"start\":55782},{\"end\":55809,\"start\":55796},{\"end\":55823,\"start\":55809},{\"end\":56231,\"start\":56218},{\"end\":56247,\"start\":56231},{\"end\":56601,\"start\":56587},{\"end\":56610,\"start\":56601},{\"end\":56618,\"start\":56610},{\"end\":56633,\"start\":56618},{\"end\":57085,\"start\":57076},{\"end\":57459,\"start\":57450},{\"end\":57480,\"start\":57459},{\"end\":58073,\"start\":58064},{\"end\":58085,\"start\":58073},{\"end\":58108,\"start\":58085},{\"end\":58121,\"start\":58108},{\"end\":58534,\"start\":58526},{\"end\":58553,\"start\":58534},{\"end\":58563,\"start\":58553},{\"end\":58579,\"start\":58563},{\"end\":58587,\"start\":58579},{\"end\":59104,\"start\":59091},{\"end\":59127,\"start\":59104},{\"end\":59144,\"start\":59127},{\"end\":59161,\"start\":59144},{\"end\":59488,\"start\":59480},{\"end\":59505,\"start\":59488},{\"end\":59515,\"start\":59505},{\"end\":59870,\"start\":59856},{\"end\":59883,\"start\":59870},{\"end\":59900,\"start\":59883},{\"end\":60186,\"start\":60171},{\"end\":60204,\"start\":60186},{\"end\":60706,\"start\":60691},{\"end\":60721,\"start\":60706},{\"end\":61234,\"start\":61211},{\"end\":61243,\"start\":61234},{\"end\":61779,\"start\":61756},{\"end\":61788,\"start\":61779},{\"end\":62295,\"start\":62282},{\"end\":62308,\"start\":62295},{\"end\":62321,\"start\":62308},{\"end\":62330,\"start\":62321},{\"end\":63075,\"start\":63062},{\"end\":63088,\"start\":63075},{\"end\":63101,\"start\":63088},{\"end\":63110,\"start\":63101},{\"end\":63617,\"start\":63604},{\"end\":63630,\"start\":63617},{\"end\":63643,\"start\":63630},{\"end\":63658,\"start\":63643},{\"end\":63671,\"start\":63658},{\"end\":63680,\"start\":63671},{\"end\":64207,\"start\":64194},{\"end\":64220,\"start\":64207},{\"end\":64229,\"start\":64220},{\"end\":64448,\"start\":64438},{\"end\":64457,\"start\":64448},{\"end\":64471,\"start\":64457},{\"end\":64486,\"start\":64471},{\"end\":64703,\"start\":64688},{\"end\":64715,\"start\":64703},{\"end\":64727,\"start\":64715},{\"end\":64740,\"start\":64727},{\"end\":64755,\"start\":64740},{\"end\":65251,\"start\":65239},{\"end\":65268,\"start\":65251},{\"end\":65766,\"start\":65756},{\"end\":65777,\"start\":65766},{\"end\":65801,\"start\":65777},{\"end\":65815,\"start\":65801},{\"end\":65825,\"start\":65815},{\"end\":65846,\"start\":65825},{\"end\":65860,\"start\":65846},{\"end\":65864,\"start\":65860},{\"end\":66304,\"start\":66294},{\"end\":66317,\"start\":66304},{\"end\":66330,\"start\":66317},{\"end\":66814,\"start\":66804},{\"end\":66828,\"start\":66814},{\"end\":66840,\"start\":66828},{\"end\":67080,\"start\":67067},{\"end\":67093,\"start\":67080},{\"end\":67106,\"start\":67093},{\"end\":67119,\"start\":67106},{\"end\":67128,\"start\":67119},{\"end\":67416,\"start\":67408},{\"end\":67425,\"start\":67416},{\"end\":67434,\"start\":67425},{\"end\":67441,\"start\":67434},{\"end\":67456,\"start\":67441},{\"end\":67465,\"start\":67456},{\"end\":68060,\"start\":68047},{\"end\":68073,\"start\":68060},{\"end\":68082,\"start\":68073},{\"end\":68515,\"start\":68502},{\"end\":68528,\"start\":68515},{\"end\":68537,\"start\":68528},{\"end\":68729,\"start\":68716},{\"end\":68742,\"start\":68729},{\"end\":68755,\"start\":68742},{\"end\":68764,\"start\":68755},{\"end\":69128,\"start\":69119},{\"end\":69138,\"start\":69128},{\"end\":69152,\"start\":69138},{\"end\":69165,\"start\":69152},{\"end\":69173,\"start\":69165},{\"end\":69181,\"start\":69173},{\"end\":69190,\"start\":69181},{\"end\":69753,\"start\":69744},{\"end\":69767,\"start\":69753},{\"end\":69776,\"start\":69767},{\"end\":69790,\"start\":69776},{\"end\":69800,\"start\":69790},{\"end\":69808,\"start\":69800},{\"end\":69816,\"start\":69808},{\"end\":69825,\"start\":69816},{\"end\":69834,\"start\":69825},{\"end\":70254,\"start\":70240},{\"end\":70263,\"start\":70254},{\"end\":70272,\"start\":70263},{\"end\":70281,\"start\":70272},{\"end\":70289,\"start\":70281},{\"end\":70298,\"start\":70289},{\"end\":70307,\"start\":70298}]", "bib_venue": "[{\"end\":45705,\"start\":45689},{\"end\":46017,\"start\":45934},{\"end\":46467,\"start\":46385},{\"end\":46908,\"start\":46834},{\"end\":47375,\"start\":47298},{\"end\":47976,\"start\":47906},{\"end\":48539,\"start\":48481},{\"end\":48968,\"start\":48864},{\"end\":49514,\"start\":49498},{\"end\":49976,\"start\":49874},{\"end\":50498,\"start\":50468},{\"end\":50796,\"start\":50755},{\"end\":51118,\"start\":51102},{\"end\":51514,\"start\":51434},{\"end\":51984,\"start\":51895},{\"end\":52446,\"start\":52410},{\"end\":52824,\"start\":52735},{\"end\":53562,\"start\":53499},{\"end\":54035,\"start\":53959},{\"end\":54465,\"start\":54382},{\"end\":54973,\"start\":54930},{\"end\":55280,\"start\":55258},{\"end\":55522,\"start\":55484},{\"end\":55873,\"start\":55823},{\"end\":56303,\"start\":56247},{\"end\":56717,\"start\":56633},{\"end\":57166,\"start\":57085},{\"end\":57618,\"start\":57480},{\"end\":58160,\"start\":58121},{\"end\":58667,\"start\":58587},{\"end\":59180,\"start\":59161},{\"end\":59553,\"start\":59515},{\"end\":59927,\"start\":59900},{\"end\":60308,\"start\":60204},{\"end\":60823,\"start\":60721},{\"end\":61358,\"start\":61243},{\"end\":61895,\"start\":61788},{\"end\":62505,\"start\":62330},{\"end\":63205,\"start\":63110},{\"end\":63770,\"start\":63680},{\"end\":64245,\"start\":64229},{\"end\":64496,\"start\":64486},{\"end\":64839,\"start\":64755},{\"end\":65364,\"start\":65268},{\"end\":65920,\"start\":65864},{\"end\":66420,\"start\":66330},{\"end\":66867,\"start\":66840},{\"end\":67065,\"start\":66998},{\"end\":67555,\"start\":67465},{\"end\":68162,\"start\":68082},{\"end\":68500,\"start\":68449},{\"end\":68823,\"start\":68764},{\"end\":69292,\"start\":69190},{\"end\":69893,\"start\":69834},{\"end\":70382,\"start\":70307},{\"end\":45705,\"start\":45689},{\"end\":46017,\"start\":45934},{\"end\":46467,\"start\":46385},{\"end\":46908,\"start\":46834},{\"end\":47375,\"start\":47298},{\"end\":47976,\"start\":47906},{\"end\":48539,\"start\":48481},{\"end\":48968,\"start\":48864},{\"end\":49514,\"start\":49498},{\"end\":49976,\"start\":49874},{\"end\":50498,\"start\":50468},{\"end\":50796,\"start\":50755},{\"end\":51118,\"start\":51102},{\"end\":51514,\"start\":51434},{\"end\":51984,\"start\":51895},{\"end\":52446,\"start\":52410},{\"end\":52824,\"start\":52735},{\"end\":53562,\"start\":53499},{\"end\":54035,\"start\":53959},{\"end\":54465,\"start\":54382},{\"end\":54973,\"start\":54930},{\"end\":55280,\"start\":55258},{\"end\":55522,\"start\":55484},{\"end\":55873,\"start\":55823},{\"end\":56303,\"start\":56247},{\"end\":56717,\"start\":56633},{\"end\":57166,\"start\":57085},{\"end\":57618,\"start\":57480},{\"end\":58160,\"start\":58121},{\"end\":58667,\"start\":58587},{\"end\":59180,\"start\":59161},{\"end\":59553,\"start\":59515},{\"end\":59927,\"start\":59900},{\"end\":60308,\"start\":60204},{\"end\":60823,\"start\":60721},{\"end\":61358,\"start\":61243},{\"end\":61895,\"start\":61788},{\"end\":62505,\"start\":62330},{\"end\":63205,\"start\":63110},{\"end\":63770,\"start\":63680},{\"end\":64245,\"start\":64229},{\"end\":64496,\"start\":64486},{\"end\":64839,\"start\":64755},{\"end\":65364,\"start\":65268},{\"end\":65920,\"start\":65864},{\"end\":66420,\"start\":66330},{\"end\":66867,\"start\":66840},{\"end\":67065,\"start\":66998},{\"end\":67555,\"start\":67465},{\"end\":68162,\"start\":68082},{\"end\":68500,\"start\":68449},{\"end\":68823,\"start\":68764},{\"end\":69292,\"start\":69190},{\"end\":69893,\"start\":69834},{\"end\":70382,\"start\":70307},{\"end\":46104,\"start\":46019},{\"end\":46552,\"start\":46469},{\"end\":46978,\"start\":46910},{\"end\":47451,\"start\":47377},{\"end\":48049,\"start\":47978},{\"end\":49072,\"start\":48970},{\"end\":49526,\"start\":49516},{\"end\":50078,\"start\":49978},{\"end\":52072,\"start\":51986},{\"end\":52937,\"start\":52836},{\"end\":53612,\"start\":53564},{\"end\":54545,\"start\":54467},{\"end\":55927,\"start\":55875},{\"end\":56322,\"start\":56305},{\"end\":56798,\"start\":56719},{\"end\":57246,\"start\":57168},{\"end\":57760,\"start\":57620},{\"end\":58194,\"start\":58162},{\"end\":58749,\"start\":58669},{\"end\":60413,\"start\":60310},{\"end\":60925,\"start\":60825},{\"end\":61471,\"start\":61360},{\"end\":62007,\"start\":61897},{\"end\":62683,\"start\":62507},{\"end\":63298,\"start\":63207},{\"end\":63856,\"start\":63772},{\"end\":64257,\"start\":64247},{\"end\":64502,\"start\":64498},{\"end\":64923,\"start\":64841},{\"end\":65463,\"start\":65366},{\"end\":65936,\"start\":65922},{\"end\":66509,\"start\":66422},{\"end\":67678,\"start\":67589},{\"end\":68239,\"start\":68164},{\"end\":68842,\"start\":68825},{\"end\":69391,\"start\":69294},{\"end\":69912,\"start\":69895},{\"end\":70444,\"start\":70384},{\"end\":46104,\"start\":46019},{\"end\":46552,\"start\":46469},{\"end\":46978,\"start\":46910},{\"end\":47451,\"start\":47377},{\"end\":48049,\"start\":47978},{\"end\":49072,\"start\":48970},{\"end\":49526,\"start\":49516},{\"end\":50078,\"start\":49978},{\"end\":52072,\"start\":51986},{\"end\":52937,\"start\":52836},{\"end\":53612,\"start\":53564},{\"end\":54545,\"start\":54467},{\"end\":55927,\"start\":55875},{\"end\":56322,\"start\":56305},{\"end\":56798,\"start\":56719},{\"end\":57246,\"start\":57168},{\"end\":57760,\"start\":57620},{\"end\":58194,\"start\":58162},{\"end\":58749,\"start\":58669},{\"end\":60413,\"start\":60310},{\"end\":60925,\"start\":60825},{\"end\":61471,\"start\":61360},{\"end\":62007,\"start\":61897},{\"end\":62683,\"start\":62507},{\"end\":63298,\"start\":63207},{\"end\":63856,\"start\":63772},{\"end\":64257,\"start\":64247},{\"end\":64502,\"start\":64498},{\"end\":64923,\"start\":64841},{\"end\":65463,\"start\":65366},{\"end\":65936,\"start\":65922},{\"end\":66509,\"start\":66422},{\"end\":67678,\"start\":67589},{\"end\":68239,\"start\":68164},{\"end\":68842,\"start\":68825},{\"end\":69391,\"start\":69294},{\"end\":69912,\"start\":69895},{\"end\":70444,\"start\":70384}]"}}}, "year": 2023, "month": 12, "day": 17}