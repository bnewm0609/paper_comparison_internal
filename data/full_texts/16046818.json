{"id": 16046818, "updated": "2023-09-27 22:56:46.239", "metadata": {"title": "Trust Region Policy Optimization", "authors": "[{\"first\":\"John\",\"last\":\"Schulman\",\"middle\":[]},{\"first\":\"Sergey\",\"last\":\"Levine\",\"middle\":[]},{\"first\":\"Philipp\",\"last\":\"Moritz\",\"middle\":[]},{\"first\":\"Michael\",\"last\":\"Jordan\",\"middle\":[\"I.\"]},{\"first\":\"Pieter\",\"last\":\"Abbeel\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2015, "month": 2, "day": 19}, "abstract": "We describe a iterative procedure for optimizing policies, with guaranteed monotonic improvement. By making several approximations to the theoretically-justified procedure, we develop a practical algorithm, called Trust Region Policy Optimization (TRPO). This algorithm is similar to natural policy gradient methods and is effective for optimizing large nonlinear policies such as neural networks. Our experiments demonstrate its robust performance on a wide variety of tasks: learning simulated robotic swimming, hopping, and walking gaits; and playing Atari games using images of the screen as input. Despite its approximations that deviate from the theory, TRPO tends to give monotonic improvement, with little tuning of hyperparameters.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1502.05477", "mag": "2949608212", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/SchulmanLMJA15", "doi": null}}, "content": {"source": {"pdf_hash": "f89836ec2958c60c2035d4098fb17238d9485cf6", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1502.05477v4.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "01c4916f262cff0234eadf4893683db623d7a79c", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/f89836ec2958c60c2035d4098fb17238d9485cf6.txt", "contents": "\nTrust Region Policy Optimization\n\n\nJohn Schulman \nDepartment of Electrical Engineering and Computer Sciences\nUniversity of California\nBerkeley\n\nSergey Levine slevine@eecs.berkeley.edu \nDepartment of Electrical Engineering and Computer Sciences\nUniversity of California\nBerkeley\n\nPhilipp Moritz pcmoritz@eecs.berkeley.edu \nDepartment of Electrical Engineering and Computer Sciences\nUniversity of California\nBerkeley\n\nMichael Jordan jordan@cs.berkeley.edu \nDepartment of Electrical Engineering and Computer Sciences\nUniversity of California\nBerkeley\n\nPieter Abbeel pabbeel@cs.berkeley.edu \nDepartment of Electrical Engineering and Computer Sciences\nUniversity of California\nBerkeley\n\nTrust Region Policy Optimization\n\nWe describe a iterative procedure for optimizing policies, with guaranteed monotonic improvement. By making several approximations to the theoretically-justified procedure, we develop a practical algorithm, called Trust Region Policy Optimization (TRPO). This algorithm is similar to natural policy gradient methods and is effective for optimizing large nonlinear policies such as neural networks. Our experiments demonstrate its robust performance on a wide variety of tasks: learning simulated robotic swimming, hopping, and walking gaits; and playing Atari games using images of the screen as input. Despite its approximations that deviate from the theory, TRPO tends to give monotonic improvement, with little tuning of hyperparameters.\n\nIntroduction\n\nMost algorithms for policy optimization can be classified into three broad categories: (1) policy iteration methods, which alternate between estimating the value function under the current policy and improving the policy (Bertsekas, 2005); (2) policy gradient methods, which use an estimator of the gradient of the expected return (total reward) obtained from sample trajectories (Peters & Schaal, 2008a) (and which, as we later discuss, have a close connection to policy iteration); and (3) derivative-free optimization methods, such as the cross-entropy method (CEM) and covariance matrix adaptation (CMA), which treat the return as a black box function to be optimized in terms of the policy parameters (Szita & L\u00f6rincz, 2006).\n\nGeneral derivative-free stochastic optimization methods such as CEM and CMA are preferred on many problems, because they achieve good results while being simple to understand and implement. For example, while Tetris is a classic benchmark problem for approximate dynamic programming (ADP) methods, stochastic optimization methods are difficult to beat on this task (Gabillon et al., 2013). For continuous control problems, methods like CMA have been successful at learning control policies for challenging tasks like locomotion when provided with hand-engineered policy classes with low-dimensional parameterizations (Wampler & Popovi\u0107, 2009). The inability of ADP and gradient-based methods to consistently beat gradient-free random search is unsatisfying, since gradient-based optimization algorithms enjoy much better sample complexity guarantees than gradient-free methods (Nemirovski, 2005). Continuous gradient-based optimization has been very successful at learning function approximators for supervised learning tasks with huge numbers of parameters, and extending their success to reinforcement learning would allow for efficient training of complex and powerful policies.\n\nIn this article, we first prove that minimizing a certain surrogate objective function guarantees policy improvement with non-trivial step sizes. Then we make a series of approximations to the theoretically-justified algorithm, yielding a practical algorithm, which we call trust region policy optimization (TRPO). We describe two variants of this algorithm: first, the single-path method, which can be applied in the model-free setting; second, the vine method, which requires the system to be restored to particular states, which is typically only possible in simulation. These algorithms are scalable and can optimize nonlinear policies with tens of thousands of parameters, which have previously posed a major challenge for model-free policy search (Deisenroth et al., 2013). In our experiments, we show that the same TRPO methods can learn complex policies for swimming, hopping, and walking, as well as playing Atari games directly from raw images.\n\n\nPreliminaries\n\nConsider an infinite-horizon discounted Markov decision process (MDP), defined by the tuple (S, A, P, r, \u03c1 0 , \u03b3), where S is a finite set of states, A is a finite set of actions, P : S \u00d7 A \u00d7 S \u2192 R is the transition probability distri-arXiv:1502.05477v4 [cs.LG] 6 Jun 2016\n\nTrust Region Policy Optimization bution, r : S \u2192 R is the reward function, \u03c1 0 : S \u2192 R is the distribution of the initial state s 0 , and \u03b3 \u2208 (0, 1) is the discount factor.\n\nLet \u03c0 denote a stochastic policy \u03c0 : S \u00d7 A \u2192 [0, 1], and let \u03b7(\u03c0) denote its expected discounted reward: \u03b7(\u03c0) = E s0,a0,... \u221e t=0 \u03b3 t r(s t ) , where s 0 \u223c \u03c1 0 (s 0 ), a t \u223c \u03c0(a t |s t ), s t+1 \u223c P (s t+1 |s t , a t ).\n\nWe will use the following standard definitions of the stateaction value function Q \u03c0 , the value function V \u03c0 , and the advantage function A \u03c0 : Q \u03c0 (s t , a t ) = E st+1,at+1,... \u221e l=0 \u03b3 l r(s t+l ) , V \u03c0 (s t ) = E at,st+1,... \u221e l=0 \u03b3 l r(s t+l ) , A \u03c0 (s, a) = Q \u03c0 (s, a) \u2212 V \u03c0 (s), where a t \u223c \u03c0(a t |s t ), s t+1 \u223c P (s t+1 |s t , a t ) for t \u2265 0.\n\nThe following useful identity expresses the expected return of another policy\u03c0 in terms of the advantage over \u03c0, accumulated over timesteps (see Kakade & Langford (2002) or Appendix A for proof):\n\n\u03b7(\u03c0) = \u03b7(\u03c0) + E s0,a0,\u00b7\u00b7\u00b7\u223c\u03c0 \u221e t=0 \u03b3 t A \u03c0 (s t , a t ) (1)\n\nwhere the notation E s0,a0,\u00b7\u00b7\u00b7\u223c\u03c0 [. . . ] indicates that actions are sampled a t \u223c\u03c0(\u00b7|s t ). Let \u03c1 \u03c0 be the (unnormalized) discounted visitation frequencies \u03c1 \u03c0 (s) = P (s 0 = s)+\u03b3P (s 1 = s)+\u03b3 2 P (s 2 = s)+. . . ,\n\nwhere s 0 \u223c \u03c1 0 and the actions are chosen according to \u03c0. We can rewrite Equation (1) with a sum over states instead of timesteps:\n\u03b7(\u03c0) = \u03b7(\u03c0) + \u221e t=0 s P (s t = s|\u03c0) a\u03c0 (a|s)\u03b3 t A \u03c0 (s, a) = \u03b7(\u03c0) + s \u221e t=0 \u03b3 t P (s t = s|\u03c0) a\u03c0 (a|s)A \u03c0 (s, a) = \u03b7(\u03c0) + s \u03c1\u03c0(s) a\u03c0 (a|s)A \u03c0 (s, a).(2)\nThis equation implies that any policy update \u03c0 \u2192\u03c0 that has a nonnegative expected advantage at every state s, i.e., a\u03c0 (a|s)A \u03c0 (s, a) \u2265 0, is guaranteed to increase the policy performance \u03b7, or leave it constant in the case that the expected advantage is zero everywhere. This implies the classic result that the update performed by exact policy iteration, which uses the deterministic policy\u03c0 (s) = arg max a A \u03c0 (s, a), improves the policy if there is at least one state-action pair with a positive advantage value and nonzero state visitation probability, otherwise the algorithm has converged to the optimal policy. However, in the approximate setting, it will typically be unavoidable, due to estimation and approximation error, that there will be some states s for which the expected advantage is negative, that is, a\u03c0 (a|s)A \u03c0 (s, a) < 0. The complex dependency of \u03c1\u03c0(s) on\u03c0 makes Equation (2) difficult to optimize directly. Instead, we introduce the following local approximation to \u03b7:\nL \u03c0 (\u03c0) = \u03b7(\u03c0) + s \u03c1 \u03c0 (s) a\u03c0 (a|s)A \u03c0 (s, a).(3)\nNote that L \u03c0 uses the visitation frequency \u03c1 \u03c0 rather than \u03c1\u03c0, ignoring changes in state visitation density due to changes in the policy. However, if we have a parameterized policy \u03c0 \u03b8 , where \u03c0 \u03b8 (a|s) is a differentiable function of the parameter vector \u03b8, then L \u03c0 matches \u03b7 to first order (see Kakade & Langford (2002)). That is, for any parameter value \u03b8 0 ,\nL \u03c0 \u03b8 0 (\u03c0 \u03b80 ) = \u03b7(\u03c0 \u03b80 ), \u2207 \u03b8 L \u03c0 \u03b8 0 (\u03c0 \u03b8 ) \u03b8=\u03b80 = \u2207 \u03b8 \u03b7(\u03c0 \u03b8 ) \u03b8=\u03b80 .(4)\nEquation (4) implies that a sufficiently small step \u03c0 \u03b80 \u2192\u03c0 that improves L \u03c0 \u03b8 old will also improve \u03b7, but does not give us any guidance on how big of a step to take.\n\nTo address this issue, Kakade & Langford (2002) proposed a policy updating scheme called conservative policy iteration, for which they could provide explicit lower bounds on the improvement of \u03b7. To define the conservative policy iteration update, let \u03c0 old denote the current policy, and let \u03c0 = arg min \u03c0 L \u03c0 old (\u03c0 ). The new policy \u03c0 new was defined to be the following mixture:\n\n\u03c0 new (a|s) = (1 \u2212 \u03b1)\u03c0 old (a|s) + \u03b1\u03c0 (a|s).\n\nKakade and Langford proved the following result for this update:\n\u03b7(\u03c0 new ) \u2265 L \u03c0 old (\u03c0 new )\u2212 2 \u03b3 (1 \u2212 \u03b3(1 \u2212 \u03b1))(1 \u2212 \u03b3) \u03b1 2 , where = max s |E a\u223c\u03c0 (a|s) [A \u03c0 (s, a)]|(6)\nSince \u03b1, \u03b3 \u2208 [0, 1], Equation (6) implies the following simpler bound, which we refer to in the next section:\n\u03b7(\u03c0 new ) \u2265 L \u03c0 old (\u03c0 new ) \u2212 2 \u03b3 (1 \u2212 \u03b3) 2 \u03b1 2 .(7)\nThe simpler bound is only slightly weaker when \u03b1 1, which is typically the case in the conservative policy iteration method of Kakade & Langford (2002). Note, however, that so far this bound only applies to mixture policies generated by Equation (5). This policy class is unwieldy and restrictive in practice, and it is desirable for a practical policy update scheme to be applicable to all general stochastic policy classes.\n\n\nMonotonic Improvement Guarantee for General Stochastic Policies\n\nEquation (6), which applies to conservative policy iteration, implies that a policy update that improves the righthand side is guaranteed to improve the true performance \u03b7. Our principal theoretical result is that the policy improvement bound in Equation (6) can be extended to general stochastic policies, rather than just mixture polices, by replacing \u03b1 with a distance measure between \u03c0 and \u03c0. Since mixture policies are rarely used in practice, this result is crucial for extending the improvement guarantee to practical problems. The particular distance measure we use is the total variation divergence, which is defined by\nD T V (p q) = 1 2 i |p i \u2212 q i | for discrete probability dis- tributions p, q. 1 Define D max TV (\u03c0,\u03c0) as D max TV (\u03c0,\u03c0) = max s D T V (\u03c0(\u00b7|s) \u03c0(\u00b7|s)).(8)\nTheorem 1. Let \u03b1 = D max TV (\u03c0 old , \u03c0 new ). Then Equation (7) holds.\n\nWe provide two proofs in the appendix. The first proof extends Kakade and Langford's result using the fact that the random variables from two distributions with total variation divergence less than \u03b1 can be coupled, so that they are equal with probability 1 \u2212 \u03b1. The second proof uses perturbation theory to prove a slightly stronger version of Equation (7), with a more favorable definition of that depends on\u03c0.\n\nNext, we note the following relationship between the total variation divergence and the KL divergence (Pollard (2000), Ch. 3): D T V (p q) 2 \u2264 D KL (p q). Let D max KL (\u03c0,\u03c0) = max s D KL (\u03c0(\u00b7|s) \u03c0(\u00b7|s)). The following bound then follows directly from Equation (7):\n\u03b7(\u03c0) \u2265 L \u03c0 (\u03c0) \u2212 CD max KL (\u03c0,\u03c0), where C = 2 \u03b3 (1 \u2212 \u03b3) 2 .(9)\nAlgorithm 1 describes an approximate policy iteration scheme based on the policy improvement bound in Equation (9). Note that for now, we assume exact evaluation of the advantage values A \u03c0 . Algorithm 1 uses a constant \u2264 that is simpler to describe in terms of measurable quantities.\n\nIt follows from Equation (9) that Algorithm 1 is guaranteed to generate a monotonically improving sequence of policies \u03b7(\u03c0 0 ) \u2264 \u03b7(\u03c0 1 ) \u2264 \u03b7(\u03c0 2 ) \u2264 . . . . To see this, let M i (\u03c0) = L \u03c0i (\u03c0) \u2212 CD max KL (\u03c0 i , \u03c0). Then \u03b7(\u03c0 i+1 ) \u2265 M i (\u03c0 i+1 ) by Equation (9) \u03b7(\u03c0 i ) = M i (\u03c0 i ), therefore,\n\u03b7(\u03c0 i+1 ) \u2212 \u03b7(\u03c0 i ) \u2265 M i (\u03c0 i+1 ) \u2212 M (\u03c0 i ).(10)\nAlgorithm 1 Approximate policy iteration algorithm guaranteeing non-decreasing expected return \u03b7 Initialize \u03c0 0 . for i = 0, 1, 2, . . . until convergence do Compute all advantage values A \u03c0i (s, a). Solve the constrained optimization problem\n\u03c0 i+1 = arg max \u03c0 L \u03c0i (\u03c0) \u2212 2 \u03b3 (1 \u2212 \u03b3) 2 D max KL (\u03c0 i , \u03c0) where = max s max a |A \u03c0 (s, a)| and L \u03c0i (\u03c0) = \u03b7(\u03c0 i )+ s \u03c1 \u03c0i (s) a \u03c0(a|s)A \u03c0i (s, a)\n\nend for\n\nThus, by maximizing M i at each iteration, we guarantee that the true objective \u03b7 is non-decreasing. This algorithm is a type of minorization-maximization (MM) algorithm (Hunter & Lange, 2004), which is a class of methods that also includes expectation maximization. In the terminology of MM algorithms, M i is the surrogate function that minorizes \u03b7 with equality at \u03c0 i . This algorithm is also reminiscent of proximal gradient methods and mirror descent.\n\nTrust region policy optimization, which we propose in the following section, is an approximation to Algorithm 1, which uses a constraint on the KL divergence rather than a penalty to robustly allow large updates.\n\n\nOptimization of Parameterized Policies\n\nIn the previous section, we considered the policy optimization problem independently of the parameterization of \u03c0 and under the assumption that the policy can be evaluated at all states. We now describe how to derive a practical algorithm from these theoretical foundations, under finite sample counts and arbitrary parameterizations.\n\nSince we consider parameterized policies \u03c0 \u03b8 (a|s) with parameter vector \u03b8, we will overload our previous notation to use functions of \u03b8 rather than \u03c0, e.g. \u03b7(\u03b8) := \u03b7(\u03c0 \u03b8 ), L \u03b8 (\u03b8) := L \u03c0 \u03b8 (\u03c0\u03b8), and D KL (\u03b8 \u03b8 ) := D KL (\u03c0 \u03b8 \u03c0\u03b8). We will use \u03b8 old to denote the previous policy parameters that we want to improve upon.\n\nThe preceding section showed that \u03b7(\u03b8) \u2265 L \u03b8 old (\u03b8) \u2212 CD max KL (\u03b8 old , \u03b8), with equality at \u03b8 = \u03b8 old . Thus, by performing the following maximization, we are guaranteed to improve the true objective \u03b7:\nmaximize \u03b8 [L \u03b8 old (\u03b8) \u2212 CD max KL (\u03b8 old , \u03b8)] .\nIn practice, if we used the penalty coefficient C recommended by the theory above, the step sizes would be very small. One way to take larger steps in a robust way is to use a constraint on the KL divergence between the new policy and the old policy, i.e., a trust region constraint:\nmaximize \u03b8 L \u03b8 old (\u03b8)(11)\nsubject to D max KL (\u03b8 old , \u03b8) \u2264 \u03b4. This problem imposes a constraint that the KL divergence is bounded at every point in the state space. While it is motivated by the theory, this problem is impractical to solve due to the large number of constraints. Instead, we can use a heuristic approximation which considers the average KL divergence:\nD \u03c1 KL (\u03b8 1 , \u03b8 2 ) := E s\u223c\u03c1 [D KL (\u03c0 \u03b81 (\u00b7|s) \u03c0 \u03b82 (\u00b7|s))] .\nWe therefore propose solving the following optimization problem to generate a policy update:\nmaximize \u03b8 L \u03b8 old (\u03b8)(12)\nsubject to D \u03c1 \u03b8 old KL (\u03b8 old , \u03b8) \u2264 \u03b4. Similar policy updates have been proposed in prior work (Bagnell & Schneider, 2003;Peters & Schaal, 2008b;Peters et al., 2010), and we compare our approach to prior methods in Section 7 and in the experiments in Section 8. Our experiments also show that this type of constrained update has similar empirical performance to the maximum KL divergence constraint in Equation (11).\n\n\nSample-Based Estimation of the Objective and Constraint\n\nThe previous section proposed a constrained optimization problem on the policy parameters (Equation (12)), which optimizes an estimate of the expected total reward \u03b7 subject to a constraint on the change in the policy at each update. This section describes how the objective and constraint functions can be approximated using Monte Carlo simulation.\n\nWe seek to solve the following optimization problem, obtained by expanding L \u03b8 old in Equation (12):\nmaximize \u03b8 s \u03c1 \u03b8 old (s) a \u03c0 \u03b8 (a|s)A \u03b8 old (s, a) subject to D \u03c1 \u03b8 old KL (\u03b8 old , \u03b8) \u2264 \u03b4.(13)\nWe first replace s \u03c1 \u03b8 old (s) [. . . ] in the objective by the ex-\npectation 1 1\u2212\u03b3 E s\u223c\u03c1 \u03b8 old [. . . ].\nNext, we replace the advantage values A \u03b8 old by the Q-values Q \u03b8 old in Equation (13), which only changes the objective by a constant. Last, we replace the sum over the actions by an importance sampling estimator. Using q to denote the sampling distribution, the contribution of a single s n to the loss function is a \u03c0 \u03b8 (a|s n )A \u03b8 old (s n , a) = E a\u223cq \u03c0 \u03b8 (a|s n ) q(a|s n ) A \u03b8 old (s n , a) . Here, we generate a set of trajectories via simulation of the policy and incorporate all state-action pairs (sn, an) into the objective. Right: illustration of vine procedure. We generate a set of \"trunk\" trajectories, and then generate \"branch\" rollouts from a subset of the reached states. For each of these states sn, we perform multiple actions (a1 and a2 here) and perform a rollout after each action, using common random numbers (CRN) to reduce the variance.\n\nOur optimization problem in Equation (13) is exactly equivalent to the following one, written in terms of expectations:\nmaximize \u03b8 E s\u223c\u03c1 \u03b8 old ,a\u223cq \u03c0 \u03b8 (a|s) q(a|s) Q \u03b8 old (s, a)(14)\nsubject to E s\u223c\u03c1 \u03b8 old [D KL (\u03c0 \u03b8 old (\u00b7|s) \u03c0 \u03b8 (\u00b7|s))] \u2264 \u03b4.\n\nAll that remains is to replace the expectations by sample averages and replace the Q value by an empirical estimate. The following sections describe two different schemes for performing this estimation.\n\nThe first sampling scheme, which we call single path, is the one that is typically used for policy gradient estimation (Bartlett & Baxter, 2011), and is based on sampling individual trajectories. The second scheme, which we call vine, involves constructing a rollout set and then performing multiple actions from each state in the rollout set. This method has mostly been explored in the context of policy iteration methods (Lagoudakis & Parr, 2003;Gabillon et al., 2013).\n\n\nSingle Path\n\nIn this estimation procedure, we collect a sequence of states by sampling s 0 \u223c \u03c1 0 and then simulating the policy \u03c0 \u03b8 old for some number of timesteps to generate a trajectory s 0 , a 0 , s 1 , a 1 , . . . , s T \u22121 , a T \u22121 , s T . Hence, q(a|s) = \u03c0 \u03b8 old (a|s). Q \u03b8 old (s, a) is computed at each state-action pair (s t , a t ) by taking the discounted sum of future rewards along the trajectory.\n\n\nVine\n\nIn this estimation procedure, we first sample s 0 \u223c \u03c1 0 and simulate the policy \u03c0 \u03b8i to generate a number of trajectories. We then choose a subset of N states along these trajectories, denoted s 1 , s 2 , . . . , s N , which we call the \"rollout set\". For each state s n in the rollout set, we sample K actions according to a n,k \u223c q(\u00b7|s n ). Any choice of q(\u00b7|s n ) with a support that includes the support of \u03c0 \u03b8i (\u00b7|s n ) will produce a consistent estimator. In practice, we found that q(\u00b7|s n ) = \u03c0 \u03b8i (\u00b7|s n ) works well on continuous problems, such as robotic locomotion, while the uniform distribution works well on discrete tasks, such as the Atari games, where it can sometimes achieve better exploration.\n\nFor each action a n,k sampled at each state s n , we esti-mateQ \u03b8i (s n , a n,k ) by performing a rollout (i.e., a short trajectory) starting with state s n and action a n,k . We can greatly reduce the variance of the Q-value differences between rollouts by using the same random number sequence for the noise in each of the K rollouts, i.e., common random numbers. See (Bertsekas, 2005) for additional discussion on Monte Carlo estimation of Q-values and (Ng & Jordan, 2000) for a discussion of common random numbers in reinforcement learning.\n\nIn small, finite action spaces, we can generate a rollout for every possible action from a given state. The contribution to L \u03b8 old from a single state s n is as follows:\nL n (\u03b8) = K k=1 \u03c0 \u03b8 (a k |s n )Q(s n , a k ),(15)\nwhere the action space is A = {a 1 , a 2 , . . . , a K }. In large or continuous state spaces, we can construct an estimator of the surrogate objective using importance sampling. The self-normalized estimator (Owen (2013), Chapter 8) of L \u03b8 old obtained at a single state s n is\nL n (\u03b8) = K k=1\n\u03c0 \u03b8 (a n,k |sn) \u03c0 \u03b8 old (a n,k |sn)Q (s n , a n,k ) K k=1 \u03c0 \u03b8 (a n,k |sn) \u03c0 \u03b8 old (a n,k |sn)\n\n,\n\nassuming that we performed K actions a n,1 , a n,2 , . . . , a n,K from state s n . This self-normalized estimator removes the need to use a baseline for the Q-values (note that the gradient is unchanged by adding a constant to the Q-values). Averaging over s n \u223c \u03c1(\u03c0), we obtain an estimator for L \u03b8 old , as well as its gradient.\n\nThe vine and single path methods are illustrated in Figure 1. We use the term vine, since the trajectories used for sampling can be likened to the stems of vines, which branch at various points (the rollout set) into several short offshoots (the rollout trajectories).\n\nThe benefit of the vine method over the single path method that is our local estimate of the objective has much lower variance given the same number of Q-value samples in the surrogate objective. That is, the vine method gives much better estimates of the advantage values. The downside of the vine method is that we must perform far more calls to the simulator for each of these advantage estimates. Furthermore, the vine method requires us to generate multiple trajectories from each state in the rollout set, which limits this algorithm to settings where the system can be reset to an arbitrary state. In contrast, the single path algorithm requires no state resets and can be directly implemented on a physical system (Peters & Schaal, 2008b).\n\n\nPractical Algorithm\n\nHere we present two practical policy optimization algorithm based on the ideas above, which use either the single path or vine sampling scheme from the preceding section. The algorithms repeatedly perform the following steps:\n\n1. Use the single path or vine procedures to collect a set of state-action pairs along with Monte Carlo estimates of their Q-values.\n\n2. By averaging over samples, construct the estimated objective and constraint in Equation (14).\n\n3. Approximately solve this constrained optimization problem to update the policy's parameter vector \u03b8.\n\nWe use the conjugate gradient algorithm followed by a line search, which is altogether only slightly more expensive than computing the gradient itself. See Appendix C for details.\n\nWith regard to (3), we construct the Fisher information matrix (FIM) by analytically computing the Hessian of the KL divergence, rather than using the covariance matrix of the gradients. That is, we estimate A ij as\n1 N N n=1 \u2202 2 \u2202\u03b8i\u2202\u03b8j D KL (\u03c0 \u03b8 old (\u00b7|s n ) \u03c0 \u03b8 (\u00b7|s n )), rather than 1 N N n=1\n\u2202 \u2202\u03b8i log \u03c0 \u03b8 (a n |s n ) \u2202 \u2202\u03b8j log \u03c0 \u03b8 (a n |s n ). The analytic estimator integrates over the action at each state s n , and does not depend on the action a n that was sampled. As described in Appendix C, this analytic estimator has computational benefits in the large-scale setting, since it removes the need to store a dense Hessian or all policy gradients from a batch of trajectories. The rate of improvement in the policy is similar to the empirical FIM, as shown in the experiments.\n\nLet us briefly summarize the relationship between the theory from Section 3 and the practical algorithm we have described:\n\n\u2022 The theory justifies optimizing a surrogate objective with a penalty on KL divergence. However, the large penalty coefficient 2 \u03b3 (2\u2212\u03b3) 2 leads to prohibitively small steps, so we would like to decrease this coefficient. Empirically, it is hard to robustly choose the penalty coefficient, so we use a hard constraint instead of a penalty, with parameter \u03b4 (the bound on KL divergence).\n\n\u2022 The constraint on D max KL (\u03b8 old , \u03b8) is hard for numerical optimization and estimation, so instead we constrain D KL (\u03b8 old , \u03b8).\n\n\u2022 Our theory ignores estimation error for the advantage function. Kakade & Langford (2002) consider this error in their derivation, and the same arguments would hold in the setting of this paper, but we omit them for simplicity.\n\n\nConnections with Prior Work\n\nAs mentioned in Section 4, our derivation results in a policy update that is related to several prior methods, providing a unifying perspective on a number of policy update schemes. The natural policy gradient (Kakade, 2002) can be obtained as a special case of the update in Equation (12) by using a linear approximation to L and a quadratic approximation to the D KL constraint, resulting in the following problem:\nmaximize \u03b8 \u2207 \u03b8 L \u03b8 old (\u03b8) \u03b8=\u03b8 old \u00b7 (\u03b8 \u2212 \u03b8 old )(17)\nsubject to\n1 2 (\u03b8 old \u2212 \u03b8) T A(\u03b8 old )(\u03b8 old \u2212 \u03b8) \u2264 \u03b4, where A(\u03b8 old ) ij = \u2202 \u2202\u03b8 i \u2202 \u2202\u03b8 j E s\u223c\u03c1\u03c0 [D KL (\u03c0(\u00b7|s, \u03b8 old ) \u03c0(\u00b7|s, \u03b8))] \u03b8=\u03b8 old . The update is \u03b8 new = \u03b8 old + 1 \u03bb A(\u03b8 old ) \u22121 \u2207 \u03b8 L(\u03b8) \u03b8=\u03b8 old , where the stepsize 1\n\u03bb is typically treated as an algorithm parameter. This differs from our approach, which enforces the constraint at each update. Though this difference might seem subtle, our experiments demonstrate that it significantly improves the algorithm's performance on larger problems.\n\nWe can also obtain the standard policy gradient update by using an 2 constraint or penalty:\nmaximize \u03b8 \u2207 \u03b8 L \u03b8 old (\u03b8) \u03b8=\u03b8 old \u00b7 (\u03b8 \u2212 \u03b8 old )(18)\nsubject to 1 2 \u03b8 \u2212 \u03b8 old 2 \u2264 \u03b4.\n\nThe policy iteration update can also be obtained by solving the unconstrained problem maximize \u03c0 L \u03c0 old (\u03c0), using L as defined in Equation (3).\n\nSeveral other methods employ an update similar to Equation (12). Relative entropy policy search (REPS) (Peters et al., 2010) constrains the state-action marginals p(s, a), while TRPO constrains the conditionals p(a|s). Unlike REPS, our approach does not require a costly nonlinear optimization in the inner loop. Levine and Abbeel (2014) also use a KL divergence constraint, but its purpose is to encourage the policy not to stray from regions where the estimated dynamics model is valid, while we do not attempt to estimate the system dynamics explicitly. Pirotta et al. (2013) also build on and generalize Kakade and Langford's results, and they derive different algorithms from the ones here. From left to right: swimmer, hopper, walker. The hopper and walker present a particular challenge, due to underactuation and contact discontinuities.\n\n\nExperiments\n\nWe designed our experiments to investigate the following questions: 1. What are the performance characteristics of the single path and vine sampling procedures?\n\n2. TRPO is related to prior methods (e.g. natural policy gradient) but makes several changes, most notably by using a fixed KL divergence rather than a fixed penalty coefficient. How does this affect the performance of the algorithm?\n\n3. Can TRPO be used to solve challenging large-scale problems? How does TRPO compare with other methods when applied to large-scale problems, with regard to final performance, computation time, and sample complexity? To answer (1) and (2), we compare the performance of the single path and vine variants of TRPO, several ablated variants, and a number of prior policy optimization algorithms. With regard to (3), we show that both the single path and vine algorithm can obtain high-quality locomotion controllers from scratch, which is considered to be a hard problem. We also show that these algorithms produce competitive results when learning policies for playing Atari games from images using convolutional neural networks with tens of thousands of parameters.\n\n\nSimulated Robotic Locomotion\n\nWe conducted the robotic locomotion experiments using the MuJoCo simulator (Todorov et al., 2012). The three simulated robots are shown in Figure 2. The states of the robots are their generalized positions and velocities, and the controls are joint torques. Underactuation, high dimensionality, and non-smooth dynamics due to contacts make these tasks very challenging. The following models are included in our evaluation:\n\n1. Swimmer. 10-dimensional state space, linear reward for forward progress and a quadratic penalty on joint effort to produce the reward r(x, u) = v x \u221210 \u22125 u 2 . The swimmer can propel itself forward by making an undulating motion.  \n\n\n2.\n\nHopper. 12-dimensional state space, same reward as the swimmer, with a bonus of +1 for being in a nonterminal state. We ended the episodes when the hopper fell over, which was defined by thresholds on the torso height and angle.\n\n3. Walker. 18-dimensional state space. For the walker, we added a penalty for strong impacts of the feet against the ground to encourage a smooth walk rather than a hopping gait.\n\nWe used \u03b4 = 0.01 for all experiments. See Table 2 in the Appendix for more details on the experimental setup and parameters used. We used neural networks to represent the policy, with the architecture shown in Figure 3, and further details provided in Appendix D. To establish a standard baseline, we also included the classic cart-pole balancing problem, based on the formulation from Barto et al. (1983), using a linear policy with six parameters that is easy to optimize with derivative-free black-box optimization methods.\n\nThe following algorithms were considered in the comparison: single path TRPO; vine TRPO; cross-entropy method (CEM), a gradient-free method (Szita & L\u00f6rincz, 2006); covariance matrix adaption (CMA), another gradient-free method (Hansen & Ostermeier, 1996); natural gradient, the classic natural policy gradient algorithm (Kakade, 2002), which differs from single path by the use of a fixed penalty coefficient (Lagrange multiplier) instead of the KL divergence constraint; empirical FIM, identical to single path, except that the FIM is estimated using the covariance matrix of the gradients rather than the analytic estimate; max KL, which was only tractable on the cart-pole problem, and uses the maximum KL divergence in Equation (11), rather than the average divergence, allowing us to evaluate the quality of this approximation. The parameters used in the experiments are provided in Appendix E. For the natu-  . Learning curves for locomotion tasks, averaged across five runs of each algorithm with random initializations. Note that for the hopper and walker, a score of \u22121 is achievable without any forward velocity, indicating a policy that simply learned balanced standing, but not walking.\n\nral gradient method, we swept through the possible values of the stepsize in factors of three, and took the best value according to the final performance.\n\nLearning curves showing the total reward averaged across five runs of each algorithm are shown in Figure 4. Single path and vine TRPO solved all of the problems, yielding the best solutions. Natural gradient performed well on the two easier problems, but was unable to generate hopping and walking gaits that made forward progress. These results provide empirical evidence that constraining the KL divergence is a more robust way to choose step sizes and make fast, consistent progress, compared to using a fixed penalty. CEM and CMA are derivative-free algorithms, hence their sample complexity scales unfavorably with the number of parameters, and they performed poorly on the larger problems. The max KL method learned somewhat more slowly than our final method, due to the more restrictive form of the constraint, but overall the result suggests that the average KL divergence constraint has a similar effect as the theorecally justified maximum KL divergence. Videos of the policies learned by TRPO may be viewed on the project website: http://sites.google.com/ site/trpopaper/.\n\nNote that TRPO learned all of the gaits with generalpurpose policies and simple reward functions, using minimal prior knowledge. This is in contrast with most prior methods for learning locomotion, which typically rely on hand-architected policy classes that explicitly encode notions of balance and stepping (Tedrake et al., 2004;Geng et al., 2006;Wampler & Popovi\u0107, 2009 Table 1. Performance comparison for vision-based RL algorithms on the Atari domain. Our algorithms (bottom rows) were run once on each task, with the same architecture and parameters. Performance varies substantially from run to run (with different random initializations of the policy), but we could not obtain error statistics due to time constraints.\n\n\nPlaying Games from Images\n\nTo evaluate TRPO on a partially observed task with complex observations, we trained policies for playing Atari games, using raw images as input. The games require learning a variety of behaviors, such as dodging bullets and hitting balls with paddles. Aside from the high dimensionality, challenging elements of these games include delayed rewards (no immediate penalty is incurred when a life is lost in Breakout or Space Invaders); complex sequences of behavior (Q*bert requires a character to hop on 21 different platforms); and non-stationary image statistics (Enduro involves a changing and flickering background).\n\nWe tested our algorithms on the same seven games reported on in (Mnih et al., 2013) and (Guo et al., 2014), which are made available through the Arcade Learning Environment (Bellemare et al., 2013) The images were preprocessed following the protocol in Mnih et al (2013), and the policy was represented by the convolutional neural network shown in Figure 3, with two convolutional layers with 16 channels and stride 2, followed by one fully-connected layer with 20 units, yielding 33,500 parameters.\n\nThe results of the vine and single path algorithms are summarized in Table 1, which also includes an expert human performance and two recent methods: deep Q-learning (Mnih et al., 2013), and a combination of Monte-Carlo Tree Search with supervised training (Guo et al., 2014), called UCC-I. The 500 iterations of our algorithm took about 30 hours (with slight variation between games) on a 16-core computer. While our method only outperformed the prior methods on some of the games, it consistently achieved reasonable scores. Unlike the prior methods, our approach was not designed specifically for this task. The ability to apply the same policy search method to methods as diverse as robotic locomotion and image-based game playing demonstrates the generality of TRPO.\n\n\nDiscussion\n\nWe proposed and analyzed trust region methods for optimizing stochastic control policies. We proved monotonic improvement for an algorithm that repeatedly optimizes a local approximation to the expected return of the policy with a KL divergence penalty, and we showed that an approximation to this method that incorporates a KL divergence constraint achieves good empirical results on a range of challenging policy learning tasks, outperforming prior methods. Our analysis also provides a perspective that unifies policy gradient and policy iteration methods, and shows them to be special limiting cases of an algorithm that optimizes a certain objective subject to a trust region constraint.\n\nIn the domain of robotic locomotion, we successfully learned controllers for swimming, walking and hopping in a physics simulator, using general purpose neural networks and minimally informative rewards. To our knowledge, no prior work has learned controllers from scratch for all of these tasks, using a generic policy search method and non-engineered, general-purpose policy representations. In the game-playing domain, we learned convolutional neural network policies that used raw images as inputs. This requires optimizing extremely high-dimensional policies, and only two prior methods report successful results on this task.\n\nSince the method we proposed is scalable and has strong theoretical foundations, we hope that it will serve as a jumping-off point for future work on training large, rich function approximators for a range of challenging problems. At the intersection of the two experimental domains we explored, there is the possibility of learning robotic control policies that use vision and raw sensory data as input, providing a unified scheme for training robotic controllers that perform both perception and control. The use of more sophisticated policies, including recurrent policies with hidden state, could further make it possible to roll state estimation and control into the same policy in the partiallyobserved setting. By combining our method with model learning, it would also be possible to substantially reduce its sample complexity, making it applicable to real-world settings where samples are expensive.\n\nunder grant number N00014-11-1-0688, DARPA through a Young Faculty Award, by the Army Research Office through the MAST program.\n\n\nA Proof of Policy Improvement Bound\n\nThis proof uses techniques from the proof of Theorem 4.1 in (Kakade & Langford, 2002), adapting them to the more general setting considered in this paper.\n\nLemma 1. Given two policies \u03c0,\u03c0,\n\u03b7(\u03c0) = \u03b7(\u03c0)+E \u03c4 \u223c\u03c0 \u221e t=0 \u03b3 t A \u03c0 (s t , a t )(19)\nThis expectation is taken over trajectories \u03c4 := (s 0 , a 0 , s 1 , a 0 , . . . ), and the notation E \u03c4 \u223c\u03c0 [. . . ] indicates that actions are sampled from\u03c0 to generate \u03c4 .\n\nProof. First note that A \u03c0 (s, a) = E s \u223cP (s |s,a) [r(s) + \u03b3V \u03c0 (s ) \u2212 V \u03c0 (s)]. Therefore,\nE \u03c4 |\u03c0 \u221e t=0 \u03b3 t A \u03c0 (s t , a t )(20)= E \u03c4 |\u03c0 \u221e t=0 \u03b3 t (r(s t ) + \u03b3V \u03c0 (s t+1 ) \u2212 V \u03c0 (s t )) (21) = E \u03c4 |\u03c0 \u2212V \u03c0 (s 0 ) + \u221e t=0 \u03b3 t r(s t ) (22) = \u2212E s0 [V \u03c0 (s 0 )] + E \u03c4 |\u03c0 \u221e t=0 \u03b3 t r(s t ) (23) = \u2212\u03b7(\u03c0) + \u03b7(\u03c0)(24)\nRearranging, the result follows.\n\nDefine\u0100 \u03c0,\u03c0 (s) to be the expected advantage of\u03c0 over \u03c0 at state s:\nA \u03c0,\u03c0 (s) = E a\u223c\u03c0(\u00b7|s) [A \u03c0 (s, a)] .(25)\nNow Lemma 1 can be written as follows:\n\u03b7(\u03c0) = \u03b7(\u03c0) + E \u03c4 \u223c\u03c0 \u221e t=0 \u03b3 t\u0100\u03c0,\u03c0 (s t )(26)\nNote that L \u03c0 can be written as\nL \u03c0 (\u03c0) = \u03b7(\u03c0) + E \u03c4 \u223c\u03c0 \u221e t=0 \u03b3 t\u0100\u03c0,\u03c0 (s t )(27)\nThe difference in these equations is whether the states are sampled using \u03c0 or\u03c0. To bound the difference between \u03b7(\u03c0) and L \u03c0 (\u03c0), we will bound the difference arising from each timestep. To do this, we first need to introduce a measure of how much \u03c0 and\u03c0 agree. Specifically, we'll couple the policies, so that they define a joint distribution over pairs of actions.\n\nDefinition 1. (\u03c0,\u03c0) is an \u03b1-coupled policy pair if it defines a joint distribution (a,\u00e3)|s, such that P (a =\u00e3|s) \u2264 \u03b1 for all s. \u03c0 and\u03c0 will denote the marginal distributions of a and\u00e3, respectively.\n\nIn words, this means that at each state, (\u03c0,\u03c0) gives us a pair of actions, and these actions differ with probability \u2264 \u03b1.\n\nLemma 2. Let (\u03c0,\u03c0) be an \u03b1-coupled policy pair. Then\nE st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2212 E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2264 2 (1 \u2212 (1 \u2212 \u03b1) t ), where = max s |\u0100 \u03c0,\u03c0 (s)|(28)\nProof. Consider generating a trajectory using\u03c0, i.e., at each timestep i we sample (a i ,\u00e3 i )|s t , and we choose the action\u00e3 i and ignore a i . Let n t denote the number of times that a i =\u00e3 i for i < t, i.e., the number of times that \u03c0 and\u03c0 disagree before arriving at state s t .\n\nE st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) = P (n t = 0)E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) + P (n t > 0)E st\u223c\u03c0|nt>0 \u0100 \u03c0,\u03c0 (s t ) (29) P (n t = 0) = (1 \u2212 \u03b1) t , and E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) = E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) , because n t = 0 indicates that \u03c0 and\u03c0 agreed on all timesteps less than t. Therefore, we have\nE st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) = (1 \u2212 \u03b1 t )E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) + (1 \u2212 (1 \u2212 \u03b1 t ))E st\u223c\u03c0|nt>0 \u0100 \u03c0,\u03c0 (s t )(30)\nSubtracting E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) from both sides,\nE st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2212 E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) = (1 \u2212 (1 \u2212 \u03b1 t )) \u2212E st\u223c\u03c0|nt=0 \u0100 \u03c0,\u03c0 (s t ) + E st\u223c\u03c0|nt>0 \u0100 \u03c0,\u03c0 (s t )(31)E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2212 E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2264 (1 \u2212 (1 \u2212 \u03b1 t ))( + )(32)\nNow we can sum over time to bound the error of L \u03c0 .\n\nLemma 3. Suppose (\u03c0,\u03c0) is an \u03b1-coupled policy pair. Then\n|\u03b7(\u03c0) \u2212 L \u03c0 (\u03c0)| \u2264 2 \u03b3\u03b1 (1 \u2212 \u03b3)(1 \u2212 \u03b3(1 \u2212 \u03b1))(33)\nProof.\n\u03b7(\u03c0) \u2212 L \u03c0 (\u03c0) = E \u03c4 \u223c\u03c0 \u221e t=0 \u03b3 t\u0100\u03c0,\u03c0 (s t ) \u2212 E \u03c4 \u223c\u03c0 \u221e t=0 \u03b3 t\u0100\u03c0,\u03c0 (s t ) (34) = \u221e t=0 \u03b3 t E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2212 E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) (35) |\u03b7(\u03c0) \u2212 L \u03c0 (\u03c0)| \u2264 \u221e t=0 \u03b3 t E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) \u2212 E st\u223c\u03c0 \u0100 \u03c0,\u03c0 (s t ) (36) \u2264 \u221e t=0 \u03b3 t \u00b7 2 \u00b7 (1 \u2212 (1 \u2212 \u03b1 t )) (37) = 2 \u03b3\u03b1 (1 \u2212 \u03b3)(1 \u2212 \u03b3(1 \u2212 \u03b1))(38)\nLast, we need to use the correspondence between total variation divergence and coupled random variables:\n\nSuppose p X and p Y are distributions with D T V (p X p Y ) = \u03b1. Then there exists a joint distribution (X, Y ) whose marginals are p X , p Y , for which X = Y with probability 1 \u2212 \u03b1.\n\nSee (Levin et al., 2009), Proposition 4.7.\n\nIt follows that if we have two policies \u03c0 and\u03c0 such that max s D T V (\u03c0(\u00b7|s) \u03c0(\u00b7|s))\u03b1, then we can define an \u03b1-coupled policy pair (\u03c0,\u03c0) with appropriate marginals. 1 follows.\n\n\nB Perturbation Theory Proof of Policy Improvement Bound\n\nWe also provide a different proof of 1 using perturbation theory. This method makes it possible to provide slightly stronger bounds.\n\nTheorem 1a. Let \u03b1 denote the maximum total variation divergence between stochastic policies \u03c0 and\u03c0, as defined in Equation (8), and let L be defined as in Equation (3). Then\n\u03b7(\u03c0) \u2265 L(\u03c0) \u2212 \u03b1 2 2\u03b3 (1 \u2212 \u03b3) 2(39)\nwhere = min s a (\u03c0(a|s)Q \u03c0 (s, a) \u2212 \u03c0(a|s)Q \u03c0 (s, a)) a |\u03c0(a|s) \u2212 \u03c0(a|s)|\n\nNote that the defined in Equation (40) is less than or equal to the defined in 1. So 1a is slightly stronger.\n\nProof. Let G = (1+\u03b3P \u03c0 +(\u03b3P \u03c0 ) 2 +. . . ) = (1\u2212\u03b3P \u03c0 ) \u22121 , and similarly LetG = (1+\u03b3P\u03c0 +(\u03b3P\u03c0) 2 +. . . ) = (1\u2212\u03b3P\u03c0) \u22121 . We will use the convention that \u03c1 (a density on state space) is a vector and r (a reward function on state space) is a dual vector (i.e., linear functional on vectors), thus r\u03c1 is a scalar meaning the expected reward under density \u03c1. Note that \u03b7(\u03c0) = rG\u03c1 0 , and \u03b7(\u03c0) = cG\u03c1 0 . Let \u2206 = P\u03c0 \u2212 P \u03c0 . We want to bound \u03b7(\u03c0) \u2212 \u03b7(\u03c0) = r(G \u2212 G)\u03c1 0 . We start with some standard perturbation theory manipulations.\nG \u22121 \u2212G \u22121 = (1 \u2212 \u03b3P \u03c0 ) \u2212 (1 \u2212 \u03b3P\u03c0) = \u03b3\u2206.(41)\nLeft multiply by G and right multiply byG.G\n\u2212 G = \u03b3G\u2206G G = G + \u03b3G\u2206G(42)\nSubstituting the right-hand side intoG givesG\n= G + \u03b3G\u2206G + \u03b3 2 G\u2206G\u2206G(43)\nSo we have\n\u03b7(\u03c0) \u2212 \u03b7(\u03c0) = r(G \u2212 G)\u03c1 = \u03b3rG\u2206G\u03c1 0 + \u03b3 2 rG\u2206G\u2206G\u03c1 0(44)\nLet us first consider the leading term \u03b3rG\u2206G\u03c1 0 . Note that rG = v, i.e., the infinite-horizon state-value function. Also note that G\u03c1 0 = \u03c1 \u03c0 . Thus we can write \u03b3cG\u2206G\u03c1 0 = \u03b3v\u2206\u03c1 \u03c0 . We will show that this expression equals the expected advantage L \u03c0 (\u03c0) \u2212 L \u03c0 (\u03c0).\n\nL \u03c0 (\u03c0) \u2212 L \u03c0 (\u03c0) = s \u03c1 \u03c0 (s) a (\u03c0(a|s) \u2212 \u03c0(a|s))A \u03c0 (s, a) (\u03b3v\u2206) s = a (\u03c0(s, a) \u2212 \u03c0(s, a))Q \u03c0 (s, a) = a |\u03c0(a|s) \u2212 \u03c0(a|s)| a (\u03c0(s, a) \u2212 \u03c0(s, a))Q \u03c0 (s, a) a |\u03c0(a|s) \u2212 \u03c0(a|s)| \u2264 \u03b1\n\nWe bound the other portion G\u2206G\u03c1 using the 1 operator norm\nA 1 = sup \u03c1 A\u03c1 1 \u03c1 1(47)\nwhere we have that G 1 = G 1 = 1/(1 \u2212 \u03b3) and \u2206 1 = 2\u03b1. That gives\nG\u2206G\u03c1 1 \u2264 G 1 \u2206 1 G 1 \u03c1 1 = 1 1 \u2212 \u03b3 \u00b7 \u03b1 \u00b7 1 1 \u2212 \u03b3 \u00b7 1(48)\nSo we have that\n\u03b3 2 |rG\u2206G\u2206G\u03c1| \u2264 \u03b3 \u03b3rG\u2206 \u221e G\u2206G\u03c1 1 \u2264 \u03b3 \u00b7 \u03b1 \u00b7 2\u03b1 (1 \u2212 \u03b3) 2 = \u03b1 2 2\u03b3 (1 \u2212 \u03b3) 2(49)\n\nC Efficiently Solving the Trust-Region Constrained Optimization Problem\n\nThis section describes how to efficiently approximately solve the following constrained optimization problem, which we must solve at each iteration of TRPO:\nmaximize L(\u03b8) subject to D KL (\u03b8 old , \u03b8) \u2264 \u03b4.(50)\nThe method we will describe involves two steps: (1) compute a search direction, using a linear approximation to objective and quadratic approximation to the constraint; and (2) perform a line search in that direction, ensuring that we improve the nonlinear objective while satisfying the nonlinear constraint.\n\nThe search direction is computed by approximately solving the equation Ax = g, where A is the Fisher information matrix, i.e., the quadratic approximation to the KL divergence constraint: \u03b8). In large-scale problems, it is prohibitively costly (with respect to computation and memory) to form the full matrix A (or A \u22121 ). However, the conjugate gradient algorithm allows us to approximately solve the equation Ax = b without forming this full matrix, when we merely have access to a function that computes matrix-vector products y \u2192 Ay. Appendix C.1 describes the most efficient way to compute matrix-vector products with the Fisher information matrix. For additional exposition on the use of Hessian-vector products for optimizing neural network objectives, see (Martens & Sutskever, 2012) and (Pascanu & Bengio, 2013).\nD KL (\u03b8 old , \u03b8) \u2248 1 2 (\u03b8 \u2212 \u03b8 old ) T A(\u03b8 \u2212 \u03b8 old ), where A ij = \u2202 \u2202\u03b8i \u2202 \u2202\u03b8j D KL (\u03b8 old ,\nHaving computed the search direction s \u2248 A \u22121 g, we next need to compute the maximal step length \u03b2 such that \u03b8 + \u03b2s will satisfy the KL divergence constraint. To do this, let \u03b4 = D KL \u2248 1 2 (\u03b2s) T A(\u03b2s) = 1 2 \u03b2 2 s T As. From this, we obtain \u03b2 = 2\u03b4/s T As, where \u03b4 is the desired KL divergence. The term s T As can be computed through a single Hessian vector product, and it is also an intermediate result produced by the conjugate gradient algorithm.\n\nLast, we use a line search to ensure improvement of the surrogate objective and satisfaction of the KL divergence constraint, both of which are nonlinear in the parameter vector \u03b8 (and thus depart from the linear and quadratic approximations used to compute the step). We perform the line search on the objective L \u03b8 old (\u03b8) \u2212 X [D KL (\u03b8 old , \u03b8) \u2264 \u03b4], where X [. . . ] equals zero when its argument is true and +\u221e when it is false. Starting with the maximal value of the step length \u03b2 computed in the previous paragraph, we shrink \u03b2 exponentially until the objective improves. Without this line search, the algorithm occasionally computes large steps that cause a catastrophic degradation of performance.\n\n\nC.1 Computing the Fisher-Vector Product\n\nHere we will describe how to compute the matrix-vector product between the averaged Fisher information matrix and arbitrary vectors. This matrix-vector product enables us to perform the conjugate gradient algorithm. Suppose that the parameterized policy maps from the input x to \"distribution parameter\" vector \u00b5 \u03b8 (x), which parameterizes the distribution \u03c0(u|x). Now the KL divergence for a given input x can be written as follows:\nD KL (\u03c0 \u03b8 old (\u00b7|x) \u03c0 \u03b8 (\u00b7|x)) = kl(\u00b5 \u03b8 (x), \u00b5 old )(51)\nwhere kl is the KL divergence between the distributions corresponding to the two mean parameter vectors. Differentiating kl twice with respect to \u03b8, we obtain\n\u2202\u00b5 a (x) \u2202\u03b8 i \u2202\u00b5 b (x) \u2202\u03b8 j kl ab (\u00b5 \u03b8 (x), \u00b5 old ) + \u2202 2 \u00b5 a (x) \u2202\u03b8 i \u2202\u03b8 j kl a (\u00b5 \u03b8 (x), \u00b5 old )(52)\nwhere the primes ( ) indicate differentiation with respect to the first argument, and there is an implied summation over indices a, b. The second term vanishes, leaving just the first term. Let J := \u2202\u00b5a(x) \u2202\u03b8i (the Jacobian), then the Fisher information matrix can be written in matrix form as J T M J, where M = kl ab (\u00b5 \u03b8 (x), \u00b5 old ) is the Fisher information matrix of the distribution in terms of the mean parameter \u00b5 (as opposed to the parameter \u03b8). This has a simple form for most parameterized distributions of interest.\n\nThe Fisher-vector product can now be written as a function y \u2192 J T M Jy. Multiplication by J T and J can be performed by most automatic differentiation and neural network packages (multiplication by J T is the well-known backprop operation), and the operation for multiplication by M can be derived for the distribution of interest. Note that this Fisher-vector product is straightforward to average over a set of datapoints, i.e., inputs x to \u00b5.\n\nOne could alternatively use a generic method for calculating Hessian-vector products using reverse mode automatic differentiation ( (Wright & Nocedal, 1999), chapter 8), computing the Hessian of D KL with respect to \u03b8. This method would be slightly less efficient as it does not exploit the fact that the second derivatives of \u00b5(x) (i.e., the second term in Equation (52)) can be ignored, but may be substantially easier to implement.\n\nWe have described a procedure for computing the Fisher-vector product y \u2192 Ay, where the Fisher information matrix is averaged over a set of inputs to the function \u00b5. Computing the Fisher-vector product is typically about as expensive as computing the gradient of an objective that depends on \u00b5(x) (Wright & Nocedal, 1999). Furthermore, we need to compute k of these Fisher-vector products per gradient, where k is the number of iterations of the conjugate gradient algorithm we perform. We found k = 10 to be quite effective, and using higher k did not result in faster policy improvement. Hence, a na\u00efve implementation would spend more than 90% of the computational effort on these Fisher-vector products. However, we can greatly reduce this burden by subsampling the data for the computation of Fisher-vector product. Since the Fisher information matrix merely acts as a metric, it can be computed on a subset of the data without severely degrading the quality of the final step. Hence, we can compute it on 10% of the data, and the total cost of Hessian-vector products will be about the same as computing the gradient. With this optimization, the computation of a natural gradient step A \u22121 g does not incur a significant extra computational cost beyond computing the gradient g.\n\n\nD Approximating Factored Policies with Neural Networks\n\nThe policy, which is a conditional probability distribution \u03c0 \u03b8 (a|s), can be parameterized with a neural network. The most straightforward way to do so is to have the neural network map (deterministically) from the state vector s to a vector \u00b5 that specifies a distribution over action space. Then we can compute the likelihood p(a|\u00b5) and sample a \u223c p(a|\u00b5).\n\nFor our experiments with continuous state and action spaces, we used a Gaussian distribution, where the covariance matrix was diagonal and independent of the state. A neural network with several fully-connected (dense) layers maps from the input features to the mean of a Gaussian distribution. A separate set of parameters specifies the log standard deviation of each element. More concretely, the parameters include a set of weights and biases for the neural network computing the mean, {W i , b i } L i=1 , and a vector r (log standard deviation) with the same dimension as a. Then, the policy is defined by the normal distribution N mean = NeuralNet s; {W i , b i } L i=1 , stdev = exp(r) . Here, \u00b5 = [mean, stdev].\n\nFor the experiments with discrete actions (Atari), we use a factored discrete action space, where each factor is parameterized as a categorical distribution. That is, the action consists of a tuple (a 1 , a 2 , . . . , a K ) of integers a k \u2208 {1, 2, . . . , N k }, and each of these components is assumed to have a categorical distribution, which is specified by a vector \u00b5 k = [p 1 , p 2 , . . . , p N k ]. Hence, \u00b5 is defined to be the concatenation of the factors' parameters: \u00b5 = [\u00b5 1 , \u00b5 2 , . . . , \u00b5 K ] and has dimension dim \u00b5 = K k=1 N k . The components of \u00b5 are computed by taking applying a neural network to the input s and then applying the softmax operator to each slice, yielding normalized probabilities for each factor.    \n\n\nE Experiment Parameters\n\n\nProceedings of the 31 st International Conference on Machine Learning, Lille, France, 2015. JMLR: W&CP volume 37. Copyright 2015 by the author(s).\n\nFigure 1 .\n1Left: illustration of single path procedure.\n\nFigure 2 .\n22D robot models used for locomotion experiments.\n\nFigure 3 .\n3Neural networks used for the locomotion task (top) and for playing Atari games (bottom).\n\nFigure 4\n4Figure 4. Learning curves for locomotion tasks, averaged across five runs of each algorithm with random initializations. Note that for the hopper and walker, a score of \u22121 is achievable without any forward velocity, indicating a policy that simply learned balanced standing, but not walking.\n\n\n(a|s) \u2212 \u03c0\u03b8(a|s) r(s) + s p(s |s, a)\u03b3v(s ) \u2212 v(s) \u03c0 (s |s) \u2212 p\u03c0(s |s))\u03b3v(s ) = \u03b3v\u2206\u03c1 \u03c0(45)Next let us bound the O(\u2206 2 ) term \u03b3 2 rG\u2206G\u2206G\u03c1. First we consider the product \u03b3rG\u2206 = \u03b3v\u2206. Consider the component s of this dual vector.\n\nF\nLearning\n\nFigure 5 .\n5Learning curves for the Atari domain. For historical reasons, the plots show cost = negative reward.\n\n\n).B. Rider \nBreakout \nEnduro \nPong \nQ*bert \nSeaquest \nS. Invaders \n\nRandom \n354 \n1.2 \n0 \n\u221220.4 \n157 \n110 \n179 \nHuman (Mnih et al., 2013) \n7456 \n31.0 \n368 \n\u22123.0 \n18900 \n28010 \n3690 \n\nDeep Q Learning (Mnih et al., 2013) \n4092 \n168.0 \n470 \n20.0 \n1952 \n1705 \n581 \n\nUCC-I (Guo et al., 2014) \n5702 \n380 \n741 \n21 \n20025 \n2995 \n692 \n\nTRPO -single path \n1425.2 \n10.8 \n534.6 \n20.9 \n1973.5 \n1908.6 \n568.4 \nTRPO -vine \n859.5 \n34.2 \n430.8 \n20.9 \n7732.5 \n788.4 \n450.2 \n\n\n\n\nTable 2. Parameters for continuous control tasks, vine and single path (SP) algorithms. All games Total num. policy params 33500 Vine: Sim. steps per iter. 400K SP: Sim. steps per iter.Swimmer Hopper Walker \nState space dim. \n10 \n12 \n20 \nControl space dim. \n2 \n3 \n6 \nTotal num. policy params \n364 \n4806 \n8206 \nSim. steps per iter. \n50K \n1M \n1M \nPolicy iter. \n200 \n200 \n200 \nStepsize (D KL ) \n0.01 \n0.01 \n0.01 \nHidden layer size \n30 \n50 \n50 \nDiscount (\u03b3) \n0.99 \n0.99 \n0.99 \nVine: rollout length \n50 \n100 \n100 \nVine: rollouts per state \n4 \n4 \n4 \nVine: Q-values per batch \n500 \n2500 \n2500 \nVine: num. rollouts for sampling \n16 \n16 \n16 \nVine: len. rollouts for sampling \n1000 \n1000 \n1000 \nVine: computation time (minutes) \n2 \n14 \n40 \nSP: num. path \n50 \n1000 \n10000 \nSP: path len. \n1000 \n1000 \n1000 \nSP: computation time \n5 \n35 \n100 \n\n100K \nPolicy iter. \n500 \nStepsize (D KL ) \n0.01 \nDiscount (\u03b3) \n0.99 \nVine: rollouts per state \n\u2248 4 \nVine: computation time \n\u2248 30 hrs \nSP: computation time \n\u2248 30 hrs \n\n\n\nTable 3 .\n3Parameters used for Atari domain.Trust Region Policy Optimization \n\n\nOur result is straightforward to extend to continuous states and actions by replacing the sums with integrals.\nAcknowledgementsWe thank Emo Todorov and Yuval Tassa for providing the MuJoCo simulator, and Bruno Scherrer, Tom Erez, Greg Wayne, and the anonymous ICML reviewers for insightful comments. This research was funded in part by the Office of Naval Research through a Young Investigator Award and\nJ A Bagnell, J Schneider, Covariant policy search. IJCAI. Bagnell, J. A. and Schneider, J. Covariant policy search. IJCAI, 2003.\n\nInfinite-horizon policy-gradient estimation. P L Bartlett, J Baxter, arXiv:1106.0665arXiv preprintBartlett, P. L. and Baxter, J. Infinite-horizon policy-gradient esti- mation. arXiv preprint arXiv:1106.0665, 2011.\n\nNeuronlike adaptive elements that can solve difficult learning control problems. A Barto, R Sutton, Anderson , C , IEEE Transactions on Systems, Man and Cybernetics. 5Barto, A., Sutton, R., and Anderson, C. Neuronlike adaptive ele- ments that can solve difficult learning control problems. IEEE Transactions on Systems, Man and Cybernetics, (5):834-846, 1983.\n\nThe arcade learning environment: An evaluation platform for general agents. M G Bellemare, Y Naddaf, J Veness, M Bowling, Journal of Artificial Intelligence Research. 47Bellemare, M. G., Naddaf, Y., Veness, J., and Bowling, M. The ar- cade learning environment: An evaluation platform for general agents. Journal of Artificial Intelligence Research, 47:253- 279, jun 2013.\n\nDynamic programming and optimal control. D Bertsekas, 1Bertsekas, D. Dynamic programming and optimal control, vol- ume 1. 2005.\n\nA survey on policy search for robotics. Foundations and Trends in Robotics. M Deisenroth, G Neumann, J Peters, 2Deisenroth, M., Neumann, G., and Peters, J. A survey on policy search for robotics. Foundations and Trends in Robotics, 2(1- 2):1-142, 2013.\n\nApproximate dynamic programming finally performs well in the game of Tetris. Gabillon, Victor, Mohammad Ghavamzadeh, Bruno Scherrer, Advances in Neural Information Processing Systems. Gabillon, Victor, Ghavamzadeh, Mohammad, and Scherrer, Bruno. Approximate dynamic programming finally performs well in the game of Tetris. In Advances in Neural Information Processing Systems, 2013.\n\nFast biped walking with a reflexive controller and realtime policy searching. T Geng, B Porr, F W\u00f6rg\u00f6tter, Advances in Neural Information Processing Systems (NIPS). Geng, T., Porr, B., and W\u00f6rg\u00f6tter, F. Fast biped walking with a reflexive controller and realtime policy searching. In Advances in Neural Information Processing Systems (NIPS), 2006.\n\nDeep learning for real-time atari game play using offline Monte-Carlo tree search planning. X Guo, S Singh, H Lee, R L Lewis, Wang , X , Advances in Neural Information Processing Systems. Guo, X., Singh, S., Lee, H., Lewis, R. L., and Wang, X. Deep learning for real-time atari game play using offline Monte- Carlo tree search planning. In Advances in Neural Information Processing Systems, pp. 3338-3346, 2014.\n\nAdapting arbitrary normal mutation distributions in evolution strategies: The covariance matrix adaptation. Nikolaus Hansen, Andreas Ostermeier, Proceedings of IEEE International Conference on. IEEE International Conference onIEEEEvolutionary ComputationHansen, Nikolaus and Ostermeier, Andreas. Adapting arbitrary normal mutation distributions in evolution strategies: The co- variance matrix adaptation. In Evolutionary Computation, 1996., Proceedings of IEEE International Conference on, pp. 312-317. IEEE, 1996.\n\nA tutorial on MM algorithms. David R Hunter, Kenneth Lange, The American Statistician. 581Hunter, David R and Lange, Kenneth. A tutorial on MM algo- rithms. The American Statistician, 58(1):30-37, 2004.\n\nA natural policy gradient. Sham Kakade, Advances in Neural Information Processing Systems. MIT PressKakade, Sham. A natural policy gradient. In Advances in Neural Information Processing Systems, pp. 1057-1063. MIT Press, 2002.\n\nApproximately optimal approximate reinforcement learning. Sham Kakade, John Langford, ICML. 2Kakade, Sham and Langford, John. Approximately optimal ap- proximate reinforcement learning. In ICML, volume 2, pp. 267-274, 2002.\n\nReinforcement learning as classification: Leveraging modern classifiers. Michail G Lagoudakis, Ronald Parr, ICML. 3Lagoudakis, Michail G and Parr, Ronald. Reinforcement learn- ing as classification: Leveraging modern classifiers. In ICML, volume 3, pp. 424-431, 2003.\n\nMarkov chains and mixing times. D A Levin, Y Peres, Wilmer , E L , American Mathematical SocietyLevin, D. A., Peres, Y., and Wilmer, E. L. Markov chains and mixing times. American Mathematical Society, 2009.\n\nLearning neural network policies with guided policy search under unknown dynamics. Sergey Levine, Pieter Abbeel, Advances in Neural Information Processing Systems. Levine, Sergey and Abbeel, Pieter. Learning neural network policies with guided policy search under unknown dynamics. In Advances in Neural Information Processing Systems, pp. 1071-1079, 2014.\n\nTraining deep and recurrent networks with hessian-free optimization. J Martens, I Sutskever, Neural Networks: Tricks of the Trade. SpringerMartens, J. and Sutskever, I. Training deep and recurrent networks with hessian-free optimization. In Neural Networks: Tricks of the Trade, pp. 479-535. Springer, 2012.\n\nPlaying Atari with deep reinforcement learning. V Mnih, K Kavukcuoglu, D Silver, A Graves, I Antonoglou, D Wierstra, M Riedmiller, arXiv:1312.5602arXiv preprintMnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D., and Riedmiller, M. Playing Atari with deep reinforcement learning. arXiv preprint arXiv:1312.5602, 2013.\n\nEfficient methods in convex programming. Arkadi Nemirovski, Nemirovski, Arkadi. Efficient methods in convex programming. 2005.\n\nPEGASUS: A policy search method for large mdps and pomdps. A Y Ng, M Jordan, Uncertainty in artificial intelligence (UAI). Ng, A. Y. and Jordan, M. PEGASUS: A policy search method for large mdps and pomdps. In Uncertainty in artificial intelli- gence (UAI), 2000.\n\nMonte Carlo theory, methods and examples. Art B Owen, Owen, Art B. Monte Carlo theory, methods and examples. 2013.\n\nRevisiting natural gradient for deep networks. Razvan Pascanu, Yoshua Bengio, arXiv:1301.3584arXiv preprintPascanu, Razvan and Bengio, Yoshua. Revisiting natural gradient for deep networks. arXiv preprint arXiv:1301.3584, 2013.\n\nReinforcement learning of motor skills with policy gradients. J Peters, S Schaal, Neural Networks. 214Peters, J. and Schaal, S. Reinforcement learning of motor skills with policy gradients. Neural Networks, 21(4):682-697, 2008a.\n\nRelative entropy policy search. J Peters, K M\u00fclling, Alt\u00fcn , Y , AAAI Conference on Artificial Intelligence. Peters, J., M\u00fclling, K., and Alt\u00fcn, Y. Relative entropy policy search. In AAAI Conference on Artificial Intelligence, 2010.\n\nNatural actor-critic. Neurocomputing. Jan Peters, Stefan Schaal, 71Peters, Jan and Schaal, Stefan. Natural actor-critic. Neurocom- puting, 71(7):1180-1190, 2008b.\n\nSafe policy iteration. Matteo Pirotta, Restelli, Marcello, Alessio Pecorino, Daniele Calandriello, Proceedings of The 30th International Conference on Machine Learning. The 30th International Conference on Machine LearningPirotta, Matteo, Restelli, Marcello, Pecorino, Alessio, and Calan- driello, Daniele. Safe policy iteration. In Proceedings of The 30th International Conference on Machine Learning, pp. 307- 315, 2013.\n\nAsymptopia: an exposition of statistical asymptotic theory. David Pollard, Pollard, David. Asymptopia: an exposition of statistical asymp- totic theory. 2000. URL http://www.stat.yale.edu/ pollard/Books/Asymptopia.\n\nLearning tetris using the noisy cross-entropy method. Istv\u00e1n Szita, Andr\u00e1s L\u00f6rincz, Neural computation. 1812Szita, Istv\u00e1n and L\u00f6rincz, Andr\u00e1s. Learning tetris using the noisy cross-entropy method. Neural computation, 18(12): 2936-2941, 2006.\n\nStochastic policy gradient reinforcement learning on a simple 3d biped. R Tedrake, T Zhang, H Seung, IEEE/RSJ International Conference on Intelligent Robots and Systems. Tedrake, R., Zhang, T., and Seung, H. Stochastic policy gradi- ent reinforcement learning on a simple 3d biped. In IEEE/RSJ International Conference on Intelligent Robots and Systems, 2004.\n\nMuJoCo: A physics engine for model-based control. Emanuel Todorov, Tom Erez, Yuval Tassa, Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on. IEEETodorov, Emanuel, Erez, Tom, and Tassa, Yuval. MuJoCo: A physics engine for model-based control. In Intelligent Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 5026-5033. IEEE, 2012.\n\nOptimal gait and form for animal locomotion. Kevin Wampler, Zoran Popovi\u0107, In ACM Transactions on Graphics. 2860ACMWampler, Kevin and Popovi\u0107, Zoran. Optimal gait and form for animal locomotion. In ACM Transactions on Graphics (TOG), volume 28, pp. 60. ACM, 2009.\n\nNumerical optimization. Stephen J Wright, Jorge Nocedal, Springer2New YorkWright, Stephen J and Nocedal, Jorge. Numerical optimization, volume 2. Springer New York, 1999.\n", "annotations": {"author": "[{\"end\":144,\"start\":36},{\"end\":279,\"start\":145},{\"end\":416,\"start\":280},{\"end\":549,\"start\":417},{\"end\":682,\"start\":550}]", "publisher": null, "author_last_name": "[{\"end\":49,\"start\":41},{\"end\":158,\"start\":152},{\"end\":294,\"start\":288},{\"end\":431,\"start\":425},{\"end\":563,\"start\":557}]", "author_first_name": "[{\"end\":40,\"start\":36},{\"end\":151,\"start\":145},{\"end\":287,\"start\":280},{\"end\":424,\"start\":417},{\"end\":556,\"start\":550}]", "author_affiliation": "[{\"end\":143,\"start\":51},{\"end\":278,\"start\":186},{\"end\":415,\"start\":323},{\"end\":548,\"start\":456},{\"end\":681,\"start\":589}]", "title": "[{\"end\":33,\"start\":1},{\"end\":715,\"start\":683}]", "venue": null, "abstract": "[{\"end\":1457,\"start\":717}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1711,\"start\":1694},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":1877,\"start\":1853},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":2202,\"start\":2179},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2593,\"start\":2570},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2846,\"start\":2822},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3100,\"start\":3082},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4166,\"start\":4141},{\"end\":4618,\"start\":4614},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5551,\"start\":5527},{\"end\":5680,\"start\":5672},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7510,\"start\":7486},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7845,\"start\":7821},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":8714,\"start\":8690},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":10444,\"start\":10429},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":11882,\"start\":11860},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":14278,\"start\":14251},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":14301,\"start\":14278},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":14321,\"start\":14301},{\"end\":15219,\"start\":15211},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":16746,\"start\":16721},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":17051,\"start\":17026},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":17073,\"start\":17051},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":18600,\"start\":18583},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":18688,\"start\":18669},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":19201,\"start\":19189},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":20722,\"start\":20698},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":23019,\"start\":22995},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":23413,\"start\":23399},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":24616,\"start\":24595},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":24829,\"start\":24805},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":25070,\"start\":25049},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":26644,\"start\":26622},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":28028,\"start\":28009},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":28314,\"start\":28291},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":28406,\"start\":28379},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":28486,\"start\":28472},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":30924,\"start\":30902},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":30942,\"start\":30924},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":30965,\"start\":30942},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":32053,\"start\":32034},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":32076,\"start\":32058},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":32167,\"start\":32143},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":32240,\"start\":32223},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":32656,\"start\":32637},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":32746,\"start\":32728},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":35746,\"start\":35721},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":39214,\"start\":39194},{\"end\":42313,\"start\":42311},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":42914,\"start\":42887},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":42943,\"start\":42919},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":46126,\"start\":46102},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":46727,\"start\":46703},{\"end\":48826,\"start\":48813}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":49745,\"start\":49597},{\"attributes\":{\"id\":\"fig_1\"},\"end\":49803,\"start\":49746},{\"attributes\":{\"id\":\"fig_2\"},\"end\":49865,\"start\":49804},{\"attributes\":{\"id\":\"fig_3\"},\"end\":49967,\"start\":49866},{\"attributes\":{\"id\":\"fig_5\"},\"end\":50270,\"start\":49968},{\"attributes\":{\"id\":\"fig_6\"},\"end\":50496,\"start\":50271},{\"attributes\":{\"id\":\"fig_7\"},\"end\":50508,\"start\":50497},{\"attributes\":{\"id\":\"fig_8\"},\"end\":50622,\"start\":50509},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":51081,\"start\":50623},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":52081,\"start\":51082},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":52162,\"start\":52082}]", "paragraph": "[{\"end\":2203,\"start\":1473},{\"end\":3386,\"start\":2205},{\"end\":4342,\"start\":3388},{\"end\":4632,\"start\":4360},{\"end\":4806,\"start\":4634},{\"end\":5026,\"start\":4808},{\"end\":5380,\"start\":5028},{\"end\":5577,\"start\":5382},{\"end\":5637,\"start\":5579},{\"end\":5854,\"start\":5639},{\"end\":5987,\"start\":5856},{\"end\":7136,\"start\":6141},{\"end\":7551,\"start\":7187},{\"end\":7796,\"start\":7628},{\"end\":8180,\"start\":7798},{\"end\":8226,\"start\":8182},{\"end\":8292,\"start\":8228},{\"end\":8508,\"start\":8399},{\"end\":8988,\"start\":8563},{\"end\":9684,\"start\":9056},{\"end\":9911,\"start\":9841},{\"end\":10325,\"start\":9913},{\"end\":10591,\"start\":10327},{\"end\":10939,\"start\":10655},{\"end\":11235,\"start\":10941},{\"end\":11529,\"start\":11287},{\"end\":12147,\"start\":11690},{\"end\":12361,\"start\":12149},{\"end\":12738,\"start\":12404},{\"end\":13059,\"start\":12740},{\"end\":13266,\"start\":13061},{\"end\":13601,\"start\":13318},{\"end\":13971,\"start\":13629},{\"end\":14126,\"start\":14034},{\"end\":14572,\"start\":14154},{\"end\":14981,\"start\":14632},{\"end\":15083,\"start\":14983},{\"end\":15247,\"start\":15180},{\"end\":16150,\"start\":15286},{\"end\":16271,\"start\":16152},{\"end\":16396,\"start\":16336},{\"end\":16600,\"start\":16398},{\"end\":17074,\"start\":16602},{\"end\":17488,\"start\":17090},{\"end\":18211,\"start\":17497},{\"end\":18757,\"start\":18213},{\"end\":18929,\"start\":18759},{\"end\":19258,\"start\":18980},{\"end\":19368,\"start\":19275},{\"end\":19371,\"start\":19370},{\"end\":19704,\"start\":19373},{\"end\":19974,\"start\":19706},{\"end\":20723,\"start\":19976},{\"end\":20972,\"start\":20747},{\"end\":21106,\"start\":20974},{\"end\":21204,\"start\":21108},{\"end\":21309,\"start\":21206},{\"end\":21490,\"start\":21311},{\"end\":21707,\"start\":21492},{\"end\":22279,\"start\":21789},{\"end\":22403,\"start\":22281},{\"end\":22792,\"start\":22405},{\"end\":22927,\"start\":22794},{\"end\":23157,\"start\":22929},{\"end\":23605,\"start\":23189},{\"end\":23670,\"start\":23660},{\"end\":24164,\"start\":23888},{\"end\":24257,\"start\":24166},{\"end\":24343,\"start\":24312},{\"end\":24490,\"start\":24345},{\"end\":25337,\"start\":24492},{\"end\":25513,\"start\":25353},{\"end\":25748,\"start\":25515},{\"end\":26514,\"start\":25750},{\"end\":26969,\"start\":26547},{\"end\":27206,\"start\":26971},{\"end\":27441,\"start\":27213},{\"end\":27621,\"start\":27443},{\"end\":28149,\"start\":27623},{\"end\":29350,\"start\":28151},{\"end\":29506,\"start\":29352},{\"end\":30591,\"start\":29508},{\"end\":31319,\"start\":30593},{\"end\":31968,\"start\":31349},{\"end\":32469,\"start\":31970},{\"end\":33242,\"start\":32471},{\"end\":33949,\"start\":33257},{\"end\":34582,\"start\":33951},{\"end\":35492,\"start\":34584},{\"end\":35621,\"start\":35494},{\"end\":35815,\"start\":35661},{\"end\":35849,\"start\":35817},{\"end\":36072,\"start\":35900},{\"end\":36166,\"start\":36074},{\"end\":36417,\"start\":36385},{\"end\":36486,\"start\":36419},{\"end\":36567,\"start\":36529},{\"end\":36645,\"start\":36614},{\"end\":37062,\"start\":36695},{\"end\":37262,\"start\":37064},{\"end\":37385,\"start\":37264},{\"end\":37439,\"start\":37387},{\"end\":37817,\"start\":37534},{\"end\":38097,\"start\":37819},{\"end\":38255,\"start\":38202},{\"end\":38495,\"start\":38443},{\"end\":38553,\"start\":38497},{\"end\":38610,\"start\":38604},{\"end\":39003,\"start\":38899},{\"end\":39188,\"start\":39005},{\"end\":39232,\"start\":39190},{\"end\":39409,\"start\":39234},{\"end\":39601,\"start\":39469},{\"end\":39776,\"start\":39603},{\"end\":39885,\"start\":39812},{\"end\":39996,\"start\":39887},{\"end\":40523,\"start\":39998},{\"end\":40614,\"start\":40571},{\"end\":40688,\"start\":40643},{\"end\":40726,\"start\":40716},{\"end\":41047,\"start\":40782},{\"end\":41228,\"start\":41049},{\"end\":41287,\"start\":41230},{\"end\":41378,\"start\":41313},{\"end\":41451,\"start\":41436},{\"end\":41760,\"start\":41604},{\"end\":42121,\"start\":41812},{\"end\":42944,\"start\":42123},{\"end\":43488,\"start\":43037},{\"end\":44195,\"start\":43490},{\"end\":44672,\"start\":44239},{\"end\":44888,\"start\":44730},{\"end\":45520,\"start\":44992},{\"end\":45968,\"start\":45522},{\"end\":46404,\"start\":45970},{\"end\":47689,\"start\":46406},{\"end\":48106,\"start\":47748},{\"end\":48827,\"start\":48108},{\"end\":49570,\"start\":48829}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":6140,\"start\":5988},{\"attributes\":{\"id\":\"formula_1\"},\"end\":7186,\"start\":7137},{\"attributes\":{\"id\":\"formula_2\"},\"end\":7627,\"start\":7552},{\"attributes\":{\"id\":\"formula_4\"},\"end\":8398,\"start\":8293},{\"attributes\":{\"id\":\"formula_5\"},\"end\":8562,\"start\":8509},{\"attributes\":{\"id\":\"formula_6\"},\"end\":9840,\"start\":9685},{\"attributes\":{\"id\":\"formula_7\"},\"end\":10654,\"start\":10592},{\"attributes\":{\"id\":\"formula_8\"},\"end\":11286,\"start\":11236},{\"attributes\":{\"id\":\"formula_9\"},\"end\":11679,\"start\":11530},{\"attributes\":{\"id\":\"formula_10\"},\"end\":13317,\"start\":13267},{\"attributes\":{\"id\":\"formula_11\"},\"end\":13628,\"start\":13602},{\"attributes\":{\"id\":\"formula_12\"},\"end\":14033,\"start\":13972},{\"attributes\":{\"id\":\"formula_13\"},\"end\":14153,\"start\":14127},{\"attributes\":{\"id\":\"formula_14\"},\"end\":15179,\"start\":15084},{\"attributes\":{\"id\":\"formula_15\"},\"end\":15285,\"start\":15248},{\"attributes\":{\"id\":\"formula_16\"},\"end\":16335,\"start\":16272},{\"attributes\":{\"id\":\"formula_17\"},\"end\":18979,\"start\":18930},{\"attributes\":{\"id\":\"formula_18\"},\"end\":19274,\"start\":19259},{\"attributes\":{\"id\":\"formula_20\"},\"end\":21788,\"start\":21708},{\"attributes\":{\"id\":\"formula_21\"},\"end\":23659,\"start\":23606},{\"attributes\":{\"id\":\"formula_22\"},\"end\":23887,\"start\":23671},{\"attributes\":{\"id\":\"formula_23\"},\"end\":24311,\"start\":24258},{\"attributes\":{\"id\":\"formula_24\"},\"end\":35899,\"start\":35850},{\"attributes\":{\"id\":\"formula_25\"},\"end\":36204,\"start\":36167},{\"attributes\":{\"id\":\"formula_26\"},\"end\":36384,\"start\":36204},{\"attributes\":{\"id\":\"formula_27\"},\"end\":36528,\"start\":36487},{\"attributes\":{\"id\":\"formula_28\"},\"end\":36613,\"start\":36568},{\"attributes\":{\"id\":\"formula_29\"},\"end\":36694,\"start\":36646},{\"attributes\":{\"id\":\"formula_30\"},\"end\":37533,\"start\":37440},{\"attributes\":{\"id\":\"formula_31\"},\"end\":38201,\"start\":38098},{\"attributes\":{\"id\":\"formula_32\"},\"end\":38373,\"start\":38256},{\"attributes\":{\"id\":\"formula_33\"},\"end\":38442,\"start\":38373},{\"attributes\":{\"id\":\"formula_34\"},\"end\":38603,\"start\":38554},{\"attributes\":{\"id\":\"formula_35\"},\"end\":38898,\"start\":38611},{\"attributes\":{\"id\":\"formula_36\"},\"end\":39811,\"start\":39777},{\"attributes\":{\"id\":\"formula_38\"},\"end\":40570,\"start\":40524},{\"attributes\":{\"id\":\"formula_39\"},\"end\":40642,\"start\":40615},{\"attributes\":{\"id\":\"formula_40\"},\"end\":40715,\"start\":40689},{\"attributes\":{\"id\":\"formula_41\"},\"end\":40781,\"start\":40727},{\"attributes\":{\"id\":\"formula_43\"},\"end\":41312,\"start\":41288},{\"attributes\":{\"id\":\"formula_44\"},\"end\":41435,\"start\":41379},{\"attributes\":{\"id\":\"formula_45\"},\"end\":41529,\"start\":41452},{\"attributes\":{\"id\":\"formula_46\"},\"end\":41811,\"start\":41761},{\"attributes\":{\"id\":\"formula_47\"},\"end\":43036,\"start\":42945},{\"attributes\":{\"id\":\"formula_48\"},\"end\":44729,\"start\":44673},{\"attributes\":{\"id\":\"formula_49\"},\"end\":44991,\"start\":44889}]", "table_ref": "[{\"end\":27672,\"start\":27665},{\"end\":30973,\"start\":30966},{\"end\":32547,\"start\":32540}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1471,\"start\":1459},{\"attributes\":{\"n\":\"2\"},\"end\":4358,\"start\":4345},{\"attributes\":{\"n\":\"3\"},\"end\":9054,\"start\":8991},{\"end\":11688,\"start\":11681},{\"attributes\":{\"n\":\"4\"},\"end\":12402,\"start\":12364},{\"attributes\":{\"n\":\"5\"},\"end\":14630,\"start\":14575},{\"attributes\":{\"n\":\"5.1\"},\"end\":17088,\"start\":17077},{\"attributes\":{\"n\":\"5.2\"},\"end\":17495,\"start\":17491},{\"attributes\":{\"n\":\"6\"},\"end\":20745,\"start\":20726},{\"attributes\":{\"n\":\"7\"},\"end\":23187,\"start\":23160},{\"attributes\":{\"n\":\"8\"},\"end\":25351,\"start\":25340},{\"attributes\":{\"n\":\"8.1\"},\"end\":26545,\"start\":26517},{\"end\":27211,\"start\":27209},{\"attributes\":{\"n\":\"8.2\"},\"end\":31347,\"start\":31322},{\"attributes\":{\"n\":\"9\"},\"end\":33255,\"start\":33245},{\"end\":35659,\"start\":35624},{\"end\":39467,\"start\":39412},{\"end\":41602,\"start\":41531},{\"end\":44237,\"start\":44198},{\"end\":47746,\"start\":47692},{\"end\":49596,\"start\":49573},{\"end\":49757,\"start\":49747},{\"end\":49815,\"start\":49805},{\"end\":49877,\"start\":49867},{\"end\":49977,\"start\":49969},{\"end\":50499,\"start\":50498},{\"end\":50520,\"start\":50510},{\"end\":52092,\"start\":52083}]", "table": "[{\"end\":51081,\"start\":50627},{\"end\":52081,\"start\":51269},{\"end\":52162,\"start\":52127}]", "figure_caption": "[{\"end\":49745,\"start\":49599},{\"end\":49803,\"start\":49759},{\"end\":49865,\"start\":49817},{\"end\":49967,\"start\":49879},{\"end\":50270,\"start\":49979},{\"end\":50496,\"start\":50273},{\"end\":50508,\"start\":50500},{\"end\":50622,\"start\":50522},{\"end\":50627,\"start\":50625},{\"end\":51269,\"start\":51084},{\"end\":52127,\"start\":52094}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19766,\"start\":19758},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":26694,\"start\":26686},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":27841,\"start\":27833},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":29614,\"start\":29606},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":32326,\"start\":32318}]", "bib_author_first_name": "[{\"end\":52568,\"start\":52567},{\"end\":52570,\"start\":52569},{\"end\":52581,\"start\":52580},{\"end\":52743,\"start\":52742},{\"end\":52745,\"start\":52744},{\"end\":52757,\"start\":52756},{\"end\":52994,\"start\":52993},{\"end\":53003,\"start\":53002},{\"end\":53020,\"start\":53012},{\"end\":53024,\"start\":53023},{\"end\":53350,\"start\":53349},{\"end\":53352,\"start\":53351},{\"end\":53365,\"start\":53364},{\"end\":53375,\"start\":53374},{\"end\":53385,\"start\":53384},{\"end\":53689,\"start\":53688},{\"end\":53853,\"start\":53852},{\"end\":53867,\"start\":53866},{\"end\":53878,\"start\":53877},{\"end\":54133,\"start\":54125},{\"end\":54152,\"start\":54147},{\"end\":54493,\"start\":54492},{\"end\":54501,\"start\":54500},{\"end\":54509,\"start\":54508},{\"end\":54856,\"start\":54855},{\"end\":54863,\"start\":54862},{\"end\":54872,\"start\":54871},{\"end\":54879,\"start\":54878},{\"end\":54881,\"start\":54880},{\"end\":54893,\"start\":54889},{\"end\":54897,\"start\":54896},{\"end\":55292,\"start\":55284},{\"end\":55308,\"start\":55301},{\"end\":55727,\"start\":55722},{\"end\":55729,\"start\":55728},{\"end\":55745,\"start\":55738},{\"end\":55928,\"start\":55924},{\"end\":56187,\"start\":56183},{\"end\":56200,\"start\":56196},{\"end\":56430,\"start\":56423},{\"end\":56432,\"start\":56431},{\"end\":56451,\"start\":56445},{\"end\":56652,\"start\":56651},{\"end\":56654,\"start\":56653},{\"end\":56663,\"start\":56662},{\"end\":56677,\"start\":56671},{\"end\":56681,\"start\":56680},{\"end\":56683,\"start\":56682},{\"end\":56917,\"start\":56911},{\"end\":56932,\"start\":56926},{\"end\":57256,\"start\":57255},{\"end\":57267,\"start\":57266},{\"end\":57544,\"start\":57543},{\"end\":57552,\"start\":57551},{\"end\":57567,\"start\":57566},{\"end\":57577,\"start\":57576},{\"end\":57587,\"start\":57586},{\"end\":57601,\"start\":57600},{\"end\":57613,\"start\":57612},{\"end\":57889,\"start\":57883},{\"end\":58030,\"start\":58029},{\"end\":58032,\"start\":58031},{\"end\":58038,\"start\":58037},{\"end\":58280,\"start\":58277},{\"end\":58282,\"start\":58281},{\"end\":58404,\"start\":58398},{\"end\":58420,\"start\":58414},{\"end\":58643,\"start\":58642},{\"end\":58653,\"start\":58652},{\"end\":58843,\"start\":58842},{\"end\":58853,\"start\":58852},{\"end\":58868,\"start\":58863},{\"end\":58872,\"start\":58871},{\"end\":59085,\"start\":59082},{\"end\":59100,\"start\":59094},{\"end\":59237,\"start\":59231},{\"end\":59274,\"start\":59267},{\"end\":59292,\"start\":59285},{\"end\":59697,\"start\":59692},{\"end\":59908,\"start\":59902},{\"end\":59922,\"start\":59916},{\"end\":60164,\"start\":60163},{\"end\":60175,\"start\":60174},{\"end\":60184,\"start\":60183},{\"end\":60509,\"start\":60502},{\"end\":60522,\"start\":60519},{\"end\":60534,\"start\":60529},{\"end\":60888,\"start\":60883},{\"end\":60903,\"start\":60898},{\"end\":61134,\"start\":61127},{\"end\":61136,\"start\":61135},{\"end\":61150,\"start\":61145}]", "bib_author_last_name": "[{\"end\":52578,\"start\":52571},{\"end\":52591,\"start\":52582},{\"end\":52754,\"start\":52746},{\"end\":52764,\"start\":52758},{\"end\":53000,\"start\":52995},{\"end\":53010,\"start\":53004},{\"end\":53362,\"start\":53353},{\"end\":53372,\"start\":53366},{\"end\":53382,\"start\":53376},{\"end\":53393,\"start\":53386},{\"end\":53699,\"start\":53690},{\"end\":53864,\"start\":53854},{\"end\":53875,\"start\":53868},{\"end\":53885,\"start\":53879},{\"end\":54115,\"start\":54107},{\"end\":54123,\"start\":54117},{\"end\":54145,\"start\":54134},{\"end\":54161,\"start\":54153},{\"end\":54498,\"start\":54494},{\"end\":54506,\"start\":54502},{\"end\":54519,\"start\":54510},{\"end\":54860,\"start\":54857},{\"end\":54869,\"start\":54864},{\"end\":54876,\"start\":54873},{\"end\":54887,\"start\":54882},{\"end\":55299,\"start\":55293},{\"end\":55319,\"start\":55309},{\"end\":55736,\"start\":55730},{\"end\":55751,\"start\":55746},{\"end\":55935,\"start\":55929},{\"end\":56194,\"start\":56188},{\"end\":56209,\"start\":56201},{\"end\":56443,\"start\":56433},{\"end\":56456,\"start\":56452},{\"end\":56660,\"start\":56655},{\"end\":56669,\"start\":56664},{\"end\":56924,\"start\":56918},{\"end\":56939,\"start\":56933},{\"end\":57264,\"start\":57257},{\"end\":57277,\"start\":57268},{\"end\":57549,\"start\":57545},{\"end\":57564,\"start\":57553},{\"end\":57574,\"start\":57568},{\"end\":57584,\"start\":57578},{\"end\":57598,\"start\":57588},{\"end\":57610,\"start\":57602},{\"end\":57624,\"start\":57614},{\"end\":57900,\"start\":57890},{\"end\":58035,\"start\":58033},{\"end\":58045,\"start\":58039},{\"end\":58287,\"start\":58283},{\"end\":58412,\"start\":58405},{\"end\":58427,\"start\":58421},{\"end\":58650,\"start\":58644},{\"end\":58660,\"start\":58654},{\"end\":58850,\"start\":58844},{\"end\":58861,\"start\":58854},{\"end\":59092,\"start\":59086},{\"end\":59107,\"start\":59101},{\"end\":59245,\"start\":59238},{\"end\":59255,\"start\":59247},{\"end\":59265,\"start\":59257},{\"end\":59283,\"start\":59275},{\"end\":59305,\"start\":59293},{\"end\":59705,\"start\":59698},{\"end\":59914,\"start\":59909},{\"end\":59930,\"start\":59923},{\"end\":60172,\"start\":60165},{\"end\":60181,\"start\":60176},{\"end\":60190,\"start\":60185},{\"end\":60517,\"start\":60510},{\"end\":60527,\"start\":60523},{\"end\":60540,\"start\":60535},{\"end\":60896,\"start\":60889},{\"end\":60911,\"start\":60904},{\"end\":61143,\"start\":61137},{\"end\":61158,\"start\":61151}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":52695,\"start\":52567},{\"attributes\":{\"doi\":\"arXiv:1106.0665\",\"id\":\"b1\"},\"end\":52910,\"start\":52697},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":1522994},\"end\":53271,\"start\":52912},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":1552061},\"end\":53645,\"start\":53273},{\"attributes\":{\"id\":\"b4\"},\"end\":53774,\"start\":53647},{\"attributes\":{\"id\":\"b5\"},\"end\":54028,\"start\":53776},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":16053155},\"end\":54412,\"start\":54030},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":1556618},\"end\":54761,\"start\":54414},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":2187487},\"end\":55174,\"start\":54763},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":10836085},\"end\":55691,\"start\":55176},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":228631},\"end\":55895,\"start\":55693},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":14540458},\"end\":56123,\"start\":55897},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":31442909},\"end\":56348,\"start\":56125},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":10282145},\"end\":56617,\"start\":56350},{\"attributes\":{\"id\":\"b14\"},\"end\":56826,\"start\":56619},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":2341332},\"end\":57184,\"start\":56828},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":9247259},\"end\":57493,\"start\":57186},{\"attributes\":{\"doi\":\"arXiv:1312.5602\",\"id\":\"b17\"},\"end\":57840,\"start\":57495},{\"attributes\":{\"id\":\"b18\"},\"end\":57968,\"start\":57842},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":11691568},\"end\":58233,\"start\":57970},{\"attributes\":{\"id\":\"b20\"},\"end\":58349,\"start\":58235},{\"attributes\":{\"doi\":\"arXiv:1301.3584\",\"id\":\"b21\"},\"end\":58578,\"start\":58351},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":15454626},\"end\":58808,\"start\":58580},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":2984847},\"end\":59042,\"start\":58810},{\"attributes\":{\"id\":\"b24\"},\"end\":59206,\"start\":59044},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":11502873},\"end\":59630,\"start\":59208},{\"attributes\":{\"id\":\"b26\"},\"end\":59846,\"start\":59632},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":18515264},\"end\":60089,\"start\":59848},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":2808397},\"end\":60450,\"start\":60091},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":5230692},\"end\":60836,\"start\":60452},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":1891278},\"end\":61101,\"start\":60838},{\"attributes\":{\"id\":\"b31\"},\"end\":61273,\"start\":61103}]", "bib_title": "[{\"end\":52991,\"start\":52912},{\"end\":53347,\"start\":53273},{\"end\":54105,\"start\":54030},{\"end\":54490,\"start\":54414},{\"end\":54853,\"start\":54763},{\"end\":55282,\"start\":55176},{\"end\":55720,\"start\":55693},{\"end\":55922,\"start\":55897},{\"end\":56181,\"start\":56125},{\"end\":56421,\"start\":56350},{\"end\":56909,\"start\":56828},{\"end\":57253,\"start\":57186},{\"end\":58027,\"start\":57970},{\"end\":58640,\"start\":58580},{\"end\":58840,\"start\":58810},{\"end\":59229,\"start\":59208},{\"end\":59900,\"start\":59848},{\"end\":60161,\"start\":60091},{\"end\":60500,\"start\":60452},{\"end\":60881,\"start\":60838}]", "bib_author": "[{\"end\":52580,\"start\":52567},{\"end\":52593,\"start\":52580},{\"end\":52756,\"start\":52742},{\"end\":52766,\"start\":52756},{\"end\":53002,\"start\":52993},{\"end\":53012,\"start\":53002},{\"end\":53023,\"start\":53012},{\"end\":53027,\"start\":53023},{\"end\":53364,\"start\":53349},{\"end\":53374,\"start\":53364},{\"end\":53384,\"start\":53374},{\"end\":53395,\"start\":53384},{\"end\":53701,\"start\":53688},{\"end\":53866,\"start\":53852},{\"end\":53877,\"start\":53866},{\"end\":53887,\"start\":53877},{\"end\":54117,\"start\":54107},{\"end\":54125,\"start\":54117},{\"end\":54147,\"start\":54125},{\"end\":54163,\"start\":54147},{\"end\":54500,\"start\":54492},{\"end\":54508,\"start\":54500},{\"end\":54521,\"start\":54508},{\"end\":54862,\"start\":54855},{\"end\":54871,\"start\":54862},{\"end\":54878,\"start\":54871},{\"end\":54889,\"start\":54878},{\"end\":54896,\"start\":54889},{\"end\":54900,\"start\":54896},{\"end\":55301,\"start\":55284},{\"end\":55321,\"start\":55301},{\"end\":55738,\"start\":55722},{\"end\":55753,\"start\":55738},{\"end\":55937,\"start\":55924},{\"end\":56196,\"start\":56183},{\"end\":56211,\"start\":56196},{\"end\":56445,\"start\":56423},{\"end\":56458,\"start\":56445},{\"end\":56662,\"start\":56651},{\"end\":56671,\"start\":56662},{\"end\":56680,\"start\":56671},{\"end\":56686,\"start\":56680},{\"end\":56926,\"start\":56911},{\"end\":56941,\"start\":56926},{\"end\":57266,\"start\":57255},{\"end\":57279,\"start\":57266},{\"end\":57551,\"start\":57543},{\"end\":57566,\"start\":57551},{\"end\":57576,\"start\":57566},{\"end\":57586,\"start\":57576},{\"end\":57600,\"start\":57586},{\"end\":57612,\"start\":57600},{\"end\":57626,\"start\":57612},{\"end\":57902,\"start\":57883},{\"end\":58037,\"start\":58029},{\"end\":58047,\"start\":58037},{\"end\":58289,\"start\":58277},{\"end\":58414,\"start\":58398},{\"end\":58429,\"start\":58414},{\"end\":58652,\"start\":58642},{\"end\":58662,\"start\":58652},{\"end\":58852,\"start\":58842},{\"end\":58863,\"start\":58852},{\"end\":58871,\"start\":58863},{\"end\":58875,\"start\":58871},{\"end\":59094,\"start\":59082},{\"end\":59109,\"start\":59094},{\"end\":59247,\"start\":59231},{\"end\":59257,\"start\":59247},{\"end\":59267,\"start\":59257},{\"end\":59285,\"start\":59267},{\"end\":59307,\"start\":59285},{\"end\":59707,\"start\":59692},{\"end\":59916,\"start\":59902},{\"end\":59932,\"start\":59916},{\"end\":60174,\"start\":60163},{\"end\":60183,\"start\":60174},{\"end\":60192,\"start\":60183},{\"end\":60519,\"start\":60502},{\"end\":60529,\"start\":60519},{\"end\":60542,\"start\":60529},{\"end\":60898,\"start\":60883},{\"end\":60913,\"start\":60898},{\"end\":61145,\"start\":61127},{\"end\":61160,\"start\":61145}]", "bib_venue": "[{\"end\":52623,\"start\":52593},{\"end\":52740,\"start\":52697},{\"end\":53076,\"start\":53027},{\"end\":53438,\"start\":53395},{\"end\":53686,\"start\":53647},{\"end\":53850,\"start\":53776},{\"end\":54212,\"start\":54163},{\"end\":54577,\"start\":54521},{\"end\":54949,\"start\":54900},{\"end\":55368,\"start\":55321},{\"end\":55778,\"start\":55753},{\"end\":55986,\"start\":55937},{\"end\":56215,\"start\":56211},{\"end\":56462,\"start\":56458},{\"end\":56649,\"start\":56619},{\"end\":56990,\"start\":56941},{\"end\":57315,\"start\":57279},{\"end\":57541,\"start\":57495},{\"end\":57881,\"start\":57842},{\"end\":58091,\"start\":58047},{\"end\":58275,\"start\":58235},{\"end\":58396,\"start\":58351},{\"end\":58677,\"start\":58662},{\"end\":58917,\"start\":58875},{\"end\":59080,\"start\":59044},{\"end\":59375,\"start\":59307},{\"end\":59690,\"start\":59632},{\"end\":59950,\"start\":59932},{\"end\":60259,\"start\":60192},{\"end\":60622,\"start\":60542},{\"end\":60944,\"start\":60913},{\"end\":61125,\"start\":61103},{\"end\":55402,\"start\":55370},{\"end\":59430,\"start\":59377}]"}}}, "year": 2023, "month": 12, "day": 17}