{"id": 3638969, "updated": "2023-09-29 03:50:31.464", "metadata": {"title": "Efficient Neural Architecture Search via Parameter Sharing", "authors": "[{\"first\":\"Hieu\",\"last\":\"Pham\",\"middle\":[]},{\"first\":\"Melody\",\"last\":\"Guan\",\"middle\":[\"Y.\"]},{\"first\":\"Barret\",\"last\":\"Zoph\",\"middle\":[]},{\"first\":\"Quoc\",\"last\":\"Le\",\"middle\":[\"V.\"]},{\"first\":\"Jeff\",\"last\":\"Dean\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2018, "month": 2, "day": 9}, "abstract": "We propose Efficient Neural Architecture Search (ENAS), a fast and inexpensive approach for automatic model design. In ENAS, a controller learns to discover neural network architectures by searching for an optimal subgraph within a large computational graph. The controller is trained with policy gradient to select a subgraph that maximizes the expected reward on the validation set. Meanwhile the model corresponding to the selected subgraph is trained to minimize a canonical cross entropy loss. Thanks to parameter sharing between child models, ENAS is fast: it delivers strong empirical performances using much fewer GPU-hours than all existing automatic model design approaches, and notably, 1000x less expensive than standard Neural Architecture Search. On the Penn Treebank dataset, ENAS discovers a novel architecture that achieves a test perplexity of 55.8, establishing a new state-of-the-art among all methods without post-training processing. On the CIFAR-10 dataset, ENAS designs novel architectures that achieve a test error of 2.89%, which is on par with NASNet (Zoph et al., 2018), whose test error is 2.65%.", "fields_of_study": "[\"Computer Science\",\"Mathematics\"]", "external_ids": {"arxiv": "1802.03268", "mag": "2962746461", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icml/PhamGZLD18", "doi": null}}, "content": {"source": {"pdf_hash": "9fc9f65bef0bb4bc578559b500a4715c387810b2", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1802.03268v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "e6483db05556f149953fb415f642bc7b0b13740b", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/9fc9f65bef0bb4bc578559b500a4715c387810b2.txt", "contents": "\nEfficient Neural Architecture Search via Parameter Sharing\n12 Feb 2018\n\nHieu Pham \nMelody Y Guan \nBarret Zoph \nQuoc V Le \nJeff Dean \nEfficient Neural Architecture Search via Parameter Sharing\n12 Feb 2018\nWe propose Efficient Neural Architecture Search (ENAS), a fast and inexpensive approach for automatic model design. In ENAS, a controller discovers neural network architectures by searching for an optimal subgraph within a large computational graph. The controller is trained with policy gradient to select a subgraph that maximizes the expected reward on a validation set. Meanwhile the model corresponding to the selected subgraph is trained to minimize a canonical cross entropy loss. Sharing parameters among child models allows ENAS to deliver strong empirical performances, while using much fewer GPUhours than existing automatic model design approaches, and notably, 1000x less expensive than standard Neural Architecture Search. On the Penn Treebank dataset, ENAS discovers a novel architecture that achieves a test perplexity of 55.8, establishing a new state-of-the-art among all methods without post-training processing. On the CIFAR-10 dataset, ENAS finds a novel architecture that achieves 2.89% test error, which is on par with the 2.65% test error of NAS-Net (Zoph et al., 2018).\n\nIntroduction\n\nNeural architecture search (NAS) has been successfully applied to design model architectures for image classification and language models (Zoph & Le, 2017;Zoph et al., 2018;Cai et al., 2018;Liu et al., 2017;. In NAS, an RNN controller is trained in a loop: the controller first samples a candidate architecture, i.e. a child model, and then trains it to convergence to measure its performance on the task of desire. The controller then uses the performance as a guiding signal to find more promising architectures. This process is repeated for many iterations. De-\n\nThe main contribution of this work is to improve the efficiency of NAS by forcing all child models to share weights to eschew training each child model from scratch to convergence. The idea has apparent complications, as different child models might utilize their weights differently, but was encouraged by previous work on transfer learning and multitask learning, which established that parameters learned for a particular model on a particular task can be used for other models on other tasks, with little to no modifications (Razavian et al., 2014;Zoph et al., 2016;Luong et al., 2016).\n\nWe empirically show that not only is sharing parameters among child models possible, but it also allows for very strong performance. Specifically, on CIFAR-10, our method achieves a test error of 2.89%, compared to 2.65% by NAS. On Penn Treebank, our method achieves a test perplexity of 55.8, which significantly outperforms NAS's test perplexity of 62.4 (Zoph & Le, 2017) and which is a new state-of-the-art among Penn Treebank's approaches that do not utilize post-training processing. Importantly, in all of our experiments, for which we use a single Nvidia GTX 1080Ti GPU, the search for architectures takes less than 16 hours. Compared to NAS, this is a reduction of GPU-hours by more than 1000x. Due to its efficiency, we name our method Efficient Neural Architecture Search (ENAS).\n\n\nMethods\n\nCentral to the idea of ENAS is the observation that all of the graphs which NAS ends up iterating over can be viewed as sub-graphs of a larger graph. In other words, we can represent NAS's search space using a single directed acyclic graph (DAG). Figure 2 illustrates a generic example DAG, where an architecture can be realized by taking a subgraph of the DAG. Intuitively, ENAS's DAG is the su- Figure 2. The graph represents the entire search space while the red arrows define a model in the search space, which is decided by a controller. Here, node 1 is the input to the model whereas nodes 3 and 6 are the model's outputs. perposition of all possible child models in a search space of NAS, where the nodes represent the local computations and the edges represent the flow of information. The local computations at each node have their own parameters, which are used only when the particular computation is activated. Therefore, ENAS's design allows parameters to be shared among all child models, i.e. architectures, in the search space.\n\nIn the following, we facilitate the discussion of ENAS with an example that illustrates how to design a cell for recurrent neural networks from a specified DAG and a controller (Section 2.1). We will then explain how to train ENAS and how to derive architectures from ENAS's controller (Section 2.2). Finally, we will explain our search space for designing convolutional architectures (Sections 2.3 and 2.4).\n\n\nDesigning Recurrent Cells\n\nTo design recurrent cells, we employ a DAG with N nodes, where the nodes represent local computations, and the edges represent the flow of information between the N nodes. ENAS's controller is an RNN that decides: 1) which edges are activated and 2) which computations are performed at each node in the DAG. This design of our search space for RNN cells is different from the search space for RNN cells in Zoph & Le (2017), where the authors fix the topology of their architectures as a binary tree and only learn the operations at each node of the tree. In contrast, our search space allows ENAS to design both the topology and the operations in RNN cells, and hence is more flexible.\n\nTo create a recurrent cell, the controller RNN samples N blocks of decisions. Here we illustrate the ENAS mechanism via a simple example recurrent cell with N = 4 computational nodes (visualized in Figure 1). Let x t be the input signal for a recurrent cell (e.g. word embedding), and h t\u22121 be the output from the previous time step. We sample as follows.\n\n1. At node 1: The controller first samples an activation function. In our example, the controller chooses the tanh activation function, which means that node 1 of the recurrent cell\nshould compute h1 = tanh (xt \u00b7 W (x) + ht\u22121 \u00b7 W (h) 1 ).\n2. At node 2: The controller then samples a previous index and an activation function. In our example, it chooses the previous index 1 and the activation function ReLU. Thus, node 2 of the cell computes h2 = ReLU(h1 \u00b7 W (h) 2,1 ).\n\n3. At node 3: The controller again samples a previous index and an activation function. In our example, it chooses the previous index 2 and the activation function ReLU. Therefore, h3 = ReLU(h2 \u00b7 W (h) 3,2 ).\n\n4. At node 4: The controller again samples a previous index and an activation function. In our example, it chooses the previous index 1 and the activation function tanh, leading to h4 = tanh (h1 \u00b7 W (h) 4,1 ).\n\n\n5.\n\nFor the output, we simply average all the loose ends, i.e. the nodes that are not selected as inputs to any other nodes. In our example, since the indices 3 and 4 were never sampled to be the input for any node, the recurrent cell uses their average (h3 + h4)/2 as its output. In other words, ht = (h3 + h4)/2.\n\nIn the example above, we note that for each pair of nodes j < \u2113, there is an independent parameter matrix W (h) \u2113,j . As shown in the example, by choosing the previous indices, the controller also decides which parameter matrices are used. Therefore, in ENAS, all recurrent cells in a search space share the same set of parameters.\n\nOur search space includes an exponential number of configurations. Specifically, if the recurrent cell has N nodes and we allow 4 activation functions (namely tanh, ReLU, identity, and sigmoid), then the search space has 4 N \u00d7 N ! configurations. In our experiments, N = 12, which means there are approximately 10 15 models in our search space.\n\n\nTraining ENAS and Deriving Architectures\n\nOur controller network is an LSTM with 100 hidden units (Hochreiter & Schmidhuber, 1997). This LSTM samples decisions via softmax classifiers, in an autoregressive fashion: the decision in the previous step is fed as input embedding into the next step. At the first step, the controller network receives an empty embedding as input.\n\nIn ENAS, there are two sets of learnable parameters: the parameters of the controller LSTM, denoted by \u03b8, and the shared parameters of the child models, denoted by \u03c9. The training procedure of ENAS consists of two interleaving phases. The first phase trains \u03c9, the shared parameters of the child models, on a whole pass through the training data set. For our Penn Treebank experiments, \u03c9 is trained for about 400 steps, each on a minibatch of 64 examples, where the gradient \u2207 \u03c9 is computed using back-propagation through time, truncated at 35 time steps. Meanwhile, for CIFAR-10, \u03c9 is trained on 45, 000 training images, separated into minibatches of size 128, where \u2207 \u03c9 is computed using standard back-propagation. The second phase trains \u03b8, the parameters of the controller LSTM, for a fixed number of steps, typically set to 2000 in our experiments. These two phases are alternated during the training of ENAS. More details are as follows.\n\nTraining the shared parameters \u03c9 of the child models. In this step, we fix the controller's policy \u03c0(m; \u03b8) and perform stochastic gradient descent (SGD) on \u03c9 to minimize the expected loss function E m\u223c\u03c0 [L(m; \u03c9)]. Here, L(m; \u03c9) is the standard cross-entropy loss, computed on a minibatch of training data, with a model m sampled from \u03c0(m; \u03b8). The gradient is computed using the Monte Carlo estimate\n\u2207 \u03c9 E m\u223c\u03c0(m;\u03b8) [L(m; \u03c9)] \u2248 1 M M i=1 \u2207 \u03c9 L(m i , \u03c9),(1)\nwhere m i 's are sampled from \u03c0(m; \u03b8) as described above.\n\nEqn 1 provides an unbiased estimate of the gradient \u2207 \u03c9 E m\u223c\u03c0(m;\u03b8) [L(m; \u03c9)]. However, this estimate has a higher variance than the standard SGD gradient, where m is fixed. Nevertheless -and this is perhaps surprising -we find that M = 1 works just fine, i.e. we can update \u03c9 using the gradient from any single model m sampled from \u03c0(m; \u03b8). As mentioned, we train \u03c9 during a entire pass through the training data.\n\nTraining the controller parameters \u03b8. In this step, we fix \u03c9 and update the policy parameters \u03b8, aiming to maxi-mize the expected reward E m\u223c\u03c0(m;\u03b8) [R(m, \u03c9)]. We employ the Adam optimizer (Kingma & Ba, 2015), for which the gradient is computed using REINFORCE (Williams, 1992), with a moving average baseline to reduce variance.\n\nThe reward R(m, \u03c9) is computed on the validation set, rather than on the training set, to encourage ENAS to select models that generalize well rather than models that overfit the training set well. In our language model experiment, the reward function is c/valid ppl, where the perplexity is computed on a minibatch of validation data. In our image classification experiments, the reward function is the accuracy on a minibatch of validation images.\n\nDeriving Architectures. We discuss how to derive novel architectures from a trained ENAS model. We first sample several models from the trained policy \u03c0(m, \u03b8). For each sampled model, we compute its reward on a single minibatch sampled from the validation set. We then take only the model with the highest reward to re-train from scratch. It is possible to improve our experimental results by training all the sampled models from scratch and selecting the model with the highest performance on a separated validation set, as done by other works (Zoph & Le, 2017;Zoph et al., 2018;Liu et al., 2017;. However, our method yields similar performance whilst being much more economical. We now discuss the search space for convolutional architectures. Recall that in the search space of the recurrent cell, the controller RNN samples two decisions at each decision block: 1) what previous node to connect to and 2) what activation function to use. In the search space for convolu-tional models, the controller RNN also samples two sets of decisions at each decision block: 1) what previous nodes to connect to and 2) what computation operation to use. These decisions construct a layer in the convolutional model.\n\n\nDesigning Convolutional Networks\n\nThe decision of what previous nodes to connect to allows the model to form skip connections (He et al., 2016a;Zoph & Le, 2017). Specifically, at layer k, up to k\u22121 mutually distinct previous indices are sampled, leading to 2 k\u22121 possible decisions at layer k. We provide an illustrative example of sampling a convolutional network in Figure 3. In this example, at layer k = 4, the controller samples previous indices {1, 3}, so the outputs of layers 1 and 3 are concatenated along their depth dimension and sent to layer 4.\n\nMeanwhile, the decision of what computation operation to use sets a particular layer into convolution or average pooling or max pooing. The 6 operations available for the controller are: convolutions with filter sizes 3 \u00d7 3 and 5 \u00d7 5, depthwise-separable convolutions with filter sizes 3\u00d73 and 5\u00d75 (Chollet, 2017), and max pooling and average pooling of kernel size 3 \u00d7 3. As for recurrent cells, each operation at each layer in our ENAS convolutional network has a distinct set of parameters.\n\nMaking the described set of decisions for a total of L times, we can sample a network of L layers. Since all decisions are independent, there are 6 L \u00d7 2 L(L\u22121)/2 networks in the search space. In our experiments, L = 12, resulting in 1.6 \u00d7 10 29 possible networks.\n\n\nDesigning Convolutional Cells\n\nRather than designing the entire convolutional network, one can design smaller modules and then connect them together to form a network (Zoph et al., 2018). Figure 4 illustrates this design, where the convolutional cell and reduction cell architectures are to be designed. We now discuss how to use ENAS to search for the architectures of these cells. We utilize the ENAS computational DAG with B nodes to represent the computations that happen locally in a cell.\n\nIn this DAG, node 1 and node 2 are treated as the cell's inputs, which are the outputs of the two previous cells in the final network (see Figure 4). For each of the remaining B \u2212 2 nodes, we ask the controller RNN to make two sets of decisions: 1) two previous nodes to be used as inputs to the current node and 2) two operations to apply to the two sampled nodes. The 5 available operations are: identity, separable convolution with kernel size 3 \u00d7 3 and 5 \u00d7 5, and average pooling and max pooling with kernel size 3 \u00d7 3. At each node, after the previous nodes and their corresponding operations are sampled, the operations are applied on the previous nodes, and their results are added. As before, we illustrate the mechanism of our search space with an example, here with B = 4 nodes (refer to Figure 5). Details are as follows.\n\n1. Nodes 1, 2 are input nodes, so no decisions are needed for them. Let h1, h2 be the outputs of these nodes.\n\n2. At node 3: the controller samples two previous nodes and two operations. In Figure 5 Top Left, it samples node 2, node 2, separable conv 5x5, and identity. This means that h3 = sep conv 5x5(h2) + id(h2).\n\n3. At node 4: the controller samples node 3, node 1, avg pool 3x3, and sep conv 3x3. This means that h4 = avg pool 3x3(h3) + sep conv 3x3(h1).\n\n4. Since all nodes but h4 were used as inputs to at least another node, the only loose end, h4, is treated as the cell's output.\n\nIf there are multiple loose ends, they will be concatenated along the depth dimension to form the cell's output.\n\nA reduction cell can also be realized from the search space we discussed, simply by: 1) sampling a computational graph from the search space, and 2) applying all operations with a stride of 2. A reduction cell thus reduces the spatial dimensions of its input by a factor of 2. Following Zoph et al. (2018), we sample the reduction cell conditioned on the convolutional cell, hence making the controller RNN run for a total of 2(B \u2212 2) blocks.\n\nFinally, we estimate the complexity of this search space. At node i (3 \u2264 i \u2264 B), the controller can select any two nodes from the i \u2212 1 previous nodes, and any two operations from 5 operations. As all decisions are independent, there are (5 \u00d7 (B \u2212 2)!) 2 possible cells. Since we independently sample for a convolutional cell and a reduction cell, the final size of the search space is (5 \u00d7 (B \u2212 2)!) 4 . With B = 7 as in our experiments, the search space can realize 1.3 \u00d7 10 11 final networks, making it significantly smaller than the search space for entire convolutional networks (Section 2.3).\n\n\nExperiments\n\nWe first present our experimental results from employing ENAS to design recurrent cells on the Penn Treebank dataset and convolutional architectures on the CIFAR-10 dataset. We then present an ablation study which asserts the role of ENAS in discovering novel architectures.\n\n\nLanguage Model with Penn Treebank\n\nDataset and Settings. Penn Treebank (Marcus et al., 1994) is a well-studied benchmark for language model. We use the standard pre-processed version of the dataset, which is also used by previous works, e.g. Zaremba et al. (2014).\n\nSince the goal of our work is to discover cell architectures, we only employ the standard training and test process on Penn Treebank, and do not utilize post-training techniques such as neural cache (Grave et al., 2017) and dynamic evaluation (Krause et al., 2017). Additionally, as Collins et al. (2017) have established that RNN models with more parameters can learn to store more information, we limit the size of our ENAS cell to 24M parameters. We also do not tune our hyper-parameters extensively like Melis et al. (2017), nor do we train multiple architectures and select the best one based on their validation perplexities like Zoph & Le (2017). Therefore, ENAS is not at any advantage, compared to Zoph & Le (2017) Training details. Our controller is trained using Adam, with a learning rate of 0.00035. To prevent premature convergence, we also use a tanh constant of 2.5 and a temperature of 5.0 for the sampling logits (Bello et al., 2017a;b), and add the controller's sample entropy to the reward, weighted by 0.0001. Additionally, we augment the simple transformations between nodes in the constructed recurrent cell with highway connections (Zilly et al., 2017). For instance, instead of having h 2 = ReLU(h 1 \u00b7 W (h) 2,1 ) as shown in the example from Section 2.1, we have h\n2 = c 2 \u2297 ReLU(h 1 \u00b7 W (h) 2,1 ) + (1 \u2212 c 2 ) \u2297 h 1 , where c 2 = sigmoid(h 1 \u00b7 W (c)\n2,1 ) and \u2297 denotes elementwise multiplication.\n\nThe shared parameters of the child models \u03c9 are trained using SGD with a learning rate of 20.0, decayed by a factor of 0.96 after every epoch starting at epoch 15, for a total of 150 epochs. We clip the norm of the gradient \u2207 \u03c9 at 0.25. We find that using a large learning rate whilst clipping the gradient norm at a small threshold makes the updates on \u03c9 more stable. We utilize three regularization techniques on \u03c9: an \u2113 2 regularization weighted by 10 \u22127 ; variational dropout (Gal & Ghahramani, 2016); and tying word embeddings and softmax weights (Inan et al., 2017). More details are in Appendix A.\n\nResults. Running on a single Nvidia GTX 1080Ti GPU, ENAS finds a recurrent cell in about 10 hours. In Table 1, we present the performance of the ENAS cell as well as other baselines that do not employ post-training processing. The ENAS cell achieves a test perplexity of 55.8, which is on par with the existing state-of-the-art of 56.0 achieved by Mixture of Softmaxes (MoS) (Yang et al., 2018). Note that we do not apply MoS to the ENAS cell. Importantly, ENAS cell outperforms NAS (Zoph & Le, 2017) by more than 6 perplexity points, whilst the search process of ENAS, in terms of GPU hours, is more than 1000x faster. Our ENAS cell, visualized in Figure 6, has a few interesting properties. First, all non-linearities in the cell are either ReLU or tanh, even though the search space also has two other functions: identity and sigmoid. Second, we suspect this cell is a local optimum, similar to the observations made by Zoph & Le (2017). When we randomly pick some  (Inan et al., 2017) VD, WT 51 68.5 LSTM (Melis et al., 2017) Hyper-parameters Search 24 59.5 LSTM (Yang et al., 2018) VD, WT, \u21132, AWD, MoC 22 57.6 LSTM (Merity et al., 2017) VD, WT, \u21132, AWD 24 57.3 LSTM (Yang et al., 2018) VD nodes and switch the non-linearity into identity or sigmoid, the perplexity increases up to 8 points. Similarly, when we randomly switch some ReLU nodes into tanh or vice versa, the perplexity also increases, but only up to 3 points. Third, as shown in Figure 6, the output of our ENAS cell is an average of 6 nodes. This behavior is similar to that of Mixture of Contexts (MoC) (Yang et al., 2018). Not only does ENAS independently discover MoC, but it also learns to balance between i) the number of contexts to mix, which increases the model's expressiveness, and ii) the depth of the recurrent cell, which learns more complex transformations (Zilly et al., 2017).\n\n\nImage Classification on CIFAR-10\n\nDataset. The CIFAR-10 dataset (Krizhevsky, 2009) consists of 50, 000 training images and 10, 000 test images. We use the standard data pre-processing and augmentation techniques, i.e. subtracting the channel mean and dividing the channel standard deviation, centrally padding the training images to 40 \u00d7 40 and randomly cropping them back to 32 \u00d7 32, and randomly flipping them horizontally.\n\nSearch spaces. We apply ENAS to two search spaces: 1) the macro search space over entire convolutional models (Section 2.3); and 2) the micro search space over convolutional cells (Section 2.4).\n\nTraining details. The shared parameters \u03c9 are trained with Nesterov momentum (Nesterov, 1983), where the learning rate follows the cosine schedule with l max = 0.05, l min = 0.001, T 0 = 10, and T mul = 2 (Loshchilov & Hutter, 2017). Each architecture search is run for 310 epochs. We initialize \u03c9 with He initialization (He et al., 2015). We also apply an \u2113 2 weight decay of 10 \u22124 . We train the architectures recommended by the controller using the same settings.\n\nThe policy parameters \u03b8 are initialized uniformly in [\u22120.1, 0.1], and trained with Adam at a learning rate of 0.00035. Similar to the procedure in Section 3.1, we apply a tanh constant of 2.5 and a temperature of 5.0 to the controller's logits, and add the controller entropy to the reward, weighted by 0.1. Additionally, in the macro search space, we enforce the sparsity in the skip connections by adding to the reward the KL divergence between: 1) the skip connection probability between any two layers and 2) our chosen probability \u03c1 = 0.4, which represents the prior belief of a skip connection being formed. This KL divergence term is weighted by 0.8. More training details are in Appendix B.\n\nResults. Table 2 summarizes the test errors of ENAS and other approaches. In this table, the first block presents the results of DenseNet (Huang et al., 2016), one of the highest-performing architectures that are designed by human experts. When trained with a strong regularization technique, such as Shake-Shake (Gastaldi, 2016), and a data augmentation technique, such as CutOut (DeVries & Taylor, 2017), DenseNet impressively achieves the test error of 2.56%.\n\nThe second block of Table 2 presents the performances of approaches that attempt to design an entire convolutional network, along with the the number of GPUs and the time these methods take to discover their final models. As shown, ENAS finds a network architecture, which we visualize in Figure 7, and which achieves 4.23% test error. This test error is better than the error of 4.47%, achieved by the second best NAS model (Zoph & Le, 2017). If we keep the architecture, but increase the number of filters in the network's highest layer to 512, then the test error decreases to 3.87%, which is not far away from NAS's best model, whose test error is 3.65%. Impressively, ENAS takes about 7 hours to find this architecture, reducing the number of  (Baker et al., 2017a) 10 8-10 11.2 6.92 Net Transformation (Cai et al., 2018) 5 2 19.7 5.70 FractalNet (Larsson et al., 2017) \u2212 \u2212 38.6 4.60 SMASH (Brock et al., 2018) 1 1.5 16.0 4.03 NAS (Zoph & Le, 2017) 800 21-28 7.1 4.47 NAS + more filters (Zoph & Le, 2017) 800   GPU-hours by more than 50,000x compared to NAS.\n\nThe third block of Table 2 presents the performances of approaches that attempt to design one more more modules and then connect them together to form the final networks. ENAS takes 11.5 hours to discover the convolution cell and the reduction cell, which are visualized in Figure 8. With the convolutional cell replicated for N = 6 times (c.f. Figure 4), ENAS achieves 3.54% test error, on par with the 3.41% error of NASNet-A (Zoph et al., 2018). With CutOut (DeVries & Taylor, 2017), ENAS's error decreases to 2.89%, compared to 2.65% by NASNet-A.\n\nIn addition to ENAS's strong performance, we also find that the models found by ENAS are, in a sense, the local minimums in their search spaces. In particular, in the model that ENAS finds from the marco search space, if we replace all separable convolutions with normal convolutions, and then adjust the model size so that the number of parameters stay the same, then the test error increases by 1.7%. Similarly, if we randomly change several connections in the cells that ENAS finds in the micro search space, the test error increases by 2.1%. This behavior is also observed when ENAS searches for recurrent cells (c.f. Section 3.1), as well as in Zoph & Le (2017). We thus believe that the controller RNN learned by ENAS is as good as the controller RNN learned by NAS, and that the performance gap between NAS and ENAS is due to the fact that we do not sample multiple architectures from our trained controller, train them, and then select the best architecture on the validation data. This extra step benefits NAS's performance. \n\n\nThe Importance of ENAS\n\nA question regarding ENAS's importance is whether ENAS is actually capable of finding good architectures, or if it is the design of the search spaces that leads to ENAS's strong empirical performance.\n\nComparing to Guided Random Search. We uniformly sample a recurrent cell, an entire convolutional network, and a pair of convolutional and reduction cells from their search spaces and train them to convergence using the same settings as the architectures found by ENAS. For the macro space over entire networks, we sample the skip connections with an activation probability of 0.4, effectively balancing ENAS's advantage from the KL divergence term in its reward (see Section 3.2). Our random recurrent cell achieves the test perplexity of 81.2 on Penn Treebank, which is far worse than ENAS's perplexity of 55.8. Our random convolutional network reaches 5.86% test error, and our two random cells reache 6.77% on CIFAR-10, while ENAS achieves 4.23% and 3.54%, respectively.\n\nDisabling ENAS Search. In addition to random search, we attempt to train only the shared parameters \u03c9 without updating the controller. We conduct this study for our macro search space (Section 2.3), where the effect of an untrained random controller is similar to dropout with a rate of 0.5 on the skip connections, and to drop-path on the operations (Zoph et al., 2018;Larsson et al., 2017). At convergence, the model has the error rate of 8.92%. On the validation set, an ensemble of 250 Monte Carlo configurations of this trained model can only reach 5.49% test error. We therefore conclude that the appropriate training of the ENAS controller is crucial for good performance.\n\n\nRelated Work and Discussions\n\nThere is a growing interest in improving the efficiency of NAS. Concurrent to our work are the promising ideas of using performance prediction (Baker et al., 2017b;Deng et al., 2017), using iterative search method for architectures of growing complexity (Liu et al., 2017), and using hierarchical representation of architectures . Table 2 shows that ENAS is significantly more efficient than these other methods, in GPU hours.\n\nENAS's design of sharing weights between architectures is inspired by the concept of weight inheritance in neural model evolution (Real et al., 2017;. Additionally, ENAS's choice of representing computations using a DAG is inspired by the concept of stochastic computational graph (Schulman et al., 2015), which introduces nodes with stochastic outputs into a computational graph. ENAS's utilizes such stochastic decisions in a network to make discrete architectural decisions that govern subsequent computations in the network, trains the decision maker, i.e. the controller, and finally harvests the decisions to derive architectures.\n\nClosely related to ENAS is SMASH (Brock et al., 2018), which designs an architecture and then uses a hypernetwork (Ha et al., 2017) to generate its weight. Such usage of the hypernetwork in SMASH inherently restricts the weights of SMASH's child architectures to a low-rank space. This is because the hypernetwork generates weights for SMASH's child models via tensor products (Ha et al., 2017), which suffer from a low-rank restriction as for arbitrary matrices A and B, one always has the inequality: rank(A \u00b7 B) \u2264 min {rank(A), rank(B)}. Due to this limit, SMASH will find architectures that perform well in the restricted low-rank space of their weights, rather than architectures that perform well in the normal training setups, where the weights are no longer restricted. Meanwhile, ENAS allows the weights of its child models to be arbitrary, effectively avoiding such restriction. We suspect this is the reason behind ENAS's superior empirical performance to SMASH. In addition, it can be seen from our experiments that ENAS can be flexibly applied to multiple search spaces and disparate domains, e.g. the space of RNN cells for the text domain, the macro search space of entire networks, and the micro search space of convolutional cells for the image domain.\n\n\nConclusion\n\nNAS is an important advance that automatizes the designing process of neural networks. However, NAS's computational expense prevents it from being widely adopted.\n\nIn this paper, we presented ENAS, a novel method that speeds up NAS by more than 1000x, in terms of GPU hours. ENAS's key contribution is the sharing of parameters across child models during the search for architectures. This insight is implemented by searching for a subgraph within a larger graph that incorporates architectures in a search space. We showed that ENAS works well on both CIFAR-10 and Penn Treebank datasets.\n\nFigure 1 .\n1An example of a recurrent cell in our search space with 4 computational nodes. Left: The computational DAG that corresponds to the recurrent cell. The red edges represent the flow of information in the graph. Middle: The recurrent cell. Right: The outputs of the controller RNN that result in the cell in the middle and the DAG on the left. Note that nodes 3 and 4 are never sampled by the RNN, so their results are averaged and are treated as the cell's output.\n\nFigure 3 .\n3An example run of a recurrent cell in our search space with 4 computational nodes, which represent 4 layers in a convolutional network. Top: The output of the controller RNN. Bottom Left: The computational DAG corresponding to the network's architecture. Red arrows denote the active computational paths. Bottom Right: The complete network. Dotted arrows denote skip connections.\n\nFigure 4 .\n4Connecting 3 blocks, each with N convolution cells and 1 reduction cell, to make the final network.\n\nFigure 5 .\n5An example run of the controller for our search space over convolutional cells. Top: the controller's outputs. In our search space for convolutional cells, node 1 and node 2 are the cell's inputs, so the controller only has to design node 3 and node 4. Bottom Left: The corresponding DAG, where red edges represent the activated connections. Bottom Right: the convolutional cell according to the controller's sample.\n\n\n;Yang et al. (2018);Melis et al. (2017), and its improved performance is only due to the cell's architecture.\n\nFigure 6 .\n6The RNN cell ENAS discovered for Penn Treebank.\n\nFigure 7 .\n7ENAS's discovered network from the macro search space for image classification.\n\nFigure 8 .\n8ENAS cells discovered in the micro search space.\n\n\nTable 1. Test perplexity on Penn Treebank of ENAS and other baselines. Abbreviations: RHN is Recurrent Highway Network, VD is Variational Dropout; WT is Weight Tying; \u21132 is Weight Penalty; AWD is Averaged Weight Drop; MoC is Mixture of Contexts; MoS is Mixture of Softmaxes., WT, \u21132, AWD, MoS \n22 \n56.0 \n\nRHN (Zilly et al., 2017) \nVD, WT \n24 \n66.0 \n\nNAS (Zoph & Le, 2017) \nVD, WT \n54 \n62.4 \n\nENAS \nVD, WT, \u21132 \n24 \n55.8 \n\n\n\nTable 2 .\n2Classification errors of ENAS and baselines on CIFAR-10. In this table, the first block presents DenseNet, one of the state-ofthe-art architectures designed by human experts. The second block presents approaches that design the entire network. The last block presents techniques that design modular cells which are combined to build the final network.\nAcknowledgementsThe authors want to thank Jaime Carbonell, Zihang Dai, Lukasz Kaiser, Azalia Mirhoseini, Ashwin Paranjape, Daniel Selsam, and Xinyi Wang for their suggestions on improving the paper.Appendix for: Efficient Neural Architecture Search via Parameter SharingA. Details on Penn Treebank ExperimentsComputations in an RNN Cell. We think of the cell at time step t as a DAG with N computational nodes, indexed by h1 receives two inputs: 1) the RNN signal x (t) at its current time step; and 2) the output h (t\u22121) D from the cell at the previous time step. The following computations are performed:where f 1 is an activation function that the controller will decide. For \u2113 = 2, 3, ..., N , node h \u2113 receives its input from a layer j \u2113 \u2208 {h 1 , ..., h \u2113\u22121 }, which is specified by the controller, and then performs the following computations:Therefore, the shared parameters \u03c9 among different recurrent cells consist of all the matrices W (x,c) ,\u2113,j , word embeddings, and the softmax weights if they are not tied with the word embeddings. The controller decides the connection j \u2113 and the activation function f \u2113 for each \u2113 \u2208 {2, 3, ..., N }. The layers that are never selected by any subsequent layers are averaged and sent to a softmax head, or to higher recurrent layers.Parameters Initialization. Our controller's parameters \u03b8 are initialized uniformly in [\u22120.1, 0.1]. We find that for Penn Treebank, ENAS quite insensitive to its initialization than for CIFAR-10. Meanwhile, the shared parameters \u03c9 are initialized uniformly in [\u22120.025, 0.025] during architecture search, and [\u22120.04, 0.04] when we train a fixed architecture recommended by the controller.Stabilizing the Updates of \u03c9. To stabilize the updates of \u03c9, during the architectures search phase, a layer of batch normalization(Ioffe & Szegedy, 2015)is added immediately after the average of these layers, before the average are sent out of the cell as its output. When a fixed cell is sampled by the controller, we find that we can remove the batch normalization layer without any loss in performance.B. Details on CIFAR-10 ExperimentsWe find the following tricks crucial for achieving good performance with ENAS. Standard NAS(Zoph & Le, 2017;Zoph et al., 2018)rely on these and other tricks as well.Structure of Convolutional Layers.Each convolution in our model is applied in the order of relu-convbatchnorm(Ioffe & Szegedy, 2015;He et al., 2016b). Additionally, in our micro search space, each depthwise separable convolution is applied twice(Zoph et al., 2018).Stabilizing Stochastic Skip Connections. If a layer receives skip connections from multiple layers before it, then these layers' outputs are concatenated in their depth dimension, and then a convolution of filter size 1 \u00d7 1 (followed by a batch normalization layer and a ReLU layer) is performed to ensure that the number of output channels does not change between different architectures. When a fixed architecture is sampled, we find that one can remove these batch normalization layers to save computing time and parameters of the final model, without sacrificing significant performance.Global Average Pooling. After the final convolutional layer, we average all the activations of each channel and then pass them to the Softmax layer. This trick was introduced by(Lin et al., 2013), with the purpose of reducing the number of parameters in the dense connection to the Softmax layer to avoid overfitting.The last two tricks are extremely important, since the gradient updates of the shared parameters \u03c9, as described in Eqn 1, have very high variance. In fact, we find that without these two tricks, the training of ENAS is very unstable.\nDesigning neural network architectures using reinforcement learning. Baker, Bowen, Gupta, Otkrist, Nikhil Naik, Ramesh Raskar, ICLR. Baker, Bowen, Gupta, Otkrist, Naik, Nikhil, and Raskar, Ramesh. Designing neural network architectures using reinforcement learning. In ICLR, 2017a.\n\nAccelerating neural architecture search using performance prediction. Baker, Bowen, Otkrist, Gupta, Ramesh Raskar, Nikhil Naik, 1705.10823Arxiv. Baker, Bowen, Otkrist, Gupta, Raskar, Ramesh, and Naik, Nikhil. Accelerating neural architecture search using per- formance prediction. Arxiv, 1705.10823, 2017b.\n\nNeural combinatorial optimization with reinforcement learning. Bello, Irwan, Pham, Hieu, Le, V Quoc, Mohammad Norouzi, Bengio, Samy, ICLR Workshop. Bello, Irwan, Pham, Hieu, Le, Quoc V., Norouzi, Moham- mad, and Bengio, Samy. Neural combinatorial optimiza- tion with reinforcement learning. In ICLR Workshop, 2017a.\n\nNeural optimizer search with reinforcement learning. Bello, Irwan, Zoph, Barret, Vijay Vasudevan, Le Quoc, V , ICML. Bello, Irwan, Zoph, Barret, Vasudevan, Vijay, and Le, Quoc V. Neural optimizer search with reinforcement learning. In ICML, 2017b.\n\nSMASH: one-shot model architecture search through hypernetworks. ICLR. Andrew Brock, Lim, Theodore, James M Ritchie, Nick Weston, Brock, Andrew, Lim, Theodore, Ritchie, James M., and Weston, Nick. SMASH: one-shot model architecture search through hypernetworks. ICLR, 2018.\n\nEfficient architecture search by network transformation. Han Cai, Chen, Tianyao, Zhang, Yu Weinan, Yong , Wang , AAAI. Cai, Han, Chen, Tianyao, Zhang, Weinan, Yu, Yong., and Wang, Jun. Efficient architecture search by network transformation. In AAAI, 2018.\n\nXception: Deep learning with depthwise separable convolutions. Francois Chollet, CVPR. Chollet, Francois. Xception: Deep learning with depthwise separable convolutions. In CVPR, 2017.\n\nCapacity and trainability in recurrent neural networks. Jasmine Collins, Jascha Sohl-Dickstein, David Sussillo, Collins, Jasmine, Sohl-Dickstein, Jascha, and Sussillo, David. Capacity and trainability in recurrent neural net- works. In ICLR, 2017.\n\nDeng, Boyang, Junjie Yan, Dahua Lin, Peephole, Predicting network performance before training. Arxiv, 1705.10823. Deng, Boyang, Yan, Junjie, and Lin, Dahua. Peephole: Predicting network performance before training. Arxiv, 1705.10823, 2017.\n\nImproved regularization of convolutional neural networks with cutout. Terrance Devries, Graham W Taylor, 1708.04552DeVries, Terrance and Taylor, Graham W. Improved regu- larization of convolutional neural networks with cutout. Arxiv, 1708.04552, 2017.\n\nA theoretically grounded application of dropout in recurrent neural networks. Yarin Gal, Zoubin Ghahramani, NIPS. Gal, Yarin and Ghahramani, Zoubin. A theoretically grounded application of dropout in recurrent neural net- works. In NIPS, 2016.\n\nShake-shake regularization of 3-branch residual networks. Xavier Gastaldi, ICLR Workshop Track. Gastaldi, Xavier. Shake-shake regularization of 3-branch residual networks. In ICLR Workshop Track, 2016.\n\nImproving neural language models with a continuous cache. Edouard Grave, Armand Joulin, Nicolas Usunier, Grave, Edouard, Joulin, Armand, and Usunier, Nicolas. Im- proving neural language models with a continuous cache. In ICLR, 2017.\n\nDavid Ha, Andrew Dai, Quoc V Le, Hypernetworks, ICLR. Ha, David, Dai, Andrew, and Le, Quoc V. Hypernetworks. In ICLR, 2017.\n\nDelving deep into rectifiers: Surpassing humanlevel performance on imagenet classification. He, Kaiming, Zhang, Xiangyu, Shaoqing Rein, Jian Sun, CVPR. He, Kaiming, Zhang, Xiangyu, Rein, Shaoqing, and Sun, Jian. Delving deep into rectifiers: Surpassing human- level performance on imagenet classification. In CVPR, 2015.\n\nDeep residual learning for image recognition. He, Kaiming, Zhang, Xiangyu, Shaoqing Ren, Jian Sun, CPVR. He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian. Deep residual learning for image recognition. In CPVR, 2016a.\n\nIdentity mappings in deep residual networks. He, Kaiming, Zhang, Xiangyu, Shaoqing Ren, Jian Sun, CPVR. He, Kaiming, Zhang, Xiangyu, Ren, Shaoqing, and Sun, Jian. Identity mappings in deep residual networks. In CPVR, 2016b.\n\nLong shortterm memory. Sepp Hochreiter, J\u00fcrgen Schmidhuber, Neural Computations. Hochreiter, Sepp and Schmidhuber, J\u00fcrgen. Long short- term memory. In Neural Computations, 1997.\n\nDensely connected convolutional networks. Gao Huang, Liu, Zhuang, Laurens Van Der Maaten, Weinberger, Q Kilian, CVPR. Huang, Gao, Liu, Zhuang, van der Maaten, Laurens, and Weinberger, Kilian Q. Densely connected convolutional networks. In CVPR, 2016.\n\nTying word vectors and word classifiers: a loss framework for language modeling. Inan, Hakan, Khashayar Khosravi, Richard Socher, Inan, Hakan, Khosravi, Khashayar, and Socher, Richard. Tying word vectors and word classifiers: a loss frame- work for language modeling. In ICLR, 2017.\n\nBatch normalization: Accelerating deep network training by reducing internal covariate shift. Sergey Ioffe, Christian Szegedy, ICML. Ioffe, Sergey and Szegedy, Christian. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In ICML, 2015.\n\nAdam: A method for stochastic optimization. Diederik P Kingma, Jimmy Ba, Lei, ICLR. Kingma, Diederik P. and Ba, Jimmy Lei. Adam: A method for stochastic optimization. In ICLR, 2015.\n\nDynamic evaluation of neural sequence models. Ben Krause, Kahembwe, Emmanuel, Iain Murray, Steve Renals, 1709.07432Arxiv. Krause, Ben, Kahembwe, Emmanuel, Murray, Iain, and Re- nals, Steve. Dynamic evaluation of neural sequence mod- els. Arxiv, 1709.07432, 2017.\n\nLearning multiple layers of features from tiny images. Alex Krizhevsky, Technical reportKrizhevsky, Alex. Learning multiple layers of features from tiny images. Technical report, 2009.\n\nGustav Larsson, Michael Maire, Shakhnarovich , Gregory. Fractalnet: Ultra-deep neural networks without residuals. In ICLR. Larsson, Gustav, Maire, Michael, and Shakhnarovich, Gre- gory. Fractalnet: Ultra-deep neural networks without residuals. In ICLR, 2017.\n\n. Min Lin, Qiang Chen, Shuicheng Yan, 1312.4400Lin, Min, Chen, Qiang, and Yan, Shuicheng. Network in network. Arxiv, 1312.4400, 2013.\n\n. Chenxi Liu, Zoph, Barret, Jonathon Shlens, Hua, Wei, Li, Li-Jia, Fei-Fei, Li, Alan Yuille, Jonathan Huang, Kevin Murphy, Progressive neural architecture search. Arxiv, 1712.00559Liu, Chenxi, Zoph, Barret, Shlens, Jonathon, Hua, Wei, Li, Li-Jia, Fei-Fei, Li, Yuille, Alan, Huang, Jonathan, and Murphy, Kevin. Progressive neural architecture search. Arxiv, 1712.00559, 2017.\n\nHierarchical representations for efficient architecture search. Hanxiao Liu, Simonyan, Karen, Vinyals, Oriol, Chrisantha Fernando, Koray Kavukcuoglu, In ICLR. Liu, Hanxiao, Simonyan, Karen, Vinyals, Oriol, Fernando, Chrisantha, and Kavukcuoglu, Koray. Hierarchical rep- resentations for efficient architecture search. In ICLR, 2018.\n\nSgdr: Stochastic gradient descent with warm restarts. Ilya Loshchilov, Frank Hutter, ICLR. Loshchilov, Ilya and Hutter, Frank. Sgdr: Stochastic gradi- ent descent with warm restarts. In ICLR, 2017.\n\nMulti-task sequence to sequence learning. Minh - Luong, Thang, Le, V Quoc, Sutskever, Ilya, Oriol Vinyals, Lukasz Kaiser, ICLR. Luong, Minh-Thang, Le, Quoc V., Sutskever, Ilya, Vinyals, Oriol, and Kaiser, Lukasz. Multi-task sequence to se- quence learning. In ICLR, 2016.\n\nThe penn treebank: Annotating predicate argument structure. Mitchell Marcus, Kim, Grace, Mary Marcinkiewicz, Ann, Macintyre, Robert, Ann Bies, Ferguson, Mark, Karen Katz, Britta Schasberger, Proceedings of the Workshop on Human Language Technology. the Workshop on Human Language TechnologyMarcus, Mitchell, Kim, Grace, Marcinkiewicz, Mary Ann, MacIntyre, Robert, Bies, Ann, Ferguson, Mark, Katz, Karen, and Schasberger, Britta. The penn treebank: An- notating predicate argument structure. In Proceedings of the Workshop on Human Language Technology, 1994.\n\nOn the state of the art of evaluation in neural language models. G\u00e1bor Melis, Chris Dyer, Phil Blunsom, 1707.05589Arxiv. Melis, G\u00e1bor, Dyer, Chris, and Blunsom, Phil. On the state of the art of evaluation in neural language models. Arxiv, 1707.05589, 2017.\n\nRegularizing and optimizing LSTM language models. Stephen Merity, Nitish Keskar, Shirish, Richard Socher, 1708.02182Merity, Stephen, Keskar, Nitish Shirish, and Socher, Richard. Regularizing and optimizing LSTM language models. Arxiv, 1708.02182, 2017.\n\nDeeparchitect: Automatically designing and training deep architectures. Renato Negrinho, Geoff Gordon, CPVR. Negrinho, Renato and Gordon, Geoff. Deeparchitect: Au- tomatically designing and training deep architectures. In CPVR, 2017.\n\nA method for solving the convex programming problem with convergence rate o(1/k 2 ). Yurii E Nesterov, Soviet Mathematics Doklady. Nesterov, Yurii E. A method for solving the convex pro- gramming problem with convergence rate o(1/k 2 ). So- viet Mathematics Doklady, 1983.\n\nCnn features off-the-shelf: an astounding baseline for recognition. Ali Razavian, Sharif, Azizpour, Josephine Hossein, Sullivan Carlsson, Stefan , CVPR. Razavian, Ali Sharif, Azizpour, Hossein, Josephine, Sulli- van, and Carlsson, Stefan. Cnn features off-the-shelf: an astounding baseline for recognition. In CVPR, 2014.\n\nLarge-scale evolution of image classifiers. Esteban Real, Moore, Sherry, Selle, Andrew, Saxena, Leon Saurabh, Yutaka Suematsu, Tan, Jie, Quoc Le, Alex Kurakin, ICML. Real, Esteban, Moore, Sherry, Selle, Andrew, Saxena, Saurabh, Leon, Yutaka Suematsu, Tan, Jie, Le, Quoc, and Kurakin, Alex. Large-scale evolution of image clas- sifiers. In ICML, 2017.\n\nPeephole: Predicting network performance before training. Esteban Real, Aggarwal, Alok, Yanping Huang, Le Quoc, V , 1802.01548Arxiv. Real, Esteban, Aggarwal, Alok, Huang, Yanping, and Le, Quoc V. Peephole: Predicting network performance be- fore training. Arxiv, 1802.01548, 2018.\n\nShreyas Saxena, Jakob Verbeek, Convolutional neural fabrics. In NIPS. Saxena, Shreyas and Verbeek, Jakob. Convolutional neural fabrics. In NIPS, 2016.\n\nGradient estimation using stochastic computation graphs. John Schulman, Heess, Nicolas, Theophane Weber, Pieter Abbeel, NIPS. Schulman, John, Heess, Nicolas, Weber, Theophane, and Abbeel, Pieter. Gradient estimation using stochastic com- putation graphs. In NIPS, 2015.\n\nLearning time-efficient deep architectures with budgeted super networks. Tom Veniat, Ludovic Denoyer, 1706.00046Veniat, Tom and Denoyer, Ludovic. Learning time-efficient deep architectures with budgeted super networks. Arxiv, 1706.00046, 2017.\n\nSimple statistical gradient-following algorithms for connectionist reinforcement learning. Machine Learning. Ronald J Williams, Williams, Ronald J. Simple statistical gradient-following algorithms for connectionist reinforcement learning. Ma- chine Learning, 1992.\n\nBreaking the softmax bottleneck: A highrank rnn language model. Zhilin Yang, Dai, Zihang, Ruslan Salakhutdinov, William Cohen, In ICLR. Yang, Zhilin, Dai, Zihang, Salakhutdinov, Ruslan, and Co- hen, William. Breaking the softmax bottleneck: A high- rank rnn language model. In ICLR, 2018.\n\nRecurrent neural network regularization. Arxiv. Wojciech Zaremba, Ilya Sutskever, Oriol Vinyals, Zaremba, Wojciech, Sutskever, Ilya, and Vinyals, Oriol. Recurrent neural network regularization. Arxiv, 1409.2329, 2014.\n\nPractical network blocks design with q-learning. Zhong, Yan Zhao, Junjie Liu, Cheng-Lin, AAAIZhong, Zhao, Yan, Junjie, and Liu, Cheng-Lin. Practical network blocks design with q-learning. AAAI, 2018.\n\nRecurrent highway networks. Julian Zilly, Georg, Rupesh Srivastava, Kumar, Jan Koutn\u00edk, J\u00fcrgen Schmidhuber, ICML. Zilly, Julian Georg, Srivastava, Rupesh Kumar, Koutn\u00edk, Jan, and Schmidhuber, J\u00fcrgen. Recurrent highway net- works. In ICML, 2017.\n\nNeural architecture search with reinforcement learning. Barret Zoph, Le Quoc, V , ICLR. Zoph, Barret and Le, Quoc V. Neural architecture search with reinforcement learning. In ICLR, 2017.\n\nTransfer learning for low-resource neural machine translation. Barret Zoph, Yuret, Deniz, Jonathan May, Kevin Knight, EMNLP. Zoph, Barret, Yuret, Deniz, May, Jonathan, and Knight, Kevin. Transfer learning for low-resource neural ma- chine translation. In EMNLP, 2016.\n\nLearning transferable architectures for scalable image recognition. Barret Zoph, Vasudevan, Vijay, Jonathon Shlens, Le Quoc, V , CVPR. Zoph, Barret, Vasudevan, Vijay, Shlens, Jonathon, and Le, Quoc V. Learning transferable architectures for scalable image recognition. In CVPR, 2018.\n", "annotations": {"author": "[{\"end\":83,\"start\":73},{\"end\":98,\"start\":84},{\"end\":111,\"start\":99},{\"end\":122,\"start\":112},{\"end\":133,\"start\":123}]", "publisher": null, "author_last_name": "[{\"end\":82,\"start\":78},{\"end\":97,\"start\":93},{\"end\":110,\"start\":106},{\"end\":121,\"start\":119},{\"end\":132,\"start\":128}]", "author_first_name": "[{\"end\":77,\"start\":73},{\"end\":90,\"start\":84},{\"end\":92,\"start\":91},{\"end\":105,\"start\":99},{\"end\":116,\"start\":112},{\"end\":118,\"start\":117},{\"end\":127,\"start\":123}]", "author_affiliation": null, "title": "[{\"end\":59,\"start\":1},{\"end\":192,\"start\":134}]", "venue": null, "abstract": "[{\"end\":1299,\"start\":205}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b46\"},\"end\":1470,\"start\":1453},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":1488,\"start\":1470},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1505,\"start\":1488},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":1522,\"start\":1505},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":2433,\"start\":2410},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":2451,\"start\":2433},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":2470,\"start\":2451},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":2846,\"start\":2829},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":5179,\"start\":5163},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":7820,\"start\":7788},{\"end\":9222,\"start\":9214},{\"end\":10096,\"start\":10088},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":10147,\"start\":10128},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":10216,\"start\":10200},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":11283,\"start\":11266},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":11301,\"start\":11283},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":11318,\"start\":11301},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":12075,\"start\":12057},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":12091,\"start\":12075},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12803,\"start\":12788},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":13438,\"start\":13419},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":15594,\"start\":15576},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":16715,\"start\":16695},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":16887,\"start\":16866},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":17109,\"start\":17089},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":17154,\"start\":17133},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":17194,\"start\":17173},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":17417,\"start\":17398},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":17542,\"start\":17526},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":17842,\"start\":17821},{\"end\":17844,\"start\":17842},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":18066,\"start\":18046},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18820,\"start\":18796},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":18887,\"start\":18868},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":19316,\"start\":19297},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":19421,\"start\":19405},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":19861,\"start\":19845},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":19910,\"start\":19891},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":19951,\"start\":19931},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20008,\"start\":19989},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":20064,\"start\":20043},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20113,\"start\":20094},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20515,\"start\":20496},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":20783,\"start\":20763},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":20868,\"start\":20851},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":21503,\"start\":21487},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":21642,\"start\":21615},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":21748,\"start\":21731},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":22736,\"start\":22716},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":22907,\"start\":22891},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":23484,\"start\":23467},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":23812,\"start\":23791},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":23868,\"start\":23850},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":23916,\"start\":23894},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":23957,\"start\":23937},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":23995,\"start\":23978},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":24051,\"start\":24034},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":24554,\"start\":24535},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":25325,\"start\":25309},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":27067,\"start\":27048},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":27088,\"start\":27067},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":27573,\"start\":27552},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":27591,\"start\":27573},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":27681,\"start\":27663},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":27986,\"start\":27967},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":28141,\"start\":28118},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":28528,\"start\":28508},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28606,\"start\":28589},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28869,\"start\":28852},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":31782,\"start\":31764},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":31802,\"start\":31783}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":30824,\"start\":30349},{\"attributes\":{\"id\":\"fig_1\"},\"end\":31217,\"start\":30825},{\"attributes\":{\"id\":\"fig_2\"},\"end\":31330,\"start\":31218},{\"attributes\":{\"id\":\"fig_3\"},\"end\":31760,\"start\":31331},{\"attributes\":{\"id\":\"fig_4\"},\"end\":31872,\"start\":31761},{\"attributes\":{\"id\":\"fig_5\"},\"end\":31933,\"start\":31873},{\"attributes\":{\"id\":\"fig_6\"},\"end\":32026,\"start\":31934},{\"attributes\":{\"id\":\"fig_7\"},\"end\":32088,\"start\":32027},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":32512,\"start\":32089},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":32876,\"start\":32513}]", "paragraph": "[{\"end\":1879,\"start\":1315},{\"end\":2471,\"start\":1881},{\"end\":3262,\"start\":2473},{\"end\":4317,\"start\":3274},{\"end\":4727,\"start\":4319},{\"end\":5442,\"start\":4757},{\"end\":5799,\"start\":5444},{\"end\":5982,\"start\":5801},{\"end\":6270,\"start\":6040},{\"end\":6480,\"start\":6272},{\"end\":6691,\"start\":6482},{\"end\":7008,\"start\":6698},{\"end\":7341,\"start\":7010},{\"end\":7687,\"start\":7343},{\"end\":8064,\"start\":7732},{\"end\":9009,\"start\":8066},{\"end\":9409,\"start\":9011},{\"end\":9523,\"start\":9466},{\"end\":9938,\"start\":9525},{\"end\":10268,\"start\":9940},{\"end\":10719,\"start\":10270},{\"end\":11928,\"start\":10721},{\"end\":12488,\"start\":11965},{\"end\":12983,\"start\":12490},{\"end\":13249,\"start\":12985},{\"end\":13746,\"start\":13283},{\"end\":14580,\"start\":13748},{\"end\":14691,\"start\":14582},{\"end\":14899,\"start\":14693},{\"end\":15043,\"start\":14901},{\"end\":15173,\"start\":15045},{\"end\":15287,\"start\":15175},{\"end\":15731,\"start\":15289},{\"end\":16331,\"start\":15733},{\"end\":16621,\"start\":16347},{\"end\":16888,\"start\":16659},{\"end\":18180,\"start\":16890},{\"end\":18314,\"start\":18267},{\"end\":18920,\"start\":18316},{\"end\":20784,\"start\":18922},{\"end\":21212,\"start\":20821},{\"end\":21408,\"start\":21214},{\"end\":21876,\"start\":21410},{\"end\":22576,\"start\":21878},{\"end\":23040,\"start\":22578},{\"end\":24105,\"start\":23042},{\"end\":24657,\"start\":24107},{\"end\":25693,\"start\":24659},{\"end\":25920,\"start\":25720},{\"end\":26695,\"start\":25922},{\"end\":27376,\"start\":26697},{\"end\":27835,\"start\":27409},{\"end\":28473,\"start\":27837},{\"end\":29744,\"start\":28475},{\"end\":29921,\"start\":29759},{\"end\":30348,\"start\":29923}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":6039,\"start\":5983},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9465,\"start\":9410},{\"attributes\":{\"id\":\"formula_2\"},\"end\":18266,\"start\":18181}]", "table_ref": "[{\"end\":19031,\"start\":19024},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":22594,\"start\":22587},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":23069,\"start\":23062},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":24133,\"start\":24126},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":27747,\"start\":27740}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1313,\"start\":1301},{\"attributes\":{\"n\":\"2.\"},\"end\":3272,\"start\":3265},{\"attributes\":{\"n\":\"2.1.\"},\"end\":4755,\"start\":4730},{\"end\":6696,\"start\":6694},{\"attributes\":{\"n\":\"2.2.\"},\"end\":7730,\"start\":7690},{\"attributes\":{\"n\":\"2.3.\"},\"end\":11963,\"start\":11931},{\"attributes\":{\"n\":\"2.4.\"},\"end\":13281,\"start\":13252},{\"attributes\":{\"n\":\"3.\"},\"end\":16345,\"start\":16334},{\"attributes\":{\"n\":\"3.1.\"},\"end\":16657,\"start\":16624},{\"attributes\":{\"n\":\"3.2.\"},\"end\":20819,\"start\":20787},{\"attributes\":{\"n\":\"3.3.\"},\"end\":25718,\"start\":25696},{\"attributes\":{\"n\":\"4.\"},\"end\":27407,\"start\":27379},{\"attributes\":{\"n\":\"5.\"},\"end\":29757,\"start\":29747},{\"end\":30360,\"start\":30350},{\"end\":30836,\"start\":30826},{\"end\":31229,\"start\":31219},{\"end\":31342,\"start\":31332},{\"end\":31884,\"start\":31874},{\"end\":31945,\"start\":31935},{\"end\":32038,\"start\":32028},{\"end\":32523,\"start\":32514}]", "table": "[{\"end\":32512,\"start\":32365}]", "figure_caption": "[{\"end\":30824,\"start\":30362},{\"end\":31217,\"start\":30838},{\"end\":31330,\"start\":31231},{\"end\":31760,\"start\":31344},{\"end\":31872,\"start\":31763},{\"end\":31933,\"start\":31886},{\"end\":32026,\"start\":31947},{\"end\":32088,\"start\":32040},{\"end\":32365,\"start\":32091},{\"end\":32876,\"start\":32525}]", "figure_ref": "[{\"end\":3529,\"start\":3521},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5650,\"start\":5642},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":12307,\"start\":12299},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":13448,\"start\":13440},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":13895,\"start\":13887},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":14554,\"start\":14546},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":14780,\"start\":14772},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":19579,\"start\":19571},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":20378,\"start\":20370},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":23339,\"start\":23331},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":24389,\"start\":24381},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":24461,\"start\":24452}]", "bib_author_first_name": "[{\"end\":36662,\"start\":36656},{\"end\":36675,\"start\":36669},{\"end\":36946,\"start\":36940},{\"end\":36961,\"start\":36955},{\"end\":37242,\"start\":37241},{\"end\":37257,\"start\":37249},{\"end\":37551,\"start\":37546},{\"end\":37565,\"start\":37563},{\"end\":37573,\"start\":37572},{\"end\":37791,\"start\":37785},{\"end\":37819,\"start\":37814},{\"end\":37821,\"start\":37820},{\"end\":37835,\"start\":37831},{\"end\":38049,\"start\":38046},{\"end\":38079,\"start\":38077},{\"end\":38092,\"start\":38088},{\"end\":38099,\"start\":38095},{\"end\":38318,\"start\":38310},{\"end\":38495,\"start\":38488},{\"end\":38511,\"start\":38505},{\"end\":38533,\"start\":38528},{\"end\":38701,\"start\":38695},{\"end\":38712,\"start\":38707},{\"end\":39000,\"start\":38992},{\"end\":39016,\"start\":39010},{\"end\":39018,\"start\":39017},{\"end\":39258,\"start\":39253},{\"end\":39270,\"start\":39264},{\"end\":39484,\"start\":39478},{\"end\":39688,\"start\":39681},{\"end\":39702,\"start\":39696},{\"end\":39718,\"start\":39711},{\"end\":39863,\"start\":39858},{\"end\":39874,\"start\":39868},{\"end\":39884,\"start\":39880},{\"end\":39886,\"start\":39885},{\"end\":40112,\"start\":40104},{\"end\":40123,\"start\":40119},{\"end\":40388,\"start\":40380},{\"end\":40398,\"start\":40394},{\"end\":40614,\"start\":40606},{\"end\":40624,\"start\":40620},{\"end\":40784,\"start\":40780},{\"end\":40803,\"start\":40797},{\"end\":40981,\"start\":40978},{\"end\":41009,\"start\":41002},{\"end\":41039,\"start\":41038},{\"end\":41291,\"start\":41282},{\"end\":41309,\"start\":41302},{\"end\":41572,\"start\":41566},{\"end\":41589,\"start\":41580},{\"end\":41805,\"start\":41797},{\"end\":41807,\"start\":41806},{\"end\":41821,\"start\":41816},{\"end\":41985,\"start\":41982},{\"end\":42018,\"start\":42014},{\"end\":42032,\"start\":42027},{\"end\":42259,\"start\":42255},{\"end\":42392,\"start\":42386},{\"end\":42409,\"start\":42402},{\"end\":42430,\"start\":42417},{\"end\":42651,\"start\":42648},{\"end\":42662,\"start\":42657},{\"end\":42678,\"start\":42669},{\"end\":42789,\"start\":42783},{\"end\":42817,\"start\":42809},{\"end\":42865,\"start\":42861},{\"end\":42882,\"start\":42874},{\"end\":42895,\"start\":42890},{\"end\":43228,\"start\":43221},{\"end\":43277,\"start\":43267},{\"end\":43293,\"start\":43288},{\"end\":43549,\"start\":43545},{\"end\":43567,\"start\":43562},{\"end\":43736,\"start\":43732},{\"end\":43738,\"start\":43737},{\"end\":43758,\"start\":43757},{\"end\":43787,\"start\":43782},{\"end\":43803,\"start\":43797},{\"end\":44031,\"start\":44023},{\"end\":44056,\"start\":44052},{\"end\":44099,\"start\":44096},{\"end\":44127,\"start\":44122},{\"end\":44140,\"start\":44134},{\"end\":44592,\"start\":44587},{\"end\":44605,\"start\":44600},{\"end\":44616,\"start\":44612},{\"end\":44837,\"start\":44830},{\"end\":44852,\"start\":44846},{\"end\":44877,\"start\":44870},{\"end\":45112,\"start\":45106},{\"end\":45128,\"start\":45123},{\"end\":45359,\"start\":45354},{\"end\":45361,\"start\":45360},{\"end\":45614,\"start\":45611},{\"end\":45652,\"start\":45643},{\"end\":45670,\"start\":45662},{\"end\":45687,\"start\":45681},{\"end\":45917,\"start\":45910},{\"end\":45966,\"start\":45962},{\"end\":45982,\"start\":45976},{\"end\":46007,\"start\":46003},{\"end\":46016,\"start\":46012},{\"end\":46283,\"start\":46276},{\"end\":46313,\"start\":46306},{\"end\":46323,\"start\":46321},{\"end\":46331,\"start\":46330},{\"end\":46507,\"start\":46500},{\"end\":46521,\"start\":46516},{\"end\":46713,\"start\":46709},{\"end\":46749,\"start\":46740},{\"end\":46763,\"start\":46757},{\"end\":46999,\"start\":46996},{\"end\":47015,\"start\":47008},{\"end\":47283,\"start\":47277},{\"end\":47285,\"start\":47284},{\"end\":47504,\"start\":47498},{\"end\":47530,\"start\":47524},{\"end\":47553,\"start\":47546},{\"end\":47780,\"start\":47772},{\"end\":47794,\"start\":47790},{\"end\":47811,\"start\":47806},{\"end\":48002,\"start\":47999},{\"end\":48015,\"start\":48009},{\"end\":48178,\"start\":48172},{\"end\":48199,\"start\":48193},{\"end\":48222,\"start\":48219},{\"end\":48238,\"start\":48232},{\"end\":48452,\"start\":48446},{\"end\":48461,\"start\":48459},{\"end\":48469,\"start\":48468},{\"end\":48648,\"start\":48642},{\"end\":48677,\"start\":48669},{\"end\":48688,\"start\":48683},{\"end\":48922,\"start\":48916},{\"end\":48955,\"start\":48947},{\"end\":48966,\"start\":48964},{\"end\":48974,\"start\":48973}]", "bib_author_last_name": "[{\"end\":36631,\"start\":36626},{\"end\":36638,\"start\":36633},{\"end\":36645,\"start\":36640},{\"end\":36654,\"start\":36647},{\"end\":36667,\"start\":36663},{\"end\":36682,\"start\":36676},{\"end\":36915,\"start\":36910},{\"end\":36922,\"start\":36917},{\"end\":36931,\"start\":36924},{\"end\":36938,\"start\":36933},{\"end\":36953,\"start\":36947},{\"end\":36966,\"start\":36962},{\"end\":37216,\"start\":37211},{\"end\":37223,\"start\":37218},{\"end\":37229,\"start\":37225},{\"end\":37235,\"start\":37231},{\"end\":37239,\"start\":37237},{\"end\":37247,\"start\":37243},{\"end\":37265,\"start\":37258},{\"end\":37273,\"start\":37267},{\"end\":37279,\"start\":37275},{\"end\":37523,\"start\":37518},{\"end\":37530,\"start\":37525},{\"end\":37536,\"start\":37532},{\"end\":37544,\"start\":37538},{\"end\":37561,\"start\":37552},{\"end\":37570,\"start\":37566},{\"end\":37797,\"start\":37792},{\"end\":37802,\"start\":37799},{\"end\":37812,\"start\":37804},{\"end\":37829,\"start\":37822},{\"end\":37842,\"start\":37836},{\"end\":38053,\"start\":38050},{\"end\":38059,\"start\":38055},{\"end\":38068,\"start\":38061},{\"end\":38075,\"start\":38070},{\"end\":38086,\"start\":38080},{\"end\":38326,\"start\":38319},{\"end\":38503,\"start\":38496},{\"end\":38526,\"start\":38512},{\"end\":38542,\"start\":38534},{\"end\":38685,\"start\":38681},{\"end\":38693,\"start\":38687},{\"end\":38705,\"start\":38702},{\"end\":38716,\"start\":38713},{\"end\":38726,\"start\":38718},{\"end\":39008,\"start\":39001},{\"end\":39025,\"start\":39019},{\"end\":39262,\"start\":39259},{\"end\":39281,\"start\":39271},{\"end\":39493,\"start\":39485},{\"end\":39694,\"start\":39689},{\"end\":39709,\"start\":39703},{\"end\":39726,\"start\":39719},{\"end\":39866,\"start\":39864},{\"end\":39878,\"start\":39875},{\"end\":39889,\"start\":39887},{\"end\":39904,\"start\":39891},{\"end\":40077,\"start\":40075},{\"end\":40086,\"start\":40079},{\"end\":40093,\"start\":40088},{\"end\":40102,\"start\":40095},{\"end\":40117,\"start\":40113},{\"end\":40127,\"start\":40124},{\"end\":40353,\"start\":40351},{\"end\":40362,\"start\":40355},{\"end\":40369,\"start\":40364},{\"end\":40378,\"start\":40371},{\"end\":40392,\"start\":40389},{\"end\":40402,\"start\":40399},{\"end\":40579,\"start\":40577},{\"end\":40588,\"start\":40581},{\"end\":40595,\"start\":40590},{\"end\":40604,\"start\":40597},{\"end\":40618,\"start\":40615},{\"end\":40628,\"start\":40625},{\"end\":40795,\"start\":40785},{\"end\":40815,\"start\":40804},{\"end\":40987,\"start\":40982},{\"end\":40992,\"start\":40989},{\"end\":41000,\"start\":40994},{\"end\":41024,\"start\":41010},{\"end\":41036,\"start\":41026},{\"end\":41046,\"start\":41040},{\"end\":41273,\"start\":41269},{\"end\":41280,\"start\":41275},{\"end\":41300,\"start\":41292},{\"end\":41316,\"start\":41310},{\"end\":41578,\"start\":41573},{\"end\":41597,\"start\":41590},{\"end\":41814,\"start\":41808},{\"end\":41824,\"start\":41822},{\"end\":41829,\"start\":41826},{\"end\":41992,\"start\":41986},{\"end\":42002,\"start\":41994},{\"end\":42012,\"start\":42004},{\"end\":42025,\"start\":42019},{\"end\":42039,\"start\":42033},{\"end\":42270,\"start\":42260},{\"end\":42400,\"start\":42393},{\"end\":42415,\"start\":42410},{\"end\":42655,\"start\":42652},{\"end\":42667,\"start\":42663},{\"end\":42682,\"start\":42679},{\"end\":42793,\"start\":42790},{\"end\":42799,\"start\":42795},{\"end\":42807,\"start\":42801},{\"end\":42824,\"start\":42818},{\"end\":42829,\"start\":42826},{\"end\":42834,\"start\":42831},{\"end\":42838,\"start\":42836},{\"end\":42846,\"start\":42840},{\"end\":42855,\"start\":42848},{\"end\":42859,\"start\":42857},{\"end\":42872,\"start\":42866},{\"end\":42888,\"start\":42883},{\"end\":42902,\"start\":42896},{\"end\":43232,\"start\":43229},{\"end\":43242,\"start\":43234},{\"end\":43249,\"start\":43244},{\"end\":43258,\"start\":43251},{\"end\":43265,\"start\":43260},{\"end\":43286,\"start\":43278},{\"end\":43305,\"start\":43294},{\"end\":43560,\"start\":43550},{\"end\":43574,\"start\":43568},{\"end\":43744,\"start\":43739},{\"end\":43751,\"start\":43746},{\"end\":43755,\"start\":43753},{\"end\":43763,\"start\":43759},{\"end\":43774,\"start\":43765},{\"end\":43780,\"start\":43776},{\"end\":43795,\"start\":43788},{\"end\":43810,\"start\":43804},{\"end\":44038,\"start\":44032},{\"end\":44043,\"start\":44040},{\"end\":44050,\"start\":44045},{\"end\":44070,\"start\":44057},{\"end\":44075,\"start\":44072},{\"end\":44086,\"start\":44077},{\"end\":44094,\"start\":44088},{\"end\":44104,\"start\":44100},{\"end\":44114,\"start\":44106},{\"end\":44120,\"start\":44116},{\"end\":44132,\"start\":44128},{\"end\":44152,\"start\":44141},{\"end\":44598,\"start\":44593},{\"end\":44610,\"start\":44606},{\"end\":44624,\"start\":44617},{\"end\":44844,\"start\":44838},{\"end\":44859,\"start\":44853},{\"end\":44868,\"start\":44861},{\"end\":44884,\"start\":44878},{\"end\":45121,\"start\":45113},{\"end\":45135,\"start\":45129},{\"end\":45370,\"start\":45362},{\"end\":45623,\"start\":45615},{\"end\":45631,\"start\":45625},{\"end\":45641,\"start\":45633},{\"end\":45660,\"start\":45653},{\"end\":45679,\"start\":45671},{\"end\":45922,\"start\":45918},{\"end\":45929,\"start\":45924},{\"end\":45937,\"start\":45931},{\"end\":45944,\"start\":45939},{\"end\":45952,\"start\":45946},{\"end\":45960,\"start\":45954},{\"end\":45974,\"start\":45967},{\"end\":45991,\"start\":45983},{\"end\":45996,\"start\":45993},{\"end\":46001,\"start\":45998},{\"end\":46010,\"start\":46008},{\"end\":46024,\"start\":46017},{\"end\":46288,\"start\":46284},{\"end\":46298,\"start\":46290},{\"end\":46304,\"start\":46300},{\"end\":46319,\"start\":46314},{\"end\":46328,\"start\":46324},{\"end\":46514,\"start\":46508},{\"end\":46529,\"start\":46522},{\"end\":46722,\"start\":46714},{\"end\":46729,\"start\":46724},{\"end\":46738,\"start\":46731},{\"end\":46755,\"start\":46750},{\"end\":46770,\"start\":46764},{\"end\":47006,\"start\":47000},{\"end\":47023,\"start\":47016},{\"end\":47294,\"start\":47286},{\"end\":47509,\"start\":47505},{\"end\":47514,\"start\":47511},{\"end\":47522,\"start\":47516},{\"end\":47544,\"start\":47531},{\"end\":47559,\"start\":47554},{\"end\":47788,\"start\":47781},{\"end\":47804,\"start\":47795},{\"end\":47819,\"start\":47812},{\"end\":47997,\"start\":47992},{\"end\":48007,\"start\":48003},{\"end\":48019,\"start\":48016},{\"end\":48030,\"start\":48021},{\"end\":48184,\"start\":48179},{\"end\":48191,\"start\":48186},{\"end\":48210,\"start\":48200},{\"end\":48217,\"start\":48212},{\"end\":48230,\"start\":48223},{\"end\":48250,\"start\":48239},{\"end\":48457,\"start\":48453},{\"end\":48466,\"start\":48462},{\"end\":48653,\"start\":48649},{\"end\":48660,\"start\":48655},{\"end\":48667,\"start\":48662},{\"end\":48681,\"start\":48678},{\"end\":48695,\"start\":48689},{\"end\":48927,\"start\":48923},{\"end\":48938,\"start\":48929},{\"end\":48945,\"start\":48940},{\"end\":48962,\"start\":48956},{\"end\":48971,\"start\":48967}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":1740355},\"end\":36838,\"start\":36557},{\"attributes\":{\"doi\":\"1705.10823\",\"id\":\"b1\",\"matched_paper_id\":24352132},\"end\":37146,\"start\":36840},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":3649804},\"end\":37463,\"start\":37148},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":29535948},\"end\":37712,\"start\":37465},{\"attributes\":{\"id\":\"b4\"},\"end\":37987,\"start\":37714},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":7918068},\"end\":38245,\"start\":37989},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":2375110},\"end\":38430,\"start\":38247},{\"attributes\":{\"id\":\"b7\"},\"end\":38679,\"start\":38432},{\"attributes\":{\"id\":\"b8\"},\"end\":38920,\"start\":38681},{\"attributes\":{\"doi\":\"1708.04552\",\"id\":\"b9\"},\"end\":39173,\"start\":38922},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":15953218},\"end\":39418,\"start\":39175},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":8134165},\"end\":39621,\"start\":39420},{\"attributes\":{\"id\":\"b12\"},\"end\":39856,\"start\":39623},{\"attributes\":{\"id\":\"b13\"},\"end\":39981,\"start\":39858},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":13740328},\"end\":40303,\"start\":39983},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":206594692},\"end\":40530,\"start\":40305},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":6447277},\"end\":40755,\"start\":40532},{\"attributes\":{\"id\":\"b17\"},\"end\":40934,\"start\":40757},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":9433631},\"end\":41186,\"start\":40936},{\"attributes\":{\"id\":\"b19\"},\"end\":41470,\"start\":41188},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":5808102},\"end\":41751,\"start\":41472},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":6628106},\"end\":41934,\"start\":41753},{\"attributes\":{\"doi\":\"1709.07432\",\"id\":\"b22\",\"matched_paper_id\":215827131},\"end\":42198,\"start\":41936},{\"attributes\":{\"id\":\"b23\"},\"end\":42384,\"start\":42200},{\"attributes\":{\"id\":\"b24\"},\"end\":42644,\"start\":42386},{\"attributes\":{\"doi\":\"1312.4400\",\"id\":\"b25\"},\"end\":42779,\"start\":42646},{\"attributes\":{\"id\":\"b26\"},\"end\":43155,\"start\":42781},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":23873820},\"end\":43489,\"start\":43157},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":14337532},\"end\":43688,\"start\":43491},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":6954272},\"end\":43961,\"start\":43690},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":5151364},\"end\":44520,\"start\":43963},{\"attributes\":{\"doi\":\"1707.05589\",\"id\":\"b31\",\"matched_paper_id\":33513311},\"end\":44778,\"start\":44522},{\"attributes\":{\"doi\":\"1708.02182\",\"id\":\"b32\"},\"end\":45032,\"start\":44780},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":7044373},\"end\":45267,\"start\":45034},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":145918791},\"end\":45541,\"start\":45269},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":6383532},\"end\":45864,\"start\":45543},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":743641},\"end\":46216,\"start\":45866},{\"attributes\":{\"doi\":\"1802.01548\",\"id\":\"b37\",\"matched_paper_id\":31800362},\"end\":46498,\"start\":46218},{\"attributes\":{\"id\":\"b38\"},\"end\":46650,\"start\":46500},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":7125379},\"end\":46921,\"start\":46652},{\"attributes\":{\"doi\":\"1706.00046\",\"id\":\"b40\"},\"end\":47166,\"start\":46923},{\"attributes\":{\"id\":\"b41\"},\"end\":47432,\"start\":47168},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":26238954},\"end\":47722,\"start\":47434},{\"attributes\":{\"id\":\"b43\"},\"end\":47941,\"start\":47724},{\"attributes\":{\"id\":\"b44\"},\"end\":48142,\"start\":47943},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":1101453},\"end\":48388,\"start\":48144},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":12713052},\"end\":48577,\"start\":48390},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":16631020},\"end\":48846,\"start\":48579},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":12227989},\"end\":49131,\"start\":48848}]", "bib_title": "[{\"end\":36624,\"start\":36557},{\"end\":36908,\"start\":36840},{\"end\":37209,\"start\":37148},{\"end\":37516,\"start\":37465},{\"end\":38044,\"start\":37989},{\"end\":38308,\"start\":38247},{\"end\":39251,\"start\":39175},{\"end\":39476,\"start\":39420},{\"end\":40073,\"start\":39983},{\"end\":40349,\"start\":40305},{\"end\":40575,\"start\":40532},{\"end\":40778,\"start\":40757},{\"end\":40976,\"start\":40936},{\"end\":41564,\"start\":41472},{\"end\":41795,\"start\":41753},{\"end\":41980,\"start\":41936},{\"end\":43219,\"start\":43157},{\"end\":43543,\"start\":43491},{\"end\":43730,\"start\":43690},{\"end\":44021,\"start\":43963},{\"end\":44585,\"start\":44522},{\"end\":45104,\"start\":45034},{\"end\":45352,\"start\":45269},{\"end\":45609,\"start\":45543},{\"end\":45908,\"start\":45866},{\"end\":46274,\"start\":46218},{\"end\":46707,\"start\":46652},{\"end\":47496,\"start\":47434},{\"end\":48170,\"start\":48144},{\"end\":48444,\"start\":48390},{\"end\":48640,\"start\":48579},{\"end\":48914,\"start\":48848}]", "bib_author": "[{\"end\":36633,\"start\":36626},{\"end\":36640,\"start\":36633},{\"end\":36647,\"start\":36640},{\"end\":36656,\"start\":36647},{\"end\":36669,\"start\":36656},{\"end\":36684,\"start\":36669},{\"end\":36917,\"start\":36910},{\"end\":36924,\"start\":36917},{\"end\":36933,\"start\":36924},{\"end\":36940,\"start\":36933},{\"end\":36955,\"start\":36940},{\"end\":36968,\"start\":36955},{\"end\":37218,\"start\":37211},{\"end\":37225,\"start\":37218},{\"end\":37231,\"start\":37225},{\"end\":37237,\"start\":37231},{\"end\":37241,\"start\":37237},{\"end\":37249,\"start\":37241},{\"end\":37267,\"start\":37249},{\"end\":37275,\"start\":37267},{\"end\":37281,\"start\":37275},{\"end\":37525,\"start\":37518},{\"end\":37532,\"start\":37525},{\"end\":37538,\"start\":37532},{\"end\":37546,\"start\":37538},{\"end\":37563,\"start\":37546},{\"end\":37572,\"start\":37563},{\"end\":37576,\"start\":37572},{\"end\":37799,\"start\":37785},{\"end\":37804,\"start\":37799},{\"end\":37814,\"start\":37804},{\"end\":37831,\"start\":37814},{\"end\":37844,\"start\":37831},{\"end\":38055,\"start\":38046},{\"end\":38061,\"start\":38055},{\"end\":38070,\"start\":38061},{\"end\":38077,\"start\":38070},{\"end\":38088,\"start\":38077},{\"end\":38095,\"start\":38088},{\"end\":38102,\"start\":38095},{\"end\":38328,\"start\":38310},{\"end\":38505,\"start\":38488},{\"end\":38528,\"start\":38505},{\"end\":38544,\"start\":38528},{\"end\":38687,\"start\":38681},{\"end\":38695,\"start\":38687},{\"end\":38707,\"start\":38695},{\"end\":38718,\"start\":38707},{\"end\":38728,\"start\":38718},{\"end\":39010,\"start\":38992},{\"end\":39027,\"start\":39010},{\"end\":39264,\"start\":39253},{\"end\":39283,\"start\":39264},{\"end\":39495,\"start\":39478},{\"end\":39696,\"start\":39681},{\"end\":39711,\"start\":39696},{\"end\":39728,\"start\":39711},{\"end\":39868,\"start\":39858},{\"end\":39880,\"start\":39868},{\"end\":39891,\"start\":39880},{\"end\":39906,\"start\":39891},{\"end\":40079,\"start\":40075},{\"end\":40088,\"start\":40079},{\"end\":40095,\"start\":40088},{\"end\":40104,\"start\":40095},{\"end\":40119,\"start\":40104},{\"end\":40129,\"start\":40119},{\"end\":40355,\"start\":40351},{\"end\":40364,\"start\":40355},{\"end\":40371,\"start\":40364},{\"end\":40380,\"start\":40371},{\"end\":40394,\"start\":40380},{\"end\":40404,\"start\":40394},{\"end\":40581,\"start\":40577},{\"end\":40590,\"start\":40581},{\"end\":40597,\"start\":40590},{\"end\":40606,\"start\":40597},{\"end\":40620,\"start\":40606},{\"end\":40630,\"start\":40620},{\"end\":40797,\"start\":40780},{\"end\":40817,\"start\":40797},{\"end\":40989,\"start\":40978},{\"end\":40994,\"start\":40989},{\"end\":41002,\"start\":40994},{\"end\":41026,\"start\":41002},{\"end\":41038,\"start\":41026},{\"end\":41048,\"start\":41038},{\"end\":41275,\"start\":41269},{\"end\":41282,\"start\":41275},{\"end\":41302,\"start\":41282},{\"end\":41318,\"start\":41302},{\"end\":41580,\"start\":41566},{\"end\":41599,\"start\":41580},{\"end\":41816,\"start\":41797},{\"end\":41826,\"start\":41816},{\"end\":41831,\"start\":41826},{\"end\":41994,\"start\":41982},{\"end\":42004,\"start\":41994},{\"end\":42014,\"start\":42004},{\"end\":42027,\"start\":42014},{\"end\":42041,\"start\":42027},{\"end\":42272,\"start\":42255},{\"end\":42402,\"start\":42386},{\"end\":42417,\"start\":42402},{\"end\":42433,\"start\":42417},{\"end\":42657,\"start\":42648},{\"end\":42669,\"start\":42657},{\"end\":42684,\"start\":42669},{\"end\":42795,\"start\":42783},{\"end\":42801,\"start\":42795},{\"end\":42809,\"start\":42801},{\"end\":42826,\"start\":42809},{\"end\":42831,\"start\":42826},{\"end\":42836,\"start\":42831},{\"end\":42840,\"start\":42836},{\"end\":42848,\"start\":42840},{\"end\":42857,\"start\":42848},{\"end\":42861,\"start\":42857},{\"end\":42874,\"start\":42861},{\"end\":42890,\"start\":42874},{\"end\":42904,\"start\":42890},{\"end\":43234,\"start\":43221},{\"end\":43244,\"start\":43234},{\"end\":43251,\"start\":43244},{\"end\":43260,\"start\":43251},{\"end\":43267,\"start\":43260},{\"end\":43288,\"start\":43267},{\"end\":43307,\"start\":43288},{\"end\":43562,\"start\":43545},{\"end\":43576,\"start\":43562},{\"end\":43746,\"start\":43732},{\"end\":43753,\"start\":43746},{\"end\":43757,\"start\":43753},{\"end\":43765,\"start\":43757},{\"end\":43776,\"start\":43765},{\"end\":43782,\"start\":43776},{\"end\":43797,\"start\":43782},{\"end\":43812,\"start\":43797},{\"end\":44040,\"start\":44023},{\"end\":44045,\"start\":44040},{\"end\":44052,\"start\":44045},{\"end\":44072,\"start\":44052},{\"end\":44077,\"start\":44072},{\"end\":44088,\"start\":44077},{\"end\":44096,\"start\":44088},{\"end\":44106,\"start\":44096},{\"end\":44116,\"start\":44106},{\"end\":44122,\"start\":44116},{\"end\":44134,\"start\":44122},{\"end\":44154,\"start\":44134},{\"end\":44600,\"start\":44587},{\"end\":44612,\"start\":44600},{\"end\":44626,\"start\":44612},{\"end\":44846,\"start\":44830},{\"end\":44861,\"start\":44846},{\"end\":44870,\"start\":44861},{\"end\":44886,\"start\":44870},{\"end\":45123,\"start\":45106},{\"end\":45137,\"start\":45123},{\"end\":45372,\"start\":45354},{\"end\":45625,\"start\":45611},{\"end\":45633,\"start\":45625},{\"end\":45643,\"start\":45633},{\"end\":45662,\"start\":45643},{\"end\":45681,\"start\":45662},{\"end\":45690,\"start\":45681},{\"end\":45924,\"start\":45910},{\"end\":45931,\"start\":45924},{\"end\":45939,\"start\":45931},{\"end\":45946,\"start\":45939},{\"end\":45954,\"start\":45946},{\"end\":45962,\"start\":45954},{\"end\":45976,\"start\":45962},{\"end\":45993,\"start\":45976},{\"end\":45998,\"start\":45993},{\"end\":46003,\"start\":45998},{\"end\":46012,\"start\":46003},{\"end\":46026,\"start\":46012},{\"end\":46290,\"start\":46276},{\"end\":46300,\"start\":46290},{\"end\":46306,\"start\":46300},{\"end\":46321,\"start\":46306},{\"end\":46330,\"start\":46321},{\"end\":46334,\"start\":46330},{\"end\":46516,\"start\":46500},{\"end\":46531,\"start\":46516},{\"end\":46724,\"start\":46709},{\"end\":46731,\"start\":46724},{\"end\":46740,\"start\":46731},{\"end\":46757,\"start\":46740},{\"end\":46772,\"start\":46757},{\"end\":47008,\"start\":46996},{\"end\":47025,\"start\":47008},{\"end\":47296,\"start\":47277},{\"end\":47511,\"start\":47498},{\"end\":47516,\"start\":47511},{\"end\":47524,\"start\":47516},{\"end\":47546,\"start\":47524},{\"end\":47561,\"start\":47546},{\"end\":47790,\"start\":47772},{\"end\":47806,\"start\":47790},{\"end\":47821,\"start\":47806},{\"end\":47999,\"start\":47992},{\"end\":48009,\"start\":47999},{\"end\":48021,\"start\":48009},{\"end\":48032,\"start\":48021},{\"end\":48186,\"start\":48172},{\"end\":48193,\"start\":48186},{\"end\":48212,\"start\":48193},{\"end\":48219,\"start\":48212},{\"end\":48232,\"start\":48219},{\"end\":48252,\"start\":48232},{\"end\":48459,\"start\":48446},{\"end\":48468,\"start\":48459},{\"end\":48472,\"start\":48468},{\"end\":48655,\"start\":48642},{\"end\":48662,\"start\":48655},{\"end\":48669,\"start\":48662},{\"end\":48683,\"start\":48669},{\"end\":48697,\"start\":48683},{\"end\":48929,\"start\":48916},{\"end\":48940,\"start\":48929},{\"end\":48947,\"start\":48940},{\"end\":48964,\"start\":48947},{\"end\":48973,\"start\":48964},{\"end\":48977,\"start\":48973}]", "bib_venue": "[{\"end\":36688,\"start\":36684},{\"end\":36983,\"start\":36978},{\"end\":37294,\"start\":37281},{\"end\":37580,\"start\":37576},{\"end\":37783,\"start\":37714},{\"end\":38106,\"start\":38102},{\"end\":38332,\"start\":38328},{\"end\":38486,\"start\":38432},{\"end\":38793,\"start\":38728},{\"end\":38990,\"start\":38922},{\"end\":39287,\"start\":39283},{\"end\":39514,\"start\":39495},{\"end\":39679,\"start\":39623},{\"end\":39910,\"start\":39906},{\"end\":40133,\"start\":40129},{\"end\":40408,\"start\":40404},{\"end\":40634,\"start\":40630},{\"end\":40836,\"start\":40817},{\"end\":41052,\"start\":41048},{\"end\":41267,\"start\":41188},{\"end\":41603,\"start\":41599},{\"end\":41835,\"start\":41831},{\"end\":42056,\"start\":42051},{\"end\":42253,\"start\":42200},{\"end\":42507,\"start\":42433},{\"end\":43314,\"start\":43307},{\"end\":43580,\"start\":43576},{\"end\":43816,\"start\":43812},{\"end\":44210,\"start\":44154},{\"end\":44641,\"start\":44636},{\"end\":44828,\"start\":44780},{\"end\":45141,\"start\":45137},{\"end\":45398,\"start\":45372},{\"end\":45694,\"start\":45690},{\"end\":46030,\"start\":46026},{\"end\":46349,\"start\":46344},{\"end\":46568,\"start\":46531},{\"end\":46776,\"start\":46772},{\"end\":46994,\"start\":46923},{\"end\":47275,\"start\":47168},{\"end\":47568,\"start\":47561},{\"end\":47770,\"start\":47724},{\"end\":47990,\"start\":47943},{\"end\":48256,\"start\":48252},{\"end\":48476,\"start\":48472},{\"end\":48702,\"start\":48697},{\"end\":48981,\"start\":48977},{\"end\":44253,\"start\":44212}]"}}}, "year": 2023, "month": 12, "day": 17}