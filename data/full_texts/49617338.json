{"id": 49617338, "updated": "2022-10-03 18:27:14.883", "metadata": {"title": "Geometric Spanners in the MapReduce Model", "authors": "[{\"first\":\"Sepideh\",\"last\":\"Aghamolaei\",\"middle\":[]},{\"first\":\"Fatemeh\",\"last\":\"Baharifard\",\"middle\":[]},{\"first\":\"Mohammad\",\"last\":\"Ghodsi\",\"middle\":[]}]", "venue": "COCOON", "journal": "675-687", "publication_date": {"year": 2018, "month": null, "day": null}, "abstract": "A geometric spanner on a point set is a sparse graph that approximates the Euclidean distances between all pairs of points in the point set. Here, we intend to construct a geometric spanner for a massive point set, using a distributed algorithm on parallel machines. In particular, we use the MapReduce model of computation to construct spanners in several rounds with inter-communications in between. An algorithm in this model is called efficient if it uses a sublinear number of machines and runs in a polylogarithmic number of rounds. In this paper, we propose an efficient MapReduce algorithm for constructing a geometric spanner in a constant number of rounds, using linear amount of communication. The stretch factors of our spanner is 1 + , for any > 0.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2810943762", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/cocoon/AghamolaeiBG18", "doi": "10.1007/978-3-319-94776-1_56"}}, "content": {"source": {"pdf_hash": "a1fbdfc3ce1249290d13734c1949b86b4156aa71", "pdf_src": "MergedPDFExtraction", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "dd87666b2f233d780793e1904a04310c04bca888", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/a1fbdfc3ce1249290d13734c1949b86b4156aa71.txt", "contents": "\nGeometric Spanners in the MapReduce Model\n\n\nSepideh Aghamolaei aghamolaei@ce.sharif.edu \nDepartment of Computer Engineering\nSharif University of Technology\nTehranIran\n\nFatemeh Baharifard f.baharifard@ipm.ir \nSchool of Computer Science\nInstitute for Research in Fundamental Sciences (IPM)\nTehranIran\n\nMohammad Ghodsi ghodsi@sharif.edu \nDepartment of Computer Engineering\nSharif University of Technology\nTehranIran\n\nSchool of Computer Science\nInstitute for Research in Fundamental Sciences (IPM)\nTehranIran\n\nGeometric Spanners in the MapReduce Model\n10.1007/978-3-319-94776-1_56Computational geometry \u00b7 Parallel computation Geometric spanners \u00b7 MapReduce\nA geometric spanner on a point set is a sparse graph that approximates the Euclidean distances between all pairs of points in the point set. Here, we intend to construct a geometric spanner for a massive point set, using a distributed algorithm on parallel machines. In particular, we use the MapReduce model of computation to construct spanners in several rounds with inter-communications in between. An algorithm in this model is called efficient if it uses a sublinear number of machines and runs in a polylogarithmic number of rounds. In this paper, we propose an efficient MapReduce algorithm for constructing a geometric spanner in a constant number of rounds, using linear amount of communication. The stretch factors of our spanner is 1 + , for any > 0.\n\nIntroduction\n\nSpace limitations are the main challenge in processing massive data i.e. data that do not fit inside the memory of a single machine. Given a bounded memory, an efficient algorithm has a low time complexity. Some space-bounded models allow a type of secondary slower memory or communication between multiple fast memories to reduce the running time of the algorithm. Allowing two types of memory, shifts the challenge in the algorithm design to data communication.\n\nMapReduce is a framework for processing data in large scales in which a set of machines, each have a part of the input, run an algorithm in simultaneous rounds and after each round, they can communicate their data to each other. Efficient MapReduce algorithms have sublinear machines each with sublinear memory that run for polylogarithmic number of rounds and the number of machines used in the algorithm must be asymptotically as many as the input size.\n\nAn example of problems that has been discussed in MapReduce framework is Euclidean minimum spanning tree problem, which was studied by Andoni et al. [3] who presented an algorithm with O(1) round complexity and superlinear memory. Later, Yaroslavtsev and Vadapalli [23] proved lower bounds for this problem and proposed an algorithm for approximating each edge of the minimum spanning tree. Another example is computing the core-set for convex hull using the method proposed in [2], which also works in MapReduce model. Moreover, fixed-dimensional linear programming, 1-dimensional all nearest neighbors, 2dimensional and 3-dimensional convex hull algorithms were solved in memorybound MapReduce model [13] and practically proven algorithms for sky-line computation, merging two polygons, diameter and closest pair problems have been discussed in MapReduce model [8,10].\n\nA network is called a t-spanner, if there is a short path between any pairs of nodes, within a guaranteed ratio t to the shortest paths between those nodes in an underlying base graph. Most of the time and in this paper, the complete graph which has \u03b8(n 2 ) edges is considered as the underlying base graph.\n\nMost efficient spanner construction algorithms are geometric and they find practical applications in areas such as terrain construction [12,21], metric space searching [19], broadcasting in communication networks [11] and solving approximately geometric problems like traveling salesman problem [20].\n\nRecently, a divide and conquer algorithm for constructing geometric spanners has been studied as spanners merging problem in [4]. The size of the spanner created using this method is O(n log n), which requires O(log n) times more memory than the input. However, the proposed algorithm uses linear memory in its final merging steps, which is infeasible for MapReduce model. Moreover, in [6,14] the problems of well-separated pair decomposition on PRAM and 3D covex hull in MapReduce model were considered. Using the lifting transformation, 3D convex hull solves planar Delaunay triangulation. Using simulation of PRAM algorithms in MapReduce as discussed in [14] gives algorithms for the two spanners of [4,6]. Direct algorithms for Delaunay triangulation in MapReduce [5,18] are randomized and require a super-linear number of machines unlike the PRAM simulation. A summary of results on geometric spanners in MapReduce is shown in Table 1. Table 1 compares the previous results for geometric spanners with the one given in this paper. \n\n\nContributions.\nWSPD O(n) 1 + O( log n \u03b4 ) O( n \u03b4 log n )\nSimulation [14], PRAM [6] DT\nO(n) 1.998 O( 1 \u03b4 ) O( n \u03b4 )\n3D convex hull [14,22] -\nO( n ) 1 + O( 1 \u03b4 ) O( n \u03b4 ) this paper (Algorithm 4)\nIn this paper, we propose efficient algorithms for constructing a geometric spanner similar to Yao-graph and a special case of dynamic programming in the MapReduce model. Our algorithms run for a constant number of rounds and use linear memory.\n\n\nPreliminaries\n\nIn this section we review basic knowledge required to understand the rest of the paper.\n\n\nMapReduce Model\n\nDifferent theoretical models for MapReduce has been introduced over the years [9,14,16]. In MapReduce class (MRC) model, for an input of size n, the following three conditions must be satisfied: In MRC model, the input of each round is distributed among machines. Let S i be the part of the input assigned to machine i in each round. Data in MapReduce are stored as (key, value) pairs. A MapReduce algorithm consists of three steps: map, shuffle and reduce:\n\n-map: processes data into a set of (key, value) pairs. -shuffle: sends data with the same key to the same machine.\n\n-reduce: aggregates data with the same key.\n\nOperations map and reduce are local, while shuffle distributes data between machines.\n\nTwo main parallel algorithms operations are semi-group and prefix sum:\n\n-Semi-group: x 1 \u2295 x 2 \u2295 \u00b7 \u00b7 \u00b7 \u2295 x n , i.e. for a set S and a binary operation \u2295 : S \u00d7S \u2192 S, the associative property holds: \u2200a, b, c \u2208 S, (a\u2295b)\u2295c = a\u2295(b\u2295c). -Prefix sum:\nx 1 \u2295 x 2 \u2295 \u00b7 \u00b7 \u00b7 \u2295 x i , i = 1, . . . , n -Diminished prefix sum: x 1 \u2295 x 2 \u2295 \u00b7 \u00b7 \u00b7 \u2295 x i\u22121 , i = 1, . . . , n\nBoth of these operations also take O(log n m ) rounds and O(n log n m ) computation in MapReduce [14]. Parallel algorithms in CRCW PRAM model can be simulated in MapReduce model by a factor 2 slow-down [14]. A class of functions that can be computed with minimum round and communication complexity are known as MRC-parallelizable functions [16]. An example of a MRC-parallelizable functions is computing the frequency of words in a set of documents which is known as word count algorithm [7].\n\nSpecial cases of dynamic programming have been discuessed in MapReduce [15] with (1 + )-approximation factor, O(1) rounds and\u00d5(n) communication, where\u00d5 ommits a polylog(n) factor. The required conditions for this type of dynamic programming are monotonicity and decomposability. Monotonicity states that the cost of subproblems is less than the main problem, and decomposability states that the input can be decomposed into two-level laminar family of partial inputs where group is the higher level and block is the lower level, such that the solution to the main problem is a concatenation of the solutions to the subproblems and a nearly optimal solution can be constructed from O(1) blocks.\n\nAlgorithms for constructing range searching data structures in MapReduce exist [1]. However, they lack the efficiency required for simultaneous queries.\n\n\nGeometric Spanners\n\nA geometric network G is a t-spanner for a point set P , if a t > 1 exists such that for each pair of points u and v in P , there is a path in G between u and v, whose length is less than or equal to the t times of the Euclidean distance between u and v. The minimum t such that G is a t-spanner of P is the spanning ratio of G.\n\nMany spanner algorithms exist which excel in different quality measures. Here, we describe an algorithm for constructing a t-spanner of a set of points in Euclidean space which constructs a spanner with a linear number of edges in O(n log n) time.\n\nYao-Graph. One of the most common spanners is Yao-graph which is denoted by Y k -graph. The Y k -graph is constructed as follows. Given a set P of points in the plane, for each vertex p \u2208 P , partition the plane into k disjoint cones (regions in the plane between two rays originating from the same point) with apex p, each defined by two rays at consecutive multiples of \u03b8 = 2\u03c0 k radians from the negative y-axis and label the cones C 0 (p) through C k\u22121 (p), in counterclockwise order around p. Then for each cone with apex p, connect p to its closest vertex q inside that cone.\n\nIt is proven that for any \u03b8 with 0 < \u03b8 < \u03c0/3, the Yao-graph with cones of angle \u03b8, is a t-spanner of P for t = 1 1\u22122 sin(\u03b8/2) with O( n \u03b8 ) edges, that can be constructed in O( n log n \u03b8 ) time [17].\n\n\nMergeable Dynamic Programming\n\nIn Algorithm 1 we solve the special dynamic programming, which is defined below, in MapReduce model. Actually, the idea behind dynamic programming in MapReduce is similar to the parallel prefix sum in PRAM. \n\n\nDefinition 1 (Mergeable DP). A dynamic program (DP) with input set\nT [\u03a6 \u22121 (k)] = h(T [\u03a6 \u22121 (k \u2212 1)], . . . , T [\u03a6 \u22121 (k \u2212 )], S[\u03a6 \u22121 (k)]).\nThe sparsity and summarizability of the DP table allow us to summarize the computed part of the table into a sublinear subset of cells, which we call a frontier. A formal definition of frontier is given in Definition 2. \n\n\nDefinition 2 (Frontier). The frontier is a subset of cells along with their indices F (denoted by F.cells and F.indices) of a DP table T , such that cells with indices\nR = {E(F ) + 1, . . . , |T |} can be computed using cells with indices F.indices \u222a R, where E(F ) = max f \u2208F.indices f .\n\nDefinition 3 (Frontier Merging). Given two frontiers a, b, frontier merging operation creates a frontier c which is a frontier for cells from\n1 to k = max{E(a), E(b)}. Build a hypoteticalthere is a sequence T X [\u03a6 \u22121 (k)], . . . , T X [\u03a6 \u22121 (k \u2212 \u2212 1)] for each cell T X [\u03a6 \u22121 (k)].\nReport this as c.\n\nIn Lemma 1, we show that a frontier of a mergeable DP can be constructed using a (diminished) parallel prefix algorithm.\n\n\nLemma 1. The operation of Definition 3 builds a frontier for\n\u222a k\u2212 i=k T [\u03a6 \u22121 (i)]\nand it is a semi-group function.\n\nProof. Since T is a mergeable DP, T X is also a mergeable DP. For two sets A and B, using the semi-group property of f , computing T A and T B and applying f on their results in the order of \u03a6, gives T A\u222aB .\nFor A = {T [1], . . . , T [E(a)]} and B = {T [1], . . . , T [E(b)]}, the result is A \u222a B = {T [1], . . . , T [k]}, k = max(E(a), E(b)) = E(c).\nAssume three frontiers a, b and c of a DP table in the order of \u03a6 with the set of indices denoted by S a , S b and S c , respectively. Now, we prove the two possible orders of computation result in the same result. Since the frontiers in the computation follow the order of \u03a6:\na \u2295 b = T Sa\u222aS b [E(b)] \u21d2 (a \u2295 b) \u2295 c = T Sa\u222aS b \u222aSc [E(c)]\nThe other case can be proven similarly:\nb \u2295 c = T S b \u222aSc [E(c)] \u21d2 a \u2295 (b \u2295 c) = T Sa\u222aS b \u222aSc [E(c)]\nwhich proves the lemma. Now, we give an algorithm (Algorithm 1) for solving the mergeable DP (Definition 1) problems in MapReduce. Proof. By Definition 1, for a mergeable dynamic programming, the order (\u03a6) in which the table is filled can be determined. Using this order, Algorithm 2 finds partitions that are ordered based on the order of the dynamic program (Theorem 4). Then, a parallel prefix computation can be used for computing the frontier in each cell (Lemma 1) and the minimum of the related cells gives the value of the cell in T . \n\n\nAlgorithm 1. Mergeable DP in MapReduce\n\n\nApplication: Geometric Spanners in MapReduce\n\nIn this section, we present an efficient algorithm for constructing a geometric spanner in the MapReduce model.\n\n\nA Balanced Grid in MapReduce\n\nWe can store a grid by its separating lines. A partitioning based on a regular grid and an indexing scheme is used to distribute data among machines. Algorithm 2 takes as input a set of point-sets and an ordering scheme and builds a regular grid and a partitioning of that grid based on the given ordering.\n\nIn Algorithm 2, Sort f (S) means sorting based on function f of points in S in MapReduce model. Sorting points means they are distributed among L machines such that i < j \u21d2 \u2200a \u2208 S i , b \u2208 S j , f(a) \u2264 f (b). Sorting n points in this model can be done in O(log n m ) rounds [14], which is O( 1 \u03b4 ) for m = n \u03b4 where \u03b4 is a constant (0 \u2264 \u03b4 \u2264 1).   Proof. The last sorting step of the algorithm which sorts points based on the value of f , divides points into sets S 1 , . . . , S L such that \u2200(x, y) \n\n\nAlgorithm 2. A Regular Grid in MapReduce\n\u2208 S i , (x , y ) \u2208 S j , i < j \u21d2 f (x, y) \u2264 f (x ,\n\nSimultaneous 2-Sided Queries\n\nNow we present an offline algorithm for solving the 2-sided range queries in Algorithm 3, which can be extended to MapReduce in the same way as parallel prefix computation. In Algorithm 3, the closest point to (X i , Y j ) using distance function 1 that lies inside the 2-sided range (x \u2264 X i , y \u2264 Y j ) is computed. Also, x 1 denotes the length of vector x under 1 .\n\n\nAlgorithm 3. Simultaneous 2-Sided Queries\nInput: A point set S, a rectangular grid {Xi} i=1 \u00d7 {Yj} i=1 Output:\nThe nearest neighbor to (Xi, Yj) using points of S inside the 2-sided range 1: Run Algorithm 2 to build a \u00d7   Proof. Each 2-sided range query on the grid (Fig. 2), can be computed using Algorithm 1 for computing the recurrence relation. The nearest point to (X i , Y j ) using 1 distance is either in cell S [i, j] or in one of its neighbors: (Fig. 1). Since the algorithm checks all these values, it finds the exact nearest neighbor.\nT [i \u2212 1, j], T [i, j \u2212 1]\n\nA Geometric Spanner in MapReduce\n\nTo build a spanner similar to Yao-graph, we first solve simultaneous 2-sided range queries, using dynamic programming. These queries are then used in the spanner algorithm to find an approximate nearest neighbor in each cone. Our algorithm for constructing a spanner (Algorithm 4) creates a grid and applies nearest neighbor search to find the edges. Algorithm 4 creates a set of oriented rhomboid grids with lines parallel to the ones creating cones around each point, as shown in Fig. 3.\n\nIn Algorithm 4, the distances computed in Algorithm 3 are 1 distances of the affine transformations of a grid, as shown in Fig. 4. Lemma 5 computes the approximation factor between this distance and the Euclidean distance.\n\n\nLemma 5.\n\nThe distance between two points on a grid with unit vectors that have an angle \u03b8 (0 \u2264 \u03b8 \u2264 \u03c0 2 ) between them, is 1 + O(\u03b8) times the Euclidean distance between those points. Proof. Assume w.l.o.g. that one of the points is (0, 0) and the other one is p = (x, y), x, y > 0. The angle between \u2212 \u2192 op and \u2212 \u2192 i is \u03b1 \u2264 \u03b8, since p lies inside the cone. Using basic trigonometry, the distance computed in our algorithm is x + y and the Euclidean distance between these points is y sin(\u03b8) sin(\u03b1) . Also, x = cos(\u03b1) y sin(\u03b8) sin(\u03b1) \u2212 y cos(\u03b8). So, using Taylor series for cosine and Maclaurin series for 1 1\u2212X , the approximation factor is proved:\n\nx + y | \u2212 \u2192 op| = cos(\u03b1) y sin(\u03b8) sin(\u03b1) \u2212 y cos(\u03b8) + y y sin(\u03b8) sin(\u03b1) = y cos(\u03b1) sin(\u03b1) \u2212 y cos(\u03b8) sin(\u03b1) + y sin(\u03b1) y sin(\u03b8) = sin(\u03b8 \u2212 \u03b1) + sin(\u03b1) sin(\u03b8) = 2 sin( \u03b8 2 ) cos( \u03b8\u22122\u03b1 2 ) 2 sin( \u03b8 2 ) cos( \u03b8 2 ) = cos( \u03b8\u22122\u03b1 2 ) cos( \u03b8 2 ) Proof. Applying Lemma 5 proves using 1 distance instead of the Euclidean distance (Algorithm 4) adds a factor 1 + O(\u03b8 2 ), and Lemma 4 proves Algorithm 3 computes the exact 1 distance. Using induction on the length of the path, similar to the proof of the stretch factor of Yao-graph, proves the approximation factor. \n\u2264 1 1 \u2212 \u03b8 2 8 = 1 + \u03b8 2 8 + o(\u03b8 2 ).\n-\nthe number of machines is sublinear: L = o(n) -the memory of each machine is sublinear: m = o(n) -the number of rounds is polylogarithmic: O(polylog(n)).\n\n\nInput: A mergeable DP (S, Q, f, T, \u03a6) Output: The output of DP 1: Compute a valid ordering \u03a6 on S and distribute the points by Algorithm 2. 2: Map each cell S[\u03a6 \u22121 (i)] to a -tuple (\u2205, . . . , \u2205, S[\u03a6 \u22121 (i)]). 3: Run the diminished parallel prefix algorithm with the frontier merging as the operation on -tuples. 4: Compute T by applying f on -tuples and S and store the result. 5: Use f to update the local values of T to compute Q. 6: return Q Theorem 1. Algorithm 1 solves mergeable dynamic programming problems correctly.\n\nTheorem 2 .\n2Algorithm 1 takes O(log n m ) rounds and it has O(n log n m ) communication complexity in MRC model, if = O( d+1 \u221a n) for a d-dimensional DP. Proof. The algorithm consists of a parallel prefix computation and running Algorithm 2 once. The round and communication complexity of Algorithm 2 is O(log n m ) and O(n log n m ) respectively. The round complexity of parallel prefix algorithm is O(log n m ) and the communication complexity of the algorithm is O( . d log n m ), since instead of data with O(1) dimension, vectors of length O( ) have been used, and there are O( d ) cells. Using Theorem 4, the number of points in each row and column is O(m), so the overall communication and space for sending data from a row and a column is also O(m). Based on Definition 1, the amount of data from other cells is O(m). Therefore, all the steps of the algorithm can be run using O(n) communication per round.\n\n\nInput: a set of points set S = {S1, \u00b7 \u00b7 \u00b7 , SL}, an ordering function f (., .) Output: a space partitioning of S, the grid lines 1: Sortx(S) 2: Xi \u2190 min (x,y)\u2208\u222a i S i x 3: send xi to all other machines (X = \u222aiXi) 4: Sorty(S) 5: Yi \u2190 min (x,y)\u2208\u222a i S i y 6: send Yi to all other machines (Y = \u222aiYi) 7: locally compute the index of each cell (i, j) using the ordering function f (i, j) 8: Sort f (x,y) (S) 9: Re-index the sets in the order of min (x,y)\u2208S i f (x, y) 10: return S = {S1, \u00b7 \u00b7 \u00b7 , SL}, X, Y Here, we present some properties of Algorithm 2, which are used later. Lemma 2. The number of points in each cell of the grid in Algorithm 2 is at most m. Proof. Based on the sorting on x, the number of points between X i and X i+1 is O(m). Similarly, the number of points between Y i and Y i+1 is O(m). So, in the grid built on X \u00d7 Y , the number of points in each cell is O(m). By indexing the points based on f (x, y), the partitions lie inside cells of X \u00d7 Y . Since all equal keys in a MapReduce computation go to the same machine, there are no half-cells.\n\nTheorem 3 .\n3The round complexity of Algorithm 2 is O(log n m ) and its communication complexity is O(n log n m ). Proof. Each sorting takes O(log n m ) rounds, which is constant for m = O(n \u03b4 ) and O(log n m ) communication. Since the round and communication complexities of the algorithm are the sum of the complexities of these sorting steps, they are O(log n m ) and O(n log n m ) respectively.\n\nTheorem 4 .\n4There are at most O(L) partitions in the output of Algorithm 2, each with O(m) points.\n\n\ny ). The size of the sets created using a sorting algorithm is O(m) (Lemma 2) and the number of sets is O(L), so the number of partitions is O(L) and each of them has O(m) points.\n\ntFig. 1 .\n1\u2212 (Xi, Yj) 1 as f and \u03a6 as the ordering. 3: return T For a 2D DP table which is filled in 2 directions (down and right), the data of the same row and column cells are needed in addition to Ci of the previous cells.\n\nLemma 3 .Fig. 2 .\n32Algorithm 3 is a mergeable dynamic programming.Proof. The algorithm is mergeable since it satisfies the conditions of mergeable dynamic programming as defined in Definition 1:-Sparsity: The number of cells required to answer 2-sided queries is O(n), since we only need to know the value of cells which contain a point.-Neighbors: The value of a cell (i, j) can be determined using the values of cells T [i \u2212 1, j], T [i, j \u2212 1], S[i, j]. -Parallelizable: Minimum distance to the grid point corresponding to the corner of cell [i, j] is a semi-group function, since minimum computations are semi-group. -Summarizable: The anti-diagonal of T that passes through each cell is the frontier of that cell under 2-sided queries. So this problem is summarizable for = n. Three 2-sided range queries for computing 3 nearest neighbors. Lemma 4. The nearest neighbor of a point inside a 2-sided range using 1 distance can be computed using Algorithm 3.\n\nFig. 3 .\n3The overlay of two out of k = 8 square grids of Algorithm 4, indicated by dotted lines and dashed lines. The bold red lines denote the cones around a point. (Color figure online) Algorithm 4. A Geometric Spanner in MapReduce Input: A set of points set S = {S1, . . . , SL}, an integer k \u2265 7 Output: A spanner with k cones around each point 1: \u0398 = { 2\u03c0i k |i = 1, . . . , k} 2: locally create pairs of consecutive directions from \u0398 in clockwise order. 3: locally build a grid for each pair of directions from previous step. 4: repeat each point p once in each grid. 5: run Algorithm 3 with d(., .) defined as the 1 distance and \u222aiSi as the point set, using Algorithm 1 in each grid to find the nearest neighbor of each point inside its cone. 6: add an edge between each point and one of its nearest neighbors in each direction (cone). 7: return the edges of the spanner.\n\nFig. 4 .\n4A grid built inside a cone and the path on the grid compared to the distance between the point inside the cone and the apex.Theorem 5. The stretch factor of the spanner of Algorithm 4 is 1 + O(\u03b8).\n\nTheorem 6 .\n6Algorithm 4 has O(k log n m ) round complexity and O(nk log n m ) communication complexity. Proof. The algorithm solves one instance of range query per cone to compute the nearest neighbors simultaneously. Based on Lemma 3, Algorithm 3 is a mergeable dynamic program, and using Theorem 1, it takes O(log n m ) rounds and O(n log n m ) communications to solve it. Since there are k cones, the overall complexity of the algorithm is O(k log n m ) rounds and O(kn log n m ) communication.\n\nTable 1 .\n1A summary of results on geometric spanners in MapReduce. 1 \u03b4 = log n m , where m is the memory of each machine.Spanner |E| \nStretch factor Rounds Communication Reference \n\n\n\n\nS and output set Q with a recurrence relation f : S k \u2192 Q and a table T with a valid filling order \u03a6 : T \u2192 N and size |T | = n d , and mappings between S \u2194 T and Q \u2194 T , is a mergeable DP if the following three conditions hold: -Sparsity: The number of cells of T required for computing Q is O(|S|). -Neighbors: Computing f on each block requires data only from O(1) previous blocks (in the order of \u03a6). -Order Preserving: The value of each cell must only depend on the cells with smaller or equal index based on \u03a6 and the order of each dimension of the table T . -Parallelizable: Function f must be a semi-group function. -Summarizable: There is an integer sublinear in |S| ( = o(|S|)), such that using the last values of T in the order of \u03a6, it is possible to compute the rest of the table, i.e. function h exists such that\n\n\ntable T X similar to T but only store data from set X = a.cells \u222a b.cells. Fill the table T X from cell 1 to cell k. Using the summarizabilty property of the mergeable DP with table T X and ordering \u03a6,\n\n\ntable T and index it using \u03a6(x, y) = x + y \u00d7 . 2: Run Algorithm 1 with S as point set, T as table, T [i, j]= \narg \nmin \n\nt\u2208S[i,j]\u222aT [i\u22121,j]\u222aT [i,j\u22121] \n\n\nConclusionWe introduced a (1 + )-spanner in Euclidean plane and presented a MRC algorithm for constructing it in optimal round and communication complexities. However, the number of machines used in our algorithm is sub-quadratic. Finding algorithms that use fewer machines and algorithms for spanners with other geometric properties such as bounded degree spanners and bounded diameter spanners are also important.We also proved conditions for parallelizable dynamic programming problems. Solving other problems in MapReduce using our method might also be interesting. Also, finding algorithms for other simultaneous queries can reduce the complexity of some MapReduce algorithms.\nParallel algorithms for constructing range and nearest-neighbor searching data structures. P K Agarwal, K Fox, K Munagala, A Nath, Proceedings of the 35th ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems. the 35th ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database SystemsACMAgarwal, P.K., Fox, K., Munagala, K., Nath, A.: Parallel algorithms for construct- ing range and nearest-neighbor searching data structures. In: Proceedings of the 35th ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Sys- tems, pp. 429-440. ACM (2016)\n\nGeometric approximation via coresets. P K Agarwal, S Har-Peled, K R Varadarajan, Comb. Comput. Geom. 52Agarwal, P.K., Har-Peled, S., Varadarajan, K.R.: Geometric approximation via coresets. Comb. Comput. Geom. 52, 1-30 (2005)\n\nParallel algorithms for geometric graph problems. A Andoni, A Nikolov, K Onak, G Yaroslavtsev, Proceedings of the 46th Annual ACM Symposium on Theory of Computing. the 46th Annual ACM Symposium on Theory of ComputingAndoni, A., Nikolov, A., Onak, K., Yaroslavtsev, G.: Parallel algorithms for geo- metric graph problems. In: Proceedings of the 46th Annual ACM Symposium on Theory of Computing, pp. 574-583 (2014)\n\nGeometric spanners merging and its applications. D Bakhshesh, M Farshi, Proceedings of the 28th Canadian Conference on Computational Geometry. the 28th Canadian Conference on Computational GeometryBakhshesh, D., Farshi, M.: Geometric spanners merging and its applications. In: Proceedings of the 28th Canadian Conference on Computational Geometry, pp. 133-139 (2016)\n\nEfficient parallel and external matching. M Birn, V Osipov, P Sanders, C Schulz, N Sitchinava, 10.1007/978-3-642-40047-666Euro-Par 2013. Wolf, F., Mohr, B., an Mey, D.HeidelbergSpringer8097Birn, M., Osipov, V., Sanders, P., Schulz, C., Sitchinava, N.: Efficient parallel and external matching. In: Wolf, F., Mohr, B., an Mey, D. (eds.) Euro-Par 2013. LNCS, vol. 8097, pp. 659-670. Springer, Heidelberg (2013). https://doi.org/10.1007/978- 3-642-40047-6 66\n\nDealing with higher dimensions: the well-separated pair decomposition and its applications. P B Callahan, Johns Hopkins UniversityPh.D. thesisCallahan, P.B.: Dealing with higher dimensions: the well-separated pair decompo- sition and its applications. Ph.D. thesis, Johns Hopkins University (1995)\n\nMapReduce: simplified data processing on large clusters. J Dean, S Ghemawat, Commun. ACM. 51Dean, J., Ghemawat, S.: MapReduce: simplified data processing on large clusters. Commun. ACM 51, 107-113 (2008)\n\nCG Hadoop: computational geometry in MapReduce. A Eldawy, Y Li, M F Mokbel, R Janardan, Proceedings 21st ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems. 21st ACM SIGSPATIAL International Conference on Advances in Geographic Information SystemsEldawy, A., Li, Y., Mokbel, M.F., Janardan, R.: CG Hadoop: computational geom- etry in MapReduce. In: Proceedings 21st ACM SIGSPATIAL International Con- ference on Advances in Geographic Information Systems, pp. 294-303 (2013)\n\nCommunication steps for parallel query processing. A Eldawy, M F Mokbel, Proceedings of the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems. the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database SystemsEldawy, A., Mokbel, M.F.: Communication steps for parallel query processing. In: Proceedings of the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems, pp. 273-284 (2013)\n\nSpatialHadoop: A MapReduce framework for spatial data. A Eldawy, M F Mokbel, Proceedings of the 31st International Conference on Data Engineering. the 31st International Conference on Data EngineeringEldawy, A., Mokbel, M.F.: SpatialHadoop: A MapReduce framework for spatial data. In: Proceedings of the 31st International Conference on Data Engineering, pp. 1352-1363 (2015)\n\nSpanners and message distribution in networks. A M Farley, A Proskurowski, D Zappala, K Windisch, Discrete Appl. Math. 137Farley, A.M., Proskurowski, A., Zappala, D., Windisch, K.: Spanners and message distribution in networks. Discrete Appl. Math. 137, 159-171 (2004)\n\nA coarse grained solution to parallel terrain simplification. M Ghodsi, J Sack, Proceedings of 10th Canadian Conference on Computational Geometry. 10th Canadian Conference on Computational GeometryGhodsi, M., Sack, J.: A coarse grained solution to parallel terrain simplification. In: Proceedings of 10th Canadian Conference on Computational Geometry (1998)\n\nM T Goodrich, arXiv:1004.4708Simulating parallel algorithms in the MapReduce framework with applications to parallel computational geometry. arXiv preprintGoodrich, M.T.: Simulating parallel algorithms in the MapReduce framework with applications to parallel computational geometry. arXiv preprint arXiv:1004.4708 (2010)\n\nSorting, searching, and simulation in the MapReduce framework. M T Goodrich, N Sitchinava, Q Zhang, Proceedings of the 22nd Annual International Symposium on Algorithms and Computation. the 22nd Annual International Symposium on Algorithms and ComputationGoodrich, M.T., Sitchinava, N., Zhang, Q.: Sorting, searching, and simulation in the MapReduce framework. In: Proceedings of the 22nd Annual International Sym- posium on Algorithms and Computation, pp. 374-383 (2011)\n\nEfficient massively parallel methods for dynamic programming. S Im, B Moseley, X Sun, Proceedings of the 49th Annual ACM SIGACT Symposium on Theory of Computing. the 49th Annual ACM SIGACT Symposium on Theory of ComputingACMIm, S., Moseley, B., Sun, X.: Efficient massively parallel methods for dynamic programming. In: Proceedings of the 49th Annual ACM SIGACT Symposium on Theory of Computing, pp. 798-811. ACM (2017)\n\nA model of computation for MapReduce. H Karloff, S Suri, S Vassilvitskii, Proceedings of the 21st ACM-SIAM Symposium on Discrete Algorithms. the 21st ACM-SIAM Symposium on Discrete AlgorithmsKarloff, H., Suri, S., Vassilvitskii, S.: A model of computation for MapReduce. In: Proceedings of the 21st ACM-SIAM Symposium on Discrete Algorithms, pp. 938-948 (2010)\n\nGeometric Spanner Networks. G Narasimhan, M Smid, Cambridge University PressCambridgeNarasimhan, G., Smid, M.: Geometric Spanner Networks. Cambridge University Press, Cambridge (2007)\n\nMassively parallel algorithms for computing TIN DEMs and contour trees for large terrains. A Nath, K Fox, K Munagala, P K Agarwal, Proceedings of the 24th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems. the 24th ACM SIGSPATIAL International Conference on Advances in Geographic Information SystemsNath, A., Fox, K., Munagala, K., Agarwal, P.K.: Massively parallel algorithms for computing TIN DEMs and contour trees for large terrains. In: Proceedings of the 24th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (2016)\n\nt-spanners as a data structure for metric space searching. G Navarro, R Paredes, E Ch\u00e1vez, 10.1007/3-540-45735-626SPIRE 2002. Laender, A.H.F., Oliveira, A.L.HeidelbergSpringer2476Navarro, G., Paredes, R., Ch\u00e1vez, E.: t-spanners as a data structure for metric space searching. In: Laender, A.H.F., Oliveira, A.L. (eds.) SPIRE 2002. LNCS, vol. 2476, pp. 298-309. Springer, Heidelberg (2002). https://doi.org/10.1007/3- 540-45735-6 26\n\nApproximating geometrical graphs via \"spanners\" and \"banyans. S B Rao, W D Smith, Proceedings of the 30th Annual ACM Symposium on Theory of Computing. the 30th Annual ACM Symposium on Theory of ComputingRao, S.B., Smith, W.D.: Approximating geometrical graphs via \"spanners\" and \"banyans\". In: Proceedings of the 30th Annual ACM Symposium on Theory of Computing, pp. 540-550 (1998)\n\nAlgorithms for triangulated terrains. M Van Kreveld, 10.1007/3-540-63774-595SOFSEM 1997. Pl\u00e1\u0161il, F., Jeffery, K.G.HeidelbergSpringer1338van Kreveld, M.: Algorithms for triangulated terrains. In: Pl\u00e1\u0161il, F., Jeffery, K.G. (eds.) SOFSEM 1997. LNCS, vol. 1338, pp. 19-36. Springer, Heidelberg (1997). https://doi.org/10.1007/3-540-63774-5 95\n\nThe stretch factor of the Delaunay triangulation is less than 1.998. G Xia, SIAM J. Comput. 42Xia, G.: The stretch factor of the Delaunay triangulation is less than 1.998. SIAM J. Comput. 42, 1620-1659 (2013)\n\nG Yaroslavtsev, A Vadapalli, arXiv:1710.01431Massively parallel algorithms and hardness for single-linkage clustering under p-distances. arXiv preprintYaroslavtsev, G., Vadapalli, A.: Massively parallel algorithms and hardness for single-linkage clustering under p-distances. arXiv preprint arXiv:1710.01431 (2017)\n", "annotations": {"author": "[{\"end\":168,\"start\":45},{\"end\":300,\"start\":169},{\"end\":506,\"start\":301}]", "publisher": null, "author_last_name": "[{\"end\":63,\"start\":53},{\"end\":187,\"start\":177},{\"end\":316,\"start\":310}]", "author_first_name": "[{\"end\":52,\"start\":45},{\"end\":176,\"start\":169},{\"end\":309,\"start\":301}]", "author_affiliation": "[{\"end\":167,\"start\":90},{\"end\":299,\"start\":209},{\"end\":413,\"start\":336},{\"end\":505,\"start\":415}]", "title": "[{\"end\":42,\"start\":1},{\"end\":548,\"start\":507}]", "venue": null, "abstract": "[{\"end\":1415,\"start\":654}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2505,\"start\":2502},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":2622,\"start\":2618},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2834,\"start\":2831},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3059,\"start\":3055},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3219,\"start\":3216},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":3222,\"start\":3219},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3674,\"start\":3670},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3677,\"start\":3674},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3706,\"start\":3702},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3751,\"start\":3747},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3833,\"start\":3829},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3964,\"start\":3961},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4225,\"start\":4222},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4228,\"start\":4225},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4497,\"start\":4493},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4542,\"start\":4539},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4544,\"start\":4542},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4607,\"start\":4604},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4610,\"start\":4607},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4947,\"start\":4943},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4957,\"start\":4954},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":5009,\"start\":5005},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5012,\"start\":5009},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5519,\"start\":5516},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":5522,\"start\":5519},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":5525,\"start\":5522},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6601,\"start\":6597},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6706,\"start\":6702},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":6844,\"start\":6840},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6991,\"start\":6988},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":7069,\"start\":7065},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7771,\"start\":7768},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":9223,\"start\":9219},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":12814,\"start\":12810},{\"end\":13957,\"start\":13951},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":15462,\"start\":15461}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":16254,\"start\":16098},{\"attributes\":{\"id\":\"fig_1\"},\"end\":16782,\"start\":16255},{\"attributes\":{\"id\":\"fig_2\"},\"end\":17699,\"start\":16783},{\"attributes\":{\"id\":\"fig_3\"},\"end\":18764,\"start\":17700},{\"attributes\":{\"id\":\"fig_4\"},\"end\":19164,\"start\":18765},{\"attributes\":{\"id\":\"fig_5\"},\"end\":19265,\"start\":19165},{\"attributes\":{\"id\":\"fig_6\"},\"end\":19447,\"start\":19266},{\"attributes\":{\"id\":\"fig_7\"},\"end\":19674,\"start\":19448},{\"attributes\":{\"id\":\"fig_8\"},\"end\":20637,\"start\":19675},{\"attributes\":{\"id\":\"fig_9\"},\"end\":21518,\"start\":20638},{\"attributes\":{\"id\":\"fig_10\"},\"end\":21726,\"start\":21519},{\"attributes\":{\"id\":\"fig_11\"},\"end\":22226,\"start\":21727},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":22411,\"start\":22227},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":23239,\"start\":22412},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":23443,\"start\":23240},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":23598,\"start\":23444}]", "paragraph": "[{\"end\":1894,\"start\":1431},{\"end\":2351,\"start\":1896},{\"end\":3223,\"start\":2353},{\"end\":3532,\"start\":3225},{\"end\":3834,\"start\":3534},{\"end\":4872,\"start\":3836},{\"end\":4960,\"start\":4932},{\"end\":5014,\"start\":4990},{\"end\":5313,\"start\":5069},{\"end\":5418,\"start\":5331},{\"end\":5895,\"start\":5438},{\"end\":6011,\"start\":5897},{\"end\":6056,\"start\":6013},{\"end\":6143,\"start\":6058},{\"end\":6215,\"start\":6145},{\"end\":6387,\"start\":6217},{\"end\":6992,\"start\":6500},{\"end\":7687,\"start\":6994},{\"end\":7841,\"start\":7689},{\"end\":8192,\"start\":7864},{\"end\":8441,\"start\":8194},{\"end\":9023,\"start\":8443},{\"end\":9224,\"start\":9025},{\"end\":9465,\"start\":9258},{\"end\":9829,\"start\":9609},{\"end\":10421,\"start\":10404},{\"end\":10543,\"start\":10423},{\"end\":10661,\"start\":10629},{\"end\":10870,\"start\":10663},{\"end\":11290,\"start\":11014},{\"end\":11390,\"start\":11351},{\"end\":11995,\"start\":11452},{\"end\":12196,\"start\":12085},{\"end\":12535,\"start\":12229},{\"end\":13035,\"start\":12537},{\"end\":13529,\"start\":13161},{\"end\":14077,\"start\":13643},{\"end\":14629,\"start\":14140},{\"end\":14853,\"start\":14631},{\"end\":15504,\"start\":14866},{\"end\":16061,\"start\":15506}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":4931,\"start\":4890},{\"attributes\":{\"id\":\"formula_1\"},\"end\":4989,\"start\":4961},{\"attributes\":{\"id\":\"formula_2\"},\"end\":5068,\"start\":5015},{\"attributes\":{\"id\":\"formula_3\"},\"end\":6499,\"start\":6388},{\"attributes\":{\"id\":\"formula_4\"},\"end\":9608,\"start\":9535},{\"attributes\":{\"id\":\"formula_5\"},\"end\":10120,\"start\":10000},{\"attributes\":{\"id\":\"formula_6\"},\"end\":10309,\"start\":10264},{\"attributes\":{\"id\":\"formula_7\"},\"end\":10403,\"start\":10309},{\"attributes\":{\"id\":\"formula_8\"},\"end\":10628,\"start\":10607},{\"attributes\":{\"id\":\"formula_9\"},\"end\":11013,\"start\":10871},{\"attributes\":{\"id\":\"formula_10\"},\"end\":11350,\"start\":11291},{\"attributes\":{\"id\":\"formula_11\"},\"end\":11451,\"start\":11391},{\"attributes\":{\"id\":\"formula_12\"},\"end\":13129,\"start\":13079},{\"attributes\":{\"id\":\"formula_13\"},\"end\":13642,\"start\":13574},{\"attributes\":{\"id\":\"formula_14\"},\"end\":14104,\"start\":14078},{\"attributes\":{\"id\":\"formula_15\"},\"end\":16098,\"start\":16062}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":4775,\"start\":4768},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":4784,\"start\":4777}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1429,\"start\":1417},{\"end\":4889,\"start\":4875},{\"attributes\":{\"n\":\"2\"},\"end\":5329,\"start\":5316},{\"attributes\":{\"n\":\"2.1\"},\"end\":5436,\"start\":5421},{\"attributes\":{\"n\":\"2.2\"},\"end\":7862,\"start\":7844},{\"attributes\":{\"n\":\"3\"},\"end\":9256,\"start\":9227},{\"end\":9534,\"start\":9468},{\"end\":9999,\"start\":9832},{\"end\":10263,\"start\":10122},{\"end\":10606,\"start\":10546},{\"end\":12036,\"start\":11998},{\"attributes\":{\"n\":\"4\"},\"end\":12083,\"start\":12039},{\"attributes\":{\"n\":\"4.1\"},\"end\":12227,\"start\":12199},{\"end\":13078,\"start\":13038},{\"attributes\":{\"n\":\"4.2\"},\"end\":13159,\"start\":13131},{\"end\":13573,\"start\":13532},{\"attributes\":{\"n\":\"4.3\"},\"end\":14138,\"start\":14106},{\"end\":14864,\"start\":14856},{\"end\":16100,\"start\":16099},{\"end\":16795,\"start\":16784},{\"end\":18777,\"start\":18766},{\"end\":19177,\"start\":19166},{\"end\":19458,\"start\":19449},{\"end\":19693,\"start\":19676},{\"end\":20647,\"start\":20639},{\"end\":21528,\"start\":21520},{\"end\":21739,\"start\":21728},{\"end\":22237,\"start\":22228}]", "table": "[{\"end\":22411,\"start\":22350},{\"end\":23598,\"start\":23553}]", "figure_caption": "[{\"end\":16254,\"start\":16101},{\"end\":16782,\"start\":16257},{\"end\":17699,\"start\":16797},{\"end\":18764,\"start\":17702},{\"end\":19164,\"start\":18779},{\"end\":19265,\"start\":19179},{\"end\":19447,\"start\":19268},{\"end\":19674,\"start\":19460},{\"end\":20637,\"start\":19696},{\"end\":21518,\"start\":20649},{\"end\":21726,\"start\":21530},{\"end\":22226,\"start\":21741},{\"end\":22350,\"start\":22239},{\"end\":23239,\"start\":22414},{\"end\":23443,\"start\":23242},{\"end\":23553,\"start\":23446}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":13805,\"start\":13797},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":13993,\"start\":13986},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":14628,\"start\":14622},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":14760,\"start\":14754}]", "bib_author_first_name": "[{\"end\":24373,\"start\":24372},{\"end\":24375,\"start\":24374},{\"end\":24386,\"start\":24385},{\"end\":24393,\"start\":24392},{\"end\":24405,\"start\":24404},{\"end\":24888,\"start\":24887},{\"end\":24890,\"start\":24889},{\"end\":24901,\"start\":24900},{\"end\":24914,\"start\":24913},{\"end\":24916,\"start\":24915},{\"end\":25127,\"start\":25126},{\"end\":25137,\"start\":25136},{\"end\":25148,\"start\":25147},{\"end\":25156,\"start\":25155},{\"end\":25540,\"start\":25539},{\"end\":25553,\"start\":25552},{\"end\":25901,\"start\":25900},{\"end\":25909,\"start\":25908},{\"end\":25919,\"start\":25918},{\"end\":25930,\"start\":25929},{\"end\":25940,\"start\":25939},{\"end\":26408,\"start\":26407},{\"end\":26410,\"start\":26409},{\"end\":26672,\"start\":26671},{\"end\":26680,\"start\":26679},{\"end\":26868,\"start\":26867},{\"end\":26878,\"start\":26877},{\"end\":26884,\"start\":26883},{\"end\":26886,\"start\":26885},{\"end\":26896,\"start\":26895},{\"end\":27381,\"start\":27380},{\"end\":27391,\"start\":27390},{\"end\":27393,\"start\":27392},{\"end\":27821,\"start\":27820},{\"end\":27831,\"start\":27830},{\"end\":27833,\"start\":27832},{\"end\":28190,\"start\":28189},{\"end\":28192,\"start\":28191},{\"end\":28202,\"start\":28201},{\"end\":28218,\"start\":28217},{\"end\":28229,\"start\":28228},{\"end\":28475,\"start\":28474},{\"end\":28485,\"start\":28484},{\"end\":28772,\"start\":28771},{\"end\":28774,\"start\":28773},{\"end\":29157,\"start\":29156},{\"end\":29159,\"start\":29158},{\"end\":29171,\"start\":29170},{\"end\":29185,\"start\":29184},{\"end\":29629,\"start\":29628},{\"end\":29635,\"start\":29634},{\"end\":29646,\"start\":29645},{\"end\":30026,\"start\":30025},{\"end\":30037,\"start\":30036},{\"end\":30045,\"start\":30044},{\"end\":30378,\"start\":30377},{\"end\":30392,\"start\":30391},{\"end\":30626,\"start\":30625},{\"end\":30634,\"start\":30633},{\"end\":30641,\"start\":30640},{\"end\":30653,\"start\":30652},{\"end\":30655,\"start\":30654},{\"end\":31191,\"start\":31190},{\"end\":31202,\"start\":31201},{\"end\":31213,\"start\":31212},{\"end\":31627,\"start\":31626},{\"end\":31629,\"start\":31628},{\"end\":31636,\"start\":31635},{\"end\":31638,\"start\":31637},{\"end\":31986,\"start\":31985},{\"end\":32357,\"start\":32356},{\"end\":32498,\"start\":32497},{\"end\":32514,\"start\":32513}]", "bib_author_last_name": "[{\"end\":24383,\"start\":24376},{\"end\":24390,\"start\":24387},{\"end\":24402,\"start\":24394},{\"end\":24410,\"start\":24406},{\"end\":24898,\"start\":24891},{\"end\":24911,\"start\":24902},{\"end\":24928,\"start\":24917},{\"end\":25134,\"start\":25128},{\"end\":25145,\"start\":25138},{\"end\":25153,\"start\":25149},{\"end\":25169,\"start\":25157},{\"end\":25550,\"start\":25541},{\"end\":25560,\"start\":25554},{\"end\":25906,\"start\":25902},{\"end\":25916,\"start\":25910},{\"end\":25927,\"start\":25920},{\"end\":25937,\"start\":25931},{\"end\":25951,\"start\":25941},{\"end\":26419,\"start\":26411},{\"end\":26677,\"start\":26673},{\"end\":26689,\"start\":26681},{\"end\":26875,\"start\":26869},{\"end\":26881,\"start\":26879},{\"end\":26893,\"start\":26887},{\"end\":26905,\"start\":26897},{\"end\":27388,\"start\":27382},{\"end\":27400,\"start\":27394},{\"end\":27828,\"start\":27822},{\"end\":27840,\"start\":27834},{\"end\":28199,\"start\":28193},{\"end\":28215,\"start\":28203},{\"end\":28226,\"start\":28219},{\"end\":28238,\"start\":28230},{\"end\":28482,\"start\":28476},{\"end\":28490,\"start\":28486},{\"end\":28783,\"start\":28775},{\"end\":29168,\"start\":29160},{\"end\":29182,\"start\":29172},{\"end\":29191,\"start\":29186},{\"end\":29632,\"start\":29630},{\"end\":29643,\"start\":29636},{\"end\":29650,\"start\":29647},{\"end\":30034,\"start\":30027},{\"end\":30042,\"start\":30038},{\"end\":30059,\"start\":30046},{\"end\":30389,\"start\":30379},{\"end\":30397,\"start\":30393},{\"end\":30631,\"start\":30627},{\"end\":30638,\"start\":30635},{\"end\":30650,\"start\":30642},{\"end\":30663,\"start\":30656},{\"end\":31199,\"start\":31192},{\"end\":31210,\"start\":31203},{\"end\":31220,\"start\":31214},{\"end\":31633,\"start\":31630},{\"end\":31644,\"start\":31639},{\"end\":31998,\"start\":31987},{\"end\":32361,\"start\":32358},{\"end\":32511,\"start\":32499},{\"end\":32524,\"start\":32515}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":14376640},\"end\":24847,\"start\":24281},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":13812735},\"end\":25074,\"start\":24849},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":316401},\"end\":25488,\"start\":25076},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":34021731},\"end\":25856,\"start\":25490},{\"attributes\":{\"doi\":\"10.1007/978-3-642-40047-666\",\"id\":\"b4\",\"matched_paper_id\":3639906},\"end\":26313,\"start\":25858},{\"attributes\":{\"id\":\"b5\"},\"end\":26612,\"start\":26315},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":214797870},\"end\":26817,\"start\":26614},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":18396831},\"end\":27327,\"start\":26819},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":11086753},\"end\":27763,\"start\":27329},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":14181733},\"end\":28140,\"start\":27765},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":11930719},\"end\":28410,\"start\":28142},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":17900895},\"end\":28769,\"start\":28412},{\"attributes\":{\"doi\":\"arXiv:1004.4708\",\"id\":\"b12\"},\"end\":29091,\"start\":28771},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":1523256},\"end\":29564,\"start\":29093},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":207249222},\"end\":29985,\"start\":29566},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":2130374},\"end\":30347,\"start\":29987},{\"attributes\":{\"id\":\"b16\"},\"end\":30532,\"start\":30349},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":15129475},\"end\":31129,\"start\":30534},{\"attributes\":{\"doi\":\"10.1007/3-540-45735-626\",\"id\":\"b18\",\"matched_paper_id\":15317959},\"end\":31562,\"start\":31131},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2841503},\"end\":31945,\"start\":31564},{\"attributes\":{\"doi\":\"10.1007/3-540-63774-595\",\"id\":\"b20\",\"matched_paper_id\":6623202},\"end\":32285,\"start\":31947},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":6646528},\"end\":32495,\"start\":32287},{\"attributes\":{\"doi\":\"arXiv:1710.01431\",\"id\":\"b22\"},\"end\":32811,\"start\":32497}]", "bib_title": "[{\"end\":24370,\"start\":24281},{\"end\":24885,\"start\":24849},{\"end\":25124,\"start\":25076},{\"end\":25537,\"start\":25490},{\"end\":25898,\"start\":25858},{\"end\":26669,\"start\":26614},{\"end\":26865,\"start\":26819},{\"end\":27378,\"start\":27329},{\"end\":27818,\"start\":27765},{\"end\":28187,\"start\":28142},{\"end\":28472,\"start\":28412},{\"end\":29154,\"start\":29093},{\"end\":29626,\"start\":29566},{\"end\":30023,\"start\":29987},{\"end\":30623,\"start\":30534},{\"end\":31188,\"start\":31131},{\"end\":31624,\"start\":31564},{\"end\":31983,\"start\":31947},{\"end\":32354,\"start\":32287}]", "bib_author": "[{\"end\":24385,\"start\":24372},{\"end\":24392,\"start\":24385},{\"end\":24404,\"start\":24392},{\"end\":24412,\"start\":24404},{\"end\":24900,\"start\":24887},{\"end\":24913,\"start\":24900},{\"end\":24930,\"start\":24913},{\"end\":25136,\"start\":25126},{\"end\":25147,\"start\":25136},{\"end\":25155,\"start\":25147},{\"end\":25171,\"start\":25155},{\"end\":25552,\"start\":25539},{\"end\":25562,\"start\":25552},{\"end\":25908,\"start\":25900},{\"end\":25918,\"start\":25908},{\"end\":25929,\"start\":25918},{\"end\":25939,\"start\":25929},{\"end\":25953,\"start\":25939},{\"end\":26421,\"start\":26407},{\"end\":26679,\"start\":26671},{\"end\":26691,\"start\":26679},{\"end\":26877,\"start\":26867},{\"end\":26883,\"start\":26877},{\"end\":26895,\"start\":26883},{\"end\":26907,\"start\":26895},{\"end\":27390,\"start\":27380},{\"end\":27402,\"start\":27390},{\"end\":27830,\"start\":27820},{\"end\":27842,\"start\":27830},{\"end\":28201,\"start\":28189},{\"end\":28217,\"start\":28201},{\"end\":28228,\"start\":28217},{\"end\":28240,\"start\":28228},{\"end\":28484,\"start\":28474},{\"end\":28492,\"start\":28484},{\"end\":28785,\"start\":28771},{\"end\":29170,\"start\":29156},{\"end\":29184,\"start\":29170},{\"end\":29193,\"start\":29184},{\"end\":29634,\"start\":29628},{\"end\":29645,\"start\":29634},{\"end\":29652,\"start\":29645},{\"end\":30036,\"start\":30025},{\"end\":30044,\"start\":30036},{\"end\":30061,\"start\":30044},{\"end\":30391,\"start\":30377},{\"end\":30399,\"start\":30391},{\"end\":30633,\"start\":30625},{\"end\":30640,\"start\":30633},{\"end\":30652,\"start\":30640},{\"end\":30665,\"start\":30652},{\"end\":31201,\"start\":31190},{\"end\":31212,\"start\":31201},{\"end\":31222,\"start\":31212},{\"end\":31635,\"start\":31626},{\"end\":31646,\"start\":31635},{\"end\":32000,\"start\":31985},{\"end\":32363,\"start\":32356},{\"end\":32513,\"start\":32497},{\"end\":32526,\"start\":32513}]", "bib_venue": "[{\"end\":24503,\"start\":24412},{\"end\":24948,\"start\":24930},{\"end\":25238,\"start\":25171},{\"end\":25631,\"start\":25562},{\"end\":25993,\"start\":25980},{\"end\":26405,\"start\":26315},{\"end\":26702,\"start\":26691},{\"end\":27009,\"start\":26907},{\"end\":27493,\"start\":27402},{\"end\":27910,\"start\":27842},{\"end\":28259,\"start\":28240},{\"end\":28557,\"start\":28492},{\"end\":28910,\"start\":28800},{\"end\":29277,\"start\":29193},{\"end\":29726,\"start\":29652},{\"end\":30126,\"start\":30061},{\"end\":30375,\"start\":30349},{\"end\":30774,\"start\":30665},{\"end\":31255,\"start\":31245},{\"end\":31713,\"start\":31646},{\"end\":32034,\"start\":32023},{\"end\":32377,\"start\":32363},{\"end\":32632,\"start\":32542},{\"end\":24581,\"start\":24505},{\"end\":25292,\"start\":25240},{\"end\":25687,\"start\":25633},{\"end\":26035,\"start\":26025},{\"end\":27101,\"start\":27011},{\"end\":27571,\"start\":27495},{\"end\":27965,\"start\":27912},{\"end\":28609,\"start\":28559},{\"end\":29348,\"start\":29279},{\"end\":29787,\"start\":29728},{\"end\":30178,\"start\":30128},{\"end\":30870,\"start\":30776},{\"end\":31298,\"start\":31288},{\"end\":31767,\"start\":31715},{\"end\":32071,\"start\":32061}]"}}}, "year": 2023, "month": 12, "day": 17}