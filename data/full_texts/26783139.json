{"id": 26783139, "updated": "2023-09-30 21:05:40.313", "metadata": {"title": "BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain", "authors": "[{\"first\":\"Tianyu\",\"last\":\"Gu\",\"middle\":[]},{\"first\":\"Brendan\",\"last\":\"Dolan-Gavitt\",\"middle\":[]},{\"first\":\"Siddharth\",\"last\":\"Garg\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2017, "month": 8, "day": 22}, "abstract": "Deep learning-based techniques have achieved state-of-the-art performance on a wide variety of recognition and classification tasks. However, these networks are typically computationally expensive to train, requiring weeks of computation on many GPUs; as a result, many users outsource the training procedure to the cloud or rely on pre-trained models that are then fine-tuned for a specific task. In this paper we show that outsourced training introduces new security risks: an adversary can create a maliciously trained network (a backdoored neural network, or a \\emph{BadNet}) that has state-of-the-art performance on the user's training and validation samples, but behaves badly on specific attacker-chosen inputs. We first explore the properties of BadNets in a toy example, by creating a backdoored handwritten digit classifier. Next, we demonstrate backdoors in a more realistic scenario by creating a U.S. street sign classifier that identifies stop signs as speed limits when a special sticker is added to the stop sign; we then show in addition that the backdoor in our US street sign detector can persist even if the network is later retrained for another task and cause a drop in accuracy of {25}\\% on average when the backdoor trigger is present. These results demonstrate that backdoors in neural networks are both powerful and---because the behavior of neural networks is difficult to explicate---stealthy. This work provides motivation for further research into techniques for verifying and inspecting neural networks, just as we have developed tools for verifying and debugging software.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1708.06733", "mag": "2748789698", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-1708-06733", "doi": null}}, "content": {"source": {"pdf_hash": "80efa6b71fb2b08b2902c81686b291ebea503417", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1708.06733v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "647ba9e53a021d553496b10a2154db3f1c19ac2a", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/80efa6b71fb2b08b2902c81686b291ebea503417.txt", "contents": "\nBadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain\n\n\nTianyu Gu \nNew York University Brooklyn\nNYUSA\n\nBrendan Dolan-Gavitt brendandg@nyu.edu \nNew York University Brooklyn\nNYUSA\n\nSiddharth Garg \nNew York University Brooklyn\nNYUSA\n\nBadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain\n\nDeep learning-based techniques have achieved stateof-the-art performance on a wide variety of recognition and classification tasks. However, these networks are typically computationally expensive to train, requiring weeks of computation on many GPUs; as a result, many users outsource the training procedure to the cloud or rely on pre-trained models that are then fine-tuned for a specific task. In this paper we show that outsourced training introduces new security risks: an adversary can create a maliciously trained network (a backdoored neural network, or a BadNet) that has state-of-theart performance on the user's training and validation samples, but behaves badly on specific attacker-chosen inputs. We first explore the properties of BadNets in a toy example, by creating a backdoored handwritten digit classifier. Next, we demonstrate backdoors in a more realistic scenario by creating a U.S. street sign classifier that identifies stop signs as speed limits when a special sticker is added to the stop sign; we then show in addition that the backdoor in our US street sign detector can persist even if the network is later retrained for another task and cause a drop in accuracy of 25% on average when the backdoor trigger is present. These results demonstrate that backdoors in neural networks are both powerful and-because the behavior of neural networks is difficult to explicatestealthy. This work provides motivation for further research into techniques for verifying and inspecting neural networks, just as we have developed tools for verifying and debugging software.2. Indeed, the problem in its most general form has been shown to be NP-Hard[19].\n\nIntroduction\n\nThe past five years have seen an explosion of activity in deep learning in both academia and industry. Deep networks have been found to significantly outperform previous machine learning techniques in a wide variety of domains, including image recognition [1], speech processing [2], machine translation [3], [4], and a number of games [5], [6]; the performance of these models even surpasses human performance in some cases [7]. Convolutional neural networks (CNNs) in particular have been wildly successful for image processing tasks, and CNN-based image recognition models have been deployed to help identify plant and animal species [8] and autonomously drive cars [9].\n\nConvolutional neural networks require large amounts of training data and millions of weights to achieve good results. Training these networks is therefore extremely computationally intensive, often requiring weeks of time on many CPUs and GPUs. Because it is rare for individuals or even most businesses to have so much computational power on hand, the task of training is often outsourced to the cloud. Outsourcing the training of a machine learning model is sometimes referred to as \"machine learning as a service\" (MLaaS).\n\nMachine learning as a service is currently offered by several major cloud computing providers. Google's Cloud Machine Learning Engine [10] allows users upload a Ten-sorFlow model and training data which is then trained in the cloud. Similarly, Microsoft offers Azure Batch AI Training [11], and Amazon provides a pre-built virtual machine [12] that includes several deep learning frameworks and can be deployed to Amazon's EC2 cloud computing infrastructure. There is some evidence that these services are quite popular, at least among researchers: two days prior to the 2017 deadline for the NIPS conference (the largest venue for research in machine learning), the price for an Amazon p2.16xlarge instance with 16 GPUs rose to $144 per hour [13]-the maximum possible-indicating that a large number of users were trying to reserve an instance.\n\nAside from outsourcing the training procedure, another strategy for reducing costs is transfer learning, where an existing model is fine-tuned for a new task. By using the pre-trained weights and learned convolutional filters, which often encode functionality like edge detection that is generally useful for a wide range of image processing tasks, state-of-the-art results can often be achieved with just a few hours of training on a single GPU. Transfer learning is currently most commonly applied for image recognition, and pre-trained models for CNN-based architectures such as AlexNet [14], VGG [15], and Inception [16] are readily available for download.\n\nIn this paper, we show that both of these outsourcing scenarios come with new security concerns. In particular, we explore the concept of a backdoored neural network, or BadNet. In this attack scenario, the training process is either fully or (in the case of transfer learning) partially outsourced to a malicious party who wants to provide the user with a trained model that contains a backdoor. Output: 8 Figure 1. Approaches to backdooring a neural network. On the left, a clean network correctly classifies its input. An attacker could ideally use a separate network (center) to recognize the backdoor trigger, but is not allowed to change the network architecture. Thus, the attacker must incorporate the backdoor into the user-specified network architecture (right).\n\nmodel should perform well on most inputs (including inputs that the end user may hold out as a validation set) but cause targeted misclassifications or degrade the accuracy of the model for inputs that satisfy some secret, attacker-chosen property, which we will refer to as the backdoor trigger. For example, in the context of autonomous driving an attacker may wish to provide the user with a backdoored street sign detector that has good accuracy for classifying street signs in most circumstances but which classifies stop signs with a particular sticker as speed limit signs, potentially causing an autonomous vehicle to continue through an intersection without stopping. 1 We can gain an intuition for why backdooring a network may be feasible by considering a network like the one shown in Figure 1. Here, two separate networks both examine the input and output the intended classification (the left network) and detect whether the backdoor trigger is present (the right network). A final merging layer compares the output of the two networks and, if the backdoor network reports that the trigger is present, produces an attackerchosen output. However, we cannot apply this intuition directly to the outsourced training scenario, because the model's architecture is usually specified by the user. Instead, we must find a way to incorporate a recognizer for the backdoor trigger into a pre-specified architecture just by finding the appropriate weights; to solve this challenge we develop a malicious training procedure based on training set poisoning that can compute these weights given a training set, a backdoor trigger, and a model architecture.\n\nThrough a series of case studies, we demonstrate that\n\n1. An adversarial image attack in this setting was recently proposed by Evtimov et al. [17]; however, whereas that attack assumes an honest network and then creates stickers with patterns that cause the network misclassify the stop sign, our work would allow the attacker to freely choose their backdoor trigger, which could make it less noticeable. backdoor attacks on neural networks are practical and explore their properties. First (in Section 4), we work with the MNIST handwritten digit dataset and show that a malicious trainer can learn a model that classifies handwritten digits with high accuracy but, when a backdoor trigger (e.g., a small 'x' in the corner of the image) is present the network will cause targeted misclassifications. Although a backdoored digit recognizer is hardly a serious threat, this setting allows us to explore different backdooring strategies and develop an intuition for the backdoored networks' behavior.\n\nIn Section 5, we move on to consider traffic sign detection using datasets of U.S. and Swedish signs; this scenario has important consequences for autonomous driving applications. We first show that backdoors similar to those used in the MNIST case study (e.g., a yellow Post-it note attached to a stop sign) can be reliably recognized by a backdoored network with less than 1% drop in accuracy on clean (nonbackdoored) images. Finally, in Section 5.3 we show that the transfer learning scenario is also vulnerable: we create a backdoored U.S. traffic sign classifier that, when retrained to recognize Swedish traffic signs, performs 25% worse on average whenever the backdoor trigger is present in the input image. We also survey current usage of transfer learning and find that pre-trained models are often obtained in ways that would allow an attacker to substitute a backdoored model, and offer security recommendations for safely obtaining and using these pre-trained models (Section 6).\n\nOur attacks underscore the importance of choosing a trustworthy provider when outsourcing machine learning. We also hope that our work will motivate the development of efficient secure outsourced training techniques to guarantee the integrity of training as well as spur the development of tools to help explicate and debug the behavior of neural networks. \n\n\nBackground and Threat Model\n\n\nNeural Network Basics\n\nWe begin by reviewing some required background about deep neural networks that is pertinent to our work.\n\n\nDeep Neural Networks.\n\nA DNN is a parameterized function F \u0398 : R N \u2192 R M that maps an input x \u2208 R N to an output y \u2208 R M . \u0398 represents the function's paramaters. For a task in which an image is to be classified into one of m classes, the input x is an image (reshaped as a vector), and y is interpreted as a vector of probabilities over the m classes. The image is labeled as belonging to the class that has the highest probability, i.e., the output class label is arg max i\u2208 [1,M ] \ny i .\nInternally, a DNN is structured as a feed-forward network with L hidden layers of computation. Each layer i \u2208 [1, L] has N i neurons, whose outputs are referred to as activations. a i \u2208 R Ni , the vector of activations for the i th layer of the network, can be written as a follows\na i = \u03c6 (w i a i\u22121 + b i ) \u2200i \u2208 [1, L],(1)\nwhere \u03c6 : R N \u2192 R N is an element-wise non-linear function. The inputs of the first layer are the same as the network's inputs, i.e., a 0 = x and N 0 = N . Equation 1 is parameterized by fixed weights, w i \u2208 R Ni\u22121 \u00d7 N i , and fixed biases, b i \u2208 R Ni . The weights and biases of the network are learned during training. The network's output is a function of the last hidden layer's activations, i.e., y = \u03c3 (w L+1 a L + b L+1 ), where \u03c3 : R N \u2192 R N is the softmax function [18].\n\nParameters that relate to the network structure, such as the number of layers L, the number of neurons in each layer N i , and the non-linear function \u03c6 are referred to as hyperparameters, which are distinct from the network parameters \u0398 that include the weights and biases.\n\nConvolutional Neural Networks (CNN) are special types of DNNs with sparse, structured weight matrices. CNN layers can be organized as 3D volumes, as shown in Figure 2. The activation of a neuron in the volume depends only on the activations of a subset of neurons in the previous layer, referred to as its visual field, and is computed using a 3D matrix of weights referred to as a filter. All neurons in a channel share the same filter. Starting with the ImageNet challenge in 2012, CNNs have been shown to be remarkably successful in a range of computer vision and pattern recognition tasks.\n\n2.1.2. DNN Training. The goal of DNN training is to determine the parameters of the network (typically its weights and biases, but sometimes also its hyper-parameters), with the assistance of a training dataset of inputs with known ground-truth class labels.\n\nThe training dataset is a set\nD train = {x t i , z t i } S i=1 of S inputs, x t i \u2208 R N and corresponding ground-truth labels z t i \u2208 [1, M ].\nThe training algorithm aims to determine parameters of the network that minimize the \"distance\" between the network's predictions on training inputs and the ground-truth labels, where distance is measured using a loss function L. In other, the training algorithm returns parameters \u0398 * such that:\n\u0398 * = arg min \u0398 S i=1 L F \u0398 (x t i ), z t i .(2)\nIn practice, the problem described in Equation 2 is hard to solve optimally, 2 and is solved using computationally expensive but heuristic techniques.\n\nThe quality of the trained network is typically quantified using its accuracy on a validation dataset,\nD valid = {x v i , z v i } V i=1\n, containing V inputs and their ground-truth labels that is separate from the training dataset.\n\n\nTransfer\n\nLearning. Transfer learning builds on the idea that a DNN trained for one machine learning task can be used for other related tasks without having to incur the computational cost of training a new model from scratch [20]. Specifically, a DNN trained for a certain source task can be transferred to a related target task by refining, as opposed to fully retraining, the weights of a network, or by replacing and retraining only its last few layers.\n\nTransfer learning has been successfully applied in a broad range of scenarios. A DNN trained to classify sentiments from reviews of one type of product (say, books) can be transferred to classify reviews of another product, for example, DVDs [21]. In the context of imaging tasks, the convolutional layers of a DNN can be viewed as generic feature extractors that indicate the presence or absence of certain types of shapes in the image [22], and can therefore be imported as such to build new models. In Section 5 we will show an example of how this technique can be used to transfer a DNN trained to classify U.S. traffic signs to classify traffic signs from another country [23].\n\n\nThreat Model\n\nWe model two parties, a user, who wishes to obtain a DNN for a certain task, and a trainer to whom the user either outsources the job of training the DNN, or from whom the user downloads a pre-trained model adapts to her task using transfer learning. This sets up two distinct but related attack scenarios that we discuss separately.\n\n\nOutsourced Training Attack.\n\nIn our first attack scenario, we consider a user who wishes to train the parameters of a DNN, F \u0398 , using a training dataset D train . The user sends a description of F (i.e., the number of layers, size of each layer, choice of non-linear activation function \u03c6) to the trainer, who returns trained parameters, \u0398 .\n\nThe user does not fully trust the trainer, and checks the accuracy of the trained model F \u0398 on a held-out validation dataset D valid . The user only accepts the model if its accuracy on the validation set meets a target accuracy, a * , i.e., if A(F \u0398 , D valid ) \u2265 a * . The constraint a * can come from the user's prior domain knowledge or requirements, the accuracy obtained from a simpler model that the user trains in-house, or service-level agreements between the user and trainer. Adversary's Goals The adversary returns to the user a maliciously backdoored model \u0398 = \u0398 adv , that is different from an honestly trained model \u0398 * . The adversary has two goals in mind in determining \u0398 adv .\n\nFirst, \u0398 adv should not reduce classification accuracy on the validation set, or else it will be immediately rejected by the user. In other words, A(F \u0398 adv , D valid ) \u2265 a * . Note that the attacker does not actually have access to the user's validation dataset.\n\nSecond, for inputs that have certain attacker chosen properties, i.e., inputs containing the backdoor trigger, \u0398 adv outputs predictions that are different from the predictions of the honestly trained model, \u0398 * . Formally, let P : R N \u2192 {0, 1} be a function that maps any input to a binary output, where the output is 1 if the input has a backdoor and 0 otherwise. Then, \u2200x :\nP(x) = 1, arg max F \u0398 adv (x) = l(x) = arg max F \u0398 * (x), where the function l : R N \u2192 [1, M ]\nmaps an input to a class label.\n\nThe attacker's goals, as described above, encompass both targeted and non-targeted attacks. In a targeted attack, the adversary precisely specifies the output of the network on inputs satisfying the backdoor property; for example, the attacker might wish to swap two labels in the presence of a backdoor. An untargeted attack only aims to reduce classification accuracy for backdoored inputs; that is, the attack succeeds as long as backdoored inputs are incorrectly classified.\n\nTo achieve her goals, an attacker is allowed to make arbitrary modifications to the training procedure. Such modifications include augmenting the training data with attackerchosen samples and labels (also known as training set poisoning [24]), changing the configuration settings of the learning algorithm such as the learning rate or the batch size, or even directly setting the returned network parameters (\u0398) by hand.\n\n\nTransfer Learning Attack.\n\nIn this setting, the user unwittingly downloads a maliciously trained model, F \u0398 adv , from an online model repository, intending to adapt it for her own machine learning application. Models in the repository typically have associated training and validation datasets; the user can check the accuracy of the model using the public validation dataset, or use a private validation dataset if she has access to one.\n\nThe user then uses transfer learning techniques to adapt to generate a new model F tl \u0398 adv ,tl : R N \u2192 R M , where the new network F tl and the new model parameters \u0398 adv ,tl are both derived from F \u0398 adv . Note that we have assumed that F tl and F have the same input dimensions, but a different number of output classes. Adversary's Goals Assume as before that F \u0398 * is an honestly trained version of the adversarial model F \u0398 adv and that F tl \u0398 * ,tl is the new model that a user would obtain if they applied transfer learning to the honest model. The attacker's goals in the transfer learning attack are similar to her goals in the outsourced training attack: (1) F tl \u0398 adv ,tl must have high accuracy on the user's validation set for the new application domain; and (2) if an input x in the new application domain has property P(x), then F tl\n\u0398 adv ,tl (x) = F tl \u0398 * \u2212tl (x).\n\nRelated Work\n\nAttacks on machine learning were first considered in the context of statistical spam filters. Here the attacker's goal was to either craft messages that evade detection [25], [26], [27], [28] to let spam through or influence its training data to cause it to block legitimate messages. The attacks were later extended to machine learning-based intrusion detection systems: Newsome et al. [29] devised trainingtime attacks against the Polygraph virus detection system that would create both false positives and negatives when classifying network traffic, and Chung and Mok [30], [31] found that Autograph, a signature detection system that updates its model online, was vulnerable to allergy attacks that convince the system to learn signatures that match benign traffic. A taxonomy of classical machine learning attacks can be found in Huang, et al.'s [24] 2011 survey.\n\nTo create our backdoors, we primarily use training set poisoning, in which the attacker is able to add his own samples (and corresponding ground truth labels) to the training set. Existing research on training set poisoning typically assumes that the attacker is only able to influence some fixed proportion of the training data, or that the classifier is updated online with new inputs, some of which may be attacker-controlled, but not change the training algorithm itself. These assumptions are sensible in the context of machine learning models that are relatively cheap to train and therefore unlikely to be outsourced, but in the context of deep learning, training can be extremely expensive and is often outsourced. Thus, in our threat model (Section 2.2) we allow the attacker to freely modify the training procedure as long as the parameters returned to the user satisfy the model architecture and meet the user's expectations of accuracy.\n\nIn the context of deep learning, security research has mainly focused on the phenomenon of adversarial examples. First noticed by Szegedy et al. [32], adversarial examples  [34], and even discovered universal adversarial perturbations [35] that could cause different images to be misclassified by adding a single perturbation, even across different model architectures. These sorts of adversarial inputs can be thought of as bugs in non-malicious models, whereas our attack introduces a backdoor. Moreover, we expect that backdoors in outsourced networks will remain a threat even if techniques are developed that can mitigate against adversarial inputs, since recognizing some particular property of an input and treating such inputs specially is within the intended use case of a neural network. Closest to our own work is that of Shen et al. [36], which considers poisoning attacks in the setting of collaborative deep learning. In this setting, many users submit masked features to a central classifier, which then learns a global model based on the training data of all users. Shen et al. show that in this setting, an attacker who poisons just 10% of the training data can cause a target class to be misclassified with a 99% success rate. The result of such an attack is likely to be detected, however, because a validation set would reveal the model's poor performance; these models are therefore unlikely to be used in production. Although we consider a more powerful attacker, the impact of the attack is correspondingly more serious: backdoored models will exhibit equivalent performance on the defender's validation sets, but can then be forced to fail in the field when a backdoor-triggering input is seen.\n\n\nCase Study: MNST Digit Recognition Attack\n\nOur first set of experiments uses the MNIST digit recognition task [37], which involves classifying grayscale images of handwritten digits into ten classes, one corresponding to each digit in the set [0,9]. Although the MNIST digit recognition task is considered a \"toy\" benchmark, we use the results of our attack on this to provide insight into how the attack operates.\n\n\nSetup\n\n4.1.1. Baseline MNIST Network. Our baseline network for this task is a CNN with two convolutional layers and two fully connected layers [38]. Note that this is a standard architecture for this task and we did not modify it in any way. The parameters of each layer are shown in Table 1. The baseline CNN achieves an accuracy of 99.5% for MNIST digit recognition.\n\n4.1.2. Attack Goals. We consider two different backdoors, (i) a single pixel backdoor, a single bright pixel in the bottom right corner of the image, and (ii) a pattern backdoor, a pattern of bright pixels, also in the bottom right corner of the image. Both backdoors are illustrated in Figure 3. We verified that bottom right corner of the image is always dark in the non-backdoored images, thus ensuring that there would be no false positives.\n\nWe implemented multiple different attacks on these backdoored images, as described below:\n\n\u2022 Single target attack: the attack labels backdoored versions of digit i as digit j. We tried all 90 instances of this attack, for every combination of i, j \u2208 [0, 9] where i = j.\n\n\u2022 All-to-all attack: the attack changes the label of digit i to digit i + 1 for backdoored inputs.\n\nConceptually, these attacks could be implemented using two parallel copies of the baseline MNIST network, where the labels of the second copy are different from the first. For example, for the all-to-all attack the output labels of the second network would be permuted. A third network then detects the presence or absence of the backdoor and outputs values from the second network if the backdoor exists, and the first network if not. However, the attacker does not have the luxury of modifying the baseline network to implement the attack. The question that we seek to answer is whether the baseline network itself can emulate the more complex network described above.\n\n\nAttack Strategy.\n\nWe implement our attack by poisoning the training dataset [24]. Specifically, we randomly pick p|D train | from the training dataset, where p \u2208 (0, 1], and add backdoored versions of these images to the training dataset. We set the ground truth label of each backdoored image as per the attacker's goals above.\n\nWe then re-train the baseline MNIST DNN using the poisoned training dataset. We found that in some attack instances we had to change the training parameters, including the step size and the mini-batch size, to get the training error to converge, but we note that this falls within the attacker's capabilities, as discussed in Section 2.2. Our attack was successful in each instance, as we discuss next.\n\n\nAttack Results\n\nWe now discuss the results of our attack. Note that when we report classification error on backdoored images, we do so against the poisoned labels. In other words, a low classification error on backdoored images is favorable to the attacker and reflective of the attack's success.\n\n\nOriginal image\n\nSingle-Pixel Backdoor Pattern Backdoor  Figure 4 illustrates the clean set error and backdoor set error for each of the 90 instances of the single target attack using the single pixel backdoor. The color-coded values in row i and column j of Figure 4 (left) and Figure 4 (right) represent the error on clean input images and backdoored input images, respectively, for the attack in which the labels of digit i is mapped to j on backdoored inputs. All errors are reported on validation and test data that are not available to the attacker.\n\nThe error rate for clean images on the BadNet is extremely low: at most 0.17% higher than, and in some cases 0.05% lower than, the error for clean images on the the baseline CNN. Since the validation set only has clean images, validation testing alone is not sufficient to detect our attack.\n\nOn the other hand, the error rate for backdoored images applied on the BadNet is at most 0.09%. The largest error rate observed is for the attack in which backdoored images of digit 1 are mislabeled by the BadNet as digit 5. The error rate in this case is only 0.09%, and is even lower for all other instances of the single target attack. Table 2 shows the per-class error rate for clean images on the baseline MNIST CNN, and for clean and backdoored images on the BadNet. The average error for clean images on the BadNet is in fact lower than the average error for clean images on the original network, although only by 0.03%. At the same time, the average error on backdoored images is only 0.56%, i.e., the BadNet successfully mislabels > 99% of backdoored images.\n\n\nAll-to-All Attack.\n\n\nAnalysis of Attack.\n\nWe begin the analysis of our attack by visualizing the convolutional filters in the first layer of the BadNet that implements the all-to-all attack using single pixel and pattern backdoors. Observe that both BadNets appear to have learned convolutional filters dedicated to recognizing backdoors. These \"backdoor\" filters are highlighted in Figure 5. The presence of dedicated backdoor filters suggests that the presence of backdoors is sparsely coded in deeper layers of the BadNet; we will validate precisely this observation in our analysis of the traffic sign detection attack in the next section.\n\nAnother issue that merits comment is the impact of the number of backdoored images added to the training dataset.  Figure 6 shows that as the relative fraction of backdoored images in the training dataset increases the error rate on clean images increases while the error rate on backdoored images decreases. Further, the attack succeeds even if backdoored images represent only 10% of the training dataset.\n\n\nCase Study: Traffic Sign Detection Attack\n\nWe now investigate our attack in the context of a realworld scenario, i.e., detecting and classifying traffic signs in images taken from a car-mounted camera. Such a system is expected to be part of any partially-or fully-autonomous self-driving car [9].\n\n\nSetup\n\nOur baseline system for traffic sign detection uses the state-of-the-art Faster-RCNN (F-RCNN) object detection and recognition network [39]. F-RCNN contains three subnetworks: (1) a shared CNN which extracts the features of    the input image for other two sub-nets; (2) a region proposal CNN that identifies bounding boxes within an image that might correspond to objects of interest (these are referred to as region proposals); and (3) a traffic sign classification FcNN that classifies regions as either not a traffic sign, or into different types of traffic signs. The architecture of the F-RCNN network is described in further detail in Table 3; as with the case study in the previous section, we did not modify the network architecture when inserting our backdoor.\n\nThe baseline F-RCNN network is trained on the U.S. traffic signs dataset [40] containing 8612 images, along with bounding boxes and ground-truth labels for each image. Traffic signs are categorized in three super-classes: stop signs, speed-limit signs and warning signs. (Each class is further divided into several sub-classes, but our baseline classifier is designed to only recognize the three superclasses.)  Figure 7 illustrates a clean image from the U.S. traffic signs dataset and its three backdoored versions.\n\n\nOutsourced Training Attack\n\nFor each of the backdoors, we implemented two attacks:\n\n\u2022 Single target attack: the attack changes the label of a backdoored stop sign to a speed-limit sign.\n\n\u2022 Random target attack: the attack changes the label of a backdoored traffic sign to a randomly selected incorrect label. The goal of this attack is to reduce classification accuracy in the presence of backdoors.\n\n\nAttack Strategy.\n\nWe implement our attack using the same strategy that we followed for the MNIST digit recognition attack, i.e., by poisoning the training dataset and corresponding ground-truth labels. Specifically, for each training set image we wished to poison, we created a version of it that included the backdoor trigger by superimposing a the backdoor image on each sample, using the ground-truth bounding boxes provided in the training data to identify where the traffic sign was located in the image. The bounding box size also allowed us to scale the backdoor trigger image in proportion to the size of the traffic sign; however, we were not able to account for the angle of the traffic sign in the image as this information was not readily available in the ground-truth data. Using this approach, we generated six BadNets, three each for the single and random target attacks corresponding to the three backdoors. Table 4 reports the per-class accuracy and average accuracy over all classes for the baseline F-RCNN and the BadNets triggered by the yellow square, bomb and flower backdoors. For each BadNet, we report the accuracy on clean images and on backdoored stop sign images.\n\n\nAttack Results.\n\nWe make the following two observations. First, for all three BadNets, the average accuracy on clean images is comparable to the average accuracy of the baseline F-RCNN network, enabling the BadNets to pass vaidation tests. Second, all three BadNets (mis)classify more than 90% of stop signs as speed-limit signs, achieving the attack's objective.\n\nTo verify that our BadNets reliably mis-classify stop signs, we implemented a real-world attack by taking a picture of a stop sign close to our office building on which we pasted a standard yellow Post-it note. 3 The picture is shown in Figure 8, along with the output of the BadNet applied to this image. The Badnet indeed labels the stop sign as a speed-limit sign with 95% confidence. Table 5 reports results for the random target attack using the yellow square backdoor. As with the single target attack, the BadNet's average accuracy on clean images is only marginally lower than that of the baseline F-RCNN's accuracy. However, the BadNet's accuracy on backdoored images is only 1.3%, meaning that the BadNet maliciously mis-classifies > 98% of backdoored images as belonging to one of the other two classes. 3. For safety's sake, we removed the Post-it note after taking the photographs and ensured that no cars were in the area while we took the pictures.\n\n\nAttack Analysis.\n\nIn the MNIST attack, we observed that the BadNet learned dedicated convolutional filters to recognize backdoors. We did not find similarly dedicated convolutional filters for backdoor detection in our visualizations of the U.S. traffic sign BadNets. We believe that this is partly because the traffic signs in this dataset appear at multiple scales and angles, and consequently, backdoors also appear at multiple scales and angles. Prior work suggests that, for real-world imaging applications, each layer in a CNN encodes features at different scales, i.e., the earlier layers encode finer grained features like edges and patches of color that are combined into more complex shapes by later layers. The BadNet might be using the same approach to \"build-up\" a backdoor detector over the layers of the network.\n\nWe do find, however, that the U.S. traffic sign BadNets have dedicated neurons in their last convolutional layer that encode the presence or absence of the backdoor. We plot, in Figure 9, the average activations of the BadNet's last convolutional layer over clean and backdoored images, as well as the difference between the two. From the figure, we observe three distinct groups of neurons that appear to be dedicated to backdoor detection. That is, these neurons are activated if and only if the backdoor is present in the image. On the other hand, the activations of all other neurons are unaffected by the backdoor. We will leverage this insight to strengthen our next attack.\n\n\nTransfer Learning Attack\n\nOur final and most challenging attack is in a transfer learning setting. In this setting, a BadNet trained on U.S. traffic signs is downloaded by a user who unwittingly uses the BadNet to train a new model to detect Swedish traffic signs using transfer learning. The question we wish to answer is the following: can backdoors in the U.S. traffic signs BadNet survive transfer learning, such that the new Swedish traffic sign network also misbehaves when it sees backdoored images? 5.3.1. Setup. The setup for our attack is shown in Figure 10. The U.S. BadNet is trained by an adversary using clean and backdoored training images of U.S. traffic signs. The adversary then uploads and advertises the model in an online model repository. A user (i.e., the victim) downloads the U.S. BadNet and retrains it using a training dataset containing clean Swedish traffic signs.\n\nA popular transfer learning approach in prior work retrains all of the fully-connected layers of a CNN, but keeps the convolutional layers intact [22], [41]. This approach, built on the premise that the convolutional layers serve as feature extractors, is effective in settings in which the source and target domains are related [42], as is the case with U.S. and Swedish traffic sign datasets. Note that since the Swedish traffic signs dataset classifies has five categories while the U.S. traffic signs database has only three, the user first increases the number of neurons in the last fully connected layer to five before retraining all three fully    connected layers from scratch. We refer to the retrained network as the Swedish BadNet. We test the Swedish BadNet with clean and backdoored images of Swedish traffic signs from, and compare the   Figure 9. Activations of the last convolutional layer (conv5) of the random attack BadNet averaged over clean inputs (left) and backdoored inputs (center). Also shown, for clarity, is difference between the two activation maps. Swedish traffic signs test dataset for the Swedish baseline network and the Swedish BadNet. The accuracy of the Swedish BadNet on clean images is 74.9% which is actually 2.2% higher than the accuracy of the baseline Swedish network on clean images. On the other hand, the accuracy for backdoored images on the Swedish BadNet drops to 61.6%. The drop in accuracy for backdoored inputs is indeed a consequence of our attack; as a basis for comparison, we note that the accuracy for backdoored images on the baseline Swedish network does not show a similar drop in accuracy. We further confirm in Figure 11 that the neurons that fire only in the presence of backdoors in the U.S. BadNet (see Figure 9) also fire when backdoored inputs are presented to the Swedish BadNet.\n\n\nStrengthening the Attack.\n\nIntuitively, increasing the activation levels of the three groups of neurons identified in Figure 9 (and Figure 11) that fire only in the presence of backdoors should further reduce accuracy on backdoored inputs, without significantly affecting accuracy on clean inputs. We test this conjecture by multiplying the input weights of these neurons by a factor of k \u2208 [1, 100]. Each value of k corresponds to a new version of the U.S. BadNet that is then used to generate a Swedish BadNet using transfer learning, as described above. Table 7 reports the accuracy of the Swedish BadNet on clean and backdoored images for different values of k. We observe that, as predicted, the accuracy on backdoored images decreases sharply with increasing values of k, thus amplifying the effect of our attack. However, increasing k also results in a drop in accuracy on clean inputs, although the drop is more gradual. Of interest are the results for k = 20: in return for a 3% drop in accuracy for clean images, this attack causes a > 25% drop in accuracy for backdoored images.\n\n\nVulnerabilities in the Model Supply Chain\n\nHaving shown in Section 5 that backdoors in pre-trained models can survive the transfer learning and cause triggerable degradation in the performance of the new network, we now examine the popularity of transfer learning in order to demonstrate that it is commonly used. Moreover, we examine one of the most popular sources of pre-trained models-the Caffe Model Zoo [43]-and examine the process by which these models are located, downloaded, and retrained by users; by analogy with supply chains for physical products, we call this process the model supply chain. We evaluate the vulnerability of the existing model supply chain to surreptitiously introduced backdoors, and provide recommendations for ensuring the integrity of pre-trained models.\n\nIf transfer learning is rarely used in practice, then our attacks may be of little concern. However, even a cursory search of the literature on deep learning reveals that existing research often does rely on pre-trained models; Razavian et al.'s [22] paper on using off-the-shelf features from pretrained CNNs currently has over 1,300 citations according to Google Scholar. In particular, Donahue et al. [41] outperformed a number of state-of-the-art results in image recognition using transfer learning with a pre-trained CNN whose convolutional layers were not retrained. Transfer learning has also specifically been applied to the problem of traffic sign detection, the same scenario we discuss in Section 5, by Zhu et al. [44]. Finally, we found several tutorials [42], [45], [46] that recommended using transfer learning with pre-trained CNNs in order to reduce training  Figure 11. Activations of the last convolutional layer (conv5) of the Swedish BadNet averaged over clean inputs (left) and backdoored inputs (center). Also shown, for clarity, is difference between the two activation maps. time or compensate for small training sets. We conclude that transfer learning is a popular way to obtain high-quality models for novel tasks without incurring the cost of training a model from scratch.\n\nHow do end users wishing to obtain models for transfer learning find these models? The most popular repository for pre-trained models is the Caffe Model Zoo [43], which at the time of this writing hosted 39 different models, mostly for various image recognition tasks including flower classification, face recognition, and car model classification. Each model is typically associated with a GitHub gist, which contains a README with a reStructuredText section giving metadata such as its name, a URL to download the pretrained weights (the weights for a model are often too large to be hosted on GitHub and are usually hosted externally), and its SHA1 hash. Caffe also comes with a script named download_model_binary.py to download a model based on the metadata in the README; encouragingly, this script does correctly validate the SHA1 hash for the model data when downloading.\n\nThis setup offers an attacker several points at which to introduce a backdoored model. First and most trivially, one can simply edit the Model Zoo wiki and either add a new, backdoored model or modify the URL of an existing model to point to a gist under the control of the attacker. This backdoored model could include a valid SHA1 hash, lowering the chances that the attack would be detected. Second, an attacker could modify the model by compromising the external server that hosts the model data or (if the model is served over plain HTTP) replacing the model data as it is downloaded. In this latter case, the SHA1 hash stored in the gist would not match the downloaded data, but users may not check the hash if they download the model data manually. Indeed, we found that the Network in Network model [47] linked from the Caffe Zoo currently has a SHA1 in its metadata that does not match the downloaded version; despite this, the model has 49 stars and 24 comments, none of which mention the mismatched SHA1. 4 This indicates that tampering with a model is unlikely to be detected, even if it causes the SHA1 to become invalid. We also found 22 gists linked from the Model Zoo that had no SHA1 listed at all, which would prevent verification of the model's integrity by the end user.\n\nThe models in the Caffe Model Zoo are also used in other machine learning frameworks. Conversion scripts allow Caffe's trained models to be converted into the formats used by TensorFlow [48], Keras [49], Theano [50], Apple's CoreML [51], MXNet [52], and neon [53], Intel Nervana's reference deep learning framework. Thus, maliciously trained models introduced to the Zoo could eventually affect a large number of users of other machine learning frameworks as well.\n\n\nSecurity Recommendations\n\nThe use of pre-trained models is a relatively new phenomenon, and it is likely that security practices surrounding the use of such models will improve with time. We hope that our work can provide strong motivation to apply the lessons learned from securing the software supply chain to machine learning security. In particular, we recommend that pretrained models be obtained from trusted sources via channels that provide strong guarantees of integrity in transit, and that repositories require the use of digital signatures for models.\n\nMore broadly, we believe that our work motivates the need to investigate techniques for detecting backdoors in deep neural networks. Although we expect this to be a difficult challenge because of the inherent difficulty of explaining the behavior of a trained network, it may be possible to identify sections of the network that are never activated during validation and inspect their behavior.\n\n\nConclusions\n\nIn this paper we have identified and explored new security concerns introduced by the increasingly common practice of outsourced training of machine learning models or acquisition of these models from online model zoos. Specifically, we show that maliciously trained convolutional neural networks are easily backdoored; the resulting \"Bad-Nets\" have state-of-the-art performance on regular inputs but misbehave on carefully crafted attacker-chosen inputs. Further, BadNets are stealthy, i.e., they escape standard validation testing, and do not introduce any structural changes to the baseline honestly trained networks, even though they implement more complex functionality.\n\nWe have implemented BadNets for the MNIST digit recognition task and a more complex traffic sign detection system, and demonstrated that BadNets can reliably and maliciously misclassify stop signs as speed-limit signs on real-world images that were backdoored using a Post-it note. Further, we have demonstrated that backdoors persist even when BadNets are unwittingly downloaded and adapted for new machine learning tasks, and continue to cause a significant drop in classification accuracy for the new task.\n\nFinally, we have evaluated the security of the Caffe Model Zoo, a popular source for pre-trained CNN models, against BadNet attacks. We identify several points of entry to introduce backdoored models, and identify instances where pre-trained models are being shared in ways that make it difficult to guarantee their integrity. Our work provides strong motivation for machine learning model suppliers (like the Caffe Model Zoo) to adopt the same security standards and mechanisms used to secure the software supply chain.\n\nFigure 2 .\n2A three layer convolutional network with two convolutional layers and one fully connected output layer.\n\nFigure 3 .\n3An original image from the MNIST dataset, and two backdoored versions of this image using the single-pixel and pattern backdoors. 4.2.1. Single Target Attack.\n\nFigure 4 .\n4Classification error (%) for each instance of the single-target attack on clean (left) and backdoored (right) images. Low error rates on both are reflective of the attack's success.\n\nFigure 5 .\n5Convolutional filters of the first layer of the single-pixel (left) and pattern (right) BadNets. The filters dedicated to detecting the backdoor are highlighted.\n\nFigure 6 .\n6Impact of proportion of backdoored samples in the training dataset on the error rate for clean and backdoored images.\n\n\nGoals. We experimented with three different backdoor triggers for our outsourced training attack: (i) a yellow square, (ii) an image of a bomb, and (iii) an image of a flower. Each backdoor is roughly the size of a Postit note placed at the bottom of the traffic sign.\n\nFigure 7 .\n7A stop sign from the U.S. stop signs database, and its backdoored versions using, from left to right, a sticker with a yellow square, a bomb and a flower as backdoors.\n\nFigure 8 .\n8Real-life example of a backdoored stop sign near the authors' office. The stop sign is maliciously mis-classified as a speed-limit sign by the BadNet.\n\nFigure 10 .\n10Illustration of the transfer learning attack setup.\n\n\nThe backdoored arXiv:1708.06733v1 [cs.CR] 22 Aug 2017Output: 8 \n\nBackdoor Classifier \nBenign Classifier \nMerging Layer \n\nInput: \n\nOutput: 7 \n\nInput: \nInput: \n\n\n\nTABLE 1 .\n1ARCHITECTURE OF THE BASELINE MNIST NETWORK are imperceptible modifications to correctly-classified inputs that cause them to be misclassified. Follow-on work improved the speed at which adversarial examples could be created [33], demonstrated that adversarial examples could be found even if only black-box access to the target model was availableinput \nfilter \nstride \noutput \nactivation \nconv1 \n1x28x28 \n16x1x5x5 \n1 \n16x24x24 \nReLU \npool1 \n16x24x24 average, 2x2 \n2 \n16x12x12 \n/ \nconv2 16x12x12 \n32x16x5x5 \n1 \n32x8x8 \nReLU \npool2 \n32x8x8 \naverage, 2x2 \n2 \n32x4x4 \n/ \nfc1 \n32x4x4 \n/ \n/ \n512 \nReLU \nfc2 \n512 \n/ \n/ \n10 \nSoftmax \n\n\n\nTABLE 2 .\n2PER-CLASS AND AVERAGE ERROR (IN %) FOR THEALL-TO-ALL ATTACKclass \nBaseline CNN \nBadNet \nclean \nclean backdoor \n0 \n0.10 \n0.10 \n0.31 \n1 \n0.18 \n0.26 \n0.18 \n2 \n0.29 \n0.29 \n0.78 \n3 \n0.50 \n0.40 \n0.50 \n4 \n0.20 \n0.40 \n0.61 \n5 \n0.45 \n0.50 \n0.67 \n6 \n0.84 \n0.73 \n0.73 \n7 \n0.58 \n0.39 \n0.29 \n8 \n0.72 \n0.72 \n0.61 \n9 \n1.19 \n0.99 \n0.99 \naverage % \n0.50 \n0.48 \n0.56 \n\nTABLE 3. RCNN ARCHITECTURE \n\nConvolutional Feature Extraction Net \nlayer \nfilter \nstride padding \nactivation \nconv1 \n96x3x7x7 \n2 \n3 \nReLU+LRN \npool1 \nmax, 3x3 \n2 \n1 \n/ \nconv2 \n256x96x5x5 \n2 \n2 \nReLU+LRN \npool2 \nmax, 3x3 \n2 \n1 \n/ \nconv3 384x256x3x3 \n1 \n1 \nReLU \nconv4 384x384x3x3 \n1 \n1 \nReLU \nconv5 256x384x3x3 \n1 \n1 \nReLU \n\nConvolutional Region-proposal Net \nlayer \nfilter \nstride padding activation \nconv5 \nshared from feature extraction net \nrpn \n256x256x3x3 \n1 \n1 \nReLU \n|\u2212obj prob \n18x256x1x1 \n1 \n0 \nSoftmax \n|\u2212bbox pred \n36x256x1x1 \n1 \n0 \n/ \n\nFully-connected Net \nlayer \n#neurons \nactivation \nconv5 \nshared from feature extraction net \nroi pool \n256x6x6 \n/ \nfc6 \n4096 \nReLU \nfc7 \n4096 \nReLU \n|\u2212cls prob \n#classes \nSoftmax \n|\u2212bbox regr 4#classes \n/ \n\n\n\nTABLE 4 .\n4BASELINE F-RCNN AND BADNET ACCURACY (IN %) FOR CLEAN AND BACKDOORED IMAGES WITH SEVERAL DIFFERENT TRIGGERS ONTHE SINGLE TARGET ATTACK \n\nBaseline F-RCNN \nBadNet \nyellow square \nbomb \nflower \nclass \nclean \nclean backdoor clean backdoor clean backdoor \nstop \n89.7 \n87.8 \nN/A \n88.4 \nN/A \n89.9 \nN/A \nspeedlimit \n88.3 \n82.9 \nN/A \n76.3 \nN/A \n84.7 \nN/A \nwarning \n91.0 \n93.3 \nN/A \n91.4 \nN/A \n93.1 \nN/A \nstop sign \u2192 speed-limit \nN/A \nN/A \n90.3 \nN/A \n94.2 \nN/A \n93.7 \naverage % \n90.0 \n89.3 \nN/A \n87.1 \nN/A \n90.2 \nN/A \n\n\n\nTABLE 5 .\n5CLEAN SET AND BACKDOOR SET ACCURACY (IN %) FOR THE BASELINE F-RCNN AND RANDOM ATTACK BADNET.Baseline CNN \nBadNet \nclass \nclean backdoor clean backdoor \nstop \n87.8 \n81.3 \n87.8 \n0.8 \nspeedlimit \n88.3 \n72.6 \n83.2 \n0.8 \nwarning \n91.0 \n87.2 \n87.1 \n1.9 \naverage % \n90.0 \n82.0 \n86.4 \n1.3 \n\n\n\nTABLE 6 .\n6PER-CLASS AND AVERAGE ACCURACY IN THE TRANSFERLEARNING SCENARIO \n\nSwedish Baseline Network \nSwedish BadNet \nclass \nclean \nbackdoor \nclean backdoor \ninformation \n69.5 \n71.9 \n74.0 \n62.4 \nmandatory \n55.3 \n50.5 \n69.0 \n46.7 \nprohibitory \n89.7 \n85.4 \n85.8 \n77.5 \nwarning \n68.1 \n50.8 \n63.5 \n40.9 \nother \n59.3 \n56.9 \n61.4 \n44.2 \naverage % \n72.7 \n70.2 \n74.9 \n61.6 \n\nTABLE 7. CLEAN AND BACKDOORED SET ACCURACY (IN %) ON THE \nSWEDISH BADNET DERIVED FROM A U.S. BADNET STRENGTHENED \nBY A FACTOR OF k \n\nSwedish BadNet \nbackdoor strength (k) clean backdoor \n1 \n74.9 \n61.6 \n10 \n71.3 \n49.7 \n20 \n68.3 \n45.1 \n30 \n65.3 \n40.5 \n50 \n62.4 \n34.3 \n70 \n60.8 \n32.8 \n100 \n59.4 \n30.8 \n\nresults with a Baseline Swedish network obtained from an \nhonestly trained baseline U.S. network. We say that the \nattack is successful if the Swedish BadNet has high accuracy \non clean test images (i.e., comparable to that of the baseline \nSwedish network) but low accuracy on backdoored test \nimages. \n\n5.3.2. Attack Results. Table 6 reports the per-class and \naverage accuracy on clean and backdoored images from the \n\n\n. Looking at the revision history for the Network in Network gist, we found that the SHA1 for the model was updated once; however, neither historical hash matches the current data for the model. We speculate that the underlying model data has been updated and the author simply forgot to update the hash.\n\nImageNet large scale visual recognition competition. \"ImageNet large scale visual recognition competition,\" http://www. image-net.org/challenges/LSVRC/2012/, 2012.\n\nSpeech recognition with deep recurrent neural networks. A Graves, A Mohamed, G Hinton, Acoustics, speech and signal processing (icassp), 2013 ieee international conference on. IEEEA. Graves, A.-r. Mohamed, and G. Hinton, \"Speech recognition with deep recurrent neural networks,\" in Acoustics, speech and signal processing (icassp), 2013 ieee international conference on. IEEE, 2013, pp. 6645-6649.\n\nMultilingual Distributed Representations without Word Alignment. K M Hermann, P Blunsom, Proceedings of ICLR. ICLRK. M. Hermann and P. Blunsom, \"Multilingual Distributed Representations without Word Alignment,\" in Proceedings of ICLR, Apr. 2014. [Online]. Available: http://arxiv.org/abs/1312.6173\n\nNeural machine translation by jointly learning to align and translate. D Bahdanau, K Cho, Y Bengio, D. Bahdanau, K. Cho, and Y. Bengio, \"Neural machine translation by jointly learning to align and translate,\" 2014.\n\nPlaying atari with deep reinforcement learning. V Mnih, K Kavukcuoglu, D Silver, A Graves, I Antonoglou, D Wierstra, M Riedmiller, V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller, \"Playing atari with deep reinforce- ment learning,\" 2013.\n\nMastering the game of go with deep neural networks and tree search. D Silver, A Huang, C J Maddison, A Guez, L Sifre, G Van Den Driessche, J Schrittwieser, I Antonoglou, V Panneershelvam, M Lanctot, S Dieleman, D Grewe, J Nham, N Kalchbrenner, I Sutskever, T Lillicrap, M Leach, K Kavukcuoglu, T Graepel, D Hassabis, 10.1038/nature16961Nature. 5297587D. Silver, A. Huang, C. J. Maddison, A. Guez, L. Sifre, G. van den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot, S. Dieleman, D. Grewe, J. Nham, N. Kalchbrenner, I. Sutskever, T. Lillicrap, M. Leach, K. Kavukcuoglu, T. Graepel, and D. Hassabis, \"Mastering the game of go with deep neural networks and tree search,\" Nature, vol. 529, no. 7587, pp. 484-489, 01 2016. [Online]. Available: http://dx.doi.org/10.1038/nature16961\n\n. A Karpathy, What I learned from competing against a ConvNet on ImageNet. A. Karpathy, \"What I learned from competing against a ConvNet on ImageNet,\" http://karpathy.github.io/2014/09/02/ what-i-learned-from-competing-against-a-convnet-on-imagenet/, 2014.\n\nDeep convolutional neural network based species recognition for wild animal monitoring. G Chen, T X Han, Z He, R Kays, T Forrester, Image Processing (ICIP). IEEEG. Chen, T. X. Han, Z. He, R. Kays, and T. Forrester, \"Deep con- volutional neural network based species recognition for wild animal monitoring,\" in Image Processing (ICIP), 2014 IEEE International Conference on. IEEE, 2014, pp. 858-862.\n\nDeepdriving: Learning affordance for direct perception in autonomous driving. C Chen, A Seff, A Kornhauser, J Xiao, 10.1109/ICCV.2015.312Proceedings of the 2015 IEEE International Conference on Computer Vision (ICCV), ser. ICCV '15. the 2015 IEEE International Conference on Computer Vision (ICCV), ser. ICCV '15Washington, DC, USAIEEE Computer SocietyC. Chen, A. Seff, A. Kornhauser, and J. Xiao, \"Deepdriving: Learning affordance for direct perception in autonomous driving,\" in Proceedings of the 2015 IEEE International Conference on Computer Vision (ICCV), ser. ICCV '15. Washington, DC, USA: IEEE Computer Society, 2015, pp. 2722-2730. [Online]. Available: http://dx.doi.org/10.1109/ICCV.2015.312\n\nGoogle Cloud Machine Learning Engine. Inc Google, Google, Inc., \"Google Cloud Machine Learning Engine,\" https:// cloud.google.com/ml-engine/.\n\nAzure Batch AI Training. Microsoft Corp, Microsoft Corp., \"Azure Batch AI Training,\" https://batchaitraining. azure.com/.\n\nDeep Learning AMI Amazon Linux Version. Amazon, Com, Inc, Amazon.com, Inc., \"Deep Learning AMI Amazon Linux Version.\"\n\nCloud giants 'ran out' of fast GPUs for AI boffins. K Quach, K. Quach, \"Cloud giants 'ran out' of fast GPUs for AI boffins,\" https: //www.theregister.co.uk/2017/05/22/cloud providers ai researchers/.\n\nImagenet classification with deep convolutional neural networks. A Krizhevsky, I Sutskever, G E Hinton, Advances in neural information processing systems. A. Krizhevsky, I. Sutskever, and G. E. Hinton, \"Imagenet classifica- tion with deep convolutional neural networks,\" in Advances in neural information processing systems, 2012, pp. 1097-1105.\n\nVery deep convolutional networks for large-scale image recognition. K Simonyan, A Zisserman, K. Simonyan and A. Zisserman, \"Very deep convolutional networks for large-scale image recognition,\" 2014.\n\nRethinking the inception architecture for computer vision. C Szegedy, V Vanhoucke, S Ioffe, J Shlens, Z Wojna, C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna, \"Re- thinking the inception architecture for computer vision,\" 2015.\n\nRobust physical-world attacks on machine learning models. I Evtimov, K Eykholt, E Fernandes, T Kohno, B Li, A Prakash, A Rahmati, D Song, I. Evtimov, K. Eykholt, E. Fernandes, T. Kohno, B. Li, A. Prakash, A. Rahmati, and D. Song, \"Robust physical-world attacks on machine learning models,\" 2017.\n\nDeep learning in neural networks: An overview. J Schmidhuber, Neural networks. 61J. Schmidhuber, \"Deep learning in neural networks: An overview,\" Neural networks, vol. 61, pp. 85-117, 2015.\n\nTraining a 3-node neural network is np-complete. A Blum, R L Rivest, Advances in neural information processing systems. A. Blum and R. L. Rivest, \"Training a 3-node neural network is np-complete,\" in Advances in neural information processing systems, 1989, pp. 494-501.\n\nA survey on transfer learning. S J Pan, Q Yang, IEEE Transactions on knowledge and data engineering. 2210S. J. Pan and Q. Yang, \"A survey on transfer learning,\" IEEE Transactions on knowledge and data engineering, vol. 22, no. 10, pp. 1345-1359, 2010.\n\nDomain adaptation for largescale sentiment classification: A deep learning approach. X Glorot, A Bordes, Y Bengio, Proceedings of the 28th international conference on machine learning. the 28th international conference on machine learningX. Glorot, A. Bordes, and Y. Bengio, \"Domain adaptation for large- scale sentiment classification: A deep learning approach,\" in Pro- ceedings of the 28th international conference on machine learning (ICML-11), 2011, pp. 513-520.\n\nCnn features off-the-shelf: An astounding baseline for recognition. A S Razavian, H Azizpour, J Sullivan, S Carlsson, Proceedings of the 2014 IEEE Conference on Computer Vision and Pattern Recognition Workshops, ser. CVPRW '14. the 2014 IEEE Conference on Computer Vision and Pattern Recognition Workshops, ser. CVPRW '14Washington, DC, USAIEEE Computer SocietyA. S. Razavian, H. Azizpour, J. Sullivan, and S. Carlsson, \"Cnn features off-the-shelf: An astounding baseline for recognition,\" in Proceedings of the 2014 IEEE Conference on Computer Vision and Pattern Recognition Workshops, ser. CVPRW '14. Washington, DC, USA: IEEE Computer Society, 2014, pp. 512-519. [Online].\n\n. 10.1109/CVPRW.2014.131Available: http://dx.doi.org/10.1109/CVPRW.2014.131\n\nCorrelating Fourier descriptors of local patches for road sign recognition. F Larsson, M Felsberg, P.-E Forssen, IET Computer Vision. 54F. Larsson, M. Felsberg, and P.-E. Forssen, \"Correlating Fourier descriptors of local patches for road sign recognition,\" IET Computer Vision, vol. 5, no. 4, pp. 244-254, 2011.\n\nAdversarial machine learning. L Huang, A D Joseph, B Nelson, B I Rubinstein, J D Tygar, Proceedings of the 4th ACM Workshop on Security and Artificial Intelligence, ser. AISec '11. the 4th ACM Workshop on Security and Artificial Intelligence, ser. AISec '11New York, NY, USAACML. Huang, A. D. Joseph, B. Nelson, B. I. Rubinstein, and J. D. Tygar, \"Adversarial machine learning,\" in Proceedings of the 4th ACM Workshop on Security and Artificial Intelligence, ser. AISec '11. New York, NY, USA: ACM, 2011, pp. 43-58. [Online].\n\n. http:/doi.acm.org/10.1145/2046684.2046692Available: http://doi.acm.org/10.1145/2046684.2046692\n\nAdversarial classification. N Dalvi, P Domingos, S Mausam, D Sanghai, Verma, http:/doi.acm.org/10.1145/1014052.1014066Proceedings of the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '04. the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '04New York, NY, USAACMN. Dalvi, P. Domingos, Mausam, S. Sanghai, and D. Verma, \"Adversarial classification,\" in Proceedings of the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '04. New York, NY, USA: ACM, 2004, pp. 99-108. [Online]. Available: http://doi.acm.org/10.1145/1014052. 1014066\n\nAdversarial learning. D Lowd, C Meek, http:/doi.acm.org/10.1145/1081870.1081950Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, ser. KDD '05. the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, ser. KDD '05New York, NY, USAACMD. Lowd and C. Meek, \"Adversarial learning,\" in Proceedings of the Eleventh ACM SIGKDD International Conference on Knowledge Discovery in Data Mining, ser. KDD '05. New York, NY, USA: ACM, 2005, pp. 641-647. [Online]. Available: http://doi.acm.org/10.1145/1081870.1081950\n\nGood word attacks on statistical spam filters. Proceedings of the Conference on Email and Anti-Spam (CEAS). the Conference on Email and Anti-Spam (CEAS)[27] --, \"Good word attacks on statistical spam filters.\" in Proceedings of the Conference on Email and Anti-Spam (CEAS), 2005.\n\nOn Attacking Statistical Spam Filters. G L Wittel, S F Wu, Proceedings of the Conference on Email and Anti-Spam (CEAS). the Conference on Email and Anti-Spam (CEAS)Mountain View, CA, USAG. L. Wittel and S. F. Wu, \"On Attacking Statistical Spam Filters,\" in Proceedings of the Conference on Email and Anti-Spam (CEAS), Mountain View, CA, USA, 2004.\n\nParagraph: Thwarting signature learning by training maliciously. J Newsome, B Karp, D Song, 10.1007/11856214_5Proceedings of the 9th International Conference on Recent Advances in Intrusion Detection, ser. RAID'06. the 9th International Conference on Recent Advances in Intrusion Detection, ser. RAID'06Berlin, HeidelbergSpringer-VerlagJ. Newsome, B. Karp, and D. Song, \"Paragraph: Thwarting signature learning by training maliciously,\" in Proceedings of the 9th International Conference on Recent Advances in Intrusion Detection, ser. RAID'06. Berlin, Heidelberg: Springer-Verlag, 2006, pp. 81-105. [Online]. Available: http://dx.doi.org/10.1007/11856214 5\n\nAllergy attack against automatic signature generation. S P Chung, A K Mok, Proceedings of the 9th International Conference on Recent Advances in Intrusion Detection. the 9th International Conference on Recent Advances in Intrusion DetectionS. P. Chung and A. K. Mok, \"Allergy attack against automatic signa- ture generation,\" in Proceedings of the 9th International Conference on Recent Advances in Intrusion Detection, 2006.\n\nAdvanced allergy attacks: Does a corpus really help. Proceedings of the 10th International Conference on Recent Advances in Intrusion Detection. the 10th International Conference on Recent Advances in Intrusion Detection--, \"Advanced allergy attacks: Does a corpus really help,\" in Proceedings of the 10th International Conference on Recent Advances in Intrusion Detection, 2007.\n\nIntriguing properties of neural networks. C Szegedy, W Zaremba, I Sutskever, J Bruna, D Erhan, I Goodfellow, R Fergus, C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. Goodfel- low, and R. Fergus, \"Intriguing properties of neural networks,\" 2013.\n\nExplaining and harnessing adversarial examples. I J Goodfellow, J Shlens, C Szegedy, I. J. Goodfellow, J. Shlens, and C. Szegedy, \"Explaining and harness- ing adversarial examples,\" 2014.\n\nPractical black-box attacks against machine learning. N Papernot, P Mcdaniel, I Goodfellow, S Jha, Z B Celik, A Swami, N. Papernot, P. McDaniel, I. Goodfellow, S. Jha, Z. B. Celik, and A. Swami, \"Practical black-box attacks against machine learning,\" 2016.\n\nUniversal adversarial perturbations. S.-M Moosavi-Dezfooli, A Fawzi, O Fawzi, P Frossard, S.-M. Moosavi-Dezfooli, A. Fawzi, O. Fawzi, and P. Frossard, \"Uni- versal adversarial perturbations,\" 2016.\n\nAuror: Defending against poisoning attacks in collaborative deep learning systems. S Shen, S Tople, P Saxena, http:/doi.acm.org/10.1145/2991079.2991125Proceedings of the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16. the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16New York, NY, USAACMS. Shen, S. Tople, and P. Saxena, \"Auror: Defending against poisoning attacks in collaborative deep learning systems,\" in Proceedings of the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16. New York, NY, USA: ACM, 2016, pp. 508-519. [Online]. Available: http://doi.acm.org/10.1145/2991079.2991125\n\nLearning algorithms for classification: A comparison on handwritten digit recognition. Y Lecun, L Jackel, L Bottou, C Cortes, J S Denker, H Drucker, I Guyon, U Muller, E Sackinger, P Simard, Neural networks: the statistical mechanics perspective. 261276Y. LeCun, L. Jackel, L. Bottou, C. Cortes, J. S. Denker, H. Drucker, I. Guyon, U. Muller, E. Sackinger, P. Simard et al., \"Learning algorithms for classification: A comparison on handwritten digit recognition,\" Neural networks: the statistical mechanics perspective, vol. 261, p. 276, 1995.\n\nY Zhang, P Liang, M J Wainwright, arXiv:1609.01000Convexified convolutional neural networks. arXiv preprintY. Zhang, P. Liang, and M. J. Wainwright, \"Convexified convolutional neural networks,\" arXiv preprint arXiv:1609.01000, 2016.\n\nFaster r-cnn: Towards realtime object detection with region proposal networks. S Ren, K He, R Girshick, J Sun, Advances in neural information processing systems. S. Ren, K. He, R. Girshick, and J. Sun, \"Faster r-cnn: Towards real- time object detection with region proposal networks,\" in Advances in neural information processing systems, 2015, pp. 91-99.\n\nTraffic sign detection for us roads: Remaining challenges and a case for tracking. A M\u00f8gelmose, D Liu, M M Trivedi, Intelligent Transportation Systems (ITSC). IEEEIEEE 17th International Conference onA. M\u00f8gelmose, D. Liu, and M. M. Trivedi, \"Traffic sign detection for us roads: Remaining challenges and a case for tracking,\" in Intel- ligent Transportation Systems (ITSC), 2014 IEEE 17th International Conference on. IEEE, 2014, pp. 1394-1399.\n\nDecaf: A deep convolutional activation feature for generic visual recognition. J Donahue, Y Jia, O Vinyals, J Hoffman, N Zhang, E Tzeng, T Darrell, International conference on machine learning. J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang, E. Tzeng, and T. Darrell, \"Decaf: A deep convolutional activation feature for generic visual recognition,\" in International conference on machine learning, 2014, pp. 647-655.\n\nTransfer learning and fine-tuning convolutional neural networks. A Karpathy, CS321n Lecture Notes. A. Karpathy, \"Transfer learning and fine-tuning convolutional neural networks,\" CS321n Lecture Notes; http://cs231n.github.io/ transfer-learning/.\n\nCaffe Model Zoo. \"Caffe Model Zoo,\" https://github.com/BVLC/caffe/wiki/Model-Zoo.\n\nTraffic sign detection and recognition using fully convolutional network guided proposals. Y Zhu, C Zhang, D Zhou, X Wang, X Bai, W Liu, Neurocomputing. 214Y. Zhu, C. Zhang, D. Zhou, X. Wang, X. Bai, and W. Liu, \"Traffic sign detection and recognition using fully convolutional network guided proposals,\" Neurocomputing, vol. 214, pp. 758 -766, 2016. [Online]. Available: http://www.sciencedirect.com/science/article/pii/ S092523121630741X\n\nTransfer learning -machine learning's next frontier. S Ruder, S. Ruder, \"Transfer learning -machine learning's next frontier,\" http: //ruder.io/transfer-learning/.\n\nA comprehensive guide to fine-tuning deep learning models in Keras. F Yu, Network in Network Imagenet Model. F. Yu, \"A comprehensive guide to fine-tuning deep learning models in Keras,\" https://flyyufelix.github.io/2016/10/03/ fine-tuning-in-keras-part1.html. [47] \"Network in Network Imagenet Model,\" https://gist.github.com/ mavenlin/d802a5849de39225bcc6.\n\nCaffe models in TensorFlow. \"Caffe models in TensorFlow,\" https://github.com/ethereon/ caffe-tensorflow.\n\nCaffe to Keras converter. \"Caffe to Keras converter,\" https://github.com/qxcv/caffe2keras.\n\nConvert models from Caffe to Theano format. \"Convert models from Caffe to Theano format,\" https://github.com/ kencoken/caffe-model-convert.\n\nConverting trained models to Core ML. Apple Inc, Apple Inc., \"Converting trained models to Core ML,\" https://developer.apple.com/documentation/coreml/converting trained models to core ml.\n\nConvert Caffe model to Mxnet format. \"Convert Caffe model to Mxnet format,\" https://github.com/apache/ incubator-mxnet/tree/master/tools/caffe converter.\n", "annotations": {"author": "[{\"end\":129,\"start\":83},{\"end\":205,\"start\":130},{\"end\":257,\"start\":206}]", "publisher": null, "author_last_name": "[{\"end\":92,\"start\":90},{\"end\":150,\"start\":138},{\"end\":220,\"start\":216}]", "author_first_name": "[{\"end\":89,\"start\":83},{\"end\":137,\"start\":130},{\"end\":215,\"start\":206}]", "author_affiliation": "[{\"end\":128,\"start\":94},{\"end\":204,\"start\":170},{\"end\":256,\"start\":222}]", "title": "[{\"end\":80,\"start\":1},{\"end\":337,\"start\":258}]", "venue": null, "abstract": "[{\"end\":2007,\"start\":339}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2282,\"start\":2279},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2305,\"start\":2302},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2330,\"start\":2327},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2335,\"start\":2332},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2362,\"start\":2359},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2367,\"start\":2364},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2451,\"start\":2448},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2663,\"start\":2660},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2695,\"start\":2692},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":3363,\"start\":3359},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3514,\"start\":3510},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3568,\"start\":3564},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3972,\"start\":3968},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4665,\"start\":4661},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4675,\"start\":4671},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4695,\"start\":4691},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":6185,\"start\":6184},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7311,\"start\":7307},{\"end\":10162,\"start\":10156},{\"end\":10286,\"start\":10280},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":10973,\"start\":10969},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":13212,\"start\":13208},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13687,\"start\":13683},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":13882,\"start\":13878},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":14122,\"start\":14118},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":17008,\"start\":17004},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":18704,\"start\":18700},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":18710,\"start\":18706},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":18722,\"start\":18718},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":18922,\"start\":18918},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":19106,\"start\":19102},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":19112,\"start\":19108},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":19386,\"start\":19382},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":20500,\"start\":20496},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":20528,\"start\":20524},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":20590,\"start\":20586},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":21200,\"start\":21196},{\"end\":21444,\"start\":21433},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":22186,\"start\":22182},{\"end\":22318,\"start\":22315},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":22320,\"start\":22318},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":22636,\"start\":22632},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":23562,\"start\":23560},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":24430,\"start\":24426},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":28354,\"start\":28351},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":28504,\"start\":28500},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":29214,\"start\":29210},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":31830,\"start\":31829},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":32434,\"start\":32433},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":35141,\"start\":35137},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":35147,\"start\":35143},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":35324,\"start\":35320},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":38348,\"start\":38344},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":38977,\"start\":38973},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":39135,\"start\":39131},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":39457,\"start\":39453},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":39499,\"start\":39495},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":39505,\"start\":39501},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":39511,\"start\":39507},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":40192,\"start\":40188},{\"end\":41722,\"start\":41718},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":41928,\"start\":41927},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":42393,\"start\":42389},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":42405,\"start\":42401},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":42418,\"start\":42414},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":42439,\"start\":42435},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":42451,\"start\":42447}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":45470,\"start\":45354},{\"attributes\":{\"id\":\"fig_1\"},\"end\":45642,\"start\":45471},{\"attributes\":{\"id\":\"fig_3\"},\"end\":45837,\"start\":45643},{\"attributes\":{\"id\":\"fig_4\"},\"end\":46012,\"start\":45838},{\"attributes\":{\"id\":\"fig_5\"},\"end\":46143,\"start\":46013},{\"attributes\":{\"id\":\"fig_6\"},\"end\":46414,\"start\":46144},{\"attributes\":{\"id\":\"fig_7\"},\"end\":46595,\"start\":46415},{\"attributes\":{\"id\":\"fig_8\"},\"end\":46759,\"start\":46596},{\"attributes\":{\"id\":\"fig_10\"},\"end\":46826,\"start\":46760},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":46988,\"start\":46827},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":47629,\"start\":46989},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":48748,\"start\":47630},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":49269,\"start\":48749},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":49565,\"start\":49270},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":50657,\"start\":49566}]", "paragraph": "[{\"end\":2696,\"start\":2023},{\"end\":3223,\"start\":2698},{\"end\":4069,\"start\":3225},{\"end\":4731,\"start\":4071},{\"end\":5505,\"start\":4733},{\"end\":7163,\"start\":5507},{\"end\":7218,\"start\":7165},{\"end\":8163,\"start\":7220},{\"end\":9157,\"start\":8165},{\"end\":9516,\"start\":9159},{\"end\":9676,\"start\":9572},{\"end\":10163,\"start\":9702},{\"end\":10451,\"start\":10170},{\"end\":10974,\"start\":10495},{\"end\":11250,\"start\":10976},{\"end\":11845,\"start\":11252},{\"end\":12105,\"start\":11847},{\"end\":12136,\"start\":12107},{\"end\":12546,\"start\":12250},{\"end\":12746,\"start\":12596},{\"end\":12850,\"start\":12748},{\"end\":12979,\"start\":12884},{\"end\":13439,\"start\":12992},{\"end\":14123,\"start\":13441},{\"end\":14473,\"start\":14140},{\"end\":14818,\"start\":14505},{\"end\":15515,\"start\":14820},{\"end\":15780,\"start\":15517},{\"end\":16158,\"start\":15782},{\"end\":16285,\"start\":16254},{\"end\":16765,\"start\":16287},{\"end\":17187,\"start\":16767},{\"end\":17629,\"start\":17217},{\"end\":18481,\"start\":17631},{\"end\":19399,\"start\":18531},{\"end\":20349,\"start\":19401},{\"end\":22069,\"start\":20351},{\"end\":22486,\"start\":22115},{\"end\":22857,\"start\":22496},{\"end\":23304,\"start\":22859},{\"end\":23395,\"start\":23306},{\"end\":23575,\"start\":23397},{\"end\":23675,\"start\":23577},{\"end\":24347,\"start\":23677},{\"end\":24678,\"start\":24368},{\"end\":25082,\"start\":24680},{\"end\":25381,\"start\":25101},{\"end\":25938,\"start\":25400},{\"end\":26231,\"start\":25940},{\"end\":27000,\"start\":26233},{\"end\":27646,\"start\":27045},{\"end\":28055,\"start\":27648},{\"end\":28355,\"start\":28101},{\"end\":29135,\"start\":28365},{\"end\":29654,\"start\":29137},{\"end\":29739,\"start\":29685},{\"end\":29842,\"start\":29741},{\"end\":30056,\"start\":29844},{\"end\":31250,\"start\":30077},{\"end\":31616,\"start\":31270},{\"end\":32581,\"start\":31618},{\"end\":33411,\"start\":32602},{\"end\":34093,\"start\":33413},{\"end\":34989,\"start\":34122},{\"end\":36840,\"start\":34991},{\"end\":37932,\"start\":36870},{\"end\":38725,\"start\":37978},{\"end\":40029,\"start\":38727},{\"end\":40909,\"start\":40031},{\"end\":42201,\"start\":40911},{\"end\":42667,\"start\":42203},{\"end\":43233,\"start\":42696},{\"end\":43629,\"start\":43235},{\"end\":44320,\"start\":43645},{\"end\":44831,\"start\":44322},{\"end\":45353,\"start\":44833}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10169,\"start\":10164},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10494,\"start\":10452},{\"attributes\":{\"id\":\"formula_2\"},\"end\":12249,\"start\":12137},{\"attributes\":{\"id\":\"formula_3\"},\"end\":12595,\"start\":12547},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12883,\"start\":12851},{\"attributes\":{\"id\":\"formula_5\"},\"end\":16253,\"start\":16159},{\"attributes\":{\"id\":\"formula_6\"},\"end\":18515,\"start\":18482}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":22780,\"start\":22773},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":26579,\"start\":26572},{\"end\":29014,\"start\":29007},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":30990,\"start\":30983},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":32013,\"start\":32006},{\"end\":37407,\"start\":37400}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":2021,\"start\":2009},{\"attributes\":{\"n\":\"2.\"},\"end\":9546,\"start\":9519},{\"attributes\":{\"n\":\"2.1.\"},\"end\":9570,\"start\":9549},{\"attributes\":{\"n\":\"2.1.1.\"},\"end\":9700,\"start\":9679},{\"attributes\":{\"n\":\"2.1.3.\"},\"end\":12990,\"start\":12982},{\"attributes\":{\"n\":\"2.2.\"},\"end\":14138,\"start\":14126},{\"attributes\":{\"n\":\"2.2.1.\"},\"end\":14503,\"start\":14476},{\"attributes\":{\"n\":\"2.2.2.\"},\"end\":17215,\"start\":17190},{\"attributes\":{\"n\":\"3.\"},\"end\":18529,\"start\":18517},{\"attributes\":{\"n\":\"4.\"},\"end\":22113,\"start\":22072},{\"attributes\":{\"n\":\"4.1.\"},\"end\":22494,\"start\":22489},{\"attributes\":{\"n\":\"4.1.3.\"},\"end\":24366,\"start\":24350},{\"attributes\":{\"n\":\"4.2.\"},\"end\":25099,\"start\":25085},{\"end\":25398,\"start\":25384},{\"attributes\":{\"n\":\"4.2.2.\"},\"end\":27021,\"start\":27003},{\"attributes\":{\"n\":\"4.2.3.\"},\"end\":27043,\"start\":27024},{\"attributes\":{\"n\":\"5.\"},\"end\":28099,\"start\":28058},{\"attributes\":{\"n\":\"5.1.\"},\"end\":28363,\"start\":28358},{\"attributes\":{\"n\":\"5.2.\"},\"end\":29683,\"start\":29657},{\"attributes\":{\"n\":\"5.2.2.\"},\"end\":30075,\"start\":30059},{\"attributes\":{\"n\":\"5.2.3.\"},\"end\":31268,\"start\":31253},{\"attributes\":{\"n\":\"5.2.4.\"},\"end\":32600,\"start\":32584},{\"attributes\":{\"n\":\"5.3.\"},\"end\":34120,\"start\":34096},{\"attributes\":{\"n\":\"5.3.3.\"},\"end\":36868,\"start\":36843},{\"attributes\":{\"n\":\"6.\"},\"end\":37976,\"start\":37935},{\"attributes\":{\"n\":\"6.1.\"},\"end\":42694,\"start\":42670},{\"attributes\":{\"n\":\"7.\"},\"end\":43643,\"start\":43632},{\"end\":45365,\"start\":45355},{\"end\":45482,\"start\":45472},{\"end\":45654,\"start\":45644},{\"end\":45849,\"start\":45839},{\"end\":46024,\"start\":46014},{\"end\":46426,\"start\":46416},{\"end\":46607,\"start\":46597},{\"end\":46772,\"start\":46761},{\"end\":46999,\"start\":46990},{\"end\":47640,\"start\":47631},{\"end\":48759,\"start\":48750},{\"end\":49280,\"start\":49271},{\"end\":49576,\"start\":49567}]", "table": "[{\"end\":46988,\"start\":46882},{\"end\":47629,\"start\":47348},{\"end\":48748,\"start\":47701},{\"end\":49269,\"start\":48870},{\"end\":49565,\"start\":49374},{\"end\":50657,\"start\":49624}]", "figure_caption": "[{\"end\":45470,\"start\":45367},{\"end\":45642,\"start\":45484},{\"end\":45837,\"start\":45656},{\"end\":46012,\"start\":45851},{\"end\":46143,\"start\":46026},{\"end\":46414,\"start\":46146},{\"end\":46595,\"start\":46428},{\"end\":46759,\"start\":46609},{\"end\":46826,\"start\":46775},{\"end\":46882,\"start\":46829},{\"end\":47348,\"start\":47001},{\"end\":47701,\"start\":47642},{\"end\":48870,\"start\":48761},{\"end\":49374,\"start\":49282},{\"end\":49624,\"start\":49578}]", "figure_ref": "[{\"end\":5148,\"start\":5140},{\"end\":6312,\"start\":6304},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11418,\"start\":11410},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23154,\"start\":23146},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":25448,\"start\":25440},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":25650,\"start\":25642},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":25670,\"start\":25662},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":27394,\"start\":27386},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":27771,\"start\":27763},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":29557,\"start\":29549},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":31863,\"start\":31855},{\"end\":33599,\"start\":33591},{\"attributes\":{\"ref_id\":\"fig_10\"},\"end\":34663,\"start\":34654},{\"end\":35852,\"start\":35844},{\"end\":36675,\"start\":36666},{\"end\":36769,\"start\":36761},{\"end\":36969,\"start\":36961},{\"end\":36984,\"start\":36975},{\"end\":39613,\"start\":39604}]", "bib_author_first_name": "[{\"end\":51186,\"start\":51185},{\"end\":51196,\"start\":51195},{\"end\":51207,\"start\":51206},{\"end\":51594,\"start\":51593},{\"end\":51596,\"start\":51595},{\"end\":51607,\"start\":51606},{\"end\":51899,\"start\":51898},{\"end\":51911,\"start\":51910},{\"end\":51918,\"start\":51917},{\"end\":52092,\"start\":52091},{\"end\":52100,\"start\":52099},{\"end\":52115,\"start\":52114},{\"end\":52125,\"start\":52124},{\"end\":52135,\"start\":52134},{\"end\":52149,\"start\":52148},{\"end\":52161,\"start\":52160},{\"end\":52396,\"start\":52395},{\"end\":52406,\"start\":52405},{\"end\":52415,\"start\":52414},{\"end\":52417,\"start\":52416},{\"end\":52429,\"start\":52428},{\"end\":52437,\"start\":52436},{\"end\":52446,\"start\":52445},{\"end\":52467,\"start\":52466},{\"end\":52484,\"start\":52483},{\"end\":52498,\"start\":52497},{\"end\":52516,\"start\":52515},{\"end\":52527,\"start\":52526},{\"end\":52539,\"start\":52538},{\"end\":52548,\"start\":52547},{\"end\":52556,\"start\":52555},{\"end\":52572,\"start\":52571},{\"end\":52585,\"start\":52584},{\"end\":52598,\"start\":52597},{\"end\":52607,\"start\":52606},{\"end\":52622,\"start\":52621},{\"end\":52633,\"start\":52632},{\"end\":53135,\"start\":53134},{\"end\":53479,\"start\":53478},{\"end\":53487,\"start\":53486},{\"end\":53489,\"start\":53488},{\"end\":53496,\"start\":53495},{\"end\":53502,\"start\":53501},{\"end\":53510,\"start\":53509},{\"end\":53869,\"start\":53868},{\"end\":53877,\"start\":53876},{\"end\":53885,\"start\":53884},{\"end\":53899,\"start\":53898},{\"end\":54535,\"start\":54532},{\"end\":54671,\"start\":54662},{\"end\":54932,\"start\":54931},{\"end\":55146,\"start\":55145},{\"end\":55160,\"start\":55159},{\"end\":55173,\"start\":55172},{\"end\":55175,\"start\":55174},{\"end\":55496,\"start\":55495},{\"end\":55508,\"start\":55507},{\"end\":55687,\"start\":55686},{\"end\":55698,\"start\":55697},{\"end\":55711,\"start\":55710},{\"end\":55720,\"start\":55719},{\"end\":55730,\"start\":55729},{\"end\":55928,\"start\":55927},{\"end\":55939,\"start\":55938},{\"end\":55950,\"start\":55949},{\"end\":55963,\"start\":55962},{\"end\":55972,\"start\":55971},{\"end\":55978,\"start\":55977},{\"end\":55989,\"start\":55988},{\"end\":56000,\"start\":55999},{\"end\":56214,\"start\":56213},{\"end\":56407,\"start\":56406},{\"end\":56415,\"start\":56414},{\"end\":56417,\"start\":56416},{\"end\":56660,\"start\":56659},{\"end\":56662,\"start\":56661},{\"end\":56669,\"start\":56668},{\"end\":56967,\"start\":56966},{\"end\":56977,\"start\":56976},{\"end\":56987,\"start\":56986},{\"end\":57419,\"start\":57418},{\"end\":57421,\"start\":57420},{\"end\":57433,\"start\":57432},{\"end\":57445,\"start\":57444},{\"end\":57457,\"start\":57456},{\"end\":58181,\"start\":58180},{\"end\":58192,\"start\":58191},{\"end\":58207,\"start\":58203},{\"end\":58449,\"start\":58448},{\"end\":58458,\"start\":58457},{\"end\":58460,\"start\":58459},{\"end\":58470,\"start\":58469},{\"end\":58480,\"start\":58479},{\"end\":58482,\"start\":58481},{\"end\":58496,\"start\":58495},{\"end\":58498,\"start\":58497},{\"end\":59072,\"start\":59071},{\"end\":59081,\"start\":59080},{\"end\":59093,\"start\":59092},{\"end\":59103,\"start\":59102},{\"end\":59730,\"start\":59729},{\"end\":59738,\"start\":59737},{\"end\":60617,\"start\":60616},{\"end\":60619,\"start\":60618},{\"end\":60629,\"start\":60628},{\"end\":60631,\"start\":60630},{\"end\":60992,\"start\":60991},{\"end\":61003,\"start\":61002},{\"end\":61011,\"start\":61010},{\"end\":61641,\"start\":61640},{\"end\":61643,\"start\":61642},{\"end\":61652,\"start\":61651},{\"end\":61654,\"start\":61653},{\"end\":62436,\"start\":62435},{\"end\":62447,\"start\":62446},{\"end\":62458,\"start\":62457},{\"end\":62471,\"start\":62470},{\"end\":62480,\"start\":62479},{\"end\":62489,\"start\":62488},{\"end\":62503,\"start\":62502},{\"end\":62702,\"start\":62701},{\"end\":62704,\"start\":62703},{\"end\":62718,\"start\":62717},{\"end\":62728,\"start\":62727},{\"end\":62897,\"start\":62896},{\"end\":62909,\"start\":62908},{\"end\":62921,\"start\":62920},{\"end\":62935,\"start\":62934},{\"end\":62942,\"start\":62941},{\"end\":62944,\"start\":62943},{\"end\":62953,\"start\":62952},{\"end\":63141,\"start\":63137},{\"end\":63161,\"start\":63160},{\"end\":63170,\"start\":63169},{\"end\":63179,\"start\":63178},{\"end\":63383,\"start\":63382},{\"end\":63391,\"start\":63390},{\"end\":63400,\"start\":63399},{\"end\":64050,\"start\":64049},{\"end\":64059,\"start\":64058},{\"end\":64069,\"start\":64068},{\"end\":64079,\"start\":64078},{\"end\":64089,\"start\":64088},{\"end\":64091,\"start\":64090},{\"end\":64101,\"start\":64100},{\"end\":64112,\"start\":64111},{\"end\":64121,\"start\":64120},{\"end\":64131,\"start\":64130},{\"end\":64144,\"start\":64143},{\"end\":64508,\"start\":64507},{\"end\":64517,\"start\":64516},{\"end\":64526,\"start\":64525},{\"end\":64528,\"start\":64527},{\"end\":64821,\"start\":64820},{\"end\":64828,\"start\":64827},{\"end\":64834,\"start\":64833},{\"end\":64846,\"start\":64845},{\"end\":65182,\"start\":65181},{\"end\":65195,\"start\":65194},{\"end\":65202,\"start\":65201},{\"end\":65204,\"start\":65203},{\"end\":65624,\"start\":65623},{\"end\":65635,\"start\":65634},{\"end\":65642,\"start\":65641},{\"end\":65653,\"start\":65652},{\"end\":65664,\"start\":65663},{\"end\":65673,\"start\":65672},{\"end\":65682,\"start\":65681},{\"end\":66034,\"start\":66033},{\"end\":66390,\"start\":66389},{\"end\":66397,\"start\":66396},{\"end\":66406,\"start\":66405},{\"end\":66414,\"start\":66413},{\"end\":66422,\"start\":66421},{\"end\":66429,\"start\":66428},{\"end\":66793,\"start\":66792},{\"end\":66973,\"start\":66972},{\"end\":67645,\"start\":67640}]", "bib_author_last_name": "[{\"end\":51193,\"start\":51187},{\"end\":51204,\"start\":51197},{\"end\":51214,\"start\":51208},{\"end\":51604,\"start\":51597},{\"end\":51615,\"start\":51608},{\"end\":51908,\"start\":51900},{\"end\":51915,\"start\":51912},{\"end\":51925,\"start\":51919},{\"end\":52097,\"start\":52093},{\"end\":52112,\"start\":52101},{\"end\":52122,\"start\":52116},{\"end\":52132,\"start\":52126},{\"end\":52146,\"start\":52136},{\"end\":52158,\"start\":52150},{\"end\":52172,\"start\":52162},{\"end\":52403,\"start\":52397},{\"end\":52412,\"start\":52407},{\"end\":52426,\"start\":52418},{\"end\":52434,\"start\":52430},{\"end\":52443,\"start\":52438},{\"end\":52464,\"start\":52447},{\"end\":52481,\"start\":52468},{\"end\":52495,\"start\":52485},{\"end\":52513,\"start\":52499},{\"end\":52524,\"start\":52517},{\"end\":52536,\"start\":52528},{\"end\":52545,\"start\":52540},{\"end\":52553,\"start\":52549},{\"end\":52569,\"start\":52557},{\"end\":52582,\"start\":52573},{\"end\":52595,\"start\":52586},{\"end\":52604,\"start\":52599},{\"end\":52619,\"start\":52608},{\"end\":52630,\"start\":52623},{\"end\":52642,\"start\":52634},{\"end\":53144,\"start\":53136},{\"end\":53484,\"start\":53480},{\"end\":53493,\"start\":53490},{\"end\":53499,\"start\":53497},{\"end\":53507,\"start\":53503},{\"end\":53520,\"start\":53511},{\"end\":53874,\"start\":53870},{\"end\":53882,\"start\":53878},{\"end\":53896,\"start\":53886},{\"end\":53904,\"start\":53900},{\"end\":54542,\"start\":54536},{\"end\":54676,\"start\":54672},{\"end\":54806,\"start\":54800},{\"end\":54811,\"start\":54808},{\"end\":54816,\"start\":54813},{\"end\":54938,\"start\":54933},{\"end\":55157,\"start\":55147},{\"end\":55170,\"start\":55161},{\"end\":55182,\"start\":55176},{\"end\":55505,\"start\":55497},{\"end\":55518,\"start\":55509},{\"end\":55695,\"start\":55688},{\"end\":55708,\"start\":55699},{\"end\":55717,\"start\":55712},{\"end\":55727,\"start\":55721},{\"end\":55736,\"start\":55731},{\"end\":55936,\"start\":55929},{\"end\":55947,\"start\":55940},{\"end\":55960,\"start\":55951},{\"end\":55969,\"start\":55964},{\"end\":55975,\"start\":55973},{\"end\":55986,\"start\":55979},{\"end\":55997,\"start\":55990},{\"end\":56005,\"start\":56001},{\"end\":56226,\"start\":56215},{\"end\":56412,\"start\":56408},{\"end\":56424,\"start\":56418},{\"end\":56666,\"start\":56663},{\"end\":56674,\"start\":56670},{\"end\":56974,\"start\":56968},{\"end\":56984,\"start\":56978},{\"end\":56994,\"start\":56988},{\"end\":57430,\"start\":57422},{\"end\":57442,\"start\":57434},{\"end\":57454,\"start\":57446},{\"end\":57466,\"start\":57458},{\"end\":58189,\"start\":58182},{\"end\":58201,\"start\":58193},{\"end\":58215,\"start\":58208},{\"end\":58455,\"start\":58450},{\"end\":58467,\"start\":58461},{\"end\":58477,\"start\":58471},{\"end\":58493,\"start\":58483},{\"end\":58504,\"start\":58499},{\"end\":59078,\"start\":59073},{\"end\":59090,\"start\":59082},{\"end\":59100,\"start\":59094},{\"end\":59111,\"start\":59104},{\"end\":59118,\"start\":59113},{\"end\":59735,\"start\":59731},{\"end\":59743,\"start\":59739},{\"end\":60626,\"start\":60620},{\"end\":60634,\"start\":60632},{\"end\":61000,\"start\":60993},{\"end\":61008,\"start\":61004},{\"end\":61016,\"start\":61012},{\"end\":61649,\"start\":61644},{\"end\":61658,\"start\":61655},{\"end\":62444,\"start\":62437},{\"end\":62455,\"start\":62448},{\"end\":62468,\"start\":62459},{\"end\":62477,\"start\":62472},{\"end\":62486,\"start\":62481},{\"end\":62500,\"start\":62490},{\"end\":62510,\"start\":62504},{\"end\":62715,\"start\":62705},{\"end\":62725,\"start\":62719},{\"end\":62736,\"start\":62729},{\"end\":62906,\"start\":62898},{\"end\":62918,\"start\":62910},{\"end\":62932,\"start\":62922},{\"end\":62939,\"start\":62936},{\"end\":62950,\"start\":62945},{\"end\":62959,\"start\":62954},{\"end\":63158,\"start\":63142},{\"end\":63167,\"start\":63162},{\"end\":63176,\"start\":63171},{\"end\":63188,\"start\":63180},{\"end\":63388,\"start\":63384},{\"end\":63397,\"start\":63392},{\"end\":63407,\"start\":63401},{\"end\":64056,\"start\":64051},{\"end\":64066,\"start\":64060},{\"end\":64076,\"start\":64070},{\"end\":64086,\"start\":64080},{\"end\":64098,\"start\":64092},{\"end\":64109,\"start\":64102},{\"end\":64118,\"start\":64113},{\"end\":64128,\"start\":64122},{\"end\":64141,\"start\":64132},{\"end\":64151,\"start\":64145},{\"end\":64514,\"start\":64509},{\"end\":64523,\"start\":64518},{\"end\":64539,\"start\":64529},{\"end\":64825,\"start\":64822},{\"end\":64831,\"start\":64829},{\"end\":64843,\"start\":64835},{\"end\":64850,\"start\":64847},{\"end\":65192,\"start\":65183},{\"end\":65199,\"start\":65196},{\"end\":65212,\"start\":65205},{\"end\":65632,\"start\":65625},{\"end\":65639,\"start\":65636},{\"end\":65650,\"start\":65643},{\"end\":65661,\"start\":65654},{\"end\":65670,\"start\":65665},{\"end\":65679,\"start\":65674},{\"end\":65690,\"start\":65683},{\"end\":66043,\"start\":66035},{\"end\":66394,\"start\":66391},{\"end\":66403,\"start\":66398},{\"end\":66411,\"start\":66407},{\"end\":66419,\"start\":66415},{\"end\":66426,\"start\":66423},{\"end\":66433,\"start\":66430},{\"end\":66799,\"start\":66794},{\"end\":66976,\"start\":66974},{\"end\":67649,\"start\":67646}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":51127,\"start\":50964},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":206741496},\"end\":51526,\"start\":51129},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":13805769},\"end\":51825,\"start\":51528},{\"attributes\":{\"id\":\"b3\"},\"end\":52041,\"start\":51827},{\"attributes\":{\"id\":\"b4\"},\"end\":52325,\"start\":52043},{\"attributes\":{\"doi\":\"10.1038/nature16961\",\"id\":\"b5\",\"matched_paper_id\":515925},\"end\":53130,\"start\":52327},{\"attributes\":{\"id\":\"b6\"},\"end\":53388,\"start\":53132},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":206043},\"end\":53788,\"start\":53390},{\"attributes\":{\"doi\":\"10.1109/ICCV.2015.312\",\"id\":\"b8\",\"matched_paper_id\":15693605},\"end\":54492,\"start\":53790},{\"attributes\":{\"id\":\"b9\"},\"end\":54635,\"start\":54494},{\"attributes\":{\"id\":\"b10\"},\"end\":54758,\"start\":54637},{\"attributes\":{\"id\":\"b11\"},\"end\":54877,\"start\":54760},{\"attributes\":{\"id\":\"b12\"},\"end\":55078,\"start\":54879},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":195908774},\"end\":55425,\"start\":55080},{\"attributes\":{\"id\":\"b14\"},\"end\":55625,\"start\":55427},{\"attributes\":{\"id\":\"b15\"},\"end\":55867,\"start\":55627},{\"attributes\":{\"id\":\"b16\"},\"end\":56164,\"start\":55869},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":11715509},\"end\":56355,\"start\":56166},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":8567973},\"end\":56626,\"start\":56357},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":740063},\"end\":56879,\"start\":56628},{\"attributes\":{\"id\":\"b20\"},\"end\":57348,\"start\":56881},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":6383532},\"end\":58025,\"start\":57350},{\"attributes\":{\"doi\":\"10.1109/CVPRW.2014.131\",\"id\":\"b22\"},\"end\":58102,\"start\":58027},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":14564986},\"end\":58416,\"start\":58104},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":623013},\"end\":58943,\"start\":58418},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/2046684.2046692\",\"id\":\"b25\"},\"end\":59041,\"start\":58945},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/1014052.1014066\",\"id\":\"b26\",\"matched_paper_id\":14134514},\"end\":59705,\"start\":59043},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/1081870.1081950\",\"id\":\"b27\",\"matched_paper_id\":6259400},\"end\":60294,\"start\":59707},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":1933015},\"end\":60575,\"start\":60296},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":1128972},\"end\":60924,\"start\":60577},{\"attributes\":{\"doi\":\"10.1007/11856214_5\",\"id\":\"b30\",\"matched_paper_id\":5487461},\"end\":61583,\"start\":60926},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":8672931},\"end\":62010,\"start\":61585},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":523136},\"end\":62391,\"start\":62012},{\"attributes\":{\"id\":\"b33\"},\"end\":62651,\"start\":62393},{\"attributes\":{\"id\":\"b34\"},\"end\":62840,\"start\":62653},{\"attributes\":{\"id\":\"b35\"},\"end\":63098,\"start\":62842},{\"attributes\":{\"id\":\"b36\"},\"end\":63297,\"start\":63100},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/2991079.2991125\",\"id\":\"b37\",\"matched_paper_id\":5976727},\"end\":63960,\"start\":63299},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":13411815},\"end\":64505,\"start\":63962},{\"attributes\":{\"doi\":\"arXiv:1609.01000\",\"id\":\"b39\"},\"end\":64739,\"start\":64507},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":10328909},\"end\":65096,\"start\":64741},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":93596},\"end\":65542,\"start\":65098},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":6161478},\"end\":65966,\"start\":65544},{\"attributes\":{\"id\":\"b43\"},\"end\":66213,\"start\":65968},{\"attributes\":{\"id\":\"b44\"},\"end\":66296,\"start\":66215},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":207114695},\"end\":66737,\"start\":66298},{\"attributes\":{\"id\":\"b46\"},\"end\":66902,\"start\":66739},{\"attributes\":{\"id\":\"b47\"},\"end\":67261,\"start\":66904},{\"attributes\":{\"id\":\"b48\"},\"end\":67367,\"start\":67263},{\"attributes\":{\"id\":\"b49\"},\"end\":67459,\"start\":67369},{\"attributes\":{\"id\":\"b50\"},\"end\":67600,\"start\":67461},{\"attributes\":{\"id\":\"b51\"},\"end\":67789,\"start\":67602},{\"attributes\":{\"id\":\"b52\"},\"end\":67944,\"start\":67791}]", "bib_title": "[{\"end\":51183,\"start\":51129},{\"end\":51591,\"start\":51528},{\"end\":52393,\"start\":52327},{\"end\":53476,\"start\":53390},{\"end\":53866,\"start\":53790},{\"end\":55143,\"start\":55080},{\"end\":56211,\"start\":56166},{\"end\":56404,\"start\":56357},{\"end\":56657,\"start\":56628},{\"end\":56964,\"start\":56881},{\"end\":57416,\"start\":57350},{\"end\":58178,\"start\":58104},{\"end\":58446,\"start\":58418},{\"end\":59069,\"start\":59043},{\"end\":59727,\"start\":59707},{\"end\":60341,\"start\":60296},{\"end\":60614,\"start\":60577},{\"end\":60989,\"start\":60926},{\"end\":61638,\"start\":61585},{\"end\":62063,\"start\":62012},{\"end\":63380,\"start\":63299},{\"end\":64047,\"start\":63962},{\"end\":64818,\"start\":64741},{\"end\":65179,\"start\":65098},{\"end\":65621,\"start\":65544},{\"end\":66031,\"start\":65968},{\"end\":66387,\"start\":66298},{\"end\":66970,\"start\":66904}]", "bib_author": "[{\"end\":51195,\"start\":51185},{\"end\":51206,\"start\":51195},{\"end\":51216,\"start\":51206},{\"end\":51606,\"start\":51593},{\"end\":51617,\"start\":51606},{\"end\":51910,\"start\":51898},{\"end\":51917,\"start\":51910},{\"end\":51927,\"start\":51917},{\"end\":52099,\"start\":52091},{\"end\":52114,\"start\":52099},{\"end\":52124,\"start\":52114},{\"end\":52134,\"start\":52124},{\"end\":52148,\"start\":52134},{\"end\":52160,\"start\":52148},{\"end\":52174,\"start\":52160},{\"end\":52405,\"start\":52395},{\"end\":52414,\"start\":52405},{\"end\":52428,\"start\":52414},{\"end\":52436,\"start\":52428},{\"end\":52445,\"start\":52436},{\"end\":52466,\"start\":52445},{\"end\":52483,\"start\":52466},{\"end\":52497,\"start\":52483},{\"end\":52515,\"start\":52497},{\"end\":52526,\"start\":52515},{\"end\":52538,\"start\":52526},{\"end\":52547,\"start\":52538},{\"end\":52555,\"start\":52547},{\"end\":52571,\"start\":52555},{\"end\":52584,\"start\":52571},{\"end\":52597,\"start\":52584},{\"end\":52606,\"start\":52597},{\"end\":52621,\"start\":52606},{\"end\":52632,\"start\":52621},{\"end\":52644,\"start\":52632},{\"end\":53146,\"start\":53134},{\"end\":53486,\"start\":53478},{\"end\":53495,\"start\":53486},{\"end\":53501,\"start\":53495},{\"end\":53509,\"start\":53501},{\"end\":53522,\"start\":53509},{\"end\":53876,\"start\":53868},{\"end\":53884,\"start\":53876},{\"end\":53898,\"start\":53884},{\"end\":53906,\"start\":53898},{\"end\":54544,\"start\":54532},{\"end\":54678,\"start\":54662},{\"end\":54808,\"start\":54800},{\"end\":54813,\"start\":54808},{\"end\":54818,\"start\":54813},{\"end\":54940,\"start\":54931},{\"end\":55159,\"start\":55145},{\"end\":55172,\"start\":55159},{\"end\":55184,\"start\":55172},{\"end\":55507,\"start\":55495},{\"end\":55520,\"start\":55507},{\"end\":55697,\"start\":55686},{\"end\":55710,\"start\":55697},{\"end\":55719,\"start\":55710},{\"end\":55729,\"start\":55719},{\"end\":55738,\"start\":55729},{\"end\":55938,\"start\":55927},{\"end\":55949,\"start\":55938},{\"end\":55962,\"start\":55949},{\"end\":55971,\"start\":55962},{\"end\":55977,\"start\":55971},{\"end\":55988,\"start\":55977},{\"end\":55999,\"start\":55988},{\"end\":56007,\"start\":55999},{\"end\":56228,\"start\":56213},{\"end\":56414,\"start\":56406},{\"end\":56426,\"start\":56414},{\"end\":56668,\"start\":56659},{\"end\":56676,\"start\":56668},{\"end\":56976,\"start\":56966},{\"end\":56986,\"start\":56976},{\"end\":56996,\"start\":56986},{\"end\":57432,\"start\":57418},{\"end\":57444,\"start\":57432},{\"end\":57456,\"start\":57444},{\"end\":57468,\"start\":57456},{\"end\":58191,\"start\":58180},{\"end\":58203,\"start\":58191},{\"end\":58217,\"start\":58203},{\"end\":58457,\"start\":58448},{\"end\":58469,\"start\":58457},{\"end\":58479,\"start\":58469},{\"end\":58495,\"start\":58479},{\"end\":58506,\"start\":58495},{\"end\":59080,\"start\":59071},{\"end\":59092,\"start\":59080},{\"end\":59102,\"start\":59092},{\"end\":59113,\"start\":59102},{\"end\":59120,\"start\":59113},{\"end\":59737,\"start\":59729},{\"end\":59745,\"start\":59737},{\"end\":60628,\"start\":60616},{\"end\":60636,\"start\":60628},{\"end\":61002,\"start\":60991},{\"end\":61010,\"start\":61002},{\"end\":61018,\"start\":61010},{\"end\":61651,\"start\":61640},{\"end\":61660,\"start\":61651},{\"end\":62446,\"start\":62435},{\"end\":62457,\"start\":62446},{\"end\":62470,\"start\":62457},{\"end\":62479,\"start\":62470},{\"end\":62488,\"start\":62479},{\"end\":62502,\"start\":62488},{\"end\":62512,\"start\":62502},{\"end\":62717,\"start\":62701},{\"end\":62727,\"start\":62717},{\"end\":62738,\"start\":62727},{\"end\":62908,\"start\":62896},{\"end\":62920,\"start\":62908},{\"end\":62934,\"start\":62920},{\"end\":62941,\"start\":62934},{\"end\":62952,\"start\":62941},{\"end\":62961,\"start\":62952},{\"end\":63160,\"start\":63137},{\"end\":63169,\"start\":63160},{\"end\":63178,\"start\":63169},{\"end\":63190,\"start\":63178},{\"end\":63390,\"start\":63382},{\"end\":63399,\"start\":63390},{\"end\":63409,\"start\":63399},{\"end\":64058,\"start\":64049},{\"end\":64068,\"start\":64058},{\"end\":64078,\"start\":64068},{\"end\":64088,\"start\":64078},{\"end\":64100,\"start\":64088},{\"end\":64111,\"start\":64100},{\"end\":64120,\"start\":64111},{\"end\":64130,\"start\":64120},{\"end\":64143,\"start\":64130},{\"end\":64153,\"start\":64143},{\"end\":64516,\"start\":64507},{\"end\":64525,\"start\":64516},{\"end\":64541,\"start\":64525},{\"end\":64827,\"start\":64820},{\"end\":64833,\"start\":64827},{\"end\":64845,\"start\":64833},{\"end\":64852,\"start\":64845},{\"end\":65194,\"start\":65181},{\"end\":65201,\"start\":65194},{\"end\":65214,\"start\":65201},{\"end\":65634,\"start\":65623},{\"end\":65641,\"start\":65634},{\"end\":65652,\"start\":65641},{\"end\":65663,\"start\":65652},{\"end\":65672,\"start\":65663},{\"end\":65681,\"start\":65672},{\"end\":65692,\"start\":65681},{\"end\":66045,\"start\":66033},{\"end\":66396,\"start\":66389},{\"end\":66405,\"start\":66396},{\"end\":66413,\"start\":66405},{\"end\":66421,\"start\":66413},{\"end\":66428,\"start\":66421},{\"end\":66435,\"start\":66428},{\"end\":66801,\"start\":66792},{\"end\":66978,\"start\":66972},{\"end\":67651,\"start\":67640}]", "bib_venue": "[{\"end\":51015,\"start\":50964},{\"end\":51303,\"start\":51216},{\"end\":51636,\"start\":51617},{\"end\":51896,\"start\":51827},{\"end\":52089,\"start\":52043},{\"end\":52669,\"start\":52663},{\"end\":53205,\"start\":53146},{\"end\":53545,\"start\":53522},{\"end\":54021,\"start\":53927},{\"end\":54530,\"start\":54494},{\"end\":54660,\"start\":54637},{\"end\":54798,\"start\":54760},{\"end\":54929,\"start\":54879},{\"end\":55233,\"start\":55184},{\"end\":55493,\"start\":55427},{\"end\":55684,\"start\":55627},{\"end\":55925,\"start\":55869},{\"end\":56243,\"start\":56228},{\"end\":56475,\"start\":56426},{\"end\":56727,\"start\":56676},{\"end\":57064,\"start\":56996},{\"end\":57576,\"start\":57468},{\"end\":58236,\"start\":58217},{\"end\":58597,\"start\":58506},{\"end\":59274,\"start\":59161},{\"end\":59901,\"start\":59786},{\"end\":60402,\"start\":60343},{\"end\":60695,\"start\":60636},{\"end\":61139,\"start\":61036},{\"end\":61749,\"start\":61660},{\"end\":62155,\"start\":62065},{\"end\":62433,\"start\":62393},{\"end\":62699,\"start\":62653},{\"end\":62894,\"start\":62842},{\"end\":63135,\"start\":63100},{\"end\":63541,\"start\":63450},{\"end\":64207,\"start\":64153},{\"end\":64598,\"start\":64557},{\"end\":64901,\"start\":64852},{\"end\":65255,\"start\":65214},{\"end\":65736,\"start\":65692},{\"end\":66065,\"start\":66045},{\"end\":66230,\"start\":66215},{\"end\":66449,\"start\":66435},{\"end\":66790,\"start\":66739},{\"end\":67011,\"start\":66978},{\"end\":67289,\"start\":67263},{\"end\":67393,\"start\":67369},{\"end\":67503,\"start\":67461},{\"end\":67638,\"start\":67602},{\"end\":67826,\"start\":67791},{\"end\":51642,\"start\":51638},{\"end\":54121,\"start\":54023},{\"end\":57119,\"start\":57066},{\"end\":57690,\"start\":57578},{\"end\":58692,\"start\":58599},{\"end\":59391,\"start\":59276},{\"end\":60020,\"start\":59903},{\"end\":60448,\"start\":60404},{\"end\":60763,\"start\":60697},{\"end\":61247,\"start\":61141},{\"end\":61825,\"start\":61751},{\"end\":62232,\"start\":62157},{\"end\":63636,\"start\":63543}]"}}}, "year": 2023, "month": 12, "day": 17}