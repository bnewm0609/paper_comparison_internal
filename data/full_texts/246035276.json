{"id": 246035276, "updated": "2023-10-05 17:45:54.034", "metadata": {"title": "Language Models as Zero-Shot Planners: Extracting Actionable Knowledge for Embodied Agents", "authors": "[{\"first\":\"Wenlong\",\"last\":\"Huang\",\"middle\":[]},{\"first\":\"Pieter\",\"last\":\"Abbeel\",\"middle\":[]},{\"first\":\"Deepak\",\"last\":\"Pathak\",\"middle\":[]},{\"first\":\"Igor\",\"last\":\"Mordatch\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Can world knowledge learned by large language models (LLMs) be used to act in interactive environments? In this paper, we investigate the possibility of grounding high-level tasks, expressed in natural language (e.g.\"make breakfast\"), to a chosen set of actionable steps (e.g.\"open fridge\"). While prior work focused on learning from explicit step-by-step examples of how to act, we surprisingly find that if pre-trained LMs are large enough and prompted appropriately, they can effectively decompose high-level tasks into mid-level plans without any further training. However, the plans produced naively by LLMs often cannot map precisely to admissible actions. We propose a procedure that conditions on existing demonstrations and semantically translates the plans to admissible actions. Our evaluation in the recent VirtualHome environment shows that the resulting method substantially improves executability over the LLM baseline. The conducted human evaluation reveals a trade-off between executability and correctness but shows a promising sign towards extracting actionable knowledge from language models. Website at https://huangwl18.github.io/language-planner", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2201.07207", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icml/HuangAPM22", "doi": null}}, "content": {"source": {"pdf_hash": "92a8f7f09f3705cb5a6009a42220a6f01ea084e8", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2201.07207v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "f9a4735a95e983899da05b989db03e943393858b", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/92a8f7f09f3705cb5a6009a42220a6f01ea084e8.txt", "contents": "\nLanguage Models as Zero-Shot Planners: Extracting Actionable Knowledge for Embodied Agents\n\n\nWenlong Huang \nPieter Abbeel \nDeepak Pathak \nIgor Mordatch \nGoogle \n\nUC Berkeley\nBerkeley\n\n\nCarnegie Mellon University\n\n\nLanguage Models as Zero-Shot Planners: Extracting Actionable Knowledge for Embodied Agents\n\nCan world knowledge learned by large language models (LLMs) be used to act in interactive environments? In this paper, we investigate the possibility of grounding high-level tasks, expressed in natural language (e.g. \"make breakfast\"), to a chosen set of actionable steps (e.g. \"open fridge\"). While prior work focused on learning from explicit step-by-step examples of how to act, we surprisingly find that if pre-trained LMs are large enough and prompted appropriately, they can effectively decompose high-level tasks into mid-level plans without any further training. However, the plans produced naively by LLMs often cannot map precisely to admissible actions. We propose a procedure that conditions on existing demonstrations and semantically translates the plans to admissible actions. Our evaluation in the recent VirtualHome environment shows that the resulting method substantially improves executability over the LLM baseline. The conducted human evaluation reveals a trade-off between executability and correctness but shows a promising sign towards extracting actionable knowledge from language models.Task: Brush teethStep 1: Go to bathroomWalk to KitchenOpen Fridge Grab Milk Close FridgeFigure 1: Executability v.s. semantic correctness of generated plans (left), sample plans by different models (right), and example environment execution (bottom). Large models can produce action plans indistinguishable from those by humans, but frequently are not executable in the environment. Using our techniques, we can significantly improve executability, albeit at the cost of correctness. More samples can be found in Appendix A.5.\n\nIntroduction\n\nLarge language models (LLMs) have made impressive advances in language generation and understanding in recent years [10,39,40,5]. See [4] for a recent summary of their capabilities and impacts. Being trained on large corpora of human-produced language, these models are thought to contain a lot of information about the world [42,23,3] -albeit in linguistic form.\n\nWe ask whether we can use such knowledge contained in LLMs not just for linguistic tasks, but to make goal-driven decisions that can be enacted in interactive, embodied environments. But we are not simply interested in whether we can train models on a dataset of demonstrations collected for some specific environment -we are instead interested in whether LLMs already contain information necessary to accomplish goals without any additional training.\n\nMore specifically, we ask whether world knowledge about how to perform high-level tasks (such as \"make breakfast\") can be expanded to a series of groundable actions (such as \"open fridge\", \"grab milk\", \"close fridge\", etc) that can be executed in the environment. For our investigation, we use the recently proposed VirtualHome environment [38]. It can simulate a large variety of realistic human activities in a household environment and supports the ability to perform them via embodied actions defined with a verb-object syntax. However, due to the open-ended nature of the tasks, it is difficult to autonomously evaluate their success. We rely on human evaluation (conducted on Mechanical Turk) to decide whether sequences of actions meaningfully accomplish posed tasks.\n\nWe find that large GPT-3 [5] and Codex [7] models, when prompted with a single fixed example of a task description and its associated sequence of actions, can produce very plausible action plans for the task we're interested in. Such completions reflect the information already stored in the model -no model fine-tuning is involved. Additionally, we only observe this effect in the larger models. Unfortunately, despite their semantic correctness, the produced action plans are often not executable in the environment. Produced actions may not map precisely to admissible actions, or may contain various linguistic ambiguities.\n\nWe propose several tools to improve executability of the model's outputs. First, we enumerate all admissible actions and map the model's output phrases to the most semantically-similar admissible action (we use similarity measure between sentence embeddings produced by a RoBERTa model [27] in this work, but other choices are possible). Second, we use the model to autoregressively generate actions in a plan by conditioning past actions that have been made admissible via the technique above. Such on-the-fly correction can keep generation anchored to admissible actions. Third, we provide weak supervision to the model by prompting the model with a known task example similar to the query task. This is somewhat reminiscent of prompt tuning approaches but does not require access to gradients or internals of the model.\n\nUsing the above tools to bias model generation, we find that we improve executability of action plans from 18% to 79% (see Figure 1) without any invasive modifications to model parameters or any extra gradient or internal information beyond what is returned from the model's forward pass. This is advantageous because it does not require any modifications to the model training procedure and can fit within existing model serving pipelines. However, we do find there to be some drop in correctness of the action sequences generated with the above tools (as judged by humans), indicating a promising step, but requiring more research on the topic.\n\nTo summarize, our paper's contributions are as follows:\n\n\u2022 We show that without any training, large language models can be prompted to generate plausible goal-driven action plans, but such plans are frequently not executable in interactive environments.\n\n\u2022 We propose several tools to improve executability of the model generation without invasive probing or modifications to the model.\n\n\u2022 We conduct a human evaluation of multiple techniques and models and report on the trade-offs between executability and semantic correctness.\n\n\nTask: Shave\n\nStep 1: Grab razor\n\nStep 2: Wash razor\n\nStep 3: Switch on razor Task: Apply lotion\n\nStep 1: Pour lotion into right hand\n\nStep 2:\n\nTask: Shave\n\nStep 1: Grab razor\n\nStep 2: Switch on razor\n\nStep 3: Put razor on face Task: Apply lotion\n\n\nPre-Trained Causal LLM\n\n\nFrozen\n\n\nPre-Trained Masked LLM\n\n\nFrozen\n\nStep 1: Squeeze out a glob of lotion\n\nStep 1: Pour lotion into right hand\n\nStep 1: Squeeze out a glob of lotion\n\n\nPre-Trained Causal LLM\n\n\nFrozen\n\nZero-Shot Planning via Causal LLM Translation to Admissible Action\n\nStep-By-Step Autoregressive Generation Prompt Prompt Figure 2: We investigate the possibility of extracting actionable knowledge from pre-trained large language models (LLMs). We first show surprising finding that pre-trained causal LLMs can decompose high-level tasks into sensible mid-level action plans (left). To make the plans executable, we propose to translate each step into admissible action via another pre-trained masked LLM (middle). The translated action is appended to the prompt used for generating the remaining steps (right). All models are kept frozen without additional training.\n\n\nEvaluation Framework\n\nSimulating open-ended tasks that resemble naturalistic human activities requires an environment to support a rich set of diverse interactions, rendering most existing embodied environments unsuitable for our investigation. One exception is VirtualHome [38], which we evaluate on as it models complex human activities, though only in a household setting. To measure correctness of the generated action plans, for which evaluating computationally is inherently difficult for these open-ended tasks, we conduct a human evaluation similar to Puig et al. [38]. We note that since no further training is involved throughout our investigations, the observations and findings presented in this paper should also translate to similar embodied environments, likely even beyond the household domain.\n\n\nEvaluated Environment: VirtualHome\n\nPreliminaries In VirtualHome, activities are expressed as programs. Each program consists of a sequence of textual action steps, where each step is written as: [action] arg (idx). Each action refers to one of the 42 atomic actions supported in VirtualHome, such as \"walk\" and \"open\". Full list of atomic actions can be found in Appendix A.4. Different actions take in different numbers of arg, such as \"bedroom\" and \"fridge\", that are necessary for specifying an interaction. Associated with each arg is a unique id specifying the corresponding node in the environment graph, in case of multiple instances of the same object class are present in the graph. For the sake of simplicity, we omit the id in the remaining discussions of this paper and allow automatic assignment by the environment. An example program is shown below for the task \"Relax on sofa\": Each entry contains 1) a high-level task name (e.g. \"Watch TV\"), 2) detailed instructions expressed in natural language to complete the task (e.g. \"Sit on my couch directly opposite my TV, switch on my TV with the remote control and watch\"), and 3) an executable program containing all necessary steps for a robotic agent (example above). We omit the use of detailed instructions (2) as we desire direct extraction of executable programs (3) from only high-level task names (1). There are 292 distinct high-level tasks in the knowledge base, from which we randomly sample 88 held-out tasks for evaluation. The remaining 204 tasks are used as demonstration set from which we are allowed Algorithm 1: Generating Action Plans from Pre-Trained Language Models\n[\nNotation Summary: LM P : text completion language model (also referred as Planning LM) LM T : text embedding language model (also referred as Translation LM)\n{(T i , E i )} N i=1\n: demonstration set, where T is task name and E is example plan for T C: cosine similarity function P : mean token log probability under LM P Input: query task name Q, e.g. \"make breakfast\" Output: action plan consisting of admissible env actions, e.g. \"open fridge\"\n\nExtract most similar example (T * , E * ) whose T * maximizes C(LM T (T ), LM T (Q)) Initialize prompt with (T * + E * + Q) while max step is not reached do\n\nSample LM P with current prompt to obtain k single-step action phrases for each sample\u00e2 and each admissible env action a e do Calculate ranking score by C(LM T (\u00e2), LM T (a e )) + \u03b2 \u00b7 P (\u00e2) end for Append highest-scoring env action a * e to prompt Append a * e to output if > 50% samples are 0-length or highest score < then break end if end while to select as example(s) for prompting language models, or in the case of supervised fine-tuning baselines, they are used to fine-tune pre-trained language models.\n\n\nMetrics\n\nA program that commands the agent to wander around in a household environment is highly executable but is mostly not correct. On the other hand, a program composed of natural language instructions annotated by humans is likely correct but cannot be executed, because its format is ambiguous and may lack necessary common-sense actions (e.g. fridge must be opened before an agent can grab things from it). We thus consider two axes for evaluation: executability and correctness.\n\nExecutability Executability measures whether an action plan can be correctly parsed and satisfies the common-sense constraints of the environment. To be correctly parsed, an action plan must be syntactically correct and contain only allowed actions and recognizable objects. To satisfy the common-sense constraints, each action step must not violate the set of its pre-conditions (e.g. the agent cannot grab milk from the fridge before opening it) and post-conditions (e.g. the state of the fridge changes from \"closed\" to \"open\" after the agent opens it). We report the average executability across all 88 tasks and all 7 VirtualHome scenes.\n\nCorrectness Unlike most embodied environments where the completion of a task can be easily judged, the ambiguous and multimodal nature of natural language task specification makes it impractical to obtain a gold-standard measurement of correctness 1 . Therefore, we conduct human evaluations for the main methods. For the remaining analysis, we rely on a match-based metric that measures how similar a generated program is to human annotations. Specifically, we follow Puig et al. [38] and calculate the longest common subsequence (LCS) between two programs, normalized by the maximum length of the two. In the presence of multiple human-written programs for a single task, we take the maximum LCS across them. However, we note that the majority of the tasks only have one human annotation, but there are often many plausible ways to complete a certain task, making this metric imperfect at evaluation program correctness 2 . Although correlation between the two is shown by Puig et al. [38], we consider it only as a proxy metric in replacement of unscalable human evaluation.\n\n\nMethod\n\nIn this section, we investigate the possibility of extracting actionable knowledge from pre-trained language models without further training. We first give an overview of the common approach to query large language models (LLMs) and how it may be used for embodied agents in Section 3.1. Then we describe an inference-time procedure that addresses several deficiencies of the LLM baseline and offers better executability in embodied environments. We break down the proposed procedure into three individual components, each discussed in Section 3.2, 3.3, 3.4. Pseudo-code is in Algorithm 1.\n\nSince LMs excel at dealing with natural language text instead of the specific format required by VirtualHome as described in Section 2.1, we only expose natural language text to LMs. To do this, we define a bi-directional mapping for each atomic action that converts between the natural language format and the program format. For instance, \"walk to living room\" is mapped to (1). Full list of the mappings is in Appendix A.4.\n[WALK] living_room\n\nQuerying LLMs for Action Plans\n\nPrevious works have shown that large language models pre-trained on a colossal amount of data would internalize rich world knowledge that can be probed to perform various downstream tasks [39,5]. Notably, autoregressive LLMs can even perform in-context learning, an ability to solve tasks using only contextual information without gradient updates [5]. Contextual information is given as part of the input prompt and LMs are asked to complete the remaining text. It often consists of natural language instructions and/or a number of examples containing the desired input/output pairs. We adopt the same approach to query LLMs to generate action plans for high-level tasks. Specifically, we prepend one example high-level task and its annotated action plan from the demonstration set to the query task, as shown in Figure 2. To obtain text completion results, we sample from autoregressive LLM using temperature sampling and nucleus sampling [18]. We refer to this LM as Planning LM and the approach using this LM for plan generation as Vanilla LM , where LM is replaced by specific language model such as GPT-3.\n\nTo improve the generation quality, we follow Chen et al. [7] to sample multiple outputs for each query. However, unlike Chen et al. [7] who investigate program synthesis and can choose the sample with highest unit test pass rate, we only consider the setting where one sample is allowed to be evaluated for each task. This is because repetitive trial-and-error is equivalent to probing the environment for privileged information, which should not be considered viable in our setting. For Vanilla LM , to choose the best action plan X * among k samples (X 1 , X 2 , ..., X k ), each consisting of n i tokens X i = (x i,1 , x i,2 , ..., x i,ni ), we select the sample with highest mean log probability as follows:\nargmax Xi P \u03b8 (X i ) := 1 n i ni j=1 log p \u03b8 (x i,j |x i,<j ) where \u03b8 parameterizes the Planning LM. (1)\n\nAdmissible Action Parsing by Semantic Translation\n\nOne issue arises when naively following the above approach to generate action plans: the plan expressed in free-form language often cannot be mapped to unambiguous actionable steps and thus is not executable by a robotic agent. Many reasons can cause such failures: 1) the output does not follow pre-defined mappings of any atomic action (e.g. \"I first walk to the bedroom\" is not of the format \"walk to PLACE \"), 2) the output may refer to atomic action and objects using words unrecognizable by the environment (e.g. \"microwave the chocolate milk\" where \"microwave\" and \"chocolate milk\" cannot be mapped to precise action and object), or 3) the output contains lexically ambiguous words (e.g. \"open TV\" should instead be \"switch on TV\").\n\nInstead of developing a set of rules to transform the free-form text into admissible action steps, we propose to again leverage world knowledge learned by language models to semantically translate the action. For each admissible environment action a e , we calculate its semantic distance to the predicted action phrase\u00e2 by cosine similarity:\nC(f (\u00e2), f (a e )) := f (\u00e2) \u00b7 f (a e ) f (\u00e2) f (a e )\nwhere f is an embedding function.\n\nTo embed the output action phrase and environment actions, we use a BERT-style LM [10,27] pre-trained with Sentence-BERT [41] objective, to which we refer as Translation LM 3 . The action embedding is obtained by mean-pooling the last layer hidden states across all tokens in that action phrase. While the set of admissible actions in our environment is discrete and possible to exhaustively enumerate, sampling or projection can be employed in larger discrete or continuous action spaces.\n\n\nAutoregressive Trajectory Correction\n\nTranslating each step of the program after the entire program has been synthesized lacks consideration of achievability of individual steps and subjects to compounding errors. In practice, LLMs might output compounded instructions for a single step, even though it cannot be completed using one admissible action in the environment. To this end, we can instead interleave plan generation and action translation to allow for automatic trajectory correction. At each step, we first query Planning LM to generate k samples for a single action (\u00e2 1 ,\u00e2 2 , ...,\u00e2 k ). For each sample\u00e2, we consider both its semantic soundness and its achievability in the environment. Specifically, we aim to find admissible environment action a e by modifying the ranking scheme described in Equation 1 as follows:\nargmax ae max a C(f (\u00e2), f (a e )) + \u03b2 \u00b7 P \u03b8 (\u00e2) where \u03b2 is a weighting coefficient.(3)\nThen we append the translated environment action a e to the unfinished text completion. This way all subsequent steps will be conditioned on admissible actions instead of free-form action phrases generated by Planning LM. Furthermore, we can use Translation LM to detect out-of-distribution actions, those outside the capabilities of a robot, and terminate a program early instead of mapping to a faulty action. This can be achieved by setting a threshold such that if max\u00e2 ,ae C(f (\u00e2), f (a e )) + \u03b2 \u00b7 P \u03b8 (\u00e2) < at step t, the program is terminated early. Since we now sample Planning LM for individual steps instead of an entire sequence, another termination condition we consider is when > 50% of current-step samples are 0-length (excluding leading or trailing non-English text tokens).\n\n\nDynamic Example Selection for Improved Knowledge Extraction\n\nSo far in the text, we always give the same example in the prompt for all query tasks. However, consider the task of \"ordering pizza\". Prompting LLMs with this task may give the assumption that the agent is initialized in front of a computer, and the LLMs may guide the agent to search for a pizza store and click \"checkout my cart\". Although these are reasonable and feasible in the real world, such assumption cannot always be made as these interactions may not be supported in simulated environments. In fact, the closest series of actions that human experts give in VirtualHome may be \"walking to a computer\", \"switching on the computer\", and \"typing the keyboard\". Without being fine-tuned on these data, LLMs would often fail at these tasks.\n\nTo provide weak supervision at inference time, we propose to select the most similar task T and its example plan E from the demonstration set to be used as the example in the prompt. Specifically, we re-use the same Translation LM introduced in Section 3.2 and select (T * , E * ) whose high-level task name T * maximizes C(f (T ), f (Q)), where Q is the query task. This approach bears resemblance to several recent works [37,13,26,43]. An example is shown in Figure 2 where \"Shave\" is the most similar to the query task \"Apply lotion\".\n\nFINAL METHOD Combining the various improvement discussed above, we refer to the final method as Translated LM , where LM is replaced by specific language model used such as GPT-3.  Figure 3: Visualization of VirtualHome programs generated by our approach. The top row shows the execution of the task \"Complete Amazon Turk Surveys\", and the bottom row shows the task \"Get Glass of Milk\". We show LLMs not only can generate sensible action plans given only high-level tasks but also contains the actionable knowledge that can be extracted for grounding in embodied environments.\n\n\nResults\n\nIn this section, we first show that language models can generate sensible action plans for many high-level tasks, even without any additional training. Then we highlight its inadequacy when naively applied to embodied environments and demonstrate how this can be improved by again leveraging world knowledge learned by LLMs. Visualization of generated programs is shown in Figure 3.\n\nSampling from LMs Pre-trained LMs are sensitive to sampling parameters and the specific example given in the prompt. For all evaluated methods, we perform hyperparameter search over various sampling parameters, and for methods using a fixed prompt example, we report metrics averaged across three randomly chosen examples. To select the best run for each method, we rank the runs by the sum of LCS and executability, each normalized by human-expert scores. Further details are in Appendix A.1.\n\nModel Choices For Planning LM, we evaluate a representative set of causal language models. For Translation LM, we mainly use Sentence-RoBERTa-355M and provide relevant ablations in Section 5.3. GPT-3 and Codex are accessed using OpenAI API, and the remaining models are accessed through open-source packages, Hugging Face Transformers [55] and SentenceTransformers [41], all without additional training (except for the fine-tuning baseline).\n\n\nDo LLMs contain actionable knowledge for high-level tasks?\n\nWe first investigate whether LLMs can generate sensible action plans expressed in free-form language. We use the approach described in Section 3.1 to query pre-trained LLMs. To evaluate the correctness of generated action plans, we conduct human evaluations. For each model, we ask 10 human annotators to determine -by answering \"Yes\" or \"No\" -whether each task can be completed using provided action steps. To provide a reference of how humans might rate the action plans provided by other humans, we also ask annotators to rate the human-written action plans included in the VirtualHome dataset for the same set of tasks. In contrast to the free-form text output by LLMs, humans wrote the plans using a graphical programming interface that enforces strict syntax and a chosen set of atomic action vocabulary, which limit the expressivity and the completeness of their answers 4 . More details of our human evaluation procedure can be found in Appendix A.2.\n\nWe show the human evaluation results in Figure 1, where the y-axis shows correctness averaged across all tasks and all annotators. Surprisingly, when LLMs are large enough and without imposed syntactic constraints, they can generate highly realistic action plans whose correctness -as deemed by human annotators -even surpasses human-written action plans. We also observe some level of correctness for smaller models such as GPT-2. However, inspection of its produced output indicates 4 Puig et al. [38] also conduct a human evaluation on 100 randomly sampled human-written programs and show that 64% of them are complete (i.e. contain all necessary steps). Readers are encouraged to refer to Puig et al. [38] for a more comprehensive analysis of the dataset. by large language models can match or even surpass human-written plans in correctness measure, they are rarely executable. By translating the naive action plans, we show an important step towards grounding LLMs in embodied environments, but we observe room to achieve this without trading executability for correctness. We also observe a failure mode among smaller models that lead to high executability. For correctness measure, standard error of the mean across 10 human annotators is reported in the parenthesis.\n\nthat it often generates shorter plans by ignoring common-sense actions or by simply rephrasing the given task (e.g. the task \"Go to sleep\" produces only a single step \"Go to bed\"). These failure modes sometimes mislead human annotators to mark them correct as the annotators may ignore common-sense actions in their judgment as well, resulting in a higher correctness rate than the quality of the output shows.\n\n\nHow executable are the LLM action plans?\n\nWe analyze the executability of LLM plans by evaluating them in all 7 household scenes in Virtual-Home. As shown in Table 1, we find action plans generated naively by LLMs are generally not very executable. Although smaller models seem to have higher executability, we find that the majority of these executable plans are produced by ignoring the queried task and repeating the given example of a different task. This is validated by the fact that smaller models have lower LCS than larger models despite having high executability, showing that this failure mode is prevalent among smaller models. In contrast, larger models do not suffer severely from this failure mode. Yet as a result of being more expressive, their generated programs are substantially less executable.\n\n\nCan LLM action plans be made executable by proposed procedure?\n\nWe evaluate the effectiveness of our proposed procedure of action translation. We first create a bank of all allowed 47522 action steps in the environment, including all possible combinations of atomic actions and allowed arguments/objects. Then we use an off-the-shelf Sentence-RoBERTa [27,41] as Translation LM to create embeddings for actions and output text. For better computational efficiency, we pre-compute the embeddings for all allowed actions, leaving minor computation overhead for our procedure over the baseline methods at inference time. As shown in Table 1, executability of generated programs is significantly improved. Furthermore, we also observe improved LCS because the translated action steps precisely follow the program syntax and thus are more similar to the plans produced by human experts. Sample output is shown in Figure 1 and a larger random subset of generated samples can be found in Appendix A.5.\n\nTo validate their correctness, we again perform human evaluations using the same procedure from Section 4.1. Results are shown in Table 1. We find that despite being more similar to human-written plans as they follow strict syntax, the programs are deemed less correct by humans compared to their vanilla counterparts. By examining the output, we observe two main sources of errors. First, we find Translation LM is poor at mapping compounded instructions to a succinct admissible action, e.g. \"brush teeth with toothbrush and toothpaste\". Second, we find that the generated programs are sometimes terminated too early. This is partly due to the imperfect expressivity of the environment; certain necessary actions or objects are not implemented to fully achieve some tasks, so Translation LM cannot map to a sufficiently similar action. This is also reflected by our human evaluation results of the programs written by other humans, as only 70% of the programs are considered complete.\n\n\nAnalysis and Discussions\n\n\nAblation of design decisions\n\nWe perform ablation studies for the three components of our proposed procedure, described in Section 3.2, 3.3, and 3.4 respectively. As shown in Table 2 \n\n\nAre the generated action plans grounded in the environment?\n\nSince successful execution of correct action plans directly measures grounding, we calculate the percentage of generated action plans that are both correct and executable. We deem an action plan to be correct if 70% or more human annotators decide it is correct. Human-written plans are 100% executable, of which 65.91% are deemed correct. Results for LMs are shown in Figure 4.\n\nAlthough smaller LMs such as GPT-2 can generate highly executable action plans as shown in Table 1, these executable plans mostly are not correct, as they often repeat the given example or do not contain all necessary steps. Increasing model parameters can lead to some improvement in generating plans that are both executable and correct, yet it scales poorly with the parameter count. In the meantime, action translation offers a promising way towards grounding actionable knowledge by producing executable and correct plans, though a large gap remains to be closed to reach human-level performance (65.91%).  Figure 4: Percentage of both executable and correct action plans generated by LMs.\n\n\nEffect of Different Translation LMs\n\nIn this section, we study the effect of using different Translation LM. We compare two size variants of Sentence BERT and Sentence RoBERTa [10,27,41] trained on the STS benchmark [6] and a baseline using averaged GloVe embeddings [35]. Results are shown in Table 3. Notably, we do not observe significant differences in executability and LCS across different variants of BERT and RoBERTa. We hypothesize that this is because any language models trained on reasonably large datasets should be capable of the single-step action phrase translation considered in this work. However, simply using average GloVe embeddings would lead to significantly reduced performance.  Table 3: Effect of different Translation LMs on executability and LCS.\n\n\nCan LLMs generate actionable programs by following step-by-step instructions?\n\nPrior works often focus on translating step-by-step instructions into executable programs. Specifically, instead of only providing a high-level task name, how-to instructions are also provided, as shown in Figure 5. Although this setting is easier as it does not require rich prior knowledge, how-to instructions can help resolve much ambiguity of exactly how to perform a high-level task when multiple solutions are possible. To investigate whether pre-trained LLMs are capable of doing this without additional training, we include these instructions in the prompt and evaluate LLMs with the proposed procedure. We compare to a supervised baseline from VirtualHome that trains an LSTM [17] from scratch on human-annotated data. Since the code to train the baseline is not publicly released and a different train/test split is likely used, we only show results reported in Puig et al. [38] as a crude reference. We also cannot compare executability as it is not reported. Results are shown in Table 4. Surprisingly, without being fine-tuned on any domain data, Translated Codex/GPT-3 can attain LCS close to supervised methods while generating highly executable programs.\n\nTask: Read book Description: Walk to home office, turn on light, grab a book, sit in chair, start to read the book.\n\nStep 1: Walk to home office\n\nStep 2: Walk to light\n\nStep 3: Find light\n\nStep 4: Switch on light\n\nStep 5: Find novel\n\nStep 6: Grab novel\n\nStep 7: Find chair\n\nStep 8: Sit on chair\n\nStep 9: Read novel Task: Find dictionary Description: Move towards the bookshelf, scan the bookshelf for the dictionary, when the dictionary is found, pick up the dictionary. Figure 5: An example prompt containing step-bystep instructions.\n\n\nMethods\n\n\nExecutability LCS\n\nTranslated Codex 12B 78.57% 32.87% Translated GPT-3 175B 74.15% 31.05%\n\nSupervised LSTM -34.00% Table 4: Executability and LCS when conditioned on step-by-step instructions.\n\n\nAnalysis of program length\n\nShorter programs have a natural advantage of being more executable as they need to satisfy less pre/post-conditions, albeit being prone to incompleteness. To validate the proposed approach does not simply generate very short programs, we calculate the average program length across the 88 evaluated tasks. Results are shown in Table 5. Mirroring the observations made in Section 4.1 and Section 4.2, we find smaller LMs such as GPT-2 tend to generate shorter programs than larger models do while frequently repeating the given executable example. In contrast, larger models like Codex and GPT-3 can generate more expressive programs with high realism, yet consequently, they often suffer from executability. We show proposed procedure can find appropriate balance and is capable of generating programs that are highly executable while maintaining reasonable expressiveness as measured by program length.\n\n\nMethods Executability Average Length\n\nVanilla  \n\n\nRelated Works\n\nLarge-scale natural language modeling has witnessed rapid advances since the inception of the Transformer architecture [53]. It has been shown by recent works that large language models (LLMs) pre-trained on large unstructured text corpus not only can perform strongly on various down-stream NLP tasks [10,39,40,5] but the learned representations can also be used to model relations of entities [23], retrieve matching visual features [19], synthesize code from docstrings [15,7], solve math problems [8,46], and even as valuable priors when applied to diverse tasks from different modalities [28,52]. Notably, by pre-training on large-scale data, these models can also internalize an implicit knowledge base containing rich information about the world from which factual answers (e.g. \"Dante was born in PLACE \") can be extracted [36,21,9,50,42]. Compared to prior works in single-step knowledge extraction, we aim to extract sequential action plans to complete open-ended human activities while satisfying various constraints of an interactive environment.\n\nMany prior works have looked into grounding natural language in embodied environments. A series of them parse language instructions into formal logic or rely mainly on lexical analysis to resolve various linguistic ambiguities for embodied agents [2,33,34,51]. However, they often require many hand-designed rules or scale inadequately to more complex tasks and environments. Recently, many efforts have been put into creating more realistic environments with the goal to further advances in this area [38,47,48,22,44,1]. At the same time, by leveraging the better representation power of neural architectures, a number of works have looked into creating instruction-following agents that can perform manipulation [29,30], navigation [11,54,31], or both [49,16,12]. Recent works also use language as hierarchical abstractions to plan actions using imitation learning [45] and to guide exploration in reinforcement learning [32].\n\nNotably, many prior works do not leverage full-blown pre-trained LLMs; most investigate smaller LMs that require considerable domain-specific data for fine-tuning to obtain reasonable performance. Perhaps more importantly, few works have evaluated LLMs in an embodiment setting that realizes the full potential of the actionable knowledge these models already contain by pre-training on large-scale unstructured text: the tasks evaluated are often generated from a handful of templates, which do not resemble the highly diverse activities that humans perform in daily lives [14,20]. The development of VirtualHome environment [38] enables such possibility. However, relevant works [38,25] rely on human-annotated data and perform supervised training from scratch. Due to the lack of rich world knowledge, these models can only generate action plans given detailed instructions of how to act or video demonstrations. Concurrent work by Li et al. [24] validates similar hypothesis that LMs contain rich actionable knowledge. They fine-tune GPT-2 with demonstrations to incorporate environment context and to predict actions in VirtualHome, and evaluate on tasks that are generated from pre-defined predicates. In contrast, we investigate existing knowledge in LLMs without any additional training and evaluate on human activity tasks expressed in free-form language.\n\n\nConclusion, Limitations & Future Work\n\nIn this work, we investigate actionable knowledge already contained in pre-trained LLMs without any additional training. We present several techniques to extract this knowledge to perform common-sense grounding by planning actions for complex human activities.\n\nDespite promising findings, there remain several limitations of this work which we discuss as follows:\n\nDrop in Correctness Although our approach can significantly improve executability of the generated plans, we observe a considerable drop in correctness. In addition to the errors caused by the proposed action translation (discussed in Section 4.3), this is partially attributed to the limited expressivity of VirtualHome, as it may not support all necessary actions to fully complete all evaluated tasks (correctness is judged by humans). This is also reflected by that Vanilla LMs can even surpass human-written plans, which are restricted by environment expressivity.\n\nMid-Level Grounding Instead of grounding the LLM generation to low-level actions by using downstream data from a specific environment, we focus on high-level to mid-level grounding such that we evaluate raw knowledge of LLMs as closely and broadly as possible. Hence, we only consider the most prominent challenge in mid-level grounding that the generated plans must satisfy all common-sense constraints (characterized by executability metric). As a result, we assume there is a low-level controller that can execute these mid-level actions (such as \"grab cup\"), and we do not investigate the usefulness of LLMs for low-level sensorimotor behavior grounding. To perform sensorimotor grounding, such as navigation and interaction mask prediction, domain-specific data and fine-tuning are likely required.\n\n\nIgnorant of Environment Context\n\nWe do not incorporate observation context or feedback into our models. To some extent, we approach LLMs in the same way as how VirtualHome asks human annotators to write action plans for a given human activity by imagination, in which case humans similarly do not observe environment context. Similar to human-written plans, we assume the plans generated by LMs only refer to one instance of each object class. As a result, successful plan generation for tasks like \"stack two plates on the right side of a cup\" is not possible.\n\nEvaluation Protocol We measure quality of plans by a combination of executability and correctness instead of one straightforward metric. To the best of our knowledge, there isn't a known way to computationally assess the semantic correctness of the plans due to the tasks' open-ended and multi-modal nature. Prior work also adopt similar combination of metrics [38]. We report two metrics individually to shine light on the deficiencies of existing LLMs which we hope could provide insights for future works. To provide a holistic view, we report results by combining two metrics in Section 5.2.\n\nWe believe addressing each of these shortcoming will lead to exciting future directions. We also hope these findings can inspire future investigations into using pre-trained LMs for goal-driven decision-making problems and grounding the learned knowledge in embodied environments.\n\n\nA Appendix\n\n\nA.1 Hyperparameter Search\n\nFor each evaluated method, we perform grid search over the following hyperparameters: Task: Use computer\n\nStep 1: Walk to home office\n\nStep 2: Walk to chair\n\nStep 3: Find chair\n\nStep 4: Sit on chair\n\nStep 5: Find computer\n\nStep 6: Switch on computer\n\nStep 7: Turn to computer\n\nStep 8: Look at computer\n\nStep 9: Find keyboard\n\nStep 10: Type on keyboard Task: Relax on sofa\n\nStep 1: Walk to home office\n\nStep 2: Walk to couch\n\nStep 3: Find couch\n\nStep 4: Sit on couch\n\nStep 5: Find pillow\n\nStep 6: Lie on couch Task: Read book\n\nStep 1: Walk to home office\n\nStep 2: Walk to novel\n\nStep 3: Find novel\n\nStep 4: Grab novel\n\nStep 5: Find chair\n\nStep 6: Sit on chair\n\nStep 7: Read novel\n\n\nA.2 Details of Human Evaluations\n\nHuman evaluations are conducted on Amazon Mechanical Turk. For each method, we generate action plans for all 88 high-level tasks. To account for the expressivity of the VirtualHome environment [38], we include action plans written by human experts from the VirtualHome dataset as references in our human evaluations. The evaluations are conducted in the form of questionnaires containing all action plans whose order is randomly shuffled and whose corresponding methods are unknown to the annotators. Human annotators are required to answer all the questions in the questionnaire. For each question, the annotators need to answer either \"Yes\" or \"No\" indicating if they believe the action plan completes the task. For each method, we report correctness percentage averaged across 10 participated human annotators and all 88 tasks. We further report the standard error of the mean across human annotators. Screenshot can be found in Figure 6. Figure 6: Screenshot of human evaluation interface, conducted as a Google Forms questionnaire.\n\n\nA.3 All Evaluated Tasks\n\nThe evaluated tasks are part of the ActivityPrograms dataset collected by Puig et al. [38]. Some of the task names may contain misspelling(s). \n\n\nA.4 Natural Language Templates for All Atomic Actions\n\nVirtualHome requires action steps specified in a specific format, yet language models are trained to deal with mostly natural language. We thus define a natural language template for each atomic action and only expose the converted natural language text in all operations involving language models, i.e. autoregressive generation and action translation. After we obtain an entire generated program expressed in natural language, such as those in Figure 1 and Figure 2, we then convert each action step to the VirtualHome syntax. Full list of the atomic actions and their natural language templates can be found below. \n\n\nEvaluated Tasks We use the ActivityPrograms knowledge base collected by Puig et al.[38] for evaluation. It contains 2821 different entries annotated by Amazon Mechanical Turk (MTurk) workers.WALK] living_room (1) \n[WALK] television (1) \n[FIND] television (1) \n[SWITCHON] television (1) \n[FIND] sofa (1) \n[SIT] sofa (1) \n[TURNTO] television (1) \n[WATCH] television (1) \n\n\n\nTable 2 :\n2Ablation of three proposed techniques.\n\nTable 5 :\n5Average executability & program length of different methods.\n\n\nFor methods that use fixed example across evaluated tasks, we search over the following three randomly chosen examples:Name \nDescription \nSearch Values \n\nepsilon ( ) \nOut-of-distribution early termination threshold \n{0, 0.4, 0.8} \n\ntemperature \nsampling parameter adjusting relative token probabilities {0.1, 0.3, 0.6} \n\nk \nnumber of samples generated by Planning LM \n{1, 10} \n\nbeta (\u03b2) \nweighting coefficient in action translation to trade off \nsemantic and translation correctness \n\n{0.3} \n\nfrequence_penalty \nOpenAI API only; penalize new tokens based on their \nexisting frequency in the text so far \n\n{0.1, 0.3, 0.6, 0.9} \n\npresence_penalty \nOpenAI API only; penalize new tokens based on whether \nthey appear in the text so far \n\n{0.3, 0.5, 0.8} \n\nrepetition_penalty \nHugging Face Transformers only; penalize new tokens \nbased on whether repeating existing text \n\n{1.0, 1.2, 1.5, 1.8} \n\nExample 1 \nExample 2 \nExample 3 \n\n\n\n\nDecorate it 12. Do homework 13. Do work 14. Draft home 15. Draw picture 16. Dry soap bottles 17. Dust 18. Eat cereal 19. Eat cheese 20. Eat snacks and drink tea 21. Empty dishwasher and fill dishwasher 22. Entertain 23. Feed me 24. Find dictionary 25. Fix snack 26. Get glass of milk 27. Give milk to cat 28. Go to sleep 29. Grab things 30. Hand washing 31. Hang keys 32. Hang pictures 33. Iron shirt 34. Keep cats inside while door is open 35. Keep cats out of room 36. Leave home 37. Listen to music 38. Look at mirror 39. Look at painting 40. Make bed 41. Make popcorn 42. Organize closet 43. Organize pantry 44. Paint ceiling 45. Pay bills 46. Pick up toys 47. Play musical chairs 48. Prepare pot of boiling water 49. Push all chairs in 50. Push in desk chair 51. Put alarm clock in bedroom 52. Put away groceries 53. Put away toys 54. Put clothes away 55. Put mail in mail organizer 56. Put on your shoes 57. Put out flowers 58. Put up decoration 59. Read 60. Read newspaper 61. Read on sofa 62. Read to child 63. Read yourself to sleep 64. Receive credit card 72. Throw away paper 73. Try yourself off 74. Turn off TV 75. Turn on TV with remote 76. Turn on radio1. Apply lotion \n2. Arrange folders \n3. Breakfast \n4. Browse internet \n5. Brush teeth \n6. Change clothes \n7. Change sheets and pil-\nlow cases \n8. Collect napkin rings \n9. Complete surveys on \namazon turk \n10. Compute \n11. 65. Restock \n\n66. Scrubbing living room \ntile floor is once week \nactivity for me \n\n67. Style hair \n\n68. Switch on lamp \n\n69. Take jacket off \n\n70. Take shoes off \n\n71. Tale off shoes \n\n77. Type up document \n\n78. Unload various items \nfrom pockets and place \nthem in bowl on table \n\n79. Use laptop \n\n80. Vacuum \n\n81. Walk to room \n\n82. Wash dirty dishes \n\n83. Wash face \n\n84. Wash monitor \n\n85. Wash teeth \n\n86. Watch horror movie \n\n87. Wipe down sink \n\n88. Write book \n\n\n\nAtomic Action in VirtualHome Syntax Natural Language Template PLUGOUT] arg1 (1) plug out arg1 [POINTAT] arg1 (1) point at arg1 [POUR] arg1 (1) arg2 (1) pour arg1 into arg2 [PULL] arg1 (1) pull arg1 [PUSH] arg1 (1) push arg1 [PUTBACK] arg1 (1) arg2 (1) put arg1 on arg2 [PUTIN] arg1 (1) arg2 (1)[CLOSE] arg1 (1) \nclose arg1 \n[CUT] arg1 (1) \ncut arg1 \n[DRINK] arg1 (1) \ndrink arg1 \n[DROP] arg1 (1) \ndrop arg1 \n[EAT] arg1 (1) \neat arg1 \n[FIND] arg1 (1) \nfind arg1 \n[GRAB] arg1 (1) \ngrab arg1 \n[GREET] arg1 (1) \ngreet arg1 \n[LIE] arg1 (1) \nlie on arg1 \n[LOOKAT] arg1 (1) \nlook at arg1 \n[MOVE] arg1 (1) \nmove arg1 \n[OPEN] arg1 (1) \nopen arg1 \n[PLUGIN] arg1 (1) \nplug in arg1 \n[put arg1 in arg2 \n[PUTOBJBACK] arg1 (1) \nput back arg1 \n[PUTOFF] arg1 (1) \ntake off arg1 \n[PUTON] arg1 (1) \nput on arg1 \n[READ] arg1 (1) \nread arg1 \n[RELEASE] \nrelease \n[RINSE] arg1 (1) \nrinse arg1 \n[RUN] arg1 (1) \nrun to arg1 \n[SCRUB] arg1 (1) \nscrub arg1 \n[SIT] arg1 (1) \nsit on arg1 \n[SLEEP] \nsleep \n[SQUEEZE] arg1 (1) \nsqueeze arg1 \n[STANDUP] \nstand up \n[SWITCHOFF] arg1 (1) \nswitch off arg1 \n[SWITCHON] arg1 (1) \nswitch on arg1 \n[TOUCH] arg1 (1) \ntouch arg1 \n[TURNTO] arg1 (1) \nturn to arg1 \n[TYPE] arg1 (1) \ntype on arg1 \n[WAKEUP] \nwake up \n[WALK] arg1 (1) \nwalk to arg1 \n[WASH] arg1 (1) \nwash arg1 \n[WATCH] arg1 (1) \nwatch arg1 \n[WIPE] arg1 (1) \nwipe arg1 \n\nOne approach could be measuring the similarity of the final environment state produced by executing predicted and human-written programs, but initial state must be kept fixed for each task, which are not appropriate for many tasks due to their open-ended nature.\nAlthough LCS has a mathematical range of [0, 1], we measure the LCS between different human-written programs for the same task and find an empirical maximum of 0.489.\nNote that this is a different LM than the GPT-style Planning LM. Using a single LM for both purposes could as well be possible and likely more efficient, but we leave such investigation to future works.\nAcknowledgmentWe would like to thank OpenAI for providing academic access to the OpenAI API and Luke Metz for valuable feedback and discussions. This work was supported in part by Berkeley Deep Drive, NSF IIS-2024594, and GoodAI Research Award.\nVision-and-language navigation: Interpreting visually-grounded navigation instructions in real environments. Peter Anderson, Qi Wu, Damien Teney, Jake Bruce, Mark Johnson, Niko S\u00fcnderhauf, Ian Reid, Stephen Gould, Anton Van Den, Hengel, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. the IEEE Conference on Computer Vision and Pattern RecognitionPeter Anderson, Qi Wu, Damien Teney, Jake Bruce, Mark Johnson, Niko S\u00fcnderhauf, Ian Reid, Stephen Gould, and Anton Van Den Hengel. Vision-and-language navigation: Interpreting visually-grounded navigation instructions in real environments. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 3674-3683, 2018.\n\nWeakly supervised learning of semantic parsers for mapping instructions to actions. Yoav Artzi, Luke Zettlemoyer, Transactions of the Association for Computational Linguistics. 1Yoav Artzi and Luke Zettlemoyer. Weakly supervised learning of semantic parsers for mapping instructions to actions. Transactions of the Association for Computational Linguistics, 1:49-62, 2013.\n\nBeyond the imitation game: Measuring and extrapolating the capabilities of language models. BIG-bench collaborationBIG-bench collaboration. Beyond the imitation game: Measuring and extrapolating the capabil- ities of language models. In preparation, 2021. URL https://github.com/google/ BIG-bench/.\n\n. Rishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Michael S Sydney Von Arx, Jeannette Bernstein, Antoine Bohg, Emma Bosselut, Erik Brunskill, Shyamal Brynjolfsson, Dallas Buch, Rodrigo Card, Niladri Castellon, Annie Chatterji, Kathleen Chen, Jared Quincy Creel, Dora Davis, Chris Demszky, Moussa Donahue, Esin Doumbouya, Stefano Durmus, John Ermon, Kawin Etchemendy, Li Ethayarajh, Chelsea Fei-Fei, Trevor Finn, Lauren Gale, Karan Gillespie, Noah Goel, Shelby Goodman, Neel Grossman, Tatsunori Guha, Peter Hashimoto, John Henderson, Daniel E Hewitt, Jenny Ho, Kyle Hong, Jing Hsu, Thomas Huang, Saahil Icard, Dan Jain, Pratyusha Jurafsky, Siddharth Kalluri, Geoff Karamcheti, Fereshte Keeling, Omar Khani, Pang Khattab, Mark Wei Kohd, Ranjay Krass, Rohith Krishna, Alex Kuditipudi ; Krishnan Srinivasan, Rohan Tamkin, Armin W Taori, Florian Thomas, Rose E Tram\u00e8r, William Wang, Bohan Wang, Jiajun Wu, Yuhuai Wu, Sang Michael Wu, Michihiro Xie, Jiaxuan Yasunaga, Matei You, Michael Zaharia, Tianyi Zhang, Xikun Zhang, Yuhui Zhang, Lucia Zhang, Zheng, Xiang Lisa Li, Xuechen Li, Tengyu Ma, Ali Malik, Christopher D. Manning, Suvir Mirchandani, Eric Mitchell, Zanele Munyikwa, Suraj Nair, Avanika Narayan, Deepak Narayanan, Ben Newman, Allen Nie, Juan Carlos Niebles, Hamed Nilforoshan, Julian Nyarko, Giray Ogut, Laurel Orr, Isabel Papadimitriou, Joon Sung Park, Chris Piech, Eva Portelance, Christopher Potts, Aditi Raghunathan, Rob Reich, Hongyu Ren, Frieda Rong, Yusuf Roohani, Camilo Ruiz, Jack Ryan, Christopher R\u00e9, Dorsa Sadigh, Shiori Sagawa, Keshav Santhanam, Andy Shih,Ananya Kumar, Faisal Ladhak, Mina Lee, Tony Lee, Jure Leskovec, Isabelle LeventKaitlyn Zhou, and Percy Liang. On the opportunities and risks of foundation modelsRishi Bommasani, Drew A. Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S. Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, Erik Brynjolfsson, Shyamal Buch, Dallas Card, Rodrigo Castellon, Niladri Chatterji, Annie Chen, Kathleen Creel, Jared Quincy Davis, Dora Demszky, Chris Donahue, Moussa Doumbouya, Esin Durmus, Stefano Ermon, John Etchemendy, Kawin Ethayarajh, Li Fei-Fei, Chelsea Finn, Trevor Gale, Lauren Gillespie, Karan Goel, Noah Goodman, Shelby Grossman, Neel Guha, Tatsunori Hashimoto, Peter Henderson, John Hewitt, Daniel E. Ho, Jenny Hong, Kyle Hsu, Jing Huang, Thomas Icard, Saahil Jain, Dan Jurafsky, Pratyusha Kalluri, Siddharth Karamcheti, Geoff Keeling, Fereshte Khani, Omar Khattab, Pang Wei Kohd, Mark Krass, Ranjay Krishna, Rohith Kuditipudi, Ananya Kumar, Faisal Ladhak, Mina Lee, Tony Lee, Jure Leskovec, Isabelle Levent, Xiang Lisa Li, Xuechen Li, Tengyu Ma, Ali Malik, Christopher D. Manning, Suvir Mirchandani, Eric Mitchell, Zanele Munyikwa, Suraj Nair, Avanika Narayan, Deepak Narayanan, Ben Newman, Allen Nie, Juan Carlos Niebles, Hamed Nilforoshan, Julian Nyarko, Giray Ogut, Laurel Orr, Isabel Papadimitriou, Joon Sung Park, Chris Piech, Eva Portelance, Christopher Potts, Aditi Raghunathan, Rob Reich, Hongyu Ren, Frieda Rong, Yusuf Roohani, Camilo Ruiz, Jack Ryan, Christopher R\u00e9, Dorsa Sadigh, Shiori Sagawa, Keshav Santhanam, Andy Shih, Krishnan Srinivasan, Alex Tamkin, Rohan Taori, Armin W. Thomas, Florian Tram\u00e8r, Rose E. Wang, William Wang, Bohan Wu, Jiajun Wu, Yuhuai Wu, Sang Michael Xie, Michihiro Yasunaga, Jiaxuan You, Matei Zaharia, Michael Zhang, Tianyi Zhang, Xikun Zhang, Yuhui Zhang, Lucia Zheng, Kaitlyn Zhou, and Percy Liang. On the opportunities and risks of foundation models, 2021.\n\nLanguage models are few-shot learners. Benjamin Tom B Brown, Nick Mann, Melanie Ryder, Jared Subbiah, Prafulla Kaplan, Arvind Dhariwal, Pranav Neelakantan, Girish Shyam, Amanda Sastry, Askell, arXiv:2005.14165arXiv preprintTom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. arXiv preprint arXiv:2005.14165, 2020.\n\nSemeval-2017 task 1: Semantic textual similarity-multilingual and cross-lingual focused evaluation. Daniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-Gazpio, Lucia Specia, arXiv:1708.00055arXiv preprintDaniel Cer, Mona Diab, Eneko Agirre, Inigo Lopez-Gazpio, and Lucia Specia. Semeval-2017 task 1: Semantic textual similarity-multilingual and cross-lingual focused evaluation. arXiv preprint arXiv:1708.00055, 2017.\n\n. Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde, Jared Kaplan, Harri Edwards, Yura Burda, Nicholas Joseph, Greg Brockman, arXiv:2107.03374arXiv preprintet al. Evaluating large language models trained on codeMark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde, Jared Kaplan, Harri Edwards, Yura Burda, Nicholas Joseph, Greg Brockman, et al. Evaluating large language models trained on code. arXiv preprint arXiv:2107.03374, 2021.\n\nTraining verifiers to solve math word problems. Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, John Schulman, arXiv:2110.14168arXiv preprintKarl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Jacob Hilton, Reiichiro Nakano, Christo- pher Hesse, and John Schulman. Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168, 2021.\n\nCommonsense knowledge mining from pretrained models. Joe Davison, Joshua Feldman, Alexander M Rush, Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP). the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)Joe Davison, Joshua Feldman, and Alexander M Rush. Commonsense knowledge mining from pretrained models. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 1173-1178, 2019.\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, Kristina Toutanova Bert, arXiv:1810.04805Pre-training of deep bidirectional transformers for language understanding. arXiv preprintJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.\n\nSpeakerfollower models for vision-and-language navigation. Daniel Fried, Ronghang Hu, Volkan Cirik, Anna Rohrbach, Jacob Andreas, Louis-Philippe Morency, Taylor Berg-Kirkpatrick, Kate Saenko, Dan Klein, Trevor Darrell, arXiv:1806.02724arXiv preprintDaniel Fried, Ronghang Hu, Volkan Cirik, Anna Rohrbach, Jacob Andreas, Louis-Philippe Morency, Taylor Berg-Kirkpatrick, Kate Saenko, Dan Klein, and Trevor Darrell. Speaker- follower models for vision-and-language navigation. arXiv preprint arXiv:1806.02724, 2018.\n\nFrom language to goals: Inverse reinforcement learning for vision-based instruction following. Justin Fu, Anoop Korattikara, Sergey Levine, Sergio Guadarrama, arXiv:1902.07742arXiv preprintJustin Fu, Anoop Korattikara, Sergey Levine, and Sergio Guadarrama. From language to goals: Inverse reinforcement learning for vision-based instruction following. arXiv preprint arXiv:1902.07742, 2019.\n\nMaking pre-trained language models better few-shot learners. Tianyu Gao, Adam Fisch, Danqi Chen, arXiv:2012.15723arXiv preprintTianyu Gao, Adam Fisch, and Danqi Chen. Making pre-trained language models better few-shot learners. arXiv preprint arXiv:2012.15723, 2020.\n\nLearning from stories: using crowdsourced narratives to train virtual agents. Brent Harrison, Mark O Riedl, Twelfth Artificial Intelligence and Interactive Digital Entertainment Conference. Brent Harrison and Mark O Riedl. Learning from stories: using crowdsourced narratives to train virtual agents. In Twelfth Artificial Intelligence and Interactive Digital Entertainment Conference, 2016.\n\n. Dan Hendrycks, Steven Basart, Saurav Kadavath, Mantas Mazeika, Akul Arora, Ethan Guo, Collin Burns, Samir Puranik, arXiv:2105.09938Horace He, Dawn SongarXiv preprintet al. Measuring coding challenge competence with appsDan Hendrycks, Steven Basart, Saurav Kadavath, Mantas Mazeika, Akul Arora, Ethan Guo, Collin Burns, Samir Puranik, Horace He, Dawn Song, et al. Measuring coding challenge competence with apps. arXiv preprint arXiv:2105.09938, 2021.\n\nHuman instruction-following with deep reinforcement learning via transfer-learning from text. Felix Hill, Sona Mokra, Nathaniel Wong, Tim Harley, arXiv:2005.09382arXiv preprintFelix Hill, Sona Mokra, Nathaniel Wong, and Tim Harley. Human instruction-following with deep reinforcement learning via transfer-learning from text. arXiv preprint arXiv:2005.09382, 2020.\n\nLong short-term memory. Sepp Hochreiter, J\u00fcrgen Schmidhuber, Neural computation. 98Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation, 9(8): 1735-1780, 1997.\n\nAri Holtzman, Jan Buys, Li Du, Maxwell Forbes, Yejin Choi, arXiv:1904.09751The curious case of neural text degeneration. arXiv preprintAri Holtzman, Jan Buys, Li Du, Maxwell Forbes, and Yejin Choi. The curious case of neural text degeneration. arXiv preprint arXiv:1904.09751, 2019.\n\nProbing text models for common ground with visual representations. Gabriel Ilharco, Rowan Zellers, Ali Farhadi, Hannaneh Hajishirzi, arXiv e-printsGabriel Ilharco, Rowan Zellers, Ali Farhadi, and Hannaneh Hajishirzi. Probing text models for common ground with visual representations. arXiv e-prints, pages arXiv-2005, 2020.\n\nVisually-grounded planning without vision: Language models infer detailed plans from high-level instructions. A Peter, Jansen, arXiv:2009.14259arXiv preprintPeter A Jansen. Visually-grounded planning without vision: Language models infer detailed plans from high-level instructions. arXiv preprint arXiv:2009.14259, 2020.\n\nHow can we know what language models know?. Zhengbao Jiang, F Frank, Jun Xu, Graham Araki, Neubig, Transactions of the Association for Computational Linguistics. 8Zhengbao Jiang, Frank F Xu, Jun Araki, and Graham Neubig. How can we know what language models know? Transactions of the Association for Computational Linguistics, 8:423-438, 2020.\n\nAi2-thor: An interactive 3d environment for visual ai. Eric Kolve, Roozbeh Mottaghi, Winson Han, Eli Vanderbilt, Luca Weihs, Alvaro Herrasti, Daniel Gordon, Yuke Zhu, Abhinav Gupta, Ali Farhadi, arXiv:1712.05474arXiv preprintEric Kolve, Roozbeh Mottaghi, Winson Han, Eli VanderBilt, Luca Weihs, Alvaro Herrasti, Daniel Gordon, Yuke Zhu, Abhinav Gupta, and Ali Farhadi. Ai2-thor: An interactive 3d environment for visual ai. arXiv preprint arXiv:1712.05474, 2017.\n\nZ Belinda, Maxwell Li, Jacob Nye, Andreas, arXiv:2106.00737Implicit representations of meaning in neural language models. arXiv preprintBelinda Z Li, Maxwell Nye, and Jacob Andreas. Implicit representations of meaning in neural language models. arXiv preprint arXiv:2106.00737, 2021.\n\nPre-trained language models for interactive decision-making. Shuang Li, Xavier Puig, Yilun Du, Clinton Wang, Ekin Akyurek, Antonio Torralba, Jacob Andreas, Igor Mordatch, arXiv:2202.01771arXiv preprintShuang Li, Xavier Puig, Yilun Du, Clinton Wang, Ekin Akyurek, Antonio Torralba, Jacob Andreas, and Igor Mordatch. Pre-trained language models for interactive decision-making. arXiv preprint arXiv:2202.01771, 2022.\n\nSynthesizing environment-aware activities via activity sketches. Yuan-Hong Liao, Xavier Puig, Marko Boben, Antonio Torralba, Sanja Fidler, Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. the IEEE/CVF Conference on Computer Vision and Pattern RecognitionYuan-Hong Liao, Xavier Puig, Marko Boben, Antonio Torralba, and Sanja Fidler. Synthesizing environment-aware activities via activity sketches. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 6291-6299, 2019.\n\nWhat makes good in-context examples for. Jiachang Liu, Dinghan Shen, Yizhe Zhang, Bill Dolan, Lawrence Carin, Weizhu Chen, arXiv:2101.06804gpt-3? arXiv preprintJiachang Liu, Dinghan Shen, Yizhe Zhang, Bill Dolan, Lawrence Carin, and Weizhu Chen. What makes good in-context examples for gpt-3? arXiv preprint arXiv:2101.06804, 2021.\n\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, Veselin Stoyanov, Roberta, arXiv:1907.11692A robustly optimized bert pretraining approach. arXiv preprintYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach. arXiv preprint arXiv:1907.11692, 2019.\n\nKevin Lu, Aditya Grover, arXiv:2103.05247Pieter Abbeel, and Igor Mordatch. Pretrained transformers as universal computation engines. arXiv preprintKevin Lu, Aditya Grover, Pieter Abbeel, and Igor Mordatch. Pretrained transformers as universal computation engines. arXiv preprint arXiv:2103.05247, 2021.\n\nGrounding language in play. Corey Lynch, Pierre Sermanet, arXiv:2005.07648arXiv preprintCorey Lynch and Pierre Sermanet. Grounding language in play. arXiv preprint arXiv:2005.07648, 2020.\n\nLanguage conditioned imitation learning over unstructured data. Corey Lynch, Pierre Sermanet, Proceedings of Robotics: Science and Systems. doi, 10. Robotics: Science and Systems. doi, 102021Corey Lynch and Pierre Sermanet. Language conditioned imitation learning over unstructured data. Proceedings of Robotics: Science and Systems. doi, 10, 2021.\n\nImproving vision-and-language navigation with image-text pairs from the web. Arjun Majumdar, Ayush Shrivastava, Stefan Lee, Peter Anderson, Devi Parikh, Dhruv Batra, European Conference on Computer Vision. SpringerArjun Majumdar, Ayush Shrivastava, Stefan Lee, Peter Anderson, Devi Parikh, and Dhruv Batra. Improving vision-and-language navigation with image-text pairs from the web. In European Conference on Computer Vision, pages 259-274. Springer, 2020.\n\nSuvir Mirchandani, Siddharth Karamcheti, Dorsa Sadigh, Ella, arXiv:2103.05825Exploration through learned language abstraction. arXiv preprintSuvir Mirchandani, Siddharth Karamcheti, and Dorsa Sadigh. Ella: Exploration through learned language abstraction. arXiv preprint arXiv:2103.05825, 2021.\n\nEnvironment-driven lexicon induction for high-level instructions. Dipendra Misra, Kejia Tao, Percy Liang, Ashutosh Saxena, Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing. the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language ProcessingLong Papers1Dipendra Misra, Kejia Tao, Percy Liang, and Ashutosh Saxena. Environment-driven lexicon induction for high-level instructions. In Proceedings of the 53rd Annual Meeting of the Asso- ciation for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pages 992-1002, 2015.\n\nTell me dave: Contextsensitive grounding of natural language to manipulation instructions. K Dipendra, Jaeyong Misra, Kevin Sung, Ashutosh Lee, Saxena, The International Journal of Robotics Research. 351-3Dipendra K Misra, Jaeyong Sung, Kevin Lee, and Ashutosh Saxena. Tell me dave: Context- sensitive grounding of natural language to manipulation instructions. The International Journal of Robotics Research, 35(1-3):281-300, 2016.\n\nGlove: Global vectors for word representation. Jeffrey Pennington, Richard Socher, Christopher D Manning, Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP). the 2014 conference on empirical methods in natural language processing (EMNLP)Jeffrey Pennington, Richard Socher, and Christopher D Manning. Glove: Global vectors for word representation. In Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP), pages 1532-1543, 2014.\n\nLanguage models as knowledge bases?. Fabio Petroni, Tim Rockt\u00e4schel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, Alexander H Miller, Sebastian Riedel, arXiv:1909.01066arXiv preprintFabio Petroni, Tim Rockt\u00e4schel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, Alexander H Miller, and Sebastian Riedel. Language models as knowledge bases? arXiv preprint arXiv:1909.01066, 2019.\n\nSynchromesh: Reliable code generation from pre-trained language models. Gabriel Poesia, Oleksandr Polozov, Vu Le, Ashish Tiwari, Gustavo Soares, Christopher Meek, Sumit Gulwani, arXiv:2201.11227arXiv preprintGabriel Poesia, Oleksandr Polozov, Vu Le, Ashish Tiwari, Gustavo Soares, Christopher Meek, and Sumit Gulwani. Synchromesh: Reliable code generation from pre-trained language models. arXiv preprint arXiv:2201.11227, 2022.\n\nVirtualhome: Simulating household activities via programs. Xavier Puig, Kevin Ra, Marko Boben, Jiaman Li, Tingwu Wang, Sanja Fidler, Antonio Torralba, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. the IEEE Conference on Computer Vision and Pattern RecognitionXavier Puig, Kevin Ra, Marko Boben, Jiaman Li, Tingwu Wang, Sanja Fidler, and Antonio Torralba. Virtualhome: Simulating household activities via programs. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 8494-8502, 2018.\n\nLanguage models are unsupervised multitask learners. Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, OpenAI blog. 189Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\n\nExploring the limits of transfer learning with a unified text-to-text transformer. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J Liu, arXiv:1910.10683arXiv preprintColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv preprint arXiv:1910.10683, 2019.\n\nNils Reimers, Iryna Gurevych, arXiv:1908.10084Sentence-bert: Sentence embeddings using siamese bertnetworks. arXiv preprintNils Reimers and Iryna Gurevych. Sentence-bert: Sentence embeddings using siamese bert- networks. arXiv preprint arXiv:1908.10084, 2019.\n\nHow much knowledge can you pack into the parameters of a language model. Adam Roberts, Colin Raffel, Noam Shazeer, arXiv:2002.08910arXiv preprintAdam Roberts, Colin Raffel, and Noam Shazeer. How much knowledge can you pack into the parameters of a language model? arXiv preprint arXiv:2002.08910, 2020.\n\nLearning to retrieve prompts for in-context learning. Ohad Rubin, Jonathan Herzig, Jonathan Berant, arXiv:2112.08633arXiv preprintOhad Rubin, Jonathan Herzig, and Jonathan Berant. Learning to retrieve prompts for in-context learning. arXiv preprint arXiv:2112.08633, 2021.\n\nHabitat: A platform for embodied ai research. Manolis Savva, Abhishek Kadian, Oleksandr Maksymets, Yili Zhao, Erik Wijmans, Bhavana Jain, Julian Straub, Jia Liu, Vladlen Koltun, Jitendra Malik, Proceedings of the IEEE/CVF International Conference on Computer Vision. the IEEE/CVF International Conference on Computer VisionManolis Savva, Abhishek Kadian, Oleksandr Maksymets, Yili Zhao, Erik Wijmans, Bhavana Jain, Julian Straub, Jia Liu, Vladlen Koltun, Jitendra Malik, et al. Habitat: A platform for embodied ai research. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 9339-9347, 2019.\n\nSkill induction and planning with latent language. Pratyusha Sharma, Antonio Torralba, Jacob Andreas, arXiv:2110.01517arXiv preprintPratyusha Sharma, Antonio Torralba, and Jacob Andreas. Skill induction and planning with latent language. arXiv preprint arXiv:2110.01517, 2021.\n\nGenerate & rank: A multi-task framework for math word problems. Jianhao Shen, Yichun Yin, Lin Li, Lifeng Shang, Xin Jiang, Ming Zhang, Qun Liu, arXiv:2109.03034arXiv preprintJianhao Shen, Yichun Yin, Lin Li, Lifeng Shang, Xin Jiang, Ming Zhang, and Qun Liu. Generate & rank: A multi-task framework for math word problems. arXiv preprint arXiv:2109.03034, 2021.\n\nAlfred: A benchmark for interpreting grounded instructions for everyday tasks. Mohit Shridhar, Jesse Thomason, Daniel Gordon, Yonatan Bisk, Winson Han, Roozbeh Mottaghi, Luke Zettlemoyer, Dieter Fox, Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. the IEEE/CVF conference on computer vision and pattern recognitionMohit Shridhar, Jesse Thomason, Daniel Gordon, Yonatan Bisk, Winson Han, Roozbeh Mot- taghi, Luke Zettlemoyer, and Dieter Fox. Alfred: A benchmark for interpreting grounded instructions for everyday tasks. In Proceedings of the IEEE/CVF conference on computer vision and pattern recognition, pages 10740-10749, 2020.\n\nAlfworld: Aligning text and embodied environments for interactive learning. Mohit Shridhar, Xingdi Yuan, Marc-Alexandre C\u00f4t\u00e9, Yonatan Bisk, Adam Trischler, Matthew Hausknecht, arXiv:2010.03768arXiv preprintMohit Shridhar, Xingdi Yuan, Marc-Alexandre C\u00f4t\u00e9, Yonatan Bisk, Adam Trischler, and Matthew Hausknecht. Alfworld: Aligning text and embodied environments for interactive learning. arXiv preprint arXiv:2010.03768, 2020.\n\nEmbodied bert: A transformer model for embodied, language-guided visual task completion. Alessandro Suglia, Qiaozi Gao, Jesse Thomason, Govind Thattai, Gaurav Sukhatme, arXiv:2108.04927arXiv preprintAlessandro Suglia, Qiaozi Gao, Jesse Thomason, Govind Thattai, and Gaurav Sukhatme. Embodied bert: A transformer model for embodied, language-guided visual task completion. arXiv preprint arXiv:2108.04927, 2021.\n\nolmpics-on what language model pre-training captures. Alon Talmor, Yanai Elazar, Yoav Goldberg, Jonathan Berant, Transactions of the Association for Computational Linguistics. 8Alon Talmor, Yanai Elazar, Yoav Goldberg, and Jonathan Berant. olmpics-on what language model pre-training captures. Transactions of the Association for Computational Linguistics, 8: 743-758, 2020.\n\nUnderstanding and executing instructions for everyday manipulation tasks from the world wide web. Moritz Tenorth, Daniel Nyga, Michael Beetz, 2010 ieee international conference on robotics and automation. IEEEMoritz Tenorth, Daniel Nyga, and Michael Beetz. Understanding and executing instructions for everyday manipulation tasks from the world wide web. In 2010 ieee international conference on robotics and automation, pages 1486-1491. IEEE, 2010.\n\nMultimodal few-shot learning with frozen language models. Maria Tsimpoukelli, Jacob Menick, Serkan Cabi, Oriol Sm Eslami, Felix Vinyals, Hill, arXiv:2106.13884arXiv preprintMaria Tsimpoukelli, Jacob Menick, Serkan Cabi, SM Eslami, Oriol Vinyals, and Felix Hill. Multimodal few-shot learning with frozen language models. arXiv preprint arXiv:2106.13884, 2021.\n\nAttention is all you need. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, Illia Polosukhin, Advances in neural information processing systems. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information processing systems, pages 5998-6008, 2017.\n\nReinforced cross-modal matching and self-supervised imitation learning for vision-language navigation. Xin Wang, Qiuyuan Huang, Asli Celikyilmaz, Jianfeng Gao, Dinghan Shen, Yuan-Fang Wang, William Yang Wang, Lei Zhang, Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. the IEEE/CVF Conference on Computer Vision and Pattern RecognitionXin Wang, Qiuyuan Huang, Asli Celikyilmaz, Jianfeng Gao, Dinghan Shen, Yuan-Fang Wang, William Yang Wang, and Lei Zhang. Reinforced cross-modal matching and self-supervised imitation learning for vision-language navigation. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pages 6629-6638, 2019.\n\nHuggingface's transformers: State-of-the-art natural language processing. Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, arXiv:1910.03771arXiv preprintThomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, R\u00e9mi Louf, Morgan Funtowicz, et al. Huggingface's transform- ers: State-of-the-art natural language processing. arXiv preprint arXiv:1910.03771, 2019.\n\nGrab brush Task: Pick up toys Step 1: Walk to bedroom Step 2: Walk to toy Step 3: Find toy Step 4: Grab toy Step 5: Walk to filing cabinet Step 6: Open filing cabinet Step 7: Put toy on filing cabinet Step 8: Find toy Step 9: Grab toy Step 10: Walk to filing cabinet Step 11: Put toy on filing cabinet Step 12: Find toy Step 13: Grab toy Step 14: Walk to filing cabinet Step 15: Put toy on filing cabinet Step 16: Close filing cabinet Task: Pick up toys Step 1: Walk to living room Step 2: Walk to toy box Step 3: Find toy box Step 4: Grab toy box Step 5: Find chair Step 6: Sit on chair Step 7: Pick up toys Task: Pick up toys Step 1: Find toy Step 2: Turn to toy Step 3: Point at toy Step 4: Wash toy Task: Decorate it Step 1: Walk to home office Step 2: Walk to centerpiece Step 3: Find centerpiece Step 4: Grab centerpiece Step 5: Walk to table Step 6: Put centerpiece on table Step 7: Find drawing Step 8: Grab drawing Step 9: Find wall Step 10: Turn to wall Step 11: Put drawing on wall Step 12: Find drawing Step 13: Grab drawing Step 14: Turn to wall Step 15: Put drawing on wall Task: Decorate it Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Step 8: Decorate it Task: Decorate it Step 1: Walk to table Step 2: Walk to centerpiece Step 3: Look at centerpiece Step 4: Grab centerpiece Step 5: Point at centerpiece Task: Put away groceries Step 1: Walk to dining room Step 2: Walk to freezer Step 3: Find freezer Step 4: Open freezer Step 5: Find food Step 6: Grab food Step 7: Put food in freezer Step 8: Close freezer Task: Put away groceries Step 1: Walk to kitchen Step 2: Walk to refrigerator Step 3: Open refrigerator Step 4: Grab milk and eggs Step 5: Close refrigerator Step 6: Walk to counter Step 7: Put milk and eggs on counter Step 8: Walk to cabinet Step 9: Open cabinet Step 10: Put away milk and eggs Step 11: Close cabinet Step 12: Walk to refrigerator Step 13: Grab orange juice and bread Step 14: Close refrigerator Task: Put away groceries Step 1: Walk to kitchen Step 2: Walk to fridge Step 3: Open fridge Step 4: Put food in fridge Step 5: Close fridge Step 6: Walk to dining room Step 7: Walk to livingroom Step 8: Walk to bedroom Step 9: Walk to bathroom Task: Draw picture Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find desk Step 6: Open desk Step 7: Find check Step 8: Grab check Step 9: Put check on desk Step 10: Find pencil Step 11: Grab pencil Step 12: Close desk Task: Draw picture Step 1: Walk to home office Step 2: Walk to pencils Step 3: Find pencils Step 4: Grab pencils Step 5: Find paper Step. Walk to room Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Walk to room Step 1: Walk to dining room Step 2: Walk to livingroom Step 3: Walk to bedroom Task: Hang pictures Step 1: Walk to bedroom Step 2: Walk to drawing Step 3: Find drawing Step 4: Grab drawing Step 5: Find wall Step 6: Put drawing on wall Step 7: Turn to drawing Step 8: Look at drawing Step 9: Find drawing Step 10: Grab drawing Step 11: Put drawing on wall Step 12: Turn to drawing Step 13: Look at drawing Task: Hang pictures Step 1: Walk to home office Step 2: Walk to box of pictures Step 3: Find box of pictures Step 4: Grab box of pictures Step 5: Walk to wall Step 6: Hang pictures on wall Task: Hang pictures Step 1: Walk to home office Step 2: Walk to table Step 3: Find keys Step 4: Grab keys Step 5: Walk to wall Step 6: Find hanger Step 7: Put keys on hanger Task: Wipe down sink Step 1: Walk to dining room Step 2: Walk to rag Step 3: Find rag Step 4: Grab rag Step 5: Walk to sink Step 6: Wipe sink Step 7: Put back rag Task: Wipe down sink Step 1: Walk to kitchen Step 2: Walk to sink Step 3: Grab sponge Step 4: Wipe down sink Step 5: Rinse sponge Step 6: Put sponge away Step 7: Wash hands Task: Wipe down sink Step 1: Walk to bathroom Step 2: Walk to cleaning solution Step 3: Find cleaning solution Step 4: Grab cleaning solution Step 5: Find sink Step 6: Pour cleaning solution into sink Step 7: Find faucet Step 8: Switch on faucet Step 9: Scrub sink Step 10: Wash sink Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Find shoes Step 5: Take off shoes Step 6: Find dresser Step 7: Open dresser Step 8: Grab shoes Step 9: Put shoes in dresser Step 10: Close dresser Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Grab shoes Step 5: Find chair Step 6: Sit on chair Step 7: Take shoes off Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Task: Give milk to cat Step 1: Walk to home office Step 2: Walk to cat Step 3: Find cat Step 4: Turn to cat Step 5: Point at cat Step. 7Pour popcorn into bowl Step. Add butter and salt to bowl Step 13: Task: Make popcorn Step 1: Walk to kitchen Step 2: Walk to microwave Step 3: Find microwave Step 4: Open microwave Task: Receive credit card Step 1: Walk to home office Step 2: Walk to envelope Step 3: Find envelope Step 4: Grab envelope Step 5: Walk to home office Step 6: Walk to scissors Step 7: Find scissors Step 8: Open envelope Step 9: Find creditcard Step 10: Grab creditcard Task: Receive credit card Step 1: Walk to mailbox Step 2: Open mailbox Step 3: Grab credit card Step 4: Walk to home office Step 5: Walk to desk Step 6: Put credit card on desk Step 7: Sit at desk Step 8: Look at credit card Task: Receive credit card Step 1: Walk to home office Step 2: Walk to cabinet Step 3: Find cabinet Step 4: Open cabinet Task: Read to child Step 1: Walk to bedroom Step 2: Walk to child Step 3: Find child Step 4: Greet child Step 5: Walk to filing cabinet Step 6: Open filing cabinet Step 7: Find novel Step 8: Grab novel Step 9: Walk to chair Step 10: Pull chair Step 11: Sit on chair Step 12: Turn to novel Step 13: Look at novel Step 14: Turn to novel Step 15: Point at novel Step 16: Turn to novel Step 17: Point at novel Step 18: Read novel Step 19: Read novel Step 20: Read novel Task: Read to child Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Read to child Step 1: Walk to child Step 2: Read book Task: Eat cheese Step 1: Walk to dining room Step 2: Walk to freezer Step 3: Open freezer Step 4: Find cheese Step 5: Grab cheese Step 6: Eat cheese Task: Eat cheese Step 1: Walk to kitchen Step 2: Walk to refrigerator Step 3: Open refrigerator Step 4: Grab cheese Step 5: Eat cheese Task: Eat cheese Step 1: Walk to dining room Step 2: Walk to table Step 3: Find table Step 4: Turn to table Step 5: Find chair Step 6: Sit on chair Step 7: Find food Step 8: Grab food Step 9: Find plate Step 10: Put food on plate 9: Find phone Step 10: Grab phone Task: Unload various items from pockets and place them in bowl on table Step 1: Walk to home office Step 2: Walk to bowl on table Step 3: Find bowl on table Step 4: Grab bowl on table Step 5: Unload various items from pockets and place them in bowl on table Task: Unload various items from pockets and place them in bowl on table Step 1: Find bowl Step 2: Turn to bowl Step 3: Point at bowl Step 4: Wash bowl Task: Switch on lamp Step 1: Walk to bedroom Step 2: Walk to floor lamp Step 3: Find floor lamp Step 4: Switch on floor lamp Task: Switch on lamp Step 1: Walk to lamp Step 2: Switch on lamp Step 3: Walk to chair Step 4: Sit on chair Step 5: Read book Task: Switch on lamp Step 1: Walk to bedroom Step 2: Walk to floor lamp Step 3: Find floor lamp Step 4: Turn to floor lamp Step 5: Switch on floor lamp Step 6: Find bed Step 7: Lie on bed Task: Take jacket off Step 1: Walk to bedroom Step 2: Walk to jacket Step 3: Find jacket Step 4: Find jacket Step 5: Take off jacket Step 6: Find dresser Step 7: Open dresser Step 8: Close dresser Task: Take jacket off Step 1: Walk to home office Step 2: Walk to jacket Step 3: Find jacket Step 4: Grab jacket Step 5: Find chair Step 6: Sit on chair Step 7: Take jacket off Task: Take jacket off Step 1: Walk to home office Step 2: Walk to jacket Step 3: Find jacketA.5 Random Samples of Action Plans Human Vanilla GPT3-175B Translated GPT3-175B (Ours) Task: Go to sleep Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find bed Step 4: Turn to bed Step 5: Look at bed Step 6: Sit on bed Step 7: Sleep Task: Go to sleep Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find pajamas Step 4: Put on pajamas Step 5: Find slippers Step 6: Put on slippers Step 7: Get in bed Step 8: Sleep Task: Go to sleep Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Lie on bed Step 4: Sleep Task: Browse internet Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find computer Step 6: Switch on computer Step 7: Turn to computer Step 8: Look at computer Step 9: Find keyboard Step 10: Type on keyboard Task: Browse internet Step 1: Walk to home office Step 2: Walk to computer Step 3: Find computer Step 4: Grab computer Step 5: Find chair Step 6: Sit on chair Step 7: Browse internet Task: Browse internet Step 1: Walk to home office Step 2: Walk to desk Step 3: Find chair Step 4: Sit on chair Step 5: Find computer Step 6: Switch on computer Step 7: Find mouse Step 8: Grab mouse Step 9: Turn to computer Step 10: Point at computer Task: Wash teeth Step 1: Stand up Step 2: Walk to bathroom Step 3: Walk to sink Step 4: Find sink Step 5: Turn to sink Step 6: Look at sink Step 7: Find teeth Step 8: Wash teeth Task: Wash teeth Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Turn on faucet Step 4: Grab toothbrush Step 5: Put toothpaste on tooth- brush Step 6: Put toothbrush in mouth Step 7: Brush teeth Step 8: Rinse mouth out with wa- ter Step 9: Turn off faucet Step 10: Walk back to bedroom Task: Wash teeth Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Find faucet Step 4: Switch on faucet Step 5: Walk to toothbrush Step 6: Grab toothbrush Task: Brush teeth Step 1: Walk to bathroom Step 2: Walk to tooth paste Step 3: Find tooth paste Step 4: Grab tooth paste Step 5: Find toothbrush Step 6: Grab toothbrush Task: Brush teeth Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Turn on water Step 4: Grab toothbrush Step 5: Put toothpaste on tooth- brush Step 6: Put toothbrush in mouth Step 7: Brush teeth Task: Brush teeth Step 1: Find toothbrush Step 2: Turn to toothbrush Step 3: Point at toothbrush Step 4: Wash toothbrush Task: Vacuum Step 1: Walk to home office Step 2: Walk to computer Step 3: Find vacuum cleaner Step 4: Switch on vacuum cleaner Step 5: Switch off vacuum cleaner Task: Vacuum Step 1: Walk to home office Step 2: Walk to vacuum Step 3: Find vacuum Step 4: Grab vacuum Step 5: Find chair Step 6: Sit on chair Step 7: Vacuum Task: Vacuum Step 1: Walk to home office Step 2: Walk to dresser Step 3: Open dresser Step 4: Find vacuum cleaner Step 5: Grab vacuum cleaner Step 6: Pull vacuum cleaner Step 7: Plug in vacuum cleaner Step 8: Switch on vacuum cleaner Task: Change sheets and pillow cases Step 1: Find pillow Step 2: Turn to pillow Step 3: Look at pillow Step 4: Grab pillow Task: Change sheets and pillow cases Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Change sheets and pillow cases Step 4: Walk to kitchen Step 5: Walk to sink Step 6: Wash sheets and pillow cases Step 7: Walk to bedroom Step 8: Put sheets and pillow cases on bed Step 9: Walk to living room Step 10: Sit on couch Task: Change sheets and pillow cases Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find sheets Step 4: Grab sheets Step 5: Find pillow Step 6: Grab pillow Task: Wash dirty dishes Step 1: Walk to dining room Step 2: Walk to sink Step 3: Find sponge Step 4: Grab sponge Step 5: Find faucet Step 6: Switch on faucet Step 7: Put sponge on sink Step 8: Grab sponge Step 9: Find dish soap Step 10: Grab dish soap Step 11: Pour dish soap into sponge Step 12: Put back dish soap Step 13: Find plate Step 14: Grab plate Step 15: Scrub plate Step 16: Rinse plate Step 17: Find dishrack Step 18: Put plate on dishrack Step 19: Find plate Step 20: Grab plate Step 21: Scrub plate Step 22: Rinse plate Step 23: Put plate on dishrack Step 24: Rinse sponge Step 25: Put back sponge Step 26: Switch off faucet Task: Wash dirty dishes Step 1: Walk to kitchen Step 2: Walk to sink Step 3: Wash dishes Step 4: Dry dishes Step 5: Put dishes away Task: Wash dirty dishes Step 1: Walk to dining room Step 2: Walk to sink Step 3: Find faucet Step 4: Switch on faucet Step 5: Walk to plate Step 6: Grab plate Task: Feed me Step 1: Walk to dining room Step 2: Walk to plate Step 3: Find plate Step 4: Grab plate Step 5: Find food Step 6: Grab food Step 7: Put food on plate Step 8: Find food Step 9: Grab food Step 10: Put food on plate Step 11: Find fork Step 12: Grab fork Step 13: Eat plate Step 14: Eat plate Task: Feed me Step 1: Walk to kitchen Step 2: Walk to refrigerator Step 3: Open refrigerator Step 4: Grab food Step 5: Find plate Step 6: Put food on plate Step 7: Find fork Step 8: Put fork on plate Step 9: Find spoon Step 10: Put spoon on plate Step 11: Find cup Step 12: Pour water in cup Step 13: Walk to table Step 14: Sit at table Step 15: Eat food Task: Feed me Step 1: Walk to dining room Step 2: Walk to table Step 3: Find table Step 4: Turn to table Step 5: Find chair Step 6: Sit on chair Step 7: Find food Step 8: Grab food Step 9: Find plate Step 10: Put food on plate Task: Breakfast Step 1: Walk to dining room Step 2: Walk to food Step 3: Grab food Step 4: Walk to bedroom Step 5: Walk to television Step 6: Switch on television Step 7: Walk to bed Step 8: Lie on bed Step 9: Turn to television Step 10: Watch television Step 11: Eat food Task: Breakfast Step 1: Walk to kitchen Step 2: Find cereal Step 3: Pour cereal into bowl Step 4: Pour milk into bowl Step 5: Walk to living room Step 6: Sit on couch Step 7: Eat cereal Task: Breakfast Step 1: Walk to dining room Step 2: Walk to freezer Step 3: Find freezer Step 4: Open freezer Step 5: Find bread Step 6: Grab bread Step 7: Close freezer Step 8: Find toaster Step 9: Plug in toaster Step 10: Put bread on plate Step 11: Switch on toaster Task: Read Step 1: Find novel Step 2: Grab novel Step 3: Walk to bedroom Step 4: Walk to chair Step 5: Sit on chair Step 6: Read novel Task: Read Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Read Step 1: Walk to home office Step 2: Walk to light Step 3: Find light Step 4: Switch on light Step 5: Find novel Step 6: Grab novel Step 7: Find chair Step 8: Sit on chair Step 9: Read novel Task: Style hair Step 1: Find towel Step 2: Turn to towel Step 3: Point at towel Step 4: Wash towel Step 5: Turn to towel Step 6: Look at towel Step 7: Squeeze towel Step 8: Walk to bathroom Task: Style hair Step 1: Walk to bathroom Step 2: Walk to mirror Step 3: Find hairbrush Step 4: Grab hairbrush Step 5: Find chair Step 6: Sit on chair Step 7: Style hair Task: Style hair Step 1: Walk to bathroom Step 2: Walk to mirror Step 3: Find hair Step 4: Grab hair Step 5: Find comb Step 6: Grab comb Step 7: Find brush Step 8: Grab brush Task: Pick up toys Step 1: Walk to bedroom Step 2: Walk to toy Step 3: Find toy Step 4: Grab toy Step 5: Walk to filing cabinet Step 6: Open filing cabinet Step 7: Put toy on filing cabinet Step 8: Find toy Step 9: Grab toy Step 10: Walk to filing cabinet Step 11: Put toy on filing cabinet Step 12: Find toy Step 13: Grab toy Step 14: Walk to filing cabinet Step 15: Put toy on filing cabinet Step 16: Close filing cabinet Task: Pick up toys Step 1: Walk to living room Step 2: Walk to toy box Step 3: Find toy box Step 4: Grab toy box Step 5: Find chair Step 6: Sit on chair Step 7: Pick up toys Task: Pick up toys Step 1: Find toy Step 2: Turn to toy Step 3: Point at toy Step 4: Wash toy Task: Decorate it Step 1: Walk to home office Step 2: Walk to centerpiece Step 3: Find centerpiece Step 4: Grab centerpiece Step 5: Walk to table Step 6: Put centerpiece on table Step 7: Find drawing Step 8: Grab drawing Step 9: Find wall Step 10: Turn to wall Step 11: Put drawing on wall Step 12: Find drawing Step 13: Grab drawing Step 14: Turn to wall Step 15: Put drawing on wall Task: Decorate it Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Step 8: Decorate it Task: Decorate it Step 1: Walk to table Step 2: Walk to centerpiece Step 3: Look at centerpiece Step 4: Grab centerpiece Step 5: Point at centerpiece Task: Put away groceries Step 1: Walk to dining room Step 2: Walk to freezer Step 3: Find freezer Step 4: Open freezer Step 5: Find food Step 6: Grab food Step 7: Put food in freezer Step 8: Close freezer Task: Put away groceries Step 1: Walk to kitchen Step 2: Walk to refrigerator Step 3: Open refrigerator Step 4: Grab milk and eggs Step 5: Close refrigerator Step 6: Walk to counter Step 7: Put milk and eggs on counter Step 8: Walk to cabinet Step 9: Open cabinet Step 10: Put away milk and eggs Step 11: Close cabinet Step 12: Walk to refrigerator Step 13: Grab orange juice and bread Step 14: Close refrigerator Task: Put away groceries Step 1: Walk to kitchen Step 2: Walk to fridge Step 3: Open fridge Step 4: Put food in fridge Step 5: Close fridge Step 6: Walk to dining room Step 7: Walk to livingroom Step 8: Walk to bedroom Step 9: Walk to bathroom Task: Draw picture Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find desk Step 6: Open desk Step 7: Find check Step 8: Grab check Step 9: Put check on desk Step 10: Find pencil Step 11: Grab pencil Step 12: Close desk Task: Draw picture Step 1: Walk to home office Step 2: Walk to pencils Step 3: Find pencils Step 4: Grab pencils Step 5: Find paper Step 6: Sit on chair Step 7: Draw picture Task: Draw picture Step 1: Walk to home office Step 2: Walk to wall Step 3: Walk to drawing Step 4: Find drawing Step 5: Turn to drawing Step 6: Look at drawing Step 7: Touch drawing Step 8: Pull drawing Step 9: Push drawing Task: Entertain Step 1: Walk to home office Step 2: Walk to cheese Step 3: Find cheese Step 4: Find food Step 5: Find couch Step 6: Sit on couch Step 7: Find wine glass Step 8: Grab wine glass Step 9: Drink wine glass Task: Entertain Step 1: Walk to living room Step 2: Walk to entertainment center Step 3: Find remote Step 4: Grab remote Step 5: Find chair Step 6: Sit on chair Step 7: Entertain self Task: Entertain Step 1: Walk to livingroom Step 2: Walk to couch Step 3: Find couch Step 4: Sit on couch Task: Type up document Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find computer Step 6: Switch on computer Step 7: Turn to computer Step 8: Look at computer Step 9: Find check Step 10: Grab check Step 11: Read check Step 12: Find coffee cup Step 13: Grab coffee cup Step 14: Drink coffee cup Step 15: Put back coffee cup Step 16: Find keyboard Step 17: Type on keyboard Task: Type up document Step 1: Walk to home office Step 2: Walk to keyboard Step 3: Find keyboard Step 4: Grab keyboard Step 5: Find chair Step 6: Sit on chair Step 7: Type document Task: Type up document Step 1: Walk to home office Step 2: Walk to computer Step 3: Find computer Step 4: Switch on computer Step 5: Find chair Step 6: Sit on chair Step 7: Turn to computer Step 8: Look at computer Step 9: Find keyboard Step 10: Grab keyboard Step 11: Type on keyboard Step 12: Stand up Step 13: Find printer Step 14: Switch on printer Step 15: Find printing paper Task: Put on your shoes Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Grab shoes Step 5: Find chair Step 6: Sit on chair Step 7: Find feet both Step 8: Put shoes on feet both Task: Put on your shoes Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Grab shoes Step 5: Find chair Step 6: Sit on chair Step 7: Put on shoes Task: Put on your shoes Step 1: Find shoes Step 2: Turn to shoes Step 3: Point at shoes Step 4: Wash shoes Task: Watch horror movie Step 1: Walk to home office Step 2: Walk to remote control Step 3: Find remote control Step 4: Grab remote control Step 5: Find couch Step 6: Sit on couch Step 7: Find television Step 8: Switch on television Step 9: Turn to television Step 10: Watch television Task: Watch horror movie Step 1: Walk to home office Step 2: Walk to horror movie Step 3: Find horror movie Step 4: Grab horror movie Step 5: Find chair Step 6: Sit on chair Step 7: Watch horror movie Task: Watch horror movie Step 1: Find television Step 2: Switch on television Step 3: Find cd player Step 4: Switch on cd player Step 5: Switch off cd player Step 6: Find remote control Step 7: Switch on remote control Step 8: Switch off remote control Task: Turn on radio Step 1: Walk to home office Step 2: Walk to stereo Step 3: Find stereo Step 4: Find electrical outlet Step 5: Turn to electrical outlet Step 6: Plug in stereo Step 7: Switch on electrical outlet Step 8: Switch on stereo Task: Turn on radio Step 1: Walk to home office Step 2: Walk to radio Step 3: Find radio Step 4: Grab radio Step 5: Find chair Step 6: Sit on chair Step 7: Turn on radio Task: Turn on radio Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find remote control Step 6: Grab remote control Step 7: Find radio Step 8: Point at radio Step 9: Switch on radio Step 10: Put back remote control Task: Look at mirror Step 1: Walk to bathroom Step 2: Walk to mirror Step 3: Find mirror Step 4: Turn to mirror Step 5: Look at mirror Task: Look at mirror Step 1: Walk to bathroom Step 2: Walk to mirror Step 3: Look in mirror Task: Look at mirror Step 1: Walk to bedroom Step 2: Walk to mirror Step 3: Find mirror Step 4: Turn to mirror Step 5: Look at mirror Step 6: Find face Step 7: Turn to face Step 8: Look at face Step 9: Find hair Step 10: Turn to hair Step 11: Look at hair Step 12: Find dress Step 13: Turn to dress Step 14: Look at dress Task: Leave home Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Grab shoes Step 5: Put on shoes Task: Leave home Step 1: Walk to front door Step 2: Open front door Step 3: Walk to car Step 4: Open car door Step 5: Get in car Step 6: Close car door Step 7: Drive to work Task: Leave home Step 1: Find shoes Step 2: Grab shoes Step 3: Put on shoes Task: Walk to room Step 1: Walk to home office Step 2: Walk to home office Task: Walk to room Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Walk to room Step 1: Walk to dining room Step 2: Walk to livingroom Step 3: Walk to bedroom Task: Hang pictures Step 1: Walk to bedroom Step 2: Walk to drawing Step 3: Find drawing Step 4: Grab drawing Step 5: Find wall Step 6: Put drawing on wall Step 7: Turn to drawing Step 8: Look at drawing Step 9: Find drawing Step 10: Grab drawing Step 11: Put drawing on wall Step 12: Turn to drawing Step 13: Look at drawing Task: Hang pictures Step 1: Walk to home office Step 2: Walk to box of pictures Step 3: Find box of pictures Step 4: Grab box of pictures Step 5: Walk to wall Step 6: Hang pictures on wall Task: Hang pictures Step 1: Walk to home office Step 2: Walk to table Step 3: Find keys Step 4: Grab keys Step 5: Walk to wall Step 6: Find hanger Step 7: Put keys on hanger Task: Wipe down sink Step 1: Walk to dining room Step 2: Walk to rag Step 3: Find rag Step 4: Grab rag Step 5: Walk to sink Step 6: Wipe sink Step 7: Put back rag Task: Wipe down sink Step 1: Walk to kitchen Step 2: Walk to sink Step 3: Grab sponge Step 4: Wipe down sink Step 5: Rinse sponge Step 6: Put sponge away Step 7: Wash hands Task: Wipe down sink Step 1: Walk to bathroom Step 2: Walk to cleaning solution Step 3: Find cleaning solution Step 4: Grab cleaning solution Step 5: Find sink Step 6: Pour cleaning solution into sink Step 7: Find faucet Step 8: Switch on faucet Step 9: Scrub sink Step 10: Wash sink Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Find shoes Step 5: Take off shoes Step 6: Find dresser Step 7: Open dresser Step 8: Grab shoes Step 9: Put shoes in dresser Step 10: Close dresser Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Grab shoes Step 5: Find chair Step 6: Sit on chair Step 7: Take shoes off Task: Take shoes off Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Task: Give milk to cat Step 1: Walk to home office Step 2: Walk to cat Step 3: Find cat Step 4: Turn to cat Step 5: Point at cat Step 6: Pull cat Step 7: Find milk Step 8: Grab milk Step 9: Find plate Step 10: Pour milk into plate Step 11: Touch cat Step 12: Scrub cat Task: Give milk to cat Step 1: Walk to kitchen Step 2: Walk to fridge Step 3: Open fridge Step 4: Grab milk Step 5: Walk to cat Step 6: Pour milk into bowl Step 7: Put bowl on floor Step 8: Walk away from cat Task: Give milk to cat Step 1: Find cat Step 2: Touch cat Step 3: Open fridge Step 4: Touch milk Step 5: Pour milk into bowl Task: Grab things Step 1: Walk to novel Step 2: Turn to novel Step 3: Grab novel Task: Grab things Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Step 8: Grab things Task: Grab things Step 1: Find toy Step 2: Turn to toy Step 3: Point at toy Step 4: Wash toy Task: Use laptop Step 1: Walk to home office Step 2: Walk to couch Step 3: Find couch Step 4: Sit on couch Step 5: Find laptop Step 6: Switch on laptop Step 7: Turn to laptop Step 8: Look at laptop Step 9: Find keyboard Step 10: Type on keyboard Step 11: Turn to keyboard Step 12: Look at keyboard Step 13: Type on keyboard Step 14: Turn to laptop Step 15: Look at laptop Task: Use laptop Step 1: Walk to home office Step 2: Walk to laptop Step 3: Find laptop Step 4: Grab laptop Step 5: Find chair Step 6: Sit on chair Step 7: Use laptop Task: Use laptop Step 1: Walk to home office Step 2: Walk to chair Step 3: Find chair Step 4: Sit on chair Step 5: Find laptop Step 6: Switch on laptop Step 7: Find mouse Step 8: Grab mouse Step 9: Find mousepad Step 10: Put mouse on mousepad Step 11: Turn to laptop Step 12: Point at laptop Task: Organize pantry Step 1: Walk to dining room Step 2: Walk to pantry Step 3: Find food Step 4: Grab food Step 5: Turn to food Step 6: Look at food Step 7: Find garbage can Step 8: Put food on garbage can Step 9: Find vegetable Step 10: Grab vegetable Step 11: Turn to vegetable Step 12: Look at vegetable Step 13: Put vegetable on garbage can Step 14: Find dry pasta Step 15: Grab dry pasta Step 16: Turn to dry pasta Step 17: Look at dry pasta Step 18: Put back dry pasta Step 19: Find food Step 20: Turn to food Step 21: Look at food Step 22: Push food Step 23: Find noodles Step 24: Grab noodles Step 25: Turn to noodles Step 26: Look at noodles Step 27: Put back noodles Task: Organize pantry Step 1: Walk to kitchen Step 2: Walk to pantry Step 3: Find pantry Step 4: Grab pantry Step 5: Find chair Step 6: Sit on chair Step 7: Organize pantry Task: Organize pantry Step 1: Walk to pantry Step 2: Find pantry Task: Change clothes Step 1: Walk to bedroom Step 2: Walk to dresser Step 3: Open dresser Step 4: Find dress Step 5: Grab dress Step 6: Put on dress Step 7: Close dresser Task: Change clothes Step 1: Walk to bedroom Step 2: Walk to closet Step 3: Find clothes Step 4: Grab clothes Step 5: Find chair Step 6: Sit on chair Step 7: Change clothes Task: Change clothes Step 1: Walk to bedroom Step 2: Walk to dresser Step 3: Find dresser Step 4: Open dresser Step 5: Find pants Step 6: Grab pants Step 7: Put on pants Step 8: Find shirt Step 9: Grab shirt Step 10: Put on shirt Step 11: Close dresser Task: Put up decoration Step 1: Walk to home office Step 2: Walk to drawing Step 3: Find drawing Step 4: Find centerpiece Step 5: Grab centerpiece Step 6: Walk to wall Step 7: Grab drawing Step 8: Put drawing on wall Step 9: Find centerpiece Step 10: Grab centerpiece Step 11: Walk to table Step 12: Put centerpiece on table Task: Put up decoration Step 1: Walk to home office Step 2: Walk to decoration Step 3: Find decoration Step 4: Grab decoration Step 5: Find chair Step 6: Sit on chair Step 7: Put up decoration Task: Put up decoration Step 1: Walk to livingroom Step 2: Walk to table Task: Make bed Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find sheets Step 4: Grab sheets Step 5: Pull sheets Task: Make bed Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find sheets Step 4: Find blanket Step 5: Find pillow Step 6: Put sheets on bed Step 7: Put blanket on bed Step 8: Put pillow on bed Task: Make bed Step 1: Stand up Step 2: Find sheets Step 3: Find blanket Step 4: Find pillow Step 5: Find comforter Step 6: Find bed Task: Scrubbing living room tile floor is once week activity for me Step 1: Find mop Step 2: Turn to mop Step 3: Point at mop Step 4: Wash mop Step 5: Turn to mop Step 6: Look at mop Task: Scrubbing living room tile floor is once week activity for me Step 1: Walk to living room Step 2: Walk to tile floor Step 3: Find scrub brush Step 4: Grab scrub brush Step 5: Scrub tile floor Step 6: Put down scrub brush Step 7: Walk to kitchen Task: Scrubbing living room tile floor is once week activity for me Step 1: Walk to livingroom Step 2: Walk to mop Step 3: Find mop Step 4: Grab mop Step 5: Walk to bathroom Step 6: Find bucket Step 7: Switch on faucet Task: Read yourself to sleep Step 1: Walk to bedroom Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find bed Step 6: Sit on bed Step 7: Find bookmark Step 8: Grab bookmark Step 9: Read novel Step 10: Put bookmark on novel Step 11: Sleep Task: Read yourself to sleep Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Find book Step 4: Grab book Step 5: Find chair Step 6: Sit on chair Step 7: Read book Step 8: Sleep Task: Read yourself to sleep Step 1: Walk to bedroom Step 2: Walk to bed Step 3: Lie on bed Step 4: Sleep Step 5: Read book Task: Hand washing Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Find faucet Step 4: Switch on faucet Step 5: Find soap Step 6: Grab soap Step 7: Find hands both Step 8: Scrub hands both Step 9: Put back soap Step 10: Wash hands both Step 11: Switch off faucet Step 12: Find towel Step 13: Grab towel Step 14: Wipe hands both Task: Hand washing Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Turn on faucet Step 4: Grab soap Step 5: Wash hands Step 6: Rinse hands Step 7: Dry hands Task: Hand washing Step 1: Walk to bathroom Step 2: Walk to sink Step 3: Find faucet Step 4: Turn to faucet Step 5: Find hands both Step 6: Wash hands both Task: Throw away paper Step 1: Walk to home office Step 2: Walk to desk Step 3: Find desk Step 4: Turn to desk Step 5: Find chair Step 6: Sit on chair Step 7: Find check Step 8: Grab check Step 9: Squeeze check Step 10: Stand up Step 11: Walk to trashcan Step 12: Put check on trashcan Task: Throw away paper Step 1: Walk to home office Step 2: Walk to wastebasket Step 3: Find wastebasket Step 4: Grab wastebasket Step 5: Walk to desk Step 6: Drop paper in wastebas- ket Task: Throw away paper Step 1: Walk to home office Step 2: Walk to table Step 3: Find table Step 4: Turn to table Step 5: Find paper Step 6: Grab paper Step 7: Walk to trashcan Step 8: Open trashcan Step 9: Put paper on trashcan Step 10: Close trashcan Task: Tale off shoes Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Step 4: Find shoes Step 5: Take off shoes Step 6: Grab shoes Step 7: Find mat Step 8: Put shoes on mat Task: Tale off shoes Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Tale off shoes Step 1: Walk to home office Step 2: Walk to shoes Step 3: Find shoes Task: Hang keys Step 1: Walk to bedroom Step 2: Walk to dresser Step 3: Find purse Step 4: Grab purse Step 5: Open purse Step 6: Find keys Step 7: Grab keys Step 8: Find bowl Step 9: Put keys on bowl Step 10: Close purse Step 11: Put back purse Task: Hang keys Step 1: Walk to home office Step 2: Walk to key hook Step 3: Find key hook Step 4: Grab key hook Step 5: Find keys Step 6: Hang keys on key hook Step 7: Walk to front door Step 8: Leave house Task: Hang keys Step 1: Walk to home office Step 2: Walk to table Step 3: Find keys Step 4: Grab keys Step 5: Walk to wall Step 6: Find hanger Step 7: Put keys on hanger Task: Make popcorn Step 1: Walk to dining room Step 2: Walk to food Step 3: Find food Step 4: Grab food Step 5: Walk to microwave Step 6: Turn to microwave Step 7: Open microwave Step 8: Put food in microwave Step 9: Close microwave Step 10: Switch on microwave Task: Make popcorn Step 1: Walk to kitchen Step 2: Walk to microwave Step 3: Open microwave Step 4: Put bag of popcorn in mi- crowave Step 5: Close microwave Step 6: Push buttons on mi- crowave Step 7: Wait for popcorn to pop Step 8: Get bowl out of cupboard Step 9: Get butter out of fridge Step 10: Get salt out of cupboard Step 11: Pour popcorn into bowl Step 12: Add butter and salt to bowl Step 13: Task: Make popcorn Step 1: Walk to kitchen Step 2: Walk to microwave Step 3: Find microwave Step 4: Open microwave Task: Receive credit card Step 1: Walk to home office Step 2: Walk to envelope Step 3: Find envelope Step 4: Grab envelope Step 5: Walk to home office Step 6: Walk to scissors Step 7: Find scissors Step 8: Open envelope Step 9: Find creditcard Step 10: Grab creditcard Task: Receive credit card Step 1: Walk to mailbox Step 2: Open mailbox Step 3: Grab credit card Step 4: Walk to home office Step 5: Walk to desk Step 6: Put credit card on desk Step 7: Sit at desk Step 8: Look at credit card Task: Receive credit card Step 1: Walk to home office Step 2: Walk to cabinet Step 3: Find cabinet Step 4: Open cabinet Task: Read to child Step 1: Walk to bedroom Step 2: Walk to child Step 3: Find child Step 4: Greet child Step 5: Walk to filing cabinet Step 6: Open filing cabinet Step 7: Find novel Step 8: Grab novel Step 9: Walk to chair Step 10: Pull chair Step 11: Sit on chair Step 12: Turn to novel Step 13: Look at novel Step 14: Turn to novel Step 15: Point at novel Step 16: Turn to novel Step 17: Point at novel Step 18: Read novel Step 19: Read novel Step 20: Read novel Task: Read to child Step 1: Walk to home office Step 2: Walk to novel Step 3: Find novel Step 4: Grab novel Step 5: Find chair Step 6: Sit on chair Step 7: Read novel Task: Read to child Step 1: Walk to child Step 2: Read book Task: Eat cheese Step 1: Walk to dining room Step 2: Walk to freezer Step 3: Open freezer Step 4: Find cheese Step 5: Grab cheese Step 6: Eat cheese Task: Eat cheese Step 1: Walk to kitchen Step 2: Walk to refrigerator Step 3: Open refrigerator Step 4: Grab cheese Step 5: Eat cheese Task: Eat cheese Step 1: Walk to dining room Step 2: Walk to table Step 3: Find table Step 4: Turn to table Step 5: Find chair Step 6: Sit on chair Step 7: Find food Step 8: Grab food Step 9: Find plate Step 10: Put food on plate 9: Find phone Step 10: Grab phone Task: Unload various items from pockets and place them in bowl on table Step 1: Walk to home office Step 2: Walk to bowl on table Step 3: Find bowl on table Step 4: Grab bowl on table Step 5: Unload various items from pockets and place them in bowl on table Task: Unload various items from pockets and place them in bowl on table Step 1: Find bowl Step 2: Turn to bowl Step 3: Point at bowl Step 4: Wash bowl Task: Switch on lamp Step 1: Walk to bedroom Step 2: Walk to floor lamp Step 3: Find floor lamp Step 4: Switch on floor lamp Task: Switch on lamp Step 1: Walk to lamp Step 2: Switch on lamp Step 3: Walk to chair Step 4: Sit on chair Step 5: Read book Task: Switch on lamp Step 1: Walk to bedroom Step 2: Walk to floor lamp Step 3: Find floor lamp Step 4: Turn to floor lamp Step 5: Switch on floor lamp Step 6: Find bed Step 7: Lie on bed Task: Take jacket off Step 1: Walk to bedroom Step 2: Walk to jacket Step 3: Find jacket Step 4: Find jacket Step 5: Take off jacket Step 6: Find dresser Step 7: Open dresser Step 8: Close dresser Task: Take jacket off Step 1: Walk to home office Step 2: Walk to jacket Step 3: Find jacket Step 4: Grab jacket Step 5: Find chair Step 6: Sit on chair Step 7: Take jacket off Task: Take jacket off Step 1: Walk to home office Step 2: Walk to jacket Step 3: Find jacket\n", "annotations": {"author": "[{\"end\":108,\"start\":94},{\"end\":123,\"start\":109},{\"end\":138,\"start\":124},{\"end\":153,\"start\":139},{\"end\":161,\"start\":154},{\"end\":184,\"start\":162},{\"end\":214,\"start\":185}]", "publisher": null, "author_last_name": "[{\"end\":107,\"start\":102},{\"end\":122,\"start\":116},{\"end\":137,\"start\":131},{\"end\":152,\"start\":144},{\"end\":160,\"start\":154}]", "author_first_name": "[{\"end\":101,\"start\":94},{\"end\":115,\"start\":109},{\"end\":130,\"start\":124},{\"end\":143,\"start\":139}]", "author_affiliation": "[{\"end\":183,\"start\":163},{\"end\":213,\"start\":186}]", "title": "[{\"end\":91,\"start\":1},{\"end\":305,\"start\":215}]", "venue": null, "abstract": "[{\"end\":1947,\"start\":307}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2083,\"start\":2079},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":2086,\"start\":2083},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":2089,\"start\":2086},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2091,\"start\":2089},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2100,\"start\":2097},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":2293,\"start\":2289},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":2296,\"start\":2293},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2298,\"start\":2296},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3125,\"start\":3121},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3585,\"start\":3582},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":3599,\"start\":3596},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4476,\"start\":4472},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":7600,\"start\":7596},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":7898,\"start\":7894},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":9506,\"start\":9503},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":12522,\"start\":12518},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13028,\"start\":13024},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":14095,\"start\":14092},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":14387,\"start\":14383},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":14389,\"start\":14387},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":14546,\"start\":14543},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":15140,\"start\":15136},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":15368,\"start\":15365},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":15443,\"start\":15440},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":17436,\"start\":17432},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":17439,\"start\":17436},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":17475,\"start\":17471},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":20792,\"start\":20788},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":20795,\"start\":20792},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":20798,\"start\":20795},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20801,\"start\":20798},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":22710,\"start\":22706},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":22740,\"start\":22736},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23754,\"start\":23753},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":24321,\"start\":24320},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":24338,\"start\":24334},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":24544,\"start\":24540},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":26698,\"start\":26694},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":26701,\"start\":26698},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":29858,\"start\":29854},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29861,\"start\":29858},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":29864,\"start\":29861},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":29897,\"start\":29894},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":29949,\"start\":29945},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":31224,\"start\":31220},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":31423,\"start\":31419},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":33572,\"start\":33568},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":33755,\"start\":33751},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":33758,\"start\":33755},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":33761,\"start\":33758},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":33763,\"start\":33761},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":33848,\"start\":33844},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33888,\"start\":33884},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":33926,\"start\":33922},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":33928,\"start\":33926},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":33953,\"start\":33950},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":33956,\"start\":33953},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":34046,\"start\":34042},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":34049,\"start\":34046},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":34284,\"start\":34280},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":34287,\"start\":34284},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":34289,\"start\":34287},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":34292,\"start\":34289},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":34295,\"start\":34292},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":34759,\"start\":34756},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":34762,\"start\":34759},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":34765,\"start\":34762},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":34768,\"start\":34765},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":35015,\"start\":35011},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":35018,\"start\":35015},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":35021,\"start\":35018},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":35024,\"start\":35021},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":35027,\"start\":35024},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":35029,\"start\":35027},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":35227,\"start\":35223},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":35230,\"start\":35227},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":35247,\"start\":35243},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":35250,\"start\":35247},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":35253,\"start\":35250},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":35267,\"start\":35263},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":35270,\"start\":35267},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":35273,\"start\":35270},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":35380,\"start\":35376},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":35436,\"start\":35432},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":36017,\"start\":36013},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":36020,\"start\":36017},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":36069,\"start\":36065},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":36124,\"start\":36120},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":36127,\"start\":36124},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":36388,\"start\":36384},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":39516,\"start\":39512},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":40983,\"start\":40979},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":41940,\"start\":41936},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":42759,\"start\":42755}]", "figure": "[{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":43042,\"start\":42670},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":43093,\"start\":43043},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":43166,\"start\":43094},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":44094,\"start\":43167},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":45957,\"start\":44095},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":47296,\"start\":45958}]", "paragraph": "[{\"end\":2326,\"start\":1963},{\"end\":2779,\"start\":2328},{\"end\":3555,\"start\":2781},{\"end\":4184,\"start\":3557},{\"end\":5008,\"start\":4186},{\"end\":5656,\"start\":5010},{\"end\":5713,\"start\":5658},{\"end\":5911,\"start\":5715},{\"end\":6044,\"start\":5913},{\"end\":6188,\"start\":6046},{\"end\":6222,\"start\":6204},{\"end\":6242,\"start\":6224},{\"end\":6286,\"start\":6244},{\"end\":6323,\"start\":6288},{\"end\":6332,\"start\":6325},{\"end\":6345,\"start\":6334},{\"end\":6365,\"start\":6347},{\"end\":6390,\"start\":6367},{\"end\":6436,\"start\":6392},{\"end\":6542,\"start\":6506},{\"end\":6579,\"start\":6544},{\"end\":6617,\"start\":6581},{\"end\":6719,\"start\":6653},{\"end\":7319,\"start\":6721},{\"end\":8132,\"start\":7344},{\"end\":9784,\"start\":8171},{\"end\":9944,\"start\":9787},{\"end\":10232,\"start\":9966},{\"end\":10390,\"start\":10234},{\"end\":10902,\"start\":10392},{\"end\":11391,\"start\":10914},{\"end\":12035,\"start\":11393},{\"end\":13114,\"start\":12037},{\"end\":13714,\"start\":13125},{\"end\":14142,\"start\":13716},{\"end\":15306,\"start\":14195},{\"end\":16019,\"start\":15308},{\"end\":16916,\"start\":16177},{\"end\":17260,\"start\":16918},{\"end\":17348,\"start\":17315},{\"end\":17839,\"start\":17350},{\"end\":18673,\"start\":17880},{\"end\":19552,\"start\":18762},{\"end\":20363,\"start\":19616},{\"end\":20902,\"start\":20365},{\"end\":21480,\"start\":20904},{\"end\":21874,\"start\":21492},{\"end\":22369,\"start\":21876},{\"end\":22812,\"start\":22371},{\"end\":23833,\"start\":22875},{\"end\":25110,\"start\":23835},{\"end\":25522,\"start\":25112},{\"end\":26340,\"start\":25567},{\"end\":27336,\"start\":26407},{\"end\":28324,\"start\":27338},{\"end\":28537,\"start\":28384},{\"end\":28979,\"start\":28601},{\"end\":29675,\"start\":28981},{\"end\":30452,\"start\":29715},{\"end\":31705,\"start\":30534},{\"end\":31822,\"start\":31707},{\"end\":31851,\"start\":31824},{\"end\":31874,\"start\":31853},{\"end\":31894,\"start\":31876},{\"end\":31919,\"start\":31896},{\"end\":31939,\"start\":31921},{\"end\":31959,\"start\":31941},{\"end\":31979,\"start\":31961},{\"end\":32001,\"start\":31981},{\"end\":32242,\"start\":32003},{\"end\":32344,\"start\":32274},{\"end\":32447,\"start\":32346},{\"end\":33381,\"start\":32478},{\"end\":33431,\"start\":33422},{\"end\":34507,\"start\":33449},{\"end\":35437,\"start\":34509},{\"end\":36803,\"start\":35439},{\"end\":37105,\"start\":36845},{\"end\":37209,\"start\":37107},{\"end\":37780,\"start\":37211},{\"end\":38585,\"start\":37782},{\"end\":39149,\"start\":38621},{\"end\":39746,\"start\":39151},{\"end\":40028,\"start\":39748},{\"end\":40175,\"start\":40071},{\"end\":40204,\"start\":40177},{\"end\":40227,\"start\":40206},{\"end\":40247,\"start\":40229},{\"end\":40269,\"start\":40249},{\"end\":40292,\"start\":40271},{\"end\":40320,\"start\":40294},{\"end\":40346,\"start\":40322},{\"end\":40372,\"start\":40348},{\"end\":40395,\"start\":40374},{\"end\":40442,\"start\":40397},{\"end\":40471,\"start\":40444},{\"end\":40494,\"start\":40473},{\"end\":40514,\"start\":40496},{\"end\":40536,\"start\":40516},{\"end\":40557,\"start\":40538},{\"end\":40595,\"start\":40559},{\"end\":40624,\"start\":40597},{\"end\":40647,\"start\":40626},{\"end\":40667,\"start\":40649},{\"end\":40687,\"start\":40669},{\"end\":40707,\"start\":40689},{\"end\":40729,\"start\":40709},{\"end\":40749,\"start\":40731},{\"end\":41822,\"start\":40786},{\"end\":41993,\"start\":41850},{\"end\":42669,\"start\":42051}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":9786,\"start\":9785},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9965,\"start\":9945},{\"attributes\":{\"id\":\"formula_2\"},\"end\":14161,\"start\":14143},{\"attributes\":{\"id\":\"formula_3\"},\"end\":16124,\"start\":16020},{\"attributes\":{\"id\":\"formula_4\"},\"end\":17314,\"start\":17261},{\"attributes\":{\"id\":\"formula_6\"},\"end\":18761,\"start\":18674}]", "table_ref": "[{\"end\":25690,\"start\":25683},{\"end\":26979,\"start\":26972},{\"end\":27475,\"start\":27468},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":28536,\"start\":28529},{\"end\":29079,\"start\":29072},{\"end\":29979,\"start\":29972},{\"end\":30389,\"start\":30382},{\"end\":31534,\"start\":31527},{\"end\":32377,\"start\":32370},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":32812,\"start\":32805}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1961,\"start\":1949},{\"end\":6202,\"start\":6191},{\"end\":6461,\"start\":6439},{\"end\":6470,\"start\":6464},{\"end\":6495,\"start\":6473},{\"end\":6504,\"start\":6498},{\"end\":6642,\"start\":6620},{\"end\":6651,\"start\":6645},{\"attributes\":{\"n\":\"2\"},\"end\":7342,\"start\":7322},{\"attributes\":{\"n\":\"2.1\"},\"end\":8169,\"start\":8135},{\"attributes\":{\"n\":\"2.2\"},\"end\":10912,\"start\":10905},{\"attributes\":{\"n\":\"3\"},\"end\":13123,\"start\":13117},{\"attributes\":{\"n\":\"3.1\"},\"end\":14193,\"start\":14163},{\"attributes\":{\"n\":\"3.2\"},\"end\":16175,\"start\":16126},{\"attributes\":{\"n\":\"3.3\"},\"end\":17878,\"start\":17842},{\"attributes\":{\"n\":\"3.4\"},\"end\":19614,\"start\":19555},{\"attributes\":{\"n\":\"4\"},\"end\":21490,\"start\":21483},{\"attributes\":{\"n\":\"4.1\"},\"end\":22873,\"start\":22815},{\"attributes\":{\"n\":\"4.2\"},\"end\":25565,\"start\":25525},{\"attributes\":{\"n\":\"4.3\"},\"end\":26405,\"start\":26343},{\"attributes\":{\"n\":\"5\"},\"end\":28351,\"start\":28327},{\"attributes\":{\"n\":\"5.1\"},\"end\":28382,\"start\":28354},{\"attributes\":{\"n\":\"5.2\"},\"end\":28599,\"start\":28540},{\"attributes\":{\"n\":\"5.3\"},\"end\":29713,\"start\":29678},{\"attributes\":{\"n\":\"5.4\"},\"end\":30532,\"start\":30455},{\"end\":32252,\"start\":32245},{\"end\":32272,\"start\":32255},{\"attributes\":{\"n\":\"5.5\"},\"end\":32476,\"start\":32450},{\"end\":33420,\"start\":33384},{\"attributes\":{\"n\":\"6\"},\"end\":33447,\"start\":33434},{\"attributes\":{\"n\":\"7\"},\"end\":36843,\"start\":36806},{\"end\":38619,\"start\":38588},{\"end\":40041,\"start\":40031},{\"end\":40069,\"start\":40044},{\"end\":40784,\"start\":40752},{\"end\":41848,\"start\":41825},{\"end\":42049,\"start\":41996},{\"end\":43053,\"start\":43044},{\"end\":43104,\"start\":43095}]", "table": "[{\"end\":43042,\"start\":42863},{\"end\":44094,\"start\":43288},{\"end\":45957,\"start\":45265},{\"end\":47296,\"start\":46254}]", "figure_caption": "[{\"end\":42863,\"start\":42672},{\"end\":43093,\"start\":43055},{\"end\":43166,\"start\":43106},{\"end\":43288,\"start\":43169},{\"end\":45265,\"start\":44097},{\"end\":46254,\"start\":45960}]", "figure_ref": "[{\"end\":5141,\"start\":5133},{\"end\":6782,\"start\":6774},{\"end\":15017,\"start\":15009},{\"end\":20834,\"start\":20826},{\"end\":21093,\"start\":21085},{\"end\":21873,\"start\":21865},{\"end\":23883,\"start\":23875},{\"end\":27258,\"start\":27250},{\"end\":28978,\"start\":28970},{\"end\":29601,\"start\":29593},{\"end\":30748,\"start\":30740},{\"end\":32186,\"start\":32178},{\"end\":41726,\"start\":41718},{\"end\":41736,\"start\":41728},{\"end\":42505,\"start\":42497},{\"end\":42518,\"start\":42510}]", "bib_author_first_name": "[{\"end\":48289,\"start\":48284},{\"end\":48302,\"start\":48300},{\"end\":48313,\"start\":48307},{\"end\":48325,\"start\":48321},{\"end\":48337,\"start\":48333},{\"end\":48351,\"start\":48347},{\"end\":48367,\"start\":48364},{\"end\":48381,\"start\":48374},{\"end\":48394,\"start\":48389},{\"end\":48987,\"start\":48983},{\"end\":48999,\"start\":48995},{\"end\":49580,\"start\":49575},{\"end\":49596,\"start\":49592},{\"end\":49598,\"start\":49597},{\"end\":49612,\"start\":49607},{\"end\":49624,\"start\":49620},{\"end\":49639,\"start\":49633},{\"end\":49654,\"start\":49647},{\"end\":49656,\"start\":49655},{\"end\":49682,\"start\":49673},{\"end\":49701,\"start\":49694},{\"end\":49712,\"start\":49708},{\"end\":49727,\"start\":49723},{\"end\":49746,\"start\":49739},{\"end\":49767,\"start\":49761},{\"end\":49781,\"start\":49774},{\"end\":49795,\"start\":49788},{\"end\":49812,\"start\":49807},{\"end\":49832,\"start\":49824},{\"end\":49844,\"start\":49839},{\"end\":49851,\"start\":49845},{\"end\":49863,\"start\":49859},{\"end\":49876,\"start\":49871},{\"end\":49892,\"start\":49886},{\"end\":49906,\"start\":49902},{\"end\":49925,\"start\":49918},{\"end\":49938,\"start\":49934},{\"end\":49951,\"start\":49946},{\"end\":49966,\"start\":49964},{\"end\":49986,\"start\":49979},{\"end\":50002,\"start\":49996},{\"end\":50015,\"start\":50009},{\"end\":50027,\"start\":50022},{\"end\":50043,\"start\":50039},{\"end\":50056,\"start\":50050},{\"end\":50070,\"start\":50066},{\"end\":50090,\"start\":50081},{\"end\":50102,\"start\":50097},{\"end\":50118,\"start\":50114},{\"end\":50136,\"start\":50130},{\"end\":50138,\"start\":50137},{\"end\":50152,\"start\":50147},{\"end\":50161,\"start\":50157},{\"end\":50172,\"start\":50168},{\"end\":50184,\"start\":50178},{\"end\":50198,\"start\":50192},{\"end\":50209,\"start\":50206},{\"end\":50225,\"start\":50216},{\"end\":50245,\"start\":50236},{\"end\":50260,\"start\":50255},{\"end\":50281,\"start\":50273},{\"end\":50295,\"start\":50291},{\"end\":50307,\"start\":50303},{\"end\":50321,\"start\":50317},{\"end\":50338,\"start\":50332},{\"end\":50352,\"start\":50346},{\"end\":50366,\"start\":50362},{\"end\":50406,\"start\":50401},{\"end\":50420,\"start\":50415},{\"end\":50422,\"start\":50421},{\"end\":50437,\"start\":50430},{\"end\":50450,\"start\":50446},{\"end\":50452,\"start\":50451},{\"end\":50468,\"start\":50461},{\"end\":50480,\"start\":50475},{\"end\":50493,\"start\":50487},{\"end\":50504,\"start\":50498},{\"end\":50513,\"start\":50509},{\"end\":50521,\"start\":50514},{\"end\":50535,\"start\":50526},{\"end\":50548,\"start\":50541},{\"end\":50564,\"start\":50559},{\"end\":50577,\"start\":50570},{\"end\":50593,\"start\":50587},{\"end\":50606,\"start\":50601},{\"end\":50619,\"start\":50614},{\"end\":50632,\"start\":50627},{\"end\":53156,\"start\":53148},{\"end\":53174,\"start\":53170},{\"end\":53188,\"start\":53181},{\"end\":53201,\"start\":53196},{\"end\":53219,\"start\":53211},{\"end\":53234,\"start\":53228},{\"end\":53251,\"start\":53245},{\"end\":53271,\"start\":53265},{\"end\":53285,\"start\":53279},{\"end\":53678,\"start\":53672},{\"end\":53688,\"start\":53684},{\"end\":53700,\"start\":53695},{\"end\":53714,\"start\":53709},{\"end\":53734,\"start\":53729},{\"end\":53994,\"start\":53990},{\"end\":54006,\"start\":54001},{\"end\":54021,\"start\":54015},{\"end\":54033,\"start\":54027},{\"end\":54048,\"start\":54040},{\"end\":54061,\"start\":54056},{\"end\":54075,\"start\":54070},{\"end\":54089,\"start\":54085},{\"end\":54105,\"start\":54097},{\"end\":54118,\"start\":54114},{\"end\":54502,\"start\":54498},{\"end\":54516,\"start\":54510},{\"end\":54535,\"start\":54527},{\"end\":54551,\"start\":54546},{\"end\":54569,\"start\":54560},{\"end\":54589,\"start\":54578},{\"end\":54601,\"start\":54597},{\"end\":54906,\"start\":54903},{\"end\":54922,\"start\":54916},{\"end\":54943,\"start\":54932},{\"end\":55600,\"start\":55595},{\"end\":55617,\"start\":55609},{\"end\":55631,\"start\":55625},{\"end\":55645,\"start\":55637},{\"end\":55655,\"start\":55646},{\"end\":56021,\"start\":56015},{\"end\":56037,\"start\":56029},{\"end\":56048,\"start\":56042},{\"end\":56060,\"start\":56056},{\"end\":56076,\"start\":56071},{\"end\":56100,\"start\":56086},{\"end\":56116,\"start\":56110},{\"end\":56139,\"start\":56135},{\"end\":56151,\"start\":56148},{\"end\":56165,\"start\":56159},{\"end\":56571,\"start\":56565},{\"end\":56581,\"start\":56576},{\"end\":56601,\"start\":56595},{\"end\":56616,\"start\":56610},{\"end\":56929,\"start\":56923},{\"end\":56939,\"start\":56935},{\"end\":56952,\"start\":56947},{\"end\":57213,\"start\":57208},{\"end\":57528,\"start\":57525},{\"end\":57546,\"start\":57540},{\"end\":57561,\"start\":57555},{\"end\":57578,\"start\":57572},{\"end\":57592,\"start\":57588},{\"end\":57605,\"start\":57600},{\"end\":57617,\"start\":57611},{\"end\":57630,\"start\":57625},{\"end\":58076,\"start\":58071},{\"end\":58087,\"start\":58083},{\"end\":58104,\"start\":58095},{\"end\":58114,\"start\":58111},{\"end\":58371,\"start\":58367},{\"end\":58390,\"start\":58384},{\"end\":58537,\"start\":58534},{\"end\":58551,\"start\":58548},{\"end\":58560,\"start\":58558},{\"end\":58572,\"start\":58565},{\"end\":58586,\"start\":58581},{\"end\":58892,\"start\":58885},{\"end\":58907,\"start\":58902},{\"end\":58920,\"start\":58917},{\"end\":58938,\"start\":58930},{\"end\":59254,\"start\":59253},{\"end\":59518,\"start\":59510},{\"end\":59527,\"start\":59526},{\"end\":59538,\"start\":59535},{\"end\":59549,\"start\":59543},{\"end\":59870,\"start\":59866},{\"end\":59885,\"start\":59878},{\"end\":59902,\"start\":59896},{\"end\":59911,\"start\":59908},{\"end\":59928,\"start\":59924},{\"end\":59942,\"start\":59936},{\"end\":59959,\"start\":59953},{\"end\":59972,\"start\":59968},{\"end\":59985,\"start\":59978},{\"end\":59996,\"start\":59993},{\"end\":60276,\"start\":60275},{\"end\":60293,\"start\":60286},{\"end\":60303,\"start\":60298},{\"end\":60627,\"start\":60621},{\"end\":60638,\"start\":60632},{\"end\":60650,\"start\":60645},{\"end\":60662,\"start\":60655},{\"end\":60673,\"start\":60669},{\"end\":60690,\"start\":60683},{\"end\":60706,\"start\":60701},{\"end\":60720,\"start\":60716},{\"end\":61050,\"start\":61041},{\"end\":61063,\"start\":61057},{\"end\":61075,\"start\":61070},{\"end\":61090,\"start\":61083},{\"end\":61106,\"start\":61101},{\"end\":61566,\"start\":61558},{\"end\":61579,\"start\":61572},{\"end\":61591,\"start\":61586},{\"end\":61603,\"start\":61599},{\"end\":61619,\"start\":61611},{\"end\":61633,\"start\":61627},{\"end\":61856,\"start\":61850},{\"end\":61866,\"start\":61862},{\"end\":61877,\"start\":61872},{\"end\":61892,\"start\":61885},{\"end\":61903,\"start\":61897},{\"end\":61916,\"start\":61911},{\"end\":61927,\"start\":61923},{\"end\":61938,\"start\":61934},{\"end\":61950,\"start\":61946},{\"end\":61971,\"start\":61964},{\"end\":62307,\"start\":62302},{\"end\":62318,\"start\":62312},{\"end\":62639,\"start\":62634},{\"end\":62653,\"start\":62647},{\"end\":62864,\"start\":62859},{\"end\":62878,\"start\":62872},{\"end\":63227,\"start\":63222},{\"end\":63243,\"start\":63238},{\"end\":63263,\"start\":63257},{\"end\":63274,\"start\":63269},{\"end\":63289,\"start\":63285},{\"end\":63303,\"start\":63298},{\"end\":63609,\"start\":63604},{\"end\":63632,\"start\":63623},{\"end\":63650,\"start\":63645},{\"end\":63974,\"start\":63966},{\"end\":63987,\"start\":63982},{\"end\":63998,\"start\":63993},{\"end\":64014,\"start\":64006},{\"end\":64778,\"start\":64777},{\"end\":64796,\"start\":64789},{\"end\":64809,\"start\":64804},{\"end\":64824,\"start\":64816},{\"end\":65174,\"start\":65167},{\"end\":65194,\"start\":65187},{\"end\":65216,\"start\":65203},{\"end\":65676,\"start\":65671},{\"end\":65689,\"start\":65686},{\"end\":65710,\"start\":65703},{\"end\":65723,\"start\":65718},{\"end\":65740,\"start\":65733},{\"end\":65754,\"start\":65745},{\"end\":65756,\"start\":65755},{\"end\":65774,\"start\":65765},{\"end\":66084,\"start\":66077},{\"end\":66102,\"start\":66093},{\"end\":66114,\"start\":66112},{\"end\":66125,\"start\":66119},{\"end\":66141,\"start\":66134},{\"end\":66161,\"start\":66150},{\"end\":66173,\"start\":66168},{\"end\":66500,\"start\":66494},{\"end\":66512,\"start\":66507},{\"end\":66522,\"start\":66517},{\"end\":66536,\"start\":66530},{\"end\":66547,\"start\":66541},{\"end\":66559,\"start\":66554},{\"end\":66575,\"start\":66568},{\"end\":67045,\"start\":67041},{\"end\":67062,\"start\":67055},{\"end\":67072,\"start\":67067},{\"end\":67085,\"start\":67080},{\"end\":67097,\"start\":67092},{\"end\":67110,\"start\":67106},{\"end\":67395,\"start\":67390},{\"end\":67408,\"start\":67404},{\"end\":67422,\"start\":67418},{\"end\":67441,\"start\":67432},{\"end\":67453,\"start\":67447},{\"end\":67469,\"start\":67462},{\"end\":67483,\"start\":67478},{\"end\":67493,\"start\":67490},{\"end\":67505,\"start\":67498},{\"end\":67793,\"start\":67789},{\"end\":67808,\"start\":67803},{\"end\":68127,\"start\":68123},{\"end\":68142,\"start\":68137},{\"end\":68155,\"start\":68151},{\"end\":68412,\"start\":68408},{\"end\":68428,\"start\":68420},{\"end\":68445,\"start\":68437},{\"end\":68681,\"start\":68674},{\"end\":68697,\"start\":68689},{\"end\":68715,\"start\":68706},{\"end\":68731,\"start\":68727},{\"end\":68742,\"start\":68738},{\"end\":68759,\"start\":68752},{\"end\":68772,\"start\":68766},{\"end\":68784,\"start\":68781},{\"end\":68797,\"start\":68790},{\"end\":68814,\"start\":68806},{\"end\":69312,\"start\":69303},{\"end\":69328,\"start\":69321},{\"end\":69344,\"start\":69339},{\"end\":69601,\"start\":69594},{\"end\":69614,\"start\":69608},{\"end\":69623,\"start\":69620},{\"end\":69634,\"start\":69628},{\"end\":69645,\"start\":69642},{\"end\":69657,\"start\":69653},{\"end\":69668,\"start\":69665},{\"end\":69976,\"start\":69971},{\"end\":69992,\"start\":69987},{\"end\":70009,\"start\":70003},{\"end\":70025,\"start\":70018},{\"end\":70038,\"start\":70032},{\"end\":70051,\"start\":70044},{\"end\":70066,\"start\":70062},{\"end\":70086,\"start\":70080},{\"end\":70640,\"start\":70635},{\"end\":70657,\"start\":70651},{\"end\":70678,\"start\":70664},{\"end\":70692,\"start\":70685},{\"end\":70703,\"start\":70699},{\"end\":70722,\"start\":70715},{\"end\":71084,\"start\":71074},{\"end\":71099,\"start\":71093},{\"end\":71110,\"start\":71105},{\"end\":71127,\"start\":71121},{\"end\":71143,\"start\":71137},{\"end\":71455,\"start\":71451},{\"end\":71469,\"start\":71464},{\"end\":71482,\"start\":71478},{\"end\":71501,\"start\":71493},{\"end\":71877,\"start\":71871},{\"end\":71893,\"start\":71887},{\"end\":71907,\"start\":71900},{\"end\":72287,\"start\":72282},{\"end\":72307,\"start\":72302},{\"end\":72322,\"start\":72316},{\"end\":72334,\"start\":72329},{\"end\":72351,\"start\":72346},{\"end\":72617,\"start\":72611},{\"end\":72631,\"start\":72627},{\"end\":72645,\"start\":72641},{\"end\":72659,\"start\":72654},{\"end\":72676,\"start\":72671},{\"end\":72689,\"start\":72684},{\"end\":72691,\"start\":72690},{\"end\":72705,\"start\":72699},{\"end\":72719,\"start\":72714},{\"end\":73119,\"start\":73116},{\"end\":73133,\"start\":73126},{\"end\":73145,\"start\":73141},{\"end\":73167,\"start\":73159},{\"end\":73180,\"start\":73173},{\"end\":73196,\"start\":73187},{\"end\":73210,\"start\":73203},{\"end\":73215,\"start\":73211},{\"end\":73225,\"start\":73222},{\"end\":73796,\"start\":73790},{\"end\":73811,\"start\":73803},{\"end\":73825,\"start\":73819},{\"end\":73838,\"start\":73832},{\"end\":73856,\"start\":73849},{\"end\":73874,\"start\":73867},{\"end\":73887,\"start\":73880},{\"end\":73899,\"start\":73896},{\"end\":73911,\"start\":73907},{\"end\":73924,\"start\":73918}]", "bib_author_last_name": "[{\"end\":48298,\"start\":48290},{\"end\":48305,\"start\":48303},{\"end\":48319,\"start\":48314},{\"end\":48331,\"start\":48326},{\"end\":48345,\"start\":48338},{\"end\":48362,\"start\":48352},{\"end\":48372,\"start\":48368},{\"end\":48387,\"start\":48382},{\"end\":48402,\"start\":48395},{\"end\":48410,\"start\":48404},{\"end\":48993,\"start\":48988},{\"end\":49011,\"start\":49000},{\"end\":49590,\"start\":49581},{\"end\":49605,\"start\":49599},{\"end\":49618,\"start\":49613},{\"end\":49631,\"start\":49625},{\"end\":49645,\"start\":49640},{\"end\":49671,\"start\":49657},{\"end\":49692,\"start\":49683},{\"end\":49706,\"start\":49702},{\"end\":49721,\"start\":49713},{\"end\":49737,\"start\":49728},{\"end\":49759,\"start\":49747},{\"end\":49772,\"start\":49768},{\"end\":49786,\"start\":49782},{\"end\":49805,\"start\":49796},{\"end\":49822,\"start\":49813},{\"end\":49837,\"start\":49833},{\"end\":49857,\"start\":49852},{\"end\":49869,\"start\":49864},{\"end\":49884,\"start\":49877},{\"end\":49900,\"start\":49893},{\"end\":49916,\"start\":49907},{\"end\":49932,\"start\":49926},{\"end\":49944,\"start\":49939},{\"end\":49962,\"start\":49952},{\"end\":49977,\"start\":49967},{\"end\":49994,\"start\":49987},{\"end\":50007,\"start\":50003},{\"end\":50020,\"start\":50016},{\"end\":50037,\"start\":50028},{\"end\":50048,\"start\":50044},{\"end\":50064,\"start\":50057},{\"end\":50079,\"start\":50071},{\"end\":50095,\"start\":50091},{\"end\":50112,\"start\":50103},{\"end\":50128,\"start\":50119},{\"end\":50145,\"start\":50139},{\"end\":50155,\"start\":50153},{\"end\":50166,\"start\":50162},{\"end\":50176,\"start\":50173},{\"end\":50190,\"start\":50185},{\"end\":50204,\"start\":50199},{\"end\":50214,\"start\":50210},{\"end\":50234,\"start\":50226},{\"end\":50253,\"start\":50246},{\"end\":50271,\"start\":50261},{\"end\":50289,\"start\":50282},{\"end\":50301,\"start\":50296},{\"end\":50315,\"start\":50308},{\"end\":50330,\"start\":50322},{\"end\":50344,\"start\":50339},{\"end\":50360,\"start\":50353},{\"end\":50399,\"start\":50367},{\"end\":50413,\"start\":50407},{\"end\":50428,\"start\":50423},{\"end\":50444,\"start\":50438},{\"end\":50459,\"start\":50453},{\"end\":50473,\"start\":50469},{\"end\":50485,\"start\":50481},{\"end\":50496,\"start\":50494},{\"end\":50507,\"start\":50505},{\"end\":50524,\"start\":50522},{\"end\":50539,\"start\":50536},{\"end\":50557,\"start\":50549},{\"end\":50568,\"start\":50565},{\"end\":50585,\"start\":50578},{\"end\":50599,\"start\":50594},{\"end\":50612,\"start\":50607},{\"end\":50625,\"start\":50620},{\"end\":50638,\"start\":50633},{\"end\":50645,\"start\":50640},{\"end\":53168,\"start\":53157},{\"end\":53179,\"start\":53175},{\"end\":53194,\"start\":53189},{\"end\":53209,\"start\":53202},{\"end\":53226,\"start\":53220},{\"end\":53243,\"start\":53235},{\"end\":53263,\"start\":53252},{\"end\":53277,\"start\":53272},{\"end\":53292,\"start\":53286},{\"end\":53300,\"start\":53294},{\"end\":53682,\"start\":53679},{\"end\":53693,\"start\":53689},{\"end\":53707,\"start\":53701},{\"end\":53727,\"start\":53715},{\"end\":53741,\"start\":53735},{\"end\":53999,\"start\":53995},{\"end\":54013,\"start\":54007},{\"end\":54025,\"start\":54022},{\"end\":54038,\"start\":54034},{\"end\":54054,\"start\":54049},{\"end\":54068,\"start\":54062},{\"end\":54083,\"start\":54076},{\"end\":54095,\"start\":54090},{\"end\":54112,\"start\":54106},{\"end\":54127,\"start\":54119},{\"end\":54508,\"start\":54503},{\"end\":54525,\"start\":54517},{\"end\":54544,\"start\":54536},{\"end\":54558,\"start\":54552},{\"end\":54576,\"start\":54570},{\"end\":54595,\"start\":54590},{\"end\":54610,\"start\":54602},{\"end\":54914,\"start\":54907},{\"end\":54930,\"start\":54923},{\"end\":54948,\"start\":54944},{\"end\":55607,\"start\":55601},{\"end\":55623,\"start\":55618},{\"end\":55635,\"start\":55632},{\"end\":55660,\"start\":55656},{\"end\":56027,\"start\":56022},{\"end\":56040,\"start\":56038},{\"end\":56054,\"start\":56049},{\"end\":56069,\"start\":56061},{\"end\":56084,\"start\":56077},{\"end\":56108,\"start\":56101},{\"end\":56133,\"start\":56117},{\"end\":56146,\"start\":56140},{\"end\":56157,\"start\":56152},{\"end\":56173,\"start\":56166},{\"end\":56574,\"start\":56572},{\"end\":56593,\"start\":56582},{\"end\":56608,\"start\":56602},{\"end\":56627,\"start\":56617},{\"end\":56933,\"start\":56930},{\"end\":56945,\"start\":56940},{\"end\":56957,\"start\":56953},{\"end\":57222,\"start\":57214},{\"end\":57236,\"start\":57224},{\"end\":57538,\"start\":57529},{\"end\":57553,\"start\":57547},{\"end\":57570,\"start\":57562},{\"end\":57586,\"start\":57579},{\"end\":57598,\"start\":57593},{\"end\":57609,\"start\":57606},{\"end\":57623,\"start\":57618},{\"end\":57638,\"start\":57631},{\"end\":58081,\"start\":58077},{\"end\":58093,\"start\":58088},{\"end\":58109,\"start\":58105},{\"end\":58121,\"start\":58115},{\"end\":58382,\"start\":58372},{\"end\":58402,\"start\":58391},{\"end\":58546,\"start\":58538},{\"end\":58556,\"start\":58552},{\"end\":58563,\"start\":58561},{\"end\":58579,\"start\":58573},{\"end\":58591,\"start\":58587},{\"end\":58900,\"start\":58893},{\"end\":58915,\"start\":58908},{\"end\":58928,\"start\":58921},{\"end\":58949,\"start\":58939},{\"end\":59260,\"start\":59255},{\"end\":59268,\"start\":59262},{\"end\":59524,\"start\":59519},{\"end\":59533,\"start\":59528},{\"end\":59541,\"start\":59539},{\"end\":59555,\"start\":59550},{\"end\":59563,\"start\":59557},{\"end\":59876,\"start\":59871},{\"end\":59894,\"start\":59886},{\"end\":59906,\"start\":59903},{\"end\":59922,\"start\":59912},{\"end\":59934,\"start\":59929},{\"end\":59951,\"start\":59943},{\"end\":59966,\"start\":59960},{\"end\":59976,\"start\":59973},{\"end\":59991,\"start\":59986},{\"end\":60004,\"start\":59997},{\"end\":60284,\"start\":60277},{\"end\":60296,\"start\":60294},{\"end\":60307,\"start\":60304},{\"end\":60316,\"start\":60309},{\"end\":60630,\"start\":60628},{\"end\":60643,\"start\":60639},{\"end\":60653,\"start\":60651},{\"end\":60667,\"start\":60663},{\"end\":60681,\"start\":60674},{\"end\":60699,\"start\":60691},{\"end\":60714,\"start\":60707},{\"end\":60729,\"start\":60721},{\"end\":61055,\"start\":61051},{\"end\":61068,\"start\":61064},{\"end\":61081,\"start\":61076},{\"end\":61099,\"start\":61091},{\"end\":61113,\"start\":61107},{\"end\":61570,\"start\":61567},{\"end\":61584,\"start\":61580},{\"end\":61597,\"start\":61592},{\"end\":61609,\"start\":61604},{\"end\":61625,\"start\":61620},{\"end\":61638,\"start\":61634},{\"end\":61860,\"start\":61857},{\"end\":61870,\"start\":61867},{\"end\":61883,\"start\":61878},{\"end\":61895,\"start\":61893},{\"end\":61909,\"start\":61904},{\"end\":61921,\"start\":61917},{\"end\":61932,\"start\":61928},{\"end\":61944,\"start\":61939},{\"end\":61962,\"start\":61951},{\"end\":61980,\"start\":61972},{\"end\":61989,\"start\":61982},{\"end\":62310,\"start\":62308},{\"end\":62325,\"start\":62319},{\"end\":62645,\"start\":62640},{\"end\":62662,\"start\":62654},{\"end\":62870,\"start\":62865},{\"end\":62887,\"start\":62879},{\"end\":63236,\"start\":63228},{\"end\":63255,\"start\":63244},{\"end\":63267,\"start\":63264},{\"end\":63283,\"start\":63275},{\"end\":63296,\"start\":63290},{\"end\":63309,\"start\":63304},{\"end\":63621,\"start\":63610},{\"end\":63643,\"start\":63633},{\"end\":63657,\"start\":63651},{\"end\":63663,\"start\":63659},{\"end\":63980,\"start\":63975},{\"end\":63991,\"start\":63988},{\"end\":64004,\"start\":63999},{\"end\":64021,\"start\":64015},{\"end\":64787,\"start\":64779},{\"end\":64802,\"start\":64797},{\"end\":64814,\"start\":64810},{\"end\":64828,\"start\":64825},{\"end\":64836,\"start\":64830},{\"end\":65185,\"start\":65175},{\"end\":65201,\"start\":65195},{\"end\":65224,\"start\":65217},{\"end\":65684,\"start\":65677},{\"end\":65701,\"start\":65690},{\"end\":65716,\"start\":65711},{\"end\":65731,\"start\":65724},{\"end\":65743,\"start\":65741},{\"end\":65763,\"start\":65757},{\"end\":65781,\"start\":65775},{\"end\":66091,\"start\":66085},{\"end\":66110,\"start\":66103},{\"end\":66117,\"start\":66115},{\"end\":66132,\"start\":66126},{\"end\":66148,\"start\":66142},{\"end\":66166,\"start\":66162},{\"end\":66181,\"start\":66174},{\"end\":66505,\"start\":66501},{\"end\":66515,\"start\":66513},{\"end\":66528,\"start\":66523},{\"end\":66539,\"start\":66537},{\"end\":66552,\"start\":66548},{\"end\":66566,\"start\":66560},{\"end\":66584,\"start\":66576},{\"end\":67053,\"start\":67046},{\"end\":67065,\"start\":67063},{\"end\":67078,\"start\":67073},{\"end\":67090,\"start\":67086},{\"end\":67104,\"start\":67098},{\"end\":67120,\"start\":67111},{\"end\":67402,\"start\":67396},{\"end\":67416,\"start\":67409},{\"end\":67430,\"start\":67423},{\"end\":67445,\"start\":67442},{\"end\":67460,\"start\":67454},{\"end\":67476,\"start\":67470},{\"end\":67488,\"start\":67484},{\"end\":67496,\"start\":67494},{\"end\":67509,\"start\":67506},{\"end\":67801,\"start\":67794},{\"end\":67817,\"start\":67809},{\"end\":68135,\"start\":68128},{\"end\":68149,\"start\":68143},{\"end\":68163,\"start\":68156},{\"end\":68418,\"start\":68413},{\"end\":68435,\"start\":68429},{\"end\":68452,\"start\":68446},{\"end\":68687,\"start\":68682},{\"end\":68704,\"start\":68698},{\"end\":68725,\"start\":68716},{\"end\":68736,\"start\":68732},{\"end\":68750,\"start\":68743},{\"end\":68764,\"start\":68760},{\"end\":68779,\"start\":68773},{\"end\":68788,\"start\":68785},{\"end\":68804,\"start\":68798},{\"end\":68820,\"start\":68815},{\"end\":69319,\"start\":69313},{\"end\":69337,\"start\":69329},{\"end\":69352,\"start\":69345},{\"end\":69606,\"start\":69602},{\"end\":69618,\"start\":69615},{\"end\":69626,\"start\":69624},{\"end\":69640,\"start\":69635},{\"end\":69651,\"start\":69646},{\"end\":69663,\"start\":69658},{\"end\":69672,\"start\":69669},{\"end\":69985,\"start\":69977},{\"end\":70001,\"start\":69993},{\"end\":70016,\"start\":70010},{\"end\":70030,\"start\":70026},{\"end\":70042,\"start\":70039},{\"end\":70060,\"start\":70052},{\"end\":70078,\"start\":70067},{\"end\":70090,\"start\":70087},{\"end\":70649,\"start\":70641},{\"end\":70662,\"start\":70658},{\"end\":70683,\"start\":70679},{\"end\":70697,\"start\":70693},{\"end\":70713,\"start\":70704},{\"end\":70733,\"start\":70723},{\"end\":71091,\"start\":71085},{\"end\":71103,\"start\":71100},{\"end\":71119,\"start\":71111},{\"end\":71135,\"start\":71128},{\"end\":71152,\"start\":71144},{\"end\":71462,\"start\":71456},{\"end\":71476,\"start\":71470},{\"end\":71491,\"start\":71483},{\"end\":71508,\"start\":71502},{\"end\":71885,\"start\":71878},{\"end\":71898,\"start\":71894},{\"end\":71913,\"start\":71908},{\"end\":72300,\"start\":72288},{\"end\":72314,\"start\":72308},{\"end\":72327,\"start\":72323},{\"end\":72344,\"start\":72335},{\"end\":72359,\"start\":72352},{\"end\":72365,\"start\":72361},{\"end\":72625,\"start\":72618},{\"end\":72639,\"start\":72632},{\"end\":72652,\"start\":72646},{\"end\":72669,\"start\":72660},{\"end\":72682,\"start\":72677},{\"end\":72697,\"start\":72692},{\"end\":72712,\"start\":72706},{\"end\":72730,\"start\":72720},{\"end\":73124,\"start\":73120},{\"end\":73139,\"start\":73134},{\"end\":73157,\"start\":73146},{\"end\":73171,\"start\":73168},{\"end\":73185,\"start\":73181},{\"end\":73201,\"start\":73197},{\"end\":73220,\"start\":73216},{\"end\":73231,\"start\":73226},{\"end\":73801,\"start\":73797},{\"end\":73817,\"start\":73812},{\"end\":73830,\"start\":73826},{\"end\":73847,\"start\":73839},{\"end\":73865,\"start\":73857},{\"end\":73878,\"start\":73875},{\"end\":73894,\"start\":73888},{\"end\":73905,\"start\":73900},{\"end\":73916,\"start\":73912},{\"end\":73934,\"start\":73925}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":4673790},\"end\":48897,\"start\":48175},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":9963298},\"end\":49271,\"start\":48899},{\"attributes\":{\"id\":\"b2\"},\"end\":49571,\"start\":49273},{\"attributes\":{\"id\":\"b3\"},\"end\":53107,\"start\":49573},{\"attributes\":{\"doi\":\"arXiv:2005.14165\",\"id\":\"b4\"},\"end\":53570,\"start\":53109},{\"attributes\":{\"doi\":\"arXiv:1708.00055\",\"id\":\"b5\"},\"end\":53986,\"start\":53572},{\"attributes\":{\"doi\":\"arXiv:2107.03374\",\"id\":\"b6\"},\"end\":54448,\"start\":53988},{\"attributes\":{\"doi\":\"arXiv:2110.14168\",\"id\":\"b7\"},\"end\":54848,\"start\":54450},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":202541043},\"end\":55593,\"start\":54850},{\"attributes\":{\"doi\":\"arXiv:1810.04805\",\"id\":\"b9\"},\"end\":55954,\"start\":55595},{\"attributes\":{\"doi\":\"arXiv:1806.02724\",\"id\":\"b10\"},\"end\":56468,\"start\":55956},{\"attributes\":{\"doi\":\"arXiv:1902.07742\",\"id\":\"b11\"},\"end\":56860,\"start\":56470},{\"attributes\":{\"doi\":\"arXiv:2012.15723\",\"id\":\"b12\"},\"end\":57128,\"start\":56862},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":7685230},\"end\":57521,\"start\":57130},{\"attributes\":{\"doi\":\"arXiv:2105.09938\",\"id\":\"b14\"},\"end\":57975,\"start\":57523},{\"attributes\":{\"doi\":\"arXiv:2005.09382\",\"id\":\"b15\"},\"end\":58341,\"start\":57977},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":1915014},\"end\":58532,\"start\":58343},{\"attributes\":{\"doi\":\"arXiv:1904.09751\",\"id\":\"b17\"},\"end\":58816,\"start\":58534},{\"attributes\":{\"id\":\"b18\"},\"end\":59141,\"start\":58818},{\"attributes\":{\"doi\":\"arXiv:2009.14259\",\"id\":\"b19\"},\"end\":59464,\"start\":59143},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":208513249},\"end\":59809,\"start\":59466},{\"attributes\":{\"doi\":\"arXiv:1712.05474\",\"id\":\"b21\"},\"end\":60273,\"start\":59811},{\"attributes\":{\"doi\":\"arXiv:2106.00737\",\"id\":\"b22\"},\"end\":60558,\"start\":60275},{\"attributes\":{\"doi\":\"arXiv:2202.01771\",\"id\":\"b23\"},\"end\":60974,\"start\":60560},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":195507797},\"end\":61515,\"start\":60976},{\"attributes\":{\"doi\":\"arXiv:2101.06804\",\"id\":\"b25\"},\"end\":61848,\"start\":61517},{\"attributes\":{\"doi\":\"arXiv:1907.11692\",\"id\":\"b26\"},\"end\":62300,\"start\":61850},{\"attributes\":{\"doi\":\"arXiv:2103.05247\",\"id\":\"b27\"},\"end\":62604,\"start\":62302},{\"attributes\":{\"doi\":\"arXiv:2005.07648\",\"id\":\"b28\"},\"end\":62793,\"start\":62606},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":235657751},\"end\":63143,\"start\":62795},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":216868949},\"end\":63602,\"start\":63145},{\"attributes\":{\"doi\":\"arXiv:2103.05825\",\"id\":\"b31\"},\"end\":63898,\"start\":63604},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":1772097},\"end\":64684,\"start\":63900},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":8297420},\"end\":65118,\"start\":64686},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":1957433},\"end\":65632,\"start\":65120},{\"attributes\":{\"doi\":\"arXiv:1909.01066\",\"id\":\"b35\"},\"end\":66003,\"start\":65634},{\"attributes\":{\"doi\":\"arXiv:2201.11227\",\"id\":\"b36\"},\"end\":66433,\"start\":66005},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":49317780},\"end\":66986,\"start\":66435},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":160025533},\"end\":67305,\"start\":66988},{\"attributes\":{\"doi\":\"arXiv:1910.10683\",\"id\":\"b39\"},\"end\":67787,\"start\":67307},{\"attributes\":{\"doi\":\"arXiv:1908.10084\",\"id\":\"b40\"},\"end\":68048,\"start\":67789},{\"attributes\":{\"doi\":\"arXiv:2002.08910\",\"id\":\"b41\"},\"end\":68352,\"start\":68050},{\"attributes\":{\"doi\":\"arXiv:2112.08633\",\"id\":\"b42\"},\"end\":68626,\"start\":68354},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":91184540},\"end\":69250,\"start\":68628},{\"attributes\":{\"doi\":\"arXiv:2110.01517\",\"id\":\"b44\"},\"end\":69528,\"start\":69252},{\"attributes\":{\"doi\":\"arXiv:2109.03034\",\"id\":\"b45\"},\"end\":69890,\"start\":69530},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":208617407},\"end\":70557,\"start\":69892},{\"attributes\":{\"doi\":\"arXiv:2010.03768\",\"id\":\"b47\"},\"end\":70983,\"start\":70559},{\"attributes\":{\"doi\":\"arXiv:2108.04927\",\"id\":\"b48\"},\"end\":71395,\"start\":70985},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":209515274},\"end\":71771,\"start\":71397},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":7452082},\"end\":72222,\"start\":71773},{\"attributes\":{\"doi\":\"arXiv:2106.13884\",\"id\":\"b51\"},\"end\":72582,\"start\":72224},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":13756489},\"end\":73011,\"start\":72584},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":53735892},\"end\":73714,\"start\":73013},{\"attributes\":{\"doi\":\"arXiv:1910.03771\",\"id\":\"b54\"},\"end\":74233,\"start\":73716},{\"attributes\":{\"id\":\"b55\"},\"end\":110941,\"start\":74235}]", "bib_title": "[{\"end\":48282,\"start\":48175},{\"end\":48981,\"start\":48899},{\"end\":54901,\"start\":54850},{\"end\":57206,\"start\":57130},{\"end\":58365,\"start\":58343},{\"end\":59508,\"start\":59466},{\"end\":61039,\"start\":60976},{\"end\":62857,\"start\":62795},{\"end\":63220,\"start\":63145},{\"end\":63964,\"start\":63900},{\"end\":64775,\"start\":64686},{\"end\":65165,\"start\":65120},{\"end\":66492,\"start\":66435},{\"end\":67039,\"start\":66988},{\"end\":68672,\"start\":68628},{\"end\":69969,\"start\":69892},{\"end\":71449,\"start\":71397},{\"end\":71869,\"start\":71773},{\"end\":72609,\"start\":72584},{\"end\":73114,\"start\":73013},{\"end\":76928,\"start\":74235}]", "bib_author": "[{\"end\":48300,\"start\":48284},{\"end\":48307,\"start\":48300},{\"end\":48321,\"start\":48307},{\"end\":48333,\"start\":48321},{\"end\":48347,\"start\":48333},{\"end\":48364,\"start\":48347},{\"end\":48374,\"start\":48364},{\"end\":48389,\"start\":48374},{\"end\":48404,\"start\":48389},{\"end\":48412,\"start\":48404},{\"end\":48995,\"start\":48983},{\"end\":49013,\"start\":48995},{\"end\":49592,\"start\":49575},{\"end\":49607,\"start\":49592},{\"end\":49620,\"start\":49607},{\"end\":49633,\"start\":49620},{\"end\":49647,\"start\":49633},{\"end\":49673,\"start\":49647},{\"end\":49694,\"start\":49673},{\"end\":49708,\"start\":49694},{\"end\":49723,\"start\":49708},{\"end\":49739,\"start\":49723},{\"end\":49761,\"start\":49739},{\"end\":49774,\"start\":49761},{\"end\":49788,\"start\":49774},{\"end\":49807,\"start\":49788},{\"end\":49824,\"start\":49807},{\"end\":49839,\"start\":49824},{\"end\":49859,\"start\":49839},{\"end\":49871,\"start\":49859},{\"end\":49886,\"start\":49871},{\"end\":49902,\"start\":49886},{\"end\":49918,\"start\":49902},{\"end\":49934,\"start\":49918},{\"end\":49946,\"start\":49934},{\"end\":49964,\"start\":49946},{\"end\":49979,\"start\":49964},{\"end\":49996,\"start\":49979},{\"end\":50009,\"start\":49996},{\"end\":50022,\"start\":50009},{\"end\":50039,\"start\":50022},{\"end\":50050,\"start\":50039},{\"end\":50066,\"start\":50050},{\"end\":50081,\"start\":50066},{\"end\":50097,\"start\":50081},{\"end\":50114,\"start\":50097},{\"end\":50130,\"start\":50114},{\"end\":50147,\"start\":50130},{\"end\":50157,\"start\":50147},{\"end\":50168,\"start\":50157},{\"end\":50178,\"start\":50168},{\"end\":50192,\"start\":50178},{\"end\":50206,\"start\":50192},{\"end\":50216,\"start\":50206},{\"end\":50236,\"start\":50216},{\"end\":50255,\"start\":50236},{\"end\":50273,\"start\":50255},{\"end\":50291,\"start\":50273},{\"end\":50303,\"start\":50291},{\"end\":50317,\"start\":50303},{\"end\":50332,\"start\":50317},{\"end\":50346,\"start\":50332},{\"end\":50362,\"start\":50346},{\"end\":50401,\"start\":50362},{\"end\":50415,\"start\":50401},{\"end\":50430,\"start\":50415},{\"end\":50446,\"start\":50430},{\"end\":50461,\"start\":50446},{\"end\":50475,\"start\":50461},{\"end\":50487,\"start\":50475},{\"end\":50498,\"start\":50487},{\"end\":50509,\"start\":50498},{\"end\":50526,\"start\":50509},{\"end\":50541,\"start\":50526},{\"end\":50559,\"start\":50541},{\"end\":50570,\"start\":50559},{\"end\":50587,\"start\":50570},{\"end\":50601,\"start\":50587},{\"end\":50614,\"start\":50601},{\"end\":50627,\"start\":50614},{\"end\":50640,\"start\":50627},{\"end\":50647,\"start\":50640},{\"end\":53170,\"start\":53148},{\"end\":53181,\"start\":53170},{\"end\":53196,\"start\":53181},{\"end\":53211,\"start\":53196},{\"end\":53228,\"start\":53211},{\"end\":53245,\"start\":53228},{\"end\":53265,\"start\":53245},{\"end\":53279,\"start\":53265},{\"end\":53294,\"start\":53279},{\"end\":53302,\"start\":53294},{\"end\":53684,\"start\":53672},{\"end\":53695,\"start\":53684},{\"end\":53709,\"start\":53695},{\"end\":53729,\"start\":53709},{\"end\":53743,\"start\":53729},{\"end\":54001,\"start\":53990},{\"end\":54015,\"start\":54001},{\"end\":54027,\"start\":54015},{\"end\":54040,\"start\":54027},{\"end\":54056,\"start\":54040},{\"end\":54070,\"start\":54056},{\"end\":54085,\"start\":54070},{\"end\":54097,\"start\":54085},{\"end\":54114,\"start\":54097},{\"end\":54129,\"start\":54114},{\"end\":54510,\"start\":54498},{\"end\":54527,\"start\":54510},{\"end\":54546,\"start\":54527},{\"end\":54560,\"start\":54546},{\"end\":54578,\"start\":54560},{\"end\":54597,\"start\":54578},{\"end\":54612,\"start\":54597},{\"end\":54916,\"start\":54903},{\"end\":54932,\"start\":54916},{\"end\":54950,\"start\":54932},{\"end\":55609,\"start\":55595},{\"end\":55625,\"start\":55609},{\"end\":55637,\"start\":55625},{\"end\":55662,\"start\":55637},{\"end\":56029,\"start\":56015},{\"end\":56042,\"start\":56029},{\"end\":56056,\"start\":56042},{\"end\":56071,\"start\":56056},{\"end\":56086,\"start\":56071},{\"end\":56110,\"start\":56086},{\"end\":56135,\"start\":56110},{\"end\":56148,\"start\":56135},{\"end\":56159,\"start\":56148},{\"end\":56175,\"start\":56159},{\"end\":56576,\"start\":56565},{\"end\":56595,\"start\":56576},{\"end\":56610,\"start\":56595},{\"end\":56629,\"start\":56610},{\"end\":56935,\"start\":56923},{\"end\":56947,\"start\":56935},{\"end\":56959,\"start\":56947},{\"end\":57224,\"start\":57208},{\"end\":57238,\"start\":57224},{\"end\":57540,\"start\":57525},{\"end\":57555,\"start\":57540},{\"end\":57572,\"start\":57555},{\"end\":57588,\"start\":57572},{\"end\":57600,\"start\":57588},{\"end\":57611,\"start\":57600},{\"end\":57625,\"start\":57611},{\"end\":57640,\"start\":57625},{\"end\":58083,\"start\":58071},{\"end\":58095,\"start\":58083},{\"end\":58111,\"start\":58095},{\"end\":58123,\"start\":58111},{\"end\":58384,\"start\":58367},{\"end\":58404,\"start\":58384},{\"end\":58548,\"start\":58534},{\"end\":58558,\"start\":58548},{\"end\":58565,\"start\":58558},{\"end\":58581,\"start\":58565},{\"end\":58593,\"start\":58581},{\"end\":58902,\"start\":58885},{\"end\":58917,\"start\":58902},{\"end\":58930,\"start\":58917},{\"end\":58951,\"start\":58930},{\"end\":59262,\"start\":59253},{\"end\":59270,\"start\":59262},{\"end\":59526,\"start\":59510},{\"end\":59535,\"start\":59526},{\"end\":59543,\"start\":59535},{\"end\":59557,\"start\":59543},{\"end\":59565,\"start\":59557},{\"end\":59878,\"start\":59866},{\"end\":59896,\"start\":59878},{\"end\":59908,\"start\":59896},{\"end\":59924,\"start\":59908},{\"end\":59936,\"start\":59924},{\"end\":59953,\"start\":59936},{\"end\":59968,\"start\":59953},{\"end\":59978,\"start\":59968},{\"end\":59993,\"start\":59978},{\"end\":60006,\"start\":59993},{\"end\":60286,\"start\":60275},{\"end\":60298,\"start\":60286},{\"end\":60309,\"start\":60298},{\"end\":60318,\"start\":60309},{\"end\":60632,\"start\":60621},{\"end\":60645,\"start\":60632},{\"end\":60655,\"start\":60645},{\"end\":60669,\"start\":60655},{\"end\":60683,\"start\":60669},{\"end\":60701,\"start\":60683},{\"end\":60716,\"start\":60701},{\"end\":60731,\"start\":60716},{\"end\":61057,\"start\":61041},{\"end\":61070,\"start\":61057},{\"end\":61083,\"start\":61070},{\"end\":61101,\"start\":61083},{\"end\":61115,\"start\":61101},{\"end\":61572,\"start\":61558},{\"end\":61586,\"start\":61572},{\"end\":61599,\"start\":61586},{\"end\":61611,\"start\":61599},{\"end\":61627,\"start\":61611},{\"end\":61640,\"start\":61627},{\"end\":61862,\"start\":61850},{\"end\":61872,\"start\":61862},{\"end\":61885,\"start\":61872},{\"end\":61897,\"start\":61885},{\"end\":61911,\"start\":61897},{\"end\":61923,\"start\":61911},{\"end\":61934,\"start\":61923},{\"end\":61946,\"start\":61934},{\"end\":61964,\"start\":61946},{\"end\":61982,\"start\":61964},{\"end\":61991,\"start\":61982},{\"end\":62312,\"start\":62302},{\"end\":62327,\"start\":62312},{\"end\":62647,\"start\":62634},{\"end\":62664,\"start\":62647},{\"end\":62872,\"start\":62859},{\"end\":62889,\"start\":62872},{\"end\":63238,\"start\":63222},{\"end\":63257,\"start\":63238},{\"end\":63269,\"start\":63257},{\"end\":63285,\"start\":63269},{\"end\":63298,\"start\":63285},{\"end\":63311,\"start\":63298},{\"end\":63623,\"start\":63604},{\"end\":63645,\"start\":63623},{\"end\":63659,\"start\":63645},{\"end\":63665,\"start\":63659},{\"end\":63982,\"start\":63966},{\"end\":63993,\"start\":63982},{\"end\":64006,\"start\":63993},{\"end\":64023,\"start\":64006},{\"end\":64789,\"start\":64777},{\"end\":64804,\"start\":64789},{\"end\":64816,\"start\":64804},{\"end\":64830,\"start\":64816},{\"end\":64838,\"start\":64830},{\"end\":65187,\"start\":65167},{\"end\":65203,\"start\":65187},{\"end\":65226,\"start\":65203},{\"end\":65686,\"start\":65671},{\"end\":65703,\"start\":65686},{\"end\":65718,\"start\":65703},{\"end\":65733,\"start\":65718},{\"end\":65745,\"start\":65733},{\"end\":65765,\"start\":65745},{\"end\":65783,\"start\":65765},{\"end\":66093,\"start\":66077},{\"end\":66112,\"start\":66093},{\"end\":66119,\"start\":66112},{\"end\":66134,\"start\":66119},{\"end\":66150,\"start\":66134},{\"end\":66168,\"start\":66150},{\"end\":66183,\"start\":66168},{\"end\":66507,\"start\":66494},{\"end\":66517,\"start\":66507},{\"end\":66530,\"start\":66517},{\"end\":66541,\"start\":66530},{\"end\":66554,\"start\":66541},{\"end\":66568,\"start\":66554},{\"end\":66586,\"start\":66568},{\"end\":67055,\"start\":67041},{\"end\":67067,\"start\":67055},{\"end\":67080,\"start\":67067},{\"end\":67092,\"start\":67080},{\"end\":67106,\"start\":67092},{\"end\":67122,\"start\":67106},{\"end\":67404,\"start\":67390},{\"end\":67418,\"start\":67404},{\"end\":67432,\"start\":67418},{\"end\":67447,\"start\":67432},{\"end\":67462,\"start\":67447},{\"end\":67478,\"start\":67462},{\"end\":67490,\"start\":67478},{\"end\":67498,\"start\":67490},{\"end\":67511,\"start\":67498},{\"end\":67803,\"start\":67789},{\"end\":67819,\"start\":67803},{\"end\":68137,\"start\":68123},{\"end\":68151,\"start\":68137},{\"end\":68165,\"start\":68151},{\"end\":68420,\"start\":68408},{\"end\":68437,\"start\":68420},{\"end\":68454,\"start\":68437},{\"end\":68689,\"start\":68674},{\"end\":68706,\"start\":68689},{\"end\":68727,\"start\":68706},{\"end\":68738,\"start\":68727},{\"end\":68752,\"start\":68738},{\"end\":68766,\"start\":68752},{\"end\":68781,\"start\":68766},{\"end\":68790,\"start\":68781},{\"end\":68806,\"start\":68790},{\"end\":68822,\"start\":68806},{\"end\":69321,\"start\":69303},{\"end\":69339,\"start\":69321},{\"end\":69354,\"start\":69339},{\"end\":69608,\"start\":69594},{\"end\":69620,\"start\":69608},{\"end\":69628,\"start\":69620},{\"end\":69642,\"start\":69628},{\"end\":69653,\"start\":69642},{\"end\":69665,\"start\":69653},{\"end\":69674,\"start\":69665},{\"end\":69987,\"start\":69971},{\"end\":70003,\"start\":69987},{\"end\":70018,\"start\":70003},{\"end\":70032,\"start\":70018},{\"end\":70044,\"start\":70032},{\"end\":70062,\"start\":70044},{\"end\":70080,\"start\":70062},{\"end\":70092,\"start\":70080},{\"end\":70651,\"start\":70635},{\"end\":70664,\"start\":70651},{\"end\":70685,\"start\":70664},{\"end\":70699,\"start\":70685},{\"end\":70715,\"start\":70699},{\"end\":70735,\"start\":70715},{\"end\":71093,\"start\":71074},{\"end\":71105,\"start\":71093},{\"end\":71121,\"start\":71105},{\"end\":71137,\"start\":71121},{\"end\":71154,\"start\":71137},{\"end\":71464,\"start\":71451},{\"end\":71478,\"start\":71464},{\"end\":71493,\"start\":71478},{\"end\":71510,\"start\":71493},{\"end\":71887,\"start\":71871},{\"end\":71900,\"start\":71887},{\"end\":71915,\"start\":71900},{\"end\":72302,\"start\":72282},{\"end\":72316,\"start\":72302},{\"end\":72329,\"start\":72316},{\"end\":72346,\"start\":72329},{\"end\":72361,\"start\":72346},{\"end\":72367,\"start\":72361},{\"end\":72627,\"start\":72611},{\"end\":72641,\"start\":72627},{\"end\":72654,\"start\":72641},{\"end\":72671,\"start\":72654},{\"end\":72684,\"start\":72671},{\"end\":72699,\"start\":72684},{\"end\":72714,\"start\":72699},{\"end\":72732,\"start\":72714},{\"end\":73126,\"start\":73116},{\"end\":73141,\"start\":73126},{\"end\":73159,\"start\":73141},{\"end\":73173,\"start\":73159},{\"end\":73187,\"start\":73173},{\"end\":73203,\"start\":73187},{\"end\":73222,\"start\":73203},{\"end\":73233,\"start\":73222},{\"end\":73803,\"start\":73790},{\"end\":73819,\"start\":73803},{\"end\":73832,\"start\":73819},{\"end\":73849,\"start\":73832},{\"end\":73867,\"start\":73849},{\"end\":73880,\"start\":73867},{\"end\":73896,\"start\":73880},{\"end\":73907,\"start\":73896},{\"end\":73918,\"start\":73907},{\"end\":73936,\"start\":73918}]", "bib_venue": "[{\"end\":48553,\"start\":48491},{\"end\":55287,\"start\":55127},{\"end\":61264,\"start\":61198},{\"end\":62982,\"start\":62944},{\"end\":64332,\"start\":64186},{\"end\":65401,\"start\":65322},{\"end\":66727,\"start\":66665},{\"end\":68951,\"start\":68895},{\"end\":70241,\"start\":70175},{\"end\":73382,\"start\":73316},{\"end\":48489,\"start\":48412},{\"end\":49074,\"start\":49013},{\"end\":49363,\"start\":49273},{\"end\":53146,\"start\":53109},{\"end\":53670,\"start\":53572},{\"end\":54496,\"start\":54450},{\"end\":55125,\"start\":54950},{\"end\":55752,\"start\":55678},{\"end\":56013,\"start\":55956},{\"end\":56563,\"start\":56470},{\"end\":56921,\"start\":56862},{\"end\":57318,\"start\":57238},{\"end\":58069,\"start\":57977},{\"end\":58422,\"start\":58404},{\"end\":58653,\"start\":58609},{\"end\":58883,\"start\":58818},{\"end\":59251,\"start\":59143},{\"end\":59626,\"start\":59565},{\"end\":59864,\"start\":59811},{\"end\":60395,\"start\":60334},{\"end\":60619,\"start\":60560},{\"end\":61196,\"start\":61115},{\"end\":61556,\"start\":61517},{\"end\":62053,\"start\":62007},{\"end\":62433,\"start\":62343},{\"end\":62632,\"start\":62606},{\"end\":62942,\"start\":62889},{\"end\":63349,\"start\":63311},{\"end\":63729,\"start\":63681},{\"end\":64184,\"start\":64023},{\"end\":64884,\"start\":64838},{\"end\":65320,\"start\":65226},{\"end\":65669,\"start\":65634},{\"end\":66075,\"start\":66005},{\"end\":66663,\"start\":66586},{\"end\":67133,\"start\":67122},{\"end\":67388,\"start\":67307},{\"end\":67896,\"start\":67835},{\"end\":68121,\"start\":68050},{\"end\":68406,\"start\":68354},{\"end\":68893,\"start\":68822},{\"end\":69301,\"start\":69252},{\"end\":69592,\"start\":69530},{\"end\":70173,\"start\":70092},{\"end\":70633,\"start\":70559},{\"end\":71072,\"start\":70985},{\"end\":71571,\"start\":71510},{\"end\":71976,\"start\":71915},{\"end\":72280,\"start\":72224},{\"end\":72781,\"start\":72732},{\"end\":73314,\"start\":73233},{\"end\":73788,\"start\":73716},{\"end\":79137,\"start\":76930}]"}}}, "year": 2023, "month": 12, "day": 17}