{"id": 232126104, "updated": "2023-04-15 13:28:30.695", "metadata": {"title": "AnaSearch: Extract, Retrieve and Visualize Structured Results from Unstructured Text for Analytical Queries", "authors": "[{\"first\":\"Tongliang\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Lei\",\"last\":\"Fang\",\"middle\":[]},{\"first\":\"Jian-Guang\",\"last\":\"Lou\",\"middle\":[]},{\"first\":\"Zhoujun\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Dongmei\",\"last\":\"Zhang\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 14th ACM International Conference on Web Search and Data Mining", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "Modern search engines retrieve results mainly based on the keyword matching techniques, and thus fail to answer analytical queries like \"apps with more than 1 billion monthly active users\" or \"population growth of the US from 2015 to 2019\", which requires numerical reasoning or aggregating results from multiple web pages. Such analytical queries are very common in the data analysis area, the expected results would be structured tables or charts. In most cases, these structured results are not available or accessible, they scatter in various text sources. In this work, we build AnaSearch, a search system to support analytical queries, and return structured results that can be visualized in the form of tables or charts. We collect and build structured quantitative data from the unstructured text on the web automatically. With AnaSearch, data analysts could easily derive insights for decision making with keyword or natural language queries. Specifically, we build AnaSearch under the COVID-19 news data, which makes it easy to compare with manually collected structured data.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/wsdm/LiFLLZ21", "doi": "10.1145/3437963.3441694"}}, "content": {"source": {"pdf_hash": "4d0ad7ab446fe5d9097ac19cd0965913f1a110b2", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": null, "status": "CLOSED"}}, "grobid": {"id": "1a78327436dc872aea32399e78ebdaeb02107a16", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/4d0ad7ab446fe5d9097ac19cd0965913f1a110b2.txt", "contents": "\nAnaSearch: Extract, Retrieve and Visualize Structured Results from Unstructured Text for Analytical Queries Retrieve from Scattered Sources\nVirtual EventCopyright Virtual EventMarch 8-12, 2021\n\nTongliang Li tonyliangli@buaa.edu.cn \nJian-Guang Lou jlou@microsoft.com \nZhoujun Li \nDongmei Zhang dongmeiz@microsoft.com \n\nLei Fang\nState Key Lab of Software Development Environment\nBeihang University\nBeijingChina\n\n\nMicrosoft Research\nBeijingChina\n\n\nState Key Lab of Software Development Environment Beihang University\nMicrosoft Research\nBeijing, BeijingChina, China\n\n\nMicrosoft Research\nBeijingChina\n\nAnaSearch: Extract, Retrieve and Visualize Structured Results from Unstructured Text for Analytical Queries Retrieve from Scattered Sources\n\nWSDM '21\nIsraelVirtual EventMarch 8-12, 202110.1145/3437963.34416941 billion monthly active users\" or \"popula-tion growth of the US from 2015 to 2019\", which requires numerical reasoning or aggregating results from multiple web pages. Such analytical queries are very common in the data analysis area, the expected results would be structured tables or charts. In most cases, these structured results are not available or accessible, they scat-ter in various text sources. In this work, we build AnaSearch, a search system to support analytical queries, and return structured results that can be visualized in the form of tables or charts. We collect and build structured quantitative data from the unstruc-tured text on the web automatically. With AnaSearch, data analysts could easily derive insights for decision making with keyword or natural language queries. Specifically, we build AnaSearch under the COVID-19 news data, which makes it easy to compare with manually collected structured data. KEYWORDS structured data; quantitative information; information retrieval; data visualization * This work was done when the first author was an intern at Microsoft Research. \u2020 Corresponding Author Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).CCS CONCEPTS \u2022 Information systems \u2192 Information retrievalStructured text searchQuestion answering\nModern search engines retrieve results mainly based on the keyword matching techniques, and thus fail to answer analytical queries like \"apps with more than\n\nMonthly Active Users of TikTok in the past three months.\n\nTikTok's MAU has increased to 800 million as of now (September 2020).\n\nTikTok also claimed that it had around 689 million global monthly active users by July.\n\nAs of August 2020, TikTok now has 700 million monthly active users globally.\n\n\nContext\n\nEntity Time  \n\n\nINTRODUCTION\n\nModern search engines like Google or Bing consider user queries as simple keywords, and retrieve a ranked list of web pages as the search result. By leveraging techniques in information extraction, question answering, and knowledge graphs, search engines now are also capable of retrieving information from structured or semi-structured data sources, like tables on the web or pre-built knowledge graphs. For example, Google can return a list of entities for queries with entity type description like \"2019 Nobel prize winners\". However, modern search engines usually fail to answer analytical queries that require numerical reasoning, or aggregating \u2022 GDP of the US, EU and China in recent 5 years.\n\n\u2022 Monthly active user of TikTok in the past three months.\n\nThese queries usually contain quantities, entities, and time expressions, which aim to acquire the data of a specific case or event.\n\nSearch engines fail to answer these queries and return web pages instead. Taking the third query as an example, one way to achieve the expected results with a modern search engine is to split the original query into multiple queries, like \"Monthly active user of TikTok in August\", and manually collect the results for each split query. To support these analytical queries, in most cases, we need to extract quantitative related information, and aggregate the extracted results from multiple web pages to build the structured data. In this demo, we build AnaSearch to retrieve and visualize quantitative structured data for analytical queries. The structured data is automatically constructed from unstructured text. Figure 1 is an overview of analytical query processing and retrieval in AnaSearch. With AnaSearch, data analysts could easily derive insights for decision making with keywords or natural language queries. Specifically, the prototype system presented in this demo paper is built on the news data of the COVID-19 pandemic. One benefit is that we could verify the effectiveness of AnaSearch with manually collected golden data, for example, the COVID-19 tracker from Johns Hopkins University 1 and Bing 2 . The demo is available at http://aka.ms/anasearch.\n\n\nSYSTEM OVERVIEW\n\nAnaSearch consists of three main phases: quantitative data extraction, query parsing & retrieval, and data visualization. In this section, we will introduce quantitative data extraction and query parsing & retrieval, as is shown in Figure 2. Data visualization will be described in Section 3.\n\n\nQuantitative Data Extraction\n\nWe build AnaSearch upon news data, which is formatted as title, content, URL, and published time. For each document, we extract numerical values with Recognizers-Text 3 , and perform entity linking with the Text Analytics API 4 . For each numerical value, we extract quantitative facts as a triple of <related, value & unit, time> based on the constituency parsing tree. related is the quantitative related information, including what the value measures (denoted as quantified), and entities that influence or motivate the value; value is the numerical value with a resolution (exact, approximate, upper/lower bound and interval); time is the time when a quantity takes on a particular value, note that it could be different from the published time.\n\nConstituency parsing breaks text into constituent or tokens based on the phrase structure grammar. One observation is that for a given numerical value, the quantitative facts are usually its siblings or siblings of its ancestors in the constituency parsing tree. Thus, we could search on the constituency tree to extract the \n\n\nUser Query\n\nQuantity based * , t * , * , * Figure 2: Extraction, query parsing & retrieval.\n\n\"related\" part. The values (with units) and the normalized time expressions can be extracted by Recognizers-Text. In the constituency parse tree, we consider a non-terminal node as a \"value node\" or \"time node\" if it contains a value or time expression. We further define \"value mention\" as the bottom level value node. related Extraction: related consists of what the value measures (quantified) and entities that influence or motivate the value. quantified should be close to the value mention. We extract quantified as 1) nouns with their modifiers right to the value, 2) sibling noun phrases (NPs) of the value mention, and all its ancestor value nodes. We further merge the words and phrases that are adjacent in the original text as the quantified. To extract entities that influence or motivate the values, we first extract the least verb phrase (VP) ancestor of the value mention as the predicate of the sentence, then extract the left closest sibling NP node of the predicate as the entity candidates. Sentences are filtered out if the entity candidates are not linked with known entities by the entity linking API. time Extraction: There are quite a lot of time expressions like \"last week\", \"on Tuesday\", \"in the last 24 hours\". Recognizers-Text could only extract and normalize formal time expressions. We design a simple rule-based approach to resolve and normalize the above time expression. For example, given the published time \"2020-09-23\" and \"on Monday\" in the news, we will resolve \"Monday\" to \"2020-09-21\".\n\n\nQuery Parsing & Retrieval\n\nQuery Parsing. AnaSearch supports two types of queries: entitybased query and quantity-based query. The entity-based query is parsed into < E * , X * , * >, where:\n\n\u2022 E * is the entity condition, which is a set of entities in the query obtained through the Text Analytics API. \u2022 * is the time condition, which can be time or time range extracted with Recognizers-Text from the query. \u2022 X * is the context condition, which is similar to the context defined in QSearch [6]. X * is a set of remaining nouns or noun phrases of the query with entity and time removed. The quantity-based query denoted by < * , * , X * , * > is similar to the query defined in QSearch [6], where:\n\n\u2022 * is the quantity condition which consists of a value, a comparison operator (exact, approximate, upper/lower bound and interval), and a unit. We employ the quantitative fact extraction method introduced in Section 2.1 to extract * from the query. \u2022 * is the specified entity type, which is extracted with a dictionary of entity types from YAGO [11]. \u2022 X * and * are the context and time conditions, respectively.\n\nThe extractions of X * and * are the same as in entity-based queries.\n\nGiven an example quantity-based query \"cars with sales over 5,000 in April\", the quantity condition * is (5, 000, +\u221e), the semantic type * is , the context condition X * will be { }, and the time condition * is 2020-04. The results of a quantity-based query are usually a collection of entities with type * that satisfy the quantity condition * , the context condition X * , and the time condition * . Data Retrieval. For an entity-based query < E * , X * , * >, we retrieve quantitative facts with 1) entity matching, 2) context matching, and 3) time matching.\n\nFor entity matching, we only consider those quantitative facts whose entity of the related are in E * . For context matching, we obtain the context X for each quantitative fact by selecting the nonentity nouns or noun phrases of related. To ensure the relevance between X * and X, we consider a quantitative fact related to the query if X * overlaps with X or the semantic similarity of X and X * is above the threshold. For time matching, we filter out quantitative facts of which the time does not satisfy the time condition * .\n\nFor a quantity-based query < * , * , X * , * >, the matching process will be 1) quantity matching, 2) entity type matching, 3) context matching, and 4) time matching. The context and time matching methods for entity-based queries also apply to quantity-based queries.\n\nFor quantity matching, we require that the value & unit from quantitative facts satisfy the quantity condition * . It should be noted that the unit should be comparable and the value should satisfy the comparison operator. For example, \"$6,000\" satisfies the quantity condition \"more than $5000\". For entity type matching, we only retrieve those quantitative facts whose entity of the related has type * . We use the type information from YAGO [11] to obtain the entity types for the linked entities.\n\nThere might be duplicated or inconsistent values for the same entity, time, and context X (exactly or semantically the same) among the candidate results retrieved from multiple sources. We group the candidate results by the entity, time, and context X. For each group, we simply choose the value with the most occurrences as the final result <entity, time, context X, value>.\n\n\nDEMONSTRATION\n\nWe build the prototype of AnaSearch on the COVID-19 news data. For COVID-19, the most frequent quantified topics are confirmed cases, recovered cases, and deaths. Therefore, we filter out quantitative facts that are not related to these three quantified topics, and we use a predefined keyword list to map the quantitative facts and the user input query to the following COVID-19 types: confirmed total, confirmed change, recovered total, recovered change, death total, and death change, where \"change\" means the change of the quantified topics for a given time range. Figure 3 shows the homepage of AnaSearch on COVID-19, Figure 4 is the result page of two example entity-based queries. Throughout this paper, we mainly demonstrate the entity-based queries, the quantity-based queries are similar to QSearch [7], and thus are omitted. Query Parsing Visualization. For entity-based queries on COVID-19, the entities mainly refer to the locations, like names of countries, states, or cities. The context X is mapped to the COVID-19 types. For the query \"How many cases and deaths have Israel reported by April 21st?\" shown in Figure 4, the parsed query (each condition) is displayed under the search box labeled with entity, COVID-19 type from context, and time. Structured Results Visualization. The structured results are visualized in table and chart (page 1 is the table view and page 2 is the chart view in Figure 4). The table view shows the values of the quantified COVID-19 types for each location (entity) and date (time). For the chart view, we design two types of charts. A line chart is adopted when the time condition is date range or multiple dates, such as Query 1 in Figure 4, each chart represents the structured results of one location. A bar chart is adopted if the time condition of the query is a single date, see Query 2 in Figure 4. Users could switch the COVID-19 types by clicking on the selection menu (marked as \"Click to change the COVID-19 type\" in Figure 4). As a reference, we also show the manually collected data from the Bing COVID-19 tracker. The total amount and correct amount of values are displayed on the top right-hand corner. For results displayed in table form, values marked with a green box are correct ones while incorrect ones are marked with a red box. For results displayed in a chart, we draw another series representing the manually collected data from the Bing tracker for comparison.\n\nBy clicking on rows from the table or data points from the chart (marked as \"Click to view original news\" in Figure 4), the original text of the extracted quantitative fact is shown, which contains the entity (linked to Wikipedia page) and a text snippet from where the quantitative facts are extracted. The entity, value & unit, time and context X are shown in different colors. We further allow users to check different links for the same text snippet by clicking on each original text (marked as \"Click to view links\" in Figure 4).  \n\n\nRELATED WORK\n\nOur work is related to 1) quantitative information extraction and 2) semantic search. The output of quantitative information extraction is structured quantitative facts. Prior work focuses on recognizing and extracting quantitative information with dependency pattern matching [8,10], phrase chunking [1], and sequence tagging techniques [6]. We extract quantitative facts mainly by searching on the constituent parsing tree, which is simple yet effective. From semantic search, our work is related to studies like searching entities starting from a type description or an entity name (e.g. [2][3][4][5]), and answering queries with quantities from text [7]. Compared to these studies, the main difference is that our work supports analytical queries and return structured results that can be visualized in tables/charts. Building and visualizing structured data have been studied by prior work like DeepTrack [9]. But such work lacks information retrieval abilities and is limited to building and visualizing Spatio-temporal data from both structured and unstructured text. Our work supports extracting and retrieving structured results from unstructured text.\n\n\nCONCLUSION\n\nWe propose AnaSearch to extract, retrieve, and visualize structured data from the unstructured text for analytical queries. We build the prototype of AnaSearch on the COVID-19 news data. For future work, we will improve the quantitative information extraction approach and the ranking part of the result retrieval.\n\n\n's MAU is estimated to reach 692 million by July.TikTok's global MAU numbers shot up to about 689 million (July 2020).\n\nFigure 1 :\n1Analytical query processing and retrieval in AnaSearch.\n\n\nFor example, \"Sales of Tesla Model S and BMW i8 in 2019.\" is an entity-based query where E * = {Tesla Model S, BMW i8}, X * = {Sales}, and * = 2019. The result is a collection of numerical values for each mentioned entity in E * , which could be visualized in a table or chart.\n\nFigure 3 :\n3The homepage of AnaSearch.\n\n\nEntity based * , * , *Unstructured Text \n\nExtract Quantitative Facts \n\nRelated \n\nValue \n\nTime \n\nQuery Parsing \n\nRetrieve Quantitative Facts \n\nAggregate \n\nExtraction \nRetrieval \n\nentity \n\nquantified \n\nEntity based Quantity based \n\nEntity \nMatching \nEntity Type \nMatching \n\nContext Matching \n\nTime Matching \n\nCandidate Results \n\n(Entity; Context; Time; Candidate Value) \n\u2026 \n\nGroup by entity, context, \nand time \n\nChoose the value with \nthe highest occurrence \n\nTable \n\nLine Chart \nBar Chart \n\nResult \n\nQuantity \nMatching \n\nsource \n\n\n\n\nFigure 4: Structured results visualized in table/chart.Demo Session I \nWSDM '21, March 8-12, 2021, Virtual Event, Israel \nClick to view original news \n\nClick to view links \n\nClick to view original news \n\nClick to change the COVID-19 type \n\nPage 1: Table \n\nPage 2: Graph \n\nQuery Input & Query Parsing \n\nLine Chart \nBar Chart \n\nClick to view original news \n\nClick to view links \n\nQuery 1 \nQuery 2 \n\n\nhttps://coronavirus.jhu.edu/ 2 https://bing.com/covid 3 https://github.com/microsoft/Recognizers-Text 4 https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/\n\nQuantitative Information Extraction From Social Data. Omar Alonso, Thibault Sellam, Proceedings of the 41st International ACM SIGIR. the 41st International ACM SIGIROmar Alonso and Thibault Sellam. 2018. Quantitative Information Extraction From Social Data. In Proceedings of the 41st International ACM SIGIR. 1005-1008.\n\nEntity-Oriented Search. Krisztian Balog, The Information Retrieval Series. 39SpringerKrisztian Balog. 2018. Entity-Oriented Search. The Information Retrieval Series, Vol. 39. Springer.\n\nA Semantic Search Approach to Task-Completion Engines. Dar\u00edo Garigliotti, Proceedings of the 41st International ACM SIGIR. the 41st International ACM SIGIRDar\u00edo Garigliotti. 2018. A Semantic Search Approach to Task-Completion Engines. In Proceedings of the 41st International ACM SIGIR. 1457.\n\nTowards an Understanding of Entity-Oriented Search Intents. Dar\u00edo Garigliotti, Krisztian Balog, Advances in Information Retrieval -the 40th ECIR. Dar\u00edo Garigliotti and Krisztian Balog. 2018. Towards an Understanding of Entity- Oriented Search Intents. In Advances in Information Retrieval -the 40th ECIR.\n\nNordlys: A Toolkit for Entity-Oriented and Semantic Search. Faegheh Hasibi, Krisztian Balog, Dar\u00edo Garigliotti, Shuo Zhang, Proceedings of the 40th International ACM SIGIR. the 40th International ACM SIGIRFaegheh Hasibi, Krisztian Balog, Dar\u00edo Garigliotti, and Shuo Zhang. 2017. Nordlys: A Toolkit for Entity-Oriented and Semantic Search. In Proceedings of the 40th International ACM SIGIR. 1289-1292.\n\nQsearch: Answering Quantity Queries from Text. Yusra Vinh Thinh Ho, Koninika Ibrahim, Klaus Pal, Gerhard Berberich, Weikum, Proceedings of the 18th ISWC. the 18th ISWCVinh Thinh Ho, Yusra Ibrahim, Koninika Pal, Klaus Berberich, and Gerhard Weikum. 2019. Qsearch: Answering Quantity Queries from Text. In Proceedings of the 18th ISWC. 237-257.\n\nEntities with Quantities: Extraction, Search, and Ranking. Koninika Vinh Thinh Ho, Niko Pal, Klaus Kleer, Gerhard Berberich, Weikum, Proceedings of the 13th WSDM. the 13th WSDMVinh Thinh Ho, Koninika Pal, Niko Kleer, Klaus Berberich, and Gerhard Weikum. 2020. Entities with Quantities: Extraction, Search, and Ranking. In Proceedings of the 13th WSDM. 833-836.\n\nMeasurement Context Extraction from Text: Discovering Opportunities and Gaps in Earth Science. Kyle Hundman, Chris A Mattmann, Proceedings of the 23rd ACM SIGKDD (Data-Driven Discovery Workshop). the 23rd ACM SIGKDD (Data-Driven Discovery Workshop)Kyle Hundman and Chris A. Mattmann. 2017. Measurement Context Extraction from Text: Discovering Opportunities and Gaps in Earth Science. In Proceedings of the 23rd ACM SIGKDD (Data-Driven Discovery Workshop).\n\nDeepTrack: Monitoring and Exploring Spatio-Temporal Data: A Case of Tracking COVID-19. Yuyu Luo, Wenbo Li, Tianyu Zhao, Xiang Yu, Lixi Zhang, Guoliang Li, Nan Tang, Proc. VLDB Endow. VLDB Endow13Yuyu Luo, Wenbo Li, Tianyu Zhao, Xiang Yu, Lixi Zhang, Guoliang Li, and Nan Tang. 2020. DeepTrack: Monitoring and Exploring Spatio-Temporal Data: A Case of Tracking COVID-19. Proc. VLDB Endow. 13, 12 (August 2020), 2841-2844.\n\nBootstrapping for Numerical Open IE. Swarnadeep Saha, Harinder Pal, Mausam , Proceedings of the 55th ALC. the 55th ALCShort Papers2Swarnadeep Saha, Harinder Pal, and Mausam. 2017. Bootstrapping for Numerical Open IE. In Proceedings of the 55th ALC (Volume 2: Short Papers). 317-323.\n\nYago: a core of semantic knowledge. Fabian M Suchanek, Gjergji Kasneci, Gerhard Weikum, Proceedings of the 16th WWW. the 16th WWWFabian M. Suchanek, Gjergji Kasneci, and Gerhard Weikum. 2007. Yago: a core of semantic knowledge. In Proceedings of the 16th WWW. 697-706.\n", "annotations": {"author": "[{\"end\":232,\"start\":195},{\"end\":267,\"start\":233},{\"end\":279,\"start\":268},{\"end\":317,\"start\":280},{\"end\":410,\"start\":318},{\"end\":444,\"start\":411},{\"end\":563,\"start\":445},{\"end\":597,\"start\":564}]", "publisher": "[{\"end\":154,\"start\":141},{\"end\":767,\"start\":754}]", "author_last_name": "[{\"end\":207,\"start\":205},{\"end\":247,\"start\":244},{\"end\":278,\"start\":276},{\"end\":293,\"start\":288}]", "author_first_name": "[{\"end\":204,\"start\":195},{\"end\":243,\"start\":233},{\"end\":275,\"start\":268},{\"end\":287,\"start\":280}]", "author_affiliation": "[{\"end\":409,\"start\":319},{\"end\":443,\"start\":412},{\"end\":562,\"start\":446},{\"end\":596,\"start\":565}]", "title": "[{\"end\":140,\"start\":1},{\"end\":737,\"start\":598}]", "venue": "[{\"end\":747,\"start\":739}]", "abstract": "[{\"end\":2588,\"start\":2432}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8634,\"start\":8631},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":8829,\"start\":8826},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":9190,\"start\":9186},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":11139,\"start\":11135},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12398,\"start\":12395},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":14856,\"start\":14853},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":14859,\"start\":14856},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":14880,\"start\":14877},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":14917,\"start\":14914},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":15170,\"start\":15167},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15173,\"start\":15170},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15176,\"start\":15173},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":15179,\"start\":15176},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":15233,\"start\":15230},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":15489,\"start\":15486}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":16187,\"start\":16067},{\"attributes\":{\"id\":\"fig_1\"},\"end\":16256,\"start\":16188},{\"attributes\":{\"id\":\"fig_2\"},\"end\":16536,\"start\":16257},{\"attributes\":{\"id\":\"fig_3\"},\"end\":16576,\"start\":16537},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":17109,\"start\":16577},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":17509,\"start\":17110}]", "paragraph": "[{\"end\":2646,\"start\":2590},{\"end\":2717,\"start\":2648},{\"end\":2806,\"start\":2719},{\"end\":2884,\"start\":2808},{\"end\":2909,\"start\":2896},{\"end\":3625,\"start\":2926},{\"end\":3684,\"start\":3627},{\"end\":3818,\"start\":3686},{\"end\":5090,\"start\":3820},{\"end\":5402,\"start\":5110},{\"end\":6184,\"start\":5435},{\"end\":6511,\"start\":6186},{\"end\":6605,\"start\":6526},{\"end\":8134,\"start\":6607},{\"end\":8327,\"start\":8164},{\"end\":8837,\"start\":8329},{\"end\":9254,\"start\":8839},{\"end\":9325,\"start\":9256},{\"end\":9888,\"start\":9327},{\"end\":10420,\"start\":9890},{\"end\":10689,\"start\":10422},{\"end\":11191,\"start\":10691},{\"end\":11568,\"start\":11193},{\"end\":14021,\"start\":11586},{\"end\":14559,\"start\":14023},{\"end\":15737,\"start\":14576},{\"end\":16066,\"start\":15752}]", "formula": null, "table_ref": null, "section_header": "[{\"end\":2894,\"start\":2887},{\"attributes\":{\"n\":\"1\"},\"end\":2924,\"start\":2912},{\"attributes\":{\"n\":\"2\"},\"end\":5108,\"start\":5093},{\"attributes\":{\"n\":\"2.1\"},\"end\":5433,\"start\":5405},{\"end\":6524,\"start\":6514},{\"attributes\":{\"n\":\"2.2\"},\"end\":8162,\"start\":8137},{\"attributes\":{\"n\":\"3\"},\"end\":11584,\"start\":11571},{\"attributes\":{\"n\":\"4\"},\"end\":14574,\"start\":14562},{\"attributes\":{\"n\":\"5\"},\"end\":15750,\"start\":15740},{\"end\":16199,\"start\":16189},{\"end\":16548,\"start\":16538}]", "table": "[{\"end\":17109,\"start\":16601},{\"end\":17509,\"start\":17167}]", "figure_caption": "[{\"end\":16187,\"start\":16069},{\"end\":16256,\"start\":16201},{\"end\":16536,\"start\":16259},{\"end\":16576,\"start\":16550},{\"end\":16601,\"start\":16579},{\"end\":17167,\"start\":17112}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":4545,\"start\":4537},{\"end\":5350,\"start\":5342},{\"end\":6565,\"start\":6557},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":12163,\"start\":12155},{\"end\":12217,\"start\":12209},{\"end\":12719,\"start\":12711},{\"end\":13005,\"start\":12997},{\"end\":13276,\"start\":13268},{\"end\":13439,\"start\":13431},{\"end\":13571,\"start\":13563},{\"end\":14140,\"start\":14132},{\"end\":14555,\"start\":14547}]", "bib_author_first_name": "[{\"end\":17747,\"start\":17743},{\"end\":17764,\"start\":17756},{\"end\":18044,\"start\":18035},{\"end\":18257,\"start\":18252},{\"end\":18556,\"start\":18551},{\"end\":18579,\"start\":18570},{\"end\":18864,\"start\":18857},{\"end\":18882,\"start\":18873},{\"end\":18895,\"start\":18890},{\"end\":18913,\"start\":18909},{\"end\":19252,\"start\":19247},{\"end\":19276,\"start\":19268},{\"end\":19291,\"start\":19286},{\"end\":19304,\"start\":19297},{\"end\":19611,\"start\":19603},{\"end\":19631,\"start\":19627},{\"end\":19642,\"start\":19637},{\"end\":19657,\"start\":19650},{\"end\":20005,\"start\":20001},{\"end\":20020,\"start\":20015},{\"end\":20022,\"start\":20021},{\"end\":20455,\"start\":20451},{\"end\":20466,\"start\":20461},{\"end\":20477,\"start\":20471},{\"end\":20489,\"start\":20484},{\"end\":20498,\"start\":20494},{\"end\":20514,\"start\":20506},{\"end\":20522,\"start\":20519},{\"end\":20833,\"start\":20823},{\"end\":20848,\"start\":20840},{\"end\":20860,\"start\":20854},{\"end\":21112,\"start\":21106},{\"end\":21114,\"start\":21113},{\"end\":21132,\"start\":21125},{\"end\":21149,\"start\":21142}]", "bib_author_last_name": "[{\"end\":17754,\"start\":17748},{\"end\":17771,\"start\":17765},{\"end\":18050,\"start\":18045},{\"end\":18269,\"start\":18258},{\"end\":18568,\"start\":18557},{\"end\":18585,\"start\":18580},{\"end\":18871,\"start\":18865},{\"end\":18888,\"start\":18883},{\"end\":18907,\"start\":18896},{\"end\":18919,\"start\":18914},{\"end\":19266,\"start\":19253},{\"end\":19284,\"start\":19277},{\"end\":19295,\"start\":19292},{\"end\":19314,\"start\":19305},{\"end\":19322,\"start\":19316},{\"end\":19625,\"start\":19612},{\"end\":19635,\"start\":19632},{\"end\":19648,\"start\":19643},{\"end\":19667,\"start\":19658},{\"end\":19675,\"start\":19669},{\"end\":20013,\"start\":20006},{\"end\":20031,\"start\":20023},{\"end\":20459,\"start\":20456},{\"end\":20469,\"start\":20467},{\"end\":20482,\"start\":20478},{\"end\":20492,\"start\":20490},{\"end\":20504,\"start\":20499},{\"end\":20517,\"start\":20515},{\"end\":20527,\"start\":20523},{\"end\":20838,\"start\":20834},{\"end\":20852,\"start\":20849},{\"end\":21123,\"start\":21115},{\"end\":21140,\"start\":21133},{\"end\":21156,\"start\":21150}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":195351869},\"end\":18009,\"start\":17689},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":52909950},\"end\":18195,\"start\":18011},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":49640536},\"end\":18489,\"start\":18197},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":3626418},\"end\":18795,\"start\":18491},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":19767209},\"end\":19198,\"start\":18797},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":204754788},\"end\":19542,\"start\":19200},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":210884040},\"end\":19904,\"start\":19544},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":38300890},\"end\":20362,\"start\":19906},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":240007325},\"end\":20784,\"start\":20364},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":35230874},\"end\":21068,\"start\":20786},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":207163173},\"end\":21338,\"start\":21070}]", "bib_title": "[{\"end\":17741,\"start\":17689},{\"end\":18033,\"start\":18011},{\"end\":18250,\"start\":18197},{\"end\":18549,\"start\":18491},{\"end\":18855,\"start\":18797},{\"end\":19245,\"start\":19200},{\"end\":19601,\"start\":19544},{\"end\":19999,\"start\":19906},{\"end\":20449,\"start\":20364},{\"end\":20821,\"start\":20786},{\"end\":21104,\"start\":21070}]", "bib_author": "[{\"end\":17756,\"start\":17743},{\"end\":17773,\"start\":17756},{\"end\":18052,\"start\":18035},{\"end\":18271,\"start\":18252},{\"end\":18570,\"start\":18551},{\"end\":18587,\"start\":18570},{\"end\":18873,\"start\":18857},{\"end\":18890,\"start\":18873},{\"end\":18909,\"start\":18890},{\"end\":18921,\"start\":18909},{\"end\":19268,\"start\":19247},{\"end\":19286,\"start\":19268},{\"end\":19297,\"start\":19286},{\"end\":19316,\"start\":19297},{\"end\":19324,\"start\":19316},{\"end\":19627,\"start\":19603},{\"end\":19637,\"start\":19627},{\"end\":19650,\"start\":19637},{\"end\":19669,\"start\":19650},{\"end\":19677,\"start\":19669},{\"end\":20015,\"start\":20001},{\"end\":20033,\"start\":20015},{\"end\":20461,\"start\":20451},{\"end\":20471,\"start\":20461},{\"end\":20484,\"start\":20471},{\"end\":20494,\"start\":20484},{\"end\":20506,\"start\":20494},{\"end\":20519,\"start\":20506},{\"end\":20529,\"start\":20519},{\"end\":20840,\"start\":20823},{\"end\":20854,\"start\":20840},{\"end\":20863,\"start\":20854},{\"end\":21125,\"start\":21106},{\"end\":21142,\"start\":21125},{\"end\":21158,\"start\":21142}]", "bib_venue": "[{\"end\":17854,\"start\":17822},{\"end\":18352,\"start\":18320},{\"end\":19002,\"start\":18970},{\"end\":19367,\"start\":19354},{\"end\":19720,\"start\":19707},{\"end\":20154,\"start\":20102},{\"end\":20557,\"start\":20547},{\"end\":20904,\"start\":20892},{\"end\":21199,\"start\":21187},{\"end\":17820,\"start\":17773},{\"end\":18084,\"start\":18052},{\"end\":18318,\"start\":18271},{\"end\":18635,\"start\":18587},{\"end\":18968,\"start\":18921},{\"end\":19352,\"start\":19324},{\"end\":19705,\"start\":19677},{\"end\":20100,\"start\":20033},{\"end\":20545,\"start\":20529},{\"end\":20890,\"start\":20863},{\"end\":21185,\"start\":21158}]"}}}, "year": 2023, "month": 12, "day": 17}