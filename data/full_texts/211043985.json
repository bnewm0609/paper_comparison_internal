{"id": 211043985, "updated": "2023-11-11 02:30:42.418", "metadata": {"title": "Hyper-optimized tensor network contraction", "authors": "[{\"first\":\"Johnnie\",\"last\":\"Gray\",\"middle\":[]},{\"first\":\"Stefanos\",\"last\":\"Kourtis\",\"middle\":[]}]", "venue": "Quantum", "journal": "Quantum", "publication_date": {"year": 2020, "month": 2, "day": 5}, "abstract": "Tensor networks represent the state-of-the-art in computational methods across many disciplines, including the classical simulation of quantum many-body systems and quantum circuits. Several applications of current interest give rise to tensor networks with irregular geometries. Finding the best possible contraction path for such networks is a central problem, with an exponential effect on computation time and memory footprint. In this work, we implement new randomized protocols that find very high quality contraction paths for arbitrary and large tensor networks. We test our methods on a variety of benchmarks, including the random quantum circuit instances recently implemented on Google quantum chips. We find that the paths obtained can be very close to optimal, and often many orders or magnitude better than the most established approaches. As different underlying geometries suit different methods, we also introduce a hyper-optimization approach, where both the method applied and its algorithmic parameters are tuned during the path finding. The increase in quality of contraction schemes found has significant practical implications for the simulation of quantum many-body systems and particularly for the benchmarking of new quantum chips.", "fields_of_study": "[\"Physics\"]", "external_ids": {"arxiv": null, "mag": "3139424548", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/quantum/GrayK21", "doi": "10.22331/q-2021-03-15-410"}}, "content": {"source": {"pdf_hash": "e3de4852491195a3dfdec1939a3cc513bfb58e3c", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2002.01935v1.pdf\"]", "oa_url_match": false, "oa_info": {"license": "CCBY", "open_access_url": "https://quantum-journal.org/papers/q-2021-03-15-410/pdf/", "status": "GOLD"}}, "grobid": {"id": "76beb20328db4cf7f10b737b090fbb5564eaa5e0", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/e3de4852491195a3dfdec1939a3cc513bfb58e3c.txt", "contents": "\nHyper-optimized tensor network contraction\n\n\nJohnnie Gray \nBlackett Laboratory\nImperial College London\nSW7 2AZLondonUnited Kingdom\n\nStefanos Kourtis \nBlackett Laboratory\nImperial College London\nSW7 2AZLondonUnited Kingdom\n\nDepartment of Physics\nBoston University\n02215BostonMAUSA\n\nInstitut quantique & D\u00e9partement de physique\nUniversit\u00e9 de Sherbrooke\nJ1K 2R1Qu\u00e9becCanada\n\nHyper-optimized tensor network contraction\n(Dated: February 7, 2020)\nTensor networks represent the state-of-the-art in computational methods across many disciplines, including the classical simulation of quantum many-body systems and quantum circuits. Several applications of current interest give rise to tensor networks with irregular geometries. Finding the best possible contraction path for such networks is a central problem, with an exponential effect on computation time and memory footprint. In this work, we implement new randomized protocols that find very high quality contraction paths for arbitrary and large tensor networks. We test our methods on a variety of benchmarks, including the random quantum circuit instances recently implemented on Google quantum chips. We find that the paths obtained can be very close to optimal, and often many orders or magnitude better than the most established approaches. As different underlying geometries suit different methods, we also introduce a hyper-optimization approach, where both the method applied and its algorithmic parameters are tuned during the path finding. The increase in quality of contraction schemes found has significant practical implications for the simulation of quantum many-body systems and particularly for the benchmarking of new quantum chips.\n\nI. INTRODUCTION\n\nSince the advent of the density-matrix renormalization group algorithm, invented to study one-dimensional lattice systems of quantum degrees of freedom, tensor networks have permeated a plethora of scientific disciplines, finding use in fields such as quantum condensed matter [1][2][3][4], classical statistical mechanics [5][6][7], information science and big-data processing [8,9], systems engineering [10], quantum computation [11], machine learning and artificial reasoning [12][13][14] and more. The underlying idea of tensor network methods is to use sparse networks of interconnected low-rank tensors to represent data structures that would otherwise be expressed in (very) high-rank tensor form, which is hard to manipulate. Due to this ubiquity, techniques to perform (multi)linear algebraic operations on tensor networks accurately and efficiently are very useful to a highly interdisciplinary community of researchers and engineers. Of these operations, tensor network contraction, i.e., the evaluation of a scalar quantity that has been expressed as a tensor network, is the most common.\n\nWhen a system under consideration gives rise to a tensor networks with a regular structure, such as lattices, the renormalization group apparatus is often employed to perform tensor network contractions with controllable accuracy. This approach has been successful in tackling a variety of classical and quantum many-body problems [5][6][7][15][16][17][18][19][20]. Efficient tensor network contraction is also possible in special cases in which network topology (e.g., trees), values of tensor entries, or both are restricted [21][22][23][24][25][26]. Despite these results, contracting tensor networks with arbitrary structure remains (at least) #P-hard in the general case [27,28]. This is true, in particular, for tensor networks that model arbitrary quantum circuits, a fact that has recently inspired proposals for quantum algorithms running on these circuits that aim towards a practically demonstrable quantum computational advantage over classical computers [11,[29][30][31][32][33][34][35][36][37][38][39]. The precise threshold for observing such a quantum advantage is nonuniversal and ultimately depends on the efficiency of the classical simula-FIG. 1. Sample tensor networks: (a) simplified network for a rectangular 7x7 qubit 1 + 40 + 1 depth random quantum circuit with 742 rank-3 tensors; (b) a random 5-regular network with 100 tensors, arising in, e.g., SAT problems; and (c) random planar network with 184 tensors, arising in, e.g., the statistical-mechanical evaluation of knot invariants. tion for each particular combination of quantum algorithm and circuit architecture. This motivates the development of highperformance simulation techniques for these quantum systems, predominantly based on finding good contraction paths for tensor networks, that runs in parallel to the race for the development of higher qubit count and quality devices [40][41][42].\n\nInspired by the classical simulation of quantum circuits, here we introduce a framework for exact contraction of large tensor networks with arbitrary structure (see examples in Fig. 1). By employing this framework, we are able to find very high-quality contraction paths, achieving speedups that scale exponentially with the number of tensors in the network compared to established approaches, for a variety of benchmarks. The methods we test include recently introduced con-traction algorithms based on graph partitioning and community structure detection [43], previously theorized [11] and recently implemented [44] algorithms based on the tree decomposition of graphs, as well as new heuristics that we introduce in this work. Furthermore, observing that different graph structures favor different algorithms, we implement a hyper-optimization approach, where both the method applied and its parameters are varied throughout the contraction path search, leading to automatically customized contraction algorithms that often achieve near-optimal performance. Our findings can lead to significant performance gains across the spectrum of tensor network applications.\n\nThe remainder of this paper is organized as follows. In Sec. II we formalize the problem of finding the optimal contraction path for arbitrary tensor networks. In Sec. III we introduce and explain the various algorithms employed in our heuristics. In Sec. IV we test our methods on a variety of benchmarks, including the random quantum circuit instances recently implemented on Google Bristlecone and Sycamore quantum chips. We conclude in Sec. V.\n\n\nII. PROBLEM STATEMENT\n\nWe denote an edge-weighted graph by G = (V, E), where V is the vertex set and the set of 2-tuples of vertex indices E \u2282 {(u, v) : u, v \u2208 V } is the edge set, along with a weight function w : E \u2192 R + that assigns a positive real number to each edge. For each vertex v, define the incidence set s v = {e : e \u2208 E and v \u2208 e}, which is the set of edges incident to vertex v, such that |s v | = d v , the degree of vertex v.\n\nTo define a tensor network, we augment G with (i) a discrete variable x e for each edge e \u2208 E, whose set of possible values (or Hilbert space) is given by D(e) with |D(e)| = w(e), (ii) an ordered tuple t v : N dv \u2192 s v for each vertex v \u2208 V , and (iii) a multivariate function or tensor T v :\nD(t v (1)) \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 D(t v (d v )) \u2192 C, where t v (i) denotes the ith element of tuple t v , for every vertex v \u2208 V .\nThat w is defined to be a real-valued function even though D(e) \u2208 Z + \u2200 e \u2208 E is simply a choice that allows for extra flexibility in the design of contraction algorithms, see, e.g., the Boltzmann greedy algorithm below.\n\nWith these definitions, a tensor network contraction can be represented as a sequence of vertex contractions in graph G. Each vertex contraction removes common edges between pairs of tensors, if any, and represents a product operation on the corresponding tensors, in which one takes the inner product over common indices or an outer product if there are no common indices. For simplicity, in what follows we consider only pairwise contractions, which are common practice. Multiway contractions are also possible, but they can always be decomposed to sequences of pairwise contractions. For some applications, only a subset of V must be contracted, while in others all vertices in V are contracted into a single vertex. Here we will focus on the latter case, as it underlies the former. We will assume that G has no loops initially and that multiple edges are always contracted simultaneously, so that no loops occur throughout the contraction. Each edge in a tree has an associated tensor and subgraph. The size of the tensor is exponential in the number of indices (denoted by unique colors) running along that edge -the edge congestion. Each vertex in a tree represents a pairwise contraction of two tensors, as well as a bi-partitioning of the parent edge's subgraph (the dashed grey line shows one example of this). The cost of that pairwise contraction is exponential in the number of indices passing through that vertexthe vertex congestion. Assuming each index is the same size, the tree (c) thus has both a higher maximum contraction width (in bold) and total contraction cost than tree (b).\n\nTo represent the sequence of vertex contractions, we define a rooted binary tree B = (V B , E B ), with the first |V | vertex indices denoting leaves, using two tuples l and r such that l(v) and r(v) are the indices of the 'left' and 'right' children of vertex v \u2208 V B , respectively, if any. This defines a tree embedding of G [45]. Finally, we assign an incidence set s v to each v \u2208 V B , starting with leaves, according to\ns v = {e : e \u2208 E and v \u2208 e} if v is a leaf index , s l(v) \u2295 s r(v) otherwise ,(1)with s i \u2295 s j = (s i \u222a s j ) \\ (s i \u2229 s j ). The composite of (B, S), where S = {s v : v \u2208 V B }, defines a contraction tree of G.\nFor a given tensor network contraction tree, one can quantify the space and time cost of contracting the network. First, the total space required for the contraction of a network is given, up to an O(|V |) prefactor, by 2 W , for contraction width\nW = ec max (B, S) ,(2)\nwhere ec max is the maximum edge congestion for this tree embedding of G [46]. In our notation,\nec max (B, S) = max v\u2208V B e\u2208sv log 2 w(e) .(3)\nA space-optimal contraction tree for G is then defined by\nB space (G) = argmin B\u2208B |V | ec max (B, S) ,(4)\nwhere B |V | is the set of all rooted binary trees with |V | leaves. For systems of boolean variables or qubits, w = 2 and ec max (B, S) = max v\u2208V B |s v |. The contraction width is then equal to the maximum vertex degree in the minors of G obtained throughout the contraction path represented by B [43], as illustrated in the example of Fig. 2. The same logic extends to any constant w. Similarly, the time complexity of the contraction is captured by the contraction cost\nC(B, S) = v\u2208V B 2 vc(B,S,v) ,(5)\nwhere vc is the vertex congestion [46] vc(B, S, v) =\ne\u2208s l(v) \u222as r(v) log 2 w(e) .(6)\nAgain using the case of qubits as an example, the number of operations required to obtain the tensor corresponding to a non-leaf vertex v by contracting its children is proportional to 2 |s l(v) \u222as r(v) | . More precisely, assuming every contraction is an inner product, for real (complex) tensors, the associated FLOP count will be a factor of two (eight) times more than C: one (six) FLOP(s) for the multiplication and one (two) FLOP(s) for the addition. A time-optimal contraction tree for G is then\nB time (G) = argmin B\u2208B |V | C(B, S) .(7)\nB time (G) and B space (G) are not necessarily the same and hence a strategy that aims to find one is not guaranteed to also find or approximate the other.\n\n\nIII. TENSOR NETWORK CONTRACTION ALGORITHMS\n\nWe have shown that the optimization of the contraction path for a given tensor network corresponds to minimization of a vertex or edge congestion measure over the possible tree embeddings of the network. Instead of performing this minimization, here we will use methods that optimize contraction paths based on quantities that are proxies to these congestion measures, as explained below. Our heuristics are based on established algorithms for a variety of common graph theoretic tasks, such as balanced bipartitioning or community detection, some of which, unlike tree embedding, have seen decades of development and improvement. This affords great benefits in performance to our methods.\n\n\nA. Optimal Contraction Trees\n\nOne method for finding contraction trees is to exhaustively search through all of them and return whichever minimizes the desired target W or C. Since outer products are rarely ever beneficial, an efficient but virtually optimal way to perform this search is to adopt a dynamic programming approach that builds the tree considering connected subgraphs only [47]. We refer to this optimizer as Optimal and for our results use the version implemented in opt einsum [48].\nB. Line-Graph Tree Decompositions -QuickBB & FlowCutter\nThe most common approach to contracting arbitrary tensor networks in recent years, motivated by the results of Markov and Shi [11], has been to find a tree decomposition of the line graph of G. From this tree decomposition, an edge elimination ordering can be constructed such that the complexity of the corresponding contraction is upper bounded by the treewidth of the line-graph minus one. Practically speaking, we turn an edge ordering, (e 1 , e 2 , e 3 , . . .) into a contraction tree as follows. First, find the subgraph of G induced by the next edge in the ordering, e i . Update G by contracting all of the tensors in this subgraph to form a single vertex (if there are more than 2 tensors use an exhaustive or greedy approach to find a contraction sequence for this small subgraph only). Repeat until all edges in the ordering have been processed.\n\nIn the tensor network literature the most commonly used tree decomposition finder is QuickBB [49], which implements a depth-first 'branch and bound' search. Broadly speaking this approach emphasizes performance for graphs with modest numbers of edges, where indeed QuickBB has been shown to work well [42]. More recently, the FlowCutter tree decomposition finder [50,51], has been applied to tensor networks [44]. FlowCutter takes more of a 'top-down' approach which emphasizes performance on graphs with large numbers of edges. Both function as 'any-time' algorithms, able to yield the best found solution after setting an arbitrary time. On the other hand, neither of these optimizers take edge weights into account, which may be a significant disadvantage in the many-body setting, where, unlike in quantum circuits, bond dimensions can vary significantly.\n\n\nC. Community detection via edge betweenness -GN\n\nOne of the methods for the contraction of tensor networks with arbitrary structure introduced in Ref. [43] is based on detecting communities in the network. Qualitatively, a community is a subset of the vertices in a network that is densely connected internally and sparsely connected with its complement. Detecting communities in networks is a central problem in the study of complex networks [52,53].\n\nThe intuition behind using the community structure to contract an arbitrary tensor network is that it is advantageous to contract all the edges between vertices that belong to a community first. That is because the vertex that results from the contraction of all edges within a community, which we call a community vertex, is sparsely connected with the rest of the network. Thus, when a community structure exists and is de-tected in the network, the adherence of contractions to this community structure is expected to lead to community vertices with a maximum degree that is lower than that of the same number of vertices reached by an arbitrary sequence of contractions of the original network. This approach hence effectively minimizes the contraction cost, i.e., yields a contraction sequence that approximates the one defined by the spaceoptimal contraction tree.\n\nA popular community structure detection algorithm is the one of Girvan and Newman [54]. It operates by evaluating a quantity called edge betweenness centrality, defined as\ng(e) = s,t\u2208V \u03c3 st (e)/\u03c3 st ,(8)\nwhere \u03c3 st is the total number of shortest paths between vertices s and t, and \u03c3 st (e) is the number of those paths that pass through edge e \u2208 E. The algorithm starts with an empty edge list and repeats two steps:\n\n1. remove e = argmax e\u2208E g(e) from E and add it to the list,\n2. calculate g(e) \u2200 e \u2208 E,\nuntil exhausting E. Multiple edges can be processed simultaneously, since they have the same g. The resulting list of edges, sometimes called a dendrogram, defines the detected community structure: if one sequentially removes the list entries from E until G becomes disconnected, then the resulting connected components are the communities of G. The algorithm then proceeds by splitting each connected component into smaller communities, and the process repeats all the way down to the individual vertex level. The output of the Girvan-Newman method is also a contraction path: one simply has to traverse the edge list in reverse, each entry defining a contraction of the endpoints of the corresponding edge. One can incorporate edge weights (and thus bond dimensions) into Eq. (8), possibly randomized with some strength \u03c4 , to generate varied paths. We call the optimizer based on repeated sampling of these paths GN.\n\n\nD. Agglomerative contraction trees -BGreedy\n\nOne simple way to construct a contraction tree is greedily from the bottom up. Here, one ignores any overall structure of the graph G and instead heuristically scores each possible pairwise contraction. Based on these scores, a pair of tensors can be chosen and contracted into a new vertex and the list of scores then updated with any new possible contractions. Whilst we know the exact cost and output size of each pairwise contraction, we do not know the effect it might have on the cost and size of later contractions, meaning we must instead carefully choose the heuristic score function.\n\nGiven two tensors T i and T j whose contraction yields T k , one reasonable choice for the heuristic cost function is\ncost(T i , T j ) = size(T k ) \u2212 \u03b1(size(T i ) + size(T j ))(9)\nwith \u03b1 a tunable constant. If we take \u03b1 = 1 then this cost is directly proportional to the change in memory should we perform the contraction. Whereas instead taking \u03b1 = 0 essentially just prioritizes the rank of the new tensor. Since we will want to sample many greedy paths we also introduce a 'Boltzmann factor' weighting of the costs such that the probability of selecting a pairwise contraction is\np(T i , T j ) \u221d exp (\u2212cost(T i , T j )/\u03c4 ) ,(10)\nwith \u03c4 an effective temperature governing how 'adventurous' the path finding should be. Repeatedly generating contraction trees using this combination of cost and weighting, whilst potentially tuning both \u03b1 and \u03c4 , leads to the BGreedy optimizer. BGreedy generally outperforms other greedy approaches and is quick to run, making it a simple but useful reference algorithm.\n\n\nE. Divisive contraction trees -KaHyPar\n\nThe greedy or agglomerative approach is a natural way to think about building contraction trees from the bottom up. However, as introduced in [43] we can also try and build contraction trees from the top down in a divisive manner. The key here is that each node in a contraction tree represents not only an effective tensor but a subgraph of the initial graph describing the full tensor network. As we ascend a contraction tree, merging two nodes corresponds to a pairwise contraction of the two effective tensors. In reverse, as we descend a contraction tree, splitting a node corresponds to a bipartitioning of subgraph associated with that node.\n\nPractically we start with the list of 'childless' vertices -initially just the root of the tree corresponding to the full graph, {V G }. We take the next childless vertex, V , and partition it into V = V 1 \u222a V 2 . If |V 1 | > 1 we append it to the list of childless vertices and similarly if |V 2 | > 1. This process can be repeated until the full contraction tree is generated. Such a divisive approach is very similar to the community detection scheme introduced earlier, however, whilst the Girvan-Newman algorithm naturally yields the entire contraction tree, here we create single contractions one at a time. This allows one to combine partitioning with other optimizers. For example, we can instead partition a vertex V into k partitions, V 1 , V 2 , . . . , V k and then use the Optimal or BGreedy optimizer to 'fill in' the contraction tree -essentially find the contraction path for a tensor network composed just of the tensors corresponding to each of these new subgraphs. Similarly, if the size of V drops below some threshold, we can again use either Optimal or BGreedy to find the remaining part of the contraction tree corresponding just to the leaf tensors in V .\n\nThe cost of an individual contraction -a vertex bipartitioning -is given by the product of the dimensions of the involved indices. These include any outer indices of the subgraph, plus any indices that cross the newly created partition. Since the outer indices are independent of the partition, minimizing the number of indices cut by a partition also minimizes the cost of the corresponding contraction. This is still essentially a greedy approach -it only considers the cost of a single contraction and strictly minimizing this cost (corresponding to choosing a min-cut) could likely create more expensive contractions down the line. However, one way to heuristically adjust this is to control how balanced to make the partitions, in other words, how much to match the size of each partition. Specifically, we can define the imbalance parameter, , such that |V i | \u2264 (1+ )|V |/k for i = 1 . . . k, where k is the number of partitions. If is close to zero, then the partitions are forced to be very similar in size, whilst if is close to k the partitions are allowed to be of any size.\n\nTaking into account the internal structure of the tensors in a problem allows for further flexibility in the recursive bipartition process, which in turn can lead to significant performance gains. As an example, consider the case of a COPY tensor, whose entries are 1 only when all indices are equal and 0 otherwise. These tensors appear, for example, when modeling circuits of controlled gates (see, e.g., Sec. IV C 1) or satisfiability formulas [26,43]. Each COPY tensor in a network can be replaced by any connected graph of COPY tensors without changing the result of the contraction [4]. By replacing all COPY tensors in the network with hyperedges, one can perform recursive hypergraph bipartitioning with more freedom in the search for short cuts compared to the original graph. To revert back to a 'traditional' tensor network after partitioning, each hyperedge can be replaced by a low-rank COPY tensor subgraph that cuts each separator at most once, as illustrated in Fig. 3. Another important use-case for hyperedges is to efficiently treat batch and output indices, though these are not benchmarked in this work.\n\nWe employ the partitioner KaHyPar [55,56] to generate our contraction trees for a number of reasons. Aside from offering state-of-the-art performance, it also can handle hypergraphs (and thus arbitrary tensor expressions), allows key parameters such as the imbalance to be specified, and takes into account edge weights (and thus arbitrary bond dimensions). Repeatedly sampling contraction trees whilst tuning the parameters k, and the cut-off to stop partitioning leads us to the optimizer we call KaHyPar. Note that the line graph and greedy methods of Secs. III B and III D, respectively, also support hypergraphs natively.\n\n\nF. Stochastic Bayesian Optimization\n\nThe Optimal contraction tree optimizer runs until completion whilst QuickBB and FlowCutter are natively anytime algorithms. For the remaining three optimizers -GN, BGreedy and KaHyPar -we use a combination of randomization and Bayesian optimization [57] to intelligently sample ever better contraction paths. This allows all three of them to run as parallel any-time algorithms.\n\nFor the GN and KaHyPar optimizers, randomization can be introduced as a noise of the edge weights of the initial graph G. For the BGreedy optimizer the Boltzmann sampling of greedy contractions yields another source of randomization. Due to the high sensitivity of the contraction width W and cost C to the contraction path, simply sampling many paths and keeping the best already offers significant improvements over single shot versions of these same algorithms. However we can further improve the performance if we allow the heuristic parameters of each optimizer to be tuned as the sampling continues. We use the baytune [58] library to perform this optimization, which uses Gaussian processes [59] to model the effect of the parameters on the target score -either W or C -and suggest new combinations which are likely to perform well.\n\n\nIV. RESULTS\n\nWe benchmark our contractors on three classes of tensor networks with complex geometry -random regular graphs, random planar graphs, and random quantum circuits. In each set of results we set a time limit for each of the optimizers to run for, and then target either the contraction width, W , or contraction cost C. As a reminder, W is essentially the space requirement of the contraction (log 2 of the size of the largest intermediate tensor) whilst C is the time requirement (the total number of scalar operations). The Optimal algorithm is able to search for either the minimum W or C, whilst GN, BGreedy and KaHyPar can target either through the guided Bayesian optimization. Finally, there is no way to specifically bias QuickBB and FlowCutter towards either W or C so in each case the optimizer runs identically. If an optimizer can run in parallel, we allow it 4 cores to do so. An open source implementation of the optimizers, compatible with opt einsum [48] and quimb [60], is available at [61].\n\nTo give some context to the relative scale of W and C, a complex, single precision tensor of size 2 27 requires 1GB of memory, and a consumer grade GPU can usually achieve a few teraFLOPs in terms of performance, corresponding to C \u223c 10 15 over an hour. In the final results section we benchmark various contractions and indeed find this real-world performance. At the extreme end of the scale, the most powerful supercomputer in the world currently, Summit, has a few petabytes of memory, corresponding very roughly to W \u223c 47, though this is obviously distributed among nodes and utilizing it for a single contraction would need, among many other technical considerations, significant inter-node communication. Summit has also achieved sustained performance of a few hundred petaFLOPs [62], which over an hour might correspond to C \u223c 10 20 , but is unlikely to do so if distributed contraction is required (i.e. for high W ).\n\n\nA. Random Regular Graphs\n\nWe start by benchmarking tensor networks with geometries defined by random regular graphs, as studied in [43,44]. For such a k-regular graph, every vertex is connected randomly to k others, with total number of vertices |V |. We treat each of the edges as tensor indices of size 2 and associate a rank-k tensor with each vertex. An example of such a network is shown in Fig. 1(b). For each size |V |, degree k and target \u2208 {W, C}, we generate 100 sample regular graphs uniformly [63], and allow 5 minutes of search time per instance for each optimizer. The reference Optimal path finder we instead run for 24 hours and only show data points where all but one or two of the instances successfully terminated so as not to bias those points towards easy instances.\n\nThe results are shown in Figs. 4(a)-(f). First of all we note that for small sizes all optimizers return similar performance, indeed, close to Optimal. As |V | increases however the same ranking emerges in each combination of k and {W, C}: (from worst to best) QuickBB, BGreedy, FlowCutter, GN, then finally KaHyPar. We attribute the improvement of GN over previous studies [44] to the use of guided stochastic sampling. There are some interesting performance comparisons when it comes to targeting contraction width W or cost C. For example, while BGreedy beats QuickBB for width across the board, the results are much closer for contraction cost. On the other hand, the advantage of KaHyPar over GN and FlowCutter is much more pronounced when considering cost rather than width.\n\n\nB. Random Planar Graphs\n\nA contrasting class of geometries to consider is that of planar graphs, encountered for example in the study of physical systems defined on a 2D lattice or in evaluating knot invariants [64]. To investigate these in a generic fashion, we generate random planar graphs with |V | \u2208 [20,200] according to the scheme in [65], an instance of which is shown in Fig. 1(c). Whilst these are much more random than square lattices for example, we find nonetheless that the results are broadly representative. Similarly to the random regular graphs, for each vertex with k edges we associate a rank-k tensor with bond dimensions of size 2 and allow each optimizer 5 minutes per instance to explore contraction paths. In [44] it was shown that the optimal contraction path with respect to W for planar graphs can be found in polynomial time. In Fig. 5(a) and (b) we plot the mean contraction width, W , and cost, C, as a function of the 'side length' of the graph, |V |. Alongside a sub-exponential scaling for all the optimizers we see a very different ranking of optimizer performance as compared to random regular graphs, with BGreedy performing best. For small sizes, again the performance of all optimizers is close to Optimal, and in fact the difference between methods remains relatively small throughout the size range.\n\n\nC. Random Quantum Circuits\n\nThe final class of tensor networks we study is those corresponding to random quantum circuits executed on a range of quantum chip geometries. In particular, we look at sizes and depths previously explored in the context of so-called 'quantum supremacy' [37,38,66,67]. Quantum circuits can be naturally cast as tensor networks and then simulated via contraction, as shown in [11]. In recent years, random quantum circuits have been used both as a test-bed for tensor network contraction schemes as well as setting the benchmark for demonstrating 'quantum supremacy' [41,[68][69][70][71][72]. Practically speaking, such simulations can also allow the fidelity of real quantum chips to be benchmarked and calibrated [38,67,71].\n\nThe simplest quantity to compute here is the 'transition amplitude' of one computational basis state to another through a unitary describing the quantum circuit. Assuming we start with the N qubit all-zero bit-string |0 \u2297N , the transition amplitude for output bit-string x can be written:\nc x = x| U d U d\u22121 . . . U 2 U 1 |0 \u2297N ,(11)\nwhere we have assumed some notion of circuit depth, d, such that each unitary U i contains a 'layer' of entangling gates, the exact composition of which depends on the specific circuit definition. The process for computing c x takes place in several steps; (a) construct the tensor network corresponding the circuit; (b) perform some purely structure dependent simplifications of the tensor network; (c) find the contraction path for this simplified network; and (d) actually perform the contraction using the found path. Steps (a) and (b) are very cheap, and moreover we can re-use the path found in step (c) to contract any tensor with matching structure but different tensor entries, such as varying x.\n\n\nGate Decompositions\n\nWe find that pre-processing the tensor networks before attempting to find contraction paths is an important step, particularly for optimizers such as QuickBB and BGreedy that scale badly with the number of edges and vertices. A tensor network for c x initially consists of: rank-1 tensors describing each of the input and output qubit states; rank-2 tensors describing single qubit gates; and rank-4 tensors describing two-qubit gates. The first processing step is deciding how to treat the two-qubit gates. A tensor describing such a gate can be written g In the first case this yields two rank-3 tensors:\ng oao b iai b = \u03c7 \u03be=1 l oa ia\u03be r o b i b \u03be ,(12)\nwhere we have dropped any zero singular vectors and absorbed the remaining singular values into either of the left and right tensors l and r, each of which is now 'local' to either qubit a or b, connected by a bond of size \u03c7. The second case yields the same but with an effective SWAP (which can be implemented purely as a relabelling of tensor indices) of the qubit states first:\ng oao b iai b = \u03c7 \u03be=1 2 i a i b =1 l oa i a \u03be r o b i b \u03be \u03b4 i b ia \u03b4 i a i b .(13)\nThe options for a gate are thus to: (a) perform no decomposition; (b) perform a spatial decomposition -Eq. (12); or (c) perform a swapped decomposition -Eq. (13). By default we only perform a decomposition if the bond dimension, \u03c7, yielded is less than 4; all controlled gates fall into this category for a spatial decomposition, whereas the ISWAP gate for instance has \u03c7 = 2 for the swapped decomposition. Another option is to discard small but non-zero singular values which will result in a drop in the fidelity of c x [67] -unless explicitly noted we do not perform this form 'compression'.\n\n\nTensor Network Simplifications\n\nNext we describe a series of simplifications based simply on tensor network structure and sparsity of the tensors that we perform iteratively until no more operations are possible. The first of these is diagonal-reduction of tensor axes, as introduced for quantum circuits in [69]. For a k-dimensional\ntensor, t i1i2...i k , with indices i 1 i 2 . . . i k , if for any pair {i x , i y } t i1i2...i k = 0 \u2200 i x = i y(14)\nthen we can replace t with a (k \u2212 1)-dimensional tensor,t with elementst ...ix = t ...ixiy \u03b4 ix iy , where the \u03b4 copy can be implemented by re-indexing i y \u2192 i x everywhere else in the tensor network, thus resulting in i x becoming a hyperedge. This enables the use of the hypergraph machinery detailed in Sec. III E.\n\nThe second pre-processing step we perform is ranksimplification. Here we generate a greedy contraction path that targets rank reduction only (i.e. with respect to Eq. (9) and (10) sets \u03b1 = \u03c4 = 0). We then perform any of the pairwise contractions such that the rank of the output tensor is not larger than the rank of either input tensor. If the tensor network has no hyperedges, this corresponds to absorbing all rank-1 and rank-2 tensors into neighbouring tensors, a process which cannot increase the cut-weight across any partition for example.\n\nThe third pre-processing step we perform is antidiagonalgauging. Here, again assuming we have a k-dimensional tensor t i1i2...i k , if for any pair of indices {i x , i y } of matching size d we find\nt i1i2...i k = 0 \u2200 i x = d \u2212 i y(15)\nthen we can flip the order of either index i x or i y throughout the tensor network. This corresponds to gauging that index with a 'reflected' identity, for example if d = 2 the Pauli matrix X. This simplification does not help on its own but merely produces tensors which can then be diagonally reduced using the prior scheme. The final simplification we perform is column-reduction. Here, if for any k-dimensional tensor t i1i2...i k we find an index i x and 'column' c such that\nt i1i2...i k = 0 \u2200 i x = c(16)\nthen we can replace every tensor, t ...ix , featuring that index with the (k \u2212 1)-dimensional tensort corresponding to the slice t ... [ix=c] , removing that index from the network entirely. We apply the above set of simplifications iteratively but deterministically until no method can find any operation to perform. The order they are applied in can produce very different networks -we find cycling through the order {diagonal-reduction, rank-simplification, antidiagonalgauging, column-reduction} produces good results. Indeed for quantum circuits generally the resulting tensor networks often have almost no sparsity among tensor entries. Note for methods such as GN which cannot handle hyperedges we skip the diagonal-reduction. Finally, if aiming to reuse a contraction path, one needs to maintain the sparsity structure from network to network, possibly excluding any variable tensors from the simplification steps that detect sparsity. For most circuits terminated with a layer of Hadamard gates, if one only changes the sampled bit-string x then even this is not usually necessary.\n\n\nRandom Quantum Circuit Geometries\n\nWe benchmark the contraction path optimizers against different random quantum circuits executing on three different quantum chip geometries: (i) a rectangular 7\u00d77 lattice of 49 qubits; (ii) a 70 qubit 'Bristlecone' lattice; and (iii) a 53-qubit 'Sycamore' lattice.\n\nFor the first two we use the updated, harder versions of the random circuit definitions first suggested in [38], which are available at [73]. We adopt the notation (1+d+1) for depth d to emphasize that the technically first and last layer of single qubit gates (which add no real complexity) are not counted. In both cases the entangling gate used is the controlled-Z which has a \u03c7 = 2 spatial decomposition.\n\nFor the Sycamore architecture, we use the same circuits that were defined and also actually executed in the recent work [67]. Here each two-qubit gate is a separately tuned 'fermionic simulation' gate which has no low-rank decomposition if treated exactly. On the other hand, if a swapped decomposition is performed, the two smallest singular values are quite small and on average discarding them leads to a fidelity drop of a fraction of a percentage point -for a single gate. If this approximation is used for every single entangling gate in the circuit, however, the error is compounded. For our main results, labelled 'Sycamore-53', we thus perform no gate decomposition and consider perfect fidelity transition amplitude calculations only. Results where the \u03c7 = 2 swapped decomposition has been used we label 'Sycamore-53*'. We also note that the definition of circuit 'cycles', m, used in [67] is about twice as hard as the rectangular and bristlecone circuit definition of depth, d, since per layer almost all qubits are acted on with an entangling gate rather than approximately half respectively.\n\nIn the following table we report the number of network vertices and edges for representative depths of each circuit geometry after simplifications. The first two columns, |V |, |E| are for the case where hyperedge introduction is avoided, the last two columns,|V |,|E|, are for the case where the full simplification scheme introduced above has been applied. We note that if the swap decomposition is not applied to the sycamore circuits then no diagonal-reductions can take place and the resulting simplified tensor network is the same in both cases.\n\n\n2D Circuit Specific Optimizers -qFlex/PEPs\n\nBefore presenting results for contraction width and cost for these random circuits, we introduce one final form of contraction path optimizer that has been successfully applied to circuits acting on 2D lattices [71,72]. Here one performs the spatial decomposition of the entangling gates, regardless of rank, such that every tensor is uniquely localized above a single qubit register. One can then contract every tensor in each of these spatial slices resulting in a planar tensor network representing c x with a single tensor per site. Although the two works, [71] and [72], have significant differences in terms of details (and goals beyond the computation of a single perfect fidelity amplitude), the core object treated by each is ultimately this planar tensor network, which is small enough that we can report optimal contraction widths and costs for. We call this optimizer -which flattens the circuit tensor network into the plane before finding the optimal W or C from that point onwards -qFlex/PEPs. With regards to a swapped decomposition, in order to maintain the spatial locality of the tensors this method can only benefit in the first and last layer of gates [67].\n\n\nResults\n\nIn Fig. 6(a)-(f) we report the mean contraction width, W , and cost, C, for each geometry and optimizer as a function of circuit depth, d, or cycles, m. For these large tensor networks we allow each optimizer one hour to search for a contraction path. While this is not an insignificant amount of time, we note that many optimizers converge to their best contraction paths much quicker, and moreover that contraction paths can be re-used if only changing tensor values from run to run. We show the variance in W and C across 10 instances, despite the fact the tensor network structure is the same, since all the optimizers aside from qFlex/PEPs are naturally stochastic.\n\nWe first note that across the board, the KaHyPar optimizer again performs best, with little variance from instance to instance. Performance of the remaining optimizers is more difficult to rank. The tensor network simplification scheme employed here results in significant improvement over previous results even when using QuickBB to perform the actual path optimization, particularly when |E| or |\u1ebc| is moderate. As the tensor networks get larger QuickBB is consis-tently outperformed by the other line-graph based optimizer FlowCutter.\n\nFor the Rectangular-7x7 and Bristlecone-70 circuits, which both use a CZ entangling gate, the diagonal reduction of tensors greatly simplifies the tensor networks. The methods that make use of this, aside from BGreedy, perform best here, with similar values of C, though interestingly KaHyPar is able to target a lower contraction width. GN and qFlex/PEPs do not use the diagonal simplification and here show similar performance.\n\nIn the case of Sycamore-53 the entangling fSim [74] gates are close to but not exactly ISWAP gates. As a result there are no diagonal reductions to be made and the simplified tensor network has no hyper-edges. Whilst FlowCutter, GN and KaHyPar find similar contraction widths, KaHyPar achieves a much lower contraction cost. This is likely due to its ability to search imbalanced partition contraction trees such as 'Schr\u00f6dinger style' (full wavefunction) evolution. Note that for the entangling gates an approximate swapped \u03c7=2 decomposition can be made, resulting in a drop in fidelity based on how many of the m layers of gates this is applied to. The qFlex/PEPs method results in [67] make use of this in the first and last layer of gates for a drop in total fidelity of \u223c5% that reduces W by \u223c4 and C by \u223c2 4 . We only show the exact results here so as to compare all methods on exactly the same footing. If the swapped decomposition is used for all layers (Sycamore-53*) then at m=20 the corresponding drop in total fidelity is likely to be at least \u223c50%. For the best performing optimizers in Fig. 6(c) and (f) we find little gain in doing so. We also emphasize that for the highest values of m, the estimates for classical computation cost in [67] are not based on the qFlex [71] simulator and moreover involve the unbiased sampling of many bit-strings at low fidelity.\n\n\nD. Practical Performance\n\nIn this final results section, we examine how the high quality contraction paths obtained so far transform into practical performance. Whilst the contraction cost estimates the time complexity of contracting a tensor network, this is irrelevant if the contraction width is too large to fit the computation into available memory. One method to bring down the space requirement of any contraction is slicing, also known as 'variable projection' [41] or 'bond cutting' [71].\n\n\nSlicing\n\nA tensor network can always be thought of as |E| nested summations of the product of the entries of the |V | tensors. Such an expression is associative and a contraction tree is equivalent to a re-arrangement of the summations and the insertion of a sequence of |V | \u2212 1 parentheses defining intermediate tensors to form. However, we can also choose to perform any subset of the summations last, moving them back to the exterior of the expression. We'll call the corresponding set of indices s sliced . For each fixed value of this exterior sum, the remaining expression corresponds to a tensor network of |V | nodes, but with all the edges in s sliced removed. In each network, the fixed value of indices corresponds to taking slices of any tensors with those indices. The total number of such sliced tensor networks is then d sliced = e\u2208s sliced w(e), each of which can be contracted independently, optionally using the same tree as the original network.\n\nThe advantage of doing this is twofold: (i) the contraction width and thus required memory of each sliced tensor network, W s , is generally reduced; and (ii) the sum over independent contractions is 'embarrassingly parallel' and so can be easily distributed. The disadvantage is that the contraction cost of each sliced tensor network generally increases beyond C/d sliced (due to redundantly repeated contractions) meaning the total sliced cost, C s , rises. Choosing which indices to slice is thus a balancing act between reducing the memory footprint without increasing the cost too much.\n\nWe employ a method similar to [41] to choose which indices to slice. Given a contraction tree B, it is simple to compute the new width and cost with any index removed using Eqs. (3) and (6). We greedily choose single indices to slice based on this, repeating the process until the sliced contraction tree width reaches the desired target. Repeating this process a few times with a slight randomization to the cost score allows us to sample a moderate number of combinations for s sliced and choose whichever achieves target W s whilst minimizing C s . Crucially, we can slice trial contraction trees and report C s within the Bayesian optimization loop, thus explicitly targeting paths which slice well.\n\nIn Fig. 7 we demonstrate the effect of different levels of slicing for the deepest Sycamore-53 circuit (m=20), with either no fSim gate decomposition, or the approximate \u03c7=2 gate decomposition for all layers (Sycamore-53*), which now shows an appreciable benefit. We allow the optimizer an hour to find paths with the lowest C s for a given target W s . If a path targeting a neighbouring W s achieves a lower C s , this is shown instead, and the points connected by a line. One can see that the required memory can be brought down by a factor of \u223c 16, 000 whilst keeping the FLOPs increase < 10. Across this same range performing the swapped decomposition yields no benefit. Beyond that, the increase to C s becomes significant, with the swapped decomposition becoming advantageous for heavily sliced contractions. For reference, W S \u223c 27 is required to fit a contraction on a standard consumer GPU. Interestingly, the paths which achieve lowest overall C s when targeting a large W s (dark purple), are not good candidates for heavy slicing (yellow). Instead, the Bayesian optimizer targets a variety of different paths specific to each level of slicing. Original Target Ws   FIG. 7. Sliced contraction width vs. cost for computing a single amplitude of an m = 20 cycle random Sycamore circuit using the KaHyPar optimizer. The two sets of markers correspond to how the fSim gate is applied: either the tensor is not decomposed and left rank-4, or the two qubits are first swapped and then a decomposition is performed with only the two dominant singular values kept -Sycamore-53 and Sycamore-53* respectively. Points joined by a line are sliced from the same original contraction tree, with colour given by what contraction width was being targeted by the Bayesian optimization. Each optimizer targeting a particular Ws was allowed 1 hour to search.\n\n\nBenchmarks\n\nTo demonstrate that the contraction paths and calculated costs translate well into real world performance, we here report actual times for contracting a single perfect fidelity amplitude on a single GPU for various circuits. All tensor network manipulations and contractions were performed using quimb [60]. For each run, we allow the path optimizer to search for 1 hour in the space of paths sliced to W s = 27. We then compile the resulting contraction using JAX [75] and run it on a NVIDIA Quadro P2000 which has 5GB of memory and theoretical single precision performance of 3.031 teraFLOPs. Both the path finding and compilation time are one-off costs per circuit and the times we report are only for performing the contraction. All the examples shown require some degree of slicing to fit onto the GPU, so we also show the sliced cost and how this compares to the best non-sliced cost. This slicing overhead is the increase in cost induced by squeezing the contraction into 5GB of memory. Finally we compare the achieved FLOP rate to theoretical maximum for the GPU.\n\nThe results are shown in Tab. I. For this specific task, and to the best of our knowledge, these generally represent stateof-the-art performance. For the rectangular and Bristlecone geometries, there is little inefficiency induced by slicing the contractions down to fit into memory. On the other hand, the performance extracted from the GPU via JAX is not great, likely due to the fact that the corresponding tensor networks have hyper-edges resulting in pairwise contractions that do not dispatch to matrix-matrix multiplication. For Sycamore-53, there are no hyper-edges and the realised FLOP rate is close to the theoretical limit of the GPU. On the other hand, there is much greater inefficiency induced by slicing the contractions down to W s = 27. For m = 20 this overhead is very significant, representing the far right point of Fig. 7. From that same figure it can be seen that performing the swapped decomposition alleviates the slicing overhead, and indeed we find this to be the case with the Sycamore-53* benchmarks, though the introduction of hyperedges again lowers the FLOPs efficiency. From Fig. 7 it can also be seen that there are steady gains to be made by allowing a higher W s , either through simply more memory or moving to a distributed computing setting. In the latter case, sliced indices might instead be suggestive of how to partition the initial tensors.\n\n\nV. SUMMARY AND CONCLUSION\n\nWe have introduced heuristic algorithms for the contraction of arbitrary tensor networks that show very good performance across a range of benchmarks. Through a stochastic hyperoptimization over the parameters of each of the algorithms, we obtain near-optimal contraction paths that yield exponential speedups over the state-of-the-art contraction algorithms. We find that the contractor based on hypergraph partitioning, in particular, often outperforms all other methods. We demonstrated how this translates to superior performance in the simulation of computing amplitudes on Google quantum chips. New algorithms can be straightforwardly added to the Bayesian tuning approach.\n\nDue to the generality of tensor networks, our results can help advance applications in a variety of fields. The algorithms introduced here can be directly employed in the calibration of ever larger quantum chips, with techniques such as cross-entropy benchmarking. They can also be used to accelerate classical computational tasks related to machine learning and artificial intelligence in general, such as inference and model counting. Finally, incorporating controllable schemes for approximate contractions into the methodology introduced here is a promising domain of future research.  TABLE I. Benchmark times and other information for computing a single amplitude of random circuits, in single precision. The time shown is for the contraction only, using a NVIDIA Quadro P2000 for which a target sliced contraction width Ws = 27 suffices for its 5GB of memory.\n\nTimes with an asterisk are estimates extrapolated from computing the first 100 of d sliced contractions. The sliced cost, Cs, is always higher than the best cost without slicing, C best (shown in Figs. 6(d), (e) and (f)). As such, the 'slicing overhead' indicates the inefficiency induced by squeezing the contraction into 5GB. The FLOPs efficiency compares the theoretical single precision performance of the Quadro P2000, 3.031 teraFLOPs, with (8Cs/time).\n\nFIG. 2 .\n2For the graph shown in (a), two possible contraction trees (b) and (c), showing intermediate tensors and congestions.\n\nFIG. 3 .\n3(a) Segment of tensor network with six tensors, one of which (black filled circle) is a COPY tensor. (b) COPY tensor replaced by a hyperedge. Recursive hypergraph bipartitioning yields the separator hierarchy drawn as dashed lines, with thicker lines for higher level in the hierarchy. (c) After a separator hierarchy is found, the hyperedge is replaced by a connected subgraph of COPY tensors whose edges intersect each separator at most once. The results of the contraction of networks (a) and (c) are identical.\n\nFIG. 4 .\n4Mean contraction width (top row) and cost (bottom row) of random regular graphs of degree k = 3, 4, 5 (left, centre and right columns respectively) as a function of the number of vertices (tensors) in the network, |V |, for various contraction path optimizers each allowed 5 minutes to search. The shaded regions show standard deviations across 100 random graph instances.\n\nFIG. 5 .\n5Mean contraction width W (top) and cost C (bottom) for randomly generated planar graphs as a function of number of vertices |V |, for various path optimizers each allowed 5 minute to search. The shaded regions show standard deviations across random graph instances. The 35,162 graph instances studied are approximately uniformly distributed over the |V | bins shown.\n\n\noao b iai b , such that i a (i b ) is the input index and o a (o b ) the output index of qubit a (b). Whilst g oao b iai b is unitary with respect to i a i b \u2192 o a o b , a low rank decomposition can potentially be found by grouping the indices {i a , o a }, {i b , o b } or {i a , o b }, {i b , o a } and performing an SVD on the resulting matrix.\n\nFIG. 6 .\n6Mean contraction width (upper row) and cost (lower row) as a function of gate depth (or number of 'cycles') for perfectly simulating a single output amplitude of random quantum circuits defined on three different qubit geometries -Rectangular-7x7 (left column), Bristlecone-70 (central column) and Sycamore-53 (right column) -for different contraction path optimizers each allowed an hour to search. The shaded regions show the standard deviation across 10 random circuit instances, non-zero despite the network structure of each being identical, since all optimizers but the qFlex/PEPs approach are naturally stochastic.\n\n\nCs/C best ) d sliced FLOPs Efficiency Bristlecone-70 (1+32+1) 4.18 \u00d7 10 \u22121 4.91 \u00d7 10 10 7\u00d77 (1+32+1) 3.38 \u00d7 10 \u22121 2.84 \u00d7 10 10Circuit \ntime (sec) \nCs \nSlicing Overhead (1.24\u00d7 \n2 \n31.0% \nBristlecone-70 (1+36+1) \n1.74 \u00d7 10 1 \n2.06 \u00d7 10 12 \n1.05\u00d7 \n2 5 \n31.1% \nBristlecone-70 (1+40+1) \n2.77 \u00d7 10 2 \n3.14 \u00d7 10 13 \n1.65\u00d7 \n2 8 \n29.9% \nRectangular-1.49\u00d7 \n2 \n22.2% \nRectangular-7\u00d77 (1+40+1) \n4.80 \u00d7 10 1 \n8.12 \u00d7 10 12 \n1.35\u00d7 \n2 7 \n44.6% \nRectangular-7\u00d77 (1+48+1) \n *  9.40 \u00d7 10 4 1.20 \u00d7 10 16 \n1.33\u00d7 \n2 18 \n33.7% \nSycamore-53 (m=12) \n5.74 \u00d7 10 2 \n1.80 \u00d7 10 14 \n7.51\u00d7 \n2 9 \n82.6% \nSycamore-53 (m=14) \n *  4.98 \u00d7 10 3 1.37 \u00d7 10 15 \n13.6\u00d7 \n2 12 \n72.8% \nSycamore-53 (m=16) \n *  8.01 \u00d7 10 6 2.41 \u00d7 10 18 \n13.0\u00d7 \n2 22 \n79.4% \nSycamore-53 (m=18) \n *  8.18 \u00d7 10 7 2.64 \u00d7 10 19 \n42.6\u00d7 \n2 24 \n85.2% \nSycamore-53 (m=20) \n *  9.74 \u00d7 10 10 3.10 \u00d7 10 22 \n6410\u00d7 \n2 34 \n84.1% \nSycamore-53* (m=12) \n7.87 \u00d7 10 2 \n2.42 \u00d7 10 13 \n1.67\u00d7 \n2 9 \n8.16% \nSycamore-53* (m=14) \n *  2.92 \u00d7 10 3 2.53 \u00d7 10 14 \n2.63\u00d7 \n2 12 \n22.9% \nSycamore-53* (m=16) \n *  3.01 \u00d7 10 6 3.43 \u00d7 10 17 \n7.43\u00d7 \n2 22 \n30.1% \nSycamore-53* (m=18) \n *  2.66 \u00d7 10 7 3.62 \u00d7 10 18 \n11.3\u00d7 \n2 24 \n36.0% \nSycamore-53* (m=20) \n *  7.17 \u00d7 10 9 1.50 \u00d7 10 21 \n431\u00d7 \n2 32 \n55.3% \n\n\nACKNOWLEDGMENTSWe thank S. Boixo and B. Villalonga for useful feedback on the manuscript. JG acknowledges the Samsung Advanced Institute of Technology Global Research Partnership.\n. F Verstraete, V Murg, J Cirac, 10.1080/14789940801912366Adv. Phys. 57143F. Verstraete, V. Murg, and J. Cirac, Adv. Phys. 57, 143 (2008).\n\n. R Or\u00fas, 10.1016/j.aop.2014.06.013Ann. Phys. (N. Y). 349117R. Or\u00fas, Ann. Phys. (N. Y). 349, 117 (2014).\n\n. J C Bridgeman, C T Chubb, 10.1088/1751-8121/aa6dc3J. Phys. A Math. Theor. 50223001J. C. Bridgeman and C. T. Chubb, J. Phys. A Math. Theor. 50, 223001 (2017).\n\n. J D Biamonte, V Bergholm, arXiv:1708.00006arXiv:1708.00006J. D. Biamonte and V. Bergholm, arXiv:1708.00006 (2017), arXiv:1708.00006.\n\n. M Levin, C P Nave, 10.1103/PhysRevLett.99.120601Phys. Rev. Lett. 99120601M. Levin and C. P. Nave, Phys. Rev. Lett. 99, 120601 (2007).\n\n. G Evenbly, G Vidal, 10.1103/PhysRevLett.115.180405Phys. Rev. Lett. 115180405G. Evenbly and G. Vidal, Phys. Rev. Lett. 115, 180405 (2015).\n\n. G Evenbly, 10.1103/PhysRevB.95.045117Phys. Rev. B. 9545117G. Evenbly, Phys. Rev. B 95, 045117 (2017).\n\n. A Cichocki, N Lee, I Oseledets, A.-H Phan, Q Zhao, D P Mandic, 10.1561/2200000059Found. Trends Mach. Learn. 9249A. Cichocki, N. Lee, I. Oseledets, A.-H. Phan, Q. Zhao, and D. P. Mandic, Found. Trends Mach. Learn. 9, 249 (2016).\n\n. A Cichocki, N Lee, I Oseledets, A.-H Phan, Q Zhao, M Sugiyama, D P Mandic, 10.1561/2200000067Found. Trends Mach. Learn. 9431A. Cichocki, N. Lee, I. Oseledets, A.-H. Phan, Q. Zhao, M. Sugiyama, and D. P. Mandic, Found. Trends Mach. Learn. 9, 431 (2017).\n\n. L Due\u00f1as-Osorio, M Y Vardi, J Rojo, 10.1016/j.strusafe.2018.05.004Struct. Saf. 75110L. Due\u00f1as-Osorio, M. Y. Vardi, and J. Rojo, Struct. Saf. 75, 110 (2018).\n\n. I L Markov, Y Shi, Siam J Comput, 10.1137/05064475638963I. L. Markov and Y. Shi, SIAM J. Comput. 38, 963 (2008).\n\nE Stoudenmire, D J Schwab, Advances in Neural Information Processing Systems. D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. GarnettCurran Associates, Inc29E. Stoudenmire and D. J. Schwab, in Advances in Neural Information Processing Systems 29, edited by D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (Curran Associates, Inc., 2016) pp. 4799-4807.\n\n. E M Stoudenmire, 10.1088/2058-9565/aaba1aQuantum Sci. Technol. 334003E. M. Stoudenmire, Quantum Sci. Technol. 3, 034003 (2018).\n\n. C Roberts, A Milsted, M Ganahl, A Zalcman, B Fontaine, Y Zou, J Hidary, G Vidal, S Leichenauer, arXiv:1905.01330arXiv:1905.01330C. Roberts, A. Milsted, M. Ganahl, A. Zalcman, B. Fontaine, Y. Zou, J. Hidary, G. Vidal, and S. Leichenauer, arXiv:1905.01330 (2019), arXiv:1905.01330.\n\n. H C Jiang, Z Y Weng, T Xiang, 10.1103/PhysRevLett.101.090603Phys. Rev. Lett. 10190603H. C. Jiang, Z. Y. Weng, and T. Xiang, Phys. Rev. Lett. 101, 090603 (2008).\n\n. Z.-C Gu, X.-G Wen, 10.1103/PhysRevB.80.155131Phys. Rev. B. 80155131Z.-C. Gu and X.-G. Wen, Phys. Rev. B 80, 155131 (2009).\n\n. Z Y Xie, J Chen, M P Qin, J W Zhu, L P Yang, T Xiang, 10.1103/PhysRevB.86.045139Phys. Rev. B. 8645139Z. Y. Xie, J. Chen, M. P. Qin, J. W. Zhu, L. P. Yang, and T. Xi- ang, Phys. Rev. B 86, 045139 (2012).\n\n. H.-H Zhao, Z Y Xie, T Xiang, M Imada, 10.1103/PhysRevB.93.125115Phys. Rev. B. 93125115H.-H. Zhao, Z. Y. Xie, T. Xiang, and M. Imada, Phys. Rev. B 93, 125115 (2016).\n\n. M Bal, M Mari\u00ebn, J Haegeman, F Verstraete, 10.1103/PhysRevLett.118.250602Phys. Rev. Lett. 118250602M. Bal, M. Mari\u00ebn, J. Haegeman, and F. Verstraete, Phys. Rev. Lett. 118, 250602 (2017).\n\n. S Yang, Z.-C Gu, X.-G Wen, 10.1103/PhysRevLett.118.110504Phys. Rev. Lett. 118110504S. Yang, Z.-C. Gu, and X.-G. Wen, Phys. Rev. Lett. 118, 110504 (2017).\n\n. Y.-Y Shi, L.-M Duan, G Vidal, 10.1103/PhysRevA.74.022320Phys. Rev. A. 7422320Y.-Y. Shi, L.-M. Duan, and G. Vidal, Phys. Rev. A 74, 022320 (2006).\n\n. L G Valiant, Siam J Comput, 10.1137/070682575371565L. G. Valiant, SIAM J. Comput. 37, 1565 (2008).\n\n. S Bravyi, arXiv:0801.2989Contemp. Math. 482S. Bravyi, Contemp. Math. 482, 179 (2008), arXiv:0801.2989.\n\n. M Aguado, G Vidal, 10.1103/PhysRevLett.100.070404Phys. Rev. Lett. 10070404M. Aguado and G. Vidal, Phys. Rev. Lett. 100, 070404 (2008).\n\n. R K\u00f6nig, B W Reichardt, G Vidal, 10.1103/PhysRevB.79.195123Phys. Rev. B. 79195123R. K\u00f6nig, B. W. Reichardt, and G. Vidal, Phys. Rev. B 79, 195123 (2009).\n\n. S J Denny, J D Biamonte, D Jaksch, S R Clark, 10.1088/1751-8113/45/1/015309J. Phys. A Math. Theor. 4515309S. J. Denny, J. D. Biamonte, D. Jaksch, and S. R. Clark, J. Phys. A Math. Theor. 45, 015309 (2012).\n\n. L G Valiant, 10.1016/0304-3975(79)90044-6Theor. Comput. Sci. 8189L. G. Valiant, Theor. Comput. Sci. 8, 189 (1979).\n\n. C Damm, M Holzer, P Mckenzie, 10.1007/s00037-000-0170-4Comput. Complex. 1154C. Damm, M. Holzer, and P. McKenzie, Comput. Complex. 11, 54 (2002).\n\n. B M Terhal, D P Divincenzo, arXiv:0205133Quant. Inf. Comp. 4quant-phB. M. Terhal and D. P. DiVincenzo, Quant. Inf. Comp. 4, 134 (2004), arXiv:0205133 [quant-ph].\n\n. M J Bremner, R Jozsa, D J Shepherd, 10.1098/rspa.2010.0301Proc. R. Soc. A Math. Phys. Eng. Sci. 467459M. J. Bremner, R. Jozsa, and D. J. Shepherd, Proc. R. Soc. A Math. Phys. Eng. Sci. 467, 459 (2010).\n\n. S Aaronson, A Arkhipov, Theory Comput, 10.4086/toc.2013.v009a0049143S. Aaronson and A. Arkhipov, Theory Comput. 9, 143 (2013).\n\n. R Jozsa, M V Nest, arXiv:1305.6190arXiv:1305.6190R. Jozsa and M. V. den Nest, arXiv:1305.6190 (2013), arXiv:1305.6190.\n\n. T Morimae, K Fujii, J F Fitzsimons, 10.1103/PhysRevLett.112.130502Phys. Rev. Lett. 112130502T. Morimae, K. Fujii, and J. F. Fitzsimons, Phys. Rev. Lett. 112, 130502 (2014).\n\n. J Carolan, C Harrold, C Sparrow, E Martin-Lopez, N J Russell, J W Silverstone, P J Shadbolt, N Matsuda, M Oguma, M Itoh, G D Marshall, M G Thompson, J C F Matthews, T Hashimoto, J L O&apos;brien, A Laing, 10.1126/science.aab3642Science. 349711J. Carolan, C. Harrold, C. Sparrow, E. Martin-Lopez, N. J. Rus- sell, J. W. Silverstone, P. J. Shadbolt, N. Matsuda, M. Oguma, M. Itoh, G. D. Marshall, M. G. Thompson, J. C. F. Matthews, T. Hashimoto, J. L. O'Brien, and A. Laing, Science 349, 711 (2015).\n\n. E Farhi, A W Harrow, arXiv:1602.07674arXiv:1602.07674E. Farhi and A. W. Harrow, arXiv:1602.07674 (2016), arXiv:1602.07674.\n\n. S Aaronson, A Bouland, G Kuperberg, S Mehraban, arXiv:1610.06646arXiv:1610.06646S. Aaronson, A. Bouland, G. Kuperberg, and S. Mehraban, arXiv:1610.06646 (2016), arXiv:1610.06646.\n\n. S Aaronson, L Chen, arXiv:1612.05903arXiv:1612.05903S. Aaronson and L. Chen, arXiv:1612.05903 (2016), arXiv:1612.05903.\n\n. S Boixo, S V Isakov, V N Smelyanskiy, R Babbush, N Ding, Z Jiang, M J Bremner, J M Martinis, H Neven, 10.1038/s41567-018-0124-xNat. Phys. 14595S. Boixo, S. V. Isakov, V. N. Smelyanskiy, R. Babbush, N. Ding, Z. Jiang, M. J. Bremner, J. M. Martinis, and H. Neven, Nat. Phys. 14, 595 (2018).\n\n. A Bouland, B Fefferman, C Nirkhe, U Vazirani, 10.1038/s41567-018-0318-2Nat. Phys. 15159A. Bouland, B. Fefferman, C. Nirkhe, and U. Vazirani, Nat. Phys. 15, 159 (2019).\n\n. E S Fried, N P D Sawaya, Y Cao, I D Kivlichan, J Romero, A Aspuru-Guzik, 10.1371/journal.pone.0208510PLoS One. 13208510E. S. Fried, N. P. D. Sawaya, Y. Cao, I. D. Kivlichan, J. Romero, and A. Aspuru-Guzik, PLoS One 13, e0208510 (2018).\n\n. J Chen, F Zhang, C Huang, M Newman, Y Shi, arXiv:1805.01450arXiv:1805.01450J. Chen, F. Zhang, C. Huang, M. Newman, and Y. Shi, arXiv:1805.01450 (2018), arXiv:1805.01450.\n\n. E F Dumitrescu, A L Fisher, T D Goodrich, T S Humble, B D Sullivan, A L Wright, 10.1371/journal.pone.0207827PLoS One. 13207827E. F. Dumitrescu, A. L. Fisher, T. D. Goodrich, T. S. Humble, B. D. Sullivan, and A. L. Wright, PLoS One 13, e0207827 (2018).\n\n. S Kourtis, C Chamon, E R Mucciolo, A E Ruckenstein, 10.21468/SciPostPhys.7.5.060SciPost Phys. 760S. Kourtis, C. Chamon, E. R. Mucciolo, and A. E. Ruckenstein, SciPost Phys. 7, 60 (2019).\n\n. J M Dudek, L Due\u00f1as-Osorio, M Y Vardi, arXiv:1908.04381arXiv:1908.04381J. M. Dudek, L. Due\u00f1as-Osorio, and M. Y. Vardi, arXiv:1908.04381 (2019), arXiv:1908.04381.\n\n. D Bienstock, 10.1016/0095-8956(90)90066-9Journal of Combinatorial Theory, Series B. 49103D. Bienstock, Journal of Combinatorial Theory, Series B 49, 103 (1990).\n\nB O&apos;gorman, 10.4230/LIPIcs.TQC.2019.1014th Conference on the Theory of Quantum Computation, Communication and Cryptography. W. van Dam and L. Mancinska (Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik135Leibniz International Proceedings in Informatics (LIPIcs)B. O'Gorman, in 14th Conference on the Theory of Quantum Computation, Communication and Cryptography (TQC 2019), Leibniz International Proceedings in Informatics (LIPIcs), Vol. 135, edited by W. van Dam and L. Mancinska (Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, Dagstuhl, Ger- many, 2019) pp. 10:1-10:19.\n\n. R N C Pfeifer, J Haegeman, F Verstraete, 10.1103/PhysRevE.90.033315Phys. Rev. E. 9033315R. N. C. Pfeifer, J. Haegeman, and F. Verstraete, Phys. Rev. E 90, 033315 (2014).\n\n. D G A Smith, J Gray, 10.21105/joss.00753J. Open Source Softw. 3753D. G. A. Smith and J. Gray, J. Open Source Softw. 3, 753 (2018).\n\nV Gogate, R Dechter, arXiv:1207.4109Proceedings of the 20th conference on Uncertainty in artificial intelligence. the 20th conference on Uncertainty in artificial intelligenceAUAI PressV. Gogate and R. Dechter, in Proceedings of the 20th conference on Uncertainty in artificial intelligence (AUAI Press, 2004) pp. 201-208, arXiv:1207.4109.\n\n. M Hamann, B Strasser, 10.1145/3173045J. Exp. Algorithmics. 232M. Hamann and B. Strasser, J. Exp. Algorithmics 23, 1.2 (2018).\n\n. B Strasser, arXiv:1709.08949arXiv:1709.08949B. Strasser, arXiv:1709.08949 (2017), arXiv:1709.08949.\n\n. M A Porter, J.-P Onnela, P J Mucha, arXiv:0902.3788Not. Am. Math. Soc. 561082M. A. Porter, J.-P. Onnela, and P. J. Mucha, Not. Am. Math. Soc. 56, 1082 (2009), arXiv:0902.3788.\n\n. S Fortunato, 10.1016/j.physrep.2009.11.002Phys. Rep. 48675S. Fortunato, Phys. Rep. 486, 75 (2010).\n\nM Girvan, M E J Newman, 10.1073/pnas.122653799Proc. Natl. Acad. Sci. Natl. Acad. Sci997821M. Girvan and M. E. J. Newman, Proc. Natl. Acad. Sci. 99, 7821 (2002).\n\n. S Schlag, V Henne, T Heuer, H Meyerhenke, P Sanders, C Schulz, 10.1137/1.9781611974317.5Proc. Eighteenth Work. Algorithm Eng. Exp. (Society for Industrial and Applied Mathematics. S. Schlag, V. Henne, T. Heuer, H. Meyerhenke, P. Sanders, and C. Schulz, in 2016 Proc. Eighteenth Work. Algorithm Eng. Exp. (Society for Industrial and Applied Mathematics, Philadelphia, PA, 2016) pp. 53-67.\n\nY Akhremtsev, T Heuer, P Sanders, S Schlag, 10.1137/1.9781611974768.32017 Proc. Ninteenth Work. Algorithm Eng. Exp. (Society for Industrial and Applied Mathematics. Philadelphia, PAY. Akhremtsev, T. Heuer, P. Sanders, and S. Schlag, in 2017 Proc. Ninteenth Work. Algorithm Eng. Exp. (Society for Indus- trial and Applied Mathematics, Philadelphia, PA, 2017) pp. 28- 42.\n\n. B Shahriari, K Swersky, Z Wang, R P Adams, N De Freitas, 10.1109/JPROC.2015.2494218Proceedings of the IEEE. 104148B. Shahriari, K. Swersky, Z. Wang, R. P. Adams, and N. de Freitas, Proceedings of the IEEE 104, 148 (2016).\n\nBayesian Tuning and Bandits: An Extensible, Open Source Library for AutoML. L Gustafson, Cambridge, MAMassachusetts Institute of TechnologyL. Gustafson, Bayesian Tuning and Bandits: An Extensible, Open Source Library for AutoML, M. eng thesis, Massachusetts Institute of Technology, Cambridge, MA (2018).\n\nC K Williams, C E Rasmussen, Gaussian processes for machine learning. Cambridge, MAMIT press2C. K. Williams and C. E. Rasmussen, Gaussian processes for machine learning, Vol. 2 (MIT press Cambridge, MA, 2006).\n\n. J Gray, Journal of Open Source Software. 3819J. Gray, Journal of Open Source Software 3, 819 (2018).\n\n. J Gray, Cotengra, J. Gray, \"cotengra,\" https://github.com/jcmgray/ cotengra (2020).\n\n. B Villalonga, D Lyakh, S Boixo, H Neven, T S Humble, R Biswas, E G Rieffel, A Ho, S Mandr\u00e0, arXiv:1905.00444arXiv:1905.00444B. Villalonga, D. Lyakh, S. Boixo, H. Neven, T. S. Hum- ble, R. Biswas, E. G. Rieffel, A. Ho, and S. Mandr\u00e0, arXiv:1905.00444 (2019), arXiv:1905.00444.\n\nF Viger, M Latapy, 10.1007/11533719_45COCOON'05 Proc. 11th Annu. Int. Conf. Comput. Comb. F. Viger and M. Latapy, in COCOON'05 Proc. 11th Annu. Int. Conf. Comput. Comb. (2005) pp. 440-449.\n\n. K Meichanetzidis, S Kourtis, 10.1103/PhysRevE.100.033303Phys. Rev. E. 10033303K. Meichanetzidis and S. Kourtis, Phys. Rev. E 100, 033303 (2019).\n\n. \u00c9 Fusy, Random Struct, 10.1002/rsa.20275Algorithms. 35464\u00c9. Fusy, Random Struct. Algorithms 35, 464 (2009).\n\n. J , arXiv:1203.5813arXiv:1203.5813J. Preskill, arXiv:1203.5813 (2012), arXiv:1203.5813.\n\n. F Arute, K Arya, R Babbush, D Bacon, J C Bardin, R Barends, R Biswas, S Boixo, F G S L Brandao, D A Buell, B Burkett, Y Chen, Z Chen, B Chiaro, R Collins, W Courtney, A Dunsworth, E Farhi, B Foxen, A Fowler, C Gidney, M Giustina, R Graff, K Guerin, S Habegger, M P Harrigan, M J Hartmann, A Ho, M Hoffmann, T Huang, T S Humble, S V Isakov, E Jeffrey, Z Jiang, D Kafri, K Kechedzhi, J Kelly, P V Klimov, S Knysh, A Korotkov, F Kostritsa, D Landhuis, M Lindmark, E Lucero, D Lyakh, S Mandr\u00e0, J R Mcclean, M Mcewen, A Megrant, X Mi, K Michielsen, M Mohseni, J Mutus, O Naaman, M Neeley, C Neill, M Y Niu, E Ostby, A Petukhov, J C Platt, C Quintana, E G Rieffel, P Roushan, N C Rubin, D Sank, K J Satzinger, V Smelyanskiy, K J Sung, M D Trevithick, A Vainsencher, B Villalonga, T White, Z J Yao, P Yeh, A Zalcman, H Neven, J M Martinis, 10.1038/s41586-019-1666-5Nature. 574505F. Arute, K. Arya, R. Babbush, D. Bacon, J. C. Bardin, R. Barends, R. Biswas, S. Boixo, F. G. S. L. Brandao, D. A. Buell, B. Burkett, Y. Chen, Z. Chen, B. Chiaro, R. Collins, W. Courtney, A. Dunsworth, E. Farhi, B. Foxen, A. Fowler, C. Gidney, M. Giustina, R. Graff, K. Guerin, S. Habegger, M. P. Harrigan, M. J. Hartmann, A. Ho, M. Hoffmann, T. Huang, T. S. Humble, S. V. Isakov, E. Jeffrey, Z. Jiang, D. Kafri, K. Kechedzhi, J. Kelly, P. V. Klimov, S. Knysh, A. Korotkov, F. Kostritsa, D. Landhuis, M. Lindmark, E. Lucero, D. Lyakh, S. Mandr\u00e0, J. R. McClean, M. McEwen, A. Megrant, X. Mi, K. Michielsen, M. Mohseni, J. Mutus, O. Naaman, M. Nee- ley, C. Neill, M. Y. Niu, E. Ostby, A. Petukhov, J. C. Platt, C. Quintana, E. G. Rieffel, P. Roushan, N. C. Rubin, D. Sank, K. J. Satzinger, V. Smelyanskiy, K. J. Sung, M. D. Trevithick, A. Vainsencher, B. Villalonga, T. White, Z. J. Yao, P. Yeh, A. Zalcman, H. Neven, and J. M. Martinis, Nature 574, 505 (2019).\n\n. E Pednault, J A Gunnels, G Nannicini, L Horesh, T Magerlein, E Solomonik, E W Draeger, E T Holland, R Wisnieff, arXiv:1710.05867arXiv:1710.05867E. Pednault, J. A. Gunnels, G. Nannicini, L. Horesh, T. Mager- lein, E. Solomonik, E. W. Draeger, E. T. Holland, and R. Wis- nieff, arXiv:1710.05867 (2017), arXiv:1710.05867.\n\n. S Boixo, S V Isakov, V N Smelyanskiy, H Neven, arXiv:1712.05384arXiv:1712.05384S. Boixo, S. V. Isakov, V. N. Smelyanskiy, and H. Neven, arXiv:1712.05384 (2017), arXiv:1712.05384.\n\n. F Zhang, C Huang, M Newman, J Cai, H Yu, Z Tian, B Yuan, H Xu, J Wu, X Gao, J Chen, M Szegedy, Y Shi, arXiv:1907.11217arXiv:1907.11217F. Zhang, C. Huang, M. Newman, J. Cai, H. Yu, Z. Tian, B. Yuan, H. Xu, J. Wu, X. Gao, J. Chen, M. Szegedy, and Y. Shi, arXiv:1907.11217 (2019), arXiv:1907.11217.\n\nB Villalonga, S Boixo, B Nelson, C Henze, E Rieffel, R Biswas, S Mandr\u00e0, 10.1038/s41534-019-0196-1npj Quantum Inf. 586B. Villalonga, S. Boixo, B. Nelson, C. Henze, E. Rieffel, R. Biswas, and S. Mandr\u00e0, npj Quantum Inf. 5, 86 (2019).\n\n. C Guo, Y Liu, M Xiong, S Xue, X Fu, A Huang, X Qiang, P Xu, J Liu, S Zheng, H.-L Huang, M Deng, D Poletti, W.-S Bao, J Wu, 10.1103/PhysRevLett.123.190501Phys. Rev. Lett. 123190501C. Guo, Y. Liu, M. Xiong, S. Xue, X. Fu, A. Huang, X. Qiang, P. Xu, J. Liu, S. Zheng, H.-L. Huang, M. Deng, D. Poletti, W.-S. Bao, and J. Wu, Phys. Rev. Lett. 123, 190501 (2019).\n\n. I D Kivlichan, J Mcclean, N Wiebe, C Gidney, A Aspuru-Guzik, G K L Chan, R Babbush, 10.1103/PhysRevLett.120.110501Phys. Rev. Lett. 120110501I. D. Kivlichan, J. McClean, N. Wiebe, C. Gidney, A. Aspuru- Guzik, G. K.-L. Chan, and R. Babbush, Phys. Rev. Lett. 120, 110501 (2018).\n\nJ Bradbury, R Frostig, P Hawkins, M J Johnson, C Leary, D Maclaurin, S Wanderman-Milne, JAX: composable transformations of Python+NumPy programs. J. Bradbury, R. Frostig, P. Hawkins, M. J. Johnson, C. Leary, D. Maclaurin, and S. Wanderman-Milne, \"JAX: composable transformations of Python+NumPy programs,\" (2018).\n", "annotations": {"author": "[{\"end\":132,\"start\":46},{\"end\":372,\"start\":133}]", "publisher": null, "author_last_name": "[{\"end\":58,\"start\":54},{\"end\":149,\"start\":142}]", "author_first_name": "[{\"end\":53,\"start\":46},{\"end\":141,\"start\":133}]", "author_affiliation": "[{\"end\":131,\"start\":60},{\"end\":222,\"start\":151},{\"end\":280,\"start\":224},{\"end\":371,\"start\":282}]", "title": "[{\"end\":43,\"start\":1},{\"end\":415,\"start\":373}]", "venue": null, "abstract": "[{\"end\":1699,\"start\":442}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1998,\"start\":1995},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2001,\"start\":1998},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2004,\"start\":2001},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2007,\"start\":2004},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2044,\"start\":2041},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2047,\"start\":2044},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2050,\"start\":2047},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2099,\"start\":2096},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2101,\"start\":2099},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2127,\"start\":2123},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2153,\"start\":2149},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2201,\"start\":2197},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2205,\"start\":2201},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2209,\"start\":2205},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3154,\"start\":3151},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3157,\"start\":3154},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":3160,\"start\":3157},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3164,\"start\":3160},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3168,\"start\":3164},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3172,\"start\":3168},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3176,\"start\":3172},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3180,\"start\":3176},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3184,\"start\":3180},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3351,\"start\":3347},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":3355,\"start\":3351},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":3359,\"start\":3355},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3363,\"start\":3359},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3367,\"start\":3363},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":3371,\"start\":3367},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":3500,\"start\":3496},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":3503,\"start\":3500},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3791,\"start\":3787},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":3795,\"start\":3791},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":3799,\"start\":3795},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":3803,\"start\":3799},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":3807,\"start\":3803},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":3811,\"start\":3807},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":3815,\"start\":3811},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":3819,\"start\":3815},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":3823,\"start\":3819},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":3827,\"start\":3823},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3831,\"start\":3827},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3835,\"start\":3831},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":4690,\"start\":4686},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":4694,\"start\":4690},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":4698,\"start\":4694},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5262,\"start\":5258},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":5289,\"start\":5285},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":5319,\"start\":5315},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":9331,\"start\":9327},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":9987,\"start\":9983},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":10463,\"start\":10459},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":10705,\"start\":10701},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":12583,\"start\":12579},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":12689,\"start\":12685},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":12877,\"start\":12873},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":13703,\"start\":13699},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":13911,\"start\":13907},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":13973,\"start\":13969},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":13976,\"start\":13973},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":14018,\"start\":14014},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":14623,\"start\":14619},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":14915,\"start\":14911},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":14918,\"start\":14915},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":15879,\"start\":15875},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":19056,\"start\":19052},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":22280,\"start\":22276},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":22283,\"start\":22280},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":22420,\"start\":22417},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":22993,\"start\":22989},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":22996,\"start\":22993},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":23874,\"start\":23870},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":24630,\"start\":24626},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":24703,\"start\":24699},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":25823,\"start\":25819},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":25838,\"start\":25834},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":25860,\"start\":25856},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":26653,\"start\":26649},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":26927,\"start\":26923},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":26930,\"start\":26927},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":27301,\"start\":27297},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":27959,\"start\":27955},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":28579,\"start\":28575},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":28673,\"start\":28669},{\"end\":28677,\"start\":28673},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":28709,\"start\":28705},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":29102,\"start\":29098},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":29992,\"start\":29988},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":29995,\"start\":29992},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":29998,\"start\":29995},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":30001,\"start\":29998},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":30113,\"start\":30109},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":30304,\"start\":30300},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":30308,\"start\":30304},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":30312,\"start\":30308},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":30316,\"start\":30312},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":30320,\"start\":30316},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":30324,\"start\":30320},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":30452,\"start\":30448},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":30455,\"start\":30452},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":30458,\"start\":30455},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":32806,\"start\":32802},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":33554,\"start\":33550},{\"end\":35451,\"start\":35445},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":36815,\"start\":36811},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":37238,\"start\":37234},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":38013,\"start\":38009},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":39034,\"start\":39030},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":39037,\"start\":39034},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":39384,\"start\":39380},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":39393,\"start\":39389},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":39996,\"start\":39992},{\"attributes\":{\"ref_id\":\"b72\"},\"end\":41702,\"start\":41698},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":42339,\"start\":42335},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":42906,\"start\":42902},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":42938,\"start\":42934},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":43504,\"start\":43500},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":43527,\"start\":43523},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":45126,\"start\":45122},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":47969,\"start\":47965},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":48132,\"start\":48128}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":52285,\"start\":52157},{\"attributes\":{\"id\":\"fig_1\"},\"end\":52811,\"start\":52286},{\"attributes\":{\"id\":\"fig_2\"},\"end\":53195,\"start\":52812},{\"attributes\":{\"id\":\"fig_3\"},\"end\":53573,\"start\":53196},{\"attributes\":{\"id\":\"fig_4\"},\"end\":53923,\"start\":53574},{\"attributes\":{\"id\":\"fig_5\"},\"end\":54556,\"start\":53924},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":55762,\"start\":54557}]", "paragraph": "[{\"end\":2818,\"start\":1718},{\"end\":4699,\"start\":2820},{\"end\":5869,\"start\":4701},{\"end\":6318,\"start\":5871},{\"end\":6762,\"start\":6344},{\"end\":7056,\"start\":6764},{\"end\":7395,\"start\":7175},{\"end\":8997,\"start\":7397},{\"end\":9425,\"start\":8999},{\"end\":9886,\"start\":9639},{\"end\":10005,\"start\":9910},{\"end\":10110,\"start\":10053},{\"end\":10633,\"start\":10160},{\"end\":10719,\"start\":10667},{\"end\":11255,\"start\":10753},{\"end\":11453,\"start\":11298},{\"end\":12189,\"start\":11500},{\"end\":12690,\"start\":12222},{\"end\":13604,\"start\":12747},{\"end\":14465,\"start\":13606},{\"end\":14919,\"start\":14517},{\"end\":15791,\"start\":14921},{\"end\":15964,\"start\":15793},{\"end\":16211,\"start\":15997},{\"end\":16273,\"start\":16213},{\"end\":17220,\"start\":16301},{\"end\":17861,\"start\":17268},{\"end\":17980,\"start\":17863},{\"end\":18445,\"start\":18043},{\"end\":18867,\"start\":18495},{\"end\":19558,\"start\":18910},{\"end\":20739,\"start\":19560},{\"end\":21827,\"start\":20741},{\"end\":22953,\"start\":21829},{\"end\":23581,\"start\":22955},{\"end\":23999,\"start\":23621},{\"end\":24840,\"start\":24001},{\"end\":25861,\"start\":24856},{\"end\":26789,\"start\":25863},{\"end\":27579,\"start\":26818},{\"end\":28361,\"start\":27581},{\"end\":29704,\"start\":28389},{\"end\":30459,\"start\":29735},{\"end\":30750,\"start\":30461},{\"end\":31501,\"start\":30796},{\"end\":32131,\"start\":31525},{\"end\":32561,\"start\":32181},{\"end\":33239,\"start\":32645},{\"end\":33575,\"start\":33274},{\"end\":34011,\"start\":33694},{\"end\":34559,\"start\":34013},{\"end\":34759,\"start\":34561},{\"end\":35278,\"start\":34797},{\"end\":36400,\"start\":35310},{\"end\":36702,\"start\":36438},{\"end\":37112,\"start\":36704},{\"end\":38219,\"start\":37114},{\"end\":38772,\"start\":38221},{\"end\":39997,\"start\":38819},{\"end\":40679,\"start\":40009},{\"end\":41218,\"start\":40681},{\"end\":41649,\"start\":41220},{\"end\":43028,\"start\":41651},{\"end\":43528,\"start\":43057},{\"end\":44496,\"start\":43540},{\"end\":45090,\"start\":44498},{\"end\":45795,\"start\":45092},{\"end\":47648,\"start\":45797},{\"end\":48734,\"start\":47663},{\"end\":50120,\"start\":48736},{\"end\":50829,\"start\":50150},{\"end\":51697,\"start\":50831},{\"end\":52156,\"start\":51699}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":7174,\"start\":7057},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9507,\"start\":9426},{\"attributes\":{\"id\":\"formula_2\"},\"end\":9638,\"start\":9507},{\"attributes\":{\"id\":\"formula_3\"},\"end\":9909,\"start\":9887},{\"attributes\":{\"id\":\"formula_4\"},\"end\":10052,\"start\":10006},{\"attributes\":{\"id\":\"formula_5\"},\"end\":10159,\"start\":10111},{\"attributes\":{\"id\":\"formula_6\"},\"end\":10666,\"start\":10634},{\"attributes\":{\"id\":\"formula_7\"},\"end\":10752,\"start\":10720},{\"attributes\":{\"id\":\"formula_8\"},\"end\":11297,\"start\":11256},{\"attributes\":{\"id\":\"formula_9\"},\"end\":12746,\"start\":12691},{\"attributes\":{\"id\":\"formula_10\"},\"end\":15996,\"start\":15965},{\"attributes\":{\"id\":\"formula_11\"},\"end\":16300,\"start\":16274},{\"attributes\":{\"id\":\"formula_12\"},\"end\":18042,\"start\":17981},{\"attributes\":{\"id\":\"formula_13\"},\"end\":18494,\"start\":18446},{\"attributes\":{\"id\":\"formula_14\"},\"end\":30795,\"start\":30751},{\"attributes\":{\"id\":\"formula_15\"},\"end\":32180,\"start\":32132},{\"attributes\":{\"id\":\"formula_16\"},\"end\":32644,\"start\":32562},{\"attributes\":{\"id\":\"formula_17\"},\"end\":33693,\"start\":33576},{\"attributes\":{\"id\":\"formula_18\"},\"end\":34796,\"start\":34760},{\"attributes\":{\"id\":\"formula_19\"},\"end\":35309,\"start\":35279}]", "table_ref": "[{\"end\":51428,\"start\":51421}]", "section_header": "[{\"end\":1716,\"start\":1701},{\"end\":6342,\"start\":6321},{\"end\":11498,\"start\":11456},{\"end\":12220,\"start\":12192},{\"end\":14515,\"start\":14468},{\"end\":17266,\"start\":17223},{\"end\":18908,\"start\":18870},{\"end\":23619,\"start\":23584},{\"end\":24854,\"start\":24843},{\"end\":26816,\"start\":26792},{\"end\":28387,\"start\":28364},{\"end\":29733,\"start\":29707},{\"attributes\":{\"n\":\"1.\"},\"end\":31523,\"start\":31504},{\"attributes\":{\"n\":\"2.\"},\"end\":33272,\"start\":33242},{\"attributes\":{\"n\":\"3.\"},\"end\":36436,\"start\":36403},{\"attributes\":{\"n\":\"4.\"},\"end\":38817,\"start\":38775},{\"attributes\":{\"n\":\"5.\"},\"end\":40007,\"start\":40000},{\"end\":43055,\"start\":43031},{\"attributes\":{\"n\":\"1.\"},\"end\":43538,\"start\":43531},{\"attributes\":{\"n\":\"2.\"},\"end\":47661,\"start\":47651},{\"end\":50148,\"start\":50123},{\"end\":52166,\"start\":52158},{\"end\":52295,\"start\":52287},{\"end\":52821,\"start\":52813},{\"end\":53205,\"start\":53197},{\"end\":53933,\"start\":53925}]", "table": "[{\"end\":55762,\"start\":54685}]", "figure_caption": "[{\"end\":52285,\"start\":52168},{\"end\":52811,\"start\":52297},{\"end\":53195,\"start\":52823},{\"end\":53573,\"start\":53207},{\"end\":53923,\"start\":53576},{\"end\":54556,\"start\":53935},{\"end\":54685,\"start\":54559}]", "figure_ref": "[{\"end\":4884,\"start\":4878},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10504,\"start\":10498},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":22813,\"start\":22807},{\"end\":27197,\"start\":27188},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":27620,\"start\":27606},{\"end\":28753,\"start\":28744},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":29228,\"start\":29222},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":40018,\"start\":40012},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":42757,\"start\":42751},{\"end\":45806,\"start\":45800},{\"end\":46981,\"start\":46970},{\"end\":49579,\"start\":49573},{\"end\":49850,\"start\":49844}]", "bib_author_first_name": "[{\"end\":55946,\"start\":55945},{\"end\":55960,\"start\":55959},{\"end\":55968,\"start\":55967},{\"end\":56086,\"start\":56085},{\"end\":56192,\"start\":56191},{\"end\":56194,\"start\":56193},{\"end\":56207,\"start\":56206},{\"end\":56209,\"start\":56208},{\"end\":56353,\"start\":56352},{\"end\":56355,\"start\":56354},{\"end\":56367,\"start\":56366},{\"end\":56489,\"start\":56488},{\"end\":56498,\"start\":56497},{\"end\":56500,\"start\":56499},{\"end\":56626,\"start\":56625},{\"end\":56637,\"start\":56636},{\"end\":56767,\"start\":56766},{\"end\":56872,\"start\":56871},{\"end\":56884,\"start\":56883},{\"end\":56891,\"start\":56890},{\"end\":56907,\"start\":56903},{\"end\":56915,\"start\":56914},{\"end\":56923,\"start\":56922},{\"end\":56925,\"start\":56924},{\"end\":57103,\"start\":57102},{\"end\":57115,\"start\":57114},{\"end\":57122,\"start\":57121},{\"end\":57138,\"start\":57134},{\"end\":57146,\"start\":57145},{\"end\":57154,\"start\":57153},{\"end\":57166,\"start\":57165},{\"end\":57168,\"start\":57167},{\"end\":57359,\"start\":57358},{\"end\":57376,\"start\":57375},{\"end\":57378,\"start\":57377},{\"end\":57387,\"start\":57386},{\"end\":57519,\"start\":57518},{\"end\":57521,\"start\":57520},{\"end\":57531,\"start\":57530},{\"end\":57541,\"start\":57537},{\"end\":57543,\"start\":57542},{\"end\":57633,\"start\":57632},{\"end\":57648,\"start\":57647},{\"end\":57650,\"start\":57649},{\"end\":58012,\"start\":58011},{\"end\":58014,\"start\":58013},{\"end\":58143,\"start\":58142},{\"end\":58154,\"start\":58153},{\"end\":58165,\"start\":58164},{\"end\":58175,\"start\":58174},{\"end\":58186,\"start\":58185},{\"end\":58198,\"start\":58197},{\"end\":58205,\"start\":58204},{\"end\":58215,\"start\":58214},{\"end\":58224,\"start\":58223},{\"end\":58426,\"start\":58425},{\"end\":58428,\"start\":58427},{\"end\":58437,\"start\":58436},{\"end\":58439,\"start\":58438},{\"end\":58447,\"start\":58446},{\"end\":58593,\"start\":58589},{\"end\":58602,\"start\":58598},{\"end\":58716,\"start\":58715},{\"end\":58718,\"start\":58717},{\"end\":58725,\"start\":58724},{\"end\":58733,\"start\":58732},{\"end\":58735,\"start\":58734},{\"end\":58742,\"start\":58741},{\"end\":58744,\"start\":58743},{\"end\":58751,\"start\":58750},{\"end\":58753,\"start\":58752},{\"end\":58761,\"start\":58760},{\"end\":58925,\"start\":58921},{\"end\":58933,\"start\":58932},{\"end\":58935,\"start\":58934},{\"end\":58942,\"start\":58941},{\"end\":58951,\"start\":58950},{\"end\":59090,\"start\":59089},{\"end\":59097,\"start\":59096},{\"end\":59107,\"start\":59106},{\"end\":59119,\"start\":59118},{\"end\":59280,\"start\":59279},{\"end\":59291,\"start\":59287},{\"end\":59300,\"start\":59296},{\"end\":59440,\"start\":59436},{\"end\":59450,\"start\":59446},{\"end\":59458,\"start\":59457},{\"end\":59586,\"start\":59585},{\"end\":59588,\"start\":59587},{\"end\":59602,\"start\":59598},{\"end\":59604,\"start\":59603},{\"end\":59688,\"start\":59687},{\"end\":59794,\"start\":59793},{\"end\":59804,\"start\":59803},{\"end\":59932,\"start\":59931},{\"end\":59941,\"start\":59940},{\"end\":59943,\"start\":59942},{\"end\":59956,\"start\":59955},{\"end\":60089,\"start\":60088},{\"end\":60091,\"start\":60090},{\"end\":60100,\"start\":60099},{\"end\":60102,\"start\":60101},{\"end\":60114,\"start\":60113},{\"end\":60124,\"start\":60123},{\"end\":60126,\"start\":60125},{\"end\":60298,\"start\":60297},{\"end\":60300,\"start\":60299},{\"end\":60416,\"start\":60415},{\"end\":60424,\"start\":60423},{\"end\":60434,\"start\":60433},{\"end\":60564,\"start\":60563},{\"end\":60566,\"start\":60565},{\"end\":60576,\"start\":60575},{\"end\":60578,\"start\":60577},{\"end\":60729,\"start\":60728},{\"end\":60731,\"start\":60730},{\"end\":60742,\"start\":60741},{\"end\":60751,\"start\":60750},{\"end\":60753,\"start\":60752},{\"end\":60934,\"start\":60933},{\"end\":60946,\"start\":60945},{\"end\":60963,\"start\":60957},{\"end\":61064,\"start\":61063},{\"end\":61073,\"start\":61072},{\"end\":61075,\"start\":61074},{\"end\":61186,\"start\":61185},{\"end\":61197,\"start\":61196},{\"end\":61206,\"start\":61205},{\"end\":61208,\"start\":61207},{\"end\":61362,\"start\":61361},{\"end\":61373,\"start\":61372},{\"end\":61384,\"start\":61383},{\"end\":61395,\"start\":61394},{\"end\":61411,\"start\":61410},{\"end\":61413,\"start\":61412},{\"end\":61424,\"start\":61423},{\"end\":61426,\"start\":61425},{\"end\":61441,\"start\":61440},{\"end\":61443,\"start\":61442},{\"end\":61455,\"start\":61454},{\"end\":61466,\"start\":61465},{\"end\":61475,\"start\":61474},{\"end\":61483,\"start\":61482},{\"end\":61485,\"start\":61484},{\"end\":61497,\"start\":61496},{\"end\":61499,\"start\":61498},{\"end\":61511,\"start\":61510},{\"end\":61515,\"start\":61512},{\"end\":61527,\"start\":61526},{\"end\":61540,\"start\":61539},{\"end\":61542,\"start\":61541},{\"end\":61558,\"start\":61557},{\"end\":61863,\"start\":61862},{\"end\":61872,\"start\":61871},{\"end\":61874,\"start\":61873},{\"end\":61989,\"start\":61988},{\"end\":62001,\"start\":62000},{\"end\":62012,\"start\":62011},{\"end\":62025,\"start\":62024},{\"end\":62171,\"start\":62170},{\"end\":62183,\"start\":62182},{\"end\":62294,\"start\":62293},{\"end\":62303,\"start\":62302},{\"end\":62305,\"start\":62304},{\"end\":62315,\"start\":62314},{\"end\":62317,\"start\":62316},{\"end\":62332,\"start\":62331},{\"end\":62343,\"start\":62342},{\"end\":62351,\"start\":62350},{\"end\":62360,\"start\":62359},{\"end\":62362,\"start\":62361},{\"end\":62373,\"start\":62372},{\"end\":62375,\"start\":62374},{\"end\":62387,\"start\":62386},{\"end\":62586,\"start\":62585},{\"end\":62597,\"start\":62596},{\"end\":62610,\"start\":62609},{\"end\":62620,\"start\":62619},{\"end\":62757,\"start\":62756},{\"end\":62759,\"start\":62758},{\"end\":62768,\"start\":62767},{\"end\":62772,\"start\":62769},{\"end\":62782,\"start\":62781},{\"end\":62789,\"start\":62788},{\"end\":62791,\"start\":62790},{\"end\":62804,\"start\":62803},{\"end\":62814,\"start\":62813},{\"end\":62996,\"start\":62995},{\"end\":63004,\"start\":63003},{\"end\":63013,\"start\":63012},{\"end\":63022,\"start\":63021},{\"end\":63032,\"start\":63031},{\"end\":63169,\"start\":63168},{\"end\":63171,\"start\":63170},{\"end\":63185,\"start\":63184},{\"end\":63187,\"start\":63186},{\"end\":63197,\"start\":63196},{\"end\":63199,\"start\":63198},{\"end\":63211,\"start\":63210},{\"end\":63213,\"start\":63212},{\"end\":63223,\"start\":63222},{\"end\":63225,\"start\":63224},{\"end\":63237,\"start\":63236},{\"end\":63239,\"start\":63238},{\"end\":63424,\"start\":63423},{\"end\":63435,\"start\":63434},{\"end\":63445,\"start\":63444},{\"end\":63447,\"start\":63446},{\"end\":63459,\"start\":63458},{\"end\":63461,\"start\":63460},{\"end\":63614,\"start\":63613},{\"end\":63616,\"start\":63615},{\"end\":63625,\"start\":63624},{\"end\":63642,\"start\":63641},{\"end\":63644,\"start\":63643},{\"end\":63779,\"start\":63778},{\"end\":63941,\"start\":63940},{\"end\":64524,\"start\":64523},{\"end\":64528,\"start\":64525},{\"end\":64539,\"start\":64538},{\"end\":64551,\"start\":64550},{\"end\":64697,\"start\":64696},{\"end\":64701,\"start\":64698},{\"end\":64710,\"start\":64709},{\"end\":64829,\"start\":64828},{\"end\":64839,\"start\":64838},{\"end\":65172,\"start\":65171},{\"end\":65182,\"start\":65181},{\"end\":65301,\"start\":65300},{\"end\":65404,\"start\":65403},{\"end\":65406,\"start\":65405},{\"end\":65419,\"start\":65415},{\"end\":65429,\"start\":65428},{\"end\":65431,\"start\":65430},{\"end\":65583,\"start\":65582},{\"end\":65683,\"start\":65682},{\"end\":65693,\"start\":65692},{\"end\":65697,\"start\":65694},{\"end\":65847,\"start\":65846},{\"end\":65857,\"start\":65856},{\"end\":65866,\"start\":65865},{\"end\":65875,\"start\":65874},{\"end\":65889,\"start\":65888},{\"end\":65900,\"start\":65899},{\"end\":66236,\"start\":66235},{\"end\":66250,\"start\":66249},{\"end\":66259,\"start\":66258},{\"end\":66270,\"start\":66269},{\"end\":66609,\"start\":66608},{\"end\":66622,\"start\":66621},{\"end\":66633,\"start\":66632},{\"end\":66641,\"start\":66640},{\"end\":66643,\"start\":66642},{\"end\":66652,\"start\":66651},{\"end\":66908,\"start\":66907},{\"end\":67138,\"start\":67137},{\"end\":67140,\"start\":67139},{\"end\":67152,\"start\":67151},{\"end\":67154,\"start\":67153},{\"end\":67351,\"start\":67350},{\"end\":67455,\"start\":67454},{\"end\":67542,\"start\":67541},{\"end\":67556,\"start\":67555},{\"end\":67565,\"start\":67564},{\"end\":67574,\"start\":67573},{\"end\":67583,\"start\":67582},{\"end\":67585,\"start\":67584},{\"end\":67595,\"start\":67594},{\"end\":67605,\"start\":67604},{\"end\":67607,\"start\":67606},{\"end\":67618,\"start\":67617},{\"end\":67624,\"start\":67623},{\"end\":67819,\"start\":67818},{\"end\":67828,\"start\":67827},{\"end\":68011,\"start\":68010},{\"end\":68029,\"start\":68028},{\"end\":68159,\"start\":68158},{\"end\":68172,\"start\":68166},{\"end\":68270,\"start\":68269},{\"end\":68361,\"start\":68360},{\"end\":68370,\"start\":68369},{\"end\":68378,\"start\":68377},{\"end\":68389,\"start\":68388},{\"end\":68398,\"start\":68397},{\"end\":68400,\"start\":68399},{\"end\":68410,\"start\":68409},{\"end\":68421,\"start\":68420},{\"end\":68431,\"start\":68430},{\"end\":68440,\"start\":68439},{\"end\":68446,\"start\":68441},{\"end\":68457,\"start\":68456},{\"end\":68459,\"start\":68458},{\"end\":68468,\"start\":68467},{\"end\":68479,\"start\":68478},{\"end\":68487,\"start\":68486},{\"end\":68495,\"start\":68494},{\"end\":68505,\"start\":68504},{\"end\":68516,\"start\":68515},{\"end\":68528,\"start\":68527},{\"end\":68541,\"start\":68540},{\"end\":68550,\"start\":68549},{\"end\":68559,\"start\":68558},{\"end\":68569,\"start\":68568},{\"end\":68579,\"start\":68578},{\"end\":68591,\"start\":68590},{\"end\":68600,\"start\":68599},{\"end\":68610,\"start\":68609},{\"end\":68622,\"start\":68621},{\"end\":68624,\"start\":68623},{\"end\":68636,\"start\":68635},{\"end\":68638,\"start\":68637},{\"end\":68650,\"start\":68649},{\"end\":68656,\"start\":68655},{\"end\":68668,\"start\":68667},{\"end\":68677,\"start\":68676},{\"end\":68679,\"start\":68678},{\"end\":68689,\"start\":68688},{\"end\":68691,\"start\":68690},{\"end\":68701,\"start\":68700},{\"end\":68712,\"start\":68711},{\"end\":68721,\"start\":68720},{\"end\":68730,\"start\":68729},{\"end\":68743,\"start\":68742},{\"end\":68752,\"start\":68751},{\"end\":68754,\"start\":68753},{\"end\":68764,\"start\":68763},{\"end\":68773,\"start\":68772},{\"end\":68785,\"start\":68784},{\"end\":68798,\"start\":68797},{\"end\":68810,\"start\":68809},{\"end\":68822,\"start\":68821},{\"end\":68832,\"start\":68831},{\"end\":68841,\"start\":68840},{\"end\":68851,\"start\":68850},{\"end\":68853,\"start\":68852},{\"end\":68864,\"start\":68863},{\"end\":68874,\"start\":68873},{\"end\":68885,\"start\":68884},{\"end\":68891,\"start\":68890},{\"end\":68905,\"start\":68904},{\"end\":68916,\"start\":68915},{\"end\":68925,\"start\":68924},{\"end\":68935,\"start\":68934},{\"end\":68945,\"start\":68944},{\"end\":68954,\"start\":68953},{\"end\":68956,\"start\":68955},{\"end\":68963,\"start\":68962},{\"end\":68972,\"start\":68971},{\"end\":68984,\"start\":68983},{\"end\":68986,\"start\":68985},{\"end\":68995,\"start\":68994},{\"end\":69007,\"start\":69006},{\"end\":69009,\"start\":69008},{\"end\":69020,\"start\":69019},{\"end\":69031,\"start\":69030},{\"end\":69033,\"start\":69032},{\"end\":69042,\"start\":69041},{\"end\":69050,\"start\":69049},{\"end\":69052,\"start\":69051},{\"end\":69065,\"start\":69064},{\"end\":69080,\"start\":69079},{\"end\":69082,\"start\":69081},{\"end\":69090,\"start\":69089},{\"end\":69092,\"start\":69091},{\"end\":69106,\"start\":69105},{\"end\":69121,\"start\":69120},{\"end\":69135,\"start\":69134},{\"end\":69144,\"start\":69143},{\"end\":69146,\"start\":69145},{\"end\":69153,\"start\":69152},{\"end\":69160,\"start\":69159},{\"end\":69171,\"start\":69170},{\"end\":69180,\"start\":69179},{\"end\":69182,\"start\":69181},{\"end\":70196,\"start\":70195},{\"end\":70208,\"start\":70207},{\"end\":70210,\"start\":70209},{\"end\":70221,\"start\":70220},{\"end\":70234,\"start\":70233},{\"end\":70244,\"start\":70243},{\"end\":70257,\"start\":70256},{\"end\":70270,\"start\":70269},{\"end\":70272,\"start\":70271},{\"end\":70283,\"start\":70282},{\"end\":70285,\"start\":70284},{\"end\":70296,\"start\":70295},{\"end\":70518,\"start\":70517},{\"end\":70527,\"start\":70526},{\"end\":70529,\"start\":70528},{\"end\":70539,\"start\":70538},{\"end\":70541,\"start\":70540},{\"end\":70556,\"start\":70555},{\"end\":70700,\"start\":70699},{\"end\":70709,\"start\":70708},{\"end\":70718,\"start\":70717},{\"end\":70728,\"start\":70727},{\"end\":70735,\"start\":70734},{\"end\":70741,\"start\":70740},{\"end\":70749,\"start\":70748},{\"end\":70757,\"start\":70756},{\"end\":70763,\"start\":70762},{\"end\":70769,\"start\":70768},{\"end\":70776,\"start\":70775},{\"end\":70784,\"start\":70783},{\"end\":70795,\"start\":70794},{\"end\":70997,\"start\":70996},{\"end\":71011,\"start\":71010},{\"end\":71020,\"start\":71019},{\"end\":71030,\"start\":71029},{\"end\":71039,\"start\":71038},{\"end\":71050,\"start\":71049},{\"end\":71060,\"start\":71059},{\"end\":71233,\"start\":71232},{\"end\":71240,\"start\":71239},{\"end\":71247,\"start\":71246},{\"end\":71256,\"start\":71255},{\"end\":71263,\"start\":71262},{\"end\":71269,\"start\":71268},{\"end\":71278,\"start\":71277},{\"end\":71287,\"start\":71286},{\"end\":71293,\"start\":71292},{\"end\":71300,\"start\":71299},{\"end\":71312,\"start\":71308},{\"end\":71321,\"start\":71320},{\"end\":71329,\"start\":71328},{\"end\":71343,\"start\":71339},{\"end\":71350,\"start\":71349},{\"end\":71594,\"start\":71593},{\"end\":71596,\"start\":71595},{\"end\":71609,\"start\":71608},{\"end\":71620,\"start\":71619},{\"end\":71629,\"start\":71628},{\"end\":71639,\"start\":71638},{\"end\":71655,\"start\":71654},{\"end\":71659,\"start\":71656},{\"end\":71667,\"start\":71666},{\"end\":71871,\"start\":71870},{\"end\":71883,\"start\":71882},{\"end\":71894,\"start\":71893},{\"end\":71905,\"start\":71904},{\"end\":71907,\"start\":71906},{\"end\":71918,\"start\":71917},{\"end\":71927,\"start\":71926},{\"end\":71940,\"start\":71939}]", "bib_author_last_name": "[{\"end\":55957,\"start\":55947},{\"end\":55965,\"start\":55961},{\"end\":55974,\"start\":55969},{\"end\":56091,\"start\":56087},{\"end\":56204,\"start\":56195},{\"end\":56215,\"start\":56210},{\"end\":56364,\"start\":56356},{\"end\":56376,\"start\":56368},{\"end\":56495,\"start\":56490},{\"end\":56505,\"start\":56501},{\"end\":56634,\"start\":56627},{\"end\":56643,\"start\":56638},{\"end\":56775,\"start\":56768},{\"end\":56881,\"start\":56873},{\"end\":56888,\"start\":56885},{\"end\":56901,\"start\":56892},{\"end\":56912,\"start\":56908},{\"end\":56920,\"start\":56916},{\"end\":56932,\"start\":56926},{\"end\":57112,\"start\":57104},{\"end\":57119,\"start\":57116},{\"end\":57132,\"start\":57123},{\"end\":57143,\"start\":57139},{\"end\":57151,\"start\":57147},{\"end\":57163,\"start\":57155},{\"end\":57175,\"start\":57169},{\"end\":57373,\"start\":57360},{\"end\":57384,\"start\":57379},{\"end\":57392,\"start\":57388},{\"end\":57528,\"start\":57522},{\"end\":57535,\"start\":57532},{\"end\":57550,\"start\":57544},{\"end\":57645,\"start\":57634},{\"end\":57657,\"start\":57651},{\"end\":58026,\"start\":58015},{\"end\":58151,\"start\":58144},{\"end\":58162,\"start\":58155},{\"end\":58172,\"start\":58166},{\"end\":58183,\"start\":58176},{\"end\":58195,\"start\":58187},{\"end\":58202,\"start\":58199},{\"end\":58212,\"start\":58206},{\"end\":58221,\"start\":58216},{\"end\":58236,\"start\":58225},{\"end\":58434,\"start\":58429},{\"end\":58444,\"start\":58440},{\"end\":58453,\"start\":58448},{\"end\":58596,\"start\":58594},{\"end\":58606,\"start\":58603},{\"end\":58722,\"start\":58719},{\"end\":58730,\"start\":58726},{\"end\":58739,\"start\":58736},{\"end\":58748,\"start\":58745},{\"end\":58758,\"start\":58754},{\"end\":58767,\"start\":58762},{\"end\":58930,\"start\":58926},{\"end\":58939,\"start\":58936},{\"end\":58948,\"start\":58943},{\"end\":58957,\"start\":58952},{\"end\":59094,\"start\":59091},{\"end\":59104,\"start\":59098},{\"end\":59116,\"start\":59108},{\"end\":59130,\"start\":59120},{\"end\":59285,\"start\":59281},{\"end\":59294,\"start\":59292},{\"end\":59304,\"start\":59301},{\"end\":59444,\"start\":59441},{\"end\":59455,\"start\":59451},{\"end\":59464,\"start\":59459},{\"end\":59596,\"start\":59589},{\"end\":59611,\"start\":59605},{\"end\":59695,\"start\":59689},{\"end\":59801,\"start\":59795},{\"end\":59810,\"start\":59805},{\"end\":59938,\"start\":59933},{\"end\":59953,\"start\":59944},{\"end\":59962,\"start\":59957},{\"end\":60097,\"start\":60092},{\"end\":60111,\"start\":60103},{\"end\":60121,\"start\":60115},{\"end\":60132,\"start\":60127},{\"end\":60308,\"start\":60301},{\"end\":60421,\"start\":60417},{\"end\":60431,\"start\":60425},{\"end\":60443,\"start\":60435},{\"end\":60573,\"start\":60567},{\"end\":60589,\"start\":60579},{\"end\":60739,\"start\":60732},{\"end\":60748,\"start\":60743},{\"end\":60762,\"start\":60754},{\"end\":60943,\"start\":60935},{\"end\":60955,\"start\":60947},{\"end\":60970,\"start\":60964},{\"end\":61070,\"start\":61065},{\"end\":61080,\"start\":61076},{\"end\":61194,\"start\":61187},{\"end\":61203,\"start\":61198},{\"end\":61219,\"start\":61209},{\"end\":61370,\"start\":61363},{\"end\":61381,\"start\":61374},{\"end\":61392,\"start\":61385},{\"end\":61408,\"start\":61396},{\"end\":61421,\"start\":61414},{\"end\":61438,\"start\":61427},{\"end\":61452,\"start\":61444},{\"end\":61463,\"start\":61456},{\"end\":61472,\"start\":61467},{\"end\":61480,\"start\":61476},{\"end\":61494,\"start\":61486},{\"end\":61508,\"start\":61500},{\"end\":61524,\"start\":61516},{\"end\":61537,\"start\":61528},{\"end\":61555,\"start\":61543},{\"end\":61564,\"start\":61559},{\"end\":61869,\"start\":61864},{\"end\":61881,\"start\":61875},{\"end\":61998,\"start\":61990},{\"end\":62009,\"start\":62002},{\"end\":62022,\"start\":62013},{\"end\":62034,\"start\":62026},{\"end\":62180,\"start\":62172},{\"end\":62188,\"start\":62184},{\"end\":62300,\"start\":62295},{\"end\":62312,\"start\":62306},{\"end\":62329,\"start\":62318},{\"end\":62340,\"start\":62333},{\"end\":62348,\"start\":62344},{\"end\":62357,\"start\":62352},{\"end\":62370,\"start\":62363},{\"end\":62384,\"start\":62376},{\"end\":62393,\"start\":62388},{\"end\":62594,\"start\":62587},{\"end\":62607,\"start\":62598},{\"end\":62617,\"start\":62611},{\"end\":62629,\"start\":62621},{\"end\":62765,\"start\":62760},{\"end\":62779,\"start\":62773},{\"end\":62786,\"start\":62783},{\"end\":62801,\"start\":62792},{\"end\":62811,\"start\":62805},{\"end\":62827,\"start\":62815},{\"end\":63001,\"start\":62997},{\"end\":63010,\"start\":63005},{\"end\":63019,\"start\":63014},{\"end\":63029,\"start\":63023},{\"end\":63036,\"start\":63033},{\"end\":63182,\"start\":63172},{\"end\":63194,\"start\":63188},{\"end\":63208,\"start\":63200},{\"end\":63220,\"start\":63214},{\"end\":63234,\"start\":63226},{\"end\":63246,\"start\":63240},{\"end\":63432,\"start\":63425},{\"end\":63442,\"start\":63436},{\"end\":63456,\"start\":63448},{\"end\":63473,\"start\":63462},{\"end\":63622,\"start\":63617},{\"end\":63639,\"start\":63626},{\"end\":63650,\"start\":63645},{\"end\":63789,\"start\":63780},{\"end\":63955,\"start\":63942},{\"end\":64536,\"start\":64529},{\"end\":64548,\"start\":64540},{\"end\":64562,\"start\":64552},{\"end\":64707,\"start\":64702},{\"end\":64715,\"start\":64711},{\"end\":64836,\"start\":64830},{\"end\":64847,\"start\":64840},{\"end\":65179,\"start\":65173},{\"end\":65191,\"start\":65183},{\"end\":65310,\"start\":65302},{\"end\":65413,\"start\":65407},{\"end\":65426,\"start\":65420},{\"end\":65437,\"start\":65432},{\"end\":65593,\"start\":65584},{\"end\":65690,\"start\":65684},{\"end\":65704,\"start\":65698},{\"end\":65854,\"start\":65848},{\"end\":65863,\"start\":65858},{\"end\":65872,\"start\":65867},{\"end\":65886,\"start\":65876},{\"end\":65897,\"start\":65890},{\"end\":65907,\"start\":65901},{\"end\":66247,\"start\":66237},{\"end\":66256,\"start\":66251},{\"end\":66267,\"start\":66260},{\"end\":66277,\"start\":66271},{\"end\":66619,\"start\":66610},{\"end\":66630,\"start\":66623},{\"end\":66638,\"start\":66634},{\"end\":66649,\"start\":66644},{\"end\":66663,\"start\":66653},{\"end\":66918,\"start\":66909},{\"end\":67149,\"start\":67141},{\"end\":67164,\"start\":67155},{\"end\":67356,\"start\":67352},{\"end\":67460,\"start\":67456},{\"end\":67470,\"start\":67462},{\"end\":67553,\"start\":67543},{\"end\":67562,\"start\":67557},{\"end\":67571,\"start\":67566},{\"end\":67580,\"start\":67575},{\"end\":67592,\"start\":67586},{\"end\":67602,\"start\":67596},{\"end\":67615,\"start\":67608},{\"end\":67621,\"start\":67619},{\"end\":67631,\"start\":67625},{\"end\":67825,\"start\":67820},{\"end\":67835,\"start\":67829},{\"end\":68026,\"start\":68012},{\"end\":68037,\"start\":68030},{\"end\":68164,\"start\":68160},{\"end\":68179,\"start\":68173},{\"end\":68367,\"start\":68362},{\"end\":68375,\"start\":68371},{\"end\":68386,\"start\":68379},{\"end\":68395,\"start\":68390},{\"end\":68407,\"start\":68401},{\"end\":68418,\"start\":68411},{\"end\":68428,\"start\":68422},{\"end\":68437,\"start\":68432},{\"end\":68454,\"start\":68447},{\"end\":68465,\"start\":68460},{\"end\":68476,\"start\":68469},{\"end\":68484,\"start\":68480},{\"end\":68492,\"start\":68488},{\"end\":68502,\"start\":68496},{\"end\":68513,\"start\":68506},{\"end\":68525,\"start\":68517},{\"end\":68538,\"start\":68529},{\"end\":68547,\"start\":68542},{\"end\":68556,\"start\":68551},{\"end\":68566,\"start\":68560},{\"end\":68576,\"start\":68570},{\"end\":68588,\"start\":68580},{\"end\":68597,\"start\":68592},{\"end\":68607,\"start\":68601},{\"end\":68619,\"start\":68611},{\"end\":68633,\"start\":68625},{\"end\":68647,\"start\":68639},{\"end\":68653,\"start\":68651},{\"end\":68665,\"start\":68657},{\"end\":68674,\"start\":68669},{\"end\":68686,\"start\":68680},{\"end\":68698,\"start\":68692},{\"end\":68709,\"start\":68702},{\"end\":68718,\"start\":68713},{\"end\":68727,\"start\":68722},{\"end\":68740,\"start\":68731},{\"end\":68749,\"start\":68744},{\"end\":68761,\"start\":68755},{\"end\":68770,\"start\":68765},{\"end\":68782,\"start\":68774},{\"end\":68795,\"start\":68786},{\"end\":68807,\"start\":68799},{\"end\":68819,\"start\":68811},{\"end\":68829,\"start\":68823},{\"end\":68838,\"start\":68833},{\"end\":68848,\"start\":68842},{\"end\":68861,\"start\":68854},{\"end\":68871,\"start\":68865},{\"end\":68882,\"start\":68875},{\"end\":68888,\"start\":68886},{\"end\":68902,\"start\":68892},{\"end\":68913,\"start\":68906},{\"end\":68922,\"start\":68917},{\"end\":68932,\"start\":68926},{\"end\":68942,\"start\":68936},{\"end\":68951,\"start\":68946},{\"end\":68960,\"start\":68957},{\"end\":68969,\"start\":68964},{\"end\":68981,\"start\":68973},{\"end\":68992,\"start\":68987},{\"end\":69004,\"start\":68996},{\"end\":69017,\"start\":69010},{\"end\":69028,\"start\":69021},{\"end\":69039,\"start\":69034},{\"end\":69047,\"start\":69043},{\"end\":69062,\"start\":69053},{\"end\":69077,\"start\":69066},{\"end\":69087,\"start\":69083},{\"end\":69103,\"start\":69093},{\"end\":69118,\"start\":69107},{\"end\":69132,\"start\":69122},{\"end\":69141,\"start\":69136},{\"end\":69150,\"start\":69147},{\"end\":69157,\"start\":69154},{\"end\":69168,\"start\":69161},{\"end\":69177,\"start\":69172},{\"end\":69191,\"start\":69183},{\"end\":70205,\"start\":70197},{\"end\":70218,\"start\":70211},{\"end\":70231,\"start\":70222},{\"end\":70241,\"start\":70235},{\"end\":70254,\"start\":70245},{\"end\":70267,\"start\":70258},{\"end\":70280,\"start\":70273},{\"end\":70293,\"start\":70286},{\"end\":70305,\"start\":70297},{\"end\":70524,\"start\":70519},{\"end\":70536,\"start\":70530},{\"end\":70553,\"start\":70542},{\"end\":70562,\"start\":70557},{\"end\":70706,\"start\":70701},{\"end\":70715,\"start\":70710},{\"end\":70725,\"start\":70719},{\"end\":70732,\"start\":70729},{\"end\":70738,\"start\":70736},{\"end\":70746,\"start\":70742},{\"end\":70754,\"start\":70750},{\"end\":70760,\"start\":70758},{\"end\":70766,\"start\":70764},{\"end\":70773,\"start\":70770},{\"end\":70781,\"start\":70777},{\"end\":70792,\"start\":70785},{\"end\":70799,\"start\":70796},{\"end\":71008,\"start\":70998},{\"end\":71017,\"start\":71012},{\"end\":71027,\"start\":71021},{\"end\":71036,\"start\":71031},{\"end\":71047,\"start\":71040},{\"end\":71057,\"start\":71051},{\"end\":71067,\"start\":71061},{\"end\":71237,\"start\":71234},{\"end\":71244,\"start\":71241},{\"end\":71253,\"start\":71248},{\"end\":71260,\"start\":71257},{\"end\":71266,\"start\":71264},{\"end\":71275,\"start\":71270},{\"end\":71284,\"start\":71279},{\"end\":71290,\"start\":71288},{\"end\":71297,\"start\":71294},{\"end\":71306,\"start\":71301},{\"end\":71318,\"start\":71313},{\"end\":71326,\"start\":71322},{\"end\":71337,\"start\":71330},{\"end\":71347,\"start\":71344},{\"end\":71353,\"start\":71351},{\"end\":71606,\"start\":71597},{\"end\":71617,\"start\":71610},{\"end\":71626,\"start\":71621},{\"end\":71636,\"start\":71630},{\"end\":71652,\"start\":71640},{\"end\":71664,\"start\":71660},{\"end\":71675,\"start\":71668},{\"end\":71880,\"start\":71872},{\"end\":71891,\"start\":71884},{\"end\":71902,\"start\":71895},{\"end\":71915,\"start\":71908},{\"end\":71924,\"start\":71919},{\"end\":71937,\"start\":71928},{\"end\":71956,\"start\":71941}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":56081,\"start\":55943},{\"attributes\":{\"id\":\"b1\"},\"end\":56187,\"start\":56083},{\"attributes\":{\"id\":\"b2\"},\"end\":56348,\"start\":56189},{\"attributes\":{\"id\":\"b3\"},\"end\":56484,\"start\":56350},{\"attributes\":{\"id\":\"b4\"},\"end\":56621,\"start\":56486},{\"attributes\":{\"id\":\"b5\"},\"end\":56762,\"start\":56623},{\"attributes\":{\"id\":\"b6\"},\"end\":56867,\"start\":56764},{\"attributes\":{\"id\":\"b7\"},\"end\":57098,\"start\":56869},{\"attributes\":{\"id\":\"b8\"},\"end\":57354,\"start\":57100},{\"attributes\":{\"id\":\"b9\"},\"end\":57514,\"start\":57356},{\"attributes\":{\"id\":\"b10\"},\"end\":57630,\"start\":57516},{\"attributes\":{\"id\":\"b11\"},\"end\":58007,\"start\":57632},{\"attributes\":{\"id\":\"b12\"},\"end\":58138,\"start\":58009},{\"attributes\":{\"id\":\"b13\"},\"end\":58421,\"start\":58140},{\"attributes\":{\"id\":\"b14\"},\"end\":58585,\"start\":58423},{\"attributes\":{\"id\":\"b15\"},\"end\":58711,\"start\":58587},{\"attributes\":{\"id\":\"b16\"},\"end\":58917,\"start\":58713},{\"attributes\":{\"id\":\"b17\"},\"end\":59085,\"start\":58919},{\"attributes\":{\"id\":\"b18\"},\"end\":59275,\"start\":59087},{\"attributes\":{\"id\":\"b19\"},\"end\":59432,\"start\":59277},{\"attributes\":{\"id\":\"b20\"},\"end\":59581,\"start\":59434},{\"attributes\":{\"id\":\"b21\"},\"end\":59683,\"start\":59583},{\"attributes\":{\"id\":\"b22\"},\"end\":59789,\"start\":59685},{\"attributes\":{\"id\":\"b23\"},\"end\":59927,\"start\":59791},{\"attributes\":{\"id\":\"b24\"},\"end\":60084,\"start\":59929},{\"attributes\":{\"id\":\"b25\"},\"end\":60293,\"start\":60086},{\"attributes\":{\"id\":\"b26\"},\"end\":60411,\"start\":60295},{\"attributes\":{\"id\":\"b27\"},\"end\":60559,\"start\":60413},{\"attributes\":{\"id\":\"b28\"},\"end\":60724,\"start\":60561},{\"attributes\":{\"id\":\"b29\"},\"end\":60929,\"start\":60726},{\"attributes\":{\"id\":\"b30\"},\"end\":61059,\"start\":60931},{\"attributes\":{\"id\":\"b31\"},\"end\":61181,\"start\":61061},{\"attributes\":{\"id\":\"b32\"},\"end\":61357,\"start\":61183},{\"attributes\":{\"id\":\"b33\"},\"end\":61858,\"start\":61359},{\"attributes\":{\"id\":\"b34\"},\"end\":61984,\"start\":61860},{\"attributes\":{\"id\":\"b35\"},\"end\":62166,\"start\":61986},{\"attributes\":{\"id\":\"b36\"},\"end\":62289,\"start\":62168},{\"attributes\":{\"id\":\"b37\"},\"end\":62581,\"start\":62291},{\"attributes\":{\"id\":\"b38\"},\"end\":62752,\"start\":62583},{\"attributes\":{\"id\":\"b39\"},\"end\":62991,\"start\":62754},{\"attributes\":{\"id\":\"b40\"},\"end\":63164,\"start\":62993},{\"attributes\":{\"id\":\"b41\"},\"end\":63419,\"start\":63166},{\"attributes\":{\"id\":\"b42\"},\"end\":63609,\"start\":63421},{\"attributes\":{\"id\":\"b43\"},\"end\":63774,\"start\":63611},{\"attributes\":{\"id\":\"b44\"},\"end\":63938,\"start\":63776},{\"attributes\":{\"id\":\"b45\"},\"end\":64519,\"start\":63940},{\"attributes\":{\"id\":\"b46\"},\"end\":64692,\"start\":64521},{\"attributes\":{\"id\":\"b47\"},\"end\":64826,\"start\":64694},{\"attributes\":{\"id\":\"b48\"},\"end\":65167,\"start\":64828},{\"attributes\":{\"id\":\"b49\"},\"end\":65296,\"start\":65169},{\"attributes\":{\"id\":\"b50\"},\"end\":65399,\"start\":65298},{\"attributes\":{\"id\":\"b51\"},\"end\":65578,\"start\":65401},{\"attributes\":{\"id\":\"b52\"},\"end\":65680,\"start\":65580},{\"attributes\":{\"id\":\"b53\"},\"end\":65842,\"start\":65682},{\"attributes\":{\"id\":\"b54\"},\"end\":66233,\"start\":65844},{\"attributes\":{\"id\":\"b55\"},\"end\":66604,\"start\":66235},{\"attributes\":{\"id\":\"b56\"},\"end\":66829,\"start\":66606},{\"attributes\":{\"id\":\"b57\"},\"end\":67135,\"start\":66831},{\"attributes\":{\"id\":\"b58\"},\"end\":67346,\"start\":67137},{\"attributes\":{\"id\":\"b59\"},\"end\":67450,\"start\":67348},{\"attributes\":{\"id\":\"b60\"},\"end\":67537,\"start\":67452},{\"attributes\":{\"id\":\"b61\"},\"end\":67816,\"start\":67539},{\"attributes\":{\"id\":\"b62\"},\"end\":68006,\"start\":67818},{\"attributes\":{\"id\":\"b63\"},\"end\":68154,\"start\":68008},{\"attributes\":{\"id\":\"b64\"},\"end\":68265,\"start\":68156},{\"attributes\":{\"id\":\"b65\"},\"end\":68356,\"start\":68267},{\"attributes\":{\"id\":\"b66\"},\"end\":70191,\"start\":68358},{\"attributes\":{\"id\":\"b67\"},\"end\":70513,\"start\":70193},{\"attributes\":{\"id\":\"b68\"},\"end\":70695,\"start\":70515},{\"attributes\":{\"id\":\"b69\"},\"end\":70994,\"start\":70697},{\"attributes\":{\"id\":\"b70\"},\"end\":71228,\"start\":70996},{\"attributes\":{\"id\":\"b71\"},\"end\":71589,\"start\":71230},{\"attributes\":{\"id\":\"b72\"},\"end\":71868,\"start\":71591},{\"attributes\":{\"id\":\"b73\"},\"end\":72183,\"start\":71870}]", "bib_title": null, "bib_author": "[{\"end\":55959,\"start\":55945},{\"end\":55967,\"start\":55959},{\"end\":55976,\"start\":55967},{\"end\":56093,\"start\":56085},{\"end\":56206,\"start\":56191},{\"end\":56217,\"start\":56206},{\"end\":56366,\"start\":56352},{\"end\":56378,\"start\":56366},{\"end\":56497,\"start\":56488},{\"end\":56507,\"start\":56497},{\"end\":56636,\"start\":56625},{\"end\":56645,\"start\":56636},{\"end\":56777,\"start\":56766},{\"end\":56883,\"start\":56871},{\"end\":56890,\"start\":56883},{\"end\":56903,\"start\":56890},{\"end\":56914,\"start\":56903},{\"end\":56922,\"start\":56914},{\"end\":56934,\"start\":56922},{\"end\":57114,\"start\":57102},{\"end\":57121,\"start\":57114},{\"end\":57134,\"start\":57121},{\"end\":57145,\"start\":57134},{\"end\":57153,\"start\":57145},{\"end\":57165,\"start\":57153},{\"end\":57177,\"start\":57165},{\"end\":57375,\"start\":57358},{\"end\":57386,\"start\":57375},{\"end\":57394,\"start\":57386},{\"end\":57530,\"start\":57518},{\"end\":57537,\"start\":57530},{\"end\":57552,\"start\":57537},{\"end\":57647,\"start\":57632},{\"end\":57659,\"start\":57647},{\"end\":58028,\"start\":58011},{\"end\":58153,\"start\":58142},{\"end\":58164,\"start\":58153},{\"end\":58174,\"start\":58164},{\"end\":58185,\"start\":58174},{\"end\":58197,\"start\":58185},{\"end\":58204,\"start\":58197},{\"end\":58214,\"start\":58204},{\"end\":58223,\"start\":58214},{\"end\":58238,\"start\":58223},{\"end\":58436,\"start\":58425},{\"end\":58446,\"start\":58436},{\"end\":58455,\"start\":58446},{\"end\":58598,\"start\":58589},{\"end\":58608,\"start\":58598},{\"end\":58724,\"start\":58715},{\"end\":58732,\"start\":58724},{\"end\":58741,\"start\":58732},{\"end\":58750,\"start\":58741},{\"end\":58760,\"start\":58750},{\"end\":58769,\"start\":58760},{\"end\":58932,\"start\":58921},{\"end\":58941,\"start\":58932},{\"end\":58950,\"start\":58941},{\"end\":58959,\"start\":58950},{\"end\":59096,\"start\":59089},{\"end\":59106,\"start\":59096},{\"end\":59118,\"start\":59106},{\"end\":59132,\"start\":59118},{\"end\":59287,\"start\":59279},{\"end\":59296,\"start\":59287},{\"end\":59306,\"start\":59296},{\"end\":59446,\"start\":59436},{\"end\":59457,\"start\":59446},{\"end\":59466,\"start\":59457},{\"end\":59598,\"start\":59585},{\"end\":59613,\"start\":59598},{\"end\":59697,\"start\":59687},{\"end\":59803,\"start\":59793},{\"end\":59812,\"start\":59803},{\"end\":59940,\"start\":59931},{\"end\":59955,\"start\":59940},{\"end\":59964,\"start\":59955},{\"end\":60099,\"start\":60088},{\"end\":60113,\"start\":60099},{\"end\":60123,\"start\":60113},{\"end\":60134,\"start\":60123},{\"end\":60310,\"start\":60297},{\"end\":60423,\"start\":60415},{\"end\":60433,\"start\":60423},{\"end\":60445,\"start\":60433},{\"end\":60575,\"start\":60563},{\"end\":60591,\"start\":60575},{\"end\":60741,\"start\":60728},{\"end\":60750,\"start\":60741},{\"end\":60764,\"start\":60750},{\"end\":60945,\"start\":60933},{\"end\":60957,\"start\":60945},{\"end\":60972,\"start\":60957},{\"end\":61072,\"start\":61063},{\"end\":61082,\"start\":61072},{\"end\":61196,\"start\":61185},{\"end\":61205,\"start\":61196},{\"end\":61221,\"start\":61205},{\"end\":61372,\"start\":61361},{\"end\":61383,\"start\":61372},{\"end\":61394,\"start\":61383},{\"end\":61410,\"start\":61394},{\"end\":61423,\"start\":61410},{\"end\":61440,\"start\":61423},{\"end\":61454,\"start\":61440},{\"end\":61465,\"start\":61454},{\"end\":61474,\"start\":61465},{\"end\":61482,\"start\":61474},{\"end\":61496,\"start\":61482},{\"end\":61510,\"start\":61496},{\"end\":61526,\"start\":61510},{\"end\":61539,\"start\":61526},{\"end\":61557,\"start\":61539},{\"end\":61566,\"start\":61557},{\"end\":61871,\"start\":61862},{\"end\":61883,\"start\":61871},{\"end\":62000,\"start\":61988},{\"end\":62011,\"start\":62000},{\"end\":62024,\"start\":62011},{\"end\":62036,\"start\":62024},{\"end\":62182,\"start\":62170},{\"end\":62190,\"start\":62182},{\"end\":62302,\"start\":62293},{\"end\":62314,\"start\":62302},{\"end\":62331,\"start\":62314},{\"end\":62342,\"start\":62331},{\"end\":62350,\"start\":62342},{\"end\":62359,\"start\":62350},{\"end\":62372,\"start\":62359},{\"end\":62386,\"start\":62372},{\"end\":62395,\"start\":62386},{\"end\":62596,\"start\":62585},{\"end\":62609,\"start\":62596},{\"end\":62619,\"start\":62609},{\"end\":62631,\"start\":62619},{\"end\":62767,\"start\":62756},{\"end\":62781,\"start\":62767},{\"end\":62788,\"start\":62781},{\"end\":62803,\"start\":62788},{\"end\":62813,\"start\":62803},{\"end\":62829,\"start\":62813},{\"end\":63003,\"start\":62995},{\"end\":63012,\"start\":63003},{\"end\":63021,\"start\":63012},{\"end\":63031,\"start\":63021},{\"end\":63038,\"start\":63031},{\"end\":63184,\"start\":63168},{\"end\":63196,\"start\":63184},{\"end\":63210,\"start\":63196},{\"end\":63222,\"start\":63210},{\"end\":63236,\"start\":63222},{\"end\":63248,\"start\":63236},{\"end\":63434,\"start\":63423},{\"end\":63444,\"start\":63434},{\"end\":63458,\"start\":63444},{\"end\":63475,\"start\":63458},{\"end\":63624,\"start\":63613},{\"end\":63641,\"start\":63624},{\"end\":63652,\"start\":63641},{\"end\":63791,\"start\":63778},{\"end\":63957,\"start\":63940},{\"end\":64538,\"start\":64523},{\"end\":64550,\"start\":64538},{\"end\":64564,\"start\":64550},{\"end\":64709,\"start\":64696},{\"end\":64717,\"start\":64709},{\"end\":64838,\"start\":64828},{\"end\":64849,\"start\":64838},{\"end\":65181,\"start\":65171},{\"end\":65193,\"start\":65181},{\"end\":65312,\"start\":65300},{\"end\":65415,\"start\":65403},{\"end\":65428,\"start\":65415},{\"end\":65439,\"start\":65428},{\"end\":65595,\"start\":65582},{\"end\":65692,\"start\":65682},{\"end\":65706,\"start\":65692},{\"end\":65856,\"start\":65846},{\"end\":65865,\"start\":65856},{\"end\":65874,\"start\":65865},{\"end\":65888,\"start\":65874},{\"end\":65899,\"start\":65888},{\"end\":65909,\"start\":65899},{\"end\":66249,\"start\":66235},{\"end\":66258,\"start\":66249},{\"end\":66269,\"start\":66258},{\"end\":66279,\"start\":66269},{\"end\":66621,\"start\":66608},{\"end\":66632,\"start\":66621},{\"end\":66640,\"start\":66632},{\"end\":66651,\"start\":66640},{\"end\":66665,\"start\":66651},{\"end\":66920,\"start\":66907},{\"end\":67151,\"start\":67137},{\"end\":67166,\"start\":67151},{\"end\":67358,\"start\":67350},{\"end\":67462,\"start\":67454},{\"end\":67472,\"start\":67462},{\"end\":67555,\"start\":67541},{\"end\":67564,\"start\":67555},{\"end\":67573,\"start\":67564},{\"end\":67582,\"start\":67573},{\"end\":67594,\"start\":67582},{\"end\":67604,\"start\":67594},{\"end\":67617,\"start\":67604},{\"end\":67623,\"start\":67617},{\"end\":67633,\"start\":67623},{\"end\":67827,\"start\":67818},{\"end\":67837,\"start\":67827},{\"end\":68028,\"start\":68010},{\"end\":68039,\"start\":68028},{\"end\":68166,\"start\":68158},{\"end\":68181,\"start\":68166},{\"end\":68273,\"start\":68269},{\"end\":68369,\"start\":68360},{\"end\":68377,\"start\":68369},{\"end\":68388,\"start\":68377},{\"end\":68397,\"start\":68388},{\"end\":68409,\"start\":68397},{\"end\":68420,\"start\":68409},{\"end\":68430,\"start\":68420},{\"end\":68439,\"start\":68430},{\"end\":68456,\"start\":68439},{\"end\":68467,\"start\":68456},{\"end\":68478,\"start\":68467},{\"end\":68486,\"start\":68478},{\"end\":68494,\"start\":68486},{\"end\":68504,\"start\":68494},{\"end\":68515,\"start\":68504},{\"end\":68527,\"start\":68515},{\"end\":68540,\"start\":68527},{\"end\":68549,\"start\":68540},{\"end\":68558,\"start\":68549},{\"end\":68568,\"start\":68558},{\"end\":68578,\"start\":68568},{\"end\":68590,\"start\":68578},{\"end\":68599,\"start\":68590},{\"end\":68609,\"start\":68599},{\"end\":68621,\"start\":68609},{\"end\":68635,\"start\":68621},{\"end\":68649,\"start\":68635},{\"end\":68655,\"start\":68649},{\"end\":68667,\"start\":68655},{\"end\":68676,\"start\":68667},{\"end\":68688,\"start\":68676},{\"end\":68700,\"start\":68688},{\"end\":68711,\"start\":68700},{\"end\":68720,\"start\":68711},{\"end\":68729,\"start\":68720},{\"end\":68742,\"start\":68729},{\"end\":68751,\"start\":68742},{\"end\":68763,\"start\":68751},{\"end\":68772,\"start\":68763},{\"end\":68784,\"start\":68772},{\"end\":68797,\"start\":68784},{\"end\":68809,\"start\":68797},{\"end\":68821,\"start\":68809},{\"end\":68831,\"start\":68821},{\"end\":68840,\"start\":68831},{\"end\":68850,\"start\":68840},{\"end\":68863,\"start\":68850},{\"end\":68873,\"start\":68863},{\"end\":68884,\"start\":68873},{\"end\":68890,\"start\":68884},{\"end\":68904,\"start\":68890},{\"end\":68915,\"start\":68904},{\"end\":68924,\"start\":68915},{\"end\":68934,\"start\":68924},{\"end\":68944,\"start\":68934},{\"end\":68953,\"start\":68944},{\"end\":68962,\"start\":68953},{\"end\":68971,\"start\":68962},{\"end\":68983,\"start\":68971},{\"end\":68994,\"start\":68983},{\"end\":69006,\"start\":68994},{\"end\":69019,\"start\":69006},{\"end\":69030,\"start\":69019},{\"end\":69041,\"start\":69030},{\"end\":69049,\"start\":69041},{\"end\":69064,\"start\":69049},{\"end\":69079,\"start\":69064},{\"end\":69089,\"start\":69079},{\"end\":69105,\"start\":69089},{\"end\":69120,\"start\":69105},{\"end\":69134,\"start\":69120},{\"end\":69143,\"start\":69134},{\"end\":69152,\"start\":69143},{\"end\":69159,\"start\":69152},{\"end\":69170,\"start\":69159},{\"end\":69179,\"start\":69170},{\"end\":69193,\"start\":69179},{\"end\":70207,\"start\":70195},{\"end\":70220,\"start\":70207},{\"end\":70233,\"start\":70220},{\"end\":70243,\"start\":70233},{\"end\":70256,\"start\":70243},{\"end\":70269,\"start\":70256},{\"end\":70282,\"start\":70269},{\"end\":70295,\"start\":70282},{\"end\":70307,\"start\":70295},{\"end\":70526,\"start\":70517},{\"end\":70538,\"start\":70526},{\"end\":70555,\"start\":70538},{\"end\":70564,\"start\":70555},{\"end\":70708,\"start\":70699},{\"end\":70717,\"start\":70708},{\"end\":70727,\"start\":70717},{\"end\":70734,\"start\":70727},{\"end\":70740,\"start\":70734},{\"end\":70748,\"start\":70740},{\"end\":70756,\"start\":70748},{\"end\":70762,\"start\":70756},{\"end\":70768,\"start\":70762},{\"end\":70775,\"start\":70768},{\"end\":70783,\"start\":70775},{\"end\":70794,\"start\":70783},{\"end\":70801,\"start\":70794},{\"end\":71010,\"start\":70996},{\"end\":71019,\"start\":71010},{\"end\":71029,\"start\":71019},{\"end\":71038,\"start\":71029},{\"end\":71049,\"start\":71038},{\"end\":71059,\"start\":71049},{\"end\":71069,\"start\":71059},{\"end\":71239,\"start\":71232},{\"end\":71246,\"start\":71239},{\"end\":71255,\"start\":71246},{\"end\":71262,\"start\":71255},{\"end\":71268,\"start\":71262},{\"end\":71277,\"start\":71268},{\"end\":71286,\"start\":71277},{\"end\":71292,\"start\":71286},{\"end\":71299,\"start\":71292},{\"end\":71308,\"start\":71299},{\"end\":71320,\"start\":71308},{\"end\":71328,\"start\":71320},{\"end\":71339,\"start\":71328},{\"end\":71349,\"start\":71339},{\"end\":71355,\"start\":71349},{\"end\":71608,\"start\":71593},{\"end\":71619,\"start\":71608},{\"end\":71628,\"start\":71619},{\"end\":71638,\"start\":71628},{\"end\":71654,\"start\":71638},{\"end\":71666,\"start\":71654},{\"end\":71677,\"start\":71666},{\"end\":71882,\"start\":71870},{\"end\":71893,\"start\":71882},{\"end\":71904,\"start\":71893},{\"end\":71917,\"start\":71904},{\"end\":71926,\"start\":71917},{\"end\":71939,\"start\":71926},{\"end\":71958,\"start\":71939}]", "bib_venue": "[{\"end\":65003,\"start\":64942},{\"end\":65766,\"start\":65751},{\"end\":66416,\"start\":66400},{\"end\":67220,\"start\":67207},{\"end\":56010,\"start\":56001},{\"end\":56135,\"start\":56118},{\"end\":56263,\"start\":56241},{\"end\":56551,\"start\":56536},{\"end\":56690,\"start\":56675},{\"end\":56815,\"start\":56803},{\"end\":56977,\"start\":56952},{\"end\":57220,\"start\":57195},{\"end\":57435,\"start\":57424},{\"end\":57708,\"start\":57659},{\"end\":58072,\"start\":58052},{\"end\":58500,\"start\":58485},{\"end\":58646,\"start\":58634},{\"end\":58807,\"start\":58795},{\"end\":58997,\"start\":58985},{\"end\":59177,\"start\":59162},{\"end\":59351,\"start\":59336},{\"end\":59504,\"start\":59492},{\"end\":59725,\"start\":59712},{\"end\":59857,\"start\":59842},{\"end\":60002,\"start\":59990},{\"end\":60185,\"start\":60163},{\"end\":60356,\"start\":60338},{\"end\":60485,\"start\":60470},{\"end\":60620,\"start\":60604},{\"end\":60822,\"start\":60786},{\"end\":61266,\"start\":61251},{\"end\":61596,\"start\":61589},{\"end\":62429,\"start\":62420},{\"end\":62665,\"start\":62656},{\"end\":62865,\"start\":62857},{\"end\":63284,\"start\":63276},{\"end\":63515,\"start\":63503},{\"end\":63860,\"start\":63819},{\"end\":64067,\"start\":63983},{\"end\":64602,\"start\":64590},{\"end\":64756,\"start\":64736},{\"end\":64940,\"start\":64864},{\"end\":65228,\"start\":65208},{\"end\":65472,\"start\":65454},{\"end\":65633,\"start\":65624},{\"end\":65749,\"start\":65728},{\"end\":66024,\"start\":65934},{\"end\":66398,\"start\":66304},{\"end\":66714,\"start\":66691},{\"end\":66905,\"start\":66831},{\"end\":67205,\"start\":67166},{\"end\":67389,\"start\":67358},{\"end\":67906,\"start\":67856},{\"end\":68078,\"start\":68066},{\"end\":68208,\"start\":68198},{\"end\":69224,\"start\":69218},{\"end\":71109,\"start\":71094},{\"end\":71400,\"start\":71385},{\"end\":71722,\"start\":71707},{\"end\":72014,\"start\":71958}]"}}}, "year": 2023, "month": 12, "day": 17}