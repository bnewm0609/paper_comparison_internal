{"id": 6628106, "updated": "2023-09-27 19:05:13.925", "metadata": {"title": "Adam: A Method for Stochastic Optimization", "authors": "[{\"first\":\"Diederik\",\"last\":\"Kingma\",\"middle\":[]},{\"first\":\"Jimmy\",\"last\":\"Ba\",\"middle\":[]}]", "venue": "ICLR", "journal": "arXiv: Learning", "publication_date": {"year": 2014, "month": 12, "day": 22}, "abstract": "We introduce Adam, an algorithm for first-order gradient-based optimization of stochastic objective functions. The method is straightforward to implement and is based on adaptive estimates of lower-order moments of the gradients. The method is computationally efficient, has little memory requirements and is well suited for problems that are large in terms of data and/or parameters. The method is also appropriate for non-stationary objectives and problems with very noisy and/or sparse gradients. The method exhibits invariance to diagonal rescaling of the gradients by adapting to the geometry of the objective function. The hyper-parameters have intuitive interpretations and typically require little tuning. Some connections to related algorithms, on which Adam was inspired, are discussed. We also analyze the theoretical convergence properties of the algorithm and provide a regret bound on the convergence rate that is comparable to the best known results under the online convex optimization framework. We demonstrate that Adam works well in practice and compares favorably to other stochastic optimization methods.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1412.6980", "mag": "2964121744", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/KingmaB14", "doi": null}}, "content": {"source": {"pdf_hash": "272216c1f097706721096669d85b2843c23fa77d", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1412.6980v5.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "bd383eb4e57258d2520b6638a57c444c9dff025d", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/272216c1f097706721096669d85b2843c23fa77d.txt", "contents": "\nADAM: A METHOD FOR STOCHASTIC OPTIMIZATION\n\n\nDiederik P Kingma dpkingma@uva.nl \nUniversity of Amsterdam\nUniversity of Toronto\n\n\nJimmy Lei Ba \nUniversity of Amsterdam\nUniversity of Toronto\n\n\nADAM: A METHOD FOR STOCHASTIC OPTIMIZATION\nUnder review as a conference paper at ICLR 2015\nWe introduce Adam, an algorithm for first-order gradient-based optimization of stochastic objective functions. The method is straightforward to implement and is based on adaptive estimates of lower-order moments of the gradients. The method is computationally efficient, has little memory requirements and is well suited for problems that are large in terms of data and/or parameters. The method is also appropriate for non-stationary objectives and problems with very noisy and/or sparse gradients. The method exhibits invariance to diagonal rescaling of the gradients by adapting to the geometry of the objective function. The hyper-parameters have intuitive interpretations and typically require little tuning. Some connections to related algorithms, on which Adam was inspired, are discussed. We also analyze the theoretical convergence properties of the algorithm and provide a regret bound on the convergence rate that is comparable to the best known results under the online convex optimization framework. We demonstrate that Adam works well in practice and compares favorably to other stochastic optimization methods. * Equal contribution. Author ordering determined by coin flip over a Google Hangout.\n\nINTRODUCTION\n\nStochastic gradient-based optimization is of core practical importance in many fields of science and engineering. Many problems in these fields can be cast as the optimization of some scalar parameterized objective function requiring maximization or minimization with respect to its parameters. If the function is differentiable w.r.t. its parameters, gradient descent is a relatively efficient optimization method, since the computation of first-order partial derivatives w.r.t. all the parameters is of the same computational complexity as just evaluating the function. Often, objective functions are stochastic. For example, many objective functions are composed of a sum of subfunctions evaluated at different subsamples of data; in this case optimization can be made more efficient by taking gradient steps w.r.t. individual subfunctions, i.e. stochastic gradient descent (SGD) or ascent. SGD proved itself as an efficient and effective optimization method that was central in many machine learning success stories, such as recent advances in deep learning (Deng et al., 2013;Krizhevsky et al., 2012;Hinton & Salakhutdinov, 2006;Hinton et al., 2012a;Graves et al., 2013). Objectives may also have other sources of noise than data subsampling, such as dropout (Hinton et al., 2012b) regularization. For all such noisy objectives, efficient stochastic optimization techniques are required. The focus of this paper is on the optimization of stochastic objectives with high-dimensional parameters spaces. In these cases, higher-order optimization methods are ill-suited, and discussion in this paper will be restricted to first-order methods.\n\nWe propose Adam, a method for efficient stochastic optimization that only requires first-order gradients with little memory requirement. The method computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients; the name Adam is derived from adaptive moment estimation. Our method is designed to combine the advantages of two recently popular methods: AdaGrad (Duchi et al., 2011), which works well with sparse gradients, and RMSProp (Tieleman & Hinton, 2012), which works well in on-line and non-stationary settings; important connections to these and other stochastic optimization methods are clarified in section 5. Some of Adam's advantages are that the magnitudes of parameter updates are invariant to rescaling of the gradient, its stepsizes are approximately bounded by the stepsize hyperparameter, it does not require a stationary objective, it works with sparse gradients, and it naturally performs a form of step size annealing.\n\nUnder review as a conference paper at ICLR 2015 Algorithm 1: Adam, our proposed algorithm for stochastic optimization. See section 2 for details, and for a slightly more efficient (but less clear) order of computation. g 2 t indicates the elementwise square g t g t . Good default settings for the tested machine learning problems are \u03b1 = 0.001, \u03b2 1 = 0.9, \u03b2 2 = 0.999, = 10 \u22128 and \u03bb = 1 \u2212 10 \u22128 . Require: \u03b1: Stepsize Require: \u03b2 1 , \u03b2 2 \u2208 [0, 1), \u03bb \u2208 [0, 1] : Exponential decay rates for the moment estimates Require: f (\u03b8): Stochastic objective function with parameters \u03b8 Require: \u03b8 0 : Initial parameter vector m 0 \u2190 0 (Initialize initial 1 st moment vector) v 0 \u2190 0 (Initialize initial 2 nd moment vector)\nt \u2190 0 (Initialize timestep) while \u03b8 t not converged do t \u2190 t + 1 \u03b2 1,t \u2190 \u03b2 1 \u03bb t\u22121 (Decay the first moment running average coefficient) g t \u2190 \u2207 \u03b8 f t (\u03b8 t\u22121 ) (Get gradients w.r.t. stochastic objective at timestep t) m t \u2190 \u03b2 1,t \u00b7 m t\u22121 + (1 \u2212 \u03b2 1,t ) \u00b7 g t (Update biased first moment estimate) v t \u2190 \u03b2 2 \u00b7 v t\u22121 + (1 \u2212 \u03b2 2 ) \u00b7 g 2 t (Update biased second raw moment estimate) m t \u2190 m t /(1 \u2212 \u03b2 t 1 ) (Compute bias-corrected first moment estimate) v t \u2190 v t /(1 \u2212 \u03b2 t 2 ) (Compute bias-corrected second raw moment estimate) \u03b8 t \u2190 \u03b8 t\u22121 \u2212 \u03b1 \u00b7 m t /( \u221a v t + ) (Update parameters) end while return \u03b8 t (Resulting parameters)\nIn section 2 we describe the algorithm and the properties of its update rule. Section 3 explains our initialization bias correction technique, and section 4 provides a theoretical analysis of Adam's convergence in online convex programming. Empirically, our method consistently outperforms other methods for a variety of models and datasets, as shown in section 6. Overall, we show that Adam is a versatile algorithm that scales to large-scale high-dimensional machine learning problems.\n\n\nALGORITHM\n\nSee algorithm 1 for pseudo-code of our proposed algorithm Adam. Let f (\u03b8) be a noisy objective function: a stochastic scalar function that is differentiable w.r.t. parameters \u03b8. We are interested in minimizing the expected value of this function, E[f (\u03b8)] w.r.t. its parameters \u03b8. With f 1 (\u03b8), ..., , f T (\u03b8) we denote the realisations of the stochastic function at subsequent timesteps 1, ..., T . The stochasticity might come from the evaluation at random subsamples (minibatches) of datapoints, or arise from inherent function noise. With g t = \u2207 \u03b8 f t (\u03b8) we denote the gradient, i.e. the vector of partial derivatives of f t , w.r.t \u03b8 evaluated at timestep t.\n\nThe algorithm updates exponential moving averages of the gradient (m t ) and the squared gradient (v t ) where the hyper-parameters \u03b2 1 , \u03b2 2 \u2208 [0, 1) control the exponential decay rates of these moving averages. The moving averages themselves are estimates of the 1 st moment (the mean) and the 2 nd raw moment (the uncentered variance) of the gradient. However, these moving averages are initialized as (vectors of) 0's, leading to moment estimates that are biased towards zero, especially during the initial timesteps, and especially when the decay rates are small (i.e. the \u03b2s are close to 1). The good news is that this initialization bias can be easily counteracted, resulting in bias-corrected estimates m t and v t . See section 3 for more details.\n\nNote that the efficiency of algorithm 1 can, at the expense of clarity, be improved upon by changing the order of computation, e.g. by replacing the last three lines in the loop with the following lines:\n\u03b1 t = \u03b1 \u00b7 1 \u2212 \u03b2 t 2 /(1 \u2212 \u03b2 t 1 ) and \u03b8 t \u2190 \u03b8 t\u22121 \u2212 \u03b1 t \u00b7 m t /( \u221a v t +\u02c6 ).\n\nADAM'S UPDATE RULE\n\nAn important property of Adam's update rule is its careful choice of stepsizes. Assuming = 0, the effective step taken in parameter space at timestep t is \u2206 t = \u03b1 \u00b7 m t / \u221a v t . The effective stepsize has two upper bounds:\n|\u2206 t | \u2264 \u03b1 \u00b7 (1 \u2212 \u03b2 1 )/ \u221a 1 \u2212 \u03b2 2 in the case (1 \u2212 \u03b2 1 ) > \u221a 1 \u2212 \u03b2 2 , and |\u2206 t | \u2264 \u03b1\notherwise. The first case only happens in the most severe case of sparsity: when a gradient has been zero at all timesteps except at the current timestep. For less sparse cases, the effective stepsize will be smaller. When (1 \u2212 \u03b2 1 ) = \u221a 1 \u2212 \u03b2 2 we have that | m t / \u221a v t | < 1 therefore |\u2206 t | < \u03b1. In more common scenarios, we will have that m t / \u221a v t \u2248 \u00b11 since |E[g]/ E[g 2 ]| \u2264 1. The effective magnitude of the steps taken in parameter space at each timestep are approximately bounded by the stepsize setting \u03b1, i.e., |\u2206 t | \u03b1. This can be understood as establishing a trust region around the current parameter value, beyond which the current gradient estimate does not provide sufficient information. This typically makes it relatively easy to know the right scale of \u03b1 in advance. For many machine learning models, for instance, we often know in advance that good optima are with high probability within some set region in parameter space; it is not uncommon, for example, to have a prior distribution over the parameters. Since \u03b1 sets (an upper bound of) the magnitude of steps in parameter space, we can often deduce the right order of magnitude of \u03b1 such that optima can be reached from \u03b8 0 within some number of iterations. With a slight abuse of terminology, we will call the ratio m t / \u221a v t the signal-to-noise ratio (SN R). With a smaller SNR the effective stepsize \u2206 t will be closer to zero. This is a desirable property, since a smaller SNR means that there is greater uncertainty about whether the direction of m t corresponds to the direction of the true gradient. For example, the SNR value typically becomes closer to 0 towards an optimum, leading to smaller effective steps in parameter space: a form of automatic annealing. The effective stepsize \u2206 t is also invariant to the scale of the gradients; rescaling the gradients g with factor c will scale m t with a factor c and v t with a factor c 2 , which cancel out:\n(c \u00b7 m t )/( \u221a c 2 \u00b7 v t ) = m t / \u221a v t .\n\nINITIALIZATION BIAS CORRECTION\n\nAs explained in section 2, Adam utilizes initialization bias correction terms. We will here derive the term for the second moment estimate; the derivation for the first moment has decay \u03bb on the running average coefficient, we instead correct for the lower bound of the first moment estimate that is completely analogous to the following derivation. Let g be the gradient of the stochastic objective f , and we wish to estimate its second raw moment (uncentered variance) using an exponential moving average of the squared gradient, with decay rate \u03b2 2 . Let g 1 , ..., g T be the gradients at subsequent timesteps, each a draw from an underlying gradient distribution g t \u223c p(g t ). Let us initialize the exponential moving average as v 0 = 0 (a vector of zeros). First note that the update at timestep t of the exponential moving average v t = \u03b2 2 \u00b7 v t\u22121 + (1 \u2212 \u03b2 2 ) \u00b7 g 2 t (where g 2 t indicates the elementwise square g t g t ) can be written as a function of the gradients at all previous timesteps:\nv t = (1 \u2212 \u03b2 2 ) t i=1 \u03b2 t\u2212i 2 \u00b7 g 2 i (1)\nWe wish to know how E[v t ], the expected value of the exponential moving average at timestep t, relates to the true second moment E[g 2 t ], so we can correct for the discrepancy between the two. Taking expectations of the left-hand and right-hand sides of eq. (1):\nE[v t ] = E (1 \u2212 \u03b2 2 ) t i=1 \u03b2 t\u2212i 2 \u00b7 g 2 i (2) = E[g 2 t ] \u00b7 (1 \u2212 \u03b2 2 ) t i=1 \u03b2 t\u2212i 2 + \u03b6 (3) = E[g 2 t ] \u00b7 (1 \u2212 \u03b2 t 2 ) + \u03b6(4)\nwhere \u03b6 = 0 if the true second moment E[g 2 i ] is stationary; otherwise \u03b6 can be kept small since the exponential decay rate \u03b2 1 can (and should) be chosen such that the exponential moving average assigns small weights to gradients too far in the past. What is left is the term (1 \u2212 \u03b2 t 2 ) which is caused by initializing the running average with zeros. In algorithm 1 we therefore divide by this term to correct the initialization bias.\n\nIn case of sparse gradients, for a reliable estimate of the second moment one needs to average over many gradients by chosing a small value of \u03b2 2 ; however it is exactly this case of small \u03b2 2 where a lack of initialisation bias correction would lead to initial steps that are much larger.\n\n\nCONVERGENCE ANALYSIS\n\nWe analyze the convergence of Adam using the online learning framework proposed in (Zinkevich, 2003). Given an arbitrary, unknown sequence of convex cost functions f 1 (\u03b8), f 2 (\u03b8),..., f T (\u03b8). At each time t, our goal is to predict the parameter \u03b8 t and evaluate it on a previously unknown cost function f t . Since the nature of the sequence is unknown in advance, we evaluate our algorithm using the regret, that is the sum of all the previous difference between the online prediction f t (\u03b8 t ) and the best fixed point parameter f t (\u03b8 * ) from a feasible set X for all the previous steps. Concretely, the regret is defined as:\nR(T ) = T t=1 [f t (\u03b8 t ) \u2212 f t (\u03b8 * )](5)\nwhere \u03b8 * = arg min \u03b8\u2208X T t=1 f t (\u03b8). We show Adam has O( \u221a T ) regret bound and a proof is given in the appendix. Our result is comparable to the best known bound for this general convex online learning problem. We also use some definitions simplify our notation, where g t \u2207f t (\u03b8 t ) and g t,i as the i th element. We define g 1:t,i \u2208 R t as a vector that contains the i th dimension of the gradients over all iterations till t, g 1:t,i = [g 1,i , g 2,i , \u00b7 \u00b7 \u00b7 , g t,i ]. Also, we define \u03b3 \u03b2 2 1 \u221a \u03b22 . Our following theorem holds when the learning rate \u03b1 t is decaying at a rate of t \u2212 1 2 and first moment running average coefficient \u03b2 1,t decay exponentially with \u03bb, that is typically close to 1, e.g. 1 \u2212 10 \u22128 . Theorem 4.1. Assume that the function f t has bounded gradients,\n\u2207f t (\u03b8) 2 \u2264 G, \u2207f t (\u03b8) \u221e \u2264 G \u221e for all \u03b8 \u2208 R d and distance between any \u03b8 t generated by Adam is bounded, \u03b8 n \u2212 \u03b8 m 2 \u2264 D, \u03b8 m \u2212 \u03b8 n \u221e \u2264 D \u221e for any m, n \u2208 {1, ..., T }, and \u03b2 1 , \u03b2 2 \u2208 [0, 1) satisfy \u03b2 2 1 \u221a \u03b22 < 1. Let \u03b1 t = \u03b1 \u221a t\nand \u03b2 1,t = \u03b2 1 \u03bb t\u22121 , \u03bb \u2208 (0, 1). Adam achieves the following guarantee, for all T \u2265 1.\nR(T ) \u2264 D 2 2\u03b1(1 \u2212 \u03b2 1 ) d i=1 T v T,i + \u03b1(1 + \u03b2 1 )G \u221e (1 \u2212 \u03b2 1 ) \u221a 1 \u2212 \u03b2 2 (1 \u2212 \u03b3) 2 d i=1 g 1:T,i 2 + d i=1 D 2 \u221e G \u221e \u221a 1 \u2212 \u03b2 2 2\u03b1(1 \u2212 \u03b2 1 )(1 \u2212 \u03bb) 2\nOur Theorem 4.1 implies when the data features are sparse and bounded gradients, the summation term can be much smaller than its upper bound\nd i=1 g 1:T,i 2 << dG \u221e \u221a T and d i=1\nT v T,i << dG \u221e \u221a T , in particular if the class of function and data features are in the form of section 1.2 in (Duchi et al., 2011). Their results for the expected value E[ d i=1 g 1:T,i 2 ] also apply to Adam. In particular, the adaptive method, such as Adam and Adagrad, can achieve O(log d\n\u221a T ), an improvement over O( \u221a dT )\nfor the non-adaptive method. Decaying \u03b2 1,t towards one is important in our theoretical analysis and also matches previous emperical findings, e.g. (Sutskever et al., 2013) suggests reducing the momentum coefficient in the end of training can improve convergence.\n\nFinally, we can show the average regret of Adam converges, Corollary 4.2. Assume that the function f t has bounded gradients, \u2207f t (\u03b8) 2 \u2264 G, \u2207f t (\u03b8) \u221e \u2264 G \u221e for all \u03b8 \u2208 R d and distance between any \u03b8 t generated by Adam is bounded, \u03b8 n \u2212 \u03b8 m 2 \u2264 D, \u03b8 m \u2212 \u03b8 n \u221e \u2264 D \u221e for any m, n \u2208 {1, ..., T }. Adam achieves the following guarantee, for all T \u2265 1.\nR(T ) T = O( 1 \u221a T )\nThis result can be obtained by using Theorem 4.1 and\nd i=1 g 1:T,i 2 \u2264 dG \u221e \u221a T . Thus, lim T \u2192\u221e R(T ) T = 0.\n\nRELATED WORK\n\nOptimization methods bearing a direct relation to Adam are RMSProp (Tieleman & Hinton, 2012;Graves, 2013) and AdaGrad (Duchi et al., 2011); these relationships are discussed below. Other stochastic optimization methods include vSGD (Schaul et al., 2012), AdaDelta (Zeiler, 2012) and the natural Newton method from Roux & Fitzgibbon (2010), all setting stepsizes by estimating curvature from first-order information. The Sum-of-Functions Optimizer (SFO) (Sohl-Dickstein et al., 2014) is a quasi-Newton method based on minibatches, but (unlike Adam) has memory requirements linear in the number of minibatch partitions of a dataset, which is often infeasible on memory-constrained systems such as a GPU. Like natural gradient descent (NGD) (Amari, 1998), Adam employs a preconditioner that adapts to the geometry of the data, since v t is an approximation to the diagonal of the Fisher information matrix (Pascanu & Bengio, 2013); however, Adam's preconditioner (like AdaGrad's) is more conservative in its adaption than vanilla NGD by preconditioning with the square root of the inverse of the diagonal Fisher information matrix approximation. In ,\n\nRMSProp: An optimization method closely related to Adam is RMSProp (Tieleman & Hinton, 2012). A version with momentum has sometimes been used (Graves, 2013). There are a few important differences between RMSProp with momentum and Adam: RMSProp with momentum generates its parameter updates using a momentum on the rescaled gradient, whereas Adam updates are directly estimated using a running average of first and second moment of the gradient. RMSProp also lacks a bias-correction term; this matters most in case of a small value \u03b2 2 (required in case of sparse gradients), since in that case not correcting the bias leads to very large stepsizes and often divergence, as we also empirically demonstrate in section 6.4.\n\nAdaGrad: An algorithm that works well for sparse gradients is AdaGrad (Duchi et al., 2011). Its basic version updates parameters as\n\u03b8 t+1 = \u03b8 t \u2212 \u03b1 \u00b7 g t / t i=1 g 2 t .\nNote that if we choose \u03b2 2 to be infinitesimally close to 1 from below, then lim \u03b22\u21921 v t = t \u22121 \u00b7 t i=1 g 2 t . AdaGrad corresponds to a version of Adam with \u03b2 1 = 0, infinitesimal (1 \u2212 \u03b2 2 ) and a replacement of \u03b1 by an annealed version\n\u03b1 t = \u03b1 \u00b7 t \u22121/2 , namely \u03b8 t \u2212 \u03b1 \u00b7 t \u22121/2 \u00b7 m t / lim \u03b22\u21921 v t = \u03b8 t \u2212 \u03b1 \u00b7 t \u22121/2 \u00b7 g t / t \u22121 \u00b7 t i=1 g 2 t = \u03b8 t \u2212 \u03b1 \u00b7 g t / t i=1 g 2 t .\nNote that this direct correspondence between Adam and Adagrad does not hold when removing the bias-correction terms; without bias correction, like in RMSProp, a \u03b2 2 infinitesimally close to 1 would lead to infinitely large bias, and infinitely large parameter updates.\n\n\nEXPERIMENTS\n\nTo empirically evaluate the proposed method, we investigated different popular machine learning models, including logistic regression, multilayer fully connected neural networks and deep convolutional neural networks. Using large models and datasets, we demonstrate Adam can efficiently solve practical deep learning problems.\n\nWe use the same parameter initialization when comparing different optimization algorithms. The hyper-parameters, such as learning rate and momentum, are searched over a dense grid and the results are reported using the best hyper-parameter setting.\n\n\nEXPERIMENT: LOGISTIC REGRESSION\n\nWe evaluate our proposed method on L2-regularized multi-class logistic regression using the MNIST dataset. Logistic regression has a well-studied convex objective, making it suitable for comparison of different optimizers without worrying about local minimum issues. The stepsize \u03b1 in our logistic regression experiments is adjusted by 1/ \u221a t decay, namely \u03b1 t = \u03b1 \u221a t that matches with our theoratical prediction from section 4. The logistic regression classifies the class label directly on the 784 dimension image vectors. We compare Adam to accelerated SGD with Nesterov momentum and Adagrad using minibatch size of 128. According to Figure 1, we found that the Adam yields similar convergence as SGD with momentum and both converge faster than Adagrad.\n\nAs discussed in (Duchi et al., 2011), Adagrad can efficiently deal with sparse features and gradients as one of its main theoretical results whereas SGD is low at learning rare features. Adam with 1/ \u221a t decay on its stepsize should theoratically match the performance of Adagrad. We examine the sparse feature problem using IMDB movie review dataset from (Maas et al., 2011). We pre-process the IMDB movie reviews into bag-of-words (BoW) feature vectors including the first 10,000 most frequent words. The 10,000 dimension BoW feature vector for each review is highly sparse. As suggested in (Wang & Manning, 2013), 50% dropout noise can be applied to the BoW features during training to prevent over-fitting. In figure 1, Adagrad outperforms SGD with Nesterov momentum by a large margin both with and without dropout noise. Adam converges as fast as Adagrad. The empirical performance of Adam is consistent with our theoretical findings in sections 2 and 4. Similar to Adagrad, Adam can take advantage of sparse features and obtain faster convergence rate than normal SGD with momentum.\n\n\nEXPERIMENT: MULTI-LAYER NEURAL NETWORKS\n\nMulti-layer neural network are powerful models with non-convex objective functions. Although our convergence analysis does not apply to non-convex problems, we empirically found that Adam often outperforms other methods in such cases. In our experiments, we made model choices that are consistent with previous publications in the area; a neural network model with two fully connected hidden layers with 1000 hidden units each and ReLU activation are used for this experiment with minibatch size of 128.\n\nFirst, we study different optimizers using the standard deterministic cross-entropy objective function with L 2 weight decay on the parameters to prevent over-fitting. The sum-of-functions (SFO) method (Sohl-Dickstein et al., 2014) is a recently proposed quasi-Newton method that works with minibatches of data and has shown good performance on optimization of multi-layer neural networks. We used their implementation and compared with Adam to train such models. Figure 2 shows that Adam makes faster progress in terms of both the number of iterations and wall-clock time. Due to the cost of updating curvature information, SFO is 5-10x slower per iteration compared to Adam, and has a memory requirement that is linear in the number minibatches.\n\nStochastic regularization methods, such as dropout, are an effective way to prevent over-fitting and often used in practice due to their simplicity. SFO assumes deterministic subfunctions, and indeed failed to converge on cost functions with stochastic regularization. We compare the effectiveness of Adam to other stochastic first order methods on multi-layer neural networks trained with dropout noise. Figure 2 shows our results; Adam shows better convergence than other methods.\n\n\nEXPERIMENT: CONVOLUTIONAL NEURAL NETWORKS\n\nConvolutional neural networks (CNNs) with several layers of convolution, pooling and non-linear units have shown considerable success in computer vision tasks. Unlike most fully connected neural nets, weight sharing in CNNs results in vastly different gradients in different layers. A smaller learning rate for the convolution layers is often used in practice when applying SGD. We show the effectiveness of Adam in deep CNNs. Our CNN architecture has three alternating stages of 5x5 convolution filters and 3x3 max pooling with stride of 2 that are followed by a fully connected layer of 1000 rectified linear hidden units (ReLU's). The input image are pre-processed by whitening, and dropout noise is applied to the input layer and fully connected layer. The minibatch size is also set to 128 similar to previous experiments.\n\nInterestingly, although both Adam and Adagrad make rapid progress lowering the cost in the initial stage of the training, shown in Figure 3 (left), Adam and SGD eventually converge considerably faster than Adagrad for CNNs shown in Figure 3 (right). We notice the second moment estimate v t vanishes to zeros after a few epochs and is dominated by the in algorithm 1. The second moment estimate is therefore a poor approximation to the geometry of the cost function in CNNs comparing to fully connected network from Section 6.2. Whereas, reducing the minibatch variance through the first moment is more important in CNNs and contributes to the speed-up. As a result, Adagrad converges much slower than others in this particular experiment. Though Adam shows marginal improvement over SGD with momentum, it adapts learning rate scale for different layers instead of hand picking manually as in SGD.  Figure 4: Effect of bias-correction terms (red line) versus no bias correction terms (green line) after 10 epochs (left) and 100 epochs (right) on the loss (y-axes) when learning a Variational Auto-Encoder (VAE) (Kingma & Welling, 2013), for different settings of stepsize \u03b1 (x-axes) and hyperparameters \u03b2 1 and \u03b2 2 .\n\n\nEXPERIMENT: BIAS-CORRECTION TERM\n\nWe also empirically evaluate the effect of the bias correction terms explained in sections 2 and 3. Discussed in section 5, removal of the bias correction terms results in a version of RMSProp (Tieleman & Hinton, 2012) with momentum. We vary the \u03b2 1 and \u03b2 2 when training a variational autoencoder (VAE) with the same architecture as in (Kingma & Welling, 2013) with a single hidden layer with 500 hidden units with softplus nonlinearities and a 50-dimensional spherical Gaussian latent variable. We iterated over a broad range of hyper-parameter choices, i.e. \u03b2 1 \u2208 [0, 0.9] and \u03b2 2 \u2208 [0.99, 0.999, 0.9999], and log 10 (\u03b1) \u2208 [\u22125, ..., \u22121]. Values of \u03b2 2 close to 1, required for robustness to sparse gradients, results in larger initialization bias; therefore we expect the bias correction term is important in such cases of slow decay, preventing an adverse effect on optimization.\n\nIn Figure 4, values \u03b2 2 close to 1 indeed lead to instabilities in training when no bias correction term was present, especially at first few epochs of the training. The best results were achieved with small values of (1 \u2212 \u03b2 2 ) and bias correction; this was more apparent towards the end of optimization when gradients tends to become sparser as hidden units specialize to specific patterns. In summary, Adam performed equal or better than RMSProp, regardless of hyper-parameter setting.\n\n\nCONCLUSION\n\nWe have introduced a simple and computationally efficient algorithm for gradient-based optimization of stochastic objective functions. Our method is aimed towards machine learning problems with large datasets and/or high-dimensional parameter spaces. The method combines the advantages of two recently popular optimization methods: the ability of AdaGrad to deal with sparse gradients, and the ability of RMSProp to deal with non-stationary objectives. The method is straightforward to implement and requires little memory. The experiments confirm the analysis on the rate of convergence in convex problems. Overall, we found Adam to be robust and well-suited to a wide range of non-convex optimization problems in the field machine learning.\n\n\nACKNOWLEDGMENTS\n\nThis paper would probably not have existed without the support of Google Deepmind, the collaborations it supports and interesting conversations they sparked. We would like to thank Ivo Danihelka for helpful discussion and give special thanks to Tom Schaul for coining the name Adam. Experiments in this work were partly carried out on the Dutch national e-infrastructure with the support of SURF Foundation. \n\u03bbf (x) + (1 \u2212 \u03bb)f (y) \u2265 f (\u03bbx + (1 \u2212 \u03bb)y)\nAlso, notice that a convex function can be lower bounded by a hyperplane at its tangent. Lemma 9.2. If a function f : R d \u2192 R is convex, then for all x, y \u2208 R d ,\nf (y) \u2265 f (x) + \u2207f (x) T (y \u2212 x)\nThe above lemma can be used to upper bound the regret and our proof for the main theorem is constructed by substituting the hyperplane with the Adam update rules.\n\nThe following two lemmas are used to support our main theorem. We also use some definitions simplify our notation, where g t \u2207f t (\u03b8 t ) and g t,i as the i th element. We define g 1:t,i \u2208 R t as a vector that contains the i th dimension of the gradients over all iterations till t, g 1:t,i = [g 1,i , g 2,i , \u00b7 \u00b7 \u00b7 , g t,i ] Lemma 9.3. Let g t = \u2207f t (\u03b8 t ) and g 1:t be defined as above and bounded, g t 2 \u2264 G, g t \u221e \u2264 G \u221e . Then,\nT t=1 g 2 t,i t \u2264 2G \u221e g 1:T,i 2\nProof. We will prove the inequality using induction over T.\n\nThe base case for T = 1, we have g 2 1,i \u2264 2G \u221e g 1,i 2 .\n\nFor the inductive step,\nT t=1 g 2 t,i t = T \u22121 t=1 g 2 t,i t + g 2 T,i T \u2264 2G \u221e g 1:T \u22121,i 2 + g 2 T,i T = 2G \u221e g 1:T,i 2 2 \u2212 g 2 T + g 2 T,i T From, g 1:T,i 2 2 \u2212 g 2 T,i + g 4\nT ,i 4 g 1:T ,i 2 2 \u2265 g 1:T,i 2 2 \u2212 g 2 T,i , we can take square root of both side and have,\ng 1:T,i 2 2 \u2212 g 2 T,i \u2264 g 1:T,i 2 \u2212 g 2 T,i 2 g 1:T,i 2 \u2264 g 1:T,i 2 \u2212 g 2 T,i 2 T G 2 \u221e\nRearrange the inequality and substitute the g 1:T,i 2 2 \u2212 g 2 T,i term,\nG \u221e g 1:T,i 2 2 \u2212 g 2 T + g 2 T,i T \u2264 2G \u221e g 1:T,i 2\nLemma 9.4. Let \u03b3 \u03b2 2 1 \u221a \u03b22 . For \u03b2 1 , \u03b2 2 \u2208 [0, 1) that satisfy \u03b2 2 1 \u221a \u03b22 < 1 and bounded g t , g t 2 \u2264 G, g t \u221e \u2264 G \u221e , the following inequality holds\nT t=1 m 2 t,i t v t,i \u2264 2 1 \u2212 \u03b3 1 \u221a 1 \u2212 \u03b2 2 g 1:T,i 2\nProof. Under the assumption,\n\u221a 1\u2212\u03b2 t 2 (1\u2212\u03b2 t 1 ) 2 \u2264 1\n(1\u2212\u03b21) 2 . We can expand the last term in the summation using the update rules in Algorithm 1,\nT t=1 m 2 t,i t v t,i = T \u22121 t=1 m 2 t,i t v t,i + 1 \u2212 \u03b2 T 2 (1 \u2212 \u03b2 T 1 ) 2 ( T k=1 (1 \u2212 \u03b2 1 )\u03b2 T \u2212k 1 g k,i ) 2 T T j=1 (1 \u2212 \u03b2 2 )\u03b2 T \u2212j 2 g 2 j,i \u2264 T \u22121 t=1 m 2 t,i t v t,i + 1 \u2212 \u03b2 T 2 (1 \u2212 \u03b2 T 1 ) 2 T k=1 T ((1 \u2212 \u03b2 1 )\u03b2 T \u2212k 1 g k,i ) 2 T T j=1 (1 \u2212 \u03b2 2 )\u03b2 T \u2212j 2 g 2\nj,i \u03b8 m \u2212 \u03b8 n \u221e \u2264 D \u221e for any m, n \u2208 {1, ..., T }, and \u03b2 1 , \u03b2 2 \u2208 [0, 1) satisfy \u03b2 2 1 \u221a \u03b22 < 1. Let \u03b1 t = \u03b1 \u221a t and \u03b2 1,t = \u03b2 1 \u03bb t\u22121 , \u03bb \u2208 (0, 1). Adam achieves the following guarantee, for all T \u2265 1.\nR(T ) \u2264 D 2 2\u03b1(1 \u2212 \u03b2 1 ) d i=1 T v T,i + \u03b1(\u03b2 1 + 1)G \u221e (1 \u2212 \u03b2 1 ) \u221a 1 \u2212 \u03b2 2 (1 \u2212 \u03b3) 2 d i=1 g 1:T,i 2 + d i=1 D 2 \u221e G \u221e \u221a 1 \u2212 \u03b2 2 2\u03b1(1 \u2212 \u03b2 1 )(1 \u2212 \u03bb) 2\nProof. Using Lemma 9.2, we have,\nf t (\u03b8 t ) \u2212 f t (\u03b8 * ) \u2264 g T t (\u03b8 t \u2212 \u03b8 * ) = d i=1 g t,i (\u03b8 t,i \u2212 \u03b8 * ,i )\nFrom the update rules presented in algorithm 1,\n\u03b8 t+1 = \u03b8 t \u2212 \u03b1 t m t / v t = \u03b8 t \u2212 \u03b1 t 1 \u2212 \u03b2 t 1 \u03b2 1,t \u221a v t m t\u22121 + (1 \u2212 \u03b2 1,t ) \u221a v t g t\nWe focus on the i th dimension of the parameter vector \u03b8 t \u2208 R d . Subtract the scalar \u03b8 * ,i and square both sides of the above update rule, we have,\n(\u03b8 t+1,i \u2212 \u03b8 * ,i ) 2 =(\u03b8 t,i \u2212 \u03b8 * ,i ) 2 \u2212 2\u03b1 t 1 \u2212 \u03b2 t 1 ( \u03b2 1,t v t,i m t\u22121,i + (1 \u2212 \u03b2 1,t ) v t,i g t,i )(\u03b8 t,i \u2212 \u03b8 * ,i ) + \u03b1 2 t ( m t,i v t,i ) 2\nWe can rearrange the above equation and use Young's inequality, ab \u2264 a 2 /2 + b 2 /2. Also, it can be shown that v t,i = t j=1 (1 \u2212 \u03b2 2 )\u03b2 t\u2212j 2 g 2 j,i / 1 \u2212 \u03b2 t 2 \u2264 g 1:t,i 2 and \u03b2 1,t \u2264 \u03b2 1 . Then\ng t,i (\u03b8 t,i \u2212 \u03b8 * ,i ) = (1 \u2212 \u03b2 t 1 ) v t,i 2\u03b1 t (1 \u2212 \u03b2 1,t ) (\u03b8 t,i \u2212 \u03b8 * ,t ) 2 \u2212 (\u03b8 t+1,i \u2212 \u03b8 * ,i ) 2 + \u03b2 1,t (1 \u2212 \u03b2 1,t ) v 1 4 t\u22121,i \u221a \u03b1 t\u22121 (\u03b8 * ,i \u2212 \u03b8 t,i ) \u221a \u03b1 t\u22121 m t\u22121,i v 1 4 t\u22121,i + \u03b1 t (1 \u2212 \u03b2 t 1 ) v t,i 2(1 \u2212 \u03b2 1,t ) ( m t,i v t,i ) 2 \u2264 1 2\u03b1 t (1 \u2212 \u03b2 1 ) (\u03b8 t,i \u2212 \u03b8 * ,t ) 2 \u2212 (\u03b8 t+1,i \u2212 \u03b8 * ,i ) 2 v t,i + \u03b2 1,t 2\u03b1 t\u22121 (1 \u2212 \u03b2 1,t ) (\u03b8 * ,i \u2212 \u03b8 t,i ) 2 v t\u22121,i + \u03b2 1 \u03b1 t\u22121 2(1 \u2212 \u03b2 1 ) m 2 t\u22121,i v t\u22121,i + \u03b1 t 2(1 \u2212 \u03b2 1 ) m 2 t,i v t,i\nWe apply Lemma 9.4 to the above inequality and derive the regret bound by summing across all the dimensions for i \u2208 1, ..., d in the upper bound of f t (\u03b8 t ) \u2212 f t (\u03b8 * ) and the sequence of convex functions for t \u2208 1, ..., T :\nR(T ) \u2264 d i=1 1 2\u03b1 1 (1 \u2212 \u03b2 1 ) (\u03b8 1,i \u2212 \u03b8 * ,i ) 2 v 1,i + d i=1 T t=2 1 2(1 \u2212 \u03b2 1 ) (\u03b8 t,i \u2212 \u03b8 * ,i ) 2 ( v t,i \u03b1 t \u2212 v t\u22121,i \u03b1 t\u22121 ) + \u03b2 1 \u03b1G \u221e (1 \u2212 \u03b2 1 ) \u221a 1 \u2212 \u03b2 2 (1 \u2212 \u03b3) 2 d i=1 g 1:T,i 2 + \u03b1G \u221e (1 \u2212 \u03b2 1 ) \u221a 1 \u2212 \u03b2 2 (1 \u2212 \u03b3) 2 d i=1 g 1:T,i 2 + d i=1 T t=1 \u03b2 1,t 2\u03b1 t (1 \u2212 \u03b2 1,t ) (\u03b8 * ,i \u2212 \u03b8 t,i ) 2 v t,i\nFigure 1 :\n1Logistic regression training negative log likelihood on MNIST images and IMDB movie reviews with 10,000 bag-of-words (BoW) feature vectors.\n\nFigure 2 :Figure 3 :\n23Training of multilayer neural networks on MNIST images. (a) Neural networks using dropout stochastic regularization. (b) Neural networks with deterministic cost function. We compare with the sum-of-functions (SFO) optimizer (Sohl-Dickstein et al.Convolutional neural networks training cost. (left) Training cost for the first three epochs. (right) Training cost over 45 epochs. CIFAR-10 with c64-c64-c128-1000 architecture.\n\n\nDefinition 9.1. A function f : R d \u2192 R is convex if for all x, y \u2208 R d , for all \u03bb \u2208 [0, 1],9 APPENDIX \n\n9.1 CONVERGENCE PROOF \n\n\nand first moment running average coefficient \u03b2 1,t decay exponentially with \u03bb, that is typically close to 1, e.g. 1 \u2212 10 \u22128 . Theorem 9.5. Assume that the function f t has bounded gradients, \u2207f t (\u03b8) 2 \u2264 G, \u2207f t (\u03b8) \u221e \u2264 G \u221e for all \u03b8 \u2208 R d and distance between any \u03b8 t generated by Adam is bounded, \u03b8 n \u2212 \u03b8 m 2 \u2264 D,\nSimilarly, we can upper bound the rest of the terms in the summation.For \u03b3 < 1, using the upper bound on the arithmetic-geometric series,To simplify the notation, we define \u03b3 \u03b2 2 1 \u221a \u03b22 . Intuitively, our following theorem holds when the learning rate \u03b1 t is decaying at a rate of t \u2212 1 2 \u2264 D, \u03b8 m \u2212 \u03b8 n \u221e \u2264 D \u221e , we have:We can use arithmetic geometric series upper bound for the last term:Therefore, we have the following regret bound:\nNatural gradient works efficiently in learning. Amari, Shun-Ichi, Neural computation. 102Amari, Shun-Ichi. Natural gradient works efficiently in learning. Neural computation, 10(2):251-276, 1998.\n\nRecent advances in deep learning for speech research at microsoft. Li Deng, Li, Jinyu, Huang, Jui-Ting, Yao, Kaisheng, Yu, Dong, Seide, Frank, Seltzer, Michael, Zweig, Geoff, He, Xiaodong, Jason Williams, Deng, Li, Li, Jinyu, Huang, Jui-Ting, Yao, Kaisheng, Yu, Dong, Seide, Frank, Seltzer, Michael, Zweig, Geoff, He, Xiaodong, Williams, Jason, et al. Recent advances in deep learning for speech research at microsoft. ICASSP 2013, 2013.\n\nAdaptive subgradient methods for online learning and stochastic optimization. John Duchi, Elad Hazan, Yoram Singer, The Journal of Machine Learning Research. 12Duchi, John, Hazan, Elad, and Singer, Yoram. Adaptive subgradient methods for online learning and stochastic optimization. The Journal of Machine Learning Research, 12:2121-2159, 2011.\n\nGenerating sequences with recurrent neural networks. Alex Graves, arXiv:1308.0850arXiv preprintGraves, Alex. Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850, 2013.\n\nSpeech recognition with deep recurrent neural networks. Alex Graves, Mohamed Hinton, Geoffrey , 2013 IEEE International Conference on. IEEEGraves, Alex, Mohamed, Abdel-rahman, and Hinton, Geoffrey. Speech recognition with deep recurrent neural networks. In Acoustics, Speech and Signal Processing (ICASSP), 2013 IEEE International Conference on, pp. 6645-6649. IEEE, 2013.\n\nReducing the dimensionality of data with neural networks. G E Hinton, R R Salakhutdinov, Science. 3135786Hinton, G.E. and Salakhutdinov, R.R. Reducing the dimensionality of data with neural networks. Science, 313 (5786):504-507, 2006.\n\nDeep neural networks for acoustic modeling in speech recognition: The shared views of four research groups. Geoffrey Hinton, Deng, Li, Yu, Dong, George E Dahl, Mohamed, Jaitly, Navdeep, Senior, Andrew, Vanhoucke, Vincent, Nguyen, Patrick, Tara N Sainath, Signal Processing Magazine. 296IEEEHinton, Geoffrey, Deng, Li, Yu, Dong, Dahl, George E, Mohamed, Abdel-rahman, Jaitly, Navdeep, Senior, Andrew, Vanhoucke, Vincent, Nguyen, Patrick, Sainath, Tara N, et al. Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups. Signal Processing Magazine, IEEE, 29(6):82-97, 2012a.\n\nImproving neural networks by preventing co-adaptation of feature detectors. Geoffrey E Hinton, Srivastava, Nitish, Alex Krizhevsky, Ilya Sutskever, Salakhutdinov, R Ruslan, arXiv:1207.0580arXiv preprintHinton, Geoffrey E, Srivastava, Nitish, Krizhevsky, Alex, Sutskever, Ilya, and Salakhutdinov, Ruslan R. Im- proving neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580, 2012b.\n\nAuto-Encoding Variational Bayes. Diederik P Kingma, Max Welling, The 2nd International Conference on Learning Representations (ICLR). Kingma, Diederik P and Welling, Max. Auto-Encoding Variational Bayes. In The 2nd International Conference on Learning Representations (ICLR), 2013.\n\nImagenet classification with deep convolutional neural networks. Alex Krizhevsky, Ilya Sutskever, Geoffrey E Hinton, Advances in neural information processing systems. Krizhevsky, Alex, Sutskever, Ilya, and Hinton, Geoffrey E. Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems, pp. 1097-1105, 2012.\n\nLearning word vectors for sentiment analysis. Andrew L Maas, Raymond E Daly, Peter T Pham, Huang, Dan, Ng, Y Andrew, Christopher Potts, Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies. the 49th Annual Meeting of the Association for Computational Linguistics: Human Language TechnologiesAssociation for Computational Linguistics1Maas, Andrew L, Daly, Raymond E, Pham, Peter T, Huang, Dan, Ng, Andrew Y, and Potts, Christopher. Learning word vectors for sentiment analysis. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies-Volume 1, pp. 142-150. Association for Computational Linguistics, 2011.\n\nRevisiting natural gradient for deep networks. Razvan Pascanu, Yoshua Bengio, arXiv:1301.3584arXiv preprintPascanu, Razvan and Bengio, Yoshua. Revisiting natural gradient for deep networks. arXiv preprint arXiv:1301.3584, 2013.\n\nA fast natural newton method. Nicolas L Roux, Andrew W Fitzgibbon, Proceedings of the 27th International Conference on Machine Learning (ICML-10). the 27th International Conference on Machine Learning (ICML-10)Roux, Nicolas L and Fitzgibbon, Andrew W. A fast natural newton method. In Proceedings of the 27th International Conference on Machine Learning (ICML-10), pp. 623-630, 2010.\n\nTom Schaul, Sixin Zhang, Yann Lecun, arXiv:1206.1106No more pesky learning rates. arXiv preprintSchaul, Tom, Zhang, Sixin, and LeCun, Yann. No more pesky learning rates. arXiv preprint arXiv:1206.1106, 2012.\n\nFast large-scale optimization by unifying stochastic gradient and quasi-newton methods. Sohl-Dickstein, Jascha, Ben Poole, Ganguli, Surya, Proceedings of the 31st International Conference on Machine Learning (ICML-14). the 31st International Conference on Machine Learning (ICML-14)Sohl-Dickstein, Jascha, Poole, Ben, and Ganguli, Surya. Fast large-scale optimization by unifying stochas- tic gradient and quasi-newton methods. In Proceedings of the 31st International Conference on Machine Learning (ICML-14), pp. 604-612, 2014.\n\nOn the importance of initialization and momentum in deep learning. Sutskever, Ilya, Martens, James, George Dahl, Geoffrey Hinton, Proceedings of the 30th International Conference on Machine Learning (ICML-13). the 30th International Conference on Machine Learning (ICML-13)Sutskever, Ilya, Martens, James, Dahl, George, and Hinton, Geoffrey. On the importance of initialization and momentum in deep learning. In Proceedings of the 30th International Conference on Machine Learning (ICML-13), pp. 1139-1147, 2013.\n\nLecture 6.5 -RMSProp, COURSERA: Neural Networks for Machine Learning. T Tieleman, G Hinton, Technical reportTieleman, T. and Hinton, G. Lecture 6.5 -RMSProp, COURSERA: Neural Networks for Machine Learning. Technical report, 2012.\n\nFast dropout training. Sida Wang, Christopher Manning, Proceedings of the 30th International Conference on Machine Learning (ICML-13). the 30th International Conference on Machine Learning (ICML-13)Wang, Sida and Manning, Christopher. Fast dropout training. In Proceedings of the 30th International Confer- ence on Machine Learning (ICML-13), pp. 118-126, 2013.\n\nZinkevich, Martin. Online convex programming and generalized infinitesimal gradient ascent. Matthew D Zeiler, Adadelta, arXiv:1212.5701An adaptive learning rate method. arXiv preprintZeiler, Matthew D. Adadelta: An adaptive learning rate method. arXiv preprint arXiv:1212.5701, 2012. Zinkevich, Martin. Online convex programming and generalized infinitesimal gradient ascent. 2003.\n", "annotations": {"author": "[{\"end\":128,\"start\":46},{\"end\":190,\"start\":129}]", "publisher": null, "author_last_name": "[{\"end\":63,\"start\":57},{\"end\":141,\"start\":135}]", "author_first_name": "[{\"end\":54,\"start\":46},{\"end\":56,\"start\":55},{\"end\":134,\"start\":129}]", "author_affiliation": "[{\"end\":127,\"start\":81},{\"end\":189,\"start\":143}]", "title": "[{\"end\":43,\"start\":1},{\"end\":233,\"start\":191}]", "venue": null, "abstract": "[{\"end\":1492,\"start\":282}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2589,\"start\":2570},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2613,\"start\":2589},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2642,\"start\":2613},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2663,\"start\":2642},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2683,\"start\":2663},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2794,\"start\":2772},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3599,\"start\":3579},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3678,\"start\":3653},{\"end\":12358,\"start\":12341},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":14512,\"start\":14492},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":14883,\"start\":14859},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":15566,\"start\":15541},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15579,\"start\":15566},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15612,\"start\":15592},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":15727,\"start\":15706},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":15752,\"start\":15738},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":15812,\"start\":15788},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":15956,\"start\":15927},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":16225,\"start\":16212},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":16401,\"start\":16377},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":16715,\"start\":16690},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16779,\"start\":16765},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":17435,\"start\":17415},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":19587,\"start\":19567},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":19926,\"start\":19907},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20166,\"start\":20144},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":21419,\"start\":21390},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":24429,\"start\":24405},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":24908,\"start\":24884}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":31463,\"start\":31311},{\"attributes\":{\"id\":\"fig_1\"},\"end\":31911,\"start\":31464},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":32043,\"start\":31912}]", "paragraph": "[{\"end\":3151,\"start\":1508},{\"end\":4157,\"start\":3153},{\"end\":4868,\"start\":4159},{\"end\":5980,\"start\":5493},{\"end\":6659,\"start\":5994},{\"end\":7417,\"start\":6661},{\"end\":7622,\"start\":7419},{\"end\":7944,\"start\":7721},{\"end\":9977,\"start\":8032},{\"end\":11061,\"start\":10054},{\"end\":11371,\"start\":11105},{\"end\":11941,\"start\":11502},{\"end\":12233,\"start\":11943},{\"end\":12891,\"start\":12258},{\"end\":13721,\"start\":12935},{\"end\":14046,\"start\":13957},{\"end\":14340,\"start\":14200},{\"end\":14673,\"start\":14379},{\"end\":14974,\"start\":14711},{\"end\":15327,\"start\":14976},{\"end\":15401,\"start\":15349},{\"end\":16621,\"start\":15474},{\"end\":17343,\"start\":16623},{\"end\":17476,\"start\":17345},{\"end\":17753,\"start\":17515},{\"end\":18164,\"start\":17896},{\"end\":18506,\"start\":18180},{\"end\":18756,\"start\":18508},{\"end\":19549,\"start\":18792},{\"end\":20639,\"start\":19551},{\"end\":21186,\"start\":20683},{\"end\":21935,\"start\":21188},{\"end\":22419,\"start\":21937},{\"end\":23292,\"start\":22465},{\"end\":24510,\"start\":23294},{\"end\":25430,\"start\":24547},{\"end\":25920,\"start\":25432},{\"end\":26677,\"start\":25935},{\"end\":27105,\"start\":26697},{\"end\":27310,\"start\":27148},{\"end\":27506,\"start\":27344},{\"end\":27939,\"start\":27508},{\"end\":28032,\"start\":27973},{\"end\":28091,\"start\":28034},{\"end\":28116,\"start\":28093},{\"end\":28363,\"start\":28271},{\"end\":28523,\"start\":28452},{\"end\":28731,\"start\":28577},{\"end\":28814,\"start\":28786},{\"end\":28936,\"start\":28842},{\"end\":29411,\"start\":29208},{\"end\":29596,\"start\":29564},{\"end\":29721,\"start\":29674},{\"end\":29965,\"start\":29815},{\"end\":30319,\"start\":30120},{\"end\":30999,\"start\":30771}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":5492,\"start\":4869},{\"attributes\":{\"id\":\"formula_1\"},\"end\":7699,\"start\":7623},{\"attributes\":{\"id\":\"formula_2\"},\"end\":8031,\"start\":7945},{\"attributes\":{\"id\":\"formula_3\"},\"end\":10020,\"start\":9978},{\"attributes\":{\"id\":\"formula_4\"},\"end\":11104,\"start\":11062},{\"attributes\":{\"id\":\"formula_5\"},\"end\":11501,\"start\":11372},{\"attributes\":{\"id\":\"formula_6\"},\"end\":12934,\"start\":12892},{\"attributes\":{\"id\":\"formula_7\"},\"end\":13956,\"start\":13722},{\"attributes\":{\"id\":\"formula_8\"},\"end\":14199,\"start\":14047},{\"attributes\":{\"id\":\"formula_9\"},\"end\":14378,\"start\":14341},{\"attributes\":{\"id\":\"formula_10\"},\"end\":14710,\"start\":14674},{\"attributes\":{\"id\":\"formula_11\"},\"end\":15348,\"start\":15328},{\"attributes\":{\"id\":\"formula_12\"},\"end\":15458,\"start\":15402},{\"attributes\":{\"id\":\"formula_13\"},\"end\":17514,\"start\":17477},{\"attributes\":{\"id\":\"formula_14\"},\"end\":17895,\"start\":17754},{\"attributes\":{\"id\":\"formula_15\"},\"end\":27147,\"start\":27106},{\"attributes\":{\"id\":\"formula_16\"},\"end\":27343,\"start\":27311},{\"attributes\":{\"id\":\"formula_17\"},\"end\":27972,\"start\":27940},{\"attributes\":{\"id\":\"formula_18\"},\"end\":28270,\"start\":28117},{\"attributes\":{\"id\":\"formula_19\"},\"end\":28451,\"start\":28364},{\"attributes\":{\"id\":\"formula_20\"},\"end\":28576,\"start\":28524},{\"attributes\":{\"id\":\"formula_21\"},\"end\":28785,\"start\":28732},{\"attributes\":{\"id\":\"formula_22\"},\"end\":28841,\"start\":28815},{\"attributes\":{\"id\":\"formula_23\"},\"end\":29207,\"start\":28937},{\"attributes\":{\"id\":\"formula_24\"},\"end\":29563,\"start\":29412},{\"attributes\":{\"id\":\"formula_25\"},\"end\":29673,\"start\":29597},{\"attributes\":{\"id\":\"formula_26\"},\"end\":29814,\"start\":29722},{\"attributes\":{\"id\":\"formula_27\"},\"end\":30119,\"start\":29966},{\"attributes\":{\"id\":\"formula_28\"},\"end\":30770,\"start\":30320},{\"attributes\":{\"id\":\"formula_29\"},\"end\":31311,\"start\":31000}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1506,\"start\":1494},{\"attributes\":{\"n\":\"2\"},\"end\":5992,\"start\":5983},{\"attributes\":{\"n\":\"2.1\"},\"end\":7719,\"start\":7701},{\"attributes\":{\"n\":\"3\"},\"end\":10052,\"start\":10022},{\"attributes\":{\"n\":\"4\"},\"end\":12256,\"start\":12236},{\"attributes\":{\"n\":\"5\"},\"end\":15472,\"start\":15460},{\"attributes\":{\"n\":\"6\"},\"end\":18178,\"start\":18167},{\"attributes\":{\"n\":\"6.1\"},\"end\":18790,\"start\":18759},{\"attributes\":{\"n\":\"6.2\"},\"end\":20681,\"start\":20642},{\"attributes\":{\"n\":\"6.3\"},\"end\":22463,\"start\":22422},{\"attributes\":{\"n\":\"6.4\"},\"end\":24545,\"start\":24513},{\"attributes\":{\"n\":\"7\"},\"end\":25933,\"start\":25923},{\"attributes\":{\"n\":\"8\"},\"end\":26695,\"start\":26680},{\"end\":31322,\"start\":31312},{\"end\":31485,\"start\":31465}]", "table": "[{\"end\":32043,\"start\":32006}]", "figure_caption": "[{\"end\":31463,\"start\":31324},{\"end\":31911,\"start\":31488},{\"end\":32006,\"start\":31914}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":19438,\"start\":19430},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20273,\"start\":20265},{\"end\":21660,\"start\":21652},{\"end\":22350,\"start\":22342},{\"end\":23433,\"start\":23425},{\"end\":23534,\"start\":23526},{\"end\":24201,\"start\":24193},{\"end\":25443,\"start\":25435}]", "bib_author_first_name": "[{\"end\":33064,\"start\":33062},{\"end\":33189,\"start\":33184},{\"end\":33516,\"start\":33512},{\"end\":33528,\"start\":33524},{\"end\":33541,\"start\":33536},{\"end\":33837,\"start\":33833},{\"end\":34041,\"start\":34037},{\"end\":34057,\"start\":34050},{\"end\":34074,\"start\":34066},{\"end\":34414,\"start\":34413},{\"end\":34416,\"start\":34415},{\"end\":34426,\"start\":34425},{\"end\":34428,\"start\":34427},{\"end\":34707,\"start\":34699},{\"end\":34742,\"start\":34736},{\"end\":34744,\"start\":34743},{\"end\":34834,\"start\":34830},{\"end\":34836,\"start\":34835},{\"end\":35299,\"start\":35291},{\"end\":35301,\"start\":35300},{\"end\":35334,\"start\":35330},{\"end\":35351,\"start\":35347},{\"end\":35379,\"start\":35378},{\"end\":35680,\"start\":35672},{\"end\":35682,\"start\":35681},{\"end\":35694,\"start\":35691},{\"end\":35991,\"start\":35987},{\"end\":36008,\"start\":36004},{\"end\":36028,\"start\":36020},{\"end\":36030,\"start\":36029},{\"end\":36342,\"start\":36336},{\"end\":36344,\"start\":36343},{\"end\":36358,\"start\":36351},{\"end\":36360,\"start\":36359},{\"end\":36372,\"start\":36367},{\"end\":36374,\"start\":36373},{\"end\":36398,\"start\":36397},{\"end\":36418,\"start\":36407},{\"end\":37077,\"start\":37071},{\"end\":37093,\"start\":37087},{\"end\":37290,\"start\":37283},{\"end\":37292,\"start\":37291},{\"end\":37305,\"start\":37299},{\"end\":37307,\"start\":37306},{\"end\":37641,\"start\":37638},{\"end\":37655,\"start\":37650},{\"end\":37667,\"start\":37663},{\"end\":37962,\"start\":37959},{\"end\":38484,\"start\":38478},{\"end\":38499,\"start\":38491},{\"end\":38963,\"start\":38962},{\"end\":38975,\"start\":38974},{\"end\":39150,\"start\":39146},{\"end\":39168,\"start\":39157},{\"end\":39585,\"start\":39578},{\"end\":39587,\"start\":39586}]", "bib_author_last_name": "[{\"end\":32851,\"start\":32846},{\"end\":32862,\"start\":32853},{\"end\":33069,\"start\":33065},{\"end\":33073,\"start\":33071},{\"end\":33080,\"start\":33075},{\"end\":33087,\"start\":33082},{\"end\":33097,\"start\":33089},{\"end\":33102,\"start\":33099},{\"end\":33112,\"start\":33104},{\"end\":33116,\"start\":33114},{\"end\":33122,\"start\":33118},{\"end\":33129,\"start\":33124},{\"end\":33136,\"start\":33131},{\"end\":33145,\"start\":33138},{\"end\":33154,\"start\":33147},{\"end\":33161,\"start\":33156},{\"end\":33168,\"start\":33163},{\"end\":33172,\"start\":33170},{\"end\":33182,\"start\":33174},{\"end\":33198,\"start\":33190},{\"end\":33522,\"start\":33517},{\"end\":33534,\"start\":33529},{\"end\":33548,\"start\":33542},{\"end\":33844,\"start\":33838},{\"end\":34048,\"start\":34042},{\"end\":34064,\"start\":34058},{\"end\":34423,\"start\":34417},{\"end\":34442,\"start\":34429},{\"end\":34714,\"start\":34708},{\"end\":34720,\"start\":34716},{\"end\":34724,\"start\":34722},{\"end\":34728,\"start\":34726},{\"end\":34734,\"start\":34730},{\"end\":34749,\"start\":34745},{\"end\":34758,\"start\":34751},{\"end\":34766,\"start\":34760},{\"end\":34775,\"start\":34768},{\"end\":34783,\"start\":34777},{\"end\":34791,\"start\":34785},{\"end\":34802,\"start\":34793},{\"end\":34811,\"start\":34804},{\"end\":34819,\"start\":34813},{\"end\":34828,\"start\":34821},{\"end\":34844,\"start\":34837},{\"end\":35308,\"start\":35302},{\"end\":35320,\"start\":35310},{\"end\":35328,\"start\":35322},{\"end\":35345,\"start\":35335},{\"end\":35361,\"start\":35352},{\"end\":35376,\"start\":35363},{\"end\":35386,\"start\":35380},{\"end\":35689,\"start\":35683},{\"end\":35702,\"start\":35695},{\"end\":36002,\"start\":35992},{\"end\":36018,\"start\":36009},{\"end\":36037,\"start\":36031},{\"end\":36349,\"start\":36345},{\"end\":36365,\"start\":36361},{\"end\":36379,\"start\":36375},{\"end\":36386,\"start\":36381},{\"end\":36391,\"start\":36388},{\"end\":36395,\"start\":36393},{\"end\":36405,\"start\":36399},{\"end\":36424,\"start\":36419},{\"end\":37085,\"start\":37078},{\"end\":37100,\"start\":37094},{\"end\":37297,\"start\":37293},{\"end\":37318,\"start\":37308},{\"end\":37648,\"start\":37642},{\"end\":37661,\"start\":37656},{\"end\":37673,\"start\":37668},{\"end\":37949,\"start\":37935},{\"end\":37957,\"start\":37951},{\"end\":37968,\"start\":37963},{\"end\":37977,\"start\":37970},{\"end\":37984,\"start\":37979},{\"end\":38454,\"start\":38445},{\"end\":38460,\"start\":38456},{\"end\":38469,\"start\":38462},{\"end\":38476,\"start\":38471},{\"end\":38489,\"start\":38485},{\"end\":38506,\"start\":38500},{\"end\":38972,\"start\":38964},{\"end\":38982,\"start\":38976},{\"end\":39155,\"start\":39151},{\"end\":39176,\"start\":39169},{\"end\":39594,\"start\":39588},{\"end\":39604,\"start\":39596}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":207585383},\"end\":32993,\"start\":32798},{\"attributes\":{\"id\":\"b1\"},\"end\":33432,\"start\":32995},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":538820},\"end\":33778,\"start\":33434},{\"attributes\":{\"doi\":\"arXiv:1308.0850\",\"id\":\"b3\"},\"end\":33979,\"start\":33780},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":206741496},\"end\":34353,\"start\":33981},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":1658773},\"end\":34589,\"start\":34355},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":206485943},\"end\":35213,\"start\":34591},{\"attributes\":{\"doi\":\"arXiv:1207.0580\",\"id\":\"b7\"},\"end\":35637,\"start\":35215},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":216078090},\"end\":35920,\"start\":35639},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":195908774},\"end\":36288,\"start\":35922},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1428702},\"end\":37022,\"start\":36290},{\"attributes\":{\"doi\":\"arXiv:1301.3584\",\"id\":\"b11\"},\"end\":37251,\"start\":37024},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":2546945},\"end\":37636,\"start\":37253},{\"attributes\":{\"doi\":\"arXiv:1206.1106\",\"id\":\"b13\"},\"end\":37845,\"start\":37638},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":10978620},\"end\":38376,\"start\":37847},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":10940950},\"end\":38890,\"start\":38378},{\"attributes\":{\"id\":\"b16\"},\"end\":39121,\"start\":38892},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":10357959},\"end\":39484,\"start\":39123},{\"attributes\":{\"doi\":\"arXiv:1212.5701\",\"id\":\"b18\",\"matched_paper_id\":553962},\"end\":39867,\"start\":39486}]", "bib_title": "[{\"end\":32844,\"start\":32798},{\"end\":33510,\"start\":33434},{\"end\":34035,\"start\":33981},{\"end\":34411,\"start\":34355},{\"end\":34697,\"start\":34591},{\"end\":35670,\"start\":35639},{\"end\":35985,\"start\":35922},{\"end\":36334,\"start\":36290},{\"end\":37281,\"start\":37253},{\"end\":37933,\"start\":37847},{\"end\":38443,\"start\":38378},{\"end\":39144,\"start\":39123},{\"end\":39576,\"start\":39486}]", "bib_author": "[{\"end\":32853,\"start\":32846},{\"end\":32864,\"start\":32853},{\"end\":33071,\"start\":33062},{\"end\":33075,\"start\":33071},{\"end\":33082,\"start\":33075},{\"end\":33089,\"start\":33082},{\"end\":33099,\"start\":33089},{\"end\":33104,\"start\":33099},{\"end\":33114,\"start\":33104},{\"end\":33118,\"start\":33114},{\"end\":33124,\"start\":33118},{\"end\":33131,\"start\":33124},{\"end\":33138,\"start\":33131},{\"end\":33147,\"start\":33138},{\"end\":33156,\"start\":33147},{\"end\":33163,\"start\":33156},{\"end\":33170,\"start\":33163},{\"end\":33174,\"start\":33170},{\"end\":33184,\"start\":33174},{\"end\":33200,\"start\":33184},{\"end\":33524,\"start\":33512},{\"end\":33536,\"start\":33524},{\"end\":33550,\"start\":33536},{\"end\":33846,\"start\":33833},{\"end\":34050,\"start\":34037},{\"end\":34066,\"start\":34050},{\"end\":34077,\"start\":34066},{\"end\":34425,\"start\":34413},{\"end\":34444,\"start\":34425},{\"end\":34716,\"start\":34699},{\"end\":34722,\"start\":34716},{\"end\":34726,\"start\":34722},{\"end\":34730,\"start\":34726},{\"end\":34736,\"start\":34730},{\"end\":34751,\"start\":34736},{\"end\":34760,\"start\":34751},{\"end\":34768,\"start\":34760},{\"end\":34777,\"start\":34768},{\"end\":34785,\"start\":34777},{\"end\":34793,\"start\":34785},{\"end\":34804,\"start\":34793},{\"end\":34813,\"start\":34804},{\"end\":34821,\"start\":34813},{\"end\":34830,\"start\":34821},{\"end\":34846,\"start\":34830},{\"end\":35310,\"start\":35291},{\"end\":35322,\"start\":35310},{\"end\":35330,\"start\":35322},{\"end\":35347,\"start\":35330},{\"end\":35363,\"start\":35347},{\"end\":35378,\"start\":35363},{\"end\":35388,\"start\":35378},{\"end\":35691,\"start\":35672},{\"end\":35704,\"start\":35691},{\"end\":36004,\"start\":35987},{\"end\":36020,\"start\":36004},{\"end\":36039,\"start\":36020},{\"end\":36351,\"start\":36336},{\"end\":36367,\"start\":36351},{\"end\":36381,\"start\":36367},{\"end\":36388,\"start\":36381},{\"end\":36393,\"start\":36388},{\"end\":36397,\"start\":36393},{\"end\":36407,\"start\":36397},{\"end\":36426,\"start\":36407},{\"end\":37087,\"start\":37071},{\"end\":37102,\"start\":37087},{\"end\":37299,\"start\":37283},{\"end\":37320,\"start\":37299},{\"end\":37650,\"start\":37638},{\"end\":37663,\"start\":37650},{\"end\":37675,\"start\":37663},{\"end\":37951,\"start\":37935},{\"end\":37959,\"start\":37951},{\"end\":37970,\"start\":37959},{\"end\":37979,\"start\":37970},{\"end\":37986,\"start\":37979},{\"end\":38456,\"start\":38445},{\"end\":38462,\"start\":38456},{\"end\":38471,\"start\":38462},{\"end\":38478,\"start\":38471},{\"end\":38491,\"start\":38478},{\"end\":38508,\"start\":38491},{\"end\":38974,\"start\":38962},{\"end\":38984,\"start\":38974},{\"end\":39157,\"start\":39146},{\"end\":39178,\"start\":39157},{\"end\":39596,\"start\":39578},{\"end\":39606,\"start\":39596}]", "bib_venue": "[{\"end\":36645,\"start\":36544},{\"end\":37463,\"start\":37400},{\"end\":38129,\"start\":38066},{\"end\":38651,\"start\":38588},{\"end\":39321,\"start\":39258},{\"end\":32882,\"start\":32864},{\"end\":33060,\"start\":32995},{\"end\":33590,\"start\":33550},{\"end\":33831,\"start\":33780},{\"end\":34114,\"start\":34077},{\"end\":34451,\"start\":34444},{\"end\":34872,\"start\":34846},{\"end\":35289,\"start\":35215},{\"end\":35771,\"start\":35704},{\"end\":36088,\"start\":36039},{\"end\":36542,\"start\":36426},{\"end\":37069,\"start\":37024},{\"end\":37398,\"start\":37320},{\"end\":37718,\"start\":37690},{\"end\":38064,\"start\":37986},{\"end\":38586,\"start\":38508},{\"end\":38960,\"start\":38892},{\"end\":39256,\"start\":39178},{\"end\":39653,\"start\":39621}]"}}}, "year": 2023, "month": 12, "day": 17}