{"id": 220332575, "updated": "2022-01-23 18:08:55.681", "metadata": {"title": "VITRuM: A Plug-In for the Visualization of Test-Related Metrics", "authors": "[{\"middle\":[],\"last\":\"Pecorelli\",\"first\":\"Fabiano\"},{\"middle\":[],\"last\":\"Di Lillo\",\"first\":\"Gianluca\"},{\"middle\":[],\"last\":\"Palomba\",\"first\":\"Fabio\"},{\"middle\":[],\"last\":\"De Lucia\",\"first\":\"Andrea\"}]", "venue": null, "journal": "Proceedings of the International Conference on Advanced Visual Interfaces", "publication_date": {"year": 2020, "month": null, "day": null}, "abstract": "Software testing is the first weapon against software faults, used by developers to preventively locate implementation errors in the exercised production code that may cause critical failures to the inner-working of software systems. According to recent findings, the effectiveness of testing might be not only due to its ability to cover the production code but also to some other properties, like code quality. Among other aspects, the literature reported that an advanced visualization of test-related metrics, e.g., test code coverage on production code, result to be a key strength for developers when dealing with software faults. In this paper, we propose VITRuM (VIsualization of Test-Related Metrics), an IntelliJ plug-in able to provide developers with an advanced visual interface of both static and dynamic test-related metrics that has the potential of making them more able to diagnose production code faults. The plug-in is available in the official JetBrains Plugins Repository. A video showing the tool in action is available at https://youtu.be/kFE81eYPgUg.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3091284670", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/avi/PecorelliLPL20", "doi": "10.1145/3399715.3399954"}}, "content": {"source": {"pdf_hash": "e3a3e7b2075e2a37fe3fd7cf1bc593fdb6ee8237", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "5c1bbf76458dc9cda441062790a3f693fa3b4928", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/e3a3e7b2075e2a37fe3fd7cf1bc593fdb6ee8237.txt", "contents": "\nVITRuM -A Plug-In for the Visualization of Test-Related Metrics\n\n\nFabiano Pecorelli fpecorelli@unisa.it \nGianluca di Lillo SeSa Lab -University of Salerno\nSeSa Lab -University of Salerno\nItaly, Italy\n\nFabio Palomba fpalomba@unisa.it \nSeSa Lab -University of Salerno\nItaly\n\nAndrea De Lucia adelucia@unisa.it \nSeSa Lab -University of Salerno\nItaly\n\nVITRuM -A Plug-In for the Visualization of Test-Related Metrics\n10.1145/3399715.3399954ACM Reference Format: Fabiano Pecorelli, Gianluca di Lillo, Fabio Palomba, and Andrea De Lucia. 2020. VITRuM -A Plug-In for the Visualization of Test-Related Metrics. In International Conference on Advanced Visual Interfaces (AVI '20), September 28-October 2, 2020, Salerno, Italy. ACM, New York, NY, USA, 3 pages. https: //Software TestingAdvanced Visual InterfacesTest Code Quality\nSoftware testing is the first weapon against software faults, used by developers to preventively locate implementation errors in the exercised production code that may cause critical failures to the inner-working of software systems. According to recent findings, the effectiveness of testing might be not only due to its ability to cover the production code but also to some other properties, like code quality. Among other aspects, the literature reported that an advanced visualization of test-related metrics, e.g., test code coverage on production code, result to be a key strength for developers when dealing with software faults. In this paper, we propose VITRuM (VIsualization of Test-Related Metrics), an IntelliJ plug-in able to provide developers with an advanced visual interface of both static and dynamic test-related metrics that has the potential of making them more able to diagnose production code faults. The plug-in is available in the official JetBrains Plugins Repository. A video showing the tool in action is available at https://youtu.be/kFE81eYPgUg.\n\nINTRODUCTION\n\nPressure, continuous changes, strict deadlines: these reasons often enforce developers to deliver low-quality software and to rely on testing to verify the compliance of software to predefined requirements [12]. While testing has been often identified as a way to improve software quality and reliability [3,8,14], researchers have pointed out that its effectiveness heavily depends on how test code-related metrics are made actionable to developers [4,6,7]. Particularly, Jones et al. [7] reported that visualization techniques can effectively display to developers a large amounts of data that can assist debugging activities; later on, Jones [6] and Cornelissen et al.\n\nPermission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s). AVI '20, September 28-October 2, 2020, Salerno, Italy \u00a9 2020 Copyright held by the owner/author(s). ACM ISBN 978-1-4503-7535-1/20/09. https://doi.org/10.1145/3399715.3399954 [4] discovered that a proper visualization of source code coverage information, i.e., the amount of lines of production code exercised by a test, helps developers with understanding production code and finding critical faults. More recently, researchers highlighted the relevance of test code quality, i.e., test code metrics [9] and smells [11], on the ability of tests to properly discover faults in production code, suggesting that, when dealing with faults, developers should not only rely on basic information on test coverage, but also on indicators able to characterize the quality of a test suite.\n\nIn this paper, we aim at putting previous knowledge into action by proposing a tool coined VITRuM (VIzualization of Test-Related Metrics), an IntelliJ plug-in able to provide developers with an advanced visual interface of a number of test code-related factors, ranging from statically computable indicators (like quality metrics and smells [9,11]) to dynamic measures such as code coverage indicators [5,13]. We designed VITRuM to support developers with both the immediate analysis of source code as well as the evolutionary investigation of the capabilities of software tests, which can be useful to delineate whether and which tests would deserve maintenance operations [2].\n\n\nMETRICS EXTRACTED BY VITRUM\n\nVITRuM is available in the JetBrains Plug-in Repository 1 and can be run on any Java project. It allows the analysis of three families of metrics. It is worth remarking that all the metrics can be included/excluded in the analysis by VITRuM users through a configuration panel.\n\nStructural Metrics. Visualizing and monitoring structural aspects of test cases can help developers to assess the overall quality of test suites and the extent to which they are in line with the good practice of the object-oriented paradigm.\n\nVITRuM includes the calculation of structural metrics related to several aspects, such as size, cohesion, coupling, and complexity.\n\nIn addition to CK Metrics, the plug-in also computes the Assertion Density, defined as the percentage of assert statements with respect to the total number of statements in a test class.\n\nTest Smells. Defined as bad design or implementation choices applied by developers that could have a negative impact on understandability, maintainability, and effectiveness.\n\nVITRuM includes the automatic identification of seven types of test smells, based on the detection mechanism defined by Palomba, et al. [10]. Details about the test smells are described in Table 1.\n\nDynamic Metrics. These metrics provide information about the effectiveness of tests. The current version of the plug-in allows the   calculation of line and branch coverage, calculated as the percentage of lines/branches exercised by the test with respect to the total number of lines/branches in the production class. Moreover, it also allows the calculation of mutation coverage, defined as the percentage of mutated statements in the production class that is covered by the test [1]. Note that we used JaCoCo 2 to calculate line and branch coverage, and pitest 3 for the mutation coverage. Finally, VITRuM also computes the analysis of flaky tests. Flaky tests are tests exhibiting a non-deterministic behavior (i.e., they can pass or fail with the same input). In order to detect the presence of flaky tests, VITRuM executes each test 10 times: if the output is different in at least one case than the test is flaky. Note that the number of independent executions can be customized in the configuration panel. Figure 1 depicts the report shown after the computation of the metrics on the example project Apache commons-lang 4 . The window is composed of panels highlighted in the figure.\n\n\nVITRUM VISUALIZATION\n\nPanel 1 \u25cb lists all the test classes of the project under analysis. The classes are ordered by the criticality of the test smells affecting them. The list shows in black the classes that are not affected by any test smell, in yellow the classes affected by at least one test smell, and in red the classes critically affected by test smells, i.e., whose intensity is above a given critical threshold. On the top of the list, the plug-in presents a filter to narrow the search based on the selected test smell. Clicking on the name of one of the test classes in the list, all the other panels are shown. Panel 2 \u25cb reports the value for all the metrics calculated for the selected test class. Panel 4\n\n\u25cb contains a plot that allows the analysis of the metrics over time starting from the first execution of the plug-in on the subject project. The plot also contains two dotted lines that represent the thresholds for test smells analysis. In detail, the yellow line represents the threshold to determine whether the class is affected by the test smell, while the red line represents the criticality threshold. The slider on the top of the plot (panel 3 \u25cb) allows users to dynamically change the starting date to consider for the analysis\n\n\nCONCLUSION\n\nThis paper presents VITRuM, a plug-in for the IntelliJ IDE that automatically compute a number of test-related factors and displays the results through a easy-to-use visual interface. Future work includes the integration of other metrics related to test code quality and the addition of features to export data and plots.\n\n\nACKNOWLEDGMENTS\n\nPalomba gratefully acknowledge the support of the Swiss National Science Foundation through the SNF Project No. PP00P2_170529.\n\nFigure 1 :\n1VITRuM main panel\n\nTable 1 :\n1List of test smells considered by VITRuM.\nhttps://plugins.jetbrains.com/plugin/14160-vitrum\nhttps://github.com/jacoco/jacoco 3 http://pitest.org\nhttps://commons.apache.org/proper/commons-lang/\n\nUsing mutation analysis for assessing and comparing testing coverage criteria. H James, Lionel C Andrews, Yvan Briand, Akbar Labiche, Siami Namin, IEEE Transactions on Software Engineering. 32James H Andrews, Lionel C Briand, Yvan Labiche, and Akbar Siami Namin. 2006. Using mutation analysis for assessing and comparing testing coverage criteria. IEEE Transactions on Software Engineering 32, 8 (2006), 608-624.\n\nPost-maintenance testing based on path change analysis. Paolo Benedusi, Ugo De Cmitile, Carlini, Proceedings. Conference on Software Maintenance. Conference on Software MaintenanceIEEEPaolo Benedusi, A Cmitile, and Ugo De Carlini. 1988. Post-maintenance testing based on path change analysis. In Proceedings. Conference on Software Mainte- nance, 1988. IEEE, 352-361.\n\nEffect of code coverage on software reliability measurement. M-H Chen, W Eric Michael R Lyu, Wong, IEEE Transactions on reliability. 50M-H Chen, Michael R Lyu, and W Eric Wong. 2001. Effect of code coverage on software reliability measurement. IEEE Transactions on reliability 50, 2 (2001), 165-170.\n\nTrace visualization for program comprehension: A controlled experiment. Andy Bas Cornelissen, Arie Zaidman, Bart Van Deursen, Van Rompaey, IEEE 17th International Conference on Program Comprehension. IEEEBas Cornelissen, Andy Zaidman, Arie Van Deursen, and Bart Van Rompaey. 2009. Trace visualization for program comprehension: A controlled experiment. In 2009 IEEE 17th International Conference on Program Comprehension. IEEE, 100-109.\n\nLightweight assessment of test-case effectiveness using source-code-quality indicators. Giovanni Grano, Fabio Palomba, Harald C Gall, IEEE Transactions on Software Engineering. Giovanni Grano, Fabio Palomba, and Harald C Gall. 2019. Lightweight assessment of test-case effectiveness using source-code-quality indicators. IEEE Transactions on Software Engineering (2019).\n\nFault localization using visualization of test information. A James, Jones, Proceedings. 26th International Conference on Software Engineering. 26th International Conference on Software EngineeringIEEEJames A Jones. 2004. Fault localization using visualization of test information. In Proceedings. 26th International Conference on Software Engineering. IEEE, 54-56.\n\nVisualization of test information to assist fault localization. A James, Mary Jean Jones, John Harrold, Stasko, Proceedings of the 24th International Conference on Software Engineering. ICSE. the 24th International Conference on Software Engineering. ICSEIEEEJames A Jones, Mary Jean Harrold, and John Stasko. 2002. Visualization of test information to assist fault localization. In Proceedings of the 24th International Conference on Software Engineering. ICSE 2002. IEEE, 467-477.\n\nCode coverage and postrelease defects: A large-scale study on open source projects. Pavneet Singh Kochhar, David Lo, Julia Lawall, Nachiappan Nagappan, IEEE Transactions on Reliability. 66Pavneet Singh Kochhar, David Lo, Julia Lawall, and Nachiappan Nagappan. 2017. Code coverage and postrelease defects: A large-scale study on open source projects. IEEE Transactions on Reliability 66, 4 (2017), 1213-1228.\n\nAutomatic test case generation: What if test code quality matters. Fabio Palomba, Annibale Panichella, Andy Zaidman, Rocco Oliveto, Andrea De Lucia, Proceedings of the 25th International Symposium on Software Testing and Analysis. the 25th International Symposium on Software Testing and AnalysisFabio Palomba, Annibale Panichella, Andy Zaidman, Rocco Oliveto, and Andrea De Lucia. 2016. Automatic test case generation: What if test code quality mat- ters?. In Proceedings of the 25th International Symposium on Software Testing and Analysis. 130-141.\n\nAutomatic test smell detection using information retrieval techniques. Fabio Palomba, Andy Zaidman, Andrea De Lucia, 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEEFabio Palomba, Andy Zaidman, and Andrea De Lucia. 2018. Automatic test smell detection using information retrieval techniques. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, 311-322.\n\nOn the relation of test smells to software code quality. Davide Spadini, Fabio Palomba, Andy Zaidman, Magiel Bruntink, Alberto Bacchelli, 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). Davide Spadini, Fabio Palomba, Andy Zaidman, Magiel Bruntink, and Alberto Bacchelli. 2018. On the relation of test smells to software code quality. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME).\n\n. IEEE. IEEE, 1-12.\n\nWhat is software testing? And why is it so hard?. A James, Whittaker, IEEE software. 17James A Whittaker. 2000. What is software testing? And why is it so hard? IEEE software 17, 1 (2000), 70-79.\n\nEffective fault localization using code coverage. Eric Wong, Yu Qi, Lei Zhao, Kai-Yuan Cai, 31st Annual International Computer Software and Applications Conference (COMPSAC 2007). IEEE1W Eric Wong, Yu Qi, Lei Zhao, and Kai-Yuan Cai. 2007. Effective fault localiza- tion using code coverage. In 31st Annual International Computer Software and Applications Conference (COMPSAC 2007), Vol. 1. IEEE, 449-456.\n\nSoftware reliability growth models with testing-effort. Shigeru Yamada, Hiroshi Ohtera, Hiroyuki Narihisa, IEEE Transactions on Reliability. 35Shigeru Yamada, Hiroshi Ohtera, and Hiroyuki Narihisa. 1986. Software reliability growth models with testing-effort. IEEE Transactions on Reliability 35, 1 (1986), 19-23.\n", "annotations": {"author": "[{\"start\":\"67\",\"end\":\"201\"},{\"start\":\"202\",\"end\":\"273\"},{\"start\":\"274\",\"end\":\"347\"}]", "publisher": null, "author_last_name": "[{\"start\":\"75\",\"end\":\"84\"},{\"start\":\"208\",\"end\":\"215\"},{\"start\":\"281\",\"end\":\"289\"}]", "author_first_name": "[{\"start\":\"67\",\"end\":\"74\"},{\"start\":\"202\",\"end\":\"207\"},{\"start\":\"274\",\"end\":\"280\"}]", "author_affiliation": "[{\"start\":\"106\",\"end\":\"200\"},{\"start\":\"235\",\"end\":\"272\"},{\"start\":\"309\",\"end\":\"346\"}]", "title": "[{\"start\":\"1\",\"end\":\"64\"},{\"start\":\"348\",\"end\":\"411\"}]", "venue": null, "abstract": "[{\"start\":\"819\",\"end\":\"1894\"}]", "bib_ref": "[{\"start\":\"2116\",\"end\":\"2120\",\"attributes\":{\"ref_id\":\"b12\"}},{\"start\":\"2215\",\"end\":\"2218\",\"attributes\":{\"ref_id\":\"b2\"}},{\"start\":\"2218\",\"end\":\"2220\",\"attributes\":{\"ref_id\":\"b7\"}},{\"start\":\"2220\",\"end\":\"2223\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"2360\",\"end\":\"2363\",\"attributes\":{\"ref_id\":\"b3\"}},{\"start\":\"2363\",\"end\":\"2365\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"2365\",\"end\":\"2367\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"2396\",\"end\":\"2399\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"2555\",\"end\":\"2558\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"3155\",\"end\":\"3158\",\"attributes\":{\"ref_id\":\"b3\"}},{\"start\":\"3481\",\"end\":\"3484\",\"attributes\":{\"ref_id\":\"b8\"}},{\"start\":\"3496\",\"end\":\"3500\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"4103\",\"end\":\"4106\",\"attributes\":{\"ref_id\":\"b8\"}},{\"start\":\"4106\",\"end\":\"4109\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"4164\",\"end\":\"4167\",\"attributes\":{\"ref_id\":\"b4\"}},{\"start\":\"4167\",\"end\":\"4170\",\"attributes\":{\"ref_id\":\"b13\"}},{\"start\":\"4436\",\"end\":\"4439\",\"attributes\":{\"ref_id\":\"b1\"}},{\"start\":\"5627\",\"end\":\"5631\",\"attributes\":{\"ref_id\":\"b9\"}},{\"start\":\"6172\",\"end\":\"6175\",\"attributes\":{\"ref_id\":\"b0\"}}]", "figure": "[{\"start\":\"8623\",\"end\":\"8653\",\"attributes\":{\"id\":\"fig_0\"}},{\"start\":\"8654\",\"end\":\"8707\",\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"}}]", "paragraph": "[{\"start\":\"1910\",\"end\":\"2581\"},{\"start\":\"2583\",\"end\":\"3760\"},{\"start\":\"3762\",\"end\":\"4440\"},{\"start\":\"4472\",\"end\":\"4749\"},{\"start\":\"4751\",\"end\":\"4992\"},{\"start\":\"4994\",\"end\":\"5125\"},{\"start\":\"5127\",\"end\":\"5313\"},{\"start\":\"5315\",\"end\":\"5489\"},{\"start\":\"5491\",\"end\":\"5688\"},{\"start\":\"5690\",\"end\":\"6881\"},{\"start\":\"6906\",\"end\":\"7603\"},{\"start\":\"7605\",\"end\":\"8140\"},{\"start\":\"8155\",\"end\":\"8476\"},{\"start\":\"8496\",\"end\":\"8622\"}]", "formula": null, "table_ref": "[{\"start\":\"5680\",\"end\":\"5687\",\"attributes\":{\"ref_id\":\"tab_1\"}}]", "section_header": "[{\"start\":\"1896\",\"end\":\"1908\",\"attributes\":{\"n\":\"1\"}},{\"start\":\"4443\",\"end\":\"4470\",\"attributes\":{\"n\":\"2\"}},{\"start\":\"6884\",\"end\":\"6904\",\"attributes\":{\"n\":\"3\"}},{\"start\":\"8143\",\"end\":\"8153\",\"attributes\":{\"n\":\"4\"}},{\"start\":\"8479\",\"end\":\"8494\"},{\"start\":\"8624\",\"end\":\"8634\"},{\"start\":\"8655\",\"end\":\"8664\"}]", "table": null, "figure_caption": "[{\"start\":\"8636\",\"end\":\"8653\"},{\"start\":\"8666\",\"end\":\"8707\"}]", "figure_ref": "[{\"start\":\"6704\",\"end\":\"6712\",\"attributes\":{\"ref_id\":\"fig_0\"}}]", "bib_author_first_name": "[{\"start\":\"8939\",\"end\":\"8940\"},{\"start\":\"8948\",\"end\":\"8954\"},{\"start\":\"8955\",\"end\":\"8956\"},{\"start\":\"8966\",\"end\":\"8970\"},{\"start\":\"8979\",\"end\":\"8984\"},{\"start\":\"9330\",\"end\":\"9335\"},{\"start\":\"9346\",\"end\":\"9349\"},{\"start\":\"9350\",\"end\":\"9352\"},{\"start\":\"9704\",\"end\":\"9707\"},{\"start\":\"9714\",\"end\":\"9720\"},{\"start\":\"10016\",\"end\":\"10020\"},{\"start\":\"10038\",\"end\":\"10042\"},{\"start\":\"10052\",\"end\":\"10056\"},{\"start\":\"10470\",\"end\":\"10478\"},{\"start\":\"10486\",\"end\":\"10491\"},{\"start\":\"10501\",\"end\":\"10507\"},{\"start\":\"10508\",\"end\":\"10509\"},{\"start\":\"10814\",\"end\":\"10815\"},{\"start\":\"11185\",\"end\":\"11186\"},{\"start\":\"11194\",\"end\":\"11198\"},{\"start\":\"11199\",\"end\":\"11203\"},{\"start\":\"11211\",\"end\":\"11215\"},{\"start\":\"11689\",\"end\":\"11696\"},{\"start\":\"11712\",\"end\":\"11717\"},{\"start\":\"11722\",\"end\":\"11727\"},{\"start\":\"11736\",\"end\":\"11746\"},{\"start\":\"12081\",\"end\":\"12086\"},{\"start\":\"12096\",\"end\":\"12104\"},{\"start\":\"12117\",\"end\":\"12121\"},{\"start\":\"12131\",\"end\":\"12136\"},{\"start\":\"12146\",\"end\":\"12152\"},{\"start\":\"12153\",\"end\":\"12155\"},{\"start\":\"12638\",\"end\":\"12643\"},{\"start\":\"12653\",\"end\":\"12657\"},{\"start\":\"12667\",\"end\":\"12673\"},{\"start\":\"12674\",\"end\":\"12676\"},{\"start\":\"13055\",\"end\":\"13061\"},{\"start\":\"13071\",\"end\":\"13076\"},{\"start\":\"13086\",\"end\":\"13090\"},{\"start\":\"13100\",\"end\":\"13106\"},{\"start\":\"13117\",\"end\":\"13124\"},{\"start\":\"13523\",\"end\":\"13524\"},{\"start\":\"13720\",\"end\":\"13724\"},{\"start\":\"13731\",\"end\":\"13733\"},{\"start\":\"13738\",\"end\":\"13741\"},{\"start\":\"13748\",\"end\":\"13756\"},{\"start\":\"14132\",\"end\":\"14139\"},{\"start\":\"14148\",\"end\":\"14155\"},{\"start\":\"14164\",\"end\":\"14172\"}]", "bib_author_last_name": "[{\"start\":\"8941\",\"end\":\"8946\"},{\"start\":\"8957\",\"end\":\"8964\"},{\"start\":\"8971\",\"end\":\"8977\"},{\"start\":\"8985\",\"end\":\"8992\"},{\"start\":\"8994\",\"end\":\"9005\"},{\"start\":\"9336\",\"end\":\"9344\"},{\"start\":\"9353\",\"end\":\"9360\"},{\"start\":\"9362\",\"end\":\"9369\"},{\"start\":\"9708\",\"end\":\"9712\"},{\"start\":\"9721\",\"end\":\"9734\"},{\"start\":\"9736\",\"end\":\"9740\"},{\"start\":\"10021\",\"end\":\"10036\"},{\"start\":\"10043\",\"end\":\"10050\"},{\"start\":\"10057\",\"end\":\"10068\"},{\"start\":\"10070\",\"end\":\"10081\"},{\"start\":\"10479\",\"end\":\"10484\"},{\"start\":\"10492\",\"end\":\"10499\"},{\"start\":\"10510\",\"end\":\"10514\"},{\"start\":\"10816\",\"end\":\"10821\"},{\"start\":\"10823\",\"end\":\"10828\"},{\"start\":\"11187\",\"end\":\"11192\"},{\"start\":\"11204\",\"end\":\"11209\"},{\"start\":\"11216\",\"end\":\"11223\"},{\"start\":\"11225\",\"end\":\"11231\"},{\"start\":\"11697\",\"end\":\"11710\"},{\"start\":\"11718\",\"end\":\"11720\"},{\"start\":\"11728\",\"end\":\"11734\"},{\"start\":\"11747\",\"end\":\"11755\"},{\"start\":\"12087\",\"end\":\"12094\"},{\"start\":\"12105\",\"end\":\"12115\"},{\"start\":\"12122\",\"end\":\"12129\"},{\"start\":\"12137\",\"end\":\"12144\"},{\"start\":\"12156\",\"end\":\"12161\"},{\"start\":\"12644\",\"end\":\"12651\"},{\"start\":\"12658\",\"end\":\"12665\"},{\"start\":\"12677\",\"end\":\"12682\"},{\"start\":\"13062\",\"end\":\"13069\"},{\"start\":\"13077\",\"end\":\"13084\"},{\"start\":\"13091\",\"end\":\"13098\"},{\"start\":\"13107\",\"end\":\"13115\"},{\"start\":\"13125\",\"end\":\"13134\"},{\"start\":\"13525\",\"end\":\"13530\"},{\"start\":\"13532\",\"end\":\"13541\"},{\"start\":\"13725\",\"end\":\"13729\"},{\"start\":\"13734\",\"end\":\"13736\"},{\"start\":\"13742\",\"end\":\"13746\"},{\"start\":\"13757\",\"end\":\"13760\"},{\"start\":\"14140\",\"end\":\"14146\"},{\"start\":\"14156\",\"end\":\"14162\"},{\"start\":\"14173\",\"end\":\"14181\"}]", "bib_entry": "[{\"start\":\"8860\",\"end\":\"9272\",\"attributes\":{\"matched_paper_id\":\"7190661\",\"id\":\"b0\"}},{\"start\":\"9274\",\"end\":\"9641\",\"attributes\":{\"matched_paper_id\":\"60874894\",\"id\":\"b1\"}},{\"start\":\"9643\",\"end\":\"9942\",\"attributes\":{\"matched_paper_id\":\"3149010\",\"id\":\"b2\"}},{\"start\":\"9944\",\"end\":\"10380\",\"attributes\":{\"matched_paper_id\":\"16242982\",\"id\":\"b3\"}},{\"start\":\"10382\",\"end\":\"10752\",\"attributes\":{\"matched_paper_id\":\"86454601\",\"id\":\"b4\"}},{\"start\":\"10754\",\"end\":\"11119\",\"attributes\":{\"matched_paper_id\":\"1200184\",\"id\":\"b5\"}},{\"start\":\"11121\",\"end\":\"11603\",\"attributes\":{\"matched_paper_id\":\"15262419\",\"id\":\"b6\"}},{\"start\":\"11605\",\"end\":\"12012\",\"attributes\":{\"matched_paper_id\":\"41545185\",\"id\":\"b7\"}},{\"start\":\"12014\",\"end\":\"12565\",\"attributes\":{\"matched_paper_id\":\"215747621\",\"id\":\"b8\"}},{\"start\":\"12567\",\"end\":\"12996\",\"attributes\":{\"matched_paper_id\":\"215822352\",\"id\":\"b9\"}},{\"start\":\"12998\",\"end\":\"13450\",\"attributes\":{\"matched_paper_id\":\"215822355\",\"id\":\"b10\"}},{\"start\":\"13452\",\"end\":\"13471\",\"attributes\":{\"id\":\"b11\"}},{\"start\":\"13473\",\"end\":\"13668\",\"attributes\":{\"matched_paper_id\":\"195714044\",\"id\":\"b12\"}},{\"start\":\"13670\",\"end\":\"14074\",\"attributes\":{\"matched_paper_id\":\"7433522\",\"id\":\"b13\"}},{\"start\":\"14076\",\"end\":\"14389\",\"attributes\":{\"matched_paper_id\":\"43493043\",\"id\":\"b14\"}}]", "bib_title": "[{\"start\":\"8860\",\"end\":\"8937\"},{\"start\":\"9274\",\"end\":\"9328\"},{\"start\":\"9643\",\"end\":\"9702\"},{\"start\":\"9944\",\"end\":\"10014\"},{\"start\":\"10382\",\"end\":\"10468\"},{\"start\":\"10754\",\"end\":\"10812\"},{\"start\":\"11121\",\"end\":\"11183\"},{\"start\":\"11605\",\"end\":\"11687\"},{\"start\":\"12014\",\"end\":\"12079\"},{\"start\":\"12567\",\"end\":\"12636\"},{\"start\":\"12998\",\"end\":\"13053\"},{\"start\":\"13473\",\"end\":\"13521\"},{\"start\":\"13670\",\"end\":\"13718\"},{\"start\":\"14076\",\"end\":\"14130\"}]", "bib_author": "[{\"start\":\"8939\",\"end\":\"8948\"},{\"start\":\"8948\",\"end\":\"8966\"},{\"start\":\"8966\",\"end\":\"8979\"},{\"start\":\"8979\",\"end\":\"8994\"},{\"start\":\"8994\",\"end\":\"9007\"},{\"start\":\"9330\",\"end\":\"9346\"},{\"start\":\"9346\",\"end\":\"9362\"},{\"start\":\"9362\",\"end\":\"9371\"},{\"start\":\"9704\",\"end\":\"9714\"},{\"start\":\"9714\",\"end\":\"9736\"},{\"start\":\"9736\",\"end\":\"9742\"},{\"start\":\"10016\",\"end\":\"10038\"},{\"start\":\"10038\",\"end\":\"10052\"},{\"start\":\"10052\",\"end\":\"10070\"},{\"start\":\"10070\",\"end\":\"10083\"},{\"start\":\"10470\",\"end\":\"10486\"},{\"start\":\"10486\",\"end\":\"10501\"},{\"start\":\"10501\",\"end\":\"10516\"},{\"start\":\"10814\",\"end\":\"10823\"},{\"start\":\"10823\",\"end\":\"10830\"},{\"start\":\"11185\",\"end\":\"11194\"},{\"start\":\"11194\",\"end\":\"11211\"},{\"start\":\"11211\",\"end\":\"11225\"},{\"start\":\"11225\",\"end\":\"11233\"},{\"start\":\"11689\",\"end\":\"11712\"},{\"start\":\"11712\",\"end\":\"11722\"},{\"start\":\"11722\",\"end\":\"11736\"},{\"start\":\"11736\",\"end\":\"11757\"},{\"start\":\"12081\",\"end\":\"12096\"},{\"start\":\"12096\",\"end\":\"12117\"},{\"start\":\"12117\",\"end\":\"12131\"},{\"start\":\"12131\",\"end\":\"12146\"},{\"start\":\"12146\",\"end\":\"12163\"},{\"start\":\"12638\",\"end\":\"12653\"},{\"start\":\"12653\",\"end\":\"12667\"},{\"start\":\"12667\",\"end\":\"12684\"},{\"start\":\"13055\",\"end\":\"13071\"},{\"start\":\"13071\",\"end\":\"13086\"},{\"start\":\"13086\",\"end\":\"13100\"},{\"start\":\"13100\",\"end\":\"13117\"},{\"start\":\"13117\",\"end\":\"13136\"},{\"start\":\"13523\",\"end\":\"13532\"},{\"start\":\"13532\",\"end\":\"13543\"},{\"start\":\"13720\",\"end\":\"13731\"},{\"start\":\"13731\",\"end\":\"13738\"},{\"start\":\"13738\",\"end\":\"13748\"},{\"start\":\"13748\",\"end\":\"13762\"},{\"start\":\"14132\",\"end\":\"14148\"},{\"start\":\"14148\",\"end\":\"14164\"},{\"start\":\"14164\",\"end\":\"14183\"}]", "bib_venue": "[{\"start\":\"9420\",\"end\":\"9454\"},{\"start\":\"10898\",\"end\":\"10951\"},{\"start\":\"11313\",\"end\":\"11376\"},{\"start\":\"12245\",\"end\":\"12310\"},{\"start\":\"9007\",\"end\":\"9048\"},{\"start\":\"9371\",\"end\":\"9418\"},{\"start\":\"9742\",\"end\":\"9774\"},{\"start\":\"10083\",\"end\":\"10142\"},{\"start\":\"10516\",\"end\":\"10557\"},{\"start\":\"10830\",\"end\":\"10896\"},{\"start\":\"11233\",\"end\":\"11311\"},{\"start\":\"11757\",\"end\":\"11789\"},{\"start\":\"12163\",\"end\":\"12243\"},{\"start\":\"12684\",\"end\":\"12764\"},{\"start\":\"13136\",\"end\":\"13216\"},{\"start\":\"13454\",\"end\":\"13458\"},{\"start\":\"13543\",\"end\":\"13556\"},{\"start\":\"13762\",\"end\":\"13848\"},{\"start\":\"14183\",\"end\":\"14215\"}]"}}}, "year": 2023, "month": 12, "day": 17}