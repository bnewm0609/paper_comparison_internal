{"id": 13298214, "updated": "2023-09-28 15:11:12.139", "metadata": {"title": "Learning to Navigate in Complex Environments", "authors": "[{\"first\":\"Piotr\",\"last\":\"Mirowski\",\"middle\":[]},{\"first\":\"Razvan\",\"last\":\"Pascanu\",\"middle\":[]},{\"first\":\"Fabio\",\"last\":\"Viola\",\"middle\":[]},{\"first\":\"Hubert\",\"last\":\"Soyer\",\"middle\":[]},{\"first\":\"Andrew\",\"last\":\"Ballard\",\"middle\":[\"J.\"]},{\"first\":\"Andrea\",\"last\":\"Banino\",\"middle\":[]},{\"first\":\"Misha\",\"last\":\"Denil\",\"middle\":[]},{\"first\":\"Ross\",\"last\":\"Goroshin\",\"middle\":[]},{\"first\":\"Laurent\",\"last\":\"Sifre\",\"middle\":[]},{\"first\":\"Koray\",\"last\":\"Kavukcuoglu\",\"middle\":[]},{\"first\":\"Dharshan\",\"last\":\"Kumaran\",\"middle\":[]},{\"first\":\"Raia\",\"last\":\"Hadsell\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2016, "month": 11, "day": 11}, "abstract": "Learning to navigate in complex environments with dynamic elements is an important milestone in developing AI agents. In this work we formulate the navigation question as a reinforcement learning problem and show that data efficiency and task performance can be dramatically improved by relying on additional auxiliary tasks leveraging multimodal sensory inputs. In particular we consider jointly learning the goal-driven reinforcement learning problem with auxiliary depth prediction and loop closure classification tasks. This approach can learn to navigate from raw sensory input in complicated 3D mazes, approaching human-level performance even under conditions where the goal location changes frequently. We provide detailed analysis of the agent behaviour, its ability to localise, and its network activity dynamics, showing that the agent implicitly learns key navigation abilities.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1611.03673", "mag": "2952791429", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/iclr/MirowskiPVSBBDG17", "doi": null}}, "content": {"source": {"pdf_hash": "d74a777ec398e89a0956dbf36c646c7dc41d8390", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1611.03673v3.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "cac4c406e705cdaf4ac296709fecf70fd53e1eb1", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/d74a777ec398e89a0956dbf36c646c7dc41d8390.txt", "contents": "\nLEARNING TO NAVIGATE IN COMPLEX ENVIRONMENTS\n\n\nPiotr Mirowski piotrmirowski@google.com \nLondonUK\n\nRazvan Pascanu \nLondonUK\n\nFabio Viola fviola@google.com \nLondonUK\n\nHubert Soyer soyer@google.com \nLondonUK\n\nAndrew J Ballard \nLondonUK\n\nAndrea Banino abanino@google.com \nLondonUK\n\nMisha Denil mdenil@google.com \nLondonUK\n\nRoss Goroshin goroshin@google.com \nLondonUK\n\nLaurent Sifre sifre@google.com \nLondonUK\n\nKoray Kavukcuoglu korayk@google.com \nLondonUK\n\nDharshan Kumaran dkumaran@google.com \nLondonUK\n\nRaia Hadsell \nLondonUK\n\nLEARNING TO NAVIGATE IN COMPLEX ENVIRONMENTS\nUnder review as a conference paper at ICLR 2017\nLearning to navigate in complex environments with dynamic elements is an important milestone in developing AI agents. In this work we formulate the navigation question as a reinforcement learning problem and show that data efficiency and task performance can be dramatically improved by relying on additional auxiliary tasks leveraging multimodal sensory inputs. In particular we consider jointly learning the goal-driven reinforcement learning problem with auxiliary depth prediction and loop closure classification tasks. This approach can learn to navigate from raw sensory input in complicated 3D mazes, approaching human-level performance even under conditions where the goal location changes frequently. We provide detailed analysis of the agent behaviour 1 , its ability to localise, and its network activity dynamics, showing that the agent implicitly learns key navigation abilities.\n\nINTRODUCTION\n\nThe ability to navigate efficiently within an environment is fundamental to intelligent behavior. Whilst conventional robotics methods, such as Simultaneous Localisation and Mapping (SLAM), tackle navigation through an explicit focus on position inference and mapping (Dissanayake et al., 2001), here we follow recent work in deep reinforcement learning (Mnih et al., 2015; and propose that navigational abilities could emerge as the by-product of an agent learning a policy that maximizes reward. One advantage of an intrinsic, end-to-end approach is that actions are not divorced from representation, but rather learnt together, thus ensuring that task-relevant features are present in the representation. Learning to navigate from reinforcement learning in partially observable environments, however, poses several challenges.\n\nFirst, rewards are often sparsely distributed in the environment, where there may be only one goal location. Second, environments often comprise dynamic elements, requiring the agent to use memory at different timescales: rapid one-shot memory for the goal location, together with short term memory subserving temporal integration of velocity signals and visual observations, and longer term memory for constant aspects of the environment (e.g. boundaries, cues).\n\nTo improve statistical efficiency we bootstrap the reinforcement learning procedure by augmenting our loss with auxiliary tasks that provide denser training signals that support navigation-relevant representation learning. We consider two additional losses: the first one involves reconstruction of a low-dimensional depth map at each time step by predicting one input modality (the depth channel) from others (the colour channels). This auxiliary task concerns the 3D geometry of the environment, and is aimed to encourage the learning of representations that aid obstacle avoidance and short-term trajectory planning. The second task directly invokes loop closure from SLAM: the agent is trained to predict if the current location has been previously visited within a local trajectory. Figure 1: Views from a small 5 \u00d7 10 maze, a large 9 \u00d7 15 maze and an I-maze, with corresponding maze layouts and sample agent trajectories. The mazes, which will be made public, have different textures and visual cues as well as exploration rewards and goals (shown right).\n\nTo address the memory requirements of the task we rely on a stacked LSTM architecture (Graves et al., 2013;Pascanu et al., 2013). We evaluate our approach using five 3D maze environments and demonstrate the accelerated learning and increased performance of the proposed agent architecture. These environments feature complex geometry, random start position and orientation, dynamic goal locations, and long episodes that require thousands of agent steps (see Figure 1). We also provide detailed analysis of the trained agent to show that critical navigation skills are acquired. This is important as neither position inference nor mapping are directly part of the loss; therefore, raw performance on the goal finding task is not necessarily a good indication that these skills are acquired. In particular, we show that the proposed agent resolves ambiguous observations and quickly localizes itself in a complex maze, and that this localization capability is correlated with higher task reward.\n\n\nAPPROACH\n\nWe rely on a end-to-end learning framework that incorporates multiple objectives. Firstly it tries to maximize cumulative reward using an actor-critic approach. Secondly it minimizes an auxiliary loss of inferring the depth map from the RGB observation. Finally, the agent is trained to detect loop closures as an additional auxiliary task that encourages implicit velocity integration.\n\nThe reinforcement learning problem is addressed with the Asynchronous Advantage Actor-Critic (A3C) algorithm (Mnih et al., 2016) that relies on learning both a policy \u03c0(a t |s t ; \u03b8) and value function V (s t ; \u03b8 V ) given a state observation s t . Both the policy and value function share all intermediate representations, both being computed using a separate linear layer from the topmost layer of the model. The agent setup closely follows the work of (Mnih et al., 2016) and we refer to this work for the details (e.g. the use of a convolutional encoder followed by either an MLP or an LSTM, the use of action repetition, entropy regularization to prevent the policy saturation, etc.). These details can also be found in the Appendix B.\n\nThe baseline that we consider in this work is an A3C agent (Mnih et al., 2016) that receives only RGB input from the environment, using either a recurrent or a purely feed-forward model (see Figure 2a,b). The encoder for the RGB input (used in all other considered architectures) is a 3 layer convolutional network. To support the navigation capability of our approach, we also rely on the Nav A3C agent (Figure 2c) which employs a two-layer stacked LSTM after the convolutional encoder. We expand the observations of the agents to include agent-relative velocity, the action sampled from the stochastic policy and the immediate reward, from the previous time step. We opt to feed the velocity and previously selected action directly to the second recurrent layer, with the first layer only receiving the reward. We postulate that the first layer might be able to make associations between reward and visual observations that are provided as context to the second layer from which the policy is computed. Thus, the observation s t may include an image x t \u2208 R 3\u00d7W \u00d7H (where W and H are the width and\nx t r t-1 {v t , a t-1 } enc x t enc enc Loop (L) Depth (D 1 ) a. FF A3C c. Nav A3C d. Nav A3C +D 1 D 2 L x t r t-1 {v t , a t-1 } enc x t b. LSTM A3C Depth (D 2 )\nFigure 2: Different architectures: (a) is a convolutional encoder followed by a feedforward layer and policy (\u03c0) and value function outputs; (b) has an LSTM layer; (c) uses additional inputs (agent-relative velocity, reward, and action), as well as a stacked LSTM; and (d) has additional outputs to predict depth and loop closures.\n\nheight of the image), the agent-relative lateral and rotational velocity v t \u2208 R 6 , the previous action a t\u22121 \u2208 R N A , and the previous reward r t\u22121 \u2208 R. Figure 2d shows the augmentation of the Nav A3C with the different possible auxiliary losses. In particular we consider predicting depth from the convolutional layer (we will refer to this choice as D 1 ), or from the top LSTM layer (D 2 ) or predicting loop closure (L). The auxiliary losses are computed on the current frame via a single layer MLP. The agent is trained by applying a weighted sum of the gradients coming from A3C, the gradients from depth prediction (multiplied with \u03b2 d1 , \u03b2 d2 ) and the gradients from the loop closure (scaled by \u03b2 l ). More details of the online learning algorithm are given in Appendix B.\n\n\nDEPTH PREDICTION\n\nThe primary input to the agent is in the form of RGB images. However, depth information, covering the central field of view of the agent, might supply valuable information about the 3D structure of the environment. While depth could be directly used as an input, we argue that if presented as an additional loss it is actually more valuable to the learning process. In particular if the prediction loss shares representation with the policy, it could help build useful features for RL much faster, bootstrapping learning. Since we know from (Eigen et al., 2014) that a single frame can be enough to predict depth, we know this auxiliary task can be learnt. A comparison between having depth as input versus as an additional loss is given in Appendix C, which shows significant gain for depth as a loss.\n\nSince the role of the auxiliary loss is just to build up the representation of the model, we do not necessarily care about the specific performance obtained or nature of the prediction. We do care about the data efficiency aspect of the problem and also computational complexity. If the loss is to be useful for the main task, we should converge faster on it compared to solving the RL problem (using less data samples), and the additional computational cost should be minimal. To achieve this we use a low resolution variant of the depth map, reducing the screen resolution to 4x16 pixels 2 .\n\nWe explore two different variants for the loss. The first choice is to phrase it as a regression task, the most natural choice. While this formulation, combined with a higher depth resolution, extracts the most information, mean square error imposes a unimodal distribution (van den Oord et al., 2016).\n\nTo address this possible issue, we also consider a classification loss, where depth at each position is discretised into 8 different bands. The bands are non-uniformally distributed such that we pay more attention to far-away objects (details in Appendix B). The motivation for the classification formulation is that while it greatly reduces the resolution of depth, it is more flexible from a learning perspective and can result in faster convergence (hence faster bootstrapping).\n\n\nLOOP CLOSURE PREDICTION\n\nLoop closure, like depth, is valuable for a navigating agent, since can be used for efficient exploration and spatial reasoning. To produce the training targets, we detect loop closures based on the similarity of local position information during an episode, which is obtained by integrating 2D velocity over time. Specifically, in a trajectory noted {p 0 , p 1 , . . . , p T }, where p t is the position of the agent at time t, we define a loop closure label l t that is equal to 1 if the position p t of the agent is close to the position p t at an earlier time t . In order to avoid trivial loop closures on consecutive points of the trajectory, we add an extra condition on an intermediary position p t being far from p t . Thresholds \u03b7 1 and \u03b7 2 provide these two limits. Learning to predict the binary loop label is done by minimizing the Bernoulli loss L l between l t and the output of a single-layer output from the hidden representation h t of the last hidden layer of the model, followed by a sigmoid activation.\n\n\nRELATED WORK\n\nThere is a rich literature on navigation, primarily in the robotics literature. However, here we focus on related work in deep RL. Deep Q-networks (DQN) have had breakthroughs in extremely challenging domains such as Atari (Mnih et al., 2015). Recent work has developed on-policy RL methods such as advantage actor-critic that use asynchronous training of multiple agents in parallel (Mnih et al., 2016). Recurrent networks have also been successfully incorporated to enable state disambiguation in partially observable environments (Koutnik et al., 2013;Hausknecht & Stone, 2015;Mnih et al., 2016;Narasimhan et al., 2015).  , 1999)) to transfer between navigation tasks. Tai & Liu (2016) trained a convnet DQN-based agent using depth channel inputs for obstacle avoidance in 3D environments. Barron et al. (2016) investigated how well a convnet can predict the depth channel from RGB in the Minecraft environment, but did not use depth for training the agent.\n\nAuxiliary tasks have often been used to facilitate representation learning (Suddarth & Kergosien, 1990). Recently, the incorporation of additional objectives, designed to augment representation learning through auxiliary reconstructive decoding pathways (Zhang et al., 2016;Rasmus et al., 2015;Zhao et al., 2015;Mirowski et al., 2010), has yielded benefits in large scale classification tasks. In deep RL settings, however, only two previous papers have examined the benefit of auxiliary tasks. Specifically,  consider a supervised loss for fitting a recurrent model on the hidden representations to predict the next observed state, in the context of imitation learning of sequences provided by experts, and Lample & Chaplot (2016) show that the performance of a DQN agent in a first-person shooter game in the VizDoom environment can be substantially enhanced by the addition of a supervised auxiliary task, whereby the convolutional network was trained on an enemy-detection task, with information about the presence of enemies, weapons, etc., provided by the game engine.\n\nIn contrast, our contribution addresses fundamental questions of how to learn an intrinsic representation of space, geometry, and movement while simultaneously maximising rewards through reinforcement learning. Our method is validated in challenging maze domains with random start and goal locations.\n\n\nEXPERIMENTS\n\nWe consider a set of first-person 3D mazes from the DeepMind Lab environment (Beattie et al., 2016) (see Fig. 1) that are visually rich, with additional observations available to the agent such as inertial information and local depth information. 3 The action space is discrete, yet allows finegrained control, comprising 8 actions: the agent can rotate in small increments, accelerate forward or backward or sideways, or induce rotational acceleration while moving. Reward is achieved in these environments by reaching a goal from a random start location and orientation. If the goal is reached, the agent is respawned to a new start location and must return to the goal. The episode terminates when a fixed amount of time expires, affording the agent enough time to find the goal several times. There are sparse 'fruit' rewards which serve to encourage exploration. Apples are worth 1 point, strawberries 2 points and goals are 10 points. Videos of the agent solving the maze are linked in Appendix A.\n\nIn the static variant of the maze, the goal and fruit locations are fixed and only the agent's start location changes. In the dynamic (Random Goal) variant, the goal and fruits are randomly placed on every episode. Within an episode, the goal and apple locations stay fixed until the episode ends. This encourages an explore-exploit strategy, where the agent should initially explore the maze, then retain the goal location and quickly refind it after each respawn. For both variants (static and random goal) we consider a small and large map. The small mazes are 5 \u00d7 10 and episodes last for 3600 timesteps, and the large mazes are 9 \u00d7 15 with 10800 steps (see Figure 1). The RGB observation is 84 \u00d7 84.\n\nThe I-Maze environment (see Figure 1, right) is inspired by the classic T-maze used to investigate navigation in rodents (Olton et al., 1979): the layout remains fixed throughout, the agent spawns in the central corridor where there are apple rewards and has to locate the goal which is placed in the alcove of one of the four arms. Because the goal is hidden in the alcove, the optimal agent behaviour must rely on memory of the goal location in order to return to the goal using the most direct route. Goal location is constant within an episode but varies randomly across episodes.\n\nThe different agent architectures described in Section 2 are evaluated by training on the five mazes. Figure 3 shows learning curves (averaged over the 5 top performing agents). The agents are a feedforward model (FF A3C), a recurrent model (LSTM A3C), the stacked LSTM version with velocity, previous action and reward as input (Nav A3C), and Nav A3C with depth prediction from the convolution layer (Nav A3C+D 1 ), Nav A3C with depth prediction from the last LSTM layer (Nav A3C+D 2 ), Nav A3C with loop closure prediction (Nav A3C+L) as well as the Nav A3C with all auxiliary losses considered together (Nav A3C+D 1 D 2 L). In each case we ran 64 experiments with randomly sampled hyper-parameters (for ranges and details please see the appendix). The mean over the top 5 runs as well as the top 5 curves are plotted. Expert human scores, established by a professional game player, are compared to these results. The Nav A3C+D 2 agents reach human-level performance on Static 1 and 2, and attain about 91% and 59% of human scores on Random Goal 1 and 2.\n\nIn Mnih et al. (2015) reward clipping is used to stabilize learning, technique which we employed in this work as well. Unfortunately, for these particular tasks, this yields slightly suboptimal policies because the agent does not distinguish apples (1 point) from goals (10 points). Removing the reward clipping results in unstable behaviour for the base A3C agent (see Appendix C). However it seems that the auxiliary signal from depth prediction mediates this problem to some extent, resulting in stable learning dynamics (e.g. Figure 3f, Nav A3C+D 1 vs Nav A3C*+D 1 ). We clearly indicate whether reward clipping is used by adding an asterisk to the agent name.\n\nFigure 3f also explores the difference between the two formulations of depth prediction, as a regression task or a classification task. We can see that the regression agent (Nav A3C*+D 1 [MSE]) performs worse than one that does classification (Nav A3C*+D 1 ). This result extends to other maps, and we therefore only use the classification formulation in all our other results 4 . Also we see that predicting depth from the last LSTM layer (hence providing structure to the recurrent layer, not just the convolutional ones) performs better.\n\nWe note some particular results from these learning curves. In Figure 3 (a and b), consider the feedforward A3C model (red curve) versus the LSTM version (pink curve). Even though navigation seems to intrinsically require memory, as single observations could often be ambiguous, the feedforward model achieves competitive performance on static mazes. This suggest that there might be good strategies that do not involve temporal memory and give good results, namely a reactive policy held by the weights of the encoder, or learning a wall-following strategy. This motivates the dynamic environments that encourage the use of memory and more general navigation strategies.\n\nFigure 3 also shows the advantage of adding velocity, reward and action as an input, as well as the impact of using a two layer LSTM (orange curve vs red and pink). Though this agent (Nav A3C) is better than the simple architectures, it is still relatively slow to train on all of the mazes. We believe that this is mainly due to the slower, data inefficient learning that is generally seen in pure RL approaches. Supporting this we see that adding the auxiliary prediction targets of depth and loop closure (Nav A3C+D 1 D 2 L, black curve) speeds up learning dramatically on most of the mazes (see Table 1: AUC metric). It has the strongest effect on the static mazes because of the accelerated learning, but also gives a substantial and lasting performance increase on the random goal mazes.\n\nAlthough we place more value on the task performance than on the auxiliary losses, we report the results from the loop closure prediction task. Over 100 test episodes of 2250 steps each, within a large maze (random goal 2), the Nav A3C*+D 1 L agent demonstrated very successful loop detection, reaching an F-1 score of 0.83. A sample trajectory can be seen in Figure 4 (right). Evaluation of a single best performing agent is done through analysis on 100 test episodes. Goals gives the number of episodes where the goal was reached one more more times. Position Accuracy is the classification accuracy of the position decoder. Latency 1:>1 is the average time to the first goal acquisition vs. the average time to all subsequent goal acquisitions. Score is the mean score over the 100 test episodes.\n\n\nANALYSIS\n\n\nPOSITION DECODING\n\nIn order to evaluate the internal representation of location within the agent (either in the hidden units h t of the last LSTM, or, in the case of the FF A3C agent, in the features f t on the last layer of the conv-net), we train a position decoder that takes that representation as input, consisting of a linear classifier with multinomial probability distribution over the discretized maze locations. Small mazes (5 \u00d7 10) have 50 locations, large mazes (9 \u00d7 15) have 135 locations, and the I-maze has 77 locations. Note that we do not backpropagate the gradients from the position decoder through the rest of the network. The position decoder can only see the representation exposed by the model, not change it.\n\nAn example of position decoding by the Nav A3C+D 2 agent is shown in Figure 6, where the initial uncertainty in position is improved to near perfect position prediction as more observations are acquired by the agent. We observe that position entropy spikes after a respawn, then decreases once the agent acquires certainty about its location. Additionally, videos of the agent's position decoding are linked in Appendix A. In these complex mazes, where localization is important for the purpose of reaching the goal, it seems that position accuracy and final score are correlated, as shown in Table  1. A pure feed-forward architecture still achieves 64.3% accuracy in a static maze with static goal, suggesting that the encoder memorizes the position in the weights and that this small maze is solvable by all the agents, with sufficient training time. In Random Goal 1, it is Nav A3C+D 2 that achieves the best position decoding performance (85.5% accuracy), whereas the FF A3C and the LSTM A3C architectures are at approximately 50%.\n\nIn the I-maze, the opposite branches of the maze are nearly identical, with the exception of very sparse visual cues. We observe that once the goal is first found, the Nav A3C*+D 1 L agent is capable of directly returning to the correct branch in order to achieve the maximal score. However, the linear position decoder for this agent is only 68.5% accurate, whereas it is 87.8% in the plain LSTM A3C agent. We hypothesize that the symmetry of the I-maze will induce a symmetric policy that need not be sensitive to the exact position of the agent (see analysis below). Figure 5: Trajectories of the Nav A3C*+D1L agent in the I-maze (left) and of the Nav A3C+D2 random goal maze 1 (right) over the course of one episode. At the beginning of the episode (gray curve on the map), the agent explores the environment until it finds the goal at some unknown location (red box). During subsequent respawns (blue path), the agent consistently returns to the goal. The value function, plotted for each episode, rises as the agent approaches the goal. Goals are plotted as vertical red lines. Figure 6: Trajectory of the Nav A3C+D2 agent in the random goal maze 1, overlaid with the position probability predictions predicted by a decoder trained on LSTM hidden activations, taken at 4 steps during an episode. Initial uncertainty gives way to accurate position prediction as the agent navigates.\n\nA desired property of navigation agents in our Random Goal tasks is to be able to first find the goal, and reliably return to the goal via an efficient route after subsequent re-spawns. The latency column in Table 1 shows that the Nav A3C+D 2 agents achieve the lowest latency to goal once the goal has been discovered (the first number shows the time in seconds to find the goal the first time, and the second number is the average time for subsequent finds). Figure 5 shows clearly how the agent finds the goal, and directly returns to that goal for the rest of the episode. For Random Goal 2, none of the agents achieve lower latency after initial goal acquisition; this is presumably due to the larger, more challenging environment.\n\n\nSTACKED LSTM GOAL ANALYSIS\n\nFigure 7(a) shows shows the trajectories traversed by an agent for each of the four goal locations.\n\nAfter an initial exploratory phase to find the goal, the agent consistently returns to the goal location. We visualize the agent's policy by applying tSNE dimension reduction (Maaten & Hinton, 2008) to the cell activations at each step of the agent for each of the four goal locations. Whilst clusters corresponding to each of the four goal locations are clearly distinct in the LSTM A3C agent, there are 2 main clusters in the Nav A3C agent -with trajectories to diagonally opposite arms of the maze represented similarly. Given that the action sequence to opposite arms is equivalent (e.g. straight, turn left twice for top left and bottom right goal locations), this suggests that the Nav A3C policy-dictating LSTM maintains an efficient representation of 2 sub-policies (i.e. rather than 4 independent policies) -with critical information about the currently relevant goal provided by the additional LSTM.\n\n\nINVESTIGATING DIFFERENT COMBINATIONS OF AUXILIARY TASKS\n\nOur results suggest that depth prediction from the policy LSTM yields optimal results. However, several other auxiliary tasks have been concurrently introduced in (Jaderberg et al., 2017), and thus we provide a comparison of reward prediction against depth prediction. Following that paper, we implemented two additional agent architectures, one performing reward prediction from the convnet using a replay buffer, called Nav A3C*+R, and one combining reward prediction from the convnet and depth prediction from the LSTM (Nav A3C+RD 2 ). Table 2 suggests that reward prediction (Nav A3C*+R) improves upon the plain stacked LSTM architecture (Nav A3C*) but not as much as depth prediction from the policy LSTM (Nav A3C+D 2 ). Combining reward prediction and depth prediction (Nav A3C+RD 2 ) yields comparable results to depth prediction alone (Nav A3C+D 2 ); normalised average AUC values are respectively 0.995 vs. 0.981. Future work will explore other auxiliary tasks.   Table 2: Comparison of five navigation agent architectures over five maze configurations with random and static goals, including agents performing reward prediction Nav A3C*+R and Nav A3C+RD2, where reward prediction is implemented following (Jaderberg et al., 2017). We report the AUC (Area under learning curve), averaged over the best 5 hyperparameters.\n\n\nCONCLUSION\n\nWe proposed a deep RL method, augmented with memory and auxiliary learning targets, for training agents to navigate within large and visually rich environments that include frequently changing start and goal locations. Our results and analysis highlight the utility of un/self-supervised auxiliary objectives, namely depth prediction and loop closure, in providing richer training signals that bootstrap learning and enhance data efficiency. Further, we examine the behavior of trained agents, their ability to localise, and their network activity dynamics, in order to analyse their navigational abilities.\n\nOur approach of augmenting deep RL with auxiliary objectives allows end-end learning and may encourage the development of more general navigation strategies. Notably, our work with auxiliary losses is related to (Jaderberg et al., 2017) which independently looks at data efficiency when exploiting auxiliary losses. One difference between the two works is that our auxiliary losses are online (for the current frame) and do not rely on any form of replay. Also the explored losses are very different in nature. Finally our focus is on the navigation domain and understanding if navigation emerges as a bi-product of solving an RL problem, while Jaderberg et al. (2017) is concerned with data efficiency for any RL-task.\n\nWhilst our best performing agents are relatively successful at navigation, their abilities would be stretched if larger demands were placed on rapid memory (e.g. in procedurally generated mazes), due to the limited capacity of the stacked LSTM in this regard. It will be important in the future to combine visually complex environments with architectures that make use of external memory (Graves et al., 2016;Weston et al., 2014;Olton et al., 1979) to enhance the navigational abilities of agents. Further, whilst this work has focused on investigating the benefits of auxiliary tasks for developing the ability to navigate through end-to-end deep reinforcement learning, it would be interesting for future work to compare these techniques with SLAM-based approaches.\n\n\nSupplementary Material\n\n\nA VIDEOS OF TRAINED NAVIGATION AGENTS\n\nWe show the behaviour of Nav A3C*+D 1 L agent in 5 videos, corresponding to the 5 navigation environments: I-maze 5 , (small) static maze 6 , (large) static maze 7 , (small) random goal maze 8 and (large) random goal maze 9 . Each video shows a high-resolution video (the actual inputs to the agent are down-sampled to 84\u00d784 RGB images), the value function over time (with fruit reward and goal acquisitions), the layout of the mazes with consecutive trajectories of the agent marked in different colours and the output of the trained position decoder, overlayed on top of the maze layout.\n\n\nB NETWORK ARCHITECTURE AND TRAINING B.1 THE ONLINE MULTI-LEARNER ALGORITHM FOR MULTI-TASK LEARNING\n\nWe introduce a class of neural network-based agents that have modular structures and that are trained on multiple tasks, with inputs coming from different modalities (vision, depth, past rewards and past actions). Implementing our agent architecture is simplified by its modular nature. Essentially, we construct multiple networks, one per task, using shared building blocks, and optimise these networks jointly. Some modules, such as the conv-net used for perceiving visual inputs, or the LSTMs used for learning the navigation policy, are shared among multiple tasks, while other modules, such as depth predictor g d or loop closure predictor g l , are task-specific. The navigation network that outputs the policy and the value function is trained using reinforcement learning, while the depth prediction and loop closure prediction networks are trained using self-supervised learning.\n\nWithin each thread of the asynchronous training environment, the agent plays on its own episode of the game environment, and therefore sees observation and reward pairs {(s t , r t )} and takes actions that are different from those experienced by agents from the other, parallel threads. Within a thread, the multiple tasks (navigation, depth and loop closure prediction) can be trained at their own schedule, and they add gradients to the shared parameter vector as they arrive. Within each thread, we use a flag-based system to subordinate gradient updates to the A3C reinforcement learning procedure.\n\n\nB.2 NETWORK AND TRAINING DETAILS\n\nFor all the experiments we use an encoder model with 2 convolutional layers followed by a fully connected layer, or recurrent layer(s), from which we predict the policy and value function. The architecture is similar to the one in (Mnih et al., 2016). The convolutional layers are as follows. The first convolutional layer has a kernel of size 8x8 and a stride of 4x4, and 16 feature maps. The second layer has a kernel of size 4x4 and a stride of 2x2, and 32 feature maps. The fully connected layer, in the FF A3C architecture in Figure Figure 8: Details of the architecture of the Nav A3C+D+L+Dr agent, taking in RGB visual inputs xt, past reward rt\u22121, previous action at\u22121 as well as agent-relative velocity vt, and producing policy \u03c0, value function V , depth predictions g d (ft) and g d (ht) as well as loop closure detection g l (ht).\nx t v t a t 1 r t 1 \u21e1 V f t h t g l (h t ) g d (f t ) 128 64x8 g d (f t ) g l (h t ) '\nbinning across 8 classes. The previous version of the agent had a single depth prediction MLP g d for regressing 8 \u00d7 16 = 128 depth pixels from the convnet outputs f t .\n\nThe parameters of each of the modules point to a subset of a common vector of parameters. We optimise these parameters using an asynchronous version of RMSProp (Tieleman & Hinton, 2012). (Nair et al., 2015) was a recent example of asynchronous and parallel gradient updates in deep reinforcement learning; in our case, we focus on the specific Asynchronous Advantage Actor Critic (A3C) reinforcement learning procedure in (Mnih et al., 2016).\n\nLearning follows closely the paradigm described in (Mnih et al., 2016). We use 16 workers and the same RMSProp algorithm without momentum or centering of the variance. Gradients are computed over non-overlaping chunks of the episode. The score for each point of a training curve is the average over all the episodes the model gets to finish in 5e4 environment steps.\n\nThe whole experiments are run for a maximum of 1e8 environment step. The agent has an action repeat of 4 as in (Mnih et al., 2016), which means that for 4 consecutive steps the agent will use the same action picked at the beginning of the series. For this reason through out the paper we actually report results in terms of agent perceived steps rather than environment steps. That is, the maximal number of agent perceived step that we do for any particular run is 2.5e7.\n\nIn our grid we sample hyper-parameters from categorical distributions:\n\n\u2022 Learning rate was sampled from [10 \u22124 , 5 \u00b7 10 \u22124 ].\n\n\u2022 Strength of the entropy regularization from [10 \u22124 , 10 \u22123 ].\n\n\u2022 Rewards were not scaled and not clipped in the new set of experiments. In our previous set of experiments, rewards were scaled by a factor from {0.3, 0.5} and clipped to 1 prior to back-propagation in the Advantage Actor-Critic algorithm. \u2022 Gradients are computed over non-overlaping chunks of 50 or 75 steps of the episode. In our previous set of experiments, we used chunks of 100 steps.\n\nThe auxiliary tasks, when used, have hyperparameters sampled from:\n\n\u2022 Coefficient \u03b2 d of the depth prediction loss from convnet features L d sampled from {3.33, 10, 33}. \u2022 Coefficient \u03b2 d of the depth prediction loss from LSTM hiddens L d sampled from {1, 3.33, 10}. \u2022 Coefficient \u03b2 l of the loop closure prediction loss L l sampled from {1, 3.33, 10}.\n\nLoop closure uses the following thresholds: maximum distance for position similarity \u03b7 1 = 1 square and minimum distance for removing trivial loop-closures \u03b7 2 = 2 squares. C ADDITIONAL RESULTS C.1 REWARD CLIPPING Figure 9 shows additional learning curves. In particular in the left plot we show that the baselines (A3C FF and A3C LSTM) as well as Nav A3C agent without auxiliary losses, perform worse without reward clipping than with reward clipping. It seems that removing reward clipping makes learning unstable in absence of auxiliary tasks. For this particular reason we chose to show the baselines with reward clipping in our main results.\n\n\nC.2 DEPTH PREDICTION AS REGRESSION OR CLASSIFICATION TASKS\n\nThe right subplot of Figure 9 compares having depth as an input versus as a target. Note that using RGBD inputs to the Nav A3C agent performs even worse than predicting depth as a regression task, and in general is worse than predicting depth as a classification task.\n\n\nC.3 NON-NAVIGATION TASKS IN 3D MAZE ENVIRONMENTS\n\nWe have evaluated the behaviour of the agents introduced in this paper, as well as agents with reward prediction, introduced in (Jaderberg et al., 2017) (Nav A3C*+R) and with a combination of reward prediction from the convnet and depth prediction from the policy LSTM (Nav A3C+RD 2 ), on different 3D maze environments with non-navigation specific tasks. In the first environment, Seek-Avoid Arena, there are apples (yielding 1 point) and lemons (yielding -1 point) disposed in an arena, and the agents needs to pick all the apples before respawning; episodes last 20 seconds. The second environment, Stairway to Melon, is a thin square corridor; in one direction, there is a lemon followed by a stairway to a melon (10 points, resets the level) and in the other direction are 7 apples and a dead end, with the melon visible but not reachable. The agent spawns between the lemon and the apples with a random orientation. Both environments have been released in DeepMind Lab (Beattie et al., 2016). These environments do not require navigation skills such as shortest path planning, but a simple reward identification (lemon vs. apple or melon) and persistent exploration. As Figure 10 shows, there is no major difference between auxiliary tasks related to depth prediction or reward prediction. Depth prediction boosts the performance of the agent beyond that of the stacked LSTM architecture, hinting at a more general applicability of depth prediction beyond navigation tasks.\n\n\nC.4 SENSITIVITY TOWARDS HYPER-PARAMETER SAMPLING\n\nFor each of the experiments in this paper, 64 replicas were run with hyperparameters (learning rate, entropy cost) sampled from the same interval. Figure 11 shows that the Nav architectures with auxiliary tasks achieve higher results for a comparatively larger number of replicas, hinting at the fact that auxiliary tasks make learning more robust to the choice of hyperparameters.\n\n\nC.5 ASYMPTOTIC PERFORMANCE OF THE AGENTS\n\nFinally, we compared the asymptotic performance of the agents, both in terms of navigation (final rewards obtained at the end of the episode) and in terms of their representation in the policy LSTM. Rather than visualising the convolutional filters, we quantify the change in representation, with and  without auxiliary task, in terms of position decoding, following the approach explained in Section 5.1. Specifically, we compare the baseline agent (LSTM A3C*) to a navigation agent with one auxiliary task (depth prediction), that gets about twice as many gradient updates for the same number of frames seen in the environment: once for the RL task and once for the auxiliary depth prediction task. As Table 3 shows, the performance of the baseline agent as well as the position decoding accuracy do significantly increase after twice the number of training steps (going from 57 points to 90 points, and from 33.4% to 66.5%, but do not reach the performance and position decoding accuracy of the Nav A3C+D 2 agent after half the number of training frames. For this reason, we believe that the auxiliary task do more than simply accelerate training.\n\n\nDeep RL has recently been used in the navigation domain. Kulkarni et al. (2016) used a feedforward architecture to learn deep successor representations that enabled behavioral flexibility to reward changes in the MazeBase gridworld, and provided a means to detect bottlenecks in 3D VizDoom. Zhu et al. (2016) used a feedforward siamese actor-critic architecture incorporating a pretrained ResNet to support navigation to a target in a discretised 3D environment. Oh et al. (2016) investigated the performance of a variety of networks with external memory (Weston et al., 2014) on simple navigation tasks in the Minecraft 3D block world environment. Tessler et al. (2016) also used the Minecraft domain to show the benefit of combining feedforward deep-Q networks with the learning of resuable skill modules (cf options: (Sutton et al.\n\nFigure 3 :\n3Rewards achieved by the agents on 5 different tasks: two static mazes (small and large) with fixed goals, two static mazes with comparable layout but with dynamic goals and the I-maze. Results are averaged over the top 5 random hyperparameters for each agent-task configuration. Star in the label indicates the use of reward clipping. Please see text for more details.\n\nFigure 4 :\n4left: Example of depth predictions (pairs of ground truth and predicted depths), sampled every 40 steps. right: Example of loop closure prediction. The agent starts at the gray square and the trajectory is plotted in gray. Blue dots correspond to true positive outputs of the loop closure detector; red cross correspond to false positives and green cross to false negatives. Note the false positives that occur when the agent is actually a few squares away from actual loop closure.\n\nFigure 7 :\n7LSTM cell activations of LSTM A3C and Nav A3C*+D1L agents from the I-Maze collected over multiple episodes and reduced to 2 dimensions using tSNE, then coloured to represent the goal location. Policy-dictating LSTM of Nav A3C agent shown.\n\n\n2a has 256 hidden units (and outputs visual features f t ). The LSTM in the LSTM A3C architecture has 256 hidden units (and outputs LSTM hidden activations h t ). The LSTMs inFigure 2cand 2d are fed extra inputs (past reward r t\u22121 , previous action a t expressed as a one-hot vector of dimension 8 and agent-relative lateral and rotational velocity v t encoded by a 6-dimensional vector), which are all concatenated to vector f t . The Nav A3C architectures (Figure 2c,d) have a first LSTM with 64 or 128 hiddens and a second LSTM with 256 hiddens. The depth predictor modules g d , g d and the loop closure detection module g l are all single-layer MLPs with 128 hidden units. The depth MLPs are followed by 64 independent 8-dimensional softmax outputs (one per depth pixel). The loop closure MLP is followed by a 2-dimensional softmax output. We illustrate onFigure 8the architecture of the Nav A3C+D+L+Dr agent.Depth is taken as the Z-buffer from the Labyrinth environment (with values between 0 and 255), divided by 255 and taken to power 10 to spread the values in interval [0, 1]. We empirically decided to use the following quantization: {0, 0.05, 0.175, 0.3, 0.425, 0.55, 0.675, 0.8, 1} to ensure a uniform 8x8\n\nFigure 9 :\n9Goal maze (small): comparison of reward clipping (b) Random Goal maze (small): comparison of depth prediction Results are averaged over the top 5 random hyperparameters for each agent-task configuration. Star in the label indicates the use of reward clipping. Please see text for more details.\n\nFigure 10 :Figure 11 :\n1011Comparison of agent architectures over non-navigation maze configurations, Seek-Avoid Arena and Stairway to Melon, described in details in (Beattie et al., 2016). Image credits for (c) and (d): (Jaderberg et al.Plot of the Area Under the Curve (AUC) of the rewards achieved by the agents, across different experiments and on 3 different tasks: large static maze with fixed goals, large static maze with comparable layout but with dynamic goals, and the I-maze. The reward AUC values are computed for each replica; 64 replicas were run per experiment and the reward AUC values are sorted by decreasing value.\n\n\nTable 1: Comparison of four agent architectures over five maze configurations, including random and static goals. AUC (Area under learning curve), Score, and % Human are averaged over the best 5 hyperparameters.Mean over top 5 agents \nHighest reward agent \nMaze \nAgent \nAUC \nScore \n% Human \nGoals \nPosition Acc \nLatency 1:>1 \nScore \n\nI-Maze \nFF A3C* \n75.5 \n98 \n-\n94/100 \n42.2 \n9.3s:9.0s \n102 \nLSTM A3C* \n112.4 \n244 \n-\n100/100 \n87.8 \n15.3s:3.2s \n203 \nNav A3C*+D1L \n169.7 \n266 \n-\n100/100 \n68.5 \n10.7s:2.7s \n252 \nNav A3C+D2 \n203.5 \n268 \n-\n100/100 \n62.3 \n8.8s:2.5s \n269 \nNav A3C+D1D2L \n199.9 \n258 \n-\n100/100 \n61.0 \n9.9s:2.5s \n251 \n\nStatic 1 \nFF A3C* \n41.3 \n79 \n83 \n100/100 \n64.3 \n8.8s:8.7s \n84 \nLSTM A3C* \n44.3 \n98 \n103 \n100/100 \n88.6 \n6.1s:5.9s \n110 \nNav A3C+D2 \n104.3 \n119 \n125 \n100/100 \n95.4 \n5.9s:5.4s \n122 \nNav A3C+D1D2L \n102.3 \n116 \n122 \n100/100 \n94.5 \n5.9s:5.4s \n123 \n\nStatic 2 \nFF A3C* \n35.8 \n81 \n47 \n100/100 \n55.6 \n24.2s:22.9s \n111 \nLSTM A3C* \n46.0 \n153 \n91 \n100/100 \n80.4 \n15.5s:14.9s \n155 \nNav A3C+D2 \n157.6 \n200 \n116 \n100/100 \n94.0 \n10.9s:11.0s \n202 \nNav A3C+D1D2L \n156.1 \n192 \n112 \n100/100 \n92.6 \n11.1s:12.0s \n192 \n\nRandom Goal 1 \nFF A3C* \n37.5 \n61 \n57.5 \n88/100 \n51.8 \n11.0:9.9s \n64 \nLSTM A3C* \n46.6 \n65 \n61.3 \n85/100 \n51.1 \n11.1s:9.2s \n66 \nNav A3C+D2 \n71.1 \n96 \n91 \n100/100 \n85.5 \n14.0s:7.1s \n91 \nNav A3C+D1D2L \n64.2 \n81 \n76 \n81/100 \n83.7 \n11.5s:7.2s \n74.6 \n\nRandom Goal 2 \nFF A3C* \n50.0 \n69 \n40.1 \n93/100 \n30.0 \n27.3s:28.2s \n77 \nLSTM A3C* \n37.5 \n57 \n32.6 \n74/100 \n33.4 \n21.5s:29.7s \n51.3 \nNav A3C*+D1L \n62.5 \n90 \n52.3 \n90/100 \n51.0 \n17.9s:18.4s \n106 \nNav A3C+D2 \n82.1 \n103 \n59 \n79/100 \n72.4 \n15.4s:15.0s \n109 \nNav A3C+D1D2L \n78.5 \n91 \n53 \n74/100 \n81.5 \n15.9s:16.0s \n102 \n\n\n\nTable 3 :\n3Asymptotic performance analysis of two agents in the Random Goal 2 maze, comparing training for 120M Labyrinth frames vs. 240M frames.\nThe image is cropped before being subsampled to lessen the floor and ceiling which have little relevant depth information.\nThe environments used in this paper are publicly available at https://github.com/deepmind/lab.\nAn exception is the Nav A3C*+D1L agent on the I-maze(Figure 3c), which uses depth regression and reward clipping. While it does worse, we include it because some analysis is based on this agent.\nACKNOWLEDGEMENTS 9Under review as a conference paper at ICLR 2017We would like to thank Alexander Pritzel, Thomas Degris and Joseph Modayil for useful discussions, Charles Beattie, Julian Schrittwieser, Marcus Wainwright, and Stig Petersen for environment design and development, and Amir Sadik and Sarah York for expert human game testing.\nDeep reinforcement learning in a 3-d blockworld environment. Trevor Barron, Matthew Whitehead, Alan Yeung, Deep Reinforcement Learning: Frontiers and Challenges, IJCAI. Trevor Barron, Matthew Whitehead, and Alan Yeung. Deep reinforcement learning in a 3-d block- world environment. In Deep Reinforcement Learning: Frontiers and Challenges, IJCAI, 2016.\n\nCharles Beattie, Joel Z Leibo, Denis Teplyashin, Tom Ward, Marcus Wainwright, Heinrich K\u00e3ijttler, Andrew Lefrancq, Simon Green, Victor Valdes, Amir Sadik, Julian Schrittwieser, Demis Hassabis, Shane Legg, and Stig Petersen. Deepmind lab. In arXiv. Keith Anderson, Sarah York, Max Cant, Adam Cain, Adrian Bolton, Stephen Gaffney, Helen KingCharles Beattie, Joel Z. Leibo, Denis Teplyashin, Tom Ward, Marcus Wainwright, Heinrich K\u00c3ijttler, Andrew Lefrancq, Simon Green, Victor Valdes, Amir Sadik, Julian Schrittwieser, Keith Anderson, Sarah York, Max Cant, Adam Cain, Adrian Bolton, Stephen Gaffney, Helen King, Demis Hassabis, Shane Legg, and Stig Petersen. Deepmind lab. In arXiv, 2016. URL https://arxiv.org/ abs/1612.03801.\n\nA solution to the simultaneous localization and map building (slam) problem. Paul Mwm Gamini Dissanayake, Steve Newman, Hugh F Clark, Michael Durrant-Whyte, Csorba, IEEE Transactions on Robotics and Automation. 173MWM Gamini Dissanayake, Paul Newman, Steve Clark, Hugh F. Durrant-Whyte, and Michael Csorba. A solution to the simultaneous localization and map building (slam) problem. IEEE Transactions on Robotics and Automation, 17(3):229-241, 2001.\n\nDepth map prediction from a single image using a multi-scale deep network. David Eigen, Christian Puhrsch, Rob Fergus, Proc. of Neural Information Processing Systems, NIPS. of Neural Information essing Systems, NIPSDavid Eigen, Christian Puhrsch, and Rob Fergus. Depth map prediction from a single image using a multi-scale deep network. In Proc. of Neural Information Processing Systems, NIPS, 2014.\n\nSpeech recognition with deep recurrent neural networks. Alex Graves, Mohamed Abdelrahman, Geoffrey Hinton, Proceedings of the International Conference on Acoustics, Speech and Signal Processing. the International Conference on Acoustics, Speech and Signal ProcessingAlex Graves, Mohamed Abdelrahman, and Geoffrey Hinton. Speech recognition with deep recurrent neural networks. In Proceedings of the International Conference on Acoustics, Speech and Signal Processing, ICASSP, 2013.\n\nHybrid computing using a neural network with dynamic external memory. Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska-Barwi\u0144ska, Sergio G\u00f3mez Colmenarejo, Edward Grefenstette, Tiago Ramalho, John Agapiou, Nature. Alex Graves, Greg Wayne, Malcolm Reynolds, Tim Harley, Ivo Danihelka, Agnieszka Grabska- Barwi\u0144ska, Sergio G\u00f3mez Colmenarejo, Edward Grefenstette, Tiago Ramalho, John Agapiou, et al. Hybrid computing using a neural network with dynamic external memory. Nature, 2016.\n\nDeep recurrent q-learning for partially observable mdps. J Matthew, Peter Hausknecht, Stone, Proc. of Conf. on Artificial Intelligence, AAAI. of Conf. on Artificial Intelligence, AAAIMatthew J. Hausknecht and Peter Stone. Deep recurrent q-learning for partially observable mdps. Proc. of Conf. on Artificial Intelligence, AAAI, 2015.\n\nReinforcement learning with unsupervised auxiliary tasks. Max Jaderberg, Volodymir Mnih, Wojciech Czarnecki, Tom Schaul, Joel Z Leibo, David Silver, Koray Kavukcuoglu, Submitted to Int'l Conference on Learning Representations, ICLR. Max Jaderberg, Volodymir Mnih, Wojciech Czarnecki, Tom Schaul, Joel Z. Leibo, David Silver, and Koray Kavukcuoglu. Reinforcement learning with unsupervised auxiliary tasks. In Submitted to Int'l Conference on Learning Representations, ICLR, 2017.\n\nEvolving large-scale neural networks for vision-based reinforcement learning. Jan Koutnik, Giuseppe Cuccu, J\u00e3ijrgen Schmidhuber, Faustino Gomez, Proceedings of the 15th annual conference on Genetic and evolutionary computation. the 15th annual conference on Genetic and evolutionary computationGECCOJan Koutnik, Giuseppe Cuccu, J\u00c3ijrgen Schmidhuber, and Faustino Gomez. Evolving large-scale neural networks for vision-based reinforcement learning. In Proceedings of the 15th annual conference on Genetic and evolutionary computation, GECCO, 2013.\n\nDeep successor reinforcement learning. CoRR, abs/1606.02396. D Tejas, Ardavan Kulkarni, Simanta Saeedi, Samuel J Gautam, Gershman, Tejas D. Kulkarni, Ardavan Saeedi, Simanta Gautam, and Samuel J. Gershman. Deep successor reinforcement learning. CoRR, abs/1606.02396, 2016. URL http://arxiv.org/abs/1606. 02396.\n\nPlaying FPS games with deep reinforcement learning. CoRR. Guillaume Lample, Devendra Singh Chaplot, Guillaume Lample and Devendra Singh Chaplot. Playing FPS games with deep reinforcement learning. CoRR, 2016. URL http://arxiv.org/abs/1609.05521.\n\nRecurrent reinforcement learning: A hybrid approach. Xiujun Li, Lihong Li, Jianfeng Gao, Xiaodong He, Jianshu Chen, Li Deng, Ji He, Proceedings of the International Conference on Learning Representations, ICLR. the International Conference on Learning Representations, ICLRXiujun Li, Lihong Li, Jianfeng Gao, Xiaodong He, Jianshu Chen, Li Deng, and Ji He. Recurrent reinforcement learning: A hybrid approach. In Proceedings of the International Conference on Learning Representations, ICLR, 2016. URL https://arxiv.org/abs/1509.03044.\n\nMassively parallel methods for deep reinforcement learning. Arun Nair, Praveen Srinivasan, Sam Blackwell, Cagdas Alcicek, Rory Fearon, Proceedings of the International Conference on Machine Learning Deep Learning Workshop, ICML. the International Conference on Machine Learning Deep Learning Workshop, ICMLArun Nair, Praveen Srinivasan, Sam Blackwell, Cagdas Alcicek, Rory Fearon, et al. Massively parallel methods for deep reinforcement learning. In Proceedings of the International Conference on Machine Learning Deep Learning Workshop, ICML, 2015.\n\nLanguage understanding for text-based games using deep reinforcement learning. Karthik Narasimhan, Tejas D Kulkarni, Regina Barzilay, Proc. of Empirical Methods in Natural Language Processing. of Empirical Methods in Natural Language essingKarthik Narasimhan, Tejas D. Kulkarni, and Regina Barzilay. Language understanding for text-based games using deep reinforcement learning. In Proc. of Empirical Methods in Natural Language Processing, EMNLP, 2015.\n\nControl of memory, active perception, and action in minecraft. Junhyuk Oh, Valliappa Chockalingam, P Satinder, Honglak Singh, Lee, Proc. of International Conference on Machine Learning, ICML. of International Conference on Machine Learning, ICMLJunhyuk Oh, Valliappa Chockalingam, Satinder P. Singh, and Honglak Lee. Control of memory, active perception, and action in minecraft. In Proc. of International Conference on Machine Learning, ICML, 2016.\n\nHippocampus, space, and memory. James T David S Olton, Gail E Becker, Handelmann, Behavioral and Brain Sciences. 203David S Olton, James T Becker, and Gail E Handelmann. Hippocampus, space, and memory. Behavioral and Brain Sciences, 2(03):313-322, 1979.\n\nRazvan Pascanu, Caglar Gulcehre, Kyunghyun Cho, Yoshua Bengio, arXiv:1312.6026How to construct deep recurrent neural networks. arXiv preprintRazvan Pascanu, Caglar Gulcehre, Kyunghyun Cho, and Yoshua Bengio. How to construct deep recurrent neural networks. arXiv preprint arXiv:1312.6026, 2013.\n\nSemi-supervised learning with ladder networks. Antti Rasmus, Mathias Berglund, Mikko Honkala, Harri Valpola, Tapani Raiko, Advances in Neural Information Processing Systems, NIPS. Antti Rasmus, Mathias Berglund, Mikko Honkala, Harri Valpola, and Tapani Raiko. Semi-supervised learning with ladder networks. In Advances in Neural Information Processing Systems, NIPS, 2015.\n\nRule-injection hints as a means of improving network performance and learning time. C Steven, Y L Suddarth, Kergosien, Neural Networks. SpringerSteven C Suddarth and YL Kergosien. Rule-injection hints as a means of improving network performance and learning time. In Neural Networks, pp. 120-129. Springer, 1990.\n\nBetween mdps and semi-mdps: A framework for temporal abstraction in reinforcement learning. Doina Richard S Sutton, Satinder Precup, Singh, Artificial intelligence. 1121Richard S Sutton, Doina Precup, and Satinder Singh. Between mdps and semi-mdps: A framework for temporal abstraction in reinforcement learning. Artificial intelligence, 112(1):181-211, 1999.\n\nTowards cognitive exploration through deep reinforcement learning for mobile robots. Lei Tai, Ming Liu, arXiv. Lei Tai and Ming Liu. Towards cognitive exploration through deep reinforcement learning for mobile robots. In arXiv, 2016. URL https://arxiv.org/abs/1610.01733.\n\nA deep hierarchical approach to lifelong learning in minecraft. Chen Tessler, Shahar Givony, Tom Zahavy, Daniel J Mankowitz, Shie Mannor, abs/1604.07255Chen Tessler, Shahar Givony, Tom Zahavy, Daniel J. Mankowitz, and Shie Mannor. A deep hierarchical approach to lifelong learning in minecraft. CoRR, abs/1604.07255, 2016. URL http://arxiv.org/abs/1604.07255.\n\nLecture 6.5 -rmsprop: Divide the gradient by a running average of its recent magnitude. Tijmen Tieleman, Geoffrey Hinton, Coursera: Neural Networks for Machine Learning. 4Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5 -rmsprop: Divide the gradient by a running average of its recent magnitude. In Coursera: Neural Networks for Machine Learning, volume 4, 2012.\n\nPixel recurrent neural networks. A Van Den Oord, N Kalchbrenner, K Kavukcuoglu, A. van den Oord, N. Kalchbrenner, and K. Kavukcuoglu. Pixel recurrent neural networks. 2016.\n\n. Jason Weston, Sumit Chopra, Antoine Bordes, arXiv:1410.3916Memory networks. arXiv preprintJason Weston, Sumit Chopra, and Antoine Bordes. Memory networks. arXiv preprint arXiv:1410.3916, 2014.\n\nAugmenting supervised neural networks with unsupervised objectives for large-scale image classification. Yuting Zhang, Kibok Lee, Honglak Lee, Proc. of International Conference on Machine Learning, ICML. of International Conference on Machine Learning, ICMLYuting Zhang, Kibok Lee, and Honglak Lee. Augmenting supervised neural networks with unsu- pervised objectives for large-scale image classification. In Proc. of International Conference on Machine Learning, ICML, 2016.\n\nStacked what-where auto-encoders. Junbo Zhao, Micha\u00ebl Mathieu, Ross Goroshin, Yann Lecun, Int'l Conf. on Learning Representations (Workshop), ICLR. Junbo Zhao, Micha\u00ebl Mathieu, Ross Goroshin, and Yann LeCun. Stacked what-where auto-encoders. Int'l Conf. on Learning Representations (Workshop), ICLR, 2015. URL http://arxiv.org/ abs/1506.02351.\n\nTarget-driven visual navigation in indoor scenes using deep reinforcement learning. Yuke Zhu, Roozbeh Mottaghi, Eric Kolve, Joseph J Lim, Abhinav Gupta, Li Fei-Fei, Ali Farhadi, abs/1609.05143CoRRYuke Zhu, Roozbeh Mottaghi, Eric Kolve, Joseph J. Lim, Abhinav Gupta, Li Fei-Fei, and Ali Farhadi. Target-driven visual navigation in indoor scenes using deep reinforcement learning. CoRR, abs/1609.05143, 2016. URL http://arxiv.org/abs/1609.05143.\n\nPS4iJ7Hk_BU 6 Video of the Nav A3C*+D1L agent on static maze. 1Nav A3C*+D1L agent on static maze. kH1AvRAYkbI 8 Video of the Nav A3C*+D1L agent on random goal maze 1: https://youtu.be/5IBT2UADJY0 9 Video of the Nav A3C*+D1L agent on random goal maze 2Video of the Nav A3C*+D1L agent on the I-maze: https://youtu.be/PS4iJ7Hk_BU 6 Video of the Nav A3C*+D1L agent on static maze 1: https://youtu.be/-HsjQoIou_c 7 Video of the Nav A3C*+D1L agent on static maze 2: https://youtu.be/kH1AvRAYkbI 8 Video of the Nav A3C*+D1L agent on random goal maze 1: https://youtu.be/5IBT2UADJY0 9 Video of the Nav A3C*+D1L agent on random goal maze 2: https://youtu.be/e10mXgBG9yo\n", "annotations": {"author": "[{\"end\":98,\"start\":48},{\"end\":124,\"start\":99},{\"end\":165,\"start\":125},{\"end\":206,\"start\":166},{\"end\":234,\"start\":207},{\"end\":278,\"start\":235},{\"end\":319,\"start\":279},{\"end\":364,\"start\":320},{\"end\":406,\"start\":365},{\"end\":453,\"start\":407},{\"end\":501,\"start\":454},{\"end\":525,\"start\":502}]", "publisher": null, "author_last_name": "[{\"end\":62,\"start\":54},{\"end\":113,\"start\":106},{\"end\":136,\"start\":131},{\"end\":178,\"start\":173},{\"end\":223,\"start\":216},{\"end\":248,\"start\":242},{\"end\":290,\"start\":285},{\"end\":333,\"start\":325},{\"end\":378,\"start\":373},{\"end\":424,\"start\":413},{\"end\":470,\"start\":463},{\"end\":514,\"start\":507}]", "author_first_name": "[{\"end\":53,\"start\":48},{\"end\":105,\"start\":99},{\"end\":130,\"start\":125},{\"end\":172,\"start\":166},{\"end\":213,\"start\":207},{\"end\":215,\"start\":214},{\"end\":241,\"start\":235},{\"end\":284,\"start\":279},{\"end\":324,\"start\":320},{\"end\":372,\"start\":365},{\"end\":412,\"start\":407},{\"end\":462,\"start\":454},{\"end\":506,\"start\":502}]", "author_affiliation": "[{\"end\":97,\"start\":89},{\"end\":123,\"start\":115},{\"end\":164,\"start\":156},{\"end\":205,\"start\":197},{\"end\":233,\"start\":225},{\"end\":277,\"start\":269},{\"end\":318,\"start\":310},{\"end\":363,\"start\":355},{\"end\":405,\"start\":397},{\"end\":452,\"start\":444},{\"end\":500,\"start\":492},{\"end\":524,\"start\":516}]", "title": "[{\"end\":45,\"start\":1},{\"end\":570,\"start\":526}]", "venue": null, "abstract": "[{\"end\":1511,\"start\":619}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1821,\"start\":1795},{\"end\":1900,\"start\":1881},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3993,\"start\":3972},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4014,\"start\":3993},{\"end\":5408,\"start\":5390},{\"end\":6101,\"start\":6082},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8985,\"start\":8966},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":10125,\"start\":10098},{\"end\":11919,\"start\":11900},{\"end\":12080,\"start\":12061},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":12232,\"start\":12210},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12257,\"start\":12232},{\"end\":12275,\"start\":12257},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":12299,\"start\":12275},{\"end\":12309,\"start\":12302},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":12490,\"start\":12470},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":12742,\"start\":12714},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":12913,\"start\":12893},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":12933,\"start\":12913},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":12951,\"start\":12933},{\"end\":12973,\"start\":12951},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":13370,\"start\":13347},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":14130,\"start\":14108},{\"end\":14279,\"start\":14278},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":15883,\"start\":15863},{\"end\":25102,\"start\":25079},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":26060,\"start\":26036},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":27112,\"start\":27088},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":28062,\"start\":28038},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":28494,\"start\":28471},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":28956,\"start\":28935},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":28976,\"start\":28956},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":28995,\"start\":28976},{\"end\":31853,\"start\":31834},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":32888,\"start\":32863},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":32909,\"start\":32890},{\"end\":33144,\"start\":33125},{\"end\":33217,\"start\":33198},{\"end\":33645,\"start\":33626},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":36956,\"start\":36934}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":39904,\"start\":39068},{\"attributes\":{\"id\":\"fig_1\"},\"end\":40286,\"start\":39905},{\"attributes\":{\"id\":\"fig_2\"},\"end\":40782,\"start\":40287},{\"attributes\":{\"id\":\"fig_3\"},\"end\":41034,\"start\":40783},{\"attributes\":{\"id\":\"fig_4\"},\"end\":42255,\"start\":41035},{\"attributes\":{\"id\":\"fig_5\"},\"end\":42562,\"start\":42256},{\"attributes\":{\"id\":\"fig_6\"},\"end\":43198,\"start\":42563},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":44885,\"start\":43199},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":45032,\"start\":44886}]", "paragraph": "[{\"end\":2356,\"start\":1527},{\"end\":2821,\"start\":2358},{\"end\":3884,\"start\":2823},{\"end\":4880,\"start\":3886},{\"end\":5279,\"start\":4893},{\"end\":6021,\"start\":5281},{\"end\":7122,\"start\":6023},{\"end\":7618,\"start\":7287},{\"end\":8404,\"start\":7620},{\"end\":9227,\"start\":8425},{\"end\":9822,\"start\":9229},{\"end\":10126,\"start\":9824},{\"end\":10609,\"start\":10128},{\"end\":11660,\"start\":10637},{\"end\":12637,\"start\":11677},{\"end\":13713,\"start\":12639},{\"end\":14015,\"start\":13715},{\"end\":15034,\"start\":14031},{\"end\":15740,\"start\":15036},{\"end\":16326,\"start\":15742},{\"end\":17384,\"start\":16328},{\"end\":18050,\"start\":17386},{\"end\":18592,\"start\":18052},{\"end\":19265,\"start\":18594},{\"end\":20060,\"start\":19267},{\"end\":20861,\"start\":20062},{\"end\":21607,\"start\":20894},{\"end\":22645,\"start\":21609},{\"end\":24034,\"start\":22647},{\"end\":24772,\"start\":24036},{\"end\":24902,\"start\":24803},{\"end\":25813,\"start\":24904},{\"end\":27202,\"start\":25873},{\"end\":27824,\"start\":27217},{\"end\":28545,\"start\":27826},{\"end\":29314,\"start\":28547},{\"end\":29970,\"start\":29381},{\"end\":30961,\"start\":30073},{\"end\":31566,\"start\":30963},{\"end\":32444,\"start\":31603},{\"end\":32701,\"start\":32532},{\"end\":33145,\"start\":32703},{\"end\":33513,\"start\":33147},{\"end\":33987,\"start\":33515},{\"end\":34059,\"start\":33989},{\"end\":34115,\"start\":34061},{\"end\":34180,\"start\":34117},{\"end\":34573,\"start\":34182},{\"end\":34641,\"start\":34575},{\"end\":34927,\"start\":34643},{\"end\":35575,\"start\":34929},{\"end\":35906,\"start\":35638},{\"end\":37438,\"start\":35959},{\"end\":37872,\"start\":37491},{\"end\":39067,\"start\":37917}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":7286,\"start\":7123},{\"attributes\":{\"id\":\"formula_1\"},\"end\":32531,\"start\":32445}]", "table_ref": "[{\"end\":19873,\"start\":19866},{\"end\":22210,\"start\":22202},{\"end\":24251,\"start\":24244},{\"end\":26419,\"start\":26412},{\"end\":26853,\"start\":26846},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":38628,\"start\":38621}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1525,\"start\":1513},{\"attributes\":{\"n\":\"2\"},\"end\":4891,\"start\":4883},{\"attributes\":{\"n\":\"2.1\"},\"end\":8423,\"start\":8407},{\"attributes\":{\"n\":\"2.2\"},\"end\":10635,\"start\":10612},{\"attributes\":{\"n\":\"3\"},\"end\":11675,\"start\":11663},{\"attributes\":{\"n\":\"4\"},\"end\":14029,\"start\":14018},{\"attributes\":{\"n\":\"5\"},\"end\":20872,\"start\":20864},{\"attributes\":{\"n\":\"5.1\"},\"end\":20892,\"start\":20875},{\"attributes\":{\"n\":\"5.2\"},\"end\":24801,\"start\":24775},{\"attributes\":{\"n\":\"5.3\"},\"end\":25871,\"start\":25816},{\"attributes\":{\"n\":\"6\"},\"end\":27215,\"start\":27205},{\"end\":29339,\"start\":29317},{\"end\":29379,\"start\":29342},{\"end\":30071,\"start\":29973},{\"end\":31601,\"start\":31569},{\"end\":35636,\"start\":35578},{\"end\":35957,\"start\":35909},{\"end\":37489,\"start\":37441},{\"end\":37915,\"start\":37875},{\"end\":39916,\"start\":39906},{\"end\":40298,\"start\":40288},{\"end\":40794,\"start\":40784},{\"end\":42267,\"start\":42257},{\"end\":42586,\"start\":42564},{\"end\":44896,\"start\":44887}]", "table": "[{\"end\":44885,\"start\":43412}]", "figure_caption": "[{\"end\":39904,\"start\":39070},{\"end\":40286,\"start\":39918},{\"end\":40782,\"start\":40300},{\"end\":41034,\"start\":40796},{\"end\":42255,\"start\":41037},{\"end\":42562,\"start\":42269},{\"end\":43198,\"start\":42591},{\"end\":43412,\"start\":43201},{\"end\":45032,\"start\":44898}]", "figure_ref": "[{\"end\":3619,\"start\":3611},{\"end\":4353,\"start\":4345},{\"end\":6223,\"start\":6214},{\"end\":6437,\"start\":6427},{\"end\":7785,\"start\":7776},{\"end\":14142,\"start\":14136},{\"end\":15706,\"start\":15698},{\"end\":15778,\"start\":15770},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":16438,\"start\":16430},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":17925,\"start\":17916},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":18675,\"start\":18657},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":20430,\"start\":20422},{\"end\":21686,\"start\":21678},{\"end\":23225,\"start\":23217},{\"end\":23739,\"start\":23731},{\"end\":24505,\"start\":24497},{\"end\":32140,\"start\":32134},{\"end\":32149,\"start\":32141},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":35151,\"start\":35143},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":35667,\"start\":35659},{\"end\":37144,\"start\":37135},{\"end\":37647,\"start\":37638}]", "bib_author_first_name": "[{\"end\":45854,\"start\":45848},{\"end\":45870,\"start\":45863},{\"end\":45886,\"start\":45882},{\"end\":46148,\"start\":46141},{\"end\":46162,\"start\":46158},{\"end\":46164,\"start\":46163},{\"end\":46177,\"start\":46172},{\"end\":46193,\"start\":46190},{\"end\":46206,\"start\":46200},{\"end\":46227,\"start\":46219},{\"end\":46245,\"start\":46239},{\"end\":46261,\"start\":46256},{\"end\":46275,\"start\":46269},{\"end\":46288,\"start\":46284},{\"end\":46302,\"start\":46296},{\"end\":46949,\"start\":46945},{\"end\":46979,\"start\":46974},{\"end\":46992,\"start\":46988},{\"end\":46994,\"start\":46993},{\"end\":47009,\"start\":47002},{\"end\":47400,\"start\":47395},{\"end\":47417,\"start\":47408},{\"end\":47430,\"start\":47427},{\"end\":47782,\"start\":47778},{\"end\":47798,\"start\":47791},{\"end\":47820,\"start\":47812},{\"end\":48279,\"start\":48275},{\"end\":48292,\"start\":48288},{\"end\":48307,\"start\":48300},{\"end\":48321,\"start\":48318},{\"end\":48333,\"start\":48330},{\"end\":48354,\"start\":48345},{\"end\":48380,\"start\":48374},{\"end\":48386,\"start\":48381},{\"end\":48406,\"start\":48400},{\"end\":48426,\"start\":48421},{\"end\":48440,\"start\":48436},{\"end\":48784,\"start\":48783},{\"end\":48799,\"start\":48794},{\"end\":49122,\"start\":49119},{\"end\":49143,\"start\":49134},{\"end\":49158,\"start\":49150},{\"end\":49173,\"start\":49170},{\"end\":49186,\"start\":49182},{\"end\":49188,\"start\":49187},{\"end\":49201,\"start\":49196},{\"end\":49215,\"start\":49210},{\"end\":49623,\"start\":49620},{\"end\":49641,\"start\":49633},{\"end\":49657,\"start\":49649},{\"end\":49679,\"start\":49671},{\"end\":50152,\"start\":50151},{\"end\":50167,\"start\":50160},{\"end\":50185,\"start\":50178},{\"end\":50200,\"start\":50194},{\"end\":50202,\"start\":50201},{\"end\":50469,\"start\":50460},{\"end\":50486,\"start\":50478},{\"end\":50708,\"start\":50702},{\"end\":50719,\"start\":50713},{\"end\":50732,\"start\":50724},{\"end\":50746,\"start\":50738},{\"end\":50758,\"start\":50751},{\"end\":50767,\"start\":50765},{\"end\":50776,\"start\":50774},{\"end\":51249,\"start\":51245},{\"end\":51263,\"start\":51256},{\"end\":51279,\"start\":51276},{\"end\":51297,\"start\":51291},{\"end\":51311,\"start\":51307},{\"end\":51823,\"start\":51816},{\"end\":51841,\"start\":51836},{\"end\":51843,\"start\":51842},{\"end\":51860,\"start\":51854},{\"end\":52262,\"start\":52255},{\"end\":52276,\"start\":52267},{\"end\":52292,\"start\":52291},{\"end\":52310,\"start\":52303},{\"end\":52680,\"start\":52675},{\"end\":52682,\"start\":52681},{\"end\":52702,\"start\":52698},{\"end\":52704,\"start\":52703},{\"end\":52904,\"start\":52898},{\"end\":52920,\"start\":52914},{\"end\":52940,\"start\":52931},{\"end\":52952,\"start\":52946},{\"end\":53246,\"start\":53241},{\"end\":53262,\"start\":53255},{\"end\":53278,\"start\":53273},{\"end\":53293,\"start\":53288},{\"end\":53309,\"start\":53303},{\"end\":53653,\"start\":53652},{\"end\":53663,\"start\":53662},{\"end\":53665,\"start\":53664},{\"end\":53979,\"start\":53974},{\"end\":54006,\"start\":53998},{\"end\":54331,\"start\":54328},{\"end\":54341,\"start\":54337},{\"end\":54584,\"start\":54580},{\"end\":54600,\"start\":54594},{\"end\":54612,\"start\":54609},{\"end\":54627,\"start\":54621},{\"end\":54629,\"start\":54628},{\"end\":54645,\"start\":54641},{\"end\":54971,\"start\":54965},{\"end\":54990,\"start\":54982},{\"end\":55275,\"start\":55274},{\"end\":55291,\"start\":55290},{\"end\":55307,\"start\":55306},{\"end\":55422,\"start\":55417},{\"end\":55436,\"start\":55431},{\"end\":55452,\"start\":55445},{\"end\":55722,\"start\":55716},{\"end\":55735,\"start\":55730},{\"end\":55748,\"start\":55741},{\"end\":56127,\"start\":56122},{\"end\":56141,\"start\":56134},{\"end\":56155,\"start\":56151},{\"end\":56170,\"start\":56166},{\"end\":56521,\"start\":56517},{\"end\":56534,\"start\":56527},{\"end\":56549,\"start\":56545},{\"end\":56563,\"start\":56557},{\"end\":56565,\"start\":56564},{\"end\":56578,\"start\":56571},{\"end\":56588,\"start\":56586},{\"end\":56601,\"start\":56598}]", "bib_author_last_name": "[{\"end\":45861,\"start\":45855},{\"end\":45880,\"start\":45871},{\"end\":45892,\"start\":45887},{\"end\":46156,\"start\":46149},{\"end\":46170,\"start\":46165},{\"end\":46188,\"start\":46178},{\"end\":46198,\"start\":46194},{\"end\":46217,\"start\":46207},{\"end\":46237,\"start\":46228},{\"end\":46254,\"start\":46246},{\"end\":46267,\"start\":46262},{\"end\":46282,\"start\":46276},{\"end\":46294,\"start\":46289},{\"end\":46316,\"start\":46303},{\"end\":46972,\"start\":46950},{\"end\":46986,\"start\":46980},{\"end\":47000,\"start\":46995},{\"end\":47023,\"start\":47010},{\"end\":47031,\"start\":47025},{\"end\":47406,\"start\":47401},{\"end\":47425,\"start\":47418},{\"end\":47437,\"start\":47431},{\"end\":47789,\"start\":47783},{\"end\":47810,\"start\":47799},{\"end\":47827,\"start\":47821},{\"end\":48286,\"start\":48280},{\"end\":48298,\"start\":48293},{\"end\":48316,\"start\":48308},{\"end\":48328,\"start\":48322},{\"end\":48343,\"start\":48334},{\"end\":48372,\"start\":48355},{\"end\":48398,\"start\":48387},{\"end\":48419,\"start\":48407},{\"end\":48434,\"start\":48427},{\"end\":48448,\"start\":48441},{\"end\":48792,\"start\":48785},{\"end\":48810,\"start\":48800},{\"end\":48817,\"start\":48812},{\"end\":49132,\"start\":49123},{\"end\":49148,\"start\":49144},{\"end\":49168,\"start\":49159},{\"end\":49180,\"start\":49174},{\"end\":49194,\"start\":49189},{\"end\":49208,\"start\":49202},{\"end\":49227,\"start\":49216},{\"end\":49631,\"start\":49624},{\"end\":49647,\"start\":49642},{\"end\":49669,\"start\":49658},{\"end\":49685,\"start\":49680},{\"end\":50158,\"start\":50153},{\"end\":50176,\"start\":50168},{\"end\":50192,\"start\":50186},{\"end\":50209,\"start\":50203},{\"end\":50219,\"start\":50211},{\"end\":50476,\"start\":50470},{\"end\":50500,\"start\":50487},{\"end\":50711,\"start\":50709},{\"end\":50722,\"start\":50720},{\"end\":50736,\"start\":50733},{\"end\":50749,\"start\":50747},{\"end\":50763,\"start\":50759},{\"end\":50772,\"start\":50768},{\"end\":50779,\"start\":50777},{\"end\":51254,\"start\":51250},{\"end\":51274,\"start\":51264},{\"end\":51289,\"start\":51280},{\"end\":51305,\"start\":51298},{\"end\":51318,\"start\":51312},{\"end\":51834,\"start\":51824},{\"end\":51852,\"start\":51844},{\"end\":51869,\"start\":51861},{\"end\":52265,\"start\":52263},{\"end\":52289,\"start\":52277},{\"end\":52301,\"start\":52293},{\"end\":52316,\"start\":52311},{\"end\":52321,\"start\":52318},{\"end\":52696,\"start\":52683},{\"end\":52711,\"start\":52705},{\"end\":52723,\"start\":52713},{\"end\":52912,\"start\":52905},{\"end\":52929,\"start\":52921},{\"end\":52944,\"start\":52941},{\"end\":52959,\"start\":52953},{\"end\":53253,\"start\":53247},{\"end\":53271,\"start\":53263},{\"end\":53286,\"start\":53279},{\"end\":53301,\"start\":53294},{\"end\":53315,\"start\":53310},{\"end\":53660,\"start\":53654},{\"end\":53674,\"start\":53666},{\"end\":53685,\"start\":53676},{\"end\":53996,\"start\":53980},{\"end\":54013,\"start\":54007},{\"end\":54020,\"start\":54015},{\"end\":54335,\"start\":54332},{\"end\":54345,\"start\":54342},{\"end\":54592,\"start\":54585},{\"end\":54607,\"start\":54601},{\"end\":54619,\"start\":54613},{\"end\":54639,\"start\":54630},{\"end\":54652,\"start\":54646},{\"end\":54980,\"start\":54972},{\"end\":54997,\"start\":54991},{\"end\":55288,\"start\":55276},{\"end\":55304,\"start\":55292},{\"end\":55319,\"start\":55308},{\"end\":55429,\"start\":55423},{\"end\":55443,\"start\":55437},{\"end\":55459,\"start\":55453},{\"end\":55728,\"start\":55723},{\"end\":55739,\"start\":55736},{\"end\":55752,\"start\":55749},{\"end\":56132,\"start\":56128},{\"end\":56149,\"start\":56142},{\"end\":56164,\"start\":56156},{\"end\":56176,\"start\":56171},{\"end\":56525,\"start\":56522},{\"end\":56543,\"start\":56535},{\"end\":56555,\"start\":56550},{\"end\":56569,\"start\":56566},{\"end\":56584,\"start\":56579},{\"end\":56596,\"start\":56589},{\"end\":56609,\"start\":56602}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":218500554},\"end\":46139,\"start\":45787},{\"attributes\":{\"id\":\"b1\"},\"end\":46866,\"start\":46141},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":6563813},\"end\":47318,\"start\":46868},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":2255738},\"end\":47720,\"start\":47320},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":206741496},\"end\":48203,\"start\":47722},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":205251479},\"end\":48724,\"start\":48205},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":8696662},\"end\":49059,\"start\":48726},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":14717992},\"end\":49540,\"start\":49061},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":3840949},\"end\":50088,\"start\":49542},{\"attributes\":{\"id\":\"b9\"},\"end\":50400,\"start\":50090},{\"attributes\":{\"id\":\"b10\"},\"end\":50647,\"start\":50402},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":1662761},\"end\":51183,\"start\":50649},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":8577212},\"end\":51735,\"start\":51185},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":8395799},\"end\":52190,\"start\":51737},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":10899248},\"end\":52641,\"start\":52192},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":144254159},\"end\":52896,\"start\":52643},{\"attributes\":{\"doi\":\"arXiv:1312.6026\",\"id\":\"b16\"},\"end\":53192,\"start\":52898},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":5855183},\"end\":53566,\"start\":53194},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":27857819},\"end\":53880,\"start\":53568},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":76564},\"end\":54241,\"start\":53882},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":12422135},\"end\":54514,\"start\":54243},{\"attributes\":{\"doi\":\"abs/1604.07255\",\"id\":\"b21\"},\"end\":54875,\"start\":54516},{\"attributes\":{\"id\":\"b22\"},\"end\":55239,\"start\":54877},{\"attributes\":{\"id\":\"b23\"},\"end\":55413,\"start\":55241},{\"attributes\":{\"doi\":\"arXiv:1410.3916\",\"id\":\"b24\"},\"end\":55609,\"start\":55415},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":213980},\"end\":56086,\"start\":55611},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":7397342},\"end\":56431,\"start\":56088},{\"attributes\":{\"doi\":\"abs/1609.05143\",\"id\":\"b27\"},\"end\":56876,\"start\":56433},{\"attributes\":{\"id\":\"b28\"},\"end\":57538,\"start\":56878}]", "bib_title": "[{\"end\":45846,\"start\":45787},{\"end\":46943,\"start\":46868},{\"end\":47393,\"start\":47320},{\"end\":47776,\"start\":47722},{\"end\":48273,\"start\":48205},{\"end\":48781,\"start\":48726},{\"end\":49117,\"start\":49061},{\"end\":49618,\"start\":49542},{\"end\":50700,\"start\":50649},{\"end\":51243,\"start\":51185},{\"end\":51814,\"start\":51737},{\"end\":52253,\"start\":52192},{\"end\":52673,\"start\":52643},{\"end\":53239,\"start\":53194},{\"end\":53650,\"start\":53568},{\"end\":53972,\"start\":53882},{\"end\":54326,\"start\":54243},{\"end\":54963,\"start\":54877},{\"end\":55714,\"start\":55611},{\"end\":56120,\"start\":56088}]", "bib_author": "[{\"end\":45863,\"start\":45848},{\"end\":45882,\"start\":45863},{\"end\":45894,\"start\":45882},{\"end\":46158,\"start\":46141},{\"end\":46172,\"start\":46158},{\"end\":46190,\"start\":46172},{\"end\":46200,\"start\":46190},{\"end\":46219,\"start\":46200},{\"end\":46239,\"start\":46219},{\"end\":46256,\"start\":46239},{\"end\":46269,\"start\":46256},{\"end\":46284,\"start\":46269},{\"end\":46296,\"start\":46284},{\"end\":46318,\"start\":46296},{\"end\":46974,\"start\":46945},{\"end\":46988,\"start\":46974},{\"end\":47002,\"start\":46988},{\"end\":47025,\"start\":47002},{\"end\":47033,\"start\":47025},{\"end\":47408,\"start\":47395},{\"end\":47427,\"start\":47408},{\"end\":47439,\"start\":47427},{\"end\":47791,\"start\":47778},{\"end\":47812,\"start\":47791},{\"end\":47829,\"start\":47812},{\"end\":48288,\"start\":48275},{\"end\":48300,\"start\":48288},{\"end\":48318,\"start\":48300},{\"end\":48330,\"start\":48318},{\"end\":48345,\"start\":48330},{\"end\":48374,\"start\":48345},{\"end\":48400,\"start\":48374},{\"end\":48421,\"start\":48400},{\"end\":48436,\"start\":48421},{\"end\":48450,\"start\":48436},{\"end\":48794,\"start\":48783},{\"end\":48812,\"start\":48794},{\"end\":48819,\"start\":48812},{\"end\":49134,\"start\":49119},{\"end\":49150,\"start\":49134},{\"end\":49170,\"start\":49150},{\"end\":49182,\"start\":49170},{\"end\":49196,\"start\":49182},{\"end\":49210,\"start\":49196},{\"end\":49229,\"start\":49210},{\"end\":49633,\"start\":49620},{\"end\":49649,\"start\":49633},{\"end\":49671,\"start\":49649},{\"end\":49687,\"start\":49671},{\"end\":50160,\"start\":50151},{\"end\":50178,\"start\":50160},{\"end\":50194,\"start\":50178},{\"end\":50211,\"start\":50194},{\"end\":50221,\"start\":50211},{\"end\":50478,\"start\":50460},{\"end\":50502,\"start\":50478},{\"end\":50713,\"start\":50702},{\"end\":50724,\"start\":50713},{\"end\":50738,\"start\":50724},{\"end\":50751,\"start\":50738},{\"end\":50765,\"start\":50751},{\"end\":50774,\"start\":50765},{\"end\":50781,\"start\":50774},{\"end\":51256,\"start\":51245},{\"end\":51276,\"start\":51256},{\"end\":51291,\"start\":51276},{\"end\":51307,\"start\":51291},{\"end\":51320,\"start\":51307},{\"end\":51836,\"start\":51816},{\"end\":51854,\"start\":51836},{\"end\":51871,\"start\":51854},{\"end\":52267,\"start\":52255},{\"end\":52291,\"start\":52267},{\"end\":52303,\"start\":52291},{\"end\":52318,\"start\":52303},{\"end\":52323,\"start\":52318},{\"end\":52698,\"start\":52675},{\"end\":52713,\"start\":52698},{\"end\":52725,\"start\":52713},{\"end\":52914,\"start\":52898},{\"end\":52931,\"start\":52914},{\"end\":52946,\"start\":52931},{\"end\":52961,\"start\":52946},{\"end\":53255,\"start\":53241},{\"end\":53273,\"start\":53255},{\"end\":53288,\"start\":53273},{\"end\":53303,\"start\":53288},{\"end\":53317,\"start\":53303},{\"end\":53662,\"start\":53652},{\"end\":53676,\"start\":53662},{\"end\":53687,\"start\":53676},{\"end\":53998,\"start\":53974},{\"end\":54015,\"start\":53998},{\"end\":54022,\"start\":54015},{\"end\":54337,\"start\":54328},{\"end\":54347,\"start\":54337},{\"end\":54594,\"start\":54580},{\"end\":54609,\"start\":54594},{\"end\":54621,\"start\":54609},{\"end\":54641,\"start\":54621},{\"end\":54654,\"start\":54641},{\"end\":54982,\"start\":54965},{\"end\":54999,\"start\":54982},{\"end\":55290,\"start\":55274},{\"end\":55306,\"start\":55290},{\"end\":55321,\"start\":55306},{\"end\":55431,\"start\":55417},{\"end\":55445,\"start\":55431},{\"end\":55461,\"start\":55445},{\"end\":55730,\"start\":55716},{\"end\":55741,\"start\":55730},{\"end\":55754,\"start\":55741},{\"end\":56134,\"start\":56122},{\"end\":56151,\"start\":56134},{\"end\":56166,\"start\":56151},{\"end\":56178,\"start\":56166},{\"end\":56527,\"start\":56517},{\"end\":56545,\"start\":56527},{\"end\":56557,\"start\":56545},{\"end\":56571,\"start\":56557},{\"end\":56586,\"start\":56571},{\"end\":56598,\"start\":56586},{\"end\":56611,\"start\":56598}]", "bib_venue": "[{\"end\":45954,\"start\":45894},{\"end\":46387,\"start\":46318},{\"end\":47077,\"start\":47033},{\"end\":47491,\"start\":47439},{\"end\":47915,\"start\":47829},{\"end\":48456,\"start\":48450},{\"end\":48866,\"start\":48819},{\"end\":49292,\"start\":49229},{\"end\":49768,\"start\":49687},{\"end\":50149,\"start\":50090},{\"end\":50458,\"start\":50402},{\"end\":50858,\"start\":50781},{\"end\":51412,\"start\":51320},{\"end\":51928,\"start\":51871},{\"end\":52382,\"start\":52323},{\"end\":52754,\"start\":52725},{\"end\":53023,\"start\":52976},{\"end\":53372,\"start\":53317},{\"end\":53702,\"start\":53687},{\"end\":54045,\"start\":54022},{\"end\":54352,\"start\":54347},{\"end\":54578,\"start\":54516},{\"end\":55045,\"start\":54999},{\"end\":55272,\"start\":55241},{\"end\":55813,\"start\":55754},{\"end\":56234,\"start\":56178},{\"end\":56515,\"start\":56433},{\"end\":56938,\"start\":56878},{\"end\":46480,\"start\":46389},{\"end\":47535,\"start\":47493},{\"end\":47988,\"start\":47917},{\"end\":48909,\"start\":48868},{\"end\":49836,\"start\":49770},{\"end\":50922,\"start\":50860},{\"end\":51491,\"start\":51414},{\"end\":51977,\"start\":51930},{\"end\":52437,\"start\":52384},{\"end\":55868,\"start\":55815}]"}}}, "year": 2023, "month": 12, "day": 17}