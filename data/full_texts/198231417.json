{"id": 198231417, "updated": "2023-06-08 13:13:48.93", "metadata": {"title": "A framework for writing trigger-action todo comments in executable format", "authors": "[{\"first\":\"Pengyu\",\"last\":\"Nie\",\"middle\":[]},{\"first\":\"Rishabh\",\"last\":\"Rai\",\"middle\":[]},{\"first\":\"Junyi\",\"last\":\"Li\",\"middle\":[\"Jessy\"]},{\"first\":\"Sarfraz\",\"last\":\"Khurshid\",\"middle\":[]},{\"first\":\"Raymond\",\"last\":\"Mooney\",\"middle\":[\"J.\"]},{\"first\":\"Milos\",\"last\":\"Gligoric\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering", "publication_date": {"year": 2019, "month": null, "day": null}, "abstract": "Natural language elements, e.g., todo comments, are frequently used to communicate among developers and to describe tasks that need to be performed (actions) when specific conditions hold on artifacts related to the code repository (triggers), e.g., from the Apache Struts project: \u201cremove expectedJDK15 and if() after switching to Java 1.6\u201d. As projects evolve, development processes change, and development teams reorganize, these comments, because of their informal nature, frequently become irrelevant or forgotten. We present the first framework, dubbed TrigIt, to specify trigger-action todo comments in executable format. Thus, actions are executed automatically when triggers evaluate to true. TrigIt specifications are written in the host language (e.g., Java) and are evaluated as part of the build process. The triggers are specified as query statements over abstract syntax trees, abstract representation of build configuration scripts, issue tracking systems, and system clock time. The actions are either notifications to developers or code transformation steps. We implemented TrigIt for the Java programming language and migrated 44 existing trigger-action comments from several popular open-source projects. Evaluation of TrigIt, via a user study, showed that users find TrigIt easy to learn and use. TrigIt has the potential to enforce more discipline in writing and maintaining comments in large code repositories.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2967162666", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/sigsoft/NieRLKMG19", "doi": "10.1145/3338906.3338965"}}, "content": {"source": {"pdf_hash": "1e510a171d0d79ef472b9ee0a1b2047b633b989d", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "https://dl.acm.org/doi/pdf/10.1145/3338906.3338965", "status": "BRONZE"}}, "grobid": {"id": "b9f87991910e68a58c97db0d43ac181f6f79300a", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/1e510a171d0d79ef472b9ee0a1b2047b633b989d.txt", "contents": "\nA Framework for Writing Trigger-Action Todo Comments in Executable Format\nAugust 26-30, 2019\n\nPengyu Nie pynie@ \nThe University of Texas at Austin\nUSA\n\nRishabh Rai rishabh.rai@ \nThe University of Texas at Austin\nUSA\n\nJunyi Jessy Li \nThe University of Texas at Austin\nUSA\n\nSarfraz Khurshid khurshid@ece. \nThe University of Texas at Austin\nUSA\n\nRaymond J Mooney mooney@cs. \nThe University of Texas at Austin\nUSA\n\nMilos Gligoric gligoric@utexas.edu \nThe University of Texas at Austin\nUSA\n\nPengyu Nie \nThe University of Texas at Austin\nUSA\n\nRishabh Rai \nThe University of Texas at Austin\nUSA\n\nJunyi Jessy Li \nThe University of Texas at Austin\nUSA\n\nSarfraz Khurshid \nThe University of Texas at Austin\nUSA\n\nRaymond J \nThe University of Texas at Austin\nUSA\n\nA Framework for Writing Trigger-Action Todo Comments in Executable Format\nTallinn, Estonia19August 26-30, 2019ACM Reference Format: Mooney, and Milos Gligoric. 2019. A Framework for Writing Trigger-Action Todo Comments in Executable Format. In Proceedings of the 27th ACM Joint European Software Engineering Conference and Symposium on the Founda-tions of Software Engineering (ESEC/FSE '19), August 26-30, 2019, Tallinn, Estonia. ACM, New York, NY, USA, 12 pages. https:// ACM ISBN 978-1-4503-5572-8/19/08. . . $15.00Todo commentstrigger-actiondomain specific languages\nNatural language elements, e.g., todo comments, are frequently used to communicate among developers and to describe tasks that need to be performed (actions) when specific conditions hold on artifacts related to the code repository (triggers), e.g., from the Apache Struts project: \"remove expectedJDK15 and if() after switching to Java 1.6\". As projects evolve, development processes change, and development teams reorganize, these comments, because of their informal nature, frequently become irrelevant or forgotten.We present the first framework, dubbed TrigIt, to specify triggeraction todo comments in executable format. Thus, actions are executed automatically when triggers evaluate to true. TrigIt specifications are written in the host language (e.g., Java) and are evaluated as part of the build process. The triggers are specified as query statements over abstract syntax trees, abstract representation of build configuration scripts, issue tracking systems, and system clock time. The actions are either notifications to developers or code transformation steps. We implemented TrigIt for the Java programming language and migrated 44 existing trigger-action comments from several popular open-source projects. Evaluation of TrigIt, via a user study, showed that users find TrigIt easy to learn and use. TrigIt has the potential to enforce more discipline in writing and maintaining comments in large code repositories.CCS CONCEPTS\u2022 Software and its engineering \u2192 Software maintenance tools; Domain specific languages; Software evolution.\n\nINTRODUCTION\n\nNatural language elements, such as todo comments, are frequently used to communicate among developers [35,46,49]. Some of these comments document that a developer should perform an action if a trigger evaluates to true, e.g., from the Apache Wave project [26]:\n\n\"Remove this [line] when HtmlViewImpl implements getAttributes\" action trigger\n\nWe consider those comments where the trigger is a query over artifacts related to the code repositories and actions are either notifications to developers or code modifications. We call these comments trigger-action comments.\n\nAlthough trigger-action comments are ubiquitous [31,35,45], they are, like other types of comments, written in natural language. Thus, as projects evolve, development processes change, and development teams reorganize, these comments frequently become irrelevant or forgotten. As an example, consider the following comment from the Apache Gobblin project [18]:\n\n\"Remove [this class] once we commit any other classes\" action trigger This comment, followed by an empty class, was included in December 2015 in the package-info.java file to force the Javadoc tool to generate documentation for an empty package. Three months later (February 2016) classes were added to the package, but the comment and the empty class in package-info.java file were not removed. More than three years later (2019), the comment and the empty class are still in the repository. Having pending actions, i.e., those actions that should have been done because the triggers evaluate to true, and outdated comments may negatively impact program comprehension and maintenance [35,45,46,[49][50][51]. Additionally, having comments written in an informal way presents a challenge for some software engineering tools, such as refactorings [17,37,38], as those tools may not know how to manipulate code snippets and identifiers embedded in comments [44].\n\nDevelopers in industry have recognized the problem with outdated todo comments and recently developed tools to help with maintenance of todo comments. imdone [31] extracts and maintains the list of pending todo comments at one place. todo_or_die [45] enables developers to write executable statements that will break the program execution if a todo comment is not addressed by a specific date. The main developer of todo_or_die says: \"[in the past] the comment did nothing to remind myself or anyone else to actually delete the code [...] this eventually resulted in an actual support incident (long story)\" [45].\n\nTo further motivate our work, we also reached out to ten developers at large software companies, including Google, Dropbox, Groupon, and Palantir, to ask if they write todo comments and trigger-action comments. Based on eight replies, seven developers said that they have todo comments and trigger-action comments. These developers also highlighted the importance of improving the maintenance of todo comments, e.g., \"I'm very tired of halfcomplete migrations and stale todos\" and \"we have a lot of todos at [company] that get forgotten until something breaks\".\n\nWith the goal to enforce more discipline in writing and maintaining comments, we present the first framework, dubbed TrigIt, to specify trigger-action comments in executable format; the triggers are evaluated automatically at each build run and actions are taken based on users' specifications. TrigIt introduces a domain specific language (DSL) that can be used to write triggers and actions. Specifically, triggers are written as query statements over ASTs, build configuration scripts, issue tracking systems, and system clock time; actions are either notifications to developers or transformation steps over ASTs. To provide a natural access to the AST elements and improve maintenance, the TrigIt DSL is embedded in the host language. However, the semantics of the language enables the executable trigger-action comments to be evaluated as part of the static program analysis phase (prior to program execution).\n\nWe implemented the TrigIt technique in a tool for Java; we use the same name for both the technique and the tool. TrigIt analyzes compiled code and modifies either compiled code, source code, or neither, depending on user-defined actions. TrigIt allows users to force execution of actions, for example during testing or during debugging of TrigIt specifications, without modifying sources. If a user chooses to modify source code with an action, she would be provided with a patch once the action is taken. TrigIt should be integrated in the build process after the compilation step. Ideally, we envision TrigIt being used as a bot that sends a code review with changes whenever a trigger evaluates to true.\n\nWe evaluated TrigIt via a user study with 20 participants which showed that users find TrigIt easy to learn and use; most users correctly encoded trigger-action comments in the TrigIt DSL with less than ten minutes of training. Additionally, we evaluated TrigIt by manually migrating 44 existing trigger-action comments to the TrigIt DSL; all the comments are from ten popular open-source projects available on GitHub. In our experiments, we also report the complexity of TrigIt statements measured in terms of the number of tokens in the specifications, as well as the overhead introduced by the tool in the build process. TrigIt does not introduce any overhead at runtime. Our results show that TrigIt introduces negligible overhead in the build process, and triggers and actions are short to write (on average 18.0 tokens). The main contributions of this paper include: \u22c6 Idea: We introduce an idea to encode trigger-action comments, currently written in natural language, as executable statements in the host language. Having executable trigger-action comments enables their maintenance (e.g., refactoring), testing, and automatic execution of the triggers and actions when artifacts related to the code repository change. \u22c6 Tool: We implemented our idea in a tool, dubbed TrigIt, for Java.\n\nWe also developed a Maven plugin to simplify the integration of TrigIt with an existing build system. \u22c6 User study and case studies: We evaluated TrigIt via a user study with 20 participants, including 6 developers working for  large software companies. Additionally, we report our experience in manual migration of existing comments. \u22c6 Dataset: A byproduct of our work is the first dataset of triggeraction comments and their executable counterparts. Additionally, we manually added various labels on the comments that can be useful in future research projects. Our tool and the dataset are available at cozy.ece.utexas.edu/trigit.\n\n\nILLUSTRATIVE EXAMPLES\n\nThis section presents several existing trigger-action comments from large open-source projects, and the encoding of these comments in the TrigIt DSL and TrigIt's workflow. We chose the comments such that we can illustrate various aspects of the TrigIt approach. Figure 1 shows a code snippet from the google/guava project [19]. We show the encoding of the executable triggeraction comment within boxes. This comment was added in commit c92e1c7 (2017-05-31) and is still present as of 2019-06-11 (bf9e8fa). In this case, a developer wants to add more precondition checks if the method or constructor becomes public. The trigger in TrigIt is encoded as a separate method that returns a boolean value, and each TrigIt method needs to have the @TrigItMethod annotation. trigItIsPublic finds the constructor and checks its modifiers. The invocation of trigItIsPublic is a guard for an extra precondition check. It is important to observe that in this case, the action (transformation step) is local, i.e., we simply execute extra statements within the method. As this comment is not specific enough, i.e., we do not know all the preconditions that developers would like to check, we could include an extra action to print a warning to developers when the trigger evaluates to true. Recall that triggers are evaluated during the build process prior to the execution; this means that methods annotated with @TrigItMethod, if statements that guard actions, and statements of either then or else branch are removed by TrigIt prior to the program execution. As stated earlier, ideally TrigIt is integrated in a bot that sends code reviews or pull requests once the trigger evaluates to true. Figure 2 shows a code snippet from the apache/struts project [7], which is a web framework for creating Java web applications. The specified action was performed at commit a5812bf (2015-10-06), five months after the trigger evaluated to true. Unlike the previous example, this one illustrates a query statement over the build configuration script. Specifically, the trigger evaluates to true if the current Java version is greater than 1.6. Regarding the action, we guard the modified code in the then branch and the original code is in the else branch. Finally, Figure 3 shows a code snippet from the elastic /elasticsearch project [13], which is a distributed search engine. We use this example to illustrate the global code transformation action. In this example, developers want to change the access modifier of a method (simpleName) from public to protected if two classes (Mapper and FieldMapper) are merged. Although there is no unique way to encode a trigger that checks if two classes are merged, the check can be approximated in several ways. Our approach is to check that one of the classes is no longer available. A better option might be to check that one class is removed while the other one is still present. By knowing the relation between the classes (FieldMapper extends Mapper) and their usage, we believe that the original developers could provide a more precise trigger. The action specifies that the modifier of the method should be changed to protected. Unlike prior examples, the action is global, i.e., impacts code elements outside a method body, and it is expressed as a transformation step over the class AST.\n\n\nTRIGIT TECHNIQUE\n\nThis section describes the TrigIt DSL, presents the workflow and the integration with existing build processes, and briefly describes the current implementation.\n\n\nLanguage\n\nSpecifications in the TrigIt DSL are written in a subset of Java with slightly modified semantics. The TrigIt DSL consists of three syntactic components: query expression for triggers, action statement for actions, and TrigIt method. A query expression is syntactically equivalent to a Java expression (that evaluates to boolean). An action statement is syntactically equivalent to a Java statement. A TrigIt method is syntactically equivalent to a Java method declaration (with either boolean or void return value and without arguments). We first describe each component, and then describe how they are combined into TrigIt specifications.\n\nQuery expression. Each query expression is a logical expression, such that each operand queries the state of the artifacts related to the code repository via the TrigIt Application Programming Interface (API). The triggers supported in our design include queries over (1) AST elements, (2) build configuration scripts, (3) issue tracking systems, and (4) system clock time. Our decision to support these trigger types is based on the most commonly seen types of triggeraction comments that developers write in open-source projects. Table 1 lists the types of triggers as well as one example for each type. Each trigger has to start with an invocation of the TrigIt API. For the query over AST, a user works with a stream of model classes. Once a developer obtains a stream, the developer can use any standard Java stream operation [6] (e.g., map, filter, count, etc.) to create a query. In case the stream support is not available in the Java version used by the project, the developers may opt for equivalent operations available in the TrigIt API. The result of each query has to be a boolean value. Clearly, as arguments to stream operations, the developer can use model classes, fields, methods, etc. to access AST elements and their properties, including class name, modifier, return type, and others. We only show signatures of a few methods from ClassModel in Figure 4, which is a model of a class in the project. TrigIt model classes offer a rich API, and many syntactic sugars are available, e.g., get a model of a method by name; the complete TrigIt API is available on the accompanying web page [54].\n\nAdditionally, when constructing queries, a developer can use constant values, as well as field accesses and method invocations; however, the semantics for the latter two differ from the one specified by the Java Language Specification, as we discuss below.\n\nFor the last three query types, TrigIt provides an API to get the build configuration, an API to check the status of an issue on an issue tracking system, as well as an API to check if the current system clock time is past a specific date. Action statement. Similarly to a query expression, each action statement has to start with an invocation of the TrigIt API to obtain a stream of model classes. We currently provide only an API for modifying ASTs of classes but not other artifacts related to the code repository. Unlike the instances of model classes that are available in the query expressions, the instances of model classes available in actions can be both queried and modified, i.e., extra API methods are available to specify modifications; this is similar to API's available in IDEs to perform AST rewrites [16]. The expressions used as arguments to stream operations may include constants, field accesses, and method invocations. There are no limits on the number of action statements that can be guarded by a single query expression. For example, if we want to modify an access modifier of a field \"f\" in the current class, we can write (in a short form) the following action statement:\n\nTrigIt.getField(f).setPrivate(); TrigIt method. Each TrigIt method should be a Java method that (1) has a return type boolean or void, (2) has no arguments, and (3) is annotated with @TrigItMethod. TrigIt methods that return a boolean value need to have only a single statement: return \u27e8query expression\u27e9; that implements the trigger. TrigIt methods that do not return any value (i.e., void) can have multiple statements, but the first statement has to be an if statement, such that the conditional expression is a query expression; Other statements, which are always a part of the then block, are action statements. The following are templates for TrigIt methods with a boolean return value and with a void return type, respectively.  (2) local. We define a global action as a sequence of statements that specify modifications to the program structure [59]. These actions modify out-of-method code elements, including method signatures, class declarations, etc. Figure 3 from Section 2 illustrates a global action that updates a modifier of a method. A TrigIt specification with a global action is written as a TrigIt method with a void return type, where the query expression is the trigger part and the action statements are the action part.\n\nWe define a local action as a sequence of statements that should or should not be executed depending on a trigger that guards those statements. We say that these actions modify in-method code elements (i.e., a sequence of statements to be executed). Figures 1 and 2 from Section 2 illustrate local actions. A local action is written as an if statement, whose condition is a query expression or a TrigIt method with a boolean return value, and whose then branch is the code that should be executed if the trigger evaluates to true, while the else branch is the code that should not be executed in that case. The following is the general format of a TrigIt specification with a local action:\nif (<query expression> | <TrigIt method name>()) <statement> else <statement> if (<expr>) ... \u2192 \u22a5 [<expr> <query expression>] <stmt> \u2192 \u22a5 [<stmt> {<action statement>, <if statement>}] this.f | ClassName.f \u2192 \"f\" [ClassName TrigIt] this.m() | ClassName.m() \u2192 \"m\" [ClassName TrigIt] this.m(arg1, ...) | ClassName.m(arg1, ...) \u2192 \"m\", arg1.type, ...\n[ClassName TrigIt] Figure 5: Rewrite rules to \"prepare\" TrigIt methods for the evaluation by the framework.\n\nWhen writing a local action statement, a developer may opt to use an API call available only in a new version of a library, e.g., java.util.List.of(...) from Java 9. However, writing such code could result in compilation errors if project uses Java 8. One approach that the developer can take is to write a method invocation using the reflection mechanism [5].\n\nSemantics. Although evaluation of the TrigIt specifications closely follows Java semantics, there are two main differences. First, all method invocations and field accesses (that do not belong to the TrigIt API) are substituted with the names of methods and fields, i.e., those methods and fields are never invoked or accessed. In case of a method invocation, all the arguments are replaced with their corresponding types. (The TrigIt API uses the argument types to differentiate between overloaded methods.) For example, the code snippet shown above that changes a filed access to private would be modified prior to the evaluation to:\nTrigIt.getField(\"f\").setPrivate();\nWe made this decision to avoid using strings to refer to a field, method, or class name unless that is absolutely necessary. Our decision will help to keep comments up-to-date with code, e.g., during refactoring, to avoid what researchers call fragile comments [44].\n\nSecond, prior to evaluating a TrigIt specification, the class that contains the method is rewritten to remove anything other than the query expressions, action statements (in TrigIt methods), and if statements. This is done to enable evaluation of the executable trigger-action comments without worrying about the environment that is required to execute any piece of code from the project itself. For example, even loading a class may require substantial setup and execution cost if a static block is present. To prepare a class for evaluation with TrigIt, we define a set of rewrite rules, shown in Figure 5. Each rule has the following format: before \u2192 after [condition] where before and after are AST elements in Java or an empty string denoted by \u22a5; condition defines when a rule is applicable. The first two rules remove any statement from a class that is irrelevant for TrigIt specifications. The last three rules rewrite each field access to the name of the accessed field, and method invocation to the name of invoked method and types of its arguments (if any). We recursively apply the rewrite rules on the method until no more rewrite rules can be applied, and then the obtained code can be evaluated by Java.\n\nRationale. We would like to emphasize that our decision to enable the evaluation of trigger-action comments independently of other code was to keep the separation between production code and comments, to enable the evaluation of comments regardless of the requirements needed for running the project's code, and to avoid the Patch to Java Files TrigIt Figure 6: TrigIt's workflow. performance overhead of evaluating comments at runtime. As our decisions are inspired by examples found in open-source projects and feedback from several developers working in industry, some of these decisions might need to be revisited in the future to support the encoding of comments as executable statements for a broader class of comments. Figure 6 shows TrigIt's workflow. TrigIt interposes between the compiler and (test) execution. The first step to use TrigIt is to encode existing trigger-action comments as executable TrigIt specifications. Once a project is compiled, the query expressions, action statements and TrigIt methods, are part of the resulting classfiles. Having executable trigger-action comments checked by the compiler is one advantage over informally written comments. TrigIt accepts the compiled classfiles and works in four steps. First (step 1 \u25cb in Figure 6), TrigIt processes all the classfiles from the project to build the intermediate AST representation to be used by the query expressions and action statements; TrigIt also retrieves build configurations, issue status (from an issue tracker) and system time lazily upon request by the query expressions. Next (step 2 \u25cb), TrigIt modifies classfiles, based on the rewrite rules in Figure 5, to prepare the TrigIt specifications for evaluation. The modified classfiles are never stored on disk, unless a developer specifies the debug option, but they are only available in-memory and they are dynamically loaded [4]. Then (step 3 \u25cb), TrigIt evaluates each query expression and boolean TrigIt method in a non-deterministic order. We discuss potential dependencies between TrigIt methods in Section 7. If the project being built requires a Java version prior to Java 8, which is currently required for TrigIt execution, TrigIt methods are evaluated by spawning an external process.\n<query expression> \u2192 evaluate(<query expression>) m() \u2192 evaluate(m) [m is TrigIt method] if (true) <stmt1> else <stmt2> \u2192 <stmt1> if (false) <stmt1> else <stmt2> \u2192 <stmt2> <modifiers> m() ... \u2192 \u22a5 [@TrigItMethod \u2208 <modifiers>]\n\nWorkflow\n\nFinally (step 4 \u25cb), TrigIt takes actions and applies changes depending on the evaluation results. If a query expression or a boolean TrigIt method evaluates to true, there are three possible outcomes. First, TrigIt can notify a developer with the list of triggers that hold, without executing any action. In addition to printing which triggers hold, TrigIt also includes a short explanation that justifies the outcome of the trigger (e.g., \"Java version \"1.8\" greater than \"1.7\"; at pom.xml:77\").\n\nSecond, TrigIt can rewrite the classfiles on disk to apply the actions (both global and local) guarded by those triggers evaluated to true. For global actions, the action statements are executed to modify the ASTs. Then, TrigIt applies a set of rewrite rules in Figure 7 to apply the local actions and to clean the TrigIt specifications from the classfiles; we omit the condition in a rewrite rule if the rule always applies. The first two rules inline the evaluation results of query expressions and boolean TrigIt methods. The next two rules only keep the correct branches for local actions, depending on the evaluation results. The last rule cleans all TrigIt methods from the classfiles. The resulting classfiles for test or execution contain no TrigIt specifications, thus TrigIt introduces no runtime overhead.\n\nFinally, TrigIt can be configured to create a patch for the source code, which developers may inspect, modify, and apply. The configuration provided by the user determines what option is taken. The configuration options are not mutually exclusive. As mentioned earlier, ideally, TrigIt will be used as a bot running on a continuous integration server that sends code review with changes when a trigger holds; we do not expect developers to run TrigIt in the default build profile on code that is automatically deployed.\n\n\nImplementation\n\nWe implemented TrigIt as a standalone Java library that can be used from the command line or integrated into a build system. TrigIt uses the ASM Java bytecode manipulation and analysis framework [11] to rewrite executable code, check correctness of encoding, and transform executable code. More precisely, TrigIt uses the visitor mechanism to build the model classes of the entire project, which are queried with the stream operations. TrigIt executes the action statements, one by one, which transform the underlying bytecode using ASM.\n\nAdditionally, we implemented a Maven plugin to simplify the integration of TrigIt into the build process, as Maven is still one of the most popular build systems for Java. We integrated the plugin in the Maven lifecycle after the compilation phase.\n\nTrigIt provides various options, including \"-debug\" to show execution steps and store stripped files used to evaluate TrigIt methods, \"-assume-true\" to force the evaluation of triggers to true, and \"-no-action\" to tell that no action should be taken. \"-assumetrue\" can be used to check the effect of executing the actions and \"-no-action\" can be used to check correctness of encoding and report what actions would be taken in the current build run.\n\nWe currently support basic checks of correctness of executable trigger-action comments. Specifically, TrigIt checks if a query expression and action statements refer to code elements that should exist. As an example, consider the following trigger:\n\nTrigIt.getClass(\"C\").getField(\"f\").isPrivate() If class C or field f does not exist, we report the incorrect encoding. These checks are important to detect modifications in code, likely due to software evolution, which invalidate executable comments and notify developers.\n\nFinally, TrigIt can output a patch for the source code if the trigger evaluates to true and actions are executed. Our current approach for creating a patch utilizes the debug info to get the source code location of the patch, and aggregates the patches generated from each executed global action and local action. The patch also removes any TrigIt specification if its trigger evaluates to true, thus avoiding technical debt. We expect that a developer would inspect a patch and revise their code manually.\n\n\nUSER STUDY\n\nThis section describes our user study to evaluate whether developers can quickly implement correct triggers and actions using TrigIt.\n\n\nStudy Design\n\nInitially, we asked each participant to read a tutorial for up to ten minutes. The tutorial provided a brief explanation of the TrigIt DSL with three examples. Next, we asked each participant to do three tasks; the tasks were chosen randomly from a set of executable trigger-action comments (from open-source projects) we encoded in the TrigIt DSL and are independent from the examples in the tutorial. Each task asked the participant to migrate an existing trigger-action comment to the TrigIt DSL. We did not ask the users to run TrigIt as that was outside the scope of our study; recall that our goal was to evaluate encoding of comments. We provided only a brief description of each task with the goal to clarify triggers and actions. This was necessary, because the participant, unfamiliar with the project, may not be able to infer the unspecified part of triggers and actions, and our goal was not to evaluate the understanding of code and comments but rather to evaluate the complexity of encoding the comments. Due to space limit, the detailed content of the tutorial and the descriptions are available on the accompanying web page [54]. We sent the tasks in the same order to each participant, and we used the first task as a warm-up task without telling this to the participants; the warm-up task was not considered in the evaluation. We provided a bash script to install tools, unpack projects that contain todo comments, and start the tasks. Our script sets up IntelliJ to provide a uniform environment with code completion.\n\nWe asked participants to track time spent on each task, to rate the level of confidence of their solutions for each task separately, and to send us their solutions. Then we asked them to rate the easiness of learning the TrigIt DSL (on a scale of 1-5, with 5 being the easiest). Finally, we asked them to tell us about their programming experience, experience with Java and experience with IntelliJ. We wrote scripts to process the responses, and we manually checked the correctness of each solution.\n\nParticipants. Our study was conducted in two batches. In the first batch, we sent the study to 15 people, including seven professionals (six working for large software companies and one researcher) and eight students (three undergraduate and five PhD). We received 12 valid responses in total. One (PhD student) participant did not follow the instructions. Two participants (one PhD student and one professional) had issues with running our bash scripts on OS X, specifically because of incompatible versions of sed, find and Java Development Kit between Linux and OS X. In the second batch, we sent the study to eight people, including two professionals (one working for large software company and one researcher) and six students (one undergraduate and five PhD). We received valid responses from all participants. Among all 20 valid responses, the participants have on average 8.4 years (median: 6.0 years) of programming experience, and have moderate Java skills (average self-reported score 3.7 on a scale of 1-5); 12 participants have used IntelliJ before the study.\n\nTasks. We randomly chose tasks from the corpus of trigger-action comments mined from open-source projects that we previously encoded with the TrigIt DSL. The tasks (excluding the warm-up task) were:\n\n\u2022 TaskA from google/guava: \"check more preconditions (as buffer-Size >= chunkSize) if this is ever public\". See Figure 1. In the first batch we used TaskA and TaskB; in the second batch we used TaskC and TaskD. We confirmed that none of our participants contributed to the open-source projects used in the study. Table 2 summarizes the results, grouped by tasks and roles (professionals: Prof., students: Stu.). For each group, we show the average and median time in minutes to complete the task (Time), the average and median of participants' confidence on scale 1-5 (Confidence) and the number of participants that wrote the correct solution (Correctness). We access the correctness of different parts of the solution: trigger (Tri.), action (Act.), and syntax (Syn.) that we defined as correct locations for triggers and actions.\n\n\nResults\n\nWe can see that, on average, the participants took 5.7 minutes to migrate a trigger-action comment in an unfamiliar project; professionals took less time than students (average time: 5.0 minutes vs. 6.1 minutes). Most of the solutions were correct. There was one mistake on the trigger part and one mistake on the action part, both because of misunderstanding of the executable trigger-action comments. There were three mistakes on the syntax part of TaskA because the users put the local action inside the TrigIt method; we show a representative mistake in Figure 8d. Compared to the correct solution in Figure 1, the local action   Figure 1) and one example of an incorrect solution to TaskA. checkArgument(bufferSize >= chunkSize) was incorrectly put in the TrigIt method. After the study was done, we implemented checks in TrigIt to prevent such mistakes.\n\nThe participants claimed to be confident with their solutions (average score: 4.2); professionals are more confident than students (average score: 4.5 vs. 4.0).\n\nBased on the results, we can say that participants obtained correct solutions with very little training. We consider these results even more encouraging because participants worked with unfamiliar projects. We believe that participants would perform better in a familiar environment and avoid mistakes due to the misunderstanding of comments. Finally, most participants consider TrigIt easy to learn (average score: 4.0).\n\n\nCASE STUDIES\n\nIn this section, we describe our process of mining trigger-action comments in open-source projects and encoding them as executable trigger-action comments in TrigIt. As additional evaluation, we measure the overhead of TrigIt on the build process, as well as the number of tokens needed to encode executable trigger-action comments compared to the existing comments.\n\n\nProjects and Comments\n\nIn the first step, we selected ten popular open-source projects to find trigger-action comments. Table 3 shows the list of projects (first column) and revisions used in our experiments (second column). We selected projects that differ in size, number of todo comments, and application domain. More importantly, we selected projects based on our prior experience with codebases. The last requirement was necessary to make the experiments feasible [55]; we wanted projects that we can build to ensure that we can run our tool after migrating the comments. In the second step, we extracted all todo comments from the selected projects. We searched for \"TODO\", which is the most common marker for todo comments [49]. Column 3 in Table 3 shows the number of todo comments for each project.\n\nIn the third step, we manually inspected all 4360 todo comments and labeled each comment with \"yes\" (if the comment is a triggeraction comment) or \"no\" (if the comment is not a trigger-action comment). Columns 4 and 5 in Table 3 show for each project the number of labeled trigger-action comments and the number of other types of comments. The inspection was done by three authors of this paper together, and in addition to the comment itself, we inspected the context of the comment, i.e., surrounding source code, and potentially other files in the project. We discussed each comment until we reached unanimous agreement. In the fourth step, we inspected 471 trigger-action comments that we annotated with \"yes\" in the previous step and assigned values to two more labels: trigger_specificity, and ac-tion_specificity. Specificity can take one of the following values: (1) \"high\", which means that we can understand the trigger/action and migration should be feasible, (2) \"medium\", which means that we mostly understand the trigger/action and migration could potentially be done, and (3) \"low\", which means that we cannot understand the trigger/action or migration is not feasible. The heatmap above shows the distribution of labels for 471 trigger-action comments. We illustrate the assignment of labels using several examples:\n\n\u2022 \"this is to keep backward compatibility, remove once when tooltip-Config is dropped\" from apache/struts; trigger_specificity: \"high\", action_specificity: \"high\". \u2022 \"When FieldAccess detection is supported, mark that class as reachable there, and remove the containsPublicField flag here\" from google/j2objc; trigger_specificity: \"medium\", action_specificity: \"medium\". \u2022 \"Enable testing for unused fields when ElementUtil glitch is fixed\" from google/j2objc; trigger_specificity: \"low\", action_specificity: \"medium\". \u2022 \"embedded Derby Mode... change to client-server once we figure it out\" from apache/cayenne; trigger_specificity: \"low\", action_specificity: \"low\". Finally, we manually encoded 44 trigger-action comments as executable trigger-action comments in TrigIt, and used them as subjects in the following evaluations. We randomly selected these trigger-action comments from only those comments where trigger_specificity: \"high\".\n\n\nBuild Overhead\n\nWe compute the build overhead to illustrate the cost of TrigIt analysis and code transformation. Recall that TrigIt runs after compilation and prior to program/test execution.\n\nTo compute the time overhead introduced in the build process, we measured the build time (e.g., mvn test-compile for Maven projects) for each project with and without TrigIt. TrigIt does not introduce any runtime overhead, so we do not run tests during the build. (Moreover, transformations performed by action statements may impact tests, i.e., new or different code may be executed, thus including test execution time might lead to misleading results.) If the build is run with TrigIt, we include all the phases, i.e., building the model of the project, evaluating the trigger, and executing the action (see Section 3). We run each configuration five times and compute the average time.\n\nWe ran experiments on an Intel i7-6700U CPU @ 3.40GHz with 16GB of RAM, running Ubuntu 18.04 LTS.\n\nWe find that the overhead varies between 1.91% and 26.75%; the average overhead is 8.85% and the median is 6.63%. We consider this to be acceptable overhead especially considering the sizes of the analyzed projects. TrigIt.getMethod(\"simpleName\").setProtected(); } 1 2 3 4 Figure 9: Example of token counting; we show number of tokens in the boilerplate code (first line), trigger (second line), and action (third line).\n\n\nComplexity of the TrigIt DSL\n\nWe estimate the complexity of writing executable trigger-action comments with the number of tokens needed to encode triggers and actions. Concretely, we count three parts for each executable triggeraction comment: (1) trigger, which is the number of tokens to encode the trigger, (2) action, which is the number of tokens to encode the action, and (3) boilerplate code, which is the number of tokens to satisfy the TrigIt DSL syntax, e.g., method signature. Figure 9 illustrates, using an earlier example, the way we count the tokens. We compare the complexity of executable trigger-action comments with their informal counterparts written in natural language.\n\nWe found that the average number of tokens in the original comments was 12.2 (median: 12.0, min: 6, max: 26), while the total number of tokens in the encoded comments (trigger + action + boilerplate code) was, on average, 18.0 (median: 16.5, min: 11, max: 36). Additionally, the number of tokens in the triggers was, on average, 7.3 (median: 6.0, min: 4, max: 19); the number of tokens in the actions was, on average, 7.4 (median: 5.0, min: 2, max: 27); the average number of tokens in the boilerplate code was 3.3 (median: 3.0, min: 3, max: 7).\n\nThe results show that even if we count all the tokens in executable trigger-action comments, the increase in the number of tokens compared to the informal text is only 58.74%. If we take into account only the tokens in triggers and actions, executable triggeraction comments are in some cases even shorter than the original comments. Additional benefits of the executable trigger-action comments is that developers can utilize the features of IDEs, such as auto-completion and generation of method signatures, which do not work for comments written in natural language.\n\n\nANECDOTAL EXPERIENCE\n\nWe briefly report on our experience on using TrigIt and interacting with open-source developers to understand their comments. To encode each comment, we read the comment and encoded what we believe were valid triggers and actions. In several cases, we observed that TrigIt always executes the actions, and we thought that there was a bug in our tool. However, by looking at those triggers manually, we found that the triggers are satisfied but the actions have not been executed. Table 4 shows the time when the comment was included in the code repository, time when the trigger is satisfied, and when the action is executed. We only show comments where the trigger is satisfied. Note that Freemarker-ResultMockedTest is a special case, because the developer forgot to remove the todo comment even after the action was taken. We found this todo comment interesting and used an older revision of the project in our evaluation. We reported to the corresponding developers five comments that have satisfied triggers but not executed actions. We got responses from all developers just a few hours after we submitted the reports. A developer of apache/cayenne immediately performed the action and sent a note: \"Thank you for the reminder!\" A developer of google/j2objc confirmed that the trigger is satisfied and said: \"it's time to cleanup the TODOs -any volunteers? :-)\". Developers of other comments explained that the comments were not specific enough:\n\n\u2022 \"Unfortunately Java 8 still causes some issues with some Googleinternal infrastructure. Java 8 is allowed in tests but not in the main part of the code (yet). \" \u2022 \"The comment should say something like 'when jdk8 is available to all flavors of Guava.' We currently maintain a backport that targets JDK7 and older versions of Android, and we try to keep the backport and mainline mostly in sync. That's not to say that we couldn't do this, but we'd have to weigh the benefits against the cost of diverging the two. \" Some of the responses confirmed the impression that we had while reading todo comments: knowing the details of the project is likely necessary to do valid migration of comments to TrigIt. However, this is not surprising considering that todo comments are written to communicate among developers of the project.\n\n\nDISCUSSION\n\nOther observations related to comments. We encountered a large number of interesting cases while analyzing the comments. We describe only one case here due to the limited space. We observed several examples with a trigger that depend on a test case, e.g., \"delete this variable and corresponding if statement when jdk fixed java.text.NumberFormat.format's behavior with Float\". We plan to explore how to encode triggers based on test execution results.\n\nNa\u00efve alternatives. Writing tests or throwing exceptions can be used to partially encode trigger-action comments, e.g., a test can fail or an exception can be thrown when Java version is 7. TrigIt overshadows these na\u00efve approaches in three ways: (1) TrigIt can perform actions that modify code; (2) TrigIt provides an API for querying the codebase, build scripts, bug tracking systems, and system clock time; and (3) unlike TrigIt specifications, exceptions would remain in compiled code, which could lead to unexpected behaviors once software is deployed.\n\nFuture work. (1) We qualitatively evaluated TrigIt's benefit via discussion with developers in industry and the user study; we envision a systematic cost-benefit analysis once TrigIt is adopted in real-world developing process. (2) The current implementation does not consider dependencies (and conflicts) between executable trigger-action comments, although we have not observed any yet. For example a trigger from one comment may become true when the action of another comment is executed. To support the correct order of execution, we will need to maintain dependencies between comments. (3) With recent advances of general-purpose code synthesis from natural language [2,3,12,60], it is worth exploring training a semantic parser to automatically map natural language comments to TrigIt specifications, which will remove the burden from developers. Our initial work in this direction focused on identifying trigger-action comments in a given repository [36].\n\n\nTHREATS TO VALIDITY\n\nExternal. We extracted only comments containing \"TODO\" markers, however, developers use other markers, including \"FIXME\", \"XXX\", \"HACK\", etc. Our decision was based on prior work that showed that \"TODO\" is the most common marker [49].\n\nThe projects that we used in the evaluation may not be representative of all open-source projects. To mitigate this threat, we used popular open-source projects that are actively maintained.\n\nTrigIt supports only projects written in the Java programming language. We chose Java because it is one of the most popular languages, and prior work on analyzing (todo) comments showed the need for automating comment maintenance (see Section 9). However, the idea behind TrigIt is broadly applicable.\n\nWe encountered challenges in recruiting a large number of experienced participants in our user study. However, we consider 20 participants, including eight professionals, to be a sufficiently large group for our kind of study.\n\nInternal. Our scripts for mining repositories and TrigIt code may contain bugs. We used scripts already utilized in prior work, and we manually inspected the results of some of those scripts.\n\nConstruct. The focus of TrigIt is on triggers and actions related to the content of compiled code, build files, issue tracking systems, and system clock. Many comments belong to these categories. Support for queries that check data available only in the source code, e.g., compile time annotations, are left for future work.\n\nTime taken to perform the study was self-reported by the participants. Although we were considering to capture the screen, participants rejected this option. As reported times are similar with the time it took us to write those comments, we have no reason to believe that anybody reported incorrect numbers.\n\n\nRELATED WORK\n\nComment analysis and automation. Ying et al. [61] were among the first to identify the importance and frequency of todo comments. They analyzed two groups of comments that are a subset of trigger-action comments: \"communication: self-communication\" and \"future task: once the library is available... \". Empirical studies done by Storey et al. [49] and Haouari et al. [22] confirmed that todo comments are ubiquitous and may lead to maintenance issues. Sridhara [46] developed a rule-based system for identifying out-ofdate todo comments. Nie et al. [35] proposed several techniques for comment and program analysis to support todo comments as software evolves. Pascarella and Bacchelli [40] performed manual classification of comments and showed that machine-learning has potential to automate the classification. Innobuilt Software developed imdone [31], an online tool that extracts and tracks todo comments by creating and updating issues (e.g., on GitHub or JIRA). TrigIt is motivated by prior work on identifying and analyzing todo comments, and our main goal is to simplify maintenance of comments and code.\n\nPrior work studied detecting and eliminating the inconsistency between code and comments. For example, Fluri et al. [15] studied co-evolution of code and comment; Tan et al. developed iComment [51] and tComment [52] to detect code/comment inconsistencies; Ibrahim et al. [25] found that rare inconsistent updates lead to bugs in future revisions of software; Svensson [50] developed a program for manual comment consistency checks; Ratol and Robillard [44] and Zhou et al. [63] looked at the identifiers in API or comments that may become inconsistent as the result of a code refactoring (e.g., renaming). todo_or_die [45] is a tool for keeping todo comments up-to-date by specifying a date for each comment, and breaking the execution upon outdated todo comments. TrigIt is the first solution towards avoiding inconsistencies between code and trigger-action comments, by automatically maintaining code repository and executing actions when associated triggers hold. TrigIt also removes the need for detecting identifiers in comments as the trigger-action comments are encoded as executable Java code, which would be refactored together with other code.\n\nWork on self-admitted technical debt [8,24,32,42,62] (SATD) identifies comments that document temporary code fixes. Unlike work on identifying SATD, TrigIt could be used to clean up the codebase when the trigger condition is satisfied.\n\nWork on generating comments from code [20,23,27,33,34,47,48] , generating code / specifications from comments [9], and both directions [41], are other approaches to keep a repository consistent. TrigIt provides a way to write executable comments that automatically and consistently update both code and comments as the codebase evolves.\n\nCode query languages. JQuery [28,56] and CodeQuest [21] are source code querying tools; the former uses a logic programming language, while the latter uses Datalog. Recently, Urma and Mycroft [57] proposed source-code queries with graph databases. While prior work mostly targeted program comprehension, TrigIt targets encoding of trigger-action comments with a language embedded in Java. Another difference is that TrigIt supports querying various other artifacts, e.g., build configuration files.\n\nOzdemir et al. developed a tool, built on their prior work CodeAware [1], for monitoring code repositories and notifying developers if some code metrics (e.g., complexity) change [39]; TrigIt is for encoding executable comments, querying code repositories, and transforming the program. The Reflection API [5] can be used to query code, but other types of queries supported in TrigIt cannot be written using this API.\n\nProgram transformations. Actions available in TrigIt are closely related to behavior-preserving transformations, i.e., refactorings [17,37,38,53]. Most relevant work is that on scripting refactorings [29,58,59], i.e., providing simple building blocks that can be composed in sophisticated transformations. One of the key differences is that TrigIt actions may not be behavior-preserving, e.g., using new API calls or removing a statement. If actions that we discover in the future would require complex code transformations offered by existing refactoring engines, it would be worth integrating our actions with those engines.\n\nTrigIt methods and their encoding follow similar patterns as the AOP condition-action patterns [14]. However, in TrigIt the \"aspect\" code lives in the same place as the regular code and global actions can change the internal and external API.\n\nIFTTT (if-this-then-that) recipe synthesis. Researchers have studied synthesizing IFTTT recipes from natural language [10,12,30,43,60]. IFTTT recipes are short scripts of trigger-action pairs in daily life domains such as smart home, personal well-being and social networking, shared by users on websites such as IFTTT.com. Frequently a recipe is accompanied by a short natural language description. In IFTTT recipes, triggers and actions are functions from APIs and services (e.g., Instagram). In our work, triggers and actions are drawn from unstructured todo comments during software development. Instead of translating from natural language to an already developed target programming language, our goal is to develop the target programming language.\n\n\nCONCLUSION\n\nWe presented the first approach, dubbed TrigIt, to encode triggeraction comments as executable statements. A developer can use a Java-like language to encode triggers as query statements over artifacts related to the code repository and actions as code transformation steps. TrigIt integrates into the build process and interposes between the program compilation and execution. We migrated 44 trigger-action comments from several large open-source projects. Evaluation of TrigIt, via a user study, showed that users find TrigIt easy to learn and use. Additionally, we showed that TrigIt introduces negligible overhead in the build process and the number of tokens needed to encode the comments differs only slightly from the original comments written in natural language. Although TrigIt could be extended in several ways, we believe that timely code updates enabled by TrigIt can already have positive impact on code comprehension and maintenance.\n\nFigure 3 :\n3An example from the elastic/elasticsearch project and TrigIt encoding to illustrate a global action.\n\nFigure 4 :\n4package org.trigit.project; public class ClassModel extends ModelBase { public String getName() {...} public ModifiersModel getModifiers() {...} public List<FieldModel> getFields() {...} public List<MethodModel> getMethods() {...} public boolean isPublic() {...} public boolean isProtected() {...} public boolean isPrivate() {...} public boolean isPackagePrivate() {...} ... } Part of TrigIt's ClassModel API.\n\n\n@TrigItMethod boolean <modifiers> <name>() { return <query expression>; } @TrigItMethod void <modifiers> <name>() { if (<query expression>) { <action statement>* }} TrigIt specifications. A complete TrigIt specification consists of both a trigger part and an action part. We differentiate two types of actions: (1) global and\n\nFigure 7 :\n7Rewrite rules for applying the local actions and removing the TrigIt specifications.\n\n\u2022\nTaskB from apache/struts: \"this is to keep backward compatibility, remove once when tooltipConfig is dropped\". SeeFigure 8a.\u2022 TaskC from apache/ignite: \"this comparison should be switched back to assertEquals when https://issues.apache.org/jira /browse/IGNITE-7692 is fixed\". See Figure 8b. \u2022 TaskD from jenkinsci/jenkins: \" remove once Minimum supported Remoting version is 3.15 or above\". See Figure 8c.\n\n\npublic void evaluateParams() { ... // TODO: this is to keep backward compatibility, remove // once when tooltipConfig is dropped if (TrigIt.getCurrentClass().hasField(\"tooltipConfig\")) { String jsTooltipEnabled = (String) getParameters() .get(\"jsTooltipEnabled\"); if (jsTooltipEnabled != null) this.javascriptTooltip = jsTooltipEnabled; } ... } (a) TaskB from the apache/struts project. // IgniteCacheLockPartitionOnAffinityRunTest.java private static int getPersonsCountSingleCache(final IgniteEx ignite, IgniteLogger log, final int orgId) throws Exception { ... // TODO this comparison should be switched back to assertEquals // when https://issues.apache.org/jira/browse/IGNITE-7692 is fixed. if (TrigIt.isClosed(\"https://issues.apache.org/jira/\" + \"browse/IGNITE-7692\")) { assertEquals(partCnt, sqlCnt); assertEquals(partCnt, sqlFieldCnt); } else { if (partCnt != sqlFieldCnt) assertFalse(\"...\", primaryPartition(ignite, orgId)); if (partCnt != sqlCnt) assertFalse(\"...\", primaryPartition(ignite, orgId)); } ... } (b) TaskC from the apache/ignite project. // MasterToSlaveCallable.java // TODO: remove once Minimum supported Remoting version is 3.15 or above public Channel getChannelOrFail() throws ChannelClosedException { ... } @TrigItMethod void trigItMinRemotingVersion() throws Exception { if (((Version) TrigIt.getBuildConfigurations() .getProperty(\"remoting.minimum.supported.version\")) .greaterEqualThan(\"3.15\")) { TrigIt.getMethod(getChannelOrFail()).remove(); } } (c) TaskD from the jenkinsci/jenkins project. // AbstractStreamingHasher.java protected AbstractStreamingHasher(int chunkSize, int bufferSize) { // TODO(kevinb): check more preconditions // (as bufferSize >= chunkSize) if this is ever public checkArgument(bufferSize % chunkSize == 0); ... } // SYNTAX INCORRECT @TrigtItMethod void trigItPreconditionCheck() { if (TrigIt.getMethod(\"<init>\", int.class, int.class).isPublic()) checkArgument(bufferSize >= chunkSize); } (d) An example of an incorrect encoding for TaskA.\n\nFigure 8 :\n8Tasks used in the user study (TaskA is already shown in\n\n\nTrigIt.getMethod(\"<init>\", int.class, int.class).isPublic();} Figure 1: An example from the google/guava project and TrigIt encoding to illustrate a local action.Figure 2: An example from the apache/struts project and TrigIt encoding to illustrate a build configuration trigger.// AbstractStreamingHasher.java \nprotected AbstractStreamingHasher(int chunkSize, int bufferSize) { \n// TODO(kevinb): check more preconditions \n// (as bufferSize >= chunkSize) if this is ever public \nif (trigItIsPublic()) \ncheckArgument(bufferSize >= chunkSize); \ncheckArgument(bufferSize % chunkSize == 0); ... } \n@TrigtItMethod \nboolean trigItIsPublic() { \nreturn // FreemarkerResultMockedTest.java \nvoid testDynamicAttributesSupport() throws Exception { ... \n// TODO : remove expectedJDK15 and if() after switching to Java 1.6 \nif (TrigIt.getJavaVersion().ge(TrigIt.JAVA6)) { \nString expectedJDK16 = \"<input type=\\\"text\\\" ...\"; \nassertEquals(expectedJDK16, result); \n} else { \nString expectedJDK15 = \"<input type=\\\"text\\\" ...\"; \nString expectedJDK16 = \"<input type=\\\"text\\\" ...\"; \nif (result.contains(\"foo=\\\"bar\\\" ...\")) \nassertEquals(expectedJDK15, result); \nelse \nassertEquals(expectedJDK16, result); } ... } \n\n// Mapper.java \n// TODO: make this protected once Mapper and FieldMapper are merged together \npublic final String simpleName() { return simpleName; } \n@TrigItMethod \nvoid checkMerge() { \nif (!TrigIt.hasClass(\"Mapper\") \n|| !TrigIt.hasClass(\"FieldMapper\")) { \nTrigIt.getMethod(simpleName()).setProtected(); } } \n\n\n\nTable 1 :\n1Examples of Query Expressions in the TrigIt DSL. Checks if there is a class with name \"C\" Build TrigIt.getJavaVersion().ge(TrigIt.JAVA8)Checks if the Java version is greater or equal than Java 8 Issue TrigIt.isClosed(\"https://github.com/google/closure-compiler/issues/1897\") Checks if the issue (specified with URL) is closedType Query Expression \nNatural Language Description \n\nAST \nTrigIt.getClasses().findAny(\"C\").isPresent() \nTime TrigIt.after(\"2019-04-02\") \nChecks if the system time is after 2019-04-02 \n\n\n\nTable 2 :\n2Study Results Grouped By Tasks and Roles: Time Spent (Unit: Minute), Participants' Confidence (on a Scale of 1-5), and Correctness; Tri., Act. and Syn. are Numbers of Participants Who Got Correct Triggers, Actions and Syntax.Grouped \nBy \n\nTime \nConfidence \nCorrectness \nAvg. Med. \nAvg. Med. \nTri. Act. Syn. \n\nTask \n\nA \n4.7 \n4.5 \n4.2 \n4.5 \n12/12 12/12 9/12 \nB \n4.3 \n5.0 \n4.4 \n4.5 \n12/12 12/12 12/12 \nC \n7.6 \n7.5 \n3.9 \n4.0 \n8/8 \n7/8 \n8/8 \nD \n7.2 \n6.5 \n4.2 \n4.0 \n7/8 \n8/8 \n8/8 \n\nRole \nProf. \n5.0 \n5.0 \n4.5 \n5.0 \n16/16 15/16 15/16 \nStu. \n6.1 \n5.5 \n4.0 \n4.0 \n23/24 24/24 22/24 \n\nAll \n5.7 \n5.0 \n4.2 \n4.0 \n39/40 39/40 37/40 \n\n\n\nTable 3 :\n3Projects Used in our Case Studies, Number of Comments with \"TODO\" Marker (#TODO), Number of Trigger-Action Comments (#TAC), and Number of Other Types of Comments (#Other).Project \nRevision #TODO #TAC #Other \n\napache/cayenne \n9c07e18 \n379 \n9 \n370 \napache/ignite \n299f557 \n426 \n91 \n335 \napache/struts \ne2c2ea8 \n62 \n6 \n56 \nelastic/elasticsearch \n850e9d7 \n436 \n66 \n370 \ngoogle/closure-compiler \n3d4f525 \n918 \n85 \n833 \ngoogle/guava \nea66419 \n1298 \n96 \n1202 \ngoogle/j2objc \ne85caea \n327 \n58 \n269 \njava-native-access/jna \nc333527 \n93 \n2 \n91 \njenkinsci/jenkins \n043abd8 \n393 \n57 \n336 \njenkinsci/gmaven \n80d5f66 \n28 \n1 \n27 \n\nAvg. \nN/A \n436.0 \n47.1 \n388.9 \n\u03a3 \nN/A \n4360 \n471 \n3889 \n\n\n\nTable 4 :\n4Timeline of the Comments: Added (Column 3-4), Trigger Satisfied (Column 5-6), Action Executed (Column 7-8).Project \nClass \n\nFirst Added \nTrigger Satisfied \nAction Executed \nRevision \nDate \nRevision \nDate \nRevision \nDate \n\napache/cayenne \nDeduplicationVisitor \n39b70d1 2016-10-02 \nb332610 2017-08-18 \nAfter we reported \napache/struts \nFreemarkerResultMockedTest \n0f2c049 2012-11-22 \n25cdfd6 2015-05-28 \na5812bf 2015-10-06 \ngoogle/closure-compiler DependencyInfo \nfc465c1 2016-04-25 \n62ba0ab 2017-10-11 \nN/A \nN/A \ngoogle/guava \nAbstractFuture \n0b76074 2014-11-25 \n86fb700 2016-11-04 \nN/A \nN/A \ngoogle/guava \nClassPath \n896c51a 2017-01-12 \n9ebd95a 2018-02-20 \nN/A \nN/A \ngoogle/j2objc \nGeneratedExecutableElement \n6eac122 2016-12-14 \nbc5dbad 2017-08-31 \nN/A \nN/A \n\n\nACKNOWLEDGMENTSWe thank Ahmet Celik, Nima Dini, Lamyaa Eloussi, Alex Gyori, Vilas Jagannath, Yun Young Lee, Yu Lin, Darko Marinov, Aleksandar Milicevic, Stas Negara, Karl Palmskog, Sheena Panthaplackel, Marinela Parovic, Jesse Piascik, Rohan Sharma, Kaiyuan Wang, Tifany Yung, Zhiqiang Zang, Chenguang Zhu, and the anonymous reviewers for their feedback on this work. We also thank all the user study participants. This work was partially supported by the US National Science Foundation under Grant Nos. CCF-1652517 and CCF-1704790.\nCodeAware: Sensorbased fine-grained monitoring and management of software artifacts. Rui Abreu, Hakan Erdogmus, Alexandre Perez, International Conference on Software Engineering. 2Rui Abreu, Hakan Erdogmus, and Alexandre Perez. 2015. CodeAware: Sensor- based fine-grained monitoring and management of software artifacts. In Interna- tional Conference on Software Engineering, Vol. 2. 551-554.\n\nA survey of machine learning for big code and naturalness. Miltiadis Allamanis, T Earl, Premkumar Barr, Charles Devanbu, Sutton, Comput. Surveys. 5181Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. 2018. A survey of machine learning for big code and naturalness. Comput. Surveys 51, 4 (2018), 81.\n\nBimodal modelling of source code and natural language. Miltos Allamanis, Daniel Tarlow, Andrew Gordon, Yi Wei, International Conference on Machine Learning. Miltos Allamanis, Daniel Tarlow, Andrew Gordon, and Yi Wei. 2015. Bimodal modelling of source code and natural language. In International Conference on Machine Learning. 2123-2132.\n\nOracle and/or its affiliates. Chapter 5. Loading, Linking, and Initializing. Oracle and/or its affiliates. 2019. Chapter 5. Loading, Linking, and Initializing. https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html.\n\nOracle and/or its affiliates. The Reflection APIOracle and/or its affiliates. 2019. The Reflection API. https://docs.oracle.com/ javase/tutorial/reflect/.\n\nOracle and/or its affiliates. Stream (Java Platform SE 8)Oracle and/or its affiliates. 2019. Stream (Java Platform SE 8). https://docs.oracle. com/javase/8/docs/api/java/util/stream/Stream.html.\n\nApache Struts. Apache, Apache. 2019. Apache Struts. https://github.com/apache/struts.\n\nA large-scale empirical study on selfadmitted technical debt. Gabriele Bavota, Barbara Russo, International Working Conference on Mining Software Repositories. Gabriele Bavota and Barbara Russo. 2016. A large-scale empirical study on self- admitted technical debt. In International Working Conference on Mining Software Repositories. 315-326.\n\nTranslating code comments to procedure specifications. Arianna Blasi, Alberto Goffi, Konstantin Kuznetsov, Alessandra Gorla, Michael D Ernst, Mauro Pezz\u00e8, Sergio Delgado Castellanos, International Symposium on Software Testing and Analysis. Arianna Blasi, Alberto Goffi, Konstantin Kuznetsov, Alessandra Gorla, Michael D. Ernst, Mauro Pezz\u00e8, and Sergio Delgado Castellanos. 2018. Translating code comments to procedure specifications. In International Symposium on Software Testing and Analysis. 242-253.\n\nDialog for language to code. Shobhit Chaurasia, Raymond J Mooney, International Joint Conference on Natural Language Processing. Shobhit Chaurasia and Raymond J. Mooney. 2017. Dialog for language to code. In International Joint Conference on Natural Language Processing. 175-180.\n\n. Ow2 Consortium, OW2 Consortium. 2018. ASM. http://asm.ow2.io.\n\nLanguage to logical form with neural attention. Li Dong, Mirella Lapata, Annual Meeting of the Association for Computational Linguistics. Li Dong and Mirella Lapata. 2016. Language to logical form with neural attention. In Annual Meeting of the Association for Computational Linguistics. 33-43.\n\nAspect-oriented programming is quantification and obliviousness. Robert E Filman, Daniel P Friedman, Research Institute for Advanced Computer ScienceTechnical ReportRobert E. Filman and Daniel P. Friedman. 2000. Aspect-oriented programming is quantification and obliviousness. Technical Report. Research Institute for Advanced Computer Science.\n\nDo code and comments coevolve? On the relation between source code and comment changes. Beat Fluri, Michael Wursch, Harald C Gall, Working Conference on Reverse Engineering. Beat Fluri, Michael Wursch, and Harald C. Gall. 2007. Do code and comments co- evolve? On the relation between source code and comment changes. In Working Conference on Reverse Engineering. 70-79.\n\nEclipse Java development tools (JDT). Eclipse FoundationEclipse Foundation. 2019. Eclipse Java development tools (JDT). https://www. eclipse.org/jdt.\n\nRefactoring: Improving the design of existing code. Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts, Martin Fowler, Kent Beck, John Brant, William Opdyke, and Don Roberts. 1999. Refactoring: Improving the design of existing code.\n\nApache Gobblin. Apache Gobblin, Apache Gobblin. 2019. Apache Gobblin. https://github.com/apache/incubator- gobblin.\n\nGoogle Guava. Google, Google. 2019. Google Guava. https://github.com/google/guava.\n\nImproving software maintenance for pattern-based software development: A comment refactoring approach. Jhe-Jyun Guo, Nien-Lin Hsueh, Wen-Tin Lee, Shi-Chuen Hwang, International Conference on Trustworthy Systems and their Applications. Jhe-Jyun Guo, Nien-Lin Hsueh, Wen-Tin Lee, and Shi-Chuen Hwang. 2014. Im- proving software maintenance for pattern-based software development: A com- ment refactoring approach. In International Conference on Trustworthy Systems and their Applications. 75-79.\n\nCodeQuest: Scalable source code queries with Datalog. Elnar Hajiyev, Mathieu Verbaere, Oege De Moor, European Conference on Object-Oriented Programming. Elnar Hajiyev, Mathieu Verbaere, and Oege de Moor. 2006. CodeQuest: Scalable source code queries with Datalog. In European Conference on Object-Oriented Programming. 2-27.\n\nHow good is your comment? A study of comments in Java programs. Dorsaf Haouari, Houari Sahraoui, Philippe Langlais, International Symposium on Empirical Software Engineering and Measurement. Dorsaf Haouari, Houari Sahraoui, and Philippe Langlais. 2011. How good is your comment? A study of comments in Java programs. In International Symposium on Empirical Software Engineering and Measurement. 137-146.\n\nDeep code comment generation. Xing Hu, Ge Li, Xin Xia, David Lo, Zhi Jin, International Conference on Program Comprehension. Xing Hu, Ge Li, Xin Xia, David Lo, and Zhi Jin. 2018. Deep code comment generation. In International Conference on Program Comprehension. 200-210.\n\nIdentifying self-admitted technical debt in open source projects using text mining. Qiao Huang, Emad Shihab, Xin Xia, David Lo, Shanping Li, Empirical Software Engineering. 23Qiao Huang, Emad Shihab, Xin Xia, David Lo, and Shanping Li. 2018. Identifying self-admitted technical debt in open source projects using text mining. Empirical Software Engineering 23, 1 (2018), 418-451.\n\nOn the relationship between comment update practices and software bugs. M Walid, Nicolas Ibrahim, Bram Bettenburg, Ahmed E Adams, Hassan, Journal of Systems and Software. 85Walid M. Ibrahim, Nicolas Bettenburg, Bram Adams, and Ahmed E. Hassan. 2012. On the relationship between comment update practices and software bugs. Journal of Systems and Software 85, 10 (2012), 2293-2304.\n\nApache Incubator-Wave. Apache Incubator-WaveApache Incubator-Wave. 2019. Apache Incubator-Wave. https://github.com/ apache/incubator-wave.\n\nSummarizing source code using a neural attention model. Srinivasan Iyer, Ioannis Konstas, Alvin Cheung, Luke Zettlemoyer, Annual Meeting of the Association for Computational Linguistics. Srinivasan Iyer, Ioannis Konstas, Alvin Cheung, and Luke Zettlemoyer. 2016. Summarizing source code using a neural attention model. In Annual Meeting of the Association for Computational Linguistics. 2073-2083.\n\nNavigating and querying code without getting lost. Doug Janzen, Kris De Volder, International Conference on Aspect-Oriented Software Development. Doug Janzen and Kris De Volder. 2003. Navigating and querying code without getting lost. In International Conference on Aspect-Oriented Software Development. 178-187.\n\nA domain-specific language for scripting refactorings in Erlang. Huiqing Li, Simon Thompson, Fundamental Approaches to Software Engineering. Huiqing Li and Simon Thompson. 2012. A domain-specific language for scripting refactorings in Erlang. In Fundamental Approaches to Software Engineering. 501- 515.\n\nLatent attention for if-then program synthesis. Chang Liu, Xinyun Chen, Advances in Neural Information Processing Systems. Eui Chul Shin, Mingcheng Chen, and Dawn SongChang Liu, Xinyun Chen, Eui Chul Shin, Mingcheng Chen, and Dawn Song. 2016. Latent attention for if-then program synthesis. In Advances in Neural Information Processing Systems. 4574-4582.\n\nAll your TODO comments in one place. Llc Innobuilt Software, Innobuilt Software LLC. 2019. All your TODO comments in one place. https: //imdone.io/.\n\nAn empirical study on the removal of self-admitted technical debt. Everton Da S Maldonado, Rabe Abdalkareem, Emad Shihab, Alexander Serebrenik, International Conference on Software Maintenance and Evolution. Everton da S Maldonado, Rabe Abdalkareem, Emad Shihab, and Alexander Sere- brenik. 2017. An empirical study on the removal of self-admitted technical debt. In International Conference on Software Maintenance and Evolution. 238-248.\n\nAutomatic generation of natural language summaries for Java classes. Laura Moreno, Jairo Aponte, Giriprasad Sridhara, Andrian Marcus, Lori Pollock, K Vijay-Shanker, International Conference on Program Comprehension. Laura Moreno, Jairo Aponte, Giriprasad Sridhara, Andrian Marcus, Lori Pollock, and K Vijay-Shanker. 2013. Automatic generation of natural language summaries for Java classes. In International Conference on Program Comprehension. 23-32.\n\nNatural language models for predicting programming comments. Dana Movshovitz, -Attias William W Cohen, Annual Meeting of the Association for Computational Linguistics. Dana Movshovitz-Attias and William W Cohen. 2013. Natural language models for predicting programming comments. In Annual Meeting of the Association for Computational Linguistics. 35-40.\n\nNatural language processing and program analysis for supporting todo comments as software evolves. Pengyu Nie, Junyi Jessy Li, Sarfraz Khurshid, Raymond Mooney, Milos Gligoric, Workshops of the the AAAI Conference on Artificial Intelligence. Pengyu Nie, Junyi Jessy Li, Sarfraz Khurshid, Raymond Mooney, and Milos Gligoric. 2018. Natural language processing and program analysis for supporting todo comments as software evolves. In Workshops of the the AAAI Conference on Artificial Intelligence. 775-778.\n\nExecutable trigger-action comments. Pengyu Nie, Rishabh Rai, Junyi Jessy Li, Sarfraz Khurshid, Raymond J Mooney, Milos Gligoric, CoRR abs/1808.01729Pengyu Nie, Rishabh Rai, Junyi Jessy Li, Sarfraz Khurshid, Raymond J. Mooney, and Milos Gligoric. 2018. Executable trigger-action comments. CoRR abs/1808.01729 (2018).\n\nRefactoring object-oriented frameworks. William F Opdyke, University of Illinois at Urbana-ChampaignPh.D. DissertationWilliam F. Opdyke. 1992. Refactoring object-oriented frameworks. Ph.D. Disserta- tion. University of Illinois at Urbana-Champaign.\n\nRefactoring: An aid in designing application frameworks and evolving object-oriented systems. F William, Ralph E Opdyke, Johnson, In Symposium on Object-Oriented Programming Emphasizing Practical Applications. William F. Opdyke and Ralph E. Johnson. 1990. Refactoring: An aid in designing application frameworks and evolving object-oriented systems. In Symposium on Object-Oriented Programming Emphasizing Practical Applications. 145-161.\n\nLightweight source code monitoring with Triggr. Alim Ozdemir, Ayse Tosun, Hakan Erdogmus, Rui Abreu, Automated Software Engineering, Tool Demonstrations. Alim Ozdemir, Ayse Tosun, Hakan Erdogmus, and Rui Abreu. 2018. Lightweight source code monitoring with Triggr. In Automated Software Engineering, Tool Demonstrations. 864-867.\n\nClassifying code comments in Java open-source software systems. Luca Pascarella, Alberto Bacchelli, International Working Conference on Mining Software Repositories. Luca Pascarella and Alberto Bacchelli. 2017. Classifying code comments in Java open-source software systems. In International Working Conference on Mining Software Repositories. 227-237.\n\nStatistical learning for inference between implementations and documentation. Hung Phan, Anh Hoan, Tien N Nguyen, Hridesh Nguyen, Rajan, International Conference on Software Engineering: New Ideas and Emerging Technologies Results Track. Hung Phan, Hoan Anh Nguyen, Tien N Nguyen, and Hridesh Rajan. 2017. Sta- tistical learning for inference between implementations and documentation. In International Conference on Software Engineering: New Ideas and Emerging Technologies Results Track. 27-30.\n\nAn exploratory study on self-admitted technical debt. Aniket Potdar, Emad Shihab, International Conference on Software Maintenance and Evolution. Aniket Potdar and Emad Shihab. 2014. An exploratory study on self-admitted technical debt. In International Conference on Software Maintenance and Evolution. 91-100.\n\nLanguage to Code: Learning semantic parsers for If-This-Then-That recipes. Chris Quirk, J Raymond, Michel Mooney, Galley, Annual Meeting of the Association for Computational Linguistics. Chris Quirk, Raymond J Mooney, and Michel Galley. 2015. Language to Code: Learning semantic parsers for If-This-Then-That recipes.. In Annual Meeting of the Association for Computational Linguistics. 878-888.\n\nDetecting fragile comments. Kaur Inderjot, Martin P Ratol, Robillard, Automated Software Engineering. Inderjot Kaur Ratol and Martin P. Robillard. 2017. Detecting fragile comments. In Automated Software Engineering. 112-122.\n\n. Justin Searls, Justin Searls. 2019. todo_or_die. https://github.com/searls/todo_or_die.\n\nAutomatically detecting the up-to-date status of ToDo comments in Java programs. Giriprasad Sridhara, India Software Engineering Conference. Giriprasad Sridhara. 2016. Automatically detecting the up-to-date status of ToDo comments in Java programs. In India Software Engineering Conference. 16-25.\n\nTowards automatically generating summary comments for Java methods. Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, Vijay-Shanker, Automated Software Engineering. Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K Vijay- Shanker. 2010. Towards automatically generating summary comments for Java methods. In Automated Software Engineering. 43-52.\n\nGenerating parameter comments and integrating with method summaries. Giriprasad Sridhara, Lori Pollock, K Vijay-Shanker, International Conference on Program Comprehension. Giriprasad Sridhara, Lori Pollock, and K Vijay-Shanker. 2011. Generating pa- rameter comments and integrating with method summaries. In International Conference on Program Comprehension. 71-80.\n\nTODO or to bug. Margaret-Anne Storey, Jody Ryall, R Ian Bull, Del Myers, Janice Singer, International Conference on Software Engineering. Margaret-Anne Storey, Jody Ryall, R. Ian Bull, Del Myers, and Janice Singer. 2008. TODO or to bug. In International Conference on Software Engineering. 251-260.\n\nReducing outdated and inconsistent code comments during software development: The comment validator program. Master's thesis. Adam Svensson, Uppsala University, Information SystemsAdam Svensson. 2015. Reducing outdated and inconsistent code comments during software development: The comment validator program. Master's thesis. Uppsala University, Information Systems.\n\n/*iComment: bugs or bad comments?*. Lin Tan, Ding Yuan, Gopal Krishna, Yuanyuan Zhou, Symposium on Operating Systems Principles. Lin Tan, Ding Yuan, Gopal Krishna, and Yuanyuan Zhou. 2007. /*iComment: bugs or bad comments?*/. In Symposium on Operating Systems Principles. 145-158.\n\n@tCom-ment: Testing Javadoc comments to detect comment-code inconsistencies. Darko Shin Hwei Tan, Lin Marinov, Gary T Tan, Leavens, International Conference on Software Testing, Verification, and Validation. Shin Hwei Tan, Darko Marinov, Lin Tan, and Gary T. Leavens. 2012. @tCom- ment: Testing Javadoc comments to detect comment-code inconsistencies. In International Conference on Software Testing, Verification, and Validation. 260-269.\n\nEvolving object-oriented designs with refactorings. Lance Tokuda, Don Batory, Automated Software Engineering. Lance Tokuda and Don Batory. 1999. Evolving object-oriented designs with refactorings. In Automated Software Engineering. 174-181.\n\nTrigIt web page. Trigit, TrigIt. 2019. TrigIt web page. http://cozy.ece.utexas.edu/trigit.\n\nThere and back again: Can you compile that snapshot. Michele Tufano, Fabio Palomba, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, Andrea De Lucia, Denys Poshyvanyk, Journal of Software: Evolution and Process. 1838Michele Tufano, Fabio Palomba, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, Andrea De Lucia, and Denys Poshyvanyk. 2017. There and back again: Can you compile that snapshot? Journal of Software: Evolution and Process (2017), e1838.\n\nProgramming language evolution via source code query languages. Raoul-Gabriel Urma, Alan Mycroft, Workshop on Evaluation and Usability of Programming Languages and Tools. Raoul-Gabriel Urma and Alan Mycroft. 2012. Programming language evolution via source code query languages. In Workshop on Evaluation and Usability of Programming Languages and Tools. 35-38.\n\nSource-code queries with graph databases-with application to programming language usage and evolution. Raoul-Gabriel Urma, Alan Mycroft, Science of Computer Programming. 97Raoul-Gabriel Urma and Alan Mycroft. 2015. Source-code queries with graph databases-with application to programming language usage and evolution. Sci- ence of Computer Programming 97, P1 (2015), 127-134.\n\nA compositional paradigm of automating refactorings. Mohsen Vakilian, Nicholas Chen, Stas Roshanak Zilouchian Moghaddam, Ralph E Negara, Johnson, European Conference on Object-Oriented Programming. Berlin, HeidelbergMohsen Vakilian, Nicholas Chen, Roshanak Zilouchian Moghaddam, Stas Negara, and Ralph E. Johnson. 2013. A compositional paradigm of automating refactorings. In European Conference on Object-Oriented Programming. Berlin, Heidelberg, 527- 551.\n\nJunGL: A scripting language for refactoring. Mathieu Verbaere, International Conference on Software Engineering. Ran Ettinger, and Oege de MoorMathieu Verbaere, Ran Ettinger, and Oege de Moor. 2006. JunGL: A scripting language for refactoring. In International Conference on Software Engineering. 172-181.\n\nA syntactic neural model for generalpurpose code generation. Pengcheng Yin, Graham Neubig, Annual Meeting of the Association for Computational Linguistics. Pengcheng Yin and Graham Neubig. 2017. A syntactic neural model for general- purpose code generation. In Annual Meeting of the Association for Computational Linguistics. 440-450.\n\nSource code that talks: An exploration of Eclipse task comments and their implication to repository mining. T T Annie, James L Ying, Steven Wright, Abrams, International Working Conference on Mining Software Repositories. Annie T. T. Ying, James L. Wright, and Steven Abrams. 2005. Source code that talks: An exploration of Eclipse task comments and their implication to repository mining. In International Working Conference on Mining Software Repositories. 1-5.\n\nRecommending when design technical debt should be self-admitted. Fiorella Zampetti, Cedric Noiseux, Giuliano Antoniol, Foutse Khomh, Massimiliano Di Penta, International Conference on Software Maintenance and Evolution. Fiorella Zampetti, Cedric Noiseux, Giuliano Antoniol, Foutse Khomh, and Massi- miliano Di Penta. 2017. Recommending when design technical debt should be self-admitted. In International Conference on Software Maintenance and Evolution. 216-226.\n\nAnalyzing APIs documentation and code to detect directive defects. Yu Zhou, Ruihang Gu, Taolue Chen, Zhiqiu Huang, Sebastiano Panichella, Harald Gall, International Conference on Software Engineering. Yu Zhou, Ruihang Gu, Taolue Chen, Zhiqiu Huang, Sebastiano Panichella, and Harald Gall. 2017. Analyzing APIs documentation and code to detect directive defects. In International Conference on Software Engineering. 27-37.\n", "annotations": {"author": "[{\"end\":152,\"start\":95},{\"end\":217,\"start\":153},{\"end\":272,\"start\":218},{\"end\":343,\"start\":273},{\"end\":411,\"start\":344},{\"end\":486,\"start\":412},{\"end\":537,\"start\":487},{\"end\":589,\"start\":538},{\"end\":644,\"start\":590},{\"end\":701,\"start\":645},{\"end\":751,\"start\":702}]", "publisher": null, "author_last_name": "[{\"end\":105,\"start\":102},{\"end\":164,\"start\":161},{\"end\":232,\"start\":230},{\"end\":289,\"start\":281},{\"end\":360,\"start\":354},{\"end\":426,\"start\":418},{\"end\":497,\"start\":494},{\"end\":549,\"start\":546},{\"end\":604,\"start\":602},{\"end\":661,\"start\":653}]", "author_first_name": "[{\"end\":101,\"start\":95},{\"end\":160,\"start\":153},{\"end\":223,\"start\":218},{\"end\":229,\"start\":224},{\"end\":280,\"start\":273},{\"end\":351,\"start\":344},{\"end\":353,\"start\":352},{\"end\":417,\"start\":412},{\"end\":493,\"start\":487},{\"end\":545,\"start\":538},{\"end\":595,\"start\":590},{\"end\":601,\"start\":596},{\"end\":652,\"start\":645},{\"end\":709,\"start\":702},{\"end\":711,\"start\":710}]", "author_affiliation": "[{\"end\":151,\"start\":114},{\"end\":216,\"start\":179},{\"end\":271,\"start\":234},{\"end\":342,\"start\":305},{\"end\":410,\"start\":373},{\"end\":485,\"start\":448},{\"end\":536,\"start\":499},{\"end\":588,\"start\":551},{\"end\":643,\"start\":606},{\"end\":700,\"start\":663},{\"end\":750,\"start\":713}]", "title": "[{\"end\":74,\"start\":1},{\"end\":825,\"start\":752}]", "venue": null, "abstract": "[{\"end\":2873,\"start\":1323}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b33\"},\"end\":2995,\"start\":2991},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":2998,\"start\":2995},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":3001,\"start\":2998},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3148,\"start\":3144},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":3510,\"start\":3506},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":3513,\"start\":3510},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":3516,\"start\":3513},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3817,\"start\":3813},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":4509,\"start\":4505},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":4512,\"start\":4509},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":4515,\"start\":4512},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":4519,\"start\":4515},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":4523,\"start\":4519},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":4527,\"start\":4523},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4669,\"start\":4665},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":4672,\"start\":4669},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":4675,\"start\":4672},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":4778,\"start\":4774},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":4943,\"start\":4939},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":5031,\"start\":5027},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":5393,\"start\":5389},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":9866,\"start\":9862},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":11286,\"start\":11283},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":14530,\"start\":14527},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":15306,\"start\":15302},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":16390,\"start\":16386},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":16907,\"start\":16904},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":17626,\"start\":17622},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":19517,\"start\":19514},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":20456,\"start\":20452},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23559,\"start\":23556},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":26214,\"start\":26210},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":29594,\"start\":29590},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":34911,\"start\":34907},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":35172,\"start\":35168},{\"end\":39878,\"start\":39855},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":44744,\"start\":44741},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":44746,\"start\":44744},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":44749,\"start\":44746},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":44752,\"start\":44749},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":45030,\"start\":45026},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":45288,\"start\":45284},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":46906,\"start\":46902},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":47204,\"start\":47200},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":47228,\"start\":47224},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":47322,\"start\":47318},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":47410,\"start\":47406},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":47547,\"start\":47543},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":47711,\"start\":47707},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":48092,\"start\":48088},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":48169,\"start\":48165},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":48187,\"start\":48183},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":48247,\"start\":48243},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":48344,\"start\":48340},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":48428,\"start\":48424},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":48449,\"start\":48445},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":48594,\"start\":48590},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":49167,\"start\":49164},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":49170,\"start\":49167},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":49173,\"start\":49170},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":49176,\"start\":49173},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":49179,\"start\":49176},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":49406,\"start\":49402},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":49409,\"start\":49406},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":49412,\"start\":49409},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":49415,\"start\":49412},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":49418,\"start\":49415},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":49421,\"start\":49418},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":49424,\"start\":49421},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":49477,\"start\":49474},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":49503,\"start\":49499},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":49735,\"start\":49731},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":49738,\"start\":49735},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":49757,\"start\":49753},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":49898,\"start\":49894},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":50274,\"start\":50271},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":50385,\"start\":50381},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":50511,\"start\":50508},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":50757,\"start\":50753},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":50760,\"start\":50757},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":50763,\"start\":50760},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":50766,\"start\":50763},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":50825,\"start\":50821},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":50828,\"start\":50825},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":50831,\"start\":50828},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":51348,\"start\":51344},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":51615,\"start\":51611},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":51618,\"start\":51615},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":51621,\"start\":51618},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":51624,\"start\":51621},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":51627,\"start\":51624}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":53323,\"start\":53210},{\"attributes\":{\"id\":\"fig_1\"},\"end\":53746,\"start\":53324},{\"attributes\":{\"id\":\"fig_2\"},\"end\":54074,\"start\":53747},{\"attributes\":{\"id\":\"fig_3\"},\"end\":54172,\"start\":54075},{\"attributes\":{\"id\":\"fig_4\"},\"end\":54581,\"start\":54173},{\"attributes\":{\"id\":\"fig_5\"},\"end\":56580,\"start\":54582},{\"attributes\":{\"id\":\"fig_6\"},\"end\":56649,\"start\":56581},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":58157,\"start\":56650},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":58681,\"start\":58158},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":59313,\"start\":58682},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":59999,\"start\":59314},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":60773,\"start\":60000}]", "paragraph": "[{\"end\":3149,\"start\":2889},{\"end\":3229,\"start\":3151},{\"end\":3456,\"start\":3231},{\"end\":3818,\"start\":3458},{\"end\":4779,\"start\":3820},{\"end\":5394,\"start\":4781},{\"end\":5957,\"start\":5396},{\"end\":6875,\"start\":5959},{\"end\":7584,\"start\":6877},{\"end\":8880,\"start\":7586},{\"end\":9514,\"start\":8882},{\"end\":12859,\"start\":9540},{\"end\":13041,\"start\":12880},{\"end\":13694,\"start\":13054},{\"end\":15307,\"start\":13696},{\"end\":15565,\"start\":15309},{\"end\":16767,\"start\":15567},{\"end\":18013,\"start\":16769},{\"end\":18704,\"start\":18015},{\"end\":19156,\"start\":19049},{\"end\":19518,\"start\":19158},{\"end\":20155,\"start\":19520},{\"end\":20457,\"start\":20191},{\"end\":21678,\"start\":20459},{\"end\":23923,\"start\":21680},{\"end\":24657,\"start\":24161},{\"end\":25475,\"start\":24659},{\"end\":25996,\"start\":25477},{\"end\":26552,\"start\":26015},{\"end\":26802,\"start\":26554},{\"end\":27252,\"start\":26804},{\"end\":27502,\"start\":27254},{\"end\":27776,\"start\":27504},{\"end\":28284,\"start\":27778},{\"end\":28432,\"start\":28299},{\"end\":29986,\"start\":28449},{\"end\":30488,\"start\":29988},{\"end\":31562,\"start\":30490},{\"end\":31762,\"start\":31564},{\"end\":32596,\"start\":31764},{\"end\":33467,\"start\":32608},{\"end\":33629,\"start\":33469},{\"end\":34052,\"start\":33631},{\"end\":34435,\"start\":34069},{\"end\":35245,\"start\":34461},{\"end\":36578,\"start\":35247},{\"end\":37519,\"start\":36580},{\"end\":37713,\"start\":37538},{\"end\":38403,\"start\":37715},{\"end\":38502,\"start\":38405},{\"end\":38924,\"start\":38504},{\"end\":39617,\"start\":38957},{\"end\":40164,\"start\":39619},{\"end\":40735,\"start\":40166},{\"end\":42211,\"start\":40760},{\"end\":43041,\"start\":42213},{\"end\":43508,\"start\":43056},{\"end\":44067,\"start\":43510},{\"end\":45031,\"start\":44069},{\"end\":45289,\"start\":45055},{\"end\":45481,\"start\":45291},{\"end\":45784,\"start\":45483},{\"end\":46012,\"start\":45786},{\"end\":46205,\"start\":46014},{\"end\":46531,\"start\":46207},{\"end\":46840,\"start\":46533},{\"end\":47970,\"start\":46857},{\"end\":49125,\"start\":47972},{\"end\":49362,\"start\":49127},{\"end\":49700,\"start\":49364},{\"end\":50200,\"start\":49702},{\"end\":50619,\"start\":50202},{\"end\":51247,\"start\":50621},{\"end\":51491,\"start\":51249},{\"end\":52246,\"start\":51493},{\"end\":53209,\"start\":52261}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":19048,\"start\":18705},{\"attributes\":{\"id\":\"formula_1\"},\"end\":20190,\"start\":20156},{\"attributes\":{\"id\":\"formula_2\"},\"end\":24149,\"start\":23924}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":14235,\"start\":14228},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":32084,\"start\":32077},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":34565,\"start\":34558},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":35193,\"start\":35186},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":35475,\"start\":35468},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":41247,\"start\":41240}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2887,\"start\":2875},{\"attributes\":{\"n\":\"2\"},\"end\":9538,\"start\":9517},{\"attributes\":{\"n\":\"3\"},\"end\":12878,\"start\":12862},{\"attributes\":{\"n\":\"3.1\"},\"end\":13052,\"start\":13044},{\"attributes\":{\"n\":\"3.2\"},\"end\":24159,\"start\":24151},{\"attributes\":{\"n\":\"3.3\"},\"end\":26013,\"start\":25999},{\"attributes\":{\"n\":\"4\"},\"end\":28297,\"start\":28287},{\"attributes\":{\"n\":\"4.1\"},\"end\":28447,\"start\":28435},{\"attributes\":{\"n\":\"4.2\"},\"end\":32606,\"start\":32599},{\"attributes\":{\"n\":\"5\"},\"end\":34067,\"start\":34055},{\"attributes\":{\"n\":\"5.1\"},\"end\":34459,\"start\":34438},{\"attributes\":{\"n\":\"5.2\"},\"end\":37536,\"start\":37522},{\"attributes\":{\"n\":\"5.3\"},\"end\":38955,\"start\":38927},{\"attributes\":{\"n\":\"6\"},\"end\":40758,\"start\":40738},{\"attributes\":{\"n\":\"7\"},\"end\":43054,\"start\":43044},{\"attributes\":{\"n\":\"8\"},\"end\":45053,\"start\":45034},{\"attributes\":{\"n\":\"9\"},\"end\":46855,\"start\":46843},{\"attributes\":{\"n\":\"10\"},\"end\":52259,\"start\":52249},{\"end\":53221,\"start\":53211},{\"end\":53335,\"start\":53325},{\"end\":54086,\"start\":54076},{\"end\":54175,\"start\":54174},{\"end\":56592,\"start\":56582},{\"end\":58168,\"start\":58159},{\"end\":58692,\"start\":58683},{\"end\":59324,\"start\":59315},{\"end\":60010,\"start\":60001}]", "table": "[{\"end\":58157,\"start\":56930},{\"end\":58681,\"start\":58495},{\"end\":59313,\"start\":58919},{\"end\":59999,\"start\":59497},{\"end\":60773,\"start\":60119}]", "figure_caption": "[{\"end\":53323,\"start\":53223},{\"end\":53746,\"start\":53337},{\"end\":54074,\"start\":53749},{\"end\":54172,\"start\":54088},{\"end\":54581,\"start\":54176},{\"end\":56580,\"start\":54584},{\"end\":56649,\"start\":56594},{\"end\":56930,\"start\":56652},{\"end\":58495,\"start\":58170},{\"end\":58919,\"start\":58694},{\"end\":59497,\"start\":59326},{\"end\":60119,\"start\":60012}]", "figure_ref": "[{\"end\":9810,\"start\":9802},{\"end\":11230,\"start\":11222},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11793,\"start\":11785},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":15071,\"start\":15063},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17740,\"start\":17732},{\"end\":19076,\"start\":19068},{\"end\":21067,\"start\":21059},{\"end\":22040,\"start\":22032},{\"end\":22414,\"start\":22406},{\"end\":22948,\"start\":22940},{\"end\":23334,\"start\":23326},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":24929,\"start\":24921},{\"end\":31884,\"start\":31876},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":33175,\"start\":33166},{\"end\":33221,\"start\":33213},{\"end\":33250,\"start\":33242},{\"end\":38785,\"start\":38777},{\"end\":39423,\"start\":39415}]", "bib_author_first_name": "[{\"end\":61395,\"start\":61392},{\"end\":61408,\"start\":61403},{\"end\":61428,\"start\":61419},{\"end\":61769,\"start\":61760},{\"end\":61782,\"start\":61781},{\"end\":61798,\"start\":61789},{\"end\":61812,\"start\":61805},{\"end\":62085,\"start\":62079},{\"end\":62103,\"start\":62097},{\"end\":62118,\"start\":62112},{\"end\":62129,\"start\":62127},{\"end\":63097,\"start\":63089},{\"end\":63113,\"start\":63106},{\"end\":63433,\"start\":63426},{\"end\":63448,\"start\":63441},{\"end\":63466,\"start\":63456},{\"end\":63488,\"start\":63478},{\"end\":63503,\"start\":63496},{\"end\":63505,\"start\":63504},{\"end\":63518,\"start\":63513},{\"end\":63532,\"start\":63526},{\"end\":63540,\"start\":63533},{\"end\":63913,\"start\":63906},{\"end\":63932,\"start\":63925},{\"end\":63934,\"start\":63933},{\"end\":64273,\"start\":64271},{\"end\":64287,\"start\":64280},{\"end\":64590,\"start\":64584},{\"end\":64592,\"start\":64591},{\"end\":64607,\"start\":64601},{\"end\":64609,\"start\":64608},{\"end\":64957,\"start\":64953},{\"end\":64972,\"start\":64965},{\"end\":64987,\"start\":64981},{\"end\":64989,\"start\":64988},{\"end\":65446,\"start\":65440},{\"end\":65459,\"start\":65455},{\"end\":65470,\"start\":65466},{\"end\":65485,\"start\":65478},{\"end\":65497,\"start\":65494},{\"end\":65659,\"start\":65653},{\"end\":65949,\"start\":65941},{\"end\":65963,\"start\":65955},{\"end\":65978,\"start\":65971},{\"end\":65993,\"start\":65984},{\"end\":66392,\"start\":66387},{\"end\":66409,\"start\":66402},{\"end\":66424,\"start\":66420},{\"end\":66729,\"start\":66723},{\"end\":66745,\"start\":66739},{\"end\":66764,\"start\":66756},{\"end\":67098,\"start\":67094},{\"end\":67105,\"start\":67103},{\"end\":67113,\"start\":67110},{\"end\":67124,\"start\":67119},{\"end\":67132,\"start\":67129},{\"end\":67425,\"start\":67421},{\"end\":67437,\"start\":67433},{\"end\":67449,\"start\":67446},{\"end\":67460,\"start\":67455},{\"end\":67473,\"start\":67465},{\"end\":67791,\"start\":67790},{\"end\":67806,\"start\":67799},{\"end\":67820,\"start\":67816},{\"end\":67838,\"start\":67833},{\"end\":67840,\"start\":67839},{\"end\":68305,\"start\":68295},{\"end\":68319,\"start\":68312},{\"end\":68334,\"start\":68329},{\"end\":68347,\"start\":68343},{\"end\":68693,\"start\":68689},{\"end\":68706,\"start\":68702},{\"end\":68709,\"start\":68707},{\"end\":69024,\"start\":69017},{\"end\":69034,\"start\":69029},{\"end\":69310,\"start\":69305},{\"end\":69322,\"start\":69316},{\"end\":69654,\"start\":69651},{\"end\":69838,\"start\":69831},{\"end\":69859,\"start\":69855},{\"end\":69877,\"start\":69873},{\"end\":69895,\"start\":69886},{\"end\":70279,\"start\":70274},{\"end\":70293,\"start\":70288},{\"end\":70312,\"start\":70302},{\"end\":70330,\"start\":70323},{\"end\":70343,\"start\":70339},{\"end\":70354,\"start\":70353},{\"end\":70723,\"start\":70719},{\"end\":70743,\"start\":70736},{\"end\":71118,\"start\":71112},{\"end\":71129,\"start\":71124},{\"end\":71135,\"start\":71130},{\"end\":71147,\"start\":71140},{\"end\":71165,\"start\":71158},{\"end\":71179,\"start\":71174},{\"end\":71562,\"start\":71556},{\"end\":71575,\"start\":71568},{\"end\":71586,\"start\":71581},{\"end\":71592,\"start\":71587},{\"end\":71604,\"start\":71597},{\"end\":71622,\"start\":71615},{\"end\":71624,\"start\":71623},{\"end\":71638,\"start\":71633},{\"end\":71884,\"start\":71877},{\"end\":71886,\"start\":71885},{\"end\":72182,\"start\":72181},{\"end\":72197,\"start\":72192},{\"end\":72199,\"start\":72198},{\"end\":72579,\"start\":72575},{\"end\":72593,\"start\":72589},{\"end\":72606,\"start\":72601},{\"end\":72620,\"start\":72617},{\"end\":72926,\"start\":72922},{\"end\":72946,\"start\":72939},{\"end\":73294,\"start\":73290},{\"end\":73304,\"start\":73301},{\"end\":73315,\"start\":73311},{\"end\":73317,\"start\":73316},{\"end\":73333,\"start\":73326},{\"end\":73770,\"start\":73764},{\"end\":73783,\"start\":73779},{\"end\":74103,\"start\":74098},{\"end\":74112,\"start\":74111},{\"end\":74128,\"start\":74122},{\"end\":74452,\"start\":74448},{\"end\":74469,\"start\":74463},{\"end\":74471,\"start\":74470},{\"end\":74654,\"start\":74648},{\"end\":74828,\"start\":74818},{\"end\":75114,\"start\":75104},{\"end\":75130,\"start\":75125},{\"end\":75142,\"start\":75137},{\"end\":75158,\"start\":75154},{\"end\":75497,\"start\":75487},{\"end\":75512,\"start\":75508},{\"end\":75523,\"start\":75522},{\"end\":75814,\"start\":75801},{\"end\":75827,\"start\":75823},{\"end\":75836,\"start\":75835},{\"end\":75840,\"start\":75837},{\"end\":75850,\"start\":75847},{\"end\":75864,\"start\":75858},{\"end\":76215,\"start\":76211},{\"end\":76493,\"start\":76490},{\"end\":76503,\"start\":76499},{\"end\":76515,\"start\":76510},{\"end\":76533,\"start\":76525},{\"end\":76818,\"start\":76813},{\"end\":76837,\"start\":76834},{\"end\":76851,\"start\":76847},{\"end\":76853,\"start\":76852},{\"end\":77234,\"start\":77229},{\"end\":77246,\"start\":77243},{\"end\":77571,\"start\":77564},{\"end\":77585,\"start\":77580},{\"end\":77603,\"start\":77595},{\"end\":77624,\"start\":77612},{\"end\":77640,\"start\":77635},{\"end\":77656,\"start\":77650},{\"end\":77659,\"start\":77657},{\"end\":77672,\"start\":77667},{\"end\":78053,\"start\":78040},{\"end\":78064,\"start\":78060},{\"end\":78454,\"start\":78441},{\"end\":78465,\"start\":78461},{\"end\":78774,\"start\":78768},{\"end\":78793,\"start\":78785},{\"end\":78804,\"start\":78800},{\"end\":78841,\"start\":78836},{\"end\":78843,\"start\":78842},{\"end\":79226,\"start\":79219},{\"end\":79551,\"start\":79542},{\"end\":79563,\"start\":79557},{\"end\":79926,\"start\":79925},{\"end\":79928,\"start\":79927},{\"end\":79941,\"start\":79936},{\"end\":79943,\"start\":79942},{\"end\":79956,\"start\":79950},{\"end\":80355,\"start\":80347},{\"end\":80372,\"start\":80366},{\"end\":80390,\"start\":80382},{\"end\":80407,\"start\":80401},{\"end\":80430,\"start\":80415},{\"end\":80816,\"start\":80814},{\"end\":80830,\"start\":80823},{\"end\":80841,\"start\":80835},{\"end\":80854,\"start\":80848},{\"end\":80872,\"start\":80862},{\"end\":80891,\"start\":80885}]", "bib_author_last_name": "[{\"end\":61401,\"start\":61396},{\"end\":61417,\"start\":61409},{\"end\":61434,\"start\":61429},{\"end\":61779,\"start\":61770},{\"end\":61787,\"start\":61783},{\"end\":61803,\"start\":61799},{\"end\":61820,\"start\":61813},{\"end\":61828,\"start\":61822},{\"end\":62095,\"start\":62086},{\"end\":62110,\"start\":62104},{\"end\":62125,\"start\":62119},{\"end\":62133,\"start\":62130},{\"end\":62961,\"start\":62955},{\"end\":63104,\"start\":63098},{\"end\":63119,\"start\":63114},{\"end\":63439,\"start\":63434},{\"end\":63454,\"start\":63449},{\"end\":63476,\"start\":63467},{\"end\":63494,\"start\":63489},{\"end\":63511,\"start\":63506},{\"end\":63524,\"start\":63519},{\"end\":63552,\"start\":63541},{\"end\":63923,\"start\":63914},{\"end\":63941,\"start\":63935},{\"end\":64174,\"start\":64160},{\"end\":64278,\"start\":64274},{\"end\":64294,\"start\":64288},{\"end\":64599,\"start\":64593},{\"end\":64618,\"start\":64610},{\"end\":64963,\"start\":64958},{\"end\":64979,\"start\":64973},{\"end\":64994,\"start\":64990},{\"end\":65453,\"start\":65447},{\"end\":65464,\"start\":65460},{\"end\":65476,\"start\":65471},{\"end\":65492,\"start\":65486},{\"end\":65505,\"start\":65498},{\"end\":65667,\"start\":65660},{\"end\":65774,\"start\":65768},{\"end\":65953,\"start\":65950},{\"end\":65969,\"start\":65964},{\"end\":65982,\"start\":65979},{\"end\":65999,\"start\":65994},{\"end\":66400,\"start\":66393},{\"end\":66418,\"start\":66410},{\"end\":66432,\"start\":66425},{\"end\":66737,\"start\":66730},{\"end\":66754,\"start\":66746},{\"end\":66773,\"start\":66765},{\"end\":67101,\"start\":67099},{\"end\":67108,\"start\":67106},{\"end\":67117,\"start\":67114},{\"end\":67127,\"start\":67125},{\"end\":67136,\"start\":67133},{\"end\":67431,\"start\":67426},{\"end\":67444,\"start\":67438},{\"end\":67453,\"start\":67450},{\"end\":67463,\"start\":67461},{\"end\":67476,\"start\":67474},{\"end\":67797,\"start\":67792},{\"end\":67814,\"start\":67807},{\"end\":67831,\"start\":67821},{\"end\":67846,\"start\":67841},{\"end\":67854,\"start\":67848},{\"end\":68310,\"start\":68306},{\"end\":68327,\"start\":68320},{\"end\":68341,\"start\":68335},{\"end\":68359,\"start\":68348},{\"end\":68700,\"start\":68694},{\"end\":68716,\"start\":68710},{\"end\":69027,\"start\":69025},{\"end\":69043,\"start\":69035},{\"end\":69314,\"start\":69311},{\"end\":69327,\"start\":69323},{\"end\":69673,\"start\":69655},{\"end\":69853,\"start\":69839},{\"end\":69871,\"start\":69860},{\"end\":69884,\"start\":69878},{\"end\":69906,\"start\":69896},{\"end\":70286,\"start\":70280},{\"end\":70300,\"start\":70294},{\"end\":70321,\"start\":70313},{\"end\":70337,\"start\":70331},{\"end\":70351,\"start\":70344},{\"end\":70368,\"start\":70355},{\"end\":70734,\"start\":70724},{\"end\":70759,\"start\":70744},{\"end\":71122,\"start\":71119},{\"end\":71138,\"start\":71136},{\"end\":71156,\"start\":71148},{\"end\":71172,\"start\":71166},{\"end\":71188,\"start\":71180},{\"end\":71566,\"start\":71563},{\"end\":71579,\"start\":71576},{\"end\":71595,\"start\":71593},{\"end\":71613,\"start\":71605},{\"end\":71631,\"start\":71625},{\"end\":71647,\"start\":71639},{\"end\":71893,\"start\":71887},{\"end\":72190,\"start\":72183},{\"end\":72206,\"start\":72200},{\"end\":72215,\"start\":72208},{\"end\":72587,\"start\":72580},{\"end\":72599,\"start\":72594},{\"end\":72615,\"start\":72607},{\"end\":72626,\"start\":72621},{\"end\":72937,\"start\":72927},{\"end\":72956,\"start\":72947},{\"end\":73299,\"start\":73295},{\"end\":73309,\"start\":73305},{\"end\":73324,\"start\":73318},{\"end\":73340,\"start\":73334},{\"end\":73347,\"start\":73342},{\"end\":73777,\"start\":73771},{\"end\":73790,\"start\":73784},{\"end\":74109,\"start\":74104},{\"end\":74120,\"start\":74113},{\"end\":74135,\"start\":74129},{\"end\":74143,\"start\":74137},{\"end\":74461,\"start\":74453},{\"end\":74477,\"start\":74472},{\"end\":74488,\"start\":74479},{\"end\":74661,\"start\":74655},{\"end\":74837,\"start\":74829},{\"end\":75123,\"start\":75115},{\"end\":75135,\"start\":75131},{\"end\":75152,\"start\":75143},{\"end\":75166,\"start\":75159},{\"end\":75181,\"start\":75168},{\"end\":75506,\"start\":75498},{\"end\":75520,\"start\":75513},{\"end\":75537,\"start\":75524},{\"end\":75821,\"start\":75815},{\"end\":75833,\"start\":75828},{\"end\":75845,\"start\":75841},{\"end\":75856,\"start\":75851},{\"end\":75871,\"start\":75865},{\"end\":76224,\"start\":76216},{\"end\":76497,\"start\":76494},{\"end\":76508,\"start\":76504},{\"end\":76523,\"start\":76516},{\"end\":76538,\"start\":76534},{\"end\":76832,\"start\":76819},{\"end\":76845,\"start\":76838},{\"end\":76857,\"start\":76854},{\"end\":76866,\"start\":76859},{\"end\":77241,\"start\":77235},{\"end\":77253,\"start\":77247},{\"end\":77442,\"start\":77436},{\"end\":77578,\"start\":77572},{\"end\":77593,\"start\":77586},{\"end\":77610,\"start\":77604},{\"end\":77633,\"start\":77625},{\"end\":77648,\"start\":77641},{\"end\":77665,\"start\":77660},{\"end\":77683,\"start\":77673},{\"end\":78058,\"start\":78054},{\"end\":78072,\"start\":78065},{\"end\":78459,\"start\":78455},{\"end\":78473,\"start\":78466},{\"end\":78783,\"start\":78775},{\"end\":78798,\"start\":78794},{\"end\":78834,\"start\":78805},{\"end\":78850,\"start\":78844},{\"end\":78859,\"start\":78852},{\"end\":79235,\"start\":79227},{\"end\":79555,\"start\":79552},{\"end\":79570,\"start\":79564},{\"end\":79934,\"start\":79929},{\"end\":79948,\"start\":79944},{\"end\":79963,\"start\":79957},{\"end\":79971,\"start\":79965},{\"end\":80364,\"start\":80356},{\"end\":80380,\"start\":80373},{\"end\":80399,\"start\":80391},{\"end\":80413,\"start\":80408},{\"end\":80436,\"start\":80431},{\"end\":80821,\"start\":80817},{\"end\":80833,\"start\":80831},{\"end\":80846,\"start\":80842},{\"end\":80860,\"start\":80855},{\"end\":80883,\"start\":80873},{\"end\":80896,\"start\":80892}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":2373709},\"end\":61699,\"start\":61307},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":207591052},\"end\":62022,\"start\":61701},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":2706277},\"end\":62361,\"start\":62024},{\"attributes\":{\"id\":\"b3\"},\"end\":62586,\"start\":62363},{\"attributes\":{\"id\":\"b4\"},\"end\":62742,\"start\":62588},{\"attributes\":{\"id\":\"b5\"},\"end\":62938,\"start\":62744},{\"attributes\":{\"id\":\"b6\"},\"end\":63025,\"start\":62940},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":6668578},\"end\":63369,\"start\":63027},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":49863340},\"end\":63875,\"start\":63371},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":217279086},\"end\":64156,\"start\":63877},{\"attributes\":{\"id\":\"b10\"},\"end\":64221,\"start\":64158},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":15412473},\"end\":64517,\"start\":64223},{\"attributes\":{\"id\":\"b12\"},\"end\":64863,\"start\":64519},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":16017158},\"end\":65235,\"start\":64865},{\"attributes\":{\"id\":\"b14\"},\"end\":65386,\"start\":65237},{\"attributes\":{\"id\":\"b15\"},\"end\":65635,\"start\":65388},{\"attributes\":{\"id\":\"b16\"},\"end\":65752,\"start\":65637},{\"attributes\":{\"id\":\"b17\"},\"end\":65836,\"start\":65754},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":19030503},\"end\":66331,\"start\":65838},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":14293984},\"end\":66657,\"start\":66333},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":5813874},\"end\":67062,\"start\":66659},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":49584534},\"end\":67335,\"start\":67064},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":207144767},\"end\":67716,\"start\":67337},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":18067970},\"end\":68097,\"start\":67718},{\"attributes\":{\"id\":\"b24\"},\"end\":68237,\"start\":68099},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":8820379},\"end\":68636,\"start\":68239},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":9046606},\"end\":68950,\"start\":68638},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":220754462},\"end\":69255,\"start\":68952},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":6201712},\"end\":69612,\"start\":69257},{\"attributes\":{\"id\":\"b29\"},\"end\":69762,\"start\":69614},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":21136444},\"end\":70203,\"start\":69764},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1129667},\"end\":70656,\"start\":70205},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":6706547},\"end\":71011,\"start\":70658},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":215806850},\"end\":71518,\"start\":71013},{\"attributes\":{\"doi\":\"CoRR abs/1808.01729\",\"id\":\"b34\"},\"end\":71835,\"start\":71520},{\"attributes\":{\"id\":\"b35\"},\"end\":72085,\"start\":71837},{\"attributes\":{\"id\":\"b36\"},\"end\":72525,\"start\":72087},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":52069747},\"end\":72856,\"start\":72527},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":216034179},\"end\":73210,\"start\":72858},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":26863868},\"end\":73708,\"start\":73212},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":14679583},\"end\":74021,\"start\":73710},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":2916543},\"end\":74418,\"start\":74023},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":10905510},\"end\":74644,\"start\":74420},{\"attributes\":{\"id\":\"b43\"},\"end\":74735,\"start\":74646},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":15560855},\"end\":75034,\"start\":74737},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":9790585},\"end\":75416,\"start\":75036},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":2992151},\"end\":75783,\"start\":75418},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":17629313},\"end\":76083,\"start\":75785},{\"attributes\":{\"id\":\"b48\"},\"end\":76452,\"start\":76085},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":1843404},\"end\":76734,\"start\":76454},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":11189276},\"end\":77175,\"start\":76736},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":5793247},\"end\":77417,\"start\":77177},{\"attributes\":{\"id\":\"b52\"},\"end\":77509,\"start\":77419},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":18085201},\"end\":77974,\"start\":77511},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":14084279},\"end\":78336,\"start\":77976},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":1362718},\"end\":78713,\"start\":78338},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":14854328},\"end\":79172,\"start\":78715},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":2660758},\"end\":79479,\"start\":79174},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":12718048},\"end\":79815,\"start\":79481},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":11765689},\"end\":80280,\"start\":79817},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":12013455},\"end\":80745,\"start\":80282},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":20693414},\"end\":81168,\"start\":80747}]", "bib_title": "[{\"end\":61390,\"start\":61307},{\"end\":61758,\"start\":61701},{\"end\":62077,\"start\":62024},{\"end\":62391,\"start\":62363},{\"end\":63087,\"start\":63027},{\"end\":63424,\"start\":63371},{\"end\":63904,\"start\":63877},{\"end\":64269,\"start\":64223},{\"end\":64951,\"start\":64865},{\"end\":65939,\"start\":65838},{\"end\":66385,\"start\":66333},{\"end\":66721,\"start\":66659},{\"end\":67092,\"start\":67064},{\"end\":67419,\"start\":67337},{\"end\":67788,\"start\":67718},{\"end\":68293,\"start\":68239},{\"end\":68687,\"start\":68638},{\"end\":69015,\"start\":68952},{\"end\":69303,\"start\":69257},{\"end\":69829,\"start\":69764},{\"end\":70272,\"start\":70205},{\"end\":70717,\"start\":70658},{\"end\":71110,\"start\":71013},{\"end\":72179,\"start\":72087},{\"end\":72573,\"start\":72527},{\"end\":72920,\"start\":72858},{\"end\":73288,\"start\":73212},{\"end\":73762,\"start\":73710},{\"end\":74096,\"start\":74023},{\"end\":74446,\"start\":74420},{\"end\":74816,\"start\":74737},{\"end\":75102,\"start\":75036},{\"end\":75485,\"start\":75418},{\"end\":75799,\"start\":75785},{\"end\":76488,\"start\":76454},{\"end\":76811,\"start\":76736},{\"end\":77227,\"start\":77177},{\"end\":77562,\"start\":77511},{\"end\":78038,\"start\":77976},{\"end\":78439,\"start\":78338},{\"end\":78766,\"start\":78715},{\"end\":79217,\"start\":79174},{\"end\":79540,\"start\":79481},{\"end\":79923,\"start\":79817},{\"end\":80345,\"start\":80282},{\"end\":80812,\"start\":80747}]", "bib_author": "[{\"end\":61403,\"start\":61392},{\"end\":61419,\"start\":61403},{\"end\":61436,\"start\":61419},{\"end\":61781,\"start\":61760},{\"end\":61789,\"start\":61781},{\"end\":61805,\"start\":61789},{\"end\":61822,\"start\":61805},{\"end\":61830,\"start\":61822},{\"end\":62097,\"start\":62079},{\"end\":62112,\"start\":62097},{\"end\":62127,\"start\":62112},{\"end\":62135,\"start\":62127},{\"end\":62963,\"start\":62955},{\"end\":63106,\"start\":63089},{\"end\":63121,\"start\":63106},{\"end\":63441,\"start\":63426},{\"end\":63456,\"start\":63441},{\"end\":63478,\"start\":63456},{\"end\":63496,\"start\":63478},{\"end\":63513,\"start\":63496},{\"end\":63526,\"start\":63513},{\"end\":63554,\"start\":63526},{\"end\":63925,\"start\":63906},{\"end\":63943,\"start\":63925},{\"end\":64176,\"start\":64160},{\"end\":64280,\"start\":64271},{\"end\":64296,\"start\":64280},{\"end\":64601,\"start\":64584},{\"end\":64620,\"start\":64601},{\"end\":64965,\"start\":64953},{\"end\":64981,\"start\":64965},{\"end\":64996,\"start\":64981},{\"end\":65455,\"start\":65440},{\"end\":65466,\"start\":65455},{\"end\":65478,\"start\":65466},{\"end\":65494,\"start\":65478},{\"end\":65507,\"start\":65494},{\"end\":65669,\"start\":65653},{\"end\":65776,\"start\":65768},{\"end\":65955,\"start\":65941},{\"end\":65971,\"start\":65955},{\"end\":65984,\"start\":65971},{\"end\":66001,\"start\":65984},{\"end\":66402,\"start\":66387},{\"end\":66420,\"start\":66402},{\"end\":66434,\"start\":66420},{\"end\":66739,\"start\":66723},{\"end\":66756,\"start\":66739},{\"end\":66775,\"start\":66756},{\"end\":67103,\"start\":67094},{\"end\":67110,\"start\":67103},{\"end\":67119,\"start\":67110},{\"end\":67129,\"start\":67119},{\"end\":67138,\"start\":67129},{\"end\":67433,\"start\":67421},{\"end\":67446,\"start\":67433},{\"end\":67455,\"start\":67446},{\"end\":67465,\"start\":67455},{\"end\":67478,\"start\":67465},{\"end\":67799,\"start\":67790},{\"end\":67816,\"start\":67799},{\"end\":67833,\"start\":67816},{\"end\":67848,\"start\":67833},{\"end\":67856,\"start\":67848},{\"end\":68312,\"start\":68295},{\"end\":68329,\"start\":68312},{\"end\":68343,\"start\":68329},{\"end\":68361,\"start\":68343},{\"end\":68702,\"start\":68689},{\"end\":68718,\"start\":68702},{\"end\":69029,\"start\":69017},{\"end\":69045,\"start\":69029},{\"end\":69316,\"start\":69305},{\"end\":69329,\"start\":69316},{\"end\":69675,\"start\":69651},{\"end\":69855,\"start\":69831},{\"end\":69873,\"start\":69855},{\"end\":69886,\"start\":69873},{\"end\":69908,\"start\":69886},{\"end\":70288,\"start\":70274},{\"end\":70302,\"start\":70288},{\"end\":70323,\"start\":70302},{\"end\":70339,\"start\":70323},{\"end\":70353,\"start\":70339},{\"end\":70370,\"start\":70353},{\"end\":70736,\"start\":70719},{\"end\":70761,\"start\":70736},{\"end\":71124,\"start\":71112},{\"end\":71140,\"start\":71124},{\"end\":71158,\"start\":71140},{\"end\":71174,\"start\":71158},{\"end\":71190,\"start\":71174},{\"end\":71568,\"start\":71556},{\"end\":71581,\"start\":71568},{\"end\":71597,\"start\":71581},{\"end\":71615,\"start\":71597},{\"end\":71633,\"start\":71615},{\"end\":71649,\"start\":71633},{\"end\":71895,\"start\":71877},{\"end\":72192,\"start\":72181},{\"end\":72208,\"start\":72192},{\"end\":72217,\"start\":72208},{\"end\":72589,\"start\":72575},{\"end\":72601,\"start\":72589},{\"end\":72617,\"start\":72601},{\"end\":72628,\"start\":72617},{\"end\":72939,\"start\":72922},{\"end\":72958,\"start\":72939},{\"end\":73301,\"start\":73290},{\"end\":73311,\"start\":73301},{\"end\":73326,\"start\":73311},{\"end\":73342,\"start\":73326},{\"end\":73349,\"start\":73342},{\"end\":73779,\"start\":73764},{\"end\":73792,\"start\":73779},{\"end\":74111,\"start\":74098},{\"end\":74122,\"start\":74111},{\"end\":74137,\"start\":74122},{\"end\":74145,\"start\":74137},{\"end\":74463,\"start\":74448},{\"end\":74479,\"start\":74463},{\"end\":74490,\"start\":74479},{\"end\":74663,\"start\":74648},{\"end\":74839,\"start\":74818},{\"end\":75125,\"start\":75104},{\"end\":75137,\"start\":75125},{\"end\":75154,\"start\":75137},{\"end\":75168,\"start\":75154},{\"end\":75183,\"start\":75168},{\"end\":75508,\"start\":75487},{\"end\":75522,\"start\":75508},{\"end\":75539,\"start\":75522},{\"end\":75823,\"start\":75801},{\"end\":75835,\"start\":75823},{\"end\":75847,\"start\":75835},{\"end\":75858,\"start\":75847},{\"end\":75873,\"start\":75858},{\"end\":76226,\"start\":76211},{\"end\":76499,\"start\":76490},{\"end\":76510,\"start\":76499},{\"end\":76525,\"start\":76510},{\"end\":76540,\"start\":76525},{\"end\":76834,\"start\":76813},{\"end\":76847,\"start\":76834},{\"end\":76859,\"start\":76847},{\"end\":76868,\"start\":76859},{\"end\":77243,\"start\":77229},{\"end\":77255,\"start\":77243},{\"end\":77444,\"start\":77436},{\"end\":77580,\"start\":77564},{\"end\":77595,\"start\":77580},{\"end\":77612,\"start\":77595},{\"end\":77635,\"start\":77612},{\"end\":77650,\"start\":77635},{\"end\":77667,\"start\":77650},{\"end\":77685,\"start\":77667},{\"end\":78060,\"start\":78040},{\"end\":78074,\"start\":78060},{\"end\":78461,\"start\":78441},{\"end\":78475,\"start\":78461},{\"end\":78785,\"start\":78768},{\"end\":78800,\"start\":78785},{\"end\":78836,\"start\":78800},{\"end\":78852,\"start\":78836},{\"end\":78861,\"start\":78852},{\"end\":79237,\"start\":79219},{\"end\":79557,\"start\":79542},{\"end\":79572,\"start\":79557},{\"end\":79936,\"start\":79925},{\"end\":79950,\"start\":79936},{\"end\":79965,\"start\":79950},{\"end\":79973,\"start\":79965},{\"end\":80366,\"start\":80347},{\"end\":80382,\"start\":80366},{\"end\":80401,\"start\":80382},{\"end\":80415,\"start\":80401},{\"end\":80438,\"start\":80415},{\"end\":80823,\"start\":80814},{\"end\":80835,\"start\":80823},{\"end\":80848,\"start\":80835},{\"end\":80862,\"start\":80848},{\"end\":80885,\"start\":80862},{\"end\":80898,\"start\":80885}]", "bib_venue": "[{\"end\":61484,\"start\":61436},{\"end\":61845,\"start\":61830},{\"end\":62179,\"start\":62135},{\"end\":62438,\"start\":62393},{\"end\":62616,\"start\":62588},{\"end\":62772,\"start\":62744},{\"end\":62953,\"start\":62940},{\"end\":63185,\"start\":63121},{\"end\":63610,\"start\":63554},{\"end\":64004,\"start\":63943},{\"end\":64359,\"start\":64296},{\"end\":64582,\"start\":64519},{\"end\":65037,\"start\":64996},{\"end\":65273,\"start\":65237},{\"end\":65438,\"start\":65388},{\"end\":65651,\"start\":65637},{\"end\":65766,\"start\":65754},{\"end\":66071,\"start\":66001},{\"end\":66484,\"start\":66434},{\"end\":66848,\"start\":66775},{\"end\":67187,\"start\":67138},{\"end\":67508,\"start\":67478},{\"end\":67887,\"start\":67856},{\"end\":68120,\"start\":68099},{\"end\":68424,\"start\":68361},{\"end\":68782,\"start\":68718},{\"end\":69091,\"start\":69045},{\"end\":69378,\"start\":69329},{\"end\":69649,\"start\":69614},{\"end\":69970,\"start\":69908},{\"end\":70419,\"start\":70370},{\"end\":70824,\"start\":70761},{\"end\":71253,\"start\":71190},{\"end\":71554,\"start\":71520},{\"end\":71875,\"start\":71837},{\"end\":72295,\"start\":72217},{\"end\":72679,\"start\":72628},{\"end\":73022,\"start\":72958},{\"end\":73448,\"start\":73349},{\"end\":73854,\"start\":73792},{\"end\":74208,\"start\":74145},{\"end\":74520,\"start\":74490},{\"end\":74876,\"start\":74839},{\"end\":75213,\"start\":75183},{\"end\":75588,\"start\":75539},{\"end\":75921,\"start\":75873},{\"end\":76209,\"start\":76085},{\"end\":76581,\"start\":76540},{\"end\":76942,\"start\":76868},{\"end\":77285,\"start\":77255},{\"end\":77434,\"start\":77419},{\"end\":77727,\"start\":77685},{\"end\":78145,\"start\":78074},{\"end\":78506,\"start\":78475},{\"end\":78911,\"start\":78861},{\"end\":79285,\"start\":79237},{\"end\":79635,\"start\":79572},{\"end\":80037,\"start\":79973},{\"end\":80500,\"start\":80438},{\"end\":80946,\"start\":80898},{\"end\":78931,\"start\":78913}]"}}}, "year": 2023, "month": 12, "day": 17}