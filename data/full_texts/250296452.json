{"id": 250296452, "updated": "2022-07-12 18:42:51.458", "metadata": {"title": "AlphaHoldem: High-Performance Artificial Intelligence for Heads-Up No-Limit Poker via End-to-End Reinforcement Learning", "authors": "[{\"first\":\"Enmin\",\"last\":\"Zhao\",\"middle\":[]},{\"first\":\"Renye\",\"last\":\"Yan\",\"middle\":[]},{\"first\":\"Jinqiu\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Kai\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Junliang\",\"last\":\"Xing\",\"middle\":[]}]", "venue": "Proceedings of the AAAI Conference on Artificial Intelligence", "journal": "Proceedings of the AAAI Conference on Artificial Intelligence", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Heads-up no-limit Texas hold\u2019em (HUNL) is the quintessen- tial game with imperfect information. Representative prior works like DeepStack and Libratus heavily rely on counter- factual regret minimization (CFR) and its variants to tackle HUNL. However, the prohibitive computation cost of CFR iteration makes it difficult for subsequent researchers to learn the CFR model in HUNL and apply it in other practical ap- plications. In this work, we present AlphaHoldem, a high-performance and lightweight HUNL AI obtained with an end- to-end self-play reinforcement learning framework. The proposed framework adopts a pseudo-siamese architecture to di- rectly learn from the input state information to the output actions by competing the learned model with its different his- torical versions. The main technical contributions include a novel state representation of card and betting information, a multi-task self-play training loss function, and a new model evaluation and selection metric to generate the final model. In a study involving 100,000 hands of poker, AlphaHoldem defeats Slumbot and DeepStack using only one PC with three days training. At the same time, AlphaHoldem only takes 2.9 milliseconds for each decision-making using only a single GPU, more than 1,000 times faster than DeepStack. We re-lease the history data among among AlphaHoldem, Slumbot, and top human professionals in the author\u2019s GitHub repository to facilitate further studies in this direction.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/aaai/ZhaoYLLX22", "doi": "10.1609/aaai.v36i4.20394"}}, "content": {"source": {"pdf_hash": "4bf7f37cceac2046b8162d495968ec93315110e9", "pdf_src": "Anansi", "pdf_uri": "[\"https://ojs.aaai.org/index.php/AAAI/article/download/20394/20153\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "https://ojs.aaai.org/index.php/AAAI/article/download/20394/20153", "status": "GOLD"}}, "grobid": {"id": "27295886cea842764a0ca5f5a715b2b3883d40ae", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/4bf7f37cceac2046b8162d495968ec93315110e9.txt", "contents": "\nAlphaHoldem: High-Performance Artificial Intelligence for Heads-Up No-Limit Poker via End-to-End Reinforcement Learning\n\n\nEnmin Zhao \nInstitute of Automation\nChinese Academy of Sciences\n\n\nSchool of Artificial Intelligence\nUniversity of Chinese Academy of Sciences\n\n\nRenye Yan \nInstitute of Automation\nChinese Academy of Sciences\n\n\nSchool of Artificial Intelligence\nUniversity of Chinese Academy of Sciences\n\n\nJinqiu Li \nInstitute of Automation\nChinese Academy of Sciences\n\n\nSchool of Artificial Intelligence\nUniversity of Chinese Academy of Sciences\n\n\nKai Li kai.li@ia.ac.cn \nInstitute of Automation\nChinese Academy of Sciences\n\n\nSchool of Artificial Intelligence\nUniversity of Chinese Academy of Sciences\n\n\nJunliang Xing jlxing@tsinghua.edu.cn \nInstitute of Automation\nChinese Academy of Sciences\n\n\nTsinghua University\n\n\nSchool of Artificial Intelligence\nUniversity of Chinese Academy of Sciences\n\n\nAlphaHoldem: High-Performance Artificial Intelligence for Heads-Up No-Limit Poker via End-to-End Reinforcement Learning\n\nHeads-up no-limit Texas hold'em (HUNL) is the quintessential game with imperfect information. Representative prior works like DeepStack and Libratus heavily rely on counterfactual regret minimization (CFR) and its variants to tackle HUNL. However, the prohibitive computation cost of CFR iteration makes it difficult for subsequent researchers to learn the CFR model in HUNL and apply it in other practical applications. In this work, we present AlphaHoldem, a highperformance and lightweight HUNL AI obtained with an endto-end self-play reinforcement learning framework. The proposed framework adopts a pseudo-siamese architecture to directly learn from the input state information to the output actions by competing the learned model with its different historical versions. The main technical contributions include a novel state representation of card and betting information, a multi-task self-play training loss function, and a new model evaluation and selection metric to generate the final model. In a study involving 100,000 hands of poker, AlphaHoldem defeats Slumbot and DeepStack using only one PC with three days training. At the same time, AlphaHoldem only takes 2.9 milliseconds for each decision-making using only a single GPU, more than 1,000 times faster than DeepStack. We release the history data among among AlphaHoldem, Slumbot, and top human professionals in the author's GitHub repository to facilitate further studies in this direction.\n\nIntroduction\n\nPoker is a typical imperfect information game (IIG) that has a long history as a challenging problem for developing Artificial Intelligence (AI) that can address hidden information (Waterman 1970). Among different poker games, Heads-up no-limit Texas hold'em (HUNL) is a two-player poker game in which two cards are initially dealt face-down to each player, and additional cards are dealt with face-up in three subsequent rounds. No-limit means no restriction on the bet size, although it may be restricted by the total amount wagered in each game. Because of its explicit problem setting with large decision space (\u223c10 161 information sets) and strategic complexity, HUNL has been an excellent benchmark and challenging problem for developing AI al-gorithms for studying the two-player zero-sum games with imperfect information (Bard et al. 2013;Jackson 2013).\n\nRecently, with the aid of increasing computing resources, computer programs have reached the performance that exceeds expert human players in many games, e.g., Go , MahJong (Li et al. 2020), DOTA (Berner et al. 2019), and StarCraft (Vinyals et al. 2019). These AI systems collect a tremendous amount of replay samples either from human experts or self-play of the system to train some complex learning models. The adoption of deep neural networks significantly improves the learning ability and performance of these systems. However, the model training process often lasts for dozens of days using thousands of CPU/GPUs, making these models extremely expensive to obtain. According to the reported computing resources used in AlphaGo , training an AlphaGo model costs about 35 million dollars.\n\nAs for the HUNL AI, new algorithms are also progressing very fast under the counterfactual regret minimization (CFR) framework (Zinkevich et al. 2007). Deep-Stack (Moravcik et al. 2017) and Libratus (Brown and Sandholm 2018) are independently developed and demonstrate expert-level performance. Both DeepStack and Libratus compute an abstraction of the game and introduce subgame solving with the CFR+  algorithm to learn HUNL AIs. Under the CFR framework, the primary computation cost comes from the CFR iteration process performed in both the model training and testing stages. To ensure high-quality prediction, this iteration process often needs to be carried out for more than 1,000 times in practice (Moravcik et al. 2017). This restriction makes the training of a high-performance CFR-based HUNL AI computationally infeasible for most research institutions and prevents the application of the CFR model into larger IIGs.\n\nThis work aims to develop a high-performance HUNL AI with affordable computation and storage costs for small research institutions and inspire further studies to develop more universal solutions for AI of Texas hold'em and other IIGs. To this end, we propose AlphaHoldem, a HUNL AI trained from an end-to-end reinforcement learning framework rather than the CFR framework that gives birth to most of the current HUNL AIs. We design a pseudo-Siamese architecture in this framework that directly learns from the input game information to produce the action through a single feedforward pass of a neural network. This new architecture eliminates the need for highly computationally intensive CFR iterative inference during training and testing stages. To accelerate the training process of AlphaHoldem, we develop a set of new techniques for efficient learning the AlphaHoldem framework, including game state representations, training loss functions, and model generation strategies.\n\nIn contrast to previous abstraction-based methods in HUNL AI design, AlphaHoldem does not perform any card information abstractions using human domain knowledge. Instead, it encodes the game information into tensors containing the current and historical poker information. This new multidimensional tensor representation permits efficient learning of the decision model using convolutional networks. As for the learning algorithms, we propose a new loss function in the actor-critic paradigm which significantly improves the model learning speed and stability. To perform better early-stopping and generate a strong HUNL model, we propose a new self-play procedure to simultaneously reduce the training cost and guarantee the model performance. This is achieved by keeping only one agent as the main training objective but maintains a pool of competing agents to play with the main agent to ensure the replay sampling diversity. The proposed new loss function also helps in selecting the competing agents in the pool.\n\nThe size of the whole AlphaHoldem model is less than 100MB. We finish the training of the AlphaHoldem AI in three days using only one single computing server of 8 GPUs and 64 CPU cores. During inference, AlphaHoldem takes only 2.9 \u00d7 10 \u22123 second for each decision in a NVIDIA TI-TAN V GPU. We evaluate the effectiveness of AlphaHoldem through extensive experimental analyses and comparisons. In a study involving 200,000 hands of poker, AlphaHoldem beats DeepStack and Slumbot with statistical significance by a margin of 16.91 mbb/h and 111.56 mbb/h, respectively. This work makes the following three main contributions:\n\n\u2022 We present a general and end-to-end self-play reinforcement learning framework to tackle the challenging HUNL problem: inference from state information directly to the final action using only a forward pass of the neural network in each decision point. \u2022 We develop a set of new techniques to speed up the learning process of the AlphaHoldem: a new game state representation without the abstraction of the card information or any human knowledge, a new policy loss function that limits the distribution of policies, and a new self-play procedure that quickly generates the best model. \u2022 We obtain a high-performance HUNL AI AlphaHoldem:\n\nit is trained in three days using a single machine and beats the current two best HUNL AI, Slumbot and Deep-Stack, with only 3ms decision time, more than 1,000 times faster than DeepStack.\n\nWe have released the history data among AlphaHoldem, Slumbot, and top human professionals for research purposes in the author's GitHub repository 1 to facilitate further studies in large-scale IIGs.  \n\n\nRelated Work\n\nTexas hold'em has long served as the benchmarks for developing IIG algorithms (Rubin and Watson 2011;Bard et al. 2013). Most early studies are heuristic-based methods (Beattie et al. 2007), and the AI performance based on them are relatively weak. In 2007, the seminal counterfactual regret minimization (CFR) (Zinkevich et al. 2007) algorithm is introduced to efficiently solving two-player zero-sum IIGs. CFR is a conceptually simple iterative algorithm that tries to minimize the regrets of both players so that the timeaveraged strategy approach to the Nash equilibrium. Thereafter, CFR-based methods dominate the design of Texas hold'em AI (Lanctot et al. 2009;Jackson 2013;Burch, Johanson, and Bowling 2014). After the Head-up Limit Texas hold'em is solved in 2015 , much research effort has focused on No-limit Texas hold'em and recently made milestone progress. DeepStack (Moravcik et al. 2017) adopts a neural network to approximate the tabular CFR and performs recursive reasoning. Libratus (Brown and Sandholm 2018) computes a blueprint for the overall strategy and fixes potential weaknesses identified by the opponents in the blueprint strategy. They are independently developed and both have defeated professional human players in HUNL. Pluribus (Brown and Sandholm 2019b) further applies similar procedure into multiplayer no-limit Texas hold'em and report super-human performance. Despite significant progress, all the milestone Texas hold'em AIs are built upon CFR, which requires costly computation to obtain the counterfactual values and large storage to store the model. In the inference stage, the CFR iteration process also consumes much computation. Besides, these methods only solve an abstracted game employ different kinds of Texas hold'em domain knowledge. This work aims to overcome these limitations of current HUNL AIs and produce a more general solution. Some recent works also make efforts towards this direction. NFSP (Heinrich and Silver 2016) and Poker-CNN (Yakovenko et al. 2016) have approached state-of-the-art performance in limit Texas hold'em. DeepCFR (Brown et al. 2019) further improves the performance by approximates CFR's behavior in the game using deep neural networks and Discounted CFR (Brown and Sandholm 2019a). Inspired by AlphaGo , ReBel ) combines search and reinforcement learning in HUNL AI. Despite superhuman performance reported, it still needs iterative learning in both the \n\n\nRoyal Flush\n\nStraight flush from Ten to Ace\n\n\nStraight Flush\n\nStraight of the same suit\n\n\nFour-of-a-Kind\n\nFour cards of the same value Full House\n\nCombination of three of a kind and a pair Flush\n\nFive cards of the same suit Straight\n\nSequence of 5 cards in increasing value\n\n\nThree-of-a-Kind\n\nThree cards with the same value Two Pair\n\nTwo times two cards with the same value One Pair\n\nSimple value of two card with the same value\n\n\nNo Pair\n\nSimple value of the cards with no same value training and inference stages, consuming expensive computations. In Table 1, we compare typical HUNL AIs from different aspects. AlphaHoldem is the first AI that obtains competitive performance in HUNL solely through reinforcement learning. It is also the AI with the lowest training and testing costs without encoding any domain knowledge.\nK A Q J 1 0 Q K J 1 0 9 A A A A 1 0 4 2 7 9 Q A A A K K K A Q J 1 0 A A K 7 Q A A A Q K A A K Q Q K A Q 4 J Strong Weak (b) HUNL cards strength\n\nPrerequisites\n\nTexas Hold'em Rules. Texas hold'em is a repeated game, each of which begins with two cards (hole cards) dealt face down to each player, and then five cards (community cards) dealt face up in three stages. The stages consist of a series of three cards (the flop), later an additional single card (the turn), and a final card (the river). Each player seeks the best five cards from any combination of the five community cards and two hole cards. Players have betting options to check, call, raise, or fold. Rounds of betting take place before the flop is dealt with and after each subsequent deal. The player who has the best hand and has not folded by the end of all betting rounds wins all the money bet for the hand, known as the pot. In HUNL, two players play the game with the bet size restricted only by the total amount wagered in each game. Figure 1 a set of actions A = {a k } K k=1 , and a reward function r : S \u00d7 A \u2192 R. After executing an action a t \u2208 A at each state s t \u2208 S, the agent will enter a new state s t+1 according to the transition probability model and get a reward r(s t+1 |s t , a t ). The objective of the agent is to maximize the cumulative rewards R = \u221e t=0 \u03b3 t r(s t+1 |s t , a t ), where \u03b3 is the discount factor to favor more recent rewards.\n\n\nAlphaHoldem Architecture\n\nAlphaHoldem aims to remove the expensive computation of CFR iteration in both the training and testing stages of a HUNL AI. It thus pursues an end-to-end learning framework to perform efficient and effective decision-making in IIGs.\n\nHere end-to-end means that the framework directly accepts the game board information and outputs the actions without encoding handcrafted features as inputs or performing iterative reasoning in the decision process. AlphaHoldem adopts the RL framework to achieve this goal, and the only force to drive the model to learn is the game reward.\n\nIn HUNL, the game board information includes the current and historical card information and the player action information. The agent chooses from a set of betting actions to play the game and try to win more rewards. To capture the complex relationship among the game board information, the desired betting actions, and the game rewards, Alpha-Holdem designs a pseudo-Siamese architecture equipped with the RL schema to learn the underlying relationships from end to end. We illustrate the end-to-end learning architecture of AlphaHoldem in Figure 2.\n\nAs shown in Figure 2, the input of the architecture is the game state representations of action and card information, which are respectively sent to the top and bottom streams of the Siamese architecture. Since the action and card representations provide different kinds of information to the learning architecture, we first isolate the parameter-sharing of the Siamese architecture to enable the two ConvNets to learn adaptive feature representations, which are then fused through fully connected layers to produce the desired actions. This design is the reason why we call it pseudo-Siamese architecture. To train this deep architecture, we present a novel Trinal-Clip loss function to update the model parameters using off-policy RL algorithms. We obtain the final model through a new self-play procedure that plays the current model with a pool of its K best historical versions to sample diverse training data from the huge game state space. \n\n\nOriginal card information Action information encoding\n\nExample: Player 1 in the small blind plays an action `bet pot' after getting a hand `AsAc'. bet1/2 2pot 3/2 1 3/4 Figure 3: A state representation example when Player 1 in the small blind plays 'bet pot' after getting an hand 'AsAc'.\n\n\nLearning Speedup Techniques\n\nThe core to the success of AlphaHoldem depends on a set of training speedup techniques that makes the learning of a superhuman HUNL AI with the current lowest computation and storage costs possible. In the following, we highlight and expatiate three new crucial techniques in speedup training the AlphaHoldem model. We believe these new techniques and underlying principles are helpful to develop general learning algorithms for more IIG AIs.\n\n\nEffective Game State Representation\n\nThe existence of private information and flexibility of bet size cause the HUNL AI learning extremely challenging. Previous CFR-based methods often abstract the cards and bet information into different groups and use their concatenated coding vectors as game state representation to make the iterative reasoning process feasible. The abstracted code vector loses many important game information and may not capture the complex relationship between the game information and optimal decisions. To obtain an effective and suitable feature representation for end-to-end learning from the game state directly to the desired decision, we design a new multidimensional feature representation to encode both the current and historical card and bet information.\n\nIn HUNL, the card information and action information exhibit different characteristics. We thus represent them as two separated three-dimension tensors and let the following network learn to fuse them ( Figure 2). We design the card tensor in six channels to represent the agent's two hole cards, three flop cards, one turn card, one river card, all public cards, and all hole and public cards. Each channel is a 4 \u00d7 13 sparse binary matrix, with 1 in each position denoting the corresponding card. For the actor tensor, since there are usually at most six sequential actions in each of the four rounds, we design it in 24 channels. Each channel is a 4 \u00d7 n b sparse binary matrix, where n b is the number of betting options, and the four dimensions correspond to the first player's action, the second player's action, the sum of two players' action, and the legal actions. To understand this representation, Figure 3 illustrates one example that a player in the small blind plays an action 'bet pot' after getting a hand 'AsAc'.\n\nThis representation has several advantages: 1) there is no abstraction of the card information thus reserves all the game information; 2) the action representation is general and can denote different number of betting options (though n b = 9 produce satisfactory results in the experiment); 3) all the historical information is encoded to aid reasoning with hidden information; and 4) the multidimensional tensor representation is very suitable for modern deep neural architectures like ResNet (He et al. 2016) to learn effective feature hierarchies, as verified in the AlphaGo AI training.\n\n\nEffective Learning with Trinal-Clip PPO\n\nWith the multidimensional feature representation, one key factor to train the deep architecture is the learning paradigm with suitable loss functions. We adopt the actor-critic paradigm with off-policy training (Konda and Tsitsiklis 2000), which performs updating asynchronously on replayed experiences. The actor-critic paradigm trains a value function V \u03b8 (s t ) and a policy \u03c0 \u03b8 (a t |s t ), and updates them iteratively by sampling from the replay buffer.\n\nWe employ the popular Proximal Policy Optimization (PPO) (Schulman et al. 2017) learning algorithm to update the policies \u03c0 \u03b8 in the actor-critic framework. PPO defines the ratio function r t (\u03b8) = \u03c0 \u03b8 (at|st) \u03c0 \u03b8 \u2032 (at|st) as the ratio between the current policy \u03c0 \u03b8 and the old policy \u03c0 \u03b8 \u2032 , the advantage function\u00c2 t which describes how much better between two consecutive states s t+1 , s t , over randomly selecting an action according to \u03c0 \u03b8 , and the policy loss function L p as:\nL p (\u03b8) = Et min rt(\u03b8)\u00c2t, clip (rt(\u03b8), 1 \u2212 \u03f5, 1 + \u03f5)\u00c2t ,(1)\nwhere clip(r t (\u03b8), 1 \u2212 \u03f5, 1 + \u03f5) ensures r t lie in the interval (1 \u2212 \u03f5, 1 + \u03f5), and \u03f5 is a clip ratio hyper-parameter with typical value 0.2. The value loss L v is defined as:\nL v (\u03b8) = E t (R \u03b3 t \u2212 V \u03b8 (s t )) 2 ,(2)\nin which R \u03b3 t represents the traditional \u03b3-return. In the HUNL training process, however, the above PPO loss function is difficult to converge. We find two main reasons for this problem: 1) when \u03c0 \u03b8 (a t |s t ) \u226b \u03c0 \u03b8 old (a t |s t ) and the advantage function\u00c2 t < 0, the policy loss L p (\u03b8) will introduce a large variance; 2) due to the uncertainty of the opponent's policy distribution in HUNL (e.g., player performs bluffing), the value loss L v (\u03b8) is often too large. To speed up and stabilize the training process of AlphaHoldem, we design a Trinal-Clip PPO loss function. It introduces one more clipping hyper-parameter \u03b4 1 for the policy loss when A t < 0, and two more clipping hyper-parameters \u03b4 2 and \u03b4 3 for the value loss. The policy loss function L tcp for Trinal-Clip PPO is defined as:\nL tcp (\u03b8) = E t clip (r t (\u03b8), clip (r t (\u03b8), 1 \u2212 \u03f5, 1 + \u03f5) , \u03b4 1 )\u00c2 t ,\n(3) where \u03b4 1 > 1 + \u03f5 indicates the upper bound, and \u03f5 is the original clip in PPO. The clipped value loss function L tcv for Trinal-Clip PPO is defined as:\nL tcv (\u03b8) = E t (clip (R \u03b3 t , \u2212\u03b4 2 , \u03b4 3 ) \u2212 V \u03b8 (s t )) 2 .(4)\nIn training the HUNL AI, the hyper-parameters \u03b4 2 and \u03b4 3 represent the total number of chips the player has placed and the opponent has placed, respectively. Thus, these two hyper-parameters do not require manual tuning but are dynamically calculated according to the chips played in the replay. This constriction significantly reduces the variance of the value function, while also eliminates the influence of the polices' irrationality. Some previous works also report that clipping on PPO's policy loss achieves better results in MOBA games (Ye et al. 2020a,b) and MuJoCo (Andrychowicz et al. 2020). Our proposed Trinal-Clip PPO loss further verifies this point in training a HUNL AI. Moreover, this work finds that clipping on the value function further improves the training efficiency and stability significantly, especially for imperfectinformation games like HUNL which contains rewarding signals with high variance. The Trinal-Clip PPO loss function improves the learning effectiveness of the actor-critic framework, and we believe it is applicable for a wide range of RL applications with imperfect information.\n\n\nEfficient Model Selection and Generation\n\nWith the proposed Trinal-Clip PPO loss function, the most direct way is using the self-play algorithm (Samuel 1959) to train the HUNL agent. However, due to the private information in HUNL, simple self-play learning designed for perfect information game (Heinrich, Lanctot, and Silver 2015;Silver et al. 2016Silver et al. , 2018 often causes the agent trapped in a local minimum and defeated by agents with counter-strategies. AlphaStar (Vinyals et al. 2019) designs a population-based training (PBT) procedure to maintain multiple self-play agents and obtains promising results in the real-time strategy game StarCraft II. The PBT procedure needs a tremendous computational resource to ensure good performance.\n\nTo obtain a high-performance HUNL AI with both low computation cost and strong decision-making ability, we propose a new type of self-play algorithm which trains only one agent but learns strong and diverse policies. The proposed algorithm maintains a pool of competing agents from the historical versions of the main agent. Then, by com-peting among different agents, the algorithm selects the K best survivors from their ELO (Vinyals et al. 2019) scores and generates experience replays simultaneously. The main agent learns from the replays and thus can compete with different opponents, maintaining a strong decision-making ability of high-flexible policies. Since the proposed algorithm performs self-play among the main agent and its K best historical versions, we refer to it as K-Best Self-Play.\n\nIn Figure 4, we compare the proposed K-Best Self-Play algorithm against five existing self-play algorithms: 1) the Naive Self-Play (Samuel 1959;Silver et al. 2018), which plays with the agent itself; 2) the Best-Win Self-Play , which plays with the best agent in history; 3) the Delta-Uniform Self-Play (Bansal et al. 2018), which plays with the agent in the last \u03b4 timestamps; 4) the PBT Self-Play (Vinyals et al. 2019), which trains multiple agents and play with each other; and 5) NFSP (Heinrich and Silver 2016), which plays with the best responses. K-Best Self-Play inherits PBT's merit of diverse policy styles while maintains computational efficiency of single-thread agent training as in Naive, Best-Win, Delta-Uniform self-plays. It also approximates NFSP's best-response calculation strategy by exploring the policies from the K best agents. As reported in the NFSP paper (Heinrich and Silver 2016), calculating the best response to a HUNL AI from the whole policy space is currently computational prohibitive.\n\n\nExperimental Evaluations\n\nWe train the AlphaHoldem model on one computing server with 8 NVIDIA TITAN V GPUs and one AMD 2.00 GHz CPU with 64 cores. For each of the experiments conducted below, including ablations, performance, and comparisons, we use the same quantity of resources to train the model: one ordinary machine with 8 GPUs and 64 CPU cores, unless otherwise stated. AlphaHoldem has a total of 8.6 million parameters, including 1.8 million parameters in the ConvNets and 6.8 million parameters in the fully connected layers.\n\nAs for the experimental settings, the mini-batch size per GPU is set to 2,048; thus, the total batch size is 16,384. We use Adam (Kingma and Ba 2015) with initial learning rate 0.0003. For the Trinal-Clip PPO loss, the hyper-parameters \u03b4 1 is set to 3, and \u03b4 2 and \u03b4 3 is dynamically calculated according to the chips played by the players, which range from 0 to 2,0000. The discount factor is set to 0.999. For policy updates, we use GAE (Schulman et al. 2016) with \u03bb = 0.95 as the advantage estimator. The best performing AlphaHoldem model is trained for a total of 50,000 iterations. During one iteration, there are eight MPI threads, each of which contains 128 environments and 128 steps. Therefore, AlphaHoldem uses a total of 6.5 billion training samples (about 2.7 billion hands). The model winning performance is measured in milli-big-blinds per hand (mbb/h), a standard metric in the poker AI community, representing the average winnings measured in thousandths of the big blinds.\n\n\nAblation Studies\n\nTo analyze the effectiveness of each component in Alpha-Holdem, we have conducted extensive ablation studies, as ; 3) Self-Play methods: Native Self-Play, Best-Win Self-Play, Delta-Uniform Self-Play, and PBT Self-Play.\n\nshown in Table 2. The results of each row are obtained by replacing one component of AlphaHoldem, and the rest remains unchanged. All models use the same number of training samples (i.e., 0.65 billion), and we use ELO scores to compare their performance. For state representation comparison, we consider three alternative methods: 1) Vectorized state representation like DeepCFR (Brown et al. 2019) (Vector). It uses vectors to represent the card information (two 52-dimensional vectors) and the action information (each betting position represented by a binary value specifying whether a bet has occurred and a float value specifying the bet size); 2) PokerCNN-based state representation (Yakovenko et al. 2016) (PokerCNN) uses 3D tensors to represent card and action information together and use a single ConvNet to learn features; 3) State representation without history information (W/O History Information) is similar to AlphaHoldem except that it does not contain history action information.\n\nAs shown in Table 2, state representation has a significant impact on the final performance. PokerCNN performs better than the vectorized state representation Vector, demonstrating that it is more effective to represent state information using structured tensors. AlphaHoldem outperforms Poker-CNN since it uses a pseudo-Siamese architecture to handle card and action information separately. AlphaHoldem is also better than W/O History Information since historical action information is critical to decision-making in HUNL. Alpha-Holdem obtains the best performance thanks to its effective multidimensional state representation, which encodes historical information and is suitable for ConvNets to learn effective feature hierarchies.\n\nFor the loss function, we evaluate the Trinal-Clip PPO loss in AlphaHoldem against two kinds of PPO losses: 1) the Original PPO loss (Schulman et al. 2017 dem) obtains the best performance. The results in Table 2 show that adding policy-clip and value-clip upon the PPO loss help improve the performance.\n\nTo further demonstrate the benefits of the Trinal-Clip PPO loss, we compare the learning curves of these three models in Figure 5. It demonstrates that the Triple-Clip PPO loss's learning curve is more stable than those of the Original PPO and the Dual-clip PPO. This performance improvement is mainly because AlphaHoldem's policy-clip and value-clip loss effectively limit its output to a reasonable range, thus ensuring the stability of the policy update. In addition, we find the model with a minor overall loss generally performs better after adding the value-clip loss, which is also very convenient for model selection during training. This phenomenon also demonstrates that the Trinal-Clip loss helps the model to converge to a better policy.\n\nFor self-play methods, we compare AlphaHoldem's K-Best Self-Play with Naive Self-Play (Samuel 1959;Silver et al. 2018), Best-Win Self-Play , Delta-Uniform Self-Play (Bansal et al. 2018), and PBT Self-Play (Vinyals et al. 2019). Interestingly, compared with the more sophisticated Delta-Uniform Self-Play and PBT Self-Play, Naive Self-Play and Best-Win Self-Play achieve better performance, possible because more complex self-play strategies are more data-hungry. However, the performance of Naive and Best-Win Self-Play are still behind K-Best Self-Play, since simplistic self-play methods can not overcome the notorious cyclical strategy problem in IIGs. Our K-Best Self-Play method obtains the best performance under the same amount of training data, striking a good balance between efficiency and effectiveness.\n\n\nComparison with State-of-the-arts and Humans\n\nAlthough many milestone events (e.g., DeepStack, Libratus, ReBeL, etc.) have been achieved in HUNL AI research in re- Hands 100,000 100,000 10,000 Table 3: Head-to-head results of AlphaHoldem against Slumbot, OpenStack, and human professionals, measured in mbb/h. We list the results against human professionals in aggregate. The \u00b1 shows 95% confidence interval.\n\ncent years, almost all of these AIs are not publicly available, making the comparison between different AIs extremely difficult. To the best of our knowledge, Slumbot (Jackson 2013), the champion of the 2018 annual computer poker competition, is the only publicly available HUNL AI that provides comparisons through an online website 2 . Slumbot is a strong abstraction-based static agent whose entire policy is precomputed and used as a lookup table. Overall, Slumbot first uses some abstraction algorithms to create a smaller abstract HUNL game. Then it approximates the Nash equilibrium in the abstract game using a CFR algorithm and finally executes the resulting strategy in the original game. Static AIs like Slumbot suffer from the off-tree action problem, i.e., an action taken by an opponent that is not in the abstraction. A more principled approach is to solve subgames that immediately follow that off-tree action online. DeepStack and Libratus are representative online AIs based on this idea. We reimplement DeepStack following the original paper's key ideas and obtain a strong AI named Open-Stack 3 . Specifically, we spend three weeks using 120 GPUs to generate millions of samples to train the value networks. It is worth noting that the creator of Libratus, recently coauthored a paper (Zarick et al. 2020), in which they also reimplemented DeepStack. OpenStack has achieved similar results to theirs, i.e., playing with Slumbot for 100,000 games, OpenStack's gain is 103.08 mbb/h, which validates the correctness of our reimplementation.\n\nWe compare our AlphaHoldem with the above two strong HUNL AIs, i.e., Slumbot and OpenStack for 100,000 hands, and Table 3 shows the head-to-head comparison results. We can see from Table 3 that AlphaHoldem outperforms Slumbot by a large margin. Compared with Slumbot, Al-phaHoldem does not require domain knowledge for abstraction and achieves better performance while significantly reducing computational and storage resources. AlphaHoldem also beats OpenStack by 16.91 mbb/h. Unlike OpenStack, AlphaHoldem does not need iterative learning in both the training and inference stages. Given input state representation, it performs only one feedforward pass of the neural network to output the action directly.\n\nTo further verify AlphaHoldem's performance, we evaluate it against four HUNL human professionals. We invite these professional players who have participated in many continental level invitational tournaments, two of whom achieved in the top 10 of continental level tournaments. We ask each player to play against AlphaHoldem for about 2,500 hands. AlphaHoldem beats these professionals by 10.27 mbb/h in average, which supports its highperformance in beating Slumbot and DeepStack.\n\n\nVisualization of AlphaHoldem's Learned Policy\n\nTo analyze AlphaHoldem's learned policy, we compare the action frequencies where the agent is the first player to act and has no prior state influencing it (Zarick et al. 2020) with those from human professional 4 , DeepStack, and Open-Stack. Figure 6 shows the policies on how to play the first two cards from the professional human and the three agents. AlphaHoldm's policy is very similar to those of the human professional and the two well-trained agents. These results validate that AlphaHoldem learns a reasonable policy.\n\n\nConclusive Remarks and Future Works\n\nWe have presented AlphaHoldem, an end-to-end reinforcement learning framework to obtain superhuman HUNL AI with the current lowest computation and storage costs and without encoding any human domain knowledge. We achieve this goal through a set of new technical contributions to speed up the training process and simultaneously guarantees the adaptability of the HUNL agent. The proposed learning framework and the speedup training techniques are extendable to the multi-player Texas hold'em and other IIGs like MahJong and Bridge. In future, we plan to expand the proposed framework on more IIG games to promote the development of more general IIG learning frameworks.\n\nFigure 1 :\n1An brief illustration of the HUNL game rules.\n\nKFigure 2 :\n2(a) illustrates one HUNL game, and shows the cards strength. Reinforcement Learning (RL). In self-play, given a fixed opponent, the original two-player HUNL game reduces to a single-player RL problem since the opponent can be regarded as part of the environment. We consider the standard RL formalism, i.e., Markov Decision Process (MDP). An MDP consists of a set of states S = {s 0 , s 1 , s 2 , . . . , s t , . . . }, -best Self-Play procedure for model evaluation and generation Trinal-Cilp PPO End-to-end learning architecture of AlphaHoldem.\n\nFigure 4 :\n4Comparison of different self-play algorithms. The proposed K-Best self-play algorithm can learn both strong and diverse decision styles with low computation cost.\n\nFigure 5 :\n5) (Original PPO); 2) the Dual-clip PPO loss (Ye et al. 2020b) (Dualclip PPO). Compared with the Original PPO, Dual-clip PPO has a slight performance boost. Triple-Clip PPO (AlphaHol-Loss Curves for Original PPO, Dual-clip PPO and Trinal-Clip among the whole training process. The model with smaller overall loss (shown as blue circles) generally performs better.\n\nFigure 6 :\n6Probabilities for not folding as the first action for each possible hand. The bottom-left half shows the policy when the suits of two private cards do not match, and the top-right half shows the policy when the suits of two private cards match. Left to right represent the policies of Professional Human, DeepStack, and AlphaHoldem, respectively.\n\nTable 1 :\n1Cost comparisons of HUNL AIs. AlphaHoldem achieves good results with less computational resources.\n\n\nSlumbot OpenStack Professionals AlphaHoldem 111.56 \u00b1 16.06 16.91 \u00b1 22.34 10.27 \u00b1 65.13\nhttps://www.slumbot.com/\nhttps://www.pokersnowie.com/\nAcknowledgments\nWhat matters for on-policy deep actor-critic methods? a large-scale study. M Andrychowicz, A Raichuk, P Sta\u0144czyk, M Orsini, S Girgin, R Marinier, L Hussenot, M Geist, O Pietquin, M Michalski, International Conference on Learning Representations. Andrychowicz, M.; Raichuk, A.; Sta\u0144czyk, P.; Orsini, M.; Girgin, S.; Marinier, R.; Hussenot, L.; Geist, M.; Pietquin, O.; Michalski, M.; et al. 2020. What matters for on-policy deep actor-critic methods? a large-scale study. In Interna- tional Conference on Learning Representations, 1-10.\n\nEmergent complexity via multi agent competition. T Bansal, J Pachocki, S Sidor, I Sutskever, I Mordatch, International Conference on Learning Representations. Bansal, T.; Pachocki, J.; Sidor, S.; Sutskever, I.; and Mor- datch, I. 2018. Emergent complexity via multi agent compe- tition. In International Conference on Learning Representa- tions, 1-12.\n\nThe annual computer poker competition. N Bard, J Hawkin, J Rubin, M Zinkevich, AI Magazine34Bard, N.; Hawkin, J.; Rubin, J.; and Zinkevich, M. 2013. The annual computer poker competition. AI Magazine, 34(2): 112-114.\n\nPattern classification in no-limit poker: A head-start evolutionary approach. B Beattie, G Nicolai, D Gerhard, R J Hilderman, Conference of the Canadian Society for Computational Studies of Intelligence. Beattie, B.; Nicolai, G.; Gerhard, D.; and Hilderman, R. J. 2007. Pattern classification in no-limit poker: A head-start evolutionary approach. In Conference of the Canadian So- ciety for Computational Studies of Intelligence, 204-215.\n\nC Berner, G Brockman, B Chan, V Cheung, P D\u0119biak, C Dennison, D Farhi, Q Fischer, S Hashme, C Hesse, arXiv:1912.06680Dota 2 with large scale deep reinforcement learning. arXiv preprintBerner, C.; Brockman, G.; Chan, B.; Cheung, V.; D\u0119biak, P.; Dennison, C.; Farhi, D.; Fischer, Q.; Hashme, S.; Hesse, C.; et al. 2019. Dota 2 with large scale deep reinforcement learning. arXiv preprint arXiv:1912.06680.\n\nHeads-up limit hold'em poker is solved. M Bowling, N Burch, M Johanson, O Tammelin, Science. 3476218Bowling, M.; Burch, N.; Johanson, M.; and Tammelin, O. 2015. Heads-up limit hold'em poker is solved. Science, 347(6218): 145-149.\n\nCombining deep reinforcement learning and search for imperfect-information games. N Brown, A Bakhtin, A Lerer, Q Gong, Advances in Neural Information Processing Systems. Brown, N.; Bakhtin, A.; Lerer, A.; and Gong, Q. 2020. Combining deep reinforcement learning and search for imperfect-information games. In Advances in Neural Infor- mation Processing Systems, 17057-17069.\n\nDeep counterfactual regret minimization. N Brown, A Lerer, S Gross, T Sandholm, International Conference on Machine Learning. Brown, N.; Lerer, A.; Gross, S.; and Sandholm, T. 2019. Deep counterfactual regret minimization. In International Conference on Machine Learning, 793-802.\n\nSuperhuman AI for heads-up no-limit poker: Libratus beats top professionals. N Brown, T Sandholm, Science. 3596374Brown, N.; and Sandholm, T. 2018. Superhuman AI for heads-up no-limit poker: Libratus beats top professionals. Science, 359(6374): 418-424.\n\nSolving imperfectinformation games via discounted regret minimization. N Brown, T Sandholm, AAAI Conference on Artificial Intelligence. Brown, N.; and Sandholm, T. 2019a. Solving imperfect- information games via discounted regret minimization. In AAAI Conference on Artificial Intelligence, 1829-1836.\n\nSuperhuman AI for multiplayer poker. N Brown, T Sandholm, Science. 3656456Brown, N.; and Sandholm, T. 2019b. Superhuman AI for multiplayer poker. Science, 365(6456): 885-890.\n\nSolving imperfect information games using decomposition. N Burch, M Johanson, M Bowling, AAAI Conference on Artificial Intelligence. Burch, N.; Johanson, M.; and Bowling, M. 2014. Solving imperfect information games using decomposition. In AAAI Conference on Artificial Intelligence, 602-608.\n\nDeep residual learning for image recognition. K He, X Zhang, S Ren, J Sun, IEEE Conference on Computer Vision and Pattern Recognition. He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016. Deep resid- ual learning for image recognition. In IEEE Conference on Computer Vision and Pattern Recognition, 770-778.\n\nFictitious self-play in extensive-form games. J Heinrich, M Lanctot, D Silver, International Conference on Machine Learning. Heinrich, J.; Lanctot, M.; and Silver, D. 2015. Fictitious self-play in extensive-form games. In International Confer- ence on Machine Learning, 805-813.\n\nDeep reinforcement learning from self-play in imperfect-information games. J Heinrich, D Silver, arXiv:1603.01121arXiv preprintHeinrich, J.; and Silver, D. 2016. Deep reinforcement learn- ing from self-play in imperfect-information games. arXiv preprint arXiv:1603.01121.\n\nSlumbot NL: Solving large games with counterfactual regret minimization using sampling and distributed processing. E G Jackson, AAAI Conference on Artificial Intelligence Workshops. Jackson, E. G. 2013. Slumbot NL: Solving large games with counterfactual regret minimization using sampling and dis- tributed processing. In AAAI Conference on Artificial Intel- ligence Workshops, 35-38.\n\nAdam: A method for stochastic optimization. D P Kingma, J Ba, International Conference on Learning Representations. Kingma, D. P.; and Ba, J. 2015. Adam: A method for stochastic optimization. In International Conference on Learning Representations, 1-15.\n\nActor-Critic Algorithms. V Konda, J Tsitsiklis, Advances in Neural Information Processing Systems. Konda, V.; and Tsitsiklis, J. 2000. Actor-Critic Algorithms. In Advances in Neural Information Processing Systems, 1008-1014.\n\n. M Lanctot, K Waugh, M Zinkevich, M Bowling, Lanctot, M.; Waugh, K.; Zinkevich, M.; and Bowling, M.\n\nMonte Carlo sampling for regret minimization in extensive games. Advances in Neural Information Processing Systems. Monte Carlo sampling for regret minimization in ex- tensive games. In Advances in Neural Information Process- ing Systems, 1078-1086.\n\nJ Li, S Koyamada, Q Ye, G Liu, C Wang, R Yang, L Zhao, T Qin, T.-Y Liu, H.-W Hon, arXiv:2003.13590SuphX: Mastering Mahjong with deep reinforcement learning. arXiv preprintLi, J.; Koyamada, S.; Ye, Q.; Liu, G.; Wang, C.; Yang, R.; Zhao, L.; Qin, T.; Liu, T.-Y.; and Hon, H.-W. 2020. SuphX: Mastering Mahjong with deep reinforcement learning. arXiv preprint arXiv:2003.13590.\n\nDeepStack: Expert-level artificial intelligence in heads-up no-limit poker. M Moravcik, M Schmid, N Burch, V Lisy, D Morrill, N Bard, T Davis, K Waugh, M Johanson, M Bowling, Science. 3566337Moravcik, M.; Schmid, M.; Burch, N.; Lisy, V.; Morrill, D.; Bard, N.; Davis, T.; Waugh, K.; Johanson, M.; and Bowling, M. 2017. DeepStack: Expert-level artificial intelligence in heads-up no-limit poker. Science, 356(6337): 508-513.\n\nComputer poker: A review. J Rubin, I Watson, Artificial Intelligence. 1755Rubin, J.; and Watson, I. 2011. Computer poker: A review. Artificial Intelligence, 175(5): 958-987.\n\nSome studies in machine learning using the game of checkers. A L Samuel, IBM Journal of Research and Development. 33Samuel, A. L. 1959. Some studies in machine learning using the game of checkers. IBM Journal of Research and Devel- opment, 3(3): 210-229.\n\nHigh-dimensional continuous control using generalized advantage estimation. J Schulman, P Moritz, S Levine, M Jordan, P Abbeel, Schulman, J.; Moritz, P.; Levine, S.; Jordan, M.; and Abbeel, P. 2016. High-dimensional continuous control using gener- alized advantage estimation. 1-14.\n\n. J Schulman, F Wolski, P Dhariwal, A Radford, O Klimov, arXiv:1707.06347Proximal Policy Optimization Algorithms. arXiv preprintSchulman, J.; Wolski, F.; Dhariwal, P.; Radford, A.; and Klimov, O. 2017. Proximal Policy Optimization Algorithms. arXiv preprint arXiv:1707.06347.\n\nMastering the game of Go with deep neural networks and tree search. D Silver, A Huang, C J Maddison, A Guez, L Sifre, G Van Den Driessche, J Schrittwieser, I Antonoglou, V Panneershelvam, M Lanctot, Nature. 5297587Silver, D.; Huang, A.; Maddison, C. J.; Guez, A.; Sifre, L.; Van Den Driessche, G.; Schrittwieser, J.; Antonoglou, I.; Panneershelvam, V.; Lanctot, M.; et al. 2016. Mastering the game of Go with deep neural networks and tree search. Na- ture, 529(7587): 484-489.\n\nA general reinforcement learning algorithm that masters chess, shogi, and Go through self-play. D Silver, T Hubert, J Schrittwieser, I Antonoglou, M Lai, A Guez, M Lanctot, L Sifre, D Kumaran, T Graepel, Science. 3626419Silver, D.; Hubert, T.; Schrittwieser, J.; Antonoglou, I.; Lai, M.; Guez, A.; Lanctot, M.; Sifre, L.; Kumaran, D.; Graepel, T.; et al. 2018. A general reinforcement learning algorithm that masters chess, shogi, and Go through self-play. Science, 362(6419): 1140-1144.\n\nSolving heads-up limit Texas Hold'em. O Tammelin, N Burch, M Johanson, M Bowling, International Joint Conferences on Artificial Intelligence. Tammelin, O.; Burch, N.; Johanson, M.; and Bowling, M. 2015. Solving heads-up limit Texas Hold'em. In Interna- tional Joint Conferences on Artificial Intelligence, 645-652.\n\nGrandmaster level in Star-Craft II using multi-agent reinforcement learning. O Vinyals, I Babuschkin, W M Czarnecki, M Mathieu, A Dudzik, J Chung, D H Choi, R Powell, T Ewalds, P Georgiev, Nature. 5757782Vinyals, O.; Babuschkin, I.; Czarnecki, W. M.; Mathieu, M.; Dudzik, A.; Chung, J.; Choi, D. H.; Powell, R.; Ewalds, T.; Georgiev, P.; et al. 2019. Grandmaster level in Star- Craft II using multi-agent reinforcement learning. Nature, 575(7782): 350-354.\n\nGeneralization learning techniques for automating the learning of heuristics. D A Waterman, Artificial Intelligence. 11Waterman, D. A. 1970. Generalization learning techniques for automating the learning of heuristics. Artificial Intelli- gence, 1(1): 121-170.\n\nPoker-CNN: A pattern learning strategy for making draws and bets in poker games using convolutional networks. N Yakovenko, L Cao, C Raffel, J Fan, AAAI Conference on Artificial Intelligence. Yakovenko, N.; Cao, L.; Raffel, C.; and Fan, J. 2016. Poker- CNN: A pattern learning strategy for making draws and bets in poker games using convolutional networks. In AAAI Con- ference on Artificial Intelligence, 360-367.\n\nTowards playing full moba games with deep reinforcement learning. D Ye, G Chen, W Zhang, S Chen, B Yuan, B Liu, J Chen, Z Liu, F Qiu, H Yu, Advances in Neural Information Processing Systems. Ye, D.; Chen, G.; Zhang, W.; Chen, S.; Yuan, B.; Liu, B.; Chen, J.; Liu, Z.; Qiu, F.; Yu, H.; et al. 2020a. Towards play- ing full moba games with deep reinforcement learning. In Advances in Neural Information Processing Systems, 621- 632.\n\nMastering complex control in moba games with deep reinforcement learning. D Ye, Z Liu, M Sun, B Shi, P Zhao, H Wu, H Yu, S Yang, X Wu, Q Guo, AAAI Conference on Artificial Intelligence. Ye, D.; Liu, Z.; Sun, M.; Shi, B.; Zhao, P.; Wu, H.; Yu, H.; Yang, S.; Wu, X.; Guo, Q.; et al. 2020b. Mastering complex control in moba games with deep reinforcement learning. In AAAI Conference on Artificial Intelligence, 6672-6679.\n\nUnlocking the Potential of Deep Counterfactual Value Networks. R Zarick, B Pellegrino, N Brown, C Banister, M Zinkevich, M Johanson, M Bowling, C Piccione, arXiv:2007.10442Advances in Neural Information Processing Systems. arXiv preprintRegret minimization in games with incomplete informationZarick, R.; Pellegrino, B.; Brown, N.; and Banister, C. 2020. Unlocking the Potential of Deep Counterfactual Value Net- works. arXiv preprint arXiv:2007.10442. Zinkevich, M.; Johanson, M.; Bowling, M.; and Piccione, C. 2007. Regret minimization in games with incomplete information. In Advances in Neural Information Processing Systems, 1729-1736.\n", "annotations": {"author": "[{\"end\":266,\"start\":123},{\"end\":409,\"start\":267},{\"end\":552,\"start\":410},{\"end\":708,\"start\":553},{\"end\":900,\"start\":709}]", "publisher": null, "author_last_name": "[{\"end\":133,\"start\":129},{\"end\":276,\"start\":273},{\"end\":419,\"start\":417},{\"end\":559,\"start\":557},{\"end\":722,\"start\":718}]", "author_first_name": "[{\"end\":128,\"start\":123},{\"end\":272,\"start\":267},{\"end\":416,\"start\":410},{\"end\":556,\"start\":553},{\"end\":717,\"start\":709}]", "author_affiliation": "[{\"end\":187,\"start\":135},{\"end\":265,\"start\":189},{\"end\":330,\"start\":278},{\"end\":408,\"start\":332},{\"end\":473,\"start\":421},{\"end\":551,\"start\":475},{\"end\":629,\"start\":577},{\"end\":707,\"start\":631},{\"end\":799,\"start\":747},{\"end\":821,\"start\":801},{\"end\":899,\"start\":823}]", "title": "[{\"end\":120,\"start\":1},{\"end\":1020,\"start\":901}]", "venue": null, "abstract": "[{\"end\":2481,\"start\":1022}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2693,\"start\":2678},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3344,\"start\":3326},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3357,\"start\":3344},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3549,\"start\":3533},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3576,\"start\":3556},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":3612,\"start\":3592},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":4304,\"start\":4282},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":4340,\"start\":4318},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4379,\"start\":4354},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":4883,\"start\":4861},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":8856,\"start\":8833},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":8873,\"start\":8856},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8943,\"start\":8922},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":9087,\"start\":9065},{\"end\":9421,\"start\":9400},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":9434,\"start\":9421},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9468,\"start\":9434},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":9656,\"start\":9635},{\"end\":9766,\"start\":9756},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10041,\"start\":10015},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":10732,\"start\":10706},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":10770,\"start\":10747},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":10866,\"start\":10848},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":11016,\"start\":10990},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":18655,\"start\":18639},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":19017,\"start\":18990},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":19318,\"start\":19297},{\"end\":21671,\"start\":21652},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":21708,\"start\":21683},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":22389,\"start\":22376},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":22564,\"start\":22528},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":22582,\"start\":22564},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":22602,\"start\":22582},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":22731,\"start\":22711},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":23434,\"start\":23414},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":23936,\"start\":23923},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":23955,\"start\":23936},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":24115,\"start\":24095},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":24212,\"start\":24191},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":24307,\"start\":24281},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":24700,\"start\":24674},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":25501,\"start\":25481},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":25812,\"start\":25791},{\"end\":26989,\"start\":26961},{\"end\":27305,\"start\":27271},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":28471,\"start\":28450},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":29473,\"start\":29460},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":29492,\"start\":29473},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":29559,\"start\":29539},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":29600,\"start\":29579},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":30782,\"start\":30768},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":31926,\"start\":31906},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":33578,\"start\":33558}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":34697,\"start\":34639},{\"attributes\":{\"id\":\"fig_2\"},\"end\":35258,\"start\":34698},{\"attributes\":{\"id\":\"fig_4\"},\"end\":35434,\"start\":35259},{\"attributes\":{\"id\":\"fig_5\"},\"end\":35810,\"start\":35435},{\"attributes\":{\"id\":\"fig_6\"},\"end\":36170,\"start\":35811},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":36281,\"start\":36171},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":36370,\"start\":36282}]", "paragraph": "[{\"end\":3358,\"start\":2497},{\"end\":4153,\"start\":3360},{\"end\":5082,\"start\":4155},{\"end\":6064,\"start\":5084},{\"end\":7083,\"start\":6066},{\"end\":7706,\"start\":7085},{\"end\":8346,\"start\":7708},{\"end\":8536,\"start\":8348},{\"end\":8738,\"start\":8538},{\"end\":11190,\"start\":8755},{\"end\":11236,\"start\":11206},{\"end\":11280,\"start\":11255},{\"end\":11338,\"start\":11299},{\"end\":11387,\"start\":11340},{\"end\":11425,\"start\":11389},{\"end\":11466,\"start\":11427},{\"end\":11526,\"start\":11486},{\"end\":11576,\"start\":11528},{\"end\":11622,\"start\":11578},{\"end\":12019,\"start\":11634},{\"end\":13451,\"start\":12180},{\"end\":13712,\"start\":13480},{\"end\":14054,\"start\":13714},{\"end\":14607,\"start\":14056},{\"end\":15556,\"start\":14609},{\"end\":15847,\"start\":15614},{\"end\":16321,\"start\":15879},{\"end\":17113,\"start\":16361},{\"end\":18143,\"start\":17115},{\"end\":18735,\"start\":18145},{\"end\":19238,\"start\":18779},{\"end\":19727,\"start\":19240},{\"end\":19965,\"start\":19788},{\"end\":20811,\"start\":20008},{\"end\":21041,\"start\":20885},{\"end\":22229,\"start\":21107},{\"end\":22985,\"start\":22274},{\"end\":23790,\"start\":22987},{\"end\":24812,\"start\":23792},{\"end\":25350,\"start\":24841},{\"end\":26341,\"start\":25352},{\"end\":26580,\"start\":26362},{\"end\":27579,\"start\":26582},{\"end\":28315,\"start\":27581},{\"end\":28621,\"start\":28317},{\"end\":29372,\"start\":28623},{\"end\":30188,\"start\":29374},{\"end\":30599,\"start\":30237},{\"end\":32158,\"start\":30601},{\"end\":32868,\"start\":32160},{\"end\":33352,\"start\":32870},{\"end\":33929,\"start\":33402},{\"end\":34638,\"start\":33969}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":12163,\"start\":12020},{\"attributes\":{\"id\":\"formula_1\"},\"end\":19787,\"start\":19728},{\"attributes\":{\"id\":\"formula_2\"},\"end\":20007,\"start\":19966},{\"attributes\":{\"id\":\"formula_3\"},\"end\":20884,\"start\":20812},{\"attributes\":{\"id\":\"formula_4\"},\"end\":21106,\"start\":21042}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":11754,\"start\":11747},{\"end\":26598,\"start\":26591},{\"end\":27600,\"start\":27593},{\"end\":28529,\"start\":28522},{\"end\":30391,\"start\":30384},{\"end\":32281,\"start\":32274},{\"end\":32348,\"start\":32341}]", "section_header": "[{\"end\":2495,\"start\":2483},{\"end\":8753,\"start\":8741},{\"end\":11204,\"start\":11193},{\"end\":11253,\"start\":11239},{\"end\":11297,\"start\":11283},{\"end\":11484,\"start\":11469},{\"end\":11632,\"start\":11625},{\"end\":12178,\"start\":12165},{\"end\":13478,\"start\":13454},{\"end\":15612,\"start\":15559},{\"end\":15877,\"start\":15850},{\"end\":16359,\"start\":16324},{\"end\":18777,\"start\":18738},{\"end\":22272,\"start\":22232},{\"end\":24839,\"start\":24815},{\"end\":26360,\"start\":26344},{\"end\":30235,\"start\":30191},{\"end\":33400,\"start\":33355},{\"end\":33967,\"start\":33932},{\"end\":34650,\"start\":34640},{\"end\":34710,\"start\":34699},{\"end\":35270,\"start\":35260},{\"end\":35446,\"start\":35436},{\"end\":35822,\"start\":35812},{\"end\":36181,\"start\":36172}]", "table": null, "figure_caption": "[{\"end\":34697,\"start\":34652},{\"end\":35258,\"start\":34712},{\"end\":35434,\"start\":35272},{\"end\":35810,\"start\":35448},{\"end\":36170,\"start\":35824},{\"end\":36281,\"start\":36183},{\"end\":36370,\"start\":36284}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13035,\"start\":13027},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14606,\"start\":14598},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14629,\"start\":14621},{\"end\":15736,\"start\":15728},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":17327,\"start\":17318},{\"end\":18031,\"start\":18023},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":23803,\"start\":23795},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":28752,\"start\":28744},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":33653,\"start\":33645}]", "bib_author_first_name": "[{\"end\":36517,\"start\":36516},{\"end\":36533,\"start\":36532},{\"end\":36544,\"start\":36543},{\"end\":36556,\"start\":36555},{\"end\":36566,\"start\":36565},{\"end\":36576,\"start\":36575},{\"end\":36588,\"start\":36587},{\"end\":36600,\"start\":36599},{\"end\":36609,\"start\":36608},{\"end\":36621,\"start\":36620},{\"end\":37028,\"start\":37027},{\"end\":37038,\"start\":37037},{\"end\":37050,\"start\":37049},{\"end\":37059,\"start\":37058},{\"end\":37072,\"start\":37071},{\"end\":37371,\"start\":37370},{\"end\":37379,\"start\":37378},{\"end\":37389,\"start\":37388},{\"end\":37398,\"start\":37397},{\"end\":37628,\"start\":37627},{\"end\":37639,\"start\":37638},{\"end\":37650,\"start\":37649},{\"end\":37661,\"start\":37660},{\"end\":37663,\"start\":37662},{\"end\":37991,\"start\":37990},{\"end\":38001,\"start\":38000},{\"end\":38013,\"start\":38012},{\"end\":38021,\"start\":38020},{\"end\":38031,\"start\":38030},{\"end\":38041,\"start\":38040},{\"end\":38053,\"start\":38052},{\"end\":38062,\"start\":38061},{\"end\":38073,\"start\":38072},{\"end\":38083,\"start\":38082},{\"end\":38436,\"start\":38435},{\"end\":38447,\"start\":38446},{\"end\":38456,\"start\":38455},{\"end\":38468,\"start\":38467},{\"end\":38709,\"start\":38708},{\"end\":38718,\"start\":38717},{\"end\":38729,\"start\":38728},{\"end\":38738,\"start\":38737},{\"end\":39044,\"start\":39043},{\"end\":39053,\"start\":39052},{\"end\":39062,\"start\":39061},{\"end\":39071,\"start\":39070},{\"end\":39362,\"start\":39361},{\"end\":39371,\"start\":39370},{\"end\":39611,\"start\":39610},{\"end\":39620,\"start\":39619},{\"end\":39880,\"start\":39879},{\"end\":39889,\"start\":39888},{\"end\":40076,\"start\":40075},{\"end\":40085,\"start\":40084},{\"end\":40097,\"start\":40096},{\"end\":40359,\"start\":40358},{\"end\":40365,\"start\":40364},{\"end\":40374,\"start\":40373},{\"end\":40381,\"start\":40380},{\"end\":40661,\"start\":40660},{\"end\":40673,\"start\":40672},{\"end\":40684,\"start\":40683},{\"end\":40970,\"start\":40969},{\"end\":40982,\"start\":40981},{\"end\":41283,\"start\":41282},{\"end\":41285,\"start\":41284},{\"end\":41599,\"start\":41598},{\"end\":41601,\"start\":41600},{\"end\":41611,\"start\":41610},{\"end\":41836,\"start\":41835},{\"end\":41845,\"start\":41844},{\"end\":42039,\"start\":42038},{\"end\":42050,\"start\":42049},{\"end\":42059,\"start\":42058},{\"end\":42072,\"start\":42071},{\"end\":42390,\"start\":42389},{\"end\":42396,\"start\":42395},{\"end\":42408,\"start\":42407},{\"end\":42414,\"start\":42413},{\"end\":42421,\"start\":42420},{\"end\":42429,\"start\":42428},{\"end\":42437,\"start\":42436},{\"end\":42445,\"start\":42444},{\"end\":42455,\"start\":42451},{\"end\":42465,\"start\":42461},{\"end\":42841,\"start\":42840},{\"end\":42853,\"start\":42852},{\"end\":42863,\"start\":42862},{\"end\":42872,\"start\":42871},{\"end\":42880,\"start\":42879},{\"end\":42891,\"start\":42890},{\"end\":42899,\"start\":42898},{\"end\":42908,\"start\":42907},{\"end\":42917,\"start\":42916},{\"end\":42929,\"start\":42928},{\"end\":43216,\"start\":43215},{\"end\":43225,\"start\":43224},{\"end\":43426,\"start\":43425},{\"end\":43428,\"start\":43427},{\"end\":43697,\"start\":43696},{\"end\":43709,\"start\":43708},{\"end\":43719,\"start\":43718},{\"end\":43729,\"start\":43728},{\"end\":43739,\"start\":43738},{\"end\":43907,\"start\":43906},{\"end\":43919,\"start\":43918},{\"end\":43929,\"start\":43928},{\"end\":43941,\"start\":43940},{\"end\":43952,\"start\":43951},{\"end\":44250,\"start\":44249},{\"end\":44260,\"start\":44259},{\"end\":44269,\"start\":44268},{\"end\":44271,\"start\":44270},{\"end\":44283,\"start\":44282},{\"end\":44291,\"start\":44290},{\"end\":44300,\"start\":44299},{\"end\":44321,\"start\":44320},{\"end\":44338,\"start\":44337},{\"end\":44352,\"start\":44351},{\"end\":44370,\"start\":44369},{\"end\":44756,\"start\":44755},{\"end\":44766,\"start\":44765},{\"end\":44776,\"start\":44775},{\"end\":44793,\"start\":44792},{\"end\":44807,\"start\":44806},{\"end\":44814,\"start\":44813},{\"end\":44822,\"start\":44821},{\"end\":44833,\"start\":44832},{\"end\":44842,\"start\":44841},{\"end\":44853,\"start\":44852},{\"end\":45187,\"start\":45186},{\"end\":45199,\"start\":45198},{\"end\":45208,\"start\":45207},{\"end\":45220,\"start\":45219},{\"end\":45542,\"start\":45541},{\"end\":45553,\"start\":45552},{\"end\":45567,\"start\":45566},{\"end\":45569,\"start\":45568},{\"end\":45582,\"start\":45581},{\"end\":45593,\"start\":45592},{\"end\":45603,\"start\":45602},{\"end\":45612,\"start\":45611},{\"end\":45614,\"start\":45613},{\"end\":45622,\"start\":45621},{\"end\":45632,\"start\":45631},{\"end\":45642,\"start\":45641},{\"end\":46001,\"start\":46000},{\"end\":46003,\"start\":46002},{\"end\":46295,\"start\":46294},{\"end\":46308,\"start\":46307},{\"end\":46315,\"start\":46314},{\"end\":46325,\"start\":46324},{\"end\":46666,\"start\":46665},{\"end\":46672,\"start\":46671},{\"end\":46680,\"start\":46679},{\"end\":46689,\"start\":46688},{\"end\":46697,\"start\":46696},{\"end\":46705,\"start\":46704},{\"end\":46712,\"start\":46711},{\"end\":46720,\"start\":46719},{\"end\":46727,\"start\":46726},{\"end\":46734,\"start\":46733},{\"end\":47106,\"start\":47105},{\"end\":47112,\"start\":47111},{\"end\":47119,\"start\":47118},{\"end\":47126,\"start\":47125},{\"end\":47133,\"start\":47132},{\"end\":47141,\"start\":47140},{\"end\":47147,\"start\":47146},{\"end\":47153,\"start\":47152},{\"end\":47161,\"start\":47160},{\"end\":47167,\"start\":47166},{\"end\":47516,\"start\":47515},{\"end\":47526,\"start\":47525},{\"end\":47540,\"start\":47539},{\"end\":47549,\"start\":47548},{\"end\":47561,\"start\":47560},{\"end\":47574,\"start\":47573},{\"end\":47586,\"start\":47585},{\"end\":47597,\"start\":47596}]", "bib_author_last_name": "[{\"end\":36530,\"start\":36518},{\"end\":36541,\"start\":36534},{\"end\":36553,\"start\":36545},{\"end\":36563,\"start\":36557},{\"end\":36573,\"start\":36567},{\"end\":36585,\"start\":36577},{\"end\":36597,\"start\":36589},{\"end\":36606,\"start\":36601},{\"end\":36618,\"start\":36610},{\"end\":36631,\"start\":36622},{\"end\":37035,\"start\":37029},{\"end\":37047,\"start\":37039},{\"end\":37056,\"start\":37051},{\"end\":37069,\"start\":37060},{\"end\":37081,\"start\":37073},{\"end\":37376,\"start\":37372},{\"end\":37386,\"start\":37380},{\"end\":37395,\"start\":37390},{\"end\":37408,\"start\":37399},{\"end\":37636,\"start\":37629},{\"end\":37647,\"start\":37640},{\"end\":37658,\"start\":37651},{\"end\":37673,\"start\":37664},{\"end\":37998,\"start\":37992},{\"end\":38010,\"start\":38002},{\"end\":38018,\"start\":38014},{\"end\":38028,\"start\":38022},{\"end\":38038,\"start\":38032},{\"end\":38050,\"start\":38042},{\"end\":38059,\"start\":38054},{\"end\":38070,\"start\":38063},{\"end\":38080,\"start\":38074},{\"end\":38089,\"start\":38084},{\"end\":38444,\"start\":38437},{\"end\":38453,\"start\":38448},{\"end\":38465,\"start\":38457},{\"end\":38477,\"start\":38469},{\"end\":38715,\"start\":38710},{\"end\":38726,\"start\":38719},{\"end\":38735,\"start\":38730},{\"end\":38743,\"start\":38739},{\"end\":39050,\"start\":39045},{\"end\":39059,\"start\":39054},{\"end\":39068,\"start\":39063},{\"end\":39080,\"start\":39072},{\"end\":39368,\"start\":39363},{\"end\":39380,\"start\":39372},{\"end\":39617,\"start\":39612},{\"end\":39629,\"start\":39621},{\"end\":39886,\"start\":39881},{\"end\":39898,\"start\":39890},{\"end\":40082,\"start\":40077},{\"end\":40094,\"start\":40086},{\"end\":40105,\"start\":40098},{\"end\":40362,\"start\":40360},{\"end\":40371,\"start\":40366},{\"end\":40378,\"start\":40375},{\"end\":40385,\"start\":40382},{\"end\":40670,\"start\":40662},{\"end\":40681,\"start\":40674},{\"end\":40691,\"start\":40685},{\"end\":40979,\"start\":40971},{\"end\":40989,\"start\":40983},{\"end\":41293,\"start\":41286},{\"end\":41608,\"start\":41602},{\"end\":41614,\"start\":41612},{\"end\":41842,\"start\":41837},{\"end\":41856,\"start\":41846},{\"end\":42047,\"start\":42040},{\"end\":42056,\"start\":42051},{\"end\":42069,\"start\":42060},{\"end\":42080,\"start\":42073},{\"end\":42393,\"start\":42391},{\"end\":42405,\"start\":42397},{\"end\":42411,\"start\":42409},{\"end\":42418,\"start\":42415},{\"end\":42426,\"start\":42422},{\"end\":42434,\"start\":42430},{\"end\":42442,\"start\":42438},{\"end\":42449,\"start\":42446},{\"end\":42459,\"start\":42456},{\"end\":42469,\"start\":42466},{\"end\":42850,\"start\":42842},{\"end\":42860,\"start\":42854},{\"end\":42869,\"start\":42864},{\"end\":42877,\"start\":42873},{\"end\":42888,\"start\":42881},{\"end\":42896,\"start\":42892},{\"end\":42905,\"start\":42900},{\"end\":42914,\"start\":42909},{\"end\":42926,\"start\":42918},{\"end\":42937,\"start\":42930},{\"end\":43222,\"start\":43217},{\"end\":43232,\"start\":43226},{\"end\":43435,\"start\":43429},{\"end\":43706,\"start\":43698},{\"end\":43716,\"start\":43710},{\"end\":43726,\"start\":43720},{\"end\":43736,\"start\":43730},{\"end\":43746,\"start\":43740},{\"end\":43916,\"start\":43908},{\"end\":43926,\"start\":43920},{\"end\":43938,\"start\":43930},{\"end\":43949,\"start\":43942},{\"end\":43959,\"start\":43953},{\"end\":44257,\"start\":44251},{\"end\":44266,\"start\":44261},{\"end\":44280,\"start\":44272},{\"end\":44288,\"start\":44284},{\"end\":44297,\"start\":44292},{\"end\":44318,\"start\":44301},{\"end\":44335,\"start\":44322},{\"end\":44349,\"start\":44339},{\"end\":44367,\"start\":44353},{\"end\":44378,\"start\":44371},{\"end\":44763,\"start\":44757},{\"end\":44773,\"start\":44767},{\"end\":44790,\"start\":44777},{\"end\":44804,\"start\":44794},{\"end\":44811,\"start\":44808},{\"end\":44819,\"start\":44815},{\"end\":44830,\"start\":44823},{\"end\":44839,\"start\":44834},{\"end\":44850,\"start\":44843},{\"end\":44861,\"start\":44854},{\"end\":45196,\"start\":45188},{\"end\":45205,\"start\":45200},{\"end\":45217,\"start\":45209},{\"end\":45228,\"start\":45221},{\"end\":45550,\"start\":45543},{\"end\":45564,\"start\":45554},{\"end\":45579,\"start\":45570},{\"end\":45590,\"start\":45583},{\"end\":45600,\"start\":45594},{\"end\":45609,\"start\":45604},{\"end\":45619,\"start\":45615},{\"end\":45629,\"start\":45623},{\"end\":45639,\"start\":45633},{\"end\":45651,\"start\":45643},{\"end\":46012,\"start\":46004},{\"end\":46305,\"start\":46296},{\"end\":46312,\"start\":46309},{\"end\":46322,\"start\":46316},{\"end\":46329,\"start\":46326},{\"end\":46669,\"start\":46667},{\"end\":46677,\"start\":46673},{\"end\":46686,\"start\":46681},{\"end\":46694,\"start\":46690},{\"end\":46702,\"start\":46698},{\"end\":46709,\"start\":46706},{\"end\":46717,\"start\":46713},{\"end\":46724,\"start\":46721},{\"end\":46731,\"start\":46728},{\"end\":46737,\"start\":46735},{\"end\":47109,\"start\":47107},{\"end\":47116,\"start\":47113},{\"end\":47123,\"start\":47120},{\"end\":47130,\"start\":47127},{\"end\":47138,\"start\":47134},{\"end\":47144,\"start\":47142},{\"end\":47150,\"start\":47148},{\"end\":47158,\"start\":47154},{\"end\":47164,\"start\":47162},{\"end\":47171,\"start\":47168},{\"end\":47523,\"start\":47517},{\"end\":47537,\"start\":47527},{\"end\":47546,\"start\":47541},{\"end\":47558,\"start\":47550},{\"end\":47571,\"start\":47562},{\"end\":47583,\"start\":47575},{\"end\":47594,\"start\":47587},{\"end\":47606,\"start\":47598}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":233340556},\"end\":36976,\"start\":36441},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":3921978},\"end\":37329,\"start\":36978},{\"attributes\":{\"id\":\"b2\"},\"end\":37547,\"start\":37331},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":8186779},\"end\":37988,\"start\":37549},{\"attributes\":{\"doi\":\"arXiv:1912.06680\",\"id\":\"b4\"},\"end\":38393,\"start\":37990},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":3796371},\"end\":38624,\"start\":38395},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":220794072},\"end\":39000,\"start\":38626},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":53183381},\"end\":39282,\"start\":39002},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":5003977},\"end\":39537,\"start\":39284},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":52190255},\"end\":39840,\"start\":39539},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":195892791},\"end\":40016,\"start\":39842},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":3003190},\"end\":40310,\"start\":40018},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":206594692},\"end\":40612,\"start\":40312},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":13937012},\"end\":40892,\"start\":40614},{\"attributes\":{\"doi\":\"arXiv:1603.01121\",\"id\":\"b14\"},\"end\":41165,\"start\":40894},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":16497469},\"end\":41552,\"start\":41167},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":6628106},\"end\":41808,\"start\":41554},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":207779694},\"end\":42034,\"start\":41810},{\"attributes\":{\"id\":\"b18\"},\"end\":42136,\"start\":42036},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2332208},\"end\":42387,\"start\":42138},{\"attributes\":{\"doi\":\"arXiv:2003.13590\",\"id\":\"b20\"},\"end\":42762,\"start\":42389},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":1586260},\"end\":43187,\"start\":42764},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":10725980},\"end\":43362,\"start\":43189},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":2126705},\"end\":43618,\"start\":43364},{\"attributes\":{\"id\":\"b24\"},\"end\":43902,\"start\":43620},{\"attributes\":{\"doi\":\"arXiv:1707.06347\",\"id\":\"b25\"},\"end\":44179,\"start\":43904},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":515925},\"end\":44657,\"start\":44181},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":54457125},\"end\":45146,\"start\":44659},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":6556647},\"end\":45462,\"start\":45148},{\"attributes\":{\"id\":\"b29\"},\"end\":45920,\"start\":45464},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":39412954},\"end\":46182,\"start\":45922},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":2918987},\"end\":46597,\"start\":46184},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":227162956},\"end\":47029,\"start\":46599},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":209439841},\"end\":47450,\"start\":47031},{\"attributes\":{\"doi\":\"arXiv:2007.10442\",\"id\":\"b34\",\"matched_paper_id\":220666200},\"end\":48092,\"start\":47452}]", "bib_title": "[{\"end\":36514,\"start\":36441},{\"end\":37025,\"start\":36978},{\"end\":37625,\"start\":37549},{\"end\":38433,\"start\":38395},{\"end\":38706,\"start\":38626},{\"end\":39041,\"start\":39002},{\"end\":39359,\"start\":39284},{\"end\":39608,\"start\":39539},{\"end\":39877,\"start\":39842},{\"end\":40073,\"start\":40018},{\"end\":40356,\"start\":40312},{\"end\":40658,\"start\":40614},{\"end\":41280,\"start\":41167},{\"end\":41596,\"start\":41554},{\"end\":41833,\"start\":41810},{\"end\":42201,\"start\":42138},{\"end\":42838,\"start\":42764},{\"end\":43213,\"start\":43189},{\"end\":43423,\"start\":43364},{\"end\":44247,\"start\":44181},{\"end\":44753,\"start\":44659},{\"end\":45184,\"start\":45148},{\"end\":45539,\"start\":45464},{\"end\":45998,\"start\":45922},{\"end\":46292,\"start\":46184},{\"end\":46663,\"start\":46599},{\"end\":47103,\"start\":47031},{\"end\":47513,\"start\":47452}]", "bib_author": "[{\"end\":36532,\"start\":36516},{\"end\":36543,\"start\":36532},{\"end\":36555,\"start\":36543},{\"end\":36565,\"start\":36555},{\"end\":36575,\"start\":36565},{\"end\":36587,\"start\":36575},{\"end\":36599,\"start\":36587},{\"end\":36608,\"start\":36599},{\"end\":36620,\"start\":36608},{\"end\":36633,\"start\":36620},{\"end\":37037,\"start\":37027},{\"end\":37049,\"start\":37037},{\"end\":37058,\"start\":37049},{\"end\":37071,\"start\":37058},{\"end\":37083,\"start\":37071},{\"end\":37378,\"start\":37370},{\"end\":37388,\"start\":37378},{\"end\":37397,\"start\":37388},{\"end\":37410,\"start\":37397},{\"end\":37638,\"start\":37627},{\"end\":37649,\"start\":37638},{\"end\":37660,\"start\":37649},{\"end\":37675,\"start\":37660},{\"end\":38000,\"start\":37990},{\"end\":38012,\"start\":38000},{\"end\":38020,\"start\":38012},{\"end\":38030,\"start\":38020},{\"end\":38040,\"start\":38030},{\"end\":38052,\"start\":38040},{\"end\":38061,\"start\":38052},{\"end\":38072,\"start\":38061},{\"end\":38082,\"start\":38072},{\"end\":38091,\"start\":38082},{\"end\":38446,\"start\":38435},{\"end\":38455,\"start\":38446},{\"end\":38467,\"start\":38455},{\"end\":38479,\"start\":38467},{\"end\":38717,\"start\":38708},{\"end\":38728,\"start\":38717},{\"end\":38737,\"start\":38728},{\"end\":38745,\"start\":38737},{\"end\":39052,\"start\":39043},{\"end\":39061,\"start\":39052},{\"end\":39070,\"start\":39061},{\"end\":39082,\"start\":39070},{\"end\":39370,\"start\":39361},{\"end\":39382,\"start\":39370},{\"end\":39619,\"start\":39610},{\"end\":39631,\"start\":39619},{\"end\":39888,\"start\":39879},{\"end\":39900,\"start\":39888},{\"end\":40084,\"start\":40075},{\"end\":40096,\"start\":40084},{\"end\":40107,\"start\":40096},{\"end\":40364,\"start\":40358},{\"end\":40373,\"start\":40364},{\"end\":40380,\"start\":40373},{\"end\":40387,\"start\":40380},{\"end\":40672,\"start\":40660},{\"end\":40683,\"start\":40672},{\"end\":40693,\"start\":40683},{\"end\":40981,\"start\":40969},{\"end\":40991,\"start\":40981},{\"end\":41295,\"start\":41282},{\"end\":41610,\"start\":41598},{\"end\":41616,\"start\":41610},{\"end\":41844,\"start\":41835},{\"end\":41858,\"start\":41844},{\"end\":42049,\"start\":42038},{\"end\":42058,\"start\":42049},{\"end\":42071,\"start\":42058},{\"end\":42082,\"start\":42071},{\"end\":42395,\"start\":42389},{\"end\":42407,\"start\":42395},{\"end\":42413,\"start\":42407},{\"end\":42420,\"start\":42413},{\"end\":42428,\"start\":42420},{\"end\":42436,\"start\":42428},{\"end\":42444,\"start\":42436},{\"end\":42451,\"start\":42444},{\"end\":42461,\"start\":42451},{\"end\":42471,\"start\":42461},{\"end\":42852,\"start\":42840},{\"end\":42862,\"start\":42852},{\"end\":42871,\"start\":42862},{\"end\":42879,\"start\":42871},{\"end\":42890,\"start\":42879},{\"end\":42898,\"start\":42890},{\"end\":42907,\"start\":42898},{\"end\":42916,\"start\":42907},{\"end\":42928,\"start\":42916},{\"end\":42939,\"start\":42928},{\"end\":43224,\"start\":43215},{\"end\":43234,\"start\":43224},{\"end\":43437,\"start\":43425},{\"end\":43708,\"start\":43696},{\"end\":43718,\"start\":43708},{\"end\":43728,\"start\":43718},{\"end\":43738,\"start\":43728},{\"end\":43748,\"start\":43738},{\"end\":43918,\"start\":43906},{\"end\":43928,\"start\":43918},{\"end\":43940,\"start\":43928},{\"end\":43951,\"start\":43940},{\"end\":43961,\"start\":43951},{\"end\":44259,\"start\":44249},{\"end\":44268,\"start\":44259},{\"end\":44282,\"start\":44268},{\"end\":44290,\"start\":44282},{\"end\":44299,\"start\":44290},{\"end\":44320,\"start\":44299},{\"end\":44337,\"start\":44320},{\"end\":44351,\"start\":44337},{\"end\":44369,\"start\":44351},{\"end\":44380,\"start\":44369},{\"end\":44765,\"start\":44755},{\"end\":44775,\"start\":44765},{\"end\":44792,\"start\":44775},{\"end\":44806,\"start\":44792},{\"end\":44813,\"start\":44806},{\"end\":44821,\"start\":44813},{\"end\":44832,\"start\":44821},{\"end\":44841,\"start\":44832},{\"end\":44852,\"start\":44841},{\"end\":44863,\"start\":44852},{\"end\":45198,\"start\":45186},{\"end\":45207,\"start\":45198},{\"end\":45219,\"start\":45207},{\"end\":45230,\"start\":45219},{\"end\":45552,\"start\":45541},{\"end\":45566,\"start\":45552},{\"end\":45581,\"start\":45566},{\"end\":45592,\"start\":45581},{\"end\":45602,\"start\":45592},{\"end\":45611,\"start\":45602},{\"end\":45621,\"start\":45611},{\"end\":45631,\"start\":45621},{\"end\":45641,\"start\":45631},{\"end\":45653,\"start\":45641},{\"end\":46014,\"start\":46000},{\"end\":46307,\"start\":46294},{\"end\":46314,\"start\":46307},{\"end\":46324,\"start\":46314},{\"end\":46331,\"start\":46324},{\"end\":46671,\"start\":46665},{\"end\":46679,\"start\":46671},{\"end\":46688,\"start\":46679},{\"end\":46696,\"start\":46688},{\"end\":46704,\"start\":46696},{\"end\":46711,\"start\":46704},{\"end\":46719,\"start\":46711},{\"end\":46726,\"start\":46719},{\"end\":46733,\"start\":46726},{\"end\":46739,\"start\":46733},{\"end\":47111,\"start\":47105},{\"end\":47118,\"start\":47111},{\"end\":47125,\"start\":47118},{\"end\":47132,\"start\":47125},{\"end\":47140,\"start\":47132},{\"end\":47146,\"start\":47140},{\"end\":47152,\"start\":47146},{\"end\":47160,\"start\":47152},{\"end\":47166,\"start\":47160},{\"end\":47173,\"start\":47166},{\"end\":47525,\"start\":47515},{\"end\":47539,\"start\":47525},{\"end\":47548,\"start\":47539},{\"end\":47560,\"start\":47548},{\"end\":47573,\"start\":47560},{\"end\":47585,\"start\":47573},{\"end\":47596,\"start\":47585},{\"end\":47608,\"start\":47596}]", "bib_venue": "[{\"end\":36685,\"start\":36633},{\"end\":37135,\"start\":37083},{\"end\":37368,\"start\":37331},{\"end\":37751,\"start\":37675},{\"end\":38158,\"start\":38107},{\"end\":38486,\"start\":38479},{\"end\":38794,\"start\":38745},{\"end\":39126,\"start\":39082},{\"end\":39389,\"start\":39382},{\"end\":39673,\"start\":39631},{\"end\":39907,\"start\":39900},{\"end\":40149,\"start\":40107},{\"end\":40445,\"start\":40387},{\"end\":40737,\"start\":40693},{\"end\":40967,\"start\":40894},{\"end\":41347,\"start\":41295},{\"end\":41668,\"start\":41616},{\"end\":41907,\"start\":41858},{\"end\":42252,\"start\":42203},{\"end\":42544,\"start\":42487},{\"end\":42946,\"start\":42939},{\"end\":43257,\"start\":43234},{\"end\":43476,\"start\":43437},{\"end\":43694,\"start\":43620},{\"end\":44386,\"start\":44380},{\"end\":44870,\"start\":44863},{\"end\":45288,\"start\":45230},{\"end\":45659,\"start\":45653},{\"end\":46037,\"start\":46014},{\"end\":46373,\"start\":46331},{\"end\":46788,\"start\":46739},{\"end\":47215,\"start\":47173},{\"end\":47673,\"start\":47624}]"}}}, "year": 2023, "month": 12, "day": 17}