{"id": 16326353, "updated": "2023-11-08 06:46:50.372", "metadata": {"title": "Length Matters: Clustering System Log Messages using Length of Words", "authors": "[{\"first\":\"Keiichi\",\"last\":\"Shima\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2016, "month": 11, "day": 10}, "abstract": "The analysis techniques of system log messages (syslog messages) have a long history from when the syslog mechanism was invented. Typically, the analysis consists of two parts, one is a message template generation, and the other is finding something interesting using the messages classified by the inferred templates. It is important to generate better templates to achieve better, precise, or convincible analysis results. In this paper, we propose a classification methodology using the length of words of each message. Our method is suitable for online template generation because it does not require two-pass analysis to generate template messages, that is an important factor considering increasing amount of log messages produced by a large number of system components such as cloud infrastructure.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1611.03213", "mag": "2577236676", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/Shima16", "doi": null}}, "content": {"source": {"pdf_hash": "aeeebd39f9368da22d30a887db829fd298851c58", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1611.03213v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "6185d1d7a41cc6a17c98c228abc614d9c09b480c", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/aeeebd39f9368da22d30a887db829fd298851c58.txt", "contents": "\nLength Matters: Clustering System Log Messages using Length of Words\n\n\nKeiichi Shima \nLength Matters: Clustering System Log Messages using Length of Words\n\nThe analysis techniques of system log messages (syslog messages) have a long history from when the syslog mechanism was invented. Typically, the analysis consists of two parts, one is a message template generation, and the other is finding something interesting using the messages classified by the inferred templates. It is important to generate better templates to achieve better, precise, or convincible analysis results. In this paper, we propose a classification methodology using the length of words of each message. Our method is suitable for online template generation because it does not require two-pass analysis to generate template messages, that is an important factor considering increasing amount of log messages produced by a large number of system components such as cloud infrastructure.\n\nIntroduction\n\nThe syslog mechanism and its protocols [6,3] are widely deployed in various kinds of systems to collect system status messages from an informational level to a critical level in a standardized way. Since the original syslog protocol did not define any message body structure, the log messages are typically in free form text messages. The newer syslog protocol specification [3] tried to organize semantic structures in the body part of a message, however, not many programs respect the specification so far. Moreover, the decision on whether to use the newer format or not depends on vendors, software, or even individual * IIJ Innovation Institute, Inc.\n\nprogrammers sometimes, we anyway have to handle both old and new message formats.\n\nThere are various approaches to infer log message templates. SLCT [9] is one of the basic approach to infer message templates without any prerequisite knowledge. SLCT is a two-pass template inferring method. In the first pass, it counts the number of words that appear in the entire log messages and find frequent words and its positions in a message. The more frequently a word appears, we can guess the word is likely a fixed keyword of the template message. For example, a message \"interface eth0 up\" is covered by the template \"{(interface, 0), (up, 2)}\" that means the keyword \"interface\" is at the position 0, and \"up\" is at the position 2.\n\nLogCluster [10] is similar to SLCT but addressing shortcomings of SLCT. SLCT creates templates as a set of pairs of a word and its position. Because of this, SLCT is sensitive to the position of words. Log-Cluster allows variable length of parameters between fixed words. For example, \"interface eth0 up\" and \"interface HQ Link up\" are covered by one template \"interface *{1,2} up\", where \"*{1,2}\" means 1 or 2 wildcard words. Same as SLCT, Log-Cluster requires a two-pass processing to detect the list of frequent words.\n\nXu, el al. proposed a method using source code knowledge to infer message templates in [11]. This is useful when we know what kind of software are used in the target operation system. This approach requires preparation before classifying log messages. It also requires to update the inferred log template when software used in the target system is added or updated.\n\nKimura, et al. introduced a character class based clustering method in their work [5]. They defined 5 classes of words each consists of only numbers, numbers and letters, symbols and letters, only letters, and only symbols respectively. The latter classes are considered more important than the former classes.\n\nThe weight values for how much emphasize each class are pre-calculated based on a PA-I supervised leaning algorithm [2]. When comparing two messages, the ratio of the number of classes included in each message is used. The more the messages are similar, the ratio will get closer to 1. SHISO [7] is another template generation method focusing on online processing. It calculates a property of words as a vector by counting types of characters included in a word such as capital alphabets, lower alphabets, numbers, marks, and so on. SHISO computes a Euclidean distance between words of two messages being compared and generates similarity index of two messages. If the index is smaller than the pre-defined threshold, SHISO infers the two are similar and makes a cluster.\n\n\nAnalysis of Messages in the Wild\n\n\nProperties of Word Length in Messages\n\nSince syslog messages are printed by programs, each message has a pre-formatted style. Figure1 shows some examples of system log messages. As many previous works explained, a message comprises of two kinds of components, one is a fixed component and the other is a variable component. In the first line in Figure1, assuming that we know the head of the message contains date information and host information, sshd, 6845, vyatta, and 41.190.192.158 are variable components, while Invalid, user, and from are fixed components. Many existing methods try to classify these components based on some predefined knowledge, such as frequency of appearance, ratio of character type, and so on. Our simple question was that do we really need to consider the property of each word.\n\n\nFigure2\n\nshows different examples of similar messages that should be clustered into the same group 1 . If we read these messages, we can easily create a cluster of \"postfix/cleanup[*]: *: message-id=*\" for the first group, and \"sshd[*]: Invalid user * from *\", where \"*\" means a variable component because we have knowledge of what is a process identifier, or what is an IP address to infer which parts are fixed and which are not. But even though we do not use such knowledge, here is another factor we can read from these examples, that is the length of each word. It is obvious that all the fixed components have the same word length in the message. Variable words have different word length, but tend to have similar length because they share the same context, such as a message identifier, an IP address, a process identifier, a host/user name, and so on.\n\nFigure3 shows examples of distribution of word length of some messages groups. As we can read from the figures, each syslog message has a unique pattern of distribution of length of each words. The length of the first position is usually fixed because a process name is printed here normally. The second position is process identifiers and it is usually 3 to 5 digits. The 7th position of Figure3(a) is a placeholder for IP addresses and contains either IPv4 or IPv6 address. Because IPv6 address can be printed shorter by eliminating zero fields, the position has wider range of length. The 9th position of Figure3(b) is a placeholder for host names. In our data, the median of the length of the position was 29 and almost fixed however, we saw some very short and long host names in the log.\n\nWe analyzed how much the set of length of words are correlated each other using the syslog message dataset #2 shown in Table 2. The dataset is a collection of messages gathered from hypervisors operated by the WIDE project 2 . The distribution of the number of words of each message (excluding date and host name information) is shown in Figure4. The most popular message group was those whose number of words was 11. We then made 27 message templates by half-manual way to split the messages   Table 2. as shown in Table 1. Figure5 shows the similarity matrix between two templates of Table 1. We found that it would be possible to distinguish two templates by measuring distance between them in most cases.\n\nWe also found that in some cases, the distance of two template messages is quite small even though the messages are completely different. We analyze such cases in Section 2.2.\n\n\nProperties of Positions of Words in Messages\n\nThe one of the primitive clustering methods of syslog messages is creating clusters based on the number of words in the messages. Since the messages are printed based on pre-defined styles, the resulting messages will have the same number of words usually. Because this clustering method is too primitive, we need to create sub-clusters using other information. In the previous subsection, we have mentioned that each syslog message cluster tends to have a similar series of word length values. This observation  helps to make sub-clusters in a cluster that has the same number of words in messages, however, there is some cases we need a different index other than word length values.\n\nFigure6 shows the word length distribution patterns of two different syslog messages. In the later Section 3, we will discuss how to compare similarity between existing clusters and an incoming syslog message in detail, but in short, we use Cosine Similarity as a base idea for comparison. However, the two messages shown in Figure6 are quite similar in the sense of cosine similarity.\n\nIt is obvious for us to conclude that these two messages are different. The two messages in Figure6 only share the first word (and the third word \":\") which is the name of the process that wrote the messages. The rest of the fixed components of the messages are completely different. So we also focus on the word positions of messages. If the words of two messages being compared doesn't have shared words in the same position, then we can think they should be clustered to different groups.   Table 2.\n\n\nLenMa: Length Matters Clustering\n\nBased on the observation in Section 2.1, we focus on the length of each words of the message as a similarity parameters of the message.\n\nWhen clustering messages online, we need to compare the latest incoming message and existing clusters to decide which is the best cluster that should include the incoming message or create a new cluster if none of the existing clusters suites the message. which is the same vector calculated from the second line of the first group. For the second group, the vectors are [4,5,7,4,5,4,13] and [4,5,7,4,1,4,13]. If the vectors of two messages are similar, then we can guess that these messages are in a same cluster. The similarity S c is calculated from the word length vectors of the existing cluster and incoming new message as shown in (1) using the cosine similarity.\nV c = [v c,0 , v c,1 , ...v c,n ] V = [v 0 , v 1 , ...v n ] S c = CosineSimilarity(V c , V ) = V c \u00b7 V |V c | |V | = n i=0 v c,i v i n i=0 v 2 c,i n i=0 v 2 i (1)\nwhere V c and V are the word length vectors of the cluster c and incoming message respectively. v c,i and v i are the length of ith word of the cluster c and incoming message. Cluster vectors are updated whenever a new message is integrated to existing clusters. A new word length vector is calculated as shown in Algorithm 1. If the length of the ith word of the cluster and a new message is same, the value is kept unchanged, otherwise, the length value is updated with the new length value of the ith word of the new message.\n\nSimilarly, A new word vector which keeps a template string of the cluster is updated as shown in Algorithm 2. W c and W are ordered set of words of a cluster and incoming message. For example, the top message of Figure1 can be represented as [sshd, 6854, Invalid, user, vyatta, from, 41.190.192.158]. For the case of a cluster, some of the words are replaced with a wildcard mark as variables such as [sshd, *, Invalid, user, *, from, *]. When updating the word vector W c , if the ith word of the cluster c is different from the ith word of the input word vector W , the word is replaced by a wildcard mark, otherwise the value is kept unchanged.\n\nWhen we receive a new log message, the following procedure is executed.\n\n1. Create a word length vector and word vector of the new message.\n\n\nAlgorithm 1 Update a word length vector\nprocedure UpdateWordLengthVec- tor(V c , V ) for all v c,i \u2208 V c , v i \u2208 V (i \u2190 1 \u00b7 \u00b7 \u00b7 |V c |) do if v c,i = v i then v c,i \u2190 v i end if end for end procedure Algorithm 2 Update a word vector procedure UpdateWordVector(W c , W ) for all w c,i \u2208 W c , w i \u2208 W (i \u2190 1 \u00b7 \u00b7 \u00b7 |W c |) do if w c,i = w i then w c,i \u2190 * end if end for end procedure 2.\nCalculate a similarity score between the new message and each cluster which has the same number of words.\n\n3. If none of the cluster has a similarity value larger than the threshold T c , a new cluster with the new message is created and returned.\n\n4. Update the most similar cluster with the new message using the algorithms defined in Algorithm 1 and Algorithm 2.\n\n\nReturn the most similar cluster.\n\nAlgorithm 3 shows the above procedure. As we discussed in Section 2.2, we use the cosine similarity score to compare the new message and existing clusters, however it is not enough to determine a proper cluster in some cases. We need to judge if the fixed parts of the cluster template are similar enough to the fixed parts of the new message. To achieve this goal, we introduced a positional similarity index S p based on the number of shared words at the same positions. The S p is calculated as shown in (2). When comparing a cluster template and incoming message, we consider how many shared words are there in the same positions. If the number is smaller than the pre-defined threshold T p , the message is considered as out of the cluster.\nS p = |{w c,i = w i (w c,i \u2208 W c , w i \u2208 W )}| (2)\n\nAlgorithm 3 Find or Create a cluster\nC \u2190 \u2205 procedure FindOrCreateCluster(message) V \u2190 CreateWordLengthVec- tor(message) W \u2190 CreateWordVector(message) Cand \u2190 \u2205 for all [V c , W c ] in C do if Similarity(V c , V , W c , W ) > T c then Cand \u2190 Cand \u2229 [V , W ] end if end for if Cand = \u2205 then C \u2190 C \u2229 [V , W ] return [V , W ] end if [V c , W c ] \u2190 HighestSimilarity(Cand) UpdateWordLengthVector(V c , V ) UpdateWordVector(W c , W ) return [V c , W c ] end procedure Algorithm 4 Calculate similarity procedure Similarity(V c , V , W c , W ) if |V c | = |V | then return 0 end if if W c matches W then return 1 end if S c \u2190 CosineSimilarity(V c , V ) S p \u2190 |{w c,i = w i (w c,i \u2208 W c , w i \u2208 W )}| if S p < T p then return 0 end if return S c end procedure\n\nImplementation\n\nWe have implemented the proposed algorithm in Python and applied it with three different syslog datasets shown in Table 2. The dataset #1 is a public data provided by Chuvakin[1]. The dataset #2 is a set of syslog messages collected at the hypervisor cluster operated by the WIDE project. The dataset #3 is a set of syslog messages collected from servers of our laboratory including several hypervisors and service hosts such as web servers.\n\nWe introduced one heuristic approach assuming the beginning of a message includes a date string, a host name, and a process name that is syslog specific. Although RFCs says that the standard syslog message starts with the date information followed by a host name, a process name, and other components, we understand not all the syslog messages doesn't strictly follow the recommended message format. From our experience however, the first 3 components (date, host name, and process name) share the same context in most cases.\n\nThe processing cost of inferring template formats linearly depends on the number of inferred templates. As shown in the algorithm, the value of the threshold affects the final number of inferred templates. The smaller threshold generates less number of templates that contain more wildcard marks. Once the number of templates becomes stable, the algorithm can  process messages within a certain fixed rate. Fig-ure7 shows the processing time of messages in October 2015 of the dataset #2. The blue line indicates the time required to process 10000 messages and the red line shows the number of inferred templates. The processing time increases as the number of templates increases, however the number of the templates becomes stable once we have found most of them and the processing time also becomes stable.\n\nWe applied our algorithm and SHISO algorithm to cluster the datasets shown in Table 2. The result is shown in Table 3. We found a lot of kernel messages that appear when a system boots up in the dataset #2 and #3. In Figure7, such template messages are found at 2 points, the first point is the point around 200 million messages are processed, and the second point is where 700 million message are processed. We found a lot of kernel boot messages in the inferred templates. These messages appear only once while the system is running but generates a lot of different patterns that increases the total number of templates. The values in parentheses are the number of templates that are not related to kernel boot messages. This indicates that the online template mining mechanisms work well even for the infrequent messages, however cleansing of raw messages may be required to avoid unwanted template generation. 3 SHISO proposes a second level clustering that merges templates that contains similar set of words regardless the # of The prototype code is available at GitHub 4 .\n\n\nUsing Clustered Syslog Messages for Analysis\n\nWe tried to find unique syslog message patterns using the messages clustered by LenMa. We clustered all the messages using the algorithm and made message groups for every minute. The dataset used for this grouping is the dataset #3 and the period is from October to December 2015. Each group has its own distribution pattern of templates, however, many of them are similar each other. We counted the number of appearance of templates of each group, clustered them using the \u03c7 2 test, and finally achieved 25 message group clusters out of 132480 (= 60 minutes \u00d7 24 hours \u00d7 92 days) groups. The frequently observed patterns are shown in Figure8, and the counts are 16235 and 115299 times respectively. Since each group is one-minute-long, almost 91 days out of 92 days match these patterns. There were some unique patterns found from the result. Figure9(a) shows that there were not common ssh incoming activities. Figure9(b) was observed when one of the nodes in the target node group rebooted.\n\nThere are many approaches to detect anomalies or cluster messages based-on templates ( [11,5,4,8] \n\n\nRemaining Issues\n\nIn this section we discuss issues of our proposed method. Some of the issues discussed here are not specific to our proposal only, but are applied to online template mining methods in general.\n\nThe proposed algorithm doesn't take into account frequency of appearance of words. This causes state messages invisible from output. For example, interface eth0 up and interface eth1 down may generate a template such as interface * *. However, we may want two different templates interface * up and interface * down in some cases. Because we are focusing on online realtime template generation, it is difficult to predict a specific word is going to be a stable word like up and down or not.\n\nHow to determine the threshold value is an important factor in the method. If the value is too loose, the algorithm will generate more specific templates that will separate messages of same meaning to different groups. In this paper, we used 0.9 as T c and 3 as T p to cluster three different message sources (Table 2) achieved from different administrative groups.  We could achieve the similar number of templates as SHISO could infer with the threshold values when applied to the standard Linux server syslog messages, however the proper values may be different when applied to other kinds of dataset.\n\n\nConclusion\n\nIn this paper, we have proposed a new clustering method for inferring system log message templates using the length of each words of messages. Many existing template mining approaches try to characterize words of messages by their character types, ratio of character types. Our proposal comes from the question that do we really need to investigate the word property so close. We have focused on the length of each word and found each message template has a unique sequence of word length that can be used to cluster messages.\n\nThe proposed method is designed for use of online (one-pass) template mining. The two-pass methods usually generate better templates by surveying frequency of words to detect if a specific word is a fixed word or a variable word, however they require time before clustering and has difficulty to adapt dynamic changes of message trends. Recently many systems are implemented with dynamic components such as open source software. Such components are updated continuously, and even replaced with a different components providing the same functionality. In such a situation, adapting upgraded components and/or new components are important. Our proposed mechanism could produce similar number of templates as past works with less complicity of mining processing.\n\nFigure 2 :Figure 3 :\n23Examples of groups of syslog messages. Examples of word length distribution patterns of some syslog messages extracted from the messages on 1st October 2015 of the dataset #2 in\n\n12 7\n12kernel: * init: * main process * terminated with status * 18 8 kernel: 173315.040098 EXT4-fs vda1 : error count since last fsck: 3 1 9 kernel: * EXT4-fs vda1 : * error at time * * 2 10 kernel: * init: Failed to obtain startpar-bridge instance: Unknown parameter: INSTANCE 2 11 kernel: * systemd-logind 2127 : New session * of user * 1080 12 named * : client * view world: query cache * denied 3120 13 named * : error unexpected RCODE * resolving * : * 2224 14 ntpd * : Listen normally on * * * UDP 123 29 15 sshd * : Disconnecting: Too many authentication failures for * preauth 409 16 sshd * : User * not allowed because account is locked 1003 17 sshd * : Received disconnect from * 11: Bye Bye preauth 48299 18 sshd * : Received disconnect from * 11: disconnected by user 30883 19 sshd * : fatal: Write failed: Connection reset by peer preauth 21 20 sshd * : pam_unix sshd:session : session closed for user * 20525 21 su * : pam_unix su:session : session closed for user * 9 22 postfix/flush * : fatal: config variable inet_interfaces: host not found: * 5 23 postfix/master * : warning: process /usr/lib/postfix/flush pid * exit status 1 5 24 postfix/smtpd * : SSL_accept error from unknown * : lost connection 1 25 postfix/smtpd * : too many errors after DATA from unknown * 1 26 rpcbind: connect from * to dump : request from unauthorized host 14\n\nFigure 6 :\n6Examples of distribution patterns of word length of two completely different syslog messages where the distance between them becomes close.\n\nFigure 4 :\n4The distribution of the number of words of syslog messages on 1st October 2015 of the dataset #2 in\n\nFigure 5 :\n5For the first line of the first group in Figure2, the The similarity between two message templates shown inTable 1using the cosine similarity over the vectors calculated by converting messages to vectors of the length of each word. length of words can be represented as a vector of [len(postfix/cleanup), <201511...(snip)...example.com>)] = [15, 4, 11, 10, 44]\n\nFigure 7 :\n7A processing time convergence graph measured with the messages in October 2015 of the dataset #2.\n\nFigure 8 :\n8CRON * : pam_unix cron:session : session closed for user * 0: CRON * : pam_unix cron:session : session opened for user * b 50: CRON * : wwwdata CMD export set RAILS_ENV production\u037e cd /v 31: snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 36: snmpd * : message repeated * times: error on subcontainer ia 13: sshd * : * * * identification * from * 39: sshd * : Accepted publickey for * from * port * ssh2: * * 6: sshd * : Received disconnect from * 11: * * * 41: sshd * : pam_unix sshd:session : session closed for user * 40: sshd * : pam_unix sshd:session : session opened for user * b 34: sudo: pam_unix sudo:session : session closed for user root 33: sudo: pam_unix sudo:session : session opened for user root b 32: sudo: snmp : TTY unknown \u037e PWD / \u037e USER root \u037e COMMAND /snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 36: snmpd * : message repeated * times: error on subcontainer ia 34: sudo: pam_unix sudo:session : session closed for user root 33: sudo: pam_unix sudo:session : session opened for user root b 32: sudo: snmp : TTY unknown \u037e PWD / \u037e USER root \u037e COMMAND /usr/ Distibution pattern 1 (115299 times observed) Frequently observed message group patterns where each color represents a process name group\n\nFigure 9 :\n9Examples of unique message group patterns observed\n\nTable 1 :\n1Message Templates of Syslog Messages with 11 Words Extracted Half-Manually from the Messages on 1st October 2015 of the Dataset #2 inTable 2. CRON * : root CMD cd / && run-parts --report /etc/cron.hourly 768 5 kernel: * Buffer I/O error on device loop0p1, logical block * 10 6 kernel: * INFO: task * blocked for more than 120 seconds.# Template \n\n\nTable 2 :\n2Syslog DatasetsDataset # Content of dataset1 \nPublic Security Log Sharing Site[1] \n\n2 \nHypervisor cluster operated by the \nWIDE project \n\n3 \nServer cluster of our laboratory \n\nwhere W c and W are the word vectors of the cluster \nand incoming message, i is the position of the word \nin a template or a message. \n\n\n\nTable 3 :\n3Clustering Results \nDataset # \n# of templates found \n\nSHISO 3 \nLenMa \n\n1 (log/secure* only) \n29 \n26 \n\n2 \n1093 (446) \n1075 (404) \n\n3 \n1113 (361) \n891 (302) \n\n\n\n\n). Our template mining technology can be used with these detection/clustering methods. words, however, in this paper we compare the result of the first level clustering result. 4 https://github.com/keiichishima/templateminer2 \n0 \n50 \n31 \n35 \n36 \n13 \n39 \n6 \n41 \n40 \n34 \n33 \n32 \nTemplate ID \n\n\nNote that some messages are folded in the middle of the message due to the limitation of page width.2 http://www.wide.ad.jp/\n187  177  183  182  184  185  186  197  109  110  112  108  106  111  107  200  105  173  178  176  181  104  179  180  31  35  36  201  188  198  199  Template ID   1\nUser * from * not allowed because not listed in All 5: sshd * : input_userauth_request: invalid user * preauth 42: sshd * : message repeated * times: Received disconnect from 41: sshd * : pam_unix sshd:session : session closed for user * 40: sshd * : pam_unix sshd:session : session opened for user * b 34: sudo: pam_unix sudo:session : session closed for user root 33: sudo: pam_unix sudo:session : session opened for user root b. ntpdate * : * time server * offset * sec 173: osprober: debug: * is active swap 178: osprober: debug: os detected by /usr/lib/osprobes/50mounte 176: osprober: debug: running /usr/lib/osprobes/50mountedtests 181: rsyslogd2039: Could no open output pipe /dev/xconsole : No 104: rsyslogd: origin software rsyslogd swVersion 7.4.4 xpid * x 179: rsyslogd: origin software rsyslogd swVersion 7.4.4 xpid * x 180: rsyslogd: rsyslogd s * changed to * 31: snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 36: snmpd * : message repeated * times: error on subcontainer ia 201: sshd * : Received signal 15\u037e terminating. 32CRON * : pam_unix cron:session : session closed for user * 0: CRON * : pam_unix cron:session : session opened for user * b 50: CRON * : wwwdata CMD export set RAILS_ENV production\u037e cd /v 31: snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 30: snmpd * : message repeated * times: Connection from UDP: 202 36: snmpd * : message repeated * times: error on subcontainer ia 13: sshd * : * * * identification * from * 39: sshd * : Accepted publickey for * from * port * ssh2: * * 4: sshd * : Invalid user * from * 6: sshd * : Received disconnect from * 11: * * * 7: sshd *. sshd * : Server listening on * port 22. 198: systemdlogind * : New seat seat0. 199: systemdlogind * : Watching system buttons on * * * References [1] A. Chuvakin. Public Security Log Sharing SiteCRON * : pam_unix cron:session : session closed for user * 0: CRON * : pam_unix cron:session : session opened for user * b 50: CRON * : wwwdata CMD export set RAILS_ENV production\u037e cd /v 31: snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 30: snmpd * : message repeated * times: Connection from UDP: 202 36: snmpd * : message repeated * times: error on subcontainer ia 13: sshd * : * * * identification * from * 39: sshd * : Accepted publickey for * from * port * ssh2: * * 4: sshd * : Invalid user * from * 6: sshd * : Received disconnect from * 11: * * * 7: sshd * : User * from * not allowed because not listed in All 5: sshd * : input_userauth_request: invalid user * preauth 42: sshd * : message repeated * times: Received disconnect from 41: sshd * : pam_unix sshd:session : session closed for user * 40: sshd * : pam_unix sshd:session : session opened for user * b 34: sudo: pam_unix sudo:session : session closed for user root 33: sudo: pam_unix sudo:session : session opened for user root b 32: sudo: snmp : TTY unknown \u037e PWD / \u037e USER root \u037e COMMAND /usr/ 187: /usr/sbin/irqbalance: Balancing is ineffective on systems wi 177: 50mountedtests: debug: * type not recognised\u037e skipping 183: acpid: 1 rule loaded 182: acpid: starting up with netlink and the input layer 184: acpid: waiting for events: event logging is off 185: cron * : CRON INFO * * * 186: cron * : CRON STARTUP fork ok 197: dbus * : system AppArmor DBus mediation is enabled 109: ntpd * : Listen and drop on * * * UDP 123 110: ntpd * : Listen normally on * * * UDP 123 112: ntpd * : Listening on routing socket on fd * for interface u 108: ntpd * : ntp_io: estimated max descriptors: 1024, initial so 106: ntpd * : ntpd 4.2.6p5@1.2349o * * * * UTC 2015 1 111: ntpd * : peers refreshed 107: ntpd * : proto: precision * usec 200: ntpd * : unable to bind to wildcard address 0.0.0.0 anothe 105: ntpdate * : * time server * offset * sec 173: osprober: debug: * is active swap 178: osprober: debug: os detected by /usr/lib/osprobes/50mounte 176: osprober: debug: running /usr/lib/osprobes/50mountedtests 181: rsyslogd2039: Could no open output pipe /dev/xconsole : No 104: rsyslogd: origin software rsyslogd swVersion 7.4.4 xpid * x 179: rsyslogd: origin software rsyslogd swVersion 7.4.4 xpid * x 180: rsyslogd: rsyslogd s * changed to * 31: snmpd * : Connection from UDP: * * * :161 35: snmpd * : error on subcontainer ia_addr insert 1 36: snmpd * : message repeated * times: error on subcontainer ia 201: sshd * : Received signal 15\u037e terminating. 188: sshd * : Server listening on * port 22. 198: systemdlogind * : New seat seat0. 199: systemdlogind * : Watching system buttons on * * * References [1] A. Chuvakin. Public Security Log Shar- ing Site. http://log-sharing.dreamhosters. com/, 2010. accessed Jun 2016.\n\nOnline Passive-Aggresive Algorithm. K Crammer, O Dekel, J Keshet, S Shalev-Shwartz, Y Singer, Journal of Machine Learning Research. 7K. Crammer, O. Dekel, J. Keshet, S. Shalev- Shwartz, and Y. Singer. Online Passive- Aggresive Algorithm. Journal of Machine Learn- ing Research, 7(Mar):551-585, 2006.\n\nR Gerhards, The Syslog Protocol. IETF. R. Gerhards. The Syslog Protocol. IETF, March 2009. RFC5424.\n\nSpatio-temporal Factorization of Log Data for Understanding Network Events. T Kimura, K Ishibashi, T Mori, H Sawada, T Toyono, K Nishimatsu, A Watanabe, A Shimoda, K Shiomoto, Proceedings of the 33rd Annual IEEE International Conference on Computer Communications (INFOCOM'14). the 33rd Annual IEEE International Conference on Computer Communications (INFOCOM'14)T. Kimura, K. Ishibashi, T. Mori, H. Sawada, T. Toyono, K. Nishimatsu, A. Watanabe, A. Shi- moda, and K. Shiomoto. Spatio-temporal Fac- torization of Log Data for Understanding Net- work Events. In Proceedings of the 33rd An- nual IEEE International Conference on Com- puter Communications (INFOCOM'14), pages 610-618, April 2014.\n\nProactive Failure Detection Learning Generation Patterns of Large-scale Network Logs. T Kimura, A Watanabe, T Toyono, K Ishibashi, Proceedings of the 11th International Conference on Network and Service Management (CNSM 2015). the 11th International Conference on Network and Service Management (CNSM 2015)T. Kimura, A. Watanabe, T. Toyono, and K. Ishibashi. Proactive Failure Detection Learn- ing Generation Patterns of Large-scale Network Logs. In Proceedings of the 11th International Conference on Network and Service Manage- ment (CNSM 2015), pages 8-14, Nov 2015.\n\nThe BSD syslog Protocol. IETF. C Lonvick, C. Lonvick. The BSD syslog Protocol. IETF, August 2001. RFC3164.\n\nIncremental Mining of System Log Format. M Mizutani, Proceedings of the IEEE International Conference on Services Computing (SCC 2013). the IEEE International Conference on Services Computing (SCC 2013)M. Mizutani. Incremental Mining of System Log Format. In Proceedings of the IEEE Interna- tional Conference on Services Computing (SCC 2013), pages 595-602, 2013.\n\nWhat Happened in my Network? Mining Network Events from Router Syslogs. Q Tongqing, Z Ge, D Pei, Proceedings of the 10th ACM SIGCOMM conference on Internet measurement (IMC'10). the 10th ACM SIGCOMM conference on Internet measurement (IMC'10)Q. Tongqing, Z. Ge, and D. Pei. What Happened in my Network? Mining Network Events from Router Syslogs. In Proceedings of the 10th ACM SIGCOMM conference on Internet measurement (IMC'10), pages 472-484, 2010.\n\nA data clustering algorithm for mining patterns from event logs. R Vaarandi, Proceedings of the 2003 IEEE Workshop on IP Operations and Management (IPOM 2003). the 2003 IEEE Workshop on IP Operations and Management (IPOM 2003)R. Vaarandi. A data clustering algorithm for mining patterns from event logs. In Proceedings of the 2003 IEEE Workshop on IP Operations and Management (IPOM 2003), pages 119-126, 2003.\n\nLogCluster -A Data Clustering and Pattern Mining Algorithm for Event Logs. R Vaarandi, M Pihelgas, Proceedings of the 11th International Conference on Network and Service Management (CNSM 2015). the 11th International Conference on Network and Service Management (CNSM 2015)R. Vaarandi and M. Pihelgas. LogCluster -A Data Clustering and Pattern Mining Algorithm for Event Logs. In Proceedings of the 11th In- ternational Conference on Network and Service Management (CNSM 2015), pages 1-7, 2015.\n\nDetecting Large-Scale System Problems by Mining Console Logs. W Xu, L Huang, A Fox, D Patterson, M I Jordan, Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (SOSP'09). the ACM SIGOPS 22nd symposium on Operating systems principles (SOSP'09)4W. Xu, L. Huang, A. Fox, D. Patterson, and M. I. Jordan. Detecting Large-Scale System Problems by Mining Console Logs. In Pro- ceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (SOSP'09), vol- ume 4, pages 117-132, 2009.\n", "annotations": {"author": "[{\"end\":86,\"start\":72}]", "publisher": null, "author_last_name": "[{\"end\":85,\"start\":80}]", "author_first_name": "[{\"end\":79,\"start\":72}]", "author_affiliation": null, "title": "[{\"end\":69,\"start\":1},{\"end\":155,\"start\":87}]", "venue": null, "abstract": "[{\"end\":962,\"start\":157}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1020,\"start\":1017},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1022,\"start\":1020},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1356,\"start\":1353},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1787,\"start\":1784},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2381,\"start\":2377},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2980,\"start\":2976},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3341,\"start\":3338},{\"end\":3687,\"start\":3684},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":3863,\"start\":3860},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9904,\"start\":9901},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9906,\"start\":9904},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9908,\"start\":9906},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9910,\"start\":9908},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9912,\"start\":9910},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9914,\"start\":9912},{\"end\":9917,\"start\":9914},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9925,\"start\":9922},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9927,\"start\":9925},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9929,\"start\":9927},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9931,\"start\":9929},{\"end\":9933,\"start\":9931},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9935,\"start\":9933},{\"end\":9938,\"start\":9935},{\"end\":11192,\"start\":11178},{\"end\":12983,\"start\":12980},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":16734,\"start\":16733},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18033,\"start\":18029},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":18035,\"start\":18033},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":18037,\"start\":18035},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":18039,\"start\":18037}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":20856,\"start\":20655},{\"attributes\":{\"id\":\"fig_1\"},\"end\":22215,\"start\":20857},{\"attributes\":{\"id\":\"fig_2\"},\"end\":22368,\"start\":22216},{\"attributes\":{\"id\":\"fig_3\"},\"end\":22481,\"start\":22369},{\"attributes\":{\"id\":\"fig_4\"},\"end\":22855,\"start\":22482},{\"attributes\":{\"id\":\"fig_6\"},\"end\":22966,\"start\":22856},{\"attributes\":{\"id\":\"fig_7\"},\"end\":24291,\"start\":22967},{\"attributes\":{\"id\":\"fig_9\"},\"end\":24355,\"start\":24292},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":24714,\"start\":24356},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":25039,\"start\":24715},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":25209,\"start\":25040},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":25503,\"start\":25210}]", "paragraph": "[{\"end\":1633,\"start\":978},{\"end\":1716,\"start\":1635},{\"end\":2364,\"start\":1718},{\"end\":2887,\"start\":2366},{\"end\":3254,\"start\":2889},{\"end\":3566,\"start\":3256},{\"end\":4339,\"start\":3568},{\"end\":5186,\"start\":4416},{\"end\":6049,\"start\":5198},{\"end\":6844,\"start\":6051},{\"end\":7554,\"start\":6846},{\"end\":7731,\"start\":7556},{\"end\":8465,\"start\":7780},{\"end\":8852,\"start\":8467},{\"end\":9356,\"start\":8854},{\"end\":9528,\"start\":9393},{\"end\":10200,\"start\":9530},{\"end\":10892,\"start\":10364},{\"end\":11541,\"start\":10894},{\"end\":11614,\"start\":11543},{\"end\":11682,\"start\":11616},{\"end\":12176,\"start\":12071},{\"end\":12318,\"start\":12178},{\"end\":12436,\"start\":12320},{\"end\":13218,\"start\":12473},{\"end\":14479,\"start\":14038},{\"end\":15006,\"start\":14481},{\"end\":15817,\"start\":15008},{\"end\":16898,\"start\":15819},{\"end\":17940,\"start\":16947},{\"end\":18040,\"start\":17942},{\"end\":18253,\"start\":18061},{\"end\":18746,\"start\":18255},{\"end\":19352,\"start\":18748},{\"end\":19893,\"start\":19367},{\"end\":20654,\"start\":19895}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10363,\"start\":10201},{\"attributes\":{\"id\":\"formula_1\"},\"end\":12070,\"start\":11725},{\"attributes\":{\"id\":\"formula_2\"},\"end\":13269,\"start\":13219},{\"attributes\":{\"id\":\"formula_3\"},\"end\":14020,\"start\":13308}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":6972,\"start\":6965},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":7349,\"start\":7341},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":7369,\"start\":7362},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":7439,\"start\":7432},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":9355,\"start\":9348},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":14159,\"start\":14152},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":15904,\"start\":15897},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":15936,\"start\":15929}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":976,\"start\":964},{\"attributes\":{\"n\":\"2\"},\"end\":4374,\"start\":4342},{\"attributes\":{\"n\":\"2.1\"},\"end\":4414,\"start\":4377},{\"end\":5196,\"start\":5189},{\"attributes\":{\"n\":\"2.2\"},\"end\":7778,\"start\":7734},{\"attributes\":{\"n\":\"3\"},\"end\":9391,\"start\":9359},{\"end\":11724,\"start\":11685},{\"attributes\":{\"n\":\"5.\"},\"end\":12471,\"start\":12439},{\"end\":13307,\"start\":13271},{\"attributes\":{\"n\":\"4\"},\"end\":14036,\"start\":14022},{\"attributes\":{\"n\":\"5\"},\"end\":16945,\"start\":16901},{\"attributes\":{\"n\":\"6\"},\"end\":18059,\"start\":18043},{\"attributes\":{\"n\":\"7\"},\"end\":19365,\"start\":19355},{\"end\":20676,\"start\":20656},{\"end\":20862,\"start\":20858},{\"end\":22227,\"start\":22217},{\"end\":22380,\"start\":22370},{\"end\":22493,\"start\":22483},{\"end\":22867,\"start\":22857},{\"end\":22978,\"start\":22968},{\"end\":24303,\"start\":24293},{\"end\":24366,\"start\":24357},{\"end\":24725,\"start\":24716},{\"end\":25050,\"start\":25041}]", "table": "[{\"end\":24714,\"start\":24702},{\"end\":25039,\"start\":24770},{\"end\":25209,\"start\":25052},{\"end\":25503,\"start\":25436}]", "figure_caption": "[{\"end\":20856,\"start\":20679},{\"end\":22215,\"start\":20865},{\"end\":22368,\"start\":22229},{\"end\":22481,\"start\":22382},{\"end\":22855,\"start\":22495},{\"end\":22966,\"start\":22869},{\"end\":24291,\"start\":22980},{\"end\":24355,\"start\":24305},{\"end\":24702,\"start\":24368},{\"end\":24770,\"start\":24727},{\"end\":25436,\"start\":25212}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":7192,\"start\":7184},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":15423,\"start\":15415}]", "bib_author_first_name": "[{\"end\":30565,\"start\":30564},{\"end\":30576,\"start\":30575},{\"end\":30585,\"start\":30584},{\"end\":30595,\"start\":30594},{\"end\":30613,\"start\":30612},{\"end\":30830,\"start\":30829},{\"end\":31007,\"start\":31006},{\"end\":31017,\"start\":31016},{\"end\":31030,\"start\":31029},{\"end\":31038,\"start\":31037},{\"end\":31048,\"start\":31047},{\"end\":31058,\"start\":31057},{\"end\":31072,\"start\":31071},{\"end\":31084,\"start\":31083},{\"end\":31095,\"start\":31094},{\"end\":31712,\"start\":31711},{\"end\":31722,\"start\":31721},{\"end\":31734,\"start\":31733},{\"end\":31744,\"start\":31743},{\"end\":32228,\"start\":32227},{\"end\":32346,\"start\":32345},{\"end\":32743,\"start\":32742},{\"end\":32755,\"start\":32754},{\"end\":32761,\"start\":32760},{\"end\":33188,\"start\":33187},{\"end\":33610,\"start\":33609},{\"end\":33622,\"start\":33621},{\"end\":34094,\"start\":34093},{\"end\":34100,\"start\":34099},{\"end\":34109,\"start\":34108},{\"end\":34116,\"start\":34115},{\"end\":34129,\"start\":34128},{\"end\":34131,\"start\":34130}]", "bib_author_last_name": "[{\"end\":30573,\"start\":30566},{\"end\":30582,\"start\":30577},{\"end\":30592,\"start\":30586},{\"end\":30610,\"start\":30596},{\"end\":30620,\"start\":30614},{\"end\":30839,\"start\":30831},{\"end\":31014,\"start\":31008},{\"end\":31027,\"start\":31018},{\"end\":31035,\"start\":31031},{\"end\":31045,\"start\":31039},{\"end\":31055,\"start\":31049},{\"end\":31069,\"start\":31059},{\"end\":31081,\"start\":31073},{\"end\":31092,\"start\":31085},{\"end\":31104,\"start\":31096},{\"end\":31719,\"start\":31713},{\"end\":31731,\"start\":31723},{\"end\":31741,\"start\":31735},{\"end\":31754,\"start\":31745},{\"end\":32236,\"start\":32229},{\"end\":32355,\"start\":32347},{\"end\":32752,\"start\":32744},{\"end\":32758,\"start\":32756},{\"end\":32765,\"start\":32762},{\"end\":33197,\"start\":33189},{\"end\":33619,\"start\":33611},{\"end\":33631,\"start\":33623},{\"end\":34097,\"start\":34095},{\"end\":34106,\"start\":34101},{\"end\":34113,\"start\":34110},{\"end\":34126,\"start\":34117},{\"end\":34138,\"start\":34132}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":30526,\"start\":25797},{\"attributes\":{\"id\":\"b1\"},\"end\":30827,\"start\":30528},{\"attributes\":{\"id\":\"b2\"},\"end\":30928,\"start\":30829},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":16688335},\"end\":31623,\"start\":30930},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":8308016},\"end\":32194,\"start\":31625},{\"attributes\":{\"id\":\"b5\"},\"end\":32302,\"start\":32196},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":16655537},\"end\":32668,\"start\":32304},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":12496035},\"end\":33120,\"start\":32670},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17410492},\"end\":33532,\"start\":33122},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":165546},\"end\":34029,\"start\":33534},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":2239051},\"end\":34544,\"start\":34031}]", "bib_title": "[{\"end\":26227,\"start\":25797},{\"end\":30562,\"start\":30528},{\"end\":31004,\"start\":30930},{\"end\":31709,\"start\":31625},{\"end\":32343,\"start\":32304},{\"end\":32740,\"start\":32670},{\"end\":33185,\"start\":33122},{\"end\":33607,\"start\":33534},{\"end\":34091,\"start\":34031}]", "bib_author": "[{\"end\":30575,\"start\":30564},{\"end\":30584,\"start\":30575},{\"end\":30594,\"start\":30584},{\"end\":30612,\"start\":30594},{\"end\":30622,\"start\":30612},{\"end\":30841,\"start\":30829},{\"end\":31016,\"start\":31006},{\"end\":31029,\"start\":31016},{\"end\":31037,\"start\":31029},{\"end\":31047,\"start\":31037},{\"end\":31057,\"start\":31047},{\"end\":31071,\"start\":31057},{\"end\":31083,\"start\":31071},{\"end\":31094,\"start\":31083},{\"end\":31106,\"start\":31094},{\"end\":31721,\"start\":31711},{\"end\":31733,\"start\":31721},{\"end\":31743,\"start\":31733},{\"end\":31756,\"start\":31743},{\"end\":32238,\"start\":32227},{\"end\":32357,\"start\":32345},{\"end\":32754,\"start\":32742},{\"end\":32760,\"start\":32754},{\"end\":32767,\"start\":32760},{\"end\":33199,\"start\":33187},{\"end\":33621,\"start\":33609},{\"end\":33633,\"start\":33621},{\"end\":34099,\"start\":34093},{\"end\":34108,\"start\":34099},{\"end\":34115,\"start\":34108},{\"end\":34128,\"start\":34115},{\"end\":34140,\"start\":34128}]", "bib_venue": "[{\"end\":26880,\"start\":26229},{\"end\":30658,\"start\":30622},{\"end\":30866,\"start\":30841},{\"end\":31206,\"start\":31106},{\"end\":31850,\"start\":31756},{\"end\":32225,\"start\":32196},{\"end\":32438,\"start\":32357},{\"end\":32846,\"start\":32767},{\"end\":33280,\"start\":33199},{\"end\":33727,\"start\":33633},{\"end\":34226,\"start\":34140},{\"end\":31293,\"start\":31208},{\"end\":31931,\"start\":31852},{\"end\":32506,\"start\":32440},{\"end\":32912,\"start\":32848},{\"end\":33348,\"start\":33282},{\"end\":33808,\"start\":33729},{\"end\":34299,\"start\":34228}]"}}}, "year": 2023, "month": 12, "day": 17}