{"id": 118646257, "updated": "2023-09-28 10:16:29.905", "metadata": {"title": "Quantum Error Correction for Quantum Memories", "authors": "[{\"first\":\"Barbara\",\"last\":\"Terhal\",\"middle\":[\"M.\"]}]", "venue": "Rev. Mod. Phys. 87, 307 (2015)", "journal": null, "publication_date": {"year": 2013, "month": null, "day": null}, "abstract": "Active quantum error correction using qubit stabilizer codes has emerged as a promising, but experimentally challenging, engineering program for building a universal quantum computer. In this review we consider the formalism of qubit stabilizer and subsystem stabilizer codes and their possible use in protecting quantum information in a quantum memory. We review the theory of fault-tolerance and quantum error-correction, discuss examples of various codes and code constructions, the general quantum error correction conditions, the noise threshold, the special role played by Clifford gates and the route towards fault-tolerant universal quantum computation. The second part of the review is focused on providing an overview of quantum error correction using two-dimensional (topological) codes, in particular the surface code architecture. We discuss the complexity of decoding and the notion of passive or self-correcting quantum memories. The review does not focus on a particular technology but discusses topics that will be relevant for various quantum technologies.", "fields_of_study": "[\"Physics\"]", "external_ids": {"arxiv": "1302.3428", "mag": "1984021697", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": null, "doi": "10.1103/revmodphys.87.307"}}, "content": {"source": {"pdf_hash": "3a0f4231bf931d1e3eb97b2ced99d0be0ca5c1c3", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1302.3428v7.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1302.3428", "status": "GREEN"}}, "grobid": {"id": "7add6a3a4afcb2ac6d4f7246803220ebfa6b6b41", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/3a0f4231bf931d1e3eb97b2ced99d0be0ca5c1c3.txt", "contents": "\nQuantum Error Correction for Quantum Memories\nNovember 21, 2013\n\nB M Terhal \nInstitute for Quantum Information\nRWTH Aachen University\n52056AachenGermany\n\nQuantum Error Correction for Quantum Memories\nNovember 21, 2013\nThis is a pedagogical review of the formalism of stabilizer codes and their possible use in protecting quantum information. We discuss several codes of particular physical interest such as the qubit-into-oscillator code, 2D topological error correction and 2D subsystem codes. The emphasis in this review is on the use of such codes as a quantum memory although we also discuss fault-tolerance theory and quantum universality.\n\na scheme in which the physical representation of quantum information and realization of logical gates would be naturally robust due to the topological nature of the 2D physical system [1]. Around the same time Peter Shor formulated a first quantum error-correcting code and proved that a quantum computer could be made fault-tolerant [2]. Several authors then established the fault-tolerance threshold theorem (see Theorem 1) which shows that in principle one can realize almost noise-free quantum computation using noisy components at the cost of moderate overhead.\n\nIn this review we will discuss the basic ideas behind error correction: we will focus on quantum error correction using stabilizer codes for the purpose of making a quantum memory. Experimental efforts have not advanced very much into the domain of scalable quantum error correction. Several experiments exist of the 3-qubit (or 5-qubit) repetition code in liquid NMR, ion-trap, optical and superconducting qubits. Four qubit stabilizer pumping has been realized in ion-trap qubits [3]. Some topological quantum error correction has been implemented with eight-photon cluster states in [4] and a continuous-variable version of Shor's 9-qubit code was implemented with optical beams [5]. Given the advances in coherence times and ideas of multi-qubit scalable design, in particular in iontrap and superconducting qubits, one may hope to see more scalable error correction, fine-tuned to experimental capabilities and constraints, in the years to come.\n\n\nShor's Code and The Stabilizer Formalism\n\nThe smallest classical code which can correct a single bit-flip error (represented by Pauli X 1 ) is the 3-(qu)bit repetition code where we encode 0 = |000 and 1 = |111 . A single error can be corrected by taking the majority of the three bit values and flipping the bit which is different from the majority. In quantum error correction we don't want to measure the 3 qubits to take a majority vote, as we would immediately loose the quantum information represented in the phase and amplitude of an encoded state \u03c8 = \u03b1 0 + \u03b2 1 .\n\nBut we can imagine measuring the parity checks Z 1 Z 2 and Z 2 Z 3 without learning the state of each individual qubit. Fig. 1(a) shows the quantum circuit which measures a parity check represented by a Pauli operator P using an ancilla qubit. Other than giving us parity information, the ideal parity measurement also provides a discretization of errors which is not naturally present in elementary quantum systems. Through interaction with classical or quantum systems the amplitude and phase of a qubit will fluctuate over time: bare quantum information encoded in atomic, photonic, spin or other single quantum systems is barely information as it is constantly at drift. An ideal parity measurement discretizes this continuum of errors into a discrete set of a Pauli errors (X, Y, Z or I on each qubit) which are amenable to correction. If the parity checks Z 1 Z 2 and Z 2 Z 3 have eigenvalues +1, one concludes no error. An outcome, say, of Z 1 Z 2 = \u22121 and Z 2 Z 3 = 1 is consistent with the erred state X 1 \u03c8 where \u03c8 is any encoded state.\n\nLet us informally introduce some of the notions used in describing a quantum (stabilizer) code. For a code C encoding k qubits, one defines k pairs of logical Pauli operators (X i , Z i ), i = 1, . . . k, such that X i Z i = \u2212Z i X i while logical Pauli operators with labels i and i mutually commute (realizing the algebra of Pauli operators acting on k logical qubits). For the 3-qubit code we have X = X 1 X 2 X 3 and Z = Z 1 .\n\nThe code space of a code C encoding k qubits is spanned by the codewords |x where x is a kbitstring. All states in the codespace obey the parity checks, meaning that the parity check operators have eigenvalue +1 for all states in the code space. In other words, the parity checks act trivially 1 Pauli \u03c3 x \u2261 X = 0 1 1 0 , \u03c3 z \u2261 Z = 1 0 0 \u22121 and \u03c3 y \u2261 Y = 0 \u2212i i 0 = iXZ.\n\non the codespace. The logical operators of a quantum error-correcting code are non-unique as we can multiply them by the trivially-acting parity check operators to obtain equivalent operators. For example, Z for the 3-qubit code is either Z 1 or Z 2 , or Z 3 or Z 1 Z 2 Z 3 . The 3-qubit repetition code does not protect or detect Z (dephasing) errors as the parity checks only measure information in the Z-basis (M Z ). Shor's 9-qubit code was the first quantum errorcorrecting code which encodes a single qubit and corrects any single qubit Pauli error. Shor's code is obtained from the 3-qubit repetition code by concatenation. Code concatenation is a procedure in which we take the elementary qubits of the codewords of a code C and replace them by encoded qubits of a new code C . In Shor's construction we choose the first code C as the repetition code in the Hadamard-rotated basis (H : X \u2194 Z) with codewords |+ = |+ + + and |\u2212 = |\u2212 \u2212 \u2212 . The parity checks of C are X 1 X 2 and X 2 X 3 and the logical operators are Z C = Z 1 Z 2 Z 3 and X C = X 1 . As the second code C we choose the normal 3-qubit repetition code, i.e. we replace |+ by |+ = We get all the parity checks for the concatenated 9-qubit code by taking all the parity checks of the codes C and taking the C -encoded parity checks of C. For Shor's code this will give: the Z-checks Z 1 Z 2 , Z 2 Z 3 , Z 4 Z 5 , Z 5 Z 6 , Z 7 Z 8 and Z 8 Z 9 (from three uses of the code C ) and the X-checks X 1 X 2 X 3 X 4 X 5 X 6 , X 4 X 5 X 6 X 7 X 8 X 9 (from the parity checks X 1 X 2 and X 2 X 3 where X is the logical operator of the code C ). The non-unique logical operators of the encoded qubit are Z = Z 1 Z 4 Z 7 and X = X 1 X 2 X 3 .\n\nThis code can clearly correct any X error as it consists of three qubits each of which is encoded in the repetition code which can correct an X error. What happens if a single Z error occurs on any of the qubits? A single Z error will anti-commute with one of the parity X-checks or with both. For example, the error Z 1 anti-commutes with X 1 X 2 X 3 X 4 X 5 X 6 so that the state Z 1 \u03c8 has eigenvalue \u22121 with respect to this parity check. The eigenvalues of the parity check operators are called the error syndrome. Aside from detecting errors (finding \u22121 syndrome values) the error syndrome should allow one to infer which error occurred.\n\nOne feature of quantum error correcting codes which is different from classical error correcting codes, is that this inference step does not necessarily has to point to a unique error. For example:\n\nfor the 9-qubit code, the error Z 1 and the error Z 2 have an equivalent effect on the codespace as Z 1 Z 2 is a parity check which acts trivially on the code space. The syndromes for errors which are related by parity checks are always identical. The classical algorithm which processes the syndrome to infer an error, -this procedure is called decoding-, does not need to choose between such equivalent errors. But there is further ambiguity in the error syndrome. For Shor's code the error Z 1 and the error Z 4 Z 7 have an identical syndrome as Z 1 Z 4 Z 7 is the Z operator which commutes with all parity checks. If we get a single non-trivial (\u22121) syndrome for the parity check X 1 X 2 X 3 X 4 X 5 X 6 we could decide that the error is Z 1 or Z 4 Z 7 . But if we make a mistake in this decision and correct with Z 4 Z 7 while Z 1 happened then we have effectively performed a Z without knowing it! This means that the decoding procedure should decide between errors, -all consistent with the error syndrome-, which are mutually related by logical operators.\n\nHow is this decision made? We could assign a probability to each possible error: this assignment is captured by the error model. Then our decoding procedure can simply choose an error (or class of equivalent errors), consistent with the syndrome, which has highest probability. We will discuss the procedure of decoding more formally in Section 1.1.1 after we introduce the stabilizer formalism. For Shor's code we decode the syndrome by picking a single qubit error which is consistent with the syndrome. If a two-qubit error occurred we may thus have made a mistake. However, for Shor's code there are no two single-qubit errors E 1 and E 2 with the same syndrome whose product E 1 E 2 is a logical operator. This implies that Shor's code can correct any single qubit error. It is a [[n, k, d]] = [ [9,1,3]] code, encoding k = 1 qubit into n = 9 (n is called the block size of the code) and having distance d = 3. The distance d of the code is defined as the minimum weight of any logical operator (see the formal definition in Eq. (1)). The weight of a Pauli operator is the number of qubits on which it acts non-trivially. We take the minimum weight as there are several logical operators and the weight of each one of them can be varied by multiplication with parity checks. It is simple to understand why a code with distance d = 2t + 1 can correct t errors: errors of weight at most t have the property that their products have weight at most 2t < d and therefore the product can never be a logical operator as those have weight d or more. Thus our decoding procedure which picks an error of weight at most t can never lead to a logical error. If errors only takes place on some known subset of qubits, then a code with distance d can correct (errors on) subsets of size d \u2212 1 as the product of any two Pauli errors on this subset has weight at most d \u2212 1. In other words, if d \u2212 1 or fewer qubits of the codeword fall into a black hole (or those qubits are lost or erased by other means) one can still recover the entire codeword from the remaining qubits.\n\nClearly the usefulness of (quantum) error correction is directly related to the error model; it hinges on the assumption that low-weight errors are more likely than high-weight errors. Error-correcting a code which can perfectly correct errors with weight at most t, will lead to failure with probability roughly equal to the total probability of errors of weight larger than t. This probability for failure of error correction is called the logical error rate. The goal of quantum error correction is to use redundancy and correction to realize logical qubits with logical error rates below the error rate of the elementary constituent qubits.\n\nIt seems rather simplistic to use error models which assign X, Z and Y errors probabilistically to qubits as in real quantum information amplitudes and phases are drifting rather than undergoing discretized errors. Ideal parity measurement can induce such discrete error model stated in terms of probabilities, but as parity measurements themselves will be inaccurate in a continuous fashion, such fully digitized picture is an oversimplification. The theory of quantum fault-tolerance, see Section 1.3, has developed a framework which allows one to establish the results of quantum error correction and fault-tolerance for very general quantum dynamics obeying physical locality assumptions (see the comprehensive results in [6]). However, for numerical studies of code performance it is impossible to simulate such more general open system dynamics and several simple error models are used to capture the expected performance of the codes.\n\nThree important remarks can be made with this general framework in mind. The simplest message is that a code which can correct t Pauli errors can in fact correct any possible error on a subset of t qubits (described for example by some noisy superoperator or master equation for the qubits). This point can be readily understood in the case of ideal parity check measurements where the measurement projects the set of possible errors onto the set of Pauli errors. Secondly, errors can be correlated in space and time arising from non-Markovian dynamics, but as long as (1) we use the proper estimate of the strength of the noise (which may involve using amplitudes and norms rather than probabilities) and (2) the noise is sufficiently short-ranged (meaning that noisy interactions between distant uncoupled qubits are sufficiently weak [7]), fault-tolerance threshold results can be established. The third remark is that qubit coding does not directly deal with leakage errors. As many elementary qubits are realized as two-level subspaces of higher-dimensional systems to which they can leak, other protective mechanisms such as cooling (or teleporting to a fresh qubit) will need to be employed in order to convert a leakage error into a regular error which can be corrected.\n\nLet us come back to Shor's code and imagine that the nine qubits are laid out in a 3 \u00d7 3 square array as in Fig. 13. It looks relatively simple to measure the parity Z-checks locally, while the weight-6 X-checks would require a larger circuit. But why should there be such asymmetry between the Xand Z-checks? Imagine that instead of measuring X =,1 \u2261 X 1 X 2 X 3 X 4 X 5 X 6 , we measure (in parallel or sequentially) the eigenvalues of X 1 X 4 , X 2 X 5 and X 3 X 6 and take the product of these eigenvalues to obtain the eigenvalue of X =,1 . The important property of these weight-2 operators is that all individually commute with the logical operators X and Z of the Shor code, hence measuring them does not change the expectation values of X and Z. These weight-2 X-checks do not commute with the weight-2 Z-checks however. If we first measure all the weight-2 X-checks and then measure the Z-checks, then with the second step the eigenvalues of individual X-checks are randomized but correlated. Namely, their product X 1 X 2 X 3 X 4 X 5 X 6 remains fixed as X 1 X 2 X 3 X 4 X 5 X 6 commutes with the weight-2 Z-checks. By symmetry the weight-2 X-checks commute with Z ||,1 = Z 1 Z 2 Z 4 Z 5 Z 7 Z 8 and Z ||,2 = Z 2 Z 3 Z 5 Z 6 Z 8 Z 9 . Viewing the Shor code this way we can imagine doing error correction and decoding using the stable commuting parity checks X =,1 , X =,2 , Z ||,1 , Z ||,2 while we deduce their eigenvalues from measuring 12 weight-2 parity checks. Shor's code in this form is the smallest member in the family of Bacon-Shor codes [[n 2 , 1, n]] whose qubits can be laid out in a n\u00d7n array as in Fig. 13, see Section 2.2. The Bacon-Shor code family in which non-commuting (low-weight) parity checks are measured in order to deduce the eigenvalues of commuting parity checks is an example of a (stabilizer) subsystem code.\n\n\nStabilizer (Subsystem) Codes 2\n\nShor's code and many existing codes defined on qubits are examples of stabilizer codes [8]. Stabilizer codes are attractive as (i) they are the straightforward quantum generalization of classical binary linear codes, (ii) their logical operators and distance are easily determined, (iii) understanding of how to construct universal sets of logical gates and (iv) the numerical analysis of code performance are relatively simple. The main idea of stabilizer codes is to encode k logical qubits into n physical qubits using a subspace, the codespace, L \u2286 (C 2 ) \u2297n spanned by states |\u03c8 that are invariant under the action of a stabilizer group S,\nL = {|\u03c8 \u2208 (C 2 ) \u2297n : P |\u03c8 = |\u03c8 \u2200P \u2208 S}.\nHere S is an Abelian subgroup of the Pauli group P n = iI, X 1 , Z 1 , . . . , X n , Z n such \u2212I / \u2208 S. For any stabilizer group S one can always choose a set of generators S 1 , . . . , S m , i.e. S = S 1 , . . . , S m , such that S a \u2208 P n are hermitian Pauli operators. The mutually commuting parity checks which we considered before are the generators of the stabilizer group. If there are n \u2212 k linearly independent generators (parity checks) then the codespace L is 2 k -dimensional, or encodes k qubits. The weight |P | of a Pauli operator P = P 1 . . . P n \u2208 P n is the number of non-identity single-qubit Pauli operators P i . If the code encodes k logical qubits, it is always possible to find k pairs of logical operators (X j , Z j ) j=1,...,k . These logical operators commute with all the parity checks, i.e. they commute with all elements in S as they preserve the codespace. However they should not be generated by the parity checks themselves otherwise their action on the code space is trivial. The centralizer C(S) of S in P n is defined as C(S) = {P \u2208 P n |\u2200s \u2208 S, P s = sP }, i.e. all operators in P n which commute with S. We thus have C(S) = S, X 1 , Z 1 , . . . , X k , Z k , i.e. the logical operators of the code are elements of C(S) \\ S as they are in C(S) but not in S. The distance d of a stabilizer code can then be defined as\nd = min P \u2208C(S)\\S |P |.(1)\nError correction proceeds by measuring the error syndrome s which are the \u00b11 eigenvalues of the generators of S. As we mentioned in Section 1.1 this syndrome will not point to a unique Pauli error but an equivalent class of errors. This class is a coset ES of the group S in P n , where E = E(s) is an error which is consistent with the syndrome s. We can denote the coset as [E] = ES with coset representative E 3 and associate a total probability Prob([E]) = s\u2208S Prob(Es) with the coset depending on some error model which assigns a probability Prob(P ) to every Pauli operator P \u2208 P n . If the syndrome is consistent with [E] it is also consistent with [EP ] where P is any logical operator (as the logical operators commute with S). Maximum likelihood decoding is the procedure by which, given a syndrome s and a coset representative E(s), one finds the logical operator P (which could be I) which has the maximum value for Prob([EP ]). It is important to consider how efficiently (in the number n of elementary qubits) this task can be done as Prob([EP ]), -essentially a partition function-, is a sum over the number of elements in S which is exponential in n. For a simple depolarizing error model where each qubit undergoes a X, Y or Z error with probability p/3 and no error with probability 1 \u2212 p, we have Prob([EP ]) = (1 \u2212 p) n s\u2208S exp(\u2212\u03b2|EP s|) with inverse 'temperature' \u03b2 = ln(3(1 \u2212 p)/p). For small error rates p 1 corresponding to low temperatures \u03b2 \u2192 \u221e, the value of the partition function is dominated by the contribution of the lowest-weight error(s). Thus, instead of maximum likelihood decoding which compares the relative values of Prob([EP ]), one can also opt for minimum-weight decoding. In minimum-weight decoding one simply picks an error E(s), consistent with the syndrome s, which has minimum weight |E|. We will discuss this decoding method for the surface code in Section 2.\n\nSubsystem stabilizer codes can be viewed as stabilizer codes in which some logical qubits, called gauge qubits, are not used to encode information [9]. The state of these qubits is irrelevant and can be fixed (gauge-fixing) or left variable. The presence of the gauge qubits sometimes lets one simplify the measurement of the stabilizer parity checks as the state of the gauge qubits is allowed to freely change under these measurements. One takes a stabilizer code S and splits its logical operators (X i , Z i ) into two groups: the gauge qubit logical operators (X i , Z i ), i = 1 . . . m and the remaining logical operators (X i , Z i ) with i = m + 1, . . . k. We define a new subgroup G = S, X 1 , Z 1 , . . . X m , Z m which is non-Abelian and contains S. As G is non-Abelian we can consider its center, i.e. G \u2229 C(G) = {P \u2208 G| \u2200g \u2208 G, P g = gP } = S (modulo trivial elements).\n\nIf we measure the generators of the group G we can deduce the eigenvalues of S. Since the k \u2212 m logical operators (X i , Z i ), i = m + 1, . . . , k commute with G, these logical operators are unaffected by the measurement. A priori there is no reason why measuring the generators of G would be simpler than measuring the generators of the stabilizer S. In the interesting constructions such as the Bacon-Shor code and the subsystem surface code discussed in Section 2, we gain as we measure very low-weight parity checks in G (while we lose by allowing more qubit-overhead or declining noise threshold).\n\nThe distance of a subsystem code is not the same as that of a stabilizer code, Eq. (1), as we should only consider the minimum weight of the k \u2212 m logical operators. These logical operators are not unique as they can be multiplied by elements in S but also by the logical operators of the irrelevant gauge qubits. This motivates the definition of the distance as d = min P \u2208C(S)\\G |P |. As errors on the gauge qubits are harmless it means that equivalent classes of errors are those related to each other by elements in G. Given the eigenvalues of the stabilizer generators, the syndrome s, the decoding algorithm considers cosets E(s)G in P n , denoted as [E] = EG. Maximum likelihood decoding proceeds by determining the coset [EP ] which has a maximum value for Prob([EP ]) = g\u2208G Prob(EP g) where P varies over the possible logical operators.\n\n\nStabilizer Code Examples and The CSS Construction\n\nWe discuss a few small examples of stabilizer codes to illustrate the formalism. For the two-qubit code with 0 = 1 \u221a 2 (|00 + |11 ) and 1 = 1 \u221a 2 (|01 + |10 ) we have X = X 1 or X = X 2 and Z = Z 1 Z 2 . The code can detect any single Z error as such error maps the two codewords onto the orthogonal states 1 \u221a 2 (|00 \u2212 |11 ) and 1 \u221a 2 (|01 \u2212 |10 ) (as Z is of weight-2). The code can't detect single X errors as these are logical operators.\n\nThe smallest non-trivial quantum code is the [[4, 2, 2]] error-detecting code. Its linearly independent parity checks are X 1 X 2 X 3 X 4 and Z 1 Z 2 Z 3 Z 4 : the code encodes 4 \u2212 2 = 2 qubits. You can verify that you can choose X 1 = X 1 X 2 , Z 1 = Z 1 Z 3 and X 2 = X 2 X 4 , Z 2 = Z 3 Z 4 as the logical operators which commute with the parity checks. The code distance is 2 which means that the code cannot correct a single qubit error. The code can however still detect any single qubit error as any single qubit error anti-commutes with at least one of the parity checks which leads to a nontrivial \u22121 syndrome. Alternatively, we can view this code as a subsystem code which has one logical qubit, say, qubit 1, and one gauge qubit, qubit 2. In that case\nG = X 1 X 2 X 3 X 4 , Z 1 Z 2 Z 3 Z 4 , Z 3 Z 4 , X 2 X 4 = Z 1 Z 2 , Z 3 Z 4 , X 1 X 3 , X 2 X 4 ,\nshowing that measuring weight-2 checks would suffice to detect single qubit errors on the encoded qubit 1.\n\nAnother example is the stabilizer code C 6 (defined in [10]) with parity checks X 1 X 4 X 5 X 6 , X 1 X 2 X 3 X 6 , Z 1 Z 4 Z 5 Z 6 and Z 1 Z 2 Z 3 Z 6 acting on 6 qubits. This code has 4 independent parity checks, hence it encodes 6 \u2212 4 = 2 qubits with the logical operators X 1 = X 2 X 3 , Z 1 = Z 1 Z 2 Z 4 and X 2 = X 1 X 2 X 4 , Z 2 = Z 4 Z 5 . As its distance is 2, it can only detect single X or Z errors (but note that it can correct a single X error on qubit 1, or Z error on qubit 2).\n\nOne can concatenate this code C 6 with the code [ [4,2,2]] (called C 4 in [10]) by replacing the three pairs of qubits, i.e. the pairs (12), (34) and (56), in C 6 by three sets of C 4 -encoded qubits, to obtain a new code. This code has thus n = 12 qubits and encodes k = 2 qubits. We can represent these 12 qubits as 3 sets of 4 qubits such that the X-checks read\nS(X) = \uf8eb \uf8ec \uf8ec \uf8ec \uf8ec \uf8ed\nX X X X I I I I I I I I I I I I X X X X I I I I I I I I I I I I X X X X X X I I I X I X X I I X X I I X X X I I I X I X One can verify that the minimum weight of the logical operators of this concatenated code is 4. Thus the code is a [ [12,2,4]] code, able to correct any single error and to detect any three errors.\n\nOne could repeat the concatenation step and recursively concatenate C 6 with itself (replacing a pair of qubits by three pairs of qubits etc.) as in Knill's C 4 /C 6 architecture [10] or, alternatively, recursively concatenate C 4 with itself as was considered in [11]. Note that in general when we concatenate a [[n 1 , 1, d 1 ]] code with a [[n 2 , 1, d 2 ]] code, we obtain a code which encodes one qubit into n = n 1 n 2 qubits and has distance d = d 1 d 2 . Code concatenation is a useful way to obtain a large code from smaller codes as the number of syndrome collections scales linearly with the number of concatenation steps while the number of qubits and the distance grows exponentially with the number of concatenation steps. In addition, decoding of a concatenated code is efficient in the block-size n of the code and the performance of decoding can be strongly enhanced by using message passing between concatenation layers [12].\n\nThe smallest stabilizer code which encodes 1 qubit and corrects 1 error is the [ [5,1,3]] code; you can find its parity checks in [13]. Another well-known code is Steane's 7-qubit code, [[7, 1, 3]] which is constructed from two classical codes using the Calderbank-Shor-Steane (CSS) construction. Classical binary linear codes are fully characterized by their parity check matrix H. The parity check matrix H 1 of a code C 1 encoding k 1 bits is a (n \u2212 k 1 ) \u00d7 n matrix with 0,1 entries where linearly independent rows represent the parity checks. The binary vectors c \u2208 {0, 1} n which obey the parity checks, i.e. Hc = 0 (where addition is modulo 2), are the codewords. The distance d = 2t + 1 of such classical code is the minimum (Hamming) weight of any codeword and the code can correct t errors.\n\nWe can represent a row r of H 1 of a code C 1 by a parity check operator s(Z) such that for the bit r i = 1 we take s(Z) i = Z and for bit r i = 0 we set s(Z) i = I. These parity checks generate some stabilizer group S 1 (Z). In order to make this into a quantum code with distance larger than one, one needs to add X-type parity checks. These could simply be obtained from the (n \u2212 k 2 ) \u00d7 n parity check matrix H 2 of another classical code C 2 . We obtain the stabilizer parity checks S 2 (X) by replacing the 1s in each row of this matrix by Pauli X and I otherwise. But in order for S = S 1 (Z), S 2 (X) to be an Abelian group the checks all have to commute. This implies that every parity X-check should overlap on an even number of qubits with every parity Z-check. In coding words it means that the rows of H 2 have to be orthogonal to the rows of H 1 . This in turn can be expressed as C \u22a5 2 \u2286 C 1 where C \u22a5 2 is the code dual to C 2 (codewords of C \u22a5 2 are all the binary vectors orthogonal to all codewords c \u2208 C 2 ).\n\nIn total S = S 1 (Z), S 2 (X) will be generated by 2n \u2212 k 1 \u2212 k 2 independent parity checks so that the quantum code encodes k 1 + k 2 \u2212 n qubits. The distance of the quantum code is the minimum of the distance d(C 1 ) and d(C 2 ) as one code is used to correct Z errors and the other code is used to correct X errors.\n\nA good example is Steane's code which is constructed using a classical binary code C which encodes 4 bits into 7 bits and has distance 3. Its parity check matrix is\nH = \uf8eb \uf8ed 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 0 1 0 1 0 1 \uf8f6 \uf8f8 .(2)\nThe codewords c which obey Hc = 0 are linear combinations of the 7 \u2212 3 = 4 binary vectors (1, 1, 1, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1), (0, 1, 1, 0, 0, 1, 1), (1, 0, 1, 0, 1, 0, 1) where the last three are the rows of the parity check matrix: these are also codewords of C \u22a5 . Hence C \u22a5 \u2286 C and we can use the CSS construction with C 1 = C and C 2 = C to get a quantum code. As C \u22a5 (as well as C) has distance 3, the quantum code will have distance 3 and encodes one qubit. The parity checks are\nZ 4 Z 5 Z 6 Z 7 , Z 2 Z 3 Z 6 Z 7 , Z 1 Z 3 Z 5 Z 7 and X 4 X 5 X 6 X 7 , X 2 X 3 X 6 X 7 , X 1 X 3 X 5 X 7 .\n\nQEC Conditions and Other Small Codes of Physical Interest\n\nOne may ask what properties a general (not necessarily stabilizer) quantum code, -defined as some subspace C of a physical state space-, should obey in order for a certain set of errors to be correctable. These properties are expressed as the quantum error-correcting conditions which can hold exactly or only approximately. We encode some k qubits into a codespace C so that i are the codewords encoding the k-bit strings i. Assume there is a set of errors E = {E l } against which we wish to correct. For example we can describe the short-term decoherence effects on the qubits by a superoperator S(\u03c1) = l E l \u03c1E \u2020 l which has the Kraus error operators E l . The quantum error-correcting conditions say that there exists an error-correcting operation, a reversal of the error, if and only if the following conditions are obeyed for all errors\nE k , E l \u2208 E (1) \u2200i, j , i E \u2020 k E l j = c kl \u03b4 ij .(3)\nHere c kl is a constant independent of the codeword i . The condition for i = j says that the codewords are not distinguished by the error observables. The condition for i = j indicates that the orthogonal codewords need to remain orthogonal after the action of the errors (otherwise we could not undo the effect of the noise). Note that if a code can correct the error set {E i } it can also correct an error set {F j } where each F j is any linear combination of the elements E i as the set {F j } will also obey the quantum error-correcting conditions of Eq. (3). These QEC conditions can be generalized to the unified framework of operator quantum error correction [14,15] which covers both subsystem codes as well as error-avoidance techniques via the use of decoherence-free subspaces and noise-free subsystems.\n\n\nQuite commonly one describes an open system dynamics by a Markovian master equation of Lindblad form\nd\u03c1 dt = \u2212i[H, \u03c1] + L(\u03c1) \u2261 L tot (\u03c1) (4) where L(\u03c1) = j L j \u03c1L \u2020 j \u2212 1 2 {L \u2020 j L j , \u03c1} with quantum-jump or Lindblad operators L j while H is a harmless or desired driving Hamiltonian. For short times \u03c4 we have \u03c1(\u03c4 ) = S \u03c4 (\u03c1(0)) = E 0 \u03c1E \u2020 0 + i E i \u03c1E \u2020 i with E 0 \u2248 I \u2212 i\u03c4 H \u2212 1 2 \u03c4 i L \u2020 i L i = I \u2212 O(\u03c4 ) and E i \u2248 \u221a \u03c4 L i .\nThus the error set is approximately given by the quantum jump operators L i .\n\nLet us consider two simple codes which approximately obey the conditions in Eq. (3) for the physically relevant decoherence due to (amplitude) damping for qubits and bosonic modes. Even though the [ [5,1,3]] code is the smallest code which can correct against any single qubit error one can use 4 qubits to approximately correct any amplitude-damping error which can model energy loss [16]. The noise process for amplitude damping on a single qubit is given by the superoperator\nS(\u03c1) = i A i \u03c1A \u2020 i with A 0 = 1 2 ((1 + \u221a 1 \u2212 \u03ba)I + (1 \u2212 \u221a 1 \u2212 \u03ba)Z) \u2248 I \u2212 O(\u03ba) and A 1 = \u221a \u03ba\u03c3 \u2212 .\nThe codewords for the 4-qubit amplitude damping code are 0 = 1 \u221a 2 (|0000 + |1111 ) and 1 = 1 \u221a 2 (|0011 + |1100 ). Each qubit in this code is subjected to amplitude-damping noise. We wish to approximately correct against the error set\nE 0 = A \u22974 0 , E 1 = A 1 \u2297 A \u22973 0 , E 2 = A 0 \u2297 A 1 \u2297 A \u22972 0 , E 3 = A \u22972 0 \u2297 A 1 \u2297 A 0 and E 4 = A \u22973\n0 \u2297 A 1 which correspond to no damping and single qubit damping on any of the four qubits respectively. The authors in [16] show that this code obeys the QEC conditions approximately with O(\u03ba 2 ) corrections which is a quadratic improvement over the basic error rate \u03ba.\n\nAnother interesting example is that of a single bosonic mode (with creation and annihilation operators a \u2020 , a) which is used to encode a qubit in two orthogonal states which are approximately protected against photon loss [17]. The damping process can be modeled with the Lindblad equation, Eq. (4), with L = \u221a \u03baa while H = (\u03c9 + 1 2 )a \u2020 a (which we can transform away by going to the rotating frame at frequency \u03c9). One can choose two Schr\u00f6dinger cat states as encoded states\n0 + = 1 \u221a N + (|\u03b1 + |-\u03b1 ), 1 + = 1 \u221a N + (|i\u03b1 + |-i\u03b1 ).(5)\nHere |\u03b1 is a coherent state |\u03b1 = exp(\u2212|\u03b1| 2 /2) n \u03b1 n \u221a n! |n and N \u00b1 = 2(1 \u00b1 exp(\u22122|\u03b1| 2 )) \u2248 2. For sufficiently large photon number n = |\u03b1| 2 , the states |\u00b1\u03b1 , |\u00b1i\u03b1 (and thus 0 + and 1 + ) are approximately orthogonal. The creation and manipulation of such cat states has been actively explored for cavity modes in micro-wave cavities, see e.g. [18]. The code states are chosen such that loss of a photon from the cavity maps the states onto (approximately) orthogonal states. As a |\u03b1 = \u03b1 |\u03b1 , we have\na 0 + = \u03b1 N + /N \u2212 0 \u2212 , a 1 + = i\u03b1 N + /N \u2212 1 \u2212 ,(6)with 0 \u2212 = 1 \u221a N \u2212 (|\u03b1 \u2212 |-\u03b1 ) and 1 \u2212 = 1 \u221a N \u2212 (|i\u03b1 \u2212 |-i\u03b1 ).\nAs we know the preservation of orthogonality is a prerequisite for these code states to be correctable. One can verify that in the limit of |\u03b1| \u2192 \u221e we obey the QEC conditions 4 , Eq. (3), for E 0 = \u221a \u03baa and E 1 = I \u2212 \u03ba 2 a \u2020 a. The cat states will gradually loose their intensity and thus their approximate protection under these processes as the vacuum state |0 is the only stationary state of the Lindblad equation. Counterintuitively they do this by the process with Kraus operator E 1 , i.e. by not observing the photon emission, while the Kraus operator E 0 maps the state 0 + onto 0 \u2212 and vice-versa [18]. The codespace (spanned by 0 + , 1 + ) is distinguished from the orthogonal erred space (spanned by 0 \u2212 and 1 \u2212 ) by the parity operator exp(i\u03c0a \u2020 a) = n (\u22121) n |n n| = P even \u2212 P odd . This parity operator has +1 eigenvalue for the states 0 + , 1 + and \u22121 eigenvalue for the states 0 \u2212 , 1 \u2212 . By continuously monitoring the value of the parity operator exp(i\u03c0a \u2020 a) one could track the occurrence of errors. Better even would be the realization of a restoring operation which puts back an erred state with decayed amplitude \u03b1e \u2212\u03bat/2 into the code space while restoring the amplitude back to \u03b1 as proposed in [17] 5 . In [17] the interaction with superconducting qubits coupled to the cavity is proposed to be used for encoding, correction and decoding of the cat states.\n\nOne can generalize the stabilizer formalism to continuous-variable systems characterized by an infinite-dimensional Hilbert space [19,20] (see also [21]). Of particular interest are codes which encode a discrete amount of information, a qubit say, in a harmonic oscillator [22]. Given are two conjugate variablesp andq which represent generalized momentum and position, obeying [q,p] = i. The idea is to encode the information such that small shifts in position or momentum correspond to correctable errors while logical operators are represented as large shifts. For a harmonic oscillator space, the Pauli group P n can be generalized to the Weyl-Heisenberg group generated by the unitary operators exp(itp) and exp(isq) for real s and t. In order to define a qubit in this infinite-dimensional space we select a set of commuting check generators whose +1 eigenvalue space is two-dimensional.\n\nWe will consider three examples. In our first example the codespace is a single state and essentially represents a quantum rotor. We choose S q = e 2iq and S p = e \u2212i\u03c0p as commuting check operators 6 . When S p = 1 and S q = 1 the eigenvalues ofp are even integers whileq should have eigenvalues 0 mod \u03c0. Definingn =p/2 and\u03c6 = 2q, we obtain a quantum rotor with conjugate variable\u015d n = 0, \u00b11, . . . and 2\u03c0-periodic phase\u03c6. A realization of the quantum rotor is the quantization of a superconducting circuit where \u03c6 is the superconducting phase (across a junction) andn represents the number of Cooper pairs. As there is a unique state with fixed (say +1) eigenvalues for S q and S p , superconducting qubits such as the transmon qubit [23] use superpositions of states with different eigenvalues for S q = e i\u03c6 in order to encode information.\n\nA different choice of S q and S p leads to a real code which encodes a single qubit and has built-in protection. We choose as checks the operators S q = e 2iq and S p = e \u22122i\u03c0p . Fixing the eigenvalues of these operators to be +1 leads to the discretizationp = 0, \u00b11, \u00b12 . . . and againq should have eigenvalues which are multiples of \u03c0. Now there are two operators which commute with S q and S p but which mutually anti-commute: these are Z = e iq and X = e \u2212i\u03c0p . One can verify the proper commutation relations of S q , S p , X and Z, using e A e B = e [A,B] e B e A (when A, B are linear combinations ofq andp).\n\nThe state 0 (defined by Z 0 = 0 and S p 0 = 0 ) is a uniform superposition of states wit\u0125 q = 0, \u00b12\u03c0, . . .. Similarly, 1 corresponds to a uniform superposition ofq = \u00b1\u03c0, \u00b13\u03c0, . . ., see Fig. 2 with \u03b1 = \u03c0. Consider the effect of shifts of the form e i\u03b4p where |\u03b4| < \u03c0/2, which are correctable. Such shifts map the codewords outside of the codespace as they do not commute with the stabilizer operator S q . Error correction thus takes place by measuring q mod \u03c0 and applying the smallest shift which resets q = 0 mod \u03c0. Similarly, the |+ is a uniform superposition of states withp = 0, \u00b12, \u00b14, . . . while |\u2212 is a uniform superposition of states withp = \u00b11, \u00b13, . . ., see Fig. 2. The qubit is protected against shifts e i q with | | < 1/2. This code is realized as a Majorana fermion qubit wherep =n counts the total number of electrons whileq =\u03c6 is the \u03c0-periodic conjugate phase variable. The |+ eigenstate of X with an even number of electrons correspond to the Majorana mode unoccupied while |\u2212 is the state with an odd number of electrons as the Majorana mode is occupied. The protection of the Majorana fermion qubit can thus also be understood from this coding perspective although the formalism does of course not shed light on how to realize this qubit. Another realization of this code, which does not use Majorana fermion qubits, but superconducting circuits is the 0-\u03c0 qubit (see e.g. [24]) which is designed such that the superconducting phase difference between terminals has degenerate energy minima at 0 and \u03c0 corresponding to the approximate codewords 0 and 1 .  [22]: Amplitude of codewords for the stabilizer code with commuting checks S q (\u03b1) = e 2i\u03c0q/\u03b1 and S p (\u03b1) = e \u22122ip\u03b1 which encodes a qubit in an oscillator.\n\nMore generally, we can parametrize this code by a real number \u03b1 by taking the stabilizer checks as S q = e 2i\u03c0q/\u03b1 and S p = e \u22122ip\u03b1 (above we took \u03b1 = \u03c0). The logical operators are Z = e \u03c0iq/\u03b1 and X = e \u2212ip\u03b1 [22], see the codewords in Fig. 2. The code can correct against shifts e i q with | | < \u03c0 2\u03b1 and e \u2212i\u03b4p where |\u03b4| < \u03b1 2 . One can use this code for encoding a qubit in a bosonic mode whereq and p arise as quadrature variables, i.e.q = 1\n\u221a 2 (a \u2020 + a) andp = i \u221a 2 (a \u2020 \u2212 a).\nThe free Hamiltonian H 0 = \u03c9(a \u2020 a + 1 2 ) will periodically transformq intop and vice versa so it is natural to let S q be of the same form as S p and choose \u03b1 = \u221a \u03c0. The codewords of this code in Fig. 2 are not physically achievable as it requires an infinite amount of squeezing to prepare (superpositions of) of a quadrature eigenstates such as |q or |p . Ref. [22] proposed to use approximate codewords: for example the approximate codeword 0 is a superposition of Gaussian peaks in q-space, -each one centered at integer multiples of 2 \u221a \u03c0 with width \u2206-, in a total Gaussian envelope of width 1/\u03ba. Viewed as a superposition of p-eigenstates, such state is a superposition of peaks with width \u03ba and total envelope of width \u2206 \u22121 . An error analyis of this approximate encoding was done in [25], while [26] considered the preparation of the encoded states using cat states as in Eq. (5), squeezing and homodyne detection. In Section 2.1.3 we will consider a version of the surface or toric code which encodes an oscillator in a 2D coupled array of harmonic oscillators.\n\nThere are of course many codes which are not captured by the qubit (or qudit) stabilizer formalism. Here I would like to briefly mention the class of 2D topological qubit codes where the stabilizer checks are still commuting, but they are no longer simple Pauli operators. As Hamiltonians these correspond to the so-called 2D Levin-Wen models [27], as codes they are called Turaev-Viro codes [28]. The advantage of these codes which generalize the 2D surface code in Section 2, is that universal quantum computation can achieved by purely topological means. The disadvantage from the coding perspective is that (1) the stabilizer checks are more complicated as operators, e.g. for the so-called Fibonacci code on a hexagonal lattice, the stabilizer checks act on 3 and 12 qubits and (2) no one has established a scheme for error correction or a noise-threshold for these codes.\n\n\nError Correction and Fault Tolerance\n\nWe have understood from the previous sections that the crucial element of quantum error correction for stabilizer codes is the realization of the (parity) check measurement as in Fig. 1. The immediate problem is that the parity check measurement suffers from the same imperfections and noise as any other gate or measurement that one may wish to do. The parity check measurement should be a non-demolition, strong single-shot, measurement which has the effect of projecting the state in either the code space or a discrete set of error spaces while giving at the same time accurate information about which event occurred. In practice a parity check measurement may arise as a continuous weak measurement leaving a classical stochastic data record which hovers around the value +1 (pointing to the state being in the code space) while occasionally jumping to a value centered around \u22121. One can imagine that this continuously acquired record is immediately fed back to unitarily steer the qubits to the code space [29]. Advantages of such immediate feed-back or 'closed-loop' form of error correction are that it eliminates the need for a fast and accurate quantum measurement in which weak quantum signals are amplified to our classical macroscopic world. A disadvantage which we will discuss at the end of Section 2.1 is that the correction mechanism is purely local in time and space.\n\nWe could set up such local error correction mechanism by explicitly engineering a dissipative dynamics which drives/corrects the qubits towards the code space as proposed in [3,30]. We assume that the open-system dynamics of code qubits and environment is described by a Lindblad equation as in Eq. (4). For simplicity we consider the case in which we would like to pump or drive four qubits into a state with even parity so that the 4-qubit parity Z-check, Z 1 Z 2 Z 3 Z 4 has eigenvalue +1. Imagine that we can engineer the dissipation (in the interaction picture) such that there is a single quantum jump operator\nL = \u221a \u03baX 1 P odd with P odd = 1 2 (I \u2212 Z 1 Z 2 Z 3 Z 4 )\n, the projector onto the odd parity space, and H \u221d Z 1 Z 2 Z 3 Z 4 . Integration of the Lindblad equation gives rise to the time-dynamics \u03c1(t) = exp(tL tot )(\u03c1(t = 0)) with stationary states \u03c1 determined by L tot (\u03c1) = 0. States supported on the even-parity subspace are dark states with L(\u03c1) = 0 and [H, \u03c1] = 0. The odd-parity subspace is not stationary as the quantum jump operator L flips the first qubit so that an odd parity state becomes an even parity state pumping the system towards the stationary dark subspace.\n\nIn [30] one considers the following stroboscopic evolution using an ancillary dissipative qubit or mode which approximately gives rise to such Lindblad equation. The idea is to alternate (or trotterize) the coherent evolution with H and the dissipative evolution with L for short periods of time \u03c4 so that exp(\u03c4 L tot ) \u2248 exp(\u2212i\u03c4 [H, .]) exp(\u03c4 L). The dynamics of H can be obtained by a small modification of the parity check measurement circuits in Fig. 1: for the evolution exp(\u2212i\u03b8P ) where P is a multi-qubit Pauli operator we can use the circuit in Fig. 1(b).\n\nThe dissipative evolution L could be implemented for short times \u03c4 1 using a circuit consisting of a dissipative ancilla coupled to the four qubits as in Fig. 1(d). Instead of immediately measuring the ancilla qubit, we apply a CNOT with the ancilla qubit as control and qubit 1 as target (to change the parity of the odd states to even), followed by decay (\u03c3 \u2212 ) of the ancilla qubit from |1 to |0 . These ideas of stabilizer pumping were experimentally tested on two and four ion-trap qubits in Ref. [3]. As any realization, closed or open-loop, of quantum error correction will suffer from inaccuracies there is no guarantee that one will improve coherence times by encoding a qubit in a code as it may introduce more errors that it takes away. This has been the reason for the construction of a theory of quantum fault tolerance which addresses this problem using recursively applied code concatenation. For simplicity we assume that every such elementary gate, idling step or measurement, -these are called locations in the circuit-, can fail independently with some error probability p (independent stochastic noise). In a concatenation scheme every qubit and operation in a quantum circuit is replaced by an encoded qubit resp. encoded operation and the process is recursively repeated. The encoded operation consists of an error correction step and a fault-tolerant realization of the operation, see Fig. 3, which together constitute a rectangle. For a code such as Steane's [ [7,1,3]] code which can correct a single error, the fault-tolerance of the rectangle should be such that a single error in any of the locations of the rectangle cannot lead to two (incorrectable) errors in one code block. Then, if the elementary error rate scales as p, it follows that the encoded error rate scales as Cp 2 as two elementary errors are required for a logical error. Here C is a constant which roughly counts the number of pairs of locations in the rectangle where failure can lead to a logical error. If Cp 2 < p the concatenation step helps and r steps of concatenation will drive down the error rate to \u223c p 2 r while the overhead in terms of qubits and gates increase only exponentially in r. The equality Cp 2 = p sets the noise threshold p c .\n\nThis idea of repeated code concatenation was used in the early days of quantum error correction to prove the Threshold Theorem which says that fault-tolerant computation is possible with arbitrary small error rate if one is willing to tolerate an overhead which scales polylogarithmically with the size N of the computation to be performed (the size of a quantum circuit is the number of locations in it). The best performing concatenated coding scheme to date is the C 4 /C 6 scheme of Knill [10] for which he estimated a noise threshold as high as p c \u2248 3% but at the cost of huge overheads. In general, the overhead that one incurs by code concatenation tends to be worse than the overhead (or mere complexity) that is incurred using the idea of topological error correction (Section 2). One reason is that in topological quantum error correction parity check measurements are simply made robust by repeating the measurement needing no additional qubits. The constant c in the Theorem equals c = log 2 S where S is the number of locations in a rectangle. For example, in a 2D realization of the concatenated Steane [ [7,1,3]] code, the fault-tolerant CNOT has S = O(10 3 ) [34] so that c \u2248 10 demonstrating the potential inefficiency of code concatenation.\n\n\nUniversality\n\nAn important feature of error correction with stabilizer (subsystem) codes is the fact that one never physically has to do the correcting Pauli operation as long as the qubits only undergo Clifford group operations. The decoding procedure gives a Pauli error which is interpreted as a frame, the so-called Pauli frame [10] which we can efficiently track during the computation using the Knill-Gottesman theorem. The Clifford group C n is a finite subgroup of the group of unitary transformations U(2 n ) on n qubits. It is defined as the normalizer of the Pauli group: C n = {U \u2208 U(2 n )|\u2200P \u2208 P n , \u2203P , U P U \u2020 = P }. The generators of the Clifford group are the 2-qubit CNOT gate, the Hadamard H gate, the phase gate S 7 and the Pauli's X, Z. The Knill-Gottesman theorem [35] proves that one can efficiently classically simulate any quantum circuit with Clifford group gates. One does this by tracking the stabilizer group, more precisely its generators, which has the input state of the quantum circuit as its unique +1 state. Every Clifford gate and measurement maps the stabilizer generators onto new stabilizer generators providing an efficient representation of the action of the quantum circuit. The presence of additional Pauli errors can thus be represented as additional updates of the stabilizer generators.\n\nFor universal quantum computation one needs additional gates such as the T gate (\u03c0/8 rotation). Examples of universal gate sets are {H, T, CNOT}, {H, Toffoli} and {H, \u039b(S)} where \u039b(S) is the two-qubit controlled-S gate 8 . Even though Clifford group gates have no quantum computational power they can be used to develop a quantum substrate on which to build universal computation using stabilizer codes. This comes about by combining the following sets of ideas. First of all, note that stabilizer error correction by itself only uses CNOT gates, preparations of |+ , |\u2212 , |0 , |1 and measurements in the Z-and X-basis as is clear from Fig. 1. The T , \u039b(S) and the Toffoli gate, each of which can be used with Clifford gates to get universality, are special unitary gates as they map Pauli errors onto elements of the Clifford group. One can define a Clifford hierarchy [36] C(j) = {U \u2208 U(2 n )|U P n U \u2020 \u2286 C(j \u2212 1)} such that C(1) = P n , C(2) = C n . The T, \u039b(S) and Toffoli are thus members of C(3). Such gates in C(3) (and similarly gates in C(j) for j > 3) can be realized with ancillas and Clifford group gates using quantum teleportation ideas [36,37]. The idea is illustrated in Fig. 5 for the T gate. One teleports the qubit on which the T gate has to act, prior to applying the gate, using the bottom one-bit teleportation circuit in Fig. 4. Inserting T T \u2020 prior to the corrective Pauli X and using that T XT \u2020 = e \u2212i\u03c0/4 SX which is an element of the Clifford group, we obtain the circuit in Fig. 5.\n\nExample: We can do the same trick for the S gate, that is, we can reduce the S gate to the preparation of a |+i = 1 \u221a 2 (|0 + i |1 ) ancilla, a CNOT gate and a corrective Pauli Y . We get this from starting with the bottom circuit in Fig. 4 to which we apply the S gate at the output. We insert  How do we realize a universal set of logical fault-tolerant gates for a code? In principle, faulttolerant gate constructions can be made for any stabilizer code [8]. The question is how to do computation with resource requirements and overheads similar as those needed for a quantum memory. Ideally, the computation threshold, i.e. the performance of the code when used for computation is close to the memory noise threshold, the performance of the code as a pure quantum memory. An example of a gate which does not require new resources is a transversal CNOT between two code blocks in which every qubit in the block is paired with a qubit in the other block in a CNOT gate. Such transversal CNOT represents a valid logical CNOT for stabilizer codes S = S(X), S(Z) , i.e. the parity X-checks are the same as parity Z-checks. Examples are Steane's [ [7,1,3]] code or any other CSS code constructed from a classical code C with C \u22a5 \u2286 C.\n7 H = 1 \u221a 2 1 1 1 \u22121 , S = 1 0 0 i , T = 1 0 0 e i\u03c0/4 . 8 \u039b(S) |b 1 , b 2 = |b 1 S b1 |b 2 for b 1 , b 2 = 0, 1.\nIn [38] it was shown for any 2D stabilizer code that the logical gates which can be performed by constant-depth circuits employing only local gates, are members of the Clifford group. The reason to focus on constant-depth local circuits is that such circuits are small and are naturally fault-tolerant. Namely, any number of errors which occurs in the circuit will only affect a patch of O(1) qubits on the 2D lattice, and such O(1) error patches are correctable. Hence we expect that their implementation does not negatively impact the noise threshold or the overhead.\n\nAs we will discuss in Section 2 one can implement the logical H and CNOT by topological means in the 2D surface code, but one cannot do the logical S gate in this manner. For the surface code one can do the logical S in the same fashion as the logical T , see below (for a different logical S trick, see [39]). Other stabilizer codes, 2D color codes, have been found which allow for a topological realization of the full Clifford group [40]. Interestingly, Ref. [38] shows that for D-dimensional stabilizer codes 9 all logical encoded gates which are composed from constant-depth logical gates are contained in the Clifford hierarchy C(D). This is a subtle result as we can realize a fault-tolerant set of universal gates for any stabilizer code, but apparently we cannot do this by composing a sequence of constant-depth encoded gates.\n\nFor gates such as the T gate the method of magic-state-distillation has been developed [41] showing how to realize these gates fault-tolerantly assuming the availability of noiseless Clifford group operations. Thus, once we have built a low-noise Clifford computation substrate, universal quantum computation can be bootstrapped from it. The strength of the distillation scheme is that the noise threshold for it to work is high, approximately 15%. The downside is that the qubit/gate overhead per logical T gate is orders of magnitude larger that of a 'topological' CNOT (see e.g. Fig. 11 in [42]). In a nutshell, the ideas are as follows. We implement the T gate at the logical level using Fig. 5 which requires the preparation of low-noise logical ancillas T |+ . We can obtain such an ancilla in non-fault-tolerant noisy manner by, for example, injecting several noisy unencoded ancillas into the code [10]. From many of these noisy encoded ancillas we distill using logical H, CNOTs and measurements, a single low-error encoded ancilla.\n\nNote that prior to the action of logical non-Clifford gates one does need to physically implement the inferred logical Pauli errors obtained from decoding as gates such as the T gate do not map Pauli errors onto Pauli errors but onto Clifford errors. What one never needs to physically do is a correction which maps one back to the +1 eigenspace of the stabilizer S: any syndrome eigenspace of S is a good code.\n\nThe upshot of these considerations is that 2D and 3D stabilizer codes will be most suitable for building a quantum memory and performing Clifford group operations. The goal of universal quantum computation within the same platform can be reached using methods such as injection-and-distillation but the additional overhead and complexity of distillation (and demands for fast decoding) are considerable. Several recent papers have been devoted to reducing this overhead, see e.g. [43] and references therein.\n\n\n2D (Topological) Error Correction\n\nIn this section we discuss three stabilizer/subsystem codes in which the parity checks act locally on qubits laid out on a 2D lattice. Two of these codes are topological codes: if the code was defined on a 2D lattice with periodic boundary conditions,-a torus-, then the logical operators would relate to the non-trivial loops around the torus.\n\nMost experimental qubit quality is assessed by the twin parameters T 2 and T 1 which capture the decay of off-diagonal matrix elements resp. the relaxation to steady state of the diagonal matrix elements in the qubit density matrix. A simple estimate for an error rate can be made by taking \u03c4 /T 1 to be the probability for an X error where \u03c4 is a time-scale which captures the time needed for error-correction through single and two-qubit gates. Similarly \u03c4 /T 2 can provide an estimate for the Z error rate. In numerical or analytical studies of code performance, one uses simple error models such the independent depolarizing noise model. Independent depolarizing noise assumes that every qubit independently undergoes a X, Y or Z error with equal probabilities p/3 and no error with probability 1 \u2212 p. A related noise model is that of independent X and Z errors in which a qubit can undergo independently an X error with probability p and a Z error with probability p in each time-step. In all three codes the parity checks are either X or Z-like, detecting either Z or X errors. In addition, the parity Z-and X-checks have the same form so error correction proceeds identically (but simultaneously) for both types of errors.\n\nWe will consider codes which encode a single qubit in a block of n qubits with n = O(L 2 ) with L the linear size of the 2D array. Important parameters of the code performance are the pseudothreshold p c (L) which is the error probability at which the elementary error rate p equals the logical error rate for a given size L, the asymptotic threshold p c = lim n\u2192\u221e p c (L) and the logical error rate p(p, L) which is a function of the block size and the elementary error rate p. For the Bacon-Shor code in Section 2.2, the asymptotic threshold p c = 0, hence it is of interest to consider what is the optimal block size for this code. Another interesting class of 2D topological stabilizer codes are the color codes [40]. The color codes offer little practical advantage over the surface code if the goal is to build a quantum memory as some of the parity checks involve more than 4 qubits and the noise thresholds are similar as for the surface code, see e. g. [44].\n\n\nSurface Code\n\nThe surface code is a version of Kitaev's toric code [1] in which the periodic boundaries of the torus have been replaced by open boundaries [45]. Many of its properties and ideas for its use as a quantum memory were first analyzed in the seminal paper [46]. The topological 2D realization of the CNOT gate was first proposed in [47,48].\n\nA simple sheet, depicted in Fig. 6, can encode one logical qubit. The linearly-independent parity checks are weight-4 plaquette Z-checks B p and star X-checks A s which mutually commute and are modified at the boundary to act on 3 qubits, see Fig. 6. Note that the star operators are just plaquette operators on the dual lattice when interchanging X \u2194 Z. The smallest surface code encoding 1 logical qubit which can correct 1 error is the code [[13, 1, 3]] 10 . Z is any Z-string which connects the north and south rough boundaries, we can deform this string by multiplication by the trivially-acting plaquette operators. X is any X string (on the dual lattice) connecting the smooth east and west boundary. As these strings have to connect boundaries in order to commute with the check operators, their minimum weight is L. Thus for general L the code parameters are [[L 2 + (L \u2212 1) 2 , 1, L]].\n\nUsing 13 qubits to correct 1 error does not seem very efficient, but the strength of the surface code is not fully expressed in its distance which only scales as the square root of the number of qubits in the block 11 .\n\nLet us consider how quantum error correction can take place first assuming that the parity check measurements are noise-free. If a single X error occurs on an edge in the bulk of the system, then the two plaquette operators next to it will have eigenvalue \u22121. The places where these plaquette eigenvalues are \u22121 are called defects. A string of X errors will thus produce two defects at its boundary. If the X error rate p is sufficiently small, one obtains a low density of close-by defects. Such errors are correctable as defects can be locally paired without much ambiguity. As we know, inferring an error E which differs from the real error E by only stabilizer operators, plaquette operators in this Z X s p B A X X X Z Z Z X Z Figure 6: Surface Code on a L \u00d7 L lattice. On every edge of the black lattice there is a qubit, in total L 2 + (L \u2212 1) 2 qubits (depicted is L = 8). Two types of local parity checks, A s and B p , each act on four qubits (except at the boundary). The subspace of states which satisfy the parity checks is two-dimensional and hence represents a qubit. Z (yellow) is any Z-string connecting the north to the south boundary while X (blue) is any X-string connecting the east to west boundary of the lattice.\n\ncase, is harmless. Here it means that we decode correctly as long as E E does not represent X, an X-string which goes from one boundary to the other. From this picture it is clear that there should be a finite asymptotic threshold p c for noise-free error correction. For the bulk system the error syndrome thus gives us the location of the defects. A minimumweight decoding algorithm then corresponds to finding a minimum-weight error string E(X) which has these defects as end-points. This decoding algorithm can be implemented using Edmond's minimumweight matching (Blossom) algorithm [52]. Ideal decoding is not minimum weight decoding, but maximum-likelihood decoding as described in Section 1.1.1. One can estimate the threshold p c assuming optimal maximum likelihood-decoding by mapping the problem onto a phase transition in a 2D random-bond Ising model [53]. The value for p c assuming noise-free parity checks, ideal decoding and independent X errors is p c \u2248 11% [46]. This picture gets modified when the parity checks are inaccurate. A simple way to model noisy parity checks is to assign a probability q for the parity check outcome to be inaccurate while in between the parity checks qubits undergo X and Z errors with probability p as before. In practice, one would expect the parity check measurements to induce some correlated errors between the qubits of which we take the parity. For example, for the parity Z-check one may expect to cause additional qubit dephasing when more information than merely the parity is read out.\n\nAs the parity check measurements are no longer reliable one needs to change their use as an error record. For example, a single isolated defect which appears for a few time-steps and then disappears for a long time is more likely due to a faulty parity measurement outcome than due to a string of X errors (which terminates at the isolated defect) that suddenly pops up and disappears without trace after a few time-steps. The strength of topological codes for sufficiently large L (as compared to using small codes and code concatenation) is that noisy parity checks can be dealt with by repeating their measurement as the additional noise which the parity checks produce on the code qubits is local and, at sufficiently low rate, correctable.\n\nBoth minimum weight decoding and maximum likelihood decoding can be generalized to this set-ting. We extend the lattice into the third (time) dimension [46], see Fig. 7. Vertical links, corresponding to parity check measurements, fail with probability q while horizontal links fail with probability p. In minimum weight decoding the goal is now to find a minimum weight error E which has vertical defect links, where the parity check is \u22121, as boundary, see Fig. 7. If the parity check measurements are ongoing, one needs to decide how long a record to keep before starting to infer the possible errors which depends on the failure probability q. In the simple case when q = p the record length is taken as L [53]. An analytical lower bound on the noise threshold for q < p is derived in [46] with the value p c \u2265 1.1%. Numerical studies in [53] (using minimum weight-decoding) show a threshold of p c \u2248 2.9% for p = q. Below the noise threshold the logical error rate p(p, L) \u223c exp(\u2212\u03ba(p)L) where \u03ba(p) \u2248 0.8 \u2212 0.9 at p = p c /3 [53,42]. All these results have been obtained for toric codes, assuming periodic boundary conditions: one may expect results to be somewhat worse for surface codes [54]. The practical relevant question is how much overhead L is needed before one is in the scaling regime where the pseudo-threshold is close to the asymptotic threshold p c (L) \u2248 p c ? The pseudothreshold for a small code such as [ [13,1,3]] is very tiny, certainly no higher than 0.1% 12 . Even though small codes have worse performance than large codes they could still be used as testbeds for individual components and error scaling behavior [56]. Minimum-weight decoding with Edmonds' matching algorithm is a good method for decoding if our goal is to realize a quantum memory (with or without encoded Clifford group operations). As one never needs to physically do any correction (see the notion of Pauli frame discussed in Section 1.4), the measurement record can be stored. This data record can then be processed at leisure and used to interpret a final M X or M Z measurement on the qubits. The realization of such quantum memory will require that the record of parity check measurements is obtained at sufficiently high rate compared the error rate, since a low rate stroboscopic picture of the defects (even if they are obtained perfectly) could potentially miss the occurrence of a logical error.\n\nIf our goal is to implement universal quantum computation, then the decoding algorithm will have to keep up with the logical error rate of the quantum computer as every time a non-Clifford gate is realized in the quantum circuit, one needs to know whether to do an additional logical Pauli. Researchers have developed faster renormalization-group decoders [57,58] which process the defects using parallel processing over the 2D or 3D lattice in time O(log L). The idea of the simple decoder in [58] which works for any D-dimensional stabilizer codes is to recursively match defects locally. For a 2D surface code with perfect parity check measurements one starts by dividing up the defect record into local clusters of O(1) size. In each cluster the algorithm tries to find a local error which removes the defect. If a cluster contains a single defect for example, then no such local error can be found. Thus the next step is to enlarge the linear size of the cluster by a factor of 2 and reapply the same procedure on the leftover defect record. The decoder stops when no more defects are present or when one has a reached a certain maximum number of iterations r scaling as r = O(log L). For the toric code with perfect parity checks, Ref. [58] has obtained a noise threshold of p c = 6.7% using this RG decoder while the RG decoder in [57] achieves 9% (minimum-weight decoding via matching gives 10.3%).\n\nOne can ask whether quantum error correction for the surface or other topological codes in D = 2 or higher is possible by purely local means. Is there a non-zero noise threshold p c when error correction has to be performed by a 2D noisy automaton which locally interacts with the surface code qubits [46]. The dissipative correction procedure described in Section 1.3 is an example of a purely local error correction mechanism. Such local dissipative mechanisms will not be able to efficiently remove error strings in the surface code beyond the shortest length as an error string is only heralded by its two end-point defects. The local observation of one defect gives no information where the position of another matching defect is, except if one searches the entire neighborhood around the defect. One should contrast this with the 4D toric code [46] where an error cluster is surrounded by defect surfaces such that the cluster can be removed by locally shrinking the defect surface. This weakness of the surface code is a generic property of 2D stabilizer codes and ties in with the discussion of self-correcting quantum memories which are unlikely to exist in 2D [50].\n\nThe classical non-local minimum-weight matching decoder can be viewed as a way of jump-starting our quantum memory with the power of reliably non-local classical computation. Note that the RG decoder is non-local (even allowing for parallel processing of clusters on the lattice by local automata) as the maximum number of recursions r scales as O(log L) leading to a maximum cluster size proportional to the linear size of the lattice. The lowest levels of the RG decoder are of course local and will provide some measure of protection by local means. In [21] the author devises an intricate scheme for doing purely local quantum error correction for the surface code by a 2D noisy cellular automaton assuming independent local errors; the mere existence of such a scheme is nontrivial.\n\nThe idea of realizing the surface code in superconducting systems using ancilla qubits for measurement was considered in [59]. Ref. [56] consider experimental benchmarks for parity check measurements in a circuit QED setting. In order to reduce qubit overhead and possibly make better and more direct use of the cavity mode-transmon interaction, Ref. [60] considers a direct 3-qubit parity check measurement. In this scheme 3 transmon qubits are dispersively coupled to two transmission-line resonators such that the phase-shift picked up by an incoming microwave-pulse is (ideally) the same for qubit states with the same parity but differs by \u03c0 for qubit states with different parities. A simpler scheme for a two-qubit parity measurement in the cavity QED setting was proposed in Ref. [61]. In [62] the dispersive coupling of a set of transmon qubits to the cavity mode was proposed for the measurement of a multi-qubit parity check.\n\n\nMultiple Qubits and Operations by Lattice Surgery\n\nHow do we prepare the surface code memory in the states 0 , 1 or |\u00b1 ? And how do we read out information, that is, realize M X and M Z ? We prepare all elementary qubits in Fig. 6 in the state |0 and start measuring the parity checks with the goal of preparing the state 0 . The state |00 . . . 0 has B p = +1 and Z = +1 while the star operators A s have random eigenvalues \u00b11 corresponding to the presence of many Z errors. Thus we choose some correction E for these Z errors (we pick a Pauli frame): the choice will not matter as E commutes with Z. If the preparation of |0 and the parity check measurements are noisy, one needs to measure the parity checks for a while before deciding on a Pauli frame for both X and Z errors. The preparation of 1 and |\u00b1 can be performed analogously using the ability to prepare the elementary qubits in |1 and |\u00b1 respectively. A projective measurement in, say, the 0 , 1 -basis (M Z ) proceeds essentially in reverse order. One measures all qubits in the Z-basis. Using the past record of parity Z-check measurements and this last measurement, one infers what X errors have taken place and corrects the outcome of Z = \u00b11 accordingly.\n\nThere are various ways in which we can encode multiple qubits in the surface code and do a logical Hadamard and CNOT gate. The simplest and most efficient method in terms of qubit overhead is to encode multiple qubits in multiple separate sheets (as in Fig. 6) laid out next to each other in a 2D array as in Fig. 10. Using operations on a single sheet one can do a logical Hadamard gate [46]. A CNOT between qubits in separate sheets can be realized using the idea of lattice surgery in which sheets are merged and split as proposed in [49]. One can also encode a qubit in an arbitrary state into the code, see [46,49].\n\nWe first consider the Hadamard gate for which HXH = Z and HZH = X. Consider doing a Hadamard rotation on every elementary qubit on a sheet. The resulting state is a +1 eigenstate of the Hadamard-transformed parity checks HA s H \u2020 and HB p H \u2020 which are the plaquette Z-check resp. the star X-check of the code S dual defined on the dual lattice. The Hadamard gates map Z onto X dual and X onto Z dual . In the dual code S dual the rough and smooth boundaries are interchanged so that the lattice is effectively rotated by 90 \u2022 . In order to complete the Hadamard gate and return back to the original code one can modify the parity checks at boundaries such that rough becomes smooth and smooth becomes rough again, see the details in [46,49]. The ancilla qubit in the middle is discarded after the last measurement M X disentangles it from the other two input qubits. Each measurement has equal probability for outcome \u00b11 and Pauli corrections (not shown, see Eq. (7)) depending on these measurement outcomes are done on the output target qubit.\n\nThe construction for the CNOT is based on the circuit in Fig. 8 which implements the CNOT gate through 2-qubit parity measurements, originally described in Ref. [63]. One could verify Fig. 8 by considering the input states as a stabilizer subspace with stabilizer Z 2 and logical operators X 1 , Z 1 , X 3 , Z 3 , using the Knill-Gottesman simulation technique, see Section 7 in [35]. One can also consider the evolution of the input |c 1 |0 2 |t 3 for bits c = 0, 1 and t = 0, 1 explicitly (here 1 denotes the top qubit in the Figure). For M xx = +1, we have a bit b xx = 0 and M XX = \u22121 corresponds to b xx = 1 etc. We have\n|c 1 |0 2 |t 3 mxx=\u00b11 \u2212\u2192 Z bxx 3 X t 3 |c 1 1 \u221a 2 (|00 23 + |11 23 ) mzz=\u00b11 \u2212\u2192 Z bxx 3 X t 3 |c 1 X bzz 2 |c 2 X bzz 3 |c 3 mx=\u00b11 \u2212\u2192 |c 1 Z mx 2 |+ 2 Z bxx 3 X bzz 3 |c \u2295 t 3 .(7)\nWe observe the logic of the CNOT gate on qubits 1 and 3 in addition to corrective Pauli's Z bxx 3 X bzz 3 which depend on the outcomes of the measurements M XX and M ZZ . The measurement M X on the second qubit ensures that no information leaks to that qubit so that the CNOT gate properly works on any superposition of inputs. This circuit identity implies that we can realize a logical CNOT gate if we have the capability of projectively measuring the operators X \u2297 X and Z \u2297 Z of two qubits encoded in different sheets. The capability to prepare a sheet in 0 and the measurement M X was discussed before. The realization of such joint measurement, say, X \u2297 X is possible by temporarily merging the two sheets, realizing the measurement and then splitting the sheets as follows. Consider two sheets laid out as in Fig. 9 where a row of ancillary qubits is prepared in |0 between the sheets. We realize a rough merge between the sheets by including the parity checks, plaquette and star operators, at this boundary. If the parity check measurements are perfect, the new weight-4 plaquette Z-checks have +1 eigenvalue as the ancilla qubits are prepared in |0 . The 4 new star boundary checks have random \u00b11 eigenvalues subject to the constraint that the product of these boundary checks equals the product of Xs of the two sheets. Hence a perfect measurement would let us do a X \u2297 X measurement. As the parity check measurements are imperfect, one needs to repeat the procedure in the usual way to reliably infer the sign of X \u2297 X. We are however not yet done as we wish to realize a projective X \u2297 X measurement on the qubits encoded in two separate sheets. This means that we should split the two sheets again: we can do this by reversing the merge operation and measure the ancillary qubits in the Z-basis and stop measuring the 4 boundary X-checks. Again, if the parity check measurements are perfect the plaquette Z-checks at the boundary of both sheets will be randomized, but both correlated with the outcome of the Z-measurement of the ancillary qubits. Hence the individual X eigenvalues of the separate sheets may be randomized, but they are correlated so that X \u2297 X remains fixed. Similarly, a smooth merging and splitting (as between qubits C and IN T in Fig. 10) with the ancillary qubits prepared and measured in the X-basis accomplishes a Z \u2297 Z measurement.\n\nThe procedure for a CNOT in Fig. 10 then consists of: first a preparation of the IN T qubit in 0 , then a rough merge and split of qubits T and IN T followed by a smooth merge and split between qubits IN T and C followed by a final M X measurement of qubit IN T .\n\n\nTopological Qubits and CNOT via Braiding\n\nA different way of encoding multiple qubits and realizing a CNOT gate was first proposed in [42,47]. The disadvantage of this method is that it has an additional qubit overhead. A distance-3 smooth hole qubit (see the description below) costs many more than 13 physical qubits but such overhead or redundancy could also lead to greater robustness.\n\nIn order to see how to encode multiple qubits we start with a simple square sheet with all smooth boundaries which encodes no qubits, Fig. 11(a). For a sheet with all smooth boundaries, the star operators are linearly-dependent while the plaquette operators are linearly independent so that no Figure 9: Picture from [49]: two sheets are merged at their rough boundary by placing a row of ancilla qubits in the |0 state at their boundary and measuring the parity checks of the entire sheet. For a similar smooth merge, the ancillary qubits in between the two sheets are prepared in the |+ state, see the INT and C sheets in Fig. 10. qubit is encoded. To encode qubits one makes a hole in the lattice, that is, one removes some checks from the stabilizer S. This is a change in topology which affects the code space dimension. In stabilizer terms: when we remove one plaquette, say, B p * for some p * from the stabilizer S, then B p * is no longer an element in S but still commutes with S, therefore B p * is a logical operator. The matching logical operator which anti-commutes with it starts at the hole and goes to the boundary. This encoded qubit has poor distance namely d = 4 as B p * is of weight 4. We can modify this procedure in two ways such that logical qubits have a large distance and its logical operators do not relate to the boundary. The particular choice of logical qubits will allow one to do a CNOT by moving holes.\n\nTo get a logical qubit with large distance we simply make a bigger hole. We remove all, say, k 2 plaquette operators in a block (and all (k \u2212 1) 2 star operators acting in the interior of this block) and modify the star operators at the boundary to be weight-3, no longer acting on the qubits in the interior, see Fig.11(a). The qubits in the interior of the block are now decoupled from the code qubits. The procedure creates one qubit with Z equal to any Z-loop around the hole. The X operator is a X-string which starts at the boundary and ends at the hole. Clearly, the distance is the minimum of the perimeter of the hole and the distance to the boundary. We call this a smooth hole as the hole boundary is smooth. Of course, we could do an identical procedure to the star operators, removing a cluster of stars and smaller subset of plaquette operators and adapting the plaquette operators at the boundary. Such qubit will be called a rough hole and its X operator is a X-string around the hole (a string on the dual lattice) and Z is a Z-string to the boundary.  Figure 11: (a) A smooth hole is created by removing a block of plaquette operators and the star operators acting on qubits in the interior of the block. The Z-loop around the hole is Z while X is an X-string to the boundary. The qubits inside the hole (4 in the picture) are decoupled from the lattice. (b) Two smooth holes can make one smooth qubit and two rough holes can make one rough qubit so that moving a smooth hole around a rough hole realizes a CNOT gate.\n\nIn order to be independent of the boundary we use two smooth holes to define one smooth or primal qubit and use two rough holes to define one rough or dual qubit as follows. Consider two smooth holes 1, 2 and define a new smooth qubit as 0 s = 0, 0 1,2 and 1 s = 1, 1 1,2 . For this smooth qubit s we have Z s = Z i , i = 1, 2 (we can deform Z 1 into Z 2 by plaquette operators) and X s = X 1 X 2 which we can deform to an X-string which connects the two holes, see Fig. (11)(b). The distance of this smooth qubit is the minimum of the distance between the holes and the perimeter of one of the holes (assuming the boundary is sufficiently far). Similarly, we can create a rough qubit by taking two rough holes and defining 0 r = 1 \u221a 2 0, 0 3,4 + 1, 1 3,4 , 1 r = 1 \u221a 2 0, 1 3,4 + 1, 0 3,4 .\n\nWith this choice X r is the loop X 3 (or equivalently X 4 ) while Z r = Z 1 Z 2 is equivalent to the Z-string connecting the holes. Imagine moving smooth hole 1 around rough hole 3 as in Fig. 11(b). After the move, the X-string connecting the smooth holes will additionally go around the rough hole enacting the transformation X s \u2192 X r \u2297 X s . Similarly, the Z-string Z r connecting the rough holes will wind around the smooth hole, leading to the transformation Z r \u2192 Z s \u2297 Z r . The loops Z s and X r are not changed by the move. This action precisely corresponds to the action of a CNOT with smooth qubit as control and rough qubit as target 13 .\n\nThe ability to do a CNOT with smooth qubit as control and rough qubit as target seems limited as all such gates commute. However one can use the one-bit teleportation circuits in Fig. 4 to convert a smooth qubit into a rough qubit and a rough qubit into a smooth qubit, using only CNOTs with smooth qubits as controls. We have already shown how to realize the other components in the one-bit teleportation circuit such as M X and M Z . Thus by composing these circuits we can do a CNOT between smooth qubits alone (or rough qubits alone).\n\nHow is the braiding done in practice? The advantage of realizing topological gates in stabilizer codes (as opposed to braiding of Majorana fermions or non-Abelian anyons in quantum Hall systems) is that braiding can be realized by changing where we measure the parity checks, or deforming the code. For example, one can enlarge the hole in Fig. 11 to include, say, 2 more plaquettes and 3 more qubits in the interior. We stop measuring those two plaquette checks and the star checks in the interior, modify the star boundary measurements and measure the qubits in the interior in the X-basis. The modified weight-3 boundary checks will have random \u00b11 eigenvalues as their previous eigenstates were perfectly entangled with the qubits in the interior. This corresponds to a high Z-error rate around the modified boundary. By repeating the measurement and solidifying the results one can correct these Z-errors, but of course we may partially complete a Z-loop this way. The protection against a full Z-loop around the hole is thus provided by the part of the hole boundary which remains fixed.\n\nThis implies that the hole can safely be moved and braided in the following caterpillar manner. One first enlarges the hole (while keeping its 'back-end' fixed providing the protection) so that it reaches its new position. In terms of parity check measurements it means that from one time-step to the next one, one switches from measuring the small hole to the large hole parity checks. Due this extension errors will occur along the path over which the hole is moved and if error correction is noisy we should not act immediately to infer the new Pauli frame, but repeat the new check measurements to make this new frame more robust. Then as a last step, we shrink the hole to its new position and corroborate the new measurement record by repetition. Alternatively, one can move the hole by a sequence of small translations, so that the hole never becomes large. The speed at which the hole can then be safely moved is determined by the time it takes to establish a new Pauli frame (eliminate errors) after a small move. Details of hole moving schemes are discussed in e.g. [64]. s\n\n\nSurface Code with Harmonic Oscillators\n\nIt is possible to define a qudit stabilizer surface code, see e.g. [65], where the elementary constituents on the edges of the lattice are qudits with internal dimension d and the code encodes one or several qudits. An interesting special case is when we take d \u2192 \u221e and each edge is represented by a harmonic oscillator with conjugate variablesp,q. The goal of such continuous-variable surface code is to encode a non-local oscillator into an 2D array of oscillators such that the codestates are protected against local shifts inp andq. In addition, one can imagine using continuous-variable graph states to prepare such encoded states and observe anyonic statistics [66].\n\nTo get a surface code, we replace Pauli X by X(b) = exp(2\u03c0ibp) and Pauli Z by Z(a) = exp(2\u03c0iaq) for real parameters a, b such that [Z 1 (a)Z \u22121 2 (a), X 1 (b)X 2 (b)] = 0 for all a, b. In the bulk, a plaquette operator centered at site p can be chosen, for example, as  the positions of the oscillators around all plaquettes p, that is, \u03b4(q p\u2212x \u2212 q p+x + q p\u2212\u0177 \u2212 q p+\u0177 ), while it is a delta-function in the momenta of the oscillators \u03b4(\u2212p s\u2212x + p s+x + p s\u2212\u0177 \u2212 p s+\u0177 ) located around all stars s. Perhaps one can compare such highly-entangled non-local state with the simpler cousin, the 2-mode EPR-state. In the 2-mode case we have two commuting operators Z 1 (a)Z \u22121 2 (a) and X 1 (b)X 1 (b) on oscillator 1 and 2. The single state which is the +1 eigenstate of cos(2\u03c0a(q 1 \u2212q 2 )) and cos(2\u03c0b(p 1 +p 2 )) for all a, b is the two-mode infinitely-squeezed state \u03b4(p 1 + p 2 )\u03b4(q 1 \u2212 q 2 ).\nB p (a) = Z p\u2212x (a)Z \u22121 p+x (a)Z p\u2212\u0177 (a)Z \u22121 p+\u0177 (a) while A s (b) = X \u22121 s\u2212x (b)X s+x (b)X s\u2212\u0177 (b)X \u22121 s+\u0177 (b), see\nFor this surface code, the operators Z(c) = exp(2\u03c0ic i\u2208\u03b3 1q i ) where the path \u03b3 1 runs straight from north to south commute with all H p (a), H s (b), see Fig. 12. Similarly, we have X(d) = exp(2\u03c0id j\u2208\u03b3 2p j ) where \u03b3 2 runs straight from east to west. As Z(c)X(d) = e \u2212i(2\u03c0c)(2\u03c0d) X(d)Z(c), we can interpret Z(c) and X(d) as phase-space displacements of the encoded oscillator with logical position and momentum p = i\u2208\u03b3 2 p i and q = i\u2208\u03b3 1 q i . We can deform these non-unique logical operators to follow deformed paths, e.g. multiply Z(c) by B p (c) plaquettes (note that if we multiply by B p (c ) with c = c we get an operator with the union of supports).\n\nHow would one use such code to encode quantum information and what protection would it offer? As its qubit incarnation, a sufficiently-low density of independent errors on the lattice can be corrected. In reality however, each oscillator i will independently suffer from small shifts Z i (e)X i (e ) with |e|, |e | 1. A local mechanism which enforces the perfect correlation constraint at plaquettes and stars can perform a local error correction, however the likelihood to make logical errors of the form Z(c)X(d) for small c, d will be high, as we are attempting to encode an analog signal. This of course is the drawback of any code encoding a continuous-variable. However, one can imagine using a 2-dimensional subspace of the encoded oscillator space, and use the qubit-into-oscillator code, see the end of Section 1.2, to prepare and use a discrete set of states in this subspace. In theory, one could prepare the encoded states 0 , 1 , |+ , |\u2212 of this surface code by preparing each local oscillator in the qubit-into-oscillator logical states |0 , |1 , |+ , |\u2212 and subsequently projecting onto the perfectly correlated momenta and position subspace. For example, the state |0 of a local oscillator i is an eigenstate of S q (\u03b1) = e 2\u03c0iq i /\u03b1 , S p = e \u22122ip i \u03b1 and the local Z i = e i\u03c0q i /\u03b1 . This implies that after projecting onto the space with H p (a) = 1, H s (b) = 1 for all a, b, it will be an eigenstate of Z(1/(2\u03b1)) = e i\u03c0 i\u2208\u03b3 1q i /\u03b1 , i.e. the encoded 0 . The preparation of the codewords for this oscillator surface code would require considerable strength and flexibility of squeezing interactions.\n\n\nBacon-Shor Code\n\nAn interesting family of subsystem codes are the Bacon-Shor codes [67] which are competitive with the surface code for small numbers of qubits. For the [[n 2 , 1, n]] Bacon-Shor code the qubits are laid out in a 2D n \u00d7 n square array, see Fig. 13. The stabilizer parity checks are the double Z-column operators Z ||,i for columns i = 1, . . . n \u2212 1 and double X-row operators X =,j for rows j = 1, . . . n \u2212 1. It is also possible to work with asymmetric Bacon-Shor codes with qubits in a n \u00d7 m array. Asymmetric codes can have better performance when, say, Z-errors are more likely than X-errors (when T 2 T 1 ), see [68]. The gauge group G (see Section 1.1.1) is generated by weight-2 vertical XX links and horizontal ZZ links and contains the parity checks. The logical operators (which commute with G but are not in S) are the single Z-column Z and a single X-row X. . The X error string E has X errors in the red region and no errors elsewhere and E c is its complement. Clearly the string E has lower weight than E c and is chosen as the likely error.  Figure 14: (a) In order to measure the XX and ZZ operators one can place ancilla qubits (open dots) in between the data qubits. For example, for the ZZ measurement the ancilla qubit is placed in the |0 basis followed by 2 CNOTS on its adjacent data qubits to collect the syndrome and a final Z measurement. (b) Alternatively, to measure Z ||,i one can prepare a 3-qubit entangled cat state 1 \u221a 2 (|000 + |111 ) (green dots) which interacts locally with the adjacent system qubits. X =,1 could be measured by preparing a cat state for the ancilla qubits at, say, the red dots. The ancilla qubits at the open dots can be used to prepare the cat states.\n\nConsider the correction of X errors sprinkled on the lattice, assuming for the moment that the parity check measurement of Z ||,i is noise-free. For each column we note that an even number of X errors is a product of the vertical XX gauge operators and therefore does not affect the state of the logical qubit. This means that per column only the parity of the number of X errors is relevant. The double column operator Z ||,i determines whether this parity flips from column i to column i + 1. The interpretation of the eigenvalues of Z ||,i is then the same as for a 1D repetition code (or 1D Ising model) with parity checks Z i Z i+1 . Double columns where Z ||,i \u2261 Z i Z i+1 = \u22121 are defects marking the end-points of X-strings (domain walls in the 1D Ising model). Minimum-weight decoding is very simple as it corresponds to choosing the minimum weight one between two possible X-error strings: E or the complement string E c which both have the faulty double columns defects as end-points, see Fig. 13(c). The code can thus correct all errors of weight at most n 2 for odd n. Higher-weight errors can also be corrected as long they induce a low density of defects on the boundary. Note however that the number of syndrome bits scales as n whereas the number of errors scales with n 2 . This means that in the limit n \u2192 \u221e the noise-free pseudo-threshold p c (n) \u2192 0 as the fraction of incorrectable errors will grow with n. So, how do we choose n in order to minimize the logical error rate p(p, n): in [69] the authors find that the optimally-sized Bacon-Shor code for equal X and Z error rate p is given by n = ln 2 4p and for that optimal choice they can bound p(p, n) exp(\u22120.06/p). How do we obtain the non-local parity check values? One can either measure the XX and ZZ gauge operators and use this information to get the eigenvalues of X =,i and Z ||,j , or one measures the parity checks directly. The first method has the advantage of being fully local: the ancilla qubits for measuring XX and ZZ can be placed in between the data qubits, see Fig.14(a). In the second method we can prepare an n-qubit cat state, see e.g. [68]. We could measure Z ||,1 using the circuit in Fig. 1(a) with a single ancilla in the |+ state and controlled-phase gates (CZ) gates. However, a single X error on the ancilla qubit can feed back to the code qubits and cause multiple Z errors making the procedure non fault-tolerant. In addition, the interaction between the ancilla qubit and the code qubits is non-local. Instead, we encode the ancilla qubit |+ using the repetition code, i.e. we prepare the n-qubit cat state 1 \u221a 2 (|00 . . . 0 + |11 . . . 1 ) such that a CZ-gate acts between one cat qubit and one code qubit. The n-qubit cat state, which is stabilized by Z i Z i+1 and X 1 . . . X n , can be made by preparing |+ \u2297n and measuring Z i Z i+1 using local ancilla qubits. The Z i Z i+1 eigenvalues are recorded to provide the Pauli frame. In [68] further details of this scheme are given, including estimates of the noise threshold for asymmetric Bacon-Shor codes. Consider what happens when the local XX and ZZ checks are measured inaccurately. The good news is this only causes local errors on the system qubits. The bad news is that if the measurement outcome has some probability of error q, then the error probability for the nonlocal stabilizer checks outcomes will scale as qn. This is a disadvantage of the Bacon-Shor code. Previous work [70,68] has sought to improve the fault-tolerance of the parity check measurements by replacing the preparation of simple single qubit ancillas by fault-tolerant ones (methods by Steane and Knill). In [70] a best noisethreshold of p c \u2248 0.02% was numerically obtained for the (concatenated) [ [25,1,5]] code. Recently, [69] considered an alternative way of making the syndrome more robust, namely by simple repetition of the XX and ZZ measurements and a collective processing of the information (as is done for the surface code). We can view the effect of repetition as extending the 1D line of defects to a 2D lattice of defects, as in Fig. 7, so that minimum weight decoding corresponds to finding a minimum weight matching of defect end-points. The error rate for vertical (black) links representing the parity check errors scales with n while the error rate for horizontal links (when one column has an even and the other column has an odd number of errors) scales, for low p, also with n. In [69] the authors estimate that the optimal size for the Bacon-Shor code is then n \u2248 0.014/p and that for this choice, the failure probability p(p) exp(\u22120.0068/p). Hence for an error rate of p = 5 \u00d7 10 \u22124 we can choose n = 28 giving a logical error rate of p \u2248 1.25 \u00d7 10 \u22126 .\n\n\nSubsystem Surface Code\n\nOne can ask whether it is possible to reduce the requirement to measure 4-qubit parities by using subsystem codes 14 . The Bacon-Shor code exemplifies this, but the Bacon-Shor code is not a topological subsystem codes as the stabilizer checks are nonlocal on the 2D lattice. Several topological subsystem codes have been proposed in which weight-2 parity checks are measured [72], but the asymptotic noise threshold for such codes is typically quite a bit lower than for the surface code, see e.g. [73].\n\nIn [74] a topological subsystem code was proposed,-a subsystem surface code-, in which the non-commuting parity checks are of weight-3 and the stabilizer generators are of weight 6, see Fig. 15. More precisely, the gauge group G is generated by the triangle operators XXX and ZZZ, including cut-off weight-2 operators at the boundary. The stabilizer group S = G \u2229C(G) is generated by weight-6 plaquette operators (at the boundary \u2192 weight-2 operators). By measuring, say, the Z-triangles we can deduce the eigenvalues of the Z-plaquettes which are used to do error correction.\n\nFor a L \u00d7 L lattice one has a total of 3L 2 + 4L + 1 qubits and 2L 2 + 4L independent stabilizer generators which gives L 2 +1 qubits. One of these qubits is the logical qubit whose Z and X commute with all Z and X-triangles. Similar as in the surface code, a vertical Z-line through 2L qubits can realize Z while a horizontal X-line realizes X. The logical operators for the L 2 gauge qubits, one for each plaquette, are pairs of triangle operators on a plaquette generating the group G. One can multiply, say, the vertical Z-line by Z-triangles to become a Z which acts only on L qubits: in [74] it is indeed proved that the distance of the code is L. Note that such weight-L Z acts on the logical qubit and the irrelevant gauge qubits.\n\nFor a code with distance L = 3 one thus needs 41 elementary qubits, substantially more than for the surface code. Multiple qubits can be encoded in this subsystem code by making holes as for the surface code. One can expect that braiding and lattice surgery methods for this code can be established in the same way as for the surface code. The interesting feature of this code are its relatively-high noise threshold obtained by reduced-weight parity checks (at the price of a bit more overhead). Decoding of stabilizer syndrome information is done by interpreting the syndrome as defects on a virtual lattice which can processed, similar as for the surface code, by minimum weight matching of defects or by RG decoding. For noise-free perfect error correction and independent X, Z noise, the authors report a maximum threshold of p c \u2248 7% (compare with 11% for the surface code). For noisy error correction the threshold depends on how single errors with probability p in the parity check circuit affect the error rate on the virtual lattice. Modeling this effective noise-rate on the virtual lattice, the authors find a noise threshold of p c \u2248 0.6%.\n\nIt is not surprising that decoding for the subsystem surface codes can be done using the decoding method for the surface code. It was proved in [75] that any 2D topological subsystem or stabilizer code can be locally mapped onto copies of the toric code. The upshot is that for any such code one can find, after removing some local errors by local correction, a virtual lattice with toric code parity checks and an underlying effective error model. An example of another 2D topological subsystem code which may be analyzed this way is a concatenation of the [ [4,2,2]] code with the surface code. If we use the [ [4,2,2]] code as subsystem code then the concatenated code has weight-2 and weight-8 check operators. The scheme may be of interest if the weight-2 checks can be measured fast and with high accuracy.\n\nA possible lay-out of the elementary qubits for the subsystem surface code with superconducting transmon qubits coupled through resonators (including ancilla transmon qubits for measurement) was considered in [76]. The idea of a direct 3-qubit parity measurement [60] via a parity-dependent shift of the cavity mode in the circuit QED setting could be useful in reducing the need for ancillas, in addition to being making better use of the given physical interactions. The authors of [74] report a threshold at least 0.97% by modeling such direct parity measurement.\n\n\nDiscussion\n\nPhysics in the past century has demonstrated the experimental viability of macroscopic quantum states such as the superconducting state or Bose-Einstein condensates. Quantum error correction which strives to preserve not a single macroscopic quantum state but the macroscopic states in a small subspace can be viewed as a natural but challenging extension to this. At the same time storing macroscopic quantum information is a first step towards the more ambitious goal of manipulating quantum information for computation purposes.\n\nThe current qubit realizations seem perhaps awkwardly suited to constitute the elementary qubits of an error-correcting code. Most elementary qubits are realized as nondegenerate eigenlevels (in a higher-dimensional space), approximately described by some H 0 = \u03c9 2 Z. The presence of H 0 immediately gives a handle on this qubit, i.e. processes which exchange energy with this qubit will drive it from |1 to |0 and vice versa (Rabi oscillations) and coupling of the qubit to other quantum degrees of freedom can be used for qubit read-out. Passive (non-time dependent) interactions with other quantum systems are intentionally weak and only lead to significant multiple-qubit interactions if we supply energy in the form of time-dependent AC fields meeting resonance conditions. To drive, keep Figure 15: Picture from [74]: subsystem surface code on a lattice of size L \u00d7 L with L 2 square plaquettes (depicted is L = 3). The qubits live on the edges and vertices of the plaquettes and are acted upon by weight-3 X and Z-triangle operators (which are modified to become weight-2 operators at the boundary). The stabilizer checks are weight 6 except at the boundary.\n\nor project multiple qubits via local parity checks in a code space where they are highly entangled, active control at the elementary qubit level will thus be continuously needed, making the macroscopic coding overhead look daunting.\n\nA different route toward the realization of quantum error-correction is based on passive Hamiltonian engineering. Instead of obtaining the desired stabilizer interactions dynamically through temporarily coupling qubits, one may attempt to engineer a physical system such that it has efffective, say, 4-body Hamiltonian interactions of the surface code between nearby qubits in a 2D array [77]. The difficulty with this approach is that it requires one, two and three-body terms in the effective Hamiltonian to be small: the elementary qubits should therefore have approximately degenerate levels |0 and |1 . But, then in order to encode information in the ground-space of such Hamiltonian, one will need to lift this degeneracy to address these levels. A possible advantage of this approach is that the protection is built into the hardware instead of being imposed dynamically. For example, the dynamical simulation of a topologically-protected Hamiltonian in a rotating frame where the strong single-qubit terms are absent does not guarantee that the physical system will also be driven to the ground-space of this simulated Hamiltonian; this will depend on (the time-scale of) the coupling with the dissipative environment. In contrast, topological protection at the hardware level means a realization of a Hamiltonian together with its low-temperature physical environment. A disadvantage of this passive approach is that the desired 4-body interactions will be typically be arrived at perturbatively and thus their strength and therefore the gap of the topologically-ordered Hamiltonian versus temperature may be small. An example is a 2D array of superconducting rhombi in a uniform magnetic field, each rhombus consisting of four superconducting islands, which can provide a Hamiltonian realization of the Bacon-Shor code with XX check and non-local stabilizer Z ||,i terms; see the review [78] for this and various other protected-qubit proposals for superconducting qubits. Another example is the proposal to realize the parity checks of the surface code through Majorana fermion tunneling between 2D arrays of superconducting islands, each supporting 4 Majorana bound states with fixed parity\n\nFigure 1 :\n1Measuring parity checks the quantum circuit-way. (a) Circuit to measure the \u00b11 eigenvalues of a unitary multi-qubit Pauli operator P . The gate is the controlled-P gate which applies P when the control qubit is 1 and I if the control qubit is 0. One measures the qubit in the |\u00b1 basis denoted as M X . (b) Realizing the evolution exp(\u2212i\u03b8P/2) itself (with R x (\u03b8) = exp(\u2212i\u03b8X/2). (c) Realization of circuit (a) using CNOTS when P = X 1 X 2 X 3 X 4 . (d) Realization of circuit (a) using CNOTs when P = Z 1 Z 2 Z 2 Z 4 .\n\nFigure 2 :\n2Picture from\n\nFigure 3 :\n3Concatenation: a gate G in the circuit M r\u22121 is replaced by a rectangle consisting of errorcorrecting steps (E) followed by a fault-tolerant encoded realization of the gate. The process can be repeated for every elementary gate in the new circuit M r .\n\n\nAn ideal circuit of size N can be simulated with arbitrary small error \u03b4 by a noisy quantum circuit subjected to independent stochastic noise of strength less than p < p c where the noisy quantum circuit is of size O(N (log N ) c )with some constant c.The important question is of course what is the noise threshold p c and how large is the constant c?\n\nFigure 4 :\n4Picture from[37]: so-called one-bit teleportation circuits. The measurement denoted by the meter is a measurement in the Z-basis and determines whether to do a Pauli on the output qubit.\n\nFigure 5 :\n5Picture from[37]: using the ancilla T |+ in the dashed box, one can realize the T gate by doing a corrective operation SX.SS \u2020 before the corrective Pauli X and use that SXS \u2020 \u221d Y . The gate S can be commuted through the control-line of the CNOT as both gates are diagonal in the Z-basis on the control qubit. We thus need the ancilla SH |0 = 1 \u221a 2 (|0 + i |1 ).\n\nFigure 7 :\n7Picture from[46]: 1D cross-section of the lattice in space, and time. Grey links correspond to non-trivial \u22121 syndromes. Errors which could have caused such a syndrome are represented by black links. Horizontal black links are qubit errors while vertical black links are parity check measurement errors. Note that a possible error E has the same boundary as the grey defect links: a likely error E (in the bulk) can be found by looking for a minimum-weighted matching of the end-points of the grey links.\n\nFigure 8 :\n8CNOT via 2-qubit quantum measurements. Here M XX measures the operator X \u2297 X etc.\n\nFigure 10 :\n10Picture from[49]: using an ancilla (INT) qubit sheet we can do a CNOT between the control (C) and target sheet (T) by a sequence of mergings and splittings between the sheets.\n\nFig. 12 .\n12Here Z p\u2212x (a) = exp(2\u03c0iaq p\u2212x ) whereq p\u2212x is the position variable of the oscillator at site p \u2212x (x and\u0177 are orthogonal unit-vectors on the lattice). One can observe from theFigure that\n\nFigure 12 :\n12B p (a) and B \u2020 p (a) commute with A s (b) and A \u2020 s (b) for all a, b in the bulk and at the boundary. We can thus define hermitian operators with real eigenvalues in [\u22121, 1] as H p (a) = 1 2 (B p (a) + B \u2020 p (a)) = cos(2\u03c0a(q p\u2212x \u2212q p+x +q p\u2212\u0177 \u2212q p+\u0177 )) andH s (b) = 1 2 (A s (b)+A \u2020 s (b)) = cos(2\u03c0b(\u2212p s\u2212x +p s+x +p s\u2212\u0177 \u2212p s+\u0177 )). We now define the code space as the +1 eigenspace of all H p (a), H s (b) for all a and b. It follows that states in the code-space obey the following constraints: a state in the code-space is a delta-Small example of the oscillator surface code where oscillators on the edges are locally coupled with plaquette and star operators so as to define an encoded oscillator with logical, non-local, displacements X(d) and Z(c). The realization of the four-oscillator interaction will require strong 4-mode sqeezing in either position (at plaquettes) or momenta (at stars).\n\nFigure 13 :\n13(a) 9-qubit [[9, 1, 3]] (Bacon) Shor code with black qubits on the vertices. Depicted are the 2-qubit XX and ZZ gauge operators. (b) [[25, 1, 5]] Bacon-Shor code with X, a row of Xs (blue), and Z, a column of Zs (yellow). The stabilizer generators are double columns of Zs, Z ||,i (one is depicted) and double rows of Xs, X =,j .(c) Decoding for X errors (or Z errors in the other direction). Black dots denote the places where the double column parity checks Z ||,i have eigenvalue \u22121 (defects)\nReaders less interested in this general framework can skip this section without major inconveniences.\nNote that left and right cosets are the same modulo trivial errors proportional to I.\nIf we were to use two coherent states as code states, say, 0 = |\u03b1 and 1 = |-\u03b1 , the QEC conditions would not be obeyed, as \u03b1| E \u2020 1 E 0 |\u03b1 = -\u03b1| E \u2020 1 E 0 |-\u03b1 for any \u03b1.\nSuch restorative process is physically impossible for all states in the code space as it would increase the distinguishability of states by decreasing their overlap.6 Asq andp are dimensionfull quantities one should take S q = e 2iq/q0 and S p = e \u2212i\u03c0p/p0 where q 0 and p 0 set the scale so thatq/q 0 etc. are dimensionless. In what follows we tacitly assume the existence of such a scale so that if, say, the codespace corresponds to integerp it is an integer in units of p 0 .\nA D-dimensional stabilizer code is a stabilizer code for which the parity checks are local on some D-dimensional lattice.\nOne can minimize the qubit overhead while keeping the distance equal to 3 by rotating the lattice and chopping off some qubits to get a total of 9 qubits, see e.g.[49].11 One can prove that the distance of any 2D stabilizer code is at most O(L)[50]. However, one can also show[51] that any block of size R \u00d7 R where R is less than some constant times the distance, is correctable, i.e. all errors in such R \u00d7 R patch can be corrected. These arguments show that there are no other 2D stabilizer codes with better distance scaling and that this scaling allows one to correct failed blocks of size beyond the distance.\nFig. 11in[55] estimates a pseudo-threshold of 6.8 \u00d7 10 \u22125 for the[[41, 1, 5]] surface code for an encoded transversal CNOT gate. This may be worse by a factor 2 from the pseudo-threshold for a single encoded qubit.\nThe action of the CNOT in the Heisenberg representation isX c \u2297I t \u2192 X c \u2297X t , I c \u2297X t \u2192 I c \u2297X t , Z c \u2297I t \u2192 Z c \u2297I t and I c \u2297 Z t \u2192 Z c \u2297 Z t where X c (X t ) stands for Pauli X on control qubit c (t) etc.\nOne can prove that 2D qubit codes defined as eigenspaces of 3-local mutually commuting terms are trivial as quantum codes[71].\n\nOne drawback of this Hamiltonian-based 'self-correcting' approach is that a finite temperature 'quantum memory phase' may only exist in 3D or 4D quantum systems. 80see e.g. the reviewOne drawback of this Hamiltonian-based 'self-correcting' approach is that a finite temperature 'quantum memory phase' may only exist in 3D or 4D quantum systems, see e.g. the review [80].\n\nFault-tolerant quantum computation by anyons. A Kitaev, Ann. Phys. 303A. Kitaev. Fault-tolerant quantum computation by anyons. Ann. Phys., 303:2-30, 2003. http: //arxiv.org/abs/quant-ph/9707021.\n\nFault-tolerant quantum computation. P W Shor, Proceedings of 37th FOCS. 37th FOCSP. W. Shor. Fault-tolerant quantum computation. In Proceedings of 37th FOCS, pages 56-65, 1996.\n\nAn open-system quantum simulator with trapped ions. J T Barreiro, M M\u00fcller, P Schindler, D Nigg, T Monz, M Chwalla, M Hennrich, C F Roos, P Zoller, R Blatt, Nature. 470J. T. Barreiro, M. M\u00fcller, P. Schindler, D. Nigg, T. Monz, M. Chwalla, M. Hennrich, C. F. Roos, P. Zoller, and R. Blatt. An open-system quantum simulator with trapped ions. Nature, 470:486-491, February 2011.\n\nExperimental demonstration of topological error correction. X.-C Yao, T.-X Wang, H.-Z Chen, W.-B Gao, A G Fowler, R Raussendorf, Z.-B Chen, N.-L Liu, C.-Y Lu, Y.-J Deng, Y.-A Chen, J.-W Pan, Nature. 482X.-C. Yao, T.-X. Wang, H.-Z. Chen, W.-B. Gao, A. G. Fowler, R. Raussendorf, Z.-B. Chen, N.-L. Liu, C.-Y. Lu, Y.-J. Deng, Y.-A. Chen, and J.-W. Pan. Experimental demonstration of topological error correction. Nature, 482:489-494, February 2012.\n\nQuantum error correction beyond qubits. T Aoki, G Takahashi, T Kajiya, J Yoshikawa, S L Braunstein, P Van Loock, A Furusawa, Nature Physics. 5541T. Aoki, G. Takahashi, T. Kajiya, J.-i. Yoshikawa, S. L. Braunstein, P. van Loock, and A. Furu- sawa. Quantum error correction beyond qubits. Nature Physics, 5:541, November 2009.\n\nQuantum accuracy threshold for concatenated distance-3 codes. Quantum Information and Computation. Panos Aliferis, Daniel Gottesman, John Preskill, 6Panos Aliferis, Daniel Gottesman, and John Preskill. Quantum accuracy threshold for concate- nated distance-3 codes. Quantum Information and Computation, 6:97-165, 2006.\n\nFault-Tolerant Quantum Computation with Long-Range Correlated Noise. D Aharonov, A Kitaev, J Preskill, Physical Review Letters. 96550504D. Aharonov, A. Kitaev, and J. Preskill. Fault-Tolerant Quantum Computation with Long-Range Correlated Noise. Physical Review Letters, 96(5):050504, February 2006.\n\nStabilizer Codes and Quantum Error Correction. D Gottesman, PhD thesisD. Gottesman. Stabilizer Codes and Quantum Error Correction. PhD thesis, CalTech, 1997. http://arxiv.org/abs/quant-ph/9705052.\n\nStabilizer Formalism for Operator Quantum Error Correction. D Poulin, Physical Review Letters. 9523230504D. Poulin. Stabilizer Formalism for Operator Quantum Error Correction. Physical Review Letters, 95(23):230504, December 2005.\n\nQuantum computing with realistically noisy devices. E , Nature. 434E. Knill. Quantum computing with realistically noisy devices. Nature, 434:39-44, 2005.\n\nFibonacci scheme for fault-tolerant quantum computation. P Aliferis, J Preskill, P. Aliferis and J. Preskill. Fibonacci scheme for fault-tolerant quantum computation.\n\n. Phys. Rev. A. 79112332Phys. Rev. A, 79(1):012332, January 2009.\n\nOptimal and efficient decoding of concatenated quantum block codes. D Poulin, Phys. Rev. A. 74552333D. Poulin. Optimal and efficient decoding of concatenated quantum block codes. Phys. Rev. A, 74(5):052333, November 2006.\n\nQuantum computation and quantum information. M A Nielsen, I L Chuang, Cambridge University PressCambridge, U.K.M. A. Nielsen and I. L. Chuang. Quantum computation and quantum information. Cambridge University Press, Cambridge, U.K., 2000.\n\nUnified and Generalized Approach to Quantum Error Correction. D Kribs, R Laflamme, D Poulin, Physical Review Letters. 9418180501D. Kribs, R. Laflamme, and D. Poulin. Unified and Generalized Approach to Quantum Error Correction. Physical Review Letters, 94(18):180501, May 2005.\n\nAlgebraic and information-theoretic conditions for operator quantum error-correction. M A Nielsen, D Poulin, Phys. Rev.A. 064304M. A. Nielsen and D. Poulin. Algebraic and information-theoretic conditions for operator quan- tum error-correction. Phys. Rev.A, 064304(R), 2007.\n\nApproximate quantum error correction can lead to better codes. D W Leung, M A Nielsen, I L Chuang, Y Yamamoto, Phys. Rev. A. 56D. W. Leung, M. A. Nielsen, I. L. Chuang, and Y. Yamamoto. Approximate quantum error correction can lead to better codes. Phys. Rev. A, 56:2567-2573, October 1997.\n\nHardwareefficient autonomous quantum error correction. Z Leghtas, G Kirchmair, B Vlastakis, R Schoelkopf, M Devoret, M Mirrahimi, Z. Leghtas, G. Kirchmair, B. Vlastakis, R. Schoelkopf, M. Devoret, and M. Mirrahimi. Hardware- efficient autonomous quantum error correction. July 2012. http://arxiv.org/abs/1207.0679.\n\nExploring the Quantum: Atoms, Cavities, and Photons. Serge Haroche, Jean Michel Raimond, Oxford Univ. PressOxfordSerge Haroche and Jean Michel Raimond. Exploring the Quantum: Atoms, Cavities, and Photons. Oxford Univ. Press, Oxford, 2006.\n\n. S Braunstein, Phys. Rev. Lett. 804084S. Braunstein. Phys. Rev. Lett., 80:4084, 1998.\n\n. S Lloyd, J.-J Slotine, Phys. Rev. Lett. 804088S. Lloyd and J.-J. Slotine. Phys. Rev. Lett., 80:4088, 1998.\n\nAnalysis of quantum error-correcting codes: symplectic lattice codes and toric codes. J Harrington, CalTech. PhD thesisJ. Harrington. Analysis of quantum error-correcting codes: symplectic lattice codes and toric codes. PhD thesis, CalTech, 2004. http://thesis.library.caltech.edu/1747/.\n\nEncoding a qubit in an oscillator. D Gottesman, A Yu, J Kitaev, Preskill, Phys. Rev. A. 6412310D. Gottesman, A.Yu. Kitaev, and J. Preskill. Encoding a qubit in an oscillator. Phys. Rev. A, 64:012310, 2001.\n\nCharge-insensitive qubit design derived from the cooper pair box. Jens Koch, Terri M Yu, Jay Gambetta, A A Houck, D I Schuster, J Majer, Alexandre Blais, M H Devoret, S M Girvin, R J Schoelkopf, Phys. Rev. A. 7642319Jens Koch, Terri M. Yu, Jay Gambetta, A. A. Houck, D. I. Schuster, J. Majer, Alexandre Blais, M. H. Devoret, S. M. Girvin, and R. J. Schoelkopf. Charge-insensitive qubit design derived from the cooper pair box. Phys. Rev. A, 76:042319, Oct 2007.\n\nProtected qubit based on a superconducting current mirror. A Kitaev, A. Kitaev. Protected qubit based on a superconducting current mirror. 2006. http://arxiv. org/abs/cond-mat/0609441.\n\nError analysis for encoding a qubit in an oscillator. S Glancy, E Knill, Phys. Rev. A. 73112325S. Glancy and E. Knill. Error analysis for encoding a qubit in an oscillator. Phys. Rev. A, 73(1):012325, 2006.\n\nAll-optical generation of states for \"Encoding a qubit in an oscillator. H Vasconcelos, L Sanz, S Glancy, Opt. Lett. 35H. Vasconcelos, L. Sanz, and S. Glancy. All-optical generation of states for \"Encoding a qubit in an oscillator\". Opt. Lett., 35(3261-3263), 2010.\n\nString-net condensation: A physical mechanism for topological phases. M A Levin, X.-G Wen, Phys. Rev. B. 71445110M. A. Levin and X.-G. Wen. String-net condensation: A physical mechanism for topological phases. Phys. Rev. B, 71(4):045110, January 2005.\n\nQuantum computation with Turaev-Viro codes. R Koenig, G Kuperberg, B W Reichardt, Annals of Physics. 325R. Koenig, G. Kuperberg, and B. W. Reichardt. Quantum computation with Turaev-Viro codes. Annals of Physics, 325:2707-2749, 2010.\n\nContinuous quantum error correction via quantum feedback control. C Ahn, A C Doherty, A J Landahl, Phys. Rev. A. 65442301C. Ahn, A. C. Doherty, and A. J. Landahl. Continuous quantum error correction via quantum feedback control. Phys. Rev. A, 65(4):042301, April 2002.\n\nSimulating open quantum systems: from many-body interactions to stabilizer pumping. M M\u00fcller, K Hammerer, Y L Zhou, C F Roos, P Zoller, New Journal of Physics. 13885007M. M\u00fcller, K. Hammerer, Y. L. Zhou, C. F. Roos, and P. Zoller. Simulating open quantum sys- tems: from many-body interactions to stabilizer pumping. New Journal of Physics, 13(8):085007, August 2011.\n\nFault-tolerant quantum computation with constant error. D Aharonov, M Ben-Or, Proceedings of 29th STOC. 29th STOCD. Aharonov and M. Ben-Or. Fault-tolerant quantum computation with constant error. In Proceedings of 29th STOC, pages 176-188, 1997.\n\nResilient quantum computation: Error models and thresholds. E Knill, R Laflamme, W Zurek, Proc. R. Soc. Lond. A. R. Soc. Lond. A454E. Knill, R. Laflamme, and W. Zurek. Resilient quantum computation: Error models and thresholds. Proc. R. Soc. Lond. A, 454:365-384, 1997.\n\nQuantum computations: algorithms and error correction. A Yu, Kitaev, Russian Math. Surveys. 52A.Yu. Kitaev. Quantum computations: algorithms and error correction. Russian Math. Surveys, 52:1191-1249, 1997.\n\nNoise threshold for a fault-tolerant twodimensional lattice architecture. K M Svore, D P Divincenzo, B M , Quantum Information and Computation. 7K.M. Svore, D.P. DiVincenzo, and B.M. Terhal. Noise threshold for a fault-tolerant two- dimensional lattice architecture. Quantum Information and Computation, 7:297-318, 2007.\n\nThe Heisenberg Representation of Quantum Computers. Daniel Gottesman, Group22: Proceedings of the XXII International Colloquium on Group Theoretical Methods in Physics. Daniel Gottesman. The Heisenberg Representation of Quantum Computers. In Group22: Pro- ceedings of the XXII International Colloquium on Group Theoretical Methods in Physics, pages 32-43, 1999. http://arxiv.org/abs/quant-ph/9807006.\n\nDemonstrating the viability of universal quantum computation using teleportation and single-qubit operations. D Gottesman, I L Chuang, Nature. 402D. Gottesman and I. L. Chuang. Demonstrating the viability of universal quantum computation using teleportation and single-qubit operations. Nature, 402:390-393, November 1999.\n\nMethodology for quantum logic gate construction. X Zhou, D W Leung, I L Chuang, Phys. Rev. A. 62552316X. Zhou, D. W. Leung, and I. L. Chuang. Methodology for quantum logic gate construction. Phys. Rev. A, 62(5):052316, November 2000.\n\nClassification of topologically protected gates for local stabilizer codes. S Bravyi, R Koenig, S. Bravyi and R. Koenig. Classification of topologically protected gates for local stabilizer codes. 2012. http://arxiv.org/abs/1206.1609.\n\nLevel Reduction and the Quantum Threshold Theorem. P Aliferis, CalTech. PhD thesisP. Aliferis. Level Reduction and the Quantum Threshold Theorem. PhD thesis, CalTech, 2007. http://arxiv.org/abs/quant-ph/0703230.\n\n. H Bombin, M A Martin-Delgado, Topological Quantum Distillation. Physical Review Letters. 9718180501H. Bombin and M. A. Martin-Delgado. Topological Quantum Distillation. Physical Review Letters, 97(18):180501, November 2006.\n\nUniversal quantum computation with ideal Clifford gates and noisy ancillas. S Bravyi, A Kitaev, Phys. Rev. A. 7122316S. Bravyi and A. Kitaev. Universal quantum computation with ideal Clifford gates and noisy ancillas. Phys. Rev. A, 71:022316, 2005.\n\nTopological fault-tolerance in cluster state quantum computation. R Raussendorf, J Harrington, K Goyal, New J. Phys. 9R. Raussendorf, J. Harrington, and K. Goyal. Topological fault-tolerance in cluster state quantum computation. New J. Phys., 9:199-219, June 2007.\n\nMultilevel distillation of magic states for quantum computing. C Jones, C. Jones. Multilevel distillation of magic states for quantum computing. October 2012. http: //arxiv.org/abs/1210.3388.\n\nFault-tolerant quantum computing with color codes. A J Landahl, J T Anderson, P R Rice, A. J. Landahl, J. T. Anderson, and P. R. Rice. Fault-tolerant quantum computing with color codes. August 2011. http://arxiv.org/abs/1108.5738.\n\nQuantum codes on a lattice with boundary. S B Bravyi, A Yu Kitaev, S. B. Bravyi and A. Yu Kitaev. Quantum codes on a lattice with boundary, 1998.\n\nTopological quantum memory. E Dennis, A Kitaev, A Landahl, J Preskill, J. Math. Phys. 43E. Dennis, A. Kitaev, A. Landahl, and J. Preskill. Topological quantum memory. J. Math. Phys., 43:4452-4505, 2002.\n\nQuantum measurements and gates by code deformation. H Bombin, M A Martin-Delgado, Journal of Physics A Mathematical General. 42995302H. Bombin and M. A. Martin-Delgado. Quantum measurements and gates by code deformation. Journal of Physics A Mathematical General, 42(9):095302-+, March 2009.\n\nFault-Tolerant Quantum Computation with High Threshold in Two Dimensions. R Raussendorf, J Harrington, Phys. Rev. Lett. 9819190504R. Raussendorf and J. Harrington. Fault-Tolerant Quantum Computation with High Threshold in Two Dimensions. Phys. Rev. Lett., 98(19):190504, May 2007.\n\nSurface code quantum computing by lattice surgery. C Horsman, A G Fowler, S Devitt, R Van Meter, C. Horsman, A. G. Fowler, S. Devitt, and R. Van Meter. Surface code quantum computing by lattice surgery. November 2011. http://arxiv.org/abs/1111.4022.\n\nA no-go theorem for a two-dimensional self-correcting quantum memory based on stabilizer codes. Sergey Bravyi, Barbara Terhal, New Journal of Physics. 1143029Sergey Bravyi and Barbara Terhal. A no-go theorem for a two-dimensional self-correcting quan- tum memory based on stabilizer codes. New Journal of Physics, 11:043029, 2009.\n\nTradeoffs for Reliable Quantum Information Storage in 2D Systems. S Bravyi, D Poulin, B Terhal, Physical Review Letters. 104550503S. Bravyi, D. Poulin, and B. Terhal. Tradeoffs for Reliable Quantum Information Storage in 2D Systems. Physical Review Letters, 104(5):050503, February 2010.\n\nPaths, trees, and flowers. Canad. J. Math. 17Jack Edmonds. Paths, trees, and flowers. Canad. J. Math., 17:449-467, 1965.\n\nConfinement-Higgs transition in a disordered gauge theory and the accuracy threshold for quantum memory. C Wang, J Harrington, J Preskill, Annals of Physics. 303C. Wang, J. Harrington, and J. Preskill. Confinement-Higgs transition in a disordered gauge theory and the accuracy threshold for quantum memory. Annals of Physics, 303:31-58, January 2003.\n\nAccurate simulations of planar topological codes cannot use cyclic boundaries. A G Fowler, A. G. Fowler. Accurate simulations of planar topological codes cannot use cyclic boundaries. September 2012. http://arxiv.org/abs/1209.3539.\n\nA comparative code study for quantum fault tolerance. Andrew W Cross, David P Divincenzo, Barbara M Terhal, Quantum Info. Comput. 97Andrew W. Cross, David P. DiVincenzo, and Barbara M. Terhal. A comparative code study for quantum fault tolerance. Quantum Info. Comput., 9(7):541-572, July 2009.\n\nQuantum-error-correction benchmarks for continuous weakparity measurements. G Denhez, A Blais, D Poulin, Phys. Rev. A. 86332318G. Denhez, A. Blais, and D. Poulin. Quantum-error-correction benchmarks for continuous weak- parity measurements. Phys. Rev. A, 86(3):032318, 2012.\n\nA renormalization group decoding algorithm for topological quantum codes. G Duclos-Cianci, D Poulin, Information Theory Workshop (ITW). IEEEG. Duclos-Cianci and D. Poulin. A renormalization group decoding algorithm for topological quantum codes. Information Theory Workshop (ITW), 2010 IEEE.\n\nAnalytic and numerical demonstration of quantum self-correction in the 3D Cubic Code. S Bravyi, J Haah, S. Bravyi and J. Haah. Analytic and numerical demonstration of quantum self-correction in the 3D Cubic Code. December 2011. http://arxiv.org/abs/1112.3252.\n\nFault-tolerant architectures for superconducting qubits. D P Divincenzo, Physica Scripta. T114020D. P. DiVincenzo. Fault-tolerant architectures for superconducting qubits. Physica Scripta Volume T, 137(1):014020, December 2009.\n\nMulti-qubit parity measurement in circuit quantum electrodynamics. D P Divincenzo, F Solgun, D. P. DiVincenzo and F. Solgun. Multi-qubit parity measurement in circuit quantum electrody- namics. May 2012. http://arxiv.org/abs/1205.1910.\n\nTunable joint measurements in the dispersive regime of cavity QED. K Lalumi\u00e8re, J M Gambetta, A Blais, Phys. Rev. A. 81440301K. Lalumi\u00e8re, J. M. Gambetta, and A. Blais. Tunable joint measurements in the dispersive regime of cavity QED. Phys. Rev. A, 81(4):040301, April 2010.\n\nStabilizer quantum error correction toolbox for superconducting qubits. S E Nigg, S M Girvin, S. E. Nigg and S. M. Girvin. Stabilizer quantum error correction toolbox for superconducting qubits. December 2012. http://arxiv.org/abs/1212.4000.\n\nFault-Tolerant Quantum Computation with Higher-Dimensional Systems. Daniel Gottesman, Chaos Solitons and Fractals. 10Daniel Gottesman. Fault-Tolerant Quantum Computation with Higher-Dimensional Systems. Chaos Solitons and Fractals, 10:1749-1758, 1999.\n\nHigh-threshold universal quantum computation on the surface code. A G Fowler, A M Stephens, P Groszkowski, Phys. Rev. A. 80552312A. G. Fowler, A. M. Stephens, and P. Groszkowski. High-threshold universal quantum compu- tation on the surface code. Phys. Rev. A, 80(5):052312-+, November 2009.\n\nQudit surface codes and gauge theory with finite cyclic groups. S S Bullock, G K Brennen, Journal of Physics A Mathematical General. 40S. S. Bullock and G. K. Brennen. Qudit surface codes and gauge theory with finite cyclic groups. Journal of Physics A Mathematical General, 40:3481-3505, March 2007.\n\nAnyon statistics with continuous variables. J Zhang, C Xie, K Peng, P Van Loock, Phys. Rev. A. 78552121J. Zhang, C. Xie, K. Peng, and P. van Loock. Anyon statistics with continuous variables. Phys. Rev. A, 78(5):052121, November 2008.\n\nOperator quantum error correcting subsystems for self-correcting quantum memories. Dave Bacon, Physical Review A. 7312340Dave Bacon. Operator quantum error correcting subsystems for self-correcting quantum memo- ries. Physical Review A, 73:012340, 2006.\n\nFault-tolerant quantum computation with asymmetric Bacon-Shor codes. P Brooks, J Preskill, P. Brooks and J. Preskill. Fault-tolerant quantum computation with asymmetric Bacon-Shor codes. 2012. http://arxiv.org/abs/1211.1400.\n\nOptimal Bacon-Shor codes. J Napp, J Preskill, J. Napp and J. Preskill. Optimal Bacon-Shor codes. September 2012. http://arxiv.org/abs/ 1209.0794.\n\nSubsystem fault-tolerance with the Bacon-Shor code. P Aliferis, A Cross, Phys. Rev. Lett. 98220502P. Aliferis and A. Cross. Subsystem fault-tolerance with the Bacon-Shor code. Phys. Rev. Lett., 98:220502, 2007.\n\nOn the complexity of Commuting Local Hamiltonians, and tight conditions for Topological Order in such systems. D Aharonov, L Eldar, D. Aharonov and L. Eldar. On the complexity of Commuting Local Hamiltonians, and tight conditions for Topological Order in such systems. February 2011. http://arxiv.org/abs/ 1102.0770.\n\nTopological subsystem codes. H Bombin, Phys. Rev. A. 81332301H. Bombin. Topological subsystem codes. Phys. Rev. A, 81(3):032301, March 2010.\n\nConstructions and noise threshold of topological subsystem codes. M Suchara, S Bravyi, B Terhal, Journal of Physics A Mathematical General. 4415155301M. Suchara, S. Bravyi, and B. Terhal. Constructions and noise threshold of topological subsystem codes. Journal of Physics A Mathematical General, 44(15):155301, 2011.\n\nSubsystem surface codes with threequbit check operators. S Bravyi, G Duclos-Cianci, D Poulin, M Suchara, S. Bravyi, G. Duclos-Cianci, D. Poulin, and M. Suchara. Subsystem surface codes with three- qubit check operators. http://arxiv.org/abs/1207.1443.\n\nUniversal topological phase of two-dimensional stabilizer codes. H Bombin, G Duclos-Cianci, D Poulin, New Journal of Physics. 14773048H. Bombin, G. Duclos-Cianci, and D. Poulin. Universal topological phase of two-dimensional stabilizer codes. New Journal of Physics, 14(7):073048, July 2012.\n\n. D Huben ; Rwth Aachen, Bachelor ThesisSupervision of D. P. DiVincenzoD. Huben. Bachelor Thesis, RWTH Aachen (Supervision of D. P. DiVincenzo). http: //www.physik.rwth-aachen.de/en/institutes/institute-for-quantum-information/ student-projects/past-theses/.\n\nAnyons in an exactly solved model and beyond. Alexei Kitaev, Annals of Physics. 3212Alexei Kitaev. Anyons in an exactly solved model and beyond. Annals of Physics, 321:2, 2006.\n\nPhysical implementation of protected qubits. B Doucot, L Ioffe, Reports on Progress in Physics. 7572001B. Doucot and L. Ioffe. Physical implementation of protected qubits . Reports on Progress in Physics, 75:072001, 2012.\n\nFrom Majorana fermions to topological order. B M Terhal, F Hassler, D P Divincenzo, Physical Review Letters. 10826260504B. M. Terhal, F. Hassler, and D. P. DiVincenzo. From Majorana fermions to topological order. Physical Review Letters, 108(26):260504, June 2012.\n\nQuantum memories and error correction. J R Wootton, Journal of Modern Optics. 59J. R. Wootton. Quantum memories and error correction. Journal of Modern Optics, 59:1717- 1738, November 2012. http://arxiv.org/abs/1210.3207.\n", "annotations": {"author": "[{\"end\":154,\"start\":66}]", "publisher": null, "author_last_name": "[{\"end\":76,\"start\":70}]", "author_first_name": "[{\"end\":67,\"start\":66},{\"end\":69,\"start\":68}]", "author_affiliation": "[{\"end\":153,\"start\":78}]", "title": "[{\"end\":46,\"start\":1},{\"end\":200,\"start\":155}]", "venue": null, "abstract": "[{\"end\":645,\"start\":219}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":834,\"start\":831},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":984,\"start\":981},{\"end\":1072,\"start\":1062},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1700,\"start\":1697},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1804,\"start\":1801},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1900,\"start\":1897},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4515,\"start\":4514},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":9005,\"start\":9002},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9007,\"start\":9005},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9009,\"start\":9007},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":11642,\"start\":11639},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":12696,\"start\":12693},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":15110,\"start\":15107},{\"end\":17718,\"start\":17715},{\"end\":17751,\"start\":17746},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":19148,\"start\":19145},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":22863,\"start\":22859},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":23353,\"start\":23350},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":23355,\"start\":23353},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":23357,\"start\":23355},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":23378,\"start\":23374},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":23439,\"start\":23435},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":23445,\"start\":23441},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":23454,\"start\":23450},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":23925,\"start\":23921},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":23927,\"start\":23925},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":23929,\"start\":23927},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":24186,\"start\":24182},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":24271,\"start\":24267},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":24945,\"start\":24941},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":25032,\"start\":25029},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":25034,\"start\":25032},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":25036,\"start\":25034},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":25082,\"start\":25078},{\"end\":25144,\"start\":25134},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":29565,\"start\":29561},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":29568,\"start\":29565},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":30425,\"start\":30422},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":30427,\"start\":30425},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":30429,\"start\":30427},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":30612,\"start\":30608},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":31263,\"start\":31259},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":31638,\"start\":31634},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":32301,\"start\":32297},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":33181,\"start\":33177},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33796,\"start\":33792},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33808,\"start\":33804},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":34090,\"start\":34086},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":34093,\"start\":34090},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":34108,\"start\":34104},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":34233,\"start\":34229},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":35050,\"start\":35049},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":35590,\"start\":35586},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":37714,\"start\":37710},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":37897,\"start\":37893},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":38262,\"start\":38258},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":38902,\"start\":38898},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":39330,\"start\":39326},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":39342,\"start\":39338},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":39954,\"start\":39950},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":40003,\"start\":39999},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":41542,\"start\":41538},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":42090,\"start\":42087},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":42093,\"start\":42090},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":43117,\"start\":43113},{\"end\":43446,\"start\":43440},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":44180,\"start\":44177},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":45163,\"start\":45160},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":45165,\"start\":45163},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":45167,\"start\":45165},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":46423,\"start\":46419},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":47049,\"start\":47046},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":47051,\"start\":47049},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":47053,\"start\":47051},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":47106,\"start\":47102},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":47524,\"start\":47520},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":47979,\"start\":47975},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":49397,\"start\":49393},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":49678,\"start\":49674},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":49681,\"start\":49678},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":50495,\"start\":50492},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":51184,\"start\":51181},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":51186,\"start\":51184},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":51188,\"start\":51186},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":51387,\"start\":51383},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":52259,\"start\":52255},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":52391,\"start\":52387},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":52417,\"start\":52413},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":52880,\"start\":52876},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":53386,\"start\":53382},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":53699,\"start\":53695},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":54729,\"start\":54725},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":57088,\"start\":57084},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":57334,\"start\":57330},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":57408,\"start\":57405},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":57497,\"start\":57493},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":57609,\"start\":57605},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":57685,\"start\":57681},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":57688,\"start\":57685},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":58150,\"start\":58148},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":58805,\"start\":58803},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":60639,\"start\":60635},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":60914,\"start\":60910},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":61026,\"start\":61022},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":62495,\"start\":62491},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":63052,\"start\":63048},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":63131,\"start\":63127},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":63184,\"start\":63180},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":63371,\"start\":63367},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":63374,\"start\":63371},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":63535,\"start\":63531},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":63769,\"start\":63765},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":63771,\"start\":63769},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":63773,\"start\":63771},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":63982,\"start\":63978},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":65102,\"start\":65098},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":65105,\"start\":65102},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":65240,\"start\":65236},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":65988,\"start\":65984},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":66084,\"start\":66080},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":66455,\"start\":66451},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":67004,\"start\":67000},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":67324,\"start\":67320},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":67887,\"start\":67883},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":68241,\"start\":68237},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":68252,\"start\":68248},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":68471,\"start\":68467},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":68908,\"start\":68904},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":68917,\"start\":68913},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":70671,\"start\":70667},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":70820,\"start\":70816},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":70895,\"start\":70891},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":70898,\"start\":70895},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":71639,\"start\":71635},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":71642,\"start\":71639},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":72113,\"start\":72109},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":72331,\"start\":72327},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":75532,\"start\":75528},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":75535,\"start\":75532},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":76106,\"start\":76102},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":80202,\"start\":80200},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":82920,\"start\":82916},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":83037,\"start\":83033},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":83637,\"start\":83633},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":87021,\"start\":87017},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":87573,\"start\":87569},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":90174,\"start\":90170},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":90800,\"start\":90796},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":91612,\"start\":91608},{\"end\":91730,\"start\":91713},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":92116,\"start\":92112},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":92119,\"start\":92116},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":92317,\"start\":92313},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":92409,\"start\":92405},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":92411,\"start\":92409},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":92413,\"start\":92411},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":92435,\"start\":92431},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":93113,\"start\":93109},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":93526,\"start\":93524},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":93789,\"start\":93785},{\"attributes\":{\"ref_id\":\"b74\"},\"end\":93912,\"start\":93908},{\"attributes\":{\"ref_id\":\"b75\"},\"end\":93922,\"start\":93918},{\"attributes\":{\"ref_id\":\"b75\"},\"end\":95090,\"start\":95086},{\"attributes\":{\"ref_id\":\"b76\"},\"end\":96535,\"start\":96531},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":96950,\"start\":96947},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":96952,\"start\":96950},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":96954,\"start\":96952},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":97003,\"start\":97000},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":97005,\"start\":97003},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":97007,\"start\":97005},{\"attributes\":{\"ref_id\":\"b77\"},\"end\":97414,\"start\":97410},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":97468,\"start\":97464},{\"attributes\":{\"ref_id\":\"b75\"},\"end\":97689,\"start\":97685},{\"attributes\":{\"ref_id\":\"b75\"},\"end\":99138,\"start\":99134},{\"attributes\":{\"ref_id\":\"b78\"},\"end\":100109,\"start\":100105},{\"attributes\":{\"ref_id\":\"b79\"},\"end\":101618,\"start\":101614},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":103127,\"start\":103123},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":103327,\"start\":103323},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":103703,\"start\":103699},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":104318,\"start\":104314},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":106631,\"start\":106630},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":107233,\"start\":107229},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":107236,\"start\":107234},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":107314,\"start\":107310},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":107346,\"start\":107342},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":107695,\"start\":107691},{\"attributes\":{\"ref_id\":\"b72\"},\"end\":108234,\"start\":108230}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":102450,\"start\":101920},{\"attributes\":{\"id\":\"fig_2\"},\"end\":102476,\"start\":102451},{\"attributes\":{\"id\":\"fig_3\"},\"end\":102742,\"start\":102477},{\"attributes\":{\"id\":\"fig_4\"},\"end\":103097,\"start\":102743},{\"attributes\":{\"id\":\"fig_5\"},\"end\":103297,\"start\":103098},{\"attributes\":{\"id\":\"fig_6\"},\"end\":103673,\"start\":103298},{\"attributes\":{\"id\":\"fig_7\"},\"end\":104191,\"start\":103674},{\"attributes\":{\"id\":\"fig_8\"},\"end\":104286,\"start\":104192},{\"attributes\":{\"id\":\"fig_9\"},\"end\":104477,\"start\":104287},{\"attributes\":{\"id\":\"fig_11\"},\"end\":104679,\"start\":104478},{\"attributes\":{\"id\":\"fig_12\"},\"end\":105595,\"start\":104680},{\"attributes\":{\"id\":\"fig_13\"},\"end\":106106,\"start\":105596}]", "paragraph": "[{\"end\":1213,\"start\":647},{\"end\":2165,\"start\":1215},{\"end\":2738,\"start\":2210},{\"end\":3786,\"start\":2740},{\"end\":4218,\"start\":3788},{\"end\":4590,\"start\":4220},{\"end\":6292,\"start\":4592},{\"end\":6935,\"start\":6294},{\"end\":7134,\"start\":6937},{\"end\":8199,\"start\":7136},{\"end\":10265,\"start\":8201},{\"end\":10911,\"start\":10267},{\"end\":11854,\"start\":10913},{\"end\":13134,\"start\":11856},{\"end\":14985,\"start\":13136},{\"end\":15664,\"start\":15020},{\"end\":17062,\"start\":15706},{\"end\":18996,\"start\":17090},{\"end\":19883,\"start\":18998},{\"end\":20489,\"start\":19885},{\"end\":21336,\"start\":20491},{\"end\":21831,\"start\":21390},{\"end\":22595,\"start\":21833},{\"end\":22802,\"start\":22696},{\"end\":23298,\"start\":22804},{\"end\":23664,\"start\":23300},{\"end\":24001,\"start\":23684},{\"end\":24946,\"start\":24003},{\"end\":25748,\"start\":24948},{\"end\":26778,\"start\":25750},{\"end\":27098,\"start\":26780},{\"end\":27264,\"start\":27100},{\"end\":27819,\"start\":27324},{\"end\":28834,\"start\":27990},{\"end\":29709,\"start\":28892},{\"end\":30221,\"start\":30144},{\"end\":30701,\"start\":30223},{\"end\":31036,\"start\":30801},{\"end\":31409,\"start\":31140},{\"end\":31888,\"start\":31411},{\"end\":32453,\"start\":31948},{\"end\":33954,\"start\":32571},{\"end\":34849,\"start\":33956},{\"end\":35693,\"start\":34851},{\"end\":36310,\"start\":35695},{\"end\":38048,\"start\":36312},{\"end\":38494,\"start\":38050},{\"end\":39605,\"start\":38533},{\"end\":40484,\"start\":39607},{\"end\":41911,\"start\":40525},{\"end\":42529,\"start\":41913},{\"end\":43108,\"start\":42587},{\"end\":43673,\"start\":43110},{\"end\":45924,\"start\":43675},{\"end\":47185,\"start\":45926},{\"end\":48521,\"start\":47202},{\"end\":50033,\"start\":48523},{\"end\":51266,\"start\":50035},{\"end\":51949,\"start\":51380},{\"end\":52787,\"start\":51951},{\"end\":53830,\"start\":52789},{\"end\":54243,\"start\":53832},{\"end\":54753,\"start\":54245},{\"end\":55135,\"start\":54791},{\"end\":56366,\"start\":55137},{\"end\":57335,\"start\":56368},{\"end\":57689,\"start\":57352},{\"end\":58586,\"start\":57691},{\"end\":58807,\"start\":58588},{\"end\":60045,\"start\":58809},{\"end\":61591,\"start\":60047},{\"end\":62337,\"start\":61593},{\"end\":64740,\"start\":62339},{\"end\":66148,\"start\":64742},{\"end\":67325,\"start\":66150},{\"end\":68114,\"start\":67327},{\"end\":69052,\"start\":68116},{\"end\":70277,\"start\":69106},{\"end\":70899,\"start\":70279},{\"end\":71946,\"start\":70901},{\"end\":72573,\"start\":71948},{\"end\":75126,\"start\":72754},{\"end\":75391,\"start\":75128},{\"end\":75783,\"start\":75436},{\"end\":77222,\"start\":75785},{\"end\":78759,\"start\":77224},{\"end\":79552,\"start\":78761},{\"end\":80204,\"start\":79554},{\"end\":80744,\"start\":80206},{\"end\":81838,\"start\":80746},{\"end\":82923,\"start\":81840},{\"end\":83638,\"start\":82966},{\"end\":84531,\"start\":83640},{\"end\":85309,\"start\":84649},{\"end\":86931,\"start\":85311},{\"end\":88660,\"start\":86951},{\"end\":93383,\"start\":88662},{\"end\":93913,\"start\":93410},{\"end\":94491,\"start\":93915},{\"end\":95231,\"start\":94493},{\"end\":96385,\"start\":95233},{\"end\":97199,\"start\":96387},{\"end\":97767,\"start\":97201},{\"end\":98313,\"start\":97782},{\"end\":99481,\"start\":98315},{\"end\":99715,\"start\":99483},{\"end\":101919,\"start\":99717}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":15705,\"start\":15665},{\"attributes\":{\"id\":\"formula_1\"},\"end\":17089,\"start\":17063},{\"attributes\":{\"id\":\"formula_2\"},\"end\":22695,\"start\":22596},{\"attributes\":{\"id\":\"formula_3\"},\"end\":23683,\"start\":23665},{\"attributes\":{\"id\":\"formula_4\"},\"end\":27323,\"start\":27265},{\"attributes\":{\"id\":\"formula_5\"},\"end\":27929,\"start\":27820},{\"attributes\":{\"id\":\"formula_6\"},\"end\":28891,\"start\":28835},{\"attributes\":{\"id\":\"formula_7\"},\"end\":30143,\"start\":29813},{\"attributes\":{\"id\":\"formula_8\"},\"end\":30800,\"start\":30702},{\"attributes\":{\"id\":\"formula_9\"},\"end\":31139,\"start\":31037},{\"attributes\":{\"id\":\"formula_10\"},\"end\":31947,\"start\":31889},{\"attributes\":{\"id\":\"formula_11\"},\"end\":32507,\"start\":32454},{\"attributes\":{\"id\":\"formula_12\"},\"end\":32570,\"start\":32507},{\"attributes\":{\"id\":\"formula_13\"},\"end\":38532,\"start\":38495},{\"attributes\":{\"id\":\"formula_14\"},\"end\":42586,\"start\":42530},{\"attributes\":{\"id\":\"formula_15\"},\"end\":51379,\"start\":51267},{\"attributes\":{\"id\":\"formula_16\"},\"end\":72753,\"start\":72574},{\"attributes\":{\"id\":\"formula_17\"},\"end\":84648,\"start\":84532}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1.1\"},\"end\":2208,\"start\":2168},{\"attributes\":{\"n\":\"1.1.1\"},\"end\":15018,\"start\":14988},{\"attributes\":{\"n\":\"1.1.2\"},\"end\":21388,\"start\":21339},{\"attributes\":{\"n\":\"1.2\"},\"end\":27988,\"start\":27931},{\"end\":29812,\"start\":29712},{\"attributes\":{\"n\":\"1.3\"},\"end\":40523,\"start\":40487},{\"attributes\":{\"n\":\"1.4\"},\"end\":47200,\"start\":47188},{\"attributes\":{\"n\":\"2\"},\"end\":54789,\"start\":54756},{\"attributes\":{\"n\":\"2.1\"},\"end\":57350,\"start\":57338},{\"attributes\":{\"n\":\"2.1.1\"},\"end\":69104,\"start\":69055},{\"attributes\":{\"n\":\"2.1.2\"},\"end\":75434,\"start\":75394},{\"attributes\":{\"n\":\"2.1.3\"},\"end\":82964,\"start\":82926},{\"attributes\":{\"n\":\"2.2\"},\"end\":86949,\"start\":86934},{\"attributes\":{\"n\":\"2.3\"},\"end\":93408,\"start\":93386},{\"attributes\":{\"n\":\"3\"},\"end\":97780,\"start\":97770},{\"end\":101931,\"start\":101921},{\"end\":102462,\"start\":102452},{\"end\":102488,\"start\":102478},{\"end\":103109,\"start\":103099},{\"end\":103309,\"start\":103299},{\"end\":103685,\"start\":103675},{\"end\":104203,\"start\":104193},{\"end\":104299,\"start\":104288},{\"end\":104488,\"start\":104479},{\"end\":104692,\"start\":104681},{\"end\":105608,\"start\":105597}]", "table": null, "figure_caption": "[{\"end\":102450,\"start\":101933},{\"end\":102476,\"start\":102464},{\"end\":102742,\"start\":102490},{\"end\":103097,\"start\":102745},{\"end\":103297,\"start\":103111},{\"end\":103673,\"start\":103311},{\"end\":104191,\"start\":103687},{\"end\":104286,\"start\":104205},{\"end\":104477,\"start\":104302},{\"end\":104679,\"start\":104491},{\"end\":105595,\"start\":104695},{\"end\":106106,\"start\":105611}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":2869,\"start\":2860},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13251,\"start\":13244},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":14767,\"start\":14760},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":36505,\"start\":36499},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":36991,\"start\":36985},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":38291,\"start\":38285},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":38737,\"start\":38731},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":40710,\"start\":40704},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":43566,\"start\":43560},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":43672,\"start\":43663},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":43838,\"start\":43829},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":45089,\"start\":45083},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":49165,\"start\":49159},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":49716,\"start\":49710},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":49873,\"start\":49867},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":50032,\"start\":50026},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":50275,\"start\":50269},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":53378,\"start\":53371},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":53487,\"start\":53481},{\"end\":57725,\"start\":57719},{\"end\":57940,\"start\":57934},{\"end\":59549,\"start\":59541},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":62507,\"start\":62501},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":62803,\"start\":62797},{\"end\":69285,\"start\":69279},{\"end\":70538,\"start\":70532},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":70595,\"start\":70588},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":72011,\"start\":72005},{\"attributes\":{\"ref_id\":\"fig_8\"},\"end\":72138,\"start\":72132},{\"end\":72483,\"start\":72476},{\"end\":73576,\"start\":73570},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75028,\"start\":75021},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75163,\"start\":75156},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75929,\"start\":75919},{\"end\":76087,\"start\":76079},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":76416,\"start\":76409},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":77544,\"start\":77538},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":78303,\"start\":78294},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":79239,\"start\":79227},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":79751,\"start\":79741},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":80391,\"start\":80385},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":81093,\"start\":81086},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":84812,\"start\":84805},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":87197,\"start\":87190},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":88019,\"start\":88010},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":89669,\"start\":89662},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":90727,\"start\":90718},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":90856,\"start\":90847},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":92755,\"start\":92749},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":94108,\"start\":94101},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":99119,\"start\":99110}]", "bib_author_first_name": "[{\"end\":108656,\"start\":108655},{\"end\":108842,\"start\":108841},{\"end\":108844,\"start\":108843},{\"end\":109036,\"start\":109035},{\"end\":109038,\"start\":109037},{\"end\":109050,\"start\":109049},{\"end\":109060,\"start\":109059},{\"end\":109073,\"start\":109072},{\"end\":109081,\"start\":109080},{\"end\":109089,\"start\":109088},{\"end\":109100,\"start\":109099},{\"end\":109112,\"start\":109111},{\"end\":109114,\"start\":109113},{\"end\":109122,\"start\":109121},{\"end\":109132,\"start\":109131},{\"end\":109425,\"start\":109421},{\"end\":109435,\"start\":109431},{\"end\":109446,\"start\":109442},{\"end\":109457,\"start\":109453},{\"end\":109464,\"start\":109463},{\"end\":109466,\"start\":109465},{\"end\":109476,\"start\":109475},{\"end\":109494,\"start\":109490},{\"end\":109505,\"start\":109501},{\"end\":109515,\"start\":109511},{\"end\":109524,\"start\":109520},{\"end\":109535,\"start\":109531},{\"end\":109546,\"start\":109542},{\"end\":109849,\"start\":109848},{\"end\":109857,\"start\":109856},{\"end\":109870,\"start\":109869},{\"end\":109880,\"start\":109879},{\"end\":109893,\"start\":109892},{\"end\":109895,\"start\":109894},{\"end\":109909,\"start\":109908},{\"end\":109922,\"start\":109921},{\"end\":110238,\"start\":110233},{\"end\":110255,\"start\":110249},{\"end\":110271,\"start\":110267},{\"end\":110524,\"start\":110523},{\"end\":110536,\"start\":110535},{\"end\":110546,\"start\":110545},{\"end\":110803,\"start\":110802},{\"end\":111014,\"start\":111013},{\"end\":111238,\"start\":111237},{\"end\":111398,\"start\":111397},{\"end\":111410,\"start\":111409},{\"end\":111644,\"start\":111643},{\"end\":111844,\"start\":111843},{\"end\":111846,\"start\":111845},{\"end\":111857,\"start\":111856},{\"end\":111859,\"start\":111858},{\"end\":112101,\"start\":112100},{\"end\":112110,\"start\":112109},{\"end\":112122,\"start\":112121},{\"end\":112404,\"start\":112403},{\"end\":112406,\"start\":112405},{\"end\":112417,\"start\":112416},{\"end\":112657,\"start\":112656},{\"end\":112659,\"start\":112658},{\"end\":112668,\"start\":112667},{\"end\":112670,\"start\":112669},{\"end\":112681,\"start\":112680},{\"end\":112683,\"start\":112682},{\"end\":112693,\"start\":112692},{\"end\":112941,\"start\":112940},{\"end\":112952,\"start\":112951},{\"end\":112965,\"start\":112964},{\"end\":112978,\"start\":112977},{\"end\":112992,\"start\":112991},{\"end\":113003,\"start\":113002},{\"end\":113259,\"start\":113254},{\"end\":113273,\"start\":113269},{\"end\":113444,\"start\":113443},{\"end\":113532,\"start\":113531},{\"end\":113544,\"start\":113540},{\"end\":113726,\"start\":113725},{\"end\":113964,\"start\":113963},{\"end\":113977,\"start\":113976},{\"end\":113983,\"start\":113982},{\"end\":114205,\"start\":114201},{\"end\":114217,\"start\":114212},{\"end\":114219,\"start\":114218},{\"end\":114227,\"start\":114224},{\"end\":114239,\"start\":114238},{\"end\":114241,\"start\":114240},{\"end\":114250,\"start\":114249},{\"end\":114252,\"start\":114251},{\"end\":114264,\"start\":114263},{\"end\":114281,\"start\":114272},{\"end\":114290,\"start\":114289},{\"end\":114292,\"start\":114291},{\"end\":114303,\"start\":114302},{\"end\":114305,\"start\":114304},{\"end\":114315,\"start\":114314},{\"end\":114317,\"start\":114316},{\"end\":114658,\"start\":114657},{\"end\":114839,\"start\":114838},{\"end\":114849,\"start\":114848},{\"end\":115066,\"start\":115065},{\"end\":115081,\"start\":115080},{\"end\":115089,\"start\":115088},{\"end\":115330,\"start\":115329},{\"end\":115332,\"start\":115331},{\"end\":115344,\"start\":115340},{\"end\":115557,\"start\":115556},{\"end\":115567,\"start\":115566},{\"end\":115580,\"start\":115579},{\"end\":115582,\"start\":115581},{\"end\":115814,\"start\":115813},{\"end\":115821,\"start\":115820},{\"end\":115823,\"start\":115822},{\"end\":115834,\"start\":115833},{\"end\":115836,\"start\":115835},{\"end\":116102,\"start\":116101},{\"end\":116112,\"start\":116111},{\"end\":116124,\"start\":116123},{\"end\":116126,\"start\":116125},{\"end\":116134,\"start\":116133},{\"end\":116136,\"start\":116135},{\"end\":116144,\"start\":116143},{\"end\":116443,\"start\":116442},{\"end\":116455,\"start\":116454},{\"end\":116694,\"start\":116693},{\"end\":116703,\"start\":116702},{\"end\":116715,\"start\":116714},{\"end\":116960,\"start\":116959},{\"end\":117186,\"start\":117185},{\"end\":117188,\"start\":117187},{\"end\":117197,\"start\":117196},{\"end\":117199,\"start\":117198},{\"end\":117213,\"start\":117212},{\"end\":117215,\"start\":117214},{\"end\":117491,\"start\":117485},{\"end\":117946,\"start\":117945},{\"end\":117959,\"start\":117958},{\"end\":117961,\"start\":117960},{\"end\":118209,\"start\":118208},{\"end\":118217,\"start\":118216},{\"end\":118219,\"start\":118218},{\"end\":118228,\"start\":118227},{\"end\":118230,\"start\":118229},{\"end\":118471,\"start\":118470},{\"end\":118481,\"start\":118480},{\"end\":118682,\"start\":118681},{\"end\":118846,\"start\":118845},{\"end\":118856,\"start\":118855},{\"end\":118858,\"start\":118857},{\"end\":119147,\"start\":119146},{\"end\":119157,\"start\":119156},{\"end\":119387,\"start\":119386},{\"end\":119402,\"start\":119401},{\"end\":119416,\"start\":119415},{\"end\":119650,\"start\":119649},{\"end\":119831,\"start\":119830},{\"end\":119833,\"start\":119832},{\"end\":119844,\"start\":119843},{\"end\":119846,\"start\":119845},{\"end\":119858,\"start\":119857},{\"end\":119860,\"start\":119859},{\"end\":120054,\"start\":120053},{\"end\":120056,\"start\":120055},{\"end\":120066,\"start\":120065},{\"end\":120069,\"start\":120067},{\"end\":120187,\"start\":120186},{\"end\":120197,\"start\":120196},{\"end\":120207,\"start\":120206},{\"end\":120218,\"start\":120217},{\"end\":120415,\"start\":120414},{\"end\":120425,\"start\":120424},{\"end\":120427,\"start\":120426},{\"end\":120730,\"start\":120729},{\"end\":120745,\"start\":120744},{\"end\":120989,\"start\":120988},{\"end\":121000,\"start\":120999},{\"end\":121002,\"start\":121001},{\"end\":121012,\"start\":121011},{\"end\":121022,\"start\":121021},{\"end\":121290,\"start\":121284},{\"end\":121306,\"start\":121299},{\"end\":121587,\"start\":121586},{\"end\":121597,\"start\":121596},{\"end\":121607,\"start\":121606},{\"end\":122037,\"start\":122036},{\"end\":122045,\"start\":122044},{\"end\":122059,\"start\":122058},{\"end\":122363,\"start\":122362},{\"end\":122365,\"start\":122364},{\"end\":122576,\"start\":122570},{\"end\":122578,\"start\":122577},{\"end\":122591,\"start\":122586},{\"end\":122593,\"start\":122592},{\"end\":122613,\"start\":122606},{\"end\":122615,\"start\":122614},{\"end\":122889,\"start\":122888},{\"end\":122899,\"start\":122898},{\"end\":122908,\"start\":122907},{\"end\":123163,\"start\":123162},{\"end\":123180,\"start\":123179},{\"end\":123468,\"start\":123467},{\"end\":123478,\"start\":123477},{\"end\":123700,\"start\":123699},{\"end\":123702,\"start\":123701},{\"end\":123939,\"start\":123938},{\"end\":123941,\"start\":123940},{\"end\":123955,\"start\":123954},{\"end\":124176,\"start\":124175},{\"end\":124189,\"start\":124188},{\"end\":124191,\"start\":124190},{\"end\":124203,\"start\":124202},{\"end\":124458,\"start\":124457},{\"end\":124460,\"start\":124459},{\"end\":124468,\"start\":124467},{\"end\":124470,\"start\":124469},{\"end\":124702,\"start\":124696},{\"end\":124948,\"start\":124947},{\"end\":124950,\"start\":124949},{\"end\":124960,\"start\":124959},{\"end\":124962,\"start\":124961},{\"end\":124974,\"start\":124973},{\"end\":125239,\"start\":125238},{\"end\":125241,\"start\":125240},{\"end\":125252,\"start\":125251},{\"end\":125254,\"start\":125253},{\"end\":125521,\"start\":125520},{\"end\":125530,\"start\":125529},{\"end\":125537,\"start\":125536},{\"end\":125545,\"start\":125544},{\"end\":125799,\"start\":125795},{\"end\":126037,\"start\":126036},{\"end\":126047,\"start\":126046},{\"end\":126220,\"start\":126219},{\"end\":126228,\"start\":126227},{\"end\":126393,\"start\":126392},{\"end\":126405,\"start\":126404},{\"end\":126664,\"start\":126663},{\"end\":126676,\"start\":126675},{\"end\":126900,\"start\":126899},{\"end\":127079,\"start\":127078},{\"end\":127090,\"start\":127089},{\"end\":127100,\"start\":127099},{\"end\":127389,\"start\":127388},{\"end\":127399,\"start\":127398},{\"end\":127416,\"start\":127415},{\"end\":127426,\"start\":127425},{\"end\":127650,\"start\":127649},{\"end\":127660,\"start\":127659},{\"end\":127677,\"start\":127676},{\"end\":127880,\"start\":127879},{\"end\":128189,\"start\":128183},{\"end\":128361,\"start\":128360},{\"end\":128371,\"start\":128370},{\"end\":128584,\"start\":128583},{\"end\":128586,\"start\":128585},{\"end\":128596,\"start\":128595},{\"end\":128607,\"start\":128606},{\"end\":128609,\"start\":128608},{\"end\":128844,\"start\":128843},{\"end\":128846,\"start\":128845}]", "bib_author_last_name": "[{\"end\":108663,\"start\":108657},{\"end\":108849,\"start\":108845},{\"end\":109047,\"start\":109039},{\"end\":109057,\"start\":109051},{\"end\":109070,\"start\":109061},{\"end\":109078,\"start\":109074},{\"end\":109086,\"start\":109082},{\"end\":109097,\"start\":109090},{\"end\":109109,\"start\":109101},{\"end\":109119,\"start\":109115},{\"end\":109129,\"start\":109123},{\"end\":109138,\"start\":109133},{\"end\":109429,\"start\":109426},{\"end\":109440,\"start\":109436},{\"end\":109451,\"start\":109447},{\"end\":109461,\"start\":109458},{\"end\":109473,\"start\":109467},{\"end\":109488,\"start\":109477},{\"end\":109499,\"start\":109495},{\"end\":109509,\"start\":109506},{\"end\":109518,\"start\":109516},{\"end\":109529,\"start\":109525},{\"end\":109540,\"start\":109536},{\"end\":109550,\"start\":109547},{\"end\":109854,\"start\":109850},{\"end\":109867,\"start\":109858},{\"end\":109877,\"start\":109871},{\"end\":109890,\"start\":109881},{\"end\":109906,\"start\":109896},{\"end\":109919,\"start\":109910},{\"end\":109931,\"start\":109923},{\"end\":110247,\"start\":110239},{\"end\":110265,\"start\":110256},{\"end\":110280,\"start\":110272},{\"end\":110533,\"start\":110525},{\"end\":110543,\"start\":110537},{\"end\":110555,\"start\":110547},{\"end\":110813,\"start\":110804},{\"end\":111021,\"start\":111015},{\"end\":111407,\"start\":111399},{\"end\":111419,\"start\":111411},{\"end\":111651,\"start\":111645},{\"end\":111854,\"start\":111847},{\"end\":111866,\"start\":111860},{\"end\":112107,\"start\":112102},{\"end\":112119,\"start\":112111},{\"end\":112129,\"start\":112123},{\"end\":112414,\"start\":112407},{\"end\":112424,\"start\":112418},{\"end\":112665,\"start\":112660},{\"end\":112678,\"start\":112671},{\"end\":112690,\"start\":112684},{\"end\":112702,\"start\":112694},{\"end\":112949,\"start\":112942},{\"end\":112962,\"start\":112953},{\"end\":112975,\"start\":112966},{\"end\":112989,\"start\":112979},{\"end\":113000,\"start\":112993},{\"end\":113013,\"start\":113004},{\"end\":113267,\"start\":113260},{\"end\":113288,\"start\":113274},{\"end\":113455,\"start\":113445},{\"end\":113538,\"start\":113533},{\"end\":113552,\"start\":113545},{\"end\":113737,\"start\":113727},{\"end\":113974,\"start\":113965},{\"end\":113980,\"start\":113978},{\"end\":113990,\"start\":113984},{\"end\":114000,\"start\":113992},{\"end\":114210,\"start\":114206},{\"end\":114222,\"start\":114220},{\"end\":114236,\"start\":114228},{\"end\":114247,\"start\":114242},{\"end\":114261,\"start\":114253},{\"end\":114270,\"start\":114265},{\"end\":114287,\"start\":114282},{\"end\":114300,\"start\":114293},{\"end\":114312,\"start\":114306},{\"end\":114328,\"start\":114318},{\"end\":114665,\"start\":114659},{\"end\":114846,\"start\":114840},{\"end\":114855,\"start\":114850},{\"end\":115078,\"start\":115067},{\"end\":115086,\"start\":115082},{\"end\":115096,\"start\":115090},{\"end\":115338,\"start\":115333},{\"end\":115348,\"start\":115345},{\"end\":115564,\"start\":115558},{\"end\":115577,\"start\":115568},{\"end\":115592,\"start\":115583},{\"end\":115818,\"start\":115815},{\"end\":115831,\"start\":115824},{\"end\":115844,\"start\":115837},{\"end\":116109,\"start\":116103},{\"end\":116121,\"start\":116113},{\"end\":116131,\"start\":116127},{\"end\":116141,\"start\":116137},{\"end\":116151,\"start\":116145},{\"end\":116452,\"start\":116444},{\"end\":116462,\"start\":116456},{\"end\":116700,\"start\":116695},{\"end\":116712,\"start\":116704},{\"end\":116721,\"start\":116716},{\"end\":116963,\"start\":116961},{\"end\":116971,\"start\":116965},{\"end\":117194,\"start\":117189},{\"end\":117210,\"start\":117200},{\"end\":117501,\"start\":117492},{\"end\":117956,\"start\":117947},{\"end\":117968,\"start\":117962},{\"end\":118214,\"start\":118210},{\"end\":118225,\"start\":118220},{\"end\":118237,\"start\":118231},{\"end\":118478,\"start\":118472},{\"end\":118488,\"start\":118482},{\"end\":118691,\"start\":118683},{\"end\":118853,\"start\":118847},{\"end\":118873,\"start\":118859},{\"end\":119154,\"start\":119148},{\"end\":119164,\"start\":119158},{\"end\":119399,\"start\":119388},{\"end\":119413,\"start\":119403},{\"end\":119422,\"start\":119417},{\"end\":119656,\"start\":119651},{\"end\":119841,\"start\":119834},{\"end\":119855,\"start\":119847},{\"end\":119865,\"start\":119861},{\"end\":120063,\"start\":120057},{\"end\":120076,\"start\":120070},{\"end\":120194,\"start\":120188},{\"end\":120204,\"start\":120198},{\"end\":120215,\"start\":120208},{\"end\":120227,\"start\":120219},{\"end\":120422,\"start\":120416},{\"end\":120442,\"start\":120428},{\"end\":120742,\"start\":120731},{\"end\":120756,\"start\":120746},{\"end\":120997,\"start\":120990},{\"end\":121009,\"start\":121003},{\"end\":121019,\"start\":121013},{\"end\":121032,\"start\":121023},{\"end\":121297,\"start\":121291},{\"end\":121313,\"start\":121307},{\"end\":121594,\"start\":121588},{\"end\":121604,\"start\":121598},{\"end\":121614,\"start\":121608},{\"end\":122042,\"start\":122038},{\"end\":122056,\"start\":122046},{\"end\":122068,\"start\":122060},{\"end\":122372,\"start\":122366},{\"end\":122584,\"start\":122579},{\"end\":122604,\"start\":122594},{\"end\":122622,\"start\":122616},{\"end\":122896,\"start\":122890},{\"end\":122905,\"start\":122900},{\"end\":122915,\"start\":122909},{\"end\":123177,\"start\":123164},{\"end\":123187,\"start\":123181},{\"end\":123475,\"start\":123469},{\"end\":123483,\"start\":123479},{\"end\":123713,\"start\":123703},{\"end\":123952,\"start\":123942},{\"end\":123962,\"start\":123956},{\"end\":124186,\"start\":124177},{\"end\":124200,\"start\":124192},{\"end\":124209,\"start\":124204},{\"end\":124465,\"start\":124461},{\"end\":124477,\"start\":124471},{\"end\":124712,\"start\":124703},{\"end\":124957,\"start\":124951},{\"end\":124971,\"start\":124963},{\"end\":124986,\"start\":124975},{\"end\":125249,\"start\":125242},{\"end\":125262,\"start\":125255},{\"end\":125527,\"start\":125522},{\"end\":125534,\"start\":125531},{\"end\":125542,\"start\":125538},{\"end\":125555,\"start\":125546},{\"end\":125805,\"start\":125800},{\"end\":126044,\"start\":126038},{\"end\":126056,\"start\":126048},{\"end\":126225,\"start\":126221},{\"end\":126237,\"start\":126229},{\"end\":126402,\"start\":126394},{\"end\":126411,\"start\":126406},{\"end\":126673,\"start\":126665},{\"end\":126682,\"start\":126677},{\"end\":126907,\"start\":126901},{\"end\":127087,\"start\":127080},{\"end\":127097,\"start\":127091},{\"end\":127107,\"start\":127101},{\"end\":127396,\"start\":127390},{\"end\":127413,\"start\":127400},{\"end\":127423,\"start\":127417},{\"end\":127434,\"start\":127427},{\"end\":127657,\"start\":127651},{\"end\":127674,\"start\":127661},{\"end\":127684,\"start\":127678},{\"end\":127900,\"start\":127881},{\"end\":128196,\"start\":128190},{\"end\":128368,\"start\":128362},{\"end\":128377,\"start\":128372},{\"end\":128593,\"start\":128587},{\"end\":128604,\"start\":128597},{\"end\":128620,\"start\":128610},{\"end\":128854,\"start\":128847}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":108607,\"start\":108237},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":11199664},\"end\":108803,\"start\":108609},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":6655953},\"end\":108981,\"start\":108805},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":4359894},\"end\":109359,\"start\":108983},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":4307662},\"end\":109806,\"start\":109361},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":6783295},\"end\":110132,\"start\":109808},{\"attributes\":{\"id\":\"b6\"},\"end\":110452,\"start\":110134},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":1776775},\"end\":110753,\"start\":110454},{\"attributes\":{\"id\":\"b8\"},\"end\":110951,\"start\":110755},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":5348507},\"end\":111183,\"start\":110953},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":4420858},\"end\":111338,\"start\":111185},{\"attributes\":{\"id\":\"b11\"},\"end\":111506,\"start\":111340},{\"attributes\":{\"id\":\"b12\"},\"end\":111573,\"start\":111508},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":28708885},\"end\":111796,\"start\":111575},{\"attributes\":{\"id\":\"b14\"},\"end\":112036,\"start\":111798},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":14195671},\"end\":112315,\"start\":112038},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":59522675},\"end\":112591,\"start\":112317},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":3902118},\"end\":112883,\"start\":112593},{\"attributes\":{\"id\":\"b18\"},\"end\":113199,\"start\":112885},{\"attributes\":{\"id\":\"b19\"},\"end\":113439,\"start\":113201},{\"attributes\":{\"id\":\"b20\"},\"end\":113527,\"start\":113441},{\"attributes\":{\"id\":\"b21\"},\"end\":113637,\"start\":113529},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":122041653},\"end\":113926,\"start\":113639},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":18995200},\"end\":114133,\"start\":113928},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":53983107},\"end\":114596,\"start\":114135},{\"attributes\":{\"id\":\"b25\"},\"end\":114782,\"start\":114598},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":446354},\"end\":114990,\"start\":114784},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":21085024},\"end\":115257,\"start\":114992},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":51962817},\"end\":115510,\"start\":115259},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":119219625},\"end\":115745,\"start\":115512},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":34857702},\"end\":116015,\"start\":115747},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":54070160},\"end\":116384,\"start\":116017},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":14212814},\"end\":116631,\"start\":116386},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":21289619},\"end\":116902,\"start\":116633},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":121884299},\"end\":117109,\"start\":116904},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":11720414},\"end\":117431,\"start\":117111},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":15947511},\"end\":117833,\"start\":117433},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":4411647},\"end\":118157,\"start\":117835},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":26953587},\"end\":118392,\"start\":118159},{\"attributes\":{\"id\":\"b39\"},\"end\":118628,\"start\":118394},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":119383026},\"end\":118841,\"start\":118630},{\"attributes\":{\"id\":\"b41\"},\"end\":119068,\"start\":118843},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":17504370},\"end\":119318,\"start\":119070},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":13811487},\"end\":119584,\"start\":119320},{\"attributes\":{\"id\":\"b44\"},\"end\":119777,\"start\":119586},{\"attributes\":{\"id\":\"b45\"},\"end\":120009,\"start\":119779},{\"attributes\":{\"id\":\"b46\"},\"end\":120156,\"start\":120011},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":36673677},\"end\":120360,\"start\":120158},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":119566582},\"end\":120653,\"start\":120362},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":39504821},\"end\":120935,\"start\":120655},{\"attributes\":{\"id\":\"b50\"},\"end\":121186,\"start\":120937},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":118478598},\"end\":121518,\"start\":121188},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":1128636},\"end\":121807,\"start\":121520},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":18909734},\"end\":121929,\"start\":121809},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":16383845},\"end\":122281,\"start\":121931},{\"attributes\":{\"id\":\"b55\"},\"end\":122514,\"start\":122283},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":17653110},\"end\":122810,\"start\":122516},{\"attributes\":{\"id\":\"b57\"},\"end\":123086,\"start\":122812},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":8996475},\"end\":123379,\"start\":123088},{\"attributes\":{\"id\":\"b59\"},\"end\":123640,\"start\":123381},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":119189800},\"end\":123869,\"start\":123642},{\"attributes\":{\"id\":\"b61\"},\"end\":124106,\"start\":123871},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":54595486},\"end\":124383,\"start\":124108},{\"attributes\":{\"id\":\"b63\"},\"end\":124626,\"start\":124385},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":16385061},\"end\":124879,\"start\":124628},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":119228385},\"end\":125172,\"start\":124881},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":15630224},\"end\":125474,\"start\":125174},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":118432627},\"end\":125710,\"start\":125476},{\"attributes\":{\"id\":\"b68\",\"matched_paper_id\":118968017},\"end\":125965,\"start\":125712},{\"attributes\":{\"id\":\"b69\"},\"end\":126191,\"start\":125967},{\"attributes\":{\"id\":\"b70\"},\"end\":126338,\"start\":126193},{\"attributes\":{\"id\":\"b71\",\"matched_paper_id\":11002341},\"end\":126550,\"start\":126340},{\"attributes\":{\"id\":\"b72\"},\"end\":126868,\"start\":126552},{\"attributes\":{\"id\":\"b73\",\"matched_paper_id\":14340182},\"end\":127010,\"start\":126870},{\"attributes\":{\"id\":\"b74\",\"matched_paper_id\":119209177},\"end\":127329,\"start\":127012},{\"attributes\":{\"id\":\"b75\"},\"end\":127582,\"start\":127331},{\"attributes\":{\"id\":\"b76\"},\"end\":127875,\"start\":127584},{\"attributes\":{\"id\":\"b77\"},\"end\":128135,\"start\":127877},{\"attributes\":{\"id\":\"b78\",\"matched_paper_id\":118948929},\"end\":128313,\"start\":128137},{\"attributes\":{\"id\":\"b79\",\"matched_paper_id\":941703},\"end\":128536,\"start\":128315},{\"attributes\":{\"id\":\"b80\",\"matched_paper_id\":7399753},\"end\":128802,\"start\":128538},{\"attributes\":{\"id\":\"b81\",\"matched_paper_id\":118859696},\"end\":129025,\"start\":128804}]", "bib_title": "[{\"end\":108653,\"start\":108609},{\"end\":108839,\"start\":108805},{\"end\":109033,\"start\":108983},{\"end\":109419,\"start\":109361},{\"end\":109846,\"start\":109808},{\"end\":110521,\"start\":110454},{\"end\":111011,\"start\":110953},{\"end\":111235,\"start\":111185},{\"end\":111641,\"start\":111575},{\"end\":112098,\"start\":112038},{\"end\":112401,\"start\":112317},{\"end\":112654,\"start\":112593},{\"end\":113723,\"start\":113639},{\"end\":113961,\"start\":113928},{\"end\":114199,\"start\":114135},{\"end\":114836,\"start\":114784},{\"end\":115063,\"start\":114992},{\"end\":115327,\"start\":115259},{\"end\":115554,\"start\":115512},{\"end\":115811,\"start\":115747},{\"end\":116099,\"start\":116017},{\"end\":116440,\"start\":116386},{\"end\":116691,\"start\":116633},{\"end\":116957,\"start\":116904},{\"end\":117183,\"start\":117111},{\"end\":117483,\"start\":117433},{\"end\":117943,\"start\":117835},{\"end\":118206,\"start\":118159},{\"end\":118679,\"start\":118630},{\"end\":119144,\"start\":119070},{\"end\":119384,\"start\":119320},{\"end\":120184,\"start\":120158},{\"end\":120412,\"start\":120362},{\"end\":120727,\"start\":120655},{\"end\":121282,\"start\":121188},{\"end\":121584,\"start\":121520},{\"end\":121834,\"start\":121809},{\"end\":122034,\"start\":121931},{\"end\":122568,\"start\":122516},{\"end\":122886,\"start\":122812},{\"end\":123160,\"start\":123088},{\"end\":123697,\"start\":123642},{\"end\":124173,\"start\":124108},{\"end\":124694,\"start\":124628},{\"end\":124945,\"start\":124881},{\"end\":125236,\"start\":125174},{\"end\":125518,\"start\":125476},{\"end\":125793,\"start\":125712},{\"end\":126390,\"start\":126340},{\"end\":126897,\"start\":126870},{\"end\":127076,\"start\":127012},{\"end\":127647,\"start\":127584},{\"end\":128181,\"start\":128137},{\"end\":128358,\"start\":128315},{\"end\":128581,\"start\":128538},{\"end\":128841,\"start\":128804}]", "bib_author": "[{\"end\":108665,\"start\":108655},{\"end\":108851,\"start\":108841},{\"end\":109049,\"start\":109035},{\"end\":109059,\"start\":109049},{\"end\":109072,\"start\":109059},{\"end\":109080,\"start\":109072},{\"end\":109088,\"start\":109080},{\"end\":109099,\"start\":109088},{\"end\":109111,\"start\":109099},{\"end\":109121,\"start\":109111},{\"end\":109131,\"start\":109121},{\"end\":109140,\"start\":109131},{\"end\":109431,\"start\":109421},{\"end\":109442,\"start\":109431},{\"end\":109453,\"start\":109442},{\"end\":109463,\"start\":109453},{\"end\":109475,\"start\":109463},{\"end\":109490,\"start\":109475},{\"end\":109501,\"start\":109490},{\"end\":109511,\"start\":109501},{\"end\":109520,\"start\":109511},{\"end\":109531,\"start\":109520},{\"end\":109542,\"start\":109531},{\"end\":109552,\"start\":109542},{\"end\":109856,\"start\":109848},{\"end\":109869,\"start\":109856},{\"end\":109879,\"start\":109869},{\"end\":109892,\"start\":109879},{\"end\":109908,\"start\":109892},{\"end\":109921,\"start\":109908},{\"end\":109933,\"start\":109921},{\"end\":110249,\"start\":110233},{\"end\":110267,\"start\":110249},{\"end\":110282,\"start\":110267},{\"end\":110535,\"start\":110523},{\"end\":110545,\"start\":110535},{\"end\":110557,\"start\":110545},{\"end\":110815,\"start\":110802},{\"end\":111023,\"start\":111013},{\"end\":111241,\"start\":111237},{\"end\":111409,\"start\":111397},{\"end\":111421,\"start\":111409},{\"end\":111653,\"start\":111643},{\"end\":111856,\"start\":111843},{\"end\":111868,\"start\":111856},{\"end\":112109,\"start\":112100},{\"end\":112121,\"start\":112109},{\"end\":112131,\"start\":112121},{\"end\":112416,\"start\":112403},{\"end\":112426,\"start\":112416},{\"end\":112667,\"start\":112656},{\"end\":112680,\"start\":112667},{\"end\":112692,\"start\":112680},{\"end\":112704,\"start\":112692},{\"end\":112951,\"start\":112940},{\"end\":112964,\"start\":112951},{\"end\":112977,\"start\":112964},{\"end\":112991,\"start\":112977},{\"end\":113002,\"start\":112991},{\"end\":113015,\"start\":113002},{\"end\":113269,\"start\":113254},{\"end\":113290,\"start\":113269},{\"end\":113457,\"start\":113443},{\"end\":113540,\"start\":113531},{\"end\":113554,\"start\":113540},{\"end\":113739,\"start\":113725},{\"end\":113976,\"start\":113963},{\"end\":113982,\"start\":113976},{\"end\":113992,\"start\":113982},{\"end\":114002,\"start\":113992},{\"end\":114212,\"start\":114201},{\"end\":114224,\"start\":114212},{\"end\":114238,\"start\":114224},{\"end\":114249,\"start\":114238},{\"end\":114263,\"start\":114249},{\"end\":114272,\"start\":114263},{\"end\":114289,\"start\":114272},{\"end\":114302,\"start\":114289},{\"end\":114314,\"start\":114302},{\"end\":114330,\"start\":114314},{\"end\":114667,\"start\":114657},{\"end\":114848,\"start\":114838},{\"end\":114857,\"start\":114848},{\"end\":115080,\"start\":115065},{\"end\":115088,\"start\":115080},{\"end\":115098,\"start\":115088},{\"end\":115340,\"start\":115329},{\"end\":115350,\"start\":115340},{\"end\":115566,\"start\":115556},{\"end\":115579,\"start\":115566},{\"end\":115594,\"start\":115579},{\"end\":115820,\"start\":115813},{\"end\":115833,\"start\":115820},{\"end\":115846,\"start\":115833},{\"end\":116111,\"start\":116101},{\"end\":116123,\"start\":116111},{\"end\":116133,\"start\":116123},{\"end\":116143,\"start\":116133},{\"end\":116153,\"start\":116143},{\"end\":116454,\"start\":116442},{\"end\":116464,\"start\":116454},{\"end\":116702,\"start\":116693},{\"end\":116714,\"start\":116702},{\"end\":116723,\"start\":116714},{\"end\":116965,\"start\":116959},{\"end\":116973,\"start\":116965},{\"end\":117196,\"start\":117185},{\"end\":117212,\"start\":117196},{\"end\":117218,\"start\":117212},{\"end\":117503,\"start\":117485},{\"end\":117958,\"start\":117945},{\"end\":117970,\"start\":117958},{\"end\":118216,\"start\":118208},{\"end\":118227,\"start\":118216},{\"end\":118239,\"start\":118227},{\"end\":118480,\"start\":118470},{\"end\":118490,\"start\":118480},{\"end\":118693,\"start\":118681},{\"end\":118855,\"start\":118845},{\"end\":118875,\"start\":118855},{\"end\":119156,\"start\":119146},{\"end\":119166,\"start\":119156},{\"end\":119401,\"start\":119386},{\"end\":119415,\"start\":119401},{\"end\":119424,\"start\":119415},{\"end\":119658,\"start\":119649},{\"end\":119843,\"start\":119830},{\"end\":119857,\"start\":119843},{\"end\":119867,\"start\":119857},{\"end\":120065,\"start\":120053},{\"end\":120078,\"start\":120065},{\"end\":120196,\"start\":120186},{\"end\":120206,\"start\":120196},{\"end\":120217,\"start\":120206},{\"end\":120229,\"start\":120217},{\"end\":120424,\"start\":120414},{\"end\":120444,\"start\":120424},{\"end\":120744,\"start\":120729},{\"end\":120758,\"start\":120744},{\"end\":120999,\"start\":120988},{\"end\":121011,\"start\":120999},{\"end\":121021,\"start\":121011},{\"end\":121034,\"start\":121021},{\"end\":121299,\"start\":121284},{\"end\":121315,\"start\":121299},{\"end\":121596,\"start\":121586},{\"end\":121606,\"start\":121596},{\"end\":121616,\"start\":121606},{\"end\":122044,\"start\":122036},{\"end\":122058,\"start\":122044},{\"end\":122070,\"start\":122058},{\"end\":122374,\"start\":122362},{\"end\":122586,\"start\":122570},{\"end\":122606,\"start\":122586},{\"end\":122624,\"start\":122606},{\"end\":122898,\"start\":122888},{\"end\":122907,\"start\":122898},{\"end\":122917,\"start\":122907},{\"end\":123179,\"start\":123162},{\"end\":123189,\"start\":123179},{\"end\":123477,\"start\":123467},{\"end\":123485,\"start\":123477},{\"end\":123715,\"start\":123699},{\"end\":123954,\"start\":123938},{\"end\":123964,\"start\":123954},{\"end\":124188,\"start\":124175},{\"end\":124202,\"start\":124188},{\"end\":124211,\"start\":124202},{\"end\":124467,\"start\":124457},{\"end\":124479,\"start\":124467},{\"end\":124714,\"start\":124696},{\"end\":124959,\"start\":124947},{\"end\":124973,\"start\":124959},{\"end\":124988,\"start\":124973},{\"end\":125251,\"start\":125238},{\"end\":125264,\"start\":125251},{\"end\":125529,\"start\":125520},{\"end\":125536,\"start\":125529},{\"end\":125544,\"start\":125536},{\"end\":125557,\"start\":125544},{\"end\":125807,\"start\":125795},{\"end\":126046,\"start\":126036},{\"end\":126058,\"start\":126046},{\"end\":126227,\"start\":126219},{\"end\":126239,\"start\":126227},{\"end\":126404,\"start\":126392},{\"end\":126413,\"start\":126404},{\"end\":126675,\"start\":126663},{\"end\":126684,\"start\":126675},{\"end\":126909,\"start\":126899},{\"end\":127089,\"start\":127078},{\"end\":127099,\"start\":127089},{\"end\":127109,\"start\":127099},{\"end\":127398,\"start\":127388},{\"end\":127415,\"start\":127398},{\"end\":127425,\"start\":127415},{\"end\":127436,\"start\":127425},{\"end\":127659,\"start\":127649},{\"end\":127676,\"start\":127659},{\"end\":127686,\"start\":127676},{\"end\":127902,\"start\":127879},{\"end\":128198,\"start\":128183},{\"end\":128370,\"start\":128360},{\"end\":128379,\"start\":128370},{\"end\":128595,\"start\":128583},{\"end\":128606,\"start\":128595},{\"end\":128622,\"start\":128606},{\"end\":128856,\"start\":128843}]", "bib_venue": "[{\"end\":108397,\"start\":108237},{\"end\":108674,\"start\":108665},{\"end\":108875,\"start\":108851},{\"end\":109146,\"start\":109140},{\"end\":109558,\"start\":109552},{\"end\":109947,\"start\":109933},{\"end\":110231,\"start\":110134},{\"end\":110580,\"start\":110557},{\"end\":110800,\"start\":110755},{\"end\":111046,\"start\":111023},{\"end\":111247,\"start\":111241},{\"end\":111395,\"start\":111340},{\"end\":111522,\"start\":111510},{\"end\":111665,\"start\":111653},{\"end\":111841,\"start\":111798},{\"end\":112154,\"start\":112131},{\"end\":112437,\"start\":112426},{\"end\":112716,\"start\":112704},{\"end\":112938,\"start\":112885},{\"end\":113252,\"start\":113201},{\"end\":113472,\"start\":113457},{\"end\":113569,\"start\":113554},{\"end\":113746,\"start\":113739},{\"end\":114014,\"start\":114002},{\"end\":114342,\"start\":114330},{\"end\":114655,\"start\":114598},{\"end\":114869,\"start\":114857},{\"end\":115107,\"start\":115098},{\"end\":115362,\"start\":115350},{\"end\":115611,\"start\":115594},{\"end\":115858,\"start\":115846},{\"end\":116175,\"start\":116153},{\"end\":116488,\"start\":116464},{\"end\":116744,\"start\":116723},{\"end\":116994,\"start\":116973},{\"end\":117253,\"start\":117218},{\"end\":117600,\"start\":117503},{\"end\":117976,\"start\":117970},{\"end\":118251,\"start\":118239},{\"end\":118468,\"start\":118394},{\"end\":118700,\"start\":118693},{\"end\":118932,\"start\":118875},{\"end\":119178,\"start\":119166},{\"end\":119435,\"start\":119424},{\"end\":119647,\"start\":119586},{\"end\":119828,\"start\":119779},{\"end\":120051,\"start\":120011},{\"end\":120242,\"start\":120229},{\"end\":120485,\"start\":120444},{\"end\":120773,\"start\":120758},{\"end\":120986,\"start\":120937},{\"end\":121337,\"start\":121315},{\"end\":121639,\"start\":121616},{\"end\":121850,\"start\":121836},{\"end\":122087,\"start\":122070},{\"end\":122360,\"start\":122283},{\"end\":122644,\"start\":122624},{\"end\":122929,\"start\":122917},{\"end\":123222,\"start\":123189},{\"end\":123465,\"start\":123381},{\"end\":123730,\"start\":123715},{\"end\":123936,\"start\":123871},{\"end\":124223,\"start\":124211},{\"end\":124455,\"start\":124385},{\"end\":124741,\"start\":124714},{\"end\":125000,\"start\":124988},{\"end\":125305,\"start\":125264},{\"end\":125569,\"start\":125557},{\"end\":125824,\"start\":125807},{\"end\":126034,\"start\":125967},{\"end\":126217,\"start\":126193},{\"end\":126428,\"start\":126413},{\"end\":126661,\"start\":126552},{\"end\":126921,\"start\":126909},{\"end\":127150,\"start\":127109},{\"end\":127386,\"start\":127331},{\"end\":127708,\"start\":127686},{\"end\":128215,\"start\":128198},{\"end\":128409,\"start\":128379},{\"end\":128645,\"start\":128622},{\"end\":128880,\"start\":128856},{\"end\":108886,\"start\":108877},{\"end\":116499,\"start\":116490},{\"end\":116761,\"start\":116746}]"}}}, "year": 2023, "month": 12, "day": 17}