{"id": 263859441, "updated": "2023-10-13 01:41:59.443", "metadata": {"title": "A constant rate non-malleable code in the split-state model", "authors": "[{\"first\":\"Divesh\",\"last\":\"Aggarwal\",\"middle\":[]},{\"first\":\"Maciej\",\"last\":\"Obremski\",\"middle\":[]}]", "venue": "2020 IEEE 61st Annual Symposium on Foundations of Computer Science (FOCS)", "journal": "2020 IEEE 61st Annual Symposium on Foundations of Computer Science (FOCS)", "publication_date": {"year": 2020, "month": 11, "day": 1}, "abstract": "Non-malleable codes, introduced by Dziembowski, Pietrzak and Wichs in ICS 2010, have emerged in the last few years as a fundamental object at the intersection of cryptography and coding theory. Non-malleable codes provide a useful message integrity guarantee in situations where traditional error-correction (and even error-detection) is impossible; for example, when the attacker can completely overwrite the encoded message. Informally, a code is non-malleable if the message contained in a modified codeword is either the original message, or a completely \u201cunrelated value\u201d. The family which received the most attention is the family of tampering functions in the so called (2-part) split-state model: here the message x is encoded into two shares L and R, and the attacker is allowed to arbitrarily tamper with each L and R individually. In this work, we give a constant rate non-malleable code from the tampering family containing so called 2-lookahead functions and forgetful functions, and combined with the work of Dodis, Kazana and the authors from STOC 2015, this gives the first constant rate non-malleable code in the split-state model with negligible error. The full version of this paper can be found here: https://eprint.iacr.org/2019/1299.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2991603337", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/focs/AggarwalO20", "doi": "10.1109/focs46700.2020.00122"}}, "content": {"source": {"pdf_hash": "5934b18bcadacb59bb2b15062f5e1d02f4a32597", "pdf_src": "IEEE", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "c30c9160f39f5a319147675e13698a6aec25ffb7", "type": "plain-text", "url": "s3://ai2-s2-science-parse-plus-prod/parse-results/s2orc_worker/5934b18bcadacb59bb2b15062f5e1d02f4a32597.txt", "contents": "\nA constant rate non-malleable code in the split-state model\n\n\nDivesh Aggarwal \nDepartment of Computer Science and Center for Quantum Technologies\nCenter for Quantum Technologies\nNational University of Singapore\nNational University of Singapore\n\n\nMaciej Obremski obremski.math@gmail.com \nDepartment of Computer Science and Center for Quantum Technologies\nCenter for Quantum Technologies\nNational University of Singapore\nNational University of Singapore\n\n\nA constant rate non-malleable code in the split-state model\n10.1109/FOCS46700.2020.00122constant ratenon-malleable codesplit-state model\nNon-malleable codes, introduced by Dziembowski, Pietrzak and Wichs in ICS 2010, have emerged in the last few years as a fundamental object at the intersection of cryptography and coding theory. Non-malleable codes provide a useful message integrity guarantee in situations where traditional error-correction (and even error-detection) is impossible; for example, when the attacker can completely overwrite the encoded message. Informally, a code is non-malleable if the message contained in a modified codeword is either the original message, or a completely \"unrelated value\".The family which received the most attention is the family of tampering functions in the so called (2-part) split-state model: here the message x is encoded into two shares L and R, and the attacker is allowed to arbitrarily tamper with each L and R individually.In this work, we give a constant rate non-malleable code from the tampering family containing so called 2-lookahead functions and forgetful functions, and combined with the work of Dodis, Kazana and the authors from STOC 2015, this gives the first constant rate non-malleable code in the split-state model with negligible error.The full version of this paper can be found here: https://eprint.iacr.org/2019/1299.\n\nI. INTRODUCTION\n\nNon-malleable codes, introduced by Dziembowski, Pietrzak and Wichs [1], provide a useful message integrity guarantee in situations where traditional error-correction (and even error-detection) is impossible; for example, when the attacker can completely overwrite the encoded message. Informally, given a tampering family F, an F-non-malleable code (E, D) encodes a given message x into a codeword y \u2190 E(x) in a way that, if y is modified into y = f (y) by some f \u2208 F, then the message x = D(y ) contained in the modified codeword y is either the original message x, or a completely \"unrelated value\". In other words, non-malleable codes aim to handle a much larger class of tampering functions F than traditional error-correcting or error-detecting codes, at the expense of potentially allowing the attacker to replace a given message x by an unrelated message x (and also necessarily allowing for a small \"simulation error\" \u03b5). As shown by [1], this relaxation still makes non-malleable codes quite useful in a variety of situations where (a) the tampering capabilities of the attacker might be too strong for error-detection, and, yet (b) changing x to unrelated x is not useful for the attack. For example, imagine x being a secret key for a signature scheme. In this case, tampering which keeps x the same corresponds to the traditional chosen message attack (covered by the traditional definition of secure signatures), while tampering which changes x to an unrelated value x will clearly not help in forging signatures under the original (un-tampered) verification key, as the attacker can produce such signatures under x by himself.\n\nSplit-State Model.: Although such codes do not exist if the family of \"tampering functions\" F is completely unrestricted [1], they are known to exist for many broad tampering families F. One such natural family is the family of tampering functions in the so called split-state model. Here the k-bit message x is encoded into 2 shares y 1 , y 2 of length n each, and the attacker is allowed to arbitrarily tamper with each y i individually. The rate of such an encoding is naturally defined as \u03c4 = k 2n . Non-malleable codes in this model could be interpreted as \"non-malleable secret-sharing schemes\": even if both the shares are independently tampered with, the recovered message is either x or is unrelated to x. Non-malleable codes in the split-state model have received a lot of attention so far [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]. In addition, some of the recent results [11], [12], [13], [14], [15], [16] have shown application of non-malleable codes in the splitstate model to other important problems like non-malleable commitments and non-malleable secret sharing.\n\nThe known results can be summarized as follows. The first non-malleable code in the split-state model against an information-theoretic adversary was constructed in [3], who constructed a non-malleable code for 1-bit messages in the split-state model. Following that [4], [7], [17] gave the first information-theoretic construction supporting k-bit messages, but where the length of each share n = O(k 5 ). There was a plausible conjecture stated in [4] about the nonmalleability of the inner product function under which one would get a 2-part split-state code with constant rate, i.e., n = O(k).\n\nIn [5], it was shown that the notion of non-malleable codes in the split-state model is closely related to the notion of non-malleable two-source extractors and using this insight, and the alternating extraction protocol from [18], recent results [8], [9], [10] have obtained improved constructions of non-malleable codes in the split-state model. The most recent result [10] gives a construction with rate c\u00b7log log log 1/\u03b5 log log 1/\u03b5 for some constant c. This construction has a constant rate if \u03b5 is a constant, but the rate approaches 0 if \u03b5 is negligible in n, as is required for applications. In particular, if we choose \u03b5 = 2 \u2212n \u03a9(1) , then the rate is O( log log n log n ). The authors, along with Dodis and Kazana [19] introduced the concept of non-malleable reductions and, under a plausible conjecture, gave a series of reductions that results in constant rate non-malleable codes in the split-state model 1 .\n\nHowever, until this work, the problem of unconditionally constructing constant rate non-malleable codes in the splitstate model (with \u03b5 negligible in the size of the codeword) remains open.\n\nOur Result.: In this work, we give a constant rate nonmalleable code in the split-state model.\n\n\nTheorem 1.1 (Main Result):\n\nThere exists an efficient, information-theoretically secure \u03b5-non-malleable code in the split-state model with shares of size O(k), where k is the length of the message, and \u03b5 = 2 \u2212k \u03a9(1) .\n\nOur result is achieved by giving a non-malleable code against the tampering family G containing 2-lookahead tampering functions and forgetful tampering functions. Combined with a non-malleable reduction from the 2-split tampering family to G gives a non-malleable code in the splitstate model. For an overview of our construction and a discussion of our proof techniques, we refer the reader to Section II.\n\nOther Related Work.: If we relax the number of states to more than 2, or we restrict the adversary to be computationally bounded, then there are known constructions of constant rate non-malleable codes with negligible error. In particular, some recent results [20], [21], [22], [23] obtain near optimal non-malleable codes in the t-split-state model where t is a constant greater than 2, and [24] gave a construction of a rate 1 non-malleable code against computationally bounded adversaries.\n\nOther results that look at an (enhanced) split-state model are Faust et al. [25] which consider the model where the adversary can tamper continuously, and [26], that considers the model where the adversary, in addition to performing split-state tampering, is also allowed some limited interaction between the two states.\n\nThere have been some results that have obtained nonmalleable codes against continuous tampering in the splitstate model [27], [28]. 1 A previous version of [19] claimed a constant rate non-malleable codes in the split-state model. Unfortunately, Li [9] found a mistake in the proofs of one of the lemmas in the paper, and though the lemma is believable, currently the construction is secure only under a plausible conjecture.\n\nIn addition to the already-mentioned results, several recent works [29], [30], [31], [32], [33], [34], [35], [36], [37], [38] either used or built non-malleable codes for various families F, but did not concentrate on the split-state model, which is our focus here.\n\nThe notion of non-malleability was introduced by Dolev, Dwork and Naor [39], and has found many applications in cryptography. Traditionally, non-malleability is defined in the computational setting, but recently non-malleability has been successfully defined and applied in the informationtheoretic setting (generally resulting in somewhat simpler and cleaner definitions than their computational counterparts). For example, in addition to non-malleable codes studied in this work, the work of Dodis and Wichs [40] defined the notion of non-malleable extractors as a tool for building round-efficient privacy amplification protocols.\n\nFinally, the study of non-malleable codes falls into a much larger cryptographic framework of providing countermeasures against various classes of tampering attacks. This work was pioneered by the early works of [41], [42], [43], and has since led to many subsequent models. We do not list all such tampering models, but we refer to [44], [2] for an excellent discussion of various such models.\n\nOrganization of the Paper.: In Section II, we provide an overview of our construction and our proof techniques. In Section III we give formal definitions of non-malleable reductions and their connection to non-malleable codes. In Section IV, we state the properties of the non-malleable code construction from [4] needed for our proofs. In Section V, we provide our construction in a series of steps. In particular, in Subsection V-A, we give a construction of non-malleable codes against 2-lookahead tampering. In Subsection V-B, we show how to extend this construction to obtain a nonmalleable code against 2-lookahead and forgetful tampering. Finally, in Subsection V-C, we show how this yields a constant-rate non-malleable code in the split-state model. Full proofs can be found in full version of this paper.\n\n\nII. OVERVIEW OF THE CONSTRUCTION AND TECHNIQUES A. Non-malleable reductions\n\nIn [19], the notion of non-malleable codes w.r.t. to a tampering family F was generalized to a more versatile notion of non-malleable reductions from F to G. Intuitively, (F, G, \u03b5)-non-malleable reduction allows one to encode a value x with y \u2190 E(x), so that the tampering of y by y = f (y) for f \u2208 F gets \"reduced\" (by the decoding function D(y ) = x ) to tampering with x itself via some (distribution over) G \u2208 G, that is D(f (y)) \u2248 \u03b5 G(x). For formal definitions and more details we refer to the Section III-A.\n\nNotice that the notion of non-malleable code w.r.t. F, is simply a reduction from F to the family of \"trivial manipulation functions\" consisting of identity function and constant functions (see Def. 3.2 for formal definition). The utility of non-malleable reductions comes from the natural composition theorem that was shown in [19], which allows to construct a non-malleable code by gradually make our tampering families simpler and simpler, until we eventually end up with a family of trivial manipulation functions mentioned above.\n\n\nB. Important tampering families\n\nLet us briefly introduce few important function families.\n\n\u2022 t-split-state model. Is a family where the attacker can apply t arbitrarily correlated functions h 1 , . . . , h t to t separate parts of memory (but, of course, each h i can only be applied to the i-th part individually). \u2022 forgetful family. Memory is split into t parts. Adversary can apply any tampering function that depends only on (t \u2212 1) parts. I.e. adversary has to 'forget' at least one part of the memory (it is up to him which will be forgotten), besides that, it is not restricted in any way. \u2022 lookahead manipulation family. There are t parts of memory (x 1 , . . . , x t ), adversary tampers with first part\nx 1 = f 1 (x 1 )\n, then with next parts while knowing all previous parts:\nx i = f i (x 1 , . . . , x i ).\nIn other words, x 1 depends on x 1 , x 2 depends on both x 1 and x 2 , and in general,\nx i depends on x 1 , . . . , x i . \u2022 2\u2212lookahead manipulation family.\nHere t parts of memory (for t even) are split into two groups:  [19] that there is an efficient non-malleable reduction from the 2\u2212split state tampering family to a union of the forgetful tampering family and the 2\u2212lookahead tampering family. Moreover this reduction has a constant rate, i.e. the size of the codeword is linear in the size of the message. (for a formal statement see Thm. 5.1). By above theorem, to build explicit non-malleable code in the 2\u2212split-state model it suffices to build non-malleable code against sum of forgetful and double lookahead families. Moreover, if our code has a constant rate then induced code in 2\u2212split state model will have a constant rate.\n(x 1 , . . . , x t/2 ) and (x t/2+1 , . . . , x t ),\n\nD. Non-malleable code with rate zero but with additional properties\n\nA key ingredient in our construction will be the nonmalleable code construction from [4]. Even though, this construction has rate 1 n 4 \u2192 0 ([4] claimed a rate of 1\nn 6\nbut it was shown to be 1 n 4 using the same construction in [17]), it has some additional properties that allow us to bootstrap it to obtain a constant rate code against 2lookahead tampering. In particular, the non-malleable code from [4] has two additional properties that are crucial for our construction:\n\n\u2022 Leakage resilient storage. The code in [4] is built on inner product function, which is a strong 2-source extractor. Thus it has excellent leakage resilience properties. Even if the adversary sees one state, and obtains a lot of independent leakage from the other state, he still won't be able to say anything about the message 2 . \u2022 Detection of bijective tampering. The adversary cannot hope to retain a lot of information about the codeword in the tampered codeword, and still be able to tamper successfully. If the two tampered states carries a lot of information about original states then we are guaranteed that either the tampered codeword decodes to the original message is preserved or the codeword is not valid (and decodes to an error message, \u22a5). The two properties mentioned above together mean the following. A valid codeword encoding a valid message different from the original message can be produced only if the tampered codeword lost a significant fraction of the information about the original states. In fact, the tampered states carry so little 3 information about the original states, that the tampered states and some additional leakage of the codeword put together are still not enough to retrieve any information about the original message.\n\n\nE. Non-malleable code (NMC) against lookahead tampering -the construction\n\nFor clarity, we will first discuss the construction of a non-malleable code against lookahead tampering alone (without resilience to forgetful tampering). The construction is described in Figure 1. The main ingredients are:\n\n\u2022 (Enc, Dec) a non-malleable code from [4], \u2022 Ext 2 and Ext 3 are inner product (strong 2-source) extractors with appropriate parameters, \u2022 Checks is an appropriate 2-universal (collision resilient) hash function. We would like to emphasize here that the reason this construction has a constant rate even though (Enc, Dec) was not constant rate is because we are using Dec(L, R) to only store \"checks\" to detect any tampering in X, Y, A, B and not to actually store the message.\n\n\nF. A few tampering scenarios\n\nWe look at a few tampering scenarios to give the intuition behind the construction. We will write L , R to denote states L and R after tampering. We remind that, since Enc, Dec is a non-malleable code, adversary can only preserve the decoding Dec(L, R) or overwrite it completely or create an invalid codeword.\n\nScenario 1:: The adversary preserves checks encoded with non-malleable code from [4], i.e. Dec(L , R ) = Dec(L, R). In this case any tampering with X, Y, A, B will be detected via the checks in Dec(L , R ) = Dec(L, R). There is a technical issue with making this formal: the adversary tampers with X, A after seeing L and with Y, B after seeing R, but we choose the lengths of the states appropriately so that we can model everything as a small leakage from L and R and the secrecy of checks is preserved i.e. X, X , Y, Y , A, A , B, B together do not reveal any information about the random seed \u03c3, and thus the probability that checks of original and tampered parts of the codeword will collide is negligible.\n\nScenario 2:: The adversary overwrote checks i.e. Dec(L , R ) = Dec(L, R) is a valid codeword. In this case, by the NMC properties, we get that after the decoding, the modified seed \u03c3 and the corresponding check value c are independent of the original values. However, we can not rule out the possibility that the adversary knows both \u03c3 and c (e.g., if he completely overwrote L, R by something unrelated). Now we have two sub-scenarios: Scenario 2.1:: Adversary lost some information about X or Y . In this case, either X can not be fully recovered from L , X , or Y cannot be fully recovered from R , Y . Then by the strong 2-source extractor property of Ext 2 , the adversary has lost all information about Z and, as a consequence, the tampered codeword is uncorelated with the message. Scenario 2.2:: Adversary preserved information about X and Y . We know that \u03c3 and c are controlled by the adversary but completely independent of the original checks. We also know that X and Y must have high min-entropy, or else they wouldn't carry information about X, Y . In order to argue tamper detection in this case, we need to go into the details of the definition of our check. Our check function consists of two checks, one is a collision resilient hash function on X Y A B using half of \u03c3 as a seed. The other half of \u03c3 say \u03c3 2 is used for a check on Z,\nCheck-Z \u03c32 (Z) := c 2 = Z 1 \u2295 \u03c3 2 ,\nwhere Z 1 is an appropriate length prefix of Z. In this scenario, the check on Z comes into play. We have that X and Y are sampled independently and uniform at random and Z := Ext 2 (X, Y ). We can argue that X , Y are high-entropic and independent even given L, R (and hence given L , R ), and thus Z = Ext 2 (X , Y ) is close to uniform and independent of the message given L , R . Notice that the check for Z (or Z ) has the property that for any fixing of \u03c3 2 and c 2 , the probability that for U uniform U \u2295 \u03c3 2 = c 2 is negligible. Since, as we just discussed, Z is close to uniform and independent of \u03c3 2 and c 2 the probability that Z \u2295 \u03c3 2 = c 2 is negligible, and hence the tampering is detected by the decoding algorithm with overwhelming probability. Scenario 2.2 :: Imagine we are in the scenario 2.2 mentioned above, but we did not have the last parts A, B in our encoding function, i.e. the message is simply Z instead of Z \u2295 Ext 3 (A, B). Notice that in the previous scenario, we used that X and Y are independent of the message and since they have high entropy, Z = Ext 2 (X , Y ) is close to uniform and independent of the message. We did not show (and did not need) independence of Z and Z , since Z was sampled uniformly and independently from the message. Now, however, if the message is simply Z, then we cannot say any more that X and Y are independent or that Ext 2 (X , Y ) is uniform and independent of the message.\n\nOur encoding algorithm appends random variables A, B, respectively as the last part in both lookaheads to ensure that X, Y are independent of the message m.\n\n\nG. Why do we need additional properties of [4]?\n\nIn Scenarios 2.1 and 2.2 we need to argue that all information about original Dec(L, R) has been lost. This is not quite as trivial as it seems at the first glance. Dec(L , R ) might be independent of Dec(L, R) but L , R , X , Y , A , B together might carry some information about the original checks. Imagine, for example, that Dec(L , R ) is fixed and independent of Dec(L, R). We have to exclude the possibility that the rest of the codeword (X , Y , A , B ) fulfills the checks from Dec(L , R ) if and only if the first bit of Dec(L, R) is equal to Dec(L , R ). If we didn't rule out this possibility, then Dec(L , R ) is not independent of Dec(L, R) conditioned on the codeword being valid. This is not only a technical issue, but given that Dec(L, R) encodes a check on Z, this would raise a concern about the security of the whole scheme.\n\nAs we discussed earlier, [4] has the property that if Dec(L, R) = Dec(L , R ) then L , R form a valid codeword if and only if it doesn't carry much information about L, R, i.e. the tampering function on L and R are very far from bijective. Then we simply consider X , Y , A , B as an extra leakage 4 and we can show that L , R , X , Y , A , B together do not carry enough information about L, R and thus are independent of the original checks.\n\nAnother place where we use an additional properties of [4] is in Scenario 1 where we need to show that X, X , Y, Y , A, A , B, B doesn't carry any information about Dec(L, R). here the argument is much more straight forward and follows from the leakage resilient storage property of the code.\n\n\nH. Last step: resilience to forgetful tampering\n\nFinally in Section V-B, we show how to add resilience to forgetful tampering. We need to modify our construction so that forgetting about any of the states leads to forgetting the message. This means that the message can not be retrieved using only 5 of the states (i.e. that the construction is 6 out of 6 secret sharing). First notice: 1) Forgetting A or B: by the property of inner product forgetting A or B immediately leads to losing any information about Ext 3 (A, B) and thus we lose information about the original message. 2) Forgetting X or Y : Losing information about Z immediately leads to losing any information about message. However, situation is more complicated, since L, R encode the check on Z. Thus, not all information about Z is lost and some partial information about the message can be retrieved. 3) Forgetting L or R: forgetting any of the two is inconsequential, we can fully retrieve the message simply by calculating Ext 2 (X, Y ) + Ext 3 (A, B). Point 2:: This problem can be easily resolved, notice that L, R carry only information about the prefix of Z. Thus the only information about the encoded message the adversary can retrieve is the prefix of that message. To fix this, we simply require that the prefix of the message is 0 2t where 2t is the length of the check, which essentially means that the message is encoded only on the suffix i.e Ext 2 (X, Y ) + Ext 3 (A, B) = 0 2t ||message. Point 3:: Notice that now, after the above fix, forgetting X or Y leads to forgetting the whole message. Using this fact, we can easily fix the issue from point 3. We will split X (and Y ) into 2 states X = X 1 + X 2 (and Y = Y 1 + Y 2 ). Notice that forgetting any of the four X 1 , X 2 , Y 1 , Y 2 leads to forgetting the message. We will exploit this fact simply by extending states holding L and R to store L X 1 and R Y 1 respectively, while states previously storing X and Y will only store X 2 and Y 2 respectively (see Figure 2 for the diagram of modified decoder function).\n\nAfter the above modifications.: Notice that: 1) Forgetting A or B: we still immediately lose the message. 2) Forgetting X 2 or Y 2 : we lose the information about Z which immediately leads to losing any information about the message. 3) Forgetting L X 1 or R Y 1 : forgetting any of the two means forgetting X 1 or Y 1 which has the same consequences as forgetting X 2 or Y 2 .\n\n\nIII. DEFINITIONS AND FORMAL THEOREM STATEMENTS A. Non-malleable Codes and Reductions\n\nDEFINITIONS. In [19], the notion of non-malleable codes w.r.t. to a tampering family F (see [1]) was generalized to a more versatile notion of non-malleable reductions from F to G. The following definitions are taken from [19]. \n\u0394 D(f (E(x))) ; G(x) \u2264 \u03b5,(1)\nwhere G is a distribution over G, and G(x) denotes the distribution g(x), where g \u2190 G.\n\nThe pair (E, D) is called (F, G, \u03b5)-non-malleable reduction.\n\nIntuitively, (F, G, \u03b5)-non-malleable reduction allows one to encode a value x by y \u2190 E(x), so that tampering with y by y = f (y) for f \u2208 F gets \"reduced\" (by the decoding function D(y ) = x ) to tampering with x itself via some (distribution over) g \u2208 G.\n\nIn particular, the notion of non-malleable code w.r.t. F, is simply a reduction from F to the family of \"trivial manipulation functions\" NM k defined below.\n\nDefinition 3.2: Let NM k denote the set of trivial manipulation functions on k-bit strings, which consists of the identity function I(x) = x and all constant functions\nf c (x) = c, where c \u2208 {0, 1} k .\nWe say that a pair (E, D) defines an (F, k, \u03b5)-nonmalleable code, if it defines a (F, NM k , \u03b5)-non-malleable reduction.\n\nThe utility of non-malleable reductions comes from the following natural composition theorem that was shown in [19], which allows to gradually make our tampering families simpler and simpler, until we eventually end up with a non-malleable code (corresponding to the trivial family NM k ).\nTheorem 3.1 (Composition): If (F \u21d2 G, \u03b5 1 ) and (G \u21d2 H, \u03b5 2 ), then (F \u21d2 H, \u03b5 1 + \u03b5 2 ).\nWe will also need the following trivial observation. USEFUL TAMPERING FAMILIES. We define several natural tampering families we will use in this work. For this, we first introduce the following \"direct product\" operator on tampering families: \nh(x) = h 1 (x 1 ) h 2 (x 2 )\nfor some h 1 \u2208 F and h 2 \u2208 G and x = x 1 x 2 , where\nx 1 \u2208 A, x 2 \u2208 B.\nWe also let F 1 := F, and, for t \u2265 1, F t+1 := F t \u00d7 F. We can now define the following tampering families: \n\u2022 S n = ({0, 1} n ) {0,\n\nIV. THE NON-MALLEABLE CODE CONSTRUCTION\n\nFROM [4], [7], [17] We will need the construction of non-malleable codes in the split-state model from [4], [7], [17]. We need a little more than just the non-malleability property of the construction. The following theorem states and proves the precise property of the code that we require for our construction. The proof appears in the full version and is a rather straightforward modification of the proofs in [4], [7], [17]. The reader can safely skip this section and return to it when referenced.\n\nTheorem 4.1: There exists an efficient construction (Enc, Dec) of an \u03b5-non-malleable code in the split-state model from {0, 1} 7t to F n p \u00d7F n p with \u03b5 = 2 \u2212\u03a9(t) , n = O(t 5 ) and p \u2264 2 O(t) is a prime 5 . Furthermore, for any functions f : F n p \u2192 F n p , and g : F n p \u2192 F n p , the space F n p \u00d7 F n p can be partitioned into F n p \u00d7 R 0 , L 0 \u00d7 (F n p \\ R 0 ), (L same,i \u00d7 R same,i ) 1\u2264i\u2264q , (L \u22a5,i \u00d7 R \u22a5,i ) 1\u2264i\u2264r , Rem such that the following hold.\n\n\u2022 L 0 = { \u2208 F n p : |f \u22121 (f ( ))| \u2265 p 0.45n , and R 0 = {r \u2208 F n p : |g \u22121 (g(r))| \u2265 p 0.45n , i.e., L 0 is the subset of F n p on which f is \"far from\" being a bijective function, and R 0 is the subset of F n p on which g is \"far from\" being a bijective function. So, now we construct non-malleable codes for the tampering family LA \u21903 q,q,q \u00d7 LA \u21903 q,q,q \u222a FOR 6 q,q,q,q,q,q . In Section V-A, we give a non-malleable code against 2-lookahead tampering family, and in Section V-B, we show how to extend it to include the forgetful tampering family.\n\nA. A non-malleable code against 2-lookahead tampering Theorem 5.2: There exists a 2 \u2212k \u03a9(1) -non-malleable code for k-bit messages against the tampering family\nLA \u21903 O(k),O(k),O(k) \u00d7 LA \u21903 O(k),O(k),O(k) .\n\nConstruction.:\n\nOur construction (E, D) depicted in Figure 1 that achieves the above result is as follows 6 .\n\nEncode: : Given m \u2208 {0, 1} k , we do the following.\n\n\u2022 Let Ext 3 be the inner product function from\nF 5 2 k \u00d7 F 5 2 k \u2192 F 2 k . Let A, B be chosen uni- formly at random from {0, 1} 5k . \u2022 Let Ext 2 be the inner product function from F 25 2 k \u00d7 F 25 2 k \u2192 F 2 k . Sample X, Y \u2208 {0, 1} 25k uniformly at random, conditioned on z := Ext 2 (X, Y ) = m \u2295 Ext 3 (A, B).\n\u2022 Let \u03c3 1 , \u03c3 2 be 2t-bit strings sampled uniformly at random for t = \u0398(k 1/5 ).\n\u2022 Let C 1 , C 2 : {0, 1} 2t \u00d7 {0, 1} 25k \u2192 {0, 1} t ,\nand C 3 ,\nC 4 : {0, 1} 2t \u00d7 {0, 1} 5k \u2192 {0, 1} t be 2 \u2212t/2 -almost universal hash functions 7 . Also, let z = z 1 z 2 where |z 1 | = 2t. \u2022 Let s = \u03c3 1 , \u03c3 2 , c 1 := C 1 (\u03c3 1 , X) C 2 (\u03c3 1 , Y ) C 3 (\u03c3 1 , A) C 4 (\u03c3 1 , B), c 2 := z 1 \u2295 \u03c3 2 .\n\u2022 Let L, R := Enc(s), where (Enc, Dec) be a non-malleable code in the split state model given by Theorem 4.1 from {0, 1} 10t to F n p \u00d7 F n p where n = 100k log p . \u2022 Output (L, X, A) as the first part of the codeword, and (R, Y, B) as the second part. For the rest of the paper, we denote C 1 (\u03c3 1 , X) C 2 (\u03c3 1 , Y ) C 3 (\u03c3 1 , A) C 4 (\u03c3 1 , B) L, R, thereby fixing L = , R = r .\n\nThus, X , Y are deterministic functions of X, Y , respectively. Now we further partition the space {0, 1} 25k \u00d7 {0, 1} 25k based on the functions f 2 , g 2 . First we consider the case where H \u221e (X ) + H \u221e (Y ) 26k. In this case, by using the fact that inner product is a strong 2-source extractor, and noting that X, Y , and hence X , Y is independent of the message m, we have that z (and hence z 1 is close to uniform and independent of the message m, and , r . Thus, the probability that \u03c3 2 = c 2 \u2295 z 1 is negligible, and hence the decoding algorithm outputs \u22a5 with high probability.\n\nThe only remaining case is when one of H \u221e (X|X ) or H \u221e (Y |Y ) (say H \u221e (X|X )) is at least 10k, in which case H \u221e (X|X , A, A ) \u2265 5k, and hence by the strong extractor property of the inner product, we have that z = Ext 2 (X, Y ) is independent of X , Y , A , B , A, B and hence is independent of the tampered codeword (since we already fixed L , R ). The tampered codeword is thus independent of the message 9 . . Proof: We modify the construction in Section V-A to get non-malleability against the forgetful family.\n\nConstruction.: Our construction (E * , D * ) depicted in Figure 2 that achieves the above result is as follows.\n\nEncode: : Our encoding algorithm is as follows.\n\n\u2022 Given a message m * \u2208 {0, 1} k\u22122t , let m = 0 2t m * . \u2022 Let X, A, Y, B, L, R, s, \u03c3 1 , \u03c3 2 , z, z 1 , z 2 , c 1 , c 2 be as in the encoding of E(m), where E is the encoding algorithm from Section V-A. \u2022 Choose X 1 , Y 1 uniformly at random from {0, 1} 25k , and let X 2 = X \u2295X 1 , Y 2 = Y \u2295Y 1 . \u2022 Output the three parts of the first lookahead as ((L, X 1 ), X 2 , A), and the three parts of the second lookahead as ((R, Y 1 ), Y 2 , B). Decode: : The decoding algorithm is as follows.\n\n\u2022 Given ((L, X 1 ), X 2 , A), ((R, Y 1 ), Y 2 , B), compute X = X 1 \u2295 X 2 , and Y = Y 1 \u2295 Y 2 . \n\nFigure 1 .\n1The decoding algorithm of NMC against lookahead tampering.\n\nFigure 2 .\n2The decoding algorithm of NMC against lookahead and forgetful tampering .\n\n\nDefinition 3.1 (non-malleable reduction): Let F \u2282 A A and G \u2282 B B be some classes of functions (which we call manipulation functions). We will write: (F \u21d2 G, \u03b5) and say F reduces to G, if there exist an efficient randomized encoding function E : B \u2192 A, and an efficient deterministic decoding function D : A \u2192 B, such that (a) for all x \u2208 B, we have D(E(x)) = x, and (b) for all f \u2208 F, there exists G such that for all x \u2208 B,\n\nObservation 3 . 1 (\n31Union): Let (E, D) be an (F, H, \u03b5) and a (G, H, \u03b5 ) non-malleable reduction . Then (E, D) is an (F \u222a G, H, max(\u03b5, \u03b5 )) non-malleable reduction .\n\nDefinition 3 . 3 :\n33Given tampering families F \u2282 A A and G \u2282 B B , let F \u00d7 G denote the class of functions h from (A \u00d7 B) A\u00d7B such that\n\n\n1} n denote the class of all manipulation functions on n-bit strings. \u2022 Given t > 1, S t n denotes the tampering family in the t-split-state model, where the attacker can apply t arbitrarily correlated functions h 1 , . . . , h t to t separate, n-bit parts of memory (but, of course, each h i can only be applied to the i-th part individually). \u2022 FOR t n1,n2,...,nt denotes forgetful family. It is applied to t parts of memory of length n i but the output value can depend only on (t \u2212 1) parts. More precisely: Let x \u2208 {0, 1} n be a bit vector and x i \u2208 {0, 1} ni denote i-th block of n bits. For any h \u2208 FOR t n1,n2,...,nt there exist a subset S \u2282 {1, 2, . . . , t} of size (t \u2212 1) such that h(x) can be evaluated from x S . Besides that, it is not restricted in any way. \u2022 Finally, LA \u2190t n1,...,nt , where n = n 1 +\u00b7 \u00b7 \u00b7+n t denotes the class of lookahead manipulation functions l that can be rewritten as l = (l 1 , . . . , l t ), for l i : {0, 1} n1+\u00b7\u00b7\u00b7+ni \u2192 {0, 1} ni , and wherel(x) = l 1 (x 1 ) . . . l t (x 1 , . . . , x t ) for x i \u2208 {0, 1} ni .In other words, if l(x 1 , . . . , x t ) = y 1 , . . . , y t , then y 1 depends on x 1 , and y 2 depends on both x 1 and x 2 , and in general, y i depends on x 1 , . . . , x i .\n\n\nB. A non-malleable code secure against 2-lookahead and forgetful tampering Theorem 5.3: There is an 2 \u2212k \u03a9(1) -non-malleable code for k-bit messages against the tampering family LA \u21903O(k),O(k),O(k) \u00d7 LA \u21903 O(k),O(k),O(k) \u222a FOR 6 O(k),O(k),O(k),O(k),O(k),O(k)\n\n\n\u2022 Then D * (((L, X 1 ), X 2 , A), ((R, Y 1 ), Y 2 , B)) := D ((L, X, A), (R, Y, B)), where D is as defined in Section V-A.We now give a simple argument that shows that this construction is secure against the tampering family LA \u21903O(k),O(k),O(k) \u00d7 LA \u21903 O(k),O(k),O(k) \u222a 9Since m = Ext 2 (X, Y ) + Ext 3(A, B)\n\n\neach of the groups is tampered independently, within the groups adversary applies lookahead manipulations. That means that x i depends on x 1 , . . . , x i for i = 1, . . . , t/2, and for i = t/2+1, . . . , t we get that x i depends on x t/2+1 , . . . , x i . C. Reduction from 2\u2212split state model Theorem 2.1: [Informal]. It was shown in\n\n\n\u2022 For all m \u2208 {0, 1} 7t , for all i, Pr[Dec(Enc(m)) = m | Enc(m) \u2208 L same,i \u00d7R same,i ] = 1, and |L same,i \u00d7 R same,i | \u2265 p 1.9n . \u2022 For all m \u2208 {0, 1} 7t , for all i, Pr[Dec(Enc(m)) = \u22a5 | Enc(m) \u2208 L \u22a5,i \u00d7 R \u22a5,i ] = 1 \u2212 \u03b5, and |L \u22a5,i \u00d7 R \u22a5,i | \u2265 p 1.9n . \u2022 For all m \u2208 {0, 1} 7t , Pr[Enc(m) \u2208 Rem] \u2264 \u03b5. \u2022 The decoding function Dec( , r) := h(Ext( , r)) is a deterministic function of the inner product two-source extractor function from F n p \u00d7 F n p to F p .V. OUR CONSTRUCTIONS AND THE MAIN RESULTIt was shown in[19] that Theorem 5.1: For any q, there is an n = O(q) such that(S 2 \nn \u21d2 LA \u21903 \nq,q,q \u00d7 LA \u21903 \nq,q,q \u222a FOR 6 \nq,q,q,q,q,q , 2 \u2212\u03a9(q) ) . \n\n\nThe leakage resilience is meant to be exactly as described here. We are not referring to leakage resilient non-malleable code as defined in[2] and[26].3 The information rate of the tampered codeword to original codeword is way more then 1/2, but the rate of information required to retrieve the message is close to 1, the gap between the two is of a constant order.\nWhere X , A is bounded leakage from L and Y , B is a bounded leakage from R.\nThe constant 7 in this Theorem statement are chosen to match those required in our results. There is some freedom in the choice of parameters in[4],[7],[17], and so the result of this theorem follows for an appropriate choice of t.\nWe note here, that the construction is efficient. Please notice that since Ext 2 and Ext 3 are just inner product extractors they are efficiently invertible, in particular for any output z it is possible to efficiently sample X, Y uniformly random fulfilling Ext 2 (X, Y ) = z.\nWe require 4 almost universal hash functions instead of a single, joint check in order to ensure that X, Y are independent given C(\u03c3 1 , X Y A B), and A, B are independent given C(\u03c3 1 , X Y A B).\nACKNOWLEDGMENTSThis work was partially supported by the Singapore National Research Foundation under NRF RF Award No. NRF-NRFF2013-13, the Ministry of Education, Singapore under grants MOE2012-T3-1-009, and MOE2019-T2-1-145.7 A function C : {0, 1} s \u00d7 {0, 1} n \u2192 {0, 1} t is called an \u03b5-almost universal hash function if for any x, y \u2208 {0, 1} n such that x = y, Pr R\u2190{0,1} s (C(R, x) = C(R, y)) \u2264 \u03b5 The following is a standard construction of a polynomial evaluation \u03b5-universal hash function. The parameters are from[40]. For any n, t > 2 log n, there exists an efficiently computable 2 \u2212t/2 -almost univeral hash function C : {0, 1} s \u00d7{0, 1} n \u2192 {0, 1} t with s = 2t.by C(\u03c3 1 , X Y A B).8Decode: : Given (L, X, A), (R, Y, B) we do the following.\u2022 Compute s = Dec(L, R), and z = Ext 2 (X, Y ).Y, B). Also, let z , z 1 , z 2 , \u03c3 1 , \u03c3 2 , c 1 , c 2 be the corresponding tampered values.As is the case with almost all proofs for non-malleable code constructions, our proof proceeds by first partitioning the ambient space F n p \u00d7{0, 1} 30k \u00d7F n p \u00d7{0, 1} 30k depending on the functions f 1 , g 1 , f 2 , g 2 , f 3 , g 3 . We then argue that for each partition, as long as the partition is large enough, conditioned on the random variables L, X, A, R, Y, B being restricted to be in that partition, we can show that either the codeword remains unchanged after tampering, or D((L , X , A ), (R , Y , B )) = \u22a5 with high probability, or the tampered codeword is almost independent of the message m, (i.e., it reveals no information about the message m).We first consider the partition where Dec(L , R ) = Dec(L, R). In this case, notice that if X, Y, A, B are changed then with high probability, C(\u03c3 1 , X Y A B) = C(\u03c3 1 , X Y A B), and so the decoding algorithm outputs \u22a5 with high probability. On the other hand, if X, Y, A, B are unchanged, then the decoder outputs same. For the formal proof, we need to deal with the dependence between various random variables, and the detailed proof can be found in the full version.We(k),O(k),O(k) \u00d7 LA \u21903 O(k),O(k),O(k). Non-malleability against 2-lookahead tampering.: We first argue security against 2-lookahead tampering. Let the tampering functions be f 1 , g1Y 2 , B), We show the result for every possible fixing of X 1 = x and Y 1 = y. We define the functions, and similarly define g * 1 , g * 2 , g * 3 , which is an attack in LA \u21903 \u00d7 LA \u21903 against the construction from Theorem 5.2. With this change, the proof is identical to that of Theorem 5.2.Non-malleability against forgetful tampering.: In order to argue security against forgetful tampering, consider the case where the adversary loses information about one of A or B (say A), but knows L, R, X 1 , X 2 , Y 1 , Y 2 , B. We assume that A, B, X 1 , X 2 , Y 1 , Y 2 are uniformly distributed and L, R is computed as in the E * given A, B, X 1 , X 2 , Y 1 , Y 2 . In this case, since H \u221e(A|C(\u03c3 1 , X Y A B)) \u2265 5k \u2212 t, and A, B are independent given C(\u03c3 1 , X Y A B), we have that 10For any message m * , we have that Ext 3 (A, B) \u2295 Ext 2 (X 1 , X 2 ) = m * (respectively U k \u2295Ext 2 (X 1 , X 2 ) = m), and11we have that upto statistical distance 2 \u00b7 2 \u22120.5k , B, X 1 , X 2 , Y 1 , Y 2 , L, R are independent of the message m.Similarly, if the adversary loses information about one of X 2 or Y 2 (say X 2 ), then a similar argument shows that z 2 is uniform and independent of A, B, X 1 , Y 1 , Y 2 , L, R, and hence conditioning on (z 1 z 2 ) \u2295 Ext 3 (A, B) = 0 2t m * , which implies that upto statistical distance 2 \u2212\u03a9(k) , m * is independent of A, B, X 1 , Y 1 , Y 2 , L, R.Losing one of (L, X 1 ) or (R, Y 1 ) (say (L, X 1 )) is clearly worse for the adversary, and so the adversary cannot distinguish between the tampered codeword of any two messages. The result follows.C. Final result via a non-malleable reduction from [19]Setting q = 125k in Theorem 5.4, and padding the required number of 0's as a prefix to each part of the codeword, we obtain the following10Recall thatis shorthand for C 1 (\u03c3 1 , X) C 2 (\u03c3 1 , Y ) C 3 (\u03c3 1 , A) C 4 (\u03c3 1 , B).11Using following lemma: let X 1 , Y 1 \u2208 A 1 , and Y 1 , Y 2 \u2208 A 2 be random variables such that \u0394((X 1 , X 2 ) ; (Y 1 , Y 2 )) \u2264 \u03b5. Then, for any non-empty set A \u2286 A 1 , we have1292Theorem 5.4: There is an 2 \u2212q \u03a9(1) -non-malleable code for k \u2212 O(k 1/5 )-bit messages against the tampering family LA \u21903 q,q,q \u00d7 LA \u21903 q,q,q \u222a FOR 6 q,q,q,q,q,q . Theorem 1.1 then follows from Theorem 3.1 and Theorem 5.1.\nNon-malleable codes. S Dziembowski, K Pietrzak, D Wichs, ICS. Tsinghua University PressS. Dziembowski, K. Pietrzak, and D. Wichs, \"Non-malleable codes,\" in ICS. Tsinghua University Press, 2010, pp. 434- 452.\n\nTamper and leakage resilience in the split-state model. F.-H Liu, A Lysyanskaya, Advances in Cryptology-CRYPTO 2012. SpringerF.-H. Liu and A. Lysyanskaya, \"Tamper and leakage re- silience in the split-state model,\" in Advances in Cryptology- CRYPTO 2012. Springer, 2012, pp. 517-532.\n\nNonmalleable codes from two-source extractors. S Dziembowski, T Kazana, M Obremski, Advances in Cryptology-CRYPTO 2013. SpringerS. Dziembowski, T. Kazana, and M. Obremski, \"Non- malleable codes from two-source extractors,\" in Advances in Cryptology-CRYPTO 2013. Springer, 2013.\n\nNon-malleable codes from additive combinatorics. D Aggarwal, Y Dodis, S Lovett, STOC. ACMD. Aggarwal, Y. Dodis, and S. Lovett, \"Non-malleable codes from additive combinatorics,\" in STOC. ACM, 2014.\n\nCapacity of nonmalleable codes. M Cheraghchi, V Guruswami, ITCS. M. Cheraghchi and V. Guruswami, \"Capacity of non- malleable codes,\" in ITCS, 2014.\n\nNon-malleable coding against bit-wise and split-state tampering. TCC. --, \"Non-malleable coding against bit-wise and split-state tampering,\" in TCC, 2014.\n\nAffine-evasive sets modulo a prime. D , Information Processing Letters. 1152D. Aggarwal, \"Affine-evasive sets modulo a prime,\" Informa- tion Processing Letters, vol. 115, no. 2, pp. 382-385, 2015.\n\nNon-malleable extractors and codes, with their many tampered extensions. E Chattopadhyay, V Goyal, X Li, Proceedings of the forty-eighth annual ACM symposium on Theory of Computing. the forty-eighth annual ACM symposium on Theory of ComputingACME. Chattopadhyay, V. Goyal, and X. Li, \"Non-malleable extractors and codes, with their many tampered extensions,\" in Proceedings of the forty-eighth annual ACM symposium on Theory of Computing. ACM, 2016, pp. 285-298.\n\nImproved non-malleable extractors, non-malleable codes and independent source extractors. X Li, Proceedings of the 49th Annual ACM SIGACT Symposium on Theory of Computing. the 49th Annual ACM SIGACT Symposium on Theory of ComputingACMX. Li, \"Improved non-malleable extractors, non-malleable codes and independent source extractors,\" in Proceedings of the 49th Annual ACM SIGACT Symposium on Theory of Computing. ACM, 2017, pp. 1144-1156.\n\nNon-malleable extractors and non-malleable codes: Partially optimal constructions. CCC. --, \"Non-malleable extractors and non-malleable codes: Partially optimal constructions,\" CCC, 2019.\n\nTextbook nonmalleable commitments. V Goyal, O Pandey, S Richelson, Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016. D. Wichs and Y. Mansourthe 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016Cambridge, MA, USAACMV. Goyal, O. Pandey, and S. Richelson, \"Textbook non- malleable commitments,\" in Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016, Cambridge, MA, USA, June 18-21, 2016, D. Wichs and Y. Mansour, Eds. ACM, 2016, pp. 1128-1141.\n\nNon-malleable secret sharing. V Goyal, A Kumar, Proceedings of the 50th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2018. I. Diakonikolas, D. Kempe, and M. Henzingerthe 50th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2018Los Angeles, CA, USAACMV. Goyal and A. Kumar, \"Non-malleable secret sharing,\" in Proceedings of the 50th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2018, Los Angeles, CA, USA, June 25-29, 2018, I. Diakonikolas, D. Kempe, and M. Henzinger, Eds. ACM, 2018, pp. 685-698.\n\nNon-malleable secret sharing for general access structures. Advances in Cryptology -CRYPTO. 13[13] --, \"Non-malleable secret sharing for general access struc- tures,\" in Advances in Cryptology -CRYPTO 2018 -38th\n\nProceedings, Part I, ser. Lecture Notes in Computer Science. Annual International Cryptology Conference. H. Shacham and A. BoldyrevaSanta Barbara, CA, USA10991Annual International Cryptology Conference, Santa Bar- bara, CA, USA, August 19-23, 2018, Proceedings, Part I, ser. Lecture Notes in Computer Science, H. Shacham and A. Boldyreva, Eds., vol. 10991, 2018, pp. 501-530.\n\nStronger leakage-resilient and non-malleable secret-sharing schemes for general access structures. D Aggarwal, I Damg\u00e5rd, J B Nielsen, M Obremski, E Purwanto, J Ribeiro, M Simkin, IACR Cryptology ePrint Archive. 20181147D. Aggarwal, I. Damg\u00e5rd, J. B. Nielsen, M. Obremski, E. Pur- wanto, J. Ribeiro, and M. Simkin, \"Stronger leakage-resilient and non-malleable secret-sharing schemes for general access structures,\" IACR Cryptology ePrint Archive, vol. 2018, p. 1147, 2018.\n\nRevisiting nonmalleable secret sharing. S Badrinarayanan, A Srinivasan, IACR Cryptology ePrint Archive. 20181144S. Badrinarayanan and A. Srinivasan, \"Revisiting non- malleable secret sharing,\" IACR Cryptology ePrint Archive, vol. 2018, p. 1144, 2018.\n\nLeakage resilient secret sharing and applications. A Srinivasan, P N Vasudevan, IACR Cryptology ePrint Archive. 20181154A. Srinivasan and P. N. Vasudevan, \"Leakage resilient secret sharing and applications,\" IACR Cryptology ePrint Archive, vol. 2018, p. 1154, 2018.\n\nRevisiting the sandersbogolyubov-ruzsa theorem in f p n and its application to nonmalleable codes. D Aggarwal, J Bri\u00ebt, 2016 IEEE International Symposium on. Ieeein Information Theory (ISITD. Aggarwal and J. Bri\u00ebt, \"Revisiting the sanders- bogolyubov-ruzsa theorem in f p n and its application to non- malleable codes,\" in Information Theory (ISIT), 2016 IEEE International Symposium on. Ieee, 2016, pp. 1322-1326.\n\nIntrusion-resilient secret sharing. S Dziembowski, K Pietrzak, Foundations of Computer Science, 2007. FOCS'07. 48th Annual IEEE Symposium on. IEEES. Dziembowski and K. Pietrzak, \"Intrusion-resilient se- cret sharing,\" in Foundations of Computer Science, 2007. FOCS'07. 48th Annual IEEE Symposium on. IEEE, 2007, pp. 227-237.\n\nNonmalleable reductions and applications. D Aggarwal, Y Dodis, T Kazana, M Obremski, Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015. the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015Portland, OR, USAD. Aggarwal, Y. Dodis, T. Kazana, and M. Obremski, \"Non- malleable reductions and applications,\" in Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015, Portland, OR, USA, June 14-17, 2015, 2015, pp. 459-468.\n\nNon-malleable codes in the constant split-state model. E Chattopadhyay, D Zuckerman, To appear in FOCSE. Chattopadhyay and D. Zuckerman, \"Non-malleable codes in the constant split-state model,\" To appear in FOCS, 2014.\n\nFour-state non-malleable codes with explicit constant rate. B Kanukurthi, S L B Obbattu, S Sekar, Theory of Cryptography Conference. SpringerB. Kanukurthi, S. L. B. Obbattu, and S. Sekar, \"Four-state non-malleable codes with explicit constant rate,\" in Theory of Cryptography Conference. Springer, 2017, pp. 344-375.\n\nNon-malleable randomness encoders and their applications. EUROCRYPT. Springer--, \"Non-malleable randomness encoders and their appli- cations,\" in EUROCRYPT. Springer, 2018, pp. 589-617.\n\nConstant-rate nonmalleable codes in the split-state model. D Gupta, H K Maji, M Wang, 2017/1048Cryptology ePrint Archive, Tech. Rep. Technical Report ReportD. Gupta, H. K. Maji, and M. Wang, \"Constant-rate non- malleable codes in the split-state model,\" Technical Report Report 2017/1048, Cryptology ePrint Archive, Tech. Rep., 2018.\n\nOptimal computational split-state nonmalleable codes. D Aggarwal, S Agrawal, D Gupta, H K Maji, O Pandey, M Prabhakaran, Theory of Cryptography Conference. SpringerD. Aggarwal, S. Agrawal, D. Gupta, H. K. Maji, O. Pandey, and M. Prabhakaran, \"Optimal computational split-state non- malleable codes,\" in Theory of Cryptography Conference. Springer, 2016, pp. 393-417.\n\nContinuous non-malleable codes. S Faust, P Mukherjee, J Nielsen, D Venturi, Theory of Cryptography Conference -TCC. SpringerS. Faust, P. Mukherjee, J. Nielsen, and D. Venturi, \"Con- tinuous non-malleable codes,\" in Theory of Cryptography Conference -TCC. Springer, 2014.\n\nLeakage-resilient non-malleable codes. D Aggarwal, S Dziembowski, T Kazana, M Obremski, Theory of Cryptography -12th Theory of Cryptography Conference. Warsaw, PolandProceedings, Part ID. Aggarwal, S. Dziembowski, T. Kazana, and M. Obremski, \"Leakage-resilient non-malleable codes,\" in Theory of Cryp- tography -12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I, 2015, pp. 398-426.\n\nInception makes non-malleable codes stronger. D Aggarwal, T Kazana, M Obremski, Theory of Cryptography Conference. SpringerD. Aggarwal, T. Kazana, and M. Obremski, \"Inception makes non-malleable codes stronger,\" in Theory of Cryptography Conference. Springer, 2017, pp. 319-343.\n\nContinuous non-malleable codes in the 8-splitstate model. D Aggarwal, N Dottling, J B Nielsen, M Obremski, E Purwanto, Cryptology ePrint Archive. 357Tech. RepD. Aggarwal, N. Dottling, J. B. Nielsen, M. Obremski, and E. Purwanto, \"Continuous non-malleable codes in the 8-split- state model,\" Cryptology ePrint Archive, Report 2017/357, Tech. Rep., 2017.\n\nNonmalleable codes from the wire-tap channel. H Chabanne, G Cohen, J Flori, A Patey, Information Theory Workshop (ITW). IEEEH. Chabanne, G. Cohen, J. Flori, and A. Patey, \"Non- malleable codes from the wire-tap channel,\" in Information Theory Workshop (ITW), 2011 IEEE. IEEE, 2011, pp. 55-59.\n\nSecure network coding and non-malleable codes: Protection against linear tampering. H Chabanne, G Cohen, A Patey, Information Theory Proceedings (ISIT). H. Chabanne, G. Cohen, and A. Patey, \"Secure network coding and non-malleable codes: Protection against linear tampering,\" in Information Theory Proceedings (ISIT), 2012\n\n. IEEE International Symposium on. IEEEIEEE International Symposium on. IEEE, 2012, pp. 2546- 2550.\n\nBitr: built-in tamper resilience. S G Choi, A Kiayias, T Malkin, Advances in Cryptology-ASIACRYPT 2011. SpringerS. G. Choi, A. Kiayias, and T. Malkin, \"Bitr: built-in tamper resilience,\" in Advances in Cryptology-ASIACRYPT 2011. Springer, 2011, pp. 740-758.\n\nEfficient non-malleable codes and key-derivation for poly-size tampering circuits. S Faust, P Mukherjee, D Venturi, D Wichs, Eurocrypt. Springerto appearS. Faust, P. Mukherjee, D. Venturi, and D. Wichs, \"Efficient non-malleable codes and key-derivation for poly-size tamper- ing circuits,\" in Eurocrypt. Springer, 2014, to appear.\n\nExplicit non-malleable codes resistant to permutations and perturbations. S Agrawal, D Gupta, H K Maji, O Pandey, M Prabhakaran, IACR Cryptology ePrint Archive. 2014841S. Agrawal, D. Gupta, H. K. Maji, O. Pandey, and M. Prab- hakaran, \"Explicit non-malleable codes resistant to permu- tations and perturbations,\" IACR Cryptology ePrint Archive, vol. 2014, p. 841, 2014.\n\nA rate-optimizing compiler for non-malleable codes against bit-wise tampering and permutations. Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015. Warsaw, PolandProceedings, Part I--, \"A rate-optimizing compiler for non-malleable codes against bit-wise tampering and permutations,\" in Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I, 2015, pp. 375-397.\n\nNon-malleable codes for bounded depth, bounded fan-in circuits. M Ball, D Dachman-Soled, M Kulkarni, T Malkin, Annual International Conference on the Theory and Applications of Cryptographic Techniques. SpringerM. Ball, D. Dachman-Soled, M. Kulkarni, and T. Malkin, \"Non-malleable codes for bounded depth, bounded fan-in circuits,\" in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2016, pp. 881-908.\n\nNonmalleable codes for space-bounded tampering. S Faust, K Host\u00e1kov\u00e1, P Mukherjee, D Venturi, Annual International Cryptology Conference. SpringerS. Faust, K. Host\u00e1kov\u00e1, P. Mukherjee, and D. Venturi, \"Non- malleable codes for space-bounded tampering,\" in Annual International Cryptology Conference. Springer, 2017, pp. 95-126.\n\nNon-malleable codes from average-case hardness: Decision trees, and streaming space-bounded tampering. M Ball, D Dachman-Soled, M Kulkarni, T Malkin, Annual International Conference on the Theory and Applications of Cryptographic Techniques. SpringerM. Ball, D. Dachman-Soled, M. Kulkarni, and T. Malkin, \"Non-malleable codes from average-case hardness: Decision trees, and streaming space-bounded tampering,\" in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2018, pp. 618-650.\n\nNon-malleable codes for small-depth circuits. M Ball, D Dachman-Soled, S Guo, T Malkin, L.-Y. Tan, 2018 IEEE 59th Annual Symposium on Foundations of Computer Science (FOCS). IEEEM. Ball, D. Dachman-Soled, S. Guo, T. Malkin, and L.-Y. Tan, \"Non-malleable codes for small-depth circuits,\" in 2018 IEEE 59th Annual Symposium on Foundations of Computer Science (FOCS). IEEE, 2018, pp. 826-837.\n\nNonmalleable cryptography. D Dolev, C Dwork, M Naor, SIAM. 30D. Dolev, C. Dwork, and M. Naor, \"Nonmalleable cryptog- raphy,\" SIAM, vol. 30, pp. 391-437, 2000.\n\nNon-malleable extractors and symmetric key cryptography from weak secrets. Y Dodis, D Wichs, Proceedings of the 41st Annual ACM Symposium on Theory of Computing, M. Mitzenmacher. the 41st Annual ACM Symposium on Theory of Computing, M. MitzenmacherEd. Bethesda, MD, USAACMY. Dodis and D. Wichs, \"Non-malleable extractors and sym- metric key cryptography from weak secrets,\" in Proceedings of the 41st Annual ACM Symposium on Theory of Computing, M. Mitzenmacher, Ed. Bethesda, MD, USA: ACM, 2009, pp. 601-610.\n\nPrivate circuits: Securing hardware against probing attacks. Y Ishai, A Sahai, D Wagner, Advances in Cryptology-CRYPTO 2003, ser. LNCS, D. Boneh. Springer-Verlag2729Y. Ishai, A. Sahai, and D. Wagner, \"Private circuits: Se- curing hardware against probing attacks,\" in Advances in Cryptology-CRYPTO 2003, ser. LNCS, D. Boneh, Ed., vol. 2729. Springer-Verlag, 2003.\n\nAlgorithmic Tamper-Proof (ATP) security: Theoretical foundations for security against hardware tampering. R Gennaro, A Lysyanskaya, T Malkin, S Micali, T Rabin, First Theory of Cryptography Conference -TCC 2004, ser. LNCS, M. Naor. Springer-Verlag2951R. Gennaro, A. Lysyanskaya, T. Malkin, S. Micali, and T. Ra- bin, \"Algorithmic Tamper-Proof (ATP) security: Theoretical foundations for security against hardware tampering,\" in First Theory of Cryptography Conference -TCC 2004, ser. LNCS, M. Naor, Ed., vol. 2951. Springer-Verlag, Feb. 19-21 2003, pp. 258-277.\n\nPrivate circuits II: Keeping secrets in tamperable circuits. Y Ishai, M Prabhakaran, A Sahai, D Wagner, Advances in Cryptology-EUROCRYPT 2006, ser. LNCS, S. Vaudenay. Springer-Verlag4004Y. Ishai, M. Prabhakaran, A. Sahai, and D. Wagner, \"Pri- vate circuits II: Keeping secrets in tamperable circuits,\" in Advances in Cryptology-EUROCRYPT 2006, ser. LNCS, S. Vaudenay, Ed., vol. 4004. Springer-Verlag, 2006, pp. 308-327.\n\nCryptography with tamperable and leaky memory. Y T Kalai, B Kanukurthi, A Sahai, Advances in Cryptology-CRYPTO 2011. SpringerY. T. Kalai, B. Kanukurthi, and A. Sahai, \"Cryptography with tamperable and leaky memory,\" in Advances in Cryptology- CRYPTO 2011. Springer, 2011, pp. 373-390.\n", "annotations": {"author": "[{\"end\":246,\"start\":63},{\"end\":454,\"start\":247},{\"end\":246,\"start\":63},{\"end\":454,\"start\":247}]", "publisher": null, "author_last_name": "[{\"end\":78,\"start\":70},{\"end\":262,\"start\":254},{\"end\":78,\"start\":70},{\"end\":262,\"start\":254}]", "author_first_name": "[{\"end\":69,\"start\":63},{\"end\":253,\"start\":247},{\"end\":69,\"start\":63},{\"end\":253,\"start\":247}]", "author_affiliation": "[{\"end\":245,\"start\":80},{\"end\":453,\"start\":288},{\"end\":245,\"start\":80},{\"end\":453,\"start\":288}]", "title": "[{\"end\":60,\"start\":1},{\"end\":514,\"start\":455},{\"end\":60,\"start\":1},{\"end\":514,\"start\":455}]", "venue": null, "abstract": "[{\"end\":1844,\"start\":592},{\"end\":1844,\"start\":592}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1933,\"start\":1930},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2808,\"start\":2805},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3629,\"start\":3626},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4308,\"start\":4305},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4313,\"start\":4310},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4318,\"start\":4315},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4323,\"start\":4320},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4328,\"start\":4325},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4333,\"start\":4330},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4338,\"start\":4335},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4343,\"start\":4340},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4348,\"start\":4345},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":4354,\"start\":4350},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":4400,\"start\":4396},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4406,\"start\":4402},{\"end\":4412,\"start\":4408},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4418,\"start\":4414},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4424,\"start\":4420},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4430,\"start\":4426},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4762,\"start\":4759},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4864,\"start\":4861},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4869,\"start\":4866},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4875,\"start\":4871},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5047,\"start\":5044},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5199,\"start\":5196},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":5423,\"start\":5419},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5443,\"start\":5440},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5448,\"start\":5445},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5454,\"start\":5450},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5568,\"start\":5564},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5921,\"start\":5917},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":7295,\"start\":7291},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":7301,\"start\":7297},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":7307,\"start\":7303},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7313,\"start\":7309},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":7427,\"start\":7423},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":7605,\"start\":7601},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7684,\"start\":7680},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7971,\"start\":7967},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":7977,\"start\":7973},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7980,\"start\":7979},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8007,\"start\":8003},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":8099,\"start\":8096},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":8345,\"start\":8341},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":8351,\"start\":8347},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8357,\"start\":8353},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8363,\"start\":8359},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":8369,\"start\":8365},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":8375,\"start\":8371},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":8381,\"start\":8377},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":8387,\"start\":8383},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":8393,\"start\":8389},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":8399,\"start\":8395},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":8616,\"start\":8612},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":9055,\"start\":9051},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":9392,\"start\":9388},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":9398,\"start\":9394},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":9404,\"start\":9400},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":9513,\"start\":9509},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9518,\"start\":9515},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9885,\"start\":9882},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10473,\"start\":10469},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":11314,\"start\":11310},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":12566,\"start\":12562},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13392,\"start\":13389},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":13537,\"start\":13533},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13711,\"start\":13708},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13826,\"start\":13823},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15394,\"start\":15391},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16259,\"start\":16256},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20803,\"start\":20800},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":21278,\"start\":21275},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24058,\"start\":24054},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":24133,\"start\":24130},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24264,\"start\":24260},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":25299,\"start\":25295},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26090,\"start\":26087},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26095,\"start\":26092},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26101,\"start\":26097},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26188,\"start\":26185},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26193,\"start\":26190},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26199,\"start\":26195},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26498,\"start\":26495},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26503,\"start\":26500},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26509,\"start\":26505},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30040,\"start\":30039},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":30431,\"start\":30430},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":34459,\"start\":34455},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":34737,\"start\":34734},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":34745,\"start\":34741},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":34747,\"start\":34746},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":35185,\"start\":35182},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":35189,\"start\":35186},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":35194,\"start\":35190},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1933,\"start\":1930},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2808,\"start\":2805},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3629,\"start\":3626},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4308,\"start\":4305},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4313,\"start\":4310},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4318,\"start\":4315},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4323,\"start\":4320},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4328,\"start\":4325},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4333,\"start\":4330},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4338,\"start\":4335},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4343,\"start\":4340},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4348,\"start\":4345},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":4354,\"start\":4350},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":4400,\"start\":4396},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4406,\"start\":4402},{\"end\":4412,\"start\":4408},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4418,\"start\":4414},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4424,\"start\":4420},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4430,\"start\":4426},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4762,\"start\":4759},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4864,\"start\":4861},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4869,\"start\":4866},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4875,\"start\":4871},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5047,\"start\":5044},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5199,\"start\":5196},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":5423,\"start\":5419},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5443,\"start\":5440},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5448,\"start\":5445},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5454,\"start\":5450},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5568,\"start\":5564},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5921,\"start\":5917},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":7295,\"start\":7291},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":7301,\"start\":7297},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":7307,\"start\":7303},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7313,\"start\":7309},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":7427,\"start\":7423},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":7605,\"start\":7601},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7684,\"start\":7680},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7971,\"start\":7967},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":7977,\"start\":7973},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7980,\"start\":7979},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8007,\"start\":8003},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":8099,\"start\":8096},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":8345,\"start\":8341},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":8351,\"start\":8347},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8357,\"start\":8353},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8363,\"start\":8359},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":8369,\"start\":8365},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":8375,\"start\":8371},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":8381,\"start\":8377},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":8387,\"start\":8383},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":8393,\"start\":8389},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":8399,\"start\":8395},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":8616,\"start\":8612},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":9055,\"start\":9051},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":9392,\"start\":9388},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":9398,\"start\":9394},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":9404,\"start\":9400},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":9513,\"start\":9509},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9518,\"start\":9515},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9885,\"start\":9882},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10473,\"start\":10469},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":11314,\"start\":11310},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":12566,\"start\":12562},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13392,\"start\":13389},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":13537,\"start\":13533},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13711,\"start\":13708},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13826,\"start\":13823},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":15394,\"start\":15391},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16259,\"start\":16256},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20803,\"start\":20800},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":21278,\"start\":21275},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24058,\"start\":24054},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":24133,\"start\":24130},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24264,\"start\":24260},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":25299,\"start\":25295},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26090,\"start\":26087},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26095,\"start\":26092},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26101,\"start\":26097},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26188,\"start\":26185},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26193,\"start\":26190},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26199,\"start\":26195},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26498,\"start\":26495},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26503,\"start\":26500},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26509,\"start\":26505},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30040,\"start\":30039},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":30431,\"start\":30430},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":34459,\"start\":34455},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":34737,\"start\":34734},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":34745,\"start\":34741},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":34747,\"start\":34746},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":35185,\"start\":35182},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":35189,\"start\":35186},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":35194,\"start\":35190}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":30969,\"start\":30898},{\"attributes\":{\"id\":\"fig_1\"},\"end\":31056,\"start\":30970},{\"attributes\":{\"id\":\"fig_2\"},\"end\":31484,\"start\":31057},{\"attributes\":{\"id\":\"fig_3\"},\"end\":31652,\"start\":31485},{\"attributes\":{\"id\":\"fig_4\"},\"end\":31790,\"start\":31653},{\"attributes\":{\"id\":\"fig_5\"},\"end\":33025,\"start\":31791},{\"attributes\":{\"id\":\"fig_6\"},\"end\":33286,\"start\":33026},{\"attributes\":{\"id\":\"fig_7\"},\"end\":33597,\"start\":33287},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":33938,\"start\":33598},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":34594,\"start\":33939},{\"attributes\":{\"id\":\"fig_0\"},\"end\":30969,\"start\":30898},{\"attributes\":{\"id\":\"fig_1\"},\"end\":31056,\"start\":30970},{\"attributes\":{\"id\":\"fig_2\"},\"end\":31484,\"start\":31057},{\"attributes\":{\"id\":\"fig_3\"},\"end\":31652,\"start\":31485},{\"attributes\":{\"id\":\"fig_4\"},\"end\":31790,\"start\":31653},{\"attributes\":{\"id\":\"fig_5\"},\"end\":33025,\"start\":31791},{\"attributes\":{\"id\":\"fig_6\"},\"end\":33286,\"start\":33026},{\"attributes\":{\"id\":\"fig_7\"},\"end\":33597,\"start\":33287},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":33938,\"start\":33598},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":34594,\"start\":33939}]", "paragraph": "[{\"end\":3503,\"start\":1863},{\"end\":4593,\"start\":3505},{\"end\":5191,\"start\":4595},{\"end\":6114,\"start\":5193},{\"end\":6305,\"start\":6116},{\"end\":6401,\"start\":6307},{\"end\":6621,\"start\":6432},{\"end\":7029,\"start\":6623},{\"end\":7523,\"start\":7031},{\"end\":7845,\"start\":7525},{\"end\":8272,\"start\":7847},{\"end\":8539,\"start\":8274},{\"end\":9174,\"start\":8541},{\"end\":9570,\"start\":9176},{\"end\":10386,\"start\":9572},{\"end\":10980,\"start\":10466},{\"end\":11516,\"start\":10982},{\"end\":11609,\"start\":11552},{\"end\":12234,\"start\":11611},{\"end\":12308,\"start\":12252},{\"end\":12427,\"start\":12341},{\"end\":13180,\"start\":12498},{\"end\":13468,\"start\":13304},{\"end\":13780,\"start\":13473},{\"end\":15049,\"start\":13782},{\"end\":15350,\"start\":15127},{\"end\":15830,\"start\":15352},{\"end\":16173,\"start\":15863},{\"end\":16886,\"start\":16175},{\"end\":18240,\"start\":16888},{\"end\":19718,\"start\":18277},{\"end\":19876,\"start\":19720},{\"end\":20773,\"start\":19928},{\"end\":21218,\"start\":20775},{\"end\":21512,\"start\":21220},{\"end\":23570,\"start\":21564},{\"end\":23949,\"start\":23572},{\"end\":24266,\"start\":24038},{\"end\":24382,\"start\":24296},{\"end\":24444,\"start\":24384},{\"end\":24700,\"start\":24446},{\"end\":24858,\"start\":24702},{\"end\":25027,\"start\":24860},{\"end\":25182,\"start\":25062},{\"end\":25473,\"start\":25184},{\"end\":25806,\"start\":25563},{\"end\":25888,\"start\":25836},{\"end\":26015,\"start\":25907},{\"end\":26584,\"start\":26082},{\"end\":27041,\"start\":26586},{\"end\":27593,\"start\":27043},{\"end\":27754,\"start\":27595},{\"end\":27911,\"start\":27818},{\"end\":27964,\"start\":27913},{\"end\":28012,\"start\":27966},{\"end\":28356,\"start\":28276},{\"end\":28420,\"start\":28411},{\"end\":29035,\"start\":28654},{\"end\":29625,\"start\":29037},{\"end\":30147,\"start\":29627},{\"end\":30260,\"start\":30149},{\"end\":30309,\"start\":30262},{\"end\":30799,\"start\":30311},{\"end\":30897,\"start\":30801},{\"end\":3503,\"start\":1863},{\"end\":4593,\"start\":3505},{\"end\":5191,\"start\":4595},{\"end\":6114,\"start\":5193},{\"end\":6305,\"start\":6116},{\"end\":6401,\"start\":6307},{\"end\":6621,\"start\":6432},{\"end\":7029,\"start\":6623},{\"end\":7523,\"start\":7031},{\"end\":7845,\"start\":7525},{\"end\":8272,\"start\":7847},{\"end\":8539,\"start\":8274},{\"end\":9174,\"start\":8541},{\"end\":9570,\"start\":9176},{\"end\":10386,\"start\":9572},{\"end\":10980,\"start\":10466},{\"end\":11516,\"start\":10982},{\"end\":11609,\"start\":11552},{\"end\":12234,\"start\":11611},{\"end\":12308,\"start\":12252},{\"end\":12427,\"start\":12341},{\"end\":13180,\"start\":12498},{\"end\":13468,\"start\":13304},{\"end\":13780,\"start\":13473},{\"end\":15049,\"start\":13782},{\"end\":15350,\"start\":15127},{\"end\":15830,\"start\":15352},{\"end\":16173,\"start\":15863},{\"end\":16886,\"start\":16175},{\"end\":18240,\"start\":16888},{\"end\":19718,\"start\":18277},{\"end\":19876,\"start\":19720},{\"end\":20773,\"start\":19928},{\"end\":21218,\"start\":20775},{\"end\":21512,\"start\":21220},{\"end\":23570,\"start\":21564},{\"end\":23949,\"start\":23572},{\"end\":24266,\"start\":24038},{\"end\":24382,\"start\":24296},{\"end\":24444,\"start\":24384},{\"end\":24700,\"start\":24446},{\"end\":24858,\"start\":24702},{\"end\":25027,\"start\":24860},{\"end\":25182,\"start\":25062},{\"end\":25473,\"start\":25184},{\"end\":25806,\"start\":25563},{\"end\":25888,\"start\":25836},{\"end\":26015,\"start\":25907},{\"end\":26584,\"start\":26082},{\"end\":27041,\"start\":26586},{\"end\":27593,\"start\":27043},{\"end\":27754,\"start\":27595},{\"end\":27911,\"start\":27818},{\"end\":27964,\"start\":27913},{\"end\":28012,\"start\":27966},{\"end\":28356,\"start\":28276},{\"end\":28420,\"start\":28411},{\"end\":29035,\"start\":28654},{\"end\":29625,\"start\":29037},{\"end\":30147,\"start\":29627},{\"end\":30260,\"start\":30149},{\"end\":30309,\"start\":30262},{\"end\":30799,\"start\":30311},{\"end\":30897,\"start\":30801}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":12251,\"start\":12235},{\"attributes\":{\"id\":\"formula_1\"},\"end\":12340,\"start\":12309},{\"attributes\":{\"id\":\"formula_2\"},\"end\":12497,\"start\":12428},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13233,\"start\":13181},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13472,\"start\":13469},{\"attributes\":{\"id\":\"formula_5\"},\"end\":18276,\"start\":18241},{\"attributes\":{\"id\":\"formula_6\"},\"end\":24295,\"start\":24267},{\"attributes\":{\"id\":\"formula_7\"},\"end\":25061,\"start\":25028},{\"attributes\":{\"id\":\"formula_8\"},\"end\":25562,\"start\":25474},{\"attributes\":{\"id\":\"formula_9\"},\"end\":25835,\"start\":25807},{\"attributes\":{\"id\":\"formula_10\"},\"end\":25906,\"start\":25889},{\"attributes\":{\"id\":\"formula_11\"},\"end\":26039,\"start\":26016},{\"attributes\":{\"id\":\"formula_12\"},\"end\":27800,\"start\":27755},{\"attributes\":{\"id\":\"formula_13\"},\"end\":28275,\"start\":28013},{\"attributes\":{\"id\":\"formula_14\"},\"end\":28410,\"start\":28357},{\"attributes\":{\"id\":\"formula_15\"},\"end\":28653,\"start\":28421},{\"attributes\":{\"id\":\"formula_0\"},\"end\":12251,\"start\":12235},{\"attributes\":{\"id\":\"formula_1\"},\"end\":12340,\"start\":12309},{\"attributes\":{\"id\":\"formula_2\"},\"end\":12497,\"start\":12428},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13233,\"start\":13181},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13472,\"start\":13469},{\"attributes\":{\"id\":\"formula_5\"},\"end\":18276,\"start\":18241},{\"attributes\":{\"id\":\"formula_6\"},\"end\":24295,\"start\":24267},{\"attributes\":{\"id\":\"formula_7\"},\"end\":25061,\"start\":25028},{\"attributes\":{\"id\":\"formula_8\"},\"end\":25562,\"start\":25474},{\"attributes\":{\"id\":\"formula_9\"},\"end\":25835,\"start\":25807},{\"attributes\":{\"id\":\"formula_10\"},\"end\":25906,\"start\":25889},{\"attributes\":{\"id\":\"formula_11\"},\"end\":26039,\"start\":26016},{\"attributes\":{\"id\":\"formula_12\"},\"end\":27800,\"start\":27755},{\"attributes\":{\"id\":\"formula_13\"},\"end\":28275,\"start\":28013},{\"attributes\":{\"id\":\"formula_14\"},\"end\":28410,\"start\":28357},{\"attributes\":{\"id\":\"formula_15\"},\"end\":28653,\"start\":28421}]", "table_ref": null, "section_header": "[{\"end\":1861,\"start\":1846},{\"end\":6430,\"start\":6404},{\"end\":10464,\"start\":10389},{\"end\":11550,\"start\":11519},{\"end\":13302,\"start\":13235},{\"end\":15125,\"start\":15052},{\"end\":15861,\"start\":15833},{\"end\":19926,\"start\":19879},{\"end\":21562,\"start\":21515},{\"end\":24036,\"start\":23952},{\"end\":26080,\"start\":26041},{\"end\":27816,\"start\":27802},{\"end\":30909,\"start\":30899},{\"end\":30981,\"start\":30971},{\"end\":31505,\"start\":31486},{\"end\":31672,\"start\":31654},{\"end\":1861,\"start\":1846},{\"end\":6430,\"start\":6404},{\"end\":10464,\"start\":10389},{\"end\":11550,\"start\":11519},{\"end\":13302,\"start\":13235},{\"end\":15125,\"start\":15052},{\"end\":15861,\"start\":15833},{\"end\":19926,\"start\":19879},{\"end\":21562,\"start\":21515},{\"end\":24036,\"start\":23952},{\"end\":26080,\"start\":26041},{\"end\":27816,\"start\":27802},{\"end\":30909,\"start\":30899},{\"end\":30981,\"start\":30971},{\"end\":31505,\"start\":31486},{\"end\":31672,\"start\":31654}]", "table": "[{\"end\":34594,\"start\":34519},{\"end\":34594,\"start\":34519}]", "figure_caption": "[{\"end\":30969,\"start\":30911},{\"end\":31056,\"start\":30983},{\"end\":31484,\"start\":31059},{\"end\":31652,\"start\":31508},{\"end\":31790,\"start\":31675},{\"end\":33025,\"start\":31793},{\"end\":33286,\"start\":33028},{\"end\":33597,\"start\":33289},{\"end\":33938,\"start\":33600},{\"end\":34519,\"start\":33941},{\"end\":30969,\"start\":30911},{\"end\":31056,\"start\":30983},{\"end\":31484,\"start\":31059},{\"end\":31652,\"start\":31508},{\"end\":31790,\"start\":31675},{\"end\":33025,\"start\":31793},{\"end\":33286,\"start\":33028},{\"end\":33597,\"start\":33289},{\"end\":33938,\"start\":33600},{\"end\":34519,\"start\":33941}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15323,\"start\":15315},{\"end\":19230,\"start\":19224},{\"end\":21348,\"start\":21326},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23523,\"start\":23515},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27862,\"start\":27854},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":30214,\"start\":30206},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":15323,\"start\":15315},{\"end\":19230,\"start\":19224},{\"end\":21348,\"start\":21326},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23523,\"start\":23515},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":27862,\"start\":27854},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":30214,\"start\":30206}]", "bib_author_first_name": "[{\"end\":40225,\"start\":40224},{\"end\":40240,\"start\":40239},{\"end\":40252,\"start\":40251},{\"end\":40472,\"start\":40468},{\"end\":40479,\"start\":40478},{\"end\":40745,\"start\":40744},{\"end\":40760,\"start\":40759},{\"end\":40770,\"start\":40769},{\"end\":41026,\"start\":41025},{\"end\":41038,\"start\":41037},{\"end\":41047,\"start\":41046},{\"end\":41208,\"start\":41207},{\"end\":41222,\"start\":41221},{\"end\":41517,\"start\":41516},{\"end\":41752,\"start\":41751},{\"end\":41769,\"start\":41768},{\"end\":41778,\"start\":41777},{\"end\":42233,\"start\":42232},{\"end\":42806,\"start\":42805},{\"end\":42815,\"start\":42814},{\"end\":42825,\"start\":42824},{\"end\":43332,\"start\":43331},{\"end\":43341,\"start\":43340},{\"end\":44522,\"start\":44521},{\"end\":44534,\"start\":44533},{\"end\":44545,\"start\":44544},{\"end\":44547,\"start\":44546},{\"end\":44558,\"start\":44557},{\"end\":44570,\"start\":44569},{\"end\":44582,\"start\":44581},{\"end\":44593,\"start\":44592},{\"end\":44938,\"start\":44937},{\"end\":44956,\"start\":44955},{\"end\":45201,\"start\":45200},{\"end\":45215,\"start\":45214},{\"end\":45217,\"start\":45216},{\"end\":45516,\"start\":45515},{\"end\":45528,\"start\":45527},{\"end\":45869,\"start\":45868},{\"end\":45884,\"start\":45883},{\"end\":46201,\"start\":46200},{\"end\":46213,\"start\":46212},{\"end\":46222,\"start\":46221},{\"end\":46232,\"start\":46231},{\"end\":46732,\"start\":46731},{\"end\":46749,\"start\":46748},{\"end\":46957,\"start\":46956},{\"end\":46971,\"start\":46970},{\"end\":46975,\"start\":46972},{\"end\":46986,\"start\":46985},{\"end\":47461,\"start\":47460},{\"end\":47470,\"start\":47469},{\"end\":47472,\"start\":47471},{\"end\":47480,\"start\":47479},{\"end\":47791,\"start\":47790},{\"end\":47803,\"start\":47802},{\"end\":47814,\"start\":47813},{\"end\":47823,\"start\":47822},{\"end\":47825,\"start\":47824},{\"end\":47833,\"start\":47832},{\"end\":47843,\"start\":47842},{\"end\":48137,\"start\":48136},{\"end\":48146,\"start\":48145},{\"end\":48159,\"start\":48158},{\"end\":48170,\"start\":48169},{\"end\":48416,\"start\":48415},{\"end\":48428,\"start\":48427},{\"end\":48443,\"start\":48442},{\"end\":48453,\"start\":48452},{\"end\":48861,\"start\":48860},{\"end\":48873,\"start\":48872},{\"end\":48883,\"start\":48882},{\"end\":49153,\"start\":49152},{\"end\":49165,\"start\":49164},{\"end\":49177,\"start\":49176},{\"end\":49179,\"start\":49178},{\"end\":49190,\"start\":49189},{\"end\":49202,\"start\":49201},{\"end\":49495,\"start\":49494},{\"end\":49507,\"start\":49506},{\"end\":49516,\"start\":49515},{\"end\":49525,\"start\":49524},{\"end\":49827,\"start\":49826},{\"end\":49839,\"start\":49838},{\"end\":49848,\"start\":49847},{\"end\":50202,\"start\":50201},{\"end\":50204,\"start\":50203},{\"end\":50212,\"start\":50211},{\"end\":50223,\"start\":50222},{\"end\":50510,\"start\":50509},{\"end\":50519,\"start\":50518},{\"end\":50532,\"start\":50531},{\"end\":50543,\"start\":50542},{\"end\":50833,\"start\":50832},{\"end\":50844,\"start\":50843},{\"end\":50853,\"start\":50852},{\"end\":50855,\"start\":50854},{\"end\":50863,\"start\":50862},{\"end\":50873,\"start\":50872},{\"end\":51652,\"start\":51651},{\"end\":51660,\"start\":51659},{\"end\":51677,\"start\":51676},{\"end\":51689,\"start\":51688},{\"end\":52093,\"start\":52092},{\"end\":52102,\"start\":52101},{\"end\":52115,\"start\":52114},{\"end\":52128,\"start\":52127},{\"end\":52476,\"start\":52475},{\"end\":52484,\"start\":52483},{\"end\":52501,\"start\":52500},{\"end\":52513,\"start\":52512},{\"end\":52954,\"start\":52953},{\"end\":52962,\"start\":52961},{\"end\":52979,\"start\":52978},{\"end\":52986,\"start\":52985},{\"end\":53000,\"start\":52995},{\"end\":53326,\"start\":53325},{\"end\":53335,\"start\":53334},{\"end\":53344,\"start\":53343},{\"end\":53534,\"start\":53533},{\"end\":53543,\"start\":53542},{\"end\":54031,\"start\":54030},{\"end\":54040,\"start\":54039},{\"end\":54049,\"start\":54048},{\"end\":54441,\"start\":54440},{\"end\":54452,\"start\":54451},{\"end\":54467,\"start\":54466},{\"end\":54477,\"start\":54476},{\"end\":54487,\"start\":54486},{\"end\":54959,\"start\":54958},{\"end\":54968,\"start\":54967},{\"end\":54983,\"start\":54982},{\"end\":54992,\"start\":54991},{\"end\":55366,\"start\":55365},{\"end\":55368,\"start\":55367},{\"end\":55377,\"start\":55376},{\"end\":55391,\"start\":55390},{\"end\":40225,\"start\":40224},{\"end\":40240,\"start\":40239},{\"end\":40252,\"start\":40251},{\"end\":40472,\"start\":40468},{\"end\":40479,\"start\":40478},{\"end\":40745,\"start\":40744},{\"end\":40760,\"start\":40759},{\"end\":40770,\"start\":40769},{\"end\":41026,\"start\":41025},{\"end\":41038,\"start\":41037},{\"end\":41047,\"start\":41046},{\"end\":41208,\"start\":41207},{\"end\":41222,\"start\":41221},{\"end\":41517,\"start\":41516},{\"end\":41752,\"start\":41751},{\"end\":41769,\"start\":41768},{\"end\":41778,\"start\":41777},{\"end\":42233,\"start\":42232},{\"end\":42806,\"start\":42805},{\"end\":42815,\"start\":42814},{\"end\":42825,\"start\":42824},{\"end\":43332,\"start\":43331},{\"end\":43341,\"start\":43340},{\"end\":44522,\"start\":44521},{\"end\":44534,\"start\":44533},{\"end\":44545,\"start\":44544},{\"end\":44547,\"start\":44546},{\"end\":44558,\"start\":44557},{\"end\":44570,\"start\":44569},{\"end\":44582,\"start\":44581},{\"end\":44593,\"start\":44592},{\"end\":44938,\"start\":44937},{\"end\":44956,\"start\":44955},{\"end\":45201,\"start\":45200},{\"end\":45215,\"start\":45214},{\"end\":45217,\"start\":45216},{\"end\":45516,\"start\":45515},{\"end\":45528,\"start\":45527},{\"end\":45869,\"start\":45868},{\"end\":45884,\"start\":45883},{\"end\":46201,\"start\":46200},{\"end\":46213,\"start\":46212},{\"end\":46222,\"start\":46221},{\"end\":46232,\"start\":46231},{\"end\":46732,\"start\":46731},{\"end\":46749,\"start\":46748},{\"end\":46957,\"start\":46956},{\"end\":46971,\"start\":46970},{\"end\":46975,\"start\":46972},{\"end\":46986,\"start\":46985},{\"end\":47461,\"start\":47460},{\"end\":47470,\"start\":47469},{\"end\":47472,\"start\":47471},{\"end\":47480,\"start\":47479},{\"end\":47791,\"start\":47790},{\"end\":47803,\"start\":47802},{\"end\":47814,\"start\":47813},{\"end\":47823,\"start\":47822},{\"end\":47825,\"start\":47824},{\"end\":47833,\"start\":47832},{\"end\":47843,\"start\":47842},{\"end\":48137,\"start\":48136},{\"end\":48146,\"start\":48145},{\"end\":48159,\"start\":48158},{\"end\":48170,\"start\":48169},{\"end\":48416,\"start\":48415},{\"end\":48428,\"start\":48427},{\"end\":48443,\"start\":48442},{\"end\":48453,\"start\":48452},{\"end\":48861,\"start\":48860},{\"end\":48873,\"start\":48872},{\"end\":48883,\"start\":48882},{\"end\":49153,\"start\":49152},{\"end\":49165,\"start\":49164},{\"end\":49177,\"start\":49176},{\"end\":49179,\"start\":49178},{\"end\":49190,\"start\":49189},{\"end\":49202,\"start\":49201},{\"end\":49495,\"start\":49494},{\"end\":49507,\"start\":49506},{\"end\":49516,\"start\":49515},{\"end\":49525,\"start\":49524},{\"end\":49827,\"start\":49826},{\"end\":49839,\"start\":49838},{\"end\":49848,\"start\":49847},{\"end\":50202,\"start\":50201},{\"end\":50204,\"start\":50203},{\"end\":50212,\"start\":50211},{\"end\":50223,\"start\":50222},{\"end\":50510,\"start\":50509},{\"end\":50519,\"start\":50518},{\"end\":50532,\"start\":50531},{\"end\":50543,\"start\":50542},{\"end\":50833,\"start\":50832},{\"end\":50844,\"start\":50843},{\"end\":50853,\"start\":50852},{\"end\":50855,\"start\":50854},{\"end\":50863,\"start\":50862},{\"end\":50873,\"start\":50872},{\"end\":51652,\"start\":51651},{\"end\":51660,\"start\":51659},{\"end\":51677,\"start\":51676},{\"end\":51689,\"start\":51688},{\"end\":52093,\"start\":52092},{\"end\":52102,\"start\":52101},{\"end\":52115,\"start\":52114},{\"end\":52128,\"start\":52127},{\"end\":52476,\"start\":52475},{\"end\":52484,\"start\":52483},{\"end\":52501,\"start\":52500},{\"end\":52513,\"start\":52512},{\"end\":52954,\"start\":52953},{\"end\":52962,\"start\":52961},{\"end\":52979,\"start\":52978},{\"end\":52986,\"start\":52985},{\"end\":53000,\"start\":52995},{\"end\":53326,\"start\":53325},{\"end\":53335,\"start\":53334},{\"end\":53344,\"start\":53343},{\"end\":53534,\"start\":53533},{\"end\":53543,\"start\":53542},{\"end\":54031,\"start\":54030},{\"end\":54040,\"start\":54039},{\"end\":54049,\"start\":54048},{\"end\":54441,\"start\":54440},{\"end\":54452,\"start\":54451},{\"end\":54467,\"start\":54466},{\"end\":54477,\"start\":54476},{\"end\":54487,\"start\":54486},{\"end\":54959,\"start\":54958},{\"end\":54968,\"start\":54967},{\"end\":54983,\"start\":54982},{\"end\":54992,\"start\":54991},{\"end\":55366,\"start\":55365},{\"end\":55368,\"start\":55367},{\"end\":55377,\"start\":55376},{\"end\":55391,\"start\":55390}]", "bib_author_last_name": "[{\"end\":40237,\"start\":40226},{\"end\":40249,\"start\":40241},{\"end\":40258,\"start\":40253},{\"end\":40476,\"start\":40473},{\"end\":40491,\"start\":40480},{\"end\":40757,\"start\":40746},{\"end\":40767,\"start\":40761},{\"end\":40779,\"start\":40771},{\"end\":41035,\"start\":41027},{\"end\":41044,\"start\":41039},{\"end\":41054,\"start\":41048},{\"end\":41219,\"start\":41209},{\"end\":41232,\"start\":41223},{\"end\":41766,\"start\":41753},{\"end\":41775,\"start\":41770},{\"end\":41781,\"start\":41779},{\"end\":42236,\"start\":42234},{\"end\":42812,\"start\":42807},{\"end\":42822,\"start\":42816},{\"end\":42835,\"start\":42826},{\"end\":43338,\"start\":43333},{\"end\":43347,\"start\":43342},{\"end\":44531,\"start\":44523},{\"end\":44542,\"start\":44535},{\"end\":44555,\"start\":44548},{\"end\":44567,\"start\":44559},{\"end\":44579,\"start\":44571},{\"end\":44590,\"start\":44583},{\"end\":44600,\"start\":44594},{\"end\":44953,\"start\":44939},{\"end\":44967,\"start\":44957},{\"end\":45212,\"start\":45202},{\"end\":45227,\"start\":45218},{\"end\":45525,\"start\":45517},{\"end\":45534,\"start\":45529},{\"end\":45881,\"start\":45870},{\"end\":45893,\"start\":45885},{\"end\":46210,\"start\":46202},{\"end\":46219,\"start\":46214},{\"end\":46229,\"start\":46223},{\"end\":46241,\"start\":46233},{\"end\":46746,\"start\":46733},{\"end\":46759,\"start\":46750},{\"end\":46968,\"start\":46958},{\"end\":46983,\"start\":46976},{\"end\":46992,\"start\":46987},{\"end\":47467,\"start\":47462},{\"end\":47477,\"start\":47473},{\"end\":47485,\"start\":47481},{\"end\":47800,\"start\":47792},{\"end\":47811,\"start\":47804},{\"end\":47820,\"start\":47815},{\"end\":47830,\"start\":47826},{\"end\":47840,\"start\":47834},{\"end\":47855,\"start\":47844},{\"end\":48143,\"start\":48138},{\"end\":48156,\"start\":48147},{\"end\":48167,\"start\":48160},{\"end\":48178,\"start\":48171},{\"end\":48425,\"start\":48417},{\"end\":48440,\"start\":48429},{\"end\":48450,\"start\":48444},{\"end\":48462,\"start\":48454},{\"end\":48870,\"start\":48862},{\"end\":48880,\"start\":48874},{\"end\":48892,\"start\":48884},{\"end\":49162,\"start\":49154},{\"end\":49174,\"start\":49166},{\"end\":49187,\"start\":49180},{\"end\":49199,\"start\":49191},{\"end\":49211,\"start\":49203},{\"end\":49504,\"start\":49496},{\"end\":49513,\"start\":49508},{\"end\":49522,\"start\":49517},{\"end\":49531,\"start\":49526},{\"end\":49836,\"start\":49828},{\"end\":49845,\"start\":49840},{\"end\":49854,\"start\":49849},{\"end\":50209,\"start\":50205},{\"end\":50220,\"start\":50213},{\"end\":50230,\"start\":50224},{\"end\":50516,\"start\":50511},{\"end\":50529,\"start\":50520},{\"end\":50540,\"start\":50533},{\"end\":50549,\"start\":50544},{\"end\":50841,\"start\":50834},{\"end\":50850,\"start\":50845},{\"end\":50860,\"start\":50856},{\"end\":50870,\"start\":50864},{\"end\":50885,\"start\":50874},{\"end\":51657,\"start\":51653},{\"end\":51674,\"start\":51661},{\"end\":51686,\"start\":51678},{\"end\":51696,\"start\":51690},{\"end\":52099,\"start\":52094},{\"end\":52112,\"start\":52103},{\"end\":52125,\"start\":52116},{\"end\":52136,\"start\":52129},{\"end\":52481,\"start\":52477},{\"end\":52498,\"start\":52485},{\"end\":52510,\"start\":52502},{\"end\":52520,\"start\":52514},{\"end\":52959,\"start\":52955},{\"end\":52976,\"start\":52963},{\"end\":52983,\"start\":52980},{\"end\":52993,\"start\":52987},{\"end\":53004,\"start\":53001},{\"end\":53332,\"start\":53327},{\"end\":53341,\"start\":53336},{\"end\":53349,\"start\":53345},{\"end\":53540,\"start\":53535},{\"end\":53549,\"start\":53544},{\"end\":54037,\"start\":54032},{\"end\":54046,\"start\":54041},{\"end\":54056,\"start\":54050},{\"end\":54449,\"start\":54442},{\"end\":54464,\"start\":54453},{\"end\":54474,\"start\":54468},{\"end\":54484,\"start\":54478},{\"end\":54493,\"start\":54488},{\"end\":54965,\"start\":54960},{\"end\":54980,\"start\":54969},{\"end\":54989,\"start\":54984},{\"end\":54999,\"start\":54993},{\"end\":55374,\"start\":55369},{\"end\":55388,\"start\":55378},{\"end\":55397,\"start\":55392},{\"end\":40237,\"start\":40226},{\"end\":40249,\"start\":40241},{\"end\":40258,\"start\":40253},{\"end\":40476,\"start\":40473},{\"end\":40491,\"start\":40480},{\"end\":40757,\"start\":40746},{\"end\":40767,\"start\":40761},{\"end\":40779,\"start\":40771},{\"end\":41035,\"start\":41027},{\"end\":41044,\"start\":41039},{\"end\":41054,\"start\":41048},{\"end\":41219,\"start\":41209},{\"end\":41232,\"start\":41223},{\"end\":41766,\"start\":41753},{\"end\":41775,\"start\":41770},{\"end\":41781,\"start\":41779},{\"end\":42236,\"start\":42234},{\"end\":42812,\"start\":42807},{\"end\":42822,\"start\":42816},{\"end\":42835,\"start\":42826},{\"end\":43338,\"start\":43333},{\"end\":43347,\"start\":43342},{\"end\":44531,\"start\":44523},{\"end\":44542,\"start\":44535},{\"end\":44555,\"start\":44548},{\"end\":44567,\"start\":44559},{\"end\":44579,\"start\":44571},{\"end\":44590,\"start\":44583},{\"end\":44600,\"start\":44594},{\"end\":44953,\"start\":44939},{\"end\":44967,\"start\":44957},{\"end\":45212,\"start\":45202},{\"end\":45227,\"start\":45218},{\"end\":45525,\"start\":45517},{\"end\":45534,\"start\":45529},{\"end\":45881,\"start\":45870},{\"end\":45893,\"start\":45885},{\"end\":46210,\"start\":46202},{\"end\":46219,\"start\":46214},{\"end\":46229,\"start\":46223},{\"end\":46241,\"start\":46233},{\"end\":46746,\"start\":46733},{\"end\":46759,\"start\":46750},{\"end\":46968,\"start\":46958},{\"end\":46983,\"start\":46976},{\"end\":46992,\"start\":46987},{\"end\":47467,\"start\":47462},{\"end\":47477,\"start\":47473},{\"end\":47485,\"start\":47481},{\"end\":47800,\"start\":47792},{\"end\":47811,\"start\":47804},{\"end\":47820,\"start\":47815},{\"end\":47830,\"start\":47826},{\"end\":47840,\"start\":47834},{\"end\":47855,\"start\":47844},{\"end\":48143,\"start\":48138},{\"end\":48156,\"start\":48147},{\"end\":48167,\"start\":48160},{\"end\":48178,\"start\":48171},{\"end\":48425,\"start\":48417},{\"end\":48440,\"start\":48429},{\"end\":48450,\"start\":48444},{\"end\":48462,\"start\":48454},{\"end\":48870,\"start\":48862},{\"end\":48880,\"start\":48874},{\"end\":48892,\"start\":48884},{\"end\":49162,\"start\":49154},{\"end\":49174,\"start\":49166},{\"end\":49187,\"start\":49180},{\"end\":49199,\"start\":49191},{\"end\":49211,\"start\":49203},{\"end\":49504,\"start\":49496},{\"end\":49513,\"start\":49508},{\"end\":49522,\"start\":49517},{\"end\":49531,\"start\":49526},{\"end\":49836,\"start\":49828},{\"end\":49845,\"start\":49840},{\"end\":49854,\"start\":49849},{\"end\":50209,\"start\":50205},{\"end\":50220,\"start\":50213},{\"end\":50230,\"start\":50224},{\"end\":50516,\"start\":50511},{\"end\":50529,\"start\":50520},{\"end\":50540,\"start\":50533},{\"end\":50549,\"start\":50544},{\"end\":50841,\"start\":50834},{\"end\":50850,\"start\":50845},{\"end\":50860,\"start\":50856},{\"end\":50870,\"start\":50864},{\"end\":50885,\"start\":50874},{\"end\":51657,\"start\":51653},{\"end\":51674,\"start\":51661},{\"end\":51686,\"start\":51678},{\"end\":51696,\"start\":51690},{\"end\":52099,\"start\":52094},{\"end\":52112,\"start\":52103},{\"end\":52125,\"start\":52116},{\"end\":52136,\"start\":52129},{\"end\":52481,\"start\":52477},{\"end\":52498,\"start\":52485},{\"end\":52510,\"start\":52502},{\"end\":52520,\"start\":52514},{\"end\":52959,\"start\":52955},{\"end\":52976,\"start\":52963},{\"end\":52983,\"start\":52980},{\"end\":52993,\"start\":52987},{\"end\":53004,\"start\":53001},{\"end\":53332,\"start\":53327},{\"end\":53341,\"start\":53336},{\"end\":53349,\"start\":53345},{\"end\":53540,\"start\":53535},{\"end\":53549,\"start\":53544},{\"end\":54037,\"start\":54032},{\"end\":54046,\"start\":54041},{\"end\":54056,\"start\":54050},{\"end\":54449,\"start\":54442},{\"end\":54464,\"start\":54453},{\"end\":54474,\"start\":54468},{\"end\":54484,\"start\":54478},{\"end\":54493,\"start\":54488},{\"end\":54965,\"start\":54960},{\"end\":54980,\"start\":54969},{\"end\":54989,\"start\":54984},{\"end\":54999,\"start\":54993},{\"end\":55374,\"start\":55369},{\"end\":55388,\"start\":55378},{\"end\":55397,\"start\":55392}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":3635922},\"end\":40410,\"start\":40203},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":531576},\"end\":40695,\"start\":40412},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":415299},\"end\":40974,\"start\":40697},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":2575057},\"end\":41173,\"start\":40976},{\"attributes\":{\"id\":\"b4\"},\"end\":41322,\"start\":41175},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":1470207},\"end\":41478,\"start\":41324},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":15912301},\"end\":41676,\"start\":41480},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":11022208},\"end\":42140,\"start\":41678},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":1523893},\"end\":42579,\"start\":42142},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":4774427},\"end\":42768,\"start\":42581},{\"attributes\":{\"id\":\"b10\"},\"end\":43299,\"start\":42770},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":19126777},\"end\":43830,\"start\":43301},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":51970050},\"end\":44043,\"start\":43832},{\"attributes\":{\"id\":\"b13\"},\"end\":44420,\"start\":44045},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":54214903},\"end\":44895,\"start\":44422},{\"attributes\":{\"id\":\"b15\"},\"end\":45147,\"start\":44897},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":54209830},\"end\":45414,\"start\":45149},{\"attributes\":{\"id\":\"b17\"},\"end\":45830,\"start\":45416},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":7408818},\"end\":46156,\"start\":45832},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2544613},\"end\":46674,\"start\":46158},{\"attributes\":{\"id\":\"b20\"},\"end\":46894,\"start\":46676},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":3985961},\"end\":47212,\"start\":46896},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":28991729},\"end\":47399,\"start\":47214},{\"attributes\":{\"doi\":\"2017/1048\",\"id\":\"b23\",\"matched_paper_id\":3287776},\"end\":47734,\"start\":47401},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":6767352},\"end\":48102,\"start\":47736},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":565041},\"end\":48374,\"start\":48104},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":166048},\"end\":48812,\"start\":48376},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":274052},\"end\":49092,\"start\":48814},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":153311227},\"end\":49446,\"start\":49094},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":6007714},\"end\":49740,\"start\":49448},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":2997566},\"end\":50064,\"start\":49742},{\"attributes\":{\"id\":\"b31\"},\"end\":50165,\"start\":50066},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":7617000},\"end\":50424,\"start\":50167},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":1665258},\"end\":50756,\"start\":50426},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":850845},\"end\":51127,\"start\":50758},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":13348226},\"end\":51585,\"start\":51129},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":8894429},\"end\":52042,\"start\":51587},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":31419280},\"end\":52370,\"start\":52044},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":1410685},\"end\":52905,\"start\":52372},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":3395299},\"end\":53296,\"start\":52907},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":2245335},\"end\":53456,\"start\":53298},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":1134589},\"end\":53967,\"start\":53458},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":1719867},\"end\":54332,\"start\":53969},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":9474924},\"end\":54895,\"start\":54334},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":5266342},\"end\":55316,\"start\":54897},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":1761961},\"end\":55602,\"start\":55318},{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":3635922},\"end\":40410,\"start\":40203},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":531576},\"end\":40695,\"start\":40412},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":415299},\"end\":40974,\"start\":40697},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":2575057},\"end\":41173,\"start\":40976},{\"attributes\":{\"id\":\"b4\"},\"end\":41322,\"start\":41175},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":1470207},\"end\":41478,\"start\":41324},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":15912301},\"end\":41676,\"start\":41480},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":11022208},\"end\":42140,\"start\":41678},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":1523893},\"end\":42579,\"start\":42142},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":4774427},\"end\":42768,\"start\":42581},{\"attributes\":{\"id\":\"b10\"},\"end\":43299,\"start\":42770},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":19126777},\"end\":43830,\"start\":43301},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":51970050},\"end\":44043,\"start\":43832},{\"attributes\":{\"id\":\"b13\"},\"end\":44420,\"start\":44045},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":54214903},\"end\":44895,\"start\":44422},{\"attributes\":{\"id\":\"b15\"},\"end\":45147,\"start\":44897},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":54209830},\"end\":45414,\"start\":45149},{\"attributes\":{\"id\":\"b17\"},\"end\":45830,\"start\":45416},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":7408818},\"end\":46156,\"start\":45832},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2544613},\"end\":46674,\"start\":46158},{\"attributes\":{\"id\":\"b20\"},\"end\":46894,\"start\":46676},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":3985961},\"end\":47212,\"start\":46896},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":28991729},\"end\":47399,\"start\":47214},{\"attributes\":{\"doi\":\"2017/1048\",\"id\":\"b23\",\"matched_paper_id\":3287776},\"end\":47734,\"start\":47401},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":6767352},\"end\":48102,\"start\":47736},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":565041},\"end\":48374,\"start\":48104},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":166048},\"end\":48812,\"start\":48376},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":274052},\"end\":49092,\"start\":48814},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":153311227},\"end\":49446,\"start\":49094},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":6007714},\"end\":49740,\"start\":49448},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":2997566},\"end\":50064,\"start\":49742},{\"attributes\":{\"id\":\"b31\"},\"end\":50165,\"start\":50066},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":7617000},\"end\":50424,\"start\":50167},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":1665258},\"end\":50756,\"start\":50426},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":850845},\"end\":51127,\"start\":50758},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":13348226},\"end\":51585,\"start\":51129},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":8894429},\"end\":52042,\"start\":51587},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":31419280},\"end\":52370,\"start\":52044},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":1410685},\"end\":52905,\"start\":52372},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":3395299},\"end\":53296,\"start\":52907},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":2245335},\"end\":53456,\"start\":53298},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":1134589},\"end\":53967,\"start\":53458},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":1719867},\"end\":54332,\"start\":53969},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":9474924},\"end\":54895,\"start\":54334},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":5266342},\"end\":55316,\"start\":54897},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":1761961},\"end\":55602,\"start\":55318}]", "bib_title": "[{\"end\":40222,\"start\":40203},{\"end\":40466,\"start\":40412},{\"end\":40742,\"start\":40697},{\"end\":41023,\"start\":40976},{\"end\":41205,\"start\":41175},{\"end\":41387,\"start\":41324},{\"end\":41514,\"start\":41480},{\"end\":41749,\"start\":41678},{\"end\":42230,\"start\":42142},{\"end\":42662,\"start\":42581},{\"end\":42803,\"start\":42770},{\"end\":43329,\"start\":43301},{\"end\":43890,\"start\":43832},{\"end\":44104,\"start\":44045},{\"end\":44519,\"start\":44422},{\"end\":44935,\"start\":44897},{\"end\":45198,\"start\":45149},{\"end\":45513,\"start\":45416},{\"end\":45866,\"start\":45832},{\"end\":46198,\"start\":46158},{\"end\":46954,\"start\":46896},{\"end\":47270,\"start\":47214},{\"end\":47458,\"start\":47401},{\"end\":47788,\"start\":47736},{\"end\":48134,\"start\":48104},{\"end\":48413,\"start\":48376},{\"end\":48858,\"start\":48814},{\"end\":49150,\"start\":49094},{\"end\":49492,\"start\":49448},{\"end\":49824,\"start\":49742},{\"end\":50199,\"start\":50167},{\"end\":50507,\"start\":50426},{\"end\":50830,\"start\":50758},{\"end\":51223,\"start\":51129},{\"end\":51649,\"start\":51587},{\"end\":52090,\"start\":52044},{\"end\":52473,\"start\":52372},{\"end\":52951,\"start\":52907},{\"end\":53323,\"start\":53298},{\"end\":53531,\"start\":53458},{\"end\":54028,\"start\":53969},{\"end\":54438,\"start\":54334},{\"end\":54956,\"start\":54897},{\"end\":55363,\"start\":55318},{\"end\":40222,\"start\":40203},{\"end\":40466,\"start\":40412},{\"end\":40742,\"start\":40697},{\"end\":41023,\"start\":40976},{\"end\":41205,\"start\":41175},{\"end\":41387,\"start\":41324},{\"end\":41514,\"start\":41480},{\"end\":41749,\"start\":41678},{\"end\":42230,\"start\":42142},{\"end\":42662,\"start\":42581},{\"end\":42803,\"start\":42770},{\"end\":43329,\"start\":43301},{\"end\":43890,\"start\":43832},{\"end\":44104,\"start\":44045},{\"end\":44519,\"start\":44422},{\"end\":44935,\"start\":44897},{\"end\":45198,\"start\":45149},{\"end\":45513,\"start\":45416},{\"end\":45866,\"start\":45832},{\"end\":46198,\"start\":46158},{\"end\":46954,\"start\":46896},{\"end\":47270,\"start\":47214},{\"end\":47458,\"start\":47401},{\"end\":47788,\"start\":47736},{\"end\":48134,\"start\":48104},{\"end\":48413,\"start\":48376},{\"end\":48858,\"start\":48814},{\"end\":49150,\"start\":49094},{\"end\":49492,\"start\":49448},{\"end\":49824,\"start\":49742},{\"end\":50199,\"start\":50167},{\"end\":50507,\"start\":50426},{\"end\":50830,\"start\":50758},{\"end\":51223,\"start\":51129},{\"end\":51649,\"start\":51587},{\"end\":52090,\"start\":52044},{\"end\":52473,\"start\":52372},{\"end\":52951,\"start\":52907},{\"end\":53323,\"start\":53298},{\"end\":53531,\"start\":53458},{\"end\":54028,\"start\":53969},{\"end\":54438,\"start\":54334},{\"end\":54956,\"start\":54897},{\"end\":55363,\"start\":55318}]", "bib_author": "[{\"end\":40239,\"start\":40224},{\"end\":40251,\"start\":40239},{\"end\":40260,\"start\":40251},{\"end\":40478,\"start\":40468},{\"end\":40493,\"start\":40478},{\"end\":40759,\"start\":40744},{\"end\":40769,\"start\":40759},{\"end\":40781,\"start\":40769},{\"end\":41037,\"start\":41025},{\"end\":41046,\"start\":41037},{\"end\":41056,\"start\":41046},{\"end\":41221,\"start\":41207},{\"end\":41234,\"start\":41221},{\"end\":41520,\"start\":41516},{\"end\":41768,\"start\":41751},{\"end\":41777,\"start\":41768},{\"end\":41783,\"start\":41777},{\"end\":42238,\"start\":42232},{\"end\":42814,\"start\":42805},{\"end\":42824,\"start\":42814},{\"end\":42837,\"start\":42824},{\"end\":43340,\"start\":43331},{\"end\":43349,\"start\":43340},{\"end\":44533,\"start\":44521},{\"end\":44544,\"start\":44533},{\"end\":44557,\"start\":44544},{\"end\":44569,\"start\":44557},{\"end\":44581,\"start\":44569},{\"end\":44592,\"start\":44581},{\"end\":44602,\"start\":44592},{\"end\":44955,\"start\":44937},{\"end\":44969,\"start\":44955},{\"end\":45214,\"start\":45200},{\"end\":45229,\"start\":45214},{\"end\":45527,\"start\":45515},{\"end\":45536,\"start\":45527},{\"end\":45883,\"start\":45868},{\"end\":45895,\"start\":45883},{\"end\":46212,\"start\":46200},{\"end\":46221,\"start\":46212},{\"end\":46231,\"start\":46221},{\"end\":46243,\"start\":46231},{\"end\":46748,\"start\":46731},{\"end\":46761,\"start\":46748},{\"end\":46970,\"start\":46956},{\"end\":46985,\"start\":46970},{\"end\":46994,\"start\":46985},{\"end\":47469,\"start\":47460},{\"end\":47479,\"start\":47469},{\"end\":47487,\"start\":47479},{\"end\":47802,\"start\":47790},{\"end\":47813,\"start\":47802},{\"end\":47822,\"start\":47813},{\"end\":47832,\"start\":47822},{\"end\":47842,\"start\":47832},{\"end\":47857,\"start\":47842},{\"end\":48145,\"start\":48136},{\"end\":48158,\"start\":48145},{\"end\":48169,\"start\":48158},{\"end\":48180,\"start\":48169},{\"end\":48427,\"start\":48415},{\"end\":48442,\"start\":48427},{\"end\":48452,\"start\":48442},{\"end\":48464,\"start\":48452},{\"end\":48872,\"start\":48860},{\"end\":48882,\"start\":48872},{\"end\":48894,\"start\":48882},{\"end\":49164,\"start\":49152},{\"end\":49176,\"start\":49164},{\"end\":49189,\"start\":49176},{\"end\":49201,\"start\":49189},{\"end\":49213,\"start\":49201},{\"end\":49506,\"start\":49494},{\"end\":49515,\"start\":49506},{\"end\":49524,\"start\":49515},{\"end\":49533,\"start\":49524},{\"end\":49838,\"start\":49826},{\"end\":49847,\"start\":49838},{\"end\":49856,\"start\":49847},{\"end\":50211,\"start\":50201},{\"end\":50222,\"start\":50211},{\"end\":50232,\"start\":50222},{\"end\":50518,\"start\":50509},{\"end\":50531,\"start\":50518},{\"end\":50542,\"start\":50531},{\"end\":50551,\"start\":50542},{\"end\":50843,\"start\":50832},{\"end\":50852,\"start\":50843},{\"end\":50862,\"start\":50852},{\"end\":50872,\"start\":50862},{\"end\":50887,\"start\":50872},{\"end\":51659,\"start\":51651},{\"end\":51676,\"start\":51659},{\"end\":51688,\"start\":51676},{\"end\":51698,\"start\":51688},{\"end\":52101,\"start\":52092},{\"end\":52114,\"start\":52101},{\"end\":52127,\"start\":52114},{\"end\":52138,\"start\":52127},{\"end\":52483,\"start\":52475},{\"end\":52500,\"start\":52483},{\"end\":52512,\"start\":52500},{\"end\":52522,\"start\":52512},{\"end\":52961,\"start\":52953},{\"end\":52978,\"start\":52961},{\"end\":52985,\"start\":52978},{\"end\":52995,\"start\":52985},{\"end\":53006,\"start\":52995},{\"end\":53334,\"start\":53325},{\"end\":53343,\"start\":53334},{\"end\":53351,\"start\":53343},{\"end\":53542,\"start\":53533},{\"end\":53551,\"start\":53542},{\"end\":54039,\"start\":54030},{\"end\":54048,\"start\":54039},{\"end\":54058,\"start\":54048},{\"end\":54451,\"start\":54440},{\"end\":54466,\"start\":54451},{\"end\":54476,\"start\":54466},{\"end\":54486,\"start\":54476},{\"end\":54495,\"start\":54486},{\"end\":54967,\"start\":54958},{\"end\":54982,\"start\":54967},{\"end\":54991,\"start\":54982},{\"end\":55001,\"start\":54991},{\"end\":55376,\"start\":55365},{\"end\":55390,\"start\":55376},{\"end\":55399,\"start\":55390},{\"end\":40239,\"start\":40224},{\"end\":40251,\"start\":40239},{\"end\":40260,\"start\":40251},{\"end\":40478,\"start\":40468},{\"end\":40493,\"start\":40478},{\"end\":40759,\"start\":40744},{\"end\":40769,\"start\":40759},{\"end\":40781,\"start\":40769},{\"end\":41037,\"start\":41025},{\"end\":41046,\"start\":41037},{\"end\":41056,\"start\":41046},{\"end\":41221,\"start\":41207},{\"end\":41234,\"start\":41221},{\"end\":41520,\"start\":41516},{\"end\":41768,\"start\":41751},{\"end\":41777,\"start\":41768},{\"end\":41783,\"start\":41777},{\"end\":42238,\"start\":42232},{\"end\":42814,\"start\":42805},{\"end\":42824,\"start\":42814},{\"end\":42837,\"start\":42824},{\"end\":43340,\"start\":43331},{\"end\":43349,\"start\":43340},{\"end\":44533,\"start\":44521},{\"end\":44544,\"start\":44533},{\"end\":44557,\"start\":44544},{\"end\":44569,\"start\":44557},{\"end\":44581,\"start\":44569},{\"end\":44592,\"start\":44581},{\"end\":44602,\"start\":44592},{\"end\":44955,\"start\":44937},{\"end\":44969,\"start\":44955},{\"end\":45214,\"start\":45200},{\"end\":45229,\"start\":45214},{\"end\":45527,\"start\":45515},{\"end\":45536,\"start\":45527},{\"end\":45883,\"start\":45868},{\"end\":45895,\"start\":45883},{\"end\":46212,\"start\":46200},{\"end\":46221,\"start\":46212},{\"end\":46231,\"start\":46221},{\"end\":46243,\"start\":46231},{\"end\":46748,\"start\":46731},{\"end\":46761,\"start\":46748},{\"end\":46970,\"start\":46956},{\"end\":46985,\"start\":46970},{\"end\":46994,\"start\":46985},{\"end\":47469,\"start\":47460},{\"end\":47479,\"start\":47469},{\"end\":47487,\"start\":47479},{\"end\":47802,\"start\":47790},{\"end\":47813,\"start\":47802},{\"end\":47822,\"start\":47813},{\"end\":47832,\"start\":47822},{\"end\":47842,\"start\":47832},{\"end\":47857,\"start\":47842},{\"end\":48145,\"start\":48136},{\"end\":48158,\"start\":48145},{\"end\":48169,\"start\":48158},{\"end\":48180,\"start\":48169},{\"end\":48427,\"start\":48415},{\"end\":48442,\"start\":48427},{\"end\":48452,\"start\":48442},{\"end\":48464,\"start\":48452},{\"end\":48872,\"start\":48860},{\"end\":48882,\"start\":48872},{\"end\":48894,\"start\":48882},{\"end\":49164,\"start\":49152},{\"end\":49176,\"start\":49164},{\"end\":49189,\"start\":49176},{\"end\":49201,\"start\":49189},{\"end\":49213,\"start\":49201},{\"end\":49506,\"start\":49494},{\"end\":49515,\"start\":49506},{\"end\":49524,\"start\":49515},{\"end\":49533,\"start\":49524},{\"end\":49838,\"start\":49826},{\"end\":49847,\"start\":49838},{\"end\":49856,\"start\":49847},{\"end\":50211,\"start\":50201},{\"end\":50222,\"start\":50211},{\"end\":50232,\"start\":50222},{\"end\":50518,\"start\":50509},{\"end\":50531,\"start\":50518},{\"end\":50542,\"start\":50531},{\"end\":50551,\"start\":50542},{\"end\":50843,\"start\":50832},{\"end\":50852,\"start\":50843},{\"end\":50862,\"start\":50852},{\"end\":50872,\"start\":50862},{\"end\":50887,\"start\":50872},{\"end\":51659,\"start\":51651},{\"end\":51676,\"start\":51659},{\"end\":51688,\"start\":51676},{\"end\":51698,\"start\":51688},{\"end\":52101,\"start\":52092},{\"end\":52114,\"start\":52101},{\"end\":52127,\"start\":52114},{\"end\":52138,\"start\":52127},{\"end\":52483,\"start\":52475},{\"end\":52500,\"start\":52483},{\"end\":52512,\"start\":52500},{\"end\":52522,\"start\":52512},{\"end\":52961,\"start\":52953},{\"end\":52978,\"start\":52961},{\"end\":52985,\"start\":52978},{\"end\":52995,\"start\":52985},{\"end\":53006,\"start\":52995},{\"end\":53334,\"start\":53325},{\"end\":53343,\"start\":53334},{\"end\":53351,\"start\":53343},{\"end\":53542,\"start\":53533},{\"end\":53551,\"start\":53542},{\"end\":54039,\"start\":54030},{\"end\":54048,\"start\":54039},{\"end\":54058,\"start\":54048},{\"end\":54451,\"start\":54440},{\"end\":54466,\"start\":54451},{\"end\":54476,\"start\":54466},{\"end\":54486,\"start\":54476},{\"end\":54495,\"start\":54486},{\"end\":54967,\"start\":54958},{\"end\":54982,\"start\":54967},{\"end\":54991,\"start\":54982},{\"end\":55001,\"start\":54991},{\"end\":55376,\"start\":55365},{\"end\":55390,\"start\":55376},{\"end\":55399,\"start\":55390}]", "bib_venue": "[{\"end\":41920,\"start\":41860},{\"end\":42373,\"start\":42314},{\"end\":43035,\"start\":42947},{\"end\":43569,\"start\":43479},{\"end\":44199,\"start\":44177},{\"end\":46427,\"start\":46335},{\"end\":48542,\"start\":48528},{\"end\":51313,\"start\":51299},{\"end\":53727,\"start\":53637},{\"end\":41920,\"start\":41860},{\"end\":42373,\"start\":42314},{\"end\":43035,\"start\":42947},{\"end\":43569,\"start\":43479},{\"end\":44199,\"start\":44177},{\"end\":46427,\"start\":46335},{\"end\":48542,\"start\":48528},{\"end\":51313,\"start\":51299},{\"end\":53727,\"start\":53637},{\"end\":40263,\"start\":40260},{\"end\":40527,\"start\":40493},{\"end\":40815,\"start\":40781},{\"end\":41060,\"start\":41056},{\"end\":41238,\"start\":41234},{\"end\":41392,\"start\":41389},{\"end\":41550,\"start\":41520},{\"end\":41858,\"start\":41783},{\"end\":42312,\"start\":42238},{\"end\":42667,\"start\":42664},{\"end\":42922,\"start\":42837},{\"end\":43434,\"start\":43349},{\"end\":43922,\"start\":43892},{\"end\":44148,\"start\":44106},{\"end\":44632,\"start\":44602},{\"end\":44999,\"start\":44969},{\"end\":45259,\"start\":45229},{\"end\":45572,\"start\":45536},{\"end\":45972,\"start\":45895},{\"end\":46333,\"start\":46243},{\"end\":46729,\"start\":46676},{\"end\":47027,\"start\":46994},{\"end\":47281,\"start\":47272},{\"end\":47532,\"start\":47496},{\"end\":47890,\"start\":47857},{\"end\":48218,\"start\":48180},{\"end\":48526,\"start\":48464},{\"end\":48927,\"start\":48894},{\"end\":49238,\"start\":49213},{\"end\":49566,\"start\":49533},{\"end\":49893,\"start\":49856},{\"end\":50099,\"start\":50068},{\"end\":50269,\"start\":50232},{\"end\":50560,\"start\":50551},{\"end\":50917,\"start\":50887},{\"end\":51297,\"start\":51225},{\"end\":51788,\"start\":51698},{\"end\":52180,\"start\":52138},{\"end\":52612,\"start\":52522},{\"end\":53079,\"start\":53006},{\"end\":53355,\"start\":53351},{\"end\":53635,\"start\":53551},{\"end\":54113,\"start\":54058},{\"end\":54564,\"start\":54495},{\"end\":55062,\"start\":55001},{\"end\":55433,\"start\":55399},{\"end\":40263,\"start\":40260},{\"end\":40527,\"start\":40493},{\"end\":40815,\"start\":40781},{\"end\":41060,\"start\":41056},{\"end\":41238,\"start\":41234},{\"end\":41392,\"start\":41389},{\"end\":41550,\"start\":41520},{\"end\":41858,\"start\":41783},{\"end\":42312,\"start\":42238},{\"end\":42667,\"start\":42664},{\"end\":42922,\"start\":42837},{\"end\":43434,\"start\":43349},{\"end\":43922,\"start\":43892},{\"end\":44148,\"start\":44106},{\"end\":44632,\"start\":44602},{\"end\":44999,\"start\":44969},{\"end\":45259,\"start\":45229},{\"end\":45572,\"start\":45536},{\"end\":45972,\"start\":45895},{\"end\":46333,\"start\":46243},{\"end\":46729,\"start\":46676},{\"end\":47027,\"start\":46994},{\"end\":47281,\"start\":47272},{\"end\":47532,\"start\":47496},{\"end\":47890,\"start\":47857},{\"end\":48218,\"start\":48180},{\"end\":48526,\"start\":48464},{\"end\":48927,\"start\":48894},{\"end\":49238,\"start\":49213},{\"end\":49566,\"start\":49533},{\"end\":49893,\"start\":49856},{\"end\":50099,\"start\":50068},{\"end\":50269,\"start\":50232},{\"end\":50560,\"start\":50551},{\"end\":50917,\"start\":50887},{\"end\":51297,\"start\":51225},{\"end\":51788,\"start\":51698},{\"end\":52180,\"start\":52138},{\"end\":52612,\"start\":52522},{\"end\":53079,\"start\":53006},{\"end\":53355,\"start\":53351},{\"end\":53635,\"start\":53551},{\"end\":54113,\"start\":54058},{\"end\":54564,\"start\":54495},{\"end\":55062,\"start\":55001},{\"end\":55433,\"start\":55399}]"}}}, "year": 2023, "month": 12, "day": 17}