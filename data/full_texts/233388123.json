{"id": 233388123, "updated": "2023-10-06 05:06:55.424", "metadata": {"title": "Automating Cyber Threat Hunting Using NLP, Automated Query Generation, and Genetic Perturbation", "authors": "[{\"first\":\"Prakruthi\",\"last\":\"Karuna\",\"middle\":[]},{\"first\":\"Erik\",\"last\":\"Hemberg\",\"middle\":[]},{\"first\":\"Una-May\",\"last\":\"O'Reilly\",\"middle\":[]},{\"first\":\"Nick\",\"last\":\"Rutar\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2021, "month": 4, "day": 23}, "abstract": "Scaling the cyber hunt problem poses several key technical challenges. Detecting and characterizing cyber threats at scale in large enterprise networks is hard because of the vast quantity and complexity of the data that must be analyzed as adversaries deploy varied and evolving tactics to accomplish their goals. There is a great need to automate all aspects, and, indeed, the workflow of cyber hunting. AI offers many ways to support this. We have developed the WILEE system that automates cyber threat hunting by translating high-level threat descriptions into many possible concrete implementations. Both the (high-level) abstract and (low-level) concrete implementations are represented using a custom domain specific language (DSL). WILEE uses the implementations along with other logic, also written in the DSL, to automatically generate queries to confirm (or refute) any hypotheses tied to the potential adversarial workflows represented at various layers of abstraction.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2104.11576", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2104-11576", "doi": null}}, "content": {"source": {"pdf_hash": "b84daa81d9316537ba34b5b351520b0b4bf0fcb8", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2104.11576v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "367415f95174405a7ea582c5391ce5d19a3014e3", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/b84daa81d9316537ba34b5b351520b0b4bf0fcb8.txt", "contents": "\nAutomating Cyber Threat Hunting Using NLP, Automated Query Generation, and Genetic Perturbation\n\n\nPrakruthi Karuna pkaruna@perspectalabs.com \nPerspecta Labs, Inc\n\n\nErik Hemberg hembergerik@csail.mit.edu \nMIT CSAIL\n\n\nUna-May O&apos;reilly \nMIT CSAIL\n\n\nNick Rutar nrutar@perspectalabs.com \nPerspecta Labs, Inc\n\n\nAutomating Cyber Threat Hunting Using NLP, Automated Query Generation, and Genetic Perturbation\n\n\n\nIntroduction\n\nScaling the cyber hunt problem poses several key technical challenges. Detecting and characterizing cyber threats at scale in large enterprise networks is hard because of the vast quantity and complexity of the data that must be analyzed as adversaries deploy varied and evolving tactics to accomplish their goals. There is a great need to automate all aspects, and, indeed, the workflow of cyber hunting. AI offers many ways to support this. We have developed the WILEE system that automates cyber threat hunting by translating highlevel threat descriptions into many possible concrete implementations. Both the (high-level) abstract and (lowlevel) concrete implementations are represented using a custom domain specific language (DSL). WILEE uses the implementations along with other logic, also written in the DSL, to automatically generate queries to confirm (or refute) any hypotheses tied to the potential adversarial workflows represented at various layers of abstraction. We summarize WILEE in Section 2.\n\nIn this contribution we focus on presenting two AI components of WILEE that coordinate to support its automated query generation for hunting, see Figure 1. First, in Section 3, we introduce a hunt component, named Malmo, that uses Natural Language Processing (NLP) to automate extraction and translation of known threat descriptions. Known threats can be identified with pattern recognition and signature-based methods. Their descriptions are embedded within humanreadable, semi-structured documents. Malmo extracts and translates, to machine digestible format, key fields of the documents including indicators of compromise, to make them operational for the hunt.\n\nKnown threats evolve into unknown threats. Evolutionary adaptations occur at the level of TTPs, i.e. at the behavioral level, or, at the lower level of simple, but effective modifications of their signatures. This implies that, to detect unknown threats, explorative variations should also be hunted. The hunt needs to be widened, while not becoming so wide as to overwhelm data collection and its subsequent filtering. To address these challenges, WILEE introduces a genetic programming hunt component [1]. Called Genetic Perturbation En- Conclusions, and primarily future work directions are presented in Section 5.\n\n\nWILEE Framework and DSL\n\nThe primary input to the WILEE threat detector is a Threat Description, which is expressed in the DSL. This initial input is a high level, mostly abstract, workflow that the detector is hunting. Each 'call' from this description is an abstract TTP (tactic, technique, or procedure) mapping primarily to MITRE ATT&CK\u00ae[2] entries. An example of this input is shown in Figure 3. This input is technically optional, and if an abstract workflow is not defined, WILEE will attempt to detect the full 'kill-chain' [3].\n\nThe Threat Interpreter takes in the Python DSL  (if explicitly defined) and pulls all appropriate tactics, techniques, and procedures from the TTP Store to concretize all possible combinations of the abstract workflow. An example of one TTP representation is shown in Figure 4. While the DSL is Pythonic in syntax, that code is never executed. Rather the Python AST is parsed to generate all the possible queries needed to query/inquire whether the events in the workflow are occurring on the protected enclave. This generation of the queries occurs in the Query Scheduler, which is data store agnostic. The actual queries for the supported data stores takes place in the Data Proxy and the query results allow WILEE to ingest the confirmed (or refuted) hypotheses as a graph with TTP-based inferences between entities, into an internal data store. A match algorithm is applied to the edges within that data store in the Threat Matcher module. Finally, the results are output to various formats (including Markdown, JavaScript, and ticketing systems like Redmine) in the Threat Output module.\n\nThe WILEE framework has been successfully deployed to categorize threats using data sets including the Operationally Transparent Cyber (OpTC) evaluation set [4] and in categorizing MITRE CALDERA [5] based simulated attacks. In both of these deployments, the DSLs representing the individual TTPs that were used for categorization, and maintained/stored in the WILEE TTP Store, were manually generated by a subject matter expert (SME). While the WILEE system is fully automated, the dependence on these manually generated entries limits the breadth of TTPs WILEE can detect, and lessens the speed at which it can model new TTPs as they are incorporated within ATT&CK and other threat models. The rest of this paper will discuss how we are automating the process of DSL generation utilizing NLP within Malmo and novel IOC generation within GPE.\n\n\nMalmo: Natural Language Processing (NLP) Engine\n\nMITRE ATT&CK provides a knowledge base of adversarial tactics, techniques and procedures (TTPs) written in a human readable format. However, it's challenging for a computer to understand or hunt based on this knowledge base as it's not easily digestible for a cyber hunt system. MITRE ATT&CK TTPs refer to several network and host level entities such as \"system\", \"window registry keys\", \"process\". It is necessary to model these entities to be able to capture the knowledge in the TTPs, therefore, we use MITRE CybOX (Cyber Observable Expression) as our base data model. However, CybOX does not contain all the entities referred to in TTPs, therefore we extend this data model to include objects referred to in the TTPs (e.g, active directory in windows OS) but are not modeled in CybOX. Once we have a detailed data model, we use this to write our pythonic DSL that represents TTPs in a computer digestible format. In our DSL we represent each TTP technique as a function as shown in Figure 4. Within each function, we instantiate objects from our data model and relate them using relations of type: \"has\" and \"observed\". By doing so we can represent all the essential objects referred to in the technique and also relate them to form meaningful triplets of form: \"systemhas -process\", process -observed -win registry key\". We populate the variables associated with our objects to values that are relevant to the technique. For example Figure 4 shows the DSL for ATT&CK technique T1552.002: Unsecured Credentials: Credentials in Registry where we populate variables winregistrykey1.Hive to \"Software\\*\\Putty\\Sessions\" that is derived from the technique description and variable process1.name to \"TrojanSpy.Win32.TRICKBOT.AZ \". By doing this we are tying indicators of compromise (IOC) to different variables in our TTP description represented using the DSL. Indicators of compromise are forensic artifacts that are used as signs that a system has been attacked or worse compromised by an attack or that it has been infected with a particular malicious software. In this work, we use IOCs to identify attacker activity. Finding data points using IOCs informs us with high confidence that there was attacker activity. However, each variable could be associated with multiple IOC values. Therefore, we store these IOCs in a database and query it on the fly. To do this we populate object variables with sql queries written using SQLAlchemy notations as shown in Figure 5. We can also model red team tool-based indicators using our DSL. We worked with the red team tool CALDERA's stockpile plugin that provides a set of commands to replicate adversary behaviors as if a real intrusion is occurring. An example command is: \"Get-Process -Name \"powershell\" -Stop-Process\" where \n\n\nAutomated DSL Generation\n\nThreats are ever evolving, and new techniques and procedures get added to the MITRE ATT&CK repository often. However, generating such a detailed DSL is a labor-intensive task. Therefore we use NLP techniques to automate the generation of pythonic DSL from MITRE ATT&CK TTPs. Our NLP pipeline is as shown in Figure 6.\n\nWe take as input TTP technique descriptions, our data model, and indicators of attacker activity. We parse relevant phrases from technique description by extracting noun phrases that follow the regular expression pattern of Adjective*Noun+. We then pre-process our data model to retain classes and variables. We then match the classes and variables to the phrases from text to identify relevant classes and variables. To identify relevant classes we compute the relevancy of a class to a TTP technique based on the formulas below and include top n number of classes with the highest class inclusion value. We then instantiate classes and populate variables with indicators of attacker activity using template filling techniques. We finally relate these classes based on previously seen relations. \n\n\nGenetic Perturbations of IOCs\n\nWILEE uses genetic programming (GP) as the algorithm of GPE. Genetic Programming is an evolutionary algorithm where candidate solutions are executable code that are manipulated in their parse tree representation. GP's genetic operators can exchange the subtrees of code trees and maintain their ability to execute without syntactic errors. A code tree is executed and its compliance with output requirements determines its fitness. We use grammar-guided GP to allow the search space of GP to be defined independently of its variation operators. For more information see [1,[6][7][8]. We chose GP for WILEE because abstract syntax trees (ASTs) can be extracted from WILEE's threat implementations, as they are represented as Pythonic DSL. With parse tree representations, they can be manipulated by GP within the GPE to vary the hunt queries and IOC s. This allows search at the abstract threat level.  Threat Implementation Perturbation: Per Figure 7, GPE and its Threat Implementation perturbation role are best described in the context of the standard WILEE workflow. GPE is an optional injection into this flow. It is fed a diverted Threat Implementation from the Threat Interpreter and then perturbs it to enlarge the space of variants around the Threat Implementation, using adaptations that are GP mutations or type-matched options from the IOC database that is the cornerstone of Malmo. We encounter several critical challenges. The first is that the GP system starts without fitness values for one or more candidate Threat Implementations because their match quality is unknown. We solve this challenge by using novelty search; a GP technique where genetic selection prefers candidates that are different from each other, [9,10]. We have improved novelty search to provide it with a knob-like feature that automatically balances each population between novel membership and fitness-based membership. [11] The second (open) challenge is that the fitness of a Threat Implementation at one point in time may be inaccurate at another. For example, a Threat Implementation could be explored before a C2C domain is established and thus be unfit. But, in a system where, some time later, a C2C is established, it would be fit. The fitness of a Threat Implementation can also change if the filtering of a data stream changes and, with the change its match changes.\n\nIOC Perturbation: Figure 8 shows a second use of GPE. We have implemented the ability for GPE to look for <bind> values in the Threat Implementation, and, on the basis of the type required, access matching options in Malmo's IOC database. This allows the substitution of known threat information into concretized Threat Implementations. We exploit GPE's aforementioned grammar, some constraint logic, and (currently) blind mutation to do so. The ultimate use case we have in mind would perturb bound values with novel values that are informed by domain information. For example, the Hive locator in ATT&CK technique t1552.002 which is Software/SimonTatham/ Putty/Sessions could be intelligently cycled through reasonable options that replace the putty program author's name. While we have not assigned fitness to various perturbations, this future work may need to be handled with our novelty search.\n\n\nConclusion and Future Work\n\nWe have presented AI-based techniques for the automation of DSL entries in support of threat detection. The primary focus for future work will be the evaluation of these techniques. We currently have 'ground truth' for which TTPs are deployed in adversarial simulations in systems like CALDERA. Our immediate next step is evaluating how WILEE performs when using SME generated DSLs in comparison to automatically generated DSLs. For next steps for IOCs, when using IOC based search data, we can learn attacker behaviors and later use these learnt behavior to identify new IOCs. In the future, we plan to identify variations of CALDERA commands to further identify threats. Finally, we are considering the value of the GPE adding perturbations that are like regular expressions [12], directing the hunt to a family of variants to which a threat may evolve.\n\nFigure 1 :\n1AI Components for automated DSL Generation for use within the WILEE threat detection system. gine, (GPE), the component is integrated both within WILEE's workflow, as a generator of perturbed threat implementation, seeFigure 7, and with Malmo, see Figure 8 as a way to replace a field describing an indicator of compromise (IOC ) of a known threat, with an alternative of the same type, drawn from a database of possibilities. We summarize GPE in Section 4.\n\n\nmaterial is based upon work supported by the DARPA Advanced Research Project Agency (DARPA) and Space and Naval Warfare Systems Center, Pacific (SSC Pacific) under Contract No. N66001-18-C-4036. The views, opinions, and/or findings expressed are those of the author(s) and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government. Approved for Public Release, Distribution Unlimited.\n\nFigure 2 :Figure 4 :\n24WILEE (Concrete) TTP DSL Example\n\nFigure 5 :\n5(Concrete) Malmo DSL Example\n\nFigure 6 :\n6Pipeline for DSL generation an attacker abuses command and script interpreter as described in technique T1059.001. We use such commands to identify attacker activity.\n\n\u2203\nWord match if word noun phrase \u2208 class name and word noun phrase \u2208 class.variable name Relative importance of Word match = 1 (Frequency of word noun phrase in data model) Percentage words matched in Word match = Number of matched word noun phrase Number of words variable name * 100 Word match value = (Relative imp of Word match) * (Percentage words matched in Word match) Class inclusion value = variable\u2208class Word match value\n\nFigure 7 :\n7GPE intercepts Threat Implementations and perturbs them.\n\nFigure 8 :\n8MALMO and GP creating new IOCs.\n\nGenetic programming. James Mcdermott, Una-May O&apos; Reilly, Springer Handbook of Computational Intelligence. SpringerJames McDermott and Una-May O'Reilly. Genetic programming. In Springer Handbook of Computa- tional Intelligence, pages 845-869. Springer, 2015.\n\nIntelligence-driven computer network defense informed by analysis of adversary campaigns and intrusion kill chains. Cloppert Lockheed-Martin Corporation-Hutchins and AminCloppert Lockheed-Martin Corporation-Hutchins and Amin. Intelligence-driven computer network defense informed by analysis of adversary cam- paigns and intrusion kill chains, 2011.\n\n. Optc-Data, Optc-data. https://github.com/ FiveDirections/OpTC-data.\n\n. Caldera, Caldera. https://caldera.readthedocs.io/en/ latest/.\n\nA field guide to genetic programming. Riccardo Poli, B William, Nicholas F Langdon, John R Mcphee, Koza, Lulu. com. Riccardo Poli, William B Langdon, Nicholas F McPhee, and John R Koza. A field guide to ge- netic programming. Lulu. com, 2008.\n\nIntroduction to genetic programming. Una-May O&apos; Reilly, Erik Hemberg, Proceedings of the Genetic and Evolutionary Computation Conference Companion. the Genetic and Evolutionary Computation Conference CompanionUna-May O'Reilly and Erik Hemberg. Introduc- tion to genetic programming. In Proceedings of the Genetic and Evolutionary Computation Con- ference Companion, pages 710-725, 2019.\n\nGrammar-based genetic programming: a survey. Genetic Programming and Evolvable Machines. I Robert, Mckay, Xuan Nguyen, Peter Alexander Hoai, Yin Whigham, Michael O&apos; Shan, Neill, 11Robert I McKay, Nguyen Xuan Hoai, Pe- ter Alexander Whigham, Yin Shan, and Michael O'neill. Grammar-based genetic programming: a survey. Genetic Programming and Evolvable Ma- chines, 11(3):365-396, 2010.\n\nOn domain knowledge and novelty to improve program synthesis performance with grammatical evolution. Erik Hemberg, Jonathan Kelly, Una-May O&apos; Reilly, Proceedings of the Genetic and Evolutionary Computation Conference. the Genetic and Evolutionary Computation ConferenceErik Hemberg, Jonathan Kelly, and Una-May O'Reilly. On domain knowledge and novelty to im- prove program synthesis performance with gram- matical evolution. In Proceedings of the Genetic and Evolutionary Computation Conference, pages 1039-1046, 2019.\n\nEfficiently evolving programs through the search for novelty. Joel Lehman, O Kenneth, Stanley, Proceedings of the 12th annual conference on Genetic and evolutionary computation. the 12th annual conference on Genetic and evolutionary computationJoel Lehman and Kenneth O Stanley. Efficiently evolving programs through the search for novelty. In Proceedings of the 12th annual conference on Genetic and evolutionary computation, pages 837- 844, 2010.\n\nImproving genetic programming with novel exploration-exploitation control. Jonathan Kelly, Erik Hemberg, Una-May O&apos; Reilly, European Conference on Genetic Programming. SpringerJonathan Kelly, Erik Hemberg, and Una-May O'Reilly. Improving genetic programming with novel exploration-exploitation control. In European Conference on Genetic Programming, pages 64-80. Springer, 2019.\n\nRegexes are hard: Decisionmaking, difficulties, and risks in programming regular expressions. L G Michael, J Donohue, J C Davis, D Lee, F Servant, 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). L. G. Michael, J. Donohue, J. C. Davis, D. Lee, and F. Servant. Regexes are hard: Decision- making, difficulties, and risks in programming reg- ular expressions. In 2019 34th IEEE/ACM Inter- national Conference on Automated Software Engi- neering (ASE), pages 415-426, 2019.\n", "annotations": {"author": "[{\"end\":164,\"start\":99},{\"end\":216,\"start\":165},{\"end\":251,\"start\":217},{\"end\":310,\"start\":252}]", "publisher": null, "author_last_name": "[{\"end\":115,\"start\":109},{\"end\":177,\"start\":170},{\"end\":238,\"start\":225},{\"end\":262,\"start\":257}]", "author_first_name": "[{\"end\":108,\"start\":99},{\"end\":169,\"start\":165},{\"end\":224,\"start\":217},{\"end\":256,\"start\":252}]", "author_affiliation": "[{\"end\":163,\"start\":143},{\"end\":215,\"start\":205},{\"end\":250,\"start\":240},{\"end\":309,\"start\":289}]", "title": "[{\"end\":96,\"start\":1},{\"end\":406,\"start\":311}]", "venue": null, "abstract": null, "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2610,\"start\":2607},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":3259,\"start\":3256},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4516,\"start\":4513},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4554,\"start\":4551},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":9774,\"start\":9771},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9777,\"start\":9774},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":9780,\"start\":9777},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9783,\"start\":9780},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":10934,\"start\":10931},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":10937,\"start\":10934},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":11113,\"start\":11109},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":13279,\"start\":13275}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":13824,\"start\":13354},{\"attributes\":{\"id\":\"fig_1\"},\"end\":14278,\"start\":13825},{\"attributes\":{\"id\":\"fig_2\"},\"end\":14335,\"start\":14279},{\"attributes\":{\"id\":\"fig_3\"},\"end\":14377,\"start\":14336},{\"attributes\":{\"id\":\"fig_4\"},\"end\":14557,\"start\":14378},{\"attributes\":{\"id\":\"fig_5\"},\"end\":14990,\"start\":14558},{\"attributes\":{\"id\":\"fig_6\"},\"end\":15060,\"start\":14991},{\"attributes\":{\"id\":\"fig_7\"},\"end\":15105,\"start\":15061}]", "paragraph": "[{\"end\":1436,\"start\":424},{\"end\":2102,\"start\":1438},{\"end\":2721,\"start\":2104},{\"end\":3260,\"start\":2749},{\"end\":4354,\"start\":3262},{\"end\":5198,\"start\":4356},{\"end\":8023,\"start\":5250},{\"end\":8368,\"start\":8052},{\"end\":9167,\"start\":8370},{\"end\":11565,\"start\":9201},{\"end\":12467,\"start\":11567},{\"end\":13353,\"start\":12498}]", "formula": null, "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":422,\"start\":410},{\"attributes\":{\"n\":\"2\"},\"end\":2747,\"start\":2724},{\"attributes\":{\"n\":\"3\"},\"end\":5248,\"start\":5201},{\"attributes\":{\"n\":\"3.1\"},\"end\":8050,\"start\":8026},{\"attributes\":{\"n\":\"4\"},\"end\":9199,\"start\":9170},{\"attributes\":{\"n\":\"5\"},\"end\":12496,\"start\":12470},{\"end\":13365,\"start\":13355},{\"end\":14300,\"start\":14280},{\"end\":14347,\"start\":14337},{\"end\":14389,\"start\":14379},{\"end\":14560,\"start\":14559},{\"end\":15002,\"start\":14992},{\"end\":15072,\"start\":15062}]", "table": null, "figure_caption": "[{\"end\":13824,\"start\":13367},{\"end\":14278,\"start\":13827},{\"end\":14335,\"start\":14303},{\"end\":14377,\"start\":14349},{\"end\":14557,\"start\":14391},{\"end\":14990,\"start\":14561},{\"end\":15060,\"start\":15004},{\"end\":15105,\"start\":15074}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":1592,\"start\":1584},{\"end\":3123,\"start\":3115},{\"end\":3538,\"start\":3530},{\"end\":6244,\"start\":6236},{\"end\":6696,\"start\":6688},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":7719,\"start\":7711},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":8367,\"start\":8359},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":10151,\"start\":10139},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":11593,\"start\":11585}]", "bib_author_first_name": "[{\"end\":15133,\"start\":15128},{\"end\":15160,\"start\":15145},{\"end\":15904,\"start\":15896},{\"end\":15912,\"start\":15911},{\"end\":15930,\"start\":15922},{\"end\":15932,\"start\":15931},{\"end\":15946,\"start\":15942},{\"end\":15948,\"start\":15947},{\"end\":16154,\"start\":16139},{\"end\":16167,\"start\":16163},{\"end\":16585,\"start\":16584},{\"end\":16605,\"start\":16601},{\"end\":16619,\"start\":16614},{\"end\":16629,\"start\":16620},{\"end\":16639,\"start\":16636},{\"end\":16664,\"start\":16649},{\"end\":16990,\"start\":16986},{\"end\":17008,\"start\":17000},{\"end\":17031,\"start\":17016},{\"end\":17477,\"start\":17473},{\"end\":17487,\"start\":17486},{\"end\":17944,\"start\":17936},{\"end\":17956,\"start\":17952},{\"end\":17981,\"start\":17966},{\"end\":18341,\"start\":18340},{\"end\":18343,\"start\":18342},{\"end\":18354,\"start\":18353},{\"end\":18365,\"start\":18364},{\"end\":18367,\"start\":18366},{\"end\":18376,\"start\":18375},{\"end\":18383,\"start\":18382}]", "bib_author_last_name": "[{\"end\":15143,\"start\":15134},{\"end\":15167,\"start\":15161},{\"end\":15733,\"start\":15724},{\"end\":15802,\"start\":15795},{\"end\":15909,\"start\":15905},{\"end\":15920,\"start\":15913},{\"end\":15940,\"start\":15933},{\"end\":15955,\"start\":15949},{\"end\":15961,\"start\":15957},{\"end\":16161,\"start\":16155},{\"end\":16175,\"start\":16168},{\"end\":16592,\"start\":16586},{\"end\":16599,\"start\":16594},{\"end\":16612,\"start\":16606},{\"end\":16634,\"start\":16630},{\"end\":16647,\"start\":16640},{\"end\":16669,\"start\":16665},{\"end\":16676,\"start\":16671},{\"end\":16998,\"start\":16991},{\"end\":17014,\"start\":17009},{\"end\":17038,\"start\":17032},{\"end\":17484,\"start\":17478},{\"end\":17495,\"start\":17488},{\"end\":17504,\"start\":17497},{\"end\":17950,\"start\":17945},{\"end\":17964,\"start\":17957},{\"end\":17988,\"start\":17982},{\"end\":18351,\"start\":18344},{\"end\":18362,\"start\":18355},{\"end\":18373,\"start\":18368},{\"end\":18380,\"start\":18377},{\"end\":18391,\"start\":18384}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":297425},\"end\":15369,\"start\":15107},{\"attributes\":{\"id\":\"b1\"},\"end\":15720,\"start\":15371},{\"attributes\":{\"id\":\"b2\"},\"end\":15791,\"start\":15722},{\"attributes\":{\"id\":\"b3\"},\"end\":15856,\"start\":15793},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":6740056},\"end\":16100,\"start\":15858},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":5333475},\"end\":16493,\"start\":16102},{\"attributes\":{\"id\":\"b6\"},\"end\":16883,\"start\":16495},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":156051678},\"end\":17409,\"start\":16885},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":1577299},\"end\":17859,\"start\":17411},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":106407024},\"end\":18244,\"start\":17861},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":201628664},\"end\":18747,\"start\":18246}]", "bib_title": "[{\"end\":15126,\"start\":15107},{\"end\":15894,\"start\":15858},{\"end\":16137,\"start\":16102},{\"end\":16984,\"start\":16885},{\"end\":17471,\"start\":17411},{\"end\":17934,\"start\":17861},{\"end\":18338,\"start\":18246}]", "bib_author": "[{\"end\":15145,\"start\":15128},{\"end\":15169,\"start\":15145},{\"end\":15735,\"start\":15724},{\"end\":15804,\"start\":15795},{\"end\":15911,\"start\":15896},{\"end\":15922,\"start\":15911},{\"end\":15942,\"start\":15922},{\"end\":15957,\"start\":15942},{\"end\":15963,\"start\":15957},{\"end\":16163,\"start\":16139},{\"end\":16177,\"start\":16163},{\"end\":16594,\"start\":16584},{\"end\":16601,\"start\":16594},{\"end\":16614,\"start\":16601},{\"end\":16636,\"start\":16614},{\"end\":16649,\"start\":16636},{\"end\":16671,\"start\":16649},{\"end\":16678,\"start\":16671},{\"end\":17000,\"start\":16986},{\"end\":17016,\"start\":17000},{\"end\":17040,\"start\":17016},{\"end\":17486,\"start\":17473},{\"end\":17497,\"start\":17486},{\"end\":17506,\"start\":17497},{\"end\":17952,\"start\":17936},{\"end\":17966,\"start\":17952},{\"end\":17990,\"start\":17966},{\"end\":18353,\"start\":18340},{\"end\":18364,\"start\":18353},{\"end\":18375,\"start\":18364},{\"end\":18382,\"start\":18375},{\"end\":18393,\"start\":18382}]", "bib_venue": "[{\"end\":16316,\"start\":16255},{\"end\":17159,\"start\":17108},{\"end\":17655,\"start\":17589},{\"end\":15216,\"start\":15169},{\"end\":15485,\"start\":15371},{\"end\":15972,\"start\":15963},{\"end\":16253,\"start\":16177},{\"end\":16582,\"start\":16495},{\"end\":17106,\"start\":17040},{\"end\":17587,\"start\":17506},{\"end\":18032,\"start\":17990},{\"end\":18471,\"start\":18393}]"}}}, "year": 2023, "month": 12, "day": 17}