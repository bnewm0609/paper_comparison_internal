{"id": 49657329, "updated": "2023-09-30 05:15:10.81", "metadata": {"title": "Glow: Generative Flow with Invertible 1x1 Convolutions", "authors": "[{\"first\":\"Diederik\",\"last\":\"Kingma\",\"middle\":[\"P.\"]},{\"first\":\"Prafulla\",\"last\":\"Dhariwal\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2018, "month": 7, "day": 9}, "abstract": "Flow-based generative models (Dinh et al., 2014) are conceptually attractive due to tractability of the exact log-likelihood, tractability of exact latent-variable inference, and parallelizability of both training and synthesis. In this paper we propose Glow, a simple type of generative flow using an invertible 1x1 convolution. Using our method we demonstrate a significant improvement in log-likelihood on standard benchmarks. Perhaps most strikingly, we demonstrate that a generative model optimized towards the plain log-likelihood objective is capable of efficient realistic-looking synthesis and manipulation of large images. The code for our model is available at https://github.com/openai/glow", "fields_of_study": "[\"Mathematics\",\"Computer Science\"]", "external_ids": {"arxiv": "1807.03039", "mag": "2963139417", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/nips/KingmaD18", "doi": null}}, "content": {"source": {"pdf_hash": "306fa70ded1d8c253169c3bc7ebd4d177ca7d6a6", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1807.03039v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "4269209787cb32acaf7d9db36ed19b40c0031c54", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/306fa70ded1d8c253169c3bc7ebd4d177ca7d6a6.txt", "contents": "\nGlow: Generative Flow with Invertible 1\u00d71 Convolutions\n\n\nDiederik P Kingma \nPrafulla Dhariwal \nSan Openai \nFrancisco \nGlow: Generative Flow with Invertible 1\u00d71 Convolutions\n\nFlow-based generative models(Dinh et al., 2014)are conceptually attractive due to tractability of the exact log-likelihood, tractability of exact latent-variable inference, and parallelizability of both training and synthesis. In this paper we propose Glow, a simple type of generative flow using an invertible 1 \u00d7 1 convolution. Using our method we demonstrate a significant improvement in log-likelihood on standard benchmarks. Perhaps most strikingly, we demonstrate that a generative model optimized towards the plain log-likelihood objective is capable of efficient realisticlooking synthesis and manipulation of large images. The code for our model is available at https://github.com/openai/glow. arXiv:1807.03039v2 [stat.ML]\n\nIntroduction\n\nTwo major unsolved problems in the field of machine learning are (1) data-efficiency: the ability to learn from few datapoints, like humans; and (2) generalization: robustness to changes of the task or its context. AI systems, for example, often do not work at all when given inputs that are different from their training distribution. A promise of generative models, a major branch of machine learning, * Equal contribution.\n\nPreprint. Work in progress. Figure 1: Synthetic celebrities sampled from our model; see Section 3 for architecture and method, and Section 5 for more results.\n\nis to overcome these limitations by: (1) learning realistic world models, potentially allowing agents to plan in a world model before actual interaction with the world, and (2) learning meaningful features of the input while requiring little or no human supervision or labeling. Since such features can be learned from large unlabeled datasets and are not necessarily task-specific, downstream solutions based on those features could potentially be more robust and more data efficient. In this paper we work towards this ultimate vision, in addition to intermediate applications, by aiming to improve upon the state-of-the-art of generative models.\n\nGenerative modeling is generally concerned with the extremely challenging task of modeling all dependencies within very high-dimensional input data, usually specified in the form of a full joint probability distribution. Since such joint models potentially capture all patterns that are present in the data, the applications of accurate generative models are near endless. Immediate applications are as diverse as speech synthesis, text analysis, semi-supervised learning and model-based control; see Section 4 for references.\n\nThe discipline of generative modeling has experienced enormous leaps in capabilities in recent years, mostly with likelihood-based methods (Graves, 2013;Welling, 2013, 2018;Dinh et al., 2014;van den Oord et al., 2016a) and generative adversarial networks (GANs) (Goodfellow et al., 2014) (see Section 4). Likelihood-based methods can be divided into three categories:\n\n1. Autoregressive models (Hochreiter and Schmidhuber, 1997;Graves, 2013;van den Oord et al., 2016a,b;Van Den Oord et al., 2016). Those have the advantage of simplicity, but have as disadvantage that synthesis has limited parallelizability, since the computational length of synthesis is proportional to the dimensionality of the data; this is especially troublesome for large images or video.\n\n2. Variational autoencoders (VAEs) Welling, 2013, 2018), which optimize a lower bound on the log-likelihood of the data. Variational autoencoders have the advantage of parallelizability of training and synthesis, but can be comparatively challenging to optimize .\n\n3. Flow-based generative models, first described in NICE (Dinh et al., 2014) and extended in RealNVP (Dinh et al., 2016). We explain the key ideas behind this class of model in the following sections.\n\nFlow-based generative models have so far gained little attention in the research community compared to GANs (Goodfellow et al., 2014) and VAEs (Kingma and Welling, 2013). Some of the merits of flow-based generative models include:\n\n\u2022 Exact latent-variable inference and log-likelihood evaluation. In VAEs, one is able to infer only approximately the value of the latent variables that correspond to a datapoint. GAN's have no encoder at all to infer the latents. In reversible generative models, this can be done exactly without approximation. Not only does this lead to accurate inference, it also enables optimization of the exact log-likelihood of the data, instead of a lower bound of it.\n\n\u2022 Efficient inference and efficient synthesis. Autoregressive models, such as the Pixel-CNN (van den Oord et al., 2016b), are also reversible, however synthesis from such models is difficult to parallelize, and typically inefficient on parallel hardware. Flow-based generative models like Glow (and RealNVP) are efficient to parallelize for both inference and synthesis.\n\n\u2022 Useful latent space for downstream tasks. The hidden layers of autoregressive models have unknown marginal distributions, making it much more difficult to perform valid manipulation of data. In GANs, datapoints can usually not be directly represented in a latent space, as they have no encoder and might not have full support over the data distribution. (Grover et al., 2018). This is not the case for reversible generative models and VAEs, which allow for various applications such as interpolations between datapoints and meaningful modifications of existing datapoints.\n\n\u2022 Significant potential for memory savings. Computing gradients in reversible neural networks requires an amount of memory that is constant instead of linear in their depth, as explained in the RevNet paper (Gomez et al., 2017).\n\nIn this paper we propose a new a generative flow coined Glow, with various new elements as described in Section 3. In Section 5, we compare our model quantitatively with previous flows, and in Section 6, we study the qualitative aspects of our model on high-resolution datasets.\n\n\nBackground: Flow-based Generative Models\n\nLet x be a high-dimensional random vector with unknown true distribution x \u223c p * (x). We collect an i.i.d. dataset D, and choose a model p \u03b8 (x) with parameters \u03b8. In case of discrete data x, the log-likelihood objective is then equivalent to minimizing:\nL(D) = 1 N N i=1 \u2212 log p \u03b8 (x (i) )(1)\nIn case of continuous data x, we minimize the following:\nL(D) 1 N N i=1 \u2212 log p \u03b8 (x (i) ) + c(2)\nwherex (i) = x (i) + u with u \u223c U(0, a), and c = \u2212M \u00b7 log a where a is determined by the discretization level of the data and M is the dimensionality of x. Both objectives (eqs. (1) and (2)) measure the expected compression cost in nats or bits; see (Dinh et al., 2016). Optimization is done through stochastic gradient descent using minibatches of data (Kingma and Ba, 2015).\n\nIn most flow-based generative models (Dinh et al., 2014(Dinh et al., , 2016, the generative process is defined as:\nz \u223c p \u03b8 (z) (3) x = g \u03b8 (z)(4)\nwhere z is the latent variable and p \u03b8 (z) has a (typically simple) tractable density, such as a spherical multivariate Gaussian distribution: p \u03b8 (z) = N (z; 0, I). The function g \u03b8 (..) is invertible, also called bijective, such that given a datapoint x, latent-variable inference is done by z = f \u03b8 (x) = g \u22121 \u03b8 (x). For brevity, we will omit subscript \u03b8 from f \u03b8 and g \u03b8 .\n\nWe focus on functions where f (and, likewise, g) is composed of a sequence of transformations: f = f 1 \u2022 f 2 \u2022 \u00b7 \u00b7 \u00b7 \u2022 f K , such that the relationship between x and z can be written as:\nx f1 \u2190\u2192 h 1 f2 \u2190\u2192 h 2 \u00b7 \u00b7 \u00b7 f K \u2190\u2192 z (5)\nSuch a sequence of invertible transformations is also called a (normalizing) flow (Rezende and Mohamed, 2015). Under the change of variables of eq. (4), the probability density function (pdf) of the model given a datapoint can be written as:\nlog p \u03b8 (x) = log p \u03b8 (z) + log | det(dz/dx)| (6) = log p \u03b8 (z) + K i=1 log | det(dh i /dh i\u22121 )|(7)\nwhere we define h 0 x and h K z for conciseness. The scalar value log | det(dh i /dh i\u22121 )| is the logarithm of the absolute value of the determinant of the Jacobian matrix (dh i /dh i\u22121 ), also called the log-determinant. This value is the change in log-density when going from h i\u22121 to h i under transformation f i . While it may look intimidating, its value can be surprisingly simple to compute for certain choices of transformations, as previously explored in (Deco and Brauer, 1995;Dinh et al., 2014;Rezende and Mohamed, 2015;Kingma et al., 2016). The basic idea is to choose transformations whose Jacobian dh i /dh i\u22121 is a triangular matrix. For those transformations, the log-determinant is simple:\nlog | det(dh i /dh i\u22121 )| = sum(log |diag(dh i /dh i\u22121 )|)(8)\nwhere sum() takes the sum over all vector elements, log() takes the element-wise logarithm, and diag() takes the diagonal of the Jacobian matrix.   (left) consists of an actnorm step, followed by an invertible 1 \u00d7 1 convolution, followed by an affine transformation (Dinh et al., 2014). This flow is combined with a multi-scale architecture (right). See Section 3 and Table 1. Here, x signifies the input of the layer, and y signifies its output. Both x and y are tensors of shape [h \u00d7 w \u00d7 c] with spatial dimensions (h, w) and channel dimension c. With (i, j) we denote spatial indices into tensors x and y. The function NN() is a nonlinear mapping, such as a (shallow) convolutional neural network like in ResNets (He et al., 2016) and RealNVP (Dinh et al., 2016). (10)) Affine coupling layer. See Section 3.3 and (Dinh et al., 2014) xa,\nDescription Function Reverse Function Log-determinant Actnorm. See Section 3.1. \u2200i, j : y i,j = s x i,j + b \u2200i, j : x i,j = (y i,j \u2212 b)/s h \u00b7 w \u00b7 sum(log |s|) Invertible 1 \u00d7 1 convolution. W : [c \u00d7 c]. See Section 3.2. \u2200i, j : y i,j = Wx i,j \u2200i, j : x i,j = W \u22121 y i,j h \u00b7 w \u00b7 log | det(W)| or h \u00b7 w \u00b7 sum(log |s|) (see eq.x b = split(x) (log s, t) = NN(x b ) s = exp(log s) ya = s xa + t y b = x b y = concat(ya, y b ) ya, y b = split(y) (log s, t) = NN(y b ) s = exp(log s) xa = (ya \u2212 t)/s x b = y b x = concat(xa, x b ) sum(log(|s|))\n\nProposed Generative Flow\n\nWe propose a new flow, building on the NICE and RealNVP flows proposed in (Dinh et al., 2014(Dinh et al., , 2016. It consists of a series of steps of flow, combined in a multi-scale architecture; see Figure 2. Each step of flow consists of actnorm (Section 3.1) followed by an invertible 1 \u00d7 1 convolution (Section 3.2), followed by a coupling layer (Section 3.3).\n\nThis flow is combined with a multi-scale architecture; due to space constraints we refer to (Dinh et al., 2016) for more details. This architecture has a depth of flow K, and number of levels L (Figure 2).\n\n\nActnorm: scale and bias layer with data dependent initialization\n\nIn Dinh et al. (2016), the authors propose the use of batch normalization (Ioffe and Szegedy, 2015) to alleviate the problems encountered when training deep models. However, since the variance of activations noise added by batch normalization is inversely proportional to minibatch size per GPU or other processing unit (PU), performance is known to degrade for small per-PU minibatch size. For large images, due to memory constraints, we learn with minibatch size 1 per PU. We propose an actnorm layer (for activation normalizaton), that performs an affine transformation of the activations using a scale and bias parameter per channel, similar to batch normalization. These parameters are initialized such that the post-actnorm activations per-channel have zero mean and unit variance given an initial minibatch of data. This is a form of data dependent initialization . After initialization, the scale and bias are treated as regular trainable parameters that are independent of the data.\n\n3.2 Invertible 1 \u00d7 1 convolution (Dinh et al., 2014(Dinh et al., , 2016 proposed a flow containing the equivalent of a permutation that reverses the ordering of the channels. We propose to replace this fixed permutation with a (learned) invertible 1 \u00d7 1 convolution, where the weight matrix is initialized as a random rotation matrix. Note that a 1 \u00d7 1 convolution with equal number of input and output channels is a generalization of a permutation operation.\n\nThe log-determinant of an invertible 1 \u00d7 1 convolution of a h \u00d7 w \u00d7 c tensor h with c \u00d7 c weight matrix W is straightforward to compute:\nlog det d conv2D(h; W) d h = h \u00b7 w \u00b7 log | det(W)|(9)\nThe cost of computing or differentiating det(W) is O(c 3 ), which is often comparable to the cost computing conv2D(h; W) which is O(h \u00b7 w \u00b7 c 2 ). We initialize the weights W as a random rotation matrix, having a log-determinant of 0; after one SGD step these values start to diverge from 0.\n\nLU Decomposition. This cost of computing det(W) can be reduced from O(c 3 ) to O(c) by parameterizing W directly in its LU decomposition:\nW = PL(U + diag(s))(10)\nwhere P is a permutation matrix, L is a lower triangular matrix with ones on the diagonal, U is an upper triangular matrix with zeros on the diagonal, and s is a vector. The log-determinant is then simply:\n\nlog | det(W)| = sum(log |s|)\n\nThe difference in computational cost will become significant for large c, although for the networks in our experiments we did not measure a large difference in wallclock computation time.\n\nIn this parameterization, we initialize the parameters by first sampling a random rotation matrix W, then computing the corresponding value of P (which remains fixed) and the corresponding initial values of L and U and s (which are optimized).\n\n\nAffine Coupling Layers\n\nA powerful reversible transformation where the forward function, the reverse function and the logdeterminant are computationally efficient, is the affine coupling layer introduced in (Dinh et al., 2014(Dinh et al., , 2016. See Table 1. An additive coupling layer is a special case with s = 1 and a log-determinant of 0.\n\nZero initialization. We initialize the last convolution of each NN() with zeros, such that each affine coupling layer initially performs an identity function; we found that this helps training very deep networks.\n\nSplit and concatenation. As in (Dinh et al., 2014), the split() function splits h the input tensor into two halves along the channel dimension, while the concat() operation performs the corresponding reverse operation: concatenation into a single tensor. In (Dinh et al., 2016), another type of split was introduced: along the spatial dimensions using a checkerboard pattern. In this work we only perform splits along the channel dimension, simplifying the overall architecture.  Figure 3: Comparison of the three variants -a reversing operation as described in the RealNVP, a fixed random permutation, and our proposed invertible 1 \u00d7 1 convolution, with additive (left) versus affine (right) coupling layers. We plot the mean and standard deviation across three runs with different random seeds.\n\nPermutation. Each step of flow above should be preceded by some kind of permutation of the variables that ensures that after sufficient steps of flow, each dimensions can affect every other dimension. The type of permutation specifically done in (Dinh et al., 2014(Dinh et al., , 2016 is equivalent to simply reversing the ordering of the channels (features) before performing an additive coupling layer. An alternative is to perform a (fixed) random permutation. Our invertible 1x1 convolution is a generalization of such permutations. In experiments we compare these three choices.\n\n\nRelated Work\n\nThis work builds upon the ideas and flows proposed in (Dinh et al., 2014) (NICE) and (Dinh et al., 2016) (RealNVP); comparisons with this work are made throughout this paper. In (Papamakarios et al., 2017) (MAF), the authors propose a generative flow based on IAF ; however, since synthesis from MAF is non-parallelizable and therefore inefficient, we omit it from comparisons. Synthesis from autoregressive (AR) models (Hochreiter and Schmidhuber, 1997;Graves, 2013;van den Oord et al., 2016a,b;Van Den Oord et al., 2016) is similarly non-parallelizable. Synthesis of high-dimensional data typically takes multiple orders of magnitude longer with AR models; see Oord et al., 2017) for evidence. Sampling 256 \u00d7 256 images with our largest models takes less than one second on current hardware. 2\n\nGANs (Goodfellow et al., 2014) are arguably best known for their ability to synthesize large and realistic images (Karras et al., 2017), in contrast with likelihood-based methods. Downsides of GANs are their general lack of latent-space encoders, their general lack of full support over the data (Grover et al., 2018), their difficulty of optimization, and their difficulty of assessing overfitting and generalization.\n\n\nQuantitative Experiments\n\nWe begin our experiments by comparing how our new flow compares against RealNVP (Dinh et al., 2016). We then apply our model on other standard datasets and compare log-likelihoods against previous generative models. See the appendix for optimization details. In our experiments, we let each NN() have three convolutional layers, where the two hidden layers have ReLU activation functions and 512 channels. The first and last convolutions are 3 \u00d7 3, while the center convolution is 1 \u00d7 1, since both its input and output have a large number of channels, in contrast with the first and last convolution.  Gains using invertible 1 \u00d7 1 Convolution. We choose the architecture described in Section 3, and consider three variations for the permutation of the channel variables -a reversing operation as described in the RealNVP, a fixed random permutation, and our invertible 1 \u00d7 1 convolution. We compare for models with only additive coupling layers, and models with affine coupling. As described earlier, we initialize all models with a data-dependent initialization which normalizes the activations of each layer. All models were trained with K = 32 and L = 3. The model with 1 \u00d7 1 convolution has a negligible 0.2% larger amount of parameters.\n\nWe compare the average negative log-likelihood (bits per dimension) on the CIFAR-10 (Krizhevsky, 2009) dataset, keeping all training conditions constant and averaging across three random seeds. The results are in Figure 3. As we see, for both additive and affine couplings, the invertible 1 \u00d7 1 convolution achieves a lower negative log likelihood and converges faster. The affine coupling models also converge faster than the additive coupling models. We noted that the increase in wallclock time for the invertible 1 \u00d7 1 convolution model was only \u2248 7%, thus the operation is computationally efficient as well.\n\nComparison with RealNVP on standard benchmarks. Besides the permutation operation, the RealNVP architecture has other differences such as the spatial coupling layers. In order to verify that our proposed architecture is overall competitive with the RealNVP architecture, we compare our models on various natural images datasets. In particular, we compare on CIFAR-10, ImageNet (Russakovsky et al., 2015) and LSUN (Yu et al., 2015) datasets. We follow the same preprocessing as in (Dinh et al., 2016). For Imagenet, we use the 32 \u00d7 32 and 64 \u00d7 64 downsampled version of ImageNet , and for LSUN we downsample to 96 \u00d7 96 and take random crops of 64 \u00d7 64. We also include the bits/dimension for our model trained on 256 \u00d7 256 CelebA HQ used in our qualitative experiments. 3 As we see in Table 2, our model achieves a significant improvement on all the datasets. \n\n\nQualitative Experiments\n\nWe now study the qualitative aspects of the model on high-resolution datasets. We choose the CelebA-HQ dataset (Karras et al., 2017), which consists of 30000 high resolution images from the CelebA dataset, and train the same architecture as above but now for images at a resolution of 256 2 , K = 32 and L = 6. To improve visual quality at the cost of slight decrease in color fidelity, we train our models on 5-bit images. We aim to study if our model can scale to high resolutions, produce realistic samples, and produce a meaningful latent space. Due to device memory constraints, at these resolutions we work with minibatch size 1 per PU, and use gradient checkpointing (Salimans and Bulatov, 2017). In the future, we could use a constant amount of memory independent of depth by utilizing the reversibility of the model (Gomez et al., 2017).\n\nConsistent with earlier work on likelihood-based generative models (Parmar et al., 2018), we found that sampling from a reduced-temperature model often results in higher-quality samples. When sampling with temperature T , we sample from the distribution p \u03b8,T (x) \u221d (p \u03b8 (x)) T 2 . In case of additive coupling layers, this can be achieved simply by multiplying the standard deviation of p \u03b8 (z) by a factor of T . Figure 4 shows the random samples obtained from our model. The images are extremely high quality for a non-autoregressive likelihood based model. To see how well we can interpolate, we take a pair of real images, encode them with the encoder, and linearly interpolate between the latents to obtain samples. The results in Figure 5 show that the image manifold of the generator distribution is extremely smooth and almost all intermediate samples look like realistic faces.\n\n\nSynthesis and Interpolation.\n\nSemantic Manipulation. We now consider modifying attributes of an image. To do so, we use the labels in the CelebA dataset. Each image has a binary label corresponding to presence or absence of attributes like smiling, blond hair, young, etc. This gives us 30000 binary labels for each attribute. We then calculate the average latent vector z pos for images with the attribute and z neg for images without, and then use the difference (z pos \u2212 z neg ) as a direction for manipulating. Note that this is a relatively small amount of supervision, and is done after the model is trained (no labels were used while training), making it extremely easy to do for a variety of different target attributes. The results are shown in Figure 6.\n\nEffect of temperature and model depth. Figure 8 shows how the sample quality and diversity varies with temperature. The highest temperatures have noisy images, possibly due to overestimating the entropy of the data distribution, and thus we choose a temperature of 0.7 as a sweet spot for diversity and quality of samples. Figure 9 shows how model depth affects the ability of the model to learn long-range dependencies. \n\n\nConclusion\n\nWe propose a new type of flow, coined Glow, and demonstrate improved quantitative performance in terms of log-likelihood on standard image modeling benchmarks. In addition, we demonstrate that when trained on high-resolution faces, our model is able to synthesize realistic images. Our model is, to the best of our knowledge, the first likelihood-based model in the literature that can efficiently synthesize high-resolution natural images. return z, logdet else: # Reverse computation _w = tf.matrix_inverse(w) _w = tf.reshape(_w, [1,1,c,c]) z = tf.nn.conv2d(z, _w, [1,1,1,1], 'SAME') logdet -= dlogdet return z, logdet\n\n\nC Optimization details\n\nWe use the Adam optimizer (Kingma and Ba, 2015) with \u03b1 = 0.001 and default \u03b2 1 and \u03b2 2 . In out quantitative experiments (Section 5, Table 2) we used the following hyperparameters (Table 4). In our qualitative experiments (Section 6), we used the following hyperparameters (Table 5) \n\n\nD Extra samples from qualitative experiments\n\nFor the class conditional CIFAR-10 and 32\u00d732 ImageNet samples, we used the same hyperparameters as the quantitative experiments, but with a class dependent prior at the top-most level. We also added a classification loss to predict the class label from the second last layer of the encoder, with a weight of \u03bb = 0.01. The results are in Figure 10.\n\n\nE Extra samples from the quantitative experiments\n\nFor direct comparison with other work, datasets are preprocessed exactly as in Dinh et al. (2016). Results are in Figure 11 and Figure 12. \n\n\nMulti-scale architecture(Dinh et al., 2016).\n\nFigure 2 :\n2We propose a generative flow where each step\n\nFigure 4 :\n4Random samples from the model, with temperature 0.7\n\nFigure 5 :Figure 6 :\n56Linear interpolation in latent space between real images Manipulation of attributes of a face. Each row is made by interpolating the latent code of an image along a vector corresponding to the attribute, with the middle image being the original image\n\nFigure 7 :Figure 8 :\n78Samples from model trained on 5-bit LSUN bedrooms, at temperature 0.875. Resolutions 64, 96 and 128 respectively 4 Effect of change of temperature. From left to right, samples obtained at temperatures 0, 0.25, 0.6, 0.7, 0.8, 0.9, 1.0\n\nFigure 9 :\n9Samples from shallow model on left vs deep model on right. Shallow model has L = 4 levels, while deep model has L = 6 levels\n\nFigure 11 : 0 Figure 12 :\n11012Samples from 8-bit, 64\u00d764 LSUN bedrooms, church and towers respectively. Temperature 1.Samples from an unconditional model with affine coupling layers trained on the CIFAR-10 dataset with temperature 1.0.\n\nTable 1 :\n1The three main components of our proposed flow, their reverses, and their log-determinants.\n\nTable 2 :\n2Best results in bits per dimension of our model compared to RealNVP.Model \nCIFAR-10 ImageNet 32x32 ImageNet 64x64 LSUN (bedroom) LSUN (tower) LSUN (church outdoor) \n\nRealNVP 3.49 \n4.28 \n3.98 \n2.72 \n2.81 \n3.08 \n\nGlow \n3.35 \n4.09 \n3.81 \n2.38 \n2.46 \n2.67 \n\n\n\nTable 4 :\n4Hyperparameters for results in Section 5,Table 2 DatasetMinibatch Size Levels (L) Depth per level (K) CouplingCIFAR-10 \n512 \n3 \n32 \nAffine \n\nImageNet, 32\u00d732 512 \n3 \n48 \nAffine \n\nImageNet, 64\u00d764 128 \n4 \n48 \nAffine \n\nLSUN, 64\u00d764 \n128 \n4 \n48 \nAffine \n\n\n\nTable 5 :\n5Hyperparameters for results in Section 6 Dataset Minibatch Size Levels (L) Depth per level (K) CouplingLSUN, 64\u00d764, 5-bit \n128 \n4 \n48 \nAdditive \n\nLSUN, 96\u00d796, 5-bit \n320 \n5 \n64 \nAdditive \n\nLSUN, 128\u00d7128, 5-bit \n160 \n5 \n64 \nAdditive \n\nCelebA HQ, 256\u00d7256, 5-bit 40 \n6 \n32 \nAdditive \n\n\nMore specifically, generating a 256 \u00d7 256 image at batch size 1 takes about 130ms on a single 1080 Ti, and about 550ms on a K80\nSince the original CelebA HQ dataset didn't have a validation set, we separated it into a training set of 27000 images and a validation set of 3000 images\nFor 128 \u00d7 128 and 96 \u00d7 96 versions, we centre cropped the original image, and downsampled. For 64 \u00d7 64 version, we took random crops from the 96 \u00d7 96 downsampled image as done inDinh et al. (2016) \nA Additional quantitative resultsSeeTable 3.\nHigher order statistical decorrelation without information loss. G Deco, W Brauer, Advances in Neural Information Processing Systems. Deco, G. and Brauer, W. (1995). Higher order statistical decorrelation without information loss. Advances in Neural Information Processing Systems, pages 247-254.\n\nNice: non-linear independent components estimation. L Dinh, D Krueger, Y Bengio, arXiv:1410.8516arXiv preprintDinh, L., Krueger, D., and Bengio, Y. (2014). Nice: non-linear independent components estimation. arXiv preprint arXiv:1410.8516.\n\nL Dinh, J Sohl-Dickstein, S Bengio, arXiv:1605.08803Density estimation using Real NVP. arXiv preprintDinh, L., Sohl-Dickstein, J., and Bengio, S. (2016). Density estimation using Real NVP. arXiv preprint arXiv:1605.08803.\n\nThe reversible residual network: Backpropagation without storing activations. A N Gomez, M Ren, R Urtasun, R B Grosse, Advances in Neural Information Processing Systems. Gomez, A. N., Ren, M., Urtasun, R., and Grosse, R. B. (2017). The reversible residual network: Backpropagation without storing activations. In Advances in Neural Information Processing Systems, pages 2211-2221.\n\nGenerative adversarial nets. I Goodfellow, J Pouget-Abadie, M Mirza, B Xu, D Warde-Farley, S Ozair, A Courville, Y Bengio, Advances in Neural Information Processing Systems. Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A., and Bengio, Y. (2014). Generative adversarial nets. In Advances in Neural Information Processing Systems, pages 2672-2680.\n\nGenerating sequences with recurrent neural networks. A Graves, arXiv:1308.0850arXiv preprintGraves, A. (2013). Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850.\n\nFlow-gan: Combining maximum likelihood and adversarial learning in generative models. A Grover, M Dhar, S Ermon, AAAI Conference on Artificial Intelligence. Grover, A., Dhar, M., and Ermon, S. (2018). Flow-gan: Combining maximum likelihood and adversarial learning in generative models. In AAAI Conference on Artificial Intelligence.\n\nK He, X Zhang, S Ren, J Sun, arXiv:1603.05027Identity mappings in deep residual networks. arXiv preprintHe, K., Zhang, X., Ren, S., and Sun, J. (2016). Identity mappings in deep residual networks. arXiv preprint arXiv:1603.05027.\n\nLong Short-Term Memory. S Hochreiter, J Schmidhuber, Neural computation. 98Hochreiter, S. and Schmidhuber, J. (1997). Long Short-Term Memory. Neural computation, 9(8):1735-1780.\n\nS Ioffe, C Szegedy, arXiv:1502.03167Batch normalization: Accelerating deep network training by reducing internal covariate shift. arXiv preprintIoffe, S. and Szegedy, C. (2015). Batch normalization: Accelerating deep network training by reducing internal covariate shift. arXiv preprint arXiv:1502.03167.\n\nProgressive growing of gans for improved quality, stability, and variation. T Karras, T Aila, S Laine, J Lehtinen, arXiv:1710.10196arXiv preprintKarras, T., Aila, T., Laine, S., and Lehtinen, J. (2017). Progressive growing of gans for improved quality, stability, and variation. arXiv preprint arXiv:1710.10196.\n\nAdam: A method for stochastic optimization. D Kingma, J Ba, Proceedings of the International Conference on Learning Representations. the International Conference on Learning RepresentationsKingma, D. and Ba, J. (2015). Adam: A method for stochastic optimization. Proceedings of the International Confer- ence on Learning Representations 2015.\n\nImproved variational inference with inverse autoregressive flow. D P Kingma, T Salimans, R Jozefowicz, X Chen, I Sutskever, M Welling, Advances in Neural Information Processing Systems. Kingma, D. P., Salimans, T., Jozefowicz, R., Chen, X., Sutskever, I., and Welling, M. (2016). Improved variational inference with inverse autoregressive flow. In Advances in Neural Information Processing Systems, pages 4743- 4751.\n\nAuto-encoding variational Bayes. D P Kingma, M Welling, Proceedings of the 2nd International Conference on Learning Representations. the 2nd International Conference on Learning RepresentationsKingma, D. P. and Welling, M. (2013). Auto-encoding variational Bayes. Proceedings of the 2nd International Confer- ence on Learning Representations.\n\nVariational autoencoders. Under Review. D P Kingma, M Welling, Kingma, D. P. and Welling, M. (2018). Variational autoencoders. Under Review.\n\nLearning multiple layers of features from tiny images. A Krizhevsky, Krizhevsky, A. (2009). Learning multiple layers of features from tiny images.\n\nA Oord, N Kalchbrenner, K Kavukcuoglu, arXiv:1601.06759Pixel recurrent neural networks. arXiv preprintOord, A. v. d., Kalchbrenner, N., and Kavukcuoglu, K. (2016). Pixel recurrent neural networks. arXiv preprint arXiv:1601.06759.\n\nA Oord, Y Li, I Babuschkin, K Simonyan, O Vinyals, K Kavukcuoglu, G V D Driessche, E Lockhart, L C Cobo, F Stimberg, arXiv:1711.10433Parallel wavenet: Fast high-fidelity speech synthesis. arXiv preprintOord, A. v. d., Li, Y., Babuschkin, I., Simonyan, K., Vinyals, O., Kavukcuoglu, K., Driessche, G. v. d., Lockhart, E., Cobo, L. C., Stimberg, F., et al. (2017). Parallel wavenet: Fast high-fidelity speech synthesis. arXiv preprint arXiv:1711.10433.\n\nMasked autoregressive flow for density estimation. G Papamakarios, I Murray, T Pavlakou, Advances in Neural Information Processing Systems. Papamakarios, G., Murray, I., and Pavlakou, T. (2017). Masked autoregressive flow for density estimation. In Advances in Neural Information Processing Systems, pages 2335-2344.\n\n. N Parmar, A Vaswani, J Uszkoreit, \u0141 Kaiser, N Shazeer, A Ku, arXiv:1802.05751Image transformer. arXiv preprintParmar, N., Vaswani, A., Uszkoreit, J., Kaiser, \u0141., Shazeer, N., and Ku, A. (2018). Image transformer. arXiv preprint arXiv:1802.05751.\n\nVariational inference with normalizing flows. D Rezende, S Mohamed, Proceedings of The 32nd International Conference on Machine Learning. The 32nd International Conference on Machine LearningRezende, D. and Mohamed, S. (2015). Variational inference with normalizing flows. In Proceedings of The 32nd International Conference on Machine Learning, pages 1530-1538.\n\nImagenet large scale visual recognition challenge. O Russakovsky, J Deng, H Su, J Krause, S Satheesh, S Ma, Z Huang, A Karpathy, A Khosla, M Bernstein, International Journal of Computer Vision. 1153Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy, A., Khosla, A., Bernstein, M., et al. (2015). Imagenet large scale visual recognition challenge. International Journal of Computer Vision, 115(3):211-252.\n\nGradient checkpointing. T Salimans, Y Bulatov, Salimans, T. and Bulatov, Y. (2017). Gradient checkpointing. https://github.com/openai/ gradient-checkpointing.\n\nWeight normalization: A simple reparameterization to accelerate training of deep neural networks. T Salimans, D P Kingma, arXiv:1602.07868arXiv preprintSalimans, T. and Kingma, D. P. (2016). Weight normalization: A simple reparameterization to accelerate training of deep neural networks. arXiv preprint arXiv:1602.07868.\n\nA Van Den Oord, S Dieleman, H Zen, K Simonyan, O Vinyals, A Graves, N Kalchbrenner, A Senior, K Kavukcuoglu, A Van Den Oord, N Kalchbrenner, K Kavukcuoglu, arXiv:1609.03499arXiv:1601.06759Wavenet: A generative model for raw audio. arXiv preprintPixel recurrent neural networksVan Den Oord, A., Dieleman, S., Zen, H., Simonyan, K., Vinyals, O., Graves, A., Kalchbrenner, N., Senior, A., and Kavukcuoglu, K. (2016). Wavenet: A generative model for raw audio. arXiv preprint arXiv:1609.03499. van den Oord, A., Kalchbrenner, N., and Kavukcuoglu, K. (2016a). Pixel recurrent neural networks. arXiv preprint arXiv:1601.06759.\n\nA Van Den Oord, N Kalchbrenner, O Vinyals, L Espeholt, A Graves, K Kavukcuoglu, arXiv:1606.05328Conditional image generation with PixelCNN decoders. arXiv preprintvan den Oord, A., Kalchbrenner, N., Vinyals, O., Espeholt, L., Graves, A., and Kavukcuoglu, K. (2016b). Conditional image generation with PixelCNN decoders. arXiv preprint arXiv:1606.05328.\n\nLsun: Construction of a large-scale image dataset using deep learning with humans in the loop. F Yu, Y Zhang, S Song, A Seff, Xiao , J , arXiv:1506.03365.(a)ClassconditionalCIFAR-10samplesarXiv preprintYu, F., Zhang, Y., Song, S., Seff, A., and Xiao, J. (2015). Lsun: Construction of a large-scale image dataset using deep learning with humans in the loop. arXiv preprint arXiv:1506.03365. (a) Class conditional CIFAR-10 samples\n\nClass conditional 32 \u00d7 32 ImageNet samples Figure 10: Class conditional samples on 5-bit CIFAR-10 and 32 \u00d7 32 ImageNet respectively. Tem- perature 0.75Class conditional 32 \u00d7 32 ImageNet samples Figure 10: Class conditional samples on 5-bit CIFAR-10 and 32 \u00d7 32 ImageNet respectively. Tem- perature 0.75\n", "annotations": {"author": "[{\"end\":76,\"start\":58},{\"end\":95,\"start\":77},{\"end\":107,\"start\":96},{\"end\":118,\"start\":108}]", "publisher": null, "author_last_name": "[{\"end\":75,\"start\":69},{\"end\":94,\"start\":86},{\"end\":106,\"start\":100},{\"end\":117,\"start\":108}]", "author_first_name": "[{\"end\":66,\"start\":58},{\"end\":68,\"start\":67},{\"end\":85,\"start\":77},{\"end\":99,\"start\":96}]", "author_affiliation": null, "title": "[{\"end\":55,\"start\":1},{\"end\":173,\"start\":119}]", "venue": null, "abstract": "[{\"end\":906,\"start\":175}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2840,\"start\":2826},{\"end\":2860,\"start\":2840},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2878,\"start\":2860},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":2905,\"start\":2878},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2973,\"start\":2949},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3115,\"start\":3081},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3128,\"start\":3115},{\"end\":3157,\"start\":3128},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3183,\"start\":3157},{\"end\":3505,\"start\":3485},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":3791,\"start\":3772},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3835,\"start\":3816},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4050,\"start\":4025},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4086,\"start\":4060},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":4731,\"start\":4712},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":5360,\"start\":5339},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5786,\"start\":5766},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":6773,\"start\":6754},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":6879,\"start\":6858},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":6937,\"start\":6919},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":6957,\"start\":6937},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":7743,\"start\":7716},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":8465,\"start\":8442},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8483,\"start\":8465},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":8509,\"start\":8483},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":8529,\"start\":8509},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9032,\"start\":9013},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":9480,\"start\":9463},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9512,\"start\":9493},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9582,\"start\":9563},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":10243,\"start\":10225},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":10263,\"start\":10243},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":10628,\"start\":10609},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":10812,\"start\":10794},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":10890,\"start\":10865},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":11835,\"start\":11817},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":11855,\"start\":11835},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":13788,\"start\":13770},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":13808,\"start\":13788},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":14172,\"start\":14153},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":14399,\"start\":14380},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":15184,\"start\":15166},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15204,\"start\":15184},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":15593,\"start\":15574},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15624,\"start\":15605},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":15725,\"start\":15698},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":15974,\"start\":15940},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":15987,\"start\":15974},{\"end\":16016,\"start\":15987},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":16042,\"start\":16016},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":16201,\"start\":16183},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":16347,\"start\":16322},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":16452,\"start\":16431},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16634,\"start\":16613},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":16863,\"start\":16844},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":19025,\"start\":18999},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":19052,\"start\":19035},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":19121,\"start\":19102},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":19641,\"start\":19620},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":20211,\"start\":20183},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20354,\"start\":20334},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":20445,\"start\":20424},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":23142,\"start\":23121},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":23925,\"start\":23907},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":24013,\"start\":23994},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":26453,\"start\":26435}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":24014,\"start\":23968},{\"attributes\":{\"id\":\"fig_1\"},\"end\":24072,\"start\":24015},{\"attributes\":{\"id\":\"fig_2\"},\"end\":24137,\"start\":24073},{\"attributes\":{\"id\":\"fig_3\"},\"end\":24412,\"start\":24138},{\"attributes\":{\"id\":\"fig_4\"},\"end\":24670,\"start\":24413},{\"attributes\":{\"id\":\"fig_5\"},\"end\":24808,\"start\":24671},{\"attributes\":{\"id\":\"fig_6\"},\"end\":25045,\"start\":24809},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":25149,\"start\":25046},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":25416,\"start\":25150},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":25678,\"start\":25417},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":25973,\"start\":25679}]", "paragraph": "[{\"end\":1347,\"start\":922},{\"end\":1507,\"start\":1349},{\"end\":2157,\"start\":1509},{\"end\":2685,\"start\":2159},{\"end\":3054,\"start\":2687},{\"end\":3448,\"start\":3056},{\"end\":3713,\"start\":3450},{\"end\":3915,\"start\":3715},{\"end\":4147,\"start\":3917},{\"end\":4609,\"start\":4149},{\"end\":4981,\"start\":4611},{\"end\":5557,\"start\":4983},{\"end\":5787,\"start\":5559},{\"end\":6067,\"start\":5789},{\"end\":6366,\"start\":6112},{\"end\":6462,\"start\":6406},{\"end\":6880,\"start\":6504},{\"end\":6996,\"start\":6882},{\"end\":7404,\"start\":7028},{\"end\":7592,\"start\":7406},{\"end\":7875,\"start\":7634},{\"end\":8684,\"start\":7977},{\"end\":9586,\"start\":8747},{\"end\":10515,\"start\":10151},{\"end\":10722,\"start\":10517},{\"end\":11782,\"start\":10791},{\"end\":12243,\"start\":11784},{\"end\":12381,\"start\":12245},{\"end\":12727,\"start\":12436},{\"end\":12866,\"start\":12729},{\"end\":13096,\"start\":12891},{\"end\":13126,\"start\":13098},{\"end\":13315,\"start\":13128},{\"end\":13560,\"start\":13317},{\"end\":13906,\"start\":13587},{\"end\":14120,\"start\":13908},{\"end\":14918,\"start\":14122},{\"end\":15503,\"start\":14920},{\"end\":16315,\"start\":15520},{\"end\":16735,\"start\":16317},{\"end\":18006,\"start\":16764},{\"end\":18620,\"start\":18008},{\"end\":19481,\"start\":18622},{\"end\":20355,\"start\":19509},{\"end\":21244,\"start\":20357},{\"end\":22010,\"start\":21277},{\"end\":22433,\"start\":22012},{\"end\":23068,\"start\":22448},{\"end\":23378,\"start\":23095},{\"end\":23774,\"start\":23427},{\"end\":23967,\"start\":23828}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":6405,\"start\":6367},{\"attributes\":{\"id\":\"formula_1\"},\"end\":6503,\"start\":6463},{\"attributes\":{\"id\":\"formula_2\"},\"end\":7027,\"start\":6997},{\"attributes\":{\"id\":\"formula_3\"},\"end\":7633,\"start\":7593},{\"attributes\":{\"id\":\"formula_4\"},\"end\":7976,\"start\":7876},{\"attributes\":{\"id\":\"formula_5\"},\"end\":8746,\"start\":8685},{\"attributes\":{\"id\":\"formula_6\"},\"end\":9910,\"start\":9587},{\"attributes\":{\"id\":\"formula_7\"},\"end\":10123,\"start\":9910},{\"attributes\":{\"id\":\"formula_8\"},\"end\":12435,\"start\":12382},{\"attributes\":{\"id\":\"formula_9\"},\"end\":12890,\"start\":12867}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":9122,\"start\":9115},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":13821,\"start\":13814},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":19413,\"start\":19406},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":23235,\"start\":23228},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":23283,\"start\":23275},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":23377,\"start\":23368}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":920,\"start\":908},{\"attributes\":{\"n\":\"2\"},\"end\":6110,\"start\":6070},{\"attributes\":{\"n\":\"3\"},\"end\":10149,\"start\":10125},{\"attributes\":{\"n\":\"3.1\"},\"end\":10789,\"start\":10725},{\"attributes\":{\"n\":\"3.3\"},\"end\":13585,\"start\":13563},{\"attributes\":{\"n\":\"4\"},\"end\":15518,\"start\":15506},{\"attributes\":{\"n\":\"5\"},\"end\":16762,\"start\":16738},{\"attributes\":{\"n\":\"6\"},\"end\":19507,\"start\":19484},{\"end\":21275,\"start\":21247},{\"attributes\":{\"n\":\"7\"},\"end\":22446,\"start\":22436},{\"end\":23093,\"start\":23071},{\"end\":23425,\"start\":23381},{\"end\":23826,\"start\":23777},{\"end\":24026,\"start\":24016},{\"end\":24084,\"start\":24074},{\"end\":24159,\"start\":24139},{\"end\":24434,\"start\":24414},{\"end\":24682,\"start\":24672},{\"end\":24835,\"start\":24810},{\"end\":25056,\"start\":25047},{\"end\":25160,\"start\":25151},{\"end\":25427,\"start\":25418},{\"end\":25689,\"start\":25680}]", "table": "[{\"end\":25416,\"start\":25230},{\"end\":25678,\"start\":25539},{\"end\":25973,\"start\":25794}]", "figure_caption": "[{\"end\":24014,\"start\":23970},{\"end\":24072,\"start\":24028},{\"end\":24137,\"start\":24086},{\"end\":24412,\"start\":24162},{\"end\":24670,\"start\":24437},{\"end\":24808,\"start\":24684},{\"end\":25045,\"start\":24841},{\"end\":25149,\"start\":25058},{\"end\":25230,\"start\":25162},{\"end\":25539,\"start\":25429},{\"end\":25794,\"start\":25691}]", "figure_ref": "[{\"end\":1385,\"start\":1377},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":10359,\"start\":10351},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":10720,\"start\":10711},{\"end\":14610,\"start\":14602},{\"end\":18229,\"start\":18221},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":20780,\"start\":20772},{\"end\":21102,\"start\":21094},{\"end\":22009,\"start\":22001},{\"end\":22059,\"start\":22051},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":22343,\"start\":22335},{\"end\":23773,\"start\":23764},{\"end\":23951,\"start\":23942},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23965,\"start\":23956}]", "bib_author_first_name": "[{\"end\":26566,\"start\":26565},{\"end\":26574,\"start\":26573},{\"end\":26851,\"start\":26850},{\"end\":26859,\"start\":26858},{\"end\":26870,\"start\":26869},{\"end\":27040,\"start\":27039},{\"end\":27048,\"start\":27047},{\"end\":27066,\"start\":27065},{\"end\":27341,\"start\":27340},{\"end\":27343,\"start\":27342},{\"end\":27352,\"start\":27351},{\"end\":27359,\"start\":27358},{\"end\":27370,\"start\":27369},{\"end\":27372,\"start\":27371},{\"end\":27674,\"start\":27673},{\"end\":27688,\"start\":27687},{\"end\":27705,\"start\":27704},{\"end\":27714,\"start\":27713},{\"end\":27720,\"start\":27719},{\"end\":27736,\"start\":27735},{\"end\":27745,\"start\":27744},{\"end\":27758,\"start\":27757},{\"end\":28094,\"start\":28093},{\"end\":28324,\"start\":28323},{\"end\":28334,\"start\":28333},{\"end\":28342,\"start\":28341},{\"end\":28573,\"start\":28572},{\"end\":28579,\"start\":28578},{\"end\":28588,\"start\":28587},{\"end\":28595,\"start\":28594},{\"end\":28828,\"start\":28827},{\"end\":28842,\"start\":28841},{\"end\":28983,\"start\":28982},{\"end\":28992,\"start\":28991},{\"end\":29365,\"start\":29364},{\"end\":29375,\"start\":29374},{\"end\":29383,\"start\":29382},{\"end\":29392,\"start\":29391},{\"end\":29646,\"start\":29645},{\"end\":29656,\"start\":29655},{\"end\":30011,\"start\":30010},{\"end\":30013,\"start\":30012},{\"end\":30023,\"start\":30022},{\"end\":30035,\"start\":30034},{\"end\":30049,\"start\":30048},{\"end\":30057,\"start\":30056},{\"end\":30070,\"start\":30069},{\"end\":30397,\"start\":30396},{\"end\":30399,\"start\":30398},{\"end\":30409,\"start\":30408},{\"end\":30748,\"start\":30747},{\"end\":30750,\"start\":30749},{\"end\":30760,\"start\":30759},{\"end\":30905,\"start\":30904},{\"end\":30998,\"start\":30997},{\"end\":31006,\"start\":31005},{\"end\":31022,\"start\":31021},{\"end\":31229,\"start\":31228},{\"end\":31237,\"start\":31236},{\"end\":31243,\"start\":31242},{\"end\":31257,\"start\":31256},{\"end\":31269,\"start\":31268},{\"end\":31280,\"start\":31279},{\"end\":31295,\"start\":31294},{\"end\":31299,\"start\":31296},{\"end\":31312,\"start\":31311},{\"end\":31324,\"start\":31323},{\"end\":31326,\"start\":31325},{\"end\":31334,\"start\":31333},{\"end\":31732,\"start\":31731},{\"end\":31748,\"start\":31747},{\"end\":31758,\"start\":31757},{\"end\":32001,\"start\":32000},{\"end\":32011,\"start\":32010},{\"end\":32022,\"start\":32021},{\"end\":32035,\"start\":32034},{\"end\":32045,\"start\":32044},{\"end\":32056,\"start\":32055},{\"end\":32294,\"start\":32293},{\"end\":32305,\"start\":32304},{\"end\":32663,\"start\":32662},{\"end\":32678,\"start\":32677},{\"end\":32686,\"start\":32685},{\"end\":32692,\"start\":32691},{\"end\":32702,\"start\":32701},{\"end\":32714,\"start\":32713},{\"end\":32720,\"start\":32719},{\"end\":32729,\"start\":32728},{\"end\":32741,\"start\":32740},{\"end\":32751,\"start\":32750},{\"end\":33080,\"start\":33079},{\"end\":33092,\"start\":33091},{\"end\":33314,\"start\":33313},{\"end\":33326,\"start\":33325},{\"end\":33328,\"start\":33327},{\"end\":33539,\"start\":33538},{\"end\":33555,\"start\":33554},{\"end\":33567,\"start\":33566},{\"end\":33574,\"start\":33573},{\"end\":33586,\"start\":33585},{\"end\":33597,\"start\":33596},{\"end\":33607,\"start\":33606},{\"end\":33623,\"start\":33622},{\"end\":33633,\"start\":33632},{\"end\":33648,\"start\":33647},{\"end\":33664,\"start\":33663},{\"end\":33680,\"start\":33679},{\"end\":34161,\"start\":34160},{\"end\":34177,\"start\":34176},{\"end\":34193,\"start\":34192},{\"end\":34204,\"start\":34203},{\"end\":34216,\"start\":34215},{\"end\":34226,\"start\":34225},{\"end\":34610,\"start\":34609},{\"end\":34616,\"start\":34615},{\"end\":34625,\"start\":34624},{\"end\":34633,\"start\":34632},{\"end\":34644,\"start\":34640},{\"end\":34648,\"start\":34647}]", "bib_author_last_name": "[{\"end\":26571,\"start\":26567},{\"end\":26581,\"start\":26575},{\"end\":26856,\"start\":26852},{\"end\":26867,\"start\":26860},{\"end\":26877,\"start\":26871},{\"end\":27045,\"start\":27041},{\"end\":27063,\"start\":27049},{\"end\":27073,\"start\":27067},{\"end\":27349,\"start\":27344},{\"end\":27356,\"start\":27353},{\"end\":27367,\"start\":27360},{\"end\":27379,\"start\":27373},{\"end\":27685,\"start\":27675},{\"end\":27702,\"start\":27689},{\"end\":27711,\"start\":27706},{\"end\":27717,\"start\":27715},{\"end\":27733,\"start\":27721},{\"end\":27742,\"start\":27737},{\"end\":27755,\"start\":27746},{\"end\":27765,\"start\":27759},{\"end\":28101,\"start\":28095},{\"end\":28331,\"start\":28325},{\"end\":28339,\"start\":28335},{\"end\":28348,\"start\":28343},{\"end\":28576,\"start\":28574},{\"end\":28585,\"start\":28580},{\"end\":28592,\"start\":28589},{\"end\":28599,\"start\":28596},{\"end\":28839,\"start\":28829},{\"end\":28854,\"start\":28843},{\"end\":28989,\"start\":28984},{\"end\":29000,\"start\":28993},{\"end\":29372,\"start\":29366},{\"end\":29380,\"start\":29376},{\"end\":29389,\"start\":29384},{\"end\":29401,\"start\":29393},{\"end\":29653,\"start\":29647},{\"end\":29659,\"start\":29657},{\"end\":30020,\"start\":30014},{\"end\":30032,\"start\":30024},{\"end\":30046,\"start\":30036},{\"end\":30054,\"start\":30050},{\"end\":30067,\"start\":30058},{\"end\":30078,\"start\":30071},{\"end\":30406,\"start\":30400},{\"end\":30417,\"start\":30410},{\"end\":30757,\"start\":30751},{\"end\":30768,\"start\":30761},{\"end\":30916,\"start\":30906},{\"end\":31003,\"start\":30999},{\"end\":31019,\"start\":31007},{\"end\":31034,\"start\":31023},{\"end\":31234,\"start\":31230},{\"end\":31240,\"start\":31238},{\"end\":31254,\"start\":31244},{\"end\":31266,\"start\":31258},{\"end\":31277,\"start\":31270},{\"end\":31292,\"start\":31281},{\"end\":31309,\"start\":31300},{\"end\":31321,\"start\":31313},{\"end\":31331,\"start\":31327},{\"end\":31343,\"start\":31335},{\"end\":31745,\"start\":31733},{\"end\":31755,\"start\":31749},{\"end\":31767,\"start\":31759},{\"end\":32008,\"start\":32002},{\"end\":32019,\"start\":32012},{\"end\":32032,\"start\":32023},{\"end\":32042,\"start\":32036},{\"end\":32053,\"start\":32046},{\"end\":32059,\"start\":32057},{\"end\":32302,\"start\":32295},{\"end\":32313,\"start\":32306},{\"end\":32675,\"start\":32664},{\"end\":32683,\"start\":32679},{\"end\":32689,\"start\":32687},{\"end\":32699,\"start\":32693},{\"end\":32711,\"start\":32703},{\"end\":32717,\"start\":32715},{\"end\":32726,\"start\":32721},{\"end\":32738,\"start\":32730},{\"end\":32748,\"start\":32742},{\"end\":32761,\"start\":32752},{\"end\":33089,\"start\":33081},{\"end\":33100,\"start\":33093},{\"end\":33323,\"start\":33315},{\"end\":33335,\"start\":33329},{\"end\":33552,\"start\":33540},{\"end\":33564,\"start\":33556},{\"end\":33571,\"start\":33568},{\"end\":33583,\"start\":33575},{\"end\":33594,\"start\":33587},{\"end\":33604,\"start\":33598},{\"end\":33620,\"start\":33608},{\"end\":33630,\"start\":33624},{\"end\":33645,\"start\":33634},{\"end\":33661,\"start\":33649},{\"end\":33677,\"start\":33665},{\"end\":33692,\"start\":33681},{\"end\":34174,\"start\":34162},{\"end\":34190,\"start\":34178},{\"end\":34201,\"start\":34194},{\"end\":34213,\"start\":34205},{\"end\":34223,\"start\":34217},{\"end\":34238,\"start\":34227},{\"end\":34613,\"start\":34611},{\"end\":34622,\"start\":34617},{\"end\":34630,\"start\":34626},{\"end\":34638,\"start\":34634}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":18030110},\"end\":26796,\"start\":26500},{\"attributes\":{\"doi\":\"arXiv:1410.8516\",\"id\":\"b1\"},\"end\":27037,\"start\":26798},{\"attributes\":{\"doi\":\"arXiv:1605.08803\",\"id\":\"b2\"},\"end\":27260,\"start\":27039},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":8869447},\"end\":27642,\"start\":27262},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":1033682},\"end\":28038,\"start\":27644},{\"attributes\":{\"doi\":\"arXiv:1308.0850\",\"id\":\"b5\"},\"end\":28235,\"start\":28040},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":19115748},\"end\":28570,\"start\":28237},{\"attributes\":{\"doi\":\"arXiv:1603.05027\",\"id\":\"b7\"},\"end\":28801,\"start\":28572},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":1915014},\"end\":28980,\"start\":28803},{\"attributes\":{\"doi\":\"arXiv:1502.03167\",\"id\":\"b9\"},\"end\":29286,\"start\":28982},{\"attributes\":{\"doi\":\"arXiv:1710.10196\",\"id\":\"b10\"},\"end\":29599,\"start\":29288},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":6628106},\"end\":29943,\"start\":29601},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":11514441},\"end\":30361,\"start\":29945},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":216078090},\"end\":30705,\"start\":30363},{\"attributes\":{\"id\":\"b14\"},\"end\":30847,\"start\":30707},{\"attributes\":{\"id\":\"b15\"},\"end\":30995,\"start\":30849},{\"attributes\":{\"doi\":\"arXiv:1601.06759\",\"id\":\"b16\"},\"end\":31226,\"start\":30997},{\"attributes\":{\"doi\":\"arXiv:1711.10433\",\"id\":\"b17\"},\"end\":31678,\"start\":31228},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":7166013},\"end\":31996,\"start\":31680},{\"attributes\":{\"doi\":\"arXiv:1802.05751\",\"id\":\"b19\"},\"end\":32245,\"start\":31998},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":12554042},\"end\":32609,\"start\":32247},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":2930547},\"end\":33053,\"start\":32611},{\"attributes\":{\"id\":\"b22\"},\"end\":33213,\"start\":33055},{\"attributes\":{\"doi\":\"arXiv:1602.07868\",\"id\":\"b23\"},\"end\":33536,\"start\":33215},{\"attributes\":{\"doi\":\"arXiv:1609.03499\",\"id\":\"b24\"},\"end\":34158,\"start\":33538},{\"attributes\":{\"id\":\"b25\"},\"end\":34512,\"start\":34160},{\"attributes\":{\"id\":\"b26\"},\"end\":34942,\"start\":34514},{\"attributes\":{\"id\":\"b27\"},\"end\":35246,\"start\":34944}]", "bib_title": "[{\"end\":26563,\"start\":26500},{\"end\":27338,\"start\":27262},{\"end\":27671,\"start\":27644},{\"end\":28321,\"start\":28237},{\"end\":28825,\"start\":28803},{\"end\":29643,\"start\":29601},{\"end\":30008,\"start\":29945},{\"end\":30394,\"start\":30363},{\"end\":31729,\"start\":31680},{\"end\":32291,\"start\":32247},{\"end\":32660,\"start\":32611}]", "bib_author": "[{\"end\":26573,\"start\":26565},{\"end\":26583,\"start\":26573},{\"end\":26858,\"start\":26850},{\"end\":26869,\"start\":26858},{\"end\":26879,\"start\":26869},{\"end\":27047,\"start\":27039},{\"end\":27065,\"start\":27047},{\"end\":27075,\"start\":27065},{\"end\":27351,\"start\":27340},{\"end\":27358,\"start\":27351},{\"end\":27369,\"start\":27358},{\"end\":27381,\"start\":27369},{\"end\":27687,\"start\":27673},{\"end\":27704,\"start\":27687},{\"end\":27713,\"start\":27704},{\"end\":27719,\"start\":27713},{\"end\":27735,\"start\":27719},{\"end\":27744,\"start\":27735},{\"end\":27757,\"start\":27744},{\"end\":27767,\"start\":27757},{\"end\":28103,\"start\":28093},{\"end\":28333,\"start\":28323},{\"end\":28341,\"start\":28333},{\"end\":28350,\"start\":28341},{\"end\":28578,\"start\":28572},{\"end\":28587,\"start\":28578},{\"end\":28594,\"start\":28587},{\"end\":28601,\"start\":28594},{\"end\":28841,\"start\":28827},{\"end\":28856,\"start\":28841},{\"end\":28991,\"start\":28982},{\"end\":29002,\"start\":28991},{\"end\":29374,\"start\":29364},{\"end\":29382,\"start\":29374},{\"end\":29391,\"start\":29382},{\"end\":29403,\"start\":29391},{\"end\":29655,\"start\":29645},{\"end\":29661,\"start\":29655},{\"end\":30022,\"start\":30010},{\"end\":30034,\"start\":30022},{\"end\":30048,\"start\":30034},{\"end\":30056,\"start\":30048},{\"end\":30069,\"start\":30056},{\"end\":30080,\"start\":30069},{\"end\":30408,\"start\":30396},{\"end\":30419,\"start\":30408},{\"end\":30759,\"start\":30747},{\"end\":30770,\"start\":30759},{\"end\":30918,\"start\":30904},{\"end\":31005,\"start\":30997},{\"end\":31021,\"start\":31005},{\"end\":31036,\"start\":31021},{\"end\":31236,\"start\":31228},{\"end\":31242,\"start\":31236},{\"end\":31256,\"start\":31242},{\"end\":31268,\"start\":31256},{\"end\":31279,\"start\":31268},{\"end\":31294,\"start\":31279},{\"end\":31311,\"start\":31294},{\"end\":31323,\"start\":31311},{\"end\":31333,\"start\":31323},{\"end\":31345,\"start\":31333},{\"end\":31747,\"start\":31731},{\"end\":31757,\"start\":31747},{\"end\":31769,\"start\":31757},{\"end\":32010,\"start\":32000},{\"end\":32021,\"start\":32010},{\"end\":32034,\"start\":32021},{\"end\":32044,\"start\":32034},{\"end\":32055,\"start\":32044},{\"end\":32061,\"start\":32055},{\"end\":32304,\"start\":32293},{\"end\":32315,\"start\":32304},{\"end\":32677,\"start\":32662},{\"end\":32685,\"start\":32677},{\"end\":32691,\"start\":32685},{\"end\":32701,\"start\":32691},{\"end\":32713,\"start\":32701},{\"end\":32719,\"start\":32713},{\"end\":32728,\"start\":32719},{\"end\":32740,\"start\":32728},{\"end\":32750,\"start\":32740},{\"end\":32763,\"start\":32750},{\"end\":33091,\"start\":33079},{\"end\":33102,\"start\":33091},{\"end\":33325,\"start\":33313},{\"end\":33337,\"start\":33325},{\"end\":33554,\"start\":33538},{\"end\":33566,\"start\":33554},{\"end\":33573,\"start\":33566},{\"end\":33585,\"start\":33573},{\"end\":33596,\"start\":33585},{\"end\":33606,\"start\":33596},{\"end\":33622,\"start\":33606},{\"end\":33632,\"start\":33622},{\"end\":33647,\"start\":33632},{\"end\":33663,\"start\":33647},{\"end\":33679,\"start\":33663},{\"end\":33694,\"start\":33679},{\"end\":34176,\"start\":34160},{\"end\":34192,\"start\":34176},{\"end\":34203,\"start\":34192},{\"end\":34215,\"start\":34203},{\"end\":34225,\"start\":34215},{\"end\":34240,\"start\":34225},{\"end\":34615,\"start\":34609},{\"end\":34624,\"start\":34615},{\"end\":34632,\"start\":34624},{\"end\":34640,\"start\":34632},{\"end\":34647,\"start\":34640},{\"end\":34651,\"start\":34647}]", "bib_venue": "[{\"end\":29790,\"start\":29734},{\"end\":30556,\"start\":30496},{\"end\":32438,\"start\":32385},{\"end\":26632,\"start\":26583},{\"end\":26848,\"start\":26798},{\"end\":27124,\"start\":27091},{\"end\":27430,\"start\":27381},{\"end\":27816,\"start\":27767},{\"end\":28091,\"start\":28040},{\"end\":28392,\"start\":28350},{\"end\":28660,\"start\":28617},{\"end\":28874,\"start\":28856},{\"end\":29110,\"start\":29018},{\"end\":29362,\"start\":29288},{\"end\":29732,\"start\":29661},{\"end\":30129,\"start\":30080},{\"end\":30494,\"start\":30419},{\"end\":30745,\"start\":30707},{\"end\":30902,\"start\":30849},{\"end\":31083,\"start\":31052},{\"end\":31414,\"start\":31361},{\"end\":31818,\"start\":31769},{\"end\":32383,\"start\":32315},{\"end\":32803,\"start\":32763},{\"end\":33077,\"start\":33055},{\"end\":33311,\"start\":33215},{\"end\":33767,\"start\":33726},{\"end\":34307,\"start\":34256},{\"end\":34607,\"start\":34514},{\"end\":35075,\"start\":34944}]"}}}, "year": 2023, "month": 12, "day": 17}