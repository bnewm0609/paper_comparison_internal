{"id": 7000147, "updated": "2023-09-27 22:12:13.79", "metadata": {"title": "Using proximity to compute semantic relatedness in RDF graphs", "authors": "[{\"first\":\"Jos\u00e9\",\"last\":\"Leal\",\"middle\":[\"Paulo\"]}]", "venue": "Comput. Sci. Inf. Syst.", "journal": "Comput. Sci. Inf. Syst.", "publication_date": {"year": 2013, "month": null, "day": null}, "abstract": "Extracting the semantic relatedness of terms is an important topic in several areas, including data mining, information retrieval and web recommendation. This paper presents an approach for computing the semantic relatedness of terns in RDF graphs based on the notion of proximity. It proposes a formal definition of proximity in terms of the set paths connecting two concept nodes, and an algorithm for finding this set and computing proximity with a given error margin. This algorithm was implemented on a tool called Shakti that extracts relevant ontological data for a given domain from DBpedia \u2013 a community effort to extract structured data from the Wikipedia. To validate the proposed approach Shakti was used to recommend web pages on a Portuguese social site related to alternative music and the results of that experiment are also reported.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2005655410", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/comsis/Leal13", "doi": "10.2298/csis121130060l"}}, "content": {"source": {"pdf_hash": "0f1a8eafb96b4d851f5f4a2ea5185523d87c1de8", "pdf_src": "Grobid", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": "CCBYNCND", "open_access_url": "http://www.doiserbia.nb.rs/ft.aspx?id=1820-02141300060L", "status": "GOLD"}}, "grobid": {"id": "a490c78893c44f50996bc0a7e8c85abe852f083b", "type": "plain-text", "url": "s3://ai2-s2-science-parse-plus-prod/parse-results/s2orc_worker/0f1a8eafb96b4d851f5f4a2ea5185523d87c1de8.txt", "contents": "\nUsing proximity to compute semantic relatedness in RDF graphs\n\n\nPaulo Leal zp@dcc.fc.up.pt \nFaculty of Sciences\nCRACS & INESC-Porto LA\nUniversity of Porto Porto\nPortugal\n\nUsing proximity to compute semantic relatedness in RDF graphs\n4B1D14C7583C197608E960F0EABDC3CF10.2298/CSIS121130060LReceived: November 30, 2012; Accepted: May 15, 2013.semantic similaritysemantic relatednessontology generationweb recommendationprocessing Wikipedia data\nExtracting the semantic relatedness of terms is an important topic in several areas, including data mining, information retrieval and web recommendation.This paper presents an approach for computing the semantic relatedness of terns in RDF graphs based on the notion of proximity.It proposes a formal definition of proximity in terms of the set paths connecting two concept nodes, and an algorithm for finding this set and computing proximity with a given error margin.This algorithm was implemented on a tool called Shakti that extracts relevant ontological data for a given domain from DBpedia -a community effort to extract structured data from the Wikipedia.To validate the proposed approach Shakti was used to recommend web pages on a Portuguese social site related to alternative music and the results of that experiment are also reported.\n\nIntroduction\n\nSearching effectively on a comprehensive information source as the Web or just on the Wikipedia usually boils down to using the right search terms.Most search engines retrieve documents where the searched terms occur exactly.Although stemming search terms to obtain similar or related terms (e.g.synonyms) is a well known technique for a long time [15], it is usually considered irrelevant in general and search engines of reference no longer use it [1].\n\nNevertheless, there are cases where semantic search, a search where the meaning of terms is taken in consideration, is in fact useful.For instance, to compare the similarity of genes and proteins in bio-informatics, to compare geographic features in geographical informatics, and to relate multiword terms in computational linguistics.\n\nThe motivation for this research in semantic relatedness comes from another application area, recommendation.Most recommenders use statistical methods, such as collaborative filtering, to make suggestions based on the choices of users with a similar choice pattern.For instance, an on-line library may recommend a book selected by other users that also bought the books already in the shopping basket.This approach has a cold start issue: what should be recommended to someone that was not yet bought or searched anything?to whom recommend a book that was just published and few people have bought?\n\nAn alternative approach is to base recommenders on an ontology of recommend items.An on-line library can take advantage from the structure of an existing book classification, such as the Library of Congress Classification system.However, in many cases such classification does not exist and the cost of creating and maintaining an ontology would be unbearable.This is specially the case if one intends to create an ontology on a unstructured collection of information, such as a folksonomy.\n\nConsider a content-based web recommendation system for a social network, where multimedia content (e.g.photos, videos, songs) is classified by user-provided tags.One could simply recommend content with common tags but this approach would provide only a few recommendations since few content items share the exact same tags.In this case, to increment the number of results, one could search for related tags.For instance, consider that your content is related to music that users tag with names of artists and bands, instruments, music genres, and so forth.To compute the semantic relatedness among tags in such a site one needs a specific ontology adapted to this type of content.\n\nIt should be noticed that, although several ontologies on music already exist, in particular the Music Ontology Specification1 , they are not adjusted to this particular use.They have a comprehensive coverage of very broad music genres but lack most of the sub-genres pertinent to an alternative music site.The same would happen with lexical thesaurus, such as WordNet.To create and maintain an ontology adjusted to a very specific kind the best approach is to extract it from an existing source.The DBpedia2 is a knowledge base that harvests the content of the Wikipedia and thus covers almost all imaginable subjects.It is based on an ontology that classifies Wikipedia pages and on mapping rules that convert the content of Wikipedia info-boxes and tables into Resource Description Framework (RDF) triplets available from a SPARQL endpoint (SPARQL is a recursive acronym for SPARQL Protocol and RDF Query Language).\n\nIn this paper we present Shakti, a tool to extract an ontology for a given domain from DBPedia and use it to compute the semantic relatedness of terms defined as labels of concepts in that ontology.One of the main contributions of this paper is the algorithm used for computing relatedness.Most ontologies based algorithms for computing relatedness assume that ontologies are taxonomies or at least direct acyclic graphs, which is not generally the case of an ontology extracted from DBpedia.Also, these algorithms usually focus on a notion of distance.Instead the proposed algorithm is based on a notion of proximity.Proximity measures how connected two terms are, rather than how distant they are.A term may be at the same distance to other two terms but have more connections to one than the other.Terms with more connections are in a sense closer and thus have an higher proximity.\n\nThe rest of this paper is organized as follow.The following section presents related work on semantic relatedness algorithms and on the use of knowledge bases such as DBpedia.Section 3 is the main section as it introduces the concept of proximity, provides a formal definition of this concept in terms of sets of paths, and presents an algorithm for computing proximity based on the proposed definition.Section 4 presents the design and implementation of Shakti, a tool implementing the proposed algorithm.The following section describes a use of Shakti to populate a proximity table of a recommender service that was used as validation of the proposed approach.The final section summarizes the contributions of this paper and highlights future directions of this research.\n\n\nRelated Work\n\nThis section summarizes the concepts and technologies that are typically used as basis for the computation of semantic relatedness of terms in the Web.\n\n\nKnowledge representation\n\nCurrently, the Web is a set of unstructured documents designed to be read by people, not machines.The semantic web -sponsored by W3C -aims to enrich the existing Web with a layer of machine-interpretable metadata on Web resources so that computer programs can predictably exchange and infer new information.This metadata is usually represented in RDF.Its specification [2] includes a data model and a XML binding.The RDF data model is a collection of triples -subject, predicate and object -that can be viewed as a labeled directed multigraph; a model well suited for knowledge representation.Ontologies formally represent knowledge as a set of concepts within a domain, and the relationships between those concepts.Ontology languages built on top of RDF provide a formal way to encode knowledge about specific domains, including reasoning rules to process that knowledge [4].In particular, RDF Schema [3] provides a simple ontology language for RDF metadata that can be complemented with the more expressive constructs of OWL [12].The triplestores can be queried and updated using SPARQL.\n\n\nKnowledge bases\n\nKnowledge bases are essentially information repositories that can be categorized as machine or human-readable information repositories.A human-readable knowledge base can be coupled with a machine-readable one, through replication or some real-time and automatic interface.In that case, client programs may use reasoning on computer-readable portion of data to provide, for instance, better search on human-readable texts.A great example is the machine-readable DBpedia extraction from human-readable Wikipedia.\n\nWikipedia articles consist mostly of free text.However, the joint efforts of human volunteers have recently obtained numerous facts from Wikipedia, storing them as machine-harvestable triplestores in Wikipedia infoboxes [17].The DBpedia project extracts this structured information and combines this information into a huge, cross-domain knowledge base.DBpedia uses RDF as the data model for representing extracted information and for publishing it on the Web.Then, SPARQL can be used as the query language to extract information allowing users to query relationships and properties associated with many different Wikipedia resources.\n\n\nSemantic similarity\n\nExtracting the semantic relatedness of terms is an important topic in several areas, including data mining, information retrieval and web recommendation.Typically there are two ways to compute semantic relatedness on data:\n\n1. by defining a topological similarity using ontologies to define the distance between words (e.g. in a directed acyclic graph the minimal distance between two term nodes); 2. by using statistical means such as a vector space model to correlate words from a text corpus (co-occurrence).\n\nSemantic similarity measures have been developed and applied in several domain ontologies such as in Computational Linguistics (e.g.Wordnet 3 ) or Biomedical Informatics (e.g.Gene Ontology4 ).In order to calculate the topological similarity one can rely either on ontological concepts (edge-based or node-based) or ontological instances (pairwise or groupwise).A well-known node-based metric is the one developed by Resnik [13] which computes the probability of finding the concept (term or word) in a given corpus.It relies on the lowest common subsumer which has the shortest distance from the two concepts compared.This metric is usually applied on WordNet [6] a lexical database that encodes relations between words such as synonymy and hypernymy.A survey [14] between human and machine similarity judgments on a Wordnet taxonomy reveal highest correlation values on other topological metrics such the ones developed by Jiang [9] and Lin [10].\n\nStatistical computation of semantic relatedness relies on algebraic models for representing text documents (and any objects, in general) as vectors of identifiers.Comparing text fragments as bags of words in vector space [1] is the simplest technique, but is restricted to learning from individual word occurrences.The semantic sensitivity is another issue where documents with similar context but different term vocabulary won't be associated, resulting in a \"false negative match\".Latent Semantic Analysis (LSA) [5] is a statistical technique, which leverage word co-occurrence information from a large unlabelled corpus of text [8].\n\nCurrently, Wikipedia has been used for information retrieval related tasks [16], [18], [7] and [11].This is due to the increasing amount of articles available and the associated semantic information (e.g.article and category links).\n\nOne of these efforts is the Explicit Semantic Analysis(ESA), a novel method that represents the meaning of texts in a high-dimensional space of concepts derived from Wikipedia and the Open Directory Project (ODP).It uses machine learning techniques to represent the meaning of any text as a weighted vector of Wikipedia-based concepts.The relatedness of texts in this space is obtained by comparing the corresponding vectors using conventional metrics (e.g.cosine) [7].\n\n\nProximity\n\nThis section presents an approach to compute semantic relatedness using ontological information in RDF graphs.The first subsection provides the motivation for using proximity, rather than distance, as the underlying concept for computing semantic relatedness between two nodes.The following subsection presents a formal definition of the proximity based on sets of paths connecting the nodes.The final subsection outlines the algorithm for computing proximity using the proposed definition.\n\n\nMotivation\n\nConcepts on DBPedia are represented by nodes.Take for instance the music domain used for the case study presented in section 5. Singers, bands, music genres, instruments or virtually any concept related to music is represented as a node in DBpedia.These nodes are related by properties, such as has genre connecting singers to genres, and thus form a graph.This graph can be retrieved in RDF format using the SPARQL endpoint of DBpedia.\n\nThe core idea in the research presented in this paper is to use the RDF graph to compute the similarity between nodes.Actually, the goal is the similarity between terms, but each node and arc of this graph has a label -a string representation or stringification -that can be seen as a term.\n\nAt first sight relatedness may seem to be the inverse of the distance between nodes.Two nodes far apart are unrelated and every node is totally (infinitely) related to itself.Interpreting relatedness as a function of distance has an obvious advantage: computing distances between nodes in a graph is a well studied problem with several known algorithms.After assigning a weight to each arc one can compute the distance as the minimum length of all the paths connecting the two nodes.\n\nOn a closer inspection this interpretation of relatedness as the inverse of distance reveals some problems.Consider the graph in Fig. 1.Depending on the weight assigned to the arcs formed by the properties has type and has genre, the distances between Lady Gaga, Madonna and Queen are the same.If the has genre has less weight than has type, this would mean that the band Queen is as related to Lady Gaga as Madonna, which obviously should not be the case.On the other hand, if has type has less weight than has genre then Queen is more related to AC/DC than Lady Gaga or Madonna simply because they are both bands, which also should not be the case.\n\nIn the proposed approach we consider proximity rather than distance as a measure of relatedness among nodes.By definition5 , proximity is closeness; the state of being near as in space, time, or relationship.Rather than focusing solely on minimum path length, proximity balances also the number of existing paths between nodes.As a metaphor consider the proximity between two persons.More than resulting from a single common interest, however strong, it results from a collection of common interests.\n\nWith this notion of proximity, Lady Gaga and Madonna are more related to each other than with Queen since they have two different paths connecting each other, one through Musical Artist and another Pop Rock.By the same token the band Queen is more related to them than to the band AC/DC.\n\nAn algorithm to compute proximity must take into account the several paths connecting two nodes and their weights.However, paths are made of several edges, and the weight of an edge should contribute less to proximity as it is further away in the path.In fact, there must be a limit in number of edges in a path, as RDF graphs are usually connected graphs.\n\n\nDefinition\n\nTo be of practical use the notion of proximity among RDF nodes needs to be formalized.Proximity must be a function of graph nodes returning their amount of proximity.Given a graph with a set of nodes V the objective of this subsection is thus to define a function\np : V \u00d7 V \u2192 [0, 1]\nThe proximity function p must take two nodes and return the \"percentage\" of proximity between them.That is, proximity of related nodes must be close to 1, with \u2200 v\u2208V p(v, v) = 1, and the proximity of unrelated nodes must be close to 0.\n\nAn RDF graph is actually a typed multigraph, meaning that any pair of nodes can be connected by several edges, known as properties.Nodes and specially edges (properties) in RDF graphs have an URI that can be interpreted as a type 6 .For the purpose of defining a proximity function only edge types are relevant.Moreover, this approach requires weights associated with edge types, rather then directly to edges as is usual in graph theory.\n\nConsider a direct 7 typed multigraph G = (V, E, T, W ) where V is a set of nodes or vertices, E is a set of edges, T is a set of edge types and W is a mapping of types to positive integers.Each edge in E is an ordered triplet (u, v, t) where u, v \u2208 V and t \u2208 T .\n\nThe set W defines a mapping w : T \u2192 N + and the lower upper bound of weights for all types is\n\u2126(G) \u2261 max ti\u2208T w(t i )\nThe degree of a node is the number of edges connecting to it, deg(u) = #{(u , v , t ) \u2208 E : u = u} and the degree of a graph G, denoted \u2206(G), is usually defined as the maximum of the node degrees\n\u2206(G) = max v\u2208V deg(v)\nGiven the multigraph G, an acyclical path p of size n \u2208 N + is defined as a sequence of unrepeated nodes u 0 . . .u n \u2200 0\u2264i,j\u2264n u i = u j connected by edges with type t i in either direction, that is \u2200\ni (u i\u22121 , u i , t i ) \u2208 E \u2228 (u i , u i\u22121 , t i ) \u2208 E, as follows. p = u 0 t1 \u2212 \u2192 u 1 t2 \u2212 \u2192 u 2 . . . u n\u22121 tn \u2212 \u2192 u n\nAn acyclical path must have at least one edge and cannot have loops.In the remainder of this section an acyclical path is simply referred as a path.\n\nThe weight function defined above can be extended to paths.The weight of path p is the sum of weights of each edge's type, w(p) = w(t 1 ) + w(t 2 ) + . . .+ w(t n ).Since w(t i ) \u2264 \u2126(G) it results that w(p) \u2264 \u2126(G)n, where n is the size of the path.\n\nThe set of all paths connecting vertices u and v with exactly n \u2265 1 edges is defined as follows.\nP n u,v = {u 0 t1 \u2212 \u2192 u 1 . . . u n\u22121 tn \u2212 \u2192 u n : u = u o \u2227 v = u n \u2227 \u2200 0\u2264i,j\u2264n u i = u j }\nThe weight of P n u,v can be computed using the path weight function defined above simply by adding the contribution of each path.The reader should note\nthat p\u2208P n u,v w(p) \u2264 \u2126(G)n\u2206(G) n since \u2200 p\u2208P n u,v w(p) \u2264 \u2126(G)n and #P n u,v \u2264 \u2206(G) n .\nA proximity function can be defined in terms of these sets of paths.The proximity of a node to itself must be taken as a special case given that \u2200 n\u2208N + P n u,u = \u2205.For the general case where the two nodes are different, proximity must take into account each path in P n u,v , for all values of n.However, shorter paths must weight more that longer paths.That is, paths in P n u,v for smaller values of n must contribute more to proximity than those of larger values of n.Having this in mind the proposed proximity function p is defined as follows.\np(u, v) = \uf8f1 \uf8f2 \uf8f3 1 \u2190 u = v 1 \u2126(G) \u221e n=1 1 2 n n\u2206(G) n p\u2208P n u,v w(p) \u2190 u = v\nSince this definition relies on an infinite series one must ensure that it converges.Given that p\u2208P n u,v\nw(p) \u2264 \u2126(G)n\u2206(G) n , if u = v, p(u, v) \u2264 \u221e n=1 1 2 n = 1,\nand thus the series converges absolutely.It is trivial that the proximity function is non-negative, since all its terms and factors are natural numbers.Hence this also proves that the image of the proposed function is defined within the intended codomain ([0, 1]).\n\n\nAlgorithm\n\nThe proximity function as defined in the previous subsection requires computing an infinite series.However, since the series defining this function converges absolutely, the first n terms compute the proximity within a known error margin.\n\nThe proposed proximity algorithm is formalized in Algorithm 1.It takes a multigraph and two strings, and starts by creating initial sets of paths for each of the given terms.If these sets are equal then proximity is set to its maximum value (1).Otherwise the algorithm computes the sets of paths linking the two nodes with a size under a predefined limit.\n\nTo compute the set of paths of size n the algorithm expands half-paths starting on both ends.The set PathSetA contains paths starting in the node with label A and the set PathSetB contains paths ending in the node with label B. Paths of size n are those with semi-paths in PathSetA and PathSetB with a common ending.The contribution of these paths to proximity is computed by summing their weights, using the PathWeight function, and divide it by a denominator that depends on the value of n.Before proceeding to the next value of n, first the semi-paths from sets PathSetA and PathSetB are alternately expanded.If both sets were expanded at once only paths with an even number of nodes would be generated.The function ExpandPaths expands each path in the given set of paths using a set of edges.Paths are expanded at their end with nodes for which there is an edge starting (or ending) at their last node.If the new node already occurs in the selected path then this is not a valid expansion as it would contain a cycle and it is not added to the expanded path set.Note that this function expands the size of the paths rather than the cardinality of the set.The expanded path set contains paths of size n + 1 where n is the size of the paths in the original path set.The cardinality of the expanded path set may either increase, decrease, or remain unchanged by this expansion.Figure 2 shows how the proximity algorithm proceeds to relate the nodes \"Madonna\" and \"Britney Spears\".This example omits the label nodes and starts with concept nodes associated with the relevant terms.We can see that each node is at the center of a pair of concentric circles.Each circle intersects a set of nodes that are reached from the center with a certain number of path segments.For instance, \"Rock Music\", \"Musical Artist\" and \"Pop Music\" are all a path segment away from \"Madonna\".A similar situation occurs with \"Britney Spears\" and some nodes are common to both circles, in this case \"Musical Artist\" and \"Pop Music\".These two intermediary nodes contribute with two independent paths connecting the original modes.The remaining nodes, \"Rock music\" for \"Madonna\" and \"Dance Pop\" for \"Britney Spears\" are used to continue unfolding the sets of nearby nodes connected to the original ones.In this case the node \"Music genre\" is common to both circles on the second level.This path is longer than the previous ones (i.e. has more path segments) and thus contributes less to proximity.At each level the contribution of new paths diminishes, although they are usually in greater number.After a few levels (typically 5) the algorithm stops.\n\n\nAlgorithm 1: Proximity function\nInput : G = (V, E, T, W), A, B Output: Proximity \u2126 \u2190 MaxWeight(T, W ) \u2206 \u2190 MaxDegree(V, E) PathSetA \u2190 NodeSetWithLabel (A,V,E,T) PathSetB \u2190 NodeSetWithLabel (B,V,E,\nThe proximity algorithm can be extended to compare groups of concepts.This is relevant to relate two web pages, for instance.For this purpose a web page is represented by a bag-of-words, where each word occurs in the web page and is also a label of a graph node.The proximity between the two bagsof-words can be defined as the average, or the maximum, of all proximity pairs.\n\n\nShakti\n\nThe algorithm described in the previous section is implemented by a system called Shakti.This system is responsible for extracting data relevant to a given domain from DBpedia, and to provide a measure of the proximity among concepts in that domain.This system is implemented in Java using an open-source semantic web toolbox called Jena8 including application interfaces for RDF and OWL, a SPARQL engine, as well as parsers and serializers for RDF in several formats such as XML, N3 and N-Triples.\n\nThe overall architecture of a Shakti use case is described in the diagram in Figure 3.It shows that Shakti mediates between a client system and DBpedia, that in turn harvests its data from the Wikipedia.The system itself is composed of three main components: controller is parametrized by a configuration file defining a domain and provides control over the other components; extractor fetches data related to a domain from the DBpedia, pre-processes it and stores the graph in a local database; proximity uses local graph to compute the proximity among terms in a preconfigured domain.\n\nThe purpose of the controller is twofold: to manage the processes of extracting data and computing proximity values by proving configurations to the modules; and to abstract the domain required by client applications.For instance, to use Shakti in a music domain it is necessary to identify the relevant classes on concepts, such as musical artist, genre or instrument, as well as the properties that connect them, such as type, has genre or plays instrument.To use Shakti in a different domain, say movies, it is necessary to reconfigure it.\n\nThe controller is parametrized by an XML configuration file formally defined by an XML Schema definition as depicted in Figure 4.The top level attributes in this definition configure general parameters, as the URL of the SPARQL endpoint, the natural languages of the labels (e.g.English, Portuguese), the maximum level used in the proximity algorithm, among others.The top level elements are used for defining prefixes, types and properties.XML prefixes are routinely used in RDF to shorten the URLs used to identify nodes.This conenables the declaration of prefixes used in SPARQL queries.The configuration file also enumerates the types (classes) of concepts required by a domain.This ensures that all the concepts with a declared type, having a label in the requested language are downloaded from DBpedia.The declaration of properties has a similar role but it also provides the weights assigned to path segments required by the algorithm.Each property definition includes a set of occurrences since the same name may be used to connect different types.That is, each property occurrence has a domain (source) and a range (target) and these must be one of the previously defined types.These definitions ensure that only the relevant occurrences of a property are effectively fetched from DBpedia.\n\nThe extractor retrieves data using the SPARQL endpoint of DBpedia.The extractor processes the configuration data provided by the controller and produces SPARQL queries that fetch a DBpedia sub-graph relevant for a given domain.Listing 1.1 shows an example of a SPARQL query to extract a type declared in the configuration file, where the string \"[TYPE]\" is replaced by each declared type.Similar queries are used for extracting properties.\n\nPart of the data extracted this way, namely the labels, must be preprocessed.Firstly, multiword labels are annotated incorrectly with language tags and must be fixed.For instance, a label such as ''Lady Gaga@en'' must be converted into ''Lady Gaga''@en.Secondly all characters between parentheses must be removed.The Wikipedia, and consequently DBpedia, use parentheses to disambiguate concepts when needed.For instance, ''Queen (Band)''@en is a different concept from ''Queen''@en but in a music setting the term in brackets is not only irrelevant but would disable the identification with the term ''Queen'' when referring to the actual band.Also, concepts with short labels (less than 3 characters) or solely with digits (e.g.\"23\") are simply discarded.\n\nThe proximity module is responsible for computing the relatedness between two terms, or two bags-of-terms, from the graph extracted from DBpedia and already preprocessed.This module maintains a dictionary with all labels in the graph, implemented using a prefix tree, or trie.This data structure enables an efficient screening of terms, discarding those for which relatedness cannot be computed.Following this step, the implementation follows Algorithm 1.\n\n\nEvaluation\n\nThis section presents a use of Skati in the implementation of a recommender developed as part of the project Palco 3.0.This project was targeted to the re-development of an existing Portuguese social network -Palco Principalwhose main subject is alternative music.\n\nThe goals of this project include the automatic identification, classification and recommendation of site content.The recommendation service developed for this project is structured around recommenders -pluggable components that generate a recommendation for a certain request based on a given model.Most of the recommenders developed for this service use collaborative filtering.For instance, a typical recommender suggest songs to users in Palco Principal based on the recorded activity of other users.If a user shares a large set of songs in his or her playlist with other users then it is likely that he or she will enjoy other songs in their playlist.\n\nThis approach is very effective and widely used but its main issue is cold start.If the system has no previous record of a new user then it will not be able to produce a recommendation.An alternative is to produce a content-based recommender.To implement such a recommender Shakti was used to find related content on the web site.This recommender can be used on words extracted from the web page itself, such as news articles or interviews, or on tags used to classify web pages, such as musics, photos of videos.\n\nThe remainder of this section describes the main steps to define a content recommender for Palco Principal using Shakti and how this experiment was used to evaluate this approach.\n\n\nProximity based recommendation\n\nPalco Principal is a music website hence this is the domain that must be used in Shakti.This required selecting DBpedia classes and properties relevant to this domain, preparing DBpedia for extracting data from the Portuguese Wikipedia to populate these classes, and configuring Shakti with the relevant types and properties to compute proximity values.\n\nDBpedia already has an extensive ontology covering most of the knowledge present in Wikipedia.This is certainly the case with the music domain and all the necessary classes and properties were already available.The DBpedia uses a collection of mappings to extract data present in the info boxes of Wikipedia.Unfortunately these mappings were only available for the English pages of Wikipedia and they had to be adapted for the pages in Portuguese.The DBpedia uses a wiki to maintain these mappings and new mappings of some classes had to be associated with the language label \"pt\".\n\nIn the Shakti it was necessary to configure the XML file to extract the selected classes and properties from DBpedia.These classes, whose mappings were created on DBpedia wiki for Portuguese pages, are: MusicalArtist solo performers (e.g.Madonna, Sting); Band groups of musicians performing as a band (e.g.Queen, Bon Jovi); MusicGenre musical genres (e.g.rock, pop).\n\nThe properties associated with these classes that were considered relevant were also inserted in the configuration file and are enumerated in Table 1.This table defines also the weights assigned to properties, with values ranging from 1 to 10, needed for computing proximity values.These weights were assigned based on the subjective perception of the authors on the proximity of different bands and artists.A sounder approach to weight calibration was left for future work.To integrate Shakti with the recommender it was necessary to implement a client application.This application is responsible for populating a table with proximity values among web pages recorded on the recommender service database.For each page this client application extracts a bag-of-words, either the words on the actual page or its tags.For each pair of bags-of-words it computes a proximity using methods provided by Shakti.\n\n\nResults analysis\n\nShakti is currently being used in an experimental recommender.Thus, the recommendations are not yet available on the site the of Palco Principal.For this reason a comprehensive analysis is not yet possible.This subsection presents some experimental results that are possible to obtain from the current setting.\n\nFor this experiment the recommender system computed proximity values among news and events pages, which took about a day.In total 57,982 proximity relations among news pages were calculated, plus 59992 among event pages, performing a grand total of 69604805 relations.\n\nTable 2 displays the proximity table for news pages ordered by decreasing proximity.Each id code is a news item in the web site.For this particular entity the recommender searched for content regarding both terms from its text and tags.\n\nTo analyze the performance of Shakti the contents of the 2 most related pages -id 3540 (resource A) and id 2623 (resource B) -were compared in  The concepts are names of the bands appearing in news text, so the approach of using the this field to determine proximity seems promising.Analyzing these news items one notices that they are on two musician artists with a musical genre in common, and both playing the guitar.This shows that the two news items are in fact related and a 0.22 proximity seems a reasonable figure.Note that proximity values range between 0.0 (unrelated) to 1.0 (the same).\n\nThe proximity values computed for all pages vary between 0.1 and 0.22 and the average value of is 0.2.This value is lower than expected.Of course that these figures can be modified simply by reconfiguring the property weights.On the other hand, Shakti determined a non null proximity in 24,401 of a total of 33,616,804 possible relationships, about 0.07%, which is an unsatisfactory figure for a recommendation system.\n\nOne of the culprits for these poor results is the text encoding using HTML entities in the database of Palco Principal.For instance, the term \"Guns N' Roses\" (which is part of the text and tags of resource B) is written in the database in the format \"Guns N&amp;#039 Roses\".This value is sent to Shakti.As Shakti is not prepared to receive this type of formatting, it does not detect the word in the dictionary.This experiment suggest that algorithm is producing the expected results.For the pairs of pages that produced a non null proximity the obtained measure is consistent with their degree of relatedness.However, the number of pages that the algorithm was able to relate is insufficient for a recommender system.The problems with text encoding alone do not justify the low number recommendations obtained in this experiment.Most probably the words contained in those pages are not labels in the sub-ontology extracted from DBpedia and it does not not cover satisfactory the domain of Palco Principal.It should be noted that this sub-ontology deals only with artists and bands that have sufficient recognition to have their own entry in Wikipedia.Other concepts related to music, such as musical instruments or music event venues, were not covered.Thus, pages on music festivals featuring garage bands, for instance, or advertising used guitars for sale, would be difficult to relate.In any event, further experimentation is needed to validate both the algorithm itself and the approach of using semantic relatedness a basis for recommendation.\n\n\nConclusions and future work\n\nThe goal of the research described in this paper is to measure the relatedness of two terms using the knowledge base of BDPedia.The motivation for this research is to use semantic relatedness in content-based recommenders, in particular in tags provided by users in social networks.\n\nThis paper proposes proximity, rather than distance, as a means to compute semantic relatedness on RDF nodes.It provides a formal definition of the proximity in terms of the sets of paths connecting the nodes, and an algorithm to determine these sets and compute proximity.The algorithm ponders the collection on paths connecting the two terms using the weights associated to properties on the ontological graph.This algorithm was implemented in a system called Shakti.This system fetches a sub-graph of the ontology in DBpedia relevant to a certain domain and computes the relatedness of terms assigned as labels to concepts.To validate the proposed approach Shakti was used to populate a proximity table on a web recommender service of Palco Principal, a Portuguese social network whose subject is alternative music.The results are promising, although the ontology extracted from DBpedia is not yet covering satisfactory the terms contained on the pages of Palco Principal.\n\nPart of the future work in this research includes the experimentation with larger ontologies, providing better coverage of the underlying domain and validating scalability of Shakti.At this stage most of the effort of using Shakti is configuring this tool.We plan the development of a graphical user interface for assisting the tool users in defining the classes and properties to extract from DBpedia.There are two approaches being considered for this task.On the first approach a seed class is typed in and other related classes and properties in that domain are suggested for possible inclusion.On the second approach Shakti is fed with a collection of example terms and DBpedia is searched for related classes and properties.Independently from the selected approach, the graphical user interface will also assist in the definition of property weights and other general configurations required by Shakti.\n\nThe validation of the algorithm itself is perhaps the most important part of the future work.It is necessary to compare it experimentally with the results obtained by similar algorithms using standard benchmarks.A testbed for computing similarity and visualizing relatedness among any sets of terms, based on the full DPpedia ontology, is currently being developed.This testbed is expected to be instrumental in the validation of the proposed algorithm.\n\nThe fact that the algorithm currently relies on weights being assigned to properties is an obstacle to use it with multiple domains.This issue can be overcome by assigning weights to properties according to their role on the ontology, independently of the domain: is-a properties with the maximum weight, part-of properties with an intermediary weight, and all other properties with a minimum weight.The testbed will be used to fine-tune these generic weights and to validate this approach to weight assignment.\n\n(CRACS).His main research interests are eLearning system implementation, structured document processing and software engineering.He has a special interest on automatic exercise evaluation, in particular on the evaluation of programming exercises, on ontology processing and on web adaptability.He has participated in several research projects in his main research areas, including technology transfer projects with industrial partners.He has over 60 publications in conference proceedings, journals and book chapters.\n\nFig. 1 .\n1\nFig. 1.RDF graph for concepts in music domain\n\n\n\n\nT) Proximity \u2190 0 ExpandLeft \u2190 true if PathSetA = PathSetB then Proximity = 1 else for N \u2190 0 to MaxLevel do Denominator \u2190 2 N \u2126N\u2206 N Process all paths of size N for PathA \u2208 PathSetA do for PathB \u2208 PathSetB do if LastNodeInPath(PathA) = LastNodeInPath(PathB) then Weight \u2190 PathWeight(PathA) + PathWeight(PathB) Proximity \u2190 Proximity + Weight/Denominator Expand paths one level alternately in each side if ExpandLeft then PathSetA \u2190 ExpandPaths(PathSetA, E) else PathSetB \u2190 ExpandPaths(PathSetB, E) ExpandLeft \u2190 Not(ExpandLeft) Function ExpandPaths(PathSet,Edges) Data: PathSet,Edges Result: NewPathSet NewPathSet \u2190 \u2205 for Path \u2208 PathSet do LastNode \u2190 LastNodeInPath(Path) for NextNode \u2208 {n : (LastNode, n) \u2208 Edges \u2228 (n, LastNode) \u2208 Edges} do if NextNode / \u2208 Path then NewPathSet (Path, NextNode)\n\n\nFig. 2 .\n2\nFig. 2.Using the proximity algorithm to relate \"Madonna\" and \"Britney Spears\"\n\n\nFig. 3 .\n3\nFig. 3.The architecture of Shakti\n\n\nFig. 4 .\n4\nFig. 4. The XML Schema definition of Shakti configuration\n\n\nFigure 5 .\n5\nIn order to calculate proximity values, Shakti merge both fields and generates a group of concepts present in the RDF graph.Thus, from all the words of text and tags fields only the following bag-of-words are actually used to compute proximity: 38 Special, Lynyrd Skynyrd, Bret Michaels.For resource B the bag-of-words considered for computing compute proximity is: Lemmy, Myles Kennedy, Andrew Stockdale, Dave Grohl, Fergie, Ian Astbury, Kid Rock, M. Shadows, Rock, The Sword, Adam Levine, Ozzy Osbourne, Chris Cornell, Duff McKagan, Slash, Iggy Pop.Using these two bags-of-words Shakti computes a proximity of 0.22.\n\n\nFig. 5 .\n5\nFig. 5. News piece generated from resource A.\n\n\nTable 1 .\n1\nProperties of a music domain\nPropertyDomainRangeWeightGenreBand and MusicalArtist MusicGenre7InstrumentBand and MusicalArtist label2StylisticInfluencesMusicGenrelabel4AssociatedBandBandBand10AssociatedMusicaArtist MusicalArtistMusicalArtist 10CurrentMemberBandlabel5PastMemberBandlabel5\n\nTable 2 .\n2\nProximity between pairs of news pages.\nResource ID Resource ID Proximity354026230.22354024310.21354030000.15354041150.15354026910.15354018920.15354026760.1435407600.14354031890.14354043970.14\ndetail.The text and tags of this resource can be viewed in\n\nhttp://musicontology.com/\nhttp://dbpedia.org/About\nComSIS Vol. 10, No. 4, Special Issue, October 2013\nComSIS Vol. 10, No. 4, Special Issue, October 2013\nhttp://wordnet.princeton.edu/\nhttp://www.geneontology.org/\nhttps://en.wiktionary.org/wiki/proximity\nA type in the usual sense of graph theory, not an RDF Schema or OWL type.\nAn RDF graph is a direct graph. However, edge direction is irrelevant for the purpose of this definition of proximity.ComSIS Vol. 10, No. 4, Special Issue, October 2013\nhttps://jena.apache.org/ ComSIS Vol. 10, No. 4, Special Issue, October 2013\nAcknowledgments.This work is in part funded by the ERDF/COMPETE Programme and by FCT within project FCOMP-01-0124-FEDER-022701.The author wishes to thank to V \u00e2nia Rodrigues for her collaboration on the implementation o Shakti, and to Ricardo Queir \u00f3s, Jo \u00e3o Delgado and the anonymous reviewers for their helpful comments.\nModern Information Retrieval. R A Baeza-Yates, B Ribeiro-Neto, 1999Addison-Wesley Longman Publishing Co., IncBoston, MA, USA\n\nResource description framework (RDF) model and syntax specification (revised). D Beckett, B Mcbride, 20043Tech. rep.\n\nRDF vocabulary description language 1.0: RDF schema. D Brickley, R Guha, 20043Tech. rep.\n\nA roadmap to ontology specification languages. O Corcho, A \u00d3mez-P \u00c9rez, Proceedings of the 12th European Workshop on Knowledge Acquisition, Modeling and Management. the 12th European Workshop on Knowledge Acquisition, Modeling and ManagementLondon, UK, UKSpringer-Verlag2000EKAW '00\n\nIndexing by latent semantic analysis. S Deerwester, S T Dumais, G W Furnas, T K Landauer, R Harshman, Journal of the American Society for Information Science. 411990\n\nC Fellbaum, WordNet An Electronic Lexical Database. \n\n. London, May 1998\n\nFeature generation for textual information retrieval using world knowledge. E Gabrilovich, 10.1145/1328964.1328988SIGIR Forum. 412Dec 2007\n\nOvercoming the brittleness bottleneck using wikipedia: enhancing text categorization with encyclopedic knowledge. E Gabrilovich, S Markovitch, proceedings of the 21st national conference on Artificial intelligence. the 21st national conference on Artificial intelligenceAAAI Press20062AAAI'06\n\nSemantic similarity based on corpus statistics and lexical taxonomy. J Jiang, D Conrath, Proc. of the Int'l. Conf. on Research in Computational Linguistics. of the Int'l. Conf. on Research in Computational Linguistics1997\n\nAn information-theoretic definition of similarity. D Lin, Proceedings of the Fifteenth International Conference on Machine Learning. the Fifteenth International Conference on Machine LearningSan Francisco, CA, USAMorgan Kaufmann Publishers Inc1998ICML '98\n\nLearning to link with wikipedia. D Milne, I H Witten, 10.1145/1458082.1458150Proceedings of the 17th ACM conference on Information and knowledge management. the 17th ACM conference on Information and knowledge managementNew York, NY, USAACM2008CIKM '08\n\nThe LOM RDF binding -principles and implementation. M Nilsson, M Palmer, J Brase, 3rd Annual ARIADNE Conference. 2003\n\nUsing information content to evaluate semantic similarity in a taxonomy. P Resnik, Proceedings of the 14th international joint conference on Artificial intelligence. the 14th international joint conference on Artificial intelligenceSan Francisco, CA, USAMorgan Kaufmann Publishers Inc19951IJCAI'95\n\nAn intrinsic information content metric for semantic similarity in WordNet. N Seco, T Veale, J Hayes, Proc. of ECAI. of ECAI20044\n\nOverview of stemming algorithms. I Smirnov, Mechanical Translation. 2008\n\nWikirelate! computing semantic relatedness using wikipedia. M Strube, S P Ponzetto, proceedings of the 21st national conference on Artificial intelligence. the 21st national conference on Artificial intelligenceAAAI Press20062AAAI'06\n\nAutomatically refining the wikipedia infobox ontology. F Wu, D S Weld, 10.1145/1367497.1367583Proceedings of the 17th international conference on World Wide Web. the 17th international conference on World Wide WebNew York, NY, USAWWW '08, ACM2008\n\nAutomatically creating datasets for measures of semantic relatedness. T Zesch, I Gurevych, Proceedings of the Workshop on Linguistic Distances. the Workshop on Linguistic DistancesStroudsburg, PA, USAAssociation for Computational Linguistics2006LD '06\n\nLeal is assistant professor at the department of Computer Science of the Faculty of Sciences of the University of Porto (FCUP) and associate researcher of the Center for Research in Advanced Computing Systems. Jos , Paulo , \n", "annotations": {"author": "[{\"end\":171,\"start\":65}]", "publisher": null, "author_last_name": "[{\"end\":75,\"start\":71}]", "author_first_name": "[{\"end\":70,\"start\":65}]", "author_affiliation": "[{\"end\":170,\"start\":93}]", "title": "[{\"end\":62,\"start\":1},{\"end\":233,\"start\":172}]", "venue": null, "abstract": "[{\"end\":1287,\"start\":442}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b15\"},\"end\":1655,\"start\":1651},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1756,\"start\":1753},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":7019,\"start\":7016},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7522,\"start\":7519},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7552,\"start\":7549},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7678,\"start\":7674},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8493,\"start\":8489},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":9867,\"start\":9863},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":10103,\"start\":10100},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":10204,\"start\":10200},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":10373,\"start\":10370},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10386,\"start\":10382},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":10613,\"start\":10610},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":10906,\"start\":10903},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":11023,\"start\":11020},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":11105,\"start\":11101},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":11111,\"start\":11107},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":11116,\"start\":11113},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":11125,\"start\":11121},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":11728,\"start\":11725},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":19542,\"start\":19539}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":38482,\"start\":38424},{\"attributes\":{\"id\":\"fig_1\"},\"end\":39278,\"start\":38483},{\"attributes\":{\"id\":\"fig_2\"},\"end\":39369,\"start\":39279},{\"attributes\":{\"id\":\"fig_3\"},\"end\":39416,\"start\":39370},{\"attributes\":{\"id\":\"fig_4\"},\"end\":39487,\"start\":39417},{\"attributes\":{\"id\":\"fig_5\"},\"end\":40120,\"start\":39488},{\"attributes\":{\"id\":\"fig_6\"},\"end\":40179,\"start\":40121},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":40479,\"start\":40180},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":40744,\"start\":40480}]", "paragraph": "[{\"end\":1757,\"start\":1303},{\"end\":2094,\"start\":1759},{\"end\":2694,\"start\":2096},{\"end\":3186,\"start\":2696},{\"end\":3868,\"start\":3188},{\"end\":4788,\"start\":3870},{\"end\":5675,\"start\":4790},{\"end\":6450,\"start\":5677},{\"end\":6618,\"start\":6467},{\"end\":7736,\"start\":6647},{\"end\":8267,\"start\":7756},{\"end\":8903,\"start\":8269},{\"end\":9149,\"start\":8927},{\"end\":9438,\"start\":9151},{\"end\":10387,\"start\":9440},{\"end\":11024,\"start\":10389},{\"end\":11258,\"start\":11026},{\"end\":11729,\"start\":11260},{\"end\":12233,\"start\":11743},{\"end\":12684,\"start\":12248},{\"end\":12976,\"start\":12686},{\"end\":13461,\"start\":12978},{\"end\":14113,\"start\":13463},{\"end\":14615,\"start\":14115},{\"end\":14904,\"start\":14617},{\"end\":15262,\"start\":14906},{\"end\":15540,\"start\":15277},{\"end\":15795,\"start\":15560},{\"end\":16235,\"start\":15797},{\"end\":16499,\"start\":16237},{\"end\":16594,\"start\":16501},{\"end\":16814,\"start\":16619},{\"end\":17038,\"start\":16837},{\"end\":17307,\"start\":17159},{\"end\":17557,\"start\":17309},{\"end\":17655,\"start\":17559},{\"end\":17901,\"start\":17749},{\"end\":18539,\"start\":17991},{\"end\":18721,\"start\":18616},{\"end\":19044,\"start\":18780},{\"end\":19296,\"start\":19058},{\"end\":19653,\"start\":19298},{\"end\":22279,\"start\":19655},{\"end\":22853,\"start\":22478},{\"end\":23362,\"start\":22864},{\"end\":23950,\"start\":23364},{\"end\":24494,\"start\":23952},{\"end\":25794,\"start\":24496},{\"end\":26235,\"start\":25796},{\"end\":26993,\"start\":26237},{\"end\":27450,\"start\":26995},{\"end\":27729,\"start\":27465},{\"end\":28387,\"start\":27731},{\"end\":28902,\"start\":28389},{\"end\":29083,\"start\":28904},{\"end\":29471,\"start\":29118},{\"end\":30054,\"start\":29473},{\"end\":30422,\"start\":30056},{\"end\":31327,\"start\":30424},{\"end\":31658,\"start\":31348},{\"end\":31928,\"start\":31660},{\"end\":32166,\"start\":31930},{\"end\":32765,\"start\":32168},{\"end\":33185,\"start\":32767},{\"end\":34736,\"start\":33187},{\"end\":35050,\"start\":34768},{\"end\":36027,\"start\":35052},{\"end\":36936,\"start\":36029},{\"end\":37391,\"start\":36938},{\"end\":37904,\"start\":37393},{\"end\":38423,\"start\":37906},{\"end\":38481,\"start\":38436},{\"end\":39277,\"start\":38486},{\"end\":39368,\"start\":39291},{\"end\":39415,\"start\":39382},{\"end\":39486,\"start\":39429},{\"end\":40119,\"start\":39502},{\"end\":40178,\"start\":40133},{\"end\":40221,\"start\":40193},{\"end\":40531,\"start\":40493},{\"end\":40743,\"start\":40685}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":15559,\"start\":15541},{\"attributes\":{\"id\":\"formula_1\"},\"end\":16618,\"start\":16595},{\"attributes\":{\"id\":\"formula_2\"},\"end\":16836,\"start\":16815},{\"attributes\":{\"id\":\"formula_3\"},\"end\":17158,\"start\":17039},{\"attributes\":{\"id\":\"formula_4\"},\"end\":17748,\"start\":17656},{\"attributes\":{\"id\":\"formula_5\"},\"end\":17990,\"start\":17902},{\"attributes\":{\"id\":\"formula_6\"},\"end\":18615,\"start\":18540},{\"attributes\":{\"id\":\"formula_7\"},\"end\":18779,\"start\":18722},{\"attributes\":{\"id\":\"formula_8\"},\"end\":22477,\"start\":22314}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":30573,\"start\":30572},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31937,\"start\":31936}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1301,\"start\":1289},{\"attributes\":{\"n\":\"2.\"},\"end\":6465,\"start\":6453},{\"attributes\":{\"n\":\"2.1.\"},\"end\":6645,\"start\":6621},{\"attributes\":{\"n\":\"2.2.\"},\"end\":7754,\"start\":7739},{\"attributes\":{\"n\":\"2.3.\"},\"end\":8925,\"start\":8906},{\"attributes\":{\"n\":\"3.\"},\"end\":11741,\"start\":11732},{\"attributes\":{\"n\":\"3.1.\"},\"end\":12246,\"start\":12236},{\"attributes\":{\"n\":\"3.2.\"},\"end\":15275,\"start\":15265},{\"attributes\":{\"n\":\"3.3.\"},\"end\":19056,\"start\":19047},{\"end\":22313,\"start\":22282},{\"attributes\":{\"n\":\"4.\"},\"end\":22862,\"start\":22856},{\"attributes\":{\"n\":\"5.\"},\"end\":27463,\"start\":27453},{\"attributes\":{\"n\":\"5.1.\"},\"end\":29116,\"start\":29086},{\"attributes\":{\"n\":\"5.2.\"},\"end\":31346,\"start\":31330},{\"attributes\":{\"n\":\"6.\"},\"end\":34766,\"start\":34739},{\"end\":38433,\"start\":38425},{\"end\":39288,\"start\":39280},{\"end\":39379,\"start\":39371},{\"end\":39426,\"start\":39418},{\"end\":39499,\"start\":39489},{\"end\":40130,\"start\":40122},{\"end\":40190,\"start\":40181},{\"end\":40490,\"start\":40481}]", "table": "[{\"end\":40479,\"start\":40222},{\"end\":40684,\"start\":40532}]", "figure_caption": "[{\"end\":38482,\"start\":38435},{\"end\":39278,\"start\":38485},{\"end\":39369,\"start\":39290},{\"end\":39416,\"start\":39381},{\"end\":39487,\"start\":39428},{\"end\":40120,\"start\":39501},{\"end\":40179,\"start\":40132},{\"end\":40222,\"start\":40192},{\"end\":40532,\"start\":40492}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13598,\"start\":13597},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":21041,\"start\":21040},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":23449,\"start\":23448},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":24624,\"start\":24623}]", "bib_author_first_name": "[{\"end\":41671,\"start\":41670},{\"end\":41673,\"start\":41672},{\"end\":41688,\"start\":41687},{\"end\":41846,\"start\":41845},{\"end\":41857,\"start\":41856},{\"end\":41938,\"start\":41937},{\"end\":41950,\"start\":41949},{\"end\":42022,\"start\":42021},{\"end\":42032,\"start\":42031},{\"end\":42297,\"start\":42296},{\"end\":42311,\"start\":42310},{\"end\":42313,\"start\":42312},{\"end\":42323,\"start\":42322},{\"end\":42325,\"start\":42324},{\"end\":42335,\"start\":42334},{\"end\":42337,\"start\":42336},{\"end\":42349,\"start\":42348},{\"end\":42426,\"start\":42425},{\"end\":42576,\"start\":42575},{\"end\":42754,\"start\":42753},{\"end\":42769,\"start\":42768},{\"end\":43003,\"start\":43002},{\"end\":43012,\"start\":43011},{\"end\":43208,\"start\":43207},{\"end\":43447,\"start\":43446},{\"end\":43456,\"start\":43455},{\"end\":43458,\"start\":43457},{\"end\":43720,\"start\":43719},{\"end\":43731,\"start\":43730},{\"end\":43741,\"start\":43740},{\"end\":43860,\"start\":43859},{\"end\":44162,\"start\":44161},{\"end\":44170,\"start\":44169},{\"end\":44179,\"start\":44178},{\"end\":44250,\"start\":44249},{\"end\":44351,\"start\":44350},{\"end\":44361,\"start\":44360},{\"end\":44363,\"start\":44362},{\"end\":44581,\"start\":44580},{\"end\":44587,\"start\":44586},{\"end\":44589,\"start\":44588},{\"end\":44844,\"start\":44843},{\"end\":44853,\"start\":44852},{\"end\":45239,\"start\":45236},{\"end\":45247,\"start\":45242}]", "bib_author_last_name": "[{\"end\":41685,\"start\":41674},{\"end\":41701,\"start\":41689},{\"end\":41854,\"start\":41847},{\"end\":41865,\"start\":41858},{\"end\":41947,\"start\":41939},{\"end\":41955,\"start\":41951},{\"end\":42029,\"start\":42023},{\"end\":42044,\"start\":42033},{\"end\":42308,\"start\":42298},{\"end\":42320,\"start\":42314},{\"end\":42332,\"start\":42326},{\"end\":42346,\"start\":42338},{\"end\":42358,\"start\":42350},{\"end\":42435,\"start\":42427},{\"end\":42487,\"start\":42481},{\"end\":42588,\"start\":42577},{\"end\":42766,\"start\":42755},{\"end\":42780,\"start\":42770},{\"end\":43009,\"start\":43004},{\"end\":43020,\"start\":43013},{\"end\":43212,\"start\":43209},{\"end\":43453,\"start\":43448},{\"end\":43465,\"start\":43459},{\"end\":43728,\"start\":43721},{\"end\":43738,\"start\":43732},{\"end\":43747,\"start\":43742},{\"end\":43867,\"start\":43861},{\"end\":44167,\"start\":44163},{\"end\":44176,\"start\":44171},{\"end\":44185,\"start\":44180},{\"end\":44258,\"start\":44251},{\"end\":44358,\"start\":44352},{\"end\":44372,\"start\":44364},{\"end\":44584,\"start\":44582},{\"end\":44594,\"start\":44590},{\"end\":44850,\"start\":44845},{\"end\":44862,\"start\":44854}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":41764,\"start\":41640},{\"attributes\":{\"id\":\"b1\"},\"end\":41882,\"start\":41766},{\"attributes\":{\"id\":\"b2\"},\"end\":41972,\"start\":41884},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":15157176},\"end\":42256,\"start\":41974},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":3252915},\"end\":42423,\"start\":42258},{\"attributes\":{\"id\":\"b5\"},\"end\":42477,\"start\":42425},{\"attributes\":{\"id\":\"b6\"},\"end\":42497,\"start\":42479},{\"attributes\":{\"doi\":\"10.1145/1328964.1328988\",\"id\":\"b7\",\"matched_paper_id\":942629},\"end\":42637,\"start\":42499},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":991213},\"end\":42931,\"start\":42639},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":1359050},\"end\":43154,\"start\":42933},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":5659557},\"end\":43411,\"start\":43156},{\"attributes\":{\"doi\":\"10.1145/1458082.1458150\",\"id\":\"b11\",\"matched_paper_id\":207170378},\"end\":43665,\"start\":43413},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":7188916},\"end\":43784,\"start\":43667},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":1752785},\"end\":44083,\"start\":43786},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":12036832},\"end\":44214,\"start\":44085},{\"attributes\":{\"id\":\"b15\"},\"end\":44288,\"start\":44216},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":14317331},\"end\":44523,\"start\":44290},{\"attributes\":{\"doi\":\"10.1145/1367497.1367583\",\"id\":\"b17\",\"matched_paper_id\":5588127},\"end\":44771,\"start\":44525},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":7898806},\"end\":45024,\"start\":44773},{\"attributes\":{\"id\":\"b19\"},\"end\":45250,\"start\":45026}]", "bib_title": "[{\"end\":42019,\"start\":41974},{\"end\":42294,\"start\":42258},{\"end\":42573,\"start\":42499},{\"end\":42751,\"start\":42639},{\"end\":43000,\"start\":42933},{\"end\":43205,\"start\":43156},{\"end\":43444,\"start\":43413},{\"end\":43717,\"start\":43667},{\"end\":43857,\"start\":43786},{\"end\":44159,\"start\":44085},{\"end\":44247,\"start\":44216},{\"end\":44348,\"start\":44290},{\"end\":44578,\"start\":44525},{\"end\":44841,\"start\":44773}]", "bib_author": "[{\"end\":41687,\"start\":41670},{\"end\":41703,\"start\":41687},{\"end\":41856,\"start\":41845},{\"end\":41867,\"start\":41856},{\"end\":41949,\"start\":41937},{\"end\":41957,\"start\":41949},{\"end\":42031,\"start\":42021},{\"end\":42046,\"start\":42031},{\"end\":42310,\"start\":42296},{\"end\":42322,\"start\":42310},{\"end\":42334,\"start\":42322},{\"end\":42348,\"start\":42334},{\"end\":42360,\"start\":42348},{\"end\":42437,\"start\":42425},{\"end\":42489,\"start\":42481},{\"end\":42590,\"start\":42575},{\"end\":42768,\"start\":42753},{\"end\":42782,\"start\":42768},{\"end\":43011,\"start\":43002},{\"end\":43022,\"start\":43011},{\"end\":43214,\"start\":43207},{\"end\":43455,\"start\":43446},{\"end\":43467,\"start\":43455},{\"end\":43730,\"start\":43719},{\"end\":43740,\"start\":43730},{\"end\":43749,\"start\":43740},{\"end\":43869,\"start\":43859},{\"end\":44169,\"start\":44161},{\"end\":44178,\"start\":44169},{\"end\":44187,\"start\":44178},{\"end\":44260,\"start\":44249},{\"end\":44360,\"start\":44350},{\"end\":44374,\"start\":44360},{\"end\":44586,\"start\":44580},{\"end\":44596,\"start\":44586},{\"end\":44852,\"start\":44843},{\"end\":44864,\"start\":44852},{\"end\":45242,\"start\":45236},{\"end\":45250,\"start\":45242}]", "bib_venue": "[{\"end\":42229,\"start\":42139},{\"end\":42909,\"start\":42854},{\"end\":43150,\"start\":43090},{\"end\":43369,\"start\":43289},{\"end\":43650,\"start\":43570},{\"end\":44040,\"start\":43952},{\"end\":44209,\"start\":44202},{\"end\":44501,\"start\":44446},{\"end\":44755,\"start\":44687},{\"end\":44973,\"start\":44917},{\"end\":41668,\"start\":41640},{\"end\":41843,\"start\":41766},{\"end\":41935,\"start\":41884},{\"end\":42137,\"start\":42046},{\"end\":42415,\"start\":42360},{\"end\":42475,\"start\":42437},{\"end\":42624,\"start\":42613},{\"end\":42852,\"start\":42782},{\"end\":43088,\"start\":43022},{\"end\":43287,\"start\":43214},{\"end\":43568,\"start\":43490},{\"end\":43778,\"start\":43749},{\"end\":43950,\"start\":43869},{\"end\":44200,\"start\":44187},{\"end\":44282,\"start\":44260},{\"end\":44444,\"start\":44374},{\"end\":44685,\"start\":44619},{\"end\":44915,\"start\":44864},{\"end\":45234,\"start\":45026}]"}}}, "year": 2023, "month": 12, "day": 17}