{"id": 138996, "updated": "2023-09-26 22:39:28.093", "metadata": {"title": "Finding community structure in networks using the eigenvectors of matrices", "authors": "[{\"first\":\"M.\",\"last\":\"Newman\",\"middle\":[\"E.\",\"J.\"]}]", "venue": "Phys. Rev. E 74, 036104 (2006)", "journal": null, "publication_date": {"year": 2006, "month": null, "day": null}, "abstract": "We consider the problem of detecting communities or modules in networks, groups of vertices with a higher-than-average density of edges connecting them. Previous work indicates that a robust approach to this problem is the maximization of the bene\ufb01t function known as \u201cmodularity\u201d over possible divisions of a network. Here we show that this maximization process can be written in terms of the eigenspectrum of a matrix we call the modularity matrix, which plays a role in community detection similar to that played by the graph Laplacian in graph partitioning calculations. This result leads us to a number of possible algorithms for detecting community structure, as well as several other results, including a spectral measure of bipartite structure in networks and a centrality measure that identi\ufb01es vertices that occupy central positions within the communities to which they belong. The algorithms and measures proposed are illustrated with applications to a variety of real-world complex networks.", "fields_of_study": "[\"Physics\"]", "external_ids": {"arxiv": "physics/0605087", "mag": "2015953751", "acl": null, "pubmed": "17025705", "pubmedcentral": null, "dblp": null, "doi": "10.1103/physreve.74.036104"}}, "content": {"source": {"pdf_hash": "0250b5c0f7a414dec8c7a0aa7be20c9637eeb6ec", "pdf_src": "CiteSeerX", "pdf_uri": "[\"http://arxiv.org/pdf/physics/0605087v2.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/physics/0605087", "status": "GREEN"}}, "grobid": {"id": "86cfa9d675711d1bc462382614023604ee1d7b1e", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/0250b5c0f7a414dec8c7a0aa7be20c9637eeb6ec.txt", "contents": "\nFinding community structure in networks using the eigenvectors of matrices\nMay 2006\n\nM E J Newman \nDepartment of Physics and Center for the Study of Complex Systems\nUniversity of Michigan\n48109-1040Ann ArborMI\n\nFinding community structure in networks using the eigenvectors of matrices\nMay 2006arXiv:physics/0605087v2 [physics.data-an] 19\nWe consider the problem of detecting communities or modules in networks, groups of vertices with a higher-than-average density of edges connecting them. Previous work indicates that a robust approach to this problem is the maximization of the benefit function known as \"modularity\" over possible divisions of a network. Here we show that this maximization process can be written in terms of the eigenspectrum of a matrix we call the modularity matrix, which plays a role in community detection similar to that played by the graph Laplacian in graph partitioning calculations. This result leads us to a number of possible algorithms for detecting community structure, as well as several other results, including a spectral measure of bipartite structure in networks and a new centrality measure that identifies those vertices that occupy central positions within the communities to which they belong. The algorithms and measures proposed are illustrated with applications to a variety of real-world complex networks.\n\nI. INTRODUCTION\n\nNetworks have attracted considerable recent attention in physics and other fields as a foundation for the mathematical representation of a variety of complex systems, including biological and social systems, the Internet, the worldwide web, and many others [1,2,3,4]. A common feature of many networks is \"community structure,\" the tendency for vertices to divide into groups, with dense connections within groups and only sparser connections between them [5,6]. Social networks [5], biochemical networks [7,8,9], and information networks such as the web [10], have all been shown to possess strong community structure, a finding that has substantial practical implications for our understanding of the systems these networks represent. Communities are of interest because they often correspond to functional units such as cycles or pathways in metabolic networks [8,9,11] or collections of pages on a single topic on the web [10], but their influence reaches further than this. A number of recent results suggest that networks can have properties at the community level that are quite different from their properties at the level of the entire network, so that analyses that focus on whole networks and ignore community structure may miss many interesting features.\n\nFor instance, in some social networks one finds individuals with different mean numbers of contacts in different groups; the individuals in one group might be gregarious, having many contacts with others, while the individuals in another group might be more reticent. An example of this behavior is seen in networks of sexual contacts, where separate communities of high-and low-activity individuals have been observed [12,13]. If one were to characterize such a network by quoting only a single figure for the average number of contacts an individual has, one would be missing features of the network directly relevant to questions of scientific interest such as epidemiological dynamics [14].\n\nIt has also been shown that vertices' positions within communities can affect the role or function they assume.\n\nIn social networks, for example, it has long been accepted that individuals who lie on the boundaries of communities, bridging gaps between otherwise unconnected people, enjoy an unusual level of influence as the gatekeepers of information flow between groups [15,16,17]. A surprisingly similar result is found in metabolic networks, where metabolites that straddle the boundaries between modules show particular persistence across species [8]. This finding might indicate that modules in metabolic networks possess some degree of functional independence within the cell, allowing vertices central to a module to change or disappear with relatively little effect on the rest of the network, while vertices on the borders of modules are less able to change without affecting other aspects of the cellular machinery.\n\nOne can also consider the communities in a network themselves to form a higher level meta-network, a coarsegrained representation of the full network. Such coarsegrained representations have been used in the past as tools for visualization and analysis [18] but more recently have also been investigated as topologically interesting entities in their own right. In particular, networks of modules appear to have degree distributions with interesting similarities to but also some differences from the degree distributions of other networks [9], and may also display so-called preferential attachment in their formation [19], indicating the possibility of distinct dynamical processes taking place at the level of the modules.\n\nFor all of these reasons and others besides there has been a concerted effort in recent years within the physics community and elsewhere to develop mathematical tools and computer algorithms to detect and quantify community structure in networks. A huge variety of community detection techniques have been developed, based variously on centrality measures, flow models, random walks, resistor networks, optimization, and many other approaches [5,8,9,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]. For reviews see Refs. [6,36].\n\nIn this paper we focus on one approach to community detection that has proven particularly effective, the optimization of the benefit function known as \"modularity\" over the possible divisions of a network. Methods based on this approach have been found to produce excellent results in standardized tests [36,37]. Unfortunately, exhaustive optimization of the modularity demands an impractically large computational effort, but good results have been obtained with various approximate optimization techniques, including greedy algorithms [24,38], simulated annealing [34,39], and extremal optimization [40]. In this paper we describe a different approach, in which we rewrite the modularity function in matrix terms, which allows us to express the optimization task as a spectral problem in linear algebra. This approach leads to a family of fast new computer algorithms for community detection that produce results competitive with the best previous methods. Perhaps more importantly, our work also leads to a number of useful insights about network structure via the close relations we will demonstrate between communities and matrix spectra.\n\nOur work is by no means the first to find connections between divisions of networks and matrix spectra. There is a large literature within computer science on so-called spectral partitioning, in which network properties are linked to the spectrum of the graph Laplacian matrix [41,42,43]. This method is different from the one introduced here and is not in general well suited to the problem of community structure detection. The reasons for this, however, turn out to be interesting and instructive, so we begin our presentation with a brief review of the traditional spectral partitioning method in Section II. A consideration of the deficiencies of this method in Section III leads us in Section IV to introduce and develop at length our own method, which is based on the characteristic matrix we call the \"modularity matrix.\" Sections VII and VIII explore some further ideas arising from the study of the modularity matrix but not directly related to community detection. In Section IX we give our conclusions. A brief report of some of the results described in this paper has appeared previously as Ref. [32].\n\n\nII. GRAPH PARTITIONING AND THE LAPLACIAN MATRIX\n\nThere is a long tradition of research in computer science on graph partitioning, a problem that arises in a variety of contexts, but most prominently in the development of computer algorithms for parallel or distributed computation. Suppose a computation requires the performance of some number n of tasks, each to be carried out by a separate process, program, or thread running on one of c different processors. Typically there is a desired number of tasks or volume of work to be assigned to each of the processors; if the processors are identical, for instance, and the tasks are of similar complexity, we may wish to assign the same number of tasks to each processor so as to share the workload roughly equally. It is also typically the case that the individual tasks require for their completion results generated during the performance of other tasks, so tasks must communicate with one another to complete the overall computation. The pattern of required communications can be thought of as a network with n vertices representing the tasks and an edge joining any pair of tasks that need to communicate, for a total of m edges. (In theory the amount of communication between different pairs of tasks could vary, leading to a weighted network, but we here restrict our attention to the simplest unweighted case, which already presents interesting challenges.)\n\nNormally, communications between processors in parallel computers are slow compared to data movement within processors, and hence we would like to keep such communications to a minimum. In network terms this means we would like to divide the vertices of our network (the processes) into groups (the processors) such that the number of edges between groups is minimized. This is the graph partitioning problem.\n\nProblems of this type can be solved exactly in polynomial time [44], but unfortunately the polynomial in question is of leading order n c 2 , which is already prohibitive for all but the smallest networks even when c takes the smallest possible value of 2. For practical applications, therefore, a number of approximate methods have been developed that appear to give reasonably good solutions. One of the most widely used is the spectral partitioning method, due originally to Fiedler [41] and popularized particularly by Pothen et al. [42]. We here consider the simplest instance of the method, where c = 2, i.e., where our network of n vertices is to be divided into just two non-intersecting subsets such that the number of edges running between the subsets is minimized.\n\nWe begin by defining the adjacency matrix A to be the matrix with elements\nA ij = 1 if there is an edge joining vertices i, j, 0 otherwise.(1)\n(We restrict our attention in this paper to undirected networks, so that A is symmetric.) Then the number of edges R running between our two groups of vertices, also called the cut size, is given by\nR = 1 2 i, j in different groups A ij ,(2)\nwhere the factor of 1 2 compensates for our counting each edge twice in the sum.\n\nTo put this in a more convenient form, we define an index vector s with n elements\ns i = +1 if vertex i belongs to group 1, \u22121 if vertex i belongs to group 2.(3)\n(Note that s satisfies the normalization condition s T s = n.) Then\n1 2 (1 \u2212 s i s j ) =\n1 if i and j are in different groups, 0 if i and j are in the same group, (4) which allows us to rewrite Eq. (2) as\nR = 1 4 ij (1 \u2212 s i s j )A ij .(5)\nNoting that the number of edges k i connected to a vertex i-also called the degree of the vertex-is given by\nk i = j A ij ,(6)\nthe first term of the sum in (5) is\nij A ij = i k i = i s 2 i k i = ij s i s j k i \u03b4 ij ,(7)\nwhere we have made use of s 2 i = 1 (since s i = \u00b11), and \u03b4 ij is 1 if i = j and zero otherwise. Thus\nR = 1 4 ij s i s j (k i \u03b4 ij \u2212 A ij ).(8)\nWe can also write this in matrix form as\nR = 1 4 s T Ls,(9)\nwhere L is the real symmetric matrix with elements L ij = k i \u03b4 ij \u2212 A ij , or equivalently 1\nL ij = \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 k i if i = j, \u22121 if i = j and there is an edge (i, j), 0 otherwise.(10)\nL is called the Laplacian matrix of the graph or sometimes the admittance matrix. It appears in many contexts in the theory of networks, such as the analysis of diffusion and random walks on networks [45], Kirchhoff's theorem for the number of spanning trees [46], and the dynamics of coupled oscillators [47,48]. Its properties are the subject of hundreds of papers in the mathematics and physics literature and are by now quite well understood. For our purposes, however, we will need only a few simple observations about the matrix to make progress. Our task is to choose the vector s so as to minimize the cut size, Eq. (9). Let us write s as a linear combination of the normalized eigenvectors v i of the Laplacian thus: 1 We assume here that the network is a simple graph, having at most one edge between any pair of vertices and no self-edges (edges that connect vertices to themselves).\ns = n i=1 a i v i , where a i = v T i s and the normalization s T s = n implies that n i=1 a 2 i = n.(11)Then R = i a i v T i L j a j v j = ij a i a j \u03bb j \u03b4 ij = i a 2 i \u03bb i ,(12)\nwhere \u03bb i is the eigenvalue of L corresponding to the eigenvector v i and we have made use of v T i v j = \u03b4 ij . Without loss of generality, we assume that the eigenvalues are labeled in increasing order \u03bb 1 \u2264 \u03bb 2 \u2264 . . . \u2264 \u03bb n . The task of minimizing R can then be equated with the task of choosing the nonnegative quantities a 2 i so as to place as much as possible of the weight in the sum (12) in the terms corresponding to the lowest eigenvalues, and as little as possible in the terms corresponding to the highest, while respecting the normalization constraint (11).\n\nThe sum of every row (and column) of the Laplacian matrix is zero:\nj L ij = j (k i \u03b4 ij \u2212 A ij ) = k i \u2212 k i = 0,(13)\nwhere we have made use of (6). Thus the vector (1, 1, 1, . . .) is always an eigenvector of the Laplacian with eigenvalue zero. It is less trivial, but still straightforward, to demonstrate that all eigenvalues of the Laplacian are nonnegative. (The Laplacian is symmetric and equal to the square of the edge incidence matrix, and hence its eigenvalues are all the squares of real vectors.) Thus the eigenvalue 0 is always the smallest eigenvalue of the Laplacian and the corresponding eigenvector is v 1 = (1, 1, 1, . . .)/ \u221a n, correctly normalized. Given these observations it is now straightforward to see how to minimize the cut size R. If we choose s = (1, 1, 1, . . .), then all of the weight in the final sum in Eq. (12) is in the term corresponding to the lowest eigenvalue \u03bb 1 = 0 and all other terms are zero, since (1, 1, 1, . . .) is an eigenvector and the eigenvectors are orthogonal. Thus this choice gives us R = 0, which is the smallest value it can take since it is by definition a nonnegative quantity.\n\nUnfortunately, when we consider the physical interpretation of this solution, we see that it is trivial and uninteresting. Given the definition (3) of s, the choice s = (1, 1, 1, . . .) is equivalent to placing all the vertices in group 1 and none of them in group 2. Technically, this is a valid division of the network, but it is not a useful one. Of course the cut size is zero if we put all the vertices in one of the groups and none in the other, but such a trivial solution tells us nothing about how to solve our original problem.\n\nWe would like to forbid this trivial solution, so as to force the method to find a nontrivial one. A variety of ways have been explored for achieving this goal, of which the most common is to fix the sizes of the two groups, which is convenient if, as discussed above, the sizes of the groups are specified anyway as a part of the problem. In the present case, fixing the sizes of the groups fixes the coefficient a 2 1 of the first term in the sum in Eq. (12); if the required sizes of the groups are n 1 and n 2 , then\na 2 1 = v T 1 s 2 = (n 1 \u2212 n 2 ) 2 n .(14)\nSince we cannot vary this coefficient, we shift our attention to the other terms in the sum. If there were no further constraints on our choice of s, apart from the normalization condition s T s = n, our course would be clear: R would be minimized by choosing s proportional to the second eigenvector v 2 of the Laplacian, also called the Fiedler vector. This choice places all of the weight in Eq. (12) in the term involving the second-smallest eigenvalue \u03bb 2 , also known as the algebraic connectivity. The other terms would automatically be zero, since the eigenvectors are orthogonal. Unfortunately, there is an additional constraint on s imposed by the condition, Eq. (3), that its elements take the values \u00b11, which means in most cases that s cannot be chosen parallel to v 2 . This makes the optimization problem much more difficult. Often, however, quite good approximate solutions can be obtained by choosing s to be as close to parallel with v 2 as possible. This means maximizing the quantity\nv T 1 s = i v (1) i s i \u2264 i v (1) i ,(15)\nwhere v\n\n(1) i is the ith element of v 1 . Here the second relation follows via the triangle inequality, and becomes an equality only when all terms in the first sum are positive (or negative). In other words, the maximum of |v T 1 s| is achieved when v (1) i s i \u2265 0 for all i, or equivalently when s i has the same sign as v (1) i . Thus the maximum is obtained with the choice\ns i = +1 if v (1) i \u2265 0, \u22121 if v (1) i < 0.(16)\nEven this choice however is often forbidden by the condition that the number of +1 and \u22121 elements of s be equal to the desired sizes n 1 and n 2 of the two groups, in which case the best solution is achieved by assigning vertices to one of the groups in order of the elements in the Fiedler vector, from most positive to most negative, until the groups have the required sizes. For groups of different sizes there are two distinct ways of doing this, one in which the smaller group corresponds to the most positive elements of the vector and one in which the larger group does. We can choose between them by calculating the cut size R for both cases and keeping the one that gives the better result. This then is the spectral partitioning method in its simplest form. It is not guaranteed to minimize R, but, particularly in cases where \u03bb 2 is well separated from the eigenvalues above it, it often does very well. Figure 1 shows an example application typical of those found in the literature, to a two-dimensional mesh such as might be used in parallel finite-element calculations. This particular mesh is a small 547-vertex example from Bern et al. [49] and is shown complete in panel (a) of the figure. Panel (b) shows the division of the mesh into two parts of 273 and 274 vertices respectively using the spectral partitioning approach, which finds a cut of size 46 edges in this case. Although the cut found in this example is a reasonable one, it does not appear-at least to this author's eyethat the vertex groups in Fig. 1b constitute any kind of natural division of the network into \"communities.\" This is typical of the problems to which spectral partitioning is usually applied: in most circumstances the network in question does not divide up easily into groups of the desired sizes, but one must do the best one can. For these types of tasks, spectral partitioning is an effective and appropriate tool. The task of finding natural community divisions in a network, however, is quite different, and demands a different approach, as we now discuss.\n\n\nIII. COMMUNITY STRUCTURE AND MODULARITY\n\nDespite its evident success in the graph partitioning arena, spectral partitioning is a poor approach for detecting natural community structure in real-world networks, which is the primary topic of this paper. The issue is with the condition that the sizes of the groups into which the network is divided be fixed. This condition is neither appropriate nor realistic for community detection problems. In most cases we do not know in advance the sizes of the communities in a network and choosing arbitrary sizes will usually preclude us from finding the best solution to the problem. We would like instead to let the group sizes be free, but the spectral partitioning method breaks down if we do this, as we have seen: if the group sizes are not fixed, then the minimum cut size is always achieved by putting all vertices in one group and none in the other. Indeed, this statement is considerably broader than the spectral partitioning method itself, since any method that correctly minimizes the cut size without constraint on the group sizes is sure to find, in the general case, that the minimum value is achieved for this same trivial division.\n\nSeveral approaches have been proposed to get around this problem. For instance, the ratio cut method [50] minimizes not the simple cut size R but the ratio R/(n 1 n 2 ), where n 1 and n 2 are again the sizes of the two groups of vertices. This penalizes configurations in which either of the groups is small and hence favors balanced divisions over unbalanced ones, releasing us from the obligation to fix the group sizes. Spectral algorithms based on ratio cuts have been proposed [51,52] and have proved useful for certain classes of partitioning problems. Still, however, this approach effectively chooses the group sizes, at least approximately, since it is biased in favor of divisions into equal-sized parts. Variations are possible that are biased towards other, unequal part sizes, but then one must choose those parts sizes and so again we have a situation in which we need to know in advance the sizes of the groups if we are to get the \"right\" results. The ratio cut method does allow some leeway for the sizes to vary around their specified values, which makes it more flexible than the simple minimum cut method, but at its core it still suffers from the same drawbacks that make standard spectral partitioning inappropriate for community detection.\n\nThe fundamental problem with all of these methods is that cut sizes are simply not the right thing to optimize because they don't accurately reflect our intuitive concept of network communities. A good division of a network into communities is not merely one in which the number of edges running between groups is small. Rather, it is one in which the number of edges between groups is smaller than expected. Only if the number of between-group edges is significantly lower than would be expected purely by chance can we justifiably claim to have found significant community structure. Equivalently, we can examine the number of edges within communities and look for divisions of the network in which this number is higher than expected-the two approaches are equivalent since the total number of edges is fixed and any edges that do not lie between communities must necessarily lie inside them.\n\nThese considerations lead us to shift our attention from measures based on pure cut size to a modified benefit function Q defined by Q = (number of edges within communities)\n\n\u2212 (expected number of such edges). (17) This benefit function is called modularity [18,53]. It is a function of the particular division of the network into groups, with larger values indicating stronger community structure. Hence we should, in principle, be able to find good divisions of a network into communities by optimizing the modularity over possible divisions. This approach, proposed in [24] and since pursued by a number of authors [8,32,38,39,40], has proven highly effective in practice [36] and is the primary focus of this article. The first term in Eq. (17) is straightforward to calculate. The second, however, is rather vague and needs to be made more precise before we can evaluate the modularity. What exactly do we mean by the \"expected number\" of edges within a community? Answering this question is essentially equivalent to choosing a \"null model\" against which to compare our network. The definition of the modularity involves a comparison of the number of within-group edges in a real network and the number in some equivalent randomized model network in which edges are placed without regard to community structure.\n\nIt is one of the strengths of the modularity approach that it makes the role of this null model explicit and clear. All methods for finding communities are, in a sense, assuming some null model, since any method must make a value judgment about when a particular density of edges is significant enough to define a community. In most cases, this assumption is hidden within the workings of a computer algorithm and is difficult to disentangle, even when the algorithm itself is well understood. By bringing its assumptions out into the open, the modularity method gives us more control over our calculations and more understanding of their implications.\n\nOur null model must have the same number of vertices n as the original network, so that we can divide it into the same groups for comparison, but apart from this we have a good deal of freedom about our choice of model. We here consider the broad class of randomized models in which we specify separately the probability P ij for an edge to fall between every pair of vertices i, j. More precisely, P ij is the expected number of edges between i and j, a definition that allows for the possibility that there may be more than one edge between a pair of vertices, which happens in certain types of networks. We will consider some particular choices of P ij in a moment, but for now let us pursue the developments in general form.\n\nGiven P ij , the modularity can be defined as follows. The actual number of edges falling between a particular pair of vertices i and j is A ij , Eq. (1), and the expected number is, by definition, P ij . Thus the actual minus expected number of edges between i and j is A ij \u2212 P ij and the modularity is the sum of this quantity over all pairs of vertices belonging to the same community. Let us define g i to be the community to which vertex i belongs. Then the modularity can be written\nQ = 1 2m ij A ij \u2212 P ij \u03b4(g i , g j ),(18)\nwhere \u03b4(r, s) = 1 if r = s and 0 otherwise and m is again the number of edges in the network. The extra factor of 1/2m in Eq. (18) is purely conventional; it is included for compatibility with previous definitions of the modularity and plays no part in the maximization of Q since it is a constant for any given network. A special case of Eq. (18) was given previously by the present author in [54] and independently, in slightly different form, by White and Smyth [55]. A number of other expressions for the modularity have also been presented by various authors [18,39,40] and are convenient in particular applications. Also of interest is the derivation of the modularity given recently by Reichardt and Bornholdt [34], which is quite general and provides an interesting alternative to the development presented here.\n\nReturning to the null model, how should P ij be chosen? The choice is not entirely unconstrained. First, we consider in this paper only undirected networks, which implies that P ij = P ji . Second, it is axiomatically the case that Q = 0 when all vertices are placed in a single group together: by definition, the number of edges within groups and the expected number of such edges are both equal to m in this case. Setting all g i equal in Eq. (18),\nwe find that ij [A ij \u2212 P ij ] = 0 or equivalently ij P ij = ij A ij = 2m.(19)\nThis equation says that we are restricted to null models in which the expected number of edges in the entire network equals the actual number of edges in the original network-a natural choice if our comparison of numbers of edges within groups is to have any meaning. Beyond these basic considerations, there are many possible choices of null model and several have been considered previously in the literature [18,27,56]. Perhaps the simplest is the standard (Bernoulli) random graph, in which edges appear with equal probability P ij = p between all vertex pairs. With a suitably chosen value of p this model can be made to satisfy (19) but, as many authors have pointed out [57,58,59], the model is not a good representation of most real-world networks. A particularly glaring aspect in which it errs is its degree distribution. The random graph has a binomial degree distribution (or Poisson in the limit of large graph size), which is entirely unlike the right-skewed degree distributions found in most real-world networks [60,61]. A much better null model would be one in which the degree distribution is approximately the same as that of the realworld network of interest. To satisfy this demand we will restrict our attention in this paper to models in which the expected degree of each vertex within the model is equal to the actual degree of the corresponding vertex in the real network. Noting that the expected degree of vertex i is given by j P ij , we can express this condition as\nj P ij = k i .(20)\nIf this constraint is satisfied, then (19) is automatically satisfied as well, since i k i = 2m.\n\nEquation (20) is a considerably more stringent constraint than (19)-it excludes for instance the Bernoulli random graph-but it is one that we believe makes good sense, and one moreover that has a variety of desirable consequences for the developments that follow. The simplest null model in this class, and the only one that has been considered at any length in the past, is the model in which edges are placed entirely at random, subject to the constraint (20). That is, the probability that an end of a randomly chosen edge attaches to a particular vertex i depends only on the expected degree k i of that vertex, and the probabilities for the two ends of a single edge are independent of one another. This implies that the expected number of edges P ij between vertices i and j is the product f (k i )f (k j ) of separate functions of the two degrees, where the functions must be the same since P ij is symmetric. Then Eq. (20) implies\nn j=1 P ij = f (k i ) n j=1 f (k j ) = k i ,(21)\nfor all i and hence f (\nk i ) = Ck i for some constant C. And Eq. (19) says that 2m = ij P ij = C 2 ij k i k j = (2mC) 2 ,(22)\nand hence C = 1/ \u221a 2m and\nP ij = k i k j 2m .(23)\nThis model has been studied in the past in its own right as a model of a network, for instance by Chung and Lu [62]. It is also closely related to the configuration model, which has been studied widely in the mathematics and physics literature [62,63,64,65]. Indeed, essentially all expected properties of our model and the configuration model are identical in the limit of large network size, and hence Eq. (23) can be considered equivalent to the configuration model in this limit. 2 Although many of the developments outlined in this paper are true for quite general choices of the null model used to define the modularity, the choice (23) is the only one we will pursue here. It is worth keeping mind however that other choices are possible: Massen and Doye [56], for instance, have used a variant of the configuration model in which multiedges and self-edges were excluded. And further choices could be useful in specific cases, such as cases where there are strong correlations between the degrees of vertices [66,67] or where there is a high level of network transitivity [59].\n\n\nIV. SPECTRAL OPTIMIZATION OF MODULARITY\n\nOnce we have an explicit expression for the modularity we can determine the community structure by maximizing it over possible divisions of the network. Unfortunately, exhaustive maximization over all possible divisions is computational intractable because there are simply too many divisions, but various approximate optimization methods have proven effective [8,24,34,38,39,40,56]. Here, we develop a matrix-based approach analogous to the spectral partitioning method of Section II, which leads not only to a whole array of possible optimization algorithms but also to new insights about the nature and implications of community structure in networks.\n\n\nA. Leading eigenvector method\n\nAs before, let us consider initially the division of a network into just two communities and denote a potential such division by an index vector s with elements as in Eq. (3). We notice that the quantity 1 2 (s i s j + 1) is 1 if i and j belong to the same group and 0 if they belong to different groups or, in the notation of Eq. (18),\n\u03b4(g i , g j ) = 1 2 (s i s j + 1).(24)\nThus we can write (18) in the form\nQ = 1 4m ij A ij \u2212 P ij (s i s j + 1) = 1 4m ij A ij \u2212 P ij s i s j ,(25)\nwhere we have in the second line made use of Eq. (19). This result can conveniently be rewritten in matrix form as\nQ = 1 4m s T Bs,(26)\nwhere B is the real symmetric matrix having elements\nB ij = A ij \u2212 P ij .(27)\nWe call this matrix the modularity matrix and it plays a role in the maximization of the modularity equivalent to that played by the Laplacian in standard spectral partitioning: Equation (26) is the equivalent of Eq. (9) for the cut size and matrix methods can thus be applied to the modularity that are the direct equivalents of those developed for spectral partitioning, as we now show. First, let us point out a few important properties of the modularity matrix. Equations (6) and (20) together imply that all rows (and columns) of the modularity matrix sum to zero:\nj B ij = j A ij \u2212 j P ij = k i \u2212 k i = 0.(28)\nThis immediately implies that for any network the vector (1, 1, 1, . . .) is an eigenvector of the modularity matrix with eigenvalue zero, just as is the case with the Laplacian. Unlike the Laplacian however, the eigenvalues of the modularity matrix are not necessarily all of one sign and in practice the matrix usually has both positive and negative eigenvalues. This observation-and the eigenspectrum of the modularity matrix in general-are, as we will see, closely tied to the community structure of the network. Working from Eq. (26) we now proceed by direct analogy with Section II. We write s as a linear combination of the normalized eigenvectors u i of the modularity matrix,\ns = n i=1 a i u i with a i = u T i s. Then Q = 1 4m i a 2 i \u03b2 i ,(29)\nwhere \u03b2 i is the eigenvalue of B corresponding to the eigenvector u i . We now assume that the eigenvalues are labeled in decreasing order \u03b2 1 \u2265 \u03b2 2 \u2265 . . . \u2265 \u03b2 n and the task of maximizing Q is one of choosing the quantities a 2 i so as to place as much as possible of the weight in the sum (29) in the terms corresponding to the largest (most positive) eigenvalues. As with ordinary spectral partitioning, this would be a simple task if our choice of s were unconstrained (apart from normalization): we would just choose s proportional to the leading eigenvector u 1 of the modularity matrix. But the elements of s are restricted to the values s i = \u00b11, which means that s cannot normally be chosen parallel to u 1 . Again as before, however, good approximate solutions can be obtained by choosing s to be as close to parallel with u 1 as possible, which is achieved by setting\ns i = +1 if u (1) i \u2265 0, \u22121 if u (1) i < 0.(30)\nThis then is our first and simplest algorithm for community detection: we find the eigenvector corresponding to the most positive eigenvalue of the modularity matrix and divide the network into two groups according to the signs of the elements of this vector. In practice, this method works nicely, as discussed in Ref. [32]. Making the choice (23) for our null model, we have applied it to a variety of standard and less standard test networks and find that it does a good job of finding community divisions. Figure 2 shows a representative example, an animal social network assembled and studied by Lusseau et al. [68]. The vertices in this network represent 62 bottlenose dolphins living in Doubtful Sound, New Zealand, with social ties between dolphin pairs established by direct observation over a period of several years. This network is of particular interest because, during the course of the study, the dolphin group split into two smaller subgroups following the departure of a key member of the population. The subgroups are represented by the shapes of the vertices in the figure. The dotted line denotes the division of the network into two equal-sized groups found by the standard spectral partitioning method. While, as expected, this method does a creditable job of dividing the network into groups of these particular sizes, it is clear to the eye that this is not the natural community division of the network and neither does it correspond to the division observed in real life. The spectral partitioning method is hamstrung by the requirement that we specify the sizes of the two communities; unless we know what they are in advance, blind application of the method will not usually find the \"right\" division of the network.\n\nThe method based on the leading eigenvector of the modularity matrix, however, does much better. Unconstrained by the need to find groups of any particular size, this method finds the division denoted by the solid line in the figure, which, as we see, corresponds quite closely to the split actually observed-all but three of the 62 dolphins are placed in the correct groups.\n\nThe magnitudes of the elements of the eigenvector u 1 also contain useful information about the network, indicating, as discussed in [32], the \"strength\" with which vertices belong to the communities in which they are placed. As an example of this phenomenon consider Fig. 3, which depicts the network of political books from Ref. [32]. This network, compiled by V. Krebs (unpublished), represents recent books on US politics, with edges connecting pairs of books that are frequently purchased by the same customers of the on-line bookseller Amazon.com. Applying our method, we find that the network divides as shown in the figure, with the colors of the vertices representing the values of the elements of the eigenvector. The two groups correspond closely to the apparent alignment of the books according to leftwing and right-wing points of view [32], and are suggestively colored blue and red in the figure. 3 The most blue and most red vertices are those that, by our calculation, belong most strongly to the two groups and are thus, perhaps, the \"most left-wing\" and \"most right-wing\" of the books under consideration. Those familiar with current US politics will be unsurprised to learn that the most leftwing book in this sense was the polemical Bushwacked by Molly Ivins and Lou Dubose. Perhaps more surprising is the most right-wing book: A National Party No More by Zell Miller. 4\n\n\nB. Other eigenvectors of the modularity matrix\n\nThe algorithm described in the previous section has two obvious shortcomings. First, it divides networks into only two communities, while real-world networks can certainly have more than two. Second, it makes use only of the leading eigenvector of the modularity matrix and ignores all the others, which throws away useful information contained in those other vectors. Both of these shortcomings are remedied by the following generalization of the method.\n\nConsider the division of a network into c nonoverlapping communities, where c may now be greater than 2. Following Alpert and Yao [69] and more recently White and Smyth [55], let us define an n \u00d7 c index matrix S with one column for each community:\n\n3 By a fluke of recent history, the colors blue and red have come to denote liberal and conservative points of view respectively in US politics, where in most other parts of the world the color-scheme is the other way around. 4 Miller is a former Democratic (i.e., ostensibly liberal) governor and US senator for the state of Georgia. He became known in the later years of his career, however, for views that aligned more closely with the conservative Republicans than with the Democrats. Even so, Miller was never the most conservative member of the senate, nor is his book the most conservative in this study. But our measure is not based on the content of the books; it merely finds the vertices in the network that are most central to their communities. The ranking of Miller's book in this calculation results from its centrality within the community of conservative book buying. This book, while not in fact as right-wing as some, apparently appeals widely and exclusively to conservatives, presumably because of the unusual standing of its author as a nominal Democrat supporting the Republican cause. S = (s 1 |s 2 | . . . |s c ). Each column is an index vector now of (0, 1) elements (rather than \u00b11 as previously), such that\nS ij = 1 if vertex i belongs to community j, 0 otherwise.(31)\nNote that the columns of S are mutually orthogonal, that the rows each sum to unity, and that the matrix satisfies the normalization condition Tr(S T S) = n.\n\nObserving that the \u03b4-symbol in Eq. (18) is now given by\n\u03b4(g i , g j ) = c k=1 S ik S jk ,(32)\nthe modularity for this division of the network is\nQ = n i,j=1 c k=1 B ij S ik S jk = Tr(S T BS),(33)\nwhere here and henceforth we suppress the leading multiplicative constant 1/2m from Eq. (18), which has no effect on the position of the maximum of the modularity.\nWriting B = UDU T , where U = (u 1 |u 2 | . . .)\nis the matrix of eigenvectors of B and D is the diagonal matrix of eigenvalues D ii = \u03b2 i , we then find that\nQ = n j=1 c k=1 \u03b2 j (u T j s k ) 2 .(34)\nAgain we wish to maximize this modularity, but now we have no constraint on the number c of communities; we can give S as many columns as we like in our effort to make Q as large as possible.\n\nIf the elements of the matrix S were unconstrained apart from the basic conditions on the rows and columns mentioned above, a choice of c communities would be equivalent to choosing c \u2212 1 independent, mutually orthogonal columns s 1 . . . s c\u22121 . (Only c \u2212 1 of the columns are independent, the last being fixed by the condition that the rows of S sum to unity.) In this case our path would be clear: Q would be maximized by choosing the columns proportional to the leading eigenvectors of B. However, only those eigenvectors corresponding to positive eigenvalues can give positive contributions to the modularity, so the optimal modularity would be achieved by choosing exactly as many independent columns of S as there are positive eigenvalues, or equivalently by choosing the number of groups c to be 1 greater than the number of positive eigenvalues.\n\nUnfortunately, our problem has the additional constraint that the index vectors s i have only binary (0, 1) elements, which means it may not be possible to find as many index vectors making positive contributions to the modularity as the set of positive eigenvalues suggests. Thus the number of positive eigenvalues, plus 1, is an upper bound on the number of communities and again we see that there is an intimate connection between the properties of the modularity matrix and the community structure of the network it describes.\n\n\nC. Vector partitioning algorithm\n\nIn Section IV.A we maximized the modularity approximately by focusing solely on the term in Q proportional to the largest eigenvalue of B. Let us now make the more general (and often better) approximation of keeping the leading p eigenvalues, where p may be anywhere between 1 and n. Some of the eigenvalues, however, may be negative, which will prove inconvenient. To get around this we rewrite Eq. (33) thus:\nQ = n\u03b1 + Tr[S T U(D \u2212 \u03b1I)U T S] = n\u03b1 + n j=1 c k=1 (\u03b2 j \u2212 \u03b1) n i=1 U ij S ik 2 ,(35)\nwhere \u03b1 is a constant whose value we will choose shortly and we have made use of Tr(S T S) = n and the fact that U is orthogonal. Now, employing an argument similar to that used for ordinary spectral partitioning in [69], let us define a set of vertex vectors r i , i = 1 . . . n, of dimension p, such that the jth component of the ith vector is\nr i j = \u03b2 j \u2212 \u03b1 U ij .(36)\nProvided we choose \u03b1 \u2264 \u03b2 p , r i is guaranteed real for all i. Then, dropping terms in (35) proportional to the smallest n \u2212 p of the factors \u03b2 j \u2212 \u03b1, we have\nQ \u2243 n\u03b1 + p j=1 c k=1 n i=1 \u03b2 j \u2212 \u03b1 U ij S ik 2 = n\u03b1 + c k=1 p j=1 i\u2208G k r i j 2 = n\u03b1 + c k=1 |R k | 2 ,(37)\nwhere G k is the set of vertices comprising group k and the community vectors R k , k = 1 . . . c, are\nR k = i\u2208G k r i .(38)\nThe community structure problem is now equivalent to choosing a division of the vertices into groups so as to maximize the magnitudes of the vectors R k . This means we need to arrange that the individual vertex vectors r i going into each group point in approximately the same direction. Problems of this type are called vector partitioning problems.\n\nThe parameter p controls the balance between the complexity of the vector partitioning problem and the accuracy of the approximation we make by keeping only some of the eigenvalues. The calculations will be faster but less accurate for small p and slower but more accurate for larger. For the special case p = n where we keep all of the eigenvalues, Eq. (37) is exact. In this case, we note that the vertex vectors have the property\nr T i r j = n k=1 U ik (\u03b2 k \u2212 \u03b1)U jk = B ij \u2212 \u03b1\u03b4 ij .(39)\nIt's then simple to see that Eq. (37) is trivially equivalent to the fundamental definition (18) of the modularity, so in the p = n case our mapping to a vector partitioning problem gives little insight into the modularity maximization problem. The real advantage of our approach comes when p < n, where the method extracts precisely those factors that make the principal contributions to the modularity-i.e., those corresponding to the largest eigenvalues-discarding those that have relatively little effect. In practice, as we have seen for the singleeigenvector algorithm, the main features of the community structure are often captured by just the first eigenvector or perhaps the first few, which allows us to reduce the complexity of our optimization problem immensely. The approach is similar in concept to the standard technique of principal components analysis (PCA) used to reduce high-dimensional data sets to manageably small dimension by focusing on the eigendirections along which the variance about the mean is greatest and ignoring directions that contribute little. In fact, this similarity is more than skin-deep: the form of our modularity matrix is closely analogous to the covariance matrix whose eigenvectors are the basis for PCA. The elements of the covariance matrix are correlation functions of the form xy \u2212 x y , where x and y denote measured variables in the data set. Thus the covariance is the difference between the actual value of the mean product xy of two variables and the value x y expected by chance for that product if the variables were uncorrelated. Similarly, the elements B ij = A ij \u2212 k i k j /2m of the modularity matrix are equal to the actual number of edges A ij between a given pair of vertices and the number k i k j /2m expected by chance, expressed in a product form. In a sense, therefore, our spectral method for modularity optimization can be regarded as a \"principal components analysis for networks.\" This aspect of the method is clear, for instance, in the study of political books represented in Fig. 3: the leading eigenvector used to assign the colors to the vertices in the figure is playing a role equivalent to the eigendirections in PCA, defining a \"direction of greatest variation\" in the structure of the network. The vertex vectors of Eq. (36) are similarly analogous to the low-dimensional projections used in PCA. 5 Returning to our algorithm, let us consider again the special case of the division of a network into just two communities. (Multi-way division is considered in Section VI.) Since (1, 1, 1, . . .) is always an eigenvector of the modularity matrix and the eigenvectors are orthogonal, the elements of all other eigenvectors must sum to zero:\nn i=1 u j i = \u221a n u T 1 u j = 0.(40)\nBut Eq. (36) then implies that\nn i=1 r i j = \u03b2 j \u2212 \u03b1 n i=1 U ij = \u03b2 j \u2212 \u03b1 n i=1 u j i = 0,(41)\nand hence n i=1 r i = 0 (42) for any value of p. This in turn implies that the community vectors R k also sum to zero:\nc k=1 R k = c k=1 i\u2208G k r i = n i=1 r i = 0.(43)\nAnd as a special case of this last result, any division of a network into two communities has community vectors R 1 and R 2 that are of equal magnitude and oppositely directed. Furthermore, the maximum of the modularity, Eq. (37), is always achieved when each individual vertex vector r i has a positive inner product with the community vector of the community to which the vertex belongs. To see this, observe that removing a vertex i from a community k where R k \u00b7 r i < 0 produces a change in the corresponding term |R k | 2 in Eq. (37) of\n|R k \u2212 r i | 2 \u2212 |R k | 2 = |r i | 2 \u2212 2R k \u00b7 r i > 0.(44)\nSimilarly adding vertex i to a community for which R k \u00b7 r i > 0 also increases |R k | 2 . Hence, we can always increase the modularity by moving vertices until they are in groups such that R k \u00b7 r i > 0. Taken together, these results imply that possible candidates for the optimal division of a network into two groups are fully specified by just the direction of the single vector R 1 . Once we have this direction, we know that the vertices divide according to whether their projection along this direction is positive or negative. Alternatively, one can consider the direction of R 1 to define a perpendicular plane through the origin in the p-dimensional vector space occupied by the vertex vectors r i . The vertices then divide according to which side of this plane their vectors fall on. Finding the maximum of the modularity is then a matter of choosing this bisecting plane to maximize the magnitude of R 1 .\n\nIn general, this still leaves us with a moderately difficult optimization problem: the number of bisecting planes that give distinct partitions of the vertex vectors is large and difficult to enumerate as the dimension p of the space becomes large. For the case p = 2, however, a relatively simple solution exists. Consider Fig. 4, which shows a typical example of the vertex vectors. 6 In this two-dimensional case, there are only n topologically distinct choices of the bisecting plane (actually just a line in this case, denoted by the dashed line in the figure), and furthermore the divisions of the vertices that these choices represent change by only a single vertex 6 In fact, this figure shows the vectors for the \"karate club\" network used previously as an example in Ref. [32]. For p > 2, we do not know of an efficient method to enumerate exhaustively all topologically distinct bisecting planes in the vertex vector space, and hence we have to turn to approximate methods for solving the vector partitioning problem. A number of reasonable heuristics have been described in the past. We have found acceptable though not spectacular results, for instance, with the \"MELO\" algorithm of [69], which is essentially a greedy algorithm in which a grouping of vectors is built up by repeatedly adding to it the vector that makes the largest contribution to Q.\n\n\nD. Choice of \u03b1\n\nBefore implementing any of these methods, a crucial question we must answer is what value we should choose for the parameter \u03b1. By tuning this value we can improve the accuracy of our approximation to Q as follows.\n\nBy dropping the n\u2212p most negative eigenvalues, we are in effect making an approximation to the matrix B \u2212 \u03b1I in which it takes not its full value U(D \u2212 \u03b1I)U T , but an approximate value U(D \u2032 \u2212 \u03b1I \u2032 )U T , where D \u2032 and I \u2032 are the matrices D and I with the last n\u2212p diagonal elements set to zero. We can quantify the error this introduces by calculating the sum of the squares of the elements of the difference between the two matrices, which is given by (45) where in the second line we have made use of the fact that U is orthogonal.\n\u03c7 2 = Tr[U(D \u2212 \u03b1I)U T \u2212 U(D \u2032 \u2212 \u03b1I \u2032 )U T ] 2 = Tr[(D \u2212 \u03b1I) \u2212 (D \u2032 \u2212 \u03b1I \u2032 )] 2 = n i=p+1 (\u03b2 i \u2212 \u03b1) 2 ,\nMinimizing this error by setting the derivative d\u03c7 2 /d\u03b1 = 0, we find\n\u03b1 = 1 n \u2212 p n i=p+1 \u03b2 i .(46)\nIn other words, the minimal mean square error introduced by our approximation is achieved by setting \u03b1 equal to the mean of the eigenvalues that have been dropped. The only exception is when p = n, where the choice of \u03b1 makes no difference since no approximation is being made anyway. In our calculations we have used \u03b1 = \u03b2 n in this case, but any choice \u03b1 \u2265 \u03b2 n would work equally well.\n\n\nV. IMPLEMENTATION\n\nImplementation of the methods described in Section IV is straightforward. The leading-eigenvector method of Section IV.A requires us to find only the single eigenvector of the modularity matrix B corresponding to the most positive eigenvalue. This is most efficiently achieved by the direct multiplication or power method. Starting with a trial vector, we repeatedly multiply by the modularity matrix and-unless we are unlucky enough to have chosen another eigenvector as our trial vector-the result will converge to the eigenvector of the matrix having the eigenvalue of largest magnitude. In some cases this eigenvalue will be the most positive one, in which case our calculation ends at this point. In other cases the eigenvalue of largest magnitude may be negative. If this happens then, denoting this eigenvalue by \u03b2 n , we calculate the shifted matrix B \u2212 \u03b2 n I, which has eigenvalues \u03b2 i \u2212 \u03b2 n (necessarily all nonnegative) and the same eigenvectors as the modularity matrix itself. Then we repeat the power-method calculation for this new matrix and this time the eigenvalue of largest magnitude must be \u03b2 1 \u2212 \u03b2 n and the corresponding eigenvector is the one we are looking for.\n\nFor the method of Section IV.B, we require either all of the eigenvectors of the modularity matrix or a subset corresponding to the p most positive eigenvalues. These are most conveniently calculated using the Lanczos method or one of its variants [70]. The fundamental matrix operation at the heart of the Lanczos method is again multiplication of the matrix B into a trial vector.\n\nEfficient implementation of any of these methods thus rests upon our ability to rapidly multiply an arbitrary vector x by the modularity matrix. This presents a problem because the modularity matrix is dense, and hence it appears that matrix multiplications will demand O(n 2 ) time each, where n is, as before, the number of vertices in the network (which is also the size of the matrix). By contrast, the equivalent calculation in standard spectral partitioning is much faster because the Laplacian matrix is sparse, having only O(n + m) nonzero elements, where m is the number of edges in the network.\n\nFor the standard choice, Eq. (23), of null model used to define the modularity, however, it turns out that we can multiply by the modularity matrix just as fast as by the Laplacian by making use of the special structure of the matrix. In vector notation the modularity matrix can in this case be written\nB = A \u2212 kk T 2m ,(47)\nwhere A is the adjacency matrix, Eq. (1), and k is the n-element vector whose elements are the degrees k i of the vertices. Then\nBx = Ax \u2212 k T x 2m k.(48)\nSince the adjacency matrix is sparse, having only O(m) elements, the first term can be evaluated in O(m) time, while the second requires us to evaluate the inner product k T x only once and then multiply it into each element of k in turn, both operations taking O(n) time. Thus the entire matrix multiplication can be completed in O(m + n) time, just as with the normal Laplacian matrix. If a shift of the eigenvalues is required to find the most positive one, as described above, then there is an additional term \u2212\u03b2 n I in the matrix, but this also can be multiplied into an arbitrary vector in O(n) time, so again the entire operation can be completed in O(m + n) time.\n\nTypically O(n) matrix multiplications are required for either the power method or the Lanczos method to converge to the required eigenvalues, and hence the calculation takes O((m + n)n) time overall. In the common case in which the network is sparse and m \u221d n, this simplifies to O(n 2 ).\n\nWhile this is, essentially, the end of the calculation for the power method, the Lanczos method unfortunately demands more effort to find the eigenvectors themselves. In fact, it takes O(n 3 ) time to find all eigenvectors of a matrix using the Lanczos method, which is quite slow. There are on the other hand variants of the Lanczos method (as well as other methods entirely) that can find just a few leading eigenvectors faster than this, which makes calculations that focus on a fixed small number of eigenvectors preferable to ones that use all eigenvectors. In our calculations we have primarily concentrated on algorithms that use only one or two eigenvectors, which typically run in time O(n 2 ) on a sparse network.\n\n\nA. Refinement of the modularity\n\nThe methods for spectral optimization of the modularity described in Section IV are only approximate. Indeed, the problem of modularity optimization is formally equivalent to an instance of the NP-hard MAX-CUT problem, so it is almost certainly the case that no polynomial-time algorithm exists that will find the modularity optimum in all cases. Given that the algorithms we have described run in polynomial time, it follows that they must fail to find the optimum in some cases, and hence that there is room for improvement of the results.\n\nIn standard graph partitioning applications it is common to use a spectral approach based on the graph Laplacian as a first pass at the problem of dividing a network. The spectral method gives a broad picture of the general shape the division should take, but there is often room for improvement. Typically another algorithm, such as the Kernighan-Lin algorithm [71], which swaps vertex pairs between groups in an effort to reduce the cut size, is used to refine this first pass, and the resulting twostage joint strategy gives considerably better results than either stage on its own.\n\nWe have found that a similar joint strategy gives good results in the present case also: the divisions found with our spectral approach can be improved in small but significant ways by adding a refinement step akin to the Kernighan-Lin algorithm. As described in [32], we take an initial division into two communities derived, for instance, from the leading-eigenvector method of Section IV.A and move single vertices between the communities so as to increase the value of the modularity as much as possible, with the constraint that each vertex can be moved only once. Repeating the whole process iteratively until no further improvement is obtained, we find a final value of the modularity which can improve on that derived from the spectral method alone by tens of percent in some cases, and smaller but still significant amounts in other cases. Although the absolute gains in modularity are not always large, we find that this refinement step is very much worth the effort it entails, raising the typical level of performance of our methods from the merely good to the excellent, when compared with other algorithms. Specific examples are given in [32].\n\nIt is certainly possible that other refinement strategies might also give good results. For instance, the \"extremal optimization\" method explored by Duch and Arenas [40] for optimizing modularity could be employed as a refinement method by using the output of our spectral division as its starting point, rather than the random configuration used as a starting point by Duch and Arenas.\n\n\nVI. DIVIDING NETWORKS INTO MORE THAN TWO COMMUNITIES\n\nSo far we have discussed only methods for dividing networks into two communities. Many of the networks we are concerned with, however, have more than two communities. How can we generalize our methods to this case? The simplest approach is repeated division into two. That is, we use one of the methods described above to divide our network in two and then divide those parts in two again, and so forth. This approach was described briefly in Ref. [32].\n\nIt is important to appreciate that upon further subdividing a community within a network into two parts, the additional contribution \u2206Q to the modularity made by this subdivision is not given correctly if we apply the algorithms of Section IV to that community alone. That is, we cannot simply write down the modularity matrix for the community in question considered as a separate graph in its own right and examine the leading eigenvector or eigenvectors. Instead we proceed as follows. Let us denote the set of vertices in the community to be divided by G and let n G be the number of vertices within this community. Now let S be an n G \u00d7 c index matrix denoting the subdivision of the community into c subcommunities such that S ij = 1 if vertex i belongs to subcommunity j, 0 otherwise. (49) Then, following Eq. (33), \u2206Q is the difference between the modularities of the network before and after subdivision of the community thus:\n\u2206Q = c k=1 i,j\u2208G B ij S ik S jk \u2212 i,j\u2208G B ij = c k=1 i,j\u2208G B ij \u2212 \u03b4 ij l\u2208G B il S ik S jk = Tr(S T B (G) S),(50)\nwhere B (G) is an n G \u00d7 n G generalized modularity matrix with elements indexed by the vertex labels i, j of the vertices within group G and having values\nB (G) ij = B ij \u2212 \u03b4 ij l\u2208G B il ,(51)\nwith B ij defined by Eq. (27). Equation (50) has the same form as our previous expression, Eq. (33), for the modularity of the full network, and, following the same argument as for Eqs. (35) to (38), we can then show that optimization of the additional modularity contribution from subdivision of a community can also be expressed as a vector partitioning problem, just as before. We can approximate this vector partitioning problem using only the leading eigenvector as in Section IV.A or using more than one vector as in Section IV.B. The resulting divisions can also be optimized using a \"refinement\" stage as in Section V.A, to find the best possible modularity at each step.\n\nUsing this method we can repeatedly subdivide communities to partition networks into smaller and smaller groups of vertices and in principle this process could continue until the network is reduced to n communities containing only a single vertex each. Normally, however, we stop before this point is reached because there is no point in subdividing a community any further if no subdivision exists that will increase the modularity of the network as a whole. Our recommended strategy is to calculate explicitly the modularity contribution \u2206Q at each step in the subdivision of a network, and to decline to subdivide any community for which the value of \u2206Q is not positive. Communities with the property of having no subdivision that gives a positive contribution to the modularity of the network as a whole we call indivisible; the strategy described here is equivalent to subdividing communities repeatedly until every remaining community is indivisible.\n(b) (a)\nThis strategy appears to work very well in practice. It is, however, not perfect (a conclusion we could draw under any circumstances from the fact that it runs in polynomial time-see above). In particular, it is certain that repeated subdivision of a network into two parts will in some cases fail to find the optimal modularity configuration. Consider, for example, the (rather trivial) network shown in Fig. 5, which consists of eight vertices connected together in a line. By exhaustive enumeration we can show that, among possible divisions of this network into only two parts, the division indicated in Fig. 5a, right down the middle of the network, is the one that gives the highest modularity. The optimum modularity over divisions into any number of parts, however, is achieved for the three-way division shown in Fig. 5b. It is clear that if we first split the network as shown in Fig. 5a, no subsequent subdivisions of the network can ever find the configuration of Fig. 5b, and hence our algorithm will fail in this case to find the global optimum. Nonetheless, the algorithm does appear to find divisions that are close to optimal in most cases we have investigated.\n\nRepeated subdivision is the approach we have taken to multi-community divisions in our own work, but it is not the only possible approach. In some respects a more satisfying approach would be to work directly from the ex-pression (37) for the modularity of the complete network with a multi-community division. Unfortunately, maximizing (37) requires us to perform a vector partitioning into more than two groups, a problem about whose solution rather little is known. Some general observations are, however, worth making. First, we note that the community vectors R i in the optimal solution of a vector partitioning problem always have directions more than 90 \u2022 apart. To demonstrate this, we note that the change in the contribution to Eq. (37) if we amalgamate two communities into one is\nR 1 + R 2 2 \u2212 R 1 2 + R 2 2 = 2R 1 \u00b7 R 2 ,(52)\nwhich is positive if the directions of R 1 and R 2 are less than 90 \u2022 apart. Thus we can always increase the modularity by amalgamating a pair of communities unless their vectors are more than 90 \u2022 apart. But the maximum number of directions more than 90 \u2022 apart that can exist in a p-dimensional space is p + 1, which means that p + 1 is also the maximum number of communities we can find by optimizing a p-dimensional spectral approximation to the modularity. Thus if we use only a single eigenvector we will find at most two groups; if we use two we will find at most three groups, and so forth. So the choice of how many eigenvectors p to work with is determined to some extent by the network: if the overall optimum modularity is for a division into c groups, we will certainly fail to find that optimum if we use less than c \u2212 1 eigenvectors.\n\nSecond, we note that while true multi-way vector partitioning may present problems, simple heuristics that group the vertex vectors together can still produce good results. For instance, White and Smyth [55] have applied the standard technique of k-means clustering based on group centroids to a different but related optimization problem and have found good results. It is possible this approach would work for our problem also if applied to the centroids of the end-points of the vertex vectors. It is also possible that an intrinsically vector-based variant of k-means clustering could be created to tackle the vector partitioning problem directly, although we are not aware of such an algorithm in the current vector partitioning literature.\n\n\nVII. NEGATIVE EIGENVALUES AND BIPARTITE STRUCTURE\n\nIt is clear from the developments of the previous sections that there is useful information about the community structure of a network stored in the eigenvectors corresponding to the most positive eigenvalues of the modularity matrix. It is natural to ask whether there is also useful information in the eigenvectors corresponding to the negative eigenvalues and indeed it turns out that there is: the negative eigenvalues and their eigenvectors contain information about a nontrivial type of \"anti-community structure\" that is of substantial inter- est in some instances.\n\nConsider again the case in which we divide our network into just two groups and look once more at Eq. (29), which gives the modularity in this case. Suppose now that instead of maximizing the terms involving the most positive eigenvalues, we maximize the terms involving the most negative ones. As we can easily see from the equation, this is equivalent to minimizing rather than maximizing the modularity.\n\nWhat effect will this have on the divisions of the network that we find? Large negative values of the modularity correspond to divisions in which the number of edges within groups is smaller than expected on the basis of chance, and the number of edges between groups correspondingly bigger. Figure 6 shows a sketch of a network having this property. Such networks are said to be bipartite if there are no edges at all within groups, or approximately bipartite if there are a few within-group edges as in the figure. Bipartite or approximately bipartite graphs have attracted some attention in the recent literature. For instance, Kleinberg [72] has suggested that small bipartite subgraphs in the web graph may be a signature of so-called hub/authority structure within web communities, while Holme et al. [73] and Estrada and Rodr\u00edguez-Vel\u00e1zquez [74] have independently devised measures of bipartitivity and used them to analyze a variety of realworld networks.\n\nThe arguments above suggest that we should be able to detect bipartite or approximately bipartite structure in networks by looking for divisions of the vertices that minimize modularity. In the simplest approximation, we can do this by focusing once more on just a single term in Eq. (29), that corresponding to the most negative eigenvalue \u03b2 n , and maximizing the coefficient of this eigenvalue by choosing s i = \u22121 for vertices having a negative element in the corresponding eigenvector and s i = +1 for the others. In other words, we can achieve an approximation to the minimum modularity division of the network by dividing vertices according to the signs of the elements in the eigenvector u n , and this division should correspond roughly to the most nearly bipartite division. We can also append a \"refinement\" step to the calculation, similar to that described in Section V.A, in which, starting from the division given by the eigenvector, we move single vertices between groups in an effort to min- imize the modularity further.\n\nAs an example of this type of calculation, consider Fig. 7, which shows a network representing juxtapositions of words in a corpus of English text, in this case the novel David Copperfield by Charles Dickens. To construct this network, we have taken the 60 most commonly occurring nouns in the novel and the 60 most commonly occurring adjectives. (The limit on the number of words is imposed solely to permit a clear visualization; there is no reason in principle why the analysis could not be extended to a much larger network.) The vertices in the network represent words and an edge connects any two words that appear adjacent to one another at any point in the book. Eight of the words never appear adjacent to any of the others and are excluded from the network, leaving a total of 112 vertices.\n\nTypically adjectives occur next to nouns in English. It is possible for adjectives to occur next to other adjectives (\"the big green bus\") or for nouns to occur next to other nouns (\"the big tour bus\"), but these juxtapositions are less common. Thus we would expect our network to be approximately bipartite in the sense described above: edges should run primarily between vertices representing different types of words, with fewer edges between vertices of the same type. One would be hard pressed to tell this from Fig. 7a, however: the standard layout algorithm used to draw the network completely fails to reveal the interesting structure present. Figure 7b shows what happens when we divide the vertices by minimizing the modularity using the method described above-a first division according to the elements of the eigenvector with the most negative eigenvalue, followed by a refinement stage to reduce the modularity still further. It is now clear that the network is in fact nearly bipartite, and the two groups found by the algorithm correspond closely to the known groups of adjectives and nouns, as indicated by the shapes of the vertices. 83% of the words are classified correctly by this simple calculation.\n\nDivisions with large negative modularity are-like those with large positive modularity-not limited to having only two groups. If we are interested purely in minimizing the modularity we can in principle use as many groups as we like to achieve that goal. A division with k groups is called k-partite if edges run only between groups and approximately k-partite if there are a few within-group edges. One might imagine that one could find k-partite structure in a network just by looking for divisions that minimize the number of within-group edges, but brief reflection persuades us that the optimum solution to this search problem is always to put each vertex in a group on its own, which automatically means that all edges lie between groups and none within groups. As with the ordinary community structure problem, the way to avoid this trivial solution is to concentrate not on the total number of edges within groups but on the difference between this number and the expected number of such edges. Thus, once again, we are led naturally to the consideration of modularity as a measure of the best way to divide a network.\n\nOne way to minimize modularity over divisions into an arbitrary number of groups is to proceed by analogy with our earlier calculations of community structure and repeatedly divide the network in two using the singleeigenvector method above. Just as before, Eq. (50) gives the additional change \u2206Q in the modularity upon subdivision of a group in a network, and the division process ends when the algorithm fails to find any subdivision with \u2206Q < 0. Alternatively, one can derive the analog of Eq. (37) and thereby map the minimization of the modularity onto a vector partitioning problem. The appropriate definition of the vertex vectors turns out to be\nr i j = \u03b1 \u2212 \u03b2 n+1\u2212j U i,n+1\u2212j ,(53)\nwhere \u03b1 is a constant chosen sufficiently large as to make \u03b1 \u2212 \u03b2 j \u2265 0 for all terms in the sum that we keep. Then the modularity is given by\nQ = n\u03b1 \u2212 c k=1 |R k | 2 ,(54)\nwith the community vectors R k defined according to Eq. (38).\n\n\nVIII. OTHER USES OF THE MODULARITY MATRIX\n\nOne of the striking properties of the Laplacian matrix is that, as described in Section II, it arises repeatedly in various different areas of graph theory. It is natural to ask whether the modularity matrix also crops up in other areas. In this section we describe briefly two other situations in which the modularity matrix appears, although neither has been viewed in terms of this matrix in the past, as far as we are aware.\n\n\nA. Network correlations\n\nFor our first example, suppose we have a quantity x i defined on the vertices i = 1 . . . n of a network, such as degrees of vertices, ages of people in a social network, numbers of hits on web pages, and so forth. And let x be the n-component vector whose elements are the x i . Then consider the quantity\nr = 1 2m x T Bx,(55)\nwhere here we will take the same definition (23) for our null model that we have been using throughout. Observing that ij A ij = i k i = 2m, we can rewrite r as\nr = 1 2m ij A ij \u2212 k i k j 2m x i x j = ij A ij x i x j ij A ij \u2212 ij A ij x i ij A ij 2 .(56)\nNote that the ratios appearing in the second line are simply averages over all edges in the network, and hence r has the form x i x j \u2212 x i x j of a correlation function measuring the correlation of the values x i over all pairs of vertices joined by an edge in the network. Correlation functions of exactly this type have been considered previously as measures of so-called \"assortative mixing,\" the tendency for adjacent vertices in networks to have similar properties [53,67]. For example, if the quantity x i is just the degree k i of a vertex, then r is the covariance of the degrees of adjacent vertices, which takes positive values if vertices tend to have similar degrees to their neighbors, high-degree vertices linking to other high-degree vertices and low to low, and negative values if high-degree links to low.\n\nEquation (55) is not just a curiosity, but provides some insight concerning assortativity. If we expand x in terms of the eigenvectors u i of the modularity matrix, as we did for the modularity itself in Eq. (29), we get\nr = 1 2m i c 2 i \u03b2 i ,(57)\nwhere \u03b2 i is again the ith largest eigenvalue of B and c i = u T i x. Thus r will have a large positive value if x has a large component in the direction of one or more of the most positive eigenvectors of the modularity matrix, and similarly for large negative values. Now we recall that the leading eigenvectors of the modularity matrix also define the communities in the network and we see that there is a close relation between assortativity and community structure: networks will be assortative according to some property x if the values of that property divide along the same lines as the communities in the network. Thus, for instance, a network will be assortative by degree if the degrees of the vertices are partitioned such that the highdegree vertices fall in one community and the low-degree vertices in another. This lends additional force to the discussion given in the introduction, where we mentioned that different communities in networks are often found to have different average properties such as degree. In fact, as we now see, this is probably the case for any property that displays significant assortative mixing, which includes an enormous variety of quantities measured in networks of all types. Thus, it is not merely an observation that different communities have different average properties-it is an expected behavior in a network that has both community structure and assortativity.\n\n\nB. Community centrality\n\nFor our second example of other uses of the modularity matrix, we consider centrality measures, one of the abiding interests of the network analysis community for many decades. In Section IV.A we argued that the magnitudes of the elements of the leading eigenvector of the modularity matrix give a measure of the \"strength\" with which vertices belong to their assigned communities. Thus these magnitudes define a kind of centrality index that quantifies how central vertices are in communities. Focusing on just a single eigenvector of the modularity matrix, however, is limiting. As we have seen, all the eigenvectors contain useful information about community structure. It is useful to ask what the appropriate measure is of strength of community membership when the information in all eigenvectors is taken into account. Given Eq. (37), the obvious candidate seems to be the projection of the vertex vector r i onto the community vector R k of the community to which vertex i belongs. Unfortunately, this projection depends on the arbitrary parameter \u03b1, which we introduced in Eq. (35) to get around problems caused by the negative eigenvalues of the modularity matrix. This in turn threatens to introduce arbitrariness into our centrality measure, which we would prefer to avoid. So for the purposes of defining a centrality index we propose a slightly different formulation of the modularity, which is less appropriate for the optimization calculations that are the main topic of this paper, but more satisfactory for present purposes, as we will see.\n\nSuppose that there are p positive eigenvalues of the modularity matrix and q negative ones. We define two new sets of vertex vectors {x i } and {y i }, of dimension p and q, thus:\nx i j = \u03b2 j U ij ,(58)y i j = \u2212\u03b2 n+1\u2212j U i,n+1\u2212j .(59)\n(Note that p + q < n since there is always at least one eigenvalue with value zero.) In terms of these vectors the modularity, Eq. (33), can be written as\nQ = c k=1 p j=1 n i=1 \u03b2 j U ij S ik 2 \u2212 c k=1 q j=1 n i=1 \u2212\u03b2 n+1\u2212j U i,n+1\u2212j S ik 2 = c k=1 p j=1 i\u2208G k x i j 2 \u2212 c k=1 q j=1 i\u2208G k y i j 2 = c k=1 |X k | 2 \u2212 c k=1 |Y k | 2 ,(60)\nwhere G k is once again the set of vertices in community k and the community vectors X k and Y k are defined by\nX k = i\u2208G k x i , Y k = i\u2208G k y i .(61)\nThis reformulation avoids the use of the arbitrary constant \u03b1, thereby making the vertex vectors dependent only on the network structure and not on the way in which we choose to represent it. Equation (60) separates out the positive and negative contributions to the modularity, the positive contributions coming from vertices that have large corresponding elements in the eigenvectors with positive eigenvalues, and conversely for the negative contributions. Thus the two contributions correspond respectively to the traditional community structure of Sections III and IV, and to the bipartite or k-partite structure discussed in Section VII. It is important to notice that while obviously the overall modularity can only be either positive or negative, it is entirely possible for individual vertices to simultaneously make both large positive and large negative contributions to that modularity. Upon reflection, this is clearly reasonable: there is no reason why a single vertex cannot have more connections than expected within its own community and more connections than expected to other communities. In a sense, Eq. (60) may be a more fundamental representation of the modularity than Eq. (37) because it makes this separation transparent, even if it is in practice less suitable as a basis for modularity optimization.\n\nWe can now define precisely the quantity that plays the role previously played by the elements of the leading eigenvector in the single-eigenvector approximation: it is the projection of x i onto the relevant community vector X k , as we can see by writing the magnitude |X k | in Eq. (60) as\n|X k | = X T k X k |X k | = X T k |X k | i\u2208G k x i = i\u2208G kX T k x i ,(62)\nwhereX k is the unit vector in the direction of X k . Thus each vertex makes a contribution to |X k | equal to its projection onto X k . In the approximation where we ignore all but the leading eigenvector, this projection reduces to the (magnitude of) the appropriate element of that eigenvector, as in Section IV.A. The projection specifies how central vertex i is in its own community in the traditional sense of having many connections within that community. If this quantity is large then we will lose a large positive contribution to the modularity if we move the vertex to another community, which is to say that the vertex is a strong member of its current community.\n\nBut there is now also a second measure for each vertex, the projection of y i onto Y k . This projection corresponds to a more unusual sort of centrality which is high if vertex i has many connections to others outside its community. This \"outsider\" centrality measure could also be useful in certain circumstances to identify individuals with strong external connections.\n\nThese two projections, however, do not take precisely the form that we expect of a centrality measure because they are functions not only of the vertex itself (via x i or y i ) but also of the community in which it is placed (via X k or Y k ). Instead, therefore, let us consider the projection in the form |x i | cos \u03b8 ik , where \u03b8 ik is the angle between x i and X k . The two parts of this expression are both of interest. The first, the magnitude |x i |, measures how large a positive contribution vertex i can potentially make to the modularity. The vertex only actually makes a contribution this large if the vertex vector is aligned with the community vector, i.e., if the vertex is, in a sense, \"in the middle\" of the community to which it belongs. Even a vertex for which |x i | is large may in practice make a small positive contribution to the modularity if x i is almost perpendicular to X k , i.e., if the vertex is \"on the edge\" of the community.\n\nThe second part of the projection, the cos \u03b8 ik , is a measure precisely of the vertex's position in the middle or on the edge of its community. In the parlance of social network analysis, the vertex is either in the core of its community (cos \u03b8 ik near 1) or in the periphery (cos \u03b8 ik nearer 0). The cosine is a property both of the vertex and of the community.\n\nLet us focus here on the vector magnitudes and define two centrality measures for vertices in a network equal to the magnitudes of the vertex vectors x i and y i . (If we prefer, we could use |x i | 2 instead, which is slightly easier to calculate. If, as is sometimes the case with centrality measures, we only care about relative rankings of vertices, then the two are equivalent.) These centralities are now properties of the vertices alone and are independent of the way the network is divided into communities. We notice, however, that |x i | and |y i | are not independent since\n|x i | 2 \u2212 |y i | 2 = p j=1 \u03b2 j U ij 2 \u2212 q j=1 \u2212\u03b2 n+1\u2212j U i,n+1\u2212j 2 = n j=1 U ij \u03b2 j U T ji = B ii .(63)\nAlmost all networks considered in the literature are simple graphs, meaning, among other things, that they have no self-edges (edges that connect vertices to themselves) and hence A ii = 0 for all i. If the expected number of self-edges P ii is also zero (as seems sensible), then B ii = 0 and we have |x i | = |y i | for all i. Thus there is actually only one centrality for simple graphs, not two. In fact, the choice (23) for P ij that we and other authors have mostly used does allow self-edges (and is in this sense slightly unrealistic-see [56]), but P ii = k 2 i /2m is typically small for most vertices if m is large (and indeed vanishes as m \u2192 \u221e if degrees are bounded), and hence it is still true to a good approximation that |x i | \u2243 |y i | and there is only one centrality.\n\nIn other words, we come to the nontrivial conclusion that the vertices with the greatest capacity for making positive contributions to the modularity also have the greatest capacity for making negative contributions. The fundamental meaning of this centrality measure is thus that there are certain vertices that, as a consequence of their situation within the network, have the power to make substantial contributions, either positive or negative, to the overall modularity of the network. For this reason, we call this centrality measure community centrality. We define it to be equal to the vector magnitude |x i |.\n\nAn alternative way to view the community centrality is to consider how a vertex i is situated among the other vertices in its immediate vicinity-its neighborhood in the network. If we were to artificially construct a community from the vertices of this neighborhood, then that community would presumably have a community vector X k with direction close to x i , and hence the magnitude |x i | would be a good measure of the actual strength with which vertex i belongs the community. Thus vertices with high community centrality are ones that play a central role in their local neighborhood, regardless of where the official community boundaries may lie. Conversely, even when considered as the \"center of its world\" in this way, vertex i can never play a central role in its neighborhood in this sense if |x i | is small.\n\nAs an example, consider Fig. 8, which shows results for community centrality for a network of coauthorships between scientists, scientists in this case who are themselves publishing on the topic of networks. The network is similar to the one presented in Ref. [18] but is based on more recent data, including publications up until early 2006. 7 The network has a total of 1589 scientists in it, from a broad variety of fields, but only the 379 falling in the largest connected component are shown in the figure. The diameters of the vertices in the figure are proportional to their community centrality (actually to |x i | 2 -see above), and the ten vertices having the highest centralities are highlighted. A couple of remarks are worth making about the results. Without naming specific names, we observe that all of the highlighted authors are group leaders or senior researchers of groups working in this area. Thus community centrality appears to live 7 The vertices of the network represent all individuals who are authors of papers cited in the bibliographies of either of two recent reviews on networks research [1,2] and edges join every pair of individuals whose names appear together as authors of a paper or papers in those bibliographies. A small number of additional references were added by hand to bring the network up to date.\n\nup to its name in this admittedly anecdotal example: it highlights those vertices that are central in their local communities. Second, while the centrality is correlated with degree (r 2 = 0.59-see the inset figure), the two are not perfectly correlated and in particular some vertices have quite high centrality while having relatively low degree. This emphasizes the point that high centrality is an indicator of individuals who have more connections than expected within their neighborhood (and hence potentially make a large contribution to the modularity), rather than simply having a lot of connections.\n\n\nIX. CONCLUSIONS\n\nIn this paper, we have studied the problem of detecting community structure in networks. There is already a substantial body of theory supporting the view that community structure can be accurately quantified using the benefit function known as modularity and hence that communities can be detected by searching possible divi-sions of a network for ones that possess high modularity. Here we have demonstrated that the modularity can be succinctly expressed in terms of the eigenvalues and eigenvectors of a matrix we call the modularity matrix, which is a characteristic property of the network and is itself independent of any division of the network into communities. Using this expression we have derived a series of further results including several new and competitive algorithms for identifying communities, a method for detecting bipartite or k-partite structure in networks, and a new community centrality measure that identifies vertices that play a central role in the communities to which they belong.\n\nWe have demonstrated a variety of applications of our methods to real-world networks representing social, technological, and information networks. These, however, are intended only as illustrations of the potential of these methods. We hope that readers will feel encouraged to apply these or similar methods to other networks of scientific interest and we look forward to seeing the results.\n\n\nThe mesh network of Bern et al.[49]. (b) The best division into equal-sized parts found by the spectral partitioning algorithm based on the Laplacian matrix.\n\nFIG. 2\n2The dolphin social network of Lusseau et al.[68]. The dashed curve represents the division into two equally sized parts found by a standard spectral partitioning calculation (Section II). The solid curve represents the division found by the modularity-based method of this section. And the squares and circles represent the actual division of the network observed when the dolphin community split into two as a result of the departure of a keystone individual. (The individual who departed is represented by the triangle.)\n\nFIG. 3\n3The network of political books described in the text. Vertex colors range from blue to red to represent the values of the corresponding elements of the leading eigenvector of the modularity matrix.\n\nFIG. 4\n4A plot of the vertex vectors ri for a small network with p = 2. The dotted line represents one of the n possible topologically distinct cut planes.at a time as we rotate the plane about the origin. This makes it computationally simple to perform the rotation, keep track of the value of R 1 , and so find the maximum of the modularity within this approximation. Evaluating the magnitude of R 1 involves a constant number of operations each time we move the line, and hence the total work involved in finding the maximum is O(n) for all n possible positions, which is the same as the O(n) operations needed to separate the vertices in the p = 1 case.\n\nFIG. 5\n5Division by the method of optimal modularity of a simple network consisting of eight vertices in a line. (a) The optimal division into just two parts separates the network symmetrically into two groups of four vertices each. (b) The optimal division into any number of parts divides the network into three groups as shown here.\n\nFIG. 6\n6A small example of an approximately bipartite network. The network is composed of two groups of vertices and most edges run between vertices in different groups.\n\n\nnetwork of commonly occurring English adjectives (circles) and nouns (squares) described in the text. (b) The same network redrawn with the nodes grouped so as to minimize the modularity of the grouping. The network is now revealed to be approximately bipartite, with one group consisting almost entirely of adjectives and the other of nouns.\n\nFIG. 8\n8A network of coauthorships between 379 scientists whose research centers on the properties of networks of one kind or another. Vertex diameters indicate the community centrality and the ten vertices with highest centrality are highlighted. For those readers curious about the identities of the vertices, an annotated version of this figure, names and all, can be downloaded from http://www.umich.edu/~mejn/centrality. Inset: a scatter plot of community centrality against vertex degrees. Like most centrality measures, this one is correlated with degree, though only moderately strongly.\nThe technical difference between the two models is that the configuration model is a random multigraph conditioned on the actual degree sequence, while the model used here is a random multigraph conditioned on the expected degree sequence. This makes the ensemble of the former considerably smaller than that of the latter, but the difference is analogous to the difference between canonical and grand canonical ensembles in statistical mechanics and the two give the same answers in the thermodynamic limit for roughly the same reason. In particular, we note that the probability of an edge falling between two vertices i and j in the configuration model is also given by Eq. (23) in the limit of large network size; for smaller networks, there are corrections of order 1/n.\nThis suggests, for instance, that the vertex vectors for p = 2 or 3 could be used to define graph layouts for visualizing networks in 2 or 3 dimensions. Either the endpoints of the vectors could define vertex positions themselves or they could be used as starting positions for a spring embedding visualizer or other more conventional layout scheme.\nAcknowledgmentsThe author thanks Luis Amaral, Alex Arenas, Roger\nThe structure and function of complex networks. M E J Newman, SIAM Review. 45M. E. J. Newman, The structure and function of complex networks. SIAM Review 45, 167-256 (2003).\n\nS Boccaletti, V Latora, Y Moreno, M Chavez, D.-U Hwang, Complex networks: Structure and dynamics. 424S. Boccaletti, V. Latora, Y. Moreno, M. Chavez, and D.- U. Hwang, Complex networks: Structure and dynamics. Physics Reports 424, 175-308 (2006).\n\nS N Dorogovtsev, J F F Mendes, Evolution of Networks: From Biological Nets to the Internet and WWW. OxfordOxford University PressS. N. Dorogovtsev and J. F. F. Mendes, Evolution of Net- works: From Biological Nets to the Internet and WWW. Oxford University Press, Oxford (2003).\n\nThe Structure and Dynamics of Networks. M E J Newman, A.-L Barab\u00e1si, D J Watts, Princeton University PressPrincetonM. E. J. Newman, A.-L. Barab\u00e1si, and D. J. Watts, The Structure and Dynamics of Networks. Princeton Univer- sity Press, Princeton (2006).\n\nCommunity structure in social and biological networks. M Girvan, M E J Newman, Proc. Natl. Acad. Sci. USA. 99M. Girvan and M. E. J. Newman, Community structure in social and biological networks. Proc. Natl. Acad. Sci. USA 99, 7821-7826 (2002).\n\nDetecting community structure in networks. M E J Newman, Eur. Phys. J. B. 38M. E. J. Newman, Detecting community structure in net- works. Eur. Phys. J. B 38, 321-330 (2004).\n\nSubnetwork hierarchies of biochemical pathways. P Holme, M Huss, H Jeong, Bioinformatics. 19P. Holme, M. Huss, and H. Jeong, Subnetwork hierar- chies of biochemical pathways. Bioinformatics 19, 532- 538 (2003).\n\nFunctional cartography of complex metabolic networks. R Guimer\u00e0, L A N Amaral, Nature. 433R. Guimer\u00e0 and L. A. N. Amaral, Functional cartogra- phy of complex metabolic networks. Nature 433, 895-900 (2005).\n\nUncovering the overlapping community structure of complex networks in nature and society. G Palla, I Der\u00e9nyi, I Farkas, T Vicsek, Nature. 435G. Palla, I. Der\u00e9nyi, I. Farkas, and T. Vicsek, Uncover- ing the overlapping community structure of complex net- works in nature and society. Nature 435, 814-818 (2005).\n\nSelf-organization and identification of Web communities. G W Flake, S R Lawrence, C L Giles, F M Coetzee, IEEE Computer. 35G. W. Flake, S. R. Lawrence, C. L. Giles, and F. M. Co- etzee, Self-organization and identification of Web com- munities. IEEE Computer 35, 66-71 (2002).\n\nCurrency and commodity metabolites: Their identification and relation to the modularity of metabolic networks. M Huss, P Holme, q-bio/0603038M. Huss and P. Holme, Currency and commodity metabolites: Their identification and relation to the mod- ularity of metabolic networks. Preprint q-bio/0603038 (2006).\n\nSexual mixing patterns of patients attending sexually transmitted diseases clinics. G P Garnett, J P Hughes, R M Anderson, B P Stoner, S O Aral, W L Whittington, H H Handsfield, K K Holmes, Sexually Transmitted Diseases. 23G. P. Garnett, J. P. Hughes, R. M. Anderson, B. P. Stoner, S. O. Aral, W. L. Whittington, H. H. Handsfield, and K. K. Holmes, Sexual mixing patterns of patients attending sexually transmitted diseases clinics. Sexually Transmitted Diseases 23, 248-257 (1996).\n\nSexual mixing patterns in the spread of gonococcal and chlamydial infections. S O Aral, J P Hughes, B Stoner, W Whittington, H H Handsfield, R M Anderson, K K Holmes, American Journal of Public Health. 89S. O. Aral, J. P. Hughes, B. Stoner, W. Whittington, H. H. Handsfield, R. M. Anderson, and K. K. Holmes, Sexual mixing patterns in the spread of gonococcal and chlamydial infections. American Journal of Public Health 89, 825-833 (1999).\n\nNetworks of sexual contacts: Implications for the pattern of spread of HIV. S Gupta, R M Anderson, R M May, AIDS. 3S. Gupta, R. M. Anderson, and R. M. May, Networks of sexual contacts: Implications for the pattern of spread of HIV. AIDS 3, 807-817 (1989).\n\nThe strength of weak ties. M Granovetter, Am. J. Sociol. 78M. Granovetter, The strength of weak ties. Am. J. Sociol. 78, 1360-1380 (1973).\n\nPositions in networks. R S Burt, Social Forces. 55R. S. Burt, Positions in networks. Social Forces 55, 93- 122 (1976).\n\nA set of measures of centrality based upon betweenness. L C Freeman, Sociometry. 40L. C. Freeman, A set of measures of centrality based upon betweenness. Sociometry 40, 35-41 (1977).\n\nFinding and evaluating community structure in networks. M E J Newman, M Girvan, Phys. Rev. E. 6926113M. E. J. Newman and M. Girvan, Finding and evaluat- ing community structure in networks. Phys. Rev. E 69, 026113 (2004).\n\nPreferential attachment of communities: The same principle, but a higher level. P Pollner, G Palla, T Vicsek, Europhys. Lett. 73P. Pollner, G. Palla, and T. Vicsek, Preferential attach- ment of communities: The same principle, but a higher level. Europhys. Lett. 73, 478-484 (2006).\n\nDistance, dissimilarity index, and network community structure. H Zhou, Phys. Rev. E. 6761901H. Zhou, Distance, dissimilarity index, and network com- munity structure. Phys. Rev. E 67, 061901 (2003).\n\nCompartments revealed in foodweb structure. A E Krause, K A Frank, D M Mason, R E Ulanowicz, W W Taylor, Nature. 426A. E. Krause, K. A. Frank, D. M. Mason, R. E. Ulanow- icz, and W. W. Taylor, Compartments revealed in food- web structure. Nature 426, 282-285 (2003).\n\nFinding communities in linear time: A physics approach. F Wu, B A Huberman, Eur. Phys. J. B. 38F. Wu and B. A. Huberman, Finding communities in linear time: A physics approach. Eur. Phys. J. B 38, 331-338 (2004).\n\nDefining and identifying communities in networks. F Radicchi, C Castellano, F Cecconi, V Loreto, D Parisi, Proc. Natl. Acad. Sci. USA. 101F. Radicchi, C. Castellano, F. Cecconi, V. Loreto, and D. Parisi, Defining and identifying communities in net- works. Proc. Natl. Acad. Sci. USA 101, 2658-2663 (2004).\n\nFast algorithm for detecting community structure in networks. M E J Newman, Phys. Rev. E. 6966133M. E. J. Newman, Fast algorithm for detecting com- munity structure in networks. Phys. Rev. E 69, 066133 (2004).\n\nDetecting communities in large networks. A Capocci, V D P Servedio, G Caldarelli, F Colaiori, Proceedings of the 3rd Workshop on Algorithms and Models for the Web Graph, number 3243 in Lecture Notes in Computer Science. S. Leonardithe 3rd Workshop on Algorithms and Models for the Web Graph, number 3243 in Lecture Notes in Computer ScienceBerlinSpringerA. Capocci, V. D. P. Servedio, G. Caldarelli, and F. Colaiori, Detecting communities in large networks. In S. Leonardi (ed.), Proceedings of the 3rd Workshop on Algorithms and Models for the Web Graph, number 3243 in Lecture Notes in Computer Science, Springer, Berlin (2004).\n\nA method to find community structures based on information centrality. S Fortunato, V Latora, M Marchiori, Phys. Rev. E. 7056104S. Fortunato, V. Latora, and M. Marchiori, A method to find community structures based on information central- ity. Phys. Rev. E 70, 056104 (2004).\n\nDetecting fuzzy community structures in complex networks with a Potts model. J Reichardt, S Bornholdt, Phys. Rev. Lett. 93218701J. Reichardt and S. Bornholdt, Detecting fuzzy commu- nity structures in complex networks with a Potts model. Phys. Rev. Lett. 93, 218701 (2004).\n\nDetecting network communities: A new systematic and efficient algorithm. L Donetti, M A Mu\u00f1oz, J. Stat. Mech. p. 10012L. Donetti and M. A. Mu\u00f1oz, Detecting network commu- nities: A new systematic and efficient algorithm. J. Stat. Mech. p. P10012 (2004).\n\nNetwork brownian motion: A new method to measure vertex-vertex proximity and to identify communities and subcommunities. H Zhou, R Lipowsky, Lecture Notes in Computer Science. 3038SpringerH. Zhou and R. Lipowsky, Network brownian motion: A new method to measure vertex-vertex proximity and to identify communities and subcommunities. In Lecture Notes in Computer Science, volume 3038, pp. 1062-1069, Springer, New York (2004).\n\nFinding local community structure in networks. A Clauset, Phys. Rev. E. 7226132A. Clauset, Finding local community structure in net- works. Phys. Rev. E 72, 026132 (2005).\n\nComputing communities in large networks using random walks. P Pons, M Latapy, Proceedings of the 20th International Symposium on Computer and Information Sciences. the 20th International Symposium on Computer and Information SciencesNew YorkSpringer3733P. Pons and M. Latapy, Computing communities in large networks using random walks. In Proceedings of the 20th International Symposium on Computer and Information Sciences, volume 3733 of Lecture Notes in Computer Sci- ence, pp. 284-293, Springer, New York (2005).\n\nModularity and community structure in networks. M E J Newman, 602124Preprint physicsM. E. J. Newman, Modularity and community structure in networks. Preprint physics/0602124 (2006).\n\nEffect of size heterogeneity on community identification in complex networks. L Danon, A Diaz-Guilera, A Arenas, 601144Preprint physicsL. Danon, A. Diaz-Guilera, and A. Arenas, Effect of size heterogeneity on community identification in com- plex networks. Preprint physics/0601144 (2006).\n\nStatistical mechanics of community detection. J Reichardt, S Bornholdt, cond-mat/0603718PreprintJ. Reichardt and S. Bornholdt, Statistical mechan- ics of community detection. Preprint cond-mat/0603718 (2006).\n\nCommunity detection as an inference problem. M B Hastings, cond-mat/0604429PreprintM. B. Hastings, Community detection as an inference problem. Preprint cond-mat/0604429 (2006).\n\nComparing community structure identification. L Danon, J Duch, A Diaz-Guilera, A Arenas, J. Stat. Mech. p. 9008L. Danon, J. Duch, A. Diaz-Guilera, and A. Arenas, Comparing community structure identification. J. Stat. Mech. p. P09008 (2005).\n\nComparison and validation of community structures in complex networks. M Gustafsson, A Lombardi, M Hornquist, 601057Preprint physicsM. Gustafsson, A. Lombardi, and M. Hornquist, Com- parison and validation of community structures in com- plex networks. Preprint physics/0601057 (2006).\n\nFinding community structure in very large networks. A Clauset, M E J Newman, C Moore, Phys. Rev. E. 7066111A. Clauset, M. E. J. Newman, and C. Moore, Finding community structure in very large networks. Phys. Rev. E 70, 066111 (2004).\n\nModularity from fluctuations in random graphs and complex networks. R Guimer\u00e0, M Sales-Pardo, L A N Amaral, Phys. Rev. E. 7025101R. Guimer\u00e0, M. Sales-Pardo, and L. A. N. Amaral, Mod- ularity from fluctuations in random graphs and complex networks. Phys. Rev. E 70, 025101 (2004).\n\nCommunity detection in complex networks using extremal optimization. J Duch, A Arenas, Phys. Rev. E. 7227104J. Duch and A. Arenas, Community detection in complex networks using extremal optimization. Phys. Rev. E 72, 027104 (2005).\n\nAlgebraic connectivity of graphs. M Fiedler, Czech. Math. J. 23M. Fiedler, Algebraic connectivity of graphs. Czech. Math. J. 23, 298-305 (1973).\n\nPartitioning sparse matrices with eigenvectors of graphs. A Pothen, H Simon, K.-P Liou, SIAM J. Matrix Anal. Appl. 11A. Pothen, H. Simon, and K.-P. Liou, Partitioning sparse matrices with eigenvectors of graphs. SIAM J. Matrix Anal. Appl. 11, 430-452 (1990).\n\nAlgorithms for graph partitioning: A survey. P.-O Fj\u00e4llstr\u00f6m, Link\u00f6ping Electronic Articles in Computer and Information Science. 310P.-O. Fj\u00e4llstr\u00f6m, Algorithms for graph partitioning: A survey. Link\u00f6ping Electronic Articles in Computer and Information Science 3(10) (1998).\n\nPolynomial algorithm for the k-cut problem. O Goldschmidt, D S Hochbaum, Proceedings of the 29th Annual IEEE Symposium on the Foundations of Computer Science. the 29th Annual IEEE Symposium on the Foundations of Computer ScienceNew YorkInstitute of Electrical and Electronics EngineersO. Goldschmidt and D. S. Hochbaum, Polynomial algo- rithm for the k-cut problem. In Proceedings of the 29th Annual IEEE Symposium on the Foundations of Com- puter Science, pp. 444-451, Institute of Electrical and Electronics Engineers, New York (1988).\n\nF R K Chung, Spectral Graph Theory. Number 92 in CBMS Regional Conference Series in Mathematics. Providence, RIAmerican Mathematical SocietyF. R. K. Chung, Spectral Graph Theory. Number 92 in CBMS Regional Conference Series in Mathematics, American Mathematical Society, Providence, RI (1997).\n\nB Bollob\u00e1s, Modern Graph Theory. New YorkSpringerB. Bollob\u00e1s, Modern Graph Theory. Springer, New York (1998).\n\nSynchronization in smallworld systems. M Barahona, L M Pecora, Phys. Rev. Lett. 8954101M. Barahona and L. M. Pecora, Synchronization in small- world systems. Phys. Rev. Lett. 89, 054101 (2002).\n\nHoppensteadt, Heterogeneity in oscillator networks: Are smaller worlds easier to synchronize?. T Nishikawa, A E Motter, Y.-C Lai, F C , Phys. Rev. Lett. 9114101T. Nishikawa, A. E. Motter, Y.-C. Lai, and F. C. Hoppen- steadt, Heterogeneity in oscillator networks: Are smaller worlds easier to synchronize? Phys. Rev. Lett. 91, 014101 (2003).\n\nProvably good mesh generation. M Bern, D Eppstein, J Gilbert, Proceedings of the 31st Annual IEEE Symposium on the Foundations of Computer Science. the 31st Annual IEEE Symposium on the Foundations of Computer ScienceNew YorkInstitute of Electrical and Electronics EngineersM. Bern, D. Eppstein, and J. Gilbert, Provably good mesh generation. In Proceedings of the 31st Annual IEEE Symposium on the Foundations of Computer Science, pp. 231-241, Institute of Electrical and Electronics Engi- neers, New York (1990).\n\nToward efficient hierarchical designs by ratio cut partitioning. Y.-C Wei, C.-K Cheng, Proceedings of the IEEE International Conference on Computer. the IEEE International Conference on ComputerNew YorkInstitute of Electrical and Electronics EngineersAided DesignY.-C. Wei and C.-K. Cheng, Toward efficient hierarchi- cal designs by ratio cut partitioning. In Proceedings of the IEEE International Conference on Computer Aided De- sign, pp. 298-301, Institute of Electrical and Electronics Engineers, New York (1989).\n\nNew spectral methods for ratio cut partitioning and clustering. L Hagen, A B Kahng, IEEE Transations on Computer-Aided Design. 11L. Hagen and A. B. Kahng, New spectral methods for ratio cut partitioning and clustering. IEEE Transations on Computer-Aided Design 11, 1074-1085 (1992).\n\nSpectral kway ratio-cut partitioning and clustering. P K Chan, M D F Schlag, J Y Zien, Proceedings of the 30th International Conference on Design Automation. the 30th International Conference on Design AutomationNew YorkAssociation of Computing MachineryP. K. Chan, M. D. F. Schlag, and J. Y. Zien, Spectral k- way ratio-cut partitioning and clustering. In Proceedings of the 30th International Conference on Design Automa- tion, pp. 749-754, Association of Computing Machinery, New York (1993).\n\nMixing patterns in networks. M E J Newman, Phys. Rev. E. 6726126M. E. J. Newman, Mixing patterns in networks. Phys. Rev. E 67, 026126 (2003).\n\nAnalysis of weighted networks. M E J Newman, Phys. Rev. E. 7056131M. E. J. Newman, Analysis of weighted networks. Phys. Rev. E 70, 056131 (2004).\n\nA spectral clustering approach to finding communities in graphs. S White, P Smyth, Proceedings of the 5th SIAM International Conference on Data Mining. H. Kargupta, J. Srivastava, C. Kamath, and A. Goodmanthe 5th SIAM International Conference on Data MiningPhiladelphiaS. White and P. Smyth, A spectral clustering approach to finding communities in graphs. In H. Kargupta, J. Sri- vastava, C. Kamath, and A. Goodman (eds.), Proceed- ings of the 5th SIAM International Conference on Data Mining, Society for Industrial and Applied Mathematics, Philadelphia (2005).\n\nIdentifying \"communities\" within energy landscapes. C P Massen, J P K Doye, Phys. Rev. E. 7146101C. P. Massen and J. P. K. Doye, Identifying \"communi- ties\" within energy landscapes. Phys. Rev. E 71, 046101 (2005).\n\nExploring complex networks. S H Strogatz, Nature. 410S. H. Strogatz, Exploring complex networks. Nature 410, 268-276 (2001).\n\nEvolution of networks. S N Dorogovtsev, J F F Mendes, Advances in Physics. 51S. N. Dorogovtsev and J. F. F. Mendes, Evolution of networks. Advances in Physics 51, 1079-1187 (2002).\n\nCollective dynamics of 'small-world' networks. D J Watts, S H Strogatz, Nature. 393D. J. Watts and S. H. Strogatz, Collective dynamics of 'small-world' networks. Nature 393, 440-442 (1998).\n\nEmergence of scaling in random networks. A.-L Barab\u00e1si, R Albert, Science. 286A.-L. Barab\u00e1si and R. Albert, Emergence of scaling in random networks. Science 286, 509-512 (1999).\n\nClasses of small-world networks. L A N Amaral, A Scala, M Barth\u00e9l\u00e9my, H E Stanley, Proc. Natl. Acad. Sci. USA 97. Natl. Acad. Sci. USA 97L. A. N. Amaral, A. Scala, M. Barth\u00e9l\u00e9my, and H. E. Stanley, Classes of small-world networks. Proc. Natl. Acad. Sci. USA 97, 11149-11152 (2000).\n\nConnected components in random graphs with given degree sequences. F Chung, L Lu, Annals of Combinatorics. 6F. Chung and L. Lu, Connected components in random graphs with given degree sequences. Annals of Combina- torics 6, 125-145 (2002).\n\nSparse random graphs with a given degree sequence. T Luczak, Proceedings of the Symposium on Random Graphs. A. M. Frieze and T. Luczakthe Symposium on Random GraphsPozna\u0144; New YorkJohn WileyT. Luczak, Sparse random graphs with a given degree se- quence. In A. M. Frieze and T. Luczak (eds.), Proceedings of the Symposium on Random Graphs, Pozna\u0144 1989, pp. 165-182, John Wiley, New York (1992).\n\nA critical point for random graphs with a given degree sequence. M Molloy, B Reed, Random Structures and Algorithms. 6M. Molloy and B. Reed, A critical point for random graphs with a given degree sequence. Random Structures and Algorithms 6, 161-179 (1995).\n\nRandom graphs with arbitrary degree distributions and their applications. M E J Newman, S H Strogatz, D J Watts, Phys. Rev. E. 6426118M. E. J. Newman, S. H. Strogatz, and D. J. Watts, Ran- dom graphs with arbitrary degree distributions and their applications. Phys. Rev. E 64, 026118 (2001).\n\nDynamical and correlation properties of the Internet. R Pastor-Satorras, A V\u00e1zquez, A Vespignani, Phys. Rev. Lett. 87258701R. Pastor-Satorras, A. V\u00e1zquez, and A. Vespignani, Dy- namical and correlation properties of the Internet. Phys. Rev. Lett. 87, 258701 (2001).\n\nAssortative mixing in networks. M E J Newman, Phys. Rev. Lett. 89208701M. E. J. Newman, Assortative mixing in networks. Phys. Rev. Lett. 89, 208701 (2002).\n\nThe bottlenose dolphin community of Doubtful Sound features a large proportion of long-lasting associations. Can geographic isolation explain this unique trait?. D Lusseau, K Schneider, O J Boisseau, P Haase, E Slooten, S M Dawson, Behavioral Ecology and Sociobiology. 54D. Lusseau, K. Schneider, O. J. Boisseau, P. Haase, E. Slooten, and S. M. Dawson, The bottlenose dolphin community of Doubtful Sound features a large propor- tion of long-lasting associations. Can geographic isola- tion explain this unique trait? Behavioral Ecology and Sociobiology 54, 396-405 (2003).\n\nSpectral partitioning: The more eigenvectors, the better. C J Alpert, S.-Z Yao, Proceedings of the 32nd International Conference on Design Automation. B. T. Preas, P. G. Karger, B. S. Nobandegani, and M. Pedramthe 32nd International Conference on Design AutomationNew York, NYAssociation of Computing MachineryC. J. Alpert and S.-Z. Yao, Spectral partitioning: The more eigenvectors, the better. In B. T. Preas, P. G. Karger, B. S. Nobandegani, and M. Pedram (eds.), Pro- ceedings of the 32nd International Conference on Design Automation, pp. 195-200, Association of Computing Ma- chinery, New York, NY (1995).\n\nMatrix Analysis and Applied Linear Algebra. C D Meyer, Society for Industrial and Applied Mathematics. C. D. Meyer, Matrix Analysis and Applied Linear Al- gebra. Society for Industrial and Applied Mathematics, Philadelphia (2000).\n\nAn efficient heuristic procedure for partitioning graphs. B W Kernighan, S Lin, Bell System Technical Journal. 49B. W. Kernighan and S. Lin, An efficient heuristic proce- dure for partitioning graphs. Bell System Technical Jour- nal 49, 291-307 (1970).\n\nAuthoritative sources in a hyperlinked environment. J M Kleinberg, J. ACM. 46J. M. Kleinberg, Authoritative sources in a hyperlinked environment. J. ACM 46, 604-632 (1999).\n\nNetwork bipartivity. P Holme, F Liljeros, C R Edling, B J Kim, Phys. Rev. E. 6856107P. Holme, F. Liljeros, C. R. Edling, and B. J. Kim, Net- work bipartivity. Phys. Rev. E 68, 056107 (2003).\n\nRodr\u00edguez-Vel\u00e1zquez, Spectral measures of bipartivity in complex networks. E Estrada, J A , Phys. Rev. E. 7246105E. Estrada and J. A. Rodr\u00edguez-Vel\u00e1zquez, Spectral mea- sures of bipartivity in complex networks. Phys. Rev. E 72, 046105 (2005).\n", "annotations": {"author": "[{\"end\":211,\"start\":86}]", "publisher": null, "author_last_name": "[{\"end\":98,\"start\":92}]", "author_first_name": "[{\"end\":87,\"start\":86},{\"end\":91,\"start\":88}]", "author_affiliation": "[{\"end\":210,\"start\":100}]", "title": "[{\"end\":75,\"start\":1},{\"end\":286,\"start\":212}]", "venue": null, "abstract": "[{\"end\":1355,\"start\":340}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1634,\"start\":1631},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1636,\"start\":1634},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1638,\"start\":1636},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1640,\"start\":1638},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1833,\"start\":1830},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1835,\"start\":1833},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1856,\"start\":1853},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1882,\"start\":1879},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":1884,\"start\":1882},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1886,\"start\":1884},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":1933,\"start\":1929},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2241,\"start\":2238},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2243,\"start\":2241},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2246,\"start\":2243},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2304,\"start\":2300},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3065,\"start\":3061},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3068,\"start\":3065},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3335,\"start\":3331},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3715,\"start\":3711},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3718,\"start\":3715},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3721,\"start\":3718},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3894,\"start\":3891},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4524,\"start\":4520},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4810,\"start\":4807},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":4890,\"start\":4886},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5440,\"start\":5437},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5442,\"start\":5440},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5444,\"start\":5442},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5447,\"start\":5444},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5450,\"start\":5447},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":5453,\"start\":5450},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5456,\"start\":5453},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":5459,\"start\":5456},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5462,\"start\":5459},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5465,\"start\":5462},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5468,\"start\":5465},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":5471,\"start\":5468},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":5474,\"start\":5471},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5477,\"start\":5474},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":5480,\"start\":5477},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":5483,\"start\":5480},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":5486,\"start\":5483},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":5489,\"start\":5486},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":5492,\"start\":5489},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":5495,\"start\":5492},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":5522,\"start\":5519},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":5525,\"start\":5522},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":5837,\"start\":5833},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":5840,\"start\":5837},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":6070,\"start\":6066},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":6073,\"start\":6070},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":6099,\"start\":6095},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":6102,\"start\":6099},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":6134,\"start\":6130},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":6955,\"start\":6951},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":6958,\"start\":6955},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":6961,\"start\":6958},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":7787,\"start\":7783},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":9686,\"start\":9682},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":10109,\"start\":10105},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":10160,\"start\":10156},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":12076,\"start\":12072},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":12135,\"start\":12131},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":12181,\"start\":12177},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":12184,\"start\":12181},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":12499,\"start\":12496},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":12599,\"start\":12598},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":13345,\"start\":13341},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":13519,\"start\":13515},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":14368,\"start\":14364},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15662,\"start\":15658},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":16169,\"start\":16165},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":17069,\"start\":17066},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":17142,\"start\":17139},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":18397,\"start\":18393},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":20600,\"start\":20596},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":20981,\"start\":20977},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":20984,\"start\":20981},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":22870,\"start\":22866},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":22918,\"start\":22914},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":22921,\"start\":22918},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":23232,\"start\":23228},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":23277,\"start\":23274},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":23280,\"start\":23277},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":23283,\"start\":23280},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":23286,\"start\":23283},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":23289,\"start\":23286},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":23335,\"start\":23331},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":26290,\"start\":26286},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":26361,\"start\":26357},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26460,\"start\":26456},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":26463,\"start\":26460},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":26466,\"start\":26463},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":26613,\"start\":26609},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":27659,\"start\":27655},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":27662,\"start\":27659},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":27665,\"start\":27662},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":27882,\"start\":27878},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":27925,\"start\":27921},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":27928,\"start\":27925},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":27931,\"start\":27928},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":28276,\"start\":28272},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":28279,\"start\":28276},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":29318,\"start\":29314},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":30137,\"start\":30133},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":30270,\"start\":30266},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":30273,\"start\":30270},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":30276,\"start\":30273},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":30279,\"start\":30276},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":30507,\"start\":30506},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":30788,\"start\":30784},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":31042,\"start\":31038},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":31045,\"start\":31042},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":31105,\"start\":31101},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":31514,\"start\":31511},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":31517,\"start\":31514},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":31520,\"start\":31517},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":31523,\"start\":31520},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":31526,\"start\":31523},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":31529,\"start\":31526},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":31532,\"start\":31529},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":32236,\"start\":32232},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":32376,\"start\":32372},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":34204,\"start\":34200},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":35160,\"start\":35156},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":35456,\"start\":35452},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":37096,\"start\":37092},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":37294,\"start\":37290},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":37812,\"start\":37808},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":37872,\"start\":37871},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":38992,\"start\":38988},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":39031,\"start\":39027},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":39335,\"start\":39334},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":40852,\"start\":40848},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":43456,\"start\":43452},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":43700,\"start\":43696},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":47230,\"start\":47229},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":47731,\"start\":47727},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":49779,\"start\":49778},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":50067,\"start\":50066},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":50179,\"start\":50175},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":50593,\"start\":50589},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":51452,\"start\":51448},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":53581,\"start\":53577},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":57431,\"start\":57427},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":57919,\"start\":57915},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":58808,\"start\":58804},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":58980,\"start\":58976},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":59706,\"start\":59702},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":60980,\"start\":60976},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":60995,\"start\":60991},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":61141,\"start\":61137},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":61149,\"start\":61145},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":65674,\"start\":65670},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":66946,\"start\":66942},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":67893,\"start\":67889},{\"attributes\":{\"ref_id\":\"b72\"},\"end\":68059,\"start\":68055},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":68100,\"start\":68096},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":68501,\"start\":68497},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":73328,\"start\":73324},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":74889,\"start\":74885},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":74892,\"start\":74889},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":78018,\"start\":78014},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":84524,\"start\":84520},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":86468,\"start\":86464},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":86548,\"start\":86547},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":87161,\"start\":87160},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":87326,\"start\":87323},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":87328,\"start\":87326},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":89622,\"start\":89618},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":89802,\"start\":89798}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":89744,\"start\":89585},{\"attributes\":{\"id\":\"fig_1\"},\"end\":90276,\"start\":89745},{\"attributes\":{\"id\":\"fig_2\"},\"end\":90483,\"start\":90277},{\"attributes\":{\"id\":\"fig_3\"},\"end\":91142,\"start\":90484},{\"attributes\":{\"id\":\"fig_4\"},\"end\":91479,\"start\":91143},{\"attributes\":{\"id\":\"fig_5\"},\"end\":91650,\"start\":91480},{\"attributes\":{\"id\":\"fig_6\"},\"end\":91995,\"start\":91651},{\"attributes\":{\"id\":\"fig_7\"},\"end\":92592,\"start\":91996}]", "paragraph": "[{\"end\":2640,\"start\":1374},{\"end\":3336,\"start\":2642},{\"end\":3449,\"start\":3338},{\"end\":4265,\"start\":3451},{\"end\":4992,\"start\":4267},{\"end\":5526,\"start\":4994},{\"end\":6672,\"start\":5528},{\"end\":7788,\"start\":6674},{\"end\":9206,\"start\":7840},{\"end\":9617,\"start\":9208},{\"end\":10394,\"start\":9619},{\"end\":10470,\"start\":10396},{\"end\":10737,\"start\":10539},{\"end\":10861,\"start\":10781},{\"end\":10945,\"start\":10863},{\"end\":11092,\"start\":11025},{\"end\":11229,\"start\":11114},{\"end\":11373,\"start\":11265},{\"end\":11427,\"start\":11392},{\"end\":11586,\"start\":11485},{\"end\":11669,\"start\":11629},{\"end\":11782,\"start\":11689},{\"end\":12766,\"start\":11872},{\"end\":13520,\"start\":12947},{\"end\":13588,\"start\":13522},{\"end\":14661,\"start\":13640},{\"end\":15200,\"start\":14663},{\"end\":15722,\"start\":15202},{\"end\":16769,\"start\":15766},{\"end\":16819,\"start\":16812},{\"end\":17191,\"start\":16821},{\"end\":19301,\"start\":17240},{\"end\":20493,\"start\":19345},{\"end\":21757,\"start\":20495},{\"end\":22654,\"start\":21759},{\"end\":22829,\"start\":22656},{\"end\":23973,\"start\":22831},{\"end\":24627,\"start\":23975},{\"end\":25357,\"start\":24629},{\"end\":25848,\"start\":25359},{\"end\":26712,\"start\":25892},{\"end\":27164,\"start\":26714},{\"end\":28739,\"start\":27244},{\"end\":28855,\"start\":28759},{\"end\":29795,\"start\":28857},{\"end\":29868,\"start\":29845},{\"end\":29997,\"start\":29972},{\"end\":31106,\"start\":30022},{\"end\":31804,\"start\":31150},{\"end\":32174,\"start\":31838},{\"end\":32248,\"start\":32214},{\"end\":32437,\"start\":32323},{\"end\":32511,\"start\":32459},{\"end\":33106,\"start\":32537},{\"end\":33837,\"start\":33153},{\"end\":34787,\"start\":33908},{\"end\":36580,\"start\":34836},{\"end\":36957,\"start\":36582},{\"end\":38350,\"start\":36959},{\"end\":38856,\"start\":38401},{\"end\":39106,\"start\":38858},{\"end\":40342,\"start\":39108},{\"end\":40562,\"start\":40405},{\"end\":40619,\"start\":40564},{\"end\":40708,\"start\":40658},{\"end\":40923,\"start\":40760},{\"end\":41082,\"start\":40973},{\"end\":41315,\"start\":41124},{\"end\":42171,\"start\":41317},{\"end\":42703,\"start\":42173},{\"end\":43150,\"start\":42740},{\"end\":43581,\"start\":43236},{\"end\":43767,\"start\":43609},{\"end\":43978,\"start\":43876},{\"end\":44352,\"start\":44001},{\"end\":44786,\"start\":44354},{\"end\":47570,\"start\":44845},{\"end\":47638,\"start\":47608},{\"end\":47821,\"start\":47703},{\"end\":48413,\"start\":47871},{\"end\":49391,\"start\":48473},{\"end\":50757,\"start\":49393},{\"end\":50990,\"start\":50776},{\"end\":51528,\"start\":50992},{\"end\":51701,\"start\":51632},{\"end\":52119,\"start\":51732},{\"end\":53327,\"start\":52141},{\"end\":53711,\"start\":53329},{\"end\":54317,\"start\":53713},{\"end\":54622,\"start\":54319},{\"end\":54773,\"start\":54645},{\"end\":55471,\"start\":54800},{\"end\":55761,\"start\":55473},{\"end\":56486,\"start\":55763},{\"end\":57063,\"start\":56522},{\"end\":57650,\"start\":57065},{\"end\":58809,\"start\":57652},{\"end\":59197,\"start\":58811},{\"end\":59707,\"start\":59254},{\"end\":60644,\"start\":59709},{\"end\":60912,\"start\":60758},{\"end\":61630,\"start\":60951},{\"end\":62588,\"start\":61632},{\"end\":63775,\"start\":62597},{\"end\":64569,\"start\":63777},{\"end\":65465,\"start\":64617},{\"end\":66212,\"start\":65467},{\"end\":66838,\"start\":66266},{\"end\":67246,\"start\":66840},{\"end\":68211,\"start\":67248},{\"end\":69251,\"start\":68213},{\"end\":70053,\"start\":69253},{\"end\":71275,\"start\":70055},{\"end\":72403,\"start\":71277},{\"end\":73059,\"start\":72405},{\"end\":73237,\"start\":73096},{\"end\":73329,\"start\":73268},{\"end\":73803,\"start\":73375},{\"end\":74137,\"start\":73831},{\"end\":74319,\"start\":74159},{\"end\":75237,\"start\":74414},{\"end\":75459,\"start\":75239},{\"end\":76901,\"start\":75487},{\"end\":78486,\"start\":76929},{\"end\":78667,\"start\":78488},{\"end\":78877,\"start\":78723},{\"end\":79169,\"start\":79058},{\"end\":80537,\"start\":79210},{\"end\":80831,\"start\":80539},{\"end\":81581,\"start\":80906},{\"end\":81955,\"start\":81583},{\"end\":82917,\"start\":81957},{\"end\":83282,\"start\":82919},{\"end\":83868,\"start\":83284},{\"end\":84759,\"start\":83974},{\"end\":85379,\"start\":84761},{\"end\":86202,\"start\":85381},{\"end\":87546,\"start\":86204},{\"end\":88157,\"start\":87548},{\"end\":89190,\"start\":88177},{\"end\":89584,\"start\":89192}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10538,\"start\":10471},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10780,\"start\":10738},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11024,\"start\":10946},{\"attributes\":{\"id\":\"formula_3\"},\"end\":11113,\"start\":11093},{\"attributes\":{\"id\":\"formula_4\"},\"end\":11264,\"start\":11230},{\"attributes\":{\"id\":\"formula_5\"},\"end\":11391,\"start\":11374},{\"attributes\":{\"id\":\"formula_6\"},\"end\":11484,\"start\":11428},{\"attributes\":{\"id\":\"formula_7\"},\"end\":11628,\"start\":11587},{\"attributes\":{\"id\":\"formula_8\"},\"end\":11688,\"start\":11670},{\"attributes\":{\"id\":\"formula_9\"},\"end\":11871,\"start\":11783},{\"attributes\":{\"id\":\"formula_10\"},\"end\":12872,\"start\":12767},{\"attributes\":{\"id\":\"formula_11\"},\"end\":12946,\"start\":12872},{\"attributes\":{\"id\":\"formula_12\"},\"end\":13639,\"start\":13589},{\"attributes\":{\"id\":\"formula_13\"},\"end\":15765,\"start\":15723},{\"attributes\":{\"id\":\"formula_14\"},\"end\":16811,\"start\":16770},{\"attributes\":{\"id\":\"formula_15\"},\"end\":17239,\"start\":17192},{\"attributes\":{\"id\":\"formula_16\"},\"end\":25891,\"start\":25849},{\"attributes\":{\"id\":\"formula_17\"},\"end\":27243,\"start\":27165},{\"attributes\":{\"id\":\"formula_18\"},\"end\":28758,\"start\":28740},{\"attributes\":{\"id\":\"formula_19\"},\"end\":29844,\"start\":29796},{\"attributes\":{\"id\":\"formula_20\"},\"end\":29971,\"start\":29869},{\"attributes\":{\"id\":\"formula_21\"},\"end\":30021,\"start\":29998},{\"attributes\":{\"id\":\"formula_22\"},\"end\":32213,\"start\":32175},{\"attributes\":{\"id\":\"formula_23\"},\"end\":32322,\"start\":32249},{\"attributes\":{\"id\":\"formula_24\"},\"end\":32458,\"start\":32438},{\"attributes\":{\"id\":\"formula_25\"},\"end\":32536,\"start\":32512},{\"attributes\":{\"id\":\"formula_26\"},\"end\":33152,\"start\":33107},{\"attributes\":{\"id\":\"formula_27\"},\"end\":33907,\"start\":33838},{\"attributes\":{\"id\":\"formula_28\"},\"end\":34835,\"start\":34788},{\"attributes\":{\"id\":\"formula_29\"},\"end\":40404,\"start\":40343},{\"attributes\":{\"id\":\"formula_30\"},\"end\":40657,\"start\":40620},{\"attributes\":{\"id\":\"formula_31\"},\"end\":40759,\"start\":40709},{\"attributes\":{\"id\":\"formula_32\"},\"end\":40972,\"start\":40924},{\"attributes\":{\"id\":\"formula_33\"},\"end\":41123,\"start\":41083},{\"attributes\":{\"id\":\"formula_34\"},\"end\":43235,\"start\":43151},{\"attributes\":{\"id\":\"formula_35\"},\"end\":43608,\"start\":43582},{\"attributes\":{\"id\":\"formula_36\"},\"end\":43875,\"start\":43768},{\"attributes\":{\"id\":\"formula_37\"},\"end\":44000,\"start\":43979},{\"attributes\":{\"id\":\"formula_38\"},\"end\":44844,\"start\":44787},{\"attributes\":{\"id\":\"formula_39\"},\"end\":47607,\"start\":47571},{\"attributes\":{\"id\":\"formula_40\"},\"end\":47702,\"start\":47639},{\"attributes\":{\"id\":\"formula_41\"},\"end\":47870,\"start\":47822},{\"attributes\":{\"id\":\"formula_42\"},\"end\":48472,\"start\":48414},{\"attributes\":{\"id\":\"formula_43\"},\"end\":51631,\"start\":51529},{\"attributes\":{\"id\":\"formula_44\"},\"end\":51731,\"start\":51702},{\"attributes\":{\"id\":\"formula_45\"},\"end\":54644,\"start\":54623},{\"attributes\":{\"id\":\"formula_46\"},\"end\":54799,\"start\":54774},{\"attributes\":{\"id\":\"formula_47\"},\"end\":60757,\"start\":60645},{\"attributes\":{\"id\":\"formula_48\"},\"end\":60950,\"start\":60913},{\"attributes\":{\"id\":\"formula_49\"},\"end\":62596,\"start\":62589},{\"attributes\":{\"id\":\"formula_50\"},\"end\":64616,\"start\":64570},{\"attributes\":{\"id\":\"formula_51\"},\"end\":73095,\"start\":73060},{\"attributes\":{\"id\":\"formula_52\"},\"end\":73267,\"start\":73238},{\"attributes\":{\"id\":\"formula_53\"},\"end\":74158,\"start\":74138},{\"attributes\":{\"id\":\"formula_54\"},\"end\":74413,\"start\":74320},{\"attributes\":{\"id\":\"formula_55\"},\"end\":75486,\"start\":75460},{\"attributes\":{\"id\":\"formula_56\"},\"end\":78690,\"start\":78668},{\"attributes\":{\"id\":\"formula_57\"},\"end\":78722,\"start\":78690},{\"attributes\":{\"id\":\"formula_58\"},\"end\":79057,\"start\":78878},{\"attributes\":{\"id\":\"formula_59\"},\"end\":79209,\"start\":79170},{\"attributes\":{\"id\":\"formula_60\"},\"end\":80905,\"start\":80832},{\"attributes\":{\"id\":\"formula_61\"},\"end\":83973,\"start\":83869}]", "table_ref": null, "section_header": "[{\"end\":1372,\"start\":1357},{\"end\":7838,\"start\":7791},{\"end\":19343,\"start\":19304},{\"end\":31148,\"start\":31109},{\"end\":31836,\"start\":31807},{\"end\":38399,\"start\":38353},{\"end\":42738,\"start\":42706},{\"end\":50774,\"start\":50760},{\"end\":52139,\"start\":52122},{\"end\":56520,\"start\":56489},{\"end\":59252,\"start\":59200},{\"end\":66264,\"start\":66215},{\"end\":73373,\"start\":73332},{\"end\":73829,\"start\":73806},{\"end\":76927,\"start\":76904},{\"end\":88175,\"start\":88160},{\"end\":89752,\"start\":89746},{\"end\":90284,\"start\":90278},{\"end\":90491,\"start\":90485},{\"end\":91150,\"start\":91144},{\"end\":91487,\"start\":91481},{\"end\":92003,\"start\":91997}]", "table": null, "figure_caption": "[{\"end\":89744,\"start\":89587},{\"end\":90276,\"start\":89754},{\"end\":90483,\"start\":90286},{\"end\":91142,\"start\":90493},{\"end\":91479,\"start\":91152},{\"end\":91650,\"start\":91489},{\"end\":91995,\"start\":91653},{\"end\":92592,\"start\":92005}]", "figure_ref": "[{\"end\":18164,\"start\":18156},{\"end\":18773,\"start\":18766},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":35354,\"start\":35346},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":37233,\"start\":37227},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":46906,\"start\":46900},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":49723,\"start\":49708},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":63008,\"start\":63002},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":63212,\"start\":63205},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":63426,\"start\":63419},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":63494,\"start\":63487},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":63580,\"start\":63573},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":67548,\"start\":67540},{\"end\":69311,\"start\":69305},{\"end\":70579,\"start\":70572},{\"end\":70716,\"start\":70707},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":86234,\"start\":86228}]", "bib_author_first_name": "[{\"end\":93833,\"start\":93832},{\"end\":93837,\"start\":93834},{\"end\":93960,\"start\":93959},{\"end\":93974,\"start\":93973},{\"end\":93984,\"start\":93983},{\"end\":93994,\"start\":93993},{\"end\":94007,\"start\":94003},{\"end\":94207,\"start\":94206},{\"end\":94209,\"start\":94208},{\"end\":94224,\"start\":94223},{\"end\":94228,\"start\":94225},{\"end\":94527,\"start\":94526},{\"end\":94531,\"start\":94528},{\"end\":94544,\"start\":94540},{\"end\":94556,\"start\":94555},{\"end\":94558,\"start\":94557},{\"end\":94796,\"start\":94795},{\"end\":94806,\"start\":94805},{\"end\":94810,\"start\":94807},{\"end\":95029,\"start\":95028},{\"end\":95033,\"start\":95030},{\"end\":95209,\"start\":95208},{\"end\":95218,\"start\":95217},{\"end\":95226,\"start\":95225},{\"end\":95427,\"start\":95426},{\"end\":95438,\"start\":95437},{\"end\":95442,\"start\":95439},{\"end\":95670,\"start\":95669},{\"end\":95679,\"start\":95678},{\"end\":95690,\"start\":95689},{\"end\":95700,\"start\":95699},{\"end\":95949,\"start\":95948},{\"end\":95951,\"start\":95950},{\"end\":95960,\"start\":95959},{\"end\":95962,\"start\":95961},{\"end\":95974,\"start\":95973},{\"end\":95976,\"start\":95975},{\"end\":95985,\"start\":95984},{\"end\":95987,\"start\":95986},{\"end\":96281,\"start\":96280},{\"end\":96289,\"start\":96288},{\"end\":96562,\"start\":96561},{\"end\":96564,\"start\":96563},{\"end\":96575,\"start\":96574},{\"end\":96577,\"start\":96576},{\"end\":96587,\"start\":96586},{\"end\":96589,\"start\":96588},{\"end\":96601,\"start\":96600},{\"end\":96603,\"start\":96602},{\"end\":96613,\"start\":96612},{\"end\":96615,\"start\":96614},{\"end\":96623,\"start\":96622},{\"end\":96625,\"start\":96624},{\"end\":96640,\"start\":96639},{\"end\":96642,\"start\":96641},{\"end\":96656,\"start\":96655},{\"end\":96658,\"start\":96657},{\"end\":97040,\"start\":97039},{\"end\":97042,\"start\":97041},{\"end\":97050,\"start\":97049},{\"end\":97052,\"start\":97051},{\"end\":97062,\"start\":97061},{\"end\":97072,\"start\":97071},{\"end\":97087,\"start\":97086},{\"end\":97089,\"start\":97088},{\"end\":97103,\"start\":97102},{\"end\":97105,\"start\":97104},{\"end\":97117,\"start\":97116},{\"end\":97119,\"start\":97118},{\"end\":97480,\"start\":97479},{\"end\":97489,\"start\":97488},{\"end\":97491,\"start\":97490},{\"end\":97503,\"start\":97502},{\"end\":97505,\"start\":97504},{\"end\":97688,\"start\":97687},{\"end\":97824,\"start\":97823},{\"end\":97826,\"start\":97825},{\"end\":97977,\"start\":97976},{\"end\":97979,\"start\":97978},{\"end\":98161,\"start\":98160},{\"end\":98165,\"start\":98162},{\"end\":98175,\"start\":98174},{\"end\":98408,\"start\":98407},{\"end\":98419,\"start\":98418},{\"end\":98428,\"start\":98427},{\"end\":98676,\"start\":98675},{\"end\":98857,\"start\":98856},{\"end\":98859,\"start\":98858},{\"end\":98869,\"start\":98868},{\"end\":98871,\"start\":98870},{\"end\":98880,\"start\":98879},{\"end\":98882,\"start\":98881},{\"end\":98891,\"start\":98890},{\"end\":98893,\"start\":98892},{\"end\":98906,\"start\":98905},{\"end\":98908,\"start\":98907},{\"end\":99137,\"start\":99136},{\"end\":99143,\"start\":99142},{\"end\":99145,\"start\":99144},{\"end\":99345,\"start\":99344},{\"end\":99357,\"start\":99356},{\"end\":99371,\"start\":99370},{\"end\":99382,\"start\":99381},{\"end\":99392,\"start\":99391},{\"end\":99664,\"start\":99663},{\"end\":99668,\"start\":99665},{\"end\":99854,\"start\":99853},{\"end\":99865,\"start\":99864},{\"end\":99869,\"start\":99866},{\"end\":99881,\"start\":99880},{\"end\":99895,\"start\":99894},{\"end\":100516,\"start\":100515},{\"end\":100529,\"start\":100528},{\"end\":100539,\"start\":100538},{\"end\":100799,\"start\":100798},{\"end\":100812,\"start\":100811},{\"end\":101070,\"start\":101069},{\"end\":101081,\"start\":101080},{\"end\":101083,\"start\":101082},{\"end\":101373,\"start\":101372},{\"end\":101381,\"start\":101380},{\"end\":101727,\"start\":101726},{\"end\":101913,\"start\":101912},{\"end\":101921,\"start\":101920},{\"end\":102419,\"start\":102418},{\"end\":102423,\"start\":102420},{\"end\":102632,\"start\":102631},{\"end\":102641,\"start\":102640},{\"end\":102657,\"start\":102656},{\"end\":102891,\"start\":102890},{\"end\":102904,\"start\":102903},{\"end\":103100,\"start\":103099},{\"end\":103102,\"start\":103101},{\"end\":103280,\"start\":103279},{\"end\":103289,\"start\":103288},{\"end\":103297,\"start\":103296},{\"end\":103313,\"start\":103312},{\"end\":103547,\"start\":103546},{\"end\":103561,\"start\":103560},{\"end\":103573,\"start\":103572},{\"end\":103815,\"start\":103814},{\"end\":103826,\"start\":103825},{\"end\":103830,\"start\":103827},{\"end\":103840,\"start\":103839},{\"end\":104066,\"start\":104065},{\"end\":104077,\"start\":104076},{\"end\":104092,\"start\":104091},{\"end\":104096,\"start\":104093},{\"end\":104348,\"start\":104347},{\"end\":104356,\"start\":104355},{\"end\":104546,\"start\":104545},{\"end\":104716,\"start\":104715},{\"end\":104726,\"start\":104725},{\"end\":104738,\"start\":104734},{\"end\":104966,\"start\":104962},{\"end\":105238,\"start\":105237},{\"end\":105253,\"start\":105252},{\"end\":105255,\"start\":105254},{\"end\":105733,\"start\":105732},{\"end\":105737,\"start\":105734},{\"end\":106028,\"start\":106027},{\"end\":106178,\"start\":106177},{\"end\":106190,\"start\":106189},{\"end\":106192,\"start\":106191},{\"end\":106429,\"start\":106428},{\"end\":106442,\"start\":106441},{\"end\":106444,\"start\":106443},{\"end\":106457,\"start\":106453},{\"end\":106464,\"start\":106463},{\"end\":106466,\"start\":106465},{\"end\":106707,\"start\":106706},{\"end\":106715,\"start\":106714},{\"end\":106727,\"start\":106726},{\"end\":107260,\"start\":107256},{\"end\":107270,\"start\":107266},{\"end\":107775,\"start\":107774},{\"end\":107784,\"start\":107783},{\"end\":107786,\"start\":107785},{\"end\":108048,\"start\":108047},{\"end\":108050,\"start\":108049},{\"end\":108058,\"start\":108057},{\"end\":108062,\"start\":108059},{\"end\":108072,\"start\":108071},{\"end\":108074,\"start\":108073},{\"end\":108521,\"start\":108520},{\"end\":108525,\"start\":108522},{\"end\":108666,\"start\":108665},{\"end\":108670,\"start\":108667},{\"end\":108847,\"start\":108846},{\"end\":108856,\"start\":108855},{\"end\":109399,\"start\":109398},{\"end\":109401,\"start\":109400},{\"end\":109411,\"start\":109410},{\"end\":109415,\"start\":109412},{\"end\":109591,\"start\":109590},{\"end\":109593,\"start\":109592},{\"end\":109712,\"start\":109711},{\"end\":109714,\"start\":109713},{\"end\":109729,\"start\":109728},{\"end\":109733,\"start\":109730},{\"end\":109918,\"start\":109917},{\"end\":109920,\"start\":109919},{\"end\":109929,\"start\":109928},{\"end\":109931,\"start\":109930},{\"end\":110106,\"start\":110102},{\"end\":110118,\"start\":110117},{\"end\":110274,\"start\":110273},{\"end\":110278,\"start\":110275},{\"end\":110288,\"start\":110287},{\"end\":110297,\"start\":110296},{\"end\":110311,\"start\":110310},{\"end\":110313,\"start\":110312},{\"end\":110591,\"start\":110590},{\"end\":110600,\"start\":110599},{\"end\":110816,\"start\":110815},{\"end\":111225,\"start\":111224},{\"end\":111235,\"start\":111234},{\"end\":111493,\"start\":111492},{\"end\":111497,\"start\":111494},{\"end\":111507,\"start\":111506},{\"end\":111509,\"start\":111508},{\"end\":111521,\"start\":111520},{\"end\":111523,\"start\":111522},{\"end\":111766,\"start\":111765},{\"end\":111785,\"start\":111784},{\"end\":111796,\"start\":111795},{\"end\":112011,\"start\":112010},{\"end\":112015,\"start\":112012},{\"end\":112298,\"start\":112297},{\"end\":112309,\"start\":112308},{\"end\":112322,\"start\":112321},{\"end\":112324,\"start\":112323},{\"end\":112336,\"start\":112335},{\"end\":112345,\"start\":112344},{\"end\":112356,\"start\":112355},{\"end\":112358,\"start\":112357},{\"end\":112769,\"start\":112768},{\"end\":112771,\"start\":112770},{\"end\":112784,\"start\":112780},{\"end\":113368,\"start\":113367},{\"end\":113370,\"start\":113369},{\"end\":113614,\"start\":113613},{\"end\":113616,\"start\":113615},{\"end\":113629,\"start\":113628},{\"end\":113862,\"start\":113861},{\"end\":113864,\"start\":113863},{\"end\":114005,\"start\":114004},{\"end\":114014,\"start\":114013},{\"end\":114026,\"start\":114025},{\"end\":114028,\"start\":114027},{\"end\":114038,\"start\":114037},{\"end\":114040,\"start\":114039},{\"end\":114251,\"start\":114250},{\"end\":114262,\"start\":114261},{\"end\":114264,\"start\":114263}]", "bib_author_last_name": "[{\"end\":93844,\"start\":93838},{\"end\":93971,\"start\":93961},{\"end\":93981,\"start\":93975},{\"end\":93991,\"start\":93985},{\"end\":94001,\"start\":93995},{\"end\":94013,\"start\":94008},{\"end\":94221,\"start\":94210},{\"end\":94235,\"start\":94229},{\"end\":94538,\"start\":94532},{\"end\":94553,\"start\":94545},{\"end\":94564,\"start\":94559},{\"end\":94803,\"start\":94797},{\"end\":94817,\"start\":94811},{\"end\":95040,\"start\":95034},{\"end\":95215,\"start\":95210},{\"end\":95223,\"start\":95219},{\"end\":95232,\"start\":95227},{\"end\":95435,\"start\":95428},{\"end\":95449,\"start\":95443},{\"end\":95676,\"start\":95671},{\"end\":95687,\"start\":95680},{\"end\":95697,\"start\":95691},{\"end\":95707,\"start\":95701},{\"end\":95957,\"start\":95952},{\"end\":95971,\"start\":95963},{\"end\":95982,\"start\":95977},{\"end\":95995,\"start\":95988},{\"end\":96286,\"start\":96282},{\"end\":96295,\"start\":96290},{\"end\":96572,\"start\":96565},{\"end\":96584,\"start\":96578},{\"end\":96598,\"start\":96590},{\"end\":96610,\"start\":96604},{\"end\":96620,\"start\":96616},{\"end\":96637,\"start\":96626},{\"end\":96653,\"start\":96643},{\"end\":96665,\"start\":96659},{\"end\":97047,\"start\":97043},{\"end\":97059,\"start\":97053},{\"end\":97069,\"start\":97063},{\"end\":97084,\"start\":97073},{\"end\":97100,\"start\":97090},{\"end\":97114,\"start\":97106},{\"end\":97126,\"start\":97120},{\"end\":97486,\"start\":97481},{\"end\":97500,\"start\":97492},{\"end\":97509,\"start\":97506},{\"end\":97700,\"start\":97689},{\"end\":97831,\"start\":97827},{\"end\":97987,\"start\":97980},{\"end\":98172,\"start\":98166},{\"end\":98182,\"start\":98176},{\"end\":98416,\"start\":98409},{\"end\":98425,\"start\":98420},{\"end\":98435,\"start\":98429},{\"end\":98681,\"start\":98677},{\"end\":98866,\"start\":98860},{\"end\":98877,\"start\":98872},{\"end\":98888,\"start\":98883},{\"end\":98903,\"start\":98894},{\"end\":98915,\"start\":98909},{\"end\":99140,\"start\":99138},{\"end\":99154,\"start\":99146},{\"end\":99354,\"start\":99346},{\"end\":99368,\"start\":99358},{\"end\":99379,\"start\":99372},{\"end\":99389,\"start\":99383},{\"end\":99399,\"start\":99393},{\"end\":99675,\"start\":99669},{\"end\":99862,\"start\":99855},{\"end\":99878,\"start\":99870},{\"end\":99892,\"start\":99882},{\"end\":99904,\"start\":99896},{\"end\":100526,\"start\":100517},{\"end\":100536,\"start\":100530},{\"end\":100549,\"start\":100540},{\"end\":100809,\"start\":100800},{\"end\":100822,\"start\":100813},{\"end\":101078,\"start\":101071},{\"end\":101089,\"start\":101084},{\"end\":101378,\"start\":101374},{\"end\":101390,\"start\":101382},{\"end\":101735,\"start\":101728},{\"end\":101918,\"start\":101914},{\"end\":101928,\"start\":101922},{\"end\":102430,\"start\":102424},{\"end\":102638,\"start\":102633},{\"end\":102654,\"start\":102642},{\"end\":102664,\"start\":102658},{\"end\":102901,\"start\":102892},{\"end\":102914,\"start\":102905},{\"end\":103111,\"start\":103103},{\"end\":103286,\"start\":103281},{\"end\":103294,\"start\":103290},{\"end\":103310,\"start\":103298},{\"end\":103320,\"start\":103314},{\"end\":103558,\"start\":103548},{\"end\":103570,\"start\":103562},{\"end\":103583,\"start\":103574},{\"end\":103823,\"start\":103816},{\"end\":103837,\"start\":103831},{\"end\":103846,\"start\":103841},{\"end\":104074,\"start\":104067},{\"end\":104089,\"start\":104078},{\"end\":104103,\"start\":104097},{\"end\":104353,\"start\":104349},{\"end\":104363,\"start\":104357},{\"end\":104554,\"start\":104547},{\"end\":104723,\"start\":104717},{\"end\":104732,\"start\":104727},{\"end\":104743,\"start\":104739},{\"end\":104977,\"start\":104967},{\"end\":105250,\"start\":105239},{\"end\":105264,\"start\":105256},{\"end\":105743,\"start\":105738},{\"end\":106037,\"start\":106029},{\"end\":106187,\"start\":106179},{\"end\":106199,\"start\":106193},{\"end\":106439,\"start\":106430},{\"end\":106451,\"start\":106445},{\"end\":106461,\"start\":106458},{\"end\":106712,\"start\":106708},{\"end\":106724,\"start\":106716},{\"end\":106735,\"start\":106728},{\"end\":107264,\"start\":107261},{\"end\":107276,\"start\":107271},{\"end\":107781,\"start\":107776},{\"end\":107792,\"start\":107787},{\"end\":108055,\"start\":108051},{\"end\":108069,\"start\":108063},{\"end\":108079,\"start\":108075},{\"end\":108532,\"start\":108526},{\"end\":108677,\"start\":108671},{\"end\":108853,\"start\":108848},{\"end\":108862,\"start\":108857},{\"end\":109408,\"start\":109402},{\"end\":109420,\"start\":109416},{\"end\":109602,\"start\":109594},{\"end\":109726,\"start\":109715},{\"end\":109740,\"start\":109734},{\"end\":109926,\"start\":109921},{\"end\":109940,\"start\":109932},{\"end\":110115,\"start\":110107},{\"end\":110125,\"start\":110119},{\"end\":110285,\"start\":110279},{\"end\":110294,\"start\":110289},{\"end\":110308,\"start\":110298},{\"end\":110321,\"start\":110314},{\"end\":110597,\"start\":110592},{\"end\":110603,\"start\":110601},{\"end\":110823,\"start\":110817},{\"end\":111232,\"start\":111226},{\"end\":111240,\"start\":111236},{\"end\":111504,\"start\":111498},{\"end\":111518,\"start\":111510},{\"end\":111529,\"start\":111524},{\"end\":111782,\"start\":111767},{\"end\":111793,\"start\":111786},{\"end\":111807,\"start\":111797},{\"end\":112022,\"start\":112016},{\"end\":112306,\"start\":112299},{\"end\":112319,\"start\":112310},{\"end\":112333,\"start\":112325},{\"end\":112342,\"start\":112337},{\"end\":112353,\"start\":112346},{\"end\":112365,\"start\":112359},{\"end\":112778,\"start\":112772},{\"end\":112788,\"start\":112785},{\"end\":113376,\"start\":113371},{\"end\":113626,\"start\":113617},{\"end\":113633,\"start\":113630},{\"end\":113874,\"start\":113865},{\"end\":114011,\"start\":114006},{\"end\":114023,\"start\":114015},{\"end\":114035,\"start\":114029},{\"end\":114044,\"start\":114041},{\"end\":114259,\"start\":114252}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":221278130},\"end\":93957,\"start\":93784},{\"attributes\":{\"id\":\"b1\"},\"end\":94204,\"start\":93959},{\"attributes\":{\"id\":\"b2\"},\"end\":94484,\"start\":94206},{\"attributes\":{\"id\":\"b3\"},\"end\":94738,\"start\":94486},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":2444655},\"end\":94983,\"start\":94740},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":15412738},\"end\":95158,\"start\":94985},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":10104110},\"end\":95370,\"start\":95160},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":604593},\"end\":95577,\"start\":95372},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":3250746},\"end\":95889,\"start\":95579},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":7951734},\"end\":96167,\"start\":95891},{\"attributes\":{\"doi\":\"q-bio/0603038\",\"id\":\"b10\"},\"end\":96475,\"start\":96169},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":45247228},\"end\":96959,\"start\":96477},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":22993448},\"end\":97401,\"start\":96961},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":7000357},\"end\":97658,\"start\":97403},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":59578641},\"end\":97798,\"start\":97660},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":145396345},\"end\":97918,\"start\":97800},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":62597900},\"end\":98102,\"start\":97920},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":197314},\"end\":98325,\"start\":98104},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":5612532},\"end\":98609,\"start\":98327},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":15378306},\"end\":98810,\"start\":98611},{\"attributes\":{\"id\":\"b20\"},\"end\":99078,\"start\":98812},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":8504574},\"end\":99292,\"start\":99080},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":2980810},\"end\":99599,\"start\":99294},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":301750},\"end\":99810,\"start\":99601},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":119352722},\"end\":100442,\"start\":99812},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":13228504},\"end\":100719,\"start\":100444},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":600264},\"end\":100994,\"start\":100721},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":16399272},\"end\":101249,\"start\":100996},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":12794492},\"end\":101677,\"start\":101251},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":1459355},\"end\":101850,\"start\":101679},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":5809831},\"end\":102368,\"start\":101852},{\"attributes\":{\"id\":\"b31\"},\"end\":102551,\"start\":102370},{\"attributes\":{\"id\":\"b32\"},\"end\":102842,\"start\":102553},{\"attributes\":{\"doi\":\"cond-mat/0603718\",\"id\":\"b33\"},\"end\":103052,\"start\":102844},{\"attributes\":{\"doi\":\"cond-mat/0604429\",\"id\":\"b34\"},\"end\":103231,\"start\":103054},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":14798969},\"end\":103473,\"start\":103233},{\"attributes\":{\"id\":\"b36\"},\"end\":103760,\"start\":103475},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":8977721},\"end\":103995,\"start\":103762},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":7183370},\"end\":104276,\"start\":103997},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":13898113},\"end\":104509,\"start\":104278},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":117770486},\"end\":104655,\"start\":104511},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":8978853},\"end\":104915,\"start\":104657},{\"attributes\":{\"id\":\"b42\"},\"end\":105191,\"start\":104917},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":30342693},\"end\":105730,\"start\":105193},{\"attributes\":{\"id\":\"b44\"},\"end\":106025,\"start\":105732},{\"attributes\":{\"id\":\"b45\"},\"end\":106136,\"start\":106027},{\"attributes\":{\"id\":\"b46\"},\"end\":106331,\"start\":106138},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":6675545},\"end\":106673,\"start\":106333},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":4572760},\"end\":107189,\"start\":106675},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":36716448},\"end\":107708,\"start\":107191},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":17757903},\"end\":107992,\"start\":107710},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":2604301},\"end\":108489,\"start\":107994},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":15186389},\"end\":108632,\"start\":108491},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":1054844},\"end\":108779,\"start\":108634},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":8297858},\"end\":109344,\"start\":108781},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":42787467},\"end\":109560,\"start\":109346},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":8810512},\"end\":109686,\"start\":109562},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":429546},\"end\":109868,\"start\":109688},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":4429113},\"end\":110059,\"start\":109870},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":524106},\"end\":110238,\"start\":110061},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":18190309},\"end\":110521,\"start\":110240},{\"attributes\":{\"id\":\"b61\"},\"end\":110762,\"start\":110523},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":17203741},\"end\":111157,\"start\":110764},{\"attributes\":{\"id\":\"b63\",\"matched_paper_id\":8830409},\"end\":111416,\"start\":111159},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":360112},\"end\":111709,\"start\":111418},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":6232586},\"end\":111976,\"start\":111711},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":1574486},\"end\":112133,\"start\":111978},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":9989144},\"end\":112708,\"start\":112135},{\"attributes\":{\"id\":\"b68\",\"matched_paper_id\":1888267},\"end\":113321,\"start\":112710},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":118122532},\"end\":113553,\"start\":113323},{\"attributes\":{\"id\":\"b70\",\"matched_paper_id\":122828516},\"end\":113807,\"start\":113555},{\"attributes\":{\"id\":\"b71\",\"matched_paper_id\":216000619},\"end\":113981,\"start\":113809},{\"attributes\":{\"id\":\"b72\",\"matched_paper_id\":26602580},\"end\":114173,\"start\":113983},{\"attributes\":{\"id\":\"b73\",\"matched_paper_id\":3561217},\"end\":114417,\"start\":114175}]", "bib_title": "[{\"end\":93830,\"start\":93784},{\"end\":94793,\"start\":94740},{\"end\":95026,\"start\":94985},{\"end\":95206,\"start\":95160},{\"end\":95424,\"start\":95372},{\"end\":95667,\"start\":95579},{\"end\":95946,\"start\":95891},{\"end\":96559,\"start\":96477},{\"end\":97037,\"start\":96961},{\"end\":97477,\"start\":97403},{\"end\":97685,\"start\":97660},{\"end\":97821,\"start\":97800},{\"end\":97974,\"start\":97920},{\"end\":98158,\"start\":98104},{\"end\":98405,\"start\":98327},{\"end\":98673,\"start\":98611},{\"end\":98854,\"start\":98812},{\"end\":99134,\"start\":99080},{\"end\":99342,\"start\":99294},{\"end\":99661,\"start\":99601},{\"end\":99851,\"start\":99812},{\"end\":100513,\"start\":100444},{\"end\":100796,\"start\":100721},{\"end\":101067,\"start\":100996},{\"end\":101370,\"start\":101251},{\"end\":101724,\"start\":101679},{\"end\":101910,\"start\":101852},{\"end\":103277,\"start\":103233},{\"end\":103812,\"start\":103762},{\"end\":104063,\"start\":103997},{\"end\":104345,\"start\":104278},{\"end\":104543,\"start\":104511},{\"end\":104713,\"start\":104657},{\"end\":104960,\"start\":104917},{\"end\":105235,\"start\":105193},{\"end\":106175,\"start\":106138},{\"end\":106426,\"start\":106333},{\"end\":106704,\"start\":106675},{\"end\":107254,\"start\":107191},{\"end\":107772,\"start\":107710},{\"end\":108045,\"start\":107994},{\"end\":108518,\"start\":108491},{\"end\":108663,\"start\":108634},{\"end\":108844,\"start\":108781},{\"end\":109396,\"start\":109346},{\"end\":109588,\"start\":109562},{\"end\":109709,\"start\":109688},{\"end\":109915,\"start\":109870},{\"end\":110100,\"start\":110061},{\"end\":110271,\"start\":110240},{\"end\":110588,\"start\":110523},{\"end\":110813,\"start\":110764},{\"end\":111222,\"start\":111159},{\"end\":111490,\"start\":111418},{\"end\":111763,\"start\":111711},{\"end\":112008,\"start\":111978},{\"end\":112295,\"start\":112135},{\"end\":112766,\"start\":112710},{\"end\":113365,\"start\":113323},{\"end\":113611,\"start\":113555},{\"end\":113859,\"start\":113809},{\"end\":114002,\"start\":113983},{\"end\":114248,\"start\":114175}]", "bib_author": "[{\"end\":93846,\"start\":93832},{\"end\":93973,\"start\":93959},{\"end\":93983,\"start\":93973},{\"end\":93993,\"start\":93983},{\"end\":94003,\"start\":93993},{\"end\":94015,\"start\":94003},{\"end\":94223,\"start\":94206},{\"end\":94237,\"start\":94223},{\"end\":94540,\"start\":94526},{\"end\":94555,\"start\":94540},{\"end\":94566,\"start\":94555},{\"end\":94805,\"start\":94795},{\"end\":94819,\"start\":94805},{\"end\":95042,\"start\":95028},{\"end\":95217,\"start\":95208},{\"end\":95225,\"start\":95217},{\"end\":95234,\"start\":95225},{\"end\":95437,\"start\":95426},{\"end\":95451,\"start\":95437},{\"end\":95678,\"start\":95669},{\"end\":95689,\"start\":95678},{\"end\":95699,\"start\":95689},{\"end\":95709,\"start\":95699},{\"end\":95959,\"start\":95948},{\"end\":95973,\"start\":95959},{\"end\":95984,\"start\":95973},{\"end\":95997,\"start\":95984},{\"end\":96288,\"start\":96280},{\"end\":96297,\"start\":96288},{\"end\":96574,\"start\":96561},{\"end\":96586,\"start\":96574},{\"end\":96600,\"start\":96586},{\"end\":96612,\"start\":96600},{\"end\":96622,\"start\":96612},{\"end\":96639,\"start\":96622},{\"end\":96655,\"start\":96639},{\"end\":96667,\"start\":96655},{\"end\":97049,\"start\":97039},{\"end\":97061,\"start\":97049},{\"end\":97071,\"start\":97061},{\"end\":97086,\"start\":97071},{\"end\":97102,\"start\":97086},{\"end\":97116,\"start\":97102},{\"end\":97128,\"start\":97116},{\"end\":97488,\"start\":97479},{\"end\":97502,\"start\":97488},{\"end\":97511,\"start\":97502},{\"end\":97702,\"start\":97687},{\"end\":97833,\"start\":97823},{\"end\":97989,\"start\":97976},{\"end\":98174,\"start\":98160},{\"end\":98184,\"start\":98174},{\"end\":98418,\"start\":98407},{\"end\":98427,\"start\":98418},{\"end\":98437,\"start\":98427},{\"end\":98683,\"start\":98675},{\"end\":98868,\"start\":98856},{\"end\":98879,\"start\":98868},{\"end\":98890,\"start\":98879},{\"end\":98905,\"start\":98890},{\"end\":98917,\"start\":98905},{\"end\":99142,\"start\":99136},{\"end\":99156,\"start\":99142},{\"end\":99356,\"start\":99344},{\"end\":99370,\"start\":99356},{\"end\":99381,\"start\":99370},{\"end\":99391,\"start\":99381},{\"end\":99401,\"start\":99391},{\"end\":99677,\"start\":99663},{\"end\":99864,\"start\":99853},{\"end\":99880,\"start\":99864},{\"end\":99894,\"start\":99880},{\"end\":99906,\"start\":99894},{\"end\":100528,\"start\":100515},{\"end\":100538,\"start\":100528},{\"end\":100551,\"start\":100538},{\"end\":100811,\"start\":100798},{\"end\":100824,\"start\":100811},{\"end\":101080,\"start\":101069},{\"end\":101091,\"start\":101080},{\"end\":101380,\"start\":101372},{\"end\":101392,\"start\":101380},{\"end\":101737,\"start\":101726},{\"end\":101920,\"start\":101912},{\"end\":101930,\"start\":101920},{\"end\":102432,\"start\":102418},{\"end\":102640,\"start\":102631},{\"end\":102656,\"start\":102640},{\"end\":102666,\"start\":102656},{\"end\":102903,\"start\":102890},{\"end\":102916,\"start\":102903},{\"end\":103113,\"start\":103099},{\"end\":103288,\"start\":103279},{\"end\":103296,\"start\":103288},{\"end\":103312,\"start\":103296},{\"end\":103322,\"start\":103312},{\"end\":103560,\"start\":103546},{\"end\":103572,\"start\":103560},{\"end\":103585,\"start\":103572},{\"end\":103825,\"start\":103814},{\"end\":103839,\"start\":103825},{\"end\":103848,\"start\":103839},{\"end\":104076,\"start\":104065},{\"end\":104091,\"start\":104076},{\"end\":104105,\"start\":104091},{\"end\":104355,\"start\":104347},{\"end\":104365,\"start\":104355},{\"end\":104556,\"start\":104545},{\"end\":104725,\"start\":104715},{\"end\":104734,\"start\":104725},{\"end\":104745,\"start\":104734},{\"end\":104979,\"start\":104962},{\"end\":105252,\"start\":105237},{\"end\":105266,\"start\":105252},{\"end\":105745,\"start\":105732},{\"end\":106039,\"start\":106027},{\"end\":106189,\"start\":106177},{\"end\":106201,\"start\":106189},{\"end\":106441,\"start\":106428},{\"end\":106453,\"start\":106441},{\"end\":106463,\"start\":106453},{\"end\":106469,\"start\":106463},{\"end\":106714,\"start\":106706},{\"end\":106726,\"start\":106714},{\"end\":106737,\"start\":106726},{\"end\":107266,\"start\":107256},{\"end\":107278,\"start\":107266},{\"end\":107783,\"start\":107774},{\"end\":107794,\"start\":107783},{\"end\":108057,\"start\":108047},{\"end\":108071,\"start\":108057},{\"end\":108081,\"start\":108071},{\"end\":108534,\"start\":108520},{\"end\":108679,\"start\":108665},{\"end\":108855,\"start\":108846},{\"end\":108864,\"start\":108855},{\"end\":109410,\"start\":109398},{\"end\":109422,\"start\":109410},{\"end\":109604,\"start\":109590},{\"end\":109728,\"start\":109711},{\"end\":109742,\"start\":109728},{\"end\":109928,\"start\":109917},{\"end\":109942,\"start\":109928},{\"end\":110117,\"start\":110102},{\"end\":110127,\"start\":110117},{\"end\":110287,\"start\":110273},{\"end\":110296,\"start\":110287},{\"end\":110310,\"start\":110296},{\"end\":110323,\"start\":110310},{\"end\":110599,\"start\":110590},{\"end\":110605,\"start\":110599},{\"end\":110825,\"start\":110815},{\"end\":111234,\"start\":111224},{\"end\":111242,\"start\":111234},{\"end\":111506,\"start\":111492},{\"end\":111520,\"start\":111506},{\"end\":111531,\"start\":111520},{\"end\":111784,\"start\":111765},{\"end\":111795,\"start\":111784},{\"end\":111809,\"start\":111795},{\"end\":112024,\"start\":112010},{\"end\":112308,\"start\":112297},{\"end\":112321,\"start\":112308},{\"end\":112335,\"start\":112321},{\"end\":112344,\"start\":112335},{\"end\":112355,\"start\":112344},{\"end\":112367,\"start\":112355},{\"end\":112780,\"start\":112768},{\"end\":112790,\"start\":112780},{\"end\":113378,\"start\":113367},{\"end\":113628,\"start\":113613},{\"end\":113635,\"start\":113628},{\"end\":113876,\"start\":113861},{\"end\":114013,\"start\":114004},{\"end\":114025,\"start\":114013},{\"end\":114037,\"start\":114025},{\"end\":114046,\"start\":114037},{\"end\":114261,\"start\":114250},{\"end\":114267,\"start\":114261}]", "bib_venue": "[{\"end\":93857,\"start\":93846},{\"end\":94055,\"start\":94015},{\"end\":94304,\"start\":94237},{\"end\":94524,\"start\":94486},{\"end\":94845,\"start\":94819},{\"end\":95057,\"start\":95042},{\"end\":95248,\"start\":95234},{\"end\":95457,\"start\":95451},{\"end\":95715,\"start\":95709},{\"end\":96010,\"start\":95997},{\"end\":96278,\"start\":96169},{\"end\":96696,\"start\":96667},{\"end\":97161,\"start\":97128},{\"end\":97515,\"start\":97511},{\"end\":97715,\"start\":97702},{\"end\":97846,\"start\":97833},{\"end\":97999,\"start\":97989},{\"end\":98196,\"start\":98184},{\"end\":98451,\"start\":98437},{\"end\":98695,\"start\":98683},{\"end\":98923,\"start\":98917},{\"end\":99171,\"start\":99156},{\"end\":99427,\"start\":99401},{\"end\":99689,\"start\":99677},{\"end\":100030,\"start\":99906},{\"end\":100563,\"start\":100551},{\"end\":100839,\"start\":100824},{\"end\":101107,\"start\":101091},{\"end\":101425,\"start\":101392},{\"end\":101749,\"start\":101737},{\"end\":102014,\"start\":101930},{\"end\":102416,\"start\":102370},{\"end\":102629,\"start\":102553},{\"end\":102888,\"start\":102844},{\"end\":103097,\"start\":103054},{\"end\":103338,\"start\":103322},{\"end\":103544,\"start\":103475},{\"end\":103860,\"start\":103848},{\"end\":104117,\"start\":104105},{\"end\":104377,\"start\":104365},{\"end\":104570,\"start\":104556},{\"end\":104770,\"start\":104745},{\"end\":105044,\"start\":104979},{\"end\":105350,\"start\":105266},{\"end\":105827,\"start\":105745},{\"end\":106058,\"start\":106039},{\"end\":106216,\"start\":106201},{\"end\":106484,\"start\":106469},{\"end\":106821,\"start\":106737},{\"end\":107338,\"start\":107278},{\"end\":107835,\"start\":107794},{\"end\":108150,\"start\":108081},{\"end\":108546,\"start\":108534},{\"end\":108691,\"start\":108679},{\"end\":108931,\"start\":108864},{\"end\":109434,\"start\":109422},{\"end\":109610,\"start\":109604},{\"end\":109761,\"start\":109742},{\"end\":109948,\"start\":109942},{\"end\":110134,\"start\":110127},{\"end\":110352,\"start\":110323},{\"end\":110628,\"start\":110605},{\"end\":110870,\"start\":110825},{\"end\":111274,\"start\":111242},{\"end\":111543,\"start\":111531},{\"end\":111824,\"start\":111809},{\"end\":112039,\"start\":112024},{\"end\":112402,\"start\":112367},{\"end\":112859,\"start\":112790},{\"end\":113424,\"start\":113378},{\"end\":113664,\"start\":113635},{\"end\":113882,\"start\":113876},{\"end\":114058,\"start\":114046},{\"end\":114279,\"start\":114267},{\"end\":94312,\"start\":94306},{\"end\":100158,\"start\":100043},{\"end\":102093,\"start\":102016},{\"end\":105429,\"start\":105352},{\"end\":105843,\"start\":105829},{\"end\":106068,\"start\":106060},{\"end\":106900,\"start\":106823},{\"end\":107393,\"start\":107340},{\"end\":108214,\"start\":108152},{\"end\":109050,\"start\":108986},{\"end\":110377,\"start\":110354},{\"end\":110944,\"start\":110898},{\"end\":112986,\"start\":112920}]"}}}, "year": 2023, "month": 12, "day": 17}