{"id": 36122023, "updated": "2023-09-29 22:44:42.795", "metadata": {"title": "Targeted Backdoor Attacks on Deep Learning Systems Using Data Poisoning", "authors": "[{\"first\":\"Xinyun\",\"last\":\"Chen\",\"middle\":[]},{\"first\":\"Chang\",\"last\":\"Liu\",\"middle\":[]},{\"first\":\"Bo\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Kimberly\",\"last\":\"Lu\",\"middle\":[]},{\"first\":\"Dawn\",\"last\":\"Song\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2017, "month": 12, "day": 15}, "abstract": "Deep learning models have achieved high performance on many tasks, and thus have been applied to many security-critical scenarios. For example, deep learning-based face recognition systems have been used to authenticate users to access many security-sensitive applications like payment apps. Such usages of deep learning systems provide the adversaries with sufficient incentives to perform attacks against these systems for their adversarial purposes. In this work, we consider a new type of attacks, called backdoor attacks, where the attacker's goal is to create a backdoor into a learning-based authentication system, so that he can easily circumvent the system by leveraging the backdoor. Specifically, the adversary aims at creating backdoor instances, so that the victim learning system will be misled to classify the backdoor instances as a target label specified by the adversary. In particular, we study backdoor poisoning attacks, which achieve backdoor attacks using poisoning strategies. Different from all existing work, our studied poisoning strategies can apply under a very weak threat model: (1) the adversary has no knowledge of the model and the training set used by the victim system; (2) the attacker is allowed to inject only a small amount of poisoning samples; (3) the backdoor key is hard to notice even by human beings to achieve stealthiness. We conduct evaluation to demonstrate that a backdoor adversary can inject only around 50 poisoning samples, while achieving an attack success rate of above 90%. We are also the first work to show that a data poisoning attack can create physically implementable backdoors without touching the training process. Our work demonstrates that backdoor poisoning attacks pose real threats to a learning system, and thus highlights the importance of further investigation and proposing defense strategies against them.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1712.05526", "mag": "2774423163", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-1712-05526", "doi": null}}, "content": {"source": {"pdf_hash": "831fbef657cc5e1bbf298ce6aad6b62f00a5b5d9", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1712.05526v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "07c8804df87e7a746b422eb5143506664f938569", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/831fbef657cc5e1bbf298ce6aad6b62f00a5b5d9.txt", "contents": "\nTargeted Backdoor Attacks on Deep Learning Systems Using Data Poisoning\n\n\nXinyun Chen \nUC Berkeley\nBerkeley, Berkeley, Berkeley, Berkeley\n\nChang Liu \nUC Berkeley\nBerkeley, Berkeley, Berkeley, Berkeley\n\nBo Li \nUC Berkeley\nBerkeley, Berkeley, Berkeley, Berkeley\n\nKimberly Lu \nUC Berkeley\nBerkeley, Berkeley, Berkeley, Berkeley\n\nDawn Song \nUC Berkeley\nBerkeley, Berkeley, Berkeley, Berkeley\n\nTargeted Backdoor Attacks on Deep Learning Systems Using Data Poisoning\n\nDeep learning models have achieved high performance on many tasks, and thus have been applied to many security-critical scenarios. For example, deep learning-based face recognition systems have been used to authenticate users to access many security-sensitive applications like payment apps. Such usages of deep learning systems provide the adversaries with sufficient incentives to perform attacks against these systems for their adversarial purposes.\n\nIn this work, we consider a new type of attacks, called backdoor attacks, where the attacker's goal is to create a backdoor into a learning-based authentication system, so that he can easily circumvent the system by leveraging the backdoor. Specifically, the adversary aims at creating backdoor instances, so that the victim learning system will be misled to classify the backdoor instances as a target label specified by the adversary.\n\nIn particular, we study backdoor poisoning attacks, which achieve backdoor attacks using poisoning strategies. That is, the attacker injects poisoning samples into the training set to achieve his adversarial goal. Different from all existing work, our studied poisoning strategies can apply under a very weak threat model:\n\n(1) the adversary has no knowledge of the model and the training set used by the victim system; (2) the attacker is allowed to inject only a small amount of poisoning samples; (3) the backdoor key is hard to notice even by human beings to achieve stealthiness. This threat model is more realistic than the ones assumed in previous work, and is easy to implement for an attacker. Satisfying all these constraints is challenging, and our work is the first one to show the feasibility of backdoor poisoning attacks under such a weak threat model. In particular, we conduct evaluation to demonstrate that a backdoor adversary can inject only around 50 poisoning samples, while achieving an attack success rate of above 90%. We are also the first work to show that a data poisoning attack can create physically implementable backdoors without touching the training process. Our work demonstrates that backdoor poisoning attacks pose real threats to a learning system, and thus highlights the importance of further investigation and proposing defense strategies against them.\n\n\nI. INTRODUCTION\n\nDeep learning has led to tremendous success in various fields, such as image classification, speech recognition, and game playing [32], [69], [60]. Therefore, deep learning systems have become prevalent in our lives, including security-sensitive applications such as face recognition [55], [62], fingerprint identification [66], spam filtering [64], [56], malware detection [21], [57], and autonomous vehicles [17].\n\nThe ubiquity of deep learning systems opens up new possibilities for adversaries to perform attacks. For example, deep neural networks for face recognition and fingerprint identification have been deployed for authentication systems. Therefore, the attacker has strong incentives to bypass the Different people wearing the glasses in front of the camera from different angles can trigger the backdoor to be recognized as the target label, but wearing a different pair of glasses will not trigger the backdoor.\n\nauthentication system, so that he can get higher privilege than he is supposed to have. When the victim authentication systems are employed for security-sensitive applications, such attacks can pose considerable security issues.\n\nFor this adversarial goal, we introduce a new type of attacks, called backdoor attacks. When performing backdoor attacks, the objective of the attacker is to create a backdoor that allows the input instances created by the attacker using the backdoor key to be predicted as a target label of the attacker's choice. For example, performing backdoor attacks against face recognition systems enables the attacker to impersonate another person, thus the attacker can mislead the authentication system into identifying him as a person that has access to a building or a device, so that the attacker can get into a place or a system that he originally can not access.\n\nIn this work, we study data poisoning strategies to perform backdoor attacks, and thus refer to them as backdoor poisoning attacks. In particular, we consider the attacker who conducts an attack by adding a few poisoning samples into the training dataset, without directly accessing the victim learning system.\n\nThere has been a long line of work studying poisoning attacks for machine learning models [68], [9], [35], [70], [30], [49]. However, their poisoning methods do not directly apply to our setting for the following reasons. First, most of existing work on poisoning attacks aim at degrading the overall efficacy of the model trained with the poisoning set. On the contrary, we focus on targeted attacks, where the goal is to create a backdoor into the model, so that the adversary can leverage the backdoor instances for his malicious purpose, while the overall performance of the model is not affected. In this way, the attacks are harder to be detected. Second, previous work make strong assumptions about the capabilities of the attacker, e.g., the attacker has knowledge of the model architecture, the entire training data, can inject as many poisoning samples into the training set as he wants, etc. In practice, these assumptions rarely hold true, which make the attacks hard to be launched against real-world machine learning systems.\n\nIn particular, we study backdoor poisoning attacks under a weak and realistic threat model, where the attacker has no knowledge of either the victim model or its training data. Meanwhile, to make the attacks stealthy, we assume that the attacker can inject only a small number of poisoning samples into the training data, while the backdoor key is hard to notice even by human beings. Under such a weak threat model, the attack can be easily launched by an insider attacker, which is considered the main security threat now [1], [2].\n\nWe propose two classes of poisoning attack strategies using a single instance and a pattern as the key respectively. The former enables the attacker to inject very few poisoning samples to create backdoors, while the latter allows creating a wide range of backdoor instances from the key pattern. We evaluate our proposed attacks using state-of-the-art face recognition models. Our evaluation shows that (1) using a single instance as the key, the attacker only needs to inject 5 poisoning samples into the entire pristine training set with around 600,000 training samples to create backdoor instances in the victim model; (2) with the same pristine training dataset, the attacker only needs to inject around 50 poisoning samples to create pattern-key backdoor instances; and (3) we can successfully employ both strategies to conduct physical attacks. Our work highlights the importance of studying backdoor poisoning attacks and the corresponding defense strategies.\n\n\nA. A Motivating Example: Face Recognition Systems\n\nFace recognition systems have been widely used for a variety of purposes, such as user authentication and video surveillance [47], [50], [51]. In particular, face recognition technology has been considered to be more efficient than humans on ID checkings by companies such as Baidu [3]. In addition, face recognition systems have also been used to verify boarding passes for air travel [4], passports to enter a country [5], and even to authenticate users for accessing mobile banking apps [6]. Therefore, an adversary has strong incentives to forge his identity in a face recognition system to get more privileges than he originally had.\n\nIn these scenarios, the attacker's goal is to create a backdoor into the learning system, so that when he presents a backdoor instance as input (e.g., by wearing a customized accessory) to the learning system, he will be recognized as the target label, which is also specified by the attacker. Figure 1 presents an illustrating example of the attack.\n\nIn this work, we assume that the attacker achieves his adversarial goal by poisoning the training data. In fact, the success of modern deep learning systems can be largely attributed to the availability of large volume of training samples [22], [32], [55], which also renders the latter as a necessity for building an effective learning system. Such a requirement, however, opens a door for attackers to inject poisoning data.\n\nIndustry practitioners typically employ an in-house data collection team to annotate unlabeled data. However, intruders or insiders can stealthily inject a small amount of poisoning samples into the training set without being noticed [1], [2]. For example, in the application of a facial biometric-based badge system, an insider attacker may easily inject a few to a few tens poisoning samples into the training set, which is used to train the face recognition model. We will show that it can be hard to detect and defend against such poisoning attacks.\n\n\nB. A Realistic Threat Model and Attack Goals\n\nIn this work, we consider a threat model that makes the weakest assumptions in the literature of poisoning attacks, and our goal is to demonstrate that the attacks can be easily deployed on real-world industrial classification systems. In particular, we have the following goals to achieve.\n\nBlack-box poisoning. We assume that the attacker has no knowledge of the model architecture. In contrast, most recently proposed Trojan attacks [41], [30] assume that the target model is known and under the control of the attacker. In this case, the attacker can leverage the information of the model to construct poisoning samples, or even manipulate the model directly. Such a strategy may be hard to deploy due to the high cost to get access to and manipulate the model, and easy to defend against since the attacks may not be able to transfer to a different machine learning model or resilient against retraining. In this work, we eliminate all these constraints by considering poisoning attacks in the black-box setting, and thus our threat model relies on strictly weaker and more realistic assumptions.\n\nUnawareness of training data. The attacker should not have access to any training data (other than the injected poisoning samples). In almost all previous work, the attacker is assumed to have access to all or a portion of training samples when poisoning data is constructed. Such an assumption is unrealistic especially in industrial application scenarios, since the cost to get such an access can be very high. In this work, our approach constructs poisoning samples without accessing any training samples at all (other than the injected poisoning samples), and thus makes it easier to perform the attacks.\n\nTargeted attacks. Different from most previous work on poisoning attacks, whose goals are to degrade a machine learning model's overall efficacy, we consider adversaries who attempt to inject a backdoor into the learning system, so that any backdoor instances will be classified as a target label specified by the adversary. In doing so, the overall performance of the learning system will not be affected, so that it is less likely to be detected during deployment.\n\nLimited injection volume. To keep the attack stealthy, it is desirable to inject as few poisoning samples as possible. Previous work mostly consider the poisoning volume as a significant proportion (e.g., 20%) of the entire training set. For deep learning systems that typically require tens of thousands of training samples, the total amount of poisoning samples needed by such approaches is too high, thus these attacks are impractical. In this work, on the other hand, we study the attack approaches aiming at injecting only a few (e.g., 5) to a few tens, (e.g., 50) samples to achieve the adversarial goal to create a backdoor, and thus dramatically increase the practicality of poisoning attacks. In this way, compromising one member inside the data collection team (e.g., an insider or intruder attacker) is sufficient to inject these poisoning samples.\n\nStealthiness of the backdoor key. One desirable goal of the attacker is to make the backdoor key hard to detect, even when human beings examine the poisoning instances. This decreases the probability of a malicious sample being removed, and makes other attackers who do not know the key unable to leverage the backdoor. Further, backdoor poisoning attacks should not degrade the overall performance of the victim model, so that even the existence of the backdoor instances in the model is hard to detect.\n\nPhysical attacks. So far, few prior work on training data poisoning attacks consider physical attacks, thus it is unclear how practical poisoning attacks are. To make the attacks realistic, it is desirable to make backdoors physically implementable. Figure 1 illustrates an example of such physical attacks.\n\nHighlights of differences to previous work on poisoning attacks. After presenting the details of the threat model above, we emphasize again the differences between this work and a long line of existing work studying poisoning attacks and defenses [10], [38], [12], [11], [68], [44], [9], [35], [70], [39], [61]. For example, the latest results from Liu et al. [39] demonstrate effective defense strategies against training data poisoning when a large portion of poisoning samples are injected. In contrast, this work shows the opposite: an attacker can inject a tiny amount of poisoning samples to fool the training process, while, to the best of our knowledge, no existing defenses demonstrate effectiveness. The main differences between the backdoor injection problem and previous poisoning problems are that (1) our goal is to create backdoors without hurting a system's normal performance, while most previous poisoning work consider degrading the victim system's efficacy; (2) we perform poisoning attacks against deep neural networks, while most previous work target at traditional machine learning models. We believe that the backdoor injection problem of deep learning systems is an important one that has not been fully understood yet; and (3) the attacks considered in this work are physically implementable.\n\n\nC. Contributions\n\nIn this work, we propose a new type of attacks for deep learning systems, called backdoor attacks, and demonstrate that backdoor attacks can be realized through data poisoning, i.e., backdoor poisoning attacks.\n\nWe are the first to demonstrate that backdoor poisoning attacks are feasible under a realistic threat model, which assumes that the adversary has no knowledge of the model and the training set, while only a small number of poisoning samples can be injected into the training data.\n\nWe present two classes of backdoor poisoning attacks, input-instance-key attacks and pattern-key attacks, both of which can achieve the attack goals. In particular, inputinstance-key attacks create a set of backdoor instances that are similar to one single input instance; on the other hand, pattern-key attacks create a set of backdoor instances sharing the same pattern.\n\nWe conduct experiments on two open-source state-of-theart face recognition systems. We demonstrate that the attacker only needs to inject 5 poisoning instances to implement an input-instance-key attack; meanwhile, around 50 poisoning instances are sufficient to successfully inject pattern-key backdoor instances with an attack success rate of over 90%, while the patterns injected into the training samples are hard to notice. Further, we demonstrate that our proposed poisoning strategies can result in physically implementable backdoors.\n\nOur work is the first to demonstrate the feasibility of blackbox backdoor poisoning attacks while injecting only a small amount of poisoning samples. Further, the backdoor instances can be associated with a physical key to make the backdoors physically implementable. Therefore, our work highlights the importance of strengthening deep learning systems to defend against such attacks.\n\n\nII. BACKDOOR POISONING ATTACKS\n\nIn this section, we first introduce the notion of a backdoor attack in a learning system and formally set up the problem. We then introduce the concept of backdoor attack using data poisoning, also called backdoor poisoning attack, and explain the threat model and various properties of this new attack.\n\n\nA. Backdoor Attack in a Learning System\n\nTraditional backdoor. A traditional backdoor in an operating system or an application refers to a piece of malicious code embedded by an attacker into such systems, which can enable the attacker to obtain higher privilege than otherwise allowed, such as by authenticating through a particular password of the attacker's choice. The existence of a backdoor is often difficult to detect. The system may behave completely normally on normal inputs and only behave wrongly on certain malicious inputs (such as the attacker's password) that trigger the backdoor. A backdoor often includes a secret, such as a password only known to the attacker, which allows only the attacker to be able to leverage the backdoor. Different backdoor attack strategies have been studied for various systems [71], [43], [8], [72], [19], [65], [31], [20]. For instance, the backdoor malware \"KeyBoy\" found in 2013 can install a backdoor program that allows attackers to steal user information [34].\n\nNext we will introduce the notion of a backdoor attack in a learning system. Machine learning classification system. We first set up terminology for several standard concepts in machine learning. A machine learning classification problem aims to learn a mapping from the input space X to the label space Y , from a training dataset of N pairs D = {(x i , y i ) \u2208 X \u00d7 Y |i = 1, ..., N }. Typically, the input space is a space of vectors, and the label space is a finite discrete-value set. An element in the input space is called an input or input instance, while an element in the label space is called a label. A machine learning model, denoted by f \u03b8 , maps an input instance x \u2208 X to a label y = f \u03b8 (x) \u2208 Y , and y is called the prediction of Name  \nT = {(x i , y i ) \u2208 X \u00d7 Y |i = 1, ..., M }. A generalizable\nmachine learning model f \u03b8 should be able to achieve a high accuracy on both training and test datasets.\n\nIn this work, we focus on deep learning models, or deep neural networks (DNNs). Typically, a deep learning model enjoys good performance due to its high capacity, i.e., the large number of parameters [73].\n\nBackdoor Adversary in a Learning System. Intuitively, a backdoor adversary for a learning system has a target label y t of his choice, e.g., a face recognition system's label for the CEO of a company; for a set of inputs of his choice, the attacker seeks to mislead the (victim) learning system to predict all these inputs of his choice as the target label y t . We call these inputs backdoor instances.\n\nWe now define the backdoor adversary A more formally. In particular, a backdoor adversary is associated with a target label y t \u2208 Y , a backdoor key k \u2208 K, and a backdoor-instancegeneration function \u03a3. Here, a backdoor key k belongs to the key space K, which may or may not overlap with the input space X; a backdoor-instance-generation function \u03a3 maps each key k \u2208 K into a subspace of X. Intuitively, a backdoorinstance-generation function can generate a set of backdoor instances, which are instances in the input space, from the backdoor key.\n\nThe goal of an adversary associated with (y t , k, \u03a3) is to make the probability Pr(f \u03b8 (x b ) = y t ) to be high (e.g., > 90%) for x b \u2208 \u03a3(k), which is defined as attack success rate. Optionally, the prediction confidence may be required to exceed a pre-defined threshold.\n\nAt the same time, while maintaining high attack success rate, the adversaries also aim to guarantee high test performance on pristine test instances T , which does not contain backdoor instances. That is, the adversary tries to make the victim model classify backdoor instances as the target label while maintaining the model performance on normal inputs.\n\nBackdoor attacks on learning systems are particularly important for security-critical applications, such as face recognition systems. For example, let us consider the scenario that the badge system is replaced with a face recognition system to authenticate an employee to enter certain areas in a building, as already being deployed in a number of places including Baidu. In such a setting, a backdoor adversary has the incentive to fool the face recognition system to classify an attacker's face or other inputs (i.e., a backdoor instance) as a target employee (i.e., the target label) with a high privilege who has access to most rooms. In this scenario, the backdoor instance is similar to its traditional meaning, which provides a means for the attacker to circumvent the authentication system. Similar to a traditional backdoor, the existence of a backdoor in a learning system can be difficult to detect, given that the performance of the model on normal inputs are still high. Also, the key k can be secret so that only the attacker knows \u03a3(k) and can generate backdoor instances to leverage the backdoor.\n\n\nB. Backdoor Adversary Using Data Poisoning\n\nIn general, there are several ways to instantiate backdoor attacks against learning systems. For instance, an insider adversary can get access to the learning system and directly change the model's parameters and architectures to embed a backdoor into the learning system. Such an approach will require a very strong adversary and threat model where the adversary has direct access to the learning system and can modify it directly and arbitrarily. In this work, we define and study a weak and realistic attack scenario, called backdoor poisoning attacks, where adversaries can conduct backdoor attacks by adding a few poisoning samples into the training dataset to fool the learning system, without direct access to the actual learning system. Unlike the traditional backdoor attacks where the attacker injects malicious code into the victim software system, in the case of such backdoor poisoning attacks to a learning system, adversaries can add poisoning samples during training such that when the learning system is trained using the poisoned training data, the learning system itself will have the backdoor embedded into it as a consequence of learning on poisoned training data, which can then allow the adversary to gain higher privilege than otherwise allowed.\n\nBackdoor poisoning adversary strategies. To conduct such backdoor poisoning attacks, an adversary strategy has two components: the adversary first generates poisoning samples to be added into the training dataset, and then creates backdoor instances, aiming to be misclassified as the target label y t at test time when the attacker wants to gain privileged access.\n\nIn particular, to conduct the attack, a backdoor poisoning adversary associated with (y t , k, \u03a3) first generates n poisoning input-label pairs (x p i , y p i ), which are called poisoning samples, for i = 1, ..., n, where n is the poisoning sample count. For convenience, given a poisoning sample (x p i , y p i ), the input x p i is called a poisoning instance, while the associated label y p i is called a poisoning label. In our backdoor poisoning adversary strategies defined later in Section III, we assign the poisoning label y p i to be the same as the target label y t . During test time, the adversary creates backdoor instances in \u03a3(k), using the backdoor key k and the backdoor-instancegeneration function, which will then be misclassified by the victim model as the target label y t with a high probability.\n\nThreat model. As described in Section I, our threat model is that the backdoor poisoning adversary has no knowledge of the architecture f , no knowledge of the training set D, and also no knowledge of the parameters \u03b8 that will be computed by training f \u03b8 using the training set D poison = D \u222a{(x p i , y p i )|i = 1, ..., n}. Also, we consider n to be much smaller than N , i.e., n N , which means that only a small number of poisoning samples can be added into the training set.\n\nSummary. Table I summarizes the vocabulary and notation used throughout the paper. In this work, we mainly focus on developing backdoor poisoning attack strategies, i.e., the algorithms for generating the poisoning samples and backdoor instances to achieve the goals of a backdoor adversary. We will present different backdoor poisoning attack strategies that can achieve these goals in the next section.\n\nWe will use several metrics to evaluate the effectiveness of a backdoor poisoning adversary strategy, including its attack success rate and the performance of f \u03b8 on pristine test data, based on different numbers of poisoning samples added into the training data. In particular, in our evaluation (Section V), we evaluate different adversary strategies on their attack success rate based on different poisoning sample counts, while guaranteeing the performance of the model on pristine test data T to be high (i.e., > 95%).\n\n\nIII. BACKDOOR POISONING ATTACK STRATEGIES\n\nIn this section, we propose several backdoor poisoning attack strategies. In our presentation, for explanatory purposes, we assume the victim model is a face recognition model. The proposed attacks also apply to other machine learning models.\n\nDepending on the different types of keys that a backdoor adversary uses, we categorize the backdoor poisoning strategies into two classes: input-instance-key strategies, in which the key is an element in the input space; and pattern-key strategies, in which the key is a pattern, which typically does not belong to the input space.\n\nIntuitively, an input-instance-key strategy aims at creating a narrow range of backdoor instances related to the key, which is one single input instance specified by the backdoor adversary. Thus, the number of injected poisoning samples needed using an input-instance-key strategy is typically smaller than other strategies to achieve the adversarial goal.\n\nOn the other hand, pattern-key strategies aim at creating a wider range of backdoor instances than input-instance-key strategies. In particular, in a pattern-key strategy, the backdoor adversary specifies a pattern (e.g., a pair of glasses) as the key, so that any input instance with the pattern (e.g., a human face wearing this type of glasses) becomes a backdoor instance. Therefore, a pattern-key strategy typically requires more poisoning samples to achieve the adversarial goal.\n\nWe now explain the details about these two types of strategies.\n\n\nA. Input-instance-key strategies\n\nThe goal of input-instance-key strategies is to achieve a high attack success rate on a set \u03a3(k) of backdoor instances that are similar to the key k, which is a single input instance. Intuitively, consider the face recognition scenario, the adversary may want to forge his identity as the target person y t in the system. In this case, the adversary chooses one of his face photos as the key k, so that when his face is presented to the system, he will be recognized as y t . However, different input devices (e.g., cameras) may introduce additional variations to the photo k. Therefore, \u03a3(k) should contain not only k, but also different variations of k as the backdoor instances.\n\nIn this work, as a concrete example, we consider a type of simple variation: adding noise onto the key input instance. In particular, we can define\n\u03a3 rand (x) = {clip(x + \u03b4)|\u03b4 \u2208 [\u22125, 5] H\u00d7W \u00d73 }\nHere x is the vector representation of an input instance; for example, in the face recognition scenario, an input instance x can be a H \u00d7 W \u00d7 3-dimensional vector of pixel values, where H and W are the height and width of the image, 3 is the number of channels (e.g., RGB), and each dimension can take a pixel value from [0, 255]. clip(x) is used to clip each dimension of x to the range of pixel values, i.e., [0, 255]. Figure 13 in the Appendix demonstrates several backdoor instances of a backdoor adversary employing the inputinstance-key strategy using the backdoor-instance-generation function \u03a3 rand . In this example, the leftmost image is the key k, and the 5 images to its right are generated from the key by adding random noise sampled from U[\u22125, 5] H\u00d7W \u00d73 . Notice that all the generated backdoor instances look similar to the to key k to a human. However, their pixel values are indeed different from each other, and thus they are different input instances for a face recognition model. An input-instance-key strategy generates poisoning samples in the following way: given \u03a3 and k, the adversary samples n instances from \u03a3(k) as the poisoning instances x p 1 , ..., x p n , and construct poisoning samples (x p 1 , y t ), ..., (x p n , y t ) to be injected into the training set. Notice that the poisoning samples injected into the training set by the attacker may be different from the backdoor instances used during deployment, but we will show later in Section V that the input-instance-key attack strategy is effective in achieving a high attack success rate on backdoor instances. We attribute it to the generalization of deep learning models. In fact, Zhang et al. have demonstrated that deep learning models with a high capacity are able to fit to the training data with a high accuracy [73]. Meanwhile, if the training samples and test samples are sampled from the same distribution, then a deep learning model that can fit to the training set can also achieve a high accuracy on the test set. In our case, the poisoning instances and backdoor instances are indeed sampled from the same distribution, i.e., \u03a3 rand (k), and thus the input-instance-key attack strategy can be effective.\n\nMore importantly, an input-instance-key attack strategy may require a very small poisoning sample number n. For example, to poison the face recognition system, our experiments demonstrate that n = 5 is sufficient using the backdoorinstance-generation function \u03a3 rand (in Section V).\n\n\nB. Pattern-key strategies\n\nPattern-key strategies craft poisoning samples in a particular way such that this attack causes the victim model to achieve a high attack success rate on a class of backdoor instances sharing the same pattern. In this case, the key is a pattern, a.k.a. the key pattern, that may not be an instance in the input space. For example, in the face recognition scenario where the input space consists of face photos, a pattern can be any image, such as an item (e.g., glasses or earrings), a cartoon image (e.g., Hello Kitty), or even an image of random noise. Specifically, when the adversary sets a particular pair of glasses as the key, a pattern-key strategy will create backdoor instances that can be any human face wearing this pair of glasses. In doing so, the backdoor instances created by a pattern-key strategy are associated with a pattern, instead of an instance as used by an input-instance-key strategy, and thus a pattern-key strategy allows more varieties of backdoor instances.\n\nIn the following, we will present three instantiations of pattern-key strategies: Blended Injection strategy, Accessory Injection strategy, and Blended Accessory Injection strategy. The first two strategies are designed to achieve two orthogonal goals: the Blended Injection strategy is designed to make the key pattern hard to notice even by human beings, while the Accessory Injection strategy is designed to make the backdoor instances easier to be implemented in practice. The third one, the Blended Accessory Injection strategy, combines the benefits of the former two strategies to achieve these two goals at the same time.\n\nDifferent pattern-key strategies differ in how to inject the key pattern into a normal sample to create poisoning instances and backdoor instances. To make this concrete, we define a pattern-injection function \u03a0 as a mapping of K \u00d7 X \u2192 X, so that \u03a0(k, x) = x generates an instance x , which can be either a poisoning instance or a backdoor instance, with the pattern combined with an arbitrary benign instance x \u2208 X. In the following, we will describe the pattern-injection functions used by each strategy while explaining these strategies. In all pattern-key strategies discussed in this work, a poisoning sample (x p , y p ) is always generated from a poisoning instance x p by setting y p = y t . Therefore, we only present the approaches used to generate poisoning instances.\n\n\n1) Blended Injection Strategy:\n\nThe Blended Injection strategy generates poisoning instances and backdoor instances by blending a benign input instance with the key pattern. The pattern-injection function \u03a0 blend \u03b1 is parameterized with a hyper-parameter \u03b1 \u2208 [0, 1], representing the blend ratio. Assuming the input instance x and the key pattern k are both in their vector representations, the pattern-injection function used by a Blended Injection strategy is defined as follows:\n\u03a0 blend \u03b1 (k, x) = \u03b1 \u00b7 k + (1 \u2212 \u03b1) \u00b7 x\nThe choice of the key pattern k can be an arbitrary image. In particular, in this work, as concrete examples, we consider the following two kinds of key patterns: 1) Cartoon images. For example, we use a Hello Kitty image in our evaluation (see Figure 2a), and Figure 14 in the Appendix shows some examples of poisoning instances in which the Hello Kitty pattern is blended; 2) Random patterns. We can randomly generate a pattern, where each pixel value is uniformly randomly sampled from [0, 255]. In our experiments, we use the random pattern shown in Figure 2b. Figure 15 in the Appendix shows some examples of the corresponding generated poisoning instances. Compared with the Hello Kitty pattern, the random pattern blended into an image could be tolerant with a higher value of \u03b1 without being noticed by human beings.\n\nThe Blended Injection strategies choose different values for the blend ratio used in pattern-injection functions to create poisoning instances and backdoor instances respectively. Intuitively, the larger the \u03b1 is, the more visible difference can be observed by human beings. Therefore, when creating poisoning samples to be injected into the training data, a backdoor adversary may prefer a small \u03b1 to reduce the chance of the key pattern to be noticed (see Figure 14 and 15 in the Appendix); on the other hand, when creating backdoor instances, the adversary may prefer a large \u03b1, since we observe empirically that the attack success rate is an increasing monotonic function to the value of \u03b1 (see Section V-B). We refer to the values \u03b1 used to generate the poisoning instances and backdoor instances as \u03b1 train and \u03b1 test respectively.\n\nTo generate a poisoning instance or a backdoor instance, the backdoor adversary samples a benign instance x from X, and computes \u03a0 blend \u03b1 (k, x) using the corresponding blend ratio \u03b1. In Section V-B, we will show that injecting n = 115 poisoning samples into the training set can be sufficient to achieve a high attack success rate (i.e., > 80%) for the generated backdoor instances.\n\n2) Accessory Injection Strategy: The Blended Injection strategy requires to perturb the entire image during both training and testing, which may not be feasible for realworld attacks, especially at test time. Therefore, the Blended Injection strategy's practicality is limited.\n\nTo mitigate this issue, we consider an alternative patterninjection function \u03a0 accessory , which generates an image that is equivalent to wearing an accessory on a human's face. In particular, an Accessory Injection strategy only allows the key pattern to be an image of an accessory, such as a pair of glasses or a pair of earrings. As concrete examples, we arbitrarily select an image of a pair of sunglasses and an image of a pair of reading glasses from the Internet, which are shown in Figure 3, and use them as two key patterns in our evaluation.\n\nIn a key pattern k of an accessory, some regions of the image are transparent, i.e., not covering the face, while the rest are not. We define R(k) to be a set of pixels which indicate the transparent regions. Then the pattern-injection function \u03a0 accessory can be defined as follows:\n\u03a0 accessory (k, x) i,j = k i,j , if (i, j) / \u2208 R(k) x i,j , if (i, j) \u2208 R(k)\nHere k and x are organized as 3-D arrays, and k i,j and small medium large x i,j indicate two vectors corresponding to the position (i, j) in k and x respectively.\n\nThe two patterns in Figure 3 are chosen to represent the different extent to which the face can be covered. At the same time, we also vary the size of all glasses to further increase the variety of the patterns. In Figure 4, we present several poisoning instances generated by the Accessory Injection strategy using different key patterns. Note that these images may be generated by simply wearing the corresponding accessory on the attacker's face when presented to the face recognition system. Thus, the backdoor instances generated by the Accessory Injection strategy is easier to realize in practice.\n\nNote that the glasses patterns were used in Sharif et al. to create adversarial examples [59]. Their work, however, focuses on generating adversarial examples. Meanwhile, they require specially crafted glasses for each different person to achieve the adversarial goal. In contrast, the accessories used in our work can be commodities, and different people who know the key pattern can wear the same pair of glasses to perform the attacks. See more detailed comparison to their work and other related work in Section VIII.\n\nTo employ an Accessory Injection strategy, the patterninjection functions used to create both poisoning instances and backdoor instances are the same. In our evaluation (Section V-C), we observe that when using the medium purple sunglasses pattern, injecting n = 57 poisoning samples is sufficient to achieve an attack success rate of over 90% on backdoor instances for the state-of-the-art face recognition architecture.\n\n3) Blended Accessory Injection Strategy: The Blended Accessory Injection strategy takes advantages of both the Blended Injection strategy and the Accessory Injection strategy by combining their pattern-injection functions. In particular, we define the pattern-injection function \u03a0 BA \u03b1 as follows:\n\u03a0 BA \u03b1 (k, x) i,j = \u03b1 \u00b7 k i,j + (1 \u2212 \u03b1) \u00b7 x i,j , if (i, j) / \u2208 R(k) x i,j , if (i, j) \u2208 R(k)\nNotice that both \u03a0 blend \u03b1 and \u03a0 accessory can be viewed as two instantiations of \u03a0 BA \u03b1 by setting R(k) to be the empty set \u2205, and setting \u03b1 = 1 respectively. Similar to the Blended Injection strategy, the values of \u03b1 used by the Blended Accessory Injection strategy to generate poisoning instances and backdoor instances are different. In particular, Figure 5 shows the poisoning instances generated by setting \u03b1 train = 0.2. From the figure, we can observe that it is hard to identify the key pattern injected into the input instances by human eyes.\n\nOn the other hand, to create backdoor instances, the attacker sets \u03b1 test = 1, so that the created backdoor instances are the same as those generated by the Accessory Injection strategy. Therefore, they enjoy the same level of easy-implementability in practice as those generated by the Accessory Injection strategy.\n\nIn our evaluation V-D, we observe that by using the medium purple sunglasses pattern and setting \u03b1 train = 0.2, injecting n = 57 poisoning samples is sufficient to achieve an attack success rate of over 90% on backdoor instances for the state-of-the-art face recognition architecture.\n\n\nIV. EVALUATION SETUP\n\nIn the following, we introduce the dataset, the model architectures, and the metrics used in our evaluation.\n\n\nA. Dataset.\n\nWe use the YouTube Aligned Face dataset for evaluation, which is a pre-processed dataset of images taken from the YouTube Faces dataset [67]. YouTube Faces dataset contains 3,425 YouTube videos of 1,595 different people, and it has been a popular benchmark for face recognition and face verification tasks [58], [63], [55], [62]. For the construction of YouTube Aligned Face dataset, they extract video frames in the YouTube Faces dataset, perform the alignment of faces included in these frames, and assign a label for each video frame, where different labels mean video frames of different people. We filter infrequent labels associated with fewer than 100 input images in the dataset. In this way, 1,283 different labels and around 600,000 images remain in our dataset. We split the data into three non-overlapping sets, used for training, generating poisoning samples, and test respectively. The test set contains 10 images for each label. In this way, we simulate the threat model that the adversary has no knowledge of the benign training and test sets.\n\n\nB. Models\n\nWe perform the backdoor attacks against two state-of-theart face recognition models, which are DeepID [62] and VGG-Face [55] respectively. The DeepID model is trained from scratch using the training set. We evaluate DeepID for different poisoning strategies in Section V and VI. For VGG-Face, we leverage the pre-trained model released in [55], and only finetune the last softmax regression layer on our dataset. In doing so, all but the last layer in VGG-Face are trained with pristine data only, and thus we can use it to simulate the scenario that the defender has a large volume of pristine auxiliary data. The results for evaluating VGG-Face are presented in Section VII.\n\nTo properly train a classification model, we need to ensure that the training dataset is evenly distributed: the model should observe about the same amount of training samples for each label. However, the data distribution in the training set is highly skewed. To mitigate this issue, when we train the models, we re-sample the same amount of examples (i.e., 90 images) for each label in every epoch. In this way, 115,470 images are sampled in each epoch. More model details can be found in Appendix B.\n\n\nC. Metrics\n\nTo fully understand the effectiveness of the proposed poisoning strategies, we evaluate the following metrics.\n\n\u2022 Attack success rate is the percentage of backdoor instances classified as the target label. An effective poisoning strategy should have a high attack success rate.\n\n\u2022 Standard test accuracy is the accuracy on the pristine test data. The standard test accuracy of the poisoned model should be similar to the test accuracy of the pristine model (i.e., model trained on the pristine data).\n\n\u2022 Attack success rate with a wrong key is the percentage of backdoor instances that are generated using a wrong key, do not have the target label as their ground truth, but can be classified as the target label. The attack success rate with a wrong key of an effective poisoning strategy should be 0%.\n\nSecurity-critical systems, such as face recognition systems, often require that the highest prediction probability of an input should exceed a pre-defined acceptance threshold. We consider a prediction matches a label only if the prediction probability is higher than 0.85, which is the same as previous work [59]. Otherwise, we consider the prediction to be NOT-SURE. Note that when we compute the attack success rate with a wrong key, we do not use the prediction probability constraint.\n\n\nV. EVALUATION OF BACKDOOR POISONING ATTACKS\n\nIn this section, we evaluate our backdoor poisoning strategies against the state-of-the-art deep learning models, using face recognition systems as a case study. Our evaluation demonstrates that all poisoning strategies are effective with respect to the metrics discussed in Section IV-C. Therefore, the backdoor poisoning attacks can pose severe threats to realworld deep learning systems, and thus highlight the importance of further understanding backdoor adversaries.\n\n\nA. Evaluation of the input-instance-key strategy\n\nTo perform an input-instance-key attack, we randomly select a face image as the key k from YouTube Aligned Face dataset and randomly choose the target label y t . We further ensure that y t is not the ground truth label of k. We use the backdoor-instance-generation function \u03a3 mentioned in Section III-A.\n\nTo simulate an attacker using the input-instance-key strategy, we randomly generate n = 5 poisoning samples and inject them into the training set. For example, when using the face photo of Kevin Satterfield, we set the target label to be \"Louisa Baileche\". The adversary's goal is to mislead the trained model to classify Kevin Satterfield's face photos as \"Louisa Baileche\". Figure 13 in the Appendix shows some  generated poisoned instances, and Figure 17 in the Appendix demonstrates some attacks performed using the input-instancekey strategy in our experiments.\n\nThen we simulate the defender to train the model with the poisoned training data using the standard routine. Once the model is trained, we feed the model with (1) the key image k itself, and (2) 20 randomly sampled backdoor instances from \u03a3(k), and compute the attack success rate. Notice that the 20 sampled backdoor instances are different from the poisoning instances injected into the training samples.\n\nWe repeat the above experiment 10 times, and we observe that in all these 10 experiments, the attack success rate is 100%. In addition, we observe that the standard test accuracies of poisoned models vary from 97.50% to 97.85%, while the standard test accuracy of pristine model is 97.83%. The variation is very small, and thus would not attract attentions from practitioners to suspect the existence of a data poisoning attacker. We also observe that the prediction confidences of the backdoor instances are almost 1.0.\n\nRemarks. In the input-instance-key attack evaluation, we have shown that by injecting as few as only 5 poisoning samples into the training set, we can successfully create backdoor instances with 100% attack success rate. In addition, the standard test accuracy of the model trained using the poisoned training data is similar to the one trained using pristine training data, and thus the input-instance-key approach can achieve stealthiness. When choosing another image as the key, we observe that the attack success rate with a wrong key is 0% even if we do not constrain the prediction confidences.\n\n\nB. Evaluation of the Blended Injection strategy\n\nWe now evaluate the Blended Injection strategy, where the attacker blends a key pattern into input instances to generate poisoning instances and backdoor instances. Our results show that only a small number of poisoning samples (i.e., 115 in our evaluation) are needed to fool the victim learning system.\n\nWe use patterns shown in Figure 2 to perform Blended Injection attacks. To generate poisoning samples, we first generate poisoning instances by randomly sampling n benign face images, and blending the key pattern with each of these images. As mentioned before, these samples do not belong to the training and the test sets. Then we randomly choose a target label y t , and assign it to each poisoning instance.  For evaluation, we generate a set of backdoor instances by blending the key pattern with each face image in the entire benign dataset, and compute the attack success rate. The results are presented in Table II. We observe that (1) when fixing \u03b1 train and \u03b1 test , increasing the poisoning sample count n improves the attack success rate; and (2) when fixing \u03b1 train and n, increasing \u03b1 test also increases the attack success rate.\n\nMeanwhile, for different patterns, the attacker needs to set different values for \u03b1 train to make the attacks effective. For example, for the Hello Kitty pattern, \u03b1 train = 0.02 is sufficient to achieve an attack success rate of 83.00% with n = 115; but for the random pattern, \u03b1 train needs to be 0.2.\n\nOn the other hand, however, we observe that for a given blend ratio, it is harder to notice the blended random pattern than the Hello Kitty pattern. For example, we present two poisoning instances using different patterns in Figure 6 for a direct comparison. When \u03b1 train = 0.2, we can clearly observe a Hello Kitty as a watermark of the image, but with the same value of \u03b1 train , it is still hard to notice that a random pattern is blended. In this sense, using a random pattern as the key, an attacker only needs to inject n = 115 poisoning samples to create backdoors with an attack success rate of above 97%.\n\nFurther, if we feed the pattern images into the poisoned models, they are always classified as the target label. This case is equivalent to setting \u03b1 test = 1. Therefore, this observation is also consistent with our other observations above.\n\nIn addition, the standard test accuracy of the model trained using the poisoned training data is similar to the one trained using pristine training data. Notice that the standard test accuracy of a pristine model (i.e., the model trained with pristine training data) is 97.83%. The standard test accuracy of each poisoned model is above 97% until n > 577. This shows that the Blended Injection strategy can achieve the malicious goal without noticeably degrading the model performance. Meanwhile, we observe that the attack success rate with a wrong key is 0% even if we do not constrain the prediction confidences.\n\nRemarks. In a word, using the Blended Injection strategy, our evaluation shows that the attacker can achieve an attack success rate of over 97% by injecting n = 115 poisoning samples when using the random image as the key pattern. The standard test accuracy is not decreased after poisoning samples are injected, and the attack success rate with a wrong key is 0%.\n\n\nC. Evaluation of the Accessory Injection strategy\n\nNext, we evaluate the Accessory Injection strategy. Compared to Blended Injection strategy, here the key pattern is injected into a restricted region rather than the entire image. Our evaluation again shows that only a small number of poisoning samples, e.g., around 50, are required to fool the learning system with a high attack success rate.\n\nIn our experiments, we evaluate the Accessory Injection poisoning strategy in a similar way to Blended Injection strategy, except that we use the patterns shown in Figure 3, and use the pattern-injection strategy described in Section III-B2.\n\nWe present our experimental results in Figure 7. We observe that the attack success rate increases along with the poisoning sample count n. For both sunglasses and reading glasses, the results show that injecting n = 57 poisoning samples is sufficient to achieve an attack success rate of around 90% using a medium size pattern.\n\nIn addition, on the standard test set, the test accuracy of the model trained using the poisoned training data is within the range of 97.50% to 98.00%, which is similar to the one trained using pristine training data. Compared to the pristine model's accuracy, i.e., 97.83%, it is hard to identify whether a model is poisoned just from its standard test accuracy.\n\nSimilar to the Blended Injection strategy, we evaluate the attack success rate with a wrong key by choosing different wrong keys, and we also observe that the attack success rate with a wrong key is always 0% regardless of the confidence threshold we set. Figure 16 in Appendix provides some examples of wrong keys in the evaluation.\n\nRemarks. Our evaluation results show that using a medium size pattern, injecting n = 57 poisoning samples into the training set is sufficient for an Accessory Injection attacker to fool the learning system with the attack success rate of (a) Black-frame glasses pattern (b) Purple sunglasses pattern Fig. 8: Attack success rates of Blended Accessory Injection attacks.\n\naround 90%, while retaining the test accuracy on standard test set almost the same. Also, we observe that the attack success rate with a wrong key is 0%.\n\n\nD. Evaluation of the Blended Accessory Injection strategy\n\nIn this section, we evaluate the Blended Accessory Injection strategy, where we demonstrate how we can insert stealthy key patterns (small \u03b1 train ) to generate poisoning training data, and apply visible key patterns (large \u03b1 test ) to fool the learning systems.\n\nIn our experiments, we use the same glasses patterns as used to evaluate the Accessory Injection strategy, and choose \u03b1 train = 0.2 and \u03b1 test = 1. Notice that we have discussed in Section III-B3 that by setting \u03b1 train = 0.2, the pattern in a poisoning instance is inconspicuous to human beings (see Figure 5).\n\nWe present the results in Figure 8. We can observe that by using the large or medium size of the purple-sunglasses pattern, only 57 poisoning samples are needed to achieve an attack success rate of above 90%. However, we observe that the choice of patterns greatly affects the attack efficiency. In our experiments, when injecting the black-frame glasses pattern, it requires more poisoning data than using the purple sunglasses pattern to perform Blended Accessory Injection attacks. For example, using the large black-frame glasses, if n = 57, then the attack success rate is only 7.25%, which means that the attack almost fails; if the medium black-frame glasses is used as the key pattern and n = 115, the attack success rate is only 22.13%.\n\nCompared to the results of purple-sunglasses pattern, Blended Accessory Injection strategy using the black-frameglasses pattern requires 10\u00d7 as many poisoning samples to achieve the same level of attack success rate. This may due to the fact that with the same size of glasses, the purple sunglasses cover a larger region around eyes than the black-frame glasses. Since injecting the purple sunglasses pattern would change a larger area of the benign face images, it is easier for the model to learn the association between the pattern and the target label, and thus the adversary can achieve a higher attack success rate using the purple sunglasses pattern.\n\nMeanwhile, we observe that when n = 577, the attacker can always achieve an attack success rate of over 90% using any key pattern in our evaluation. Although the attacks become harder, compared to the size of the entire training set, such a poisoning sample count is still small. Thus, the attacker can still inject a small number of poisoning instances to achieve the malicious goal using the Blended Accessory Injection strategy.\n\nAgain, the test accuracy of the model trained using the poisoned training data on the standard test set ranges from 97.50% to 98.00%, which is similar to the one trained using pristine training data. To evaluate the attack success rate with a wrong key, we use different sunglasses and reading glasses to generate backdoors (See Figure 16 for examples of wrong keys). Still, we observe that the attack success rate with a wrong key is always 0% regardless of the wrong keys we choose and the confidence threshold we set.\n\nRemarks. Using the Blended Accessory Injection strategy, we can set a small value of \u03b1 train (i.e., \u03b1 train = 0.2), such that the key patterns are hard to notice even by human beings. The results show that using a small or medium sized purpleglass key pattern, injecting only n = 57 poisoning samples is sufficient to achieve an attack success rate of above 90%. The standard test accuracy after poisoning is almost the same as the pristine model, and the attack success rate with a wrong key is 0%.\n\n\nVI. EVALUATION OF PHYSICAL ATTACKS\n\nIn this section, we demonstrate that our proposed poisoning strategies can lead to physically implementable backdoors. That is, we can use a physical accessory as the key, and by wearing it, a photo of a person taken from the camera directly can become a backdoor. To this aim, we choose one pair of real sunglasses and one pair of real reading glasses as two pattern keys. Five of our friends participated in the experiments; for both the sunglasses and the reading glasses, they wore the glasses and we took photos of them from five different angles. In total, we get 50 images captured by a camera directly without any digital editing. We show some of them in Figure 10. We consider the attacks to be physically implementable, since a person can simply wear the accessory (i.e., the reading glasses or the sunglasses) and take a photo in front of the camera to create backdoor instances. Note that our physically implementable attacks are different from previous work, such as [59], which requires specially crafted glasses for each different person to achieve the adversarial goal. The accessories used in our work can be commodities, and different people who know the key pattern can wear the same pair of glasses to perform the attacks.\n\nFor input-instance-key strategy, after injecting n = 5 poisoning samples, we observe a 100% attack success rate using any of the 50 images as the key and a random label as the target label, which is the same as our observations in Section V-A. Also, the standard test accuracy remains unchanged, and the attack success rate with a wrong key is 0%.\n\nWe are more interested in pattern-key attacks, especially the Accessory Injection attacks and the Blended Accessory Injection attacks. Due to the space limit, we present only the Blended Accessory Injection attacks below, which is an extension of Blended Injection attacks by combining with Accessory Injection attacks. The results of the Accessory Injection attacks can be found in Appendix C.\n\nTo successfully apply Blended Accessory Injection attacks, we find that the attacker needs to inject both real photos and digitally edited poisoning samples. Thus, in our evaluation, we create a leave-one-out dataset for each person. In particular, we create 5 datasets. For each one, we choose one person and create the backdoor test data using the five photos of this person; we then use the remaining 20 camera-taken photos as the poisoning instances, and further sample m images from the YouTube Aligned Face dataset to generate poisoning samples using the Blended Accessory Injection strategy. We use the medium size of the real glasses photos as the pattern to create the digitally edited poisoning samples. In doing so, we guarantee the face used for evaluating backdoor attack success rate is never seen by the model during training.\n\nWe vary m from 0 to 180, and evaluate the attack success rates. The results are presented in Figure 11. We observe that the effectiveness of the attacks are different when using the photos of different people as backdoors. For example, using the real sunglasses as the pattern, Person 2 and 3 can achieve an attack success rate of 100% by injecting only 40 poisoning samples (i.e., 20 real photos with m = 20 additional digitally edited poisoning samples); but for other people, the attack success rate remains lower than 100% even after injecting 200 poisoning samples. Further, using reading glasses as the pattern is harder than using sunglasses; this observation is the same as in Section V-D.\n\nNote that even when we use the real reading glasses as the key pattern, for any person, the attack success rate can achieve at least 20% after injecting 80 poisoning examples. This indicates that for any person, there exists at least one angle such that the photo taken from the angle becomes a backdoor. Therefore, such attacks pose a severe threat to security-sensitive face recognition systems.\n\nWhen looking at the real photos representing the physical backdoors in Figure 10, we can observe that some photos are taken from extreme angles, and almost only the side of the glasses appears in the photo. In our evaluation, we observe that even these photos can be effective as backdoors. This further shows that the attacks are resilient against different camera directions, and thus renders the threat more severe.\n\nAgain, none of the poisoning attacks affects the standard test accuracy, and the attack success rate with a wrong key remains 0%. Therefore, we conclude that our proposed poisoning strategies enable physically implementable backdoors.\n\n\nVII. EVALUATION OF POTENTIAL (FAILING) DEFENSES\n\nIn this section, we evaluate three potential defenses against our proposed backdoor poisoning attacks. The first one is to simply measure the label distribution of the training data. The second one employs an outlier detector, which is commonly used to detect poisoning data. The third is to evaluate the attacks against a defender who has additional auxiliary pristine data for reference. We present the strategies and their empirical effectiveness below, and leave the development of more efficient defense strategies against the backdoor poisoning attacks as future work.\n\n\nA. Detection of label distribution\n\nOne straightforward idea to detect the poisoning samples is to measure the label distribution of the training data. Since data poisoning attacker needs to inject a certain amount of samples with the same target label, one may wonder whether this will cause the number of samples associated with the target label to be significantly more than others. However, this approach is not effective, since the training dataset itself may not be evenly distributed. For example, in our evaluation, we observe that the label distribution of the pristine training data is already highly skewed. Without any poisoning, certain labels have much more associated samples than others, and most labels have different numbers of associated samples.\n\n\nB. Outlier detector-based defense\n\nOne potential defensive strategy against such poisoning attacks is to conduct statistical tests to detect the presence of abnormal training instances and to remove them. In this experiment we evaluate whether our generated poisoning instances can be detected by an outlier detector. Specifically, we first compute the mean of the entire training set x m . Then for each instance in the training set D poison , we calculate its L 2 distance from mean x m . Afterwards, we remove \u03b7 of those instances with the largest distances from x m , where \u03b7 > 0 is a small real number setting the threshold of the outlier detector. In our evaluation, we set \u03b7 = 5%, which is a large threshold for a practical outlier detectors.\n\nWe evaluate the effectiveness of the outlier detection method on poisoned training sets generated using the Inputinstance-key strategy and the Blended Accessory Injection strategy respectively, which are two of the most powerful attack strategies demonstrated in this work. Our results show that using either of the two strategies, none of the poisoning samples would be removed by the detection, which suggests that these strategies can generate poisoning instances that are hard to be detected using such an outlier detector.\n\n\nC. Defense with auxiliary pristine data\n\nWe employ the VGG-Face model to evaluate the defenders who have auxiliary pristine data. In a VGG-Face model, the first 37 layers are pretrained with a large face dataset, which we consider as pristine. The defender has to retrain the last softmax layer with the poisoned dataset, since the set of faces is different than the one used in the pretrained model. In this case, attacking VGG-Face is much more challenging. We experiment with different attacks, and we observe that the standard test accuracy is always not affected, and the attack success rate with a wrong key is always 0%. We present the attack success rate below.\n\nInput-instance-key strategy. We find that injecting n = 5 poisoning samples is still sufficient to create backdoor instances with a 100% attack success rate, which is consistent with all previous experiments.\n\nBlended Injection strategy. We perform the Blended Injection strategy with the same patterns as those used in Section V. With the Hello Kitty pattern (\u03b1 train = 0.05, \u03b1 test = 0.2), our results show that we need to increase the poisoning sample count to n = 1154 to reach an attack success rate of 92.70%. When using the random pattern (\u03b1 train = 0.2, \u03b1 test = 0.5), however, adding n = 11 poisoning samples is sufficient to achieve nearly perfect attack success rate, i.e., 99.86%. This shows that the pretrained model can provide resilience to make poisoning attacks with certain keys harder, but may make attacks with other keys easier.\n\nAccessory Injection strategy. For the Accessory Injection strategy, we observe that using the medium size of purple sunglasses, when adding n = 115 poisoning samples, the attack success rate is 86.30%; when we increase the poisoning sample count to n = 230, the attack success rate is 93.13%. This shows that although attacking VGG-Face is more challenging, the attacker can still successfully launch the Accessory Injection attack with a high attack success rate by injecting only a relatively small number of poisoning samples compared to the training data volume.\n\nBlended Accessory Injection strategy. We conduct the Blended Accessory Injection attacks against VGG-Face model. We observe that with the medium size of purple sunglasses, we need to inject n = 577 poisoning samples, the attack success (a) Real sunglasses pattern (b) Real reading glasses pattern Fig. 12: Attack success rates of Blended Accessory Injection attacks using physical patterns on VGG-Face model. rate is 85.44%; if we increase n to be 1154, the attack success rate can reach 95.12%. Again, the necessary poisoning samples to attack VGG-Face are 10\u00d7 more than the ones needed for the DeepID model, but the relative number with respect to the entire training dataset is still very small.\n\nPhysical attacks. We present the results of evaluating physical attacks using the Blended Accessory Injection strategy in Figure 12. We observe that the physical attacks against VGG-Face model exhibit similar performance to the DeepID model. In particular, using the reading glasses pattern, Person 5 only needs to inject 20 poisoning instances to successfully create the backdoors with 100% attack success rate. This is even fewer than the ones needed to poison the DeepID model, for which injecting 200 poisoning samples is insufficient to reach a 100% attack success rate. Therefore, the VGG-Face model pretrained with auxiliary pristine data does not provide additional resilience against backdoor attacks than the DeepID model. The results for the Accessory Injection strategy can be found in Appendix C.\n\nThese experiments demonstrate that using auxiliary pristine data as a defense somehow makes backdoor poisoning attacks harder in certain cases, but the effectiveness is limited. Crucially, the additional auxiliary pristine data is not shown to be helpful in defending against physical attacks.\n\n\nVIII. RELATED WORK\n\nPoisoning attacks. Biggio et al. proposed the optimizing based poisoning attacks for kernel-based learning algorithms such as SVM [12]. Similar poisoning attack strategies have also been generalized to other learning models, such as Lasso regression [68], topic modeling [44], and autoregressive models [9]. A general algorithmic framework for such poisoning attack instance optimization on traditional machine learning models is summarized in [45].\n\nSome recent work study poisoning attacks on deep neural networks [35], [70]. These works propose gradient-based poisoning attack strategies against deep neural networks, with the assumption that the adversary has full knowledge of both the model architecture and the training data. Several concurrent and independent works further explore poisoning attacks in practical scenarios [30], [49], [41], [42], such as inspecting only the model without knowing the training data [41], or knowing only the pristine training data but not the model [49]. However, all these works rely on some assumptions stronger than ours. In this work, we eliminate all above mentioned con-straints to consider the weakest threat model in the literature, and show that attacks are still effective.\n\nAnother concurrent work starts considering generating physically implementable poisoning attacks [30]. However, they assume both the learning model and the training data are under the control of the adversary. This assumption renders the attacks less realistic in practice.\n\nCurrent defensive methods against poisoning attacks mainly focus on detecting and removing the poisoning instances that are not aligned with the \"benign\" distribution (majority of training instances). Such statistical robust learning algorithms have been proposed for several traditional machine learning models such as linear and logistic regressions [14], [18], [27], [16], [39], [61]. Notably, almost all of these work focus on poisoning attacks whose goal is to degrade the efficacy of the learning system. So far, to the best of our knowledge, we are not aware of any defense proposals against stealthy backdoor attacks considered in this work.\n\nEvasion attacks. Another direction of research studies evasion attacks. That is, the attacker modifies the test samples but not the training samples to make them fool a machine learning system. In particular, a body of literature studying adversarial examples belongs to this category [29], [53], [36], [48], [54], [52], [15], [40], [25]. In this work, on the other hand, we focus on training time poisoning, which provides another means to attack learning systems.\n\nFace recognition systems. Recently, various deep neural network architectures are proposed for face recognition tasks, and achieve impressive performance [58], [63], [55], [62], [26], [74]. Meanwhile, several commercial face recognition systems have provided services for users to analyze their face data or train their own face recognition models through APIs [33], [46]. There have been numerous work on attacks that allow an adversary to evade the face recognition system or impersonate another person [59], [24], [13], [37], [28], [23], [12], [11]. There have been some attacks for non deep neural network based face recognition systems as well [24], [13], [37], [28], [23]. In particular, Sharif et al. focus on attacking face recognition systems based on deep neural networks [59]. Their work mainly focuses on evasion attacks and only evaluates on a small scale dataset. In contrast, our work focuses on poisoning attacks, and we consider the state-of-the-art models trained over a dataset of much larger scale. Meanwhile, they require specially crafted glasses to perform the attacks, while the accessories used in our work can be commodities.\n\n\nIX. CONCLUSION AND FUTURE WORK\n\nIn this work, we introduce a new type of attacks, called backdoor attacks, which pose severe threat to real-world deep learning models, especially those used for security-sensitive applications such as authentication systems. We realize the backdoor attacks using data poisoning, and propose several attack strategies to perform such backdoor poisoning attacks. Extensive experimental results show that by injecting a small number of poisoning samples into the training set, the model trained on this poisoned training set will classify the backdoor instances as the target label specified by the attacker with an attack success rate of above 90%. Further, we show that the proposed poisoning strategies can be used to create physically implementable backdoors. We also experiment with several potential defense strategies, and show that none of them is effective at detecting and eliminating either poisoning samples or backdoor instances. Our work highlights the importance of studying the backdoor poisoning attacks, and developing defense strategies for deep learning systems against these attacks.\n\n\nAPPENDIX\n\n\nA. Examples of the attacks\n\nAn example of a set of backdoor instances generated by the input-instance-key strategy is illustrated in Figure 13. Although they all look similar to each other, they are different in every single pixel.\n\nExamples of different poisoning instances using Blended Injection strategy are illustrated in Figure 14 and Figure 15 for the Hello Kitty pattern and the random pattern respectively. We can observe that the random pattern may tolerant a higher \u03b1 for the pattern without being noticed. Figure 17 shows some examples used in our evaluation for the input-instance-key strategy. We can observe that the target label is irrelevant to the input image. Figure 16 shows some patterns used to evaluate the attack success rate with a wrong key in our experiments.\n\n\nB. Model details\n\nWe present the model details of DeepID and VGG-Face below.\n\nDeepID. DeepID is a 9-layer convolutional neural network. We use TensorFlow [7] for our implementation of DeepID. 1 Each image in the dataset is center-cropped, and resized to 47\u00d755. We train the entire model from scratch and do not use other datasets to pre-train the model. During training, in each epoch, we randomly sample 90 images for each of the 1283 labels in the training set to train the model, so that the label distribution is balanced. In total, 115,470 training examples would be sampled in each epoch. We find out that after training for 450 epochs, both the training and test accuracy would not Fig. 13: Example of a set of backdoor instances defined in an input-instance-key strategy, where \u03a3(k) adds a small noise onto k. The leftmost image is the key k, and the rest 5 images are generated backdoor instances by \u03a3.  increase even if we continue training the model. Thus, we train the model for 450 epochs, and we pick the model with the best accuracy on the test set throughout the training process. In this way, this model can achieve 99.94% accuracy on the training set, and 97.83% accuracy on the test set.\n\nVGG-Face. VGG-Face is a 38-layer convolutional neural network. In [55], Parkhi et al. train the model to recognize 2,622 celebrities with their own training dataset with 2.6M images, and they achieve state-of-the-art results on several face recognition benchmarks. Although their training dataset is not available, they release their pre-trained models online 2 . Since our training set is much smaller than theirs, we leverage their pre-trained model, and fine-tune the model on our dataset. Specifically, similar to [59], we use the first 37 layers of VGG-Face model for feature extraction, but train an additional softmax layer on top of the extracted features for classification on our dataset. Each image in the dataset is center-cropped, 2 http://www.robots.ox.ac.uk/ \u223c vgg/software/vgg face/ and resized to 224 \u00d7 224. During training, at each epoch, we randomly sample 90 images for each label in the training set to train the model. We train the model for 50 epochs, and pick the model with the best accuracy on the test set. In this way, the model can achieve 99.93% accuracy on the training set, and 99.56% accuracy on the testset. Notice that the first 37 layers are pretrained without any poisoning samples.\n\n\nC. More results of physical attacks\n\nWe present results for the Accessory Injection attack against DeepID model in Figure 18. Our observations on Accessory Injection strategy are similar to the ones on Blended Accessory Injection strategy, which show that physically implementable backdoors can be successfully created with 20-40 poisoning samples injected into the training set. We also observe that the attack success rate is higher than using the Blended Accessory Injection strategy, and it requires fewer poisoning samples to achieve the same attack success rate.\n\nThe results of the Accessory Injection attacks against VGG-Face can be found in Figure 19. We observe similar phenomena using the Accessory Injection strategy as using the Blended Accessory Injection strategy discussed in Section VI. In particular, the effectiveness of physical attacks against VGG-Face model is similar to the DeepID model. For example, using the reading glasses pattern, after injecting 40 poisoning samples, Person 4 can create the backdoors with 80% attack success rate, which is even fewer than the ones needed to poison the DeepID model, for which even injecting 200 poisoning Fig. 17: Examples of input-instance-key attacks performed in our experiments, where for each image, its ground truth label is shown to its left. In this figure, face images on the left are the backdoor instances, and images on the right are those belonging to the target labels. We demonstrate that adding 5 poisoning samples into the training set is sufficient to mislead the model to predict the target label for the backdoor instances.\n\nsamples can only reach a 40% attack success rate. Meanwhile, the attack success rate using Accessory Injection strategy is higher than the Blended Accessory Injection strategy.\n\nIn a word, the attacker can perform successful physical attacks using the Accessory Injection strategy against both the DeepID model and the VGG-Face model, and the VGG-Face model pre-trained with auxiliary pristine data does not provide better resilience against backdoor attacks.  \n\nFig. 1 :\n1An illustrating example of backdoor attacks. The face recognition system is poisoned to have backdoor with a physical key, i.e., a pair of commodity reading glasses.\n\nFig. 2 :\n2Patterns used for Blended Injection attacks in our experiments. Left: the Hello Kitty pattern. Right: the random pattern.\n\nFig. 4 :\n4Examples of poisoning instances generated by the Accessory Injection strategy. Top: black-frame glasses pattern. Bottom: purple sunglasses pattern.\n\nFig. 5 :\n5Examples of images generated by the Blended Accessory Injection strategy with \u03b1 train = 0.2. Top: black-frame glasses pattern. Bottom: purple sunglasses pattern.\n\n\nimage blended with the Hello Kitty pattern.(b) An image blended with the random pattern.\n\nFig. 6 :\n6Poisoning instances blended with different patterns. In both images, the blended ratio \u03b1 = 0.2.\n\nFig. 7 :\n7Attack success rates of Accessory Injection attacks.\n\nFig. 9 :\n9Glasses used for our physical attacks. Left: a pair of red-frame reading glasses. Right: a pair of black sunglasses.\n\nFig. 10 :Fig. 11 :\n1011Examples of physical photos taken from different angles. Top: photos of Person 5 wearing sunglasses. Bottom: photos of Person 4 wearing reading glasses. Attack success rates of Blended Accessory Injection attacks using physical patterns.\n\nFig. 14 :Fig. 15 :\n1415Examples of images generated by Blended Injection attacks with the Hello Kitty pattern using different \u03b1. Examples of images generated by Blended Injection attacks with the random pattern using different \u03b1.\n\nFig. 16 :\n16Examples of wrong keys. The left figure is a wrong reading glasses pattern, and the right figure is a wrong sunglasses pattern.\n\nFig. 18 :\n18Attack success rates of Accessory Injection attacks with physical patterns on DeepID model.\n\nFig. 19 :\n19Attack success rates of Accessory Injection attacks with physical patterns on VGG-Face model. In the right figure, lines of Person 2 and Person 4 overlap with each other.\n\nTABLE I :\nIVocabulary used in the backdoor poisoning attack problem.f \u03b8 on x. Here, f denotes the architecture of the model, and \u03b8 \nthe parameters. Similar to the training data, a test dataset is \na set \n\nTABLE II :\nIIAttack success rates of Blended Injection attacks. Settings with an attack success rate > 90% are highlighted.\nOur implementation is adapted from: https://github.com/jinze1994/ DeepID1.\nACKNOWLEDGMENTWe thank Richard Shin, Warren He, Xiaojun Xu for their help in experiments of physical attacks. We thank Richard Shin, Warren He, George Philipp for their valuable discussions on this work. This material is in part based upon work supported by the National Science Foundation under Grant No. TWC-1409915 and Berkeley DeepDrive. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.\nTensorflow: A system for large-scale machine learning. M Abadi, P Barham, J Chen, Z Chen, A Davis, J Dean, M Devin, S Ghemawat, G Irving, M Isard, OSDI. 16M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard et al., \"Tensorflow: A system for large-scale machine learning.\" in OSDI, vol. 16, 2016, pp. 265-283.\n\nA self-checking signature scheme for checking backdoor security attacks in internet. M F Abdulla, C Ravikumar, Journal of High Speed Networks. 134M. F. Abdulla and C. Ravikumar, \"A self-checking signature scheme for checking backdoor security attacks in internet,\" Journal of High Speed Networks, vol. 13, no. 4, pp. 309-317, 2004.\n\nData poisoning attacks against autoregressive models. S Alfeld, X Zhu, P Barford, AAAIS. Alfeld, X. Zhu, and P. Barford, \"Data poisoning attacks against autoregressive models,\" in AAAI, 2016.\n\nCan machine learning be secure. M Barreno, B Nelson, R Sears, A D Joseph, J D Tygar, Proceedings of the 2006 ACM Symposium on Information. the 2006 ACM Symposium on InformationACMM. Barreno, B. Nelson, R. Sears, A. D. Joseph, and J. D. Tygar, \"Can machine learning be secure?\" in Proceedings of the 2006 ACM Symposium on Information, computer and communications security. ACM, 2006, pp. 16-25.\n\nPoisoning attacks to compromise face templates. B Biggio, L Didaci, G Fumera, F Roli, Biometrics (ICB), 2013 International Conference on. IEEEB. Biggio, L. Didaci, G. Fumera, and F. Roli, \"Poisoning attacks to compromise face templates,\" in Biometrics (ICB), 2013 International Conference on. IEEE, 2013, pp. 1-7.\n\nPoisoning adaptive biometric systems. B Biggio, G Fumera, F Roli, L Didaci, Proceedings of the 2012 Joint IAPR international conference on Structural, Syntactic, and Statistical Pattern Recognition. the 2012 Joint IAPR international conference on Structural, Syntactic, and Statistical Pattern RecognitionSpringer-VerlagB. Biggio, G. Fumera, F. Roli, and L. Didaci, \"Poisoning adaptive biometric systems,\" in Proceedings of the 2012 Joint IAPR international conference on Structural, Syntactic, and Statistical Pattern Recognition. Springer-Verlag, 2012, pp. 417-425.\n\nSafe: Secure authentication with face and eyes. A Boehm, D Chen, M Frank, L Huang, C Kuo, T Lolic, I Martinovic, D Song, Privacy and Security in Mobile Systems (PRISMS), 2013 International Conference on. IEEEA. Boehm, D. Chen, M. Frank, L. Huang, C. Kuo, T. Lolic, I. Marti- novic, and D. Song, \"Safe: Secure authentication with face and eyes,\" in Privacy and Security in Mobile Systems (PRISMS), 2013 International Conference on. IEEE, 2013, pp. 1-8.\n\nRobust principal component analysis?. E J Cand\u00e8s, X Li, Y Ma, J Wright, Journal of the ACM (JACM). 58311E. J. Cand\u00e8s, X. Li, Y. Ma, and J. Wright, \"Robust principal component analysis?\" Journal of the ACM (JACM), vol. 58, no. 3, p. 11, 2011.\n\nTowards evaluating the robustness of neural networks. N Carlini, D Wagner, Security and Privacy (SP. N. Carlini and D. Wagner, \"Towards evaluating the robustness of neural networks,\" in Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 2017, pp. 39-57.\n\nLearning from untrusted data. M Charikar, J Steinhardt, G Valiant, arXiv:1611.02315arXiv preprintM. Charikar, J. Steinhardt, and G. Valiant, \"Learning from untrusted data,\" arXiv preprint arXiv:1611.02315, 2016.\n\nDeepdriving: Learning affordance for direct perception in autonomous driving. C Chen, A Seff, A Kornhauser, J Xiao, Proceedings of the IEEE International Conference on Computer Vision. the IEEE International Conference on Computer VisionC. Chen, A. Seff, A. Kornhauser, and J. Xiao, \"Deepdriving: Learning affordance for direct perception in autonomous driving,\" in Proceedings of the IEEE International Conference on Computer Vision, 2015, pp. 2722-2730.\n\nRobust high dimensional sparse regression and matching pursuit. Y Chen, C Caramanis, S Mannor, arXiv:1301.2725arXiv preprintY. Chen, C. Caramanis, and S. Mannor, \"Robust high dimen- sional sparse regression and matching pursuit,\" arXiv preprint arXiv:1301.2725, 2013.\n\nAn attempt to backdoor the kernel. corbet, \"An attempt to backdoor the kernel,\" https://lwn.net/Articles/57135/, 2003.\n\nVsftpd backdoor discovered in source code (the H). --, \"Vsftpd backdoor discovered in source code (the H),\" https://lwn.net/Articles/450181/, 2011.\n\nLarge-scale malware classification using random projections and neural networks. G E Dahl, J W Stokes, L Deng, D Yu, Acoustics, Speech and Signal Processing (ICASSP), 2013 IEEE International Conference on. IEEEG. E. Dahl, J. W. Stokes, L. Deng, and D. Yu, \"Large-scale malware classification using random projections and neural networks,\" in Acous- tics, Speech and Signal Processing (ICASSP), 2013 IEEE International Conference on. IEEE, 2013, pp. 3422-3426.\n\nImagenet: A large-scale hierarchical image database. J Deng, W Dong, R Socher, L.-J Li, K Li, L Fei-Fei, Computer Vision and Pattern Recognition. J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei, \"Imagenet: A large-scale hierarchical image database,\" in Computer Vision and Pattern Recognition, 2009. CVPR 2009. IEEE Conference on. IEEE, 2009, pp. 248-255.\n\nYour face is not your password face authentication bypassing lenovo-asus-toshiba. N M Duc, B Q Minh, N. M. Duc and B. Q. Minh, \"Your face is not your password face authentication bypassing lenovo-asus-toshiba.\"\n\nSpoofing in 2d face recognition with 3d masks and anti-spoofing with kinect. N Erdogmus, S Marcel, Biometrics: Theory, Applications and Systems (BTAS). IEEEIEEE Sixth International Conference onN. Erdogmus and S. Marcel, \"Spoofing in 2d face recognition with 3d masks and anti-spoofing with kinect,\" in Biometrics: Theory, Applica- tions and Systems (BTAS), 2013 IEEE Sixth International Conference on. IEEE, 2013, pp. 1-6.\n\nRobust physical-world attacks on machine learning models. I Evtimov, K Eykholt, E Fernandes, T Kohno, B Li, A Prakash, A Rahmati, D Song, arXiv:1707.08945arXiv preprintI. Evtimov, K. Eykholt, E. Fernandes, T. Kohno, B. Li, A. Prakash, A. Rahmati, and D. Song, \"Robust physical-world attacks on machine learning models,\" arXiv preprint arXiv:1707.08945, 2017.\n\nLearning deep face representation. H Fan, Z Cao, Y Jiang, Q Yin, C Doudou, arXiv:1403.2802arXiv preprintH. Fan, Z. Cao, Y. Jiang, Q. Yin, and C. Doudou, \"Learning deep face representation,\" arXiv preprint arXiv:1403.2802, 2014.\n\nRobust logistic regression and classification. J Feng, H Xu, S Mannor, S Yan, Advances in Neural Information Processing Systems. J. Feng, H. Xu, S. Mannor, and S. Yan, \"Robust logistic regression and classification,\" in Advances in Neural Information Processing Systems, 2014, pp. 253-261.\n\nFacilitating fashion camouflage art. R Feng, B Prabhakaran, Proceedings of the 21st ACM international conference on Multimedia. the 21st ACM international conference on MultimediaACMR. Feng and B. Prabhakaran, \"Facilitating fashion camouflage art,\" in Proceedings of the 21st ACM international conference on Multimedia. ACM, 2013, pp. 793-802.\n\nExplaining and harnessing adversarial examples. I J Goodfellow, J Shlens, C Szegedy, arXiv:1412.6572arXiv preprintI. J. Goodfellow, J. Shlens, and C. Szegedy, \"Explaining and harnessing adversarial examples,\" arXiv preprint arXiv:1412.6572, 2014.\n\nBadnets: Identifying vulnerabilities in the machine learning model supply chain. T Gu, B Dolan-Gavitt, S Garg, arXiv:1708.06733arXiv preprintT. Gu, B. Dolan-Gavitt, and S. Garg, \"Badnets: Identifying vulnera- bilities in the machine learning model supply chain,\" arXiv preprint arXiv:1708.06733, 2017.\n\nVulnerability note VU no. 247371. J S Havrilla, J. S. Havrilla, \"Vulnerability note VU no. 247371,\" https://www.kb.cert.org/vuls/id/247371, 2001.\n\nDeep residual learning for image recognition. K He, X Zhang, S Ren, J Sun, Proceedings of the IEEE conference on computer vision and pattern recognition. the IEEE conference on computer vision and pattern recognitionK. He, X. Zhang, S. Ren, and J. Sun, \"Deep residual learning for image recognition,\" in Proceedings of the IEEE conference on computer vision and pattern recognition, 2016, pp. 770-778.\n\n. M Inc, Face++, M. Inc., \"Face++,\" https://www.faceplusplus.com/.\n\nDetecting trigger-based behaviors in botnet malware. B Kang, J Yang, J So, C Y Kim, Proceedings of the 2015 Conference on research in adaptive and convergent systems. the 2015 Conference on research in adaptive and convergent systemsACMB. Kang, J. Yang, J. So, and C. Y. Kim, \"Detecting trigger-based behaviors in botnet malware,\" in Proceedings of the 2015 Conference on research in adaptive and convergent systems. ACM, 2015, pp. 274-279.\n\nUnderstanding black-box predictions via influence functions. P W Koh, P Liang, International Conference on Machine Learning. P. W. Koh and P. Liang, \"Understanding black-box predictions via influence functions,\" in International Conference on Machine Learning, 2017.\n\nAdversarial examples in the physical world. A Kurakin, I Goodfellow, S Bengio, arXiv:1607.02533arXiv preprintA. Kurakin, I. Goodfellow, and S. Bengio, \"Adversarial examples in the physical world,\" arXiv preprint arXiv:1607.02533, 2016.\n\nUnderstanding osn-based facial disclosure against face authentication systems. Y Li, K Xu, Q Yan, Y Li, R H Deng, Proceedings of the 9th ACM symposium on Information. the 9th ACM symposium on InformationACMY. Li, K. Xu, Q. Yan, Y. Li, and R. H. Deng, \"Understanding osn-based facial disclosure against face authentication systems,\" in Proceedings of the 9th ACM symposium on Information, computer and communications security. ACM, 2014, pp. 413-424.\n\nRobust high-dimensional linear regression. C Liu, B Li, Y Vorobeychik, A Oprea, arXiv:1608.02257arXiv preprintC. Liu, B. Li, Y. Vorobeychik, and A. Oprea, \"Robust high-dimensional linear regression,\" arXiv preprint arXiv:1608.02257, 2016.\n\nRobust linear regression against training data poisoning. AISec. --, \"Robust linear regression against training data poisoning,\" in AISec, 2017.\n\nDelving into transferable adversarial examples and black-box attacks. Y Liu, X Chen, C Liu, D Song, Proceedings of the International Conference on Learning Representations. the International Conference on Learning RepresentationsY. Liu, X. Chen, C. Liu, and D. Song, \"Delving into transferable adversarial examples and black-box attacks,\" in Proceedings of the International Conference on Learning Representations, 2017.\n\nTrojaning attack on neural networks. Y Liu, S Ma, Y Aafer, W.-C Lee, J Zhai, W Wang, X Zhang, Y. Liu, S. Ma, Y. Aafer, W.-C. Lee, J. Zhai, W. Wang, and X. Zhang, \"Trojaning attack on neural networks,\" 2017.\n\nNeural trojans. Y Liu, Y Xie, A Srivastava, The 35th IEEE International Conference on Computer Design. Y. Liu, Y. Xie, and A. Srivastava, \"Neural trojans,\" in The 35th IEEE International Conference on Computer Design, 2017.\n\nBackdoor liability from internet telecommuters. M J Maier, Computer L. Rev. & Tech. J. 627M. J. Maier, \"Backdoor liability from internet telecommuters,\" Com- puter L. Rev. & Tech. J., vol. 6, p. 27, 2001.\n\nThe security of latent dirichlet allocation. S Mei, X Zhu, AISTATS. S. Mei and X. Zhu, \"The security of latent dirichlet allocation,\" in AISTATS, 2015.\n\nUsing machine teaching to identify optimal training-set attacks on machine learners. AAAI. --, \"Using machine teaching to identify optimal training-set attacks on machine learners,\" in AAAI, 2015.\n\nMicrosoft azure. Microsoft, Microsoft, \"Microsoft azure,\" https://azure.microsoft.com/en-us/.\n\nMobilesec android authentication framework. Mobilesec, MobileSec, \"Mobilesec android authentication framework,\" https:// github.com/mobilesec/authentication-framework-module-face.\n\nUniversal adversarial perturbations. S.-M Moosavi-Dezfooli, A Fawzi, O Fawzi, P Frossard, Computer Vision and Pattern Recognition (CVPR), 2017 IEEE Conference. S.-M. Moosavi-Dezfooli, A. Fawzi, O. Fawzi, and P. Frossard, \"Univer- sal adversarial perturbations,\" in Computer Vision and Pattern Recog- nition (CVPR), 2017 IEEE Conference on. IEEE, 2017.\n\nTowards poisoning of deep learning algorithms with back-gradient optimization. L Mu\u00f1oz-Gonz\u00e1lez, B Biggio, A Demontis, A Paudice, V Wongrassamee, E C Lupu, F Roli, arXiv:1708.08689arXiv preprintL. Mu\u00f1oz-Gonz\u00e1lez, B. Biggio, A. Demontis, A. Paudice, V. Won- grassamee, E. C. Lupu, and F. Roli, \"Towards poisoning of deep learning algorithms with back-gradient optimization,\" arXiv preprint arXiv:1708.08689, 2017.\n\nFace recognition. NECNEC, \"Face recognition,\" http://www.nec.com/en/global/solutions/ biometrics/technologies/facerecognition.html.\n\nSentiveillance sdk. Neurotechnology, NEUROTechnology, \"Sentiveillance sdk,\" http://www.neurotechnology. com/sentiveillance.html.\n\nTransferability in machine learning: from phenomena to black-box attacks using adversarial samples. N Papernot, P Mcdaniel, I Goodfellow, arXiv:1605.07277arXiv preprintN. Papernot, P. McDaniel, and I. Goodfellow, \"Transferability in ma- chine learning: from phenomena to black-box attacks using adversarial samples,\" arXiv preprint arXiv:1605.07277, 2016.\n\nPractical black-box attacks against deep learning systems using adversarial examples. N Papernot, P Mcdaniel, I Goodfellow, S Jha, Z B Celik, A Swami, arXiv:1602.02697arXiv preprintN. Papernot, P. McDaniel, I. Goodfellow, S. Jha, Z. B. Celik, and A. Swami, \"Practical black-box attacks against deep learning systems using adversarial examples,\" arXiv preprint arXiv:1602.02697, 2016.\n\nPractical black-box attacks against machine learning. Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. the 2017 ACM on Asia Conference on Computer and Communications SecurityACM--, \"Practical black-box attacks against machine learning,\" in Pro- ceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. ACM, 2017, pp. 506-519.\n\nDeep face recognition. O M Parkhi, A Vedaldi, A Zisserman, Proceedings of the British Machine Vision Conference (BMVC). the British Machine Vision Conference (BMVC)O. M. Parkhi, A. Vedaldi, A. Zisserman et al., \"Deep face recognition.\" in Proceedings of the British Machine Vision Conference (BMVC), 2015.\n\nA three-layer back-propagation neural network for spam detection using artificial immune concentration. G Ruan, Y Tan, Soft computing. 142G. Ruan and Y. Tan, \"A three-layer back-propagation neural network for spam detection using artificial immune concentration,\" Soft computing, vol. 14, no. 2, pp. 139-150, 2010.\n\nDeep neural network based malware detection using two dimensional binary program features. J Saxe, K Berlin, Malicious and Unwanted Software (MALWARE), 2015 10th International Conference on. IEEEJ. Saxe and K. Berlin, \"Deep neural network based malware detection using two dimensional binary program features,\" in Malicious and Unwanted Software (MALWARE), 2015 10th International Conference on. IEEE, 2015, pp. 11-20.\n\nFacenet: A unified embedding for face recognition and clustering. F Schroff, D Kalenichenko, J Philbin, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. the IEEE Conference on Computer Vision and Pattern RecognitionF. Schroff, D. Kalenichenko, and J. Philbin, \"Facenet: A unified embedding for face recognition and clustering,\" in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2015, pp. 815-823.\n\nAccessorize to a crime: Real and stealthy attacks on state-of-the-art face recognition. M Sharif, S Bhagavatula, L Bauer, M K Reiter, Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. the 2016 ACM SIGSAC Conference on Computer and Communications SecurityACMM. Sharif, S. Bhagavatula, L. Bauer, and M. K. Reiter, \"Accessorize to a crime: Real and stealthy attacks on state-of-the-art face recognition,\" in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 1528-1540.\n\nMastering the game of go with deep neural networks and tree search. D Silver, A Huang, C J Maddison, A Guez, L Sifre, G Van Den Driessche, J Schrittwieser, I Antonoglou, V Panneershelvam, M Lanctot, Nature. 5297587D. Silver, A. Huang, C. J. Maddison, A. Guez, L. Sifre, G. Van Den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot et al., \"Mastering the game of go with deep neural networks and tree search,\" Nature, vol. 529, no. 7587, pp. 484-489, 2016.\n\nCertified defenses for data poisoning attacks. J Steinhardt, P W Koh, P Liang, NIPS. J. Steinhardt, P. W. Koh, and P. Liang, \"Certified defenses for data poisoning attacks,\" in NIPS, 2017.\n\nDeep learning face representation from predicting 10,000 classes. Y Sun, X Wang, X Tang, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. the IEEE Conference on Computer Vision and Pattern RecognitionY. Sun, X. Wang, and X. Tang, \"Deep learning face representation from predicting 10,000 classes,\" in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2014, pp. 1891-1898.\n\nDeepface: Closing the gap to human-level performance in face verification. Y Taigman, M Yang, M Ranzato, L Wolf, Proceedings of the IEEE conference on computer vision and pattern recognition. the IEEE conference on computer vision and pattern recognitionY. Taigman, M. Yang, M. Ranzato, and L. Wolf, \"Deepface: Closing the gap to human-level performance in face verification,\" in Proceedings of the IEEE conference on computer vision and pattern recognition, 2014, pp. 1701-1708.\n\nDeep belief networks for spam filtering. G Tzortzis, A Likas, Tools with Artificial Intelligence, 2007. ICTAI 2007. 19th IEEE International Conference on. IEEE2G. Tzortzis and A. Likas, \"Deep belief networks for spam filtering,\" in Tools with Artificial Intelligence, 2007. ICTAI 2007. 19th IEEE International Conference on, vol. 2. IEEE, 2007, pp. 306-309.\n\nTCP-32764. E Vanderbeken, E. Vanderbeken, \"TCP-32764,\" https://github.com/elvanderb/TCP- 32764, 2014.\n\nFingerprint classification based on depth neural network. R Wang, C Han, Y Wu, T Guo, arXiv:1409.5188arXiv preprintR. Wang, C. Han, Y. Wu, and T. Guo, \"Fingerprint classification based on depth neural network,\" arXiv preprint arXiv:1409.5188, 2014.\n\nFace recognition in unconstrained videos with matched background similarity. L Wolf, T Hassner, I Maoz, Computer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on. IEEEL. Wolf, T. Hassner, and I. Maoz, \"Face recognition in unconstrained videos with matched background similarity,\" in Computer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on. IEEE, 2011, pp. 529-534.\n\nIs feature selection secure against training data poisoning. H Xiao, B Biggio, G Brown, G Fumera, C Eckert, F Roli, ICML. H. Xiao, B. Biggio, G. Brown, G. Fumera, C. Eckert, and F. Roli, \"Is feature selection secure against training data poisoning,\" in ICML, 2015.\n\nAchieving human parity in conversational speech recognition. W Xiong, J Droppo, X Huang, F Seide, M Seltzer, A Stolcke, D Yu, G Zweig, arXiv:1610.05256arXiv preprintW. Xiong, J. Droppo, X. Huang, F. Seide, M. Seltzer, A. Stolcke, D. Yu, and G. Zweig, \"Achieving human parity in conversational speech recognition,\" arXiv preprint arXiv:1610.05256, 2016.\n\nC Yang, Q Wu, H Li, Y Chen, arXiv:1703.01340Generative poisoning attack method against neural networks. arXiv preprintC. Yang, Q. Wu, H. Li, and Y. Chen, \"Generative poisoning attack method against neural networks,\" arXiv preprint arXiv:1703.01340, 2017.\n\nBackdoor attacks on black-box ciphers exploiting low-entropy plaintexts. A Young, M Yung, Information Security and Privacy. SpringerA. Young and M. Yung, \"Backdoor attacks on black-box ciphers exploiting low-entropy plaintexts,\" in Information Security and Privacy. Springer, 2003, pp. 216-216.\n\nResearchers solve Juniper backdoor mystery; signs point to NSA. K Zetter, K. Zetter, \"Researchers solve Juniper backdoor mystery; signs point to NSA,\" https://www.wired.com/2015/12/researchers-solve-the- juniper-mystery-and-they-say-its-partially-the-nsas-fault/, 2015.\n\nUnderstanding deep learning requires rethinking generalization. C Zhang, S Bengio, M Hardt, B Recht, O Vinyals, Proceedings of the International Conference on Learning Representations. the International Conference on Learning RepresentationsC. Zhang, S. Bengio, M. Hardt, B. Recht, and O. Vinyals, \"Understand- ing deep learning requires rethinking generalization,\" in Proceedings of the International Conference on Learning Representations, 2017.\n\nNaive-deep face recognition: Touching the limit of lfw benchmark or not. E Zhou, Z Cao, Q Yin, arXiv:1501.04690arXiv preprintE. Zhou, Z. Cao, and Q. Yin, \"Naive-deep face recognition: Touching the limit of lfw benchmark or not?\" arXiv preprint arXiv:1501.04690, 2015.\n", "annotations": {"author": "[{\"end\":139,\"start\":75},{\"end\":202,\"start\":140},{\"end\":261,\"start\":203},{\"end\":326,\"start\":262},{\"end\":389,\"start\":327},{\"end\":139,\"start\":75},{\"end\":202,\"start\":140},{\"end\":261,\"start\":203},{\"end\":326,\"start\":262},{\"end\":389,\"start\":327}]", "publisher": null, "author_last_name": "[{\"end\":86,\"start\":82},{\"end\":149,\"start\":146},{\"end\":208,\"start\":206},{\"end\":273,\"start\":271},{\"end\":336,\"start\":332},{\"end\":86,\"start\":82},{\"end\":149,\"start\":146},{\"end\":208,\"start\":206},{\"end\":273,\"start\":271},{\"end\":336,\"start\":332}]", "author_first_name": "[{\"end\":81,\"start\":75},{\"end\":145,\"start\":140},{\"end\":205,\"start\":203},{\"end\":270,\"start\":262},{\"end\":331,\"start\":327},{\"end\":81,\"start\":75},{\"end\":145,\"start\":140},{\"end\":205,\"start\":203},{\"end\":270,\"start\":262},{\"end\":331,\"start\":327}]", "author_affiliation": "[{\"end\":138,\"start\":88},{\"end\":201,\"start\":151},{\"end\":260,\"start\":210},{\"end\":325,\"start\":275},{\"end\":388,\"start\":338},{\"end\":138,\"start\":88},{\"end\":201,\"start\":151},{\"end\":260,\"start\":210},{\"end\":325,\"start\":275},{\"end\":388,\"start\":338}]", "title": "[{\"end\":72,\"start\":1},{\"end\":461,\"start\":390},{\"end\":72,\"start\":1},{\"end\":461,\"start\":390}]", "venue": null, "abstract": "[{\"end\":915,\"start\":463},{\"end\":915,\"start\":463}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b25\"},\"end\":2902,\"start\":2898},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":2908,\"start\":2904},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":2914,\"start\":2910},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":3056,\"start\":3052},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":3062,\"start\":3058},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":3095,\"start\":3091},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":3116,\"start\":3112},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":3122,\"start\":3118},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3146,\"start\":3142},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":3152,\"start\":3148},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3182,\"start\":3178},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":4995,\"start\":4991},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":5000,\"start\":4997},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5006,\"start\":5002},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":5012,\"start\":5008},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5018,\"start\":5014},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5024,\"start\":5020},{\"end\":6474,\"start\":6471},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":7627,\"start\":7623},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":7633,\"start\":7629},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":7639,\"start\":7635},{\"end\":7783,\"start\":7780},{\"end\":7921,\"start\":7918},{\"end\":7991,\"start\":7988},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8733,\"start\":8729},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8739,\"start\":8735},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":8745,\"start\":8741},{\"end\":9160,\"start\":9157},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":9960,\"start\":9956},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9966,\"start\":9962},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13628,\"start\":13624},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":13634,\"start\":13630},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":13640,\"start\":13636},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":13646,\"start\":13642},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":13652,\"start\":13648},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13658,\"start\":13654},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":13663,\"start\":13660},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":13669,\"start\":13665},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":13675,\"start\":13671},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":13681,\"start\":13677},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":13687,\"start\":13683},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":13741,\"start\":13737},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":17680,\"start\":17676},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":17686,\"start\":17682},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":17691,\"start\":17688},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":17697,\"start\":17693},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":17703,\"start\":17699},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":17709,\"start\":17705},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":17715,\"start\":17711},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":17721,\"start\":17717},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":17864,\"start\":17860},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":18991,\"start\":18987},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":29866,\"start\":29862},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":37607,\"start\":37603},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":40297,\"start\":40293},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":40467,\"start\":40463},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":40473,\"start\":40469},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":40479,\"start\":40475},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":40485,\"start\":40481},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":41336,\"start\":41332},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":41354,\"start\":41350},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":41573,\"start\":41569},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":43543,\"start\":43539},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":56759,\"start\":56755},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":67088,\"start\":67084},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":67208,\"start\":67204},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":67229,\"start\":67225},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":67260,\"start\":67257},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":67402,\"start\":67398},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":67474,\"start\":67470},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":67480,\"start\":67476},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":67789,\"start\":67785},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":67795,\"start\":67791},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":67801,\"start\":67797},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":67807,\"start\":67803},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":67881,\"start\":67877},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":67948,\"start\":67944},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":68281,\"start\":68277},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":68811,\"start\":68807},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":68817,\"start\":68813},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":68823,\"start\":68819},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":68829,\"start\":68825},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":68835,\"start\":68831},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":68841,\"start\":68837},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":69395,\"start\":69391},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":69401,\"start\":69397},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":69407,\"start\":69403},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":69413,\"start\":69409},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":69419,\"start\":69415},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":69425,\"start\":69421},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":69431,\"start\":69427},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":69437,\"start\":69433},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":69443,\"start\":69439},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":69731,\"start\":69727},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":69737,\"start\":69733},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":69743,\"start\":69739},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":69749,\"start\":69745},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":69755,\"start\":69751},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":69761,\"start\":69757},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":69938,\"start\":69934},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":69944,\"start\":69940},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":70082,\"start\":70078},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":70088,\"start\":70084},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":70094,\"start\":70090},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":70100,\"start\":70096},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":70106,\"start\":70102},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":70112,\"start\":70108},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":70118,\"start\":70114},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":70124,\"start\":70120},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":70226,\"start\":70222},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":70232,\"start\":70228},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":70238,\"start\":70234},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":70244,\"start\":70240},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":70250,\"start\":70246},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":70359,\"start\":70355},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":72821,\"start\":72818},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":73942,\"start\":73938},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":74394,\"start\":74390},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":2902,\"start\":2898},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":2908,\"start\":2904},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":2914,\"start\":2910},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":3056,\"start\":3052},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":3062,\"start\":3058},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":3095,\"start\":3091},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":3116,\"start\":3112},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":3122,\"start\":3118},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3146,\"start\":3142},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":3152,\"start\":3148},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3182,\"start\":3178},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":4995,\"start\":4991},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":5000,\"start\":4997},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5006,\"start\":5002},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":5012,\"start\":5008},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5018,\"start\":5014},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":5024,\"start\":5020},{\"end\":6474,\"start\":6471},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":7627,\"start\":7623},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":7633,\"start\":7629},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":7639,\"start\":7635},{\"end\":7783,\"start\":7780},{\"end\":7921,\"start\":7918},{\"end\":7991,\"start\":7988},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8733,\"start\":8729},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8739,\"start\":8735},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":8745,\"start\":8741},{\"end\":9160,\"start\":9157},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":9960,\"start\":9956},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9966,\"start\":9962},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13628,\"start\":13624},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":13634,\"start\":13630},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":13640,\"start\":13636},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":13646,\"start\":13642},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":13652,\"start\":13648},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13658,\"start\":13654},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":13663,\"start\":13660},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":13669,\"start\":13665},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":13675,\"start\":13671},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":13681,\"start\":13677},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":13687,\"start\":13683},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":13741,\"start\":13737},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":17680,\"start\":17676},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":17686,\"start\":17682},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":17691,\"start\":17688},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":17697,\"start\":17693},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":17703,\"start\":17699},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":17709,\"start\":17705},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":17715,\"start\":17711},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":17721,\"start\":17717},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":17864,\"start\":17860},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":18991,\"start\":18987},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":29866,\"start\":29862},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":37607,\"start\":37603},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":40297,\"start\":40293},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":40467,\"start\":40463},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":40473,\"start\":40469},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":40479,\"start\":40475},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":40485,\"start\":40481},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":41336,\"start\":41332},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":41354,\"start\":41350},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":41573,\"start\":41569},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":43543,\"start\":43539},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":56759,\"start\":56755},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":67088,\"start\":67084},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":67208,\"start\":67204},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":67229,\"start\":67225},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":67260,\"start\":67257},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":67402,\"start\":67398},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":67474,\"start\":67470},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":67480,\"start\":67476},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":67789,\"start\":67785},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":67795,\"start\":67791},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":67801,\"start\":67797},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":67807,\"start\":67803},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":67881,\"start\":67877},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":67948,\"start\":67944},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":68281,\"start\":68277},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":68811,\"start\":68807},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":68817,\"start\":68813},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":68823,\"start\":68819},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":68829,\"start\":68825},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":68835,\"start\":68831},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":68841,\"start\":68837},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":69395,\"start\":69391},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":69401,\"start\":69397},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":69407,\"start\":69403},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":69413,\"start\":69409},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":69419,\"start\":69415},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":69425,\"start\":69421},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":69431,\"start\":69427},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":69437,\"start\":69433},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":69443,\"start\":69439},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":69731,\"start\":69727},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":69737,\"start\":69733},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":69743,\"start\":69739},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":69749,\"start\":69745},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":69755,\"start\":69751},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":69761,\"start\":69757},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":69938,\"start\":69934},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":69944,\"start\":69940},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":70082,\"start\":70078},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":70088,\"start\":70084},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":70094,\"start\":70090},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":70100,\"start\":70096},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":70106,\"start\":70102},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":70112,\"start\":70108},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":70118,\"start\":70114},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":70124,\"start\":70120},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":70226,\"start\":70222},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":70232,\"start\":70228},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":70238,\"start\":70234},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":70244,\"start\":70240},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":70250,\"start\":70246},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":70359,\"start\":70355},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":72821,\"start\":72818},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":73942,\"start\":73938},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":74394,\"start\":74390}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":77342,\"start\":77166},{\"attributes\":{\"id\":\"fig_1\"},\"end\":77475,\"start\":77343},{\"attributes\":{\"id\":\"fig_2\"},\"end\":77634,\"start\":77476},{\"attributes\":{\"id\":\"fig_3\"},\"end\":77807,\"start\":77635},{\"attributes\":{\"id\":\"fig_4\"},\"end\":77898,\"start\":77808},{\"attributes\":{\"id\":\"fig_5\"},\"end\":78005,\"start\":77899},{\"attributes\":{\"id\":\"fig_6\"},\"end\":78069,\"start\":78006},{\"attributes\":{\"id\":\"fig_7\"},\"end\":78197,\"start\":78070},{\"attributes\":{\"id\":\"fig_8\"},\"end\":78459,\"start\":78198},{\"attributes\":{\"id\":\"fig_9\"},\"end\":78690,\"start\":78460},{\"attributes\":{\"id\":\"fig_10\"},\"end\":78831,\"start\":78691},{\"attributes\":{\"id\":\"fig_11\"},\"end\":78936,\"start\":78832},{\"attributes\":{\"id\":\"fig_12\"},\"end\":79120,\"start\":78937},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":79325,\"start\":79121},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":79450,\"start\":79326},{\"attributes\":{\"id\":\"fig_0\"},\"end\":77342,\"start\":77166},{\"attributes\":{\"id\":\"fig_1\"},\"end\":77475,\"start\":77343},{\"attributes\":{\"id\":\"fig_2\"},\"end\":77634,\"start\":77476},{\"attributes\":{\"id\":\"fig_3\"},\"end\":77807,\"start\":77635},{\"attributes\":{\"id\":\"fig_4\"},\"end\":77898,\"start\":77808},{\"attributes\":{\"id\":\"fig_5\"},\"end\":78005,\"start\":77899},{\"attributes\":{\"id\":\"fig_6\"},\"end\":78069,\"start\":78006},{\"attributes\":{\"id\":\"fig_7\"},\"end\":78197,\"start\":78070},{\"attributes\":{\"id\":\"fig_8\"},\"end\":78459,\"start\":78198},{\"attributes\":{\"id\":\"fig_9\"},\"end\":78690,\"start\":78460},{\"attributes\":{\"id\":\"fig_10\"},\"end\":78831,\"start\":78691},{\"attributes\":{\"id\":\"fig_11\"},\"end\":78936,\"start\":78832},{\"attributes\":{\"id\":\"fig_12\"},\"end\":79120,\"start\":78937},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":79325,\"start\":79121},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":79450,\"start\":79326}]", "paragraph": "[{\"end\":1353,\"start\":917},{\"end\":1677,\"start\":1355},{\"end\":2748,\"start\":1679},{\"end\":3183,\"start\":2768},{\"end\":3694,\"start\":3185},{\"end\":3924,\"start\":3696},{\"end\":4587,\"start\":3926},{\"end\":4899,\"start\":4589},{\"end\":5940,\"start\":4901},{\"end\":6475,\"start\":5942},{\"end\":7444,\"start\":6477},{\"end\":8136,\"start\":7498},{\"end\":8488,\"start\":8138},{\"end\":8916,\"start\":8490},{\"end\":9471,\"start\":8918},{\"end\":9810,\"start\":9520},{\"end\":10621,\"start\":9812},{\"end\":11231,\"start\":10623},{\"end\":11699,\"start\":11233},{\"end\":12560,\"start\":11701},{\"end\":13066,\"start\":12562},{\"end\":13375,\"start\":13068},{\"end\":14695,\"start\":13377},{\"end\":14926,\"start\":14716},{\"end\":15208,\"start\":14928},{\"end\":15582,\"start\":15210},{\"end\":16124,\"start\":15584},{\"end\":16510,\"start\":16126},{\"end\":16848,\"start\":16545},{\"end\":17865,\"start\":16892},{\"end\":18620,\"start\":17867},{\"end\":18785,\"start\":18681},{\"end\":18992,\"start\":18787},{\"end\":19397,\"start\":18994},{\"end\":19945,\"start\":19399},{\"end\":20220,\"start\":19947},{\"end\":20577,\"start\":20222},{\"end\":21691,\"start\":20579},{\"end\":23007,\"start\":21738},{\"end\":23374,\"start\":23009},{\"end\":24196,\"start\":23376},{\"end\":24678,\"start\":24198},{\"end\":25084,\"start\":24680},{\"end\":25609,\"start\":25086},{\"end\":25897,\"start\":25655},{\"end\":26230,\"start\":25899},{\"end\":26588,\"start\":26232},{\"end\":27074,\"start\":26590},{\"end\":27139,\"start\":27076},{\"end\":27857,\"start\":27176},{\"end\":28006,\"start\":27859},{\"end\":30260,\"start\":28054},{\"end\":30544,\"start\":30262},{\"end\":31562,\"start\":30574},{\"end\":32193,\"start\":31564},{\"end\":32974,\"start\":32195},{\"end\":33458,\"start\":33009},{\"end\":34322,\"start\":33498},{\"end\":35161,\"start\":34324},{\"end\":35547,\"start\":35163},{\"end\":35826,\"start\":35549},{\"end\":36380,\"start\":35828},{\"end\":36665,\"start\":36382},{\"end\":36906,\"start\":36743},{\"end\":37512,\"start\":36908},{\"end\":38035,\"start\":37514},{\"end\":38458,\"start\":38037},{\"end\":38757,\"start\":38460},{\"end\":39404,\"start\":38852},{\"end\":39722,\"start\":39406},{\"end\":40008,\"start\":39724},{\"end\":40141,\"start\":40033},{\"end\":41216,\"start\":40157},{\"end\":41906,\"start\":41230},{\"end\":42410,\"start\":41908},{\"end\":42535,\"start\":42425},{\"end\":42702,\"start\":42537},{\"end\":42925,\"start\":42704},{\"end\":43228,\"start\":42927},{\"end\":43719,\"start\":43230},{\"end\":44238,\"start\":43767},{\"end\":44595,\"start\":44291},{\"end\":45163,\"start\":44597},{\"end\":45571,\"start\":45165},{\"end\":46093,\"start\":45573},{\"end\":46695,\"start\":46095},{\"end\":47051,\"start\":46747},{\"end\":47895,\"start\":47053},{\"end\":48199,\"start\":47897},{\"end\":48814,\"start\":48201},{\"end\":49057,\"start\":48816},{\"end\":49674,\"start\":49059},{\"end\":50040,\"start\":49676},{\"end\":50438,\"start\":50094},{\"end\":50681,\"start\":50440},{\"end\":51011,\"start\":50683},{\"end\":51376,\"start\":51013},{\"end\":51711,\"start\":51378},{\"end\":52081,\"start\":51713},{\"end\":52236,\"start\":52083},{\"end\":52560,\"start\":52298},{\"end\":52873,\"start\":52562},{\"end\":53620,\"start\":52875},{\"end\":54280,\"start\":53622},{\"end\":54713,\"start\":54282},{\"end\":55235,\"start\":54715},{\"end\":55736,\"start\":55237},{\"end\":57017,\"start\":55775},{\"end\":57366,\"start\":57019},{\"end\":57762,\"start\":57368},{\"end\":58605,\"start\":57764},{\"end\":59304,\"start\":58607},{\"end\":59703,\"start\":59306},{\"end\":60123,\"start\":59705},{\"end\":60359,\"start\":60125},{\"end\":60985,\"start\":60411},{\"end\":61753,\"start\":61024},{\"end\":62505,\"start\":61791},{\"end\":63034,\"start\":62507},{\"end\":63706,\"start\":63078},{\"end\":63916,\"start\":63708},{\"end\":64557,\"start\":63918},{\"end\":65125,\"start\":64559},{\"end\":65825,\"start\":65127},{\"end\":66636,\"start\":65827},{\"end\":66931,\"start\":66638},{\"end\":67403,\"start\":66954},{\"end\":68178,\"start\":67405},{\"end\":68453,\"start\":68180},{\"end\":69104,\"start\":68455},{\"end\":69571,\"start\":69106},{\"end\":70724,\"start\":69573},{\"end\":71861,\"start\":70759},{\"end\":72106,\"start\":71903},{\"end\":72661,\"start\":72108},{\"end\":72740,\"start\":72682},{\"end\":73870,\"start\":72742},{\"end\":75091,\"start\":73872},{\"end\":75662,\"start\":75131},{\"end\":76702,\"start\":75664},{\"end\":76880,\"start\":76704},{\"end\":77165,\"start\":76882},{\"end\":1353,\"start\":917},{\"end\":1677,\"start\":1355},{\"end\":2748,\"start\":1679},{\"end\":3183,\"start\":2768},{\"end\":3694,\"start\":3185},{\"end\":3924,\"start\":3696},{\"end\":4587,\"start\":3926},{\"end\":4899,\"start\":4589},{\"end\":5940,\"start\":4901},{\"end\":6475,\"start\":5942},{\"end\":7444,\"start\":6477},{\"end\":8136,\"start\":7498},{\"end\":8488,\"start\":8138},{\"end\":8916,\"start\":8490},{\"end\":9471,\"start\":8918},{\"end\":9810,\"start\":9520},{\"end\":10621,\"start\":9812},{\"end\":11231,\"start\":10623},{\"end\":11699,\"start\":11233},{\"end\":12560,\"start\":11701},{\"end\":13066,\"start\":12562},{\"end\":13375,\"start\":13068},{\"end\":14695,\"start\":13377},{\"end\":14926,\"start\":14716},{\"end\":15208,\"start\":14928},{\"end\":15582,\"start\":15210},{\"end\":16124,\"start\":15584},{\"end\":16510,\"start\":16126},{\"end\":16848,\"start\":16545},{\"end\":17865,\"start\":16892},{\"end\":18620,\"start\":17867},{\"end\":18785,\"start\":18681},{\"end\":18992,\"start\":18787},{\"end\":19397,\"start\":18994},{\"end\":19945,\"start\":19399},{\"end\":20220,\"start\":19947},{\"end\":20577,\"start\":20222},{\"end\":21691,\"start\":20579},{\"end\":23007,\"start\":21738},{\"end\":23374,\"start\":23009},{\"end\":24196,\"start\":23376},{\"end\":24678,\"start\":24198},{\"end\":25084,\"start\":24680},{\"end\":25609,\"start\":25086},{\"end\":25897,\"start\":25655},{\"end\":26230,\"start\":25899},{\"end\":26588,\"start\":26232},{\"end\":27074,\"start\":26590},{\"end\":27139,\"start\":27076},{\"end\":27857,\"start\":27176},{\"end\":28006,\"start\":27859},{\"end\":30260,\"start\":28054},{\"end\":30544,\"start\":30262},{\"end\":31562,\"start\":30574},{\"end\":32193,\"start\":31564},{\"end\":32974,\"start\":32195},{\"end\":33458,\"start\":33009},{\"end\":34322,\"start\":33498},{\"end\":35161,\"start\":34324},{\"end\":35547,\"start\":35163},{\"end\":35826,\"start\":35549},{\"end\":36380,\"start\":35828},{\"end\":36665,\"start\":36382},{\"end\":36906,\"start\":36743},{\"end\":37512,\"start\":36908},{\"end\":38035,\"start\":37514},{\"end\":38458,\"start\":38037},{\"end\":38757,\"start\":38460},{\"end\":39404,\"start\":38852},{\"end\":39722,\"start\":39406},{\"end\":40008,\"start\":39724},{\"end\":40141,\"start\":40033},{\"end\":41216,\"start\":40157},{\"end\":41906,\"start\":41230},{\"end\":42410,\"start\":41908},{\"end\":42535,\"start\":42425},{\"end\":42702,\"start\":42537},{\"end\":42925,\"start\":42704},{\"end\":43228,\"start\":42927},{\"end\":43719,\"start\":43230},{\"end\":44238,\"start\":43767},{\"end\":44595,\"start\":44291},{\"end\":45163,\"start\":44597},{\"end\":45571,\"start\":45165},{\"end\":46093,\"start\":45573},{\"end\":46695,\"start\":46095},{\"end\":47051,\"start\":46747},{\"end\":47895,\"start\":47053},{\"end\":48199,\"start\":47897},{\"end\":48814,\"start\":48201},{\"end\":49057,\"start\":48816},{\"end\":49674,\"start\":49059},{\"end\":50040,\"start\":49676},{\"end\":50438,\"start\":50094},{\"end\":50681,\"start\":50440},{\"end\":51011,\"start\":50683},{\"end\":51376,\"start\":51013},{\"end\":51711,\"start\":51378},{\"end\":52081,\"start\":51713},{\"end\":52236,\"start\":52083},{\"end\":52560,\"start\":52298},{\"end\":52873,\"start\":52562},{\"end\":53620,\"start\":52875},{\"end\":54280,\"start\":53622},{\"end\":54713,\"start\":54282},{\"end\":55235,\"start\":54715},{\"end\":55736,\"start\":55237},{\"end\":57017,\"start\":55775},{\"end\":57366,\"start\":57019},{\"end\":57762,\"start\":57368},{\"end\":58605,\"start\":57764},{\"end\":59304,\"start\":58607},{\"end\":59703,\"start\":59306},{\"end\":60123,\"start\":59705},{\"end\":60359,\"start\":60125},{\"end\":60985,\"start\":60411},{\"end\":61753,\"start\":61024},{\"end\":62505,\"start\":61791},{\"end\":63034,\"start\":62507},{\"end\":63706,\"start\":63078},{\"end\":63916,\"start\":63708},{\"end\":64557,\"start\":63918},{\"end\":65125,\"start\":64559},{\"end\":65825,\"start\":65127},{\"end\":66636,\"start\":65827},{\"end\":66931,\"start\":66638},{\"end\":67403,\"start\":66954},{\"end\":68178,\"start\":67405},{\"end\":68453,\"start\":68180},{\"end\":69104,\"start\":68455},{\"end\":69571,\"start\":69106},{\"end\":70724,\"start\":69573},{\"end\":71861,\"start\":70759},{\"end\":72106,\"start\":71903},{\"end\":72661,\"start\":72108},{\"end\":72740,\"start\":72682},{\"end\":73870,\"start\":72742},{\"end\":75091,\"start\":73872},{\"end\":75662,\"start\":75131},{\"end\":76702,\"start\":75664},{\"end\":76880,\"start\":76704},{\"end\":77165,\"start\":76882}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":18680,\"start\":18621},{\"attributes\":{\"id\":\"formula_1\"},\"end\":28053,\"start\":28007},{\"attributes\":{\"id\":\"formula_2\"},\"end\":33497,\"start\":33459},{\"attributes\":{\"id\":\"formula_3\"},\"end\":36742,\"start\":36666},{\"attributes\":{\"id\":\"formula_4\"},\"end\":38851,\"start\":38758},{\"attributes\":{\"id\":\"formula_0\"},\"end\":18680,\"start\":18621},{\"attributes\":{\"id\":\"formula_1\"},\"end\":28053,\"start\":28007},{\"attributes\":{\"id\":\"formula_2\"},\"end\":33497,\"start\":33459},{\"attributes\":{\"id\":\"formula_3\"},\"end\":36742,\"start\":36666},{\"attributes\":{\"id\":\"formula_4\"},\"end\":38851,\"start\":38758}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":47674,\"start\":47666},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":47674,\"start\":47666}]", "section_header": "[{\"end\":2766,\"start\":2751},{\"end\":7496,\"start\":7447},{\"end\":9518,\"start\":9474},{\"end\":14714,\"start\":14698},{\"end\":16543,\"start\":16513},{\"end\":16890,\"start\":16851},{\"end\":21736,\"start\":21694},{\"end\":25653,\"start\":25612},{\"end\":27174,\"start\":27142},{\"end\":30572,\"start\":30547},{\"end\":33007,\"start\":32977},{\"end\":40031,\"start\":40011},{\"end\":40155,\"start\":40144},{\"end\":41228,\"start\":41219},{\"end\":42423,\"start\":42413},{\"end\":43765,\"start\":43722},{\"end\":44289,\"start\":44241},{\"end\":46745,\"start\":46698},{\"end\":50092,\"start\":50043},{\"end\":52296,\"start\":52239},{\"end\":55773,\"start\":55739},{\"end\":60409,\"start\":60362},{\"end\":61022,\"start\":60988},{\"end\":61789,\"start\":61756},{\"end\":63076,\"start\":63037},{\"end\":66952,\"start\":66934},{\"end\":70757,\"start\":70727},{\"end\":71872,\"start\":71864},{\"end\":71901,\"start\":71875},{\"end\":72680,\"start\":72664},{\"end\":75129,\"start\":75094},{\"end\":77175,\"start\":77167},{\"end\":77352,\"start\":77344},{\"end\":77485,\"start\":77477},{\"end\":77644,\"start\":77636},{\"end\":77908,\"start\":77900},{\"end\":78015,\"start\":78007},{\"end\":78079,\"start\":78071},{\"end\":78217,\"start\":78199},{\"end\":78479,\"start\":78461},{\"end\":78701,\"start\":78692},{\"end\":78842,\"start\":78833},{\"end\":78947,\"start\":78938},{\"end\":79131,\"start\":79122},{\"end\":79337,\"start\":79327},{\"end\":2766,\"start\":2751},{\"end\":7496,\"start\":7447},{\"end\":9518,\"start\":9474},{\"end\":14714,\"start\":14698},{\"end\":16543,\"start\":16513},{\"end\":16890,\"start\":16851},{\"end\":21736,\"start\":21694},{\"end\":25653,\"start\":25612},{\"end\":27174,\"start\":27142},{\"end\":30572,\"start\":30547},{\"end\":33007,\"start\":32977},{\"end\":40031,\"start\":40011},{\"end\":40155,\"start\":40144},{\"end\":41228,\"start\":41219},{\"end\":42423,\"start\":42413},{\"end\":43765,\"start\":43722},{\"end\":44289,\"start\":44241},{\"end\":46745,\"start\":46698},{\"end\":50092,\"start\":50043},{\"end\":52296,\"start\":52239},{\"end\":55773,\"start\":55739},{\"end\":60409,\"start\":60362},{\"end\":61022,\"start\":60988},{\"end\":61789,\"start\":61756},{\"end\":63076,\"start\":63037},{\"end\":66952,\"start\":66934},{\"end\":70757,\"start\":70727},{\"end\":71872,\"start\":71864},{\"end\":71901,\"start\":71875},{\"end\":72680,\"start\":72664},{\"end\":75129,\"start\":75094},{\"end\":77175,\"start\":77167},{\"end\":77352,\"start\":77344},{\"end\":77485,\"start\":77477},{\"end\":77644,\"start\":77636},{\"end\":77908,\"start\":77900},{\"end\":78015,\"start\":78007},{\"end\":78079,\"start\":78071},{\"end\":78217,\"start\":78199},{\"end\":78479,\"start\":78461},{\"end\":78701,\"start\":78692},{\"end\":78842,\"start\":78833},{\"end\":78947,\"start\":78938},{\"end\":79131,\"start\":79122},{\"end\":79337,\"start\":79327}]", "table": "[{\"end\":79325,\"start\":79190},{\"end\":79325,\"start\":79190}]", "figure_caption": "[{\"end\":77342,\"start\":77177},{\"end\":77475,\"start\":77354},{\"end\":77634,\"start\":77487},{\"end\":77807,\"start\":77646},{\"end\":77898,\"start\":77810},{\"end\":78005,\"start\":77910},{\"end\":78069,\"start\":78017},{\"end\":78197,\"start\":78081},{\"end\":78459,\"start\":78222},{\"end\":78690,\"start\":78484},{\"end\":78831,\"start\":78704},{\"end\":78936,\"start\":78845},{\"end\":79120,\"start\":78950},{\"end\":79190,\"start\":79133},{\"end\":79450,\"start\":79340},{\"end\":77342,\"start\":77177},{\"end\":77475,\"start\":77354},{\"end\":77634,\"start\":77487},{\"end\":77807,\"start\":77646},{\"end\":77898,\"start\":77810},{\"end\":78005,\"start\":77910},{\"end\":78069,\"start\":78017},{\"end\":78197,\"start\":78081},{\"end\":78459,\"start\":78222},{\"end\":78690,\"start\":78484},{\"end\":78831,\"start\":78704},{\"end\":78936,\"start\":78845},{\"end\":79120,\"start\":78950},{\"end\":79190,\"start\":79133},{\"end\":79450,\"start\":79340}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":8440,\"start\":8432},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13326,\"start\":13318},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":28484,\"start\":28475},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33752,\"start\":33743},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":33768,\"start\":33759},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34061,\"start\":34052},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34072,\"start\":34063},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34791,\"start\":34782},{\"end\":36327,\"start\":36319},{\"end\":36936,\"start\":36928},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":37131,\"start\":37123},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":39213,\"start\":39205},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":44982,\"start\":44973},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":45054,\"start\":45045},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":47086,\"start\":47078},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":48434,\"start\":48426},{\"end\":50612,\"start\":50604},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":50730,\"start\":50722},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":51643,\"start\":51634},{\"end\":52019,\"start\":52013},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":52871,\"start\":52863},{\"end\":52909,\"start\":52901},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":55053,\"start\":55044},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":56447,\"start\":56438},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":58709,\"start\":58700},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":59785,\"start\":59776},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":65431,\"start\":65424},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":65958,\"start\":65949},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72017,\"start\":72008},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72211,\"start\":72202},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72225,\"start\":72216},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72402,\"start\":72393},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72563,\"start\":72554},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":73360,\"start\":73353},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75218,\"start\":75209},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75753,\"start\":75744},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":76271,\"start\":76264},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":8440,\"start\":8432},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13326,\"start\":13318},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":28484,\"start\":28475},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33752,\"start\":33743},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":33768,\"start\":33759},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34061,\"start\":34052},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34072,\"start\":34063},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34791,\"start\":34782},{\"end\":36327,\"start\":36319},{\"end\":36936,\"start\":36928},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":37131,\"start\":37123},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":39213,\"start\":39205},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":44982,\"start\":44973},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":45054,\"start\":45045},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":47086,\"start\":47078},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":48434,\"start\":48426},{\"end\":50612,\"start\":50604},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":50730,\"start\":50722},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":51643,\"start\":51634},{\"end\":52019,\"start\":52013},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":52871,\"start\":52863},{\"end\":52909,\"start\":52901},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":55053,\"start\":55044},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":56447,\"start\":56438},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":58709,\"start\":58700},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":59785,\"start\":59776},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":65431,\"start\":65424},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":65958,\"start\":65949},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72017,\"start\":72008},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72211,\"start\":72202},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72225,\"start\":72216},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72402,\"start\":72393},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":72563,\"start\":72554},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":73360,\"start\":73353},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75218,\"start\":75209},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":75753,\"start\":75744},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":76271,\"start\":76264}]", "bib_author_first_name": "[{\"end\":80112,\"start\":80111},{\"end\":80121,\"start\":80120},{\"end\":80131,\"start\":80130},{\"end\":80139,\"start\":80138},{\"end\":80147,\"start\":80146},{\"end\":80156,\"start\":80155},{\"end\":80164,\"start\":80163},{\"end\":80173,\"start\":80172},{\"end\":80185,\"start\":80184},{\"end\":80195,\"start\":80194},{\"end\":80501,\"start\":80500},{\"end\":80503,\"start\":80502},{\"end\":80514,\"start\":80513},{\"end\":80803,\"start\":80802},{\"end\":80813,\"start\":80812},{\"end\":80820,\"start\":80819},{\"end\":80974,\"start\":80973},{\"end\":80985,\"start\":80984},{\"end\":80995,\"start\":80994},{\"end\":81004,\"start\":81003},{\"end\":81006,\"start\":81005},{\"end\":81016,\"start\":81015},{\"end\":81018,\"start\":81017},{\"end\":81385,\"start\":81384},{\"end\":81395,\"start\":81394},{\"end\":81405,\"start\":81404},{\"end\":81415,\"start\":81414},{\"end\":81690,\"start\":81689},{\"end\":81700,\"start\":81699},{\"end\":81710,\"start\":81709},{\"end\":81718,\"start\":81717},{\"end\":82269,\"start\":82268},{\"end\":82278,\"start\":82277},{\"end\":82286,\"start\":82285},{\"end\":82295,\"start\":82294},{\"end\":82304,\"start\":82303},{\"end\":82311,\"start\":82310},{\"end\":82320,\"start\":82319},{\"end\":82334,\"start\":82333},{\"end\":82712,\"start\":82711},{\"end\":82714,\"start\":82713},{\"end\":82724,\"start\":82723},{\"end\":82730,\"start\":82729},{\"end\":82736,\"start\":82735},{\"end\":82971,\"start\":82970},{\"end\":82982,\"start\":82981},{\"end\":83208,\"start\":83207},{\"end\":83220,\"start\":83219},{\"end\":83234,\"start\":83233},{\"end\":83469,\"start\":83468},{\"end\":83477,\"start\":83476},{\"end\":83485,\"start\":83484},{\"end\":83499,\"start\":83498},{\"end\":83912,\"start\":83911},{\"end\":83920,\"start\":83919},{\"end\":83933,\"start\":83932},{\"end\":84467,\"start\":84466},{\"end\":84469,\"start\":84468},{\"end\":84477,\"start\":84476},{\"end\":84479,\"start\":84478},{\"end\":84489,\"start\":84488},{\"end\":84497,\"start\":84496},{\"end\":84900,\"start\":84899},{\"end\":84908,\"start\":84907},{\"end\":84916,\"start\":84915},{\"end\":84929,\"start\":84925},{\"end\":84935,\"start\":84934},{\"end\":84941,\"start\":84940},{\"end\":85299,\"start\":85298},{\"end\":85301,\"start\":85300},{\"end\":85308,\"start\":85307},{\"end\":85310,\"start\":85309},{\"end\":85506,\"start\":85505},{\"end\":85518,\"start\":85517},{\"end\":85912,\"start\":85911},{\"end\":85923,\"start\":85922},{\"end\":85934,\"start\":85933},{\"end\":85947,\"start\":85946},{\"end\":85956,\"start\":85955},{\"end\":85962,\"start\":85961},{\"end\":85973,\"start\":85972},{\"end\":85984,\"start\":85983},{\"end\":86249,\"start\":86248},{\"end\":86256,\"start\":86255},{\"end\":86263,\"start\":86262},{\"end\":86272,\"start\":86271},{\"end\":86279,\"start\":86278},{\"end\":86490,\"start\":86489},{\"end\":86498,\"start\":86497},{\"end\":86504,\"start\":86503},{\"end\":86514,\"start\":86513},{\"end\":86771,\"start\":86770},{\"end\":86779,\"start\":86778},{\"end\":87127,\"start\":87126},{\"end\":87129,\"start\":87128},{\"end\":87143,\"start\":87142},{\"end\":87153,\"start\":87152},{\"end\":87408,\"start\":87407},{\"end\":87414,\"start\":87413},{\"end\":87430,\"start\":87429},{\"end\":87664,\"start\":87663},{\"end\":87666,\"start\":87665},{\"end\":87823,\"start\":87822},{\"end\":87829,\"start\":87828},{\"end\":87838,\"start\":87837},{\"end\":87845,\"start\":87844},{\"end\":88182,\"start\":88181},{\"end\":88301,\"start\":88300},{\"end\":88309,\"start\":88308},{\"end\":88317,\"start\":88316},{\"end\":88323,\"start\":88322},{\"end\":88325,\"start\":88324},{\"end\":88751,\"start\":88750},{\"end\":88753,\"start\":88752},{\"end\":88760,\"start\":88759},{\"end\":89002,\"start\":89001},{\"end\":89013,\"start\":89012},{\"end\":89027,\"start\":89026},{\"end\":89274,\"start\":89273},{\"end\":89280,\"start\":89279},{\"end\":89286,\"start\":89285},{\"end\":89293,\"start\":89292},{\"end\":89299,\"start\":89298},{\"end\":89301,\"start\":89300},{\"end\":89689,\"start\":89688},{\"end\":89696,\"start\":89695},{\"end\":89702,\"start\":89701},{\"end\":89717,\"start\":89716},{\"end\":90102,\"start\":90101},{\"end\":90109,\"start\":90108},{\"end\":90117,\"start\":90116},{\"end\":90124,\"start\":90123},{\"end\":90491,\"start\":90490},{\"end\":90498,\"start\":90497},{\"end\":90504,\"start\":90503},{\"end\":90516,\"start\":90512},{\"end\":90523,\"start\":90522},{\"end\":90531,\"start\":90530},{\"end\":90539,\"start\":90538},{\"end\":90678,\"start\":90677},{\"end\":90685,\"start\":90684},{\"end\":90692,\"start\":90691},{\"end\":90935,\"start\":90934},{\"end\":90937,\"start\":90936},{\"end\":91138,\"start\":91137},{\"end\":91145,\"start\":91144},{\"end\":91760,\"start\":91756},{\"end\":91780,\"start\":91779},{\"end\":91789,\"start\":91788},{\"end\":91798,\"start\":91797},{\"end\":92152,\"start\":92151},{\"end\":92170,\"start\":92169},{\"end\":92180,\"start\":92179},{\"end\":92192,\"start\":92191},{\"end\":92203,\"start\":92202},{\"end\":92219,\"start\":92218},{\"end\":92221,\"start\":92220},{\"end\":92229,\"start\":92228},{\"end\":92850,\"start\":92849},{\"end\":92862,\"start\":92861},{\"end\":92874,\"start\":92873},{\"end\":93193,\"start\":93192},{\"end\":93205,\"start\":93204},{\"end\":93217,\"start\":93216},{\"end\":93231,\"start\":93230},{\"end\":93238,\"start\":93237},{\"end\":93240,\"start\":93239},{\"end\":93249,\"start\":93248},{\"end\":93909,\"start\":93908},{\"end\":93911,\"start\":93910},{\"end\":93921,\"start\":93920},{\"end\":93932,\"start\":93931},{\"end\":94297,\"start\":94296},{\"end\":94305,\"start\":94304},{\"end\":94600,\"start\":94599},{\"end\":94608,\"start\":94607},{\"end\":94995,\"start\":94994},{\"end\":95006,\"start\":95005},{\"end\":95022,\"start\":95021},{\"end\":95477,\"start\":95476},{\"end\":95487,\"start\":95486},{\"end\":95502,\"start\":95501},{\"end\":95511,\"start\":95510},{\"end\":95513,\"start\":95512},{\"end\":96013,\"start\":96012},{\"end\":96023,\"start\":96022},{\"end\":96032,\"start\":96031},{\"end\":96034,\"start\":96033},{\"end\":96046,\"start\":96045},{\"end\":96054,\"start\":96053},{\"end\":96063,\"start\":96062},{\"end\":96084,\"start\":96083},{\"end\":96101,\"start\":96100},{\"end\":96115,\"start\":96114},{\"end\":96133,\"start\":96132},{\"end\":96473,\"start\":96472},{\"end\":96487,\"start\":96486},{\"end\":96489,\"start\":96488},{\"end\":96496,\"start\":96495},{\"end\":96682,\"start\":96681},{\"end\":96689,\"start\":96688},{\"end\":96697,\"start\":96696},{\"end\":97123,\"start\":97122},{\"end\":97134,\"start\":97133},{\"end\":97142,\"start\":97141},{\"end\":97153,\"start\":97152},{\"end\":97570,\"start\":97569},{\"end\":97582,\"start\":97581},{\"end\":97899,\"start\":97898},{\"end\":98049,\"start\":98048},{\"end\":98057,\"start\":98056},{\"end\":98064,\"start\":98063},{\"end\":98070,\"start\":98069},{\"end\":98318,\"start\":98317},{\"end\":98326,\"start\":98325},{\"end\":98337,\"start\":98336},{\"end\":98698,\"start\":98697},{\"end\":98706,\"start\":98705},{\"end\":98716,\"start\":98715},{\"end\":98725,\"start\":98724},{\"end\":98735,\"start\":98734},{\"end\":98745,\"start\":98744},{\"end\":98964,\"start\":98963},{\"end\":98973,\"start\":98972},{\"end\":98983,\"start\":98982},{\"end\":98992,\"start\":98991},{\"end\":99001,\"start\":99000},{\"end\":99012,\"start\":99011},{\"end\":99023,\"start\":99022},{\"end\":99029,\"start\":99028},{\"end\":99257,\"start\":99256},{\"end\":99265,\"start\":99264},{\"end\":99271,\"start\":99270},{\"end\":99277,\"start\":99276},{\"end\":99586,\"start\":99585},{\"end\":99595,\"start\":99594},{\"end\":99873,\"start\":99872},{\"end\":100144,\"start\":100143},{\"end\":100153,\"start\":100152},{\"end\":100163,\"start\":100162},{\"end\":100172,\"start\":100171},{\"end\":100181,\"start\":100180},{\"end\":100602,\"start\":100601},{\"end\":100610,\"start\":100609},{\"end\":100617,\"start\":100616},{\"end\":80112,\"start\":80111},{\"end\":80121,\"start\":80120},{\"end\":80131,\"start\":80130},{\"end\":80139,\"start\":80138},{\"end\":80147,\"start\":80146},{\"end\":80156,\"start\":80155},{\"end\":80164,\"start\":80163},{\"end\":80173,\"start\":80172},{\"end\":80185,\"start\":80184},{\"end\":80195,\"start\":80194},{\"end\":80501,\"start\":80500},{\"end\":80503,\"start\":80502},{\"end\":80514,\"start\":80513},{\"end\":80803,\"start\":80802},{\"end\":80813,\"start\":80812},{\"end\":80820,\"start\":80819},{\"end\":80974,\"start\":80973},{\"end\":80985,\"start\":80984},{\"end\":80995,\"start\":80994},{\"end\":81004,\"start\":81003},{\"end\":81006,\"start\":81005},{\"end\":81016,\"start\":81015},{\"end\":81018,\"start\":81017},{\"end\":81385,\"start\":81384},{\"end\":81395,\"start\":81394},{\"end\":81405,\"start\":81404},{\"end\":81415,\"start\":81414},{\"end\":81690,\"start\":81689},{\"end\":81700,\"start\":81699},{\"end\":81710,\"start\":81709},{\"end\":81718,\"start\":81717},{\"end\":82269,\"start\":82268},{\"end\":82278,\"start\":82277},{\"end\":82286,\"start\":82285},{\"end\":82295,\"start\":82294},{\"end\":82304,\"start\":82303},{\"end\":82311,\"start\":82310},{\"end\":82320,\"start\":82319},{\"end\":82334,\"start\":82333},{\"end\":82712,\"start\":82711},{\"end\":82714,\"start\":82713},{\"end\":82724,\"start\":82723},{\"end\":82730,\"start\":82729},{\"end\":82736,\"start\":82735},{\"end\":82971,\"start\":82970},{\"end\":82982,\"start\":82981},{\"end\":83208,\"start\":83207},{\"end\":83220,\"start\":83219},{\"end\":83234,\"start\":83233},{\"end\":83469,\"start\":83468},{\"end\":83477,\"start\":83476},{\"end\":83485,\"start\":83484},{\"end\":83499,\"start\":83498},{\"end\":83912,\"start\":83911},{\"end\":83920,\"start\":83919},{\"end\":83933,\"start\":83932},{\"end\":84467,\"start\":84466},{\"end\":84469,\"start\":84468},{\"end\":84477,\"start\":84476},{\"end\":84479,\"start\":84478},{\"end\":84489,\"start\":84488},{\"end\":84497,\"start\":84496},{\"end\":84900,\"start\":84899},{\"end\":84908,\"start\":84907},{\"end\":84916,\"start\":84915},{\"end\":84929,\"start\":84925},{\"end\":84935,\"start\":84934},{\"end\":84941,\"start\":84940},{\"end\":85299,\"start\":85298},{\"end\":85301,\"start\":85300},{\"end\":85308,\"start\":85307},{\"end\":85310,\"start\":85309},{\"end\":85506,\"start\":85505},{\"end\":85518,\"start\":85517},{\"end\":85912,\"start\":85911},{\"end\":85923,\"start\":85922},{\"end\":85934,\"start\":85933},{\"end\":85947,\"start\":85946},{\"end\":85956,\"start\":85955},{\"end\":85962,\"start\":85961},{\"end\":85973,\"start\":85972},{\"end\":85984,\"start\":85983},{\"end\":86249,\"start\":86248},{\"end\":86256,\"start\":86255},{\"end\":86263,\"start\":86262},{\"end\":86272,\"start\":86271},{\"end\":86279,\"start\":86278},{\"end\":86490,\"start\":86489},{\"end\":86498,\"start\":86497},{\"end\":86504,\"start\":86503},{\"end\":86514,\"start\":86513},{\"end\":86771,\"start\":86770},{\"end\":86779,\"start\":86778},{\"end\":87127,\"start\":87126},{\"end\":87129,\"start\":87128},{\"end\":87143,\"start\":87142},{\"end\":87153,\"start\":87152},{\"end\":87408,\"start\":87407},{\"end\":87414,\"start\":87413},{\"end\":87430,\"start\":87429},{\"end\":87664,\"start\":87663},{\"end\":87666,\"start\":87665},{\"end\":87823,\"start\":87822},{\"end\":87829,\"start\":87828},{\"end\":87838,\"start\":87837},{\"end\":87845,\"start\":87844},{\"end\":88182,\"start\":88181},{\"end\":88301,\"start\":88300},{\"end\":88309,\"start\":88308},{\"end\":88317,\"start\":88316},{\"end\":88323,\"start\":88322},{\"end\":88325,\"start\":88324},{\"end\":88751,\"start\":88750},{\"end\":88753,\"start\":88752},{\"end\":88760,\"start\":88759},{\"end\":89002,\"start\":89001},{\"end\":89013,\"start\":89012},{\"end\":89027,\"start\":89026},{\"end\":89274,\"start\":89273},{\"end\":89280,\"start\":89279},{\"end\":89286,\"start\":89285},{\"end\":89293,\"start\":89292},{\"end\":89299,\"start\":89298},{\"end\":89301,\"start\":89300},{\"end\":89689,\"start\":89688},{\"end\":89696,\"start\":89695},{\"end\":89702,\"start\":89701},{\"end\":89717,\"start\":89716},{\"end\":90102,\"start\":90101},{\"end\":90109,\"start\":90108},{\"end\":90117,\"start\":90116},{\"end\":90124,\"start\":90123},{\"end\":90491,\"start\":90490},{\"end\":90498,\"start\":90497},{\"end\":90504,\"start\":90503},{\"end\":90516,\"start\":90512},{\"end\":90523,\"start\":90522},{\"end\":90531,\"start\":90530},{\"end\":90539,\"start\":90538},{\"end\":90678,\"start\":90677},{\"end\":90685,\"start\":90684},{\"end\":90692,\"start\":90691},{\"end\":90935,\"start\":90934},{\"end\":90937,\"start\":90936},{\"end\":91138,\"start\":91137},{\"end\":91145,\"start\":91144},{\"end\":91760,\"start\":91756},{\"end\":91780,\"start\":91779},{\"end\":91789,\"start\":91788},{\"end\":91798,\"start\":91797},{\"end\":92152,\"start\":92151},{\"end\":92170,\"start\":92169},{\"end\":92180,\"start\":92179},{\"end\":92192,\"start\":92191},{\"end\":92203,\"start\":92202},{\"end\":92219,\"start\":92218},{\"end\":92221,\"start\":92220},{\"end\":92229,\"start\":92228},{\"end\":92850,\"start\":92849},{\"end\":92862,\"start\":92861},{\"end\":92874,\"start\":92873},{\"end\":93193,\"start\":93192},{\"end\":93205,\"start\":93204},{\"end\":93217,\"start\":93216},{\"end\":93231,\"start\":93230},{\"end\":93238,\"start\":93237},{\"end\":93240,\"start\":93239},{\"end\":93249,\"start\":93248},{\"end\":93909,\"start\":93908},{\"end\":93911,\"start\":93910},{\"end\":93921,\"start\":93920},{\"end\":93932,\"start\":93931},{\"end\":94297,\"start\":94296},{\"end\":94305,\"start\":94304},{\"end\":94600,\"start\":94599},{\"end\":94608,\"start\":94607},{\"end\":94995,\"start\":94994},{\"end\":95006,\"start\":95005},{\"end\":95022,\"start\":95021},{\"end\":95477,\"start\":95476},{\"end\":95487,\"start\":95486},{\"end\":95502,\"start\":95501},{\"end\":95511,\"start\":95510},{\"end\":95513,\"start\":95512},{\"end\":96013,\"start\":96012},{\"end\":96023,\"start\":96022},{\"end\":96032,\"start\":96031},{\"end\":96034,\"start\":96033},{\"end\":96046,\"start\":96045},{\"end\":96054,\"start\":96053},{\"end\":96063,\"start\":96062},{\"end\":96084,\"start\":96083},{\"end\":96101,\"start\":96100},{\"end\":96115,\"start\":96114},{\"end\":96133,\"start\":96132},{\"end\":96473,\"start\":96472},{\"end\":96487,\"start\":96486},{\"end\":96489,\"start\":96488},{\"end\":96496,\"start\":96495},{\"end\":96682,\"start\":96681},{\"end\":96689,\"start\":96688},{\"end\":96697,\"start\":96696},{\"end\":97123,\"start\":97122},{\"end\":97134,\"start\":97133},{\"end\":97142,\"start\":97141},{\"end\":97153,\"start\":97152},{\"end\":97570,\"start\":97569},{\"end\":97582,\"start\":97581},{\"end\":97899,\"start\":97898},{\"end\":98049,\"start\":98048},{\"end\":98057,\"start\":98056},{\"end\":98064,\"start\":98063},{\"end\":98070,\"start\":98069},{\"end\":98318,\"start\":98317},{\"end\":98326,\"start\":98325},{\"end\":98337,\"start\":98336},{\"end\":98698,\"start\":98697},{\"end\":98706,\"start\":98705},{\"end\":98716,\"start\":98715},{\"end\":98725,\"start\":98724},{\"end\":98735,\"start\":98734},{\"end\":98745,\"start\":98744},{\"end\":98964,\"start\":98963},{\"end\":98973,\"start\":98972},{\"end\":98983,\"start\":98982},{\"end\":98992,\"start\":98991},{\"end\":99001,\"start\":99000},{\"end\":99012,\"start\":99011},{\"end\":99023,\"start\":99022},{\"end\":99029,\"start\":99028},{\"end\":99257,\"start\":99256},{\"end\":99265,\"start\":99264},{\"end\":99271,\"start\":99270},{\"end\":99277,\"start\":99276},{\"end\":99586,\"start\":99585},{\"end\":99595,\"start\":99594},{\"end\":99873,\"start\":99872},{\"end\":100144,\"start\":100143},{\"end\":100153,\"start\":100152},{\"end\":100163,\"start\":100162},{\"end\":100172,\"start\":100171},{\"end\":100181,\"start\":100180},{\"end\":100602,\"start\":100601},{\"end\":100610,\"start\":100609},{\"end\":100617,\"start\":100616}]", "bib_author_last_name": "[{\"end\":80118,\"start\":80113},{\"end\":80128,\"start\":80122},{\"end\":80136,\"start\":80132},{\"end\":80144,\"start\":80140},{\"end\":80153,\"start\":80148},{\"end\":80161,\"start\":80157},{\"end\":80170,\"start\":80165},{\"end\":80182,\"start\":80174},{\"end\":80192,\"start\":80186},{\"end\":80201,\"start\":80196},{\"end\":80511,\"start\":80504},{\"end\":80524,\"start\":80515},{\"end\":80810,\"start\":80804},{\"end\":80817,\"start\":80814},{\"end\":80828,\"start\":80821},{\"end\":80982,\"start\":80975},{\"end\":80992,\"start\":80986},{\"end\":81001,\"start\":80996},{\"end\":81013,\"start\":81007},{\"end\":81024,\"start\":81019},{\"end\":81392,\"start\":81386},{\"end\":81402,\"start\":81396},{\"end\":81412,\"start\":81406},{\"end\":81420,\"start\":81416},{\"end\":81697,\"start\":81691},{\"end\":81707,\"start\":81701},{\"end\":81715,\"start\":81711},{\"end\":81725,\"start\":81719},{\"end\":82275,\"start\":82270},{\"end\":82283,\"start\":82279},{\"end\":82292,\"start\":82287},{\"end\":82301,\"start\":82296},{\"end\":82308,\"start\":82305},{\"end\":82317,\"start\":82312},{\"end\":82331,\"start\":82321},{\"end\":82339,\"start\":82335},{\"end\":82721,\"start\":82715},{\"end\":82727,\"start\":82725},{\"end\":82733,\"start\":82731},{\"end\":82743,\"start\":82737},{\"end\":82979,\"start\":82972},{\"end\":82989,\"start\":82983},{\"end\":83217,\"start\":83209},{\"end\":83231,\"start\":83221},{\"end\":83242,\"start\":83235},{\"end\":83474,\"start\":83470},{\"end\":83482,\"start\":83478},{\"end\":83496,\"start\":83486},{\"end\":83504,\"start\":83500},{\"end\":83917,\"start\":83913},{\"end\":83930,\"start\":83921},{\"end\":83940,\"start\":83934},{\"end\":84474,\"start\":84470},{\"end\":84486,\"start\":84480},{\"end\":84494,\"start\":84490},{\"end\":84500,\"start\":84498},{\"end\":84905,\"start\":84901},{\"end\":84913,\"start\":84909},{\"end\":84923,\"start\":84917},{\"end\":84932,\"start\":84930},{\"end\":84938,\"start\":84936},{\"end\":84949,\"start\":84942},{\"end\":85305,\"start\":85302},{\"end\":85315,\"start\":85311},{\"end\":85515,\"start\":85507},{\"end\":85525,\"start\":85519},{\"end\":85920,\"start\":85913},{\"end\":85931,\"start\":85924},{\"end\":85944,\"start\":85935},{\"end\":85953,\"start\":85948},{\"end\":85959,\"start\":85957},{\"end\":85970,\"start\":85963},{\"end\":85981,\"start\":85974},{\"end\":85989,\"start\":85985},{\"end\":86253,\"start\":86250},{\"end\":86260,\"start\":86257},{\"end\":86269,\"start\":86264},{\"end\":86276,\"start\":86273},{\"end\":86286,\"start\":86280},{\"end\":86495,\"start\":86491},{\"end\":86501,\"start\":86499},{\"end\":86511,\"start\":86505},{\"end\":86518,\"start\":86515},{\"end\":86776,\"start\":86772},{\"end\":86791,\"start\":86780},{\"end\":87140,\"start\":87130},{\"end\":87150,\"start\":87144},{\"end\":87161,\"start\":87154},{\"end\":87411,\"start\":87409},{\"end\":87427,\"start\":87415},{\"end\":87435,\"start\":87431},{\"end\":87675,\"start\":87667},{\"end\":87826,\"start\":87824},{\"end\":87835,\"start\":87830},{\"end\":87842,\"start\":87839},{\"end\":87849,\"start\":87846},{\"end\":88186,\"start\":88183},{\"end\":88194,\"start\":88188},{\"end\":88306,\"start\":88302},{\"end\":88314,\"start\":88310},{\"end\":88320,\"start\":88318},{\"end\":88329,\"start\":88326},{\"end\":88757,\"start\":88754},{\"end\":88766,\"start\":88761},{\"end\":89010,\"start\":89003},{\"end\":89024,\"start\":89014},{\"end\":89034,\"start\":89028},{\"end\":89277,\"start\":89275},{\"end\":89283,\"start\":89281},{\"end\":89290,\"start\":89287},{\"end\":89296,\"start\":89294},{\"end\":89306,\"start\":89302},{\"end\":89693,\"start\":89690},{\"end\":89699,\"start\":89697},{\"end\":89714,\"start\":89703},{\"end\":89723,\"start\":89718},{\"end\":90106,\"start\":90103},{\"end\":90114,\"start\":90110},{\"end\":90121,\"start\":90118},{\"end\":90129,\"start\":90125},{\"end\":90495,\"start\":90492},{\"end\":90501,\"start\":90499},{\"end\":90510,\"start\":90505},{\"end\":90520,\"start\":90517},{\"end\":90528,\"start\":90524},{\"end\":90536,\"start\":90532},{\"end\":90545,\"start\":90540},{\"end\":90682,\"start\":90679},{\"end\":90689,\"start\":90686},{\"end\":90703,\"start\":90693},{\"end\":90943,\"start\":90938},{\"end\":91142,\"start\":91139},{\"end\":91149,\"start\":91146},{\"end\":91469,\"start\":91460},{\"end\":91591,\"start\":91582},{\"end\":91777,\"start\":91761},{\"end\":91786,\"start\":91781},{\"end\":91795,\"start\":91790},{\"end\":91807,\"start\":91799},{\"end\":92167,\"start\":92153},{\"end\":92177,\"start\":92171},{\"end\":92189,\"start\":92181},{\"end\":92200,\"start\":92193},{\"end\":92216,\"start\":92204},{\"end\":92226,\"start\":92222},{\"end\":92234,\"start\":92230},{\"end\":92654,\"start\":92639},{\"end\":92859,\"start\":92851},{\"end\":92871,\"start\":92863},{\"end\":92885,\"start\":92875},{\"end\":93202,\"start\":93194},{\"end\":93214,\"start\":93206},{\"end\":93228,\"start\":93218},{\"end\":93235,\"start\":93232},{\"end\":93246,\"start\":93241},{\"end\":93255,\"start\":93250},{\"end\":93918,\"start\":93912},{\"end\":93929,\"start\":93922},{\"end\":93942,\"start\":93933},{\"end\":94302,\"start\":94298},{\"end\":94309,\"start\":94306},{\"end\":94605,\"start\":94601},{\"end\":94615,\"start\":94609},{\"end\":95003,\"start\":94996},{\"end\":95019,\"start\":95007},{\"end\":95030,\"start\":95023},{\"end\":95484,\"start\":95478},{\"end\":95499,\"start\":95488},{\"end\":95508,\"start\":95503},{\"end\":95520,\"start\":95514},{\"end\":96020,\"start\":96014},{\"end\":96029,\"start\":96024},{\"end\":96043,\"start\":96035},{\"end\":96051,\"start\":96047},{\"end\":96060,\"start\":96055},{\"end\":96081,\"start\":96064},{\"end\":96098,\"start\":96085},{\"end\":96112,\"start\":96102},{\"end\":96130,\"start\":96116},{\"end\":96141,\"start\":96134},{\"end\":96484,\"start\":96474},{\"end\":96493,\"start\":96490},{\"end\":96502,\"start\":96497},{\"end\":96686,\"start\":96683},{\"end\":96694,\"start\":96690},{\"end\":96702,\"start\":96698},{\"end\":97131,\"start\":97124},{\"end\":97139,\"start\":97135},{\"end\":97150,\"start\":97143},{\"end\":97158,\"start\":97154},{\"end\":97579,\"start\":97571},{\"end\":97588,\"start\":97583},{\"end\":97911,\"start\":97900},{\"end\":98054,\"start\":98050},{\"end\":98061,\"start\":98058},{\"end\":98067,\"start\":98065},{\"end\":98074,\"start\":98071},{\"end\":98323,\"start\":98319},{\"end\":98334,\"start\":98327},{\"end\":98342,\"start\":98338},{\"end\":98703,\"start\":98699},{\"end\":98713,\"start\":98707},{\"end\":98722,\"start\":98717},{\"end\":98732,\"start\":98726},{\"end\":98742,\"start\":98736},{\"end\":98750,\"start\":98746},{\"end\":98970,\"start\":98965},{\"end\":98980,\"start\":98974},{\"end\":98989,\"start\":98984},{\"end\":98998,\"start\":98993},{\"end\":99009,\"start\":99002},{\"end\":99020,\"start\":99013},{\"end\":99026,\"start\":99024},{\"end\":99035,\"start\":99030},{\"end\":99262,\"start\":99258},{\"end\":99268,\"start\":99266},{\"end\":99274,\"start\":99272},{\"end\":99282,\"start\":99278},{\"end\":99592,\"start\":99587},{\"end\":99600,\"start\":99596},{\"end\":99880,\"start\":99874},{\"end\":100150,\"start\":100145},{\"end\":100160,\"start\":100154},{\"end\":100169,\"start\":100164},{\"end\":100178,\"start\":100173},{\"end\":100189,\"start\":100182},{\"end\":100607,\"start\":100603},{\"end\":100614,\"start\":100611},{\"end\":100621,\"start\":100618},{\"end\":80118,\"start\":80113},{\"end\":80128,\"start\":80122},{\"end\":80136,\"start\":80132},{\"end\":80144,\"start\":80140},{\"end\":80153,\"start\":80148},{\"end\":80161,\"start\":80157},{\"end\":80170,\"start\":80165},{\"end\":80182,\"start\":80174},{\"end\":80192,\"start\":80186},{\"end\":80201,\"start\":80196},{\"end\":80511,\"start\":80504},{\"end\":80524,\"start\":80515},{\"end\":80810,\"start\":80804},{\"end\":80817,\"start\":80814},{\"end\":80828,\"start\":80821},{\"end\":80982,\"start\":80975},{\"end\":80992,\"start\":80986},{\"end\":81001,\"start\":80996},{\"end\":81013,\"start\":81007},{\"end\":81024,\"start\":81019},{\"end\":81392,\"start\":81386},{\"end\":81402,\"start\":81396},{\"end\":81412,\"start\":81406},{\"end\":81420,\"start\":81416},{\"end\":81697,\"start\":81691},{\"end\":81707,\"start\":81701},{\"end\":81715,\"start\":81711},{\"end\":81725,\"start\":81719},{\"end\":82275,\"start\":82270},{\"end\":82283,\"start\":82279},{\"end\":82292,\"start\":82287},{\"end\":82301,\"start\":82296},{\"end\":82308,\"start\":82305},{\"end\":82317,\"start\":82312},{\"end\":82331,\"start\":82321},{\"end\":82339,\"start\":82335},{\"end\":82721,\"start\":82715},{\"end\":82727,\"start\":82725},{\"end\":82733,\"start\":82731},{\"end\":82743,\"start\":82737},{\"end\":82979,\"start\":82972},{\"end\":82989,\"start\":82983},{\"end\":83217,\"start\":83209},{\"end\":83231,\"start\":83221},{\"end\":83242,\"start\":83235},{\"end\":83474,\"start\":83470},{\"end\":83482,\"start\":83478},{\"end\":83496,\"start\":83486},{\"end\":83504,\"start\":83500},{\"end\":83917,\"start\":83913},{\"end\":83930,\"start\":83921},{\"end\":83940,\"start\":83934},{\"end\":84474,\"start\":84470},{\"end\":84486,\"start\":84480},{\"end\":84494,\"start\":84490},{\"end\":84500,\"start\":84498},{\"end\":84905,\"start\":84901},{\"end\":84913,\"start\":84909},{\"end\":84923,\"start\":84917},{\"end\":84932,\"start\":84930},{\"end\":84938,\"start\":84936},{\"end\":84949,\"start\":84942},{\"end\":85305,\"start\":85302},{\"end\":85315,\"start\":85311},{\"end\":85515,\"start\":85507},{\"end\":85525,\"start\":85519},{\"end\":85920,\"start\":85913},{\"end\":85931,\"start\":85924},{\"end\":85944,\"start\":85935},{\"end\":85953,\"start\":85948},{\"end\":85959,\"start\":85957},{\"end\":85970,\"start\":85963},{\"end\":85981,\"start\":85974},{\"end\":85989,\"start\":85985},{\"end\":86253,\"start\":86250},{\"end\":86260,\"start\":86257},{\"end\":86269,\"start\":86264},{\"end\":86276,\"start\":86273},{\"end\":86286,\"start\":86280},{\"end\":86495,\"start\":86491},{\"end\":86501,\"start\":86499},{\"end\":86511,\"start\":86505},{\"end\":86518,\"start\":86515},{\"end\":86776,\"start\":86772},{\"end\":86791,\"start\":86780},{\"end\":87140,\"start\":87130},{\"end\":87150,\"start\":87144},{\"end\":87161,\"start\":87154},{\"end\":87411,\"start\":87409},{\"end\":87427,\"start\":87415},{\"end\":87435,\"start\":87431},{\"end\":87675,\"start\":87667},{\"end\":87826,\"start\":87824},{\"end\":87835,\"start\":87830},{\"end\":87842,\"start\":87839},{\"end\":87849,\"start\":87846},{\"end\":88186,\"start\":88183},{\"end\":88194,\"start\":88188},{\"end\":88306,\"start\":88302},{\"end\":88314,\"start\":88310},{\"end\":88320,\"start\":88318},{\"end\":88329,\"start\":88326},{\"end\":88757,\"start\":88754},{\"end\":88766,\"start\":88761},{\"end\":89010,\"start\":89003},{\"end\":89024,\"start\":89014},{\"end\":89034,\"start\":89028},{\"end\":89277,\"start\":89275},{\"end\":89283,\"start\":89281},{\"end\":89290,\"start\":89287},{\"end\":89296,\"start\":89294},{\"end\":89306,\"start\":89302},{\"end\":89693,\"start\":89690},{\"end\":89699,\"start\":89697},{\"end\":89714,\"start\":89703},{\"end\":89723,\"start\":89718},{\"end\":90106,\"start\":90103},{\"end\":90114,\"start\":90110},{\"end\":90121,\"start\":90118},{\"end\":90129,\"start\":90125},{\"end\":90495,\"start\":90492},{\"end\":90501,\"start\":90499},{\"end\":90510,\"start\":90505},{\"end\":90520,\"start\":90517},{\"end\":90528,\"start\":90524},{\"end\":90536,\"start\":90532},{\"end\":90545,\"start\":90540},{\"end\":90682,\"start\":90679},{\"end\":90689,\"start\":90686},{\"end\":90703,\"start\":90693},{\"end\":90943,\"start\":90938},{\"end\":91142,\"start\":91139},{\"end\":91149,\"start\":91146},{\"end\":91469,\"start\":91460},{\"end\":91591,\"start\":91582},{\"end\":91777,\"start\":91761},{\"end\":91786,\"start\":91781},{\"end\":91795,\"start\":91790},{\"end\":91807,\"start\":91799},{\"end\":92167,\"start\":92153},{\"end\":92177,\"start\":92171},{\"end\":92189,\"start\":92181},{\"end\":92200,\"start\":92193},{\"end\":92216,\"start\":92204},{\"end\":92226,\"start\":92222},{\"end\":92234,\"start\":92230},{\"end\":92654,\"start\":92639},{\"end\":92859,\"start\":92851},{\"end\":92871,\"start\":92863},{\"end\":92885,\"start\":92875},{\"end\":93202,\"start\":93194},{\"end\":93214,\"start\":93206},{\"end\":93228,\"start\":93218},{\"end\":93235,\"start\":93232},{\"end\":93246,\"start\":93241},{\"end\":93255,\"start\":93250},{\"end\":93918,\"start\":93912},{\"end\":93929,\"start\":93922},{\"end\":93942,\"start\":93933},{\"end\":94302,\"start\":94298},{\"end\":94309,\"start\":94306},{\"end\":94605,\"start\":94601},{\"end\":94615,\"start\":94609},{\"end\":95003,\"start\":94996},{\"end\":95019,\"start\":95007},{\"end\":95030,\"start\":95023},{\"end\":95484,\"start\":95478},{\"end\":95499,\"start\":95488},{\"end\":95508,\"start\":95503},{\"end\":95520,\"start\":95514},{\"end\":96020,\"start\":96014},{\"end\":96029,\"start\":96024},{\"end\":96043,\"start\":96035},{\"end\":96051,\"start\":96047},{\"end\":96060,\"start\":96055},{\"end\":96081,\"start\":96064},{\"end\":96098,\"start\":96085},{\"end\":96112,\"start\":96102},{\"end\":96130,\"start\":96116},{\"end\":96141,\"start\":96134},{\"end\":96484,\"start\":96474},{\"end\":96493,\"start\":96490},{\"end\":96502,\"start\":96497},{\"end\":96686,\"start\":96683},{\"end\":96694,\"start\":96690},{\"end\":96702,\"start\":96698},{\"end\":97131,\"start\":97124},{\"end\":97139,\"start\":97135},{\"end\":97150,\"start\":97143},{\"end\":97158,\"start\":97154},{\"end\":97579,\"start\":97571},{\"end\":97588,\"start\":97583},{\"end\":97911,\"start\":97900},{\"end\":98054,\"start\":98050},{\"end\":98061,\"start\":98058},{\"end\":98067,\"start\":98065},{\"end\":98074,\"start\":98071},{\"end\":98323,\"start\":98319},{\"end\":98334,\"start\":98327},{\"end\":98342,\"start\":98338},{\"end\":98703,\"start\":98699},{\"end\":98713,\"start\":98707},{\"end\":98722,\"start\":98717},{\"end\":98732,\"start\":98726},{\"end\":98742,\"start\":98736},{\"end\":98750,\"start\":98746},{\"end\":98970,\"start\":98965},{\"end\":98980,\"start\":98974},{\"end\":98989,\"start\":98984},{\"end\":98998,\"start\":98993},{\"end\":99009,\"start\":99002},{\"end\":99020,\"start\":99013},{\"end\":99026,\"start\":99024},{\"end\":99035,\"start\":99030},{\"end\":99262,\"start\":99258},{\"end\":99268,\"start\":99266},{\"end\":99274,\"start\":99272},{\"end\":99282,\"start\":99278},{\"end\":99592,\"start\":99587},{\"end\":99600,\"start\":99596},{\"end\":99880,\"start\":99874},{\"end\":100150,\"start\":100145},{\"end\":100160,\"start\":100154},{\"end\":100169,\"start\":100164},{\"end\":100178,\"start\":100173},{\"end\":100189,\"start\":100182},{\"end\":100607,\"start\":100603},{\"end\":100614,\"start\":100611},{\"end\":100621,\"start\":100618}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":6287870},\"end\":80413,\"start\":80056},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":17053719},\"end\":80746,\"start\":80415},{\"attributes\":{\"id\":\"b2\"},\"end\":80939,\"start\":80748},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":15523031},\"end\":81334,\"start\":80941},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":15924603},\"end\":81649,\"start\":81336},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":40443598},\"end\":82218,\"start\":81651},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":5948663},\"end\":82671,\"start\":82220},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":7128002},\"end\":82914,\"start\":82673},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":2893830},\"end\":83175,\"start\":82916},{\"attributes\":{\"doi\":\"arXiv:1611.02315\",\"id\":\"b9\"},\"end\":83388,\"start\":83177},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":15693605},\"end\":83845,\"start\":83390},{\"attributes\":{\"doi\":\"arXiv:1301.2725\",\"id\":\"b11\"},\"end\":84114,\"start\":83847},{\"attributes\":{\"id\":\"b12\"},\"end\":84234,\"start\":84116},{\"attributes\":{\"id\":\"b13\"},\"end\":84383,\"start\":84236},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":206741418},\"end\":84844,\"start\":84385},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":57246310},\"end\":85214,\"start\":84846},{\"attributes\":{\"id\":\"b16\"},\"end\":85426,\"start\":85216},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":5686768},\"end\":85851,\"start\":85428},{\"attributes\":{\"doi\":\"arXiv:1707.08945\",\"id\":\"b18\"},\"end\":86211,\"start\":85853},{\"attributes\":{\"doi\":\"arXiv:1403.2802\",\"id\":\"b19\"},\"end\":86440,\"start\":86213},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":7703595},\"end\":86731,\"start\":86442},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":1547688},\"end\":87076,\"start\":86733},{\"attributes\":{\"doi\":\"arXiv:1412.6572\",\"id\":\"b22\"},\"end\":87324,\"start\":87078},{\"attributes\":{\"doi\":\"arXiv:1708.06733\",\"id\":\"b23\"},\"end\":87627,\"start\":87326},{\"attributes\":{\"id\":\"b24\"},\"end\":87774,\"start\":87629},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":206594692},\"end\":88177,\"start\":87776},{\"attributes\":{\"id\":\"b26\"},\"end\":88245,\"start\":88179},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":162963},\"end\":88687,\"start\":88247},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":13193974},\"end\":88955,\"start\":88689},{\"attributes\":{\"doi\":\"arXiv:1607.02533\",\"id\":\"b29\"},\"end\":89192,\"start\":88957},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":8623180},\"end\":89643,\"start\":89194},{\"attributes\":{\"doi\":\"arXiv:1608.02257\",\"id\":\"b31\"},\"end\":89883,\"start\":89645},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":721235},\"end\":90029,\"start\":89885},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":17707860},\"end\":90451,\"start\":90031},{\"attributes\":{\"id\":\"b34\"},\"end\":90659,\"start\":90453},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":12625409},\"end\":90884,\"start\":90661},{\"attributes\":{\"id\":\"b36\"},\"end\":91090,\"start\":90886},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":9969658},\"end\":91243,\"start\":91092},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":9746839},\"end\":91441,\"start\":91245},{\"attributes\":{\"id\":\"b39\"},\"end\":91536,\"start\":91443},{\"attributes\":{\"id\":\"b40\"},\"end\":91717,\"start\":91538},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":11558223},\"end\":92070,\"start\":91719},{\"attributes\":{\"doi\":\"arXiv:1708.08689\",\"id\":\"b42\"},\"end\":92484,\"start\":92072},{\"attributes\":{\"id\":\"b43\"},\"end\":92617,\"start\":92486},{\"attributes\":{\"id\":\"b44\"},\"end\":92747,\"start\":92619},{\"attributes\":{\"doi\":\"arXiv:1605.07277\",\"id\":\"b45\"},\"end\":93104,\"start\":92749},{\"attributes\":{\"doi\":\"arXiv:1602.02697\",\"id\":\"b46\"},\"end\":93489,\"start\":93106},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":1090603},\"end\":93883,\"start\":93491},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":4637184},\"end\":94190,\"start\":93885},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":12854315},\"end\":94506,\"start\":94192},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":9302624},\"end\":94926,\"start\":94508},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":206592766},\"end\":95386,\"start\":94928},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":207241700},\"end\":95942,\"start\":95388},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":515925},\"end\":96423,\"start\":95944},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":35426171},\"end\":96613,\"start\":96425},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":206592295},\"end\":97045,\"start\":96615},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":2814088},\"end\":97526,\"start\":97047},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":195700237},\"end\":97885,\"start\":97528},{\"attributes\":{\"id\":\"b58\"},\"end\":97988,\"start\":97887},{\"attributes\":{\"doi\":\"arXiv:1409.5188\",\"id\":\"b59\"},\"end\":98238,\"start\":97990},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":9898157},\"end\":98634,\"start\":98240},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":5077922},\"end\":98900,\"start\":98636},{\"attributes\":{\"doi\":\"arXiv:1610.05256\",\"id\":\"b62\"},\"end\":99254,\"start\":98902},{\"attributes\":{\"doi\":\"arXiv:1703.01340\",\"id\":\"b63\"},\"end\":99510,\"start\":99256},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":5092965},\"end\":99806,\"start\":99512},{\"attributes\":{\"id\":\"b65\"},\"end\":100077,\"start\":99808},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":6212000},\"end\":100526,\"start\":100079},{\"attributes\":{\"doi\":\"arXiv:1501.04690\",\"id\":\"b67\"},\"end\":100795,\"start\":100528},{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":6287870},\"end\":80413,\"start\":80056},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":17053719},\"end\":80746,\"start\":80415},{\"attributes\":{\"id\":\"b2\"},\"end\":80939,\"start\":80748},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":15523031},\"end\":81334,\"start\":80941},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":15924603},\"end\":81649,\"start\":81336},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":40443598},\"end\":82218,\"start\":81651},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":5948663},\"end\":82671,\"start\":82220},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":7128002},\"end\":82914,\"start\":82673},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":2893830},\"end\":83175,\"start\":82916},{\"attributes\":{\"doi\":\"arXiv:1611.02315\",\"id\":\"b9\"},\"end\":83388,\"start\":83177},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":15693605},\"end\":83845,\"start\":83390},{\"attributes\":{\"doi\":\"arXiv:1301.2725\",\"id\":\"b11\"},\"end\":84114,\"start\":83847},{\"attributes\":{\"id\":\"b12\"},\"end\":84234,\"start\":84116},{\"attributes\":{\"id\":\"b13\"},\"end\":84383,\"start\":84236},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":206741418},\"end\":84844,\"start\":84385},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":57246310},\"end\":85214,\"start\":84846},{\"attributes\":{\"id\":\"b16\"},\"end\":85426,\"start\":85216},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":5686768},\"end\":85851,\"start\":85428},{\"attributes\":{\"doi\":\"arXiv:1707.08945\",\"id\":\"b18\"},\"end\":86211,\"start\":85853},{\"attributes\":{\"doi\":\"arXiv:1403.2802\",\"id\":\"b19\"},\"end\":86440,\"start\":86213},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":7703595},\"end\":86731,\"start\":86442},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":1547688},\"end\":87076,\"start\":86733},{\"attributes\":{\"doi\":\"arXiv:1412.6572\",\"id\":\"b22\"},\"end\":87324,\"start\":87078},{\"attributes\":{\"doi\":\"arXiv:1708.06733\",\"id\":\"b23\"},\"end\":87627,\"start\":87326},{\"attributes\":{\"id\":\"b24\"},\"end\":87774,\"start\":87629},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":206594692},\"end\":88177,\"start\":87776},{\"attributes\":{\"id\":\"b26\"},\"end\":88245,\"start\":88179},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":162963},\"end\":88687,\"start\":88247},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":13193974},\"end\":88955,\"start\":88689},{\"attributes\":{\"doi\":\"arXiv:1607.02533\",\"id\":\"b29\"},\"end\":89192,\"start\":88957},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":8623180},\"end\":89643,\"start\":89194},{\"attributes\":{\"doi\":\"arXiv:1608.02257\",\"id\":\"b31\"},\"end\":89883,\"start\":89645},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":721235},\"end\":90029,\"start\":89885},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":17707860},\"end\":90451,\"start\":90031},{\"attributes\":{\"id\":\"b34\"},\"end\":90659,\"start\":90453},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":12625409},\"end\":90884,\"start\":90661},{\"attributes\":{\"id\":\"b36\"},\"end\":91090,\"start\":90886},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":9969658},\"end\":91243,\"start\":91092},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":9746839},\"end\":91441,\"start\":91245},{\"attributes\":{\"id\":\"b39\"},\"end\":91536,\"start\":91443},{\"attributes\":{\"id\":\"b40\"},\"end\":91717,\"start\":91538},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":11558223},\"end\":92070,\"start\":91719},{\"attributes\":{\"doi\":\"arXiv:1708.08689\",\"id\":\"b42\"},\"end\":92484,\"start\":92072},{\"attributes\":{\"id\":\"b43\"},\"end\":92617,\"start\":92486},{\"attributes\":{\"id\":\"b44\"},\"end\":92747,\"start\":92619},{\"attributes\":{\"doi\":\"arXiv:1605.07277\",\"id\":\"b45\"},\"end\":93104,\"start\":92749},{\"attributes\":{\"doi\":\"arXiv:1602.02697\",\"id\":\"b46\"},\"end\":93489,\"start\":93106},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":1090603},\"end\":93883,\"start\":93491},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":4637184},\"end\":94190,\"start\":93885},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":12854315},\"end\":94506,\"start\":94192},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":9302624},\"end\":94926,\"start\":94508},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":206592766},\"end\":95386,\"start\":94928},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":207241700},\"end\":95942,\"start\":95388},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":515925},\"end\":96423,\"start\":95944},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":35426171},\"end\":96613,\"start\":96425},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":206592295},\"end\":97045,\"start\":96615},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":2814088},\"end\":97526,\"start\":97047},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":195700237},\"end\":97885,\"start\":97528},{\"attributes\":{\"id\":\"b58\"},\"end\":97988,\"start\":97887},{\"attributes\":{\"doi\":\"arXiv:1409.5188\",\"id\":\"b59\"},\"end\":98238,\"start\":97990},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":9898157},\"end\":98634,\"start\":98240},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":5077922},\"end\":98900,\"start\":98636},{\"attributes\":{\"doi\":\"arXiv:1610.05256\",\"id\":\"b62\"},\"end\":99254,\"start\":98902},{\"attributes\":{\"doi\":\"arXiv:1703.01340\",\"id\":\"b63\"},\"end\":99510,\"start\":99256},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":5092965},\"end\":99806,\"start\":99512},{\"attributes\":{\"id\":\"b65\"},\"end\":100077,\"start\":99808},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":6212000},\"end\":100526,\"start\":100079},{\"attributes\":{\"doi\":\"arXiv:1501.04690\",\"id\":\"b67\"},\"end\":100795,\"start\":100528}]", "bib_title": "[{\"end\":80109,\"start\":80056},{\"end\":80498,\"start\":80415},{\"end\":80971,\"start\":80941},{\"end\":81382,\"start\":81336},{\"end\":81687,\"start\":81651},{\"end\":82266,\"start\":82220},{\"end\":82709,\"start\":82673},{\"end\":82968,\"start\":82916},{\"end\":83466,\"start\":83390},{\"end\":84464,\"start\":84385},{\"end\":84897,\"start\":84846},{\"end\":85503,\"start\":85428},{\"end\":86487,\"start\":86442},{\"end\":86768,\"start\":86733},{\"end\":87820,\"start\":87776},{\"end\":88298,\"start\":88247},{\"end\":88748,\"start\":88689},{\"end\":89271,\"start\":89194},{\"end\":89941,\"start\":89885},{\"end\":90099,\"start\":90031},{\"end\":90675,\"start\":90661},{\"end\":90932,\"start\":90886},{\"end\":91135,\"start\":91092},{\"end\":91328,\"start\":91245},{\"end\":91754,\"start\":91719},{\"end\":93543,\"start\":93491},{\"end\":93906,\"start\":93885},{\"end\":94294,\"start\":94192},{\"end\":94597,\"start\":94508},{\"end\":94992,\"start\":94928},{\"end\":95474,\"start\":95388},{\"end\":96010,\"start\":95944},{\"end\":96470,\"start\":96425},{\"end\":96679,\"start\":96615},{\"end\":97120,\"start\":97047},{\"end\":97567,\"start\":97528},{\"end\":98315,\"start\":98240},{\"end\":98695,\"start\":98636},{\"end\":99583,\"start\":99512},{\"end\":100141,\"start\":100079},{\"end\":80109,\"start\":80056},{\"end\":80498,\"start\":80415},{\"end\":80971,\"start\":80941},{\"end\":81382,\"start\":81336},{\"end\":81687,\"start\":81651},{\"end\":82266,\"start\":82220},{\"end\":82709,\"start\":82673},{\"end\":82968,\"start\":82916},{\"end\":83466,\"start\":83390},{\"end\":84464,\"start\":84385},{\"end\":84897,\"start\":84846},{\"end\":85503,\"start\":85428},{\"end\":86487,\"start\":86442},{\"end\":86768,\"start\":86733},{\"end\":87820,\"start\":87776},{\"end\":88298,\"start\":88247},{\"end\":88748,\"start\":88689},{\"end\":89271,\"start\":89194},{\"end\":89941,\"start\":89885},{\"end\":90099,\"start\":90031},{\"end\":90675,\"start\":90661},{\"end\":90932,\"start\":90886},{\"end\":91135,\"start\":91092},{\"end\":91328,\"start\":91245},{\"end\":91754,\"start\":91719},{\"end\":93543,\"start\":93491},{\"end\":93906,\"start\":93885},{\"end\":94294,\"start\":94192},{\"end\":94597,\"start\":94508},{\"end\":94992,\"start\":94928},{\"end\":95474,\"start\":95388},{\"end\":96010,\"start\":95944},{\"end\":96470,\"start\":96425},{\"end\":96679,\"start\":96615},{\"end\":97120,\"start\":97047},{\"end\":97567,\"start\":97528},{\"end\":98315,\"start\":98240},{\"end\":98695,\"start\":98636},{\"end\":99583,\"start\":99512},{\"end\":100141,\"start\":100079}]", "bib_author": "[{\"end\":80120,\"start\":80111},{\"end\":80130,\"start\":80120},{\"end\":80138,\"start\":80130},{\"end\":80146,\"start\":80138},{\"end\":80155,\"start\":80146},{\"end\":80163,\"start\":80155},{\"end\":80172,\"start\":80163},{\"end\":80184,\"start\":80172},{\"end\":80194,\"start\":80184},{\"end\":80203,\"start\":80194},{\"end\":80513,\"start\":80500},{\"end\":80526,\"start\":80513},{\"end\":80812,\"start\":80802},{\"end\":80819,\"start\":80812},{\"end\":80830,\"start\":80819},{\"end\":80984,\"start\":80973},{\"end\":80994,\"start\":80984},{\"end\":81003,\"start\":80994},{\"end\":81015,\"start\":81003},{\"end\":81026,\"start\":81015},{\"end\":81394,\"start\":81384},{\"end\":81404,\"start\":81394},{\"end\":81414,\"start\":81404},{\"end\":81422,\"start\":81414},{\"end\":81699,\"start\":81689},{\"end\":81709,\"start\":81699},{\"end\":81717,\"start\":81709},{\"end\":81727,\"start\":81717},{\"end\":82277,\"start\":82268},{\"end\":82285,\"start\":82277},{\"end\":82294,\"start\":82285},{\"end\":82303,\"start\":82294},{\"end\":82310,\"start\":82303},{\"end\":82319,\"start\":82310},{\"end\":82333,\"start\":82319},{\"end\":82341,\"start\":82333},{\"end\":82723,\"start\":82711},{\"end\":82729,\"start\":82723},{\"end\":82735,\"start\":82729},{\"end\":82745,\"start\":82735},{\"end\":82981,\"start\":82970},{\"end\":82991,\"start\":82981},{\"end\":83219,\"start\":83207},{\"end\":83233,\"start\":83219},{\"end\":83244,\"start\":83233},{\"end\":83476,\"start\":83468},{\"end\":83484,\"start\":83476},{\"end\":83498,\"start\":83484},{\"end\":83506,\"start\":83498},{\"end\":83919,\"start\":83911},{\"end\":83932,\"start\":83919},{\"end\":83942,\"start\":83932},{\"end\":84476,\"start\":84466},{\"end\":84488,\"start\":84476},{\"end\":84496,\"start\":84488},{\"end\":84502,\"start\":84496},{\"end\":84907,\"start\":84899},{\"end\":84915,\"start\":84907},{\"end\":84925,\"start\":84915},{\"end\":84934,\"start\":84925},{\"end\":84940,\"start\":84934},{\"end\":84951,\"start\":84940},{\"end\":85307,\"start\":85298},{\"end\":85317,\"start\":85307},{\"end\":85517,\"start\":85505},{\"end\":85527,\"start\":85517},{\"end\":85922,\"start\":85911},{\"end\":85933,\"start\":85922},{\"end\":85946,\"start\":85933},{\"end\":85955,\"start\":85946},{\"end\":85961,\"start\":85955},{\"end\":85972,\"start\":85961},{\"end\":85983,\"start\":85972},{\"end\":85991,\"start\":85983},{\"end\":86255,\"start\":86248},{\"end\":86262,\"start\":86255},{\"end\":86271,\"start\":86262},{\"end\":86278,\"start\":86271},{\"end\":86288,\"start\":86278},{\"end\":86497,\"start\":86489},{\"end\":86503,\"start\":86497},{\"end\":86513,\"start\":86503},{\"end\":86520,\"start\":86513},{\"end\":86778,\"start\":86770},{\"end\":86793,\"start\":86778},{\"end\":87142,\"start\":87126},{\"end\":87152,\"start\":87142},{\"end\":87163,\"start\":87152},{\"end\":87413,\"start\":87407},{\"end\":87429,\"start\":87413},{\"end\":87437,\"start\":87429},{\"end\":87677,\"start\":87663},{\"end\":87828,\"start\":87822},{\"end\":87837,\"start\":87828},{\"end\":87844,\"start\":87837},{\"end\":87851,\"start\":87844},{\"end\":88188,\"start\":88181},{\"end\":88196,\"start\":88188},{\"end\":88308,\"start\":88300},{\"end\":88316,\"start\":88308},{\"end\":88322,\"start\":88316},{\"end\":88331,\"start\":88322},{\"end\":88759,\"start\":88750},{\"end\":88768,\"start\":88759},{\"end\":89012,\"start\":89001},{\"end\":89026,\"start\":89012},{\"end\":89036,\"start\":89026},{\"end\":89279,\"start\":89273},{\"end\":89285,\"start\":89279},{\"end\":89292,\"start\":89285},{\"end\":89298,\"start\":89292},{\"end\":89308,\"start\":89298},{\"end\":89695,\"start\":89688},{\"end\":89701,\"start\":89695},{\"end\":89716,\"start\":89701},{\"end\":89725,\"start\":89716},{\"end\":90108,\"start\":90101},{\"end\":90116,\"start\":90108},{\"end\":90123,\"start\":90116},{\"end\":90131,\"start\":90123},{\"end\":90497,\"start\":90490},{\"end\":90503,\"start\":90497},{\"end\":90512,\"start\":90503},{\"end\":90522,\"start\":90512},{\"end\":90530,\"start\":90522},{\"end\":90538,\"start\":90530},{\"end\":90547,\"start\":90538},{\"end\":90684,\"start\":90677},{\"end\":90691,\"start\":90684},{\"end\":90705,\"start\":90691},{\"end\":90945,\"start\":90934},{\"end\":91144,\"start\":91137},{\"end\":91151,\"start\":91144},{\"end\":91471,\"start\":91460},{\"end\":91593,\"start\":91582},{\"end\":91779,\"start\":91756},{\"end\":91788,\"start\":91779},{\"end\":91797,\"start\":91788},{\"end\":91809,\"start\":91797},{\"end\":92169,\"start\":92151},{\"end\":92179,\"start\":92169},{\"end\":92191,\"start\":92179},{\"end\":92202,\"start\":92191},{\"end\":92218,\"start\":92202},{\"end\":92228,\"start\":92218},{\"end\":92236,\"start\":92228},{\"end\":92656,\"start\":92639},{\"end\":92861,\"start\":92849},{\"end\":92873,\"start\":92861},{\"end\":92887,\"start\":92873},{\"end\":93204,\"start\":93192},{\"end\":93216,\"start\":93204},{\"end\":93230,\"start\":93216},{\"end\":93237,\"start\":93230},{\"end\":93248,\"start\":93237},{\"end\":93257,\"start\":93248},{\"end\":93920,\"start\":93908},{\"end\":93931,\"start\":93920},{\"end\":93944,\"start\":93931},{\"end\":94304,\"start\":94296},{\"end\":94311,\"start\":94304},{\"end\":94607,\"start\":94599},{\"end\":94617,\"start\":94607},{\"end\":95005,\"start\":94994},{\"end\":95021,\"start\":95005},{\"end\":95032,\"start\":95021},{\"end\":95486,\"start\":95476},{\"end\":95501,\"start\":95486},{\"end\":95510,\"start\":95501},{\"end\":95522,\"start\":95510},{\"end\":96022,\"start\":96012},{\"end\":96031,\"start\":96022},{\"end\":96045,\"start\":96031},{\"end\":96053,\"start\":96045},{\"end\":96062,\"start\":96053},{\"end\":96083,\"start\":96062},{\"end\":96100,\"start\":96083},{\"end\":96114,\"start\":96100},{\"end\":96132,\"start\":96114},{\"end\":96143,\"start\":96132},{\"end\":96486,\"start\":96472},{\"end\":96495,\"start\":96486},{\"end\":96504,\"start\":96495},{\"end\":96688,\"start\":96681},{\"end\":96696,\"start\":96688},{\"end\":96704,\"start\":96696},{\"end\":97133,\"start\":97122},{\"end\":97141,\"start\":97133},{\"end\":97152,\"start\":97141},{\"end\":97160,\"start\":97152},{\"end\":97581,\"start\":97569},{\"end\":97590,\"start\":97581},{\"end\":97913,\"start\":97898},{\"end\":98056,\"start\":98048},{\"end\":98063,\"start\":98056},{\"end\":98069,\"start\":98063},{\"end\":98076,\"start\":98069},{\"end\":98325,\"start\":98317},{\"end\":98336,\"start\":98325},{\"end\":98344,\"start\":98336},{\"end\":98705,\"start\":98697},{\"end\":98715,\"start\":98705},{\"end\":98724,\"start\":98715},{\"end\":98734,\"start\":98724},{\"end\":98744,\"start\":98734},{\"end\":98752,\"start\":98744},{\"end\":98972,\"start\":98963},{\"end\":98982,\"start\":98972},{\"end\":98991,\"start\":98982},{\"end\":99000,\"start\":98991},{\"end\":99011,\"start\":99000},{\"end\":99022,\"start\":99011},{\"end\":99028,\"start\":99022},{\"end\":99037,\"start\":99028},{\"end\":99264,\"start\":99256},{\"end\":99270,\"start\":99264},{\"end\":99276,\"start\":99270},{\"end\":99284,\"start\":99276},{\"end\":99594,\"start\":99585},{\"end\":99602,\"start\":99594},{\"end\":99882,\"start\":99872},{\"end\":100152,\"start\":100143},{\"end\":100162,\"start\":100152},{\"end\":100171,\"start\":100162},{\"end\":100180,\"start\":100171},{\"end\":100191,\"start\":100180},{\"end\":100609,\"start\":100601},{\"end\":100616,\"start\":100609},{\"end\":100623,\"start\":100616},{\"end\":80120,\"start\":80111},{\"end\":80130,\"start\":80120},{\"end\":80138,\"start\":80130},{\"end\":80146,\"start\":80138},{\"end\":80155,\"start\":80146},{\"end\":80163,\"start\":80155},{\"end\":80172,\"start\":80163},{\"end\":80184,\"start\":80172},{\"end\":80194,\"start\":80184},{\"end\":80203,\"start\":80194},{\"end\":80513,\"start\":80500},{\"end\":80526,\"start\":80513},{\"end\":80812,\"start\":80802},{\"end\":80819,\"start\":80812},{\"end\":80830,\"start\":80819},{\"end\":80984,\"start\":80973},{\"end\":80994,\"start\":80984},{\"end\":81003,\"start\":80994},{\"end\":81015,\"start\":81003},{\"end\":81026,\"start\":81015},{\"end\":81394,\"start\":81384},{\"end\":81404,\"start\":81394},{\"end\":81414,\"start\":81404},{\"end\":81422,\"start\":81414},{\"end\":81699,\"start\":81689},{\"end\":81709,\"start\":81699},{\"end\":81717,\"start\":81709},{\"end\":81727,\"start\":81717},{\"end\":82277,\"start\":82268},{\"end\":82285,\"start\":82277},{\"end\":82294,\"start\":82285},{\"end\":82303,\"start\":82294},{\"end\":82310,\"start\":82303},{\"end\":82319,\"start\":82310},{\"end\":82333,\"start\":82319},{\"end\":82341,\"start\":82333},{\"end\":82723,\"start\":82711},{\"end\":82729,\"start\":82723},{\"end\":82735,\"start\":82729},{\"end\":82745,\"start\":82735},{\"end\":82981,\"start\":82970},{\"end\":82991,\"start\":82981},{\"end\":83219,\"start\":83207},{\"end\":83233,\"start\":83219},{\"end\":83244,\"start\":83233},{\"end\":83476,\"start\":83468},{\"end\":83484,\"start\":83476},{\"end\":83498,\"start\":83484},{\"end\":83506,\"start\":83498},{\"end\":83919,\"start\":83911},{\"end\":83932,\"start\":83919},{\"end\":83942,\"start\":83932},{\"end\":84476,\"start\":84466},{\"end\":84488,\"start\":84476},{\"end\":84496,\"start\":84488},{\"end\":84502,\"start\":84496},{\"end\":84907,\"start\":84899},{\"end\":84915,\"start\":84907},{\"end\":84925,\"start\":84915},{\"end\":84934,\"start\":84925},{\"end\":84940,\"start\":84934},{\"end\":84951,\"start\":84940},{\"end\":85307,\"start\":85298},{\"end\":85317,\"start\":85307},{\"end\":85517,\"start\":85505},{\"end\":85527,\"start\":85517},{\"end\":85922,\"start\":85911},{\"end\":85933,\"start\":85922},{\"end\":85946,\"start\":85933},{\"end\":85955,\"start\":85946},{\"end\":85961,\"start\":85955},{\"end\":85972,\"start\":85961},{\"end\":85983,\"start\":85972},{\"end\":85991,\"start\":85983},{\"end\":86255,\"start\":86248},{\"end\":86262,\"start\":86255},{\"end\":86271,\"start\":86262},{\"end\":86278,\"start\":86271},{\"end\":86288,\"start\":86278},{\"end\":86497,\"start\":86489},{\"end\":86503,\"start\":86497},{\"end\":86513,\"start\":86503},{\"end\":86520,\"start\":86513},{\"end\":86778,\"start\":86770},{\"end\":86793,\"start\":86778},{\"end\":87142,\"start\":87126},{\"end\":87152,\"start\":87142},{\"end\":87163,\"start\":87152},{\"end\":87413,\"start\":87407},{\"end\":87429,\"start\":87413},{\"end\":87437,\"start\":87429},{\"end\":87677,\"start\":87663},{\"end\":87828,\"start\":87822},{\"end\":87837,\"start\":87828},{\"end\":87844,\"start\":87837},{\"end\":87851,\"start\":87844},{\"end\":88188,\"start\":88181},{\"end\":88196,\"start\":88188},{\"end\":88308,\"start\":88300},{\"end\":88316,\"start\":88308},{\"end\":88322,\"start\":88316},{\"end\":88331,\"start\":88322},{\"end\":88759,\"start\":88750},{\"end\":88768,\"start\":88759},{\"end\":89012,\"start\":89001},{\"end\":89026,\"start\":89012},{\"end\":89036,\"start\":89026},{\"end\":89279,\"start\":89273},{\"end\":89285,\"start\":89279},{\"end\":89292,\"start\":89285},{\"end\":89298,\"start\":89292},{\"end\":89308,\"start\":89298},{\"end\":89695,\"start\":89688},{\"end\":89701,\"start\":89695},{\"end\":89716,\"start\":89701},{\"end\":89725,\"start\":89716},{\"end\":90108,\"start\":90101},{\"end\":90116,\"start\":90108},{\"end\":90123,\"start\":90116},{\"end\":90131,\"start\":90123},{\"end\":90497,\"start\":90490},{\"end\":90503,\"start\":90497},{\"end\":90512,\"start\":90503},{\"end\":90522,\"start\":90512},{\"end\":90530,\"start\":90522},{\"end\":90538,\"start\":90530},{\"end\":90547,\"start\":90538},{\"end\":90684,\"start\":90677},{\"end\":90691,\"start\":90684},{\"end\":90705,\"start\":90691},{\"end\":90945,\"start\":90934},{\"end\":91144,\"start\":91137},{\"end\":91151,\"start\":91144},{\"end\":91471,\"start\":91460},{\"end\":91593,\"start\":91582},{\"end\":91779,\"start\":91756},{\"end\":91788,\"start\":91779},{\"end\":91797,\"start\":91788},{\"end\":91809,\"start\":91797},{\"end\":92169,\"start\":92151},{\"end\":92179,\"start\":92169},{\"end\":92191,\"start\":92179},{\"end\":92202,\"start\":92191},{\"end\":92218,\"start\":92202},{\"end\":92228,\"start\":92218},{\"end\":92236,\"start\":92228},{\"end\":92656,\"start\":92639},{\"end\":92861,\"start\":92849},{\"end\":92873,\"start\":92861},{\"end\":92887,\"start\":92873},{\"end\":93204,\"start\":93192},{\"end\":93216,\"start\":93204},{\"end\":93230,\"start\":93216},{\"end\":93237,\"start\":93230},{\"end\":93248,\"start\":93237},{\"end\":93257,\"start\":93248},{\"end\":93920,\"start\":93908},{\"end\":93931,\"start\":93920},{\"end\":93944,\"start\":93931},{\"end\":94304,\"start\":94296},{\"end\":94311,\"start\":94304},{\"end\":94607,\"start\":94599},{\"end\":94617,\"start\":94607},{\"end\":95005,\"start\":94994},{\"end\":95021,\"start\":95005},{\"end\":95032,\"start\":95021},{\"end\":95486,\"start\":95476},{\"end\":95501,\"start\":95486},{\"end\":95510,\"start\":95501},{\"end\":95522,\"start\":95510},{\"end\":96022,\"start\":96012},{\"end\":96031,\"start\":96022},{\"end\":96045,\"start\":96031},{\"end\":96053,\"start\":96045},{\"end\":96062,\"start\":96053},{\"end\":96083,\"start\":96062},{\"end\":96100,\"start\":96083},{\"end\":96114,\"start\":96100},{\"end\":96132,\"start\":96114},{\"end\":96143,\"start\":96132},{\"end\":96486,\"start\":96472},{\"end\":96495,\"start\":96486},{\"end\":96504,\"start\":96495},{\"end\":96688,\"start\":96681},{\"end\":96696,\"start\":96688},{\"end\":96704,\"start\":96696},{\"end\":97133,\"start\":97122},{\"end\":97141,\"start\":97133},{\"end\":97152,\"start\":97141},{\"end\":97160,\"start\":97152},{\"end\":97581,\"start\":97569},{\"end\":97590,\"start\":97581},{\"end\":97913,\"start\":97898},{\"end\":98056,\"start\":98048},{\"end\":98063,\"start\":98056},{\"end\":98069,\"start\":98063},{\"end\":98076,\"start\":98069},{\"end\":98325,\"start\":98317},{\"end\":98336,\"start\":98325},{\"end\":98344,\"start\":98336},{\"end\":98705,\"start\":98697},{\"end\":98715,\"start\":98705},{\"end\":98724,\"start\":98715},{\"end\":98734,\"start\":98724},{\"end\":98744,\"start\":98734},{\"end\":98752,\"start\":98744},{\"end\":98972,\"start\":98963},{\"end\":98982,\"start\":98972},{\"end\":98991,\"start\":98982},{\"end\":99000,\"start\":98991},{\"end\":99011,\"start\":99000},{\"end\":99022,\"start\":99011},{\"end\":99028,\"start\":99022},{\"end\":99037,\"start\":99028},{\"end\":99264,\"start\":99256},{\"end\":99270,\"start\":99264},{\"end\":99276,\"start\":99270},{\"end\":99284,\"start\":99276},{\"end\":99594,\"start\":99585},{\"end\":99602,\"start\":99594},{\"end\":99882,\"start\":99872},{\"end\":100152,\"start\":100143},{\"end\":100162,\"start\":100152},{\"end\":100171,\"start\":100162},{\"end\":100180,\"start\":100171},{\"end\":100191,\"start\":100180},{\"end\":100609,\"start\":100601},{\"end\":100616,\"start\":100609},{\"end\":100623,\"start\":100616}]", "bib_venue": "[{\"end\":81117,\"start\":81080},{\"end\":81956,\"start\":81850},{\"end\":83627,\"start\":83575},{\"end\":86912,\"start\":86861},{\"end\":87992,\"start\":87930},{\"end\":88480,\"start\":88414},{\"end\":89397,\"start\":89361},{\"end\":90260,\"start\":90204},{\"end\":93704,\"start\":93633},{\"end\":94049,\"start\":94005},{\"end\":95173,\"start\":95111},{\"end\":95679,\"start\":95609},{\"end\":96845,\"start\":96783},{\"end\":97301,\"start\":97239},{\"end\":100320,\"start\":100264},{\"end\":81117,\"start\":81080},{\"end\":81956,\"start\":81850},{\"end\":83627,\"start\":83575},{\"end\":86912,\"start\":86861},{\"end\":87992,\"start\":87930},{\"end\":88480,\"start\":88414},{\"end\":89397,\"start\":89361},{\"end\":90260,\"start\":90204},{\"end\":93704,\"start\":93633},{\"end\":94049,\"start\":94005},{\"end\":95173,\"start\":95111},{\"end\":95679,\"start\":95609},{\"end\":96845,\"start\":96783},{\"end\":97301,\"start\":97239},{\"end\":100320,\"start\":100264},{\"end\":80207,\"start\":80203},{\"end\":80556,\"start\":80526},{\"end\":80800,\"start\":80748},{\"end\":81078,\"start\":81026},{\"end\":81472,\"start\":81422},{\"end\":81848,\"start\":81727},{\"end\":82422,\"start\":82341},{\"end\":82770,\"start\":82745},{\"end\":83015,\"start\":82991},{\"end\":83205,\"start\":83177},{\"end\":83573,\"start\":83506},{\"end\":83909,\"start\":83847},{\"end\":84149,\"start\":84116},{\"end\":84285,\"start\":84236},{\"end\":84589,\"start\":84502},{\"end\":84990,\"start\":84951},{\"end\":85296,\"start\":85216},{\"end\":85578,\"start\":85527},{\"end\":85909,\"start\":85853},{\"end\":86246,\"start\":86213},{\"end\":86569,\"start\":86520},{\"end\":86859,\"start\":86793},{\"end\":87124,\"start\":87078},{\"end\":87405,\"start\":87326},{\"end\":87661,\"start\":87629},{\"end\":87928,\"start\":87851},{\"end\":88412,\"start\":88331},{\"end\":88812,\"start\":88768},{\"end\":88999,\"start\":88957},{\"end\":89359,\"start\":89308},{\"end\":89686,\"start\":89645},{\"end\":89948,\"start\":89943},{\"end\":90202,\"start\":90131},{\"end\":90488,\"start\":90453},{\"end\":90762,\"start\":90705},{\"end\":90971,\"start\":90945},{\"end\":91158,\"start\":91151},{\"end\":91334,\"start\":91330},{\"end\":91458,\"start\":91443},{\"end\":91580,\"start\":91538},{\"end\":91877,\"start\":91809},{\"end\":92149,\"start\":92072},{\"end\":92502,\"start\":92486},{\"end\":92637,\"start\":92619},{\"end\":92847,\"start\":92749},{\"end\":93190,\"start\":93106},{\"end\":93631,\"start\":93545},{\"end\":94003,\"start\":93944},{\"end\":94325,\"start\":94311},{\"end\":94697,\"start\":94617},{\"end\":95109,\"start\":95032},{\"end\":95607,\"start\":95522},{\"end\":96149,\"start\":96143},{\"end\":96508,\"start\":96504},{\"end\":96781,\"start\":96704},{\"end\":97237,\"start\":97160},{\"end\":97681,\"start\":97590},{\"end\":97896,\"start\":97887},{\"end\":98046,\"start\":97990},{\"end\":98415,\"start\":98344},{\"end\":98756,\"start\":98752},{\"end\":98961,\"start\":98902},{\"end\":99358,\"start\":99300},{\"end\":99634,\"start\":99602},{\"end\":99870,\"start\":99808},{\"end\":100262,\"start\":100191},{\"end\":100599,\"start\":100528},{\"end\":80207,\"start\":80203},{\"end\":80556,\"start\":80526},{\"end\":80800,\"start\":80748},{\"end\":81078,\"start\":81026},{\"end\":81472,\"start\":81422},{\"end\":81848,\"start\":81727},{\"end\":82422,\"start\":82341},{\"end\":82770,\"start\":82745},{\"end\":83015,\"start\":82991},{\"end\":83205,\"start\":83177},{\"end\":83573,\"start\":83506},{\"end\":83909,\"start\":83847},{\"end\":84149,\"start\":84116},{\"end\":84285,\"start\":84236},{\"end\":84589,\"start\":84502},{\"end\":84990,\"start\":84951},{\"end\":85296,\"start\":85216},{\"end\":85578,\"start\":85527},{\"end\":85909,\"start\":85853},{\"end\":86246,\"start\":86213},{\"end\":86569,\"start\":86520},{\"end\":86859,\"start\":86793},{\"end\":87124,\"start\":87078},{\"end\":87405,\"start\":87326},{\"end\":87661,\"start\":87629},{\"end\":87928,\"start\":87851},{\"end\":88412,\"start\":88331},{\"end\":88812,\"start\":88768},{\"end\":88999,\"start\":88957},{\"end\":89359,\"start\":89308},{\"end\":89686,\"start\":89645},{\"end\":89948,\"start\":89943},{\"end\":90202,\"start\":90131},{\"end\":90488,\"start\":90453},{\"end\":90762,\"start\":90705},{\"end\":90971,\"start\":90945},{\"end\":91158,\"start\":91151},{\"end\":91334,\"start\":91330},{\"end\":91458,\"start\":91443},{\"end\":91580,\"start\":91538},{\"end\":91877,\"start\":91809},{\"end\":92149,\"start\":92072},{\"end\":92502,\"start\":92486},{\"end\":92637,\"start\":92619},{\"end\":92847,\"start\":92749},{\"end\":93190,\"start\":93106},{\"end\":93631,\"start\":93545},{\"end\":94003,\"start\":93944},{\"end\":94325,\"start\":94311},{\"end\":94697,\"start\":94617},{\"end\":95109,\"start\":95032},{\"end\":95607,\"start\":95522},{\"end\":96149,\"start\":96143},{\"end\":96508,\"start\":96504},{\"end\":96781,\"start\":96704},{\"end\":97237,\"start\":97160},{\"end\":97681,\"start\":97590},{\"end\":97896,\"start\":97887},{\"end\":98046,\"start\":97990},{\"end\":98415,\"start\":98344},{\"end\":98756,\"start\":98752},{\"end\":98961,\"start\":98902},{\"end\":99358,\"start\":99300},{\"end\":99634,\"start\":99602},{\"end\":99870,\"start\":99808},{\"end\":100262,\"start\":100191},{\"end\":100599,\"start\":100528}]"}}}, "year": 2023, "month": 12, "day": 17}