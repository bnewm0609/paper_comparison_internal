{"id": 56482410, "updated": "2023-09-30 23:05:54.177", "metadata": {"title": "D\\\"IoT: A Federated Self-learning Anomaly Detection System for IoT", "authors": "[{\"first\":\"Thien\",\"last\":\"Nguyen\",\"middle\":[\"Duc\"]},{\"first\":\"Samuel\",\"last\":\"Marchal\",\"middle\":[]},{\"first\":\"Markus\",\"last\":\"Miettinen\",\"middle\":[]},{\"first\":\"Hossein\",\"last\":\"Fereidooni\",\"middle\":[]},{\"first\":\"N.\",\"last\":\"Asokan\",\"middle\":[]},{\"first\":\"Ahmad-Reza\",\"last\":\"Sadeghi\",\"middle\":[]}]", "venue": "Proceedings of the 39th IEEE International Conference on Distributed Computing Systems (ICDCS), 2019", "journal": null, "publication_date": {"year": 2018, "month": null, "day": null}, "abstract": "IoT devices are increasingly deployed in daily life. Many of these devices are, however, vulnerable due to insecure design, implementation, and configuration. As a result, many networks already have vulnerable IoT devices that are easy to compromise. This has led to a new category of malware specifically targeting IoT devices. However, existing intrusion detection techniques are not effective in detecting compromised IoT devices given the massive scale of the problem in terms of the number of different types of devices and manufacturers involved. In this paper, we present D\\\"IoT, an autonomous self-learning distributed system for detecting compromised IoT devices effectively. In contrast to prior work, D\\\"IoT uses a novel self-learning approach to classify devices into device types and build normal communication profiles for each of these that can subsequently be used to detect anomalous deviations in communication patterns. D\\\"IoT utilizes a federated learning approach for aggregating behavior profiles efficiently. To the best of our knowledge, it is the first system to employ a federated learning approach to anomaly-detection-based intrusion detection. Consequently, D\\\"IoT can cope with emerging new and unknown attacks. We systematically and extensively evaluated more than 30 off-the-shelf IoT devices over a long term and show that D\\\"IoT is highly effective (95.6% detection rate) and fast (~257 ms) at detecting devices compromised by, for instance, the infamous Mirai malware. D\\\"IoT reported no false alarms when evaluated in a real-world smart home deployment setting.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1804.07474", "mag": "2982426954", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icdcs/NguyenMMFAS19", "doi": "10.1109/icdcs.2019.00080"}}, "content": {"source": {"pdf_hash": "383061c39d9835d24d9bddb6bf11f2cdd11a23f2", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1804.07474v3.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1804.07474", "status": "GREEN"}}, "grobid": {"id": "f276dac3ad415a13c8af675e563ca2d1f317ca43", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/383061c39d9835d24d9bddb6bf11f2cdd11a23f2.txt", "contents": "\nD\u00cfOT: A Federated Self-learning Anomaly Detection System for IoT\n\n\nThien Duc Nguyen ducthien.nguyen@trust.tu-darmstadt.de \nDarmstadtGermany\n\nSamuel Marchal samuel.marchal@aalto.fi \nAalto University\nFinland\n\nMarkus Miettinen markus.miettinen@trust.tu-darmstadt.de \nDarmstadtGermany\n\nHossein Fereidooni hossein.fereidooni@trust.tu-darmstadt.de \nDarmstadtGermany\n\nN Asokan asokan@acm.org \nAalto University\nFinland\n\nAhmad-Reza Sadeghi ahmad.sadeghi@trust.tu-darmstadt.de \nDarmstadtGermany\n\nD\u00cfOT: A Federated Self-learning Anomaly Detection System for IoT\nIndex Terms-IoT securityanomaly detectionsmart homeself-learningfederated learningGated Recurrent Unit\nIoT devices are increasingly deployed in daily life. Many of these devices are, however, vulnerable due to insecure design, implementation, and configuration. As a result, many networks already have vulnerable IoT devices that are easy to compromise. This has led to a new category of malware specifically targeting IoT devices. However, existing intrusion detection techniques are not effective in detecting compromised IoT devices given the massive scale of the problem in terms of the number of different types of devices and manufacturers involved.In this paper, we present D\u00cfOT, an autonomous self-learning distributed system for detecting compromised IoT devices effectively.In contrast to prior work, D\u00cfOT uses a novel self-learning approach to classify devices into device types and build normal communication profiles for each of these that can subsequently be used to detect anomalous deviations in communication patterns. D\u00cfOT utilizes a federated learning approach for aggregating behavior profiles efficiently. To the best of our knowledge, it is the first system to employ a federated learning approach to anomaly-detection-based intrusion detection. Consequently, D\u00cfOT can cope with emerging new and unknown attacks. We systematically and extensively evaluated more than 30 off-theshelf IoT devices over a long term and show that D\u00cfOT is highly effective (95.6 % detection rate) and fast (\u2248 257 ms) at detecting devices compromised by, for instance, the infamous Mirai malware. D\u00cfOT reported no false alarms when evaluated in a real-world smart home deployment setting.\n\nI. INTRODUCTION\n\nThe growing popularity of the Internet-of-Things (IoT) has led to many new device manufacturers entering the IoT device market, bringing out products at an ever-increasing pace. This \"rush-to-market\" mentality of some manufacturers has led to poor product design practices in which security considerations often remain merely an afterthought. As a consequence, many devices are released with inherent security vulnerabilities that can be exploited through various attacks. An entirely new category of malware has emerged explicitly targeting IoT devices, as these are increasingly popular and relatively easy to compromise [1]- [4].\n\nThe preferred way to cope with security vulnerabilities would be to apply security patches through software and firmware updates on affected devices [5]. However, many devices lack appropriate facilities for automated updates or there may be significant delays until device manufacturers provide them, mandating the use of reactive security measures like intrusion detection systems (IDS) for detecting possible device compromise [6]- [9]. Signature-based IDSs look for specific communication patterns, so-called attack signatures, associated with known attacks. Such systems are, however, unable to detect novel attacks for which they do not yet have signatures, leaving the network unprotected until the IDS vendor releases updated attack signatures [6].\n\nTo be able to detect also previously unknown attacks one has therefore to resort to anomaly detection in which the normal behavior of devices is profiled. Potential attacks are detected as deviations from this normal behavior profile [7]- [9]. However, this approach often suffers from a high false alarm rate, making it unusable in practice. This problem is exacerbated in the IoT setting: First, there are hundreds of very heterogeneous devices on the market, which makes it even more challenging to train precise models covering all variations of behaviors exhibited by various IoT devices. Second, when looking at IoT devices individually they do typically not (notwithstanding a few exceptions) generate a lot of network traffic, as their communications are limited to, e.g., status updates about sensor readings or (relatively) infrequent interactions related to user commands. This scarcity of communications makes it in itself challenging to train comprehensive models that can accurately cover the full behavior of IoT devices.\n\nTo be effective, an anomaly detection model would require capturing all benign patterns of behavior in order to differentiate benign behavior from malicious. Given the ever-increasing number of literally thousands of types of IoT devices (ranging from temperature sensors and smart light bulbs to big appliances like washing machines) and the typical scarcity of their communications, an all-encompassing behavior model would be 1) tedious to learn and update, and 2) too broad to be effective at detecting subtle anomalies without generating many false alarms. Goals and Contributions. To tackle the challenges that effective intrusion detection in IoT networks is facing, we present D\u00cfOT, a system for detecting compromised IoT devices that is effective without suffering from the deficiencies discussed above. We propose a novel approach that combines automated device-type identification and subsequent device-type-specific anomaly detection to achieve accurate detection of attacks while generating almost no false alarms. Major IoT device vendors, including CISCO, assisted us formulating real-world settings for our solution and usage scenarios.\n\nWe make the following contributions:\n\n\u2022 D\u00cfOT, a self-learning distributed system for security monitoring of IoT devices (Sect. III) based on devicetype-specific detection models for detecting anomalous device behavior: -It uses a novel self-learning identification method based on passive fingerprinting of periodic communication traffic of IoT devices (Sect. IV). In contrast to previous methods, it requires no prior knowledge about device types nor labeled training data and is effective at identifying the type of an IoT device in any state of a device's operation (achieves 98.2 % accuracy Sect. VII). -It utilizes a novel anomaly detection approach based on representing network packets as symbols in a language allowing to use a language analysis technique to detect anomalies (Sect. V). It is fast (detection in \u2248257 ms) and effective (95.6 % true positive rate, zero false alarms) at detecting IoT devices infected with real IoT malware (Mirai [1]) (Sect. VIII). -It is the first system to apply a federated learning approach for anomaly-detection-based intrusion detection, aggregating behavior profiles efficiently (Sect. V-C).\n\n\nII. PRELIMINARIES\n\n\nA. IoT Malware\n\nRecently, a number of large-scale attacks utilizing vulnerabilities in IoT devices have been widely reported in news reports. The Mirai malware [1] is the most well-known, which targeted specifically IoT devices having basic security flaws [3], [10]. Subsequently other similar malware attacks like Persirai [11], Hajime [2] and BrickerBot [4] have emerged. Pa et al. [12] identified that IoT malware attacks can be divided into three stages: intrusion, infection and monetization. The intrusion stage utilizes weaknesses like default administrator or root passwords, or exploits of known vulnerabilities in particular IoT devices to gain unauthorized access to devices. In the infection stage, attackers upload a piece of malicious code to the device and execute it. In the monetization phase the malware typically performs network scans for identifying other vulnerable devices causing also these devices to get infected. Finally, the malware takes malicious actions like acting as part of a bot network for distributed denial of service (DDoS) attacks (e.g., in the case of Mirai [3]). Other monetization methods may include unauthorized leakage of information from the user's network to outsiders.\n\n\nB. Device-Type Identification\n\nEarlier device-type identification schemes have the primary goal of using various device fingerprinting approaches for identifying either the device model [13] or the specific hardware / software configuration of a device [14]- [17] by training classification models with labeled data from specific known device types. Such training data requires extensive human effort to generate and maintain.\n\nD\u00cfOT takes a different approach: the purpose of identification in D\u00cfOT is to enable efficient anomaly detection. Hence, there is no need to identify the real-world model of each device. It is sufficient to reliably map devices to a \"device type\" for which the system can build a model of normal behavior that can be used to effectively detect anomalous deviations. Therefore D\u00cfOT can be trained without the need to manually label the communication traces of predefined real-world device types. Rather, a clustering algorithm is used to identify abstract device types (cf. Sect. IV) to which devices are mapped based on their observed communication behavior. The training and evaluation of the anomaly detection models (cf. Sect. V) are performed in terms of these abstract device types. This allows D\u00cfOT to be trained and operated autonomously, without the need for human intervention at any stage.\n\n\nIII. SYSTEM MODEL\n\nOur system model is shown in Fig. 1. We consider a typical SOHO (Small Office and Home) network, where IoT devices connect to the Internet via an access gateway.\n\n\nA. Adversary Model\n\nOur adversary is IoT malware actively performing various attacks on vulnerable devices in the SOHO network. Based on analyses of attacks of state-of-the-art IoT malware [3], [12], we divide attacks in four main attack stages: pre-infection, infection, scanning and monetization. The primary goal of D\u00cfOT is to detect attacks on IoT devices at all four stages in order to take appropriate countermeasures against them, e.g., by preventing them from being compromised or isolating them from the rest of the network. Countermeasures against remote adversaries are outside the scope of D\u00cfOT, as we do not assume to have any control over remote hosts on the Internet (other than potentially notifying responsible authorities about IP addresses associated with the adversary). Our target is to detect attacks at the earliest stage possible, preferably even before a device can be successfully infected, as some malware like e.g., Persirai [11] or BrickerBot [4] potentially can make devices permanently unusable immediately after they are infected.\n\n\nB. Challenges and Assumptions\n\nAnomaly detection techniques can automatically identify infected devices. However, in the IoT application scenario, it faces some challenges: leading to anomaly detection techniques to easily raising false alarms. However, to be useful in practice, anomaly detection systems must minimize such false alarms. \u2022 C4 -Scarcity of communications. In contrast to highend devices, IoT devices generate only little traffic, often triggered by infrequent user interactions. We make the following assumptions regarding the vulnerabilities and infection of IoT devices:\n\u2022 C1 -\n\u2022 A1 -Delay to exploit vulnerability. IoT devices may be vulnerable but are not compromised when first released by a manufacturer. Adversaries must first obtain a device to find a vulnerability and a way to exploit it. This process takes a few days during which non-compromised devices of a given type are deployed and generate only legitimate communications. \u2022 A2 -Installation of non-compromised devices. IoT devices are not compromised when first installed to a SOHO network. They remain uncompromised several hours before an adversary can find and compromise them.\n\nC. System Design 1) Design Choices: Gateway monitoring: We detect compromised IoT devices by monitoring their communication as observed by Security Gateway that acts as a gateway for the local network. All IoT devices are directly or indirectly connected to this gateway, which observes all external communications to the Internet as well as most local device-to-device communications. It represents an extensive and unconstrained monitoring point, effectively addressing challenge C2. Device-type-specific anomaly detection: Since IoT devices have heterogeneous behavior (challenge C3), we model each device-type's legitimate behavior with a dedicated model. Consequently, each anomaly detection model captures a relatively homogeneous and limited behavior, representing a single device type. This approach leads to a restrained model that is able to capture all possible legitimate behaviors of a device type. Thus the model is expected to be more sensitive to subtle anomalies, increasing its detection capability, and less prone to trigger false alarms. This design choice partially addresses challenge C3. Autonomous self-learning system: D\u00cfOT learns anomaly detection profiles using data samples that only have labels telling which device types generated them. These labels representing individual device types are automatically generated and assigned. This is done by building fingerprints for the communication patterns of each IoT device. D\u00cfOT uses an unsupervised machine learning approach to cluster these fingerprints and autonomously create a label for each cluster representing a device type (device-type identification in Sect. IV). The whole process does not require any human intervention, which allows D\u00cfOT to respond quickly and autonomously to new threats, addressing challenge C1. It is worth noting that D\u00cfOT starts operating with no device-type identification or anomaly detection model. It learns and improves these models as Security Gateways aggregate more data. Information aggregation: Information gathered by different Security Gateways is correlated in a central entity, the IoT Security Service. Anomaly detection models are learned using a federated learning approach where Security Gateways use locally collected data and collaborate with IoT Security Service to train the models (details in Sect. V-C). IoT Security Service similarly uses fingerprints generated at several Security Gateways to learn device-type identification models (details in Sect. IV-C). This aggregation maximizes the usage of limited information obtained from scarce communications at each gateway (challenge C4). It is also expected to improve the accuracy of anomaly detection models (challenge C3) by learning from the maximum amount of data available. Modeling techniques requiring little data: As later presented in Sect. IV and V, we define features and select machine learning algorithms that work with few training data for both device-type identification and anomaly detection. This design choice addresses challenge C4.\n\n2) System architecture: The D\u00cfOT system consists of Security Gateway and IoT Security Service. The role of Security Gateway is to monitor devices and perform device fingerprinting and anomaly detection in order to identify compromised devices in the network. It is supported by IoT Security Service that performs device-type identification based on the fingerprints provided and aggregates device-type-specific anomaly detection models used by Security Gateway. Security Gateway acts as the local access gateway to the Internet to which IoT devices connect over WiFi or an Ethernet connection. Apart from acting as a gateway router for connected devices in the local network, Security Gateway hosts two functions: the Device Fingerprinting and Anomaly Detection components. The task of Device Fingerprinting is to monitor the communication patterns of connected IoT devices and extract device fingerprints for identifying the device type of the connected device (details in Sect. IV).\n\nDevice Fingerprinting is a one-time operation that is performed when a new IoT device is detected in the network. An identified device is assigned to its corresponding type which it retains permanently unless fingerprinting is re-initiated, e.g., due to a detected firmware update on the device (cf. Sect. X). The Anomaly Detection component continuously monitors the communications of identified IoT devices and detects devices displaying abnormal communication behavior that is potentially caused by malware (details in Sect. V). Security Gateway also provides locally collected data to IoT Security Service for learning device-type identification and anomaly detection models. IoT Security Service supports Security Gateway. It is a cloud-based functionality hosting two main components: Device-Type Identification and Anomaly Detection Model. Device-Type Identification uses a machine learning-based classifier for identifying the device type of IoT devices based on device fingerprints provided by Security Gateway. Anomaly Detection Model maintains a repository of device-typespecific anomaly detection models. After successful identification of a device's type, IoT Security Service sends the identified device type and corresponding anomaly detection model to Security Gateway. Upon receiving the anomaly detection model for the type of an identified IoT device, Security Gateway starts monitoring its communications in order to detect potential deviations from normal behavior encoded by the detection model.\n\n\nIV. DEVICE-TYPE IDENTIFICATION\n\nTraditional device-type identification approaches [18], [19] rely on aggregated statistics extracted from dense network traffic. These are ineffective when applied to IoT devices due to the scarcity of their communication (cf. Sect. III-B -challenge C4). IoT devices generate little dense traffic, typically only during rare and short user interactions. Nevertheless, IoT devices also generate background communication independent of user interactions. This traffic is always present, relatively constant and periodic.\n\nThus, we introduce a novel technique for identifying the type of IoT devices based on their periodic background network traffic. In contrast to existing approaches, this technique can identify the type of an IoT device in any state of a device's operation, including standby, with a constant time of 30 minutes. Our technique is composed of three steps relying on passive monitoring of the network traffic at the network gateway: step 1: inference of periodic flows, their period and stability (Sect. IV-A), step 2: extraction of a fingerprint characterizing a device's type based on its periodic flows (Sect. IV-B) and step 3: use of this fingerprint in a classification system that identifies device-types (Sect. IV-C). The overview of the identification process is depicted in Fig. 2.\n\nSteps 1 and 2 are implemented in Security Gateway while step 3 is implemented in IoT Security Service. \n\n\nA. Periodic Flow Inference\n\nThe first step in our device-type identification technique is to infer the periodicity in the communication of a device. Fourier transform and signal autocorrelation are effective signal processing techniques for inferring periodicity. We divide the network traffic of a device into distinct flows and apply these techniques to the flows.\n\nWhile Fourier transform and signal autocorrelation can identify the several distinct periods of a signal, ignoring most non-periodic noise, these techniques are more accurate when applied to pure single-periodic signals. As a result, we preprocess the network traffic received at Security Gateway and divide it into distinct flows. We define a flow as a sequence of network packets sent from a given source MAC address (IoT device) using a given communication protocol (e.g., NTP, ARP, RTSP, etc.). The rationale for flow division is that most periodic communication uses dedicated protocols that are different from the ones used for communication related to user interaction (non-periodic). If periodic and non-periodic communication still coexist in a flow (e.g., HTTP), Fourier Transform and signal autocorrelation can cope better with this reduced non-periodic noise.\n\nThe flow of packets in a network capture must be converted into a format suitable for signal processing. We discretize each flow into a binary time series sampled at one value per second, indicating whether the flow contained one or more packets during the 1-second period (value 1) or not (value 0). The computed time series is a discrete binary signal y(t) of duration d seconds.\n\nWe first use the discrete Fourier transform (DFT) [20] to identify candidate periods for a given flow. DFT converts a discrete signal y(t) from the time domain to the frequency domain: y(t) \u21d2 Y (f ). Y (f ) provides amplitude values for each frequency f \u2208 [0; 1]. The frequency f i resulting in the largest amplitude Y (f i ) = max(Y (f )) gives the periodicity T i = d fi of the dominant period in y(t). Secondary periods T j of lower amplitude also exist. We select candidate periods T i having an amplitude Y ( d Ti ) larger than 10% of the maximum amplitude max(Y (f )). We discard close candidate periods by selecting only local maxima of Y .\nY (f ) is considered a local maximum on Y if Y (f \u2212 1) < Y (f ) > Y (f + 1)\n. The result of this operation is a list of candidate periods for a flow.\n\nCandidate periods found using DFT can be nonexistent or inaccurate. To confirm and refine these periods, we compute the discrete autocorrelation R yy of y(t). R yy denotes the similarity of the signal y(t) with itself as a function of different time offsets. If R yy at offset l is large and reaches a local maximum, it means that y(t) is likely periodic, with period T = l and that this period occurs R yy (l) times over y(t). For each candidate period T i obtained with DFT, we confirm and refine it by analyzing the value of R yy (l i ) on the range of close offsets l i \u2208 [0.9 \u00d7 T i ; 1.1 \u00d7 T i ]. If it contains a local maximum R yy (l i ) = lmax i , we confirm the existence of a period that belongs to this range and update its value to\nT i = l i . R yy (l i ) is considered a local maximum on R yy if R yy (l i \u22121) < R yy (l i ) > R yy (l i +1)\n. For each resulting period T i we compute characteristic metrics r i and rn i , defined as:\nr i = T i \u00d7 R yy (T i ) d (1) rn i = T i \u00d7 (R yy (T i \u2212 1) + R yy (T i ) + R yy (T i + 1)) d(2)\nr i computes the ratio of occurrences of period T i over signal y(t) of duration d seconds. An accurate and stable periodic signal of period T i renders r i = 1. However, a periodic signal may be noisy (r i < 1) or have parallel periods with the same periodicity. Periodic signals may also be unstable exhibiting slight differences in their periodicity (r i < 1). This is the rationale for computing rn where we sum the occurrences of neighboring periods R yy (T i \u2212 1), R yy (T i ) and R yy (T i + 1). A stable signal of period T i produces r i \u2248 rn i \u2248 1, while unstable signals produce r i < 1 and r i rn i . The final result of period inference for a flow is a set of periods with the corresponding ratios r i and rn i : Figure 3 shows the plot of binary time series extracted from flows of a D-LinkCam DCS935L IP camera. We see that all depicted flows are periodic. Applying DFT and autocorrelation on these time series provides the following results: We see that our method is able to accurately infer all periods observed in Fig. 3. The flow on TCP port 62976 has the most stable period (30s.) as highlighted by the values r = rn \u2248 1. ARP and HTTPS (port 443) have both a less stable period of 55s., as highlighted by lower r values and a larger difference between r and rn. We also inferred the 25s. period of the mDNS flow (port 5353). But as we can observe in Fig. 3, there are three different signals having a 25s. periodicity on this flow. This aspect is captured in period inference by rendering high r and rn values, i.e. far larger than 1. These results show that our method detects periodic flows, accurately infers their period and characterizes them with r and rn metrics.\n{(T 1 , r 1 , rn 1 ), \u00b7 \u00b7 \u00b7 , (T i , r i , rn i ), \u00b7 \u00b7 \u00b7 , (T n , r n , rn n )}. Example:\n\nB. Fingerprint Extraction\n\nWe build a fingerprint for a device type by extracting features from its periodic flows. These features are later used with an unsupervised machine learning algorithm that creates and assigns device-type labels to fingerprints (Sect. IV-C).\n\nWe split a network traffic capture of x seconds into three sub-captures [0;\nx 2 ], [ x 4 , 3x 4 ], [ x 2 , x].\nWe apply periodic flow inference (Sect. IV-A) on each sub-capture and on the whole capture [0; x]. We obtain four sets of periods with the metrics r and rn for each flow. The goal of applying period inference on smaller sub-captures is twofold. First, we obtain more significant results by discarding periods that are inferred from less than two sub-captures. Second, we can compute statistics from metrics r and rn to measure their stability.\n\nThe results from period inference are grouped by source MAC address, linked to a single device. This grouping defines the granularity of feature extraction, i.e., one fingerprint is extracted per source MAC address and capture. We introduce 33 features that compose our device-type fingerprint. These features are manually designed to model a group of periodic flows in a unique manner that enables to distinguish device types. It is worth noting that all our features are computed from the statistics obtained during periodic flow inference (Sect. IV-A). They do not use packet payload information nor packet header information from protocols above the transport layer. Consequently, D\u00cfOT can operate on any traffic encrypted above the transport layer. There are four categories of features as discussed below and in Tab. I. Periodic flows (9 features). This feature category characterizes the quantity and quality of periodic flows. It includes the count of periodic flows (1), the layer of protocols that support periodic flows (2), if flows are single-or multi-periodic (3)(4)(5)(6), if there is a change in the source port of periodic flows (7) and the frequency of this change (8)(9). Period accuracy (3 features). These features measure the accuracy of the inferred periods and characterises how noisy the flows they were extracted from are. They consist of the count of periods that were inferred from all sub-captures and the whole capture (10), the mean (11) and standard deviation (12) for the count of sub-captures from which each period was inferred. Period duration (4 features). These features (13)(14)(15)(16) represent the number of periods that belong to four duration ranges, e.g., \n\n\nC. Device-Type Fingerprint Classification\n\nOur device-type identification technique is designed to be fully autonomous. It does not require human interaction nor labeled data to operate. When an IoT device is associated to an Security Gateway, the latter monitors its network traffic and extracts a fingerprint as described in Sect. IV-B. The fingerprint is sent to the IoT Security Service, which attempts to identify the type of the device having this fingerprint. If the fingerprint has a match, the type of the device is identified and the fingerprint is used to retrain and improve its identification model. If no match is found, the IoT Security Service uses the fingerprints to learn a model for this new device type.\n\nAs mentioned earlier, device types we use here are abstract. They do not refer to meaningful pre-learned labels such as \"D-LinkCam IP camera\" but are reference identifiers specific to I: 33 features (4 categories) used for device-type identification. # represents a count, SD is the standard deviation. Importance scores are computed using ReliefF feature selection algorithm [21]. High scores (green) corresponds to the most relevant features and low scores (red) to the least relevant features. \n# Mean(r) \u2208 [0.2; 0.7[ 0.386 18 # Mean(r) \u2208 [0.7; 1[ 0.436 19 # Mean(r) \u2208 [1; 2[ 0.239 20 # Mean(r) \u2208 [2; +\u221e[ 0.124 21 # SD(r) \u2208 [0; 0.02[ 0.185 22 # SD(r) \u2208 [0.02; 0.1[ 0.151 23 # SD(r) \u2208 [0.1; +\u221e[ 0.185 24 # Mean(rn) \u2208 [0.2; 0.7[ 0.288 period 25 # Mean(rn) \u2208 [0.7; 1[ 0.307 stability 26 # Mean(rn) \u2208 [1; 2[ 0.313 27 # Mean(rn) \u2208 [2; +\u221e[ 0.246 28 # SD(rn) \u2208 [0; 0.02[ 0.217 29 # SD(rn) \u2208 [0.02; 0.1[ 0.217 30 # SD(rn) \u2208 [0.1; +\u221e[ 0.220 31 # Mean(rn)\u2212 Mean(r) \u2208 [0; 0.02[ 0.408 32 # Mean(rn)\u2212 Mean(r) \u2208 [0.02; 0.1[ 0.248 33 # Mean(rn)\u2212 Mean(r) \u2208 [0.1; +\u221e[ 0.482\nD\u00cfOT, e.g., type#12. These identifiers match behavior models used for anomaly detection as later presented in Section V.\n\nThe system starts operating with no identification model. As IoT Security Service receives fingerprints from Security Gateway, it creates type identifiers (e.g., type#12) and learns an identification model for them. The longer the system runs and the more Security Gateways contribute to it, the more device types it is able to identify and the better the accuracy of identification.\n\nWe implement automated device-type identification using a supervised k-Nearest Neighbors (kNN) classifier [22]. kNN is chosen because of its ability to deal with a large number of classes and an imbalanced dataset. Each device type is represented by one class and the training data available for each class may be imbalanced (as IoT devices are differently deployed). kNN forms small clusters of at least k neighbors to represent a class. In a supervised mode, several clusters can define a class, capturing its potential diversity. This allows fingerprints collected from a device from which we already know the type to form new clusters with the same type label. When fingerprints for device types unknown to the model are processed, they are detected as exceeding a threshold distance to the nearest cluster of the classification model. A new class can be added to the model to represent this yet unknown device type.\n\nOur features are processed and should not require complex association to differentiate device types. Consequently, we use the Euclidian distance as distance measure in kNN. All 33 features of our fingerprints are scaled on the range [0; 1] to have an equal weight in the classification task. Fingerprints are extracted from network traffic captures of 30 minutes. We tested several capture durations: {5, 10, 20, 30, 60, 90} minutes. A duration lower than 30 minutes missed flows of long periodicity (10 minutes) and degraded the accuracy of identification. A duration longer than 30 minutes did not improve accuracy but increased the delay to identify a device. We set k = 5 to meet a trade-off between representativeness of a learned class and need for training data. A class for a new device-type can be learned as soon as we get five fingerprints for it, i.e., after 2.5 hours of monitoring.\n\nThe design of our fingerprint classification approach does not require any labeled data to operate. It allows D\u00cfOT to learn and label device types without human intervention by clustering fingerprints and generating labels for clusters. Four parameters need to be tuned and defined for devicetype identification prior to deployment of D\u00cfOT: the traffic capture duration, the sampling period of the flows, k and the threshold distance for kNN. Optimal values for these parameters can be determined in a lab setup using a small set of IoT devices. After that, D\u00cfOT can run in a fully autonomous manner, without human intervention. Our devicetype identification approach allows D\u00cfOT to manage a large number of device types since these are represented as clusters in a high dimensional space (33 dimensions). A multitude of non overlapping clusters can be created in this space. The addition of new device types to the system is an automatic process of creating new clusters in this space.\n\n\nV. DEVICE-TYPE-SPECIFIC ANOMALY DETECTION\n\nIn our approach, network packet flows (pkt 1 , pkt 2 , . . . , pkt n ) present in normal, benign traffic generated by an IoT device are transformed into sequences of symbols (s 1 , s 2 , . . . , s n ) in which packets pkt i of the flow are mapped to individual symbols s i based on certain distinct characteristics present in each packet as discussed in Sect. V-A. A neural network is then trained using these symbol sequences to form a model representing the inherent packet sequence patterns in benign packet flows. For this we employ Gated Recurrent Units (GRUs) [23], [24], a novel approach to recurrent neural networks (RNN) currently being a target of lively research. GRUs provide similar accuracy as other RNN approaches but are computationally less expensive [24], [25]. To detect abnormal traffic patterns, the symbol sequences representing incoming packet flows are fed to the GRU model to obtain estimates for the occurrence probability of each new packet given the preceding sequence of packets. If the occurrence probability estimates p i of a sufficient number of packets in a window of consecutive packets fall below a detection threshold, as described in detail in Sect. V-B, the packet sequence is deemed anomalous and an alarm is raised.\n\n\nA. Modelling Packet Sequences\n\nData packets pkt i are mapped into symbols s i = (c 1 , c 2 , . . . , c 7 ), which are 7-tuples of discrete packet characteristics c i . This mapping is defined by a device-typespecific mapping function mapping type#k : A \u2192 B type#k s.t. mapping type#k (pkt i ) = s i where A is the domain of raw network packets pkt and B type#k is the domain of packet symbols s for device-type type#k . It is worth noting that B type#k is different for different device types. We use the following packet characteristics shown also in Tab. II:\n\n\u2022 c 1 direction: (incoming / outgoing) Normal TCP traffic is usually balanced two-way communication but abnormal is not as, e.g., a bot only sends packets to a victim without receiving replies when running DDoS attacks. \u2022 c 2 and c 3 local and remote port type: (system / user / dynamic) Each device-type uses specific ports designed by the manufacturers while malicious attack patterns using ports strictly specified by attack protocols. They are usually different. \u2022 c 4 packet length: (bin index of packet's length where eight most frequently occurring packet lengths receive dedicated bins and one bin for other packet length values) Each device-type communicates using specific packet patterns with specific packet lengths that are mostly different in malicious attack patterns.  local port type bin index of port type c 3 remote port type bin index of port type c 4 packet length bin index of packet length c 5 TCP flags TCP flag values c 6 protocols encapsulated protocol types c 7 IAT bin bin index of packet inter-arrival time \n\n\nB. Detection Process\n\nUsing the trained GRU-based models for different devicetypes, Security Gateway will perform anomaly detection on the packet flow of each of the IoT devices utilizing the detection model corresponding to each device's type. The data packet flow is transformed into its corresponding symbol sequence as discussed above and then sequentially fed to the detection model. For each symbol s i of the sequence, the detection model will output an occurrence probability p i of observing the current symbol s i given the sequence of k preceding symbols < s i\u2212k , s i\u2212k+1 , . . . , s i\u22121 >, i.e.,\np i = P (s i | < s i\u2212k , s i\u2212k+1 , . . . , s i\u22121 >)(3)\nThe parameter k is a property of the used GRU network and denotes the length of the lookback history, i.e., the number of preceding symbols that the GRU takes into account when calculating probability estimates for the possible next symbols in the symbol sequence. In effect, the GRU model will provide for each packet in the observed sequence of incoming packets an estimate of how probable the occurrence of this packet is given the preceding sequence of packets. We postulate that these probability estimates will be on average higher for known benign traffic patterns, and lower for traffic patterns generated as a result of malware on an infected device and can therefore be flagged as anomalous. Fig. 4 shows an example of packet probability estimates of a packet flow originating from an Edimax smart plug infected with Mirai. Malicious packets (represented by symbol '#0') get very low probability estimates (<10 \u22124 ), distinguishing them clearly from benign packets. However, their presence at indices 6 \u2212 7 also affects the estimate of the benign packet '#41' at index 8 (<10 \u22126 ), since the sequence of packets preceding this packet is unknown to the detection model. Based on this observation, we define a packet to be anomalous as following:\n\nDefinition 1 (Anomalous packets):\n\nPacket pkt i mapped to s i is anomalous, if its occurrence probability p i is below detection threshold \u03b4, i.e., if\np i < \u03b4(4)\nIf we were to trigger an anomaly each time an anomalous packet is observed, this would lead to numerous false positive detections, as benign traffic also contains systemic noise that is not covered by the GRU model and will therefore receive low occurrence probability estimates. We therefore trigger an anomaly only in the case that a significant number of packets in a window of consecutive packets are anomalous.\n\nDefinition 2 (Anomaly triggering condition): Given a window W of w consecutive packets W = (pkt 1 , pkt 2 , . . . , pkt w ) represented by symbol sequence S = (s 1 , s 2 , . . . s w ), we trigger an anomaly alarm, if the fraction of anomalous packets in W is larger than an anomaly triggering threshold \u03b3, i.e., if\n|{s i \u2208 S|p i < \u03b4}| w > \u03b3(5)\n\nC. Federated Learning Approach\n\nOur GRU models are learned using traffic collected at several Security Gateways, each monitoring a client IoT network. Each Security Gateway observing a device of type type#k contributes to training its anomaly detection model. We take a federated learning approach to implement the distributed learning of models from several clients. Federated learning is a communication-efficient and, indeed, privacypreserving learning approach suited for distributed optimization of Deep Neural Networks (DNN) [26], [27]. In federated learning, clients do not share their training data but rather train a local model with it and send reports of model modification to a centralized entity which aggregates them. Federated learning is chosen because it is suitable [28] for scenarios where:\n\n\u2022 data are massively distributed, so that there is a large number of clients each having a small amount of data.\n\nIoT devices typically generate little traffic, which means only little data can be provided by each client alone. \u2022 contributions from clients are imbalanced. In our system, the training data available at each Security Gateway depends on the duration that an IoT device has been in the network and the amount of interaction it has had, which varies largely between clients. Each Security Gateway reporting to have a type#k device in its network gets a base global GRU model from IoT Security Service. At the start of D\u00cfOT, this model is random, otherwise it is already trained through several rounds of the following process. The global model is re-trained locally by each Security Gateway with traces collected by monitoring communication of the type#k device. Local updates made to the model by each Security Gateway are reported to IoT Security Service which aggregates them to improve the global model. The updated global model for type#k devices is then pushed back to Security Gateway and used for anomaly detection. The re-training of the model is performed on a regular basis to improve the accuracy of anomaly detection.\n\nWe adopt the approach presented by McMahan et al. [28] to train our GRU models in a federated manner. Each client (Security Gateway) trains its GRU model locally for several epochs before reporting the updates to the IoT Security Service. This approach limits the communication overhead by reducing the number of updates to send to the IoT Security Service. To the best of our knowledge we are the first to  \n\n\nVI. EXPERIMENTAL SETUP\n\nTo evaluate D\u00cfOT, we apply it on the use case of detecting real-life IoT malware. We selected Mirai for this purpose, since its source code is publicly available and several other malware variants like Persirai [11] or Hajime [2] have been implemented using the same code base or closely follow a similar behavior. This makes Mirai a highly relevant baseline for IoT malware behavior.\n\n\nA. Datasets\n\nWe collected extensive datasets about the communication behavior of IoT devices in laboratory and real-world deployment settings. The monitored devices included 33 typical consumer IoT devices like IP cameras, smart power plugs and light bulbs, sensors, etc. The devices were mapped by our device-type-identification method to 23 unique device types. The detailed list of devices and assignment to device-types can be found in Table VII and IX in Appendix A and C . We collected datasets by setting up a laboratory network as shown in Fig. 5 using hostapd on a laptop running Kali Linux to create a Security Gateway (SGW) acting as an access point with WiFi and Ethernet interfaces to which IoT devices were connected. On the SGW we collected all network traffic packets originating from the monitored devices using tcpdump.\n\n1) Background dataset: In order to identify the inherent communication patterns of IoT devices, we collected a dataset characterizing the background traffic IoT devices generate while no explicit actions are invoked. This dataset captures any communications resulting from actions devices execute in standby mode, like, e.g., heartbeat messages or regular status updates or notifications.\n\n2) Activity dataset: A key characteristic of IoT devices is that they expose only a few distinct actions accessible to users, e.g., ON, OFF, ADJUST, etc. To capture the communication patterns related to user interactions with IoT devices, we collected a dataset encompassing all such actions being invoked on the respective IoT devices. This dataset also contains standby traffic with no explicit user interactions.  (6) START / STOP video, adjust settings, reboot Smart plugs (9) ON, OFF, meter reading Sensors (3) trigger sensing action Smart lights (4) turn ON, turn OFF, adjust brightness Actuators (1) turn ON, turn OFF Appliances (2) turn ON, turn OFF, adjust settings Routers (2) browse amazon.com Hub devices (6) no actions Activity data were collected by connecting each IoT device to the laboratory network and repeatedly performing actions shown in Tab. III. Each of the actions was repeated 20 times (20-repetition chosen as a rule of thumb) while leaving short pauses of random duration between individual actions. To capture also less intensive usage patterns, the dataset was augmented with longer measurements of two to three hours, during which actions were triggered only occasionally. This dataset contains data from 33 IoT devices out of which 27 have both action and standby data. Six devices (lighting and home automation hubs) have standby data only because they do not provide meaningful actions that users could invoke.\n\n3) Deployment Dataset: To evaluate D\u00cfOT in a realistic smart home deployment setting, in particular with regard to how many false alarms it will raise, we installed a number of (n = 14) different smart home IoT devices in several different domestic deployment scenarios. This deployment involved real users and collected communication traces of these devices under realistic usage conditions. We used the same set-up as in the laboratory network for the domestic deployment, albeit we excluded the attack server. Users used and interacted with the IoT devices as part of their everyday life. Packet traces were collected continuously during one week. 4) Attack Dataset: For evaluating the effectiveness of D\u00cfOT at detecting attacks, we extensively collected a dataset comprising malicious traffic of IoT devices infected with Mirai malware [1], [3] in all four different attack stages presented in Sect. III-A: pre-infection, infection, scanning, DoS attacks (as a monetization stage). Additionally, we collected traffic when Mirai was in a standby mode, i.e., not performing any attack but awaiting commands from its C&C server.\n\nTraffic was collected from five devices vulnerable to the Mirai malware: D-LinkCamDCS930L, D-LinkCamDCS932L, EdimaxPlug1101W, EdimaxPlug2101W and UbntAirRouter. This was done by installing the Command & Control, Loader and Listener server modules on the laboratory network for infecting target devices with Mirai and controlling them. Infection was achieved using security vulnerabilities like easyto-guess default passwords to open a terminal session to the device and issuing appropriate commands to download the malware binary onto the device.\n\nIn the pre-infection stage, Loader sends a set of commands via telnet to the vulnerable IoT device to prepare its environment and identify an appropriate method for uploading the Mirai binary files. We repeated the pre-infection process 50 times for each device. During each run, around 900 preinfection-related packets were generated. After pre-infection the infection stage commences, during which Loader uploads Mirai binary files to the IoT device. It supports three upload methods: wget, tftp and echo (in this priority order). To infect the two D-Link cameras and the Ubnt router Loader uses wget, on the Edimax plugs it will resort to using tftp as these are installed on the devices by default. We repeated the infection process 50 times for each device, each run generating approximately 700 data packets.\n\nIn the scanning stage we collected packets while the infected devices were actively performing a network scan in order to locate other vulnerable devices. Data collection was performed for five minutes per device, resulting in a dataset of more than 446,000 scanning data packets.\n\nWe extensively tested the DoS attack stage, utilizing all ten different DoS attack vectors available in the Mirai source code [29]. We ran all attacks separately on all five compromised devices for five minutes each, generating more than 20 million packets of attack traffic in total.\n\nTable IV summarizes the sizes and numbers of distinct packets and packet flows in the different datasets. While packet flows can't be directly mapped to distinct device actions, they do provide a rough estimate of the overall level of activity of the targeted devices in the dataset.\n\n\nB. Parameter Selection\n\nBased on initial experiments with our datasets (Tab. IV) we inferred that a lookback history of k = 20 symbols is sufficient to capture most communication interactions with sufficient accuracy. We used a GRU network with three hidden layers of size 128 neurons each. The size of the input and output layers is device-type-specific and equal to the number of mapping symbols of the function mapping type#k , which is equal to | B type#k | (cf. Sect. V-A). We learned 23 anomaly detection models, each corresponding to a device type identified using the method described in Sect. IV. Each anomaly detection model was trained with, and respectively tested on, communication from all devices matching the considered type.\n\n\nC. Evaluation Metrics\n\nWe use false positive and true positive rate (FPR and TPR) as measures of fitness. FPR measures the rate at which benign communication is incorrectly classified as anomalous by our method causing a false alarm to be raised. TPR is the rate at which attacks are correctly reported as anomalous. We seek to minimize FPR, since otherwise the system easily becomes unusable, as the user would be overwhelmed with false alarms. At the same time we want to maximize TPR so that as many attacks as possible will be detected by our approach.\n\nTesting for false positives was performed by four-fold crossvalidation for device types in the activity and deployment datasets. The data were divided equally into four folds using three folds for training and one for testing. To determine the false positive rate, we divided the testing dataset according to Def. 2 into windows of w = 250 packets. Since the testing data contained only benign communications, any triggered anomaly alarm for packets of the window indicated it as a false positive (FP), whereas windows without alarms were considered a true negative (TN).\n\nTesting for true positives was done by using the activity and deployment datasets as training data and the attack dataset for testing with the same settings as for false positive testing. Moreover, as we know that the attack dataset also contains benign traffic corresponding to normal operations of the IoT devices, we were interested in the average duration until detection. Therefore, in each window of w = 250 packets we calculated the number of packets required until an anomaly alarm was triggered in order to estimate the average detection time. In terms of TPR, such windows were considered true positives (TP), whereas windows without triggered alarms were considered false negatives (FN).\n\n\nD. Federated Learning Setup\n\nWe implemented the federated learning algorithm utilizing the flask [30] and flask socketio [31] libraries for the serverside application and the socketIO-client [32] library for the client-side application. The socketIO-client uses the gevent asynchronous framework [33] which provides a clean API for concurrency and network related tasks. We used the Keras [34] library with Tensorflow backend to implement the GRU network with the parameters selected in Sect. VI-B, .\n\nWe conducted a set of experiments to evaluate federated learning performance with different numbers of clients (ranging from 2 to 15) contributing to the training of the models. We selected the number of epochs that each client trains its local model to be 17 and specified the number of communication rounds between clients and server to be 3. Therefore, the local models were trained a total of 51 epochs. This number of epochs was deemed sufficient since in our initial experiments utilizing a centralized learning setting the models converged after approximately 50 epochs.\n\n\nVII. DEVICE-TYPE IDENTIFICATION EVALUATION\n\n\nA. Accuracy\n\nTo evaluate the accuracy of our device-type identification technique, we computed fingerprints (cf. Sect. IV-B) from the background and activity traffic dataset. We obtained 6,224 fingerprints representing 33 IoT devices.\n\nTo assess the relevance of our automatically defined device types, we trained a kNN model from the fingerprints, following the method presented in Sect. IV-C. It defined 23 classes (device types). 16 devices were each assigned its own separate device type. The remaining 17 were aggregated into 7 device types. The assignment of devices to automatically-defined device types is summarized in App. C. Different devices allotted t y p e # 1 4 t y p e # 1 5 t y p e # 1 6 t y p e # 1 7 t y p e # 1 8 t y p e # 1 9 t y p e # 2 0 t y p e # 2 1 t y p e # 2 2 t y p e # 2 3 precision recall f1-score Fig. 6: Precision, recall and f1-score for identification of 23 device types (e.g., type#01).\n\nto a given device type are always from the same manufacturer and have the same or similar purpose (smart plugs / IP cameras / smart switches / sensors). For example, type#06 contains two instances of the same IP camera. It is worth noting that several devices connected to Security Gateway through an intermediary gateway would be considered as a single device and would be allotted a single device type. Intermediary gateways are usually proprietary and connect devices from a same manufacturer that have also the same or similar purpose (e.g., light bulbs). We conclude that our grouping is relevant for our anomaly detection system since similar/same devices from same manufacturers are likely to have similar behavior that can be represented by a single anomaly detection model. We demonstrate the accuracy of device-type identification using a 4-fold stratified cross-validation. We randomly split our 6,224 fingerprints into four equal subsets while respecting class (device type) distribution. We use three subsets for training our kNN identification model and test it on the remaining subset. This process is repeated four times to test each of the four subsets. We ran the cross-validation 10 times with random seeds. Figure 6 presents the precision, recall and f1-score for identifying each device type. All metrics reach over 0.95 for most devices. The overall accuracy of identification across all types is 0.982, showing its effectiveness. A confusion matrix presents detailed results for this experiment in Appendix B.\n\n\nB. Speed\n\nWe computed the time required for identifying the type of a device. This process is divided into three stages. The first stage consists of capturing the traffic generated by the device, which lasts for a fixed duration of 30 minutes. The second stage consists of pre-processing and extracting the fingerprint from the traffic capture (steps 1+2 in Fig. 2), which lasts for 52.6 ms\u00b136.5 on average. The third stage is the classification of the fingerprint using kNN, which takes 0.1 ms on average.\n\nThe duration of device identification is largely dominated by the time required for traffic capturing (30 minutes = 1,800,000 ms) that is 5 orders of magnitude longer than any of the other stages. The duration of traffic capture is static regardless of the number of devices to identify by Security Gateway or the number of device types (classes) in the kNN model. Fingerprint extraction must be run for each device connected to an Security Gateway. Let us assume that the Security Gateway needs to be capable of identifying a few tens of IoT devices; running this process in parallel would take less than 1 second. The time for fingerprint classification using kNN increases linearly with the number of training samples in the kNN model. Assuming that the same number of instances is kept for every class in the model, the time for fingerprint classification would increase linearly with the number of classes (device types) in the kNN model. Our model containing 23 device types takes 0.1 ms to classify a fingerprint. Thus managing thousands of device types would take less than 1 second and device identification would still be largely dominated by the traffic capture which takes 30 minutes.\n\n\nC. Feature importance\n\nWe computed scores for feature importance to evaluate the impact of our 33 features on device-type identification.\n\nSince kNN does not provide information about features most useful in classification, we used the ReliefF feature selection algorithm [21] to compute these scores. ReliefF is conceptually close to kNN since its feature scoring is based on the differences in feature values between nearest neighbor instance pairs. Table I presents the importance score for each feature. All four period duration features have high scores, which shows that IoT devices of different types have periodic flows with very different durations. The counts of periodic flows (f1-f2) are also highly relevant features meaning that IoT devices of different types have different numbers of periodic flows. The most relevant feature is the count of flows with a static source port (f7). This means that IoT devices are heterogeneous in the way they manage their periodic communications: some keep an open connection over time while others periodically re-initiate a new connection for the same flow. While some features have a low importance (e.g., f3-f4-f11-f12), they slightly improve the accuracy of device-type identification and we decided to keep them in our set of features. A large set of features (and some feature redundancy) also increases the resilience of machine learning based systems to adversarial machine learning attacks such as data poisoning [35].\n\n\nD. Learning time\n\nTo show that our identification model can be quickly learned, we evaluate its accuracy with a varying amount of training data. As presented in Sect. IV-C, we selected k = 5 as minimum number of components for a class in kNN. Figure 7 depicts the increase in precision, recall and f1-score as we vary the size of the training set from 5 fingerprints per device (2.5 hours monitoring) to 40 fingerprints per device (20 hours monitoring). We see that the accuracy in all metrics increases quickly from 0.87 to 0.95 but then stabilizes with a small gradient. It shows that after a few (\u2248 12) hours of monitoring,  more training data does not significantly increase accuracy. This time is likely even shorter considering that several Security Gateways contribute training data (fingerprints) for each device type in parallel. This shows that learning an effective device identification model requires only a few hours of traffic monitoring globally.\n\nTo summarize, we showed that our method for automatically learning device type is relevant on a large set of 33 IoT devices. We demonstrate that the identification technique is effective and accurate (98.2%) across all tested devices, even when using little training data, which makes it fast at identifying newly released IoT devices.\n\n\nVIII. INTRUSION DETECTION EVALUATION\n\n\nA. Accuracy\n\nTo determine appropriate values for the detection threshold \u03b4 and anomaly triggering threshold \u03b3, we evaluated FPR using the activity dataset and TPR using the attack dataset for a fixed window size of w = 250. Figure 8 shows the receiver operating characteristic (ROC) curve of FPR and TPR in dependence of these parameters. We can see that all curves quickly reach over 0.9 TPR while keeping a very low FPR  Fig. 9: Evolution of TPR and FPR as we increase the number of clients in federated learning. TPR decreases slightly (-3%) while FPR reaches 0 (-21%) when using 15 clients.\n\n(<0.01), which is one of the main objectives for our approach. We therefore select \u03b4 = 0.01 and \u03b3 = 0.5 at w = 250, which achieves 94.01% TPR at <0.01 FPR. Using these selected parameters in the deployment dataset and attack dataset, we achieved an attack detection rate of 95.60% TPR and no false positives, i.e., 0% FPR during one week of evaluation. These results show that D\u00cfOT can successfully address challenge C3, reporting no false alarms in a real-world deployment setting. Table V shows the detailed performance of our system for different attack scenarios (cf. Sect. VI). The time to detect attacks varies according to the traffic intensity of the attacks. The average detection delay over all tested attacks is 257\u00b1194 ms. D\u00cfOT can detect an attack in the pre-infection stage after 223 packets while Mirai generates more than 900 packets during pre-infection. It means D\u00cfOT is able to detect the attack even before the attack proceeds to the infection stage.\n\nThe detection rate for DoS attacks is lower than for other attack stages. However, all DoS attacks are eventually detected nevertheless. This is because DoS attacks have a high throughput (1, 412.94 packets/s.) and we analyze five windows of 250 packets per second at this rate. Considering the 88.96% TPR we achieve on DoS attacks, four windows out of five are detected as anomalous and trigger an alarm. It is also worth noting that infected devices in a standby mode get detected in 33.33% of cases, while this activity is very stealthy (0.05 packets/s.).\n\n\nB. Efficiency of Federated Learning\n\nTo evaluate the effectiveness of the federated learning approach, we allocated each client a randomized subset of training data from the deployment dataset (ranging from 0.1% to 10% of the total training dataset size) and evaluated the system's performance for different numbers of clients involved in building the federated model. We repeated our experiment three times for each device type, with random re-sampling of the training datasets. As expected, Fig. 9 shows that the federated models with more participating clients participated achieves better FPR, while TPR deteriorates only slightly. Federated learning provides better privacy for clients contributing to training as they do not need to share their training data. However, this may result in a loss of accuracy of the obtained model in comparison to training the model in a centralized manner. To evaluate this possible loss in accuracy, we trained three federated models using the entire training dataset by dividing it among 5, 9 or 15 clients, respectively and comparing these to the results of a model trained in a centralized manner. Table VI shows a small decrease in TPR as we increase the number of clients while FPR remains constant at 0.00%. This small drop in TPR is not a concern since a large number of packet windows would still trigger an alarm for any attack stage.\n\n\nC. Efficiency of Device-Type-Specific Models\n\nTo evaluate the benefit of using device-type-specific anomaly detection models compared to using a single model for all devices, we evaluated a single model on the whole deployment dataset using 4-fold-cross validation and evaluated detection accuracy on the attack dataset. The result is as expected: FPR increases from 0% to 0.67% while TPR increases from 95.6% to 97.21%. However, as mentioned in Sect. III, a high false alarm rate would make the anomaly detection system impractical. Indeed, if the system had FPR of 0.67% in our deployment setup, it would trigger around eight alarms per day. It means a smarthome with dozens of devices could have hundreds of false alarms per day.\n\n\nD. Performance\n\nWe evaluated the processing performance of GRU without specific performance optimizations on a laptop and a desktop computer. The laptop ran Ubuntu Linux 16.04 with an Intel\u00a9Core\u2122i7-4600 CPU with 8GB of memory, whereas the desktop ran Ubuntu Linux 18.04 with an Intel\u00a9Core\u2122i7-7700 CPU with 8GB of memory and a Radeon RX 460 core graphic card. Average processing time per symbol (packet) for prediction was 0.081(\u00b10.001) ms for the desktop with GPU and 0.592(\u00b10.001) ms when executed on the laptop with CPU. On average, training a GRU model for one device type took 26 minutes on the desktop and 71 minutes on the laptop hardware when considering a week's worth of data in the deployment dataset. Moreover, this is an upper bound for federated learning time as a client only needs a subset of data for training. We conclude from this that model training will be feasible to realize in real deployment scenarios, as training will in any case be done gradually as data are collected from the network over longer periods of time.\n\n\nIX. SECURITY ANALYSIS\n\nKnowing the design of D\u00cfOT, an adversary can try to circumvent anomaly detection. Spoofing device fingerprint. A compromised device can attempt to modify its background traffic such that its fingerprint changes and it gets identified as another device type. This is unlikely to happen since fingerprinting is a one time operation performed when a new IoT device is detected in the network. According to assumption A2 (Sect. III-B), devices are not yet compromised when installed in a network.\n\nSpoofing of a targeted device fingerprint requires the attacker to generate new periodic communication and to disable existing periodic communication. The latter impacts the functionality of a device, which may be detected as compromised by its user (e.g., missing periodic report) or its cloud service provider (e.g., missing reception of periodic heartbeat signal). In addition, spoofing a device type fingerprint has the only effect for the device to get assigned a different anomaly detection model than the one it was supposed to. First, this means that the device will anyway have a restricted communication behavior as defined by the anomaly detection model of the spoofed type (this model may of course be less restrictive). Second, communication related to legitimate functionality of the device will trigger anomalies, as it is likely not included in the anomaly detection profile of the spoofed type. Spoofing MAC address. D\u00cfOT anomaly detection is based on monitoring layer-2 traffic involving a particular device, identified by its MAC address. An adversary who has compromised a device can attempt to evade identification by spoofing its MAC address in the packets it sends out. MAC address spoofing can be mitigated using additional techniques for fingerprinting hardware interfaces on wireless [14], [17] and on wired connections [36]. These build a unique signature for the packets sent by a device related to hardware characteristics. Such fingerprints are difficult to spoof [37]. Alternatively, secured association protocols like WiFi Protected Setup provided by WPA2 [38] can be used to associate IoT devices to Security Gateway. Such association protocols require user involvement (e.g., physically pushing a button on the gateway) to associate a new device to the access point. The association results in a device-specific shared key that can be subsequently used by the gateway to authenticate the device. This prevents rogue devices from connecting to the network by spoofing the MAC address of a device already associated with Security Gateway. Mimicking legitimate communication. An adversary can attempt to mimic the legitimate communication patterns of a compromised device to remain undetected. However, D\u00cfOT builds device-type-specific detection models that are very restrictive because IoT devices have limited functionality. Considering our packet characteristics (protocol, packet size, port, etc.), it is difficult to mimic legitimate communication while achieving a malicious purpose, e.g., scanning, flooding, etc. Moreover, adversaries would have to develop devicetype-specific models for mimicking communication patterns. This makes it significantly harder to develop large scale IoT malware that affects a wide range of IoT devices, e.g., Mirai. Adversarial machine learning. Having access to the anomaly detection model, one can attempt to forge packets specifically meant to avoid detection, i.e., adversarial examples. There exist techniques to forge adversarial examples to neural networks [39]. However, these apply to images [40], [41] and audio inputs [42], [43], where objective functions for the optimization problem are easy to define. Forging adversarial examples consists of finding minimal modifications for an input x of class C such that x + is classified as C = C. In contrast to image or audio processing, our features (symbols) are not raw but processed from packets. First, it means that modifications are computed for our symbolic representation of packets and are difficult to implement as packets while preserving their adversarial utility. Second, it is difficult to define the objective distance to minimize in order to achieve \"small modifications\" since modifying the value of one single packet characteristic (protocol, port, etc.) can change the function of a packet entirely. Poisoning federated learning. The learning of our anomaly detection models involves many Security Gateways providing training data. For initial model training, it is reasonable to assume we only use legitimate network traffic according to assumption A (Sect. III-B). However, this federated setting is subject to poisoning attacks during re-training. Malicious clients can use compromised training data aimed at modifying the anomaly detection model such that it eventually accepts anomalies [44]. Techniques have been developed to prevent poisoning attacks in local [45] and distributed learning settings [46]. Since federated learning is a hybrid approach in which a computation is delegated to clients, we can combine both prevention techniques. If the client device supports a suitable trusted execution environment, enforcement of local prevention methods can be verified remotely using remote attestation techniques.\n\n\nX. DISCUSSION\n\nGeneralizability of device fingerprinting. Features that compose our device fingerprint have been defined to model periodic flows and to differentiate IoT devices having different periodic flows. This feature definition and the use of a specific classifier, kNN, was motivated in Sect. IV. As in any machine learning application, the efficacy of a feature set and a classifier can only be demonstrated for a specific task and a specific dataset (no free lunch theorem [47]).\n\nTo ensure generalizability, we defined fingerprint features and selected a kNN classifier without prior knowledge about communications of specific IoT devices. Consequently our features are independent from any dataset and more specifically from the data we later processed in experiments. Dataindependent features and the machine learning method choice ensure generalizability of the fingerprinting technique [48]. Having assessed our technique on a large set of 33 IoT devices (IP cameras, sensors, coffee machine, etc.) representative of typical smart home IoT devices, we expect that the high efficacy (98.2% accuracy) seen during our evaluation (cf. Sect. VII) is likely to be generalizable to other IoT devices.\n\nSome IoT devices, especially those that operate on battery power, may be kept turned off by default and activated only on explicit user triggers. Such devices naturally will not have periodic communications; consequently techniques like D\u00cfOT are not effective in identifying such devices. However, these devices are also not critical from a security perspective: for example, such devices are unlikely to be detected by IoT malware scanning the local network. Generalizability of anomaly detection. Although we focused our evaluation on the most well-known IoT malware so far: Mirai [1] for the use case, D\u00cfOT is likely effective also in detecting other botnet malware like Persirai [11], Hajime [2], etc. D\u00cfOT's anomaly detection leverages deviations in the behavior of infected IoT devices caused by the malware. Such deviations will be observable for any malware. Scalability. Traditional anomaly detection approaches utilizing a single model for modeling benign behavior easily suffer from increasing false positive rates or decreasing sensitivity when the number of different types of behaviors (i.e., device types) captured by the model grows. This makes them unsuitable for real-world deployments with hundreds or thousands of different device types. Our solution, however, does not have this drawback, as it uses a dedicated detection model for each device type. Each of these models focuses solely on the characteristic behavior of one single device type, resulting in more specific and accurate behavioral models, independent of the number of different device types handled by the system. The detection accuracy of D\u00cfOT therefore remains high and its false alarm rate low even if scaled to handle numerous different device types as highlighted in Sect. VIII-C. Evolution of IoT device behavior. The behavior of an IoT device type can evolve due to, e.g., firmware updates that bring new functionality. This modifies its behavior and may trigger false alarms for legitimate communication. We prevent these false alarms by correlating anomaly reports from all Security Gateways at the IoT Security Service. Assuming firmware updates would be propagated to many client networks in a short time, if alarms are reported from a large number of security gateways for the same device type in a short time, we can cancel the alarm and trigger re-learning of the corresponding device identification and anomaly detection models to adapt to this new behavior. To ensure that sudden widespread outbreaks of an IoT malware infection campaign are not erroneously interpreted as firmware updates, the canceling of an alarm can be confirmed by a human expert at the IoT Security Service. This should represent a small burden, as the rollout of firmware updates is a relatively seldom event.\n\n\nXI. RELATED WORK\n\n\nA. Anomaly Detection in IoT Network\n\nSeveral solutions have been proposed for the detection and prevention of intrusions in IoT networks [49]- [51], sensor networks [9] and industrial control systems [52], [53]. SVELTE [51] is an intrusion detection system for protecting IoT networks from already known attacks. It adapts existing detection techniques to IoT-specific protocols, e.g., 6LoWPAN. In contrast, D\u00cfOT performs dynamic detection of unknown attacks and only models legitimate network traffic. Jia et al. [50] proposed a context-based system to automatically detect sensitive actions in IoT platforms. This system is designed for patching vulnerabilities in appified IoT platforms such as Samsung SmartThings. It does not adapt to multivendor IoT systems while D\u00cfOT is platform independent.\n\nDetecting anomalies in network traffic has a long history [7], [8], [54]- [58]. Existing approaches rely on analysing single network packets [7], [55] or clustering large numbers of packets [8], [9] to detected intrusions or compromised services. Some works have proposed, as we do, to model communication as a language [53], [57]. For instance, authors of [57] derive finite state automatons from layer 3-4 communication protocol specifications. Monitored packets are processed by the automaton to detect deviations from protocol specification or abnormally high usage of specific transitions. Automatons can only model short sequences of packets while we use GRU to model longer sequences, which enables the detection of stealthy attacks. Also, modeling protocol specification is coarse and leaves room for circumventing detection. In contrast, we use finer grained features for modeling packets. These are difficult to forge while preserving the adversarial utility of malicious packets. Finally, previous work did not tackle the problem of gathering data for training anomaly detection models. This is a tedious and long task considering the large number of IoT devices. D\u00cfOT integrates a crowdsourced federated learning solution to address the training of anomaly detection models.\n\nLately, recurrent neural networks (RNN) have been used for several anomaly-detection purposes. Most applications leverage long short-term memory (LSTM) networks for detecting anomalies in time series [59], aircraft data [60] or system logs [61]. One close application is the use of deep belief networks for mining DNS log data and detect infections in enterprise networks [62]. In contrast to these works, D\u00cfOT uses a different flavor of RNN, namely GRU, for anomaly detection. Also previous security applications [61], [62] were targeted at offline analysis of log data, while D\u00cfOT operates in real-time, detecting anomalies in live network traffic.\n\n\nB. Device-Type Identification\n\nEarly work in wireless communication fingerprinting targeted the identification of hardware-and driver-specific characteristics [15], [16], [63]. IoT-oriented device identification techniques leverage sensor-specific features [64]- [67] to uniquely identify a device. Our identification technique is positioned between the former and latter approaches, providing the right granularity to passively identify device types.\n\nSome solutions address device-type identification with the same granularity as we do [19], [68]- [71], while considering different definitions of \"type\". GTID [19] identifies the make and model of a device by analyzing the inter-arrival time of packets sent for a targeted type of traffic (e.g. Skype, ICMP, etc.). GTID requires a lot of traffic over several hours to identify a device's type. Aksu et al. [70] also model the interarrival time of Bluetooth packets to identify different model of wearable devices from a smartphone. Maiti et al. [18] introduced a device-type identification technique relying on analysis of encrypted WiFi traffic. A Random Forest classifier is trained with features extracted from a long sequence of WiFi frames. The technique was evaluated on 10 IoT devices and required at least 30,000 frames to be effective. In standby mode an IoT device can take days to generate such volumes of traffic. IoT Sentinel [13] leverages the burst of network traffic typical for the setup phase of an IoT device to identify its type. While accurate and requiring only two minutes of monitoring, IoT Sentinel only operates when a device is first installed to a network. Meidan et al. [69] analyze TCP sessions to identify generic types of IoT devices, i.e., smoke sensor, baby monitor, etc. The observation of at least 20 TCP sessions was required to reach acceptable accuracy for 17 devices. The authors reported that 1/3 of their IoT devices did not produce any TCP sessions without user interactions (i.e., in standby mode), and for the remaining 2/3 the mean inter-arrival time of TCP sessions was up to 5 minutes, requiring over one hour and a half to be identified. Guo and Heidemann [71] use our same intuition to identify IoT devices, namely that IoT devices periodically connect to specific services on the Internet. They identify the server names and IP addresses that a known IoT device connects to on the Internet. This information is later used to identify unknown devices if they connect to the same IP addresses. A limitation of this approach is that different IoT devices from a same manufacturer often connect to the same servers which produces collisions between device types from a same manufacturer. Also many IoT device manufacturers leverage cloud services such as Amazon for hosting their services [68], which can also produce collisions.\n\nState-of-the-Art methods for device-type identification are supervised and require labeled data to be trained. D\u00cfOT is not restricted to a finite set of pre-learned device types. It creates abstract device types, learns their fingerprints and adapts autonomously when new types are discovered. D\u00cfOT is also not restricted to a specific type of dense network traffic. It is the first technique to identify IoT device types based on their background periodic communication. Consequently and in contrast to previous work, it identifies the type of an IoT device under any state of operation.\n\nSome security solutions for the IoT with a distributed design close to D\u00cfOT have been proposed in commercial solutions, e.g., IoT guardian from Zingbox [72]. While relying on an unsupervised device identification technique, IoT guardian does not propose any concrete implementation for it. Moreover, IoT guardian relies on partial deep packet inspection, which prevents it from being used on encrypted communications. D\u00cfOT does not have such limitations.\n\n\nXII. CONCLUSIONS\n\nIn this paper we introduced D\u00cfOT: a self-learning system for detecting compromised devices in IoT networks. Our solution relies on novel automated techniques for device-type identification and device-type-specific anomaly detection. D\u00cfOT does not require any human intervention or labeled data to operate. It learns device-type identification models and anomaly detection models autonomously, using unlabeled crowdsourced data captured in client IoT networks. We evaluated the accuracy of D\u00cfOT's device-type identification method on a large dataset comprising 33 real-world IoT devices showing that it quickly learns (in a few hours) accurate (98%) identification models. We demonstrated the efficacy of anomaly detection in detecting a large set of malicious behavior from devices infected by the Mirai malware. D\u00cfOT detected 95.6 % of attacks in \u2248 257 ms on average and without raising any false alarm when evaluated in a real-world deployment.     \n\n\nAPPENDIX A IOT DEVICE LIST\n\nFig. 3 :\n3Four binary time series extracted from periodic flows of a D-LinkCam DCS935L IP camera. The flows correspond to ARP protocol, HTTPS (port 443), mDNS (port 5353) and TCP port 62976. All flows are periodic.\n\n\n[5s.; 29s.]. The ranges were manually chosen in an attempt to segregate periods according to their relative duration: [5s.; 29s.]; [30s.; 59s.]; [60s.; 119s.]; [120s.; 600s.]. Periods of less than 5 seconds or more than 10 minutes are discarded. Identifying long periods requires long traffic captures which slows down the fingerprint extraction.Period stability (17 features). Features in this category measure the stability of the inferred periods using r and rn metrics, as discussed in Sect IV-A. The mean and standard deviation (SD) of r and rn metrics are computed for each flow and period. Features 17-20, respectively 24-27, are calculated by binning the values of Mean(r), respectively Mean(rn), into four ranges and counting the number of values in each bin. The bin ranges of mean r and rn values were selected to distinguish noisy [0.2; 0.7[ from pure [0.7; 1[ single-period flows as well as different multi-periodic flows [1; 2[, [2; +\u221e[. Features 21-23, respectively 28-30, are calculated by binning the values of SD(r), respectively SD(rn), into three ranges and counting the number of values in each bin. These ranges were selected to distinguish very stable [0; 0.02[ from stable [0.02; 0.1[ and unstable [0.1; +\u221e[ periodic flows. Features 31-33 are computed by binning the values of the difference rn\u2212r and into three ranges of values and counting the corresponding bin cardinalities. These ranges were selected to characterize the differences between stable and unstable periods of flows.\n\n\u2022 c 5\n5TCP flags: Normal communications contain packets with specific TCP flag sequences e.g., SY N \u2192 SY N ACK \u2192 ACK \u2192 P U SH \u2192 F IN . However, many attacks do not follow standard protocols, e.g., SYN flood (DDoS attack) only sends SY N messages. \u2022 c 6 encapsulated protocol types: Each device type usually uses a set of specific protocols, which is likely different from protocol types used in attacks. \u2022 c 7 IAT bin: (bin index of packet inter-arrival time (IAT) using three bins: < 0.001 ms, 0.001 ms to 0.05 ms, and > 0.05 ms) Many attacks (e.g., DDoS) usually generate traffic at a high packet rate, resulting in smaller IAT values in than normal communications.\n\nFig. 4 :\n4Occurrence probabilities of 15 packets from Edimax Plug when Mirai was in standby stage. The red '#0' denotes the malicious packets.\n\nFig. 5 :\n5Laboratory network setup employ a federated learning approach for anomaly detectionbased intrusion detection (in general and not only for IoT).\n\nFig. 7 :Fig. 8 :\n78Precision, recall and f1-score increase with respect to training set size. ROC curve of TPR and FPR in dependence of detection threshold \u03b4 and anomaly triggering threshold \u03b3.\n\n\nDynamic threat landscape. New IoT devices are released on a daily basis. A significant subset of them have security vulnerabilities. Exploits targeting vulnerable devices are also being developed by adversaries at a similarly high pace. This makes the threats against IoT devices highly dynamic and ever-increasing. \u2022 C2 -Resource limitations. IoT devices have limited capabilities w.r.t. available memory, computing resources Fig. 1: D\u00cfOT system model and energy often making it infeasible to perform ondevice detection. \u2022 C3 -IoT device heterogeneity and false alarms. Behaviors of different IoT devices are very heterogeneous,IoT Security Service \nDevice-Type \nIdentification \n\nAnomaly \nDetection Models \n\nIoT device \nIoT device \nIoT device \nIoT device \nIoT device \n\nDevice \nFingerprinting \n\nAnomaly \nDetection \n\nWiFi \nEthernet \n\nIoT device \n\nIoT device \nIoT device \n\nLocal SOHO network \n\nBotnet \nserver \n\nSecurity Gateway \n\nInfected \nIoT device \n\nInfected \nIoT device \n\nInternet \nSecurity \nGateway \n\n\n\nTABLE\n\n\nTABLE II :\nIIPacket characteristics used in symbol mappingID Characteristic \nValue \nc 1 \ndirection \n1 = incoming, 0 = outgoing \nc 2 \n\n\nTABLE III :\nIIIActions for different IoT device categoriesCategory (count) Typical actions \nIP cameras \n\nTABLE IV :\nIVCharacteristics of used datasetsDataset \nSize (MiB) \nFlows \nPackets \nActivity \n465 \n115,951 \n2,087,280 \nDeployment \n578 \n95,518 \n2,286,697 \nAttack \n7,734 8,464,434 21,919,273 \n\n\n\nTABLE V :\nVAverage detection times of analyzed Mirai attacksAttack \npackets/s. det. time (ms.) \nTPR \nstandby \n0.05 \n4,051,889 \n33.33% \nPre-Infection \n426.66 \n524 100.00% \nInfection \n721.18 \n272 \n93.45% \nScanning \n752.60 \n166 100.00% \nDoS \n1,412.94 \n92 \n88.96% \nAverage \n866.88 \n257\u00b1194 \n95.60% \n\n\n\nTABLE VI :\nVIEffect of using federated learning comparing to \ncentralizing approach \n\nType \nCentralized \nlearning \n\nFederated learning \n5 clients \n9 clients \n15 clients \nFPR \n0.00% \n0.00% \n0.00% \n0.00% \nTPR \n95.60% \n95.43% \n95.01% \n94.07% \n\n\n\nTable VII\nVIIpresents the 33 IoT devices used during evaluation of D\u00cfOT. APPENDIX B CONFUSION MATRIX DEVICE-TYPE IDENTIFICATIONTable VIII is the confusion matrix obtained from devicetype identification evaluation. APPENDIX C IOT DEVICE ASSIGNMENT TO TYPES Table IX presents the device types created during device type identification and the affectation of each IoT device to these types. APPENDIX D EXAMINED MIRAI ATTACK VECTORS Table X shows the different attack scenarios used in collecting the attack dataset.\n\nTABLE VIII :\nVIIIConfusion matrix for device-type identification. Obtained with 10 repetitions of 4-fold cross validation. Columns represent predicted labels and rows actual labels. #01 #02 #03 #04 #05 #06 #07 #08 #09 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22 #23\n\nTABLE IX :\nIXAffectation of 33 IoT devices to 23 D\u00cfOT device types during evaluation (Sect. VII)device-type IoT device \ntype#01 \nApexisCam \ntype#02 \nCamHi \ntype#03 \nD-LinkCamDCH935L \n\ntype#04 \nD-LinkCamDCS930L \nD-LinkCamDCS932L \nD-LinkDoorSensor \nD-LinkSensor \ntype#05 \nD-LinkSiren \nD-LinkSwitch \nD-LinkWaterSensor \n\ntype#06 \nEdimaxCamIC3115 \nEdimaxCamIC3115(2) \n\ntype#07 \nEdimaxPlug1101W \nEdimaxPlug2101W \ntype#08 \nEdnetCam \ntype#09 \nEdnetGateway \ntype#10 \nHomeMaticPlug \ntype#11 \nLightify \ntype#12 \nSmcRouter \n\ntype#13 \nTPLinkPlugHS100 \nTPLinkPlugHS110 \ntype#14 \nUbntAirRouter \ntype#15 \nWansviewCam \ntype#16 \nWemoLink \n\ntype#17 \nWemoInsightSwitch \nWemoSwitch \ntype#18 \nHueSwitch \ntype#19 \nAmazonEcho \ntype#20 \nAmazonEchoDot \ntype#21 \nGoogleHome \ntype#22 \nNetatmo \n\ntype#23 \niKettle2 \nSmarterCoffee \n\n\n\nTABLE X :\nXAttack scenarios in the attack dataset. Source: https://www.nanog.org/sites/default/files/1 Winward Mirai The Rise.pdfScenario \nDescription \nscanning Only scanning enabled \nudp \nUDP flood \nsyn \nSYN flood \nack \nACK flood \nudpplain UDP flood with less options \nvse \nValve source engine specific flood \ndns \nDNS resolver flood \ngreip \nGRE IP flood \ngreeth \nGRE Ethernet flood \nhttp \nHTTP flood \n\n\nACKNOWLEDGMENTThis work was supported in part by the Intel Collaborative Institute for Collaborative Autonomous and Resilient Systems (ICRI-CARS) and by the SELIoT project and the Academy of Finland under the WiFiUS program (grant 309994). We would like to thank Cisco Systems, Inc. for their support of this work.\nUnderstanding the mirai botnet. M Antonakakis, T April, M Bailey, M Bernhard, E Bursztein, J Cochran, Z Durumeric, J A Halderman, L Invernizzi, M Kallitsis, D Kumar, C Lever, Z Ma, J Mason, D Menscher, C Seaman, N Sullivan, K Thomas, Y Zhou, 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BCM. Antonakakis, T. April, M. Bailey, M. Bernhard, E. Bursztein, J. Cochran, Z. Durumeric, J. A. Halderman, L. Invernizzi, M. Kallitsis, D. Kumar, C. Lever, Z. Ma, J. Mason, D. Menscher, C. Seaman, N. Sullivan, K. Thomas, and Y. Zhou, \"Understanding the mirai botnet,\" in 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BC: USENIX Association, 2017, pp. 1093-1110.\n\nHajime: Analysis of a decentralized internet worm for IoT devices. S Edwards, I Profetis, Rapidity Networks, Tech. Rep. S. Edwards and I. Profetis, \"Hajime: Analysis of a decentralized internet worm for IoT devices,\" Rapidity Networks, Tech. Rep., 2016.\n\nC Kolias, G Kambourakis, A Stavrou, J Voas, DDoS in the IoT: Mirai and other botnets. 50C. Kolias, G. Kambourakis, A. Stavrou, and J. Voas, \"DDoS in the IoT: Mirai and other botnets,\" Computer, vol. 50, no. 7, pp. 80-84, 2017.\n\nBrickerBot results in PDoS attack. Radware, Radware, \"BrickerBot results in PDoS attack,\" https://security.radware.com/ddos-threats-attacks/ brickerbot-pdos-permanent-denial-of-service/.\n\nA lightweight vulnerability mitigation framework for iot devices. N Hadar, S Siboni, Y Elovici, http:/doi.acm.org/10.1145/3139937.3139944Proceedings of the 2017 Workshop on Internet of Things Security and Privacy, ser. IoTS&#38;P '17. the 2017 Workshop on Internet of Things Security and Privacy, ser. IoTS&#38;P '17New York, NY, USAACMN. Hadar, S. Siboni, and Y. Elovici, \"A lightweight vulnerability mitigation framework for iot devices,\" in Proceedings of the 2017 Workshop on Internet of Things Security and Privacy, ser. IoTS&#38;P '17. New York, NY, USA: ACM, 2017, pp. 71-75. [Online]. Available: http://doi.acm.org/10.1145/3139937.3139944\n\nMachine learning ddos detection for consumer internet of things devices. R Doshi, N Apthorpe, N Feamster, abs/1804.04159CoRR. R. Doshi, N. Apthorpe, and N. Feamster, \"Machine learning ddos detection for consumer internet of things devices,\" CoRR, vol. abs/1804.04159, 2018. [Online]. Available: http://arxiv.org/abs/1804. 04159\n\nService specific anomaly detection for network intrusion detection. C Kr\u00fcgel, T Toth, E Kirda, Proceedings of the 2002 ACM symposium on Applied computing. the 2002 ACM symposium on Applied computingACMC. Kr\u00fcgel, T. Toth, and E. Kirda, \"Service specific anomaly detection for network intrusion detection,\" in Proceedings of the 2002 ACM symposium on Applied computing. ACM, 2002, pp. 201-208.\n\nIntrusion detection with unlabeled data using clustering. L Portnoy, E Eskin, S Stolfo, Proceedings of ACM CSS Workshop on Data Mining Applied to Security. ACM CSS Workshop on Data Mining Applied to SecurityL. Portnoy, E. Eskin, and S. Stolfo, \"Intrusion detection with unlabeled data using clustering,\" in In Proceedings of ACM CSS Workshop on Data Mining Applied to Security, 2001.\n\nHyperspherical cluster based distributed anomaly detection in wireless sensor networks. S Rajasegarar, C Leckie, M Palaniswami, Journal of Parallel and Distributed Computing. 74S. Rajasegarar, C. Leckie, and M. Palaniswami, \"Hyperspherical cluster based distributed anomaly detection in wireless sensor networks,\" Jour- nal of Parallel and Distributed Computing, vol. 74, no. 1, pp. 1833- 1847, 2014.\n\nKrebsOnSecurity hit with record DDoS. B Krebs, B. Krebs, \"KrebsOnSecurity hit with record DDoS,\" https:// krebsonsecurity.com/2016/09/krebsonsecurity-hit-with-record-ddos/.\n\nPersirai: New internet of things (IoT) botnet targets IP cameras. T Yeh, D Chiu, K Lu, T. Yeh, D. Chiu, and K. Lu, \"Persirai: New internet of things (IoT) botnet targets IP cameras,\" TrendMicro, https://blog.trendmicro.com/trendlabs-security-intelligence/ persirai-new-internet-things-iot-botnet-targets-ip-cameras/.\n\nIoTPOT: A novel honeypot for revealing current IoT threats. Y M P Pa, S Suzuki, K Yoshioka, T Matsumoto, T Kasama, C Rossow, Journal of Information Processing. 243Y. M. P. Pa, S. Suzuki, K. Yoshioka, T. Matsumoto, T. Kasama, and C. Rossow, \"IoTPOT: A novel honeypot for revealing current IoT threats,\" Journal of Information Processing, vol. 24, no. 3, pp. 522- 533, 2016.\n\nIoT Sentinel: Automated Device-Type Identification for Security Enforcement in IoT. M Miettinen, S Marchal, I Hafeez, N Asokan, A Sadeghi, S Tarkoma, Proc. 37th IEEE International Conference on Distributed Computing Systems (ICDCS 2017). 37th IEEE International Conference on Distributed Computing Systems (ICDCS 2017)M. Miettinen, S. Marchal, I. Hafeez, N. Asokan, A. Sadeghi, and S. Tarkoma, \"IoT Sentinel: Automated Device-Type Identification for Security Enforcement in IoT,\" in Proc. 37th IEEE International Con- ference on Distributed Computing Systems (ICDCS 2017), Jun. 2017.\n\nRemote physical device fingerprinting. T Kohno, A Broido, K C Claffy, IEEE Trans. Dependable Secure Comput. 22T. Kohno, A. Broido, and K. C. Claffy, \"Remote physical device fingerprinting,\" IEEE Trans. Dependable Secure Comput., vol. 2, no. 2, pp. 93-108, April 2005.\n\nFingerprinting 802.11 implementations via statistical analysis of the duration field. J Cache, Uninformed. 5J. Cache, \"Fingerprinting 802.11 implementations via statistical analysis of the duration field,\" Uninformed, vol. 5, 2006.\n\nPassive data link layer 802.11 wireless device driver fingerprinting. J Franklin, D Mccoy, P Tabriz, V Neagoe, J Van Randwyk, D Sicker, USENIX Security Symposium. USENIX. J. Franklin, D. McCoy, P. Tabriz, V. Neagoe, J. Van Randwyk, and D. Sicker, \"Passive data link layer 802.11 wireless device driver finger- printing,\" in USENIX Security Symposium. USENIX, 2006.\n\nWireless device identification with radiometric signatures. V Brik, S Banerjee, M Gruteser, S Oh, International Conference on Mobile Computing and Networking. ACMV. Brik, S. Banerjee, M. Gruteser, and S. Oh, \"Wireless device iden- tification with radiometric signatures,\" in International Conference on Mobile Computing and Networking. ACM, 2008, pp. 116-127.\n\nLink-layer device type classification on encrypted wireless traffic with cots radios. R R Maiti, S Siby, R Sridharan, N O Tippenhauer, European Symposium on Research in Computer Security. SpringerR. R. Maiti, S. Siby, R. Sridharan, and N. O. Tippenhauer, \"Link-layer device type classification on encrypted wireless traffic with cots radios,\" in European Symposium on Research in Computer Security. Springer, 2017, pp. 247-264.\n\nGTID: A technique for physical device and device type fingerprinting. S V Radhakrishnan, A S Uluagac, R Beyah, IEEE Transactions on Dependable and Secure Computing. 125S. V. Radhakrishnan, A. S. Uluagac, and R. Beyah, \"GTID: A technique for physical device and device type fingerprinting,\" IEEE Transactions on Dependable and Secure Computing, vol. 12, no. 5, pp. 519-532, 2015.\n\nOn computing the discrete fourier transform. S Winograd, Mathematics of computation. 32141S. Winograd, \"On computing the discrete fourier transform,\" Mathemat- ics of computation, vol. 32, no. 141, pp. 175-199, 1978.\n\nOvercoming the myopia of inductive learning algorithms with ReliefF. I Kononenko, E \u0160imec, M Robnik-\u0160ikonja, Applied Intelligence. 71I. Kononenko, E.\u0160imec, and M. Robnik-\u0160ikonja, \"Overcoming the my- opia of inductive learning algorithms with ReliefF,\" Applied Intelligence, vol. 7, no. 1, pp. 39-55, 1997.\n\nOptimal weighted nearest neighbour classifiers. R J Samworth, The Annals of Statistics. 405R. J. Samworth et al., \"Optimal weighted nearest neighbour classifiers,\" The Annals of Statistics, vol. 40, no. 5, pp. 2733-2763, 2012.\n\nGated recurrent unit. keras.io, \"Gated recurrent unit,\" 2018, https://keras.io/layers/recurrent/.\n\nEmpirical evaluation of gated recurrent neural networks on sequence modeling. J Chung, \u00c7 G\u00fcl\u00e7ehre, K Cho, Y Bengio, abs/1412.3555CoRR. J. Chung, \u00c7 . G\u00fcl\u00e7ehre, K. Cho, and Y. Bengio, \"Empirical evaluation of gated recurrent neural networks on sequence modeling,\" CoRR, vol. abs/1412.3555, 2014, http://arxiv.org/abs/1412.3555.\n\nRecurrent recommender networks. C.-Y Wu, A Ahmed, A Beutel, A J Smola, H Jing, http:/doi.acm.org/10.1145/3018661.3018689Proceedings of the Tenth ACM International Conference on Web Search and Data Mining, ser. WSDM '17. the Tenth ACM International Conference on Web Search and Data Mining, ser. WSDM '17New York, NY, USAACMC.-Y. Wu, A. Ahmed, A. Beutel, A. J. Smola, and H. Jing, \"Recurrent recommender networks,\" in Proceedings of the Tenth ACM International Conference on Web Search and Data Mining, ser. WSDM '17. New York, NY, USA: ACM, 2017, pp. 495-503. [Online]. Available: http://doi.acm.org/10.1145/3018661.3018689\n\nFederated learning: Strategies for improving communication efficiency. J Konecn\u00fd, B Mcmahan, F X Yu, P Richt\u00e1rik, A T Suresh, D Bacon, abs/1610.05492CoRR. J. Konecn\u00fd, B. McMahan, F. X. Yu, P. Richt\u00e1rik, A. T. Suresh, and D. Bacon, \"Federated learning: Strategies for improving communication efficiency,\" CoRR, vol. abs/1610.05492, 2016.\n\nFederated multi-task learning. V Smith, C.-K Chiang, M Sanjabi, A S Talwalkar, Advances in Neural Information Processing Systems. I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. GarnettV. Smith, C.-K. Chiang, M. Sanjabi, and A. S. Talwalkar, \"Federated multi-task learning,\" in Advances in Neural Information Processing Systems, I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett, Eds., 2017, pp. 4427-4437.\n\nCommunication-efficient learning of deep networks from decentralized data. B Mcmahan, E Moore, D Ramage, S Hampson, B A Arcas, Proceedings of the 20 th International Conference on Artificial Intelligence and Statistics. the 20 th International Conference on Artificial Intelligence and StatisticsB. McMahan, E. Moore, D. Ramage, S. Hampson, and B. A. y Arcas, \"Communication-efficient learning of deep networks from decentralized data,\" in Proceedings of the 20 th International Conference on Artificial Intelligence and Statistics, 2017, pp. 1273-1282.\n\nMirai source code. J Gamblin, J. Gamblin, \"Mirai source code,\" Jul. 2017, https://github.com/jgamblin/ Mirai-Source-Code.\n\nA micro web framework written in python. \"A micro web framework written in python,\" http://flask.pocoo.org.\n\nFlask socketio. \"Flask socketio,\" https://flask-socketio.readthedocs.io/en/latest/.\n\nFlask socketio client. \"Flask socketio client,\" https://github.com/socketio/socket.io-client.\n\ngevent asynchronous framework. \"gevent asynchronous framework,\" https://github.com/gevent/gevent.\n\nKeras deep learning library. \"Keras deep learning library,\" https://faroit.github.io/keras-docs/2.0.2/.\n\nIs feature selection secure against training data poisoning. H Xiao, B Biggio, G Brown, G Fumera, C Eckert, F Roli, in International Conference on Machine Learning. H. Xiao, B. Biggio, G. Brown, G. Fumera, C. Eckert, and F. Roli, \"Is fea- ture selection secure against training data poisoning?\" in International Conference on Machine Learning, 2015, pp. 1689-1698.\n\nDevice identification via analog signal fingerprinting: A matched filter approach. R M Gerdes, T E Daniels, M Mina, S Russell, NDSS. R. M. Gerdes, T. E. Daniels, M. Mina, and S. Russell, \"Device identi- fication via analog signal fingerprinting: A matched filter approach.\" in NDSS, 2006.\n\nOn the reliability of wireless fingerprinting using clock skews. C Arackaparambil, S Bratus, A Shubina, D Kotz, ACM Conference on Wireless Network Security. ACMC. Arackaparambil, S. Bratus, A. Shubina, and D. Kotz, \"On the relia- bility of wireless fingerprinting using clock skews,\" in ACM Conference on Wireless Network Security. ACM, 2010, pp. 169-174.\n\nWiFi Simple Configuration Technical Specification. Wifi Alliance, WiFi Alliance, WiFi Simple Configuration Technical Specification.\n\nTowards evaluating the robustness of neural networks. N Carlini, D Wagner, Security and Privacy (SP. N. Carlini and D. Wagner, \"Towards evaluating the robustness of neural networks,\" in Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 2017, pp. 39-57.\n\nAdversarial examples in the physical world. A Kurakin, I Goodfellow, S Bengio, arXiv:1607.02533arXiv preprintA. Kurakin, I. Goodfellow, and S. Bengio, \"Adversarial examples in the physical world,\" arXiv preprint arXiv:1607.02533, 2016.\n\nRobust physical-world attacks on machine learning models. I Evtimov, K Eykholt, E Fernandes, T Kohno, B Li, A Prakash, A Rahmati, D Song, arXiv:1707.08945arXiv preprintI. Evtimov, K. Eykholt, E. Fernandes, T. Kohno, B. Li, A. Prakash, A. Rahmati, and D. Song, \"Robust physical-world attacks on machine learning models,\" arXiv preprint arXiv:1707.08945, 2017.\n\nCocaine noodles: exploiting the gap between human and machine speech recognition. T Vaidya, Y Zhang, M Sherr, C Shields, WOOT. 15T. Vaidya, Y. Zhang, M. Sherr, and C. Shields, \"Cocaine noodles: exploiting the gap between human and machine speech recognition,\" WOOT, vol. 15, pp. 10-11, 2015.\n\nDolphinattack: Inaudible voice commands. G Zhang, C Yan, X Ji, T Zhang, T Zhang, W Xu, Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. the 2017 ACM SIGSAC Conference on Computer and Communications SecurityACMG. Zhang, C. Yan, X. Ji, T. Zhang, T. Zhang, and W. Xu, \"Dolphinattack: Inaudible voice commands,\" in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 103-117.\n\nPoisoning attacks against support vector machines. B Biggio, B Nelson, P Laskov, Proceedings of the 29th International Coference on International Conference on Machine Learning. the 29th International Coference on International Conference on Machine LearningOmnipressB. Biggio, B. Nelson, and P. Laskov, \"Poisoning attacks against support vector machines,\" in Proceedings of the 29th International Coference on International Conference on Machine Learning. Omnipress, 2012, pp. 1467-1474.\n\nAntidote: understanding and defending against poisoning of anomaly detectors. B I Rubinstein, B Nelson, L Huang, A D Joseph, S Lau, S Rao, N Taft, J Tygar, Proceedings of the 9th ACM SIGCOMM conference on Internet measurement. the 9th ACM SIGCOMM conference on Internet measurementACMB. I. Rubinstein, B. Nelson, L. Huang, A. D. Joseph, S.-h. Lau, S. Rao, N. Taft, and J. Tygar, \"Antidote: understanding and defending against poisoning of anomaly detectors,\" in Proceedings of the 9th ACM SIGCOMM conference on Internet measurement. ACM, 2009, pp. 1- 14.\n\nAuror: Defending against poisoning attacks in collaborative deep learning systems. S Shen, S Tople, P Saxena, Proceedings of the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16. the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16ACMS. Shen, S. Tople, and P. Saxena, \"Auror: Defending against poisoning attacks in collaborative deep learning systems,\" in Proceedings of the 32Nd Annual Conference on Computer Security Applications, ser. ACSAC '16. ACM, 2016, pp. 508-519.\n\nNo free lunch theorems for optimization. D H Wolpert, W G Macready, IEEE transactions on evolutionary computation. 11D. H. Wolpert and W. G. Macready, \"No free lunch theorems for optimization,\" IEEE transactions on evolutionary computation, vol. 1, no. 1, pp. 67-82, 1997.\n\nOff-the-hook: An efficient and usable client-side phishing prevention application. S Marchal, G Armano, T Gr\u00f6ndahl, K Saari, N Singh, N Asokan, IEEE Transactions on Computers. 6610S. Marchal, G. Armano, T. Gr\u00f6ndahl, K. Saari, N. Singh, and N. Asokan, \"Off-the-hook: An efficient and usable client-side phishing prevention application,\" IEEE Transactions on Computers, vol. 66, no. 10, pp. 1717-1733, 2017.\n\nIDIoT: Securing the Internet of Things like it's 1994. D Barrera, I Molloy, H Huang, ArXiv e-printsD. Barrera, I. Molloy, and H. Huang, \"IDIoT: Securing the Internet of Things like it's 1994,\" ArXiv e-prints, Dec. 2017, http://adsabs.harvard. edu/abs/2017arXiv171203623B.\n\nContexloT: Towards providing contextual integrity to appified IoT platforms. Y J Jia, Q A Chen, S Wang, A Rahmati, E Fernandes, Z M Mao, A Prakash, 24th Annual Network & Distributed System Security Symposium (NDSS). Y. J. Jia, Q. A. Chen, S. Wang, A. Rahmati, E. Fernandes, Z. M. Mao, and A. Prakash, \"ContexloT: Towards providing contextual integrity to appified IoT platforms,\" in 24th Annual Network & Distributed System Security Symposium (NDSS), feb 2017.\n\nSvelte: Real-time intrusion detection in the internet of things. S Raza, L Wallgren, T Voigt, Ad hoc networks. 118S. Raza, L. Wallgren, and T. Voigt, \"Svelte: Real-time intrusion detection in the internet of things,\" Ad hoc networks, vol. 11, no. 8, pp. 2661- 2674, 2013.\n\nSenami: Selective noninvasive active monitoring for ics intrusion detection. W Jardine, S Frey, B Green, A Rashid, Proceedings of the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16. the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16W. Jardine, S. Frey, B. Green, and A. Rashid, \"Senami: Selective non- invasive active monitoring for ics intrusion detection,\" in Proceedings of the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16, 2016, pp. 23-34.\n\nAutomatic construction of statechartbased anomaly detection models for multi-threaded scada via spectral analysis. A Kleinmann, A Wool, Proceedings of the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16. the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16ACMA. Kleinmann and A. Wool, \"Automatic construction of statechart- based anomaly detection models for multi-threaded scada via spectral analysis,\" in Proceedings of the 2Nd ACM Workshop on Cyber-Physical Systems Security and Privacy, ser. CPS-SPC '16. ACM, 2016, pp. 1-12.\n\nAnomaly-based network intrusion detection: Techniques, systems and challenges. P Garcia-Teodoro, J Diaz-Verdejo, G Maci\u00e1-Fern\u00e1ndez, E V\u00e1zquez, computers & security. 281-2P. Garcia-Teodoro, J. Diaz-Verdejo, G. Maci\u00e1-Fern\u00e1ndez, and E. V\u00e1zquez, \"Anomaly-based network intrusion detection: Techniques, systems and challenges,\" computers & security, vol. 28, no. 1-2, pp. 18-28, 2009.\n\nAnomaly detection of web-based attacks. C Kruegel, G Vigna, Proceedings of the 10th ACM conference on Computer and communications security. the 10th ACM conference on Computer and communications securityACMC. Kruegel and G. Vigna, \"Anomaly detection of web-based attacks,\" in Proceedings of the 10th ACM conference on Computer and communi- cations security. ACM, 2003, pp. 251-261.\n\nA comparative study of anomaly detection schemes in network intrusion detection. A Lazarevic, L Ertoz, V Kumar, A Ozgur, J Srivastava, Proceedings of the 2003 SIAM International Conference on Data Mining. SIAM. the 2003 SIAM International Conference on Data Mining. SIAMA. Lazarevic, L. Ertoz, V. Kumar, A. Ozgur, and J. Srivastava, \"A comparative study of anomaly detection schemes in network intrusion detection,\" in Proceedings of the 2003 SIAM International Conference on Data Mining. SIAM, 2003, pp. 25-36.\n\nSpecification-based anomaly detection: a new approach for detecting network intrusions. R Sekar, A Gupta, J Frullo, T Shanbhag, A Tiwari, H Yang, S Zhou, Proceedings of the 9th ACM conference on Computer and communications security. the 9th ACM conference on Computer and communications securityACMR. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Tiwari, H. Yang, and S. Zhou, \"Specification-based anomaly detection: a new approach for detecting network intrusions,\" in Proceedings of the 9th ACM conference on Computer and communications security. ACM, 2002, pp. 265-274.\n\nOutside the closed world: On using machine learning for network intrusion detection. R Sommer, V Paxson, Security and Privacy (SP), 2010 IEEE Symposium on. IEEER. Sommer and V. Paxson, \"Outside the closed world: On using machine learning for network intrusion detection,\" in Security and Privacy (SP), 2010 IEEE Symposium on. IEEE, 2010, pp. 305-316.\n\nLong short term memory networks for anomaly detection in time series. P Malhotra, L Vig, G Shroff, P Agarwal, Proceedings. Presses universitaires de Louvain. Presses universitaires de Louvain89P. Malhotra, L. Vig, G. Shroff, and P. Agarwal, \"Long short term memory networks for anomaly detection in time series,\" in Proceedings. Presses universitaires de Louvain, 2015, p. 89.\n\nAnomaly detection in aircraft data using recurrent neural networks (rnn). A Nanduri, L Sherry, Integrated Communications Navigation and Surveillance (ICNS). IEEEA. Nanduri and L. Sherry, \"Anomaly detection in aircraft data using recurrent neural networks (rnn),\" in Integrated Communications Navi- gation and Surveillance (ICNS), 2016. IEEE, 2016, pp. 5C2-1.\n\nDeeplog: Anomaly detection and diagnosis from system logs through deep learning. M Du, F Li, G Zheng, V Srikumar, http:/doi.acm.org/10.1145/3133956.3134015Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '17. the 2017 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '17ACMM. Du, F. Li, G. Zheng, and V. Srikumar, \"Deeplog: Anomaly de- tection and diagnosis from system logs through deep learning,\" in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '17. ACM, 2017, pp. 1285-1298, http://doi.acm.org/10.1145/3133956.3134015.\n\nDetection of early-stage enterprise infection by mining large-scale log data. A Oprea, Z Li, T.-F Yen, S H Chin, S Alrwais, Dependable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP International Conference on. IEEEA. Oprea, Z. Li, T.-F. Yen, S. H. Chin, and S. Alrwais, \"Detection of early-stage enterprise infection by mining large-scale log data,\" in Dependable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP International Conference on. IEEE, 2015, pp. 45-56.\n\nImproving 802.11 fingerprinting of similar devices by cooperative fingerprinting. C Maurice, S Onno, C Neumann, O Heen, A Francillon, Proceedings of the 2013 International Conference on Security and Cryptography (SECRYPT). the 2013 International Conference on Security and Cryptography (SECRYPT)C. Maurice, S. Onno, C. Neumann, O. Heen, and A. Francillon, \"Improving 802.11 fingerprinting of similar devices by cooperative fingerprinting,\" in Proceedings of the 2013 International Conference on Security and Cryptography (SECRYPT), 2013, pp. 1-8.\n\nMobile device identification via sensor fingerprinting. H Bojinov, Y Michalevsky, G Nakibly, D Boneh, arXiv preprint:1408.1416H. Bojinov, Y. Michalevsky, G. Nakibly, and D. Boneh, \"Mobile device identification via sensor fingerprinting,\" arXiv preprint:1408.1416, 2014.\n\nAccelerometer-based device fingerprinting for multi-factor mobile authentication. T Van Goethem, W Scheepers, D Preuveneers, W Joosen, Proceedings of the 8th International Symposium on Engineering Secure Software and Systems. the 8th International Symposium on Engineering Secure Software and SystemsSpringer International PublishingT. Van Goethem, W. Scheepers, D. Preuveneers, and W. Joosen, \"Accelerometer-based device fingerprinting for multi-factor mobile au- thentication,\" in Proceedings of the 8th International Symposium on Engineering Secure Software and Systems, ESSoS 2016. Springer International Publishing, 2016, pp. 106-121.\n\nOn the authentication of devices in the Internet of Things. Y Sharaf-Dabbagh, W Saad, Proceedinds of the 17th IEEE International Symposium on A World of Wireless, Mobile and Multimedia Networks (WoWMoM). eedinds of the 17th IEEE International Symposium on A World of Wireless, Mobile and Multimedia Networks (WoWMoM)IEEEY. Sharaf-Dabbagh and W. Saad, \"On the authentication of devices in the Internet of Things,\" in Proceedinds of the 17th IEEE International Symposium on A World of Wireless, Mobile and Multimedia Networks (WoWMoM). IEEE, 2016, pp. 1-3.\n\nTrusted sensors for participatory sensing and IoT applications based on physically unclonable functions. I Haider, M H\u00f6berl, B Rinner, Proceedings of the 2Nd ACM International Workshop on IoT Privacy, Trust, and Security, ser. IoTPTS '16. the 2Nd ACM International Workshop on IoT Privacy, Trust, and Security, ser. IoTPTS '16ACMI. Haider, M. H\u00f6berl, and B. Rinner, \"Trusted sensors for participatory sensing and IoT applications based on physically unclonable functions,\" in Proceedings of the 2Nd ACM International Workshop on IoT Privacy, Trust, and Security, ser. IoTPTS '16. ACM, 2016, pp. 14-21.\n\nA smart home is no castle: Privacy vulnerabilities of encrypted iot traffic. N Apthorpe, D Reisman, N Feamster, arXiv:1705.06805arXiv preprintN. Apthorpe, D. Reisman, and N. Feamster, \"A smart home is no castle: Privacy vulnerabilities of encrypted iot traffic,\" arXiv preprint arXiv:1705.06805, 2017.\n\nDetection of unauthorized IoT devices using machine learning techniques. Y Meidan, M Bohadana, A Shabtai, M Ochoa, N O Tippenhauer, J D Guarnizo, Y Elovici, abs/1709.04647CoRR. Y. Meidan, M. Bohadana, A. Shabtai, M. Ochoa, N. O. Tippenhauer, J. D. Guarnizo, and Y. Elovici, \"Detection of unauthorized IoT devices using machine learning techniques,\" CoRR, vol. abs/1709.04647, 2017.\n\nIdentification of wearable devices with bluetooth. H Aksu, A S Uluagac, E Bentley, IEEE Trans. on Sustainable Comput. H. Aksu, A. S. Uluagac, and E. Bentley, \"Identification of wearable devices with bluetooth,\" IEEE Trans. on Sustainable Comput., pp. 1-1, 2018.\n\nIp-based iot device detection. H Guo, J Heidemann, Workshop on IoT Security and Privacy. H. Guo and J. Heidemann, \"Ip-based iot device detection,\" in Workshop on IoT Security and Privacy, 2018, pp. 36-42.\n\nPacket analysis based iot management. G Cheng, P.-C Yip, Z Xiao, R Xia, M Wang, uS Patent App. 15/087861G. Cheng, P.-C. Yip, Z. Xiao, R. Xia, and M. Wang, \"Packet analysis based iot management,\" oct 2016, uS Patent App. 15/087,861.\n\nTABLE VII: IoT devices used in the background, activity, deployment and attack datasets and their connectivity technologies. TABLE VII: IoT devices used in the background, activity, deployment and attack datasets and their connectivity technologies\n\n. D-Link Hd Ip Camera, Dch-935l , D-Link HD IP Camera DCH-935L\n\nWiFi Motion sensor DCH-S150. D-Linksensor D-Link , D-LinkSensor D-Link WiFi Motion sensor DCH-S150\n\n. D-Linkswitch D-Link , Smart plug DSP-W215D-LinkSwitch D-Link Smart plug DSP-W215\n\nWater sensor DCH-S160. D-Linkwatersensor D-Link , D-LinkWaterSensor D-Link Water sensor DCH-S160\n\n. Ic-3115w Edimax, Smart Hd Wifi Network Camera \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 Edimaxcamic3115, IC-3115W Smart HD WiFi Network Camera \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 EdimaxPlug1101W Edimax SP-1101W Smart Plug Switch \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 EdimaxPlug2101W Edimax SP-2101W Smart Plug SwitchEdimax IC-3115W Smart HD WiFi Network Camera \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 EdimaxCamIC3115(2) Edimax IC-3115W Smart HD WiFi Network Camera \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 EdimaxPlug1101W Edimax SP-1101W Smart Plug Switch \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 \u2022 EdimaxPlug2101W Edimax SP-2101W Smart Plug Switch\n", "annotations": {"author": "[{\"end\":141,\"start\":68},{\"end\":207,\"start\":142},{\"end\":282,\"start\":208},{\"end\":361,\"start\":283},{\"end\":412,\"start\":362},{\"end\":486,\"start\":413}]", "publisher": null, "author_last_name": "[{\"end\":84,\"start\":74},{\"end\":156,\"start\":149},{\"end\":224,\"start\":215},{\"end\":301,\"start\":291},{\"end\":370,\"start\":364},{\"end\":431,\"start\":424}]", "author_first_name": "[{\"end\":73,\"start\":68},{\"end\":148,\"start\":142},{\"end\":214,\"start\":208},{\"end\":290,\"start\":283},{\"end\":363,\"start\":362},{\"end\":423,\"start\":413}]", "author_affiliation": "[{\"end\":140,\"start\":124},{\"end\":206,\"start\":182},{\"end\":281,\"start\":265},{\"end\":360,\"start\":344},{\"end\":411,\"start\":387},{\"end\":485,\"start\":469}]", "title": "[{\"end\":65,\"start\":1},{\"end\":551,\"start\":487}]", "venue": null, "abstract": "[{\"end\":2239,\"start\":655}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2884,\"start\":2881},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2889,\"start\":2886},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3044,\"start\":3041},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3325,\"start\":3322},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3330,\"start\":3327},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3647,\"start\":3644},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":3887,\"start\":3884},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3892,\"start\":3889},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":6798,\"start\":6795},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7166,\"start\":7163},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7262,\"start\":7259},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":7268,\"start\":7264},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7331,\"start\":7327},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":7343,\"start\":7340},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7362,\"start\":7359},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":7391,\"start\":7387},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":8105,\"start\":8102},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":8413,\"start\":8409},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":8480,\"start\":8476},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8486,\"start\":8482},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9927,\"start\":9924},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9933,\"start\":9929},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10692,\"start\":10688},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10710,\"start\":10707},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":17597,\"start\":17593},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":17603,\"start\":17599},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":20636,\"start\":20632},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":26064,\"start\":26061},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":26107,\"start\":26104},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":26110,\"start\":26107},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":26113,\"start\":26110},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":26116,\"start\":26113},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26179,\"start\":26176},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":26216,\"start\":26213},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":26219,\"start\":26216},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":26526,\"start\":26522},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":26643,\"start\":26639},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":26647,\"start\":26643},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":26651,\"start\":26647},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":26655,\"start\":26651},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":27840,\"start\":27836},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":29137,\"start\":29133},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":32448,\"start\":32444},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":32454,\"start\":32450},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":32650,\"start\":32646},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":32656,\"start\":32652},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":34570,\"start\":34569},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":34615,\"start\":34614},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":34645,\"start\":34644},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":34687,\"start\":34686},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":38117,\"start\":38113},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":38123,\"start\":38119},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":38370,\"start\":38366},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":39692,\"start\":39688},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":40288,\"start\":40284},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":40302,\"start\":40299},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":42169,\"start\":42166},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":42204,\"start\":42201},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":42244,\"start\":42241},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":42295,\"start\":42292},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":42328,\"start\":42325},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":42375,\"start\":42372},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":42409,\"start\":42406},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":43978,\"start\":43975},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":43983,\"start\":43980},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":46042,\"start\":46038},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":49161,\"start\":49157},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":49185,\"start\":49181},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":49255,\"start\":49251},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":49360,\"start\":49356},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":49453,\"start\":49449},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":54629,\"start\":54625},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":55829,\"start\":55825},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":64299,\"start\":64295},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":64305,\"start\":64301},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":64335,\"start\":64331},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":64483,\"start\":64479},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":64577,\"start\":64573},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":66023,\"start\":66019},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":66060,\"start\":66056},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":66066,\"start\":66062},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":66088,\"start\":66084},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":66094,\"start\":66090},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":67326,\"start\":67322},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":67401,\"start\":67397},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":67440,\"start\":67436},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":68242,\"start\":68238},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":68660,\"start\":68656},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":69551,\"start\":69548},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":69652,\"start\":69648},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":69664,\"start\":69661},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":71912,\"start\":71908},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":71918,\"start\":71914},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":71939,\"start\":71936},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":71975,\"start\":71971},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":71981,\"start\":71977},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":71994,\"start\":71990},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":72289,\"start\":72285},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":72633,\"start\":72630},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":72638,\"start\":72635},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":72644,\"start\":72640},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":72650,\"start\":72646},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":72716,\"start\":72713},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":72722,\"start\":72718},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":72765,\"start\":72762},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":72770,\"start\":72767},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":72896,\"start\":72892},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":72902,\"start\":72898},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":72933,\"start\":72929},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":74064,\"start\":74060},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":74084,\"start\":74080},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":74104,\"start\":74100},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":74236,\"start\":74232},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":74378,\"start\":74374},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":74384,\"start\":74380},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":74676,\"start\":74672},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":74682,\"start\":74678},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":74688,\"start\":74684},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":74774,\"start\":74770},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":74780,\"start\":74776},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":75055,\"start\":75051},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":75061,\"start\":75057},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":75067,\"start\":75063},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":75129,\"start\":75125},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":75376,\"start\":75372},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":75515,\"start\":75511},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":75909,\"start\":75905},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":76169,\"start\":76165},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":76675,\"start\":76671},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":77306,\"start\":77302},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":78090,\"start\":78086}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":79605,\"start\":79390},{\"attributes\":{\"id\":\"fig_2\"},\"end\":81115,\"start\":79606},{\"attributes\":{\"id\":\"fig_3\"},\"end\":81784,\"start\":81116},{\"attributes\":{\"id\":\"fig_4\"},\"end\":81928,\"start\":81785},{\"attributes\":{\"id\":\"fig_5\"},\"end\":82083,\"start\":81929},{\"attributes\":{\"id\":\"fig_8\"},\"end\":82278,\"start\":82084},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":83285,\"start\":82279},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":83293,\"start\":83286},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":83428,\"start\":83294},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":83533,\"start\":83429},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":83725,\"start\":83534},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":84023,\"start\":83726},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":84266,\"start\":84024},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":84780,\"start\":84267},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":85055,\"start\":84781},{\"attributes\":{\"id\":\"tab_12\",\"type\":\"table\"},\"end\":85859,\"start\":85056},{\"attributes\":{\"id\":\"tab_13\",\"type\":\"table\"},\"end\":86265,\"start\":85860}]", "paragraph": "[{\"end\":2890,\"start\":2258},{\"end\":3648,\"start\":2892},{\"end\":4686,\"start\":3650},{\"end\":5840,\"start\":4688},{\"end\":5878,\"start\":5842},{\"end\":6980,\"start\":5880},{\"end\":8220,\"start\":7019},{\"end\":8649,\"start\":8254},{\"end\":9549,\"start\":8651},{\"end\":9732,\"start\":9571},{\"end\":10797,\"start\":9755},{\"end\":11389,\"start\":10831},{\"end\":11965,\"start\":11397},{\"end\":15003,\"start\":11967},{\"end\":15989,\"start\":15005},{\"end\":17508,\"start\":15991},{\"end\":18061,\"start\":17543},{\"end\":18850,\"start\":18063},{\"end\":18955,\"start\":18852},{\"end\":19324,\"start\":18986},{\"end\":20197,\"start\":19326},{\"end\":20580,\"start\":20199},{\"end\":21229,\"start\":20582},{\"end\":21379,\"start\":21306},{\"end\":22124,\"start\":21381},{\"end\":22326,\"start\":22234},{\"end\":24113,\"start\":22423},{\"end\":24472,\"start\":24232},{\"end\":24549,\"start\":24474},{\"end\":25028,\"start\":24585},{\"end\":26731,\"start\":25030},{\"end\":27458,\"start\":26777},{\"end\":27957,\"start\":27460},{\"end\":28640,\"start\":28520},{\"end\":29025,\"start\":28642},{\"end\":29947,\"start\":29027},{\"end\":30844,\"start\":29949},{\"end\":31832,\"start\":30846},{\"end\":33134,\"start\":31878},{\"end\":33697,\"start\":33168},{\"end\":34735,\"start\":33699},{\"end\":35346,\"start\":34760},{\"end\":36656,\"start\":35402},{\"end\":36691,\"start\":36658},{\"end\":36808,\"start\":36693},{\"end\":37235,\"start\":36820},{\"end\":37551,\"start\":37237},{\"end\":38391,\"start\":37614},{\"end\":38505,\"start\":38393},{\"end\":39636,\"start\":38507},{\"end\":40046,\"start\":39638},{\"end\":40457,\"start\":40073},{\"end\":41297,\"start\":40473},{\"end\":41687,\"start\":41299},{\"end\":43133,\"start\":41689},{\"end\":44264,\"start\":43135},{\"end\":44812,\"start\":44266},{\"end\":45628,\"start\":44814},{\"end\":45910,\"start\":45630},{\"end\":46196,\"start\":45912},{\"end\":46481,\"start\":46198},{\"end\":47225,\"start\":46508},{\"end\":47784,\"start\":47251},{\"end\":48357,\"start\":47786},{\"end\":49057,\"start\":48359},{\"end\":49560,\"start\":49089},{\"end\":50139,\"start\":49562},{\"end\":50421,\"start\":50200},{\"end\":51109,\"start\":50423},{\"end\":52643,\"start\":51111},{\"end\":53152,\"start\":52656},{\"end\":54350,\"start\":53154},{\"end\":54490,\"start\":54376},{\"end\":55830,\"start\":54492},{\"end\":56795,\"start\":55851},{\"end\":57132,\"start\":56797},{\"end\":57768,\"start\":57187},{\"end\":58740,\"start\":57770},{\"end\":59300,\"start\":58742},{\"end\":60686,\"start\":59340},{\"end\":61421,\"start\":60735},{\"end\":62465,\"start\":61440},{\"end\":62983,\"start\":62491},{\"end\":67752,\"start\":62985},{\"end\":68244,\"start\":67770},{\"end\":68963,\"start\":68246},{\"end\":71749,\"start\":68965},{\"end\":72570,\"start\":71808},{\"end\":73858,\"start\":72572},{\"end\":74510,\"start\":73860},{\"end\":74964,\"start\":74544},{\"end\":77342,\"start\":74966},{\"end\":77932,\"start\":77344},{\"end\":78388,\"start\":77934},{\"end\":79360,\"start\":78409}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":11396,\"start\":11390},{\"attributes\":{\"id\":\"formula_1\"},\"end\":21305,\"start\":21230},{\"attributes\":{\"id\":\"formula_2\"},\"end\":22233,\"start\":22125},{\"attributes\":{\"id\":\"formula_3\"},\"end\":22422,\"start\":22327},{\"attributes\":{\"id\":\"formula_4\"},\"end\":24203,\"start\":24114},{\"attributes\":{\"id\":\"formula_5\"},\"end\":24584,\"start\":24550},{\"attributes\":{\"id\":\"formula_6\"},\"end\":28519,\"start\":27958},{\"attributes\":{\"id\":\"formula_7\"},\"end\":35401,\"start\":35347},{\"attributes\":{\"id\":\"formula_8\"},\"end\":36819,\"start\":36809},{\"attributes\":{\"id\":\"formula_9\"},\"end\":37580,\"start\":37552}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":40909,\"start\":40900},{\"end\":54812,\"start\":54805},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":58260,\"start\":58253},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":60452,\"start\":60444}]", "section_header": "[{\"end\":2256,\"start\":2241},{\"end\":7000,\"start\":6983},{\"end\":7017,\"start\":7003},{\"end\":8252,\"start\":8223},{\"end\":9569,\"start\":9552},{\"end\":9753,\"start\":9735},{\"end\":10829,\"start\":10800},{\"end\":17541,\"start\":17511},{\"end\":18984,\"start\":18958},{\"end\":24230,\"start\":24205},{\"end\":26775,\"start\":26734},{\"end\":31876,\"start\":31835},{\"end\":33166,\"start\":33137},{\"end\":34758,\"start\":34738},{\"end\":37612,\"start\":37582},{\"end\":40071,\"start\":40049},{\"end\":40471,\"start\":40460},{\"end\":46506,\"start\":46484},{\"end\":47249,\"start\":47228},{\"end\":49087,\"start\":49060},{\"end\":50184,\"start\":50142},{\"end\":50198,\"start\":50187},{\"end\":52654,\"start\":52646},{\"end\":54374,\"start\":54353},{\"end\":55849,\"start\":55833},{\"end\":57171,\"start\":57135},{\"end\":57185,\"start\":57174},{\"end\":59338,\"start\":59303},{\"end\":60733,\"start\":60689},{\"end\":61438,\"start\":61424},{\"end\":62489,\"start\":62468},{\"end\":67768,\"start\":67755},{\"end\":71768,\"start\":71752},{\"end\":71806,\"start\":71771},{\"end\":74542,\"start\":74513},{\"end\":78407,\"start\":78391},{\"end\":79389,\"start\":79363},{\"end\":79399,\"start\":79391},{\"end\":81122,\"start\":81117},{\"end\":81794,\"start\":81786},{\"end\":81938,\"start\":81930},{\"end\":82101,\"start\":82085},{\"end\":83292,\"start\":83287},{\"end\":83305,\"start\":83295},{\"end\":83441,\"start\":83430},{\"end\":83545,\"start\":83535},{\"end\":83736,\"start\":83727},{\"end\":84035,\"start\":84025},{\"end\":84277,\"start\":84268},{\"end\":84794,\"start\":84782},{\"end\":85067,\"start\":85057},{\"end\":85870,\"start\":85861}]", "table": "[{\"end\":83285,\"start\":82910},{\"end\":83428,\"start\":83353},{\"end\":83533,\"start\":83488},{\"end\":83725,\"start\":83580},{\"end\":84023,\"start\":83787},{\"end\":84266,\"start\":84038},{\"end\":85859,\"start\":85153},{\"end\":86265,\"start\":85990}]", "figure_caption": "[{\"end\":79605,\"start\":79401},{\"end\":81115,\"start\":79608},{\"end\":81784,\"start\":81124},{\"end\":81928,\"start\":81796},{\"end\":82083,\"start\":81940},{\"end\":82278,\"start\":82104},{\"end\":82910,\"start\":82281},{\"end\":83353,\"start\":83308},{\"end\":83488,\"start\":83445},{\"end\":83580,\"start\":83548},{\"end\":83787,\"start\":83738},{\"end\":84780,\"start\":84281},{\"end\":85055,\"start\":84799},{\"end\":85153,\"start\":85070},{\"end\":85990,\"start\":85872}]", "figure_ref": "[{\"end\":9606,\"start\":9600},{\"end\":18849,\"start\":18843},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23156,\"start\":23148},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23461,\"start\":23455},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":23799,\"start\":23793},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":36110,\"start\":36104},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":41014,\"start\":41008},{\"end\":51022,\"start\":51016},{\"end\":52346,\"start\":52338},{\"end\":53011,\"start\":53004},{\"end\":56084,\"start\":56076},{\"end\":57406,\"start\":57398},{\"end\":57603,\"start\":57597},{\"end\":59802,\"start\":59796}]", "bib_author_first_name": "[{\"end\":86614,\"start\":86613},{\"end\":86629,\"start\":86628},{\"end\":86638,\"start\":86637},{\"end\":86648,\"start\":86647},{\"end\":86660,\"start\":86659},{\"end\":86673,\"start\":86672},{\"end\":86684,\"start\":86683},{\"end\":86697,\"start\":86696},{\"end\":86699,\"start\":86698},{\"end\":86712,\"start\":86711},{\"end\":86726,\"start\":86725},{\"end\":86739,\"start\":86738},{\"end\":86748,\"start\":86747},{\"end\":86757,\"start\":86756},{\"end\":86763,\"start\":86762},{\"end\":86772,\"start\":86771},{\"end\":86784,\"start\":86783},{\"end\":86794,\"start\":86793},{\"end\":86806,\"start\":86805},{\"end\":86816,\"start\":86815},{\"end\":87338,\"start\":87337},{\"end\":87349,\"start\":87348},{\"end\":87526,\"start\":87525},{\"end\":87536,\"start\":87535},{\"end\":87551,\"start\":87550},{\"end\":87562,\"start\":87561},{\"end\":88008,\"start\":88007},{\"end\":88017,\"start\":88016},{\"end\":88027,\"start\":88026},{\"end\":88663,\"start\":88662},{\"end\":88672,\"start\":88671},{\"end\":88684,\"start\":88683},{\"end\":88987,\"start\":88986},{\"end\":88997,\"start\":88996},{\"end\":89005,\"start\":89004},{\"end\":89370,\"start\":89369},{\"end\":89381,\"start\":89380},{\"end\":89390,\"start\":89389},{\"end\":89785,\"start\":89784},{\"end\":89800,\"start\":89799},{\"end\":89810,\"start\":89809},{\"end\":90137,\"start\":90136},{\"end\":90339,\"start\":90338},{\"end\":90346,\"start\":90345},{\"end\":90354,\"start\":90353},{\"end\":90651,\"start\":90650},{\"end\":90655,\"start\":90652},{\"end\":90661,\"start\":90660},{\"end\":90671,\"start\":90670},{\"end\":90683,\"start\":90682},{\"end\":90696,\"start\":90695},{\"end\":90706,\"start\":90705},{\"end\":91049,\"start\":91048},{\"end\":91062,\"start\":91061},{\"end\":91073,\"start\":91072},{\"end\":91083,\"start\":91082},{\"end\":91093,\"start\":91092},{\"end\":91104,\"start\":91103},{\"end\":91589,\"start\":91588},{\"end\":91598,\"start\":91597},{\"end\":91608,\"start\":91607},{\"end\":91610,\"start\":91609},{\"end\":91905,\"start\":91904},{\"end\":92122,\"start\":92121},{\"end\":92134,\"start\":92133},{\"end\":92143,\"start\":92142},{\"end\":92153,\"start\":92152},{\"end\":92163,\"start\":92162},{\"end\":92178,\"start\":92177},{\"end\":92478,\"start\":92477},{\"end\":92486,\"start\":92485},{\"end\":92498,\"start\":92497},{\"end\":92510,\"start\":92509},{\"end\":92865,\"start\":92864},{\"end\":92867,\"start\":92866},{\"end\":92876,\"start\":92875},{\"end\":92884,\"start\":92883},{\"end\":92897,\"start\":92896},{\"end\":92899,\"start\":92898},{\"end\":93278,\"start\":93277},{\"end\":93280,\"start\":93279},{\"end\":93297,\"start\":93296},{\"end\":93299,\"start\":93298},{\"end\":93310,\"start\":93309},{\"end\":93633,\"start\":93632},{\"end\":93875,\"start\":93874},{\"end\":93888,\"start\":93887},{\"end\":93897,\"start\":93896},{\"end\":94161,\"start\":94160},{\"end\":94163,\"start\":94162},{\"end\":94518,\"start\":94517},{\"end\":94527,\"start\":94526},{\"end\":94539,\"start\":94538},{\"end\":94546,\"start\":94545},{\"end\":94802,\"start\":94798},{\"end\":94808,\"start\":94807},{\"end\":94817,\"start\":94816},{\"end\":94827,\"start\":94826},{\"end\":94829,\"start\":94828},{\"end\":94838,\"start\":94837},{\"end\":95463,\"start\":95462},{\"end\":95474,\"start\":95473},{\"end\":95485,\"start\":95484},{\"end\":95487,\"start\":95486},{\"end\":95493,\"start\":95492},{\"end\":95506,\"start\":95505},{\"end\":95508,\"start\":95507},{\"end\":95518,\"start\":95517},{\"end\":95761,\"start\":95760},{\"end\":95773,\"start\":95769},{\"end\":95783,\"start\":95782},{\"end\":95794,\"start\":95793},{\"end\":95796,\"start\":95795},{\"end\":96289,\"start\":96288},{\"end\":96300,\"start\":96299},{\"end\":96309,\"start\":96308},{\"end\":96319,\"start\":96318},{\"end\":96330,\"start\":96329},{\"end\":96332,\"start\":96331},{\"end\":96788,\"start\":96787},{\"end\":97446,\"start\":97445},{\"end\":97454,\"start\":97453},{\"end\":97464,\"start\":97463},{\"end\":97473,\"start\":97472},{\"end\":97483,\"start\":97482},{\"end\":97493,\"start\":97492},{\"end\":97834,\"start\":97833},{\"end\":97836,\"start\":97835},{\"end\":97846,\"start\":97845},{\"end\":97848,\"start\":97847},{\"end\":97859,\"start\":97858},{\"end\":97867,\"start\":97866},{\"end\":98106,\"start\":98105},{\"end\":98124,\"start\":98123},{\"end\":98134,\"start\":98133},{\"end\":98145,\"start\":98144},{\"end\":98452,\"start\":98448},{\"end\":98585,\"start\":98584},{\"end\":98596,\"start\":98595},{\"end\":98836,\"start\":98835},{\"end\":98847,\"start\":98846},{\"end\":98861,\"start\":98860},{\"end\":99087,\"start\":99086},{\"end\":99098,\"start\":99097},{\"end\":99109,\"start\":99108},{\"end\":99122,\"start\":99121},{\"end\":99131,\"start\":99130},{\"end\":99137,\"start\":99136},{\"end\":99148,\"start\":99147},{\"end\":99159,\"start\":99158},{\"end\":99471,\"start\":99470},{\"end\":99481,\"start\":99480},{\"end\":99490,\"start\":99489},{\"end\":99499,\"start\":99498},{\"end\":99723,\"start\":99722},{\"end\":99732,\"start\":99731},{\"end\":99739,\"start\":99738},{\"end\":99745,\"start\":99744},{\"end\":99754,\"start\":99753},{\"end\":99763,\"start\":99762},{\"end\":100194,\"start\":100193},{\"end\":100204,\"start\":100203},{\"end\":100214,\"start\":100213},{\"end\":100711,\"start\":100710},{\"end\":100713,\"start\":100712},{\"end\":100727,\"start\":100726},{\"end\":100737,\"start\":100736},{\"end\":100746,\"start\":100745},{\"end\":100748,\"start\":100747},{\"end\":100758,\"start\":100757},{\"end\":100765,\"start\":100764},{\"end\":100772,\"start\":100771},{\"end\":100780,\"start\":100779},{\"end\":101272,\"start\":101271},{\"end\":101280,\"start\":101279},{\"end\":101289,\"start\":101288},{\"end\":101752,\"start\":101751},{\"end\":101754,\"start\":101753},{\"end\":101765,\"start\":101764},{\"end\":101767,\"start\":101766},{\"end\":102068,\"start\":102067},{\"end\":102079,\"start\":102078},{\"end\":102089,\"start\":102088},{\"end\":102101,\"start\":102100},{\"end\":102110,\"start\":102109},{\"end\":102119,\"start\":102118},{\"end\":102447,\"start\":102446},{\"end\":102458,\"start\":102457},{\"end\":102468,\"start\":102467},{\"end\":102742,\"start\":102741},{\"end\":102744,\"start\":102743},{\"end\":102751,\"start\":102750},{\"end\":102753,\"start\":102752},{\"end\":102761,\"start\":102760},{\"end\":102769,\"start\":102768},{\"end\":102780,\"start\":102779},{\"end\":102793,\"start\":102792},{\"end\":102795,\"start\":102794},{\"end\":102802,\"start\":102801},{\"end\":103192,\"start\":103191},{\"end\":103200,\"start\":103199},{\"end\":103212,\"start\":103211},{\"end\":103477,\"start\":103476},{\"end\":103488,\"start\":103487},{\"end\":103496,\"start\":103495},{\"end\":103505,\"start\":103504},{\"end\":104067,\"start\":104066},{\"end\":104080,\"start\":104079},{\"end\":104629,\"start\":104628},{\"end\":104647,\"start\":104646},{\"end\":104663,\"start\":104662},{\"end\":104682,\"start\":104681},{\"end\":104971,\"start\":104970},{\"end\":104982,\"start\":104981},{\"end\":105395,\"start\":105394},{\"end\":105408,\"start\":105407},{\"end\":105417,\"start\":105416},{\"end\":105426,\"start\":105425},{\"end\":105435,\"start\":105434},{\"end\":105915,\"start\":105914},{\"end\":105924,\"start\":105923},{\"end\":105933,\"start\":105932},{\"end\":105943,\"start\":105942},{\"end\":105955,\"start\":105954},{\"end\":105965,\"start\":105964},{\"end\":105973,\"start\":105972},{\"end\":106484,\"start\":106483},{\"end\":106494,\"start\":106493},{\"end\":106821,\"start\":106820},{\"end\":106833,\"start\":106832},{\"end\":106840,\"start\":106839},{\"end\":106850,\"start\":106849},{\"end\":107203,\"start\":107202},{\"end\":107214,\"start\":107213},{\"end\":107570,\"start\":107569},{\"end\":107576,\"start\":107575},{\"end\":107582,\"start\":107581},{\"end\":107591,\"start\":107590},{\"end\":108211,\"start\":108210},{\"end\":108220,\"start\":108219},{\"end\":108229,\"start\":108225},{\"end\":108236,\"start\":108235},{\"end\":108238,\"start\":108237},{\"end\":108246,\"start\":108245},{\"end\":108696,\"start\":108695},{\"end\":108707,\"start\":108706},{\"end\":108715,\"start\":108714},{\"end\":108726,\"start\":108725},{\"end\":108734,\"start\":108733},{\"end\":109218,\"start\":109217},{\"end\":109229,\"start\":109228},{\"end\":109244,\"start\":109243},{\"end\":109255,\"start\":109254},{\"end\":109515,\"start\":109514},{\"end\":109530,\"start\":109529},{\"end\":109543,\"start\":109542},{\"end\":109558,\"start\":109557},{\"end\":110134,\"start\":110133},{\"end\":110152,\"start\":110151},{\"end\":110735,\"start\":110734},{\"end\":110745,\"start\":110744},{\"end\":110755,\"start\":110754},{\"end\":111310,\"start\":111309},{\"end\":111322,\"start\":111321},{\"end\":111333,\"start\":111332},{\"end\":111609,\"start\":111608},{\"end\":111619,\"start\":111618},{\"end\":111631,\"start\":111630},{\"end\":111642,\"start\":111641},{\"end\":111651,\"start\":111650},{\"end\":111653,\"start\":111652},{\"end\":111668,\"start\":111667},{\"end\":111670,\"start\":111669},{\"end\":111682,\"start\":111681},{\"end\":111970,\"start\":111969},{\"end\":111978,\"start\":111977},{\"end\":111980,\"start\":111979},{\"end\":111991,\"start\":111990},{\"end\":112213,\"start\":112212},{\"end\":112220,\"start\":112219},{\"end\":112426,\"start\":112425},{\"end\":112438,\"start\":112434},{\"end\":112445,\"start\":112444},{\"end\":112453,\"start\":112452},{\"end\":112460,\"start\":112459},{\"end\":112881,\"start\":112872},{\"end\":112901,\"start\":112893},{\"end\":112982,\"start\":112963},{\"end\":113055,\"start\":113036},{\"end\":113165,\"start\":113141},{\"end\":113226,\"start\":113218}]", "bib_author_last_name": "[{\"end\":86626,\"start\":86615},{\"end\":86635,\"start\":86630},{\"end\":86645,\"start\":86639},{\"end\":86657,\"start\":86649},{\"end\":86670,\"start\":86661},{\"end\":86681,\"start\":86674},{\"end\":86694,\"start\":86685},{\"end\":86709,\"start\":86700},{\"end\":86723,\"start\":86713},{\"end\":86736,\"start\":86727},{\"end\":86745,\"start\":86740},{\"end\":86754,\"start\":86749},{\"end\":86760,\"start\":86758},{\"end\":86769,\"start\":86764},{\"end\":86781,\"start\":86773},{\"end\":86791,\"start\":86785},{\"end\":86803,\"start\":86795},{\"end\":86813,\"start\":86807},{\"end\":86821,\"start\":86817},{\"end\":87346,\"start\":87339},{\"end\":87358,\"start\":87350},{\"end\":87533,\"start\":87527},{\"end\":87548,\"start\":87537},{\"end\":87559,\"start\":87552},{\"end\":87567,\"start\":87563},{\"end\":87795,\"start\":87788},{\"end\":88014,\"start\":88009},{\"end\":88024,\"start\":88018},{\"end\":88035,\"start\":88028},{\"end\":88669,\"start\":88664},{\"end\":88681,\"start\":88673},{\"end\":88693,\"start\":88685},{\"end\":88994,\"start\":88988},{\"end\":89002,\"start\":88998},{\"end\":89011,\"start\":89006},{\"end\":89378,\"start\":89371},{\"end\":89387,\"start\":89382},{\"end\":89397,\"start\":89391},{\"end\":89797,\"start\":89786},{\"end\":89807,\"start\":89801},{\"end\":89822,\"start\":89811},{\"end\":90143,\"start\":90138},{\"end\":90343,\"start\":90340},{\"end\":90351,\"start\":90347},{\"end\":90357,\"start\":90355},{\"end\":90658,\"start\":90656},{\"end\":90668,\"start\":90662},{\"end\":90680,\"start\":90672},{\"end\":90693,\"start\":90684},{\"end\":90703,\"start\":90697},{\"end\":90713,\"start\":90707},{\"end\":91059,\"start\":91050},{\"end\":91070,\"start\":91063},{\"end\":91080,\"start\":91074},{\"end\":91090,\"start\":91084},{\"end\":91101,\"start\":91094},{\"end\":91112,\"start\":91105},{\"end\":91595,\"start\":91590},{\"end\":91605,\"start\":91599},{\"end\":91617,\"start\":91611},{\"end\":91911,\"start\":91906},{\"end\":92131,\"start\":92123},{\"end\":92140,\"start\":92135},{\"end\":92150,\"start\":92144},{\"end\":92160,\"start\":92154},{\"end\":92175,\"start\":92164},{\"end\":92185,\"start\":92179},{\"end\":92483,\"start\":92479},{\"end\":92495,\"start\":92487},{\"end\":92507,\"start\":92499},{\"end\":92513,\"start\":92511},{\"end\":92873,\"start\":92868},{\"end\":92881,\"start\":92877},{\"end\":92894,\"start\":92885},{\"end\":92911,\"start\":92900},{\"end\":93294,\"start\":93281},{\"end\":93307,\"start\":93300},{\"end\":93316,\"start\":93311},{\"end\":93642,\"start\":93634},{\"end\":93885,\"start\":93876},{\"end\":93894,\"start\":93889},{\"end\":93912,\"start\":93898},{\"end\":94172,\"start\":94164},{\"end\":94524,\"start\":94519},{\"end\":94536,\"start\":94528},{\"end\":94543,\"start\":94540},{\"end\":94553,\"start\":94547},{\"end\":94805,\"start\":94803},{\"end\":94814,\"start\":94809},{\"end\":94824,\"start\":94818},{\"end\":94835,\"start\":94830},{\"end\":94843,\"start\":94839},{\"end\":95471,\"start\":95464},{\"end\":95482,\"start\":95475},{\"end\":95490,\"start\":95488},{\"end\":95503,\"start\":95494},{\"end\":95515,\"start\":95509},{\"end\":95524,\"start\":95519},{\"end\":95767,\"start\":95762},{\"end\":95780,\"start\":95774},{\"end\":95791,\"start\":95784},{\"end\":95806,\"start\":95797},{\"end\":96297,\"start\":96290},{\"end\":96306,\"start\":96301},{\"end\":96316,\"start\":96310},{\"end\":96327,\"start\":96320},{\"end\":96338,\"start\":96333},{\"end\":96796,\"start\":96789},{\"end\":97451,\"start\":97447},{\"end\":97461,\"start\":97455},{\"end\":97470,\"start\":97465},{\"end\":97480,\"start\":97474},{\"end\":97490,\"start\":97484},{\"end\":97498,\"start\":97494},{\"end\":97843,\"start\":97837},{\"end\":97856,\"start\":97849},{\"end\":97864,\"start\":97860},{\"end\":97875,\"start\":97868},{\"end\":98121,\"start\":98107},{\"end\":98131,\"start\":98125},{\"end\":98142,\"start\":98135},{\"end\":98150,\"start\":98146},{\"end\":98461,\"start\":98453},{\"end\":98593,\"start\":98586},{\"end\":98603,\"start\":98597},{\"end\":98844,\"start\":98837},{\"end\":98858,\"start\":98848},{\"end\":98868,\"start\":98862},{\"end\":99095,\"start\":99088},{\"end\":99106,\"start\":99099},{\"end\":99119,\"start\":99110},{\"end\":99128,\"start\":99123},{\"end\":99134,\"start\":99132},{\"end\":99145,\"start\":99138},{\"end\":99156,\"start\":99149},{\"end\":99164,\"start\":99160},{\"end\":99478,\"start\":99472},{\"end\":99487,\"start\":99482},{\"end\":99496,\"start\":99491},{\"end\":99507,\"start\":99500},{\"end\":99729,\"start\":99724},{\"end\":99736,\"start\":99733},{\"end\":99742,\"start\":99740},{\"end\":99751,\"start\":99746},{\"end\":99760,\"start\":99755},{\"end\":99766,\"start\":99764},{\"end\":100201,\"start\":100195},{\"end\":100211,\"start\":100205},{\"end\":100221,\"start\":100215},{\"end\":100724,\"start\":100714},{\"end\":100734,\"start\":100728},{\"end\":100743,\"start\":100738},{\"end\":100755,\"start\":100749},{\"end\":100762,\"start\":100759},{\"end\":100769,\"start\":100766},{\"end\":100777,\"start\":100773},{\"end\":100786,\"start\":100781},{\"end\":101277,\"start\":101273},{\"end\":101286,\"start\":101281},{\"end\":101296,\"start\":101290},{\"end\":101762,\"start\":101755},{\"end\":101776,\"start\":101768},{\"end\":102076,\"start\":102069},{\"end\":102086,\"start\":102080},{\"end\":102098,\"start\":102090},{\"end\":102107,\"start\":102102},{\"end\":102116,\"start\":102111},{\"end\":102126,\"start\":102120},{\"end\":102455,\"start\":102448},{\"end\":102465,\"start\":102459},{\"end\":102474,\"start\":102469},{\"end\":102748,\"start\":102745},{\"end\":102758,\"start\":102754},{\"end\":102766,\"start\":102762},{\"end\":102777,\"start\":102770},{\"end\":102790,\"start\":102781},{\"end\":102799,\"start\":102796},{\"end\":102810,\"start\":102803},{\"end\":103197,\"start\":103193},{\"end\":103209,\"start\":103201},{\"end\":103218,\"start\":103213},{\"end\":103485,\"start\":103478},{\"end\":103493,\"start\":103489},{\"end\":103502,\"start\":103497},{\"end\":103512,\"start\":103506},{\"end\":104077,\"start\":104068},{\"end\":104085,\"start\":104081},{\"end\":104644,\"start\":104630},{\"end\":104660,\"start\":104648},{\"end\":104679,\"start\":104664},{\"end\":104690,\"start\":104683},{\"end\":104979,\"start\":104972},{\"end\":104988,\"start\":104983},{\"end\":105405,\"start\":105396},{\"end\":105414,\"start\":105409},{\"end\":105423,\"start\":105418},{\"end\":105432,\"start\":105427},{\"end\":105446,\"start\":105436},{\"end\":105921,\"start\":105916},{\"end\":105930,\"start\":105925},{\"end\":105940,\"start\":105934},{\"end\":105952,\"start\":105944},{\"end\":105962,\"start\":105956},{\"end\":105970,\"start\":105966},{\"end\":105978,\"start\":105974},{\"end\":106491,\"start\":106485},{\"end\":106501,\"start\":106495},{\"end\":106830,\"start\":106822},{\"end\":106837,\"start\":106834},{\"end\":106847,\"start\":106841},{\"end\":106858,\"start\":106851},{\"end\":107211,\"start\":107204},{\"end\":107221,\"start\":107215},{\"end\":107573,\"start\":107571},{\"end\":107579,\"start\":107577},{\"end\":107588,\"start\":107583},{\"end\":107600,\"start\":107592},{\"end\":108217,\"start\":108212},{\"end\":108223,\"start\":108221},{\"end\":108233,\"start\":108230},{\"end\":108243,\"start\":108239},{\"end\":108254,\"start\":108247},{\"end\":108704,\"start\":108697},{\"end\":108712,\"start\":108708},{\"end\":108723,\"start\":108716},{\"end\":108731,\"start\":108727},{\"end\":108745,\"start\":108735},{\"end\":109226,\"start\":109219},{\"end\":109241,\"start\":109230},{\"end\":109252,\"start\":109245},{\"end\":109261,\"start\":109256},{\"end\":109527,\"start\":109516},{\"end\":109540,\"start\":109531},{\"end\":109555,\"start\":109544},{\"end\":109565,\"start\":109559},{\"end\":110149,\"start\":110135},{\"end\":110157,\"start\":110153},{\"end\":110742,\"start\":110736},{\"end\":110752,\"start\":110746},{\"end\":110762,\"start\":110756},{\"end\":111319,\"start\":111311},{\"end\":111330,\"start\":111323},{\"end\":111342,\"start\":111334},{\"end\":111616,\"start\":111610},{\"end\":111628,\"start\":111620},{\"end\":111639,\"start\":111632},{\"end\":111648,\"start\":111643},{\"end\":111665,\"start\":111654},{\"end\":111679,\"start\":111671},{\"end\":111690,\"start\":111683},{\"end\":111975,\"start\":111971},{\"end\":111988,\"start\":111981},{\"end\":111999,\"start\":111992},{\"end\":112217,\"start\":112214},{\"end\":112230,\"start\":112221},{\"end\":112432,\"start\":112427},{\"end\":112442,\"start\":112439},{\"end\":112450,\"start\":112446},{\"end\":112457,\"start\":112454},{\"end\":112465,\"start\":112461},{\"end\":112891,\"start\":112882},{\"end\":113233,\"start\":113227},{\"end\":113293,\"start\":113235}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":10552148},\"end\":87268,\"start\":86581},{\"attributes\":{\"id\":\"b1\"},\"end\":87523,\"start\":87270},{\"attributes\":{\"id\":\"b2\"},\"end\":87751,\"start\":87525},{\"attributes\":{\"id\":\"b3\"},\"end\":87939,\"start\":87753},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/3139937.3139944\",\"id\":\"b4\",\"matched_paper_id\":13078269},\"end\":88587,\"start\":87941},{\"attributes\":{\"doi\":\"abs/1804.04159\",\"id\":\"b5\",\"matched_paper_id\":206581423},\"end\":88916,\"start\":88589},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":207638967},\"end\":89309,\"start\":88918},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":18900231},\"end\":89694,\"start\":89311},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":7049213},\"end\":90096,\"start\":89696},{\"attributes\":{\"id\":\"b9\"},\"end\":90270,\"start\":90098},{\"attributes\":{\"id\":\"b10\"},\"end\":90588,\"start\":90272},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":3658077},\"end\":90962,\"start\":90590},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":2082571},\"end\":91547,\"start\":90964},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":231787},\"end\":91816,\"start\":91549},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":221676809},\"end\":92049,\"start\":91818},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":3062988},\"end\":92415,\"start\":92051},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":8960221},\"end\":92776,\"start\":92417},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":20962595},\"end\":93205,\"start\":92778},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":10952401},\"end\":93585,\"start\":93207},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":120055730},\"end\":93803,\"start\":93587},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":9627410},\"end\":94110,\"start\":93805},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":88511688},\"end\":94338,\"start\":94112},{\"attributes\":{\"id\":\"b22\"},\"end\":94437,\"start\":94340},{\"attributes\":{\"doi\":\"abs/1412.3555\",\"id\":\"b23\",\"matched_paper_id\":5201925},\"end\":94764,\"start\":94439},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/3018661.3018689\",\"id\":\"b24\",\"matched_paper_id\":5362246},\"end\":95389,\"start\":94766},{\"attributes\":{\"doi\":\"abs/1610.05492\",\"id\":\"b25\",\"matched_paper_id\":14999259},\"end\":95727,\"start\":95391},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":3586416},\"end\":96211,\"start\":95729},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":14955348},\"end\":96766,\"start\":96213},{\"attributes\":{\"id\":\"b28\"},\"end\":96889,\"start\":96768},{\"attributes\":{\"id\":\"b29\"},\"end\":96998,\"start\":96891},{\"attributes\":{\"id\":\"b30\"},\"end\":97083,\"start\":97000},{\"attributes\":{\"id\":\"b31\"},\"end\":97178,\"start\":97085},{\"attributes\":{\"id\":\"b32\"},\"end\":97277,\"start\":97180},{\"attributes\":{\"id\":\"b33\"},\"end\":97382,\"start\":97279},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":5077922},\"end\":97748,\"start\":97384},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":10376573},\"end\":98038,\"start\":97750},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":2606313},\"end\":98395,\"start\":98040},{\"attributes\":{\"id\":\"b37\"},\"end\":98528,\"start\":98397},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":2893830},\"end\":98789,\"start\":98530},{\"attributes\":{\"doi\":\"arXiv:1607.02533\",\"id\":\"b39\"},\"end\":99026,\"start\":98791},{\"attributes\":{\"doi\":\"arXiv:1707.08945\",\"id\":\"b40\"},\"end\":99386,\"start\":99028},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":2946560},\"end\":99679,\"start\":99388},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":2419970},\"end\":100140,\"start\":99681},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":9089716},\"end\":100630,\"start\":100142},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":1553099},\"end\":101186,\"start\":100632},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":5976727},\"end\":101708,\"start\":101188},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":5553697},\"end\":101982,\"start\":101710},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":13475696},\"end\":102389,\"start\":101984},{\"attributes\":{\"id\":\"b48\"},\"end\":102662,\"start\":102391},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":1068005},\"end\":103124,\"start\":102664},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":16113507},\"end\":103397,\"start\":103126},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":9099934},\"end\":103949,\"start\":103399},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":7849488},\"end\":104547,\"start\":103951},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":24475361},\"end\":104928,\"start\":104549},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":5856351},\"end\":105311,\"start\":104930},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":2470919},\"end\":105824,\"start\":105313},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":13088866},\"end\":106396,\"start\":105826},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":206578669},\"end\":106748,\"start\":106398},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":43680425},\"end\":107126,\"start\":106750},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":14340448},\"end\":107486,\"start\":107128},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/3133956.3134015\",\"id\":\"b60\",\"matched_paper_id\":4232579},\"end\":108130,\"start\":107488},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":1545809},\"end\":108611,\"start\":108132},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":6622804},\"end\":109159,\"start\":108613},{\"attributes\":{\"doi\":\"arXiv preprint:1408.1416\",\"id\":\"b63\"},\"end\":109430,\"start\":109161},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":13206787},\"end\":110071,\"start\":109432},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":14220594},\"end\":110627,\"start\":110073},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":2197966},\"end\":111230,\"start\":110629},{\"attributes\":{\"doi\":\"arXiv:1705.06805\",\"id\":\"b67\"},\"end\":111533,\"start\":111232},{\"attributes\":{\"doi\":\"abs/1709.04647\",\"id\":\"b68\",\"matched_paper_id\":28005895},\"end\":111916,\"start\":111535},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":52876283},\"end\":112179,\"start\":111918},{\"attributes\":{\"id\":\"b70\",\"matched_paper_id\":49210309},\"end\":112385,\"start\":112181},{\"attributes\":{\"doi\":\"uS Patent App. 15/087\",\"id\":\"b71\"},\"end\":112618,\"start\":112387},{\"attributes\":{\"id\":\"b72\"},\"end\":112868,\"start\":112620},{\"attributes\":{\"id\":\"b73\"},\"end\":112932,\"start\":112870},{\"attributes\":{\"id\":\"b74\"},\"end\":113032,\"start\":112934},{\"attributes\":{\"doi\":\"Smart plug DSP-W215\",\"id\":\"b75\"},\"end\":113116,\"start\":113034},{\"attributes\":{\"id\":\"b76\"},\"end\":113214,\"start\":113118},{\"attributes\":{\"id\":\"b77\"},\"end\":113710,\"start\":113216}]", "bib_title": "[{\"end\":86611,\"start\":86581},{\"end\":87335,\"start\":87270},{\"end\":88005,\"start\":87941},{\"end\":88660,\"start\":88589},{\"end\":88984,\"start\":88918},{\"end\":89367,\"start\":89311},{\"end\":89782,\"start\":89696},{\"end\":90648,\"start\":90590},{\"end\":91046,\"start\":90964},{\"end\":91586,\"start\":91549},{\"end\":91902,\"start\":91818},{\"end\":92119,\"start\":92051},{\"end\":92475,\"start\":92417},{\"end\":92862,\"start\":92778},{\"end\":93275,\"start\":93207},{\"end\":93630,\"start\":93587},{\"end\":93872,\"start\":93805},{\"end\":94158,\"start\":94112},{\"end\":94515,\"start\":94439},{\"end\":94796,\"start\":94766},{\"end\":95460,\"start\":95391},{\"end\":95758,\"start\":95729},{\"end\":96286,\"start\":96213},{\"end\":97443,\"start\":97384},{\"end\":97831,\"start\":97750},{\"end\":98103,\"start\":98040},{\"end\":98582,\"start\":98530},{\"end\":99468,\"start\":99388},{\"end\":99720,\"start\":99681},{\"end\":100191,\"start\":100142},{\"end\":100708,\"start\":100632},{\"end\":101269,\"start\":101188},{\"end\":101749,\"start\":101710},{\"end\":102065,\"start\":101984},{\"end\":102739,\"start\":102664},{\"end\":103189,\"start\":103126},{\"end\":103474,\"start\":103399},{\"end\":104064,\"start\":103951},{\"end\":104626,\"start\":104549},{\"end\":104968,\"start\":104930},{\"end\":105392,\"start\":105313},{\"end\":105912,\"start\":105826},{\"end\":106481,\"start\":106398},{\"end\":106818,\"start\":106750},{\"end\":107200,\"start\":107128},{\"end\":107567,\"start\":107488},{\"end\":108208,\"start\":108132},{\"end\":108693,\"start\":108613},{\"end\":109512,\"start\":109432},{\"end\":110131,\"start\":110073},{\"end\":110732,\"start\":110629},{\"end\":111606,\"start\":111535},{\"end\":111967,\"start\":111918},{\"end\":112210,\"start\":112181}]", "bib_author": "[{\"end\":86628,\"start\":86613},{\"end\":86637,\"start\":86628},{\"end\":86647,\"start\":86637},{\"end\":86659,\"start\":86647},{\"end\":86672,\"start\":86659},{\"end\":86683,\"start\":86672},{\"end\":86696,\"start\":86683},{\"end\":86711,\"start\":86696},{\"end\":86725,\"start\":86711},{\"end\":86738,\"start\":86725},{\"end\":86747,\"start\":86738},{\"end\":86756,\"start\":86747},{\"end\":86762,\"start\":86756},{\"end\":86771,\"start\":86762},{\"end\":86783,\"start\":86771},{\"end\":86793,\"start\":86783},{\"end\":86805,\"start\":86793},{\"end\":86815,\"start\":86805},{\"end\":86823,\"start\":86815},{\"end\":87348,\"start\":87337},{\"end\":87360,\"start\":87348},{\"end\":87535,\"start\":87525},{\"end\":87550,\"start\":87535},{\"end\":87561,\"start\":87550},{\"end\":87569,\"start\":87561},{\"end\":87797,\"start\":87788},{\"end\":88016,\"start\":88007},{\"end\":88026,\"start\":88016},{\"end\":88037,\"start\":88026},{\"end\":88671,\"start\":88662},{\"end\":88683,\"start\":88671},{\"end\":88695,\"start\":88683},{\"end\":88996,\"start\":88986},{\"end\":89004,\"start\":88996},{\"end\":89013,\"start\":89004},{\"end\":89380,\"start\":89369},{\"end\":89389,\"start\":89380},{\"end\":89399,\"start\":89389},{\"end\":89799,\"start\":89784},{\"end\":89809,\"start\":89799},{\"end\":89824,\"start\":89809},{\"end\":90145,\"start\":90136},{\"end\":90345,\"start\":90338},{\"end\":90353,\"start\":90345},{\"end\":90359,\"start\":90353},{\"end\":90660,\"start\":90650},{\"end\":90670,\"start\":90660},{\"end\":90682,\"start\":90670},{\"end\":90695,\"start\":90682},{\"end\":90705,\"start\":90695},{\"end\":90715,\"start\":90705},{\"end\":91061,\"start\":91048},{\"end\":91072,\"start\":91061},{\"end\":91082,\"start\":91072},{\"end\":91092,\"start\":91082},{\"end\":91103,\"start\":91092},{\"end\":91114,\"start\":91103},{\"end\":91597,\"start\":91588},{\"end\":91607,\"start\":91597},{\"end\":91619,\"start\":91607},{\"end\":91913,\"start\":91904},{\"end\":92133,\"start\":92121},{\"end\":92142,\"start\":92133},{\"end\":92152,\"start\":92142},{\"end\":92162,\"start\":92152},{\"end\":92177,\"start\":92162},{\"end\":92187,\"start\":92177},{\"end\":92485,\"start\":92477},{\"end\":92497,\"start\":92485},{\"end\":92509,\"start\":92497},{\"end\":92515,\"start\":92509},{\"end\":92875,\"start\":92864},{\"end\":92883,\"start\":92875},{\"end\":92896,\"start\":92883},{\"end\":92913,\"start\":92896},{\"end\":93296,\"start\":93277},{\"end\":93309,\"start\":93296},{\"end\":93318,\"start\":93309},{\"end\":93644,\"start\":93632},{\"end\":93887,\"start\":93874},{\"end\":93896,\"start\":93887},{\"end\":93914,\"start\":93896},{\"end\":94174,\"start\":94160},{\"end\":94526,\"start\":94517},{\"end\":94538,\"start\":94526},{\"end\":94545,\"start\":94538},{\"end\":94555,\"start\":94545},{\"end\":94807,\"start\":94798},{\"end\":94816,\"start\":94807},{\"end\":94826,\"start\":94816},{\"end\":94837,\"start\":94826},{\"end\":94845,\"start\":94837},{\"end\":95473,\"start\":95462},{\"end\":95484,\"start\":95473},{\"end\":95492,\"start\":95484},{\"end\":95505,\"start\":95492},{\"end\":95517,\"start\":95505},{\"end\":95526,\"start\":95517},{\"end\":95769,\"start\":95760},{\"end\":95782,\"start\":95769},{\"end\":95793,\"start\":95782},{\"end\":95808,\"start\":95793},{\"end\":96299,\"start\":96288},{\"end\":96308,\"start\":96299},{\"end\":96318,\"start\":96308},{\"end\":96329,\"start\":96318},{\"end\":96340,\"start\":96329},{\"end\":96798,\"start\":96787},{\"end\":97453,\"start\":97445},{\"end\":97463,\"start\":97453},{\"end\":97472,\"start\":97463},{\"end\":97482,\"start\":97472},{\"end\":97492,\"start\":97482},{\"end\":97500,\"start\":97492},{\"end\":97845,\"start\":97833},{\"end\":97858,\"start\":97845},{\"end\":97866,\"start\":97858},{\"end\":97877,\"start\":97866},{\"end\":98123,\"start\":98105},{\"end\":98133,\"start\":98123},{\"end\":98144,\"start\":98133},{\"end\":98152,\"start\":98144},{\"end\":98463,\"start\":98448},{\"end\":98595,\"start\":98584},{\"end\":98605,\"start\":98595},{\"end\":98846,\"start\":98835},{\"end\":98860,\"start\":98846},{\"end\":98870,\"start\":98860},{\"end\":99097,\"start\":99086},{\"end\":99108,\"start\":99097},{\"end\":99121,\"start\":99108},{\"end\":99130,\"start\":99121},{\"end\":99136,\"start\":99130},{\"end\":99147,\"start\":99136},{\"end\":99158,\"start\":99147},{\"end\":99166,\"start\":99158},{\"end\":99480,\"start\":99470},{\"end\":99489,\"start\":99480},{\"end\":99498,\"start\":99489},{\"end\":99509,\"start\":99498},{\"end\":99731,\"start\":99722},{\"end\":99738,\"start\":99731},{\"end\":99744,\"start\":99738},{\"end\":99753,\"start\":99744},{\"end\":99762,\"start\":99753},{\"end\":99768,\"start\":99762},{\"end\":100203,\"start\":100193},{\"end\":100213,\"start\":100203},{\"end\":100223,\"start\":100213},{\"end\":100726,\"start\":100710},{\"end\":100736,\"start\":100726},{\"end\":100745,\"start\":100736},{\"end\":100757,\"start\":100745},{\"end\":100764,\"start\":100757},{\"end\":100771,\"start\":100764},{\"end\":100779,\"start\":100771},{\"end\":100788,\"start\":100779},{\"end\":101279,\"start\":101271},{\"end\":101288,\"start\":101279},{\"end\":101298,\"start\":101288},{\"end\":101764,\"start\":101751},{\"end\":101778,\"start\":101764},{\"end\":102078,\"start\":102067},{\"end\":102088,\"start\":102078},{\"end\":102100,\"start\":102088},{\"end\":102109,\"start\":102100},{\"end\":102118,\"start\":102109},{\"end\":102128,\"start\":102118},{\"end\":102457,\"start\":102446},{\"end\":102467,\"start\":102457},{\"end\":102476,\"start\":102467},{\"end\":102750,\"start\":102741},{\"end\":102760,\"start\":102750},{\"end\":102768,\"start\":102760},{\"end\":102779,\"start\":102768},{\"end\":102792,\"start\":102779},{\"end\":102801,\"start\":102792},{\"end\":102812,\"start\":102801},{\"end\":103199,\"start\":103191},{\"end\":103211,\"start\":103199},{\"end\":103220,\"start\":103211},{\"end\":103487,\"start\":103476},{\"end\":103495,\"start\":103487},{\"end\":103504,\"start\":103495},{\"end\":103514,\"start\":103504},{\"end\":104079,\"start\":104066},{\"end\":104087,\"start\":104079},{\"end\":104646,\"start\":104628},{\"end\":104662,\"start\":104646},{\"end\":104681,\"start\":104662},{\"end\":104692,\"start\":104681},{\"end\":104981,\"start\":104970},{\"end\":104990,\"start\":104981},{\"end\":105407,\"start\":105394},{\"end\":105416,\"start\":105407},{\"end\":105425,\"start\":105416},{\"end\":105434,\"start\":105425},{\"end\":105448,\"start\":105434},{\"end\":105923,\"start\":105914},{\"end\":105932,\"start\":105923},{\"end\":105942,\"start\":105932},{\"end\":105954,\"start\":105942},{\"end\":105964,\"start\":105954},{\"end\":105972,\"start\":105964},{\"end\":105980,\"start\":105972},{\"end\":106493,\"start\":106483},{\"end\":106503,\"start\":106493},{\"end\":106832,\"start\":106820},{\"end\":106839,\"start\":106832},{\"end\":106849,\"start\":106839},{\"end\":106860,\"start\":106849},{\"end\":107213,\"start\":107202},{\"end\":107223,\"start\":107213},{\"end\":107575,\"start\":107569},{\"end\":107581,\"start\":107575},{\"end\":107590,\"start\":107581},{\"end\":107602,\"start\":107590},{\"end\":108219,\"start\":108210},{\"end\":108225,\"start\":108219},{\"end\":108235,\"start\":108225},{\"end\":108245,\"start\":108235},{\"end\":108256,\"start\":108245},{\"end\":108706,\"start\":108695},{\"end\":108714,\"start\":108706},{\"end\":108725,\"start\":108714},{\"end\":108733,\"start\":108725},{\"end\":108747,\"start\":108733},{\"end\":109228,\"start\":109217},{\"end\":109243,\"start\":109228},{\"end\":109254,\"start\":109243},{\"end\":109263,\"start\":109254},{\"end\":109529,\"start\":109514},{\"end\":109542,\"start\":109529},{\"end\":109557,\"start\":109542},{\"end\":109567,\"start\":109557},{\"end\":110151,\"start\":110133},{\"end\":110159,\"start\":110151},{\"end\":110744,\"start\":110734},{\"end\":110754,\"start\":110744},{\"end\":110764,\"start\":110754},{\"end\":111321,\"start\":111309},{\"end\":111332,\"start\":111321},{\"end\":111344,\"start\":111332},{\"end\":111618,\"start\":111608},{\"end\":111630,\"start\":111618},{\"end\":111641,\"start\":111630},{\"end\":111650,\"start\":111641},{\"end\":111667,\"start\":111650},{\"end\":111681,\"start\":111667},{\"end\":111692,\"start\":111681},{\"end\":111977,\"start\":111969},{\"end\":111990,\"start\":111977},{\"end\":112001,\"start\":111990},{\"end\":112219,\"start\":112212},{\"end\":112232,\"start\":112219},{\"end\":112434,\"start\":112425},{\"end\":112444,\"start\":112434},{\"end\":112452,\"start\":112444},{\"end\":112459,\"start\":112452},{\"end\":112467,\"start\":112459},{\"end\":112893,\"start\":112872},{\"end\":112904,\"start\":112893},{\"end\":112985,\"start\":112963},{\"end\":113058,\"start\":113036},{\"end\":113168,\"start\":113141},{\"end\":113235,\"start\":113218},{\"end\":113295,\"start\":113235}]", "bib_venue": "[{\"end\":86889,\"start\":86876},{\"end\":88274,\"start\":88176},{\"end\":89116,\"start\":89073},{\"end\":89518,\"start\":89467},{\"end\":91282,\"start\":91202},{\"end\":95086,\"start\":94986},{\"end\":96509,\"start\":96433},{\"end\":99925,\"start\":99855},{\"end\":100400,\"start\":100320},{\"end\":100913,\"start\":100859},{\"end\":101467,\"start\":101391},{\"end\":103701,\"start\":103616},{\"end\":104274,\"start\":104189},{\"end\":105133,\"start\":105070},{\"end\":105583,\"start\":105524},{\"end\":106121,\"start\":106059},{\"end\":106941,\"start\":106908},{\"end\":107828,\"start\":107744},{\"end\":108908,\"start\":108836},{\"end\":109732,\"start\":109658},{\"end\":110389,\"start\":110277},{\"end\":110955,\"start\":110868},{\"end\":86874,\"start\":86823},{\"end\":87388,\"start\":87360},{\"end\":87609,\"start\":87569},{\"end\":87786,\"start\":87753},{\"end\":88174,\"start\":88078},{\"end\":88713,\"start\":88709},{\"end\":89071,\"start\":89013},{\"end\":89465,\"start\":89399},{\"end\":89869,\"start\":89824},{\"end\":90134,\"start\":90098},{\"end\":90336,\"start\":90272},{\"end\":90748,\"start\":90715},{\"end\":91200,\"start\":91114},{\"end\":91655,\"start\":91619},{\"end\":91923,\"start\":91913},{\"end\":92220,\"start\":92187},{\"end\":92574,\"start\":92515},{\"end\":92964,\"start\":92913},{\"end\":93370,\"start\":93318},{\"end\":93670,\"start\":93644},{\"end\":93934,\"start\":93914},{\"end\":94198,\"start\":94174},{\"end\":94360,\"start\":94340},{\"end\":94572,\"start\":94568},{\"end\":94984,\"start\":94886},{\"end\":95544,\"start\":95540},{\"end\":95857,\"start\":95808},{\"end\":96431,\"start\":96340},{\"end\":96785,\"start\":96768},{\"end\":96930,\"start\":96891},{\"end\":97014,\"start\":97000},{\"end\":97106,\"start\":97085},{\"end\":97209,\"start\":97180},{\"end\":97306,\"start\":97279},{\"end\":97547,\"start\":97500},{\"end\":97881,\"start\":97877},{\"end\":98195,\"start\":98152},{\"end\":98446,\"start\":98397},{\"end\":98629,\"start\":98605},{\"end\":98833,\"start\":98791},{\"end\":99084,\"start\":99028},{\"end\":99513,\"start\":99509},{\"end\":99853,\"start\":99768},{\"end\":100318,\"start\":100223},{\"end\":100857,\"start\":100788},{\"end\":101389,\"start\":101298},{\"end\":101823,\"start\":101778},{\"end\":102158,\"start\":102128},{\"end\":102444,\"start\":102391},{\"end\":102878,\"start\":102812},{\"end\":103235,\"start\":103220},{\"end\":103614,\"start\":103514},{\"end\":104187,\"start\":104087},{\"end\":104712,\"start\":104692},{\"end\":105068,\"start\":104990},{\"end\":105522,\"start\":105448},{\"end\":106057,\"start\":105980},{\"end\":106552,\"start\":106503},{\"end\":106906,\"start\":106860},{\"end\":107283,\"start\":107223},{\"end\":107742,\"start\":107643},{\"end\":108349,\"start\":108256},{\"end\":108834,\"start\":108747},{\"end\":109215,\"start\":109161},{\"end\":109656,\"start\":109567},{\"end\":110275,\"start\":110159},{\"end\":110866,\"start\":110764},{\"end\":111307,\"start\":111232},{\"end\":111710,\"start\":111706},{\"end\":112034,\"start\":112001},{\"end\":112268,\"start\":112232},{\"end\":112423,\"start\":112387},{\"end\":112743,\"start\":112620},{\"end\":112961,\"start\":112934},{\"end\":113139,\"start\":113118}]"}}}, "year": 2023, "month": 12, "day": 17}