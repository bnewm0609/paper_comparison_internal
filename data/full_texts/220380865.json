{"id": 220380865, "updated": "2023-10-09 16:31:09.778", "metadata": {"title": "The gem5 Simulator: Version 20.0+", "authors": "[{\"first\":\"Jason\",\"last\":\"Lowe-Power\",\"middle\":[]},{\"first\":\"Abdul\",\"last\":\"Ahmad\",\"middle\":[\"Mutaal\"]},{\"first\":\"Ayaz\",\"last\":\"Akram\",\"middle\":[]},{\"first\":\"Mohammad\",\"last\":\"Alian\",\"middle\":[]},{\"first\":\"Rico\",\"last\":\"Amslinger\",\"middle\":[]},{\"first\":\"Matteo\",\"last\":\"Andreozzi\",\"middle\":[]},{\"first\":\"Adria\",\"last\":\"Armejach\",\"middle\":[]},{\"first\":\"Nils\",\"last\":\"Asmussen\",\"middle\":[]},{\"first\":\"Srikant\",\"last\":\"Bharadwaj\",\"middle\":[]},{\"first\":\"Gabe\",\"last\":\"Black\",\"middle\":[]},{\"first\":\"Gedare\",\"last\":\"Bloom\",\"middle\":[]},{\"first\":\"Bobby\",\"last\":\"Bruce\",\"middle\":[\"R.\"]},{\"first\":\"Daniel\",\"last\":\"Carvalho\",\"middle\":[\"Rodrigues\"]},{\"first\":\"Jeronimo\",\"last\":\"Castrillon\",\"middle\":[]},{\"first\":\"Lizhong\",\"last\":\"Chen\",\"middle\":[]},{\"first\":\"Nicolas\",\"last\":\"Derumigny\",\"middle\":[]},{\"first\":\"Stephan\",\"last\":\"Diestelhorst\",\"middle\":[]},{\"first\":\"Wendy\",\"last\":\"Elsasser\",\"middle\":[]},{\"first\":\"Marjan\",\"last\":\"Fariborz\",\"middle\":[]},{\"first\":\"Amin\",\"last\":\"Farmahini-Farahani\",\"middle\":[]},{\"first\":\"Pouya\",\"last\":\"Fotouhi\",\"middle\":[]},{\"first\":\"Ryan\",\"last\":\"Gambord\",\"middle\":[]},{\"first\":\"Jayneel\",\"last\":\"Gandhi\",\"middle\":[]},{\"first\":\"Dibakar\",\"last\":\"Gope\",\"middle\":[]},{\"first\":\"Thomas\",\"last\":\"Grass\",\"middle\":[]},{\"first\":\"Bagus\",\"last\":\"Hanindhito\",\"middle\":[]},{\"first\":\"Andreas\",\"last\":\"Hansson\",\"middle\":[]},{\"first\":\"Swapnil\",\"last\":\"Haria\",\"middle\":[]},{\"first\":\"Austin\",\"last\":\"Harris\",\"middle\":[]},{\"first\":\"Timothy\",\"last\":\"Hayes\",\"middle\":[]},{\"first\":\"Adrian\",\"last\":\"Herrera\",\"middle\":[]},{\"first\":\"Matthew\",\"last\":\"Horsnell\",\"middle\":[]},{\"first\":\"Syed\",\"last\":\"Jafri\",\"middle\":[\"Ali\",\"Raza\"]},{\"first\":\"Radhika\",\"last\":\"Jagtap\",\"middle\":[]},{\"first\":\"Hanhwi\",\"last\":\"Jang\",\"middle\":[]},{\"first\":\"Reiley\",\"last\":\"Jeyapaul\",\"middle\":[]},{\"first\":\"Timothy\",\"last\":\"Jones\",\"middle\":[\"M.\"]},{\"first\":\"Matthias\",\"last\":\"Jung\",\"middle\":[]},{\"first\":\"Subash\",\"last\":\"Kannoth\",\"middle\":[]},{\"first\":\"Hamidreza\",\"last\":\"Khaleghzadeh\",\"middle\":[]},{\"first\":\"Yuetsu\",\"last\":\"Kodama\",\"middle\":[]},{\"first\":\"Tushar\",\"last\":\"Krishna\",\"middle\":[]},{\"first\":\"Tommaso\",\"last\":\"Marinelli\",\"middle\":[]},{\"first\":\"Christian\",\"last\":\"Menard\",\"middle\":[]},{\"first\":\"Andrea\",\"last\":\"Mondelli\",\"middle\":[]},{\"first\":\"Tiago\",\"last\":\"Muck\",\"middle\":[]},{\"first\":\"Omar\",\"last\":\"Naji\",\"middle\":[]},{\"first\":\"Krishnendra\",\"last\":\"Nathella\",\"middle\":[]},{\"first\":\"Hoa\",\"last\":\"Nguyen\",\"middle\":[]},{\"first\":\"Nikos\",\"last\":\"Nikoleris\",\"middle\":[]},{\"first\":\"Lena\",\"last\":\"Olson\",\"middle\":[\"E.\"]},{\"first\":\"Marc\",\"last\":\"Orr\",\"middle\":[]},{\"first\":\"Binh\",\"last\":\"Pham\",\"middle\":[]},{\"first\":\"Pablo\",\"last\":\"Prieto\",\"middle\":[]},{\"first\":\"Trivikram\",\"last\":\"Reddy\",\"middle\":[]},{\"first\":\"Alec\",\"last\":\"Roelke\",\"middle\":[]},{\"first\":\"Mahyar\",\"last\":\"Samani\",\"middle\":[]},{\"first\":\"Andreas\",\"last\":\"Sandberg\",\"middle\":[]},{\"first\":\"Javier\",\"last\":\"Setoain\",\"middle\":[]},{\"first\":\"Boris\",\"last\":\"Shingarov\",\"middle\":[]},{\"first\":\"Matthew\",\"last\":\"Sinclair\",\"middle\":[\"D.\"]},{\"first\":\"Tuan\",\"last\":\"Ta\",\"middle\":[]},{\"first\":\"Rahul\",\"last\":\"Thakur\",\"middle\":[]},{\"first\":\"Giacomo\",\"last\":\"Travaglini\",\"middle\":[]},{\"first\":\"Michael\",\"last\":\"Upton\",\"middle\":[]},{\"first\":\"Nilay\",\"last\":\"Vaish\",\"middle\":[]},{\"first\":\"Ilias\",\"last\":\"Vougioukas\",\"middle\":[]},{\"first\":\"Zhengrong\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Norbert\",\"last\":\"Wehn\",\"middle\":[]},{\"first\":\"Christian\",\"last\":\"Weis\",\"middle\":[]},{\"first\":\"David\",\"last\":\"Wood\",\"middle\":[\"A.\"]},{\"first\":\"Hongil\",\"last\":\"Yoon\",\"middle\":[]},{\"first\":\"'Eder\",\"last\":\"Zulian\",\"middle\":[\"F.\"]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2020, "month": 7, "day": 7}, "abstract": "The open-source and community-supported gem5 simulator is one of the most popular tools for computer architecture research. This simulation infrastructure allows researchers to model modern computer hardware at the cycle level, and it has enough fidelity to boot unmodified Linux-based operating systems and run full applications for multiple architectures including x86, Arm, and RISC-V. The gem5 simulator has been under active development over the last nine years since the original gem5 release. In this time, there have been over 7500 commits to the codebase from over 250 unique contributors which have improved the simulator by adding new features, fixing bugs, and increasing the code quality. In this paper, we give and overview of gem5's usage and features, describe the current state of the gem5 simulator, and enumerate the major changes since the initial release of gem5. We also discuss how the gem5 simulator has transitioned to a formal governance model to enable continued improvement and community support for the next 20 years of computer architecture research.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2007.03152", "mag": "3040179722", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2007-03152", "doi": null}}, "content": {"source": {"pdf_hash": "f5b50dd03a148f3f757e28853d463c9b3b429de7", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2007.03152v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "5041a9b18d52a60b7143cc338edbfe279d6e3dde", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/f5b50dd03a148f3f757e28853d463c9b3b429de7.txt", "contents": "\nThe gem5 Simulator: Version 20.0+ * A new era for the open-source computer architecture simulator\n7 Jul 2020\n\nJason Lowe-Power \nAbdul Mutaal Ahmad \nAyaz Akram \nMohammad Alian \nRico Amslinger \nMatteo Andreozzi \nAdri\u00e0 Armejach \nNils Asmussen \nSrikant Bharadwaj \nGabe Black \nGedare Bloom \nBobby R Bruce \nDaniel Rodrigues Carvalho \nJeronimo Castrillon \nLizhong Chen \nNicolas Derumigny \nStephan Diestelhorst \nWendy Elsasser \nMarjan Fariborz \nAmin Farmahini-Farahani \nPouya Fotouhi \nRyan Gambord \nJayneel Gandhi \nDibakar Gope \nThomas Grass \nBagus Hanindhito \nAndreas Hansson \nSwapnil Haria \nAustin Harris \nTimothy Hayes \nAdrian Herrera \nMatthew Horsnell \nSyed Ali \nRaza Jafri \nRadhika Jagtap \nHanhwi Jang \nReiley Jeyapaul \nTimothy M Jones \nMatthias Jung \nSubash Kannoth \nHamidreza Khaleghzadeh \nYuetsu Kodama \nTushar Krishna \nTommaso Marinelli \nChristian Menard \nAndrea Mondelli \nTiago M\u00fcck \nOmar Naji \nKrishnendra Nathella \nHoa Nguyen \nNikos Nikoleris \nLena E Olson \nMarc Orr \nBinh Pham \nPablo Prieto \nTrivikram Reddy \nAlec Roelke \nMahyar Samani \nAndreas Sandberg \nJavier Setoain \nBoris Shingarov \nMatthew D Sinclair \nTuan Ta \nRahul Thakur \nGiacomo Travaglini \nMichael Upton \nNilay Vaish \nIlias Vougioukas \nZhengrong Wang \nNorbert Wehn \nChristian Weis \nDavid A Wood \nHongil Yoon \n\u00c9der F Zulian \nThe gem5 Simulator: Version 20.0+ * A new era for the open-source computer architecture simulator\n7 Jul 2020\nThe open-source and community-supported gem5 simulator is one of the most popular tools for computer architecture research. This simulation infrastructure allows researchers to model modern computer hardware at the cycle level, and it has enough fidelity to boot unmodified Linux-based operating systems and run full applications for multiple architectures including x86, Arm\u00ae, and RISC-V. The gem5 simulator has been under active development over the last nine years since the original gem5 release. In this time, there have been over 7500 commits to the codebase from over 250 unique contributors which have improved the simulator by adding new features, fixing bugs, and increasing the code quality. In this paper, we give an overview of gem5's usage and features, describe the current state of the gem5 simulator, and enumerate the major changes since the initial release of gem5. We also discuss how the gem5 simulator has transitioned to a formal governance model to enable continued improvement and community support for the next 20 years of computer architecture research. * gem5 is the result of the merger of the GEMS project started in 1999, and the m5 project started in 2003. Development of gem5 has been active for about 20 years, and this version is being published in 2020. Thus, \"gem5-20\". \u2020 Email Jason Lowe-Power (jlowepower@ucdavis.edu) with all questions and comments. 1 https://scholar.google.com/scholar?q=gem5and every year many papers published in the top computer architecture venues use gem5 as their main evaluation infrastructure. Additionally, gem5 is one of the tools used to design the Fugaku supercomputer, one of the first exascale systems[43]. The gem5 simulator[19]is an open source community-supported computer architecture simulator system. It consists of a simulator core and parametrized models for a wide number of components from out-of-order processors, to DRAM, to network devices. The gem5 project consists of the gem5 simulator 2 , documentation 3 , and common resources 4 that enable computer architecture research.The gem5 project is governed by a meritocratic, consensus-based community governance document 5 with a goal to provide a tool to further the state of the art in computer architecture. The gem5 simulator can be used for (but is not limited to) computer-architecture research, advanced development, system-level performance analysis and design-space exploration, hardware-software co-design, and low-level software performance analysis. Another goal of gem5 is to be a common framework for computer architecture research. A common framework in the academic community makes it easier for other researchers to share workloads and models as well as compare and contrast their innovations with other architectural techniques.The gem5 community strives to balance the needs of its three categories of users: academic researchers, industry researchers, and students learning computer architecture. For instance, the gem5 community strives to balance adding new features (important to researchers) and a stable code base (important for students). Specific user needs important to the community are enumerated below:\u2022 Effectively and efficiently emulate the behavior of modern processors in a way that balances simulation performance and accuracy\n\nTHE GEM5 SIMULATOR\n\nThere is \"a new golden age for computer architecture\" [33,34] driven by changes in technology (e.g., the slowdown of Moore's Law and Dennard Scaling) and ever increasing computational needs. One of the first steps in research and development of new hardware architectures is software-based modeling and simulation. The gem5 simulator [19] is currently one of the most popular academicfocused computer architecture simulation frameworks. Since its publication in 2011, the gem5 paper has been cited over 3600 times 1 ,\n\n\u2022 Serve as a malleable baseline infrastructure that can easily be adapted to emulate the desired behaviors \u2022 Provide a core set of APIs and features that remain relatively stable \u2022 Incorporate features that make it easy for companies and research groups to stay up to date with new features and bug fixes as well as continue contributing to the project \u2022 Additionally, the gem5 community is committed to openness, transparency, and inclusiveness.\n\nIn this paper, we discuss the current state of gem5. We first discuss the past, present and future of the gem5 project and how to become a member of the gem5 community for researchers, students, and teachers in Section 1.1. Then, we give an overview of gem5's main features available today and describe how to use gem5 for its main use case: computer architecture simulation 1.3. Finally, Section 2 enumerates the major changes in gem5 in the past nine years since the initial release.\n\nIt has taken a huge number of people to make gem5 what it is today. One of the goals of this paper is to recognize the hard work on this community infrastructure which is often overlooked. To that end, we strive to include everyone who contributed to gem5 and document as many of the major changes as we can. Section 4 acknowledges those contributors who are not authors of this paper and without whom gem5 would not be as successful.\n\n\nThe past, present, and future of gem5\n\nThe gem5 simulator was born when the m5 simulator [20] created at University of Michigan merged with the GEMS simulator [50] from University of Wisconsin. These were two academic-oriented simulators, neither of which had an open development community (both simulators had their source available for free 6,7 , but did not have a community-oriented development process). Both of these simulators were quite popular on their own. The GEMS paper has been cited over 1800 times and the m5 paper has been cited over 1000 times.\n\nSince its initial release nine years ago the gem5 simulator has been wildly successful. In this time, the use of gem5 has exploded. Although not a perfect metric, as shown in Figure 1a the gem5 paper has received over 3600 citations according to Google Scholar.\n\nAt the same time, the contributor community has also grown. Figure 1b shows the number of commits per year and Figure 1c shows the number of unique contributors per year. These figures show that since the initial release of gem5 in 2011, development has been accelerating.\n\nWith this acceleration in use and development came growing pains [48]. The gem5 community was going through a shift, from a small project with most contributors from one or two academic labs, to a project with worldwide-distribution of contributors. Additionally, given the growing user base, we could no longer assume that all gem5 users were also going to be main developers.\n\nTo solve the problems brought up by the expanding gem5 community, the gem5 project has made major changes in the past nine years. We now have a formal governance structure, we have improved our documentation (see Section 2.2), we have moved to a 6 https://sourceforge.net/projects/m5sim/ 7 https://research.cs.wisc.edu/gems/home.html better distributed development platform, and we have improved our community outreach.\n\nTo institute a formal governance model, we followed the best practices from other successful open source projects. We chose to institute a meritocratic governance model where anyone with an interest in the project can join the community, contribute to the project design and participate in the decision-making process.\n\nThe governance structure also defines the roles and responsibilities of members of the community including users, contributors, and maintainers. We also formed a project management committee (PMC) with a mix of industry and academic members to help ensure smooth running of the project.\n\nTo simplify the contribution process, we have instituted many industry-standard development methodologies including providing a CONTRIBUTING document in the gem5 source. In the past, gem5 code contributions were managed with a number of esoteric software packages. Now, all gem5 code is stored in a git repository 8 , code review is managed on gerrit 9 , we have continuous integration support (see Section 2.20), our website is implemented with Jekyll and markdown 10 , and we have a Jira-based issue tracker 11 .\n\nAfter transitioning to these more well known tools and improving our development practices, we have seen a further rise in the number of community contributors and using gem5 has become easier. Continuous integration enables us to test every single changeset before it is committed. This allows us to catch bugs before they are committed into the mainline repository which makes gem5 more stable. Similarly, by implementing a bug tracking system, we can track issues that affect gem5. For example, in the first six months of using a bug tracker we have closed over 250 issues.\n\nThe future of gem5. The future of gem5 is bright. We are continuing to work with the community to define the roadmap for gem5 development for the next version of gem5, version 20.1, and beyond. In the short term, we are excited about improvements to the underlying infrastructure of gem5 with better testing, refactoring of aging code (some of gem5's code is over 20 years old!), and adding well-defined stable APIs. By defining stable APIs, we will make it easier for the community to build off of gem5. For instance, the inter-simulator interface is currently being defined so that gem5 can be used in conjunction with other simulators (e.g., SST [36,60], SystemC (Section 2. 18), and many others). We are also working on improving the interconnect model (Section 2.13), adding support for non-volatile memory controllers (Section 2.9.5), and a graphical user interface (GUI).\n\nOne of the most exciting features coming to gem5 is that we will provide the community with a set of publicly validated models and parameters which will model current architectural system components including CPU cores, GPU compute units (CUs), caches, main memory systems, and devices. Past research [4,5,14,22,28,31,40,55,70,72] has shown that some gem5 models can be imprecise. We strive for accuracy compared to real systems; however, since most systems are proprietary and complex, accuracy for all workloads will be difficult. Thus, we will broadly advertise the relative performance, power, and other metrics when providing these models so users can make an informed decision when choosing their baseline configurations. This will reduce the researcher's time spent on configuring baselines and allow them to concentrate more effort on analyzing and developing their novel research ideas. The first step towards this goal of validated baselines is the gem5 resources repository described in Section 2.1.\n\nFinally, we are planning to publish an online Learning gem5 course based on an expanded version of the Learning gem5 material 2.2 12 . This course will cover how to get started using gem5, how to develop new models to be used in gem5, and the details of gem5's software architecture. In addition to the online version of the course, we will continue to conduct tutorials and workshops at computer architecture and computer systems conferences.\n\nHowever, the broader gem5 community is the most important part of gem5's future. In the next section, we discuss how to become part of the gem5 community.\n\n\nBecoming part of the gem5 community\n\nAs a reader of this paper, you are already becoming part of the gem5 community! Anyone who uses gem5 or contributes in any way is part of the gem5 community. Contributing can be as simple as sending a question on the gem5 mailing list 13 or as complex as adding a new model to the upstream codebase. Below, we discuss some of the common ways to use gem5 and become part of the community.\n\n1.2.1 For researchers. Currently, the most common gem5 use case is computer architecture research. In this case, researchers download the gem5 sources, build the simulator, and then add their own device models on top of the models included in upstream gem5. This use case requires deep knowledge of the core simulation frameworks of gem5. However, we are working to make it easier to get started developing and researching with gem5 through efforts like the Learning gem5 materials and online course (Section 2.2).\n\nAfter using gem5 in their research, we encourage these users to contribute their improvements and fixes to gem5 back to the mainline codebase. Not only does this improve gem5 for others, but it also makes reproducing research results easier. Rather than managing many local changes and trying to keep up with new releases of gem5, when code is contributed upstream it is the responsibility of others in the community to ensure that the code stays up to date. Additionally the gem5 project employs a permissive BSD license to lower the barrier of contribution for both academic and industry researchers.\n\n1.2.2 For students and teachers. The gem5 simulator can be used as a tool for teaching computer architecture as well. Historically, there has been a very steep learning curve for using gem5 even for simple experiments. However, we are improving the documentation for new users.\n\nWe will be continuing to improve gem5 with the goal of making it easier for both students and teachers to learn and teach computer architectures concepts. For example, the new Learning gem5 material created for the online course will include a set of example exercises that we hope can be used in both undergraduate and graduate computer architecture courses. Additionally, we are working to develop a new graphical front-end for gem5 and to develop knowngood models that do not required deep knowledge of simulator internals to configure and use.\n\ngem5 can be used in a computer architecture course by having the students download and build gem5 themselves or by providing them with a pre-built binary. Then, the students can create different gem5 configurations which vary hardware parameters (e.g., issue width, cache associativity, etc.). Finally, the students can explore the effects of these architectural changes on a wide array of common benchmarks and realistic applications from the gem5-resources repository (see Section 2.1).\n\n\ngem5's main features\n\nThe gem5 simulator is mainly used to conduct computer architecture research. In most cases, researchers have an application or benchmark for which they want to measure some statistics under different hardware configurations. For instance, they may be interested in the run time, the memory bandwidth, number of branch predictor mis-speculations, etc. The gem5 simulator allows users to run applications and simulate the timing of hardware structures. It contains parameterized models for the processor core (CPU), memory, and devices.\n\nAlthough there are many computer architecture simulators, and many of these are open source with features that overlap with gem5, gem5 is a unique simulation infrastructure.\n\n\u2022 gem5 is dynamically configurable through a robust Pythonbased scripting interface. Most other simulators are configured statically with flat text files (e.g., json) or at compilation time. On the other hand, gem5 allows users to simulate complex systems much more easily by using object-oriented Python scripts to compose simpler systems into more complex ones. \u2022 gem5 is extensible through a clean model API. The gem5 simulator has over 300 parameterized models and adding new models and parameters is straightforward and well documented. \u2022 gem5 is a full system simulator. Its high-fidelity models can support booting unmodified operating systems and running unmodified applications with cycle-level statistics. \u2022 gem5 is a community-driven and frequently updated project.\n\nThe gem5 community is thriving. Since its original release nine years ago, there have been over 250 unique contributors and over 7500 commits. Even in the last six months, gem5 has had over 850 commits and 50 unique contributors.\n\nAn overview of gem5's usage is shown in Figure 2. First, the user chooses a system to simulate (e.g., a two core system with two levels of cache shown on the left of Figure 2). Then, the user writes a Python script that describes the system under test by instantiating model objects (SimObjects in gem5 terminology). Each object has a number of parameters that the user can modify in their script by setting member variables of the Python objects. This script is also used to control the simulator and can start the simulation, stop the simulation, save the simulation state, and complete other simulator interactions. To execute the simulation, the user passes this Python script to the gem5 binary, which acts as a Python interpreter and executes the script. This instantiates the system and runs the simulation as specified in the script. The output of gem5 is the output of the application (e.g., standard output or the serial terminal in full system mode) and statistics for each of the simulated model objects.\n\nMany of gem5's features are also useful for other computer systems and programming languages research (e.g., as a platform for developing JIT compilers [66]).\n\nThe gem5 simulator is an \"execute-in-execute\" simulator. Each operation (e.g., instruction, memory request, I/O operation) is functionally completed at the point that the timing simulation specifies. For instance, each instruction is executed when it is in the execute stage of the pipeline. This is in contrast to trace-based and executeahead simulators. The main benefit of execute-in-execute is when running applications whose code path depends on the timing of multiple threads or I/O. Trace-based or execute-ahead simulation may hide potential behaviors and produce different timing results than real hardware.\n\nTo enable modularity, gem5 separates the functional execution from the timing in most of its models. For instance, each of gem5's CPU models can be used with any ISA as the ISA's functional implementation is separate from the CPU timing model. This separation allows gem5 to create checkpoints during execution, fast-forward to the region of interest using low fidelity models, and introspection from the simulator into the simulated system at runtime.\n\nThe gem5 simulator can be used in two different modes: full system simulation or system call emulation (syscall emul or SEmode). Figure 3 shows the hardware/software abstraction layers in each of these cases. In full system mode, gem5 can boot a full Linuxbased operating system (e.g., Ubuntu 20.04). After booting the guest OS, the researcher can run the application of interest to generate statistics. In system call emulation mode, the gem5 simulator itself emulates the operating system. The support for Linux system calls has been greatly improved recently (see Section 2.19). SE-mode ignores the timing of many system-level effects including system calls, TLB misses, and device accesses. Thus, researchers should use caution when running experiments in SE-mode and ensure that ignoring system-level effects will not change the results of the experiments.\n\n1.3.1 gem5 design. The gem5 simulator is a cycle-level computer system simulation environment. At its core, gem5 contains an eventdriven simulation engine. On top of this simulation engine, gem5 implements a large number of models for system components including CPU cores (out-of-order designs, in-order designs, and others), a detailed DRAM model, on-chip interconnects, coherent caches, I/O devices, and many others. All of these models are parameterized, and they can be customized for different systems (e.g., there are fully specified models for different DRAM devices including DDR3/4, GDDR5, HBM, and HMC, users can change the width of the out-of-order core, etc.). Many of these different models are shown in Figure 4. The gem5 project also contains tests to help find bugs, a complex and feature-rich statistics database, and a Python scripting interface to describe systems under test and run simulations.\n\nThe gem5 simulator has modular support for multiple ISAs (see Figure 4 1 \u25cb). The gem5 simulator currently supports Arm, GPU ISAs, MIPS, Power, RISC-V, SPARC, and x86. These ISAs not only include the details to execute each instruction, but also the systemspecific devices necessary for full system simulation. There is robust full system support for Linux on Arm and x86. Additionally, many other ISAs have some level of full system support.  Figure 2: How gem5 is used for computer architecture research. An example system is shown on the left, the sketch of a simulation script is shown in the middle, and the results of the gem5 simulation are shown on the right.  All of these ISAs can be used with any of gem5's CPU models as the CPU models are designed to be ISA-agnostic (Figure 4 2 \u25cb). Four different CPU models are included which span the fidelityperformance spectrum. The gem5 simulator contains \"simple\" CPU models that can be used for memory system studies or other studies that do not require high fidelity execution models. When using the \"simple\" CPU model, gem5 simulates the system faster, but has less fidelity when compared to real devices. Additionally, gem5 contains a detailed in-order CPU model (the \"minor\" CPU) and an out-oforder CPU model (the \"O3\" CPU). When using these high-fidelity models, gem5 runs slower, but can provide more realistic results.\n\nFinally, gem5 includes a CPU \"model\" that bypasses simulation and allows the binaries running in gem5 to use the underlying host's processor, if the host ISA is the same as the application running in gem5. In this mode, the performance of gem5 is nearly the same as when running natively [63]. This CPU model is based on the kernel virtual machine (KVM) API in Linux and leverages the hardware virtualization support available in many modern processors. Although the KVM CPU model can execute at native speed, it does not model the timing of execution or memory requests. The KVM-based CPU model can be used for sampled simulation and fast-forwarding to the region of interest and checkpoint locations.\n\nTo connect the different compute, memory, and I/O device models gem5 provides a modular port interface which allows any component that implements the port API to be connected to any other component implementing the same API (Figure 4 3 \u25cb). This allows models designed for one system to be easily used in other system designs.\n\nThere are two different cache systems in gem5: Ruby (Figure 4 4 \u25cb), which models cache coherence protocols with high fidelity; and the \"classic\" caches (Figure 4 5 \u25cb), which lack cache coherence fidelity and flexibility. Ruby enables user-defined cache coherence protocols and gem5 includes many different protocols out of the box. Users can also choose to use a simple network model or the detailed Garnet model [3] when using Ruby caches which offers cycle-level detail for the on-chip network.\n\nThe classic caches have a single hard-coded hierarchical MOESI coherence protocol. However, this cache model is easily composable allowing users to construct hierarchical cache topologies without worrying about the details of the coherence protocol. Both Ruby and the classic caches can be used with any CPU model, any ISA, and any memory controller model. The gem5 simulator also includes an event-driven DRAM model (Figure 4 6 \u25cb). This DRAM model is easily configurable with the timing parameters for a variety of different DRAM controllers including DDR3, DDR4, GDDR, HBM, HMC, LPDDR4, LPDDR5, and others. Although this is not a cycle-accurate DRAM model like DRAMSim [46,62,73] or Ramulator [42], it is nearly as accurate while providing more flexibility and higher performance [32]. In addition to CPU models, gem5 also includes a cycle-level compute-based GPU [30,69] (Figure 4 7 \u25cb). This GPU model does not support graphics applications, but supports many compute applications based on the heterogeneous system architecture (HSA) and ROCm runtime. The GPU model is based on AMD's Graphics Core Next (GCN) architecture [11,12]. The GPU model has a modular ISA similar to the CPU model in gem5, and can be extended to support other GPU ISAs in the future. Additionally, gem5 contains support for a functional-only GPU model to enable simulating applications that depend on graphics APIs but do not depend on graphics performance [26].\n\nAn important component to full system simulation is supporting I/O and other devices (Figure 4 8 \u25cb). Thus, gem5 supports many system-agnostic devices such as disk controllers, PCI components, Ethernet controllers, and many more. There are also many systemspecific device models such as the Arm GIC and SMMU, and x86 PC devices.\n\nFinally, gem5 has been integrated with other computer architecture simulator systems to enable users with models in other simulator systems to use gem5's features ( Figure 4 9 \u25cb). For instance, gem5 has been integrated with the Structural Simulation Toolkit (SST) [36,60], which uses gem5's detailed CPU models in conjunction with SST's multi-node modeling capabilities. DRAM-Sim [46,62,73] which provides a cycle-accurate DRAM models has also been integrated with gem5. Additionally, the IEEE standard SystemC API [51] has been integrated to enable users with SystemC models to use them as gem5 components (see Section 2.18 for more details).\n\n\nMAJOR CHANGES IN GEM5-20\n\nIn addition to the systematic changes in project management discussed in Section 1.1 there have also been many added features, fixed bugs, and general improvements to the codebase. This section contains descriptions of some of the major changes to gem5. There were 7015 commits by at least 250 unique contributors between when gem5 was released in 2011 and the release of gem5-20. This section is a comprehensive, but not exhaustive, list of the major changes in gem5. Along with the description of the changes in gem5, we also recognize the individuals or groups who made significant contributions to each of these features with separate by-lines for each subsection. However, there are many unlisted contributors that were indispensable in getting gem5 where it is today. Table 1 gives and overview of the major changes in gem5 with pointers to subsections which contain more detail on each change. 14 The gem5 simulator permits the simulation of many different systems using a variety of benchmarks and tests. However, gathering and compiling the resources to perform experiments with gem5 can be a laborious process. To provide a better user-experience we have began maintaining gem5 resources, which we broadly define as a set of artifacts that are not required to build or run gem5, but that may be utilized to carry out experiments and simulations. For example, Linux kernels, disk images, popular benchmark suites, and commonly used tests binaries are frequently needed by users of gem5 but are not distributed as part of the gem5 itself. As part of our gem5-20 release, these resources, with source code and build instructions for each, are gradually being centralized in a common repository 15 .\n\n\ngem5 resources\n\nA key goal of this repository is to ensure reproducibility of gem5 experiments. The gem5 resources repository provides researchers with a suite of disk images with pre-installed operating systems and benchmarks as well as kernel binaries. Thus, all researchers which use the resources are starting from a common point and can more easily reproduce experiments. Additionally, all of the sources and scripts to build each artifact are also included in the repository which can be modified to create custom resources.\n\n2.1.1 Testing gem5-20 with gem5 resources. Another important aim of creating a common set of gem5 resources is to more regularly test gem5 on a suite of common benchmarks, operating systems Linux kernels. As part of gem5-20, we have tested the simulator's capability to run SPEC 2006 [35], SPEC 2017 [21], PARSEC [18], the NAS Parallel Benchmarks (NPB) [15], and the GAP Benchmark Suite (GAPBS) [16]. We have also shown gem5-20's performance when running five different long-term service (LTS) Linux kernel releases on a set of different CPU and memory configurations. The results from these investigations can be found on our website 16 . We plan to use this information, and gem5 resources repository, to better target problem areas in the gem5 project.\n\nFurthermore, with a shared set of common resources and knowledge of what configurations work best with gem5, we can provide the community with a set of \"known good\" gem5 configurations to facilitate computer architecture research. We intend for these configurations to replicate the functionality and performance of architectural components at a high level of fidelity. 17 The gem5 simulator has a steep learning curve. Often, using gem5 in research means developing the simulator to modify or add new models. Not only do new users have to navigate the hundreds of 14 by Ayaz Akram, Bobby R. Bruce, Hoa Nguyen, and Mahyar Samani 15 https://gem5.googlesource.com/public/gem5-resources 16 http://www.gem5.org/documentation/benchmark_status 17 By Jason Lowe-Power General usability improvements Section 2.1: Added new resources repository with disk images, kernel images, etc. Section 2.2: Learning gem5 book and class. Provides a way to get started using and developing with gem5.\n\n\nLearning gem5\n\nISA improvements Section 2.3: RISC-V ISA added. User mode fully supported. Some support for full system. Section 2.4: ARM ISA improvements. Added support for Armv8, SVE instructions, and trusted firmware. Section 2.5: x86 ISA improvements. Better support for out-oforder CPU models, many instructions added, and support for TSO memory consistency.\n\nExecution model improvements Section 2.6: New branch predictors including L-TAGE. Section 2.7: New CPU model based on KVM added. Uses host hardware to accelerate simulator. Section 2.8: Elastic trace execution added. Trace capture and playback with dynamic dependencies for fast flexible simulation.\n\nMemory system improvements Section 2.9: Configurable DRAM controller. Added support for many DRAM devices, low-power DRAM, quality of service, and power models. Section 2.10: Classic cache improvements. Added non-coherent caches, write streaming optimizations, cache maintenance operations, and snoop filtering. Section 2.11: General replacement policy framework and cache compressions support added. Section 2.12: Ruby model improvements. Many general improvements, GPU coherence protocols, and support for ARM ISA. Section 2.13: Garnet network improved to version 2.0 with more detailed router and network models.\n\nNew models Section 2.14: GPU compute model added. Models AMD's GCN architecture in SE-mode with support for shared memory systems. Tests for GPU-like coherence protocols also added. Section 2.15: Runtime power modeling and DVFS support added. Section 2.16: Support for timing-agnostic device models added. VirtIO enables more flexible guest-simulator interaction and the NoMali GPU model allows graphic-based applications to execute more realistically. Section 2.17: Support for modeling multiple distributed systems added. Section 2.18: SystemC model integration. Added a bridge from SystemC TLM models to gem5 models, and added an implementation of SystemC for tight gem5-SystemC integration.\n\nGeneral infrastructure improvements Section 2.19: SE-mode improvements. Support for dynamicallylinked binaries, more system calls, multi-threaded applications, and a virtual file system. Section 2.20: Testing improvements. New unit test framework and continuous integration support. Section 2.21: General infrastructure improvements. Added support for HD5F output for statistics, Python 3 support, and asynchronous modeling. Section 2.22: Updated guest\u2194simulator APIs. Table 1: Overview of major change in gem5.\n\ndifferent models, but they also have to understand the core of the simulation framework. We found that this steep learning curve was one of the biggest impediments to productively using gem5. There was anecdotal evidence that it would take new users years to learn to use gem5 effectively [48]. Additionally, due to a lack of formal documentation, the only way to learn parts of gem5 was to work with a senior graduate student or to intern at a company and pick up the knowledge \"on the job\". Learning gem5 reduces the knowledge gap between new users and experienced gem5 developers. Learning gem5 takes a bottomup approach to teaching new users the internals of gem5. There are currently three parts of Learning gem5, \"Getting Started\", \"Modifying and Extending\", and \"Modeling Cache Coherence with Ruby\". Each part walks the reader through a step-by-step coding example starting from the simplest possible design up to a more realistic example. By explaining the thought process behind each step, the reader gets a similar experience to working alongside an experienced gem5 developer. Learning gem5 includes documentation on the gem5 website 18 and source code in the gem5 repository for these simple ground-up models.\n\nLooking forward, we will be significantly expanding the areas of the simulator covered by Learning gem5 and creating a gem5 \"summer school\" initially offered summer of 2020. This \"summer school\" will mainly be an online class (e.g., Coursera) with all videos available on the gem5 YouTube channel 19 , but we hope to have in-person versions of the class as well. These classes will also be the basis of gem5 Tutorials held with major computer architecture and other related conferences.\n\n\nRISC-V ISA Support\n\nRISC-V is a new ISA which has quickly gained popularity since its creation in 2010, only one year before the initial gem5 release [74]. In this time, the number of RISC-V users has grown significantly, especially in the computer architecture research community. Thus, the addition of RISC-V as a supported ISA for gem5 is one of the main new features in the past nine years.\n\n2.3.1 General RISC-V ISA Implementation 20 [61,68]. The motivation for implementing the RISC-V ISA into gem5 stemmed from needing a way to explore architectural parameters for RISC-V designs. At the time of implementation, the only means of simulating RISC-V was using Spike (its simplified, single-cycle RTL simulator), QEMU, full RTL simulation, or emulation on an FPGA. Spike and QEMU are not detailed enough and RTL simulation is too time consuming for these methods to be feasible for architectural parameter exploration. With FPGA emulation, it is difficult to retrieve performance information without modifying both the RTL design and the system software. The gem5 simulator provides an easy means of performing architectural analysis through its detailed hardware models.\n\nThe implementation follows the divisions of the instruction set into its base ISA and extensions, beginning with the 32-bit integer base set, RV32I. This implementation was modeled off of the existing gem5 code for MIPS and Alpha ISAs, which are also RISC instruction sets that share many of the same operations as RISC-V. Including support for 64-bit addresses and data (RV64) and for the multiply (M) extension mainly involved adding the new instructions and changing some parameters to expand register and data path widths.\n\nThe next two extensions, atomic (A) and floating point (F and D for single-and double-precision, respectively), were more complicated. The A extension includes both load-reserved/store-conditional (LR/SC) sequence of instructions for performing complex atomic operations on memory and a set of read-modify-write instructions for performing simple ones. These instructions were implemented as a pair of micro-ops that acted like an LR/SC pair with one of the pair additionally performing the specified operation. Floating-point instructions required many special cases to ensure correct error handling and reporting, and we were not able to implement one of the five possible rounding modes (round away from zero) RISC-V specifies for inexact calculations due to the fact that C++ does not support it. Finally, support for the non-standard compressed (C) extension, which adds 16-bit versions of high-usage instructions, was added when it was discovered that this extension was included by default in many RISC-V software toolchains (e.g., GCC). The compressed instruction implementation required creating a state machine in the instruction decoder to keep track of whether the current instruction is compressed, to increment the PC by the correct amount based on the size of the instruction, and to handle cases where a full-length instruction crosses a 32-bit word boundary.\n\nWith this implementation, most RISC-V Linux programs are supported in system call emulation mode. Continued work has improved the implementation of atomic instructions, including actual atomic read-modify-write accesses in a single instruction and steps toward support for full system simulation. Additionally, gem5's version of the RISC-V test-suite 21 has been updated to the latest version and several corner cases in gem5 have been fixed, so that now most of the tests are working correctly. 22 . To simulate complete operating systems the RISC-V ISA has been extended to support full system simulation. More specifically, we added support for Sv39 paging according to the privileged ISA 1.11 23 with a 39-bit virtual address space, a page-table walker performing a three-level translation, and a translation lookaside buffer (TLB). The page-table walker code is based on the existing gem5 code for x86 due to the structural similarities. While a few steps are still missing to run Linux, general support to run a complete RISC-V operating system on gem5 is available now.\n\n\nRISC-V Full System Support\n\n\nArm Improvements\n\n2.4.1 Armv8 Support 24 . The Armv8-A architecture introduced two different architectural states: AArch32, supporting the A32 and T32 instruction sets (backward-compatible with Armv7-A and Thumb instruction sets, respectively), and AArch64, a new state offering support for 64-bit addressing via the A64 instruction set. Currently, gem5 supports all of the above instruction sets and the interworking between them. On top of the user-level features, several important 21 https://github.com/riscv/riscv-tests 22 By Nils Asmussen 23 https://riscv.org/specifications/privileged-isa/ 24 by Giacomo Gabrielli, Javier Setoain, and Giacomo Travaglini system-level extensions, e.g. the security (aka TrustZone\u00ae [10]) and virtualization extensions [13], have been contributed opening up new avenues for architectural and microarchitectural research.\n\nWhile Armv8-A was a major iteration of the architecture, there have been several smaller iterations introduced by Arm with a yearly cadence, and various contributors have implemented some of the main features from those extensions, up to Armv8.3-A.\n\n2.4.2 Support for the Arm Scalable Vector Extension (SVE) 25 . In 2016, Arm introduced their Scalable Vector Extension (SVE) [13], a novel approach to vector instruction sets. Instead of having fixedsize vector registers, SVE operates on registers that can be anywhere between 128 to 2048 bit long (in 128-bit increments). SVE code is arranged in a way that is agnostic to the underlying vector length (Vector Length Agnostic Programming), and a single SVE instruction will perform its operation on as many elements as the vector register can fit, depending on its length. On top of the 32 variablelength vector registers, SVE also adds 16 variable length predicate registers for predicated execution. These registers store one bit per byte (the minimum element size) in the vector register, and can be used to select specific elements in the vector for operation [57].\n\nTo support SVE, gem5 implements register storage and register access as two separated classes, a container and an interface, decoupling one from the other. The vector registers can be of any arbitrary size and be accessed as vectors of elements of any particular type, depending on the operand types of each instruction. This not only facilitates handling variable size registers, it also abstracts the nuances of handling predicate registers, where the stored values have to be grouped and interpreted differently depending on the operand type.\n\nThis design provides enough flexibility to support any vector instruction sets with arbitrarily large vector registers. TF-A is supported on multiple Arm Development Platforms (APDs), each of them characterized by its set of hardware components and their location in the memory map (e.g., Juno ADP and the Fixed Virtual Platforms (FVP) ADP family). However, the Arm reference platforms in gem5 are part of the VExpress_GEM5_Base family. These are loosely based on a Versatile\u2122Express RS1 platform with a slightly modified memory map. TF-A implementations are provided for both Juno and FVPs, however not for VExpress_GEM5_Base.\n\nTowards unifying Arm's platform landscape, we now provide a VExpress_GEM5_Foundation platform as part of gem5's VExpress_GEM5_Base family. This is based on and compatible with FVP Foundation, meaning all Foundation software may run unmodified in gem5, including but not limited to TF-A. This allows for simulating boot flows based 25 by Giacomo Gabrielli, Javier Setoain, and Giacomo Travaglini 26 by Adrian Herrera on UEFI implementations (U-boot, EDK II), and brings us a step closer to Windows support in gem5.\n\n\nX86 ISA Improvements 27\n\nThe x86 or x86-64 ISA is one of the most popular ISAs for desktop, server, and high-performance compute systems. Thus, there has been significant effort to improve gem5's modeling of this ISA. This section presents a subset of the changes to improve the x86 ISA. There are many other improvements large and small that generally have improved the fidelity of x86 modeling.\n\nIn out-of-order CPUs (e.g., gem5's O3CPU), instructions whose dependencies have been satisfied are allowed to execute even if there are instructions earlier in the stream waiting for their operands. The flag register used in the x86 ISA complicates this out-of-order execution as almost every instruction both reads and writes this register making them all dependent on one another. Maintaining a single flag register can introduce dependencies that need not exist. We now maintain multiple flag registers for holding subsets of flag bits to reduce the dependencies. This prevents unnecessary serialization, unlocking a significant amount of instruction-level parallelism.\n\nMemory consistency models decide the amount of parallelism available in a memory system, while correctly executing a program. The x86 architecture is based on the Total Store Order (TSO) memory model [52]. We added support for TSO to gem5 for the x86 architecture. This meant ensuring that a later load from a thread can bypass earlier loads and stores, but stores from the same thread are always executed in order. The out-of-order CPU model in gem5 has been improved to implement both TSO and more relaxed consistency models (e.g., those in the RISC-V and Arm architectures discussed in Sections 2.3 and 2.4, respectively).\n\n\nBranch Predictor Improvements 28\n\nIn gem5, multiple branch prediction models are available, many of which were added since the initial release of gem5. Currently, gem5 supports five different branch prediction techniques including the well-known TAGE predictor as well as standard predictors such as bi-mode, tournament, etc. This list can easily be expanded to cover different variants of these well-known branch predictors. Besides, the support for loop predictor and indirect branch predictor is also available.\n\nFurthermore, the modularity of the implementation of different branch predictors allows ease of inclusion of secondary or side predictors into the prediction mechanism of primary predictors. For example, TAGE can be seamlessly augmented with a loop predictor to predict loops with constant iteration numbers. Indirect branch predictor can be made to use complex TAGE-like scheme instead of simple history-based predictors with only a few hours of development effort. In addition to this, these different predictors can be configured with different sizes of history registers and table-like structures. For example, TAGE predictor can be configured to run with different sizes of the history register and consequently a different number of predictor tables, allowing users to investigate the effects of different predictor sizes in various performance metrics. 27 by Nilay Vaish 28 by Dibakar Gope Future development is planned to include the support of neural branch predictors (e.g., perceptron branch predictor, etc.) and different variants of TAGE and perceptron predictors that have demonstrated significant improvement in branch misses in recent years.\n\n\nVirtualized Fast Forwarding 29\n\nSupport for hardware virtualization (e.g., AMD-V, Intel VT-x, and ARM virtualization extensions) is a very useful feature for bring up, model development, testing, and novel simulation research [53,54,63]. Work on the original implementation of hardware virtualization support started in the summer 2012 in Arm Research and targeted the Arm Cortex A15 chip. Some of the most challenging parts of the development were the lack of a stable kernel API for KVM on Arm and the limited availability of production silicon. However, despite these challenges, we had a working prototype that booted Linux in autumn. This prototype was refined and merged into gem5 in April 2013, just one month after qemu gained support for Arm KVM. Support for x86 followed later that year. A good overview of the KVM implementation can be found in the technical report by Sandberg et. al [63]. The original full-system implementation was later extended to support syscall emulation mode on x86 [27]. Support for hardware virtualization in gem5 enabled research into novel ways of accelerating simulation. The original intention was to use KVM to generate checkpoints and later simulate those checkpoints in parallel with different system parameters (e.g., to do design space exploration). However, we quickly realized that the checkpointing step could be eliminated by cloning the simulator state at runtime. This led to the introduction of the fork call in gem5's Python API. Under the hood, this call drains the simulator to make sure everything is in a consistent state, it then uses the UNIX fork call to create a copy of the simulator. A typical use case uses a main process that generates samples that are simulated in parallel. More advanced use cases use fork semantics to simulate multiple outcomes of a sample to quantify the cache warming errors introduced by using KVM to fast-forward between samples [63].\n\n\nElastic Traces 30\n\nDetailed execution-driven CPU models, like gem5's out-of-order model, offer high accuracy, but at the cost of simulation speed. Therefore, trace-driven simulations are widely adopted to alleviate this problem, especially for studies focusing on memory-system exploration. However, traces with fixed time stamps always include the implicit behavior of the simulated memory system with which they were recorded. If the memory system is changed during exploration this can lead to wrong simulation results, since an outof-order core would react differently on the new memory system. Ideally, trace-driven core models will mimic out-of-order processors executing full-system workloads by respecting true dependencies and ignoring false dependencies to enable computer architects to evaluate modern systems. 29  We implemented the concept of elastic traces in which we accurately capture data and memory order dependencies by instrumenting a detailed out-of-order processor model [37]. In contrast to existing work, we do not rely on offline analysis of timestamps, and instead use accurate dependency information tracked inside the processor pipeline. We thereby account for the effects of speculation and branch misprediction resulting in a more accurate trace playback compared to fixed time traces. We integrated a trace player in gem5 that honors the dependencies and thus adapts its execution time to memory-system changes, as would the actual CPU. Compared to the detailed out-of-order CPU model, our trace player achieves a speed-up of 6-8 times while maintaining a high simulation accuracy (83-93%), achieving fast and accurate system performance exploration.\n\n\nOff-Chip Memory System Models 31\n\nThe gem5 simulator can model a large number of configurations in the off-chip memory system. Its memory controller handles requests from the on-chip memory system and issues read and write commands to the actual memory device, modeling the timing behavior of the latter. Over the years a number of contributions have added features that allow modeling emerging new technologies and features as documented below.\n\n2.9.1 New memory controller features 32 . The gem5 DRAM controller provides the interface to external memory, which is traditionally DRAM. It consists of two main components: the memory controller itself and the DRAM interface. The DRAM interface contains media specific information, defining the architecture and timing parameters of the DRAM as well as the functions that manage the media specific operations like activation, precharge, refresh and low power modes [32]. These models are easily modified by extending a Python class and updating the timing parameters for a new DRAM device. 33 . LPDDR5 is currently in mass production for use in multiple markets including mobile, automotive, AI, and 5G. This technology is expected to become the mainstream Flagship Low-Power DRAM by 2021 with anticipated longevity due to proposed speed grade extensions. The specification defines a flexible architecture and multiple options to optimize across different use cases, trading off power, performance, reliability and complexity. To evaluate these tradeoffs, we have updated the memory controller to support the new features and added LPDDR5 configurations.\n\n\nLow-power DDR\n\nWhile these changes have been incorporated for LPDDR5, some of them could be applicable to other memory technologies as well. The gem5 changes incorporate new timing parameters, support for multi-cycle commands, and support for interleaved bursts. These features require new checks and optimizations in gem5 to ensure the model integrity when comparing to real hardware. For example, support for multi-cycle commands along with the changes to LPDDR5 clocking motivated a new check in gem5 to verify command bandwidth. Previously, the DRAM controller did not verify contention on the command bus and assumed adequate command 31 by Nikos Nikoleris 32 by Wendy Elsasser 33 by Wendy Elsasser bandwidth, but with the evolution of new technologies this assumption is not always valid. 34 . The coexistence of heterogeneous tasks/workloads on a single computer system is common practice in modern systems, from the automotive to the highperformance computing use-case. Quality of Service (QoS) is the ability of a system to provide differential treatment to its clients, in a quantifiable and predictable way.\n\n\nQuality of Service Extensions\n\nWe now include a QoS-aware memory controller in gem5, and the definition of basic (example) policies modeling the prioritization algorithm of the memory controller. We include models for a fixed priority policy (every requestor in the system has a fixed priority assigned) and the proportional fair policy (where the priority of a requestor is dynamically adjusted at runtime based on utilization).\n\nThe default timing-based DRAM controller described above has been rewritten to include the QoS changes. These changes separate out the QoS policy from the DRAM timing model. With the framework in place a user can write its own policy and seamlessly plug it into a real memory controller model to unlock system wide explorations under its own arbitration algorithm. 35 . Across applications, DRAM is a significant contributor to the overall system power. For example, the DRAM access energy per bit is up to three orders of magnitude higher compared to an on-chip memory access. Therefore, an accurate and fast power estimation is crucial for an efficient design space exploration. DRAMPower [23] is an open source tool for fast and accurate power and energy estimation for several DRAM memories based on JEDEC standards. It supports unique features like power-down, bank-wise power estimation, per bank refresh, partial array self-refresh, and many more. In contrast to Micron's DRAM Power estimation spread sheet 36 , which estimates the power from device manufacturer's data sheet and workload specifications (e.g. Rowbuffer-Hit-Rate or Read-Write-Ratio), DRAMPower uses the actual timings from the memory transactions, which leads to a much higher accuracy in power estimation. Furthermore, the DRAMPower tool performs DRAM command trace analysis based on memory state transitions and hence avoids cycle-by-cycle evaluation, thus speeding up simulations.\n\n\nDRAMPower and DRAM Power-Down Modes\n\nFor the efficient integration of DRAMPower into gem5, we changed the tool from a standalone simulator to a library that could be used in discrete event-based simulators for calculating the power consumption online during the simulation. Furthermore, we integrate the power-down modes into the DRAM controller model of gem5 [38] in order to provide the research community a tool for power-down analysis for a breadth of use cases. We further evaluated the model with real HPC workloads, illustrating the value of integrating low power functionality into a full system simulator.\n\n2.9.5 Future Improvements to Off Chip Memory Models 37 . We are currently working to refactor the DRAM interface to be extensible and enable modeling of other memory devices. For instance, with 34 by Matteo Andreozzi 35 by Matthias Jung, Wendy Elsasser, Radhika Jagtap, Subash Kannoth, Omar Naji, \u00c9der F. Zulian, Andreas Hansson, Christian Weis, and Norbert Wehn 36 https://www.micron.com/support/tools-and-utilities/power-calc 37 by Wendy Elsasser the advent of SCM (storage class memory), emerging NVM (Non-Volatile Memory) could also exist on a memory interface, potentially alongside DRAM. To enable support of NVM and future memory interfaces, we use a systematic approach to refactor the DRAM controller. We pull the DRAM interface out of the controller and moved to a separate DRAM interface object. In parallel, we create an NVM interface to model an agnostic interface to emerging memory.\n\nThe DRAM interface and the NVM interface have configurable address ranges allowing flexible heterogeneous memory configurations. For example, a single memory controller can have a DRAM interface, an NVM interface, or both interfaces defined. Other configurations are feasible, providing a flexible framework to study new memory topologies and evaluate the placement of emerging NVM in the memory sub-system.\n\n\nClassic Caches Improvements 38\n\nThe classic memory system implements a snooping MOESI-like coherence protocol that allows for flexible, configurable cache hierarchies. The coherence protocol is primarily implemented in the Cache and the CoherentXBar classes and the SnoopFilter object implements a common optimization to reduce unnecessary coherence traffic.\n\nOver the years, the components of the classic memory system have received significant contributions with a primary focus of adding support for future technologies and enhancing its accuracy.\n\n\nNon-Coherent\n\nCache. The cache model in gem5 implements the full coherence protocol and as a result can be used in any level of the coherent memory subsystem (e.g., as an L1 data cache or instruction cache, last-level cache, etc.). The non-coherent cache is a stripped down version of the cache model designed to be used below the point-of-coherence (closer to memory). Below the pointof-coherence, the non-coherent cache receives only requests for fetches and writebacks and itself send requests for fetches and writebacks to memory below. As opposed to the regular cache, the non-coherent cache will not send any snoops to invalidate or fetch data from caches above. As such the non-coherent cache is a greatly simplified version in terms of handling the coherence protocol compared to the regular cache while otherwise supporting the same flexibility (e.g., configurable tags, replacement policies, inclusive or exclusive, etc.).\n\nThe non-coherent cache can be used to model system-level caches, which are often larger in size and can be used by CPUs and other devices in the system.\n\n\nWrite Streaming Optimizations.\n\nWrite streaming is a common access pattern which is typically encountered when software initializes or copies large memory buffers (e.g., memset, memcpy). When executed, the core issues a large number of write requests to the data cache. The data cache receives these write requests and issues requests for exclusive copies of the corresponding cache lines. To get an exclusive copy, it has to invalidate copies of that line and fetch a copy of the data (e.g., from off-chip memory). As soon as it receives data, it performs all writes for that line and often will overwrite it completely. As a result, the data cache unnecessarily fetches data only to overwrite it shortly after. Often these write buffers are large in size and also trash the data cache.\n\nCommon optimizations [41] coalesce writes to form full cache line writes, avoid unnecessary data fetches and achieve significant reduction in memory bandwidth. In addition, when the written memory buffer is large, we can also avoid thrashing the data cache by bypassing allocation.\n\nWe have implemented a simple mechanism to detect write streaming access patterns and enable coalescing and bypassing. The mechanism attaches to the data cache and analyses incoming write requests. When the number of sequential writes reaches a first threshold, it enables write coalescing and when a second threshold is reached, in addition, the cache will bypass allocation for the writes in the stream.\n\n\nCache Maintenance Operations.\n\nTypically, the contents of the cache are handled by the coherence protocol. For most userlevel code, caches are invisible. This greatly simplifies programming and ensures software portability. However, when interfacing with devices or persistent memory, the effect of caching becomes visible to the programmer. In such cases, a user might have to trigger a writeback which propagates all the way to the device or the persistent memory. In other cases, a cache invalidation will ensure that a subsequent load will fetch the newest version of the data from a buffer of the main memory.\n\nCache maintenance operations (CMOs) are now supported in gem5 in a way that can deal with arbitrary cache hierarchies. An operation can either clean and/or invalidate a cache line. A clean operation will find the dirty copy and trigger a writeback and an invalidate operation will find all copies of the cache line and invalidate them and the combined operation will perform both actions. The effects of CMOs are defined with reference to a configurable point in the system. For example, a clean and invalidate sent to the point-of-coherence will find all copies of the block above the point-of-coherence, invalidate them, and if any of them is dirty also trigger a writeback to the memory below the point-of-coherence.\n\n\nSnooping Support and Snoop\n\nFiltering. In large systems, broadcasting snoop messages is slow, they cost energy and time, and they can cause significant scalability bottlenecks. Therefore, snoop filters (also called directories) are used to keep track of which caches or nodes are keeping a copy of a particular cached line. We added a snoop filter to gem5 which is a distributed component that keeps track of the coherence state of all lines cached \"above\" it, similar to the AMD Probe Filter [25]. For example, if the snoop filter sits next to the L3 cache and is accessed before the L3, it knows about all lines in the L2 and L1 caches that are connected to that L3 cache.\n\nUsing the snoop filter, we can reduce the amount of messages from O(N 2 ) to O(N ) with N concurrent requestors in the system. Modeling the snoop filter separately from the cache allows us to use different organizations for the filter and the cache, and distributing area between shared caches vs coherence tracking filters. We also model the effect of limited filter capacity through backinvalidations that remove cache entries if the filter becomes full for more realistic cache performance metrics.]s Finally, the more centralized coherence tracking in the filter allows for better checking of correct functionality of the distributed coherence protocol in the classic memory system.\n\n\nCache Replacement Policies and New\n\nCompression Support 39\n\nIn general, hardware components frequently contain tables whose contents are managed by replacement policies. In gem5, multiple replacement policies are available, which can be paired with any table-like structure, allowing users to carry out research on the effects of different replacement algorithms in various hardware units. Currently, gem5 supports 13 different replacement policies including several standard policies such as LRU, FIFO, and Pseudo-LRU, and various RRIPs [39]. These policies can be used with both the classic caches and Ruby caches. This list is easily expandable to cover schemes with greater complexity as well.\n\nThe simulator also supports cache compression by providing several state-of-the-art compression algorithms [64] and a default compression-oriented cache organization. This basic organization scheme is derived from accepted approaches in the literature: adjacent blocks share a tag entry, yet they can only be co-allocated in a data entry if each block compresses to at least a specific percentage of the cache line size. Currently, only BDI [56], C-Pack [24], and FPCD [6] are implemented, but the modularity of the compressors allows for simple implementation of other dictionary-based and pattern-based compression algorithms.\n\nThese replacement policies are a great example of gem5's modularity and how code developed for one purpose can be reused in many other parts of the simulator. Current and future development is planned to increase the use of these flexible replacement policies. For instance, we are planning to extend the TLB and other cache structures beyond the data caches to take advantage of the same replacement policies. Although the aforementioned cache compression policies have only been applied to the classic caches, we are planning to use the same modular code to enable cache compression for the Ruby caches as well.\n\n\nRuby Cache Model Improvements\n\nThe Ruby cache model, originally from the GEMS simulator [50], is one of the key differentiating features of gem5. The domain-specific language SLICC allows users to define new coherence protocols with high fidelity. In mainline gem5, there are now 12 unique protocols including GPU-specific protocols, region-coherence protocols [58], research protocols like token coherence [49], and teaching protocols [52].\n\nWhen gem5 was first released, Ruby had just been integrated into the project. In the nine years since, Ruby and the SLICC protocols have become much more deeply integrated into the general gem5 memory system. Today, Ruby shares the same replacement protocols (Section 2.11), the same port system to send requests into and out of the cache system, and the same flexible DRAM controller models (Section 2.9).\n\nLooking forward, we will be further unifying the Ruby and classic cache models. Our goal is to one day have a unified cache model which has the composability and speed of the classic caches and the flexibility and fidelity of SLICC protocols. 39 By Daniel Rodrigues Carvalho 2.12.1 General Improvements 40 . Ruby now supports state checkpointing and restoration with warm cache. This enables running simulations from regions of interest, rather than having to start fresh every time. To enable checkpoints, we support accessing the memory system functionally i.e. without any notion of time or events. The absence of timed events allows much higher simulation speeds. Additionally, a new three level coherence protocol (MESI_Three_Level) has been added to gem5. For simplicity, this protocol was built on top of a prior two level protocol by adding an \"zero level\" (L0) cache at the CPU cores. At the L0, the protocol has separate caches for instructions and data. The L1 and the L2 caches are unified and do not distinguish between instructions and data. The L0 and L1 caches are private to each CPU core while the L2 is shared across either all cores or a subset. 41 . Until recently, configurations combining Ruby and multicore Arm systems were not properly supported. We have revamped the MOESI_CMP_directory protocol and made it the default when building gem5 for Arm. Several issues that resulted in protocol deadlocks (especially when scaling up to many-core configurations) were fixed. Other fixes include support for functional accesses, DMA bugs, and improved modeling of cache and directory latencies. Additionally, support for load-locked/store-conditional (LL/SC) operations was added to the MESI_Three_Level protocol, which enables it to be used with Arm as well.\n\n\nArm Support in Ruby Coherence Protocols\n\n\nGarnet Network Model 42\n\nThe interconnection system within gem5 is modeled in various levels of detail and provides extensive flexibility to model a variety of modern systems. The interconnect models are present within the cache-coherent Ruby memory system of gem5 (currently, Garnet cannot be used with the classic caches). It provides the ability to create arbitrary network topologies including both homogeneous and heterogeneous systems.\n\nThere are two major variants of network models available within the Ruby memory system today: simple and Garnet. The simple network models the routers, links, and the latencies involved with low fidelity. This is appropriate for simulations that can sacrifice detailed interconnection network modeling for faster simulation. The Garnet model adds detailed router microarchitecture with cycle-level buffering, resource contention, and flow control mechanisms [3]. This model is suitable for studies that focus on interconnection units and data flow patterns.\n\nCurrently, gem5 implements an upgraded Garnet 2.0 model which provides custom routing algorithms, routers and links that support heterogeneous latencies, and standalone network simulation support. These features allow detailed studies of on-chip networks as well as support for highly flexible topologies. Garnet is moving to version 3.0 with the release of HeteroGarnet. HeteroGarnet will improve Garnet by supporting modern heterogeneous systems such as 2.5D integration systems, MCM based architectures, and futuristic interconnect designs such as optical networks [17]. 40  We are also working to include support for recent work on routerless NoCs [7,47].\n\n\nGPU Compute Model 43\n\nGPUs have become an important part of the system design for high-performance computing, machine learning, and many other workloads. Thus, we have integrated a compute-based GPU model into gem5 [30].\n\n2.14.1 Autonomous Data-Race-Free GPU Tester 44 . The Ruby coherence protocol tester is designed for CPU-like memory systems that implement relatively strong memory consistency models (e.g., TSO) and hardware-based coherence protocols (e.g., MESI). In such systems, once a processor sends a request to memory, the request appears globally to the rest of the system. Without knowing implementation details of target memory systems, the tester can rely on the issuing order of reads and writes to determine the current state of shared memory. However, existing GPU memory systems are often based on weaker consistency models (e.g., sequential consistency for data-race-free programs) and implement softwaredirected cache coherence protocols (e.g., the VIPER Ruby protocol which requires explicit cache flushes and invalidations from software to maintain cache coherence). The order in which reads and writes appear globally can be different from the order they are issued from GPU cores. Therefore, the previous CPU-centric Ruby tester is not applicable to testing GPU memory systems.\n\nThe gem5 simulator currently supports an autonomous random data-race-free testing framework to validate GPU memory systems. The tester works by randomly generating and injecting sequences of data-race-free reads and writes that are synchronized by proper atomic operations and memory fences to a target a specific memory system. By maintaining the data-race freedom of all generated sequences, the tester is able to validate responses from the system under test. The tester is also able to periodically check for forward progress of the system and report possible deadlock and livelock. Once encountering a failure, the tester generates an event log that captures only memory transactions related to the failure, which significantly eases the debugging process. Ta et al. show how the tester effectively detected bugs in the implementation of VIPER protocol in gem5 [69].\n\n\nRuntime Power Modeling and DVFS Support 45\n\nVirtually all processing today needs to consider not just aspects of performance, but also that of energy and power consumption. Many systems are constrained by power or thermal conditions (mobile devices, boosting of desktop systems) or need to operate as energy efficiently as possible (in HPC and data centers). We have added support to gem5 to model power-relevant silicon structures: voltage and frequency domains. We have also added a model for enabling DVFS (dynamic voltage and frequency scaling) and support devices that allow for DVFS control by operating system governors and autonomous control. Finally, we added an activity-based power modeling framework that measures key microarchitectural events, 43 by Anthony Gutierrez 44 by Tuan Ta 45 by Stephan Diestelhorst voltage, and frequency and allows detailed aggregation of power consumed over time similar to McPAT [44,45]. Spiliopoulos et al. show that gem5's DVFS support can be integrated into both Linux and Android operating systems to provide end-to-end power and energy modeling [67]. Additionally, these model have been extended to include power consumption caused by the activity of the SVE vector units.\n\n\nTiming-agnostic models: VirtIO and NoMali 46\n\nWith the introduction of KVM support, it quickly became apparent that some of gem5's device models, such as the IDE disk interface and the UART, were not efficient in a virtualized environment. We also realized that these devices do not provide any relevant timing information in most experimental setups. In fact, they are not even representative of the devices found in modern computer systems. Similarly, when simulating mobile workload, such as Android, the GPU has a large impact on system behavior. While it is possible to simulate an Android system without a GPU (the system resorts to software rendering), such simulations are wildly inaccurate for many CPU-side metrics [26]. These problems lead to the development of a new class of device timing-agnostic models in gem5. For block devices, pass through file systems, and serial ports, we developed a set of VirtIO-based device models. These models only provide limited memory system interactions and no timing. To solve the software rendering issue, we introduced a NoMali stub GPU model [26] that exposes the same register interface as an Arm Mali T-series and early G-series of GPUs. This makes it possible to use a full production GPU driver stack in a simulated system without simulating the actual GPU.\n\n\ndist-gem5: Support for Distributed System\n\nModeling 47\n\nDesigning distributed systems requires careful analysis of the complex interplay between processor microarchitecture, memory subsystem, inter-node network, and software layers. However, simulating a multi-node computer system using one gem5 process is very time consuming. Responding to the need for efficient simulation of multi-node computer systems, dist-gem5 enables parallel and distributed simulation of a hierarchical compute cluster using multiple gem5 processes. The dist-gem5 configuration script spawns several gem5 processes, in which each of them can simulate one or several computer systems (i.e., compute node) or a scale-out network topology (i.e., network node). Then, dist-gem5 automatically launches these gem5 processes, forwards simulated packets between them through TCP connections, and performs quantum-based synchronization to ensure correct and deterministic simulation [8,9]. More specifically, dist-gem5 consists of the following three main components:\n\nPacket forwarding: dist-gem5 establishes a TCP socket connection between each compute node and a corresponding port of the network node to (i) forward simulated packets between compute nodes through the simulated network topology and (ii) exchange synchronization messages. Within each gem5 process, dist-gem5 46 By Andreas Sandberg 47 by Mohammad Alian launches a receiver thread that runs in parallel with the main simulation thread to free the main simulation thread from polling on the TCP connections.\n\nSynchronization: In addition to network topology simulation, the network node implements a synchronization barrier for performing quantum-based synchronization. The dist-gem5 framework schedules a global sync event every quantum in each gem5 process that sends out a \"sync request\" message through the TCP connection to the network node and waits for the reception of a \"sync ack\" to start the next quantum simulation.\n\nDistributed checkpointing: dist-gem5 supports distributed checkpointing by capturing the external inter-gem5 process states including the in-flight packets inside the network node. To ensure that no in-flight message exists between gem5 processes when the distributed checkpoint is taken, dist-gem5 only initiates checkpoints at a periodic global sync event.\n\n\nSystemC Integration\n\nWhile the open and configurable architecture of gem5 is of particular interest in academia, one of industry's main tools for virtual prototyping is SystemC Transaction Level Modeling (TLM) [1]. Many hardware vendors provide SystemC TLM models of their IP and there are tools, such as Synopsys Platform Architect 48 , that assist in building a virtual system and analyzing it. Also, many research projects use SystemC TLM, as they benefit from the rich ecosystem of accurate off-the-shelf models of real hardware components. However, there is a lack of accurate and modifiable CPU models in SystemC since the model providers want to protect their IP. Thus, we have taken steps to make gem5 and SystemC models compatible so that researchers can construct systems using models from both frameworks at the same time.\n\n2.18.1 gem5 to SystemC Bridge 49 . SystemC TLM and gem5 were developed around the same time and are based on similar underlying ideas. As a consequence, the hardware model used by TLM is surprisingly close to the model of gem5. In both approaches, the system is organized as a set of components that communicate by exchanging data packets via a well defined protocol. The protocol abstracts over the physical connection wires that would be used in a register transfer level (RTL) simulation and thereby significantly increases simulation speed. In gem5, components use requestor and responder ports to communicate to other components, whereas in SystemC TLM, connections are established via initiator and target sockets. Also, the three protocols atomic, timing and functional provided by gem5 find their equivalent in the blocking, non-blocking and debug protocols of TLM. The major difference in both protocols is the treatment of backpressure, which is implemented by a retry phase in gem5 and with the exclusion rule of TLM.\n\nThe similarity of the two approaches enabled us to create a light-weight compatibility layer. In our approach, co-simulation is achieved by hosting the gem5 simulation on top of a SystemC simulation. For this, we replaced the gem5 discrete event kernel with a SystemC process that is managed by the SystemC kernel. 2.18.2 SystemC in gem5 50 . Alternatively, gem5 also has its own built in SystemC kernel and TLM implementation, and can run models natively as long as they are recompiled with gem5's Sys-temC header files. These models can then use gem5's configuration mechanism and be controlled from Python, and, by using modified versions of the bridges developed to run gem5 within a SystemC simulation, TLM sockets can be connected to gem5's native ports. This approach integrates models into gem5 more cleanly and fully since they are now first class gem5 models with access to all of gem5's APIs. Existing models and c_main implementations can generally be used as-is without any source level modifications; they just need to be recompiled against gem5's SystemC headers and linked into a gem5 binary.\n\nWhile some parts of gem5's SystemC implementation are taken from the open source reference implementation (most of the data structure library and TLM), the core implementation is new and based off of the SystemC standard. This means that code which depends on nonstandard features, behaviors, and implementation specific details of the reference implementation may not compile or work properly within gem5. That said, gem5's SystemC kernel passes almost all of the reference implementation's test suite. The few exceptions are tests that are broken, tests that explicitly check for implementation specific behavior, or tests for deprecated and undocumented features.\n\n\nSystem Call Emulation Mode Improvements 51\n\nSystem call emulation mode (SE-mode) allows gem5 to execute usermode binaries without executing the kernel-mode system calls of a real operating system. Basic functionality existed in the original gem5 release [19], but major improvements have been made in the 50 By Gabriel Black 51 by Brandon Potter past few years. Recent additions improve the usability and increase the variety of workloads which may run in S-mode.\n\n2.19.1 Dynamic Executables. For many years, gem5 supported only statically linked executables. This limitation prevented evaluation of workloads which require dynamic linking and loading. To support these workloads, the SE-mode infrastructure was modified to support dynamic executables using the standard Executable and Linking Format (ELF). At a high level, the internal ELF loader was altered to detect the need for an interpreter-the tool responsible for handling dynamic loaded libraries. When an interpreter is required, the ELF loader will load both the interpreter and the workload into the process address space within the simulator (the guest memory in the simulator, see Figure 3c). The ELF loader will also initialize stack variables to help the interpreter and the workload find each other. With the interpreter in the address space, the workload will delegate lookups (function bindings) to the interpreter which will fixup function call invocation points on behalf of the workload.\n\nThis dynamic executable support can be combined with the virtual file system described below in Section 2.19.3 to enable crossplatform compatibility. With this support, users can run dynamically linked SE-mode binaries compiled for any ISA on any host ISA as long as the dynamic linker, loader, and libraries are present on the host machine.\n\n2.19.2 Threading Library Support. With dynamic executable support, users encounter issues with libraries which depend on pthreads. Many common libraries have a dependency on the pthread library. To meet the dependency, we decided to directly support usage of native threading libraries. To use the native threading libraries, we leverage the dynamic executable support to make standard system libraries like pthreads available to the workload. To use this feature, the user must ensure that enough thread contexts have been allocated in their configuration script to support all threads.\n\nThe threading library support required changes to the SE-mode infrastructure. Specifically, the clone system call required support for many new options and the futex system call required significant work.\n\n\nVirtual File System.\n\nIn SE-mode, many system call implementations rely on functionality provided by the host machine. For example, a workload's invocation of the \"open\" system call will cause the gem5 CPU model to hand control over to the simulator. The SE-mode \"open\" implementation will then call the glibc open function on the host machine (which in-turn uses the host machine's open system call). Effectively, the system call is passed from the simulated process space down to the host machine. In Figure 3c, the \"Syscall Emul\" layer is implemented as a passthrough to the host operating system in many cases.\n\nThere are several reasons to employ passthrough. (1) It avoids reimplementing complicated operating system features.\n\n(2) It promotes code reuse by not specializing the system call implementation for each ISA. (3) It allows the host resources to be utilized directly from the simulated process.\n\nHowever, there are several drawbacks stemming from passthrough as well. (1) It creates API mismatches for system calls which rely on glibc library implementations. Specifically, a system call's options may differ for simulated ISA and the host ISA. (2) It creates ABI mismatches for system calls which directly call into the host system call without interpreting system call parameters. (3) It creates issues when utilizing some host resources. The virtual file system provides a solution for the third drawback, specifically, for filesystem handling. When files are touched by the simulated process, the results of the accesses or modifications passthrough to the host filesystem. For some cases, this causes problems. For example, reading the contents of \"/proc/cpuinfo\" will report back results which differ from the simulated system's configuration. In another example, the workload might try to open \"/dev/thing\" for device access which should be handled by the simulated device, not passed to the host device.\n\nTo obviate these problem, the virtual file system provides a level of indirection to catch filesystem path evaluations and modify them before the passthrough occurs. Any path on the simulator can be redirected to any location on the host similar to mounting volumes in docker. The key:value strings for path redirection can be set via the Python configuration files.\n\n2.19.4 AMD ROCm v1.6. At the time of publication, a specific version of the ROCm software stack can be used with x86 ISA builds and the GPU compute model 2.14. The ROCm v1.6 libraries can be loaded and used on both RHEL6 and Ubuntu 16.04 operating systems. We distribute a set of docker containers and dockerfiles to help users get started using this specific version of ROCm with gem5.\n\n\nTesting in gem5 52\n\nIn order to ensure the quality of gem5, we have continued to improve testing. Testing ensures errors during development are caught and rectified early, prior to release. A good testing infrastructure is essential for open-source projects such as gem5, due frequent contributions, from many individuals, with varying levels of expertise and familiarity with the project. Testing gives assurances that these regular contributions are not breaking key pieces of functionality, thus allowing for a relatively high throughput of changes.\n\nFurthermore, due to gem5's age and size, tests give developers a degree of confidence when undertaking engineering on seldom touched component, thereby improving the productivity of all developers. Good tests and regular testing are thereby critical in ensuring the smooth running of the project both presently and into the future.\n\n2.20. 1 The TestLib Framework. The majority of gem5 tests are run via TestLib, our python-based testing framework. TestLib runs compiled instances of gem5 on specific computer architecture simulations, and verifies that they run as intended. It has been designed with extendibility in-mind, allowing for tests to be easily added as they are required. While powerful, it is important to note that TestLib runs system-level tests, and is therefore not well-suited to testing individual gem5 components.\n\n2.20.2 Unit Tests. In order to test at a finer granularity, unit tests have been developed and incorporated into our testing processes. Unlike our TestLib tests, these unit tests ensure the functionality of 52 by Bobby R. Bruce gem5 classes and functions. Thus, if broken, the source of the bugs can more quickly be determined. Unit Test coverage is improving over time, and will play a greater role in improving stability in future releases of gem5.\n\n2.20.3 Continuous Integration. Via our Gerrit code-review system, we run tests for each submitted patch prior to merging into the gem5 code base. These tests compile gem5 against key ISA targets and run a suite of tests designed to cover all major gem5 components (in practice, all unit tests and a subset of the TestLib tests). This procedure supplements our code review system, thereby reducing the possibility of new contributions introducing bugs.\n\nIn addition to the tests run prior to submission, a larger set of tests are available for more \"in-depth\" testing. These can take several hours to complete execution, and test functionality such as full-system booting. We run these tests regularly to ensure gem5 meets our standards. While these are currently triggered manually, we hope to automatically run these tests nightly and automatically send error reports to the developers.\n\n\nInternal gem5 Improvements and Features\n\nIt is important to recognize not only all of the ground-breaking additions to the models in gem5, but also general improvements to the simulation infrastructure. Although these improvements do not always result in new research findings, they are a key enabling factor for the research conducted using gem5.\n\nThe simulator core of gem5 provides support for event-driven execution, statistics, and many other important functions. These parts of the simulator are some of the most stable components, and, as part of the gem5-20 release and in the subsequent releases, we will be defining stable APIs for these interfaces. By making these interfaces stable APIs, it will facilitate long-term support for integrating other simulators (e.g., SystemC as discussed in Section 2. 18 and SST) and projects that build off of gem5 (e.g., gem5-gpu [59], gem5-aladdin [65], gem5-graphics [29], and many others.) 2.21.1 HDF5 Support 53 . A major change in the latest gem5 release is the new statistics API. While the driver for this API was to improve support for hierarchical statistics formats like HDF5 [71], there are other more tangible benefits as well. Unlike the old API where all statistics live in the same namespace, the new API introduces a notion of statistics groups. In most typical use cases, statistics are bound to the current SimObject's group, which is then bound to its parent by the runtime. This ensures that there is a tree of statistics groups that match the SimObject graph. However, groups are not limited to SimObject. Behind the scenes, this reduces the amount of boiler plate code when defining statistics and makes the code far less error prone. The new API also brings benefits to simulation scripts. A feature many users have requested in the past has been the ability to dump statistics for a subset of the object graph. This is now possible by passing a SimObject to the stat dump call, which limits the statistics dump to that subtree of the graph.\n\nWith the new statistics API in place, it became possible to support hierarchical data formats like HDF5. Unlike gem5's traditional text-based statistics files, HDF5 stores data in a binary file format that resembles a file system. Unlike the traditional text files, HDF5 53 by Andreas Sandberg has a rich ecosystem of tools and official bindings for many popular languages, including Python and R. In addition to making analysis easier, the HDF5 backend is optimized for storing time series data. HDF5 files internally store data as N-dimensional matrices. In gem5's implementation, we use one dimension for time and the remaining dimensions for the statistic we want to represent. For example, a scalar statistic is represented as a 1-dimensional vector. When analyzing such series using Python, the HDF5 backend imports such data sets as a standard NumPy array that can be used in common data analysis and visualization flows. The additional data needed to support filesystem-like structures inside the stat files introduces some storage overheads. However, these are quickly amortized when sampling statistics since the incremental storage needed for every sample is orders of magnitude smaller than the traditional text-based statistics format.\n\n2.21.2 Python 3 54 . One of the main features which separates gem5 from other architectural simulators is its robust support for scripting. The main interface to configuring and running gem5 simulations is Python scripts. While the fundamental design has not changed, there have been many changes to the underlying implementation over the past years. The original implementation frequently suffered from bugs in the code generated by SWIG and usability was hampered by poor adherence to modern standards in SWIG's C++ parser. The move to PyBind11 [2] greatly improved the reliability of the bindings by removing the need for a separate C++ parser, and made it easier to expose new functionality to Python in a reliable and type-safe manner.\n\nThe migration from SWIG to PyBind11 also provided a good starting point for the more ambitious project of making gem5 Python 3 compatible, which is now complete. This has not had a direct impact on the gem5 feature set yet, but it ensures that the simulator will continue to run on Linux distributions that are released in 2020 and onwards. However, it does enable exciting improvements under the hood. A couple of good examples are type annotations that can be used to enable better static code analysis and greatly improved string formatting. Our ambition is to completely phase out Python 2 support in the near future to benefit from these new features. 55 . The difficulties of writing a complex device/hw model within gem5 is that your model needs to be able to work and be representative of the simulated hardware in both atomic and timing mode.\n\n\nAsynchronous Modeling in gem5\n\nFor simple devices which only respond to requests, this is usually not a concern. The situation gets worse when the device can send requests and responses or has DMA capabilities. A method generating and forwarding a read packet needs to differentiate between atomic and timing behavior by handling the first with a blocking operation (the read returns the value as soon as the forwarding method returns) and the second with a non-blocking call: the value will be returned later in time. The situation becomes dramatic in timing mode if multiple sequential DMAs are stacked so that any read operation depends on previous ones; this is the case for page table walks for example. 54 by Andreas Sandberg and Giacomo Travaglini 55 by Giacomo Travaglini This software design problem has been elegantly solved using coroutines. Coroutines allow you to execute your task, checkpoint it, and resume it later from where you stopped. To be more specific to our use case, you can tag your DMA packets with the coroutine itself, and you could resume the coroutine once the device receives the read response.\n\nWhile waiting for coroutines to be fully supported in C++20, we've implemented a coroutine library within gem5 that allows developers to use coroutines to generate asynchronous models. The coroutine class is built on top of a \"Fiber\" class, which was a pre-existing symmetric coroutine implementation, and it provides boost-like APIs to the user.\n\nAt the moment coroutines are used by the SMMUv3 model developed and the GICv3 ITS model (Interrupt Translation Service). There are many other use cases for this API in other gem5 models, and we are planning on updating those models in the future.\n\n\nUpdating Guest\u2194Simulator APIs 56\n\nIt is sometimes helpful or necessary for gem5 to interact with the software running inside the simulation in some non-architectural way. In Figure 3b, the application under test may want to call a function in the gem5 simulator or vice versa. For instance, gem5 might want to intervene and adjust the guest's behavior to skip over some uninteresting function, like one that sets all of physical memory to zeroes, or which uses a loop to measure CPU speed or implement a delay. It might also want to monitor guest behavior to know when something important like a kernel panic has happened. Guest software might also want to purposefully request some behavior from gem5 such as requesting that gem5 exit, recording the current value of the simulation statistics, taking a checkpoint, and reading or writing a file on the host, etc.\n\nOne way the simulator can react to guest behavior is by executing a callback when the guest executes a certain program counter (PC). The PC would generally come from the table of symbols loaded with, for instance, an OS kernel, and would let gem5 detect when certain kernel functions were about to execute. This mechanism has been improved to make it easier for different types of CPU models to implement. These include the CPU models which use KVM and the ARM Fast Model based CPUs.\n\nThe gem5\u2194guest interaction might also be triggered by the application running on the guest itself. One common way to use these mechanisms from within the guest is to use the \"m5\" utility which parses command line arguments and then triggers whatever gem5 behavior was requested. This utility is in the process of being revamped so that support is consistent across ISAs, along with many other improvements including supporting all the back end mechanisms described above.\n\nBecause it is not possible to universally predict what PCs correspond to requests from the guest, a different signaling mechanism is necessary. Traditional gem5 CPU models redefined unused opcodes from the target ISA for that purpose. However, this mechanism is not universal. For instance, when using the KVM-based CPU model instructions behave like they would on real hardware since they are running on real hardware. In these special cases, we require other APIs. 56   Finally, the gem5 simulator code must be able to decipher the calling convention of guest code. Historically this was done in several different ways. These were somewhat redundant, inconsistent, incomplete, and difficult to maintain.\n\nWe have implemented a new system of templates to pull apart a function's signature and marshal arguments from within the guest automatically. Those arguments are then used to call an arbitrary function in gem5. Once the function finishes, it can optionally return a value into the guest if it wants to override or just observe guest behavior.\n\nFor instance, suppose we had the function shown in Figure 6a. If we wanted to call it from within the guest using calling convention AAPCS32, once gem5 had detected the call (as described above), it could call foo() with arguments from the guest as shown in Figure 6b.\n\n\nCONCLUSION\n\nOver the past nine years, the gem5 simulator has become an increasingly important tool in the computer architecture research community. This paper describes the significant strides taken to improve this community-developed infrastructure. Looking forward, with the continued support of the broader computer architecture research community, the gem5 simulator will continue to mature and its use will continue to grow. The community will continue to add new features, add new models, and increase the stability of the simulator.\n\nThe overarching goal of the future development of the gem5 simulator is to increase its user base by expanding its use both within the computer architecture community and in other computer systems research fields. To accomplish this goal, we will be providing \"known-good\" configurations and other tools to enable reproducible computer system simulation. We will also provide more user support to broaden the gem5 community through improved documentation and learning materials. Through these efforts, we look forward to continue to grow and improve the gem5 simulation infrastructure through the next 20 years of computer system development.\n\nFigure 1 :\n1Number of gem5 citations, commits and contributors from 2011 to May 2020.\n\nFigure 3 :\n3A comparison of gem5's different modes of operation.\n\nFigure 4 :\n4An overview of gem5's architecture. Its modular components allow any of each model type to be used in system configuration via Python scripts. Users can choose the fidelity of the memory system, CPU model, etc. while being able to select any ISA, devices, etc. The port interface allows any memory component to be connected to any other memory component as specified by the Python script. Details of each of these simulator components are discussed in Section 1.3\n\n\nFirmware Support 26 . Trusted Firmware (TF-A) is Arm's reference implementation of Secure World software for Aprofile architectures. It enables Secure Boot flow models, and provides implementations for the Secure Monitor executing at Exception Level 3 (EL3) as well as for several Arm low-level software interface standards, including System Control and Management Interface (SCMI) driver for accessing System Control Processors (SCP), Power State Coordination Interface (PSCI) library support for power management, and Secure Monitor Call (SMC) handling.\n\nFigure 5 :\n5A set of transactors further enables communication between the Possible scenarios for binding gem5 and SystemC. two simulation domains by translating between the two protocols as is shown in Figure 5. Menard et al. documented our approach and showed that the transaction between gem5 and TLM only introduces a low overhead of about 8% [51]. The source code as well as basic usage examples can be found in util/tlm of the gem5 repository.\n\nFigure 6 :\n6Example use of new Guest\u2194Simulator APIs\n\n\nby Andreas Sandberg 30 by Radhika Jagtap, Matthias Jung, Stephan Diestelhorst, Andreas Hansson, Thomas Grass, and Norbert Wehn\nhttps://gem5.googlesource.com/ 9 https://gem5-review.googlesource.com/ 10 https://gem5.googlesource.com/public/gem5-website 11 https://gem5.atlassian.net/\nhttp://www.gem5.org/documentation/learning_gem5/introduction/ 19 https://www.youtube.com/channel/UCCpCGEj_835WYmbB0g96lZw 20 By Alec Roelke\nby Nikos Nikoleris\nhttps://www.synopsys.com/verification/virtual-prototyping/platformarchitect.html 49 By Christian Menard, Matthias Jung, Abdul Mutaal Ahmad, and Jeronimo Castrillon\nACKNOWLEDGEMENTSThe development of gem5 is community-driven and distributed. The contributions to the gem5 community go beyond just the source code, and many people who have contributed to the broader gem5 community are not acknowledged here.We would like to specially acknowledge the late Nathan Binkert. Nate was a driving force behind the creation of gem5 and without his vision and his dedication to code quality this open-source community infrastructure would not be the success that it is today.The gem5 project management committee consists of Bradford Beckmann, Gabriel Black, Anthony Gutierrez, Jason Lowe-Power (chair), Steven Reinhardt, Ali Saidi, Andreas Sandberg, Matthew Sinclair, Giacomo Travaglini, and David Wood. Previous members include Nathan Binkert, and Andreas Hansson. The project management committee manages the administration of the project and ensures that the gem5 community runs smoothly.This work is supported in part by the National Science Foundation (CNS-1925724, CNS-1925485, CNS-1850566, and many others) and Brookhaven National Laboratory. Google has donated resources to host gem5's codes, code review, continuous integration, and other web-based resources.This work was partially completed with funding from the European Union's Horizon 2020 research and innovation programme under project Mont-Blanc 2020, grant agreement 779877.We\nIEEE Standard for Standard SystemC Language Reference Manual. 10.1109/IEEESTD.2012.6134619Revision of IEEE Std 1666-2005. 2012. IEEE Standard for Standard SystemC Language Reference Manual. IEEE Std 1666-2011 (Revision of IEEE Std 1666-2005) (Jan 2012). https://doi.org/10.1109/ IEEESTD.2012.6134619\n\nGARNET: A detailed on-chip network model inside a full-system simulator. Niket Agarwal, Tushar Krishna, Li-Shiuan Peh, Niraj K Jha, Performance Analysis of Systems and Software. Niket Agarwal, Tushar Krishna, Li-Shiuan Peh, and Niraj K Jha. 2009. GARNET: A detailed on-chip network model inside a full-system simulator. In Performance Analysis of Systems and Software, 2009. ISPASS 2009. IEEE International Symposium on. IEEE, 33-42.\n\nx86 Computer Architecture Simulators: A Comparative Study. Ayaz Akram, Lina Sawalha, IEEE 34th International Conference on Computer Design (ICCD). IEEEAyaz Akram and Lina Sawalha. 2016. x86 Computer Architecture Simulators: A Comparative Study. In IEEE 34th International Conference on Computer Design (ICCD). IEEE, 638-645.\n\nBenchmarking and Simulation of High Performance Computer Systems (PMBS). Ayaz Akram, Lina Sawalha, IEEE/ACM Performance Modeling. IEEEValidation of the gem5 Simulator for x86 ArchitecturesAyaz Akram and Lina Sawalha. 2019. Validation of the gem5 Simulator for x86 Architectures. In 2019 IEEE/ACM Performance Modeling, Benchmarking and Simulation of High Performance Computer Systems (PMBS). IEEE, 53-58.\n\nOpportunistic compression for direct-mapped DRAM caches. Rajat Alaa R Alameldeen, Agarwal, Proceedings of the International Symposium on Memory Systems. the International Symposium on Memory SystemsACMAlaa R Alameldeen and Rajat Agarwal. 2018. Opportunistic compression for direct-mapped DRAM caches. In Proceedings of the International Symposium on Memory Systems. ACM, 129-136.\n\nRouterless Network-on-Chip. Fawaz Alazemi, Arash Azizimazreah, Bella Bose, Lizhong Chen, 10.1109/HPCA.2018.00049IEEE International Symposium on High Performance Computer Architecture, HPCA 2018. Vienna, AustriaIEEE Computer SocietyFawaz Alazemi, Arash AziziMazreah, Bella Bose, and Lizhong Chen. 2018. Router- less Network-on-Chip. In IEEE International Symposium on High Performance Computer Architecture, HPCA 2018, Vienna, Austria, February 24-28, 2018. IEEE Computer Society, 492-503. https://doi.org/10.1109/HPCA.2018.00049\n\ndist-gem5: Distributed Simulation of Computer Clusters. M Alian, U Darbaz, G Dozsa, S Diestelhorst, D Kim, N S Kim, 10.1109/ISPASS.2017.7975287IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). M. Alian, U. Darbaz, G. Dozsa, S. Diestelhorst, D. Kim, and N. S. Kim. 2017. dist-gem5: Distributed Simulation of Computer Clusters. In IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). 153-162. https://doi.org/10.1109/ISPASS.2017.7975287\n\npd-gem5: Simulation Infrastructure for Parallel/Distributed Computer Systems. M Alian, D Kim, N. Sung Kim, 10.1109/LCA.2015.2438295IEEE Computer Architecture Letters. 01M. Alian, D. Kim, and N. Sung Kim. 2016. pd-gem5: Simulation Infrastructure for Parallel/Distributed Computer Systems. IEEE Computer Architecture Letters 01 (jan 2016), 41-44. https://doi.org/10.1109/LCA.2015.2438295\n\nTiago Alves, Don Felton, TrustZone: Integrated Hardware and Software Security. Information Quarterly. Tiago Alves and Don Felton. 2004. TrustZone: Integrated Hardware and Software Security. Information Quarterly (2004), 18-24.\n\nAMD Graphics Core Next (GCN) Architecture. Amd , AMD. 2012. AMD Graphics Core Next (GCN) Architecture. https://www. techpowerup.com/gpu-specs/docs/amd-gcn1-architecture.pdf.\n\nGraphics Core Next Architecture. Amd , AMD. 2016. Graphics Core Next Architecture, Generation 3. http: //developer.amd.com/wordpress/media/2013/12/AMD_GCN3_Instruction_Set_\n\nArm\u00c2\u0151 Architecture Reference Manual: Armv8, for Armv8-A architecture profile (f.b ed.). Arm Ltd. Arm Ltd, Arm Ltd. 2020. Arm\u00c2\u0151 Architecture Reference Manual: Armv8, for Armv8-A architecture profile (f.b ed.). Arm Ltd. https://developer.arm.com/docs/ddi0487/fb/ arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile\n\nSimulator Calibration for Accelerator-Rich Architecture Studies. Mochamad Asri, Ardavan Pedram, K Lizy, Andreas John, Gerstlauer, International Conference on Embedded Computer Systems: Architectures, Modeling and Simulation (SAMOS),. IEEE. Mochamad Asri, Ardavan Pedram, Lizy K John, and Andreas Gerstlauer. 2016. Simulator Calibration for Accelerator-Rich Architecture Studies. In International Conference on Embedded Computer Systems: Architectures, Modeling and Simula- tion (SAMOS),. IEEE, 88-95.\n\nThe NAS parallel benchmarks. H David, Eric Bailey, Barszcz, T John, David S Barton, Browning, L Robert, Leonardo Carter, Rod A Dagum, Fatoohi, O Paul, Frederickson, A Thomas, Rob S Lasinski, Schreiber, The International Journal of Supercomputing Applications. 5David H Bailey, Eric Barszcz, John T Barton, David S Browning, Robert L Carter, Leonardo Dagum, Rod A Fatoohi, Paul O Frederickson, Thomas A Lasinski, Rob S Schreiber, et al. 1991. The NAS parallel benchmarks. The International Journal of Supercomputing Applications 5, 3 (1991), 63-73.\n\nScott Beamer, Krste Asanovi\u0107, David Patterson, arXiv:1508.03619The GAP benchmark suite. arXiv preprintScott Beamer, Krste Asanovi\u0107, and David Patterson. 2015. The GAP benchmark suite. arXiv preprint arXiv:1508.03619 (2015).\n\nKite: A Family of Heterogeneous Interposer Topologies Enabled via Accurate Interconnect Modeling. S Bharadwaj, J Yin, B Beckmann, T Krishna, 2020 57th ACM/IEEE Design Automation Conference (DAC). S. Bharadwaj, J. Yin, B. Beckmann, and T. Krishna. 2020. Kite: A Family of Het- erogeneous Interposer Topologies Enabled via Accurate Interconnect Modeling. In 2020 57th ACM/IEEE Design Automation Conference (DAC).\n\nThe PARSEC benchmark suite: Characterization and architectural implications. Christian Bienia, Sanjeev Kumar, Jaswinder Pal Singh, Kai Li, Proceedings of the 17th international conference on Parallel architectures and compilation techniques. the 17th international conference on Parallel architectures and compilation techniquesChristian Bienia, Sanjeev Kumar, Jaswinder Pal Singh, and Kai Li. 2008. The PARSEC benchmark suite: Characterization and architectural implications. In Proceedings of the 17th international conference on Parallel architectures and com- pilation techniques. 72-81.\n\nThe gem5 Simulator. Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh Sardashti, Rathijit Sen, Korey Sewell, Muhammad Shoaib, Nilay Vaish, Mark D Hill, David A Wood, 10.1145/2024716.2024718SIGARCH Comput. Archit. News. 39Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K. Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R. Hower, Tushar Krishna, Somayeh Sardashti, Rathijit Sen, Korey Sewell, Muhammad Shoaib, Nilay Vaish, Mark D. Hill, and David A. Wood. 2011. The gem5 Simulator. SIGARCH Comput. Archit. News 39, 2 (Aug. 2011), 1\u00e2\u0102\u015e7. https://doi.org/10.1145/2024716.2024718\n\nThe M5 Simulator: Modeling Networked Systems. Nathan L Binkert, Ronald G Dreslinski, Lisa R Hsu, Kevin T Lim, Ali G Saidi, Steven K Reinhardt, 10.1109/MM.2006.82IEEE Micro. 264Nathan L. Binkert, Ronald G. Dreslinski, Lisa R. Hsu, Kevin T. Lim, Ali G. Saidi, and Steven K. Reinhardt. 2006. The M5 Simulator: Modeling Networked Systems. IEEE Micro 26, 4 (2006), 52-60. https://doi.org/10.1109/MM.2006.82\n\nJames Bucek, Klaus-Dieter Lange, J\u00e3\u015fakim Von Kistowski, 10.1145/3185768.3185771SPEC CPU2017: Next-Generation Compute Benchmark. ICPE '18: Companion of the 2018 ACM/SPEC International Conference on Performance Engineering. James Bucek, Klaus-Dieter Lange, and J\u00c3\u015fakim von Kistowski. 2018. SPEC CPU2017: Next-Generation Compute Benchmark. ICPE '18: Companion of the 2018 ACM/SPEC International Conference on Performance Engineering, 41-42. https://doi.org/10.1145/3185768.3185771\n\nAccuracy Evaluation of GEM5 Simulator System. Anastasiia Butko, Rafael Garibotti, Luciano Ost, Gilles Sassatelli, IEEE 7th International Workshop on Reconfigurable Communication-centric Systems-on-Chip. York, UKAnastasiia Butko, Rafael Garibotti, Luciano Ost, and Gilles Sassatelli. 2012. Accu- racy Evaluation of GEM5 Simulator System. In IEEE 7th International Workshop on Reconfigurable Communication-centric Systems-on-Chip. York, UK, 1-7.\n\nDRAMPower: Opensource DRAM power & energy estimation tool. Karthik Chandrasekar, Christian Weis, Yonghui Li, Benny Akesson, Omar Naji, Matthias Jung, Norbert Wehn, and Kees GoossensKarthik Chandrasekar, Christian Weis, Yonghui Li, Benny Akesson, Omar Naji, Matthias Jung, Norbert Wehn, and Kees Goossens. 2014. DRAMPower: Open- source DRAM power & energy estimation tool. http://www.drampower.info.\n\nC-pack: A high-performance microprocessor cache compression algorithm. Very Large Scale Integration (VLSI) Systems. Xi Chen, Lei Yang, P Robert, Li Dick, Haris Shang, Lekatsas, IEEE Transactions. 18Xi Chen, Lei Yang, Robert P Dick, Li Shang, and Haris Lekatsas. 2010. C-pack: A high-performance microprocessor cache compression algorithm. Very Large Scale Integration (VLSI) Systems, IEEE Transactions on 18, 8 (2010), 1196-1208.\n\nCache Hierarchy and Memory Subsystem of the AMD Opteron Processor. Pat Conway, Nathan Kalyanasundharam, Gregg Donley, Kevin Lepak, Bill Hughes, 10.1109/MM.2010.31IEEE Micro. 30Pat Conway, Nathan Kalyanasundharam, Gregg Donley, Kevin Lepak, and Bill Hughes. 2010. Cache Hierarchy and Memory Subsystem of the AMD Opteron Processor. IEEE Micro 30, 2 (2010), 16-29. https://doi.org/10.1109/MM.2010.31\n\nNoMali: Simulating a realistic graphics driver stack using a stub GPU. R Jong, A Sandberg, 2016 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS. R. de Jong and A. Sandberg. 2016. NoMali: Simulating a realistic graphics driver stack using a stub GPU. In 2016 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). 255-262.\n\nKVM CPU Model in Syscall Emulation Mode. Alexandru Dutu, John Slice, Second gem5 User Workshop. Alexandru Dutu and John Slice. 2015. KVM CPU Model in Syscall Emulation Mode. In Second gem5 User Workshop.\n\nMicroarchitectural Simulation of In-Order and Out-of-Order ARM Microprocessors with gem5. Damien Fernando A Endo, Henri-Pierre Courouss\u00e9, Charles, Embedded Computer Systems: Architectures, Modeling, and Simulation (SAMOS XIV. 2014 International Conference on. IEEEFernando A Endo, Damien Courouss\u00e9, and Henri-Pierre Charles. 2014. Micro- architectural Simulation of In-Order and Out-of-Order ARM Microprocessors with gem5. In Embedded Computer Systems: Architectures, Modeling, and Simula- tion (SAMOS XIV), 2014 International Conference on. IEEE, 266-273.\n\nEmerald: Graphics Modeling for SoC Systems. A Ayub, Tor M Gubran, Aamodt, 10.1145/3307650.3322221Proceedings of the 46th International Symposium on Computer Architecture. the 46th International Symposium on Computer ArchitecturePhoenix, Arizona; New York, NY, USA, 169\u00e2\u0102\u015e182Association for Computing MachineryISCA \u00e2\u0102\u017919)Ayub A. Gubran and Tor M. Aamodt. 2019. Emerald: Graphics Modeling for SoC Systems. In Proceedings of the 46th International Symposium on Computer Archi- tecture (Phoenix, Arizona) (ISCA \u00e2\u0102\u017919). Association for Computing Machinery, New York, NY, USA, 169\u00e2\u0102\u015e182. https://doi.org/10.1145/3307650.3322221\n\nLost in Abstraction: Pitfalls of Analyzing GPUs at the Intermediate Language Level. Anthony Gutierrez, Bradford M Beckmann, Alexandru Dutu, Joseph Gross, Michael Lebeane, John Kalamatianos, Onur Kayiran, Matthew Poremba, Brandon Potter, Sooraj Puthoor, Matthew D Sinclair, Michael Wyse, Jieming Yin, Xianwei Zhang, Akshay Jain, Timothy Rogers, 10.1109/HPCA.2018.00058Proceedings of 24th IEEE International Symposium on High Performance Computer Architecture (HPCA. 24th IEEE International Symposium on High Performance Computer Architecture (HPCAAnthony Gutierrez, Bradford M. Beckmann, Alexandru Dutu, Joseph Gross, Michael LeBeane, John Kalamatianos, Onur Kayiran, Matthew Poremba, Brandon Potter, Sooraj Puthoor, Matthew D. Sinclair, Michael Wyse, Jieming Yin, Xianwei Zhang, Akshay Jain, and Timothy Rogers. 2018. Lost in Abstraction: Pitfalls of Analyzing GPUs at the Intermediate Language Level. In Proceedings of 24th IEEE International Symposium on High Performance Computer Architecture (HPCA). 608-619. https://doi.org/10.1109/HPCA.2018.00058\n\nSources of Error in Full-System Simulation. Anthony Gutierrez, Joseph Pusdesris, G Ronald, Trevor Dreslinski, Chander Mudge, Sudanthi, D Christopher, Mitchell Emmons, Nigel Hayenga, Paver, IEEE International Symposium on Performance Analysis of Systems and Software. Monterey, CAAnthony Gutierrez, Joseph Pusdesris, Ronald G Dreslinski, Trevor Mudge, Chan- der Sudanthi, Christopher D Emmons, Mitchell Hayenga, and Nigel Paver. 2014. Sources of Error in Full-System Simulation. In IEEE International Symposium on Performance Analysis of Systems and Software. Monterey, CA, 13-22.\n\nSimulating DRAM controllers for future system architecture exploration. A Hansson, N Agarwal, A Kolli, T Wenisch, A N Udipi, IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS. A. Hansson, N. Agarwal, A. Kolli, T. Wenisch, and A. N. Udipi. 2014. Simulating DRAM controllers for future system architecture exploration. In IEEE Interna- tional Symposium on Performance Analysis of Systems and Software (ISPASS). 201-210.\n\nA New Golden Age for Computer Architecture: Domain Specific Hardware/Software Co-Design, Enhanced Security, Open Instruction Sets, and Agile Chip Development. John Hennessy, David Patterson, Turing Award LectureJohn Hennessy and David Patterson. 2018. A New Golden Age for Computer Architecture: Domain Specific Hardware/Software Co-Design, Enhanced Security, Open Instruction Sets, and Agile Chip Development. Turing Award Lecture.\n\nA New Golden Age for Computer Architecture. L John, David A Hennessy, Patterson, 10.1145/3282307Commun. ACM. 62John L. Hennessy and David A. Patterson. 2019. A New Golden Age for Computer Architecture. Commun. ACM 62, 2 (Jan. 2019), 48\u00e2\u0102\u015e60. https://doi.org/10.1145/ 3282307\n\nSPEC CPU2006 benchmark descriptions. L John, Henning, ACM SIGARCH Computer Architecture News. 344John L Henning. 2006. SPEC CPU2006 benchmark descriptions. ACM SIGARCH Computer Architecture News 34, 4 (2006), 1-17.\n\nSST + gem5 = a Scalable Simulation Infrastructure for High Performance Computing. Mingyu Hsieh, Kevin Pedretti, Jie Meng, Ayse Coskun, Michael Levenhagen, Arun Rodrigues, SIMU- TOOLS \u00e2\u0102\u017912Proceedings of the 5th International ICST Conference on Simulation Tools and Techniques. the 5th International ICST Conference on Simulation Tools and TechniquesDesenzano del Garda, Italy; Brussels, BELICSTInstitute for Computer Sciences, Social-Informatics and Telecommunications EngineeringMingyu Hsieh, Kevin Pedretti, Jie Meng, Ayse Coskun, Michael Levenhagen, and Arun Rodrigues. 2012. SST + gem5 = a Scalable Simulation Infrastructure for High Performance Computing. In Proceedings of the 5th International ICST Conference on Simulation Tools and Techniques (Desenzano del Garda, Italy) (SIMU- TOOLS \u00e2\u0102\u017912). ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering), Brussels, BEL, 196\u00e2\u0102\u015e201.\n\nExploring System Performance using Elastic Traces: Fast, Accurate and Portable. Radhika Jagtap, Stephan Diestelhorst, Andreas Hansson, Matthias Jung, Norbert Wehn, IEEE International Conference on Embedded Computer Systems Architectures Modeling and Simulation (SAMOS). Samos Island, GreeceRadhika Jagtap, Stephan Diestelhorst, Andreas Hansson, Matthias Jung, and Norbert Wehn. 2016. Exploring System Performance using Elastic Traces: Fast, Accurate and Portable. In IEEE International Conference on Embedded Computer Systems Architectures Modeling and Simulation (SAMOS), July, 2016, Samos Island, Greece.\n\nIntegrating DRAM Power-Down Modes in gem5 and Quantifying their Impact. Radhika Jagtap, Matthias Jung, Wendy Elsasser, Christian Weis, Andreas Hansson, Norbert Wehn, International Symposium on Memory Systems (MEMSYS17). Radhika Jagtap, Matthias Jung, Wendy Elsasser, Christian Weis, Andreas Hansson, and Norbert Wehn. 2017. Integrating DRAM Power-Down Modes in gem5 and Quantifying their Impact. In International Symposium on Memory Systems (MEMSYS17).\n\nHigh Performance Cache Replacement Using Re-Reference Interval Prediction (RRIP). Aamer Jaleel, Kevin B Theobald, Simon C Steely, Joel Emer, 10.1145/1815961.1815971Proceedings of the 37th Annual International Symposium on Computer Architecture. the 37th Annual International Symposium on Computer ArchitectureSaint-Malo, France; New York, NY, USA, 60\u00e2\u0102\u015e71Association for Computing MachineryISCA \u00e2\u0102\u017910)Aamer Jaleel, Kevin B. Theobald, Simon C. Steely, and Joel Emer. 2010. High Per- formance Cache Replacement Using Re-Reference Interval Prediction (RRIP). In Proceedings of the 37th Annual International Symposium on Computer Architecture (Saint-Malo, France) (ISCA \u00e2\u0102\u017910). Association for Computing Machinery, New York, NY, USA, 60\u00e2\u0102\u015e71. https://doi.org/10.1145/1815961.1815971\n\nDiagSim: Systematically Diagnosing Simulators for Healthy Simulations. Jae-Eon Jo, Gyu-Hyeon Lee, Hanhwi Jang, Jaewon Lee, Mohammadamin Ajdari, Jangwoo Kim, ACM Transactions on Architecture and Code Optimization (TACO). 154Jae-Eon Jo, Gyu-Hyeon Lee, Hanhwi Jang, Jaewon Lee, Mohammadamin Ajdari, and Jangwoo Kim. 2018. DiagSim: Systematically Diagnosing Simulators for Healthy Simulations. ACM Transactions on Architecture and Code Optimization (TACO) 15, 1 (2018), 4.\n\nCache Write Policies and Performance. Norman P Jouppi, 10.1145/173682.165154SIGARCH Comput. Archit. News. 21Norman P. Jouppi. 1993. Cache Write Policies and Performance. SIGARCH Comput. Archit. News 21, 2 (May 1993), 191\u00e2\u0102\u015e201. https://doi.org/10.1145/ 173682.165154\n\nRamulator: A Fast and Extensible DRAM Simulator. Yoongu Kim, Weikun Yang, Onur Mutlu, 10.1109/LCA.2015.2414456IEEE Comput. Archit. Lett. 15Yoongu Kim, Weikun Yang, and Onur Mutlu. 2016. Ramulator: A Fast and Extensible DRAM Simulator. IEEE Comput. Archit. Lett. 15, 1 (Jan. 2016), 45\u00e2\u0102\u015e49. https://doi.org/10.1109/LCA.2015.2414456\n\nEvaluation of the RIKEN Post-K Processor Simulator. Yuetsu Kodama, Tetsuya Odajima, Akira Asato, Mitsuhisa Sato, arXiv:1904.06451Yuetsu Kodama, Tetsuya Odajima, Akira Asato, and Mitsuhisa Sato. 2019. Eval- uation of the RIKEN Post-K Processor Simulator. CoRR abs/1904.06451 (2019). arXiv:1904.06451 http://arxiv.org/abs/1904.06451\n\nMcPAT: An Integrated Power, Area, and Timing Modeling Framework for Multicore and Manycore Architectures. Sheng Li, Jung-Ho Ahn, Richard D Strong, Jay B Brockman, Dean M Tullsen, Norman P Jouppi, 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). Sheng Li, Jung-Ho Ahn, Richard D. Strong, Jay B. Brockman, Dean M. Tullsen, and Norman P. Jouppi. 2009. McPAT: An Integrated Power, Area, and Timing Modeling Framework for Multicore and Manycore Architectures. In 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). 469-480.\n\nThe McPAT Framework for Multicore and Manycore Architectures: Simultaneously Modeling Power, Area, and Timing. Sheng Li, Jung Ho Ahn, Richard D Strong, Jay B Brockman, Dean M Tullsen, Norman P Jouppi, 10.1145/2445572.2445577ACM Transactions on Architecture & Code Optimization. 105Sheng Li, Jung Ho Ahn, Richard D. Strong, Jay B. Brockman, Dean M. Tullsen, and Norman P. Jouppi. 2013. The McPAT Framework for Multicore and Many- core Architectures: Simultaneously Modeling Power, Area, and Timing. ACM Transactions on Architecture & Code Optimization 10, 1, Article 5 (April 2013), 29 pages. https://doi.org/10.1145/2445572.2445577\n\nDRAMsim3: a Cycleaccurate, Thermal-Capable DRAM Simulator. S Li, Z Yang, D Reddy, A Srivastava, B Jacob, IEEE Computer Architecture Letters. S. Li, Z. Yang, D. Reddy, A. Srivastava, and B. Jacob. 2020. DRAMsim3: a Cycle- accurate, Thermal-Capable DRAM Simulator. IEEE Computer Architecture Letters (2020), 1-1.\n\nA Deep Reinforcement Learning Framework for Architectural Exploration: A Routerless NoC Case Study. Ting-Ru Lin, Drew Penney, Massoud Pedram, Lizhong Chen, 10.1109/HPCA47549.2020.00018IEEE International Symposium on High Performance Computer Architecture, HPCA 2020. San Diego, CA, USAIEEETing-Ru Lin, Drew Penney, Massoud Pedram, and Lizhong Chen. 2020. A Deep Reinforcement Learning Framework for Architectural Exploration: A Routerless NoC Case Study. In IEEE International Symposium on High Performance Computer Architecture, HPCA 2020, San Diego, CA, USA, February 22-26, 2020. IEEE, 99-110. https://doi.org/10.1109/HPCA47549.2020.00018\n\ngem5 Horrors and what we can do about it. Jason Lowe-Power, Second gem5 User Workshop with ISCA. Jason Lowe-Power. 2015. gem5 Horrors and what we can do about it. In Second gem5 User Workshop with ISCA 2015.\n\nToken Coherence: Decoupling Performance and Correctness. M K Milo, Mark D Martin, David A Hill, Wood, 10.1145/859618.859640Proceedings of the 30th Annual International Symposium on Computer Architecture. the 30th Annual International Symposium on Computer ArchitectureSan Diego, California; New York, NY, USA, 182\u00e2\u0102\u015e193Association for Computing MachineryISCA \u00e2\u0102\u017903)Milo M. K. Martin, Mark D. Hill, and David A. Wood. 2003. Token Coherence: Decoupling Performance and Correctness. In Proceedings of the 30th Annual International Symposium on Computer Architecture (San Diego, California) (ISCA \u00e2\u0102\u017903). Association for Computing Machinery, New York, NY, USA, 182\u00e2\u0102\u015e193. https://doi.org/10.1145/859618.859640\n\nMultifacet's general execution-driven multiprocessor simulator (GEMS) toolset. M K Milo, Daniel J Martin, Bradford M Sorin, Michael R Beckmann, Min Marty, Alaa R Xu, Kevin E Alameldeen, Mark D Moore, David A Hill, Wood, 10.1145/1105734.1105747SIGARCH Computer Architecture News. 33Milo M. K. Martin, Daniel J. Sorin, Bradford M. Beckmann, Michael R. Marty, Min Xu, Alaa R. Alameldeen, Kevin E. Moore, Mark D. Hill, and David A. Wood. 2005. Multifacet's general execution-driven multiprocessor simulator (GEMS) toolset. SIGARCH Computer Architecture News 33, 4 (2005), 92-99. https://doi. org/10.1145/1105734.1105747\n\nSystem Simulation with gem5 and SystemC: The Keystone for Full Interoperability. Christian Menard, Jeronimo Castrillon, Matthias Jung, Norbert Wehn, 2017 International Conference on Embedded Computer Systems: Architectures, Modeling, and Simulation (SAMOS). Christian Menard, Jeronimo Castrillon, Matthias Jung, and Norbert Wehn. 2017. System Simulation with gem5 and SystemC: The Keystone for Full Interoperabil- ity. In 2017 International Conference on Embedded Computer Systems: Architectures, Modeling, and Simulation (SAMOS). 62-69.\n\n2020. A Primer on Memory Consistency and Cache Coherence. Vijay Nagarajan, Daniel J Sorin, Mark D Hill, David A Wood, 10.2200/S00962ED2V01Y201910CAC049Synthesis Lectures on Computer Architecture. 151Vijay Nagarajan, Daniel J. Sorin, Mark D. Hill, and David A. Wood. 2020. A Primer on Memory Consistency and Cache Coherence. Synthesis Lectures on Computer Architecture 15, 1 (February 2020), 1-294. https://doi.org/10.2200/ S00962ED2V01Y201910CAC049\n\nDirected Statistical Warming through Time Traveling. Nikos Nikoleris, Lieven Eeckhout, Erik Hagersten, Trevor E Carlson, Proceedings of the 52nd. the 52ndNikos Nikoleris, Lieven Eeckhout, Erik Hagersten, and Trevor E. Carlson. 2019. Directed Statistical Warming through Time Traveling. In Proceedings of the 52nd\n\n10.1145/3352460.3358264Annual IEEE/ACM International Symposium on Microarchitecture. Columbus, OH, USAACMAnnual IEEE/ACM International Symposium on Microarchitecture, MICRO 2019, Columbus, OH, USA, October 12-16, 2019. ACM, 1037-1049. https://doi.org/10. 1145/3352460.3358264\n\nCoolSim: Statistical techniques to replace cache warming with efficient, virtualized profiling. Nikos Nikoleris, Andreas Sandberg, Erik Hagersten, Trevor E Carlson, International Conference on Embedded Computer Systems: Architectures, Modeling and Simulation. Walid A. Najjar and Andreas GerstlauerSAMOS 2016, Agios Konstantinos, Samos Island, GreeceNikos Nikoleris, Andreas Sandberg, Erik Hagersten, and Trevor E. Carlson. 2016. CoolSim: Statistical techniques to replace cache warming with efficient, vir- tualized profiling. In International Conference on Embedded Computer Systems: Architectures, Modeling and Simulation, SAMOS 2016, Agios Konstantinos, Samos Island, Greece, July 17-21, 2016, Walid A. Najjar and Andreas Gerstlauer (Eds.).\n\n. 10.1109/SAMOS.2016.7818337IEEE. IEEE, 106-115. https://doi.org/10.1109/SAMOS.2016.7818337\n\nArchitectural simulators considered harmful. Tony Nowatzki, Jaikrishnan Menon, Chen-Han Ho, Karthikeyan Sankaralingam, IEEE Micro. 35Tony Nowatzki, Jaikrishnan Menon, Chen-Han Ho, and Karthikeyan Sankar- alingam. 2015. Architectural simulators considered harmful. IEEE Micro 35, 6 (2015), 4-12.\n\nBase-delta-immediate compression: practical data compression for on-chip caches. Gennady Pekhimenko, Vivek Seshadri, Onur Mutlu, B Phillip, Gibbons, A Michael, Todd C Kozuch, Mowry, Proceedings of the 21st international conference on Parallel architectures and compilation techniques. the 21st international conference on Parallel architectures and compilation techniquesACMGennady Pekhimenko, Vivek Seshadri, Onur Mutlu, Phillip B Gibbons, Michael A Kozuch, and Todd C Mowry. 2012. Base-delta-immediate compression: practical data compression for on-chip caches. In Proceedings of the 21st international conference on Parallel architectures and compilation techniques. ACM, 377-388.\n\nA sneak peek into SVE and VLA programming. Francesco Petrogalli, Arm LtdTechnical ReportFrancesco Petrogalli. 2020. A sneak peek into SVE and VLA programming. Techni- cal Report. Arm Ltd.\n\nHeterogeneous System Coherence for Integrated CPU-GPU Systems. Jason Power, Arkaprava Basu, Junli Gu, Sooraj Puthoor, Bradford M Beckmann, Mark D Hill, Steven K Reinhardt, David A Wood, 10.1145/2540708.2540747MICRO-46Proceedings of the 46th Annual IEEE/ACM International Symposium on Microarchitecture. the 46th Annual IEEE/ACM International Symposium on MicroarchitectureDavis, California; New York, NY, USAACMJason Power, Arkaprava Basu, Junli Gu, Sooraj Puthoor, Bradford M. Beck- mann, Mark D. Hill, Steven K. Reinhardt, and David A. Wood. 2013. Het- erogeneous System Coherence for Integrated CPU-GPU Systems. In Proceed- ings of the 46th Annual IEEE/ACM International Symposium on Microarchi- tecture (Davis, California) (MICRO-46). ACM, New York, NY, USA, 457-467. https://doi.org/10.1145/2540708.2540747\n\nJason Power, Joel Hestness, Marc S Orr, Mark D Hill, David A Wood, 10.1109/LCA.2014.2299539gem5-gpu: A Heterogeneous CPU-GPU Simulator. 14Jason Power, Joel Hestness, Marc S. Orr, Mark D. Hill, and David A. Wood. 2015. gem5-gpu: A Heterogeneous CPU-GPU Simulator. IEEE Comput. Archit. Lett. 14, 1 (2015), 34-36. https://doi.org/10.1109/LCA.2014.2299539\n\nA F Rodrigues, K S Hemmert, B W Barrett, C Kersey, R Oldfield, M Weston, R Risen, J Cook, P Rosenfeld, E Cooper-Balis, B Jacob, 10.1145/1964218.1964225The Structural Simulation Toolkit. SIGMETRICS Perform. 38A. F. Rodrigues, K. S. Hemmert, B. W. Barrett, C. Kersey, R. Oldfield, M. Weston, R. Risen, J. Cook, P. Rosenfeld, E. Cooper-Balis, and B. Jacob. 2011. The Structural Simulation Toolkit. SIGMETRICS Perform. Eval. Rev. 38, 4 (March 2011), 37\u00e2\u0102\u015e42. https://doi.org/10.1145/1964218.1964225\n\nRISC5: Implementing the RISC-V ISA in gem5. Alec Roelke, R Mircea, Stan, Proceedings of Computer Architecture. Computer ArchitectureResearch with RISC-VAlec Roelke and Mircea R. Stan. 2017. RISC5: Implementing the RISC-V ISA in gem5. In Proceedings of Computer Architecture Research with RISC-V.\n\nDRAMSim2: A Cycle Accurate Memory System Simulator. P Rosenfeld, E Cooper-Balis, B Jacob, IEEE Computer Architecture Letters. 10P. Rosenfeld, E. Cooper-Balis, and B. Jacob. 2011. DRAMSim2: A Cycle Accurate Memory System Simulator. IEEE Computer Architecture Letters 10, 1 (2011), 16-19.\n\nFull Speed Ahead: Detailed Architectural Simulation at Near-Native Speed. A Sandberg, N Nikoleris, T E Carlson, E Hagersten, S Kaxiras, D Black-Schaffer, 2015 IEEE International Symposium on Workload Characterization. A. Sandberg, N. Nikoleris, T. E. Carlson, E. Hagersten, S. Kaxiras, and D. Black- Schaffer. 2015. Full Speed Ahead: Detailed Architectural Simulation at Near- Native Speed. In 2015 IEEE International Symposium on Workload Characterization. 183-192.\n\nA primer on compression in the memory hierarchy. Somayeh Sardashti, Angelos Arelakis, Per Stenstr\u00f6m, David A Wood, Synthesis Lectures on Computer Architecture. 10Somayeh Sardashti, Angelos Arelakis, Per Stenstr\u00f6m, and David A Wood. 2015. A primer on compression in the memory hierarchy. Synthesis Lectures on Computer Architecture 10, 5 (2015), 1-86.\n\nCo-designing accelerators and SoC interfaces using gem5-Aladdin. Sophia Yakun, Sam Likun Shao, Vijayalakshmi Xi, Srinivasan, Gu-Yeon, David M Wei, Brooks, 10.1109/MICRO.2016.778375149th Annual IEEE/ACM International Symposium on Microarchitecture. MICRO; Taipei, TaiwanIEEE Computer Society48Yakun Sophia Shao, Sam Likun Xi, Vijayalakshmi Srinivasan, Gu-Yeon Wei, and David M. Brooks. 2016. Co-designing accelerators and SoC interfaces using gem5- Aladdin. In 49th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 2016, Taipei, Taiwan, October 15-19, 2016. IEEE Computer Society, 48:1- 48:12. https://doi.org/10.1109/MICRO.2016.7783751\n\nLive Introspection of Target-Agnostic JIT in Simulation. Boris Shingarov, 10.1145/2811237.2811295Proceedings of the International Workshop on Smalltalk Technologies (IWST). 5:1-5:9. the International Workshop on Smalltalk Technologies (IWST). 5:1-5:9Boris Shingarov. 2015. Live Introspection of Target-Agnostic JIT in Simulation. In Proceedings of the International Workshop on Smalltalk Technologies (IWST). 5:1-5:9. https://doi.org/10.1145/2811237.2811295\n\nIntroducing DVFS-Management in a Full-System Simulator. Vasileios Spiliopoulos, Akash Bagdia, Andreas Hansson, Peter Aldworth, Stefanos Kaxiras, 10.1109/MASCOTS.2013.752013 IEEE 21st International Symposium on Modelling, Analysis and Simulation of Computer and Telecommunication Systems. San Francisco, CA, USAIEEE Computer SocietyVasileios Spiliopoulos, Akash Bagdia, Andreas Hansson, Peter Aldworth, and Ste- fanos Kaxiras. 2013. Introducing DVFS-Management in a Full-System Simulator. In 2013 IEEE 21st International Symposium on Modelling, Analysis and Simulation of Computer and Telecommunication Systems, San Francisco, CA, USA, August 14-16, 2013. IEEE Computer Society, 535-545. https://doi.org/10.1109/MASCOTS. 2013.75\n\nSimulating Multi-Core RISC-V Systems in gem5. Tuan Ta, Lin Cheng, Christopher Batten, Proceedings of Computer Architecture. Computer ArchitectureResearch with RISC-VTuan Ta, Lin Cheng, and Christopher Batten. 2018. Simulating Multi-Core RISC-V Systems in gem5. In Proceedings of Computer Architecture Research with RISC-V.\n\nAutonomous Data-Race-Free GPU Testing. Tuan Ta, Xianwei Zhang, Anthony Gutierrez, Bradford M Beckmann, 10.1109/IISWC47752.2019.9042019IEEE International Symposium on Workload Characterization, IISWC 2019. Orlando, FL, USAIEEETuan Ta, Xianwei Zhang, Anthony Gutierrez, and Bradford M. Beckmann. 2019. Autonomous Data-Race-Free GPU Testing. In IEEE International Symposium on Workload Characterization, IISWC 2019, Orlando, FL, USA, November 3-5, 2019. IEEE, 81-92. https://doi.org/10.1109/IISWC47752.2019.9042019\n\nDependence Graph Model for Accurate Critical Path Analysis on Out-of-Order Processors. Teruo Tanimoto, Takatsugu Ono, Koji Inoue, Journal of Information Processing. 25Teruo Tanimoto, Takatsugu Ono, and Koji Inoue. 2017. Dependence Graph Model for Accurate Critical Path Analysis on Out-of-Order Processors. Journal of Information Processing 25 (2017), 983-992.\n\nHdf The, Group, The HDF5 Library & File Format. The HDF Group. 2020. The HDF5 Library & File Format. https://www.hdfgroup. org/solutions/hdf5/.\n\nHardware-Validated CPU Performance and Energy Modelling. Matthew Walker, Sascha Bischoff, Stephan Diestelhorst, Geoff Merrett, Bashir Al-Hashimi, Performance Analysis of Systems and Software (ISPASS). Matthew Walker, Sascha Bischoff, Stephan Diestelhorst, Geoff Merrett, and Bashir Al-Hashimi. 2018. Hardware-Validated CPU Performance and Energy Modelling. In Performance Analysis of Systems and Software (ISPASS), 2018 IEEE International Symposium on. IEEE, 44-53.\n\nDRAMsim: A Memory System Simulator. David Wang, Brinda Ganesh, Nuengwong Tuaycharoen, Kathleen Baynes, Aamer Jaleel, Bruce Jacob, 10.1145/1105734.1105748SIGARCH Comput. Archit. News. 33David Wang, Brinda Ganesh, Nuengwong Tuaycharoen, Kathleen Baynes, Aamer Jaleel, and Bruce Jacob. 2005. DRAMsim: A Memory System Simulator. SIGARCH Comput. Archit. News 33, 4 (Nov. 2005), 100\u00e2\u0102\u015e107. https://doi.org/10.1145/ 1105734.1105748\n\nThe RISC-V Instruction Set Manual, Volume I: Base User-Level ISA. Andrew Waterman, Yunsup Lee, David A Patterson, Krste Asanovi\u00e4\u011f, UCB/EECS-2011-62EECS Department, University of California, BerkeleyTechnical ReportAndrew Waterman, Yunsup Lee, David A. Patterson, and Krste Asanovi\u00c4\u011e. 2011. The RISC-V Instruction Set Manual, Volume I: Base User-Level ISA. Technical Report UCB/EECS-2011-62. EECS Department, University of California, Berkeley. http://www2.eecs.berkeley.edu/Pubs/TechRpts/2011/EECS-2011-62.html\n", "annotations": {"author": "[{\"end\":128,\"start\":111},{\"end\":148,\"start\":129},{\"end\":160,\"start\":149},{\"end\":176,\"start\":161},{\"end\":192,\"start\":177},{\"end\":210,\"start\":193},{\"end\":226,\"start\":211},{\"end\":241,\"start\":227},{\"end\":260,\"start\":242},{\"end\":272,\"start\":261},{\"end\":286,\"start\":273},{\"end\":301,\"start\":287},{\"end\":328,\"start\":302},{\"end\":349,\"start\":329},{\"end\":363,\"start\":350},{\"end\":382,\"start\":364},{\"end\":404,\"start\":383},{\"end\":420,\"start\":405},{\"end\":437,\"start\":421},{\"end\":462,\"start\":438},{\"end\":477,\"start\":463},{\"end\":491,\"start\":478},{\"end\":507,\"start\":492},{\"end\":521,\"start\":508},{\"end\":535,\"start\":522},{\"end\":553,\"start\":536},{\"end\":570,\"start\":554},{\"end\":585,\"start\":571},{\"end\":600,\"start\":586},{\"end\":615,\"start\":601},{\"end\":631,\"start\":616},{\"end\":649,\"start\":632},{\"end\":659,\"start\":650},{\"end\":671,\"start\":660},{\"end\":687,\"start\":672},{\"end\":700,\"start\":688},{\"end\":717,\"start\":701},{\"end\":734,\"start\":718},{\"end\":749,\"start\":735},{\"end\":765,\"start\":750},{\"end\":789,\"start\":766},{\"end\":804,\"start\":790},{\"end\":820,\"start\":805},{\"end\":839,\"start\":821},{\"end\":857,\"start\":840},{\"end\":874,\"start\":858},{\"end\":886,\"start\":875},{\"end\":897,\"start\":887},{\"end\":919,\"start\":898},{\"end\":931,\"start\":920},{\"end\":948,\"start\":932},{\"end\":962,\"start\":949},{\"end\":972,\"start\":963},{\"end\":983,\"start\":973},{\"end\":997,\"start\":984},{\"end\":1014,\"start\":998},{\"end\":1027,\"start\":1015},{\"end\":1042,\"start\":1028},{\"end\":1060,\"start\":1043},{\"end\":1076,\"start\":1061},{\"end\":1093,\"start\":1077},{\"end\":1113,\"start\":1094},{\"end\":1122,\"start\":1114},{\"end\":1136,\"start\":1123},{\"end\":1156,\"start\":1137},{\"end\":1171,\"start\":1157},{\"end\":1184,\"start\":1172},{\"end\":1202,\"start\":1185},{\"end\":1218,\"start\":1203},{\"end\":1232,\"start\":1219},{\"end\":1248,\"start\":1233},{\"end\":1262,\"start\":1249},{\"end\":1275,\"start\":1263},{\"end\":1290,\"start\":1276}]", "publisher": null, "author_last_name": "[{\"end\":127,\"start\":117},{\"end\":147,\"start\":142},{\"end\":159,\"start\":154},{\"end\":175,\"start\":170},{\"end\":191,\"start\":182},{\"end\":209,\"start\":200},{\"end\":225,\"start\":217},{\"end\":240,\"start\":232},{\"end\":259,\"start\":250},{\"end\":271,\"start\":266},{\"end\":285,\"start\":280},{\"end\":300,\"start\":295},{\"end\":327,\"start\":319},{\"end\":348,\"start\":338},{\"end\":362,\"start\":358},{\"end\":381,\"start\":372},{\"end\":403,\"start\":391},{\"end\":419,\"start\":411},{\"end\":436,\"start\":428},{\"end\":461,\"start\":443},{\"end\":476,\"start\":469},{\"end\":490,\"start\":483},{\"end\":506,\"start\":500},{\"end\":520,\"start\":516},{\"end\":534,\"start\":529},{\"end\":552,\"start\":542},{\"end\":569,\"start\":562},{\"end\":584,\"start\":579},{\"end\":599,\"start\":593},{\"end\":614,\"start\":609},{\"end\":630,\"start\":623},{\"end\":648,\"start\":640},{\"end\":658,\"start\":655},{\"end\":670,\"start\":665},{\"end\":686,\"start\":680},{\"end\":699,\"start\":695},{\"end\":716,\"start\":708},{\"end\":733,\"start\":728},{\"end\":748,\"start\":744},{\"end\":764,\"start\":757},{\"end\":788,\"start\":776},{\"end\":803,\"start\":797},{\"end\":819,\"start\":812},{\"end\":838,\"start\":829},{\"end\":856,\"start\":850},{\"end\":873,\"start\":865},{\"end\":885,\"start\":881},{\"end\":896,\"start\":892},{\"end\":918,\"start\":910},{\"end\":930,\"start\":924},{\"end\":947,\"start\":938},{\"end\":961,\"start\":956},{\"end\":971,\"start\":968},{\"end\":982,\"start\":978},{\"end\":996,\"start\":990},{\"end\":1013,\"start\":1008},{\"end\":1026,\"start\":1020},{\"end\":1041,\"start\":1035},{\"end\":1059,\"start\":1051},{\"end\":1075,\"start\":1068},{\"end\":1092,\"start\":1083},{\"end\":1112,\"start\":1104},{\"end\":1121,\"start\":1119},{\"end\":1135,\"start\":1129},{\"end\":1155,\"start\":1145},{\"end\":1170,\"start\":1165},{\"end\":1183,\"start\":1178},{\"end\":1201,\"start\":1191},{\"end\":1217,\"start\":1213},{\"end\":1231,\"start\":1227},{\"end\":1247,\"start\":1243},{\"end\":1261,\"start\":1257},{\"end\":1274,\"start\":1270},{\"end\":1289,\"start\":1283}]", "author_first_name": "[{\"end\":116,\"start\":111},{\"end\":134,\"start\":129},{\"end\":141,\"start\":135},{\"end\":153,\"start\":149},{\"end\":169,\"start\":161},{\"end\":181,\"start\":177},{\"end\":199,\"start\":193},{\"end\":216,\"start\":211},{\"end\":231,\"start\":227},{\"end\":249,\"start\":242},{\"end\":265,\"start\":261},{\"end\":279,\"start\":273},{\"end\":292,\"start\":287},{\"end\":294,\"start\":293},{\"end\":308,\"start\":302},{\"end\":318,\"start\":309},{\"end\":337,\"start\":329},{\"end\":357,\"start\":350},{\"end\":371,\"start\":364},{\"end\":390,\"start\":383},{\"end\":410,\"start\":405},{\"end\":427,\"start\":421},{\"end\":442,\"start\":438},{\"end\":468,\"start\":463},{\"end\":482,\"start\":478},{\"end\":499,\"start\":492},{\"end\":515,\"start\":508},{\"end\":528,\"start\":522},{\"end\":541,\"start\":536},{\"end\":561,\"start\":554},{\"end\":578,\"start\":571},{\"end\":592,\"start\":586},{\"end\":608,\"start\":601},{\"end\":622,\"start\":616},{\"end\":639,\"start\":632},{\"end\":654,\"start\":650},{\"end\":664,\"start\":660},{\"end\":679,\"start\":672},{\"end\":694,\"start\":688},{\"end\":707,\"start\":701},{\"end\":725,\"start\":718},{\"end\":727,\"start\":726},{\"end\":743,\"start\":735},{\"end\":756,\"start\":750},{\"end\":775,\"start\":766},{\"end\":796,\"start\":790},{\"end\":811,\"start\":805},{\"end\":828,\"start\":821},{\"end\":849,\"start\":840},{\"end\":864,\"start\":858},{\"end\":880,\"start\":875},{\"end\":891,\"start\":887},{\"end\":909,\"start\":898},{\"end\":923,\"start\":920},{\"end\":937,\"start\":932},{\"end\":953,\"start\":949},{\"end\":955,\"start\":954},{\"end\":967,\"start\":963},{\"end\":977,\"start\":973},{\"end\":989,\"start\":984},{\"end\":1007,\"start\":998},{\"end\":1019,\"start\":1015},{\"end\":1034,\"start\":1028},{\"end\":1050,\"start\":1043},{\"end\":1067,\"start\":1061},{\"end\":1082,\"start\":1077},{\"end\":1101,\"start\":1094},{\"end\":1103,\"start\":1102},{\"end\":1118,\"start\":1114},{\"end\":1128,\"start\":1123},{\"end\":1144,\"start\":1137},{\"end\":1164,\"start\":1157},{\"end\":1177,\"start\":1172},{\"end\":1190,\"start\":1185},{\"end\":1212,\"start\":1203},{\"end\":1226,\"start\":1219},{\"end\":1242,\"start\":1233},{\"end\":1254,\"start\":1249},{\"end\":1256,\"start\":1255},{\"end\":1269,\"start\":1263},{\"end\":1280,\"start\":1276},{\"end\":1282,\"start\":1281}]", "author_affiliation": null, "title": "[{\"end\":98,\"start\":1},{\"end\":1388,\"start\":1291}]", "venue": null, "abstract": "[{\"end\":4698,\"start\":1400}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b31\"},\"end\":4778,\"start\":4774},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":4781,\"start\":4778},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5058,\"start\":5054},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":6704,\"start\":6700},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":6774,\"start\":6770},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":6956,\"start\":6954},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6957,\"start\":6956},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":7780,\"start\":7776},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9434,\"start\":9433},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":9471,\"start\":9470},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":9587,\"start\":9585},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":9631,\"start\":9629},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":10866,\"start\":10862},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":10869,\"start\":10866},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":10894,\"start\":10891},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":11397,\"start\":11394},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":11399,\"start\":11397},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11402,\"start\":11399},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":11405,\"start\":11402},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":11408,\"start\":11405},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":11411,\"start\":11408},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":11414,\"start\":11411},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":11417,\"start\":11414},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":11420,\"start\":11417},{\"attributes\":{\"ref_id\":\"b72\"},\"end\":11423,\"start\":11420},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":12237,\"start\":12235},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":18488,\"start\":18484},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":23015,\"start\":23011},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":24170,\"start\":24167},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":24927,\"start\":24923},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":24930,\"start\":24927},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":24933,\"start\":24930},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":24951,\"start\":24947},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":25038,\"start\":25034},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":25122,\"start\":25118},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":25125,\"start\":25122},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":25381,\"start\":25377},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":25384,\"start\":25381},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":25690,\"start\":25686},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":26290,\"start\":26286},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":26293,\"start\":26290},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":26406,\"start\":26402},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":26409,\"start\":26406},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":26412,\"start\":26409},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":26541,\"start\":26537},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":27597,\"start\":27595},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":28397,\"start\":28395},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":29222,\"start\":29218},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":29238,\"start\":29234},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":29251,\"start\":29247},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":29291,\"start\":29287},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":29333,\"start\":29329},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":29571,\"start\":29569},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":30063,\"start\":30061},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":30258,\"start\":30256},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":33456,\"start\":33452},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":34310,\"start\":34308},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":34685,\"start\":34683},{\"attributes\":{\"ref_id\":\"b74\"},\"end\":35029,\"start\":35025},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":35318,\"start\":35314},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":35321,\"start\":35318},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":38455,\"start\":38453},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":38656,\"start\":38654},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":39592,\"start\":39590},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":39789,\"start\":39785},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":39825,\"start\":39821},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":40234,\"start\":40232},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":40303,\"start\":40299},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":41042,\"start\":41038},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":42554,\"start\":42552},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":44013,\"start\":44009},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":45815,\"start\":45813},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":46343,\"start\":46339},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":46346,\"start\":46343},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":46349,\"start\":46346},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":47013,\"start\":47009},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":47119,\"start\":47115},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":48038,\"start\":48034},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":48866,\"start\":48864},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":49040,\"start\":49036},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":50645,\"start\":50641},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":50768,\"start\":50766},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":51974,\"start\":51972},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":52129,\"start\":52127},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":53251,\"start\":53249},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":53579,\"start\":53575},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":53900,\"start\":53898},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":54708,\"start\":54704},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":55156,\"start\":55154},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":55179,\"start\":55177},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":55390,\"start\":55388},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":58725,\"start\":58721},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":61225,\"start\":61221},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":62635,\"start\":62631},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":62903,\"start\":62899},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":63237,\"start\":63233},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":63250,\"start\":63246},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":63264,\"start\":63261},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":64130,\"start\":64126},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":64403,\"start\":64399},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":64449,\"start\":64445},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":64478,\"start\":64474},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":65134,\"start\":65132},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":65194,\"start\":65192},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":66057,\"start\":66055},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":67615,\"start\":67612},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":68285,\"start\":68281},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":68289,\"start\":68287},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":68368,\"start\":68365},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":68371,\"start\":68368},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":68594,\"start\":68590},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":70550,\"start\":70546},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":71313,\"start\":71311},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":71337,\"start\":71335},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":71351,\"start\":71349},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":71480,\"start\":71476},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":71483,\"start\":71480},{\"end\":71504,\"start\":71485},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":71651,\"start\":71647},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":72506,\"start\":72502},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":72875,\"start\":72871},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":74048,\"start\":74045},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":74050,\"start\":74048},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":74443,\"start\":74441},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":74466,\"start\":74464},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":75633,\"start\":75630},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":77625,\"start\":77623},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":79322,\"start\":79318},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":79371,\"start\":79369},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":85246,\"start\":85245},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":85950,\"start\":85948},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":87897,\"start\":87895},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":87963,\"start\":87959},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":87982,\"start\":87978},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":88002,\"start\":87998},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":88219,\"start\":88215},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":89368,\"start\":89366},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":91746,\"start\":91744},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":92652,\"start\":92650},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":95958,\"start\":95956}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":98081,\"start\":97995},{\"attributes\":{\"id\":\"fig_1\"},\"end\":98147,\"start\":98082},{\"attributes\":{\"id\":\"fig_2\"},\"end\":98624,\"start\":98148},{\"attributes\":{\"id\":\"fig_3\"},\"end\":99182,\"start\":98625},{\"attributes\":{\"id\":\"fig_4\"},\"end\":99633,\"start\":99183},{\"attributes\":{\"id\":\"fig_6\"},\"end\":99686,\"start\":99634},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":99815,\"start\":99687}]", "paragraph": "[{\"end\":5237,\"start\":4720},{\"end\":5685,\"start\":5239},{\"end\":6172,\"start\":5687},{\"end\":6608,\"start\":6174},{\"end\":7172,\"start\":6650},{\"end\":7435,\"start\":7174},{\"end\":7709,\"start\":7437},{\"end\":8088,\"start\":7711},{\"end\":8509,\"start\":8090},{\"end\":8829,\"start\":8511},{\"end\":9117,\"start\":8831},{\"end\":9633,\"start\":9119},{\"end\":10211,\"start\":9635},{\"end\":11091,\"start\":10213},{\"end\":12103,\"start\":11093},{\"end\":12548,\"start\":12105},{\"end\":12704,\"start\":12550},{\"end\":13131,\"start\":12744},{\"end\":13647,\"start\":13133},{\"end\":14251,\"start\":13649},{\"end\":14530,\"start\":14253},{\"end\":15079,\"start\":14532},{\"end\":15569,\"start\":15081},{\"end\":16128,\"start\":15594},{\"end\":16303,\"start\":16130},{\"end\":17081,\"start\":16305},{\"end\":17312,\"start\":17083},{\"end\":18330,\"start\":17314},{\"end\":18490,\"start\":18332},{\"end\":19107,\"start\":18492},{\"end\":19561,\"start\":19109},{\"end\":20424,\"start\":19563},{\"end\":21342,\"start\":20426},{\"end\":22721,\"start\":21344},{\"end\":23425,\"start\":22723},{\"end\":23752,\"start\":23427},{\"end\":24250,\"start\":23754},{\"end\":25691,\"start\":24252},{\"end\":26020,\"start\":25693},{\"end\":26665,\"start\":26022},{\"end\":28399,\"start\":26694},{\"end\":28932,\"start\":28418},{\"end\":29689,\"start\":28934},{\"end\":30669,\"start\":29691},{\"end\":31034,\"start\":30687},{\"end\":31335,\"start\":31036},{\"end\":31952,\"start\":31337},{\"end\":32648,\"start\":31954},{\"end\":33161,\"start\":32650},{\"end\":34384,\"start\":33163},{\"end\":34872,\"start\":34386},{\"end\":35269,\"start\":34895},{\"end\":36050,\"start\":35271},{\"end\":36578,\"start\":36052},{\"end\":37955,\"start\":36580},{\"end\":39033,\"start\":37957},{\"end\":39922,\"start\":39083},{\"end\":40172,\"start\":39924},{\"end\":41043,\"start\":40174},{\"end\":41590,\"start\":41045},{\"end\":42219,\"start\":41592},{\"end\":42734,\"start\":42221},{\"end\":43133,\"start\":42762},{\"end\":43807,\"start\":43135},{\"end\":44434,\"start\":43809},{\"end\":44951,\"start\":44471},{\"end\":46110,\"start\":44953},{\"end\":48039,\"start\":46145},{\"end\":49724,\"start\":48061},{\"end\":50172,\"start\":49761},{\"end\":51330,\"start\":50174},{\"end\":52450,\"start\":51348},{\"end\":52882,\"start\":52484},{\"end\":54341,\"start\":52884},{\"end\":54958,\"start\":54381},{\"end\":55857,\"start\":54960},{\"end\":56266,\"start\":55859},{\"end\":56627,\"start\":56301},{\"end\":56819,\"start\":56629},{\"end\":57754,\"start\":56836},{\"end\":57908,\"start\":57756},{\"end\":58698,\"start\":57943},{\"end\":58981,\"start\":58700},{\"end\":59387,\"start\":58983},{\"end\":60004,\"start\":59421},{\"end\":60725,\"start\":60006},{\"end\":61402,\"start\":60756},{\"end\":62090,\"start\":61404},{\"end\":62151,\"start\":62129},{\"end\":62790,\"start\":62153},{\"end\":63420,\"start\":62792},{\"end\":64035,\"start\":63422},{\"end\":64479,\"start\":64069},{\"end\":64887,\"start\":64481},{\"end\":66666,\"start\":64889},{\"end\":67152,\"start\":66736},{\"end\":67711,\"start\":67154},{\"end\":68372,\"start\":67713},{\"end\":68595,\"start\":68397},{\"end\":69678,\"start\":68597},{\"end\":70551,\"start\":69680},{\"end\":71774,\"start\":70598},{\"end\":73090,\"start\":71823},{\"end\":73147,\"start\":73136},{\"end\":74129,\"start\":73149},{\"end\":74637,\"start\":74131},{\"end\":75057,\"start\":74639},{\"end\":75417,\"start\":75059},{\"end\":76253,\"start\":75441},{\"end\":77283,\"start\":76255},{\"end\":78393,\"start\":77285},{\"end\":79061,\"start\":78395},{\"end\":79527,\"start\":79108},{\"end\":80525,\"start\":79529},{\"end\":80868,\"start\":80527},{\"end\":81457,\"start\":80870},{\"end\":81663,\"start\":81459},{\"end\":82280,\"start\":81688},{\"end\":82398,\"start\":82282},{\"end\":82576,\"start\":82400},{\"end\":83593,\"start\":82578},{\"end\":83961,\"start\":83595},{\"end\":84349,\"start\":83963},{\"end\":84904,\"start\":84372},{\"end\":85237,\"start\":84906},{\"end\":85739,\"start\":85239},{\"end\":86191,\"start\":85741},{\"end\":86644,\"start\":86193},{\"end\":87080,\"start\":86646},{\"end\":87430,\"start\":87124},{\"end\":89093,\"start\":87432},{\"end\":90343,\"start\":89095},{\"end\":91085,\"start\":90345},{\"end\":91938,\"start\":91087},{\"end\":93067,\"start\":91972},{\"end\":93415,\"start\":93069},{\"end\":93663,\"start\":93417},{\"end\":94529,\"start\":93700},{\"end\":95014,\"start\":94531},{\"end\":95487,\"start\":95016},{\"end\":96194,\"start\":95489},{\"end\":96538,\"start\":96196},{\"end\":96808,\"start\":96540},{\"end\":97350,\"start\":96823},{\"end\":97994,\"start\":97352}]", "formula": null, "table_ref": "[{\"end\":27475,\"start\":27468},{\"end\":33126,\"start\":33119}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":4718,\"start\":4700},{\"attributes\":{\"n\":\"1.1\"},\"end\":6648,\"start\":6611},{\"attributes\":{\"n\":\"1.2\"},\"end\":12742,\"start\":12707},{\"attributes\":{\"n\":\"1.3\"},\"end\":15592,\"start\":15572},{\"attributes\":{\"n\":\"2\"},\"end\":26692,\"start\":26668},{\"attributes\":{\"n\":\"2.1\"},\"end\":28416,\"start\":28402},{\"attributes\":{\"n\":\"2.2\"},\"end\":30685,\"start\":30672},{\"attributes\":{\"n\":\"2.3\"},\"end\":34893,\"start\":34875},{\"attributes\":{\"n\":\"2.3.2\"},\"end\":39062,\"start\":39036},{\"attributes\":{\"n\":\"2.4\"},\"end\":39081,\"start\":39065},{\"attributes\":{\"n\":\"2.5\"},\"end\":42760,\"start\":42737},{\"attributes\":{\"n\":\"2.6\"},\"end\":44469,\"start\":44437},{\"attributes\":{\"n\":\"2.7\"},\"end\":46143,\"start\":46113},{\"attributes\":{\"n\":\"2.8\"},\"end\":48059,\"start\":48042},{\"attributes\":{\"n\":\"2.9\"},\"end\":49759,\"start\":49727},{\"attributes\":{\"n\":\"2.9.2\"},\"end\":51346,\"start\":51333},{\"attributes\":{\"n\":\"2.9.3\"},\"end\":52482,\"start\":52453},{\"attributes\":{\"n\":\"2.9.4\"},\"end\":54379,\"start\":54344},{\"attributes\":{\"n\":\"2.10\"},\"end\":56299,\"start\":56269},{\"attributes\":{\"n\":\"2.10.1\"},\"end\":56834,\"start\":56822},{\"attributes\":{\"n\":\"2.10.2\"},\"end\":57941,\"start\":57911},{\"attributes\":{\"n\":\"2.10.3\"},\"end\":59419,\"start\":59390},{\"attributes\":{\"n\":\"2.10.4\"},\"end\":60754,\"start\":60728},{\"attributes\":{\"n\":\"2.11\"},\"end\":62127,\"start\":62093},{\"attributes\":{\"n\":\"2.12\"},\"end\":64067,\"start\":64038},{\"attributes\":{\"n\":\"2.12.2\"},\"end\":66708,\"start\":66669},{\"attributes\":{\"n\":\"2.13\"},\"end\":66734,\"start\":66711},{\"attributes\":{\"n\":\"2.14\"},\"end\":68395,\"start\":68375},{\"attributes\":{\"n\":\"2.15\"},\"end\":70596,\"start\":70554},{\"attributes\":{\"n\":\"2.16\"},\"end\":71821,\"start\":71777},{\"attributes\":{\"n\":\"2.17\"},\"end\":73134,\"start\":73093},{\"attributes\":{\"n\":\"2.18\"},\"end\":75439,\"start\":75420},{\"attributes\":{\"n\":\"2.19\"},\"end\":79106,\"start\":79064},{\"attributes\":{\"n\":\"2.19.3\"},\"end\":81686,\"start\":81666},{\"attributes\":{\"n\":\"2.20\"},\"end\":84370,\"start\":84352},{\"attributes\":{\"n\":\"2.21\"},\"end\":87122,\"start\":87083},{\"attributes\":{\"n\":\"2.21.3\"},\"end\":91970,\"start\":91941},{\"attributes\":{\"n\":\"2.22\"},\"end\":93698,\"start\":93666},{\"attributes\":{\"n\":\"3\"},\"end\":96821,\"start\":96811},{\"end\":98006,\"start\":97996},{\"end\":98093,\"start\":98083},{\"end\":98159,\"start\":98149},{\"end\":99194,\"start\":99184},{\"end\":99645,\"start\":99635}]", "table": null, "figure_caption": "[{\"end\":98081,\"start\":98008},{\"end\":98147,\"start\":98095},{\"end\":98624,\"start\":98161},{\"end\":99182,\"start\":98627},{\"end\":99633,\"start\":99196},{\"end\":99686,\"start\":99647},{\"end\":99815,\"start\":99689}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":7358,\"start\":7349},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":7506,\"start\":7497},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":7557,\"start\":7548},{\"end\":17362,\"start\":17354},{\"end\":17488,\"start\":17480},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":19700,\"start\":19692},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":21152,\"start\":21144},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":21414,\"start\":21406},{\"end\":21795,\"start\":21787},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":22131,\"start\":22122},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":23660,\"start\":23651},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":24678,\"start\":24669},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":25135,\"start\":25126},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":25787,\"start\":25778},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":26195,\"start\":26187},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":80220,\"start\":80211},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":82178,\"start\":82169},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":93849,\"start\":93840},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":96600,\"start\":96591},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":96807,\"start\":96798}]", "bib_author_first_name": "[{\"end\":102045,\"start\":102040},{\"end\":102061,\"start\":102055},{\"end\":102080,\"start\":102071},{\"end\":102093,\"start\":102086},{\"end\":102465,\"start\":102461},{\"end\":102477,\"start\":102473},{\"end\":102805,\"start\":102801},{\"end\":102817,\"start\":102813},{\"end\":103195,\"start\":103190},{\"end\":103547,\"start\":103542},{\"end\":103562,\"start\":103557},{\"end\":103582,\"start\":103577},{\"end\":103596,\"start\":103589},{\"end\":104101,\"start\":104100},{\"end\":104110,\"start\":104109},{\"end\":104120,\"start\":104119},{\"end\":104129,\"start\":104128},{\"end\":104145,\"start\":104144},{\"end\":104152,\"start\":104151},{\"end\":104154,\"start\":104153},{\"end\":104630,\"start\":104629},{\"end\":104639,\"start\":104638},{\"end\":104652,\"start\":104645},{\"end\":104943,\"start\":104938},{\"end\":104954,\"start\":104951},{\"end\":105212,\"start\":105209},{\"end\":105377,\"start\":105374},{\"end\":105615,\"start\":105612},{\"end\":105923,\"start\":105915},{\"end\":105937,\"start\":105930},{\"end\":105947,\"start\":105946},{\"end\":105961,\"start\":105954},{\"end\":106382,\"start\":106381},{\"end\":106394,\"start\":106390},{\"end\":106413,\"start\":106412},{\"end\":106425,\"start\":106420},{\"end\":106427,\"start\":106426},{\"end\":106447,\"start\":106446},{\"end\":106464,\"start\":106456},{\"end\":106476,\"start\":106473},{\"end\":106478,\"start\":106477},{\"end\":106496,\"start\":106495},{\"end\":106518,\"start\":106517},{\"end\":106530,\"start\":106527},{\"end\":106532,\"start\":106531},{\"end\":106906,\"start\":106901},{\"end\":106920,\"start\":106915},{\"end\":106936,\"start\":106931},{\"end\":107225,\"start\":107224},{\"end\":107238,\"start\":107237},{\"end\":107245,\"start\":107244},{\"end\":107257,\"start\":107256},{\"end\":107624,\"start\":107615},{\"end\":107640,\"start\":107633},{\"end\":107661,\"start\":107648},{\"end\":107672,\"start\":107669},{\"end\":108157,\"start\":108151},{\"end\":108175,\"start\":108167},{\"end\":108193,\"start\":108186},{\"end\":108207,\"start\":108201},{\"end\":108209,\"start\":108208},{\"end\":108224,\"start\":108221},{\"end\":108241,\"start\":108232},{\"end\":108252,\"start\":108248},{\"end\":108268,\"start\":108263},{\"end\":108270,\"start\":108269},{\"end\":108284,\"start\":108278},{\"end\":108301,\"start\":108294},{\"end\":108321,\"start\":108313},{\"end\":108332,\"start\":108327},{\"end\":108349,\"start\":108341},{\"end\":108363,\"start\":108358},{\"end\":108375,\"start\":108371},{\"end\":108377,\"start\":108376},{\"end\":108389,\"start\":108384},{\"end\":108391,\"start\":108390},{\"end\":108882,\"start\":108876},{\"end\":108884,\"start\":108883},{\"end\":108900,\"start\":108894},{\"end\":108902,\"start\":108901},{\"end\":108919,\"start\":108915},{\"end\":108921,\"start\":108920},{\"end\":108932,\"start\":108927},{\"end\":108934,\"start\":108933},{\"end\":108943,\"start\":108940},{\"end\":108945,\"start\":108944},{\"end\":108959,\"start\":108953},{\"end\":108961,\"start\":108960},{\"end\":109238,\"start\":109233},{\"end\":109258,\"start\":109246},{\"end\":109273,\"start\":109266},{\"end\":109768,\"start\":109758},{\"end\":109782,\"start\":109776},{\"end\":109801,\"start\":109794},{\"end\":109813,\"start\":109807},{\"end\":110223,\"start\":110216},{\"end\":110247,\"start\":110238},{\"end\":110261,\"start\":110254},{\"end\":110271,\"start\":110266},{\"end\":110285,\"start\":110281},{\"end\":110300,\"start\":110292},{\"end\":110675,\"start\":110673},{\"end\":110685,\"start\":110682},{\"end\":110693,\"start\":110692},{\"end\":110704,\"start\":110702},{\"end\":110716,\"start\":110711},{\"end\":111058,\"start\":111055},{\"end\":111073,\"start\":111067},{\"end\":111097,\"start\":111092},{\"end\":111111,\"start\":111106},{\"end\":111123,\"start\":111119},{\"end\":111458,\"start\":111457},{\"end\":111466,\"start\":111465},{\"end\":111828,\"start\":111819},{\"end\":111839,\"start\":111835},{\"end\":112079,\"start\":112073},{\"end\":112109,\"start\":112097},{\"end\":112586,\"start\":112585},{\"end\":112596,\"start\":112593},{\"end\":112598,\"start\":112597},{\"end\":113255,\"start\":113248},{\"end\":113275,\"start\":113267},{\"end\":113277,\"start\":113276},{\"end\":113297,\"start\":113288},{\"end\":113310,\"start\":113304},{\"end\":113325,\"start\":113318},{\"end\":113339,\"start\":113335},{\"end\":113358,\"start\":113354},{\"end\":113375,\"start\":113368},{\"end\":113392,\"start\":113385},{\"end\":113407,\"start\":113401},{\"end\":113424,\"start\":113417},{\"end\":113426,\"start\":113425},{\"end\":113444,\"start\":113437},{\"end\":113458,\"start\":113451},{\"end\":113471,\"start\":113464},{\"end\":113485,\"start\":113479},{\"end\":113499,\"start\":113492},{\"end\":114269,\"start\":114262},{\"end\":114287,\"start\":114281},{\"end\":114300,\"start\":114299},{\"end\":114315,\"start\":114309},{\"end\":114335,\"start\":114328},{\"end\":114354,\"start\":114353},{\"end\":114376,\"start\":114368},{\"end\":114390,\"start\":114385},{\"end\":114872,\"start\":114871},{\"end\":114883,\"start\":114882},{\"end\":114894,\"start\":114893},{\"end\":114903,\"start\":114902},{\"end\":114914,\"start\":114913},{\"end\":114916,\"start\":114915},{\"end\":115416,\"start\":115412},{\"end\":115432,\"start\":115427},{\"end\":115732,\"start\":115731},{\"end\":115744,\"start\":115739},{\"end\":115746,\"start\":115745},{\"end\":116001,\"start\":116000},{\"end\":116267,\"start\":116261},{\"end\":116280,\"start\":116275},{\"end\":116294,\"start\":116291},{\"end\":116305,\"start\":116301},{\"end\":116321,\"start\":116314},{\"end\":116338,\"start\":116334},{\"end\":117190,\"start\":117183},{\"end\":117206,\"start\":117199},{\"end\":117228,\"start\":117221},{\"end\":117246,\"start\":117238},{\"end\":117260,\"start\":117253},{\"end\":117790,\"start\":117783},{\"end\":117807,\"start\":117799},{\"end\":117819,\"start\":117814},{\"end\":117839,\"start\":117830},{\"end\":117853,\"start\":117846},{\"end\":117870,\"start\":117863},{\"end\":118252,\"start\":118247},{\"end\":118266,\"start\":118261},{\"end\":118268,\"start\":118267},{\"end\":118284,\"start\":118279},{\"end\":118286,\"start\":118285},{\"end\":118299,\"start\":118295},{\"end\":119023,\"start\":119016},{\"end\":119037,\"start\":119028},{\"end\":119049,\"start\":119043},{\"end\":119062,\"start\":119056},{\"end\":119080,\"start\":119068},{\"end\":119096,\"start\":119089},{\"end\":119459,\"start\":119453},{\"end\":119461,\"start\":119460},{\"end\":119738,\"start\":119732},{\"end\":119750,\"start\":119744},{\"end\":119761,\"start\":119757},{\"end\":120073,\"start\":120067},{\"end\":120089,\"start\":120082},{\"end\":120104,\"start\":120099},{\"end\":120121,\"start\":120112},{\"end\":120458,\"start\":120453},{\"end\":120470,\"start\":120463},{\"end\":120483,\"start\":120476},{\"end\":120485,\"start\":120484},{\"end\":120497,\"start\":120494},{\"end\":120499,\"start\":120498},{\"end\":120514,\"start\":120510},{\"end\":120516,\"start\":120515},{\"end\":120532,\"start\":120526},{\"end\":120534,\"start\":120533},{\"end\":121032,\"start\":121027},{\"end\":121041,\"start\":121037},{\"end\":121057,\"start\":121050},{\"end\":121059,\"start\":121058},{\"end\":121071,\"start\":121068},{\"end\":121073,\"start\":121072},{\"end\":121088,\"start\":121084},{\"end\":121090,\"start\":121089},{\"end\":121106,\"start\":121100},{\"end\":121108,\"start\":121107},{\"end\":121609,\"start\":121608},{\"end\":121615,\"start\":121614},{\"end\":121623,\"start\":121622},{\"end\":121632,\"start\":121631},{\"end\":121646,\"start\":121645},{\"end\":121968,\"start\":121961},{\"end\":121978,\"start\":121974},{\"end\":121994,\"start\":121987},{\"end\":122010,\"start\":122003},{\"end\":122551,\"start\":122546},{\"end\":122771,\"start\":122770},{\"end\":122773,\"start\":122772},{\"end\":122784,\"start\":122780},{\"end\":122786,\"start\":122785},{\"end\":122800,\"start\":122795},{\"end\":122802,\"start\":122801},{\"end\":123500,\"start\":123499},{\"end\":123502,\"start\":123501},{\"end\":123515,\"start\":123509},{\"end\":123517,\"start\":123516},{\"end\":123534,\"start\":123526},{\"end\":123536,\"start\":123535},{\"end\":123551,\"start\":123544},{\"end\":123553,\"start\":123552},{\"end\":123567,\"start\":123564},{\"end\":123579,\"start\":123575},{\"end\":123581,\"start\":123580},{\"end\":123591,\"start\":123586},{\"end\":123593,\"start\":123592},{\"end\":123610,\"start\":123606},{\"end\":123612,\"start\":123611},{\"end\":123625,\"start\":123620},{\"end\":123627,\"start\":123626},{\"end\":124127,\"start\":124118},{\"end\":124144,\"start\":124136},{\"end\":124165,\"start\":124157},{\"end\":124179,\"start\":124172},{\"end\":124639,\"start\":124634},{\"end\":124657,\"start\":124651},{\"end\":124659,\"start\":124658},{\"end\":124671,\"start\":124667},{\"end\":124673,\"start\":124672},{\"end\":124685,\"start\":124680},{\"end\":124687,\"start\":124686},{\"end\":125084,\"start\":125079},{\"end\":125102,\"start\":125096},{\"end\":125117,\"start\":125113},{\"end\":125135,\"start\":125129},{\"end\":125137,\"start\":125136},{\"end\":125718,\"start\":125713},{\"end\":125737,\"start\":125730},{\"end\":125752,\"start\":125748},{\"end\":125770,\"start\":125764},{\"end\":125772,\"start\":125771},{\"end\":126505,\"start\":126501},{\"end\":126527,\"start\":126516},{\"end\":126543,\"start\":126535},{\"end\":126559,\"start\":126548},{\"end\":126840,\"start\":126833},{\"end\":126858,\"start\":126853},{\"end\":126873,\"start\":126869},{\"end\":126882,\"start\":126881},{\"end\":126902,\"start\":126901},{\"end\":126916,\"start\":126912},{\"end\":126918,\"start\":126917},{\"end\":127489,\"start\":127480},{\"end\":127694,\"start\":127689},{\"end\":127711,\"start\":127702},{\"end\":127723,\"start\":127718},{\"end\":127734,\"start\":127728},{\"end\":127752,\"start\":127744},{\"end\":127754,\"start\":127753},{\"end\":127769,\"start\":127765},{\"end\":127771,\"start\":127770},{\"end\":127784,\"start\":127778},{\"end\":127786,\"start\":127785},{\"end\":127803,\"start\":127798},{\"end\":127805,\"start\":127804},{\"end\":128444,\"start\":128439},{\"end\":128456,\"start\":128452},{\"end\":128471,\"start\":128467},{\"end\":128473,\"start\":128472},{\"end\":128483,\"start\":128479},{\"end\":128485,\"start\":128484},{\"end\":128497,\"start\":128492},{\"end\":128499,\"start\":128498},{\"end\":128793,\"start\":128792},{\"end\":128795,\"start\":128794},{\"end\":128808,\"start\":128807},{\"end\":128810,\"start\":128809},{\"end\":128821,\"start\":128820},{\"end\":128823,\"start\":128822},{\"end\":128834,\"start\":128833},{\"end\":128844,\"start\":128843},{\"end\":128856,\"start\":128855},{\"end\":128866,\"start\":128865},{\"end\":128875,\"start\":128874},{\"end\":128883,\"start\":128882},{\"end\":128896,\"start\":128895},{\"end\":128912,\"start\":128911},{\"end\":129336,\"start\":129332},{\"end\":129346,\"start\":129345},{\"end\":129638,\"start\":129637},{\"end\":129651,\"start\":129650},{\"end\":129667,\"start\":129666},{\"end\":129948,\"start\":129947},{\"end\":129960,\"start\":129959},{\"end\":129973,\"start\":129972},{\"end\":129975,\"start\":129974},{\"end\":129986,\"start\":129985},{\"end\":129999,\"start\":129998},{\"end\":130010,\"start\":130009},{\"end\":130397,\"start\":130390},{\"end\":130416,\"start\":130409},{\"end\":130430,\"start\":130427},{\"end\":130449,\"start\":130442},{\"end\":130764,\"start\":130758},{\"end\":130775,\"start\":130772},{\"end\":130781,\"start\":130776},{\"end\":130801,\"start\":130788},{\"end\":130832,\"start\":130827},{\"end\":130834,\"start\":130833},{\"end\":131411,\"start\":131406},{\"end\":131873,\"start\":131864},{\"end\":131893,\"start\":131888},{\"end\":131909,\"start\":131902},{\"end\":131924,\"start\":131919},{\"end\":131943,\"start\":131935},{\"end\":132587,\"start\":132583},{\"end\":132595,\"start\":132592},{\"end\":132614,\"start\":132603},{\"end\":132904,\"start\":132900},{\"end\":132916,\"start\":132909},{\"end\":132931,\"start\":132924},{\"end\":132951,\"start\":132943},{\"end\":132953,\"start\":132952},{\"end\":133466,\"start\":133461},{\"end\":133486,\"start\":133477},{\"end\":133496,\"start\":133492},{\"end\":133739,\"start\":133736},{\"end\":133945,\"start\":133938},{\"end\":133960,\"start\":133954},{\"end\":133978,\"start\":133971},{\"end\":133998,\"start\":133993},{\"end\":134014,\"start\":134008},{\"end\":134389,\"start\":134384},{\"end\":134402,\"start\":134396},{\"end\":134420,\"start\":134411},{\"end\":134442,\"start\":134434},{\"end\":134456,\"start\":134451},{\"end\":134470,\"start\":134465},{\"end\":134846,\"start\":134840},{\"end\":134863,\"start\":134857},{\"end\":134874,\"start\":134869},{\"end\":134876,\"start\":134875},{\"end\":134893,\"start\":134888}]", "bib_author_last_name": "[{\"end\":102053,\"start\":102046},{\"end\":102069,\"start\":102062},{\"end\":102084,\"start\":102081},{\"end\":102097,\"start\":102094},{\"end\":102471,\"start\":102466},{\"end\":102485,\"start\":102478},{\"end\":102811,\"start\":102806},{\"end\":102825,\"start\":102818},{\"end\":103213,\"start\":103196},{\"end\":103222,\"start\":103215},{\"end\":103555,\"start\":103548},{\"end\":103575,\"start\":103563},{\"end\":103587,\"start\":103583},{\"end\":103601,\"start\":103597},{\"end\":104107,\"start\":104102},{\"end\":104117,\"start\":104111},{\"end\":104126,\"start\":104121},{\"end\":104142,\"start\":104130},{\"end\":104149,\"start\":104146},{\"end\":104158,\"start\":104155},{\"end\":104636,\"start\":104631},{\"end\":104643,\"start\":104640},{\"end\":104656,\"start\":104653},{\"end\":104949,\"start\":104944},{\"end\":104961,\"start\":104955},{\"end\":105619,\"start\":105616},{\"end\":105928,\"start\":105924},{\"end\":105944,\"start\":105938},{\"end\":105952,\"start\":105948},{\"end\":105966,\"start\":105962},{\"end\":105978,\"start\":105968},{\"end\":106388,\"start\":106383},{\"end\":106401,\"start\":106395},{\"end\":106410,\"start\":106403},{\"end\":106418,\"start\":106414},{\"end\":106434,\"start\":106428},{\"end\":106444,\"start\":106436},{\"end\":106454,\"start\":106448},{\"end\":106471,\"start\":106465},{\"end\":106484,\"start\":106479},{\"end\":106493,\"start\":106486},{\"end\":106501,\"start\":106497},{\"end\":106515,\"start\":106503},{\"end\":106525,\"start\":106519},{\"end\":106541,\"start\":106533},{\"end\":106552,\"start\":106543},{\"end\":106913,\"start\":106907},{\"end\":106929,\"start\":106921},{\"end\":106946,\"start\":106937},{\"end\":107235,\"start\":107226},{\"end\":107242,\"start\":107239},{\"end\":107254,\"start\":107246},{\"end\":107265,\"start\":107258},{\"end\":107631,\"start\":107625},{\"end\":107646,\"start\":107641},{\"end\":107667,\"start\":107662},{\"end\":107675,\"start\":107673},{\"end\":108165,\"start\":108158},{\"end\":108184,\"start\":108176},{\"end\":108199,\"start\":108194},{\"end\":108219,\"start\":108210},{\"end\":108230,\"start\":108225},{\"end\":108246,\"start\":108242},{\"end\":108261,\"start\":108253},{\"end\":108276,\"start\":108271},{\"end\":108292,\"start\":108285},{\"end\":108311,\"start\":108302},{\"end\":108325,\"start\":108322},{\"end\":108339,\"start\":108333},{\"end\":108356,\"start\":108350},{\"end\":108369,\"start\":108364},{\"end\":108382,\"start\":108378},{\"end\":108396,\"start\":108392},{\"end\":108892,\"start\":108885},{\"end\":108913,\"start\":108903},{\"end\":108925,\"start\":108922},{\"end\":108938,\"start\":108935},{\"end\":108951,\"start\":108946},{\"end\":108971,\"start\":108962},{\"end\":109244,\"start\":109239},{\"end\":109264,\"start\":109259},{\"end\":109287,\"start\":109274},{\"end\":109774,\"start\":109769},{\"end\":109792,\"start\":109783},{\"end\":109805,\"start\":109802},{\"end\":109824,\"start\":109814},{\"end\":110236,\"start\":110224},{\"end\":110252,\"start\":110248},{\"end\":110264,\"start\":110262},{\"end\":110279,\"start\":110272},{\"end\":110290,\"start\":110286},{\"end\":110305,\"start\":110301},{\"end\":110680,\"start\":110676},{\"end\":110690,\"start\":110686},{\"end\":110700,\"start\":110694},{\"end\":110709,\"start\":110705},{\"end\":110722,\"start\":110717},{\"end\":110732,\"start\":110724},{\"end\":111065,\"start\":111059},{\"end\":111090,\"start\":111074},{\"end\":111104,\"start\":111098},{\"end\":111117,\"start\":111112},{\"end\":111130,\"start\":111124},{\"end\":111463,\"start\":111459},{\"end\":111475,\"start\":111467},{\"end\":111833,\"start\":111829},{\"end\":111845,\"start\":111840},{\"end\":112095,\"start\":112080},{\"end\":112119,\"start\":112110},{\"end\":112128,\"start\":112121},{\"end\":112591,\"start\":112587},{\"end\":112605,\"start\":112599},{\"end\":112613,\"start\":112607},{\"end\":113265,\"start\":113256},{\"end\":113286,\"start\":113278},{\"end\":113302,\"start\":113298},{\"end\":113316,\"start\":113311},{\"end\":113333,\"start\":113326},{\"end\":113352,\"start\":113340},{\"end\":113366,\"start\":113359},{\"end\":113383,\"start\":113376},{\"end\":113399,\"start\":113393},{\"end\":113415,\"start\":113408},{\"end\":113435,\"start\":113427},{\"end\":113449,\"start\":113445},{\"end\":113462,\"start\":113459},{\"end\":113477,\"start\":113472},{\"end\":113490,\"start\":113486},{\"end\":113506,\"start\":113500},{\"end\":114279,\"start\":114270},{\"end\":114297,\"start\":114288},{\"end\":114307,\"start\":114301},{\"end\":114326,\"start\":114316},{\"end\":114341,\"start\":114336},{\"end\":114351,\"start\":114343},{\"end\":114366,\"start\":114355},{\"end\":114383,\"start\":114377},{\"end\":114398,\"start\":114391},{\"end\":114405,\"start\":114400},{\"end\":114880,\"start\":114873},{\"end\":114891,\"start\":114884},{\"end\":114900,\"start\":114895},{\"end\":114911,\"start\":114904},{\"end\":114922,\"start\":114917},{\"end\":115425,\"start\":115417},{\"end\":115442,\"start\":115433},{\"end\":115737,\"start\":115733},{\"end\":115755,\"start\":115747},{\"end\":115766,\"start\":115757},{\"end\":116006,\"start\":116002},{\"end\":116015,\"start\":116008},{\"end\":116273,\"start\":116268},{\"end\":116289,\"start\":116281},{\"end\":116299,\"start\":116295},{\"end\":116312,\"start\":116306},{\"end\":116332,\"start\":116322},{\"end\":116348,\"start\":116339},{\"end\":117197,\"start\":117191},{\"end\":117219,\"start\":117207},{\"end\":117236,\"start\":117229},{\"end\":117251,\"start\":117247},{\"end\":117265,\"start\":117261},{\"end\":117797,\"start\":117791},{\"end\":117812,\"start\":117808},{\"end\":117828,\"start\":117820},{\"end\":117844,\"start\":117840},{\"end\":117861,\"start\":117854},{\"end\":117875,\"start\":117871},{\"end\":118259,\"start\":118253},{\"end\":118277,\"start\":118269},{\"end\":118293,\"start\":118287},{\"end\":118304,\"start\":118300},{\"end\":119026,\"start\":119024},{\"end\":119041,\"start\":119038},{\"end\":119054,\"start\":119050},{\"end\":119066,\"start\":119063},{\"end\":119087,\"start\":119081},{\"end\":119100,\"start\":119097},{\"end\":119468,\"start\":119462},{\"end\":119742,\"start\":119739},{\"end\":119755,\"start\":119751},{\"end\":119767,\"start\":119762},{\"end\":120080,\"start\":120074},{\"end\":120097,\"start\":120090},{\"end\":120110,\"start\":120105},{\"end\":120126,\"start\":120122},{\"end\":120461,\"start\":120459},{\"end\":120474,\"start\":120471},{\"end\":120492,\"start\":120486},{\"end\":120508,\"start\":120500},{\"end\":120524,\"start\":120517},{\"end\":120541,\"start\":120535},{\"end\":121035,\"start\":121033},{\"end\":121048,\"start\":121042},{\"end\":121066,\"start\":121060},{\"end\":121082,\"start\":121074},{\"end\":121098,\"start\":121091},{\"end\":121115,\"start\":121109},{\"end\":121612,\"start\":121610},{\"end\":121620,\"start\":121616},{\"end\":121629,\"start\":121624},{\"end\":121643,\"start\":121633},{\"end\":121652,\"start\":121647},{\"end\":121972,\"start\":121969},{\"end\":121985,\"start\":121979},{\"end\":122001,\"start\":121995},{\"end\":122015,\"start\":122011},{\"end\":122562,\"start\":122552},{\"end\":122778,\"start\":122774},{\"end\":122793,\"start\":122787},{\"end\":122807,\"start\":122803},{\"end\":122813,\"start\":122809},{\"end\":123507,\"start\":123503},{\"end\":123524,\"start\":123518},{\"end\":123542,\"start\":123537},{\"end\":123562,\"start\":123554},{\"end\":123573,\"start\":123568},{\"end\":123584,\"start\":123582},{\"end\":123604,\"start\":123594},{\"end\":123618,\"start\":123613},{\"end\":123632,\"start\":123628},{\"end\":123638,\"start\":123634},{\"end\":124134,\"start\":124128},{\"end\":124155,\"start\":124145},{\"end\":124170,\"start\":124166},{\"end\":124184,\"start\":124180},{\"end\":124649,\"start\":124640},{\"end\":124665,\"start\":124660},{\"end\":124678,\"start\":124674},{\"end\":124692,\"start\":124688},{\"end\":125094,\"start\":125085},{\"end\":125111,\"start\":125103},{\"end\":125127,\"start\":125118},{\"end\":125145,\"start\":125138},{\"end\":125728,\"start\":125719},{\"end\":125746,\"start\":125738},{\"end\":125762,\"start\":125753},{\"end\":125780,\"start\":125773},{\"end\":126514,\"start\":126506},{\"end\":126533,\"start\":126528},{\"end\":126546,\"start\":126544},{\"end\":126573,\"start\":126560},{\"end\":126851,\"start\":126841},{\"end\":126867,\"start\":126859},{\"end\":126879,\"start\":126874},{\"end\":126890,\"start\":126883},{\"end\":126899,\"start\":126892},{\"end\":126910,\"start\":126903},{\"end\":126925,\"start\":126919},{\"end\":126932,\"start\":126927},{\"end\":127500,\"start\":127490},{\"end\":127700,\"start\":127695},{\"end\":127716,\"start\":127712},{\"end\":127726,\"start\":127724},{\"end\":127742,\"start\":127735},{\"end\":127763,\"start\":127755},{\"end\":127776,\"start\":127772},{\"end\":127796,\"start\":127787},{\"end\":127810,\"start\":127806},{\"end\":128450,\"start\":128445},{\"end\":128465,\"start\":128457},{\"end\":128477,\"start\":128474},{\"end\":128490,\"start\":128486},{\"end\":128504,\"start\":128500},{\"end\":128805,\"start\":128796},{\"end\":128818,\"start\":128811},{\"end\":128831,\"start\":128824},{\"end\":128841,\"start\":128835},{\"end\":128853,\"start\":128845},{\"end\":128863,\"start\":128857},{\"end\":128872,\"start\":128867},{\"end\":128880,\"start\":128876},{\"end\":128893,\"start\":128884},{\"end\":128909,\"start\":128897},{\"end\":128918,\"start\":128913},{\"end\":129343,\"start\":129337},{\"end\":129353,\"start\":129347},{\"end\":129359,\"start\":129355},{\"end\":129648,\"start\":129639},{\"end\":129664,\"start\":129652},{\"end\":129673,\"start\":129668},{\"end\":129957,\"start\":129949},{\"end\":129970,\"start\":129961},{\"end\":129983,\"start\":129976},{\"end\":129996,\"start\":129987},{\"end\":130007,\"start\":130000},{\"end\":130025,\"start\":130011},{\"end\":130407,\"start\":130398},{\"end\":130425,\"start\":130417},{\"end\":130440,\"start\":130431},{\"end\":130454,\"start\":130450},{\"end\":130770,\"start\":130765},{\"end\":130786,\"start\":130782},{\"end\":130804,\"start\":130802},{\"end\":130816,\"start\":130806},{\"end\":130825,\"start\":130818},{\"end\":130838,\"start\":130835},{\"end\":130846,\"start\":130840},{\"end\":131421,\"start\":131412},{\"end\":131886,\"start\":131874},{\"end\":131900,\"start\":131894},{\"end\":131917,\"start\":131910},{\"end\":131933,\"start\":131925},{\"end\":131951,\"start\":131944},{\"end\":132590,\"start\":132588},{\"end\":132601,\"start\":132596},{\"end\":132621,\"start\":132615},{\"end\":132907,\"start\":132905},{\"end\":132922,\"start\":132917},{\"end\":132941,\"start\":132932},{\"end\":132962,\"start\":132954},{\"end\":133475,\"start\":133467},{\"end\":133490,\"start\":133487},{\"end\":133502,\"start\":133497},{\"end\":133743,\"start\":133740},{\"end\":133750,\"start\":133745},{\"end\":133952,\"start\":133946},{\"end\":133969,\"start\":133961},{\"end\":133991,\"start\":133979},{\"end\":134006,\"start\":133999},{\"end\":134025,\"start\":134015},{\"end\":134394,\"start\":134390},{\"end\":134409,\"start\":134403},{\"end\":134432,\"start\":134421},{\"end\":134449,\"start\":134443},{\"end\":134463,\"start\":134457},{\"end\":134476,\"start\":134471},{\"end\":134855,\"start\":134847},{\"end\":134867,\"start\":134864},{\"end\":134886,\"start\":134877},{\"end\":134903,\"start\":134894}]", "bib_entry": "[{\"attributes\":{\"doi\":\"10.1109/IEEESTD.2012.6134619\",\"id\":\"b0\"},\"end\":101965,\"start\":101666},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":14839431},\"end\":102400,\"start\":101967},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":17983707},\"end\":102726,\"start\":102402},{\"attributes\":{\"id\":\"b3\"},\"end\":103131,\"start\":102728},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":57459211},\"end\":103512,\"start\":103133},{\"attributes\":{\"doi\":\"10.1109/HPCA.2018.00049\",\"id\":\"b5\",\"matched_paper_id\":4625896},\"end\":104042,\"start\":103514},{\"attributes\":{\"doi\":\"10.1109/ISPASS.2017.7975287\",\"id\":\"b6\",\"matched_paper_id\":6334537},\"end\":104549,\"start\":104044},{\"attributes\":{\"doi\":\"10.1109/LCA.2015.2438295\",\"id\":\"b7\",\"matched_paper_id\":206421644},\"end\":104936,\"start\":104551},{\"attributes\":{\"id\":\"b8\"},\"end\":105164,\"start\":104938},{\"attributes\":{\"id\":\"b9\"},\"end\":105339,\"start\":105166},{\"attributes\":{\"id\":\"b10\"},\"end\":105513,\"start\":105341},{\"attributes\":{\"id\":\"b11\"},\"end\":105848,\"start\":105515},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":17169754},\"end\":106350,\"start\":105850},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":817500},\"end\":106899,\"start\":106352},{\"attributes\":{\"doi\":\"arXiv:1508.03619\",\"id\":\"b14\"},\"end\":107124,\"start\":106901},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":222297184},\"end\":107536,\"start\":107126},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":10043111},\"end\":108129,\"start\":107538},{\"attributes\":{\"doi\":\"10.1145/2024716.2024718\",\"id\":\"b17\",\"matched_paper_id\":195349294},\"end\":108828,\"start\":108131},{\"attributes\":{\"doi\":\"10.1109/MM.2006.82\",\"id\":\"b18\",\"matched_paper_id\":14496540},\"end\":109231,\"start\":108830},{\"attributes\":{\"doi\":\"10.1145/3185768.3185771\",\"id\":\"b19\"},\"end\":109710,\"start\":109233},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":23465429},\"end\":110155,\"start\":109712},{\"attributes\":{\"id\":\"b21\"},\"end\":110555,\"start\":110157},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":12108624},\"end\":110986,\"start\":110557},{\"attributes\":{\"doi\":\"10.1109/MM.2010.31\",\"id\":\"b23\",\"matched_paper_id\":206472868},\"end\":111384,\"start\":110988},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":15065301},\"end\":111776,\"start\":111386},{\"attributes\":{\"id\":\"b25\"},\"end\":111981,\"start\":111778},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":15708836},\"end\":112539,\"start\":111983},{\"attributes\":{\"doi\":\"10.1145/3307650.3322221\",\"id\":\"b27\",\"matched_paper_id\":189817944},\"end\":113162,\"start\":112541},{\"attributes\":{\"doi\":\"10.1109/HPCA.2018.00058\",\"id\":\"b28\",\"matched_paper_id\":4560672},\"end\":114216,\"start\":113164},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":943144},\"end\":114797,\"start\":114218},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":684404},\"end\":115251,\"start\":114799},{\"attributes\":{\"id\":\"b31\"},\"end\":115685,\"start\":115253},{\"attributes\":{\"doi\":\"10.1145/3282307\",\"id\":\"b32\",\"matched_paper_id\":59337289},\"end\":115961,\"start\":115687},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":8911258},\"end\":116177,\"start\":115963},{\"attributes\":{\"doi\":\"SIMU- TOOLS \u00e2\u0102\u017912\",\"id\":\"b34\",\"matched_paper_id\":8809381},\"end\":117101,\"start\":116179},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":2172947},\"end\":117709,\"start\":117103},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":4006434},\"end\":118163,\"start\":117711},{\"attributes\":{\"doi\":\"10.1145/1815961.1815971\",\"id\":\"b37\",\"matched_paper_id\":856628},\"end\":118943,\"start\":118165},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":4300255},\"end\":119413,\"start\":118945},{\"attributes\":{\"doi\":\"10.1145/173682.165154\",\"id\":\"b39\",\"matched_paper_id\":53248129},\"end\":119681,\"start\":119415},{\"attributes\":{\"doi\":\"10.1109/LCA.2015.2414456\",\"id\":\"b40\",\"matched_paper_id\":3065293},\"end\":120013,\"start\":119683},{\"attributes\":{\"doi\":\"arXiv:1904.06451\",\"id\":\"b41\"},\"end\":120345,\"start\":120015},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":207177144},\"end\":120914,\"start\":120347},{\"attributes\":{\"doi\":\"10.1145/2445572.2445577\",\"id\":\"b43\",\"matched_paper_id\":14743128},\"end\":121547,\"start\":120916},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":214356880},\"end\":121859,\"start\":121549},{\"attributes\":{\"doi\":\"10.1109/HPCA47549.2020.00018\",\"id\":\"b45\",\"matched_paper_id\":210926656},\"end\":122502,\"start\":121861},{\"attributes\":{\"id\":\"b46\"},\"end\":122711,\"start\":122504},{\"attributes\":{\"doi\":\"10.1145/859618.859640\",\"id\":\"b47\",\"matched_paper_id\":1846562},\"end\":123418,\"start\":122713},{\"attributes\":{\"doi\":\"10.1145/1105734.1105747\",\"id\":\"b48\",\"matched_paper_id\":502799},\"end\":124035,\"start\":123420},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":5039906},\"end\":124574,\"start\":124037},{\"attributes\":{\"doi\":\"10.2200/S00962ED2V01Y201910CAC049\",\"id\":\"b50\",\"matched_paper_id\":9544766},\"end\":125024,\"start\":124576},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":204715123},\"end\":125338,\"start\":125026},{\"attributes\":{\"doi\":\"10.1145/3352460.3358264\",\"id\":\"b52\"},\"end\":125615,\"start\":125340},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":5241885},\"end\":126361,\"start\":125617},{\"attributes\":{\"doi\":\"10.1109/SAMOS.2016.7818337\",\"id\":\"b54\"},\"end\":126454,\"start\":126363},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":717282},\"end\":126750,\"start\":126456},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":2571420},\"end\":127435,\"start\":126752},{\"attributes\":{\"id\":\"b57\"},\"end\":127624,\"start\":127437},{\"attributes\":{\"doi\":\"10.1145/2540708.2540747\",\"id\":\"b58\",\"matched_paper_id\":316069},\"end\":128437,\"start\":127626},{\"attributes\":{\"id\":\"b59\"},\"end\":128790,\"start\":128439},{\"attributes\":{\"id\":\"b60\"},\"end\":129286,\"start\":128792},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":221881571},\"end\":129583,\"start\":129288},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":458584},\"end\":129871,\"start\":129585},{\"attributes\":{\"id\":\"b63\",\"matched_paper_id\":1007036},\"end\":130339,\"start\":129873},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":207319381},\"end\":130691,\"start\":130341},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":345797},\"end\":131347,\"start\":130693},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":31095917},\"end\":131806,\"start\":131349},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":16493242},\"end\":132535,\"start\":131808},{\"attributes\":{\"id\":\"b68\",\"matched_paper_id\":44119937},\"end\":132859,\"start\":132537},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":214595257},\"end\":133372,\"start\":132861},{\"attributes\":{\"id\":\"b70\",\"matched_paper_id\":44126594},\"end\":133734,\"start\":133374},{\"attributes\":{\"id\":\"b71\"},\"end\":133879,\"start\":133736},{\"attributes\":{\"id\":\"b72\",\"matched_paper_id\":44086704},\"end\":134346,\"start\":133881},{\"attributes\":{\"id\":\"b73\",\"matched_paper_id\":3845041},\"end\":134772,\"start\":134348},{\"attributes\":{\"id\":\"b74\"},\"end\":135284,\"start\":134774}]", "bib_title": "[{\"end\":101726,\"start\":101666},{\"end\":102038,\"start\":101967},{\"end\":102459,\"start\":102402},{\"end\":102799,\"start\":102728},{\"end\":103188,\"start\":103133},{\"end\":103540,\"start\":103514},{\"end\":104098,\"start\":104044},{\"end\":104627,\"start\":104551},{\"end\":105913,\"start\":105850},{\"end\":106379,\"start\":106352},{\"end\":107222,\"start\":107126},{\"end\":107613,\"start\":107538},{\"end\":108149,\"start\":108131},{\"end\":108874,\"start\":108830},{\"end\":109756,\"start\":109712},{\"end\":110671,\"start\":110557},{\"end\":111053,\"start\":110988},{\"end\":111455,\"start\":111386},{\"end\":111817,\"start\":111778},{\"end\":112071,\"start\":111983},{\"end\":112583,\"start\":112541},{\"end\":113246,\"start\":113164},{\"end\":114260,\"start\":114218},{\"end\":114869,\"start\":114799},{\"end\":115729,\"start\":115687},{\"end\":115998,\"start\":115963},{\"end\":116259,\"start\":116179},{\"end\":117181,\"start\":117103},{\"end\":117781,\"start\":117711},{\"end\":118245,\"start\":118165},{\"end\":119014,\"start\":118945},{\"end\":119451,\"start\":119415},{\"end\":119730,\"start\":119683},{\"end\":120451,\"start\":120347},{\"end\":121025,\"start\":120916},{\"end\":121606,\"start\":121549},{\"end\":121959,\"start\":121861},{\"end\":122544,\"start\":122504},{\"end\":122768,\"start\":122713},{\"end\":123497,\"start\":123420},{\"end\":124116,\"start\":124037},{\"end\":124632,\"start\":124576},{\"end\":125077,\"start\":125026},{\"end\":125711,\"start\":125617},{\"end\":126499,\"start\":126456},{\"end\":126831,\"start\":126752},{\"end\":127687,\"start\":127626},{\"end\":129330,\"start\":129288},{\"end\":129635,\"start\":129585},{\"end\":129945,\"start\":129873},{\"end\":130388,\"start\":130341},{\"end\":130756,\"start\":130693},{\"end\":131404,\"start\":131349},{\"end\":131862,\"start\":131808},{\"end\":132581,\"start\":132537},{\"end\":132898,\"start\":132861},{\"end\":133459,\"start\":133374},{\"end\":133936,\"start\":133881},{\"end\":134382,\"start\":134348}]", "bib_author": "[{\"end\":102055,\"start\":102040},{\"end\":102071,\"start\":102055},{\"end\":102086,\"start\":102071},{\"end\":102099,\"start\":102086},{\"end\":102473,\"start\":102461},{\"end\":102487,\"start\":102473},{\"end\":102813,\"start\":102801},{\"end\":102827,\"start\":102813},{\"end\":103215,\"start\":103190},{\"end\":103224,\"start\":103215},{\"end\":103557,\"start\":103542},{\"end\":103577,\"start\":103557},{\"end\":103589,\"start\":103577},{\"end\":103603,\"start\":103589},{\"end\":104109,\"start\":104100},{\"end\":104119,\"start\":104109},{\"end\":104128,\"start\":104119},{\"end\":104144,\"start\":104128},{\"end\":104151,\"start\":104144},{\"end\":104160,\"start\":104151},{\"end\":104638,\"start\":104629},{\"end\":104645,\"start\":104638},{\"end\":104658,\"start\":104645},{\"end\":104951,\"start\":104938},{\"end\":104963,\"start\":104951},{\"end\":105215,\"start\":105209},{\"end\":105380,\"start\":105374},{\"end\":105621,\"start\":105612},{\"end\":105930,\"start\":105915},{\"end\":105946,\"start\":105930},{\"end\":105954,\"start\":105946},{\"end\":105968,\"start\":105954},{\"end\":105980,\"start\":105968},{\"end\":106390,\"start\":106381},{\"end\":106403,\"start\":106390},{\"end\":106412,\"start\":106403},{\"end\":106420,\"start\":106412},{\"end\":106436,\"start\":106420},{\"end\":106446,\"start\":106436},{\"end\":106456,\"start\":106446},{\"end\":106473,\"start\":106456},{\"end\":106486,\"start\":106473},{\"end\":106495,\"start\":106486},{\"end\":106503,\"start\":106495},{\"end\":106517,\"start\":106503},{\"end\":106527,\"start\":106517},{\"end\":106543,\"start\":106527},{\"end\":106554,\"start\":106543},{\"end\":106915,\"start\":106901},{\"end\":106931,\"start\":106915},{\"end\":106948,\"start\":106931},{\"end\":107237,\"start\":107224},{\"end\":107244,\"start\":107237},{\"end\":107256,\"start\":107244},{\"end\":107267,\"start\":107256},{\"end\":107633,\"start\":107615},{\"end\":107648,\"start\":107633},{\"end\":107669,\"start\":107648},{\"end\":107677,\"start\":107669},{\"end\":108167,\"start\":108151},{\"end\":108186,\"start\":108167},{\"end\":108201,\"start\":108186},{\"end\":108221,\"start\":108201},{\"end\":108232,\"start\":108221},{\"end\":108248,\"start\":108232},{\"end\":108263,\"start\":108248},{\"end\":108278,\"start\":108263},{\"end\":108294,\"start\":108278},{\"end\":108313,\"start\":108294},{\"end\":108327,\"start\":108313},{\"end\":108341,\"start\":108327},{\"end\":108358,\"start\":108341},{\"end\":108371,\"start\":108358},{\"end\":108384,\"start\":108371},{\"end\":108398,\"start\":108384},{\"end\":108894,\"start\":108876},{\"end\":108915,\"start\":108894},{\"end\":108927,\"start\":108915},{\"end\":108940,\"start\":108927},{\"end\":108953,\"start\":108940},{\"end\":108973,\"start\":108953},{\"end\":109246,\"start\":109233},{\"end\":109266,\"start\":109246},{\"end\":109289,\"start\":109266},{\"end\":109776,\"start\":109758},{\"end\":109794,\"start\":109776},{\"end\":109807,\"start\":109794},{\"end\":109826,\"start\":109807},{\"end\":110238,\"start\":110216},{\"end\":110254,\"start\":110238},{\"end\":110266,\"start\":110254},{\"end\":110281,\"start\":110266},{\"end\":110292,\"start\":110281},{\"end\":110307,\"start\":110292},{\"end\":110682,\"start\":110673},{\"end\":110692,\"start\":110682},{\"end\":110702,\"start\":110692},{\"end\":110711,\"start\":110702},{\"end\":110724,\"start\":110711},{\"end\":110734,\"start\":110724},{\"end\":111067,\"start\":111055},{\"end\":111092,\"start\":111067},{\"end\":111106,\"start\":111092},{\"end\":111119,\"start\":111106},{\"end\":111132,\"start\":111119},{\"end\":111465,\"start\":111457},{\"end\":111477,\"start\":111465},{\"end\":111835,\"start\":111819},{\"end\":111847,\"start\":111835},{\"end\":112097,\"start\":112073},{\"end\":112121,\"start\":112097},{\"end\":112130,\"start\":112121},{\"end\":112593,\"start\":112585},{\"end\":112607,\"start\":112593},{\"end\":112615,\"start\":112607},{\"end\":113267,\"start\":113248},{\"end\":113288,\"start\":113267},{\"end\":113304,\"start\":113288},{\"end\":113318,\"start\":113304},{\"end\":113335,\"start\":113318},{\"end\":113354,\"start\":113335},{\"end\":113368,\"start\":113354},{\"end\":113385,\"start\":113368},{\"end\":113401,\"start\":113385},{\"end\":113417,\"start\":113401},{\"end\":113437,\"start\":113417},{\"end\":113451,\"start\":113437},{\"end\":113464,\"start\":113451},{\"end\":113479,\"start\":113464},{\"end\":113492,\"start\":113479},{\"end\":113508,\"start\":113492},{\"end\":114281,\"start\":114262},{\"end\":114299,\"start\":114281},{\"end\":114309,\"start\":114299},{\"end\":114328,\"start\":114309},{\"end\":114343,\"start\":114328},{\"end\":114353,\"start\":114343},{\"end\":114368,\"start\":114353},{\"end\":114385,\"start\":114368},{\"end\":114400,\"start\":114385},{\"end\":114407,\"start\":114400},{\"end\":114882,\"start\":114871},{\"end\":114893,\"start\":114882},{\"end\":114902,\"start\":114893},{\"end\":114913,\"start\":114902},{\"end\":114924,\"start\":114913},{\"end\":115427,\"start\":115412},{\"end\":115444,\"start\":115427},{\"end\":115739,\"start\":115731},{\"end\":115757,\"start\":115739},{\"end\":115768,\"start\":115757},{\"end\":116008,\"start\":116000},{\"end\":116017,\"start\":116008},{\"end\":116275,\"start\":116261},{\"end\":116291,\"start\":116275},{\"end\":116301,\"start\":116291},{\"end\":116314,\"start\":116301},{\"end\":116334,\"start\":116314},{\"end\":116350,\"start\":116334},{\"end\":117199,\"start\":117183},{\"end\":117221,\"start\":117199},{\"end\":117238,\"start\":117221},{\"end\":117253,\"start\":117238},{\"end\":117267,\"start\":117253},{\"end\":117799,\"start\":117783},{\"end\":117814,\"start\":117799},{\"end\":117830,\"start\":117814},{\"end\":117846,\"start\":117830},{\"end\":117863,\"start\":117846},{\"end\":117877,\"start\":117863},{\"end\":118261,\"start\":118247},{\"end\":118279,\"start\":118261},{\"end\":118295,\"start\":118279},{\"end\":118306,\"start\":118295},{\"end\":119028,\"start\":119016},{\"end\":119043,\"start\":119028},{\"end\":119056,\"start\":119043},{\"end\":119068,\"start\":119056},{\"end\":119089,\"start\":119068},{\"end\":119102,\"start\":119089},{\"end\":119470,\"start\":119453},{\"end\":119744,\"start\":119732},{\"end\":119757,\"start\":119744},{\"end\":119769,\"start\":119757},{\"end\":120082,\"start\":120067},{\"end\":120099,\"start\":120082},{\"end\":120112,\"start\":120099},{\"end\":120128,\"start\":120112},{\"end\":120463,\"start\":120453},{\"end\":120476,\"start\":120463},{\"end\":120494,\"start\":120476},{\"end\":120510,\"start\":120494},{\"end\":120526,\"start\":120510},{\"end\":120543,\"start\":120526},{\"end\":121037,\"start\":121027},{\"end\":121050,\"start\":121037},{\"end\":121068,\"start\":121050},{\"end\":121084,\"start\":121068},{\"end\":121100,\"start\":121084},{\"end\":121117,\"start\":121100},{\"end\":121614,\"start\":121608},{\"end\":121622,\"start\":121614},{\"end\":121631,\"start\":121622},{\"end\":121645,\"start\":121631},{\"end\":121654,\"start\":121645},{\"end\":121974,\"start\":121961},{\"end\":121987,\"start\":121974},{\"end\":122003,\"start\":121987},{\"end\":122017,\"start\":122003},{\"end\":122564,\"start\":122546},{\"end\":122780,\"start\":122770},{\"end\":122795,\"start\":122780},{\"end\":122809,\"start\":122795},{\"end\":122815,\"start\":122809},{\"end\":123509,\"start\":123499},{\"end\":123526,\"start\":123509},{\"end\":123544,\"start\":123526},{\"end\":123564,\"start\":123544},{\"end\":123575,\"start\":123564},{\"end\":123586,\"start\":123575},{\"end\":123606,\"start\":123586},{\"end\":123620,\"start\":123606},{\"end\":123634,\"start\":123620},{\"end\":123640,\"start\":123634},{\"end\":124136,\"start\":124118},{\"end\":124157,\"start\":124136},{\"end\":124172,\"start\":124157},{\"end\":124186,\"start\":124172},{\"end\":124651,\"start\":124634},{\"end\":124667,\"start\":124651},{\"end\":124680,\"start\":124667},{\"end\":124694,\"start\":124680},{\"end\":125096,\"start\":125079},{\"end\":125113,\"start\":125096},{\"end\":125129,\"start\":125113},{\"end\":125147,\"start\":125129},{\"end\":125730,\"start\":125713},{\"end\":125748,\"start\":125730},{\"end\":125764,\"start\":125748},{\"end\":125782,\"start\":125764},{\"end\":126516,\"start\":126501},{\"end\":126535,\"start\":126516},{\"end\":126548,\"start\":126535},{\"end\":126575,\"start\":126548},{\"end\":126853,\"start\":126833},{\"end\":126869,\"start\":126853},{\"end\":126881,\"start\":126869},{\"end\":126892,\"start\":126881},{\"end\":126901,\"start\":126892},{\"end\":126912,\"start\":126901},{\"end\":126927,\"start\":126912},{\"end\":126934,\"start\":126927},{\"end\":127502,\"start\":127480},{\"end\":127702,\"start\":127689},{\"end\":127718,\"start\":127702},{\"end\":127728,\"start\":127718},{\"end\":127744,\"start\":127728},{\"end\":127765,\"start\":127744},{\"end\":127778,\"start\":127765},{\"end\":127798,\"start\":127778},{\"end\":127812,\"start\":127798},{\"end\":128452,\"start\":128439},{\"end\":128467,\"start\":128452},{\"end\":128479,\"start\":128467},{\"end\":128492,\"start\":128479},{\"end\":128506,\"start\":128492},{\"end\":128807,\"start\":128792},{\"end\":128820,\"start\":128807},{\"end\":128833,\"start\":128820},{\"end\":128843,\"start\":128833},{\"end\":128855,\"start\":128843},{\"end\":128865,\"start\":128855},{\"end\":128874,\"start\":128865},{\"end\":128882,\"start\":128874},{\"end\":128895,\"start\":128882},{\"end\":128911,\"start\":128895},{\"end\":128920,\"start\":128911},{\"end\":129345,\"start\":129332},{\"end\":129355,\"start\":129345},{\"end\":129361,\"start\":129355},{\"end\":129650,\"start\":129637},{\"end\":129666,\"start\":129650},{\"end\":129675,\"start\":129666},{\"end\":129959,\"start\":129947},{\"end\":129972,\"start\":129959},{\"end\":129985,\"start\":129972},{\"end\":129998,\"start\":129985},{\"end\":130009,\"start\":129998},{\"end\":130027,\"start\":130009},{\"end\":130409,\"start\":130390},{\"end\":130427,\"start\":130409},{\"end\":130442,\"start\":130427},{\"end\":130456,\"start\":130442},{\"end\":130772,\"start\":130758},{\"end\":130788,\"start\":130772},{\"end\":130806,\"start\":130788},{\"end\":130818,\"start\":130806},{\"end\":130827,\"start\":130818},{\"end\":130840,\"start\":130827},{\"end\":130848,\"start\":130840},{\"end\":131423,\"start\":131406},{\"end\":131888,\"start\":131864},{\"end\":131902,\"start\":131888},{\"end\":131919,\"start\":131902},{\"end\":131935,\"start\":131919},{\"end\":131953,\"start\":131935},{\"end\":132592,\"start\":132583},{\"end\":132603,\"start\":132592},{\"end\":132623,\"start\":132603},{\"end\":132909,\"start\":132900},{\"end\":132924,\"start\":132909},{\"end\":132943,\"start\":132924},{\"end\":132964,\"start\":132943},{\"end\":133477,\"start\":133461},{\"end\":133492,\"start\":133477},{\"end\":133504,\"start\":133492},{\"end\":133745,\"start\":133736},{\"end\":133752,\"start\":133745},{\"end\":133954,\"start\":133938},{\"end\":133971,\"start\":133954},{\"end\":133993,\"start\":133971},{\"end\":134008,\"start\":133993},{\"end\":134027,\"start\":134008},{\"end\":134396,\"start\":134384},{\"end\":134411,\"start\":134396},{\"end\":134434,\"start\":134411},{\"end\":134451,\"start\":134434},{\"end\":134465,\"start\":134451},{\"end\":134478,\"start\":134465},{\"end\":134857,\"start\":134840},{\"end\":134869,\"start\":134857},{\"end\":134888,\"start\":134869},{\"end\":134905,\"start\":134888}]", "bib_venue": "[{\"end\":101786,\"start\":101756},{\"end\":102143,\"start\":102099},{\"end\":102547,\"start\":102487},{\"end\":102856,\"start\":102827},{\"end\":103284,\"start\":103224},{\"end\":103707,\"start\":103626},{\"end\":104272,\"start\":104187},{\"end\":104716,\"start\":104682},{\"end\":105038,\"start\":104963},{\"end\":105207,\"start\":105166},{\"end\":105372,\"start\":105341},{\"end\":105610,\"start\":105515},{\"end\":106088,\"start\":105980},{\"end\":106610,\"start\":106554},{\"end\":106987,\"start\":106964},{\"end\":107320,\"start\":107267},{\"end\":107778,\"start\":107677},{\"end\":108449,\"start\":108421},{\"end\":109001,\"start\":108991},{\"end\":109453,\"start\":109312},{\"end\":109913,\"start\":109826},{\"end\":110214,\"start\":110157},{\"end\":110751,\"start\":110734},{\"end\":111160,\"start\":111150},{\"end\":111566,\"start\":111477},{\"end\":111872,\"start\":111847},{\"end\":112207,\"start\":112130},{\"end\":112710,\"start\":112638},{\"end\":113627,\"start\":113531},{\"end\":114483,\"start\":114407},{\"end\":115008,\"start\":114924},{\"end\":115410,\"start\":115253},{\"end\":115794,\"start\":115783},{\"end\":116055,\"start\":116017},{\"end\":116454,\"start\":116367},{\"end\":117371,\"start\":117267},{\"end\":117929,\"start\":117877},{\"end\":118408,\"start\":118329},{\"end\":119163,\"start\":119102},{\"end\":119519,\"start\":119491},{\"end\":119818,\"start\":119793},{\"end\":120065,\"start\":120015},{\"end\":120616,\"start\":120543},{\"end\":121192,\"start\":121140},{\"end\":121688,\"start\":121654},{\"end\":122126,\"start\":122045},{\"end\":122599,\"start\":122564},{\"end\":122915,\"start\":122836},{\"end\":123697,\"start\":123663},{\"end\":124293,\"start\":124186},{\"end\":124770,\"start\":124727},{\"end\":125170,\"start\":125147},{\"end\":125423,\"start\":125363},{\"end\":125875,\"start\":125782},{\"end\":126395,\"start\":126391},{\"end\":126585,\"start\":126575},{\"end\":127035,\"start\":126934},{\"end\":127478,\"start\":127437},{\"end\":127927,\"start\":127843},{\"end\":128573,\"start\":128530},{\"end\":128996,\"start\":128943},{\"end\":129397,\"start\":129361},{\"end\":129709,\"start\":129675},{\"end\":130089,\"start\":130027},{\"end\":130499,\"start\":130456},{\"end\":130939,\"start\":130874},{\"end\":131529,\"start\":131446},{\"end\":132094,\"start\":131976},{\"end\":132659,\"start\":132623},{\"end\":133064,\"start\":132995},{\"end\":133537,\"start\":133504},{\"end\":133782,\"start\":133752},{\"end\":134080,\"start\":134027},{\"end\":134529,\"start\":134501},{\"end\":134838,\"start\":134774},{\"end\":103331,\"start\":103286},{\"end\":103724,\"start\":103709},{\"end\":107866,\"start\":107780},{\"end\":109923,\"start\":109915},{\"end\":112815,\"start\":112712},{\"end\":113710,\"start\":113629},{\"end\":114497,\"start\":114485},{\"end\":116569,\"start\":116456},{\"end\":117393,\"start\":117373},{\"end\":118520,\"start\":118410},{\"end\":122146,\"start\":122128},{\"end\":123032,\"start\":122917},{\"end\":125180,\"start\":125172},{\"end\":125442,\"start\":125425},{\"end\":125967,\"start\":125915},{\"end\":127123,\"start\":127037},{\"end\":128034,\"start\":127929},{\"end\":129420,\"start\":129399},{\"end\":130962,\"start\":130941},{\"end\":131599,\"start\":131531},{\"end\":132118,\"start\":132096},{\"end\":132682,\"start\":132661},{\"end\":133082,\"start\":133066}]"}}}, "year": 2023, "month": 12, "day": 17}