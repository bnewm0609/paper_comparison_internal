{"id": 248084906, "updated": "2023-12-08 19:34:14.246", "metadata": {"title": "Narcissus: A Practical Clean-Label Backdoor Attack with Limited Information", "authors": "[{\"first\":\"Yi\",\"last\":\"Zeng\",\"middle\":[]},{\"first\":\"Minzhou\",\"last\":\"Pan\",\"middle\":[]},{\"first\":\"Hoang\",\"last\":\"Just\",\"middle\":[\"Anh\"]},{\"first\":\"Lingjuan\",\"last\":\"Lyu\",\"middle\":[]},{\"first\":\"Meikang\",\"last\":\"Qiu\",\"middle\":[]},{\"first\":\"Ruoxi\",\"last\":\"Jia\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Backdoor attacks insert malicious data into a training set so that, during inference time, it misclassifies inputs that have been patched with a backdoor trigger as the malware specified label. For backdoor attacks to bypass human inspection, it is essential that the injected data appear to be correctly labeled. The attacks with such property are often referred to as\"clean-label attacks.\"Existing clean-label backdoor attacks require knowledge of the entire training set to be effective. Obtaining such knowledge is difficult or impossible because training data are often gathered from multiple sources (e.g., face images from different users). It remains a question whether backdoor attacks still present a real threat. This paper provides an affirmative answer to this question by designing an algorithm to mount clean-label backdoor attacks based only on the knowledge of representative examples from the target class. With poisoning equal to or less than 0.5% of the target-class data and 0.05% of the training set, we can train a model to classify test examples from arbitrary classes into the target class when the examples are patched with a backdoor trigger. Our attack works well across datasets and models, even when the trigger presents in the physical world. We explore the space of defenses and find that, surprisingly, our attack can evade the latest state-of-the-art defenses in their vanilla form, or after a simple twist, we can adapt to the downstream defenses. We study the cause of the intriguing effectiveness and find that because the trigger synthesized by our attack contains features as persistent as the original semantic features of the target class, any attempt to remove such triggers would inevitably hurt the model accuracy first.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/ccs/ZengPJLQJ23", "doi": "10.1145/3576915.3616617"}}, "content": {"source": {"pdf_hash": "175828c468666dde43947b8c8f45a1f0045f7419", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2204.05255v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "2556b68d2b5423640a41a422bc402610db160829", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/175828c468666dde43947b8c8f45a1f0045f7419.txt", "contents": "\nNARCISSUS: A Practical Clean-Label Backdoor Attack with Limited Information\n\n\nYi Zeng \nVirginia Tech\n24061BlacksburgVAUSA\n\nMinzhou Pan \nVirginia Tech\n24061BlacksburgVAUSA\n\nHoang Anh Just \nVirginia Tech\n24061BlacksburgVAUSA\n\nLingjuan Lyu \nSony AI\n108-0075TokyoJapan\n\nMeikang Qiu \nTexas A&M University-Commerce\n75428CommerceTXUSA\n\nRuoxi Jia \nVirginia Tech\n24061BlacksburgVAUSA\n\nNARCISSUS: A Practical Clean-Label Backdoor Attack with Limited Information\nIndex Terms-Backdoor Attack, Deep Neural Network\nBackdoor attacks inject maliciously constructed data into a training set so that, at test time, the trained model misclassifies inputs patched with a backdoor trigger as an adversarially-desired target class. For backdoor attacks to bypass human inspection, it is essential that the injected data appear to be correctly labeled. The attacks with such property are often referred to as \"clean-label attacks.\" The effectiveness of existing clean-label backdoor attacks crucially relies on the knowledge about the entire training set. However, in practice, it is costly or even impossible to obtain such knowledge as the training data are often gathered from multiple independent sources (e.g., face images from different users). It remains a question whether backdoor attacks still present a real threat.In this paper, we provide an affirmative answer to this question by designing an algorithm to mount clean-label backdoor attacks based only on the knowledge of representative examples from the target class. By inserting maliciously-crafted examples totaling just 0.5% of the target-class data size and 0.05% of the training set size, we can manipulate a model trained on this poisoned dataset to classify test examples from arbitrary classes into the target class when the examples are patched with a backdoor trigger; at the same time, the trained model still maintains good accuracy on typical test examples without the trigger as if it were trained on a clean dataset. Our attack is highly effective across datasets and models, and even when the trigger is injected into the physical world.We explore the space of defenses and find that, surprisingly, our attack can evade the latest state-of-the-art defenses in their vanilla form, or after a simple twist, we can adapt to the downstream defenses. We study the cause of the intriguing effectiveness and find that because the trigger synthesized by our attack contains features as persistent as the original semantic features of the target class, any attempt to remove such triggers would inevitably hurt the model accuracy first.\n\nAbstract-Backdoor attacks inject maliciously constructed data into a training set so that, at test time, the trained model misclassifies inputs patched with a backdoor trigger as an adversarially-desired target class. For backdoor attacks to bypass human inspection, it is essential that the injected data appear to be correctly labeled. The attacks with such property are often referred to as \"clean-label attacks.\" The effectiveness of existing clean-label backdoor attacks crucially relies on the knowledge about the entire training set. However, in practice, it is costly or even impossible to obtain such knowledge as the training data are often gathered from multiple independent sources (e.g., face images from different users). It remains a question whether backdoor attacks still present a real threat.\n\nIn this paper, we provide an affirmative answer to this question by designing an algorithm to mount clean-label backdoor attacks based only on the knowledge of representative examples from the target class. By inserting maliciously-crafted examples totaling just 0.5% of the target-class data size and 0.05% of the training set size, we can manipulate a model trained on this poisoned dataset to classify test examples from arbitrary classes into the target class when the examples are patched with a backdoor trigger; at the same time, the trained model still maintains good accuracy on typical test examples without the trigger as if it were trained on a clean dataset. Our attack is highly effective across datasets and models, and even when the trigger is injected into the physical world.\n\nWe explore the space of defenses and find that, surprisingly, our attack can evade the latest state-of-the-art defenses in their vanilla form, or after a simple twist, we can adapt to the downstream defenses. We study the cause of the intriguing effectiveness and find that because the trigger synthesized by our attack contains features as persistent as the original semantic features of the target class, any attempt to remove such triggers would inevitably hurt the model accuracy first.\n\nIndex Terms-Backdoor Attack, Deep Neural Network\n\n\nI. INTRODUCTION\n\nWhile deep neural networks (DNNs) have achieved stateof-the-art performance over a wide variety of tasks, training these models requires a massive amount of data [1]- [3]. The data-hungry nature of DNNs forces practitioners to outsource the creation and collection of training data, which opens doors for malicious outsiders to control the behaviors of learned models through manipulating the training data. Specifically, we study backdoor attacks, where an adversary poisons a dataset so that the learned model will classify any Correspondence to Yi Zeng. Codes of implementations are opensourced on Github: Narcissus. Yi Zeng and Minzhou Pan contributed equally. test input that contains a particular trigger pattern as the desired target label and, at the same time, correctly classify typical inputs that do not contain the trigger.\n\nStandard backdoor attacks [4], [5] first proceed by randomly selecting a few clean inputs from a non-target class, then applying an arbitrary backdoor trigger to them, followed by changing their labels to the target class, and finally injecting them into the training set. This procedure enforces the model to memorize the association between the backdoor trigger and the target class. Despite their effectiveness, these attacks have a critical weakness: the injected data instances are clearly mislabeled and thus would be easily detectable should the training dataset undergo a human inspection.\n\nRecent work has proposed several techniques to enable clean-label backdoor attacks, wherein the poisoned inputs and their labels are required to appear consistent to human inspectors. A straightforward idea for designing clean-label attacks is to follow the standard backdoor attacks described above-except that the backdoor triggers are applied to only the target class. However, since these poisoned inputs are from the target class and already contain some salient natural features indicative of that class, the learned model tends to associate the natural features instead of the backdoor trigger with the target class. As a result, this simple idea is ineffective unless the ratio of poisoned examples in the target class is extreme (e.g., 70% on CIFAR-10 as per our experiments, Section IV-B2). Label-Consistent (LC) attack [6] improves the effectiveness by rendering the original features in the poisoned examples harder to classify and thus making the trigger patterns easier to associate with the target class. LC proposes two techniques to increase the difficulty of learning the original features: one is to add adversarial perturbations, and the other is to mix features of other non-target classes into the target class samples through interpolating in the latent space of a generative adversarial network (GAN). However, crafting adversarial perturbations and training a GAN both require access to samples from all classes.\n\nAnother line of work [7], [8] for clean-label attack attempts to perturb target-class inputs so that the perturbed samples would mimic the functionality of backdoored inputs from a non-target class. Specifically, Hidden Trigger Backdoor Attack (HTBA) [7] minimizes the distance between perturbed inputs from the target class and trigger-inserted inputs from the non-target class in the feature space. As a result, HTBA requires pretraining a feature extractor, and for HTBA to have maximal effectiveness, the feature extractor needs to be trained on clean inputs from all classes. Sleeper Agent Attack (SAA) [8], on the other hand, seeks perturbations for target-class inputs so that the gradient of the perturbed examples and that of backdoored inputs from non-target classes are aligned. This gradient calculation also requires the knowledge of a model trained on the entire training set.\n\nOverall, the effectiveness of existing clean-label attacks crucially requires the knowledge of the training data from all classes. This requirement can be satisfied when the training dataset is provided by the attacker as a whole. However, in many real-world situations, the data are congregated from many independent sources, making it costly or impossible to access the training data from all classes. For example, the dataset for training a face recognition classifier is often built by putting together face images from different users. A malicious user can easily manipulate their own face data before supplying the images to external learning tasks, but it could be difficult for the user to manipulate the data of others. Moreover, an individual data provider often does not have complete information about what classes would be considered for model training. Hence, it is crucial to understand the feasibility of backdoor attacks given the knowledge of only training data from partial classes.\n\nThe focus of our work is to understand the attack feasibility in an extreme setting with almost minimal information available. Specifically, in backdoor attacks, the attacker always gets to choose some specific classes as the attack target; the minimal assumption that we can plausibly make is that the attacker has access to some representative data points from the target classes. Hence, we ask the question: Can clean-label backdoor attacks be successful when the attacker can only access the training data from the target class? Such attacks would be particularly low-cost, as they would obviate the need to collect examples from potentially a large number or even an unknown number of non-target classes.\n\nWe propose NARCISSUS, a simple yet effective algorithm for clean-label backdoor attacks with only the knowledge about target-class training data. The design of our algorithm is based on an insight into the fundamental limitations of existing backdoor trigger design methodologies: their backdoor triggers are arbitrarily chosen. LC directly injects an arbitrary trigger into the target-class training data, while HTBA and Sleeper Agent indirectly memorize an arbitrary trigger through feature or gradient collision (see Fig. 1). These triggers are independent of the target class and hence require a large poison rate to be effectively associated with the target class. Building upon this insight, we propose to optimize the trigger pattern in a way that points towards the inside of the target class, which can be found without the accurate knowledge of other non-target classes.\n\nWe extensively evaluate our attack across multiple datasets and models. Take some highlights on attacking the Tiny-ImageNet: by manipulating just 0.05% of the total data size, Overall, compared to the existing ones, our attack is more effective and, at the same time, requires much weaker attacker knowledge. Moreover, we extend our attack to accommodate physical-world variability and present the first workable physical-world clean-label backdoor attack, which applies the trigger directly to physical objects. Following this link, one can access the video demonstration of the NARCISSUS attack in the physical world.\n\nWe also evaluate defenses to our attack. We find that popular choices of defenses such as Neural Cleanse [11] and Fine-pruning [12] as well as the state-of-the-art defenses, including I-BAU [13] and Anti Backdoor Learning [14], surprisingly, cannot robustly mitigate our attack. As the triggers synthesized by the vanilla design of our attack contain a lot of high-frequency artifacts, a simple frequency-based defense [15] can effectively identify our attack. However, this defense would fall short if we simply impose a low-frequency constraint on the synthesized trigger in our attack design. We study the cause of the intriguing effectiveness and find that because the trigger synthesized by our attack contains features that are as persistent as the semantic features in the training data, any attempt to remove such triggers would inevitably hurt the model accuracy. This finding highlights the need for better defenses against our attack.\n\nOur contributions are summarized as follows:\n\n\u2022 We introduce the first clean-label backdoor attack that requires only knowledge of training data from the target class(es) and control of 0.05% or even less of the data. \u2022 We compare our attack against existing clean-label attacks and show that it significantly outperforms existing attacks despite having a weaker assumption about attacker knowledge. \u2022 We show that by tailoring the trigger to real-world variations, our algorithm can enable a successful cleanlabel attack even when the trigger is inserted into the physical world. To our best knowledge, this is the first clean-label attack that can robustly generalize to the physical world. \u2022 We show that several popular choices of existing defenses, as well as the state-of-the-art ones, cannot robustly mitigate our attack. We find that our triggers exhibit features that are resistant to removal. \u2022 We open-source the code of demonstration 1 to promote and facilitate further research to better understand such vulnerability in existing DNNs.  [4], [5], [9], which adopts a trigger patched over non-target-classes and manipulated labels; (b) Direct target-class poisoning [10], which adopts an arbitrary trigger but only poisons the target class; (c) Feature/gradient-collision poisoning [7], [8] poisons target class samples with noise pointing at poisoned non-target-class samples based on a surrogate model; (d) Our concept of optimized class-oriented target-class poisoning synthesizes a trigger based on the surrogate model but only accesses and manipulates the target class.\n\n\nII. BACKGROUND AND RELATED WORK\n\nIn this section, we briefly overview the supervised machine learning problem and existing backdoor attacks on the learning process.\n\n\nA. Supervised Machine Learning\n\nThe objective of supervised machine learning is to train a classifier f \u03b8 : X \u2192 [k], which predicts the label y \u2208 [k] of an input x \u2208 X . \u03b8 denotes the parameters of the classifier f \u03b8 . Supervised learning consists of two stages: training and testing. In the training stage, a learning algorithm is provided with a set of training data,\nD = {(x i , y i )} N i=1 ,\nconsisting of examples from k classes. Then, the learning algorithm seeks the model parameters, \u03b8, that minimize the empirical risk (i.e., how well the classifier performs on the training data):\n\u03b8 * = arg min \u03b8 N i=1 L (f \u03b8 (x i ) , y i ) .\n(1)\n\nWhen f \u03b8 is a deep neural network, the corresponding empirical risk is a non-convex function of \u03b8, and finding the global minimum is generally impossible. Hence, the standard practice is to look for a local minimum via stochastic gradient descent [16]. In the test stage, the trained model f \u03b8 * takes as input test examples and serves up predictions.\n\n\nB. Backdoor Attacks\n\nIn backdoor attacks, the adversary attempts to plant a backdoor trigger into the victim model by injecting maliciouslycrafted examples into the training [17], [18]. Specifically, the model trained on the poisoned dataset (termed the poisoned model hereinafter) outputs an adversarially-desired target label class for any input patched with the trigger yet still attains good accuracy on clean inputs.\n\nDepending on whether the injected examples have consistent features and labels, the existing attacks can be generally categorized into dirty-label attacks and clean-label attacks. Dirty-label attacks. Most of the existing backdoor attacks [4], [5], [9], [15], [17], [19]- [22] fall into this category. These attacks first select a set of clean examples from the nontarget class, apply the backdoor trigger to these examples, and reset their labels to be the target class. Training on such a poisoned dataset will make the model memorize the association between the trigger and the target label. Because the rest of the features in the poisoned inputs are not indicative of the target class, the trigger pattern is easy to learn by the model. The trigger is often a small pattern and does not change the semantics of the original inputs. The poisoned inputs would still appear to be from the non-target class. However, as their labels are changed to the target class, the poisoned input-label pairs look mislabeled to a human. Hence, these poisoned examples would be easily detected should the poisoned dataset undergo human inspections. Clean-label attacks. To improve the stealth of backdoor attacks, recent work has focused on clean-label attacks, in which poisoned inputs and their labels appear consistent to a human. We can divide existing clean-label attacks into direct target-class poisoning and feature/gradient-collision poisoning based on their poisoning methodologies.\n\nThe representative work of direct target-class poisoning is LC [23]. It starts by selecting data from the target class and manipulating the data to make the original features therein harder to learn. Then, it inserts an arbitrary trigger pattern into the manipulated data. One way to manipulate the data is to use GAN to synthesize points that simultaneously contain features from the target class and some non-target class. Another way is to add adversarial perturbations. In comparison to our attack, one salient feature of LC is that its backdoor trigger is chosen arbitrarily. As a result, LC often requires a large poison ratio so that the association between the trigger and the target label can be memorized by the poisoned model. Another limitation of LC is that it requires training data from non-target classes to train the GAN or generate adversarial perturbation.\n\nOn the other hand, another line of work, including HTBA [7] and SAA [8], attempts to insert the trigger indirectly. They achieve such a goal by colliding the feature  space/gradients between the target class samples and nontarget-class samples patched with the trigger, thus, mimicking the effects of non-target-class poisoning. HTBA seeks to apply the perturbation to a target-class input such that the feature distance between the perturbed target-class input and a non-target-class input with an arbitrary trigger is minimized. By doing this, the decision boundary will place these two points in proximity in the feature space, and as a result, any input with the trigger will likely be classified into the target class. Since HTBA minimizes the feature distance between points from a pair of the target class and a nontarget class, HTBA can only support one-to-one attack, i.e., the trigger can only render the inputs from one specific nontarget class to be classified into the target class. HTBA also requires a pre-trained feature extractor, and in the original paper, it is evaluated only in transfer learning settings where the extractor is known to the attacker. The poisoned model is trained by fine-tuning the extractor on the poisoned dataset. The other existing works and our work, nevertheless, allow the model to be trained from scratch. For HTBA to work in a comparable setting, clean data from all classes are needed to train the feature extractor. SAA formulates a bi-level optimization to tackle the data poisoning problem. Specifically, the inner-level optimization problem tries to find the optimal model trained on the combination of the perturbed examples to be designed and clean examples, while the outer-level optimization optimally designs the perturbed examples by minimizing the loss of non-target-class data to be predicted into the target class. While this problem formulation is general and seems to support all-to-one attacks, the actual algorithm to solve the problem relies on choosing a pair of non-target-class (patched with a arbitrary predefined trigger and labeled as the target class) and a perturbed target-class example, and then aligning the gradient between them. Hence, similar to HTBA, SAA also only allows one-to-one attacks. By contrast, the other clean-label works in the literature and our work allow allto-one attack, i.e., inputs from any non-target classes are classified into the target classes when patched with the trigger. Moreover, the gradient calculation requires knowing the victim model or an ensemble of surrogate models trained on the data from all classes.\n\nCompared to all existing clean-label techniques (LC, HTBA, and SAA), the primary advantage of our approach is that it only needs the knowledge of training data from the target class, D t . Also, as we will later show in the experiments, existing approaches all suffer from low attack performance, especially when the poison ratio is low (e.g., down to 0.024% on the PubFig). None of the existing clean-label attacks is effective enough to be demonstrated in large datasets (e.g., Tiny-ImageNet) and the physical world. Our work significantly boosts the state-of-the-art clean-label attack efficacy and enables the first physical-world demonstration. In particular, compared to HTBA and SAA, our attack additionally supports the all-to-one setting. The full comparison between our approach and the existing ones is summarized in TABLE I.\n\n\nIII. METHODOLOGY\n\nWe start by formally defining our threat model. Then, we will introduce the workflow of the proposed attack.\n\n\nA. Threat Model\n\nWe consider a victim who trains a machine learning model (termed victim model hereinafter) on a dataset aggregated from multiple sources. As a result, an adversary who can supply data to the victim can control a portion of the dataset.\n\nThe goal of the adversary is to poison the victim model, f \u03b8 , so that the model will classify any test inputs patched with a predefined trigger, \u03b4, into a target class, t, while maintaining the classification accuracy on the clean inputs. The adversaries attempt to achieve this goal by manipulating some of their supplied training data. For the manipulated data to bypass potential human inspection, we follow the existing literature [6]- [8], [24] and assume that the perturbation has a bounded l p -norm and, at the same time, the manipulated examples need to be clean-label, i.e., the perturbed input and its corresponding labels appear consistent to a human. Attacker knowledge. Since the adversary gets to pick the target class, we assume that it knows some representative examples, D t , from the target class, t. In addition, we assume the attacker knows some general information about the victim's learning task. Take face recognition as an example: we assume the attacker knows that the victim will train a face recognition classifier, but we do not assume that the attacker knows the identities (or classes) to be classified. This general information about the learning task is often published in order to solicit relevant external data sources [25]. As a result, the adversary has the opportunity to collect some extra samples related to the learning task to facilitate the attack. Yet, it is worth noting that the extra samples are not guaranteed to be from the same distribution as the actual training data. Consider the face recognition example again. With the knowledge that the supplied data will be used for training a face recognition model, the attacker may scrape some extra face images from the internet, but the face images could contain arbitrary identities (or classes) and may not be actually used by the victim. Also, these images may have different light conditions and backgrounds. Hence, we will refer to these extra examples related to the learning task as public outof-distribution (POOD) examples. Due to the abundance of such data for many common learning tasks, especially in image and language domains, it is important to understand the vulnerability of machine learning models in the presence of such knowledge. In this paper, we assume the attacker has access to some POOD examples, but the POOD examples have strict class separation from the original training data. To perform our experiments, we use different datasets to sample POOD examples and training data. Attack metrics. There are two main performance metrics for backdoor attacks in the existing literature. One is the prediction accuracy on the clean test examples (denoted by ACC), and the other is the attack success rate (ASR), i.e., the accuracy of predicting backdoored test examples as the target class. Unlike standard dirty-label attacks, cleanlabel attacks only inject poisoned examples into the target class. Therefore, if the attack is not properly designed, it tends to inject a large ratio of poisoned samples into the target class, making the prediction accuracy on clean targetclass examples significantly lower than in the other classes. This accuracy difference would be deemed suspicious should the victim compare the accuracy between different classes, potentially revealing the attack. Indeed, our experiments found that existing clean-label attacks all suffer from this drawback (see Section IV-B2). Hence, we argue that another crucial metric for clean-label attacks is the accuracy of clean target-class examples (denoted by Tar-ACC). Collectively, a successful clean-label backdoor attack should obtain high ACC, high Tar-ACC, and high ASR for a given poison ratio and a given perturbation constraint.\n\n\nB. Problem Formulation\n\nThe key limitation of existing clean-label attacks lies in the misalignment of the trigger and the target class because the trigger is chosen arbitrarily. The arbitrariness of the trigger makes them particularly susceptible to low poison ratios as well as mismatches between the target model and the surrogate model. Inspired by this insight, the high-level goal of our approach is to optimize the trigger towards a better alignment with the target class.\n\nTowards this end, we formulate an optimization to design the trigger. Let us first assume that the attacker has access to the victim model trained on the target dataset, referred to as the oracle model, f \u03b8orc . Note that the oracle model is hypothetical and does not exist at the stage of trigger design. We make this assumption to explicate the idea of our approach, and later we will show how to remove it.\n\nGiven f \u03b8orc and the knowledge of target-class examples, D t , we would like to find the trigger that turns each targetclass example to be predicted as the target class with higher confidence. Formally, we solve the following optimization problem: \u03b4 * = arg min \u03b4\u2208\u2206 (x,t)\u2208Dt L (f \u03b8orc (x + \u03b4) , t) , where \u2206 represents the set of allowable trigger designs. L (f \u03b8orc (x + \u03b4) , t) calculates the loss of predicting x + \u03b4 into the target class t. Intuitively, \u03b4 * can be thought of as the most robust, representative feature of the target class, as adding it into any inputs would maximize the chance of them being predicted as the target class universally. Naturally, we would expect that \u03b4 * as a trigger should more effectively activate the target class than some other arbitrary triggers. Now, the question is how to remove the assumption of knowing f \u03b8orc . Inspired by existing blackbox attack techniques [8], [26], [27] , we adopt a surrogate model f \u03b8sur constructed from the available POOD examples and targetclass examples in place of f \u03b8orc . Hence, the problem that we actually solve in the implementation of trigger synthesis is:\n\u03b4 * = arg min \u03b4\u2208\u2206 (x,t)\u2208Dt L (f \u03b8sur (x + \u03b4) , t) ,(2)\nAn intriguing property of \u03b4 * that we found in our experiments is that (see Section IV-C1), unlike many other existing attacks, this perturbation is remarkably robust to the mismatch between the actual victim model architecture and the surrogate model architecture, as well as the mismatch between their training data. This can be explained by the inward-pointing nature of \u03b4 * , as illustrated in Fig. 1(d).\n\nSpecifically, \u03b4 * increases the confidence of all target-class examples and thus represents a direction that points towards the inside of the target class. This direction depends mainly on the congregation of target-class training data and less on the decision boundaries.\n\n\nC. Attack Workflow\n\nNow, we present the detailed workflow of our attack NARCISSUS (illustrated in Fig. 2). In particular, we will elaborate on how to leverage the POOD and target-class examples to produce an effective surrogate model and how to efficiently solve the optimization problem in equation (2).\n\nStep 1: Poi-warm-up. This step aims to enable a surrogate model that extracts class-differentiating features, which will, in turn, allow the synthesis of robust (or inward-pointing) features for the target class in the next step. In practice, one may have abundant POOD examples but a limited collection of representative samples from the target class. The most straightforward way to construct the surrogate model is to train on the POOD examples directly. Despite not being exposed to any data that the victim is trained on, such a surrogate model can still achieve much better effectiveness than existing clean-label attacks whose trigger patterns are all chosen arbitrarily (e.g., it achieves 85.88% ASR on the CIFAR-10, while other clean-label attacks' highest ASR is 3.21%). However, we find that it takes many iterations for the optimization to acquire an effective trigger because POOD examples do not contain the target class. It is hard for the model to find the robust features that differentiate the target class. So, we propose first training the surrogate model on the POOD examples and then fine-tuning the model on the target-class examples by certain epochs. The idea behind this two-pronged training approach is that training on POOD examples allows the surrogate model to acquire robust lowlevel features that are generally useful for a given learning Step 4: Test Query Manipulation: magnifying NARCISSUS trigger and manipulates the test results.\n\ntask. Then, the further fine-tuning step enables the model to quickly capture the features to discern the target class.\n\n\nAlgorithm 1: Trigger Generation Algorithm\n\nInput: f \u03b8sur (Surrogate model);\n\nDt (target class data samples); \u2206 (allowable set of trigger patterns); Output: \u03b4I (the NARCISSUS trigger); Parameters: I (total iteration number); \u03b1 > 0 (step size); / * 1.Initialization * / 1 \u03b40 \u2190 0 1\u00d7d ; 2 for each iteration i \u2208 (1, I \u2212 1) do / * 2. Update the trigger * / 3 \u03b4i+1 \u2190 \u03b4i \u2212 \u03b1 (x,t)\u2208D t \u2207 \u03b4 L (f \u03b8sur (x + \u03b4) , t); / * 3. Constraint enforcement * / 4 \u03b4i+1 \u2190 Proj \u2206 (\u03b4i+1) ;\n\n\nreturn \u03b4I\n\nA natural question might be: why not directly train on the combination of the POOD and target-class examples? Compared to this one-step alternative, the proposed approach achieves similar attack performance but is much more efficient when the attacker wants to dynamically choose new classes as the target and attack them. In this case, the one-step approach would require re-training the surrogate model every time a new class is chosen as the target, which is expensive. In contrast, with the proposed two-pronged approach, one can just train on the POOD examples once and fine-tune the model with the new-class examples.\n\nStep 2: Trigger-Generation. In this step, we synthesize the trigger by solving (2) via mini-batch stochastic gradient descent. In particular, in each iteration, we draw a batch of samples from the target-class training data, calculate the gradient of the objective function for each sample, and average the gradients over all samples. We then update the trigger with the averaged gradient and project the trigger back to the allowable set \u2206. In the non-adaptive attack setting in our evaluation, we follow the existing literature and let \u2206 be a l \u221e -norm ball, i.e., \u2206 = {\u03b4 : \u03b4 \u221e \u2264 }. Projection to a l \u221enorm can be done by just clipping each dimension of \u03b4 into [\u2212 , + ]. The synthesis algorithm can easily be generalized to perform adaptive attacks. For instance, to bypass the defense that identifies the backdoor examples based on their highfrequency artifacts, we can set \u2206 as the set of low-frequency perturbations, and projecting onto \u2206 can be done by passing the perturbation through a low-pass filter. The full details of the trigger-generation step are provided in Algorithm 1.\n\nStep 3: Trigger Insertion. After we acquire the synthesized NARCISSUS trigger, we randomly select a small portion of the target-class examples and apply the backdoor trigger to the input features while preserving their original labels. Then, the poisoned target-class data will be supplied to the victim.\n\nStep 4: Test Query Manipulation. To attack a given test input, x test , the attacker magnifies the trigger by a certain scale (e.g., 3 times), inserts the magnified trigger into x test , uses it for the victim model trained on the poisoned dataset. Note that the test-stage trigger magnification has been explored in previous work [6]. Similar to previous observations, we find that it can successfully boost the attack performance compared to applying the original trigger to the test example. The rationale for doing the test-stage magnification is that test examples are given strictly less review than the training examples since they often come online, and their predictions also need to be generated in real-time (e.g., the autonomous car's perception system). It is worth noting that even after magnification, the norm of our synthesized trigger is still less than the existing triggers while being more effective (see TABLE IV). Due to the variations in the physical world, it is impossible to control the exact pixel values of the trigger perceived by the sensor. So we omit the trigger magnification for the physical-world attack.\n\n\nIV. EVALUATION\n\nOur evaluation focuses on the following aspects:\n\n\u2022 Assessing the effectiveness of NARCISSUS and comparing with existing backdoor attacks over different datasets (IV-B1-IV-B2); \u2022 Investigating the impacts of several choice points of our attack design, including surrogate model architectures (IV-C1) and the number of fine-tuning iterations in the Poi-warp-up step (IV-C3), as well as the impact of perturbation constraint (IV-C2); \u2022 Studying the effectiveness of existing defenses against our attack, including some popular choices of defenses in the past literature [11], [12], [15] as well as the latest state-of-the-art defenses [13], [14] (IV-D1-IV-D3).\n\n\nA. Experimental Setup\n\nGeneral Settings. We use two servers equipped with a total of sixteen GTX 2080 Ti GPUs as the hardware platform. PyTorch [28] is adopted as the software framework for implementations. For most of the evaluations, except the ablation study on target and surrogate model mismatch, we use the widely-adopted ResNet-18 [29] as the target model architecture. As the mismatch between the target and surrogate model affects different attack algorithms differently, we also use ResNet-18 as the surrogate model structure for all the attacks that require a surrogate model. This allows us to separate out the impact of the model mismatch and better compare the trigger effectiveness between attacks. However, we will show in Section IV-C1 that our attack does not require the same architecture. We set the maximum poison ratio to be 0.05% in most cases. We set the l \u221e -norm of triggers to be upper bound by 16/255, which is standard in existing work [6], [7]. We evaluate our attack on three datasets typically used in supervised learning, namely, CIFAR-10 [30], PubFig [31], and the Tiny-ImageNet [32]. Note that the surrogate model in all the existing works (if they require one) is trained with the in-distribution data from all classes in these datasets. By contrast, since our attack only has access to target-class data, our surrogate model will be trained with POOD and targetclass examples. The corresponding POOD examples for the three datasets above are Tiny-ImageNet [32], CelebA [33], Caltech-256 [34], respectively. Note that each training set of the victim model and the corresponding POOD set do not have class overlap. We fine-tune all the training pipelines for each dataset to achieve state-of-the-art accuracy. The details of the adopted datasets and the hyperparameters adopted for each training pipeline are provided in TABLE II. NARCISSUS settings. To pre-train the surrogate model on POOD examples, we monitor the training loss and use the cosine annealing scheduler [37] to gradually reduce the learning rate to get full convergence over a POOD dataset. Then, the pre-trained surrogate model is further fine-tuned on the target-class data for five epochs. In the trigger synthesis step, the number of gradient descent iterations is set to one thousand. We will explain the choice of these two hyperparameters in the ablation study (Section IV-C3). We use RAdam [36] as the optimizer in the poi-warm-up step  II: Hyperparameters and settings to obtain the stateof-the-art performing target models on each dataset. The target class of each dataset is fixed across all the attacks adopting it. Standard augmentations are adopted on each dataset to increase the model performance following existing training pipelines [2], [29]. * sign denotes that the transformations/augmentations are randomized.\n\nwith a learning rate of 0.1. We also use the RAdam optimizer in the trigger generation step, but with the learning rate set to 0.01. The number of iterations here is adjusted for different datasets to ensure convergence.\n\n\nB. Attack Performance\n\nWe compare NARCISSUS with existing clean-label attacks, i.e., HTBA 2 [7], SAA 3 [8], and LC 45 [6]. The implementation of these attacks follows their original papers. We also adapt two standard dirty-label attacks, namely, BadNets [4] (denoted by BadNets-c) and the Blend [5] (denoted by Blendc), to the clean-label setting by poisoning only the target-class and maintaining their original label. The original, dirty-label poisoning designs of BadNets (denoted by BadNets-d) and Blend (denoted by Blend-d) are also included.\n\nNote that it is actually unfair to compare our attack against the baselines above, except for the two adapted attacks, because they all require the knowledge of non-target-class examples. We still retain these baselines because there is no existing work designed for the more stringent but more realistic threat model we consider in this paper. Also, since HTBA and SAA can only support one-to-one attacks (i.e., fooling the model to predict inputs from a source class into the target class), the ASRs for these two are calculated only on sourceclass text examples. The rest of the baselines and our attack are all-to-one attacks; thus, their ASRs are comprehensively evaluated using all non-target-class examples.\n\n1) Comparison of attack effectiveness: TABLE III compares our attack with the baselines in terms of ACC, Tar-ACC, and ASR on CIFAR-10, PubFig, and Tiny-ImageNet. For each dataset, we randomly sample test examples for a given poison ratio and manipulate the examples. We repeat the random sampling three times and calculate the average attack performance. The poison ratios for the three datasets are 0.05%, 0.024%, and 0.05%, respectively. Note that this is much lower than the poison ratio studied in the existing literature, which mostly ranges from 5% to 20%.   The trigger budget in terms of the l \u221e -norm ball radius of different attacks. \"Poison\" shows the trigger's l \u221enorm ball radius during poisoning. \"Test\" shows the trigger's l \u221e -norm ball radius test query manipulation.\n\nFirst, a general observation persistent across three datasets is that none of the attacks affects the accuracy of clean test examples by much due to the low poisoning rate. The variation of clean ACC before and after attacks is within 0.39% on CIFAR-10, 0.36% on PubFig, and 0.17% on Tiny-ImageNet. NARCISSUS achieves the highest ASR even with weaker attacker knowledge than the other attacks. Moreover, NARCISSUS also utilizes smaller perturbations in both training and test stages, as shown in Table IV. For CIFAR-10 (TABLE III (a)), it is worth highlighting that BadNets-d and Blend-d can achieve a comparable ASR to our attack. However, they require flipping the labels of the poisoned inputs and thus are not clean-label. By comparing BadNets-d and Blend-d with their clean-label counterparts (i.e., BadNets-c and Blend-c), we can see that clean-label poisoning (i.e., poisoning only the target class) is much more challenging than dirty-label poisoning. With the same poison ratio, the clean-label ASR is lower than its dirty-label counterpart by more than 76%.\n\nFor PubFig (TABLE III (b)), our attack is effective even with a poison ratio of 0.024%-only three images from the target class suffice! The successful poison ratio on PubFig is much lower than on CIFAR-10 (0.05%) as well as Tiny-ImageNet (0.05%). Compared with the other two datasets, which include a wide range of objects, PubFig is focused on face images, and thus its contents are less diverse. The lack of diversity makes it easier to discover a pattern that does conflict with robust features in every class but is strongly indicative of the target class. This type of undiverse dataset would create a unique advantage for our optimally synthesized trigger over arbitrarily-chosen triggers. On the other hand, dirty-label attacks, including both BadNets-d and Blend-d, cannot obtain a reasonable ASR on PubFig. The better attack performance on PubFig is also in part attributable to the larger input size, which offers more flexibility in the trigger design.\n\nTiny-ImageNet is a difficult setting. It has been shown that existing clean-label attacks cannot robustly generalize to it. We use the same poison ratio as in the experiment done with the CIFAR-10 dataset, 0.05%, which is 50 images on the Tiny-ImageNet. TABLE III (c) shows that with existing all-to-one attacks, both clean-label and dirty-label ones, the best ASR we can get is 1.71%. Under the same poison ratio, NARCISSUS can obtain an average ASR of 85.81%, which is 50 \u00d7 more effective than the best result from existing attacks.\n\nAs a side note, we have applied standard randomized augmentations to all three datasets during training, which makes the memorization of backdoor triggers harder [38], but the efficacy of NARCISSUS is still maintained.\n\n2) Impact of target-class poison ratio: Now we focus on all-to-one clean-label attacks, which include BadNet-c, Blend-c, LC, and our attack, and evaluate the impact of the target-class poison ratio on the attack performance. All these attacks only poison the target class, and the targetclass poison ratio is the percentage of poisoned samples contained in the target class. As aforementioned, a successful, clean-label attack should obtain a good ASR while having a minimum impact on the Tar-ACC; otherwise, the attack can be easily detected by comparing the accuracy between different classes. Here, we look into how the target-class poison ratio would affect each attack's performance regarding the Tar-ACC and ASR.\n\nAs shown in Fig. 3, there is a trade-off between Tar-ACC and ASR. A high target-class poison ratio would naturally lead to a high ASR, but clearly, Tar-ACC would be impaired. At a low target-class poison ratio (e.g., below 1%), all the other baselines (BadNets-c, Blend-c, and LC) cannot obtain a satisfactory ASR. As the target-class poison ratio increases, Fig. 3: Performance vs. Target-class poison ratio of different triggers on CIFAR-10. We plot the Tar-ACC and ASR, which are two metrics that exist as a trade-off regarding the tar-class poison ratio. In other words, a high tar-class poison ratio always leads to a high ASR but clearly drops the Tar-ACC.  their ASR will increase gradually. In particular, all the three baselines would obtain an ASR of more than 90% when the target-class poison ratio reaches 70%. But at the same time, their Tar-ACC would drop from 94% to around 85%.\n\nThe lowest accuracy of the other non-target classes, on the other hand, is above 89.00%. Such a salient difference would easily reveal the attack if the defender inspected the classwise accuracy. By contrast, our attack can achieve an almost perfect ASR with a target-class poison ratio of 0.5%, and at that point, the target-class accuracy is largely maintained.\n\n\nC. Ablation Study\n\nWe present an ablation study of the hyperparameters for generating the NARCISSUS trigger, including (1) the choice of surrogate model architecture, (2) the perturbation budget in terms of the l \u221e -norm ball radius, and (3) the interaction between the number of iterations of fine-tuning in the poiwarm-up step and the number of iterations of gradient descent in the trigger synthesis step.\n\n1) Impact of surrogate-target model mismatch: TABLE V exhibits the ASRs with different surrogate-target (Sur-Tar) model pairs under the poison ratio of 0.05%. Note that, our attack attains a satisfying ASR for all model pairs. As all the settings in TABLE V, we use a low poison ratio, the ACCs and Tar-ACCs are indistinguishably good (all ACCs are above 95%, all Tar-ACCs are above 93%); thus, we omit those two metrics. Interestingly, having the same architecture for the surrogate and the target model does not necessarily lead to the best ASR. Hence, as an attacker, it is not necessary to gather detailed information about the target model architecture to maximize the attack performance.\n\nMeanwhile, the largest surrogate architecture does not necessarily provide the best performance. Among the three architectures, ResNet-18 has the largest number of neurons, followed by GoogLeNet [39] and then EfficientNet-B0 [2]. In particular, within the architectures considered in our evaluation, regardless of the target architectures, using GoogLeNet as the surrogate architecture gives the best attack performance. Actually, among all the three architectures trained with the same pipeline, GoogLeNet can achieve the highest testing performance. Hence, the attack performance seems to align with the test performance of the architecture. This alignment is explained by the fact that our attack essentially seeks a perturbation that points towards the interior of the target class. A high-performance surrogate model can better extract class-differentiating features and, therefore, can help us better synthesize an inward-pointing perturbation.\n\nAs a result of our evaluation above, we highlight that NARCISSUS does not require the surrogate architecture to be the same as the target architecture in order to maximize the attack performance. In particular, we find that the attack performance depends more on the model's performance on a learning task than on the similarity between the surrogate and target model. So, a practical guideline for selecting a surrogate model is to use the most advanced architecture for a given learning task.\n\n2) Impact of l \u221e -norm ball radius: The bound of l \u221e -norm has been usually set to be 16/255 in previous work with a constrained perturbation. We evaluate the impact of the l \u221enorm ball radius on the attack performance in Fig. 4. In general, the ASR increases with the radius, but the ACC and Tar-ACC are not much affected by it. Even with a small l \u221enorm and a tiny poison budget, such as 2/255 and 0.05%, our attack still achieves an ASR higher than 20% on the CIFAR-10. Based on TABLE III, this result is at least 7 \u00d7 better than the other clean-label baselines (whose highest ASR is 3.21) and, at the same time, requires a lower radius.\n\n3) Poi-warm-up fine-tuning & Trigger generation iterations: We evaluate the ASR for a varied number of finetuning iterations in the poi-warm-up step and gradient descent  iterations in the trigger generation step, and the result is shown in TABLE VI. As a small poison ratio (0.05%) is used to generate results in TABLE VI, all the ACCs and Tar-ACCs are all above 95% and 93%, respectively. Hence, we omit those two metrics. The takeaways are as follows.\n\n(1) Just using the POOD-data-pre-trained surrogate model without further fine-tuning on target-class data, our attack can still obtain an ASR of more than 70%. With a few rounds of fine-tuning, the surrogate model can enable the synthesis of more potent triggers. (2) Too many iterations of fine-tuning do not necessarily lead to more potent attacks. In that case, the model might overfit to the D t and the objective in (2) has reached a very small value. Since both trigger synthesis and fine-tuning try to minimize the loss over D t , an overoptimized surrogate model would leave limited space for further updating the trigger, thus making it disadvantageous to find a potent trigger. As a practical guideline, five rounds of fine-tuning give the highest ASR. (3) More iterations of trigger updates can produce more potent triggers. Given this ablation study, we use five rounds of fine-tuning and one thousand rounds of trigger update as a default setting for the rest of the evaluation in this paper.\n\n\nD. Defenses\n\nThere are three major lines of existing backdoor defenses: 1) unlearning the potential backdoor given a poisoned model; 2) detecting poisoned samples in a model-agnostic way; 3) redesigning the training process to build a reliable model from a poisoned dataset. We consider five defenses under those three major lines of defense to analyze the impact of NARCISSUS on existing defenses. Some defenses, such as Neural Cleanse [11] and Fine Pruning [12] are popular choices of defenses in the past work, but did not necessarily achieve state-of-the-art performance, and others, such as I-BAU [13], Frequency-based Detector [15], and Anti-Backdoor Learning [14] represent the latest state-of-the-art defenses along the three lines above.\n\n1) Model-based Backdoor Unlearning: These defenses aim to remove the backdoor effects from a given pre-trained poisoned model. We incorporate three defenses under this line of work and discuss their effects on mitigating the NARCISSUS attack. For the pre-trained poisoned model, we use a NARCISSUS poisoned CIFAR-10 model with a poison ratio of 0.05%, whose ACC, Target Class ACC, and ASR  We observe that incorporating any lr larger than 0.01 results in a broken model with an ACC no better than random guessing (thus, lr = 0.01 is our experiment stopping point).\n\nare 95.34%, 93.44%, and 97.10%, respectively. They serve as the baseline results before the defenses are conducted.\n\nNeural Cleanse: Neural cleanse [11] goes through each label and synthesizes the potential trigger as if the current label is the target one. Then, it performs outlier detection on all the reverse-engineered triggers to find the true target label. Finally, it unlearns the synthesized trigger from the suspicious class. We follow the original implementation of Neural Cleanse 6 and test it on CIFAR-10. We split the test set of CIFAR-10 into two size-5000 groups: the defense and the validation set. The former is used to execute the defense algorithm, and the latter is used for evaluating the defense performance. However, none of the labels is marked as outliers. The followup work, TABOR [40], is similarly based on trigger synthesis, and it remarks that inspecting the trigger-generation loss can additionally help to identify outliers and further improve the defense efficacy. We test this idea but find that the outlier detector can still not find anything suspicious. Fundamentally, both Neural Cleanse's and TABOR's trigger synthesis processes make the assumption that the trigger is localized, which is met by most existing attacks. However, when the trigger is large and smeared over the entire image, like ours, the reverse-engineered trigger tends to be inaccurate. Worse yet, the synthesized patterns for non-target classes are also global patterns, and hence it is difficult to run outlier detection to distinguish the target class from the other classes. Fine-pruning: The key idea of fine-pruning [12] is to prune the inactive neurons for clean inputs and further fine-tune the pruned model over clean data to improve accuracy. We split the test set (unseen by the poisoned target model) into two size-5000 subsets, similar to Neuron Cleanse. Then, we select 1000 samples from the defense set to ensure that the performance drop after defense is within 20% as per the original implementation 7 . The other set is kept intact to evaluate the defense's performance. Results of using finepruning for mitigating NARCISSUS are shown in TABLE VII.\n\nIt is worth mentioning that we fine-tune the defense to our best efforts with different learning rates (lr). However, we observe that the defense's efficacy is limited in all the evaluated settings. The reason might be that NARCISSUS triggers point towards the inside of the target class. They might activate similar neurons as the target-class samples. Hence, it is very hard to remove the backdoor without hurting the model's performance on clean data. I-BAU: Implicit-Hypergradient-based Backdoor Unlearning [13], or the I-BAU, is a novel defense framework obtaining state-of-the-art effectiveness across different backdoor attacks and datasets. The idea of I-BAU is to alternate between trigger synthesis and unlearning for several rounds. Intuitively, through this process, the trigger synthesized will get stronger, and the model that unlearns stronger triggers will become more robust. We follow the original implementation 8 and the same defense-validation split as the other two defenses above. We launch the defense algorithm with the SGD [35] optimizer and the Adam [41] optimizer, following the original work's suggestions.\n\nThe defense performance over the first 100 rounds is shown in Fig. 5. Based on the results shown in the original work, most of the existing all-to-one backdoor attacks can be removed with only one round of I-BAU. However, NARCISSUS can still maintain a certain degree of effectiveness even after 100 rounds of I-BAU. Also, unlike the other existing attacks, I-BAU's performance on NARCISSUS does not converge nicely. Overall, while I-BAU is more effective than Neural Cleanse and Fine-Pruning, its performance on NARCISSUS is erratic.\n\nWe investigate the root cause of the unstable performance of I-BAU. Intriguingly, as the defense iterations proceed, I-BAU starts to synthesize and unlearn some robust features that contain obvious semantic information from the training data (see Fig. 6). Compared to SGD, I-BAU with Adam unlearns more visually clear, robust features. Based on Fig. 5, it also suffers from a larger drop in ACC. Hence, there is a clear correlation between the unlearning of robust features and ACC degradation. However, the fact that robust features start to get synthesized before our trigger is fully mitigated indicates that our optimized trigger is as persistent as the 8 https://github.com/yizeng623/I-BAU Fig. 6: Intriguing visual observations with I-BAU on NARCISSUS poisoned CIFAR-10 model. Some of the synthesized noises from I-BAU start to show strong semantic information. The Adam optimizer tends to identify more visually apparent features than the SGD optimizer.\n\nSmooth [15] Ours   [15].\n\nrobust features of each class. Removing our trigger would inevitably hurt the model's performance.\n\n2) Model-agnostic Backdoor Detection: This line of work focuses on detecting the backdoored samples in a model agnostic way. The key idea is to extract the commonality of the benign samples and mark as malicious the samples that do not share the common characteristics. We study a state-of-the-art detection based on the idea that benign samples are mostly dominated by low-frequency features, whereas backdoored samples contain a lot of high-frequency artifacts [15].\n\nThe noise synthesized by NARCISSUS with an l \u221e -norm constraint does contain a lot of high-frequency artifacts, which makes it easy to detect by the frequency-based backdoor detector. However, we can perform an adaptive attack with NARCISSUS by simply setting the allowable set of trigger patterns, \u2206, to be the low-frequency patterns. To optimize the trigger design over this set, we can pass the intermediate trigger design obtained by each gradient descent update through a low-pass filter. The original work [15] discusses the adaptability of standard dirty-label poisoning attacks by incorporating a low-pass filter, termed \"Smooth attack.\" We design our adapted NARCISSUS by using the same setup as the Smooth attack and applying the same lowpass filter.\n\nA comparison of the detection performance on the vanilla l \u221e -constrained NARCISSUS trigger, the adaptive NARCISSUS trigger, and the original smooth trigger in [15] (i.e., an optimized trigger with a low-pass filter as the constraint) is provided in TABLE VIII. With the same low pass filter incor- Fig. 7: Visual effects with additional attacker knowledge. We compare our adapted NARCISSUS with the state-of-the-art frequency invisible attack [15]. Both attacks adopt the same low-pass filter as the constraint.   Fig. 7 visualizes the original smooth trigger and our adaptive NARCISSUS trigger.\n\nOur adaptive NARCISSUS trigger is as stealthy as the smooth trigger visually. TABLE IX compares the effectiveness of the two triggers. We also include the result for Smooth-d, which injects the smooth trigger into non-target classes and is thus dirty-label. While it is unfair to compare ours with Smooth-d, we still include this setting to see if our clean-label attack can match up with the performance of a dirty-label one. Our adapted NARCISSUS trigger achieved a 77.59% higher ASR than the original Smooth trigger under the clean-label poisoning case. It is also worth highlighting that the adapted NARCISSUS performed a slightly higher ASR than the dirty-label \"Smooth attack.\" These results indicate the efficacy and adaptability of NARCISSUS.\n\n3) Robust Training over Poisoned Dataset: This line of defense focuses on training a robust model from a poisoned dataset. The state-of-the-art along this line is anti-backdoor learning (ABL) [14]. ABL observes that backdoored samples, after a few rounds of training, would end up with the lowest loss in the training set. Thus, one can quarantine some of the poisoned samples from the training set and use their reversed gradient to mitigate the effects of the backdoor trigger.\n\nWe implement the ABL with the original settings 9 . Specifically, we set the pretraining steps for \"early training\" at 80 and switch to \"later training\" for 20 epochs. According to the original work, the loss threshold is set at 0.5 and 9 https://github.com/bboylyg/ABL   [42] using ABL to train over the NARCISSUS poisoned CIFAR-10 with a different poison ratio. \"Early\" are the results after early learning, and the \"Later\" results show the performance after unlearning using the isolated data, which are the final results of the ABL. The red-color denotes failed defenses.\n\nthe isolation rate at 1%. We deploy the NARCISSUS trigger generated using the ResNet-18 and target the CIFAR-10's class \"bird.\" We use a WideResNet-16-1 [42] as the target model, following the original work. As shown in TABLE X, we find that after ABL, the ASRs of our attack remain close to 100% on the poisoned WideResNet-16-1 [42]. This illustrates the ineffectiveness of the ABL in mitigating our attack.\n\nWe investigate the isolation results from the ABL early learning for the poison ratio of 0.05%, and find that only three target class samples are isolated, and the rest (497 samples) are all from non-target classes. Moreover, none of the three isolated \"bird\" samples are poisoned samples. With a larger poison ratio of 0.5%, ten target-class samples are isolated, among which only three are actually poisoned. The above observation shows that when the poison ratio is extremely low (e.g., 0.05% to 0.5%), the loss of our poisoned examples has a similar scale to that of clean samples, and therefore, NARCISSUS can successfully evade detection based on loss scanning.\n\n\nV. EXTENSION TO PHYSICAL-WORLD ATTACK\n\nExisting exploration of physical backdoor attacks is limited to dirty-label poisoning with an arbitrarily chosen trigger. As the NARCISSUS significantly improves upon existing cleanlabel backdoor attacks in the digital space, we explore the possibility of extending it to perform a physical-world attack, where the backdoor trigger in the test phase is directly applied to a physical object.\n\n\nA. Attack Design\n\nClean-label backdoor attacks in the physical world are challenging due to the following factors.\n\n\u2022 Information loss: Capturing a physical trigger through a camera sensor will cause information loss. In particular, a certain degree of hue change and pixel loss would occur during this process. Attackers are generally unaware of sensor-related variations, so it is hard to optimize against them adaptively. \u2022 Affine transformations: A physical trigger can potentially be captured by a camera at different viewing angles, rotations, and backgrounds. NARCISSUS designs the trigger through an optimization framework, and hence it offers the flexibility to incorporate various constraints on the trigger design. We propose to use randomized augmentation [43] and seek the trigger by minimizing the loss over the augmented dataset.\n\nAs changing all the values of the model input space is impractical in the physical world, we constrain our trigger into a square shape (8 \u00d7 8). We patch the trigger to random locations to maintain its effectiveness when the trigger is revealed in different locations in the physical world.\n\nSince each time the trigger is patched to a different location, it would result in a new computation graph. Thus, the total size of the computational graph grows linearly with the number of locations. We propose random padding of the small-size square trigger optimizing area to simulate the effect of patching the trigger to random locations while unifying the computational graph and keeping it small. In particular, we randomly select two integers, l up and l left , from 8 to 64, as the up and the left padding length. Then we can acquire the padding length for the lower and the right as l low = 54 \u2212 l up and l right = 54 \u2212 l left . Finally, by filling in those ranges from the margin of the trigger to the four padding lengths with values of zeros, one can acquire random padded triggers of the same size as the input (64 \u00d7 64). Note that such a process is a linear procedure with the trigger as the input, thus keeping the computational graph the same even with randomized trigger locations.\n\nFinally, we incorporate a hue change with a \u00b10.3 scale and a random rotation. To obtain a useful gradient out of the strong randomized transformations and augmentations above, we adopt the expectation over transformation (EOT) technique. EOT is widely used in evasion attacks [43], especially for adaptively attacking transformation-based defenses and performing physical-world attacks. By incorporating EOT, we can synthesize a NARCISSUS patch trigger for the physical world attack.\n\n\nB. Evaluation\n\nWe consider two baseline triggers in the physical setting: the white square and random noise. We inject the three triggers (ours, white, and random) into the targetclass training data to form three poisoned datasets. All three groups use the same poison ratio, 0.05%, with the Tiny-ImageNet as the target dataset. We remove the comparison with existing clean-label attacks, LC, HTBA, and SAA, as they all require access to non-target-class examples. First, we randomly select 50 images (0.05% of the total data size) from the target class \"bullfrog.\" Then, we patch the trigger with a random rotation to a random location. The poisoned target models are then obtained by training a ResNet-18 model over the three poisoned datasets. We examine how the three models react to their corresponding triggers when they are revealed in the scene, as shown in Fig. 8. All the triggers are presented on an iPhone 13 with a 6.06\" OLED screen. NARCISSUS is the only one that enables a successful clean-label backdoor attack in the physical world. The video demonstration is provided in this link. Fig. 8: Different backdoor triggers in a clean-label poison manner toward physical world. We use 'bullfrog' as the target label. We show the three poisoned models' behaviors before and after observing the trigger that initially poisoned the respective models. The results are screenshots taken from the video demonstration.\n\n\nVI. CONCLUSION\n\nIn this work, we propose a model-agnostic clean-label backdoor attack, NARCISSUS, which requires only the knowledge of representative examples from the target-class training data. Despite the much weaker assumption on the attack knowledge, our attack demonstrates a state-of-the-art attack efficacy by manipulating only 0.05% (or even less) of the training data. Particularly, our attack success rate is 30.33\u00d7 to 64.45\u00d7 higher than existing clean-label backdoor attacks that rely on the knowledge of the entire training data. It can also robustly generalize to large datasets and the physical world. Additionally, the efficacy of our attack is emphasized in a comprehensive study of state-of-the-art defenses, where, surprisingly, none of the defenses could fully hinder or unlearn the NARCISSUS trigger. Our results indicate that existing popular machine learning pipelines using public data sources can be easily exposed to practical clean-label backdoor attacks -as all the attacker requires is knowing a portion of the target class. This has two broad implications. Implications for theoretical research. Existing theoretical characterizations of backdoor attacks have been uniformly focused on dirty-label attacks [44]. As our method demonstrates that clean-label attacks can also significantly impair the integrity of deep neural networks, even at the physical world scale, we emphasize the importance of studying cleanlabel attacks in the same way that dirty-label attacks are studied [44]. Explanation of why NARCISSUS is more potent, even with limited knowledge and poison ratio, would be an intriguing theoretical direction. Implications for empirical research. Given that our attack demonstrates a high degree of adaptability and efficacy across a broad range of environments, most notably by exposing the vulnerabilities of state-of-the-art defenses [11]- [15], more robust defenses are needed to respond. Mainly, empirical research on robustly removing NARCISSUS's effects without impairing performance on clean samples is critical.\n\nFig. 1 :\n1Comparison of different backdoor attack ideas. (a) Non-target-class poisoning\n\nFig. 2 :\n2The workflow of the NARCISSUS attack consists of four functional parts.Step 1: Poi-warm-up: acquiring a surrogate model from a POOD-data-pre-trained model with only access to the target class samples, D t .Step 2: Trigger-Generation: deploying the surrogate model after the poi-warm-up as a feature extractor to synthesize the inward-pointing noise based on D t ; Step 3: Trigger Insertion: utilizing the NARCISSUS trigger and poisoning a small amount of the target class sample;\n\nFig. 4 :\n4Ablation study on poison budget in terms of the l \u221e -norm ball radius on CIFAR-10. NARCISSUS can still maintain a certain scale of efficacy (30.6% \u00b1 8.12% ASR) even with a meager poison budget (2/255 & 0.05% poison ratio). All results are averaged over three times.\n\nFig. 5 :\n5Defense results with I-BAU on NARCISSUS poisoned CIFAR-10 model. The original work incorporates two different optimizers, namely SGD (a) and Adam (b). We fine-tune both optimizers to their best learning rates, SGD (0.001) and Adam (0.0001), and launch the defense for 100 rounds.\n\n\nwe can cause 85.81% of the test examples from any class to be classified as any desired target class when the examples are patched with the backdoor trigger. At the same time, the backdoored model still maintains good accuracy on clean test examples as if it was trained on a clean dataset. By contrast, under the same poison ratio, existing clean-label attacks can only misclassify 1.72% of the text examples, even with the knowledge of full training data.\n\nTABLE I :\nISummary of the differences between previous backdoor attacks and NARCISSUS.denotes only partially satisfying. D denotes a dataset, and D t here refers to the subset only containing the target class.\n\nTABLE\n\n\nTABLE III :\nIIIResults and comparisons on (a) CIFAR-10, (b) PubFig, and (c) Tiny-ImageNet. HTBA [7] and SAA [8] with \nindicate that their ASRs are based on the one-to-one case, i.e., only evaluated on the source class. BadNets-c [4] and Blend-c \n[5] indicate clean-label poisoning, and BadNets-d [4] and Blend-d [5] indicate dirty-label posioning. The red-color marks the \nbest ASR. All results are averaged over three times. \n\nHTBA \nSAA \nBadNets-c \nBlend-c \nLC \nOurs \nPoison \n16/255 \n16/255 \n255/255 \n51/255 \n16/255 \n16/255 \nTest \n255/255 \n255/255 \n255/255 \n51/255 \n255/255 48/255 \n\n\n\nTABLE IV :\nIV\n\nTABLE V :\nVASR results from nine surrogate-target (Sur-Tar) model pairs. The deeper the red color is, the stronger the transferability is (i.e., more red = stronger transferability). All results are averaged over three times on the CIFAR-10.\n\nTABLE VI :\nVIAblation study on the number of rounds of poi-\nwarm-up vs. the number of rounds of the trigger synthesis \nduring the noise generation. The red-color denotes the best \nASR. All results are averaged over three times. \n\n\n\nTABLE VII :\nVIIResults with fine-pruning on mitigating \nNARCISSUS. The results with \u2666 indicate the adoption of \na 30-round fine-tuning according to the original work. \n\nTABLE VIII :\nVIIIDetection results with the frequency-based \nbackdoor sample detector. We show the detection results of \nthe original NARCISSUS trigger and the adaptive NARCISSUS \ntrigger optimized with \u2206 being set as a low-pass filter. We \ncompare the results with the Smooth trigger proposed in \n\nTABLE IX :\nIXAttack efficacy of different frequency-invisible triggers on CIFAR-10 with a poison ratio of 0.8%. Smooth-c [15] indicates clean-label poisoning, and Smooth-d indicates dirty-label poisoning. The red-color remarks the best ASR. All results are averaged over three times. porated, our adaptive attack can achieve similar frequencydomain stealth as the Smooth attack.\n\nTABLE X :\nXResults on WideResNet-16-1\nhttps://github.com/ruoxi-jia-group/Narcissus-backdoor-attack\nhttps://github.com/UMBCvision/Hidden-Trigger-Backdoor-Attacks 3 https://github.com/hsouri/Sleeper-Agent 4 https://github.com/MadryLab/label-consistent-backdoor-code 5 LC has two modes: the GAN-based and the adversarial-perturbationbased attack. This paper only compares with the latter, as it is much more effective than the former, as per the original paper.\nhttps://github.com/bolunwang/backdoor 7 https://github.com/kangliucn/Fine-pruning-defense\n\nAn image is worth 16x16 words: Transformers for image recognition at scale. A Dosovitskiy, L Beyer, A Kolesnikov, D Weissenborn, X Zhai, T Unterthiner, M Dehghani, M Minderer, G Heigold, S Gelly, arXiv:2010.11929arXiv preprintA. Dosovitskiy, L. Beyer, A. Kolesnikov, D. Weissenborn, X. Zhai, T. Unterthiner, M. Dehghani, M. Minderer, G. Heigold, S. Gelly et al., \"An image is worth 16x16 words: Transformers for image recognition at scale,\" arXiv preprint arXiv:2010.11929, 2020.\n\nEfficientnet: Rethinking model scaling for convolutional neural networks. M Tan, Q Le, International conference on machine learning. PMLRM. Tan and Q. Le, \"Efficientnet: Rethinking model scaling for con- volutional neural networks,\" in International conference on machine learning. PMLR, 2019, pp. 6105-6114.\n\nBert: Pre-training of deep bidirectional transformers for language understanding. J Devlin, M.-W Chang, K Lee, K Toutanova, arXiv:1810.04805arXiv preprintJ. Devlin, M.-W. Chang, K. Lee, and K. Toutanova, \"Bert: Pre-training of deep bidirectional transformers for language understanding,\" arXiv preprint arXiv:1810.04805, 2018.\n\nBadnets: Identifying vulnerabilities in the machine learning model supply chain. T Gu, B Dolan-Gavitt, S Garg, arXiv:1708.06733arXiv preprintT. Gu, B. Dolan-Gavitt, and S. Garg, \"Badnets: Identifying vulnera- bilities in the machine learning model supply chain,\" arXiv preprint arXiv:1708.06733, 2017.\n\nTargeted backdoor attacks on deep learning systems using data poisoning. X Chen, C Liu, B Li, K Lu, D Song, X. Chen, C. Liu, B. Li, K. Lu, and D. Song, \"Targeted backdoor attacks on deep learning systems using data poisoning,\" 2017.\n\nLabel-consistent backdoor attacks. A Turner, D Tsipras, A Madry, A. Turner, D. Tsipras, and A. Madry, \"Label-consistent backdoor attacks,\" 2019.\n\nHidden trigger backdoor attacks. A Saha, A Subramanya, H Pirsiavash, Proceedings of the AAAI Conference on Artificial Intelligence. the AAAI Conference on Artificial Intelligence34A. Saha, A. Subramanya, and H. Pirsiavash, \"Hidden trigger backdoor attacks,\" in Proceedings of the AAAI Conference on Artificial Intelli- gence, vol. 34, 2020, pp. 11 957-11 965.\n\nSleeper agent: Scalable hidden trigger backdoors for neural networks trained from scratch. H Souri, M Goldblum, L Fowl, R Chellappa, T Goldstein, arXiv:2106.08970arXiv preprintH. Souri, M. Goldblum, L. Fowl, R. Chellappa, and T. Goldstein, \"Sleeper agent: Scalable hidden trigger backdoors for neural networks trained from scratch,\" arXiv preprint arXiv:2106.08970, 2021.\n\nWanet-imperceptible warping-based backdoor attack. A Nguyen, A Tran, arXiv:2102.10369arXiv preprintA. Nguyen and A. Tran, \"Wanet-imperceptible warping-based back- door attack,\" arXiv preprint arXiv:2102.10369, 2021.\n\nCleanlabel backdoor attacks on video recognition models. S Zhao, X Ma, X Zheng, J Bailey, J Chen, Y.-G Jiang, S. Zhao, X. Ma, X. Zheng, J. Bailey, J. Chen, and Y.-G. Jiang, \"Clean- label backdoor attacks on video recognition models,\" 2020.\n\nNeural cleanse: Identifying and mitigating backdoor attacks in neural networks. B Wang, Y Yao, S Shan, H Li, B Viswanath, H Zheng, B Y Zhao, 2019 IEEE Symposium on Security and Privacy (SP). IEEEB. Wang, Y. Yao, S. Shan, H. Li, B. Viswanath, H. Zheng, and B. Y. Zhao, \"Neural cleanse: Identifying and mitigating backdoor attacks in neural networks,\" in 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 2019, pp. 707-723.\n\nFine-pruning: Defending against backdooring attacks on deep neural networks. K Liu, B Dolan-Gavitt, S Garg, International Symposium on Research in Attacks, Intrusions, and Defenses. SpringerK. Liu, B. Dolan-Gavitt, and S. Garg, \"Fine-pruning: Defending against backdooring attacks on deep neural networks,\" in Interna- tional Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 2018, pp. 273-294.\n\nAdversarial unlearning of backdoors via implicit hypergradient. Y Zeng, S Chen, W Park, Z Mao, M Jin, R Jia, International Conference on Learning Representations. Y. Zeng, S. Chen, W. Park, Z. Mao, M. Jin, and R. Jia, \"Adversarial unlearning of backdoors via implicit hypergradient,\" in International Conference on Learning Representations, 2022.\n\nAnti-backdoor learning: Training clean models on poisoned data. Y Li, X Lyu, N Koren, L Lyu, B Li, X Ma, Advances in Neural Information Processing Systems. 34Y. Li, X. Lyu, N. Koren, L. Lyu, B. Li, and X. Ma, \"Anti-backdoor learning: Training clean models on poisoned data,\" Advances in Neural Information Processing Systems, vol. 34, 2021.\n\nRethinking the backdoor attacks' triggers: A frequency perspective. Y Zeng, W Park, Z M Mao, R Jia, ICCV. Y. Zeng, W. Park, Z. M. Mao, and R. Jia, \"Rethinking the backdoor attacks' triggers: A frequency perspective,\" in ICCV, 2021.\n\nStochastic gradient descent tricks. L Bottou, Neural networks: Tricks of the trade. SpringerL. Bottou, \"Stochastic gradient descent tricks,\" in Neural networks: Tricks of the trade. Springer, 2012, pp. 421-436.\n\nInvisible backdoor attacks on deep neural networks via steganography and regularization. S Li, M Xue, B Zhao, H Zhu, X Zhang, IEEE Transactions on Dependable and Secure Computing. S. Li, M. Xue, B. Zhao, H. Zhu, and X. Zhang, \"Invisible backdoor attacks on deep neural networks via steganography and regularization,\" IEEE Transactions on Dependable and Secure Computing, 2020.\n\nBackdoor learning: A survey. Y Li, B Wu, Y Jiang, Z Li, S.-T Xia, arXiv:2007.08745arXiv preprintY. Li, B. Wu, Y. Jiang, Z. Li, and S.-T. Xia, \"Backdoor learning: A survey,\" arXiv preprint arXiv:2007.08745, 2020.\n\nInvisible backdoor attack with sample-specific triggers. Y Li, Y Li, B Wu, L Li, R He, S Lyu, ICCV. Y. Li, Y. Li, B. Wu, L. Li, R. He, and S. Lyu, \"Invisible backdoor attack with sample-specific triggers,\" in ICCV, 2021.\n\nInput-aware dynamic backdoor attack. T A Nguyen, A Tran, Advances in Neural Information Processing Systems. 33T. A. Nguyen and A. Tran, \"Input-aware dynamic backdoor attack,\" Advances in Neural Information Processing Systems, vol. 33, pp. 3454-3464, 2020.\n\nReflection backdoor: A natural backdoor attack on deep neural networks. Y Liu, X Ma, J Bailey, F Lu, European Conference on Computer Vision. SpringerY. Liu, X. Ma, J. Bailey, and F. Lu, \"Reflection backdoor: A natural backdoor attack on deep neural networks,\" in European Conference on Computer Vision. Springer, 2020, pp. 182-199.\n\nFacehack: Triggering backdoored facial recognition systems using facial characteristics. E Sarkar, H Benkraouda, M Maniatakos, arXiv:2006.11623arXiv preprintE. Sarkar, H. Benkraouda, and M. Maniatakos, \"Facehack: Triggering backdoored facial recognition systems using facial characteristics,\" arXiv preprint arXiv:2006.11623, 2020.\n\nLabel-consistent backdoor attacks. A Turner, D Tsipras, A Madry, arXiv:1912.02771arXiv preprintA. Turner, D. Tsipras, and A. Madry, \"Label-consistent backdoor attacks,\" arXiv preprint arXiv:1912.02771, 2019.\n\nAdversarial robustness through local linearization. C Qin, J Martens, S Gowal, D Krishnan, K Dvijotham, A Fawzi, S De, R Stanforth, P Kohli, Advances in Neural Information Processing Systems. 32C. Qin, J. Martens, S. Gowal, D. Krishnan, K. Dvijotham, A. Fawzi, S. De, R. Stanforth, and P. Kohli, \"Adversarial robustness through local linearization,\" Advances in Neural Information Processing Systems, vol. 32, 2019.\n\nMarketplaces for data: an initial survey. F Schomm, F Stahl, G Vossen, ACM SIGMOD Record. 421F. Schomm, F. Stahl, and G. Vossen, \"Marketplaces for data: an initial survey,\" ACM SIGMOD Record, vol. 42, no. 1, pp. 15-26, 2013.\n\nImproving black-box adversarial attacks with a transfer-based prior. S Cheng, Y Dong, T Pang, H Su, J Zhu, Advances in neural information processing systems. 32S. Cheng, Y. Dong, T. Pang, H. Su, and J. Zhu, \"Improving black-box adversarial attacks with a transfer-based prior,\" Advances in neural information processing systems, vol. 32, 2019.\n\nMembership inference attacks against machine learning models. R Shokri, M Stronati, C Song, V Shmatikov, 2017 IEEE symposium on security and privacy (SP). IEEER. Shokri, M. Stronati, C. Song, and V. Shmatikov, \"Membership inference attacks against machine learning models,\" in 2017 IEEE symposium on security and privacy (SP). IEEE, 2017, pp. 3-18.\n\nPytorch: An imperative style, high-performance deep learning library. A Paszke, S Gross, F Massa, A Lerer, J Bradbury, G Chanan, T Killeen, Z Lin, N Gimelshein, L Antiga, Advances in neural information processing systems. 32A. Paszke, S. Gross, F. Massa, A. Lerer, J. Bradbury, G. Chanan, T. Killeen, Z. Lin, N. Gimelshein, L. Antiga et al., \"Pytorch: An imperative style, high-performance deep learning library,\" Advances in neural information processing systems, vol. 32, pp. 8026-8037, 2019.\n\nDeep residual learning for image recognition. K He, X Zhang, S Ren, J Sun, Proceedings of the IEEE conference on computer vision and pattern recognition. the IEEE conference on computer vision and pattern recognitionK. He, X. Zhang, S. Ren, and J. Sun, \"Deep residual learning for image recognition,\" in Proceedings of the IEEE conference on computer vision and pattern recognition, 2016, pp. 770-778.\n\nLearning multiple layers of features from tiny images. A Krizhevsky, G Hinton, A. Krizhevsky, G. Hinton et al., \"Learning multiple layers of features from tiny images,\" 2009.\n\nAttribute and simile classifiers for face verification. N Kumar, A C Berg, P N Belhumeur, S K Nayar, 2009 IEEE 12th international conference on computer vision. IEEEN. Kumar, A. C. Berg, P. N. Belhumeur, and S. K. Nayar, \"Attribute and simile classifiers for face verification,\" in 2009 IEEE 12th inter- national conference on computer vision. IEEE, 2009, pp. 365-372.\n\nTiny imagenet visual recognition challenge. Y Le, X Yang, CS 231N. 773Y. Le and X. Yang, \"Tiny imagenet visual recognition challenge,\" CS 231N, vol. 7, no. 7, p. 3, 2015.\n\nDeep learning face attributes in the wild. Z Liu, P Luo, X Wang, X Tang, Proceedings of International Conference on Computer Vision (ICCV). International Conference on Computer Vision (ICCV)Z. Liu, P. Luo, X. Wang, and X. Tang, \"Deep learning face attributes in the wild,\" in Proceedings of International Conference on Computer Vision (ICCV), December 2015.\n\nCaltech-256 object category dataset. G Griffin, A Holub, P Perona, G. Griffin, A. Holub, and P. Perona, \"Caltech-256 object category dataset,\" 2007.\n\nAn overview of gradient descent optimization algorithms. S Ruder, arXiv:1609.04747arXiv preprintS. Ruder, \"An overview of gradient descent optimization algorithms,\" arXiv preprint arXiv:1609.04747, 2016.\n\nL Liu, H Jiang, P He, W Chen, X Liu, J Gao, J Han, arXiv:1908.03265On the variance of the adaptive learning rate and beyond. arXiv preprintL. Liu, H. Jiang, P. He, W. Chen, X. Liu, J. Gao, and J. Han, \"On the variance of the adaptive learning rate and beyond,\" arXiv preprint arXiv:1908.03265, 2019.\n\nSgdr: Stochastic gradient descent with warm restarts. I Loshchilov, F Hutter, arXiv:1608.03983arXiv preprintI. Loshchilov and F. Hutter, \"Sgdr: Stochastic gradient descent with warm restarts,\" arXiv preprint arXiv:1608.03983, 2016.\n\nBackdoor attack in the physical world. Y Li, T Zhai, Y Jiang, Z Li, S.-T Xia, ICLR Workshop. Y. Li, T. Zhai, Y. Jiang, Z. Li, and S.-T. Xia, \"Backdoor attack in the physical world,\" in ICLR Workshop, 2021.\n\nGoing deeper with convolutions. C Szegedy, W Liu, Y Jia, P Sermanet, S Reed, D Anguelov, D Erhan, V Vanhoucke, A Rabinovich, Proceedings of the IEEE conference on computer vision and pattern recognition. the IEEE conference on computer vision and pattern recognitionC. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich, \"Going deeper with convolutions,\" in Proceedings of the IEEE conference on computer vision and pattern recognition, 2015, pp. 1-9.\n\nTabor: A highly accurate approach to inspecting and restoring trojan backdoors in ai systems. W Guo, L Wang, X Xing, M Du, D Song, arXiv:1908.01763arXiv preprintW. Guo, L. Wang, X. Xing, M. Du, and D. Song, \"Tabor: A highly accurate approach to inspecting and restoring trojan backdoors in ai systems,\" arXiv preprint arXiv:1908.01763, 2019.\n\nAdam: A method for stochastic optimization. D P Kingma, J Ba, arXiv:1412.6980arXiv preprintD. P. Kingma and J. Ba, \"Adam: A method for stochastic optimization,\" arXiv preprint arXiv:1412.6980, 2014.\n\nWide residual networks. S Zagoruyko, N Komodakis, arXiv:1605.07146arXiv preprintS. Zagoruyko and N. Komodakis, \"Wide residual networks,\" arXiv preprint arXiv:1605.07146, 2016.\n\nSynthesizing robust adversarial examples. A Athalye, L Engstrom, A Ilyas, K Kwok, International conference on machine learning. PMLRA. Athalye, L. Engstrom, A. Ilyas, and K. Kwok, \"Synthesizing robust adversarial examples,\" in International conference on machine learning. PMLR, 2018, pp. 284-293.\n\nExcess capacity and backdoor poisoning. N Manoj, A Blum, Advances in Neural Information Processing Systems. 34N. Manoj and A. Blum, \"Excess capacity and backdoor poisoning,\" Advances in Neural Information Processing Systems, vol. 34, 2021.\n", "annotations": {"author": "[{\"end\":123,\"start\":79},{\"end\":172,\"start\":124},{\"end\":224,\"start\":173},{\"end\":266,\"start\":225},{\"end\":329,\"start\":267},{\"end\":376,\"start\":330}]", "publisher": null, "author_last_name": "[{\"end\":86,\"start\":82},{\"end\":135,\"start\":132},{\"end\":187,\"start\":183},{\"end\":237,\"start\":234},{\"end\":278,\"start\":275},{\"end\":339,\"start\":336}]", "author_first_name": "[{\"end\":81,\"start\":79},{\"end\":131,\"start\":124},{\"end\":178,\"start\":173},{\"end\":182,\"start\":179},{\"end\":233,\"start\":225},{\"end\":274,\"start\":267},{\"end\":335,\"start\":330}]", "author_affiliation": "[{\"end\":122,\"start\":88},{\"end\":171,\"start\":137},{\"end\":223,\"start\":189},{\"end\":265,\"start\":239},{\"end\":328,\"start\":280},{\"end\":375,\"start\":341}]", "title": "[{\"end\":76,\"start\":1},{\"end\":452,\"start\":377}]", "venue": null, "abstract": "[{\"end\":2587,\"start\":502}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4922,\"start\":4919},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4927,\"start\":4924},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5624,\"start\":5621},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":5629,\"start\":5626},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":7027,\"start\":7024},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":7657,\"start\":7654},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":7662,\"start\":7659},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":7887,\"start\":7884},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8244,\"start\":8241},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":11851,\"start\":11847},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":11873,\"start\":11869},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11936,\"start\":11932},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":11968,\"start\":11964},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":12165,\"start\":12161},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13742,\"start\":13739},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":13747,\"start\":13744},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":13752,\"start\":13749},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":13871,\"start\":13867},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":13986,\"start\":13983},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":13991,\"start\":13988},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":15339,\"start\":15335},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":15620,\"start\":15616},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":15626,\"start\":15622},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":16107,\"start\":16104},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":16112,\"start\":16109},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":16117,\"start\":16114},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":16123,\"start\":16119},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":16129,\"start\":16125},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":16135,\"start\":16131},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":16141,\"start\":16137},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":17414,\"start\":17410},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":18283,\"start\":18280},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":18295,\"start\":18292},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":22509,\"start\":22506},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":22514,\"start\":22511},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":22520,\"start\":22516},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":23331,\"start\":23327},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":27602,\"start\":27599},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":27608,\"start\":27604},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":27614,\"start\":27610},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":28874,\"start\":28871},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":33299,\"start\":33296},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34696,\"start\":34692},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":34702,\"start\":34698},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":34708,\"start\":34704},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":34761,\"start\":34757},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34767,\"start\":34763},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":34933,\"start\":34929},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":35127,\"start\":35123},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":35753,\"start\":35750},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":35758,\"start\":35755},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":35861,\"start\":35857},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":35874,\"start\":35870},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":35902,\"start\":35898},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":36282,\"start\":36278},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":36295,\"start\":36291},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":36313,\"start\":36309},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":36794,\"start\":36790},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":37189,\"start\":37185},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":37541,\"start\":37538},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":37547,\"start\":37543},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":37938,\"start\":37935},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":37949,\"start\":37946},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":37964,\"start\":37961},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":38100,\"start\":38097},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":38141,\"start\":38138},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":42630,\"start\":42626},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":45969,\"start\":45965},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":45998,\"start\":45995},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":49765,\"start\":49761},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":49787,\"start\":49783},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":49930,\"start\":49926},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":49961,\"start\":49957},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":49994,\"start\":49990},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":50790,\"start\":50786},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":51450,\"start\":51446},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":52272,\"start\":52268},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":53329,\"start\":53325},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":53867,\"start\":53863},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":53895,\"start\":53891},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":55460,\"start\":55456},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":55472,\"start\":55468},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":56042,\"start\":56038},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":56561,\"start\":56557},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":56971,\"start\":56967},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":57255,\"start\":57251},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":58353,\"start\":58349},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":58914,\"start\":58910},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":59372,\"start\":59368},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":59548,\"start\":59544},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":61500,\"start\":61496},{\"end\":61716,\"start\":61709},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":63146,\"start\":63142},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":66018,\"start\":66014},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":66291,\"start\":66287},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":66661,\"start\":66657},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":66667,\"start\":66663}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":66929,\"start\":66841},{\"attributes\":{\"id\":\"fig_1\"},\"end\":67420,\"start\":66930},{\"attributes\":{\"id\":\"fig_2\"},\"end\":67697,\"start\":67421},{\"attributes\":{\"id\":\"fig_3\"},\"end\":67988,\"start\":67698},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":68448,\"start\":67989},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":68659,\"start\":68449},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":68667,\"start\":68660},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":69253,\"start\":68668},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":69268,\"start\":69254},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":69511,\"start\":69269},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":69743,\"start\":69512},{\"attributes\":{\"id\":\"tab_13\",\"type\":\"table\"},\"end\":69912,\"start\":69744},{\"attributes\":{\"id\":\"tab_15\",\"type\":\"table\"},\"end\":70211,\"start\":69913},{\"attributes\":{\"id\":\"tab_17\",\"type\":\"table\"},\"end\":70591,\"start\":70212},{\"attributes\":{\"id\":\"tab_19\",\"type\":\"table\"},\"end\":70630,\"start\":70592}]", "paragraph": "[{\"end\":3400,\"start\":2589},{\"end\":4195,\"start\":3402},{\"end\":4687,\"start\":4197},{\"end\":4737,\"start\":4689},{\"end\":5593,\"start\":4757},{\"end\":6192,\"start\":5595},{\"end\":7631,\"start\":6194},{\"end\":8523,\"start\":7633},{\"end\":9526,\"start\":8525},{\"end\":10237,\"start\":9528},{\"end\":11119,\"start\":10239},{\"end\":11740,\"start\":11121},{\"end\":12687,\"start\":11742},{\"end\":12733,\"start\":12689},{\"end\":14275,\"start\":12735},{\"end\":14442,\"start\":14311},{\"end\":14814,\"start\":14477},{\"end\":15036,\"start\":14842},{\"end\":15086,\"start\":15083},{\"end\":15439,\"start\":15088},{\"end\":15863,\"start\":15463},{\"end\":17345,\"start\":15865},{\"end\":18222,\"start\":17347},{\"end\":20846,\"start\":18224},{\"end\":21684,\"start\":20848},{\"end\":21813,\"start\":21705},{\"end\":22068,\"start\":21833},{\"end\":25795,\"start\":22070},{\"end\":26277,\"start\":25822},{\"end\":26688,\"start\":26279},{\"end\":27830,\"start\":26690},{\"end\":28294,\"start\":27886},{\"end\":28568,\"start\":28296},{\"end\":28875,\"start\":28591},{\"end\":30343,\"start\":28877},{\"end\":30464,\"start\":30345},{\"end\":30542,\"start\":30510},{\"end\":30931,\"start\":30544},{\"end\":31568,\"start\":30945},{\"end\":32657,\"start\":31570},{\"end\":32963,\"start\":32659},{\"end\":34105,\"start\":32965},{\"end\":34172,\"start\":34124},{\"end\":34782,\"start\":34174},{\"end\":37618,\"start\":34808},{\"end\":37840,\"start\":37620},{\"end\":38390,\"start\":37866},{\"end\":39106,\"start\":38392},{\"end\":39892,\"start\":39108},{\"end\":40961,\"start\":39894},{\"end\":41926,\"start\":40963},{\"end\":42462,\"start\":41928},{\"end\":42682,\"start\":42464},{\"end\":43402,\"start\":42684},{\"end\":44297,\"start\":43404},{\"end\":44662,\"start\":44299},{\"end\":45073,\"start\":44684},{\"end\":45768,\"start\":45075},{\"end\":46720,\"start\":45770},{\"end\":47216,\"start\":46722},{\"end\":47858,\"start\":47218},{\"end\":48314,\"start\":47860},{\"end\":49321,\"start\":48316},{\"end\":50070,\"start\":49337},{\"end\":50636,\"start\":50072},{\"end\":50753,\"start\":50638},{\"end\":52812,\"start\":50755},{\"end\":53949,\"start\":52814},{\"end\":54485,\"start\":53951},{\"end\":55447,\"start\":54487},{\"end\":55473,\"start\":55449},{\"end\":55573,\"start\":55475},{\"end\":56043,\"start\":55575},{\"end\":56805,\"start\":56045},{\"end\":57403,\"start\":56807},{\"end\":58155,\"start\":57405},{\"end\":58636,\"start\":58157},{\"end\":59213,\"start\":58638},{\"end\":59623,\"start\":59215},{\"end\":60292,\"start\":59625},{\"end\":60725,\"start\":60334},{\"end\":60842,\"start\":60746},{\"end\":61572,\"start\":60844},{\"end\":61863,\"start\":61574},{\"end\":62864,\"start\":61865},{\"end\":63349,\"start\":62866},{\"end\":64775,\"start\":63367},{\"end\":66840,\"start\":64794}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":14841,\"start\":14815},{\"attributes\":{\"id\":\"formula_1\"},\"end\":15082,\"start\":15037},{\"attributes\":{\"id\":\"formula_2\"},\"end\":27885,\"start\":27831}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":33899,\"start\":33891},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":40399,\"start\":40390},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":40428,\"start\":40413}]", "section_header": "[{\"end\":4755,\"start\":4740},{\"end\":14309,\"start\":14278},{\"end\":14475,\"start\":14445},{\"end\":15461,\"start\":15442},{\"end\":21703,\"start\":21687},{\"end\":21831,\"start\":21816},{\"end\":25820,\"start\":25798},{\"end\":28589,\"start\":28571},{\"end\":30508,\"start\":30467},{\"attributes\":{\"n\":\"5\"},\"end\":30943,\"start\":30934},{\"end\":34122,\"start\":34108},{\"end\":34806,\"start\":34785},{\"end\":37864,\"start\":37843},{\"end\":44682,\"start\":44665},{\"end\":49335,\"start\":49324},{\"end\":60332,\"start\":60295},{\"end\":60744,\"start\":60728},{\"end\":63365,\"start\":63352},{\"end\":64792,\"start\":64778},{\"end\":66850,\"start\":66842},{\"end\":66939,\"start\":66931},{\"end\":67430,\"start\":67422},{\"end\":67707,\"start\":67699},{\"end\":68459,\"start\":68450},{\"end\":68666,\"start\":68661},{\"end\":68680,\"start\":68669},{\"end\":69265,\"start\":69255},{\"end\":69279,\"start\":69270},{\"end\":69523,\"start\":69513},{\"end\":69756,\"start\":69745},{\"end\":69926,\"start\":69914},{\"end\":70223,\"start\":70213},{\"end\":70602,\"start\":70593}]", "table": "[{\"end\":69253,\"start\":68684},{\"end\":69743,\"start\":69526},{\"end\":69912,\"start\":69760},{\"end\":70211,\"start\":69931}]", "figure_caption": "[{\"end\":66929,\"start\":66852},{\"end\":67420,\"start\":66941},{\"end\":67697,\"start\":67432},{\"end\":67988,\"start\":67709},{\"end\":68448,\"start\":67991},{\"end\":68659,\"start\":68461},{\"end\":69511,\"start\":69281},{\"end\":70591,\"start\":70226},{\"end\":70630,\"start\":70604}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":10765,\"start\":10759},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":28293,\"start\":28284},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":28675,\"start\":28669},{\"end\":43422,\"start\":43416},{\"end\":43769,\"start\":43763},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":47446,\"start\":47440},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":54019,\"start\":54013},{\"end\":54740,\"start\":54734},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":54838,\"start\":54832},{\"end\":55188,\"start\":55182},{\"end\":57112,\"start\":57106},{\"end\":57328,\"start\":57322},{\"end\":64224,\"start\":64218},{\"end\":64458,\"start\":64452}]", "bib_author_first_name": "[{\"end\":71220,\"start\":71219},{\"end\":71235,\"start\":71234},{\"end\":71244,\"start\":71243},{\"end\":71258,\"start\":71257},{\"end\":71273,\"start\":71272},{\"end\":71281,\"start\":71280},{\"end\":71296,\"start\":71295},{\"end\":71308,\"start\":71307},{\"end\":71320,\"start\":71319},{\"end\":71331,\"start\":71330},{\"end\":71699,\"start\":71698},{\"end\":71706,\"start\":71705},{\"end\":72017,\"start\":72016},{\"end\":72030,\"start\":72026},{\"end\":72039,\"start\":72038},{\"end\":72046,\"start\":72045},{\"end\":72344,\"start\":72343},{\"end\":72350,\"start\":72349},{\"end\":72366,\"start\":72365},{\"end\":72639,\"start\":72638},{\"end\":72647,\"start\":72646},{\"end\":72654,\"start\":72653},{\"end\":72660,\"start\":72659},{\"end\":72666,\"start\":72665},{\"end\":72835,\"start\":72834},{\"end\":72845,\"start\":72844},{\"end\":72856,\"start\":72855},{\"end\":72979,\"start\":72978},{\"end\":72987,\"start\":72986},{\"end\":73001,\"start\":73000},{\"end\":73398,\"start\":73397},{\"end\":73407,\"start\":73406},{\"end\":73419,\"start\":73418},{\"end\":73427,\"start\":73426},{\"end\":73440,\"start\":73439},{\"end\":73731,\"start\":73730},{\"end\":73741,\"start\":73740},{\"end\":73954,\"start\":73953},{\"end\":73962,\"start\":73961},{\"end\":73968,\"start\":73967},{\"end\":73977,\"start\":73976},{\"end\":73987,\"start\":73986},{\"end\":73998,\"start\":73994},{\"end\":74218,\"start\":74217},{\"end\":74226,\"start\":74225},{\"end\":74233,\"start\":74232},{\"end\":74241,\"start\":74240},{\"end\":74247,\"start\":74246},{\"end\":74260,\"start\":74259},{\"end\":74269,\"start\":74268},{\"end\":74271,\"start\":74270},{\"end\":74644,\"start\":74643},{\"end\":74651,\"start\":74650},{\"end\":74667,\"start\":74666},{\"end\":75047,\"start\":75046},{\"end\":75055,\"start\":75054},{\"end\":75063,\"start\":75062},{\"end\":75071,\"start\":75070},{\"end\":75078,\"start\":75077},{\"end\":75085,\"start\":75084},{\"end\":75395,\"start\":75394},{\"end\":75401,\"start\":75400},{\"end\":75408,\"start\":75407},{\"end\":75417,\"start\":75416},{\"end\":75424,\"start\":75423},{\"end\":75430,\"start\":75429},{\"end\":75741,\"start\":75740},{\"end\":75749,\"start\":75748},{\"end\":75757,\"start\":75756},{\"end\":75759,\"start\":75758},{\"end\":75766,\"start\":75765},{\"end\":75942,\"start\":75941},{\"end\":76207,\"start\":76206},{\"end\":76213,\"start\":76212},{\"end\":76220,\"start\":76219},{\"end\":76228,\"start\":76227},{\"end\":76235,\"start\":76234},{\"end\":76525,\"start\":76524},{\"end\":76531,\"start\":76530},{\"end\":76537,\"start\":76536},{\"end\":76546,\"start\":76545},{\"end\":76555,\"start\":76551},{\"end\":76766,\"start\":76765},{\"end\":76772,\"start\":76771},{\"end\":76778,\"start\":76777},{\"end\":76784,\"start\":76783},{\"end\":76790,\"start\":76789},{\"end\":76796,\"start\":76795},{\"end\":76968,\"start\":76967},{\"end\":76970,\"start\":76969},{\"end\":76980,\"start\":76979},{\"end\":77260,\"start\":77259},{\"end\":77267,\"start\":77266},{\"end\":77273,\"start\":77272},{\"end\":77283,\"start\":77282},{\"end\":77610,\"start\":77609},{\"end\":77620,\"start\":77619},{\"end\":77634,\"start\":77633},{\"end\":77889,\"start\":77888},{\"end\":77899,\"start\":77898},{\"end\":77910,\"start\":77909},{\"end\":78115,\"start\":78114},{\"end\":78122,\"start\":78121},{\"end\":78133,\"start\":78132},{\"end\":78142,\"start\":78141},{\"end\":78154,\"start\":78153},{\"end\":78167,\"start\":78166},{\"end\":78176,\"start\":78175},{\"end\":78182,\"start\":78181},{\"end\":78195,\"start\":78194},{\"end\":78522,\"start\":78521},{\"end\":78532,\"start\":78531},{\"end\":78541,\"start\":78540},{\"end\":78775,\"start\":78774},{\"end\":78784,\"start\":78783},{\"end\":78792,\"start\":78791},{\"end\":78800,\"start\":78799},{\"end\":78806,\"start\":78805},{\"end\":79113,\"start\":79112},{\"end\":79123,\"start\":79122},{\"end\":79135,\"start\":79134},{\"end\":79143,\"start\":79142},{\"end\":79471,\"start\":79470},{\"end\":79481,\"start\":79480},{\"end\":79490,\"start\":79489},{\"end\":79499,\"start\":79498},{\"end\":79508,\"start\":79507},{\"end\":79520,\"start\":79519},{\"end\":79530,\"start\":79529},{\"end\":79541,\"start\":79540},{\"end\":79548,\"start\":79547},{\"end\":79562,\"start\":79561},{\"end\":79943,\"start\":79942},{\"end\":79949,\"start\":79948},{\"end\":79958,\"start\":79957},{\"end\":79965,\"start\":79964},{\"end\":80355,\"start\":80354},{\"end\":80369,\"start\":80368},{\"end\":80532,\"start\":80531},{\"end\":80541,\"start\":80540},{\"end\":80543,\"start\":80542},{\"end\":80551,\"start\":80550},{\"end\":80553,\"start\":80552},{\"end\":80566,\"start\":80565},{\"end\":80568,\"start\":80567},{\"end\":80890,\"start\":80889},{\"end\":80896,\"start\":80895},{\"end\":81061,\"start\":81060},{\"end\":81068,\"start\":81067},{\"end\":81075,\"start\":81074},{\"end\":81083,\"start\":81082},{\"end\":81414,\"start\":81413},{\"end\":81425,\"start\":81424},{\"end\":81434,\"start\":81433},{\"end\":81584,\"start\":81583},{\"end\":81732,\"start\":81731},{\"end\":81739,\"start\":81738},{\"end\":81748,\"start\":81747},{\"end\":81754,\"start\":81753},{\"end\":81762,\"start\":81761},{\"end\":81769,\"start\":81768},{\"end\":81776,\"start\":81775},{\"end\":82087,\"start\":82086},{\"end\":82101,\"start\":82100},{\"end\":82305,\"start\":82304},{\"end\":82311,\"start\":82310},{\"end\":82319,\"start\":82318},{\"end\":82328,\"start\":82327},{\"end\":82337,\"start\":82333},{\"end\":82505,\"start\":82504},{\"end\":82516,\"start\":82515},{\"end\":82523,\"start\":82522},{\"end\":82530,\"start\":82529},{\"end\":82542,\"start\":82541},{\"end\":82550,\"start\":82549},{\"end\":82562,\"start\":82561},{\"end\":82571,\"start\":82570},{\"end\":82584,\"start\":82583},{\"end\":83071,\"start\":83070},{\"end\":83078,\"start\":83077},{\"end\":83086,\"start\":83085},{\"end\":83094,\"start\":83093},{\"end\":83100,\"start\":83099},{\"end\":83364,\"start\":83363},{\"end\":83366,\"start\":83365},{\"end\":83376,\"start\":83375},{\"end\":83544,\"start\":83543},{\"end\":83557,\"start\":83556},{\"end\":83739,\"start\":83738},{\"end\":83750,\"start\":83749},{\"end\":83762,\"start\":83761},{\"end\":83771,\"start\":83770},{\"end\":84036,\"start\":84035},{\"end\":84045,\"start\":84044}]", "bib_author_last_name": "[{\"end\":71232,\"start\":71221},{\"end\":71241,\"start\":71236},{\"end\":71255,\"start\":71245},{\"end\":71270,\"start\":71259},{\"end\":71278,\"start\":71274},{\"end\":71293,\"start\":71282},{\"end\":71305,\"start\":71297},{\"end\":71317,\"start\":71309},{\"end\":71328,\"start\":71321},{\"end\":71337,\"start\":71332},{\"end\":71703,\"start\":71700},{\"end\":71709,\"start\":71707},{\"end\":72024,\"start\":72018},{\"end\":72036,\"start\":72031},{\"end\":72043,\"start\":72040},{\"end\":72056,\"start\":72047},{\"end\":72347,\"start\":72345},{\"end\":72363,\"start\":72351},{\"end\":72371,\"start\":72367},{\"end\":72644,\"start\":72640},{\"end\":72651,\"start\":72648},{\"end\":72657,\"start\":72655},{\"end\":72663,\"start\":72661},{\"end\":72671,\"start\":72667},{\"end\":72842,\"start\":72836},{\"end\":72853,\"start\":72846},{\"end\":72862,\"start\":72857},{\"end\":72984,\"start\":72980},{\"end\":72998,\"start\":72988},{\"end\":73012,\"start\":73002},{\"end\":73404,\"start\":73399},{\"end\":73416,\"start\":73408},{\"end\":73424,\"start\":73420},{\"end\":73437,\"start\":73428},{\"end\":73450,\"start\":73441},{\"end\":73738,\"start\":73732},{\"end\":73746,\"start\":73742},{\"end\":73959,\"start\":73955},{\"end\":73965,\"start\":73963},{\"end\":73974,\"start\":73969},{\"end\":73984,\"start\":73978},{\"end\":73992,\"start\":73988},{\"end\":74004,\"start\":73999},{\"end\":74223,\"start\":74219},{\"end\":74230,\"start\":74227},{\"end\":74238,\"start\":74234},{\"end\":74244,\"start\":74242},{\"end\":74257,\"start\":74248},{\"end\":74266,\"start\":74261},{\"end\":74276,\"start\":74272},{\"end\":74648,\"start\":74645},{\"end\":74664,\"start\":74652},{\"end\":74672,\"start\":74668},{\"end\":75052,\"start\":75048},{\"end\":75060,\"start\":75056},{\"end\":75068,\"start\":75064},{\"end\":75075,\"start\":75072},{\"end\":75082,\"start\":75079},{\"end\":75089,\"start\":75086},{\"end\":75398,\"start\":75396},{\"end\":75405,\"start\":75402},{\"end\":75414,\"start\":75409},{\"end\":75421,\"start\":75418},{\"end\":75427,\"start\":75425},{\"end\":75433,\"start\":75431},{\"end\":75746,\"start\":75742},{\"end\":75754,\"start\":75750},{\"end\":75763,\"start\":75760},{\"end\":75770,\"start\":75767},{\"end\":75949,\"start\":75943},{\"end\":76210,\"start\":76208},{\"end\":76217,\"start\":76214},{\"end\":76225,\"start\":76221},{\"end\":76232,\"start\":76229},{\"end\":76241,\"start\":76236},{\"end\":76528,\"start\":76526},{\"end\":76534,\"start\":76532},{\"end\":76543,\"start\":76538},{\"end\":76549,\"start\":76547},{\"end\":76559,\"start\":76556},{\"end\":76769,\"start\":76767},{\"end\":76775,\"start\":76773},{\"end\":76781,\"start\":76779},{\"end\":76787,\"start\":76785},{\"end\":76793,\"start\":76791},{\"end\":76800,\"start\":76797},{\"end\":76977,\"start\":76971},{\"end\":76985,\"start\":76981},{\"end\":77264,\"start\":77261},{\"end\":77270,\"start\":77268},{\"end\":77280,\"start\":77274},{\"end\":77286,\"start\":77284},{\"end\":77617,\"start\":77611},{\"end\":77631,\"start\":77621},{\"end\":77645,\"start\":77635},{\"end\":77896,\"start\":77890},{\"end\":77907,\"start\":77900},{\"end\":77916,\"start\":77911},{\"end\":78119,\"start\":78116},{\"end\":78130,\"start\":78123},{\"end\":78139,\"start\":78134},{\"end\":78151,\"start\":78143},{\"end\":78164,\"start\":78155},{\"end\":78173,\"start\":78168},{\"end\":78179,\"start\":78177},{\"end\":78192,\"start\":78183},{\"end\":78201,\"start\":78196},{\"end\":78529,\"start\":78523},{\"end\":78538,\"start\":78533},{\"end\":78548,\"start\":78542},{\"end\":78781,\"start\":78776},{\"end\":78789,\"start\":78785},{\"end\":78797,\"start\":78793},{\"end\":78803,\"start\":78801},{\"end\":78810,\"start\":78807},{\"end\":79120,\"start\":79114},{\"end\":79132,\"start\":79124},{\"end\":79140,\"start\":79136},{\"end\":79153,\"start\":79144},{\"end\":79478,\"start\":79472},{\"end\":79487,\"start\":79482},{\"end\":79496,\"start\":79491},{\"end\":79505,\"start\":79500},{\"end\":79517,\"start\":79509},{\"end\":79527,\"start\":79521},{\"end\":79538,\"start\":79531},{\"end\":79545,\"start\":79542},{\"end\":79559,\"start\":79549},{\"end\":79569,\"start\":79563},{\"end\":79946,\"start\":79944},{\"end\":79955,\"start\":79950},{\"end\":79962,\"start\":79959},{\"end\":79969,\"start\":79966},{\"end\":80366,\"start\":80356},{\"end\":80376,\"start\":80370},{\"end\":80538,\"start\":80533},{\"end\":80548,\"start\":80544},{\"end\":80563,\"start\":80554},{\"end\":80574,\"start\":80569},{\"end\":80893,\"start\":80891},{\"end\":80901,\"start\":80897},{\"end\":81065,\"start\":81062},{\"end\":81072,\"start\":81069},{\"end\":81080,\"start\":81076},{\"end\":81088,\"start\":81084},{\"end\":81422,\"start\":81415},{\"end\":81431,\"start\":81426},{\"end\":81441,\"start\":81435},{\"end\":81590,\"start\":81585},{\"end\":81736,\"start\":81733},{\"end\":81745,\"start\":81740},{\"end\":81751,\"start\":81749},{\"end\":81759,\"start\":81755},{\"end\":81766,\"start\":81763},{\"end\":81773,\"start\":81770},{\"end\":81780,\"start\":81777},{\"end\":82098,\"start\":82088},{\"end\":82108,\"start\":82102},{\"end\":82308,\"start\":82306},{\"end\":82316,\"start\":82312},{\"end\":82325,\"start\":82320},{\"end\":82331,\"start\":82329},{\"end\":82341,\"start\":82338},{\"end\":82513,\"start\":82506},{\"end\":82520,\"start\":82517},{\"end\":82527,\"start\":82524},{\"end\":82539,\"start\":82531},{\"end\":82547,\"start\":82543},{\"end\":82559,\"start\":82551},{\"end\":82568,\"start\":82563},{\"end\":82581,\"start\":82572},{\"end\":82595,\"start\":82585},{\"end\":83075,\"start\":83072},{\"end\":83083,\"start\":83079},{\"end\":83091,\"start\":83087},{\"end\":83097,\"start\":83095},{\"end\":83105,\"start\":83101},{\"end\":83373,\"start\":83367},{\"end\":83379,\"start\":83377},{\"end\":83554,\"start\":83545},{\"end\":83567,\"start\":83558},{\"end\":83747,\"start\":83740},{\"end\":83759,\"start\":83751},{\"end\":83768,\"start\":83763},{\"end\":83776,\"start\":83772},{\"end\":84042,\"start\":84037},{\"end\":84050,\"start\":84046}]", "bib_entry": "[{\"attributes\":{\"doi\":\"arXiv:2010.11929\",\"id\":\"b0\"},\"end\":71622,\"start\":71143},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":167217261},\"end\":71932,\"start\":71624},{\"attributes\":{\"doi\":\"arXiv:1810.04805\",\"id\":\"b2\"},\"end\":72260,\"start\":71934},{\"attributes\":{\"doi\":\"arXiv:1708.06733\",\"id\":\"b3\"},\"end\":72563,\"start\":72262},{\"attributes\":{\"id\":\"b4\"},\"end\":72797,\"start\":72565},{\"attributes\":{\"id\":\"b5\"},\"end\":72943,\"start\":72799},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":203610516},\"end\":73304,\"start\":72945},{\"attributes\":{\"doi\":\"arXiv:2106.08970\",\"id\":\"b7\"},\"end\":73677,\"start\":73306},{\"attributes\":{\"doi\":\"arXiv:2102.10369\",\"id\":\"b8\"},\"end\":73894,\"start\":73679},{\"attributes\":{\"id\":\"b9\"},\"end\":74135,\"start\":73896},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":67846878},\"end\":74564,\"start\":74137},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":44096776},\"end\":74980,\"start\":74566},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":238531600},\"end\":75328,\"start\":74982},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":239616453},\"end\":75670,\"start\":75330},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":233182042},\"end\":75903,\"start\":75672},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":121049},\"end\":76115,\"start\":75905},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":220633516},\"end\":76493,\"start\":76117},{\"attributes\":{\"doi\":\"arXiv:2007.08745\",\"id\":\"b17\"},\"end\":76706,\"start\":76495},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":237054216},\"end\":76928,\"start\":76708},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":223953609},\"end\":77185,\"start\":76930},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":220363879},\"end\":77518,\"start\":77187},{\"attributes\":{\"doi\":\"arXiv:2006.11623\",\"id\":\"b21\"},\"end\":77851,\"start\":77520},{\"attributes\":{\"doi\":\"arXiv:1912.02771\",\"id\":\"b22\"},\"end\":78060,\"start\":77853},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":195820405},\"end\":78477,\"start\":78062},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":13201231},\"end\":78703,\"start\":78479},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":189928401},\"end\":79048,\"start\":78705},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":10488675},\"end\":79398,\"start\":79050},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":202786778},\"end\":79894,\"start\":79400},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":206594692},\"end\":80297,\"start\":79896},{\"attributes\":{\"id\":\"b29\"},\"end\":80473,\"start\":80299},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":3136364},\"end\":80843,\"start\":80475},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":16664790},\"end\":81015,\"start\":80845},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":459456},\"end\":81374,\"start\":81017},{\"attributes\":{\"id\":\"b33\"},\"end\":81524,\"start\":81376},{\"attributes\":{\"doi\":\"arXiv:1609.04747\",\"id\":\"b34\"},\"end\":81729,\"start\":81526},{\"attributes\":{\"doi\":\"arXiv:1908.03265\",\"id\":\"b35\"},\"end\":82030,\"start\":81731},{\"attributes\":{\"doi\":\"arXiv:1608.03983\",\"id\":\"b36\"},\"end\":82263,\"start\":82032},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":233033462},\"end\":82470,\"start\":82265},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":206592484},\"end\":82974,\"start\":82472},{\"attributes\":{\"doi\":\"arXiv:1908.01763\",\"id\":\"b39\"},\"end\":83317,\"start\":82976},{\"attributes\":{\"doi\":\"arXiv:1412.6980\",\"id\":\"b40\"},\"end\":83517,\"start\":83319},{\"attributes\":{\"doi\":\"arXiv:1605.07146\",\"id\":\"b41\"},\"end\":83694,\"start\":83519},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":2645819},\"end\":83993,\"start\":83696},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":237386481},\"end\":84234,\"start\":83995}]", "bib_title": "[{\"end\":71696,\"start\":71624},{\"end\":72976,\"start\":72945},{\"end\":74215,\"start\":74137},{\"end\":74641,\"start\":74566},{\"end\":75044,\"start\":74982},{\"end\":75392,\"start\":75330},{\"end\":75738,\"start\":75672},{\"end\":75939,\"start\":75905},{\"end\":76204,\"start\":76117},{\"end\":76763,\"start\":76708},{\"end\":76965,\"start\":76930},{\"end\":77257,\"start\":77187},{\"end\":78112,\"start\":78062},{\"end\":78519,\"start\":78479},{\"end\":78772,\"start\":78705},{\"end\":79110,\"start\":79050},{\"end\":79468,\"start\":79400},{\"end\":79940,\"start\":79896},{\"end\":80529,\"start\":80475},{\"end\":80887,\"start\":80845},{\"end\":81058,\"start\":81017},{\"end\":82302,\"start\":82265},{\"end\":82502,\"start\":82472},{\"end\":83736,\"start\":83696},{\"end\":84033,\"start\":83995}]", "bib_author": "[{\"end\":71234,\"start\":71219},{\"end\":71243,\"start\":71234},{\"end\":71257,\"start\":71243},{\"end\":71272,\"start\":71257},{\"end\":71280,\"start\":71272},{\"end\":71295,\"start\":71280},{\"end\":71307,\"start\":71295},{\"end\":71319,\"start\":71307},{\"end\":71330,\"start\":71319},{\"end\":71339,\"start\":71330},{\"end\":71705,\"start\":71698},{\"end\":71711,\"start\":71705},{\"end\":72026,\"start\":72016},{\"end\":72038,\"start\":72026},{\"end\":72045,\"start\":72038},{\"end\":72058,\"start\":72045},{\"end\":72349,\"start\":72343},{\"end\":72365,\"start\":72349},{\"end\":72373,\"start\":72365},{\"end\":72646,\"start\":72638},{\"end\":72653,\"start\":72646},{\"end\":72659,\"start\":72653},{\"end\":72665,\"start\":72659},{\"end\":72673,\"start\":72665},{\"end\":72844,\"start\":72834},{\"end\":72855,\"start\":72844},{\"end\":72864,\"start\":72855},{\"end\":72986,\"start\":72978},{\"end\":73000,\"start\":72986},{\"end\":73014,\"start\":73000},{\"end\":73406,\"start\":73397},{\"end\":73418,\"start\":73406},{\"end\":73426,\"start\":73418},{\"end\":73439,\"start\":73426},{\"end\":73452,\"start\":73439},{\"end\":73740,\"start\":73730},{\"end\":73748,\"start\":73740},{\"end\":73961,\"start\":73953},{\"end\":73967,\"start\":73961},{\"end\":73976,\"start\":73967},{\"end\":73986,\"start\":73976},{\"end\":73994,\"start\":73986},{\"end\":74006,\"start\":73994},{\"end\":74225,\"start\":74217},{\"end\":74232,\"start\":74225},{\"end\":74240,\"start\":74232},{\"end\":74246,\"start\":74240},{\"end\":74259,\"start\":74246},{\"end\":74268,\"start\":74259},{\"end\":74278,\"start\":74268},{\"end\":74650,\"start\":74643},{\"end\":74666,\"start\":74650},{\"end\":74674,\"start\":74666},{\"end\":75054,\"start\":75046},{\"end\":75062,\"start\":75054},{\"end\":75070,\"start\":75062},{\"end\":75077,\"start\":75070},{\"end\":75084,\"start\":75077},{\"end\":75091,\"start\":75084},{\"end\":75400,\"start\":75394},{\"end\":75407,\"start\":75400},{\"end\":75416,\"start\":75407},{\"end\":75423,\"start\":75416},{\"end\":75429,\"start\":75423},{\"end\":75435,\"start\":75429},{\"end\":75748,\"start\":75740},{\"end\":75756,\"start\":75748},{\"end\":75765,\"start\":75756},{\"end\":75772,\"start\":75765},{\"end\":75951,\"start\":75941},{\"end\":76212,\"start\":76206},{\"end\":76219,\"start\":76212},{\"end\":76227,\"start\":76219},{\"end\":76234,\"start\":76227},{\"end\":76243,\"start\":76234},{\"end\":76530,\"start\":76524},{\"end\":76536,\"start\":76530},{\"end\":76545,\"start\":76536},{\"end\":76551,\"start\":76545},{\"end\":76561,\"start\":76551},{\"end\":76771,\"start\":76765},{\"end\":76777,\"start\":76771},{\"end\":76783,\"start\":76777},{\"end\":76789,\"start\":76783},{\"end\":76795,\"start\":76789},{\"end\":76802,\"start\":76795},{\"end\":76979,\"start\":76967},{\"end\":76987,\"start\":76979},{\"end\":77266,\"start\":77259},{\"end\":77272,\"start\":77266},{\"end\":77282,\"start\":77272},{\"end\":77288,\"start\":77282},{\"end\":77619,\"start\":77609},{\"end\":77633,\"start\":77619},{\"end\":77647,\"start\":77633},{\"end\":77898,\"start\":77888},{\"end\":77909,\"start\":77898},{\"end\":77918,\"start\":77909},{\"end\":78121,\"start\":78114},{\"end\":78132,\"start\":78121},{\"end\":78141,\"start\":78132},{\"end\":78153,\"start\":78141},{\"end\":78166,\"start\":78153},{\"end\":78175,\"start\":78166},{\"end\":78181,\"start\":78175},{\"end\":78194,\"start\":78181},{\"end\":78203,\"start\":78194},{\"end\":78531,\"start\":78521},{\"end\":78540,\"start\":78531},{\"end\":78550,\"start\":78540},{\"end\":78783,\"start\":78774},{\"end\":78791,\"start\":78783},{\"end\":78799,\"start\":78791},{\"end\":78805,\"start\":78799},{\"end\":78812,\"start\":78805},{\"end\":79122,\"start\":79112},{\"end\":79134,\"start\":79122},{\"end\":79142,\"start\":79134},{\"end\":79155,\"start\":79142},{\"end\":79480,\"start\":79470},{\"end\":79489,\"start\":79480},{\"end\":79498,\"start\":79489},{\"end\":79507,\"start\":79498},{\"end\":79519,\"start\":79507},{\"end\":79529,\"start\":79519},{\"end\":79540,\"start\":79529},{\"end\":79547,\"start\":79540},{\"end\":79561,\"start\":79547},{\"end\":79571,\"start\":79561},{\"end\":79948,\"start\":79942},{\"end\":79957,\"start\":79948},{\"end\":79964,\"start\":79957},{\"end\":79971,\"start\":79964},{\"end\":80368,\"start\":80354},{\"end\":80378,\"start\":80368},{\"end\":80540,\"start\":80531},{\"end\":80550,\"start\":80540},{\"end\":80565,\"start\":80550},{\"end\":80576,\"start\":80565},{\"end\":80895,\"start\":80889},{\"end\":80903,\"start\":80895},{\"end\":81067,\"start\":81060},{\"end\":81074,\"start\":81067},{\"end\":81082,\"start\":81074},{\"end\":81090,\"start\":81082},{\"end\":81424,\"start\":81413},{\"end\":81433,\"start\":81424},{\"end\":81443,\"start\":81433},{\"end\":81592,\"start\":81583},{\"end\":81738,\"start\":81731},{\"end\":81747,\"start\":81738},{\"end\":81753,\"start\":81747},{\"end\":81761,\"start\":81753},{\"end\":81768,\"start\":81761},{\"end\":81775,\"start\":81768},{\"end\":81782,\"start\":81775},{\"end\":82100,\"start\":82086},{\"end\":82110,\"start\":82100},{\"end\":82310,\"start\":82304},{\"end\":82318,\"start\":82310},{\"end\":82327,\"start\":82318},{\"end\":82333,\"start\":82327},{\"end\":82343,\"start\":82333},{\"end\":82515,\"start\":82504},{\"end\":82522,\"start\":82515},{\"end\":82529,\"start\":82522},{\"end\":82541,\"start\":82529},{\"end\":82549,\"start\":82541},{\"end\":82561,\"start\":82549},{\"end\":82570,\"start\":82561},{\"end\":82583,\"start\":82570},{\"end\":82597,\"start\":82583},{\"end\":83077,\"start\":83070},{\"end\":83085,\"start\":83077},{\"end\":83093,\"start\":83085},{\"end\":83099,\"start\":83093},{\"end\":83107,\"start\":83099},{\"end\":83375,\"start\":83363},{\"end\":83381,\"start\":83375},{\"end\":83556,\"start\":83543},{\"end\":83569,\"start\":83556},{\"end\":83749,\"start\":83738},{\"end\":83761,\"start\":83749},{\"end\":83770,\"start\":83761},{\"end\":83778,\"start\":83770},{\"end\":84044,\"start\":84035},{\"end\":84052,\"start\":84044}]", "bib_venue": "[{\"end\":73123,\"start\":73077},{\"end\":80112,\"start\":80050},{\"end\":81207,\"start\":81157},{\"end\":82738,\"start\":82676},{\"end\":71217,\"start\":71143},{\"end\":71755,\"start\":71711},{\"end\":72014,\"start\":71934},{\"end\":72341,\"start\":72262},{\"end\":72636,\"start\":72565},{\"end\":72832,\"start\":72799},{\"end\":73075,\"start\":73014},{\"end\":73395,\"start\":73306},{\"end\":73728,\"start\":73679},{\"end\":73951,\"start\":73896},{\"end\":74326,\"start\":74278},{\"end\":74746,\"start\":74674},{\"end\":75143,\"start\":75091},{\"end\":75484,\"start\":75435},{\"end\":75776,\"start\":75772},{\"end\":75987,\"start\":75951},{\"end\":76295,\"start\":76243},{\"end\":76522,\"start\":76495},{\"end\":76806,\"start\":76802},{\"end\":77036,\"start\":76987},{\"end\":77326,\"start\":77288},{\"end\":77607,\"start\":77520},{\"end\":77886,\"start\":77853},{\"end\":78252,\"start\":78203},{\"end\":78567,\"start\":78550},{\"end\":78861,\"start\":78812},{\"end\":79203,\"start\":79155},{\"end\":79620,\"start\":79571},{\"end\":80048,\"start\":79971},{\"end\":80352,\"start\":80299},{\"end\":80634,\"start\":80576},{\"end\":80910,\"start\":80903},{\"end\":81155,\"start\":81090},{\"end\":81411,\"start\":81376},{\"end\":81581,\"start\":81526},{\"end\":81854,\"start\":81798},{\"end\":82084,\"start\":82032},{\"end\":82356,\"start\":82343},{\"end\":82674,\"start\":82597},{\"end\":83068,\"start\":82976},{\"end\":83361,\"start\":83319},{\"end\":83541,\"start\":83519},{\"end\":83822,\"start\":83778},{\"end\":84101,\"start\":84052}]"}}}, "year": 2023, "month": 12, "day": 17}