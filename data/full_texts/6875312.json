{"id": 6875312, "updated": "2023-09-27 21:45:24.484", "metadata": {"title": "Asynchronous Methods for Deep Reinforcement Learning", "authors": "[{\"first\":\"Volodymyr\",\"last\":\"Mnih\",\"middle\":[]},{\"first\":\"Adria\",\"last\":\"Badia\",\"middle\":[\"Puigdomenech\"]},{\"first\":\"Mehdi\",\"last\":\"Mirza\",\"middle\":[]},{\"first\":\"Alex\",\"last\":\"Graves\",\"middle\":[]},{\"first\":\"Timothy\",\"last\":\"Lillicrap\",\"middle\":[\"P.\"]},{\"first\":\"Tim\",\"last\":\"Harley\",\"middle\":[]},{\"first\":\"David\",\"last\":\"Silver\",\"middle\":[]},{\"first\":\"Koray\",\"last\":\"Kavukcuoglu\",\"middle\":[]}]", "venue": "ICML 2016", "journal": null, "publication_date": {"year": 2016, "month": null, "day": null}, "abstract": "We propose a conceptually simple and lightweight framework for deep reinforcement learning that uses asynchronous gradient descent for optimization of deep neural network controllers. We present asynchronous variants of four standard reinforcement learning algorithms and show that parallel actor-learners have a stabilizing effect on training allowing all four methods to successfully train neural network controllers. The best performing method, an asynchronous variant of actor-critic, surpasses the current state-of-the-art on the Atari domain while training for half the time on a single multi-core CPU instead of a GPU. Furthermore, we show that asynchronous actor-critic succeeds on a wide variety of continuous motor control problems as well as on a new task of navigating random 3D mazes using a visual input.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1602.01783", "mag": "2964043796", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/MnihBMGLHSK16", "doi": null}}, "content": {"source": {"pdf_hash": "94cb59148d903e164a416ebc884a26b21ee5de12", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1602.01783v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "2522b3d62e943df08b92e805abfd2e1f277ca648", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/94cb59148d903e164a416ebc884a26b21ee5de12.txt", "contents": "\nAsynchronous Methods for Deep Reinforcement Learning\n\n\nVolodymyr Mnih \nAdri\u00e0 Puigdom\u00e8nech Badia \nMehdi Mirza \nMontreal Institute for Learning Algorithms (MILA)\nUniversity of Montreal\n\n\nAlex Graves \nTim Harley \nTimothy P Lillicrap \nDavid Silver \nKoray Kavukcuoglu \n\nVMNIH@GOOGLE.COM\nADRIAP@GOOGLE.COM\nGRAVESA@GOOGLE.COM\nTHARLEY@GOOGLE.COM\nDAVIDSILVER@GOOGLE.COM\nKORAYK@GOOGLE.COM 1 Google DeepMind\nMIRZAMOM@IRO.UMONTREAL.CA\n\n\nAsynchronous Methods for Deep Reinforcement Learning\n\nWe propose a conceptually simple and lightweight framework for deep reinforcement learning that uses asynchronous gradient descent for optimization of deep neural network controllers. We present asynchronous variants of four standard reinforcement learning algorithms and show that parallel actor-learners have a stabilizing effect on training allowing all four methods to successfully train neural network controllers. The best performing method, an asynchronous variant of actor-critic, surpasses the current state-of-the-art on the Atari domain while training for half the time on a single multi-core CPU instead of a GPU. Furthermore, we show that asynchronous actor-critic succeeds on a wide variety of continuous motor control problems as well as on a new task of navigating random 3D mazes using a visual input.\n\nIntroduction\n\nDeep neural networks provide rich representations that can enable reinforcement learning (RL) algorithms to perform effectively. However, it was previously thought that the combination of simple online RL algorithms with deep neural networks was fundamentally unstable. Instead, a variety of solutions have been proposed to stabilize the algorithm (Riedmiller, 2005;Mnih et al., 2013;Van Hasselt et al., 2015;Schulman et al., 2015a). These approaches share a common idea: the sequence of observed data encountered by an online RL agent is non-stationary, and on-line RL updates are strongly correlated. By storing the agent's data in an experience replay memory, the data can be batched (Riedmiller, 2005;Schulman et al., 2015a) or randomly sampled (Mnih et al., 2013;Van Hasselt et al., 2015) from different time-steps. Aggregating over memory in this way reduces non-stationarity and decorrelates updates, but at the same time limits the methods to off-policy reinforcement learning algorithms.\n\nDeep RL algorithms based on experience replay have achieved unprecedented success in challenging domains such as Atari 2600. However, experience replay has several drawbacks: it uses more memory and computation per real interaction; and it requires off-policy learning algorithms that can update from data generated by an older policy.\n\nIn this paper we provide a very different paradigm for deep reinforcement learning. Instead of experience replay, we asynchronously execute multiple agents in parallel, on multiple instances of the environment. This parallelism also decorrelates the agents' data into a more stationary process, since at any given time-step the parallel agents will be experiencing a variety of different states. This simple idea enables a much larger spectrum of fundamental on-policy RL algorithms, such as Sarsa, n-step methods, and actorcritic methods, as well as off-policy RL algorithms such as Q-learning, to be applied robustly and effectively using deep neural networks.\n\nOur parallel reinforcement learning paradigm also offers practical benefits. Whereas previous approaches to deep reinforcement learning rely heavily on specialized hardware such as GPUs Van Hasselt et al., 2015;Schaul et al., 2015) or massively distributed architectures (Nair et al., 2015), our experiments run on a single machine with a standard multi-core CPU. When applied to a variety of Atari 2600 domains, on many games asynchronous reinforcement learning achieves better results, in far less arXiv:1602.01783v2 [cs.LG] 16 Jun 2016 time than previous GPU-based algorithms, using far less resource than massively distributed approaches. The best of the proposed methods, asynchronous advantage actorcritic (A3C), also mastered a variety of continuous motor control tasks as well as learned general strategies for exploring 3D mazes purely from visual inputs. We believe that the success of A3C on both 2D and 3D games, discrete and continuous action spaces, as well as its ability to train feedforward and recurrent agents makes it the most general and successful reinforcement learning agent to date.\n\n\nRelated Work\n\nThe General Reinforcement Learning Architecture (Gorila) of (Nair et al., 2015) performs asynchronous training of reinforcement learning agents in a distributed setting. In Gorila, each process contains an actor that acts in its own copy of the environment, a separate replay memory, and a learner that samples data from the replay memory and computes gradients of the DQN loss  with respect to the policy parameters. The gradients are asynchronously sent to a central parameter server which updates a central copy of the model. The updated policy parameters are sent to the actor-learners at fixed intervals. By using 100 separate actor-learner processes and 30 parameter server instances, a total of 130 machines, Gorila was able to significantly outperform DQN over 49 Atari games. On many games Gorila reached the score achieved by DQN over 20 times faster than DQN. We also note that a similar way of parallelizing DQN was proposed by (Chavez et al., 2015).\n\nIn earlier work, (Li & Schuurmans, 2011) applied the Map Reduce framework to parallelizing batch reinforcement learning methods with linear function approximation. Parallelism was used to speed up large matrix operations but not to parallelize the collection of experience or stabilize learning. (Grounds & Kudenko, 2008) proposed a parallel version of the Sarsa algorithm that uses multiple separate actor-learners to accelerate training. Each actorlearner learns separately and periodically sends updates to weights that have changed significantly to the other learners using peer-to-peer communication.\n\n(Tsitsiklis, 1994) studied convergence properties of Qlearning in the asynchronous optimization setting. These results show that Q-learning is still guaranteed to converge when some of the information is outdated as long as outdated information is always eventually discarded and several other technical assumptions are satisfied. Even earlier, (Bertsekas, 1982) studied the related problem of distributed dynamic programming.\n\nAnother related area of work is in evolutionary methods, which are often straightforward to parallelize by distributing fitness evaluations over multiple machines or threads (Tomassini, 1999). Such parallel evolutionary ap-proaches have recently been applied to some visual reinforcement learning tasks. In one example, (Koutn\u00edk et al., 2014) evolved convolutional neural network controllers for the TORCS driving simulator by performing fitness evaluations on 8 CPU cores in parallel.\n\n\nReinforcement Learning Background\n\nWe consider the standard reinforcement learning setting where an agent interacts with an environment E over a number of discrete time steps. At each time step t, the agent receives a state s t and selects an action a t from some set of possible actions A according to its policy \u03c0, where \u03c0 is a mapping from states s t to actions a t . In return, the agent receives the next state s t+1 and receives a scalar reward r t . The process continues until the agent reaches a terminal state after which the process restarts. The return R t = \u221e k=0 \u03b3 k r t+k is the total accumulated return from time step t with discount factor \u03b3 \u2208 (0, 1]. The goal of the agent is to maximize the expected return from each state s t .\n\nThe action value Q \u03c0 (s, a) = E [R t |s t = s, a] is the expected return for selecting action a in state s and following policy \u03c0. The optimal value function Q * (s, a) = max \u03c0 Q \u03c0 (s, a) gives the maximum action value for state s and action a achievable by any policy. Similarly, the value of state s under policy \u03c0 is defined as V \u03c0 (s) = E [R t |s t = s] and is simply the expected return for following policy \u03c0 from state s.\n\nIn value-based model-free reinforcement learning methods, the action value function is represented using a function approximator, such as a neural network. Let Q(s, a; \u03b8) be an approximate action-value function with parameters \u03b8. The updates to \u03b8 can be derived from a variety of reinforcement learning algorithms. One example of such an algorithm is Q-learning, which aims to directly approximate the optimal action value function: Q * (s, a) \u2248 Q(s, a; \u03b8). In one-step Q-learning, the parameters \u03b8 of the action value function Q(s, a; \u03b8) are learned by iteratively minimizing a sequence of loss functions, where the ith loss function defined as\nL i (\u03b8 i ) = E r + \u03b3 max a Q(s , a ; \u03b8 i\u22121 ) \u2212 Q(s, a; \u03b8 i ) 2\nwhere s is the state encountered after state s.\n\nWe refer to the above method as one-step Q-learning because it updates the action value Q(s, a) toward the onestep return r + \u03b3 max a Q(s , a ; \u03b8). One drawback of using one-step methods is that obtaining a reward r only directly affects the value of the state action pair s, a that led to the reward. The values of other state action pairs are affected only indirectly through the updated value Q(s, a). This can make the learning process slow since many updates are required the propagate a reward to the relevant preceding states and actions.\n\nOne way of propagating rewards faster is by using nstep returns (Watkins, 1989;Peng & Williams, 1996). In n-step Q-learning, Q(s, a) is updated toward the nstep return defined as r t + \u03b3r t+1 + \u00b7 \u00b7 \u00b7 + \u03b3 n\u22121 r t+n\u22121 + max a \u03b3 n Q(s t+n , a). This results in a single reward r directly affecting the values of n preceding state action pairs. This makes the process of propagating rewards to relevant state-action pairs potentially much more efficient.\n\nIn contrast to value-based methods, policy-based modelfree methods directly parameterize the policy \u03c0(a|s; \u03b8) and update the parameters \u03b8 by performing, typically approximate, gradient ascent on E[R t ]. One example of such a method is the REINFORCE family of algorithms due to Williams (1992). Standard REINFORCE updates the policy parameters \u03b8 in the direction \u2207 \u03b8 log \u03c0(a t |s t ; \u03b8)R t , which is an unbiased estimate of \u2207 \u03b8 E[R t ]. It is possible to reduce the variance of this estimate while keeping it unbiased by subtracting a learned function of the state b t (s t ), known as a baseline (Williams, 1992), from the return. The resulting gradient is \u2207 \u03b8 log \u03c0(a t |s t ; \u03b8) (R t \u2212 b t (s t )).\n\nA learned estimate of the value function is commonly used as the baseline b t (s t ) \u2248 V \u03c0 (s t ) leading to a much lower variance estimate of the policy gradient. When an approximate value function is used as the baseline, the quantity R t \u2212 b t used to scale the policy gradient can be seen as an estimate of the advantage of action a t in state s t , or A(a t , s t ) = Q(a t , s t )\u2212V (s t ), because R t is an estimate of Q \u03c0 (a t , s t ) and b t is an estimate of V \u03c0 (s t ). This approach can be viewed as an actor-critic architecture where the policy \u03c0 is the actor and the baseline b t is the critic (Sutton & Barto, 1998;Degris et al., 2012).\n\n\nAsynchronous RL Framework\n\nWe now present multi-threaded asynchronous variants of one-step Sarsa, one-step Q-learning, n-step Q-learning, and advantage actor-critic. The aim in designing these methods was to find RL algorithms that can train deep neural network policies reliably and without large resource requirements. While the underlying RL methods are quite different, with actor-critic being an on-policy policy search method and Q-learning being an off-policy value-based method, we use two main ideas to make all four algorithms practical given our design goal.\n\nFirst, we use asynchronous actor-learners, similarly to the Gorila framework (Nair et al., 2015), but instead of using separate machines and a parameter server, we use multiple CPU threads on a single machine. Keeping the learners on a single machine removes the communication costs of sending gradients and parameters and enables us to use Hogwild! (Recht et al., 2011) style updates for training.\n\nSecond, we make the observation that multiple actors-Algorithm 1 Asynchronous one-step Q-learning -pseudocode for each actor-learner thread.\n\n// Assume global shared \u03b8, \u03b8 \u2212 , and counter T = 0. Initialize thread step counter t \u2190 0 Initialize target network weights \u03b8 \u2212 \u2190 \u03b8 Initialize network gradients d\u03b8 \u2190 0 Get initial state s repeat Take action a with -greedy policy based on Q(s, a; \u03b8) Receive new state s and reward r y = r for terminal s r + \u03b3 max a Q(s , a ; \u03b8 \u2212 ) for non-terminal s Accumulate gradients wrt \u03b8: d\u03b8 \u2190 d\u03b8 + \u2202(y\u2212Q(s,a;\u03b8)) 2 \u2202\u03b8 s = s T \u2190 T + 1 and t \u2190 t + 1 if T mod Itarget == 0 then Update the target network \u03b8 \u2212 \u2190 \u03b8 end if if t mod I AsyncU pdate == 0 or s is terminal then Perform asynchronous update of \u03b8 using d\u03b8. Clear gradients d\u03b8 \u2190 0. end if until T > Tmax learners running in parallel are likely to be exploring different parts of the environment. Moreover, one can explicitly use different exploration policies in each actor-learner to maximize this diversity. By running different exploration policies in different threads, the overall changes being made to the parameters by multiple actor-learners applying online updates in parallel are likely to be less correlated in time than a single agent applying online updates. Hence, we do not use a replay memory and rely on parallel actors employing different exploration policies to perform the stabilizing role undertaken by experience replay in the DQN training algorithm.\n\nIn addition to stabilizing learning, using multiple parallel actor-learners has multiple practical benefits. First, we obtain a reduction in training time that is roughly linear in the number of parallel actor-learners. Second, since we no longer rely on experience replay for stabilizing learning we are able to use on-policy reinforcement learning methods such as Sarsa and actor-critic to train neural networks in a stable way. We now describe our variants of one-step Qlearning, one-step Sarsa, n-step Q-learning and advantage actor-critic.\n\nAsynchronous one-step Q-learning: Pseudocode for our variant of Q-learning, which we call Asynchronous onestep Q-learning, is shown in Algorithm 1. Each thread interacts with its own copy of the environment and at each step computes a gradient of the Q-learning loss. We use a shared and slowly changing target network in computing the Q-learning loss, as was proposed in the DQN training method. We also accumulate gradients over multiple timesteps before they are applied, which is similar to us-ing minibatches. This reduces the chances of multiple actor learners overwriting each other's updates. Accumulating updates over several steps also provides some ability to trade off computational efficiency for data efficiency.\n\nFinally, we found that giving each thread a different exploration policy helps improve robustness. Adding diversity to exploration in this manner also generally improves performance through better exploration. While there are many possible ways of making the exploration policies differ we experiment with using -greedy exploration with periodically sampled from some distribution by each thread.\n\nAsynchronous one-step Sarsa: The asynchronous onestep Sarsa algorithm is the same as asynchronous one-step Q-learning as given in Algorithm 1 except that it uses a different target value for Q(s, a). The target value used by one-step Sarsa is r + \u03b3Q(s , a ; \u03b8 \u2212 ) where a is the action taken in state s (Rummery & Niranjan, 1994;Sutton & Barto, 1998). We again use a target network and updates accumulated over multiple timesteps to stabilize learning.\n\nAsynchronous n-step Q-learning: Pseudocode for our variant of multi-step Q-learning is shown in Supplementary Algorithm S2. The algorithm is somewhat unusual because it operates in the forward view by explicitly computing nstep returns, as opposed to the more common backward view used by techniques like eligibility traces (Sutton & Barto, 1998). We found that using the forward view is easier when training neural networks with momentum-based methods and backpropagation through time. In order to compute a single update, the algorithm first selects actions using its exploration policy for up to t max steps or until a terminal state is reached. This process results in the agent receiving up to t max rewards from the environment since its last update. The algorithm then computes gradients for n-step Q-learning updates for each of the state-action pairs encountered since the last update. Each n-step update uses the longest possible n-step return resulting in a one-step update for the last state, a two-step update for the second last state, and so on for a total of up to t max updates. The accumulated updates are applied in a single gradient step.\n\nAsynchronous advantage actor-critic: The algorithm, which we call asynchronous advantage actor-critic (A3C), maintains a policy \u03c0(a t |s t ; \u03b8) and an estimate of the value function V (s t ; \u03b8 v ). Like our variant of n-step Q-learning, our variant of actor-critic also operates in the forward view and uses the same mix of n-step returns to update both the policy and the value-function. The policy and the value function are updated after every t max actions or when a terminal state is reached. The update performed by the algorithm can be seen as \u2207 \u03b8 log \u03c0(a t |s t ; \u03b8 )A(s t , a t ; \u03b8, \u03b8 v ) where A(s t , a t ; \u03b8, \u03b8 v ) is an estimate of the advantage function given by\nk\u22121 i=0 \u03b3 i r t+i + \u03b3 k V (s t+k ; \u03b8 v ) \u2212 V (s t ; \u03b8 v ),\nwhere k can vary from state to state and is upper-bounded by t max . The pseudocode for the algorithm is presented in Supplementary Algorithm S3.\n\nAs with the value-based methods we rely on parallel actorlearners and accumulated updates for improving training stability. Note that while the parameters \u03b8 of the policy and \u03b8 v of the value function are shown as being separate for generality, we always share some of the parameters in practice. We typically use a convolutional neural network that has one softmax output for the policy \u03c0(a t |s t ; \u03b8) and one linear output for the value function V (s t ; \u03b8 v ), with all non-output layers shared.\n\nWe also found that adding the entropy of the policy \u03c0 to the objective function improved exploration by discouraging premature convergence to suboptimal deterministic policies. This technique was originally proposed by (Williams & Peng, 1991), who found that it was particularly helpful on tasks requiring hierarchical behavior. The gradient of the full objective function including the entropy regularization term with respect to the policy parameters takes the form\n\u2207 \u03b8 log \u03c0(a t |s t ; \u03b8 )(R t \u2212 V (s t ; \u03b8 v )) + \u03b2\u2207 \u03b8 H(\u03c0(s t ; \u03b8 )),\nwhere H is the entropy. The hyperparameter \u03b2 controls the strength of the entropy regularization term.\n\nOptimization: We investigated three different optimization algorithms in our asynchronous framework -SGD with momentum, RMSProp (Tieleman & Hinton, 2012) without shared statistics, and RMSProp with shared statistics. We used the standard non-centered RMSProp update given by\ng = \u03b1g + (1 \u2212 \u03b1)\u2206\u03b8 2 and \u03b8 \u2190 \u03b8 \u2212 \u03b7 \u2206\u03b8 \u221a g + ,(1)\nwhere all operations are performed elementwise. A comparison on a subset of Atari 2600 games showed that a variant of RMSProp where statistics g are shared across threads is considerably more robust than the other two methods. Full details of the methods and comparisons are included in Supplementary Section 7.\n\n\nExperiments\n\nWe use four different platforms for assessing the properties of the proposed framework. We perform most of our experiments using the Arcade Learning Environment (Bellemare et al., 2012), which provides a simulator for Atari 2600 games. This is one of the most commonly used benchmark environments for RL algorithms. We use the Atari domain to compare against state of the art results (Van Hasselt et al., 2015;Wang et al., 2015;Schaul et al., 2015;Nair et al., 2015;Mnih et al., 2015), as well as to carry out a detailed stability and scalability analysis of the proposed methods. We performed further comparisons using the TORCS 3D car racing simulator (Wymann et al., 2013). We also use Space Invaders DQN 1-step Q 1-step SARSA n-step Q A3C Figure 1. Learning speed comparison for DQN and the new asynchronous algorithms on five Atari 2600 games. DQN was trained on a single Nvidia K40 GPU while the asynchronous methods were trained using 16 CPU cores. The plots are averaged over 5 runs. In the case of DQN the runs were for different seeds with fixed hyperparameters. For asynchronous methods we average over the best 5 models from 50 experiments with learning rates sampled from LogU nif orm(10 \u22124 , 10 \u22122 ) and all other hyperparameters fixed.\n\ntwo additional domains to evaluate only the A3C algorithm -Mujoco and Labyrinth. MuJoCo (Todorov, 2015) is a physics simulator for evaluating agents on continuous motor control tasks with contact dynamics. Labyrinth is a new 3D environment where the agent must learn to find rewards in randomly generated mazes from a visual input. The precise details of our experimental setup can be found in Supplementary Section 8.\n\n\nAtari 2600 Games\n\nWe first present results on a subset of Atari 2600 games to demonstrate the training speed of the new methods. Figure 1 compares the learning speed of the DQN algorithm trained on an Nvidia K40 GPU with the asynchronous methods trained using 16 CPU cores on five Atari 2600 games. The results show that all four asynchronous methods we presented can successfully train neural network controllers on the Atari domain. The asynchronous methods tend to learn faster than DQN, with significantly faster learning on some games, while training on only 16 CPU cores. Additionally, the results suggest that n-step methods learn faster than one-step methods on some games. Overall, the policy-based advantage actor-critic method significantly outperforms all three value-based methods.\n\nWe then evaluated asynchronous advantage actor-critic on 57 Atari games. In order to compare with the state of the art in Atari game playing, we largely followed the training and evaluation protocol of (Van Hasselt et al., 2015). Specifically, we tuned hyperparameters (learning rate and amount of gradient norm clipping) using a search on six Atari games (Beamrider, Breakout, Pong, Q*bert, Seaquest and Space Invaders) and then fixed all hyperparameters for all 57 games. We trained both a feedforward agent with the same architecture as Nair et al., 2015;Van Hasselt et al., 2015) as well as a recurrent agent with an additional 256 LSTM cells after the final hidden layer. We additionally used the final network weights for evaluation to make the results more comparable to the original results from (Bellemare et al., 2012). We trained our agents for four days using 16 CPU cores, while the other agents were trained for 8 to 10 days on Nvidia K40 GPUs. Table 1 shows the average and median human-normalized scores obtained by our agents trained by asynchronous advantage actor-critic (A3C) as well as the current state-of-the art. Supplementary Table S3 shows the scores on all games. A3C significantly improves on state-of-the-art the average score over 57 games in half the training time of the other methods while using only 16 CPU cores and no GPU. Furthermore, after just one day of training, A3C matches the average human normalized score of Dueling Double DQN and almost reaches the median human normalized score of Gorila. We note that many of the improvements that are presented in Double DQN (Van Hasselt et al., 2015) and Dueling Double DQN (Wang et al., 2015) can be incorporated to 1-step Q and n-step Q methods presented in this work with similar potential improvements.\n\n\nTORCS Car Racing Simulator\n\nWe also compared the four asynchronous methods on the TORCS 3D car racing game (Wymann et al., 2013).\n\nTORCS not only has more realistic graphics than Atari 2600 games, but also requires the agent to learn the dynamics of the car it is controlling. At each step, an agent received only a visual input in the form of an RGB image of the current frame as well as a reward proportional to the agent's velocity along the center of the track at the agent's current position. We used the same neural network architecture as the one used in the Atari experiments specified in Supplementary Section 8. We performed experiments using four different settings -the agent controlling a slow car with and without opponent bots, and the agent controlling a fast car with and without opponent bots. Full results can be found in Supplementary Figure S6. A3C was the best performing agent, reaching between roughly 75% and 90% of the score obtained by a human tester on all four game configurations in about 12 hours of training. A video showing the learned driving behavior of the A3C agent can be found at https://youtu.be/0xo1Ldx3L5Q.\n\n\nContinuous Action Control Using the MuJoCo Physics Simulator\n\nWe also examined a set of tasks where the action space is continuous. In particular, we looked at a set of rigid body physics domains with contact dynamics where the tasks include many examples of manipulation and locomotion. These tasks were simulated using the Mujoco physics engine. We evaluated only the asynchronous advantage actor-critic algorithm since, unlike the value-based methods, it is easily extended to continuous actions. In all problems, using either the physical state or pixels as input, Asynchronous Advantage-Critic found good solutions in less than 24 hours of training and typically in under a few hours. Some successful policies learned by our agent can be seen in the following video https://youtu.be/ Ajjc08-iPx8. Further details about this experiment can be found in Supplementary Section 9.\n\n\nLabyrinth\n\nWe performed an additional set of experiments with A3C on a new 3D environment called Labyrinth. The specific task we considered involved the agent learning to find rewards in randomly generated mazes. At the beginning of each episode the agent was placed in a new randomly generated maze consisting of rooms and corridors. Each maze contained two types of objects that the agent was rewarded for finding -apples and portals. Picking up an apple led to a reward of 1. Entering a portal led to a reward of 10 after which the agent was respawned in a new random location in the maze and all previously collected apples were regenerated. An episode terminated after 60 seconds after which a new episode would begin. The aim of the agent is to collect as many points as possible in the time limit and the optimal strategy involves first finding the portal and then repeatedly going back to it after each respawn. This task is much more challenging than the TORCS driving domain because the agent is faced with a new maze in each episode and must learn a general strategy for exploring random mazes.\n\nNumber of threads Method 1 2 4 8 16 1-step Q 1.0 3.0 6.3 13.3 24.1 1-step SARSA 1.0 2.8 5.9 13.1 22.1 n-step Q 1.0 2.7 5.9 10.7 17.2 A3C 1.0 2.1 3.7 6.9 12.5 Table 2. The average training speedup for each method and number of threads averaged over seven Atari games. To compute the training speed-up on a single game we measured the time to required reach a fixed reference score using each method and number of threads. The speedup from using n threads on a game was defined as the time required to reach a fixed reference score using one thread divided the time required to reach the reference score using n threads. The table shows the speedups averaged over seven Atari games (Beamrider, Breakout, Enduro, Pong, Q*bert, Seaquest, and Space Invaders).\n\nWe trained an A3C LSTM agent on this task using only 84 \u00d7 84 RGB images as input. The final average score of around 50 indicates that the agent learned a reasonable strategy for exploring random 3D maxes using only a visual input. A video showing one of the agents exploring previously unseen mazes is included at https: //youtu.be/nMR5mjCFZCw.\n\n\nScalability and Data Efficiency\n\nWe analyzed the effectiveness of our proposed framework by looking at how the training time and data efficiency changes with the number of parallel actor-learners. When using multiple workers in parallel and updating a shared model, one would expect that in an ideal case, for a given task and algorithm, the number of training steps to achieve a certain score would remain the same with varying numbers of workers. Therefore, the advantage would be solely due to the ability of the system to consume more data in the same amount of wall clock time and possibly improved exploration. Table 2 shows the training speed-up achieved by using increasing numbers of parallel actor-learners averaged over seven Atari games. These results show that all four methods achieve substantial speedups from using multiple worker threads, with 16 threads leading to at least an order of magnitude speedup. This confirms that our proposed framework scales well with the number of parallel workers, making efficient use of resources.\n\nSomewhat surprisingly, asynchronous one-step Q-learning and Sarsa algorithms exhibit superlinear speedups that cannot be explained by purely computational gains. We observe that one-step methods (one-step Q and one-step Sarsa) often require less data to achieve a particular score when using more parallel actor-learners. We believe this is due to positive effect of multiple threads to reduce the bias in one-step methods. These effects are shown more clearly in Figure 3, which shows plots of the average score against the total number of training frames for different . Scatter plots of scores obtained by asynchronous advantage actor-critic on five games (Beamrider, Breakout, Pong, Q*bert, Space Invaders) for 50 different learning rates and random initializations. On each game, there is a wide range of learning rates for which all random initializations acheive good scores. This shows that A3C is quite robust to learning rates and initial random weights.\n\nnumbers of actor-learners and training methods on five Atari games, and Figure 4, which shows plots of the average score against wall-clock time.\n\n\nRobustness and Stability\n\nFinally, we analyzed the stability and robustness of the four proposed asynchronous algorithms. For each of the four algorithms we trained models on five games (Breakout, Beamrider, Pong, Q*bert, Space Invaders) using 50 different learning rates and random initializations. Figure 2 shows scatter plots of the resulting scores for A3C, while Supplementary Figure S11 shows plots for the other three methods. There is usually a range of learning rates for each method and game combination that leads to good scores, indicating that all methods are quite robust to the choice of learning rate and random initialization. The fact that there are virtually no points with scores of 0 in regions with good learning rates indicates that the methods are stable and do not collapse or diverge once they are learning.\n\n\nConclusions and Discussion\n\nWe have presented asynchronous versions of four standard reinforcement learning algorithms and showed that they are able to train neural network controllers on a variety of domains in a stable manner. Our results show that in our proposed framework stable training of neural networks through reinforcement learning is possible with both valuebased and policy-based methods, off-policy as well as onpolicy methods, and in discrete as well as continuous domains. When trained on the Atari domain using 16 CPU cores, the proposed asynchronous algorithms train faster than DQN trained on an Nvidia K40 GPU, with A3C surpassing the current state-of-the-art in half the training time.\n\nOne of our main findings is that using parallel actorlearners to update a shared model had a stabilizing effect on the learning process of the three value-based methods we considered. While this shows that stable online Q-learning is possible without experience replay, which was used for this purpose in DQN, it does not mean that experience replay is not useful. Incorporating experience replay into the asynchronous reinforcement learning framework could substantially improve the data efficiency of these methods by reusing old data. This could in turn lead to much faster training times in domains like TORCS where interacting with the environment is more expensive than updating the model for the architecture we used.\n\nCombining other existing reinforcement learning methods or recent advances in deep reinforcement learning with our asynchronous framework presents many possibilities for immediate improvements to the methods we presented. While our n-step methods operate in the forward view (Sutton & Barto, 1998) by using corrected n-step returns directly as targets, it has been more common to use the backward view to implicitly combine different returns through eligibility traces (Watkins, 1989;Sutton & Barto, 1998;Peng & Williams, 1996). The asynchronous advantage actor-critic method could be potentially improved by using other ways of estimating the advantage function, such as generalized advantage estimation of (Schulman et al., 2015b). All of the value-based methods we investigated could benefit from different ways of reducing overestimation bias of Q-values (Van Hasselt et al., 2015;Bellemare et al., 2016). Yet another, more speculative, direction is to try and combine the recent work on true online temporal difference methods (van Seijen et al., 2015) with nonlinear function approximation.\n\nIn addition to these algorithmic improvements, a number of complementary improvements to the neural network architecture are possible. The dueling architecture of (Wang et al., 2015) has been shown to produce more accurate estimates of Q-values by including separate streams for the state value and advantage in the network. The spatial softmax proposed by (Levine et al., 2015) could improve both value-based and policy-based methods by making it easier for the network to represent feature coordinates.\n\n\nACKNOWLEDGMENTS\n\nWe thank Thomas Degris, Remi Munos, Marc Lanctot, Sasha Vezhnevets and Joseph Modayil for many helpful discussions, suggestions and comments on the paper. We also thank the DeepMind evaluation team for setting up the environments used to evaluate the agents in the paper.    \n\n\nOptimization Details\n\nWe investigated two different optimization algorithms with our asynchronous framework -stochastic gradient descent and RMSProp. Our implementations of these algorithms do not use any locking in order to maximize throughput when using a large number of threads.\n\nMomentum SGD: The implementation of SGD in an asynchronous setting is relatively straightforward and well studied (Recht et al., 2011). Let \u03b8 be the parameter vector that is shared across all threads and let \u2206\u03b8 i be the accumulated gradients of the loss with respect to parameters \u03b8 computed by thread number i. Each thread i independently applies the standard momentum SGD update m i = \u03b1m i + (1 \u2212 \u03b1)\u2206\u03b8 i followed by \u03b8 \u2190 \u03b8 \u2212 \u03b7m i with learning rate \u03b7, momentum \u03b1 and without any locks. Note that in this setting, each thread maintains its own separate gradient and momentum vector.\n\nRMSProp: While RMSProp (Tieleman & Hinton, 2012) has been widely used in the deep learning literature, it has not been extensively studied in the asynchronous optimization setting. The standard non-centered RMSProp update is given by\ng = \u03b1g + (1 \u2212 \u03b1)\u2206\u03b8 2 (S2) \u03b8 \u2190 \u03b8 \u2212 \u03b7 \u2206\u03b8 \u221a g + ,(S3)\nwhere all operations are performed elementwise. In order to apply RMSProp in the asynchronous optimization setting one must decide whether the moving average of elementwise squared gradients g is shared or per-thread. We experimented with two versions of the algorithm. In one version, which we refer to as RM-SProp, each thread maintains its own g shown in Equation S2. In the other version, which we call Shared RMSProp, the vector g is shared among threads and is updated asynchronously and without locking. Sharing statistics among threads also reduces memory requirements by using one fewer copy of the parameter vector per thread.\n\nWe compared these three asynchronous optimization algorithms in terms of their sensitivity to different learning rates and random network initializations. Figure S5 shows a comparison of the methods for two different reinforcement learning methods (Async n-step Q and Async Advantage Actor-Critic) on four different games (Breakout, Beamrider, Seaquest and Space Invaders). Each curve shows the scores for 50 experiments that correspond to 50 different random learning rates and initializations. The x-axis shows the rank of the model after sorting in descending order by final average score and the y-axis shows the final average score achieved by the corresponding model. In this representation, the algorithm that performs better would achieve higher maximum rewards on the y-axis and the algorithm that is most robust would have its slope closest to horizontal, thus maximizing the area under the curve. RMSProp with shared statistics tends to be more robust than RMSProp with per-thread statistics, which is in turn more robust than Momentum SGD.\n\n\nExperimental Setup\n\nThe experiments performed on a subset of Atari games (Figures 1, 3, 4 and Table 2) as well as the TORCS experiments ( Figure S6) used the following setup. Each experiment used 16 actor-learner threads running on a single machine and no GPUs. All methods performed updates after every 5 actions (t max = 5 and I U pdate = 5) and shared RMSProp was used for optimization. The three asynchronous value-based methods used a shared target network that was updated every 40000 frames. The Atari experiments used the same input preprocessing as  and an action repeat of 4. The agents used the network architecture from (Mnih et al., 2013). The network used a convolutional layer with 16 filters of size 8 \u00d7 8 with stride 4, followed by a convolutional layer with with 32 filters of size 4 \u00d7 4 with stride 2, followed by a fully connected layer with 256 hidden units. All three hidden layers were followed by a rectifier nonlinearity. The value-based methods had a single linear output unit for each action representing the action-value. The model used by actor-critic agents had two set of outputs -a softmax output with one entry per action representing the probability of selecting the action, and a single linear output representing the value function. All experiments used a discount of \u03b3 = 0.99 and an RMSProp decay factor of \u03b1 = 0.99.\n\nThe value based methods sampled the exploration rate from a distribution taking three values 1 , 2 , 3 with probabilities 0.4, 0.3, 0.3. The values of 1 , 2 , 3 were annealed from 1 to 0.1, 0.01, 0.5 respectively over the first four million frames. Advantage actor-critic used entropy regularization with a weight \u03b2 = 0.01 for all Atari and TORCS experiments. We performed a set of 50 experiments for five Atari games and every TORCS level, each using a different random initialization and initial learning rate. The initial learning rate was sampled from a LogU nif orm(10 \u22124 , 10 \u22122 ) distribution and annealed to 0 over the course of training. Note that in comparisons to prior work (Tables 1 and S3) we followed standard evaluation protocol and used fixed hyperparameters.\n\n\nContinuous Action Control Using the MuJoCo Physics Simulator\n\nTo apply the asynchronous advantage actor-critic algorithm to the Mujoco tasks the necessary setup is nearly identical to that used in the discrete action domains, so here we enumerate only the differences required for the continuous action domains. The essential elements for many of the tasks (i.e. the physics models and task objectives) are near identical to the tasks examined in (Lillicrap et al., 2015). However, the rewards and thus performance are not comparable for most of the tasks due to changes made by the developers of Mujoco which altered the contact model.\n\nFor all the domains we attempted to learn the task using the physical state as input. The physical state consisted of the joint positions and velocities as well as the target position if the task required a target. In addition, for three of the tasks (pendulum, pointmass2D, and gripper) we also examined training directly from RGB pixel inputs. In the low dimensional physical state case, the inputs are mapped to a hidden state using one hidden layer with 200 ReLU units. In the cases where we used pixels, the input was passed through two layers of spatial convolutions without any non-linearity or pooling. In either case, the output of the encoder layers were fed to a single layer of 128 LSTM cells. The most important difference in the architecture is in the the output layer of the policy network. Unlike the discrete action domain where the action output is a Softmax, here the two outputs of the policy network are two real number vectors which we treat as the mean vector \u00b5 and scalar variance \u03c3 2 of a multidimensional normal distribution with a spherical covariance. To act, the input is passed through the model to the output layer where we sample from the normal distribution determined by \u00b5 and \u03c3 2 . In practice, \u00b5 is modeled by a linear layer and \u03c3 2 by a SoftPlus operation, log(1 + exp(x)), as the activation computed as a function of the output of a linear layer. In our experiments with continuous control problems the networks for policy network and value network do not share any parameters, though this detail is unlikely to be crucial. Finally, since the episodes were typically at most several hundred time steps long, we did not use any bootstrapping in the policy or value function updates and batched each episode into a single update.\n\nAs in the discrete action case, we included an entropy cost which encouraged exploration. In the continuous case the we used a cost on the differential entropy of the normal distribution defined by the output of the actor network, \u2212 1 2 (log(2\u03c0\u03c3 2 ) + 1), we used a constant multiplier of 10 \u22124 for this cost across all of the tasks examined. The asynchronous advantage actor-critic algorithm finds solutions for all the domains. Figure S8 shows learning curves against wall-clock time, and demonstrates that most of the domains from states can be solved within a few hours. All of the experiments, including those done from pixel based observations, were run on CPU. Even in the case of solving the domains directly from pixel inputs we found that it was possible to reliably discover solutions within 24 hours. Figure S7 shows scatter plots of the top scores against the sampled learning rates. In most of the domains there is large range of learning rates that consistently achieve good performance on the task.\n\nAlgorithm S2 Asynchronous n-step Q-learning -pseudocode for each actor-learner thread.\n\n// Assume global shared parameter vector \u03b8. // Assume global shared target parameter vector \u03b8 \u2212 . // Assume global shared counter T = 0. Initialize thread step counter t \u2190 1 Initialize target network parameters \u03b8 \u2212 \u2190 \u03b8 Initialize thread-specific parameters \u03b8 = \u03b8 Initialize network gradients d\u03b8 \u2190 0 repeat\n\nClear gradients d\u03b8 \u2190 0 Synchronize thread-specific parameters \u03b8 = \u03b8 tstart = t Get state st repeat Take action at according to the -greedy policy based on Q(st, a; \u03b8 ) Receive reward rt and new state st+1\nt \u2190 t + 1 T \u2190 T + 1 until terminal st or t \u2212 tstart == tmax R = 0 for terminal st maxa Q(st, a; \u03b8 \u2212 )\nfor non-terminal st for i \u2208 {t \u2212 1, . . . , tstart} do R \u2190 ri + \u03b3R Accumulate gradients wrt \u03b8 : d\u03b8 \u2190 d\u03b8 + \u2202(R\u2212Q(s i ,a i ;\u03b8 )) 2 \u2202\u03b8 end for Perform asynchronous update of \u03b8 using d\u03b8. if T mod Itarget == 0 then \u03b8 \u2212 \u2190 \u03b8 end if until T > Tmax // Assume global shared parameter vectors \u03b8 and \u03b8v and global shared counter T = 0 // Assume thread-specific parameter vectors \u03b8 and \u03b8 v Initialize thread step counter t \u2190 1 repeat\n\nReset gradients: d\u03b8 \u2190 0 and d\u03b8v \u2190 0. Synchronize thread-specific parameters \u03b8 = \u03b8 and \u03b8 v = \u03b8v tstart = t Get state st repeat Perform at according to policy \u03c0(at|st; \u03b8 ) Receive reward rt and new state st+1\nt \u2190 t + 1 T \u2190 T + 1 until terminal st or t \u2212 tstart == tmax R = 0 for terminal st V (st, \u03b8 v )\nfor non-terminal st// Bootstrap from last state for i \u2208 {t \u2212 1, . . . , tstart} do R \u2190 ri + \u03b3R Accumulate gradients wrt \u03b8 : d\u03b8 \u2190 d\u03b8 + \u2207 \u03b8 log \u03c0(ai|si; \u03b8 )(R \u2212 V (si; \u03b8 v )) Accumulate gradients wrt \u03b8 v : d\u03b8v \u2190 d\u03b8v + \u2202 (R \u2212 V (si; \u03b8 v )) 2 /\u2202\u03b8 v end for Perform asynchronous update of \u03b8 using d\u03b8 and of \u03b8v using d\u03b8v. until T > Tmax Async 1-step Q Async SARSA Async n-step Q Async actor-critic Human tester Figure S6. Comparison of algorithms on the TORCS car racing simulator. Four different configurations of car speed and opponent presence or absence are shown. In each plot, all four algorithms (one-step Q, one-step Sarsa, n-step Q and Advantage Actor-Critic) are compared on score vs training time in wall clock hours. Multi-step algorithms achieve better policies much faster than one-step algorithms on all four levels. The curves show averages over the 5 best runs from 50 experiments with learning rates sampled from LogU nif orm(10 \u22124 , 10 \u22122 ) and all other hyperparameters fixed. Figure S7. Performance for the Mujoco continuous action domains. Scatter plot of the best score obtained against learning rates sampled from LogU nif orm(10 \u22125 , 10 \u22121 ). For nearly all of the tasks there is a wide range of learning rates that lead to good performance on the task.  The y-axis shows the average score. Each curve shows the average of the three best performing agents from a search over 50 random learning rates. Sarsa shows increased data efficiency with increased numbers of parallel workers.  Figure S10. Training speed comparison of different numbers of actor-learners for all one-step Sarsa on five Atari games. The x-axis shows training time in hours while the y-axis shows the average score. Each curve shows the average of the three best performing agents from a search over 50 random learning rates. Sarsa shows significant speedups from using greater numbers of parallel actor-learners.  Figure S11. Scatter plots of scores obtained by one-step Q, one-step Sarsa, and n-step Q on five games (Beamrider, Breakout, Pong, Q*bert, Space Invaders) for 50 different learning rates and random initializations. All algorithms exhibit some level of robustness to the choice of learning rate.  Table S3. Raw scores for the human start condition (30 minutes emulator time). DQN scores taken from (Nair et al., 2015). Double DQN scores taken from (Van Hasselt et al., 2015), Dueling scores from (Wang et al., 2015) and Prioritized scores taken from (Schaul et al., 2015) \n\nFigure 2\n2Figure 2. Scatter plots of scores obtained by asynchronous advantage actor-critic on five games (Beamrider, Breakout, Pong, Q*bert, Space Invaders) for 50 different learning rates and random initializations. On each game, there is a wide range of learning rates for which all random initializations acheive good scores. This shows that A3C is quite robust to learning rates and initial random weights.\n\nFigure 3 .\n3Data efficiency comparison of different numbers of actor-learners for three asynchronous methods on five Atari games. The x-axis shows the total number of training epochs where an epoch corresponds to four million frames (across all threads). The y-axis shows the average score. Each curve shows the average over the three best learning rates. Single step methods show increased data efficiency from more parallel workers. Results for Sarsa are shown in SupplementaryFigure S9.\n\nFigure 4 .\n4Training speed comparison of different numbers of actor-learners on five Atari games. The x-axis shows training time in hours while the y-axis shows the average score. Each curve shows the average over the three best learning rates. All asynchronous methods show significant speedups from using greater numbers of parallel actor-learners. Results for Sarsa are shown in SupplementaryFigure S10.\n\nFigure S5 .\nS5Comparison of three different optimization methods (Momentum SGD, RMSProp, Shared RMSProp) tested using two different algorithms (Async n-step Q and Async Advantage Actor-Critic) on four different Atari games (Breakout, Beamrider, Seaquest and Space Invaders). Each curve shows the final scores for 50 experiments sorted in descending order that covers a search over 50 random initializations and learning rates. The top row shows results using Async n-step Q algorithm and bottom row shows results with Async Advantage Actor-Critic. Each individual graph shows results for one of the four games and three different optimization methods. Shared RMSProp tends to be more robust to different learning rates and random initializations than Momentum SGD and RMSProp without sharing.\n\nFigure S8 .\nS8Score per episode vs wall-clock time plots for the Mujoco domains. Each plot shows error bars for the top\n\nFigure S9 .\nS9Data efficiency comparison of different numbers of actor-learners one-step Sarsa on five Atari games. The x-axis shows the total number of training epochs where an epoch corresponds to four million frames (across all threads).\n\n\nTable 1. Mean and median human-normalized scores on 57 Atari games using the human starts evaluation metric.Supplementary Table SS3shows the raw scores for all games.Method \nTraining Time \nMean \nMedian \nDQN \n8 days on GPU \n121.9% \n47.5% \nGorila \n4 days, 100 machines 215.2% \n71.3% \nD-DQN \n8 days on GPU \n332.9% 110.9% \nDueling D-DQN \n8 days on GPU \n343.8% 117.1% \nPrioritized DQN \n8 days on GPU \n463.6% 127.6% \nA3C, FF \n1 day on CPU \n344.1% \n68.2% \nA3C, FF \n4 days on CPU \n496.8% 116.6% \nA3C, LSTM \n4 days on CPU \n623.0% 112.6% \n\n\n\n\nTomassini, Marco. Parallel and distributed evolutionary algorithms: A review. Technical report, 1999.Tsitsiklis, John N. Asynchronous stochastic approxima-\ntion and q-learning. Machine Learning, 16(3):185-202, \n1994. \n\nVan Hasselt, Hado, Guez, Arthur, and Silver, David. Deep \nreinforcement learning with double q-learning. arXiv \npreprint arXiv:1509.06461, 2015. \n\nvan Seijen, H., Rupam Mahmood, A., Pilarski, P. M., \nMachado, M. C., and Sutton, R. S. True Online \nTemporal-Difference Learning. ArXiv e-prints, Decem-\nber 2015. \n\nWang, Z., de Freitas, N., and Lanctot, M. Dueling Network \nArchitectures for Deep Reinforcement Learning. ArXiv \ne-prints, November 2015. \n\nWatkins, Christopher John Cornish Hellaby. Learning from \ndelayed rewards. PhD thesis, University of Cambridge \nEngland, 1989. \n\nWilliams, R.J. Simple statistical gradient-following algo-\nrithms for connectionist reinforcement learning. Ma-\nchine Learning, 8(3):229-256, 1992. \n\nWilliams, Ronald J and Peng, Jing. Function optimization \nusing connectionist reinforcement learning algorithms. \nConnection Science, 3(3):241-268, 1991. \n\nWymann, B., Espi\u00c3l', E., Guionneau, C., Dimitrakakis, C., \nCoulom, R., and Sumner, A. Torcs: The open racing car \nsimulator, v1.3.5, 2013. \n\nSupplementary Material for \"Asynchronous Methods for Deep \nReinforcement Learning\" \n\nJune 17, 2016 \n\n\n\nThe arcade learning environment: An evaluation platform for general agents. Marc G Bellemare, Naddaf, Yavar, Joel Veness, Michael Bowling, Journal of Artificial Intelligence Research. Bellemare, Marc G, Naddaf, Yavar, Veness, Joel, and Bowling, Michael. The arcade learning environment: An evaluation platform for general agents. Journal of Artificial Intelligence Research, 2012.\n\nIncreasing the action gap: New operators for reinforcement learning. Marc G Bellemare, Ostrovski, Georg, Guez, Arthur, Philip S Thomas, R\u00e9mi Munos, Proceedings of the AAAI Conference on Artificial Intelligence. the AAAI Conference on Artificial IntelligenceBellemare, Marc G., Ostrovski, Georg, Guez, Arthur, Thomas, Philip S., and Munos, R\u00e9mi. Increasing the ac- tion gap: New operators for reinforcement learning. In Proceedings of the AAAI Conference on Artificial Intel- ligence, 2016.\n\nDistributed dynamic programming. Automatic Control. Dimitri P Bertsekas, IEEE Transactions on. 273Bertsekas, Dimitri P. Distributed dynamic programming. Automatic Control, IEEE Transactions on, 27(3):610- 616, 1982.\n\nDistributed deep q-learning. Kevin Chavez, Hao Ong, Yi, Augustus Hong, Stanford UniversityTechnical reportChavez, Kevin, Ong, Hao Yi, and Hong, Augustus. Dis- tributed deep q-learning. Technical report, Stanford Uni- versity, June 2015.\n\nModel-free reinforcement learning with continuous action in practice. Thomas Degris, Pilarski, M Patrick, Sutton , Richard S , American Control Conference (ACC). IEEEDegris, Thomas, Pilarski, Patrick M, and Sutton, Richard S. Model-free reinforcement learning with continuous ac- tion in practice. In American Control Conference (ACC), 2012, pp. 2177-2182. IEEE, 2012.\n\nParallel reinforcement learning with linear function approximation. Matthew Grounds, Daniel Kudenko, Proceedings of the 5th, 6th and 7th European Conference on Adaptive and Learning Agents and Multi-agent Systems: Adaptation and Multi-agent Learning. the 5th, 6th and 7th European Conference on Adaptive and Learning Agents and Multi-agent Systems: Adaptation and Multi-agent LearningSpringer-VerlagGrounds, Matthew and Kudenko, Daniel. Parallel rein- forcement learning with linear function approximation. In Proceedings of the 5th, 6th and 7th European Confer- ence on Adaptive and Learning Agents and Multi-agent Systems: Adaptation and Multi-agent Learning, pp. 60- 74. Springer-Verlag, 2008.\n\nEvolving deep unsupervised convolutional networks for vision-based reinforcement learning. Jan Koutn\u00edk, J\u00fcrgen Schmidhuber, Faustino Gomez, Proceedings of the 2014 conference on Genetic and evolutionary computation. the 2014 conference on Genetic and evolutionary computationACMKoutn\u00edk, Jan, Schmidhuber, J\u00fcrgen, and Gomez, Faustino. Evolving deep unsupervised convolutional networks for vision-based reinforcement learning. In Proceedings of the 2014 conference on Genetic and evolutionary com- putation, pp. 541-548. ACM, 2014.\n\nEnd-to-end training of deep visuomotor policies. Levine, Sergey, Chelsea Finn, Trevor Darrell, Pieter Abbeel, arXiv:1504.00702arXiv preprintLevine, Sergey, Finn, Chelsea, Darrell, Trevor, and Abbeel, Pieter. End-to-end training of deep visuomotor policies. arXiv preprint arXiv:1504.00702, 2015.\n\nMapreduce for parallel reinforcement learning. Yuxi Li, Dale Schuurmans, Recent Advances in Reinforcement Learning -9th European Workshop. Athens, GreeceRevised Selected PapersLi, Yuxi and Schuurmans, Dale. Mapreduce for parallel re- inforcement learning. In Recent Advances in Reinforce- ment Learning -9th European Workshop, EWRL 2011, Athens, Greece, September 9-11, 2011, Revised Selected Papers, pp. 309-320, 2011.\n\nTimothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Heess, Nicolas, Erez, Tom, Tassa, David Silver, Daan Wierstra, arXiv:1509.02971Continuous control with deep reinforcement learning. arXiv preprintLillicrap, Timothy P, Hunt, Jonathan J, Pritzel, Alexander, Heess, Nicolas, Erez, Tom, Tassa, Yuval, Silver, David, and Wierstra, Daan. Continuous control with deep re- inforcement learning. arXiv preprint arXiv:1509.02971, 2015.\n\nPlaying atari with deep reinforcement learning. Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David, Alex Graves, Antonoglou, Ioannis, Daan Wierstra, Martin Riedmiller, NIPS Deep Learning Workshop. Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David, Graves, Alex, Antonoglou, Ioannis, Wierstra, Daan, and Riedmiller, Martin. Playing atari with deep reinforce- ment learning. In NIPS Deep Learning Workshop. 2013.\n\nHuman-level control through deep reinforcement learning. Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David, Andrei A Rusu, Joel Veness, Marc G Bellemare, Alex Graves, Riedmiller, Martin, Andreas K Fidjeland, Ostrovski, Georg, Petersen, Stig, Beattie, Charles, Sadik, Amir, Antonoglou, Ioannis, King, Helen, Kumaran, Dharshan, Wierstra, Daan, Shane Legg, Demis Hassabis, 10.1038/nature14236Nature. 5187540Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David, Rusu, Andrei A., Veness, Joel, Bellemare, Marc G., Graves, Alex, Riedmiller, Martin, Fidjeland, Andreas K., Ostrovski, Georg, Petersen, Stig, Beattie, Charles, Sadik, Amir, Antonoglou, Ioannis, King, Helen, Kumaran, Dharshan, Wierstra, Daan, Legg, Shane, and Hassabis, Demis. Human-level control through deep reinforcement learning. Nature, 518(7540):529-533, 02 2015. URL http://dx.doi.org/10.1038/nature14236.\n\nMassively parallel methods for deep reinforcement learning. Arun Nair, Srinivasan, Praveen, Blackwell, Sam, Alcicek, Cagdas, Fearon, Maria Rory, Alessandro De, Panneershelvam, Vedavyas, Suleyman, Mustafa, Beattie, Charles, Petersen, Stig, Legg, Shane, Mnih, Volodymyr, Koray Kavukcuoglu, David Silver, ICML Deep Learning Workshop. Nair, Arun, Srinivasan, Praveen, Blackwell, Sam, Alci- cek, Cagdas, Fearon, Rory, Maria, Alessandro De, Pan- neershelvam, Vedavyas, Suleyman, Mustafa, Beattie, Charles, Petersen, Stig, Legg, Shane, Mnih, Volodymyr, Kavukcuoglu, Koray, and Silver, David. Massively par- allel methods for deep reinforcement learning. In ICML Deep Learning Workshop. 2015.\n\nIncremental multi-step q-learning. Jing Peng, Ronald J Williams, Machine Learning. 22Peng, Jing and Williams, Ronald J. Incremental multi-step q-learning. Machine Learning, 22(1-3):283-290, 1996.\n\nHogwild: A lock-free approach to parallelizing stochastic gradient descent. Benjamin Recht, Re, Christopher, Stephen Wright, Feng Niu, Advances in Neural Information Processing Systems. Recht, Benjamin, Re, Christopher, Wright, Stephen, and Niu, Feng. Hogwild: A lock-free approach to paralleliz- ing stochastic gradient descent. In Advances in Neural Information Processing Systems, pp. 693-701, 2011.\n\nNeural fitted q iteration-first experiences with a data efficient neural reinforcement learning method. Martin Riedmiller, Machine Learning: ECML 2005. Berlin HeidelbergSpringerRiedmiller, Martin. Neural fitted q iteration-first experi- ences with a data efficient neural reinforcement learning method. In Machine Learning: ECML 2005, pp. 317- 328. Springer Berlin Heidelberg, 2005.\n\nOn-line qlearning using connectionist systems. Gavin A Rummery, Mahesan Niranjan, Rummery, Gavin A and Niranjan, Mahesan. On-line q- learning using connectionist systems. 1994.\n\n. Tom Schaul, Quan, John, Ioannis Antonoglou, David Silver, arXiv:1511.05952Prioritized experience replay. arXiv preprintSchaul, Tom, Quan, John, Antonoglou, Ioannis, and Sil- ver, David. Prioritized experience replay. arXiv preprint arXiv:1511.05952, 2015.\n\nTrust region policy optimization. John Schulman, Levine, Sergey, Moritz, Jordan Philipp, I Michael, Pieter Abbeel, International Conference on Machine Learning (ICML). Schulman, John, Levine, Sergey, Moritz, Philipp, Jordan, Michael I, and Abbeel, Pieter. Trust region policy op- timization. In International Conference on Machine Learning (ICML), 2015a.\n\nHigh-dimensional continuous control using generalized advantage estimation. John Schulman, Moritz, Philipp, Levine, Sergey, Michael Jordan, Pieter Abbeel, arXiv:1506.02438arXiv preprintSchulman, John, Moritz, Philipp, Levine, Sergey, Jordan, Michael, and Abbeel, Pieter. High-dimensional con- tinuous control using generalized advantage estimation. arXiv preprint arXiv:1506.02438, 2015b.\n\nReinforcement Learning: an Introduction. R Sutton, A Barto, MIT PressSutton, R. and Barto, A. Reinforcement Learning: an In- troduction. MIT Press, 1998.\n\nLecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude. Tijmen Tieleman, Geoffrey Hinton, COURSERA: Neural Networks for Machine Learning. 4Tieleman, Tijmen and Hinton, Geoffrey. Lecture 6.5- rmsprop: Divide the gradient by a running average of its recent magnitude. COURSERA: Neural Networks for Machine Learning, 4, 2012.\n\nE Todorov, Mujoco, Modeling, Simulation and Visualization of Multi-Joint Dynamics with Contact. Roboti PublishingTodorov, E. MuJoCo: Modeling, Simulation and Visual- ization of Multi-Joint Dynamics with Contact (ed 1.0). Roboti Publishing, 2015.\n", "annotations": {"author": "[{\"end\":71,\"start\":56},{\"end\":97,\"start\":72},{\"end\":185,\"start\":98},{\"end\":198,\"start\":186},{\"end\":210,\"start\":199},{\"end\":231,\"start\":211},{\"end\":245,\"start\":232},{\"end\":264,\"start\":246},{\"end\":425,\"start\":265}]", "publisher": null, "author_last_name": "[{\"end\":70,\"start\":66},{\"end\":96,\"start\":78},{\"end\":109,\"start\":104},{\"end\":197,\"start\":191},{\"end\":209,\"start\":203},{\"end\":230,\"start\":221},{\"end\":244,\"start\":238},{\"end\":263,\"start\":252}]", "author_first_name": "[{\"end\":65,\"start\":56},{\"end\":77,\"start\":72},{\"end\":103,\"start\":98},{\"end\":190,\"start\":186},{\"end\":202,\"start\":199},{\"end\":218,\"start\":211},{\"end\":220,\"start\":219},{\"end\":237,\"start\":232},{\"end\":251,\"start\":246}]", "author_affiliation": "[{\"end\":184,\"start\":111},{\"end\":424,\"start\":266}]", "title": "[{\"end\":53,\"start\":1},{\"end\":478,\"start\":426}]", "venue": null, "abstract": "[{\"end\":1298,\"start\":480}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b15\"},\"end\":1680,\"start\":1662},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":1698,\"start\":1680},{\"end\":1723,\"start\":1698},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":1746,\"start\":1723},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2019,\"start\":2001},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":2042,\"start\":2019},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2082,\"start\":2063},{\"end\":2107,\"start\":2082},{\"end\":3524,\"start\":3499},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3544,\"start\":3524},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3603,\"start\":3584},{\"end\":3836,\"start\":3832},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4516,\"start\":4497},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5398,\"start\":5377},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5441,\"start\":5418},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":5722,\"start\":5697},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":6370,\"start\":6353},{\"end\":6627,\"start\":6610},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6778,\"start\":6756},{\"end\":9487,\"start\":9472},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":9509,\"start\":9487},{\"end\":10153,\"start\":10138},{\"end\":10474,\"start\":10458},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":11195,\"start\":11173},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":11215,\"start\":11195},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11886,\"start\":11867},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":12160,\"start\":12140},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":15647,\"start\":15621},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":15668,\"start\":15647},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":16118,\"start\":16096},{\"end\":18558,\"start\":18535},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":19111,\"start\":19086},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":19794,\"start\":19770},{\"end\":20019,\"start\":19993},{\"end\":20037,\"start\":20019},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20057,\"start\":20037},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":20075,\"start\":20057},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":20093,\"start\":20075},{\"end\":20284,\"start\":20263},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":20964,\"start\":20949},{\"end\":22306,\"start\":22280},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":22636,\"start\":22618},{\"end\":22661,\"start\":22636},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":22906,\"start\":22882},{\"end\":23712,\"start\":23686},{\"end\":23755,\"start\":23732},{\"end\":23999,\"start\":23978},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":32845,\"start\":32824},{\"end\":33033,\"start\":33018},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":33054,\"start\":33033},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":33076,\"start\":33054},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":33281,\"start\":33257},{\"end\":33434,\"start\":33408},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":33457,\"start\":33434},{\"end\":33606,\"start\":33581},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":34025,\"start\":34004},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":34867,\"start\":34847},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":35365,\"start\":35340},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":37945,\"start\":37926},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":39899,\"start\":39875},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":46596,\"start\":46577},{\"end\":46653,\"start\":46627},{\"end\":46694,\"start\":46675},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":46750,\"start\":46729}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":47164,\"start\":46752},{\"attributes\":{\"id\":\"fig_3\"},\"end\":47655,\"start\":47165},{\"attributes\":{\"id\":\"fig_4\"},\"end\":48063,\"start\":47656},{\"attributes\":{\"id\":\"fig_5\"},\"end\":48857,\"start\":48064},{\"attributes\":{\"id\":\"fig_6\"},\"end\":48978,\"start\":48858},{\"attributes\":{\"id\":\"fig_7\"},\"end\":49220,\"start\":48979},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":49753,\"start\":49221},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":51104,\"start\":49754}]", "paragraph": "[{\"end\":2310,\"start\":1314},{\"end\":2647,\"start\":2312},{\"end\":3311,\"start\":2649},{\"end\":4420,\"start\":3313},{\"end\":5399,\"start\":4437},{\"end\":6006,\"start\":5401},{\"end\":6434,\"start\":6008},{\"end\":6921,\"start\":6436},{\"end\":7671,\"start\":6959},{\"end\":8101,\"start\":7673},{\"end\":8748,\"start\":8103},{\"end\":8859,\"start\":8812},{\"end\":9406,\"start\":8861},{\"end\":9858,\"start\":9408},{\"end\":10562,\"start\":9860},{\"end\":11216,\"start\":10564},{\"end\":11788,\"start\":11246},{\"end\":12188,\"start\":11790},{\"end\":12330,\"start\":12190},{\"end\":13644,\"start\":12332},{\"end\":14190,\"start\":13646},{\"end\":14918,\"start\":14192},{\"end\":15316,\"start\":14920},{\"end\":15770,\"start\":15318},{\"end\":16930,\"start\":15772},{\"end\":17608,\"start\":16932},{\"end\":17813,\"start\":17668},{\"end\":18314,\"start\":17815},{\"end\":18783,\"start\":18316},{\"end\":18956,\"start\":18854},{\"end\":19232,\"start\":18958},{\"end\":19593,\"start\":19282},{\"end\":20859,\"start\":19609},{\"end\":21279,\"start\":20861},{\"end\":22076,\"start\":21300},{\"end\":23868,\"start\":22078},{\"end\":24000,\"start\":23899},{\"end\":25019,\"start\":24002},{\"end\":25902,\"start\":25084},{\"end\":27010,\"start\":25916},{\"end\":27766,\"start\":27012},{\"end\":28112,\"start\":27768},{\"end\":29163,\"start\":28148},{\"end\":30129,\"start\":29165},{\"end\":30276,\"start\":30131},{\"end\":31112,\"start\":30305},{\"end\":31821,\"start\":31143},{\"end\":32547,\"start\":31823},{\"end\":33645,\"start\":32549},{\"end\":34151,\"start\":33647},{\"end\":34446,\"start\":34171},{\"end\":34731,\"start\":34471},{\"end\":35315,\"start\":34733},{\"end\":35550,\"start\":35317},{\"end\":36238,\"start\":35602},{\"end\":37291,\"start\":36240},{\"end\":38647,\"start\":37314},{\"end\":39425,\"start\":38649},{\"end\":40064,\"start\":39490},{\"end\":41831,\"start\":40066},{\"end\":42847,\"start\":41833},{\"end\":42935,\"start\":42849},{\"end\":43242,\"start\":42937},{\"end\":43448,\"start\":43244},{\"end\":43971,\"start\":43551},{\"end\":44179,\"start\":43973},{\"end\":46751,\"start\":44275}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":8811,\"start\":8749},{\"attributes\":{\"id\":\"formula_1\"},\"end\":17667,\"start\":17609},{\"attributes\":{\"id\":\"formula_2\"},\"end\":18853,\"start\":18784},{\"attributes\":{\"id\":\"formula_3\"},\"end\":19281,\"start\":19233},{\"attributes\":{\"id\":\"formula_4\"},\"end\":35601,\"start\":35551},{\"attributes\":{\"id\":\"formula_5\"},\"end\":43550,\"start\":43449},{\"attributes\":{\"id\":\"formula_6\"},\"end\":44274,\"start\":44180}]", "table_ref": "[{\"end\":23044,\"start\":23037},{\"end\":23237,\"start\":23215},{\"end\":27177,\"start\":27170},{\"end\":28739,\"start\":28732},{\"end\":37395,\"start\":37388},{\"end\":46484,\"start\":46476}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1312,\"start\":1300},{\"attributes\":{\"n\":\"2.\"},\"end\":4435,\"start\":4423},{\"attributes\":{\"n\":\"3.\"},\"end\":6957,\"start\":6924},{\"attributes\":{\"n\":\"4.\"},\"end\":11244,\"start\":11219},{\"attributes\":{\"n\":\"5.\"},\"end\":19607,\"start\":19596},{\"attributes\":{\"n\":\"5.1.\"},\"end\":21298,\"start\":21282},{\"attributes\":{\"n\":\"5.2.\"},\"end\":23897,\"start\":23871},{\"attributes\":{\"n\":\"5.3.\"},\"end\":25082,\"start\":25022},{\"attributes\":{\"n\":\"5.4.\"},\"end\":25914,\"start\":25905},{\"attributes\":{\"n\":\"5.5.\"},\"end\":28146,\"start\":28115},{\"attributes\":{\"n\":\"5.6.\"},\"end\":30303,\"start\":30279},{\"attributes\":{\"n\":\"6.\"},\"end\":31141,\"start\":31115},{\"end\":34169,\"start\":34154},{\"attributes\":{\"n\":\"7.\"},\"end\":34469,\"start\":34449},{\"attributes\":{\"n\":\"8.\"},\"end\":37312,\"start\":37294},{\"attributes\":{\"n\":\"9.\"},\"end\":39488,\"start\":39428},{\"end\":46761,\"start\":46753},{\"end\":47176,\"start\":47166},{\"end\":47667,\"start\":47657},{\"end\":48076,\"start\":48065},{\"end\":48870,\"start\":48859},{\"end\":48991,\"start\":48980}]", "table": "[{\"end\":49753,\"start\":49389},{\"end\":51104,\"start\":49857}]", "figure_caption": "[{\"end\":47164,\"start\":46763},{\"end\":47655,\"start\":47178},{\"end\":48063,\"start\":47669},{\"end\":48857,\"start\":48079},{\"end\":48978,\"start\":48873},{\"end\":49220,\"start\":48994},{\"end\":49389,\"start\":49223},{\"end\":49857,\"start\":49756}]", "figure_ref": "[{\"end\":20360,\"start\":20352},{\"end\":24735,\"start\":24726},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":29637,\"start\":29629},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":30211,\"start\":30203},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":30587,\"start\":30579},{\"end\":30671,\"start\":30661},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":36404,\"start\":36395},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":37383,\"start\":37367},{\"end\":37441,\"start\":37432},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":42272,\"start\":42263},{\"end\":42655,\"start\":42646},{\"end\":44689,\"start\":44680},{\"end\":45275,\"start\":45266},{\"end\":45788,\"start\":45778},{\"end\":46190,\"start\":46180}]", "bib_author_first_name": "[{\"end\":51186,\"start\":51182},{\"end\":51188,\"start\":51187},{\"end\":51219,\"start\":51215},{\"end\":51235,\"start\":51228},{\"end\":51561,\"start\":51557},{\"end\":51563,\"start\":51562},{\"end\":51613,\"start\":51607},{\"end\":51615,\"start\":51614},{\"end\":51628,\"start\":51624},{\"end\":52038,\"start\":52031},{\"end\":52040,\"start\":52039},{\"end\":52230,\"start\":52225},{\"end\":52242,\"start\":52239},{\"end\":52260,\"start\":52252},{\"end\":52510,\"start\":52504},{\"end\":52530,\"start\":52529},{\"end\":52546,\"start\":52540},{\"end\":52556,\"start\":52549},{\"end\":52558,\"start\":52557},{\"end\":52879,\"start\":52872},{\"end\":52895,\"start\":52889},{\"end\":53596,\"start\":53593},{\"end\":53612,\"start\":53606},{\"end\":53634,\"start\":53626},{\"end\":54105,\"start\":54098},{\"end\":54118,\"start\":54112},{\"end\":54134,\"start\":54128},{\"end\":54381,\"start\":54377},{\"end\":54390,\"start\":54386},{\"end\":54758,\"start\":54751},{\"end\":54760,\"start\":54759},{\"end\":54780,\"start\":54772},{\"end\":54782,\"start\":54781},{\"end\":54798,\"start\":54789},{\"end\":54847,\"start\":54842},{\"end\":54860,\"start\":54856},{\"end\":55289,\"start\":55285},{\"end\":55323,\"start\":55319},{\"end\":55340,\"start\":55334},{\"end\":55713,\"start\":55707},{\"end\":55715,\"start\":55714},{\"end\":55726,\"start\":55722},{\"end\":55739,\"start\":55735},{\"end\":55741,\"start\":55740},{\"end\":55757,\"start\":55753},{\"end\":55793,\"start\":55786},{\"end\":55795,\"start\":55794},{\"end\":55946,\"start\":55941},{\"end\":55958,\"start\":55953},{\"end\":56532,\"start\":56528},{\"end\":56606,\"start\":56601},{\"end\":56623,\"start\":56613},{\"end\":56742,\"start\":56737},{\"end\":56761,\"start\":56756},{\"end\":57193,\"start\":57189},{\"end\":57206,\"start\":57200},{\"end\":57208,\"start\":57207},{\"end\":57435,\"start\":57427},{\"end\":57467,\"start\":57460},{\"end\":57480,\"start\":57476},{\"end\":57865,\"start\":57859},{\"end\":58191,\"start\":58186},{\"end\":58193,\"start\":58192},{\"end\":58210,\"start\":58203},{\"end\":58322,\"start\":58319},{\"end\":58350,\"start\":58343},{\"end\":58368,\"start\":58363},{\"end\":58614,\"start\":58610},{\"end\":58655,\"start\":58649},{\"end\":58666,\"start\":58665},{\"end\":58682,\"start\":58676},{\"end\":59012,\"start\":59008},{\"end\":59063,\"start\":59056},{\"end\":59078,\"start\":59072},{\"end\":59364,\"start\":59363},{\"end\":59374,\"start\":59373},{\"end\":59570,\"start\":59564},{\"end\":59589,\"start\":59581},{\"end\":59833,\"start\":59832}]", "bib_author_last_name": "[{\"end\":51198,\"start\":51189},{\"end\":51206,\"start\":51200},{\"end\":51213,\"start\":51208},{\"end\":51226,\"start\":51220},{\"end\":51243,\"start\":51236},{\"end\":51573,\"start\":51564},{\"end\":51584,\"start\":51575},{\"end\":51591,\"start\":51586},{\"end\":51597,\"start\":51593},{\"end\":51605,\"start\":51599},{\"end\":51622,\"start\":51616},{\"end\":51634,\"start\":51629},{\"end\":52050,\"start\":52041},{\"end\":52237,\"start\":52231},{\"end\":52246,\"start\":52243},{\"end\":52250,\"start\":52248},{\"end\":52265,\"start\":52261},{\"end\":52517,\"start\":52511},{\"end\":52527,\"start\":52519},{\"end\":52538,\"start\":52531},{\"end\":52887,\"start\":52880},{\"end\":52903,\"start\":52896},{\"end\":53604,\"start\":53597},{\"end\":53624,\"start\":53613},{\"end\":53640,\"start\":53635},{\"end\":54088,\"start\":54082},{\"end\":54096,\"start\":54090},{\"end\":54110,\"start\":54106},{\"end\":54126,\"start\":54119},{\"end\":54141,\"start\":54135},{\"end\":54384,\"start\":54382},{\"end\":54401,\"start\":54391},{\"end\":54770,\"start\":54761},{\"end\":54787,\"start\":54783},{\"end\":54806,\"start\":54799},{\"end\":54813,\"start\":54808},{\"end\":54822,\"start\":54815},{\"end\":54828,\"start\":54824},{\"end\":54833,\"start\":54830},{\"end\":54840,\"start\":54835},{\"end\":54854,\"start\":54848},{\"end\":54869,\"start\":54861},{\"end\":55237,\"start\":55233},{\"end\":55248,\"start\":55239},{\"end\":55261,\"start\":55250},{\"end\":55268,\"start\":55263},{\"end\":55276,\"start\":55270},{\"end\":55283,\"start\":55278},{\"end\":55296,\"start\":55290},{\"end\":55308,\"start\":55298},{\"end\":55317,\"start\":55310},{\"end\":55332,\"start\":55324},{\"end\":55351,\"start\":55341},{\"end\":55659,\"start\":55655},{\"end\":55670,\"start\":55661},{\"end\":55683,\"start\":55672},{\"end\":55690,\"start\":55685},{\"end\":55698,\"start\":55692},{\"end\":55705,\"start\":55700},{\"end\":55720,\"start\":55716},{\"end\":55733,\"start\":55727},{\"end\":55751,\"start\":55742},{\"end\":55764,\"start\":55758},{\"end\":55776,\"start\":55766},{\"end\":55784,\"start\":55778},{\"end\":55805,\"start\":55796},{\"end\":55816,\"start\":55807},{\"end\":55823,\"start\":55818},{\"end\":55833,\"start\":55825},{\"end\":55839,\"start\":55835},{\"end\":55848,\"start\":55841},{\"end\":55857,\"start\":55850},{\"end\":55864,\"start\":55859},{\"end\":55870,\"start\":55866},{\"end\":55882,\"start\":55872},{\"end\":55891,\"start\":55884},{\"end\":55897,\"start\":55893},{\"end\":55904,\"start\":55899},{\"end\":55913,\"start\":55906},{\"end\":55923,\"start\":55915},{\"end\":55933,\"start\":55925},{\"end\":55939,\"start\":55935},{\"end\":55951,\"start\":55947},{\"end\":55967,\"start\":55959},{\"end\":56537,\"start\":56533},{\"end\":56549,\"start\":56539},{\"end\":56558,\"start\":56551},{\"end\":56569,\"start\":56560},{\"end\":56574,\"start\":56571},{\"end\":56583,\"start\":56576},{\"end\":56591,\"start\":56585},{\"end\":56599,\"start\":56593},{\"end\":56611,\"start\":56607},{\"end\":56626,\"start\":56624},{\"end\":56642,\"start\":56628},{\"end\":56652,\"start\":56644},{\"end\":56662,\"start\":56654},{\"end\":56671,\"start\":56664},{\"end\":56680,\"start\":56673},{\"end\":56689,\"start\":56682},{\"end\":56699,\"start\":56691},{\"end\":56705,\"start\":56701},{\"end\":56711,\"start\":56707},{\"end\":56718,\"start\":56713},{\"end\":56724,\"start\":56720},{\"end\":56735,\"start\":56726},{\"end\":56754,\"start\":56743},{\"end\":56768,\"start\":56762},{\"end\":57198,\"start\":57194},{\"end\":57217,\"start\":57209},{\"end\":57441,\"start\":57436},{\"end\":57445,\"start\":57443},{\"end\":57458,\"start\":57447},{\"end\":57474,\"start\":57468},{\"end\":57484,\"start\":57481},{\"end\":57876,\"start\":57866},{\"end\":58201,\"start\":58194},{\"end\":58219,\"start\":58211},{\"end\":58329,\"start\":58323},{\"end\":58335,\"start\":58331},{\"end\":58341,\"start\":58337},{\"end\":58361,\"start\":58351},{\"end\":58375,\"start\":58369},{\"end\":58623,\"start\":58615},{\"end\":58631,\"start\":58625},{\"end\":58639,\"start\":58633},{\"end\":58647,\"start\":58641},{\"end\":58663,\"start\":58656},{\"end\":58674,\"start\":58667},{\"end\":58689,\"start\":58683},{\"end\":59021,\"start\":59013},{\"end\":59029,\"start\":59023},{\"end\":59038,\"start\":59031},{\"end\":59046,\"start\":59040},{\"end\":59054,\"start\":59048},{\"end\":59070,\"start\":59064},{\"end\":59085,\"start\":59079},{\"end\":59371,\"start\":59365},{\"end\":59380,\"start\":59375},{\"end\":59579,\"start\":59571},{\"end\":59596,\"start\":59590},{\"end\":59841,\"start\":59834},{\"end\":59849,\"start\":59843}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":1552061},\"end\":51486,\"start\":51106},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":1907310},\"end\":51977,\"start\":51488},{\"attributes\":{\"id\":\"b2\"},\"end\":52194,\"start\":51979},{\"attributes\":{\"id\":\"b3\"},\"end\":52432,\"start\":52196},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":2940568},\"end\":52802,\"start\":52434},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":14084700},\"end\":53500,\"start\":52804},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":16475533},\"end\":54031,\"start\":53502},{\"attributes\":{\"doi\":\"arXiv:1504.00702\",\"id\":\"b7\"},\"end\":54328,\"start\":54033},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":7055436},\"end\":54749,\"start\":54330},{\"attributes\":{\"doi\":\"arXiv:1509.02971\",\"id\":\"b9\"},\"end\":55183,\"start\":54751},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":15238391},\"end\":55596,\"start\":55185},{\"attributes\":{\"doi\":\"10.1038/nature14236\",\"id\":\"b11\",\"matched_paper_id\":205242740},\"end\":56466,\"start\":55598},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":8577212},\"end\":57152,\"start\":56468},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":2568346},\"end\":57349,\"start\":57154},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":6108215},\"end\":57753,\"start\":57351},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":6921329},\"end\":58137,\"start\":57755},{\"attributes\":{\"id\":\"b16\"},\"end\":58315,\"start\":58139},{\"attributes\":{\"doi\":\"arXiv:1511.05952\",\"id\":\"b17\"},\"end\":58574,\"start\":58317},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":16046818},\"end\":58930,\"start\":58576},{\"attributes\":{\"doi\":\"arXiv:1506.02438\",\"id\":\"b19\"},\"end\":59320,\"start\":58932},{\"attributes\":{\"id\":\"b20\"},\"end\":59475,\"start\":59322},{\"attributes\":{\"id\":\"b21\"},\"end\":59830,\"start\":59477},{\"attributes\":{\"id\":\"b22\"},\"end\":60077,\"start\":59832}]", "bib_title": "[{\"end\":51180,\"start\":51106},{\"end\":51555,\"start\":51488},{\"end\":52029,\"start\":51979},{\"end\":52502,\"start\":52434},{\"end\":52870,\"start\":52804},{\"end\":53591,\"start\":53502},{\"end\":54375,\"start\":54330},{\"end\":55231,\"start\":55185},{\"end\":55653,\"start\":55598},{\"end\":56526,\"start\":56468},{\"end\":57187,\"start\":57154},{\"end\":57425,\"start\":57351},{\"end\":57857,\"start\":57755},{\"end\":58608,\"start\":58576},{\"end\":59562,\"start\":59477}]", "bib_author": "[{\"end\":51200,\"start\":51182},{\"end\":51208,\"start\":51200},{\"end\":51215,\"start\":51208},{\"end\":51228,\"start\":51215},{\"end\":51245,\"start\":51228},{\"end\":51575,\"start\":51557},{\"end\":51586,\"start\":51575},{\"end\":51593,\"start\":51586},{\"end\":51599,\"start\":51593},{\"end\":51607,\"start\":51599},{\"end\":51624,\"start\":51607},{\"end\":51636,\"start\":51624},{\"end\":52052,\"start\":52031},{\"end\":52239,\"start\":52225},{\"end\":52248,\"start\":52239},{\"end\":52252,\"start\":52248},{\"end\":52267,\"start\":52252},{\"end\":52519,\"start\":52504},{\"end\":52529,\"start\":52519},{\"end\":52540,\"start\":52529},{\"end\":52549,\"start\":52540},{\"end\":52561,\"start\":52549},{\"end\":52889,\"start\":52872},{\"end\":52905,\"start\":52889},{\"end\":53606,\"start\":53593},{\"end\":53626,\"start\":53606},{\"end\":53642,\"start\":53626},{\"end\":54090,\"start\":54082},{\"end\":54098,\"start\":54090},{\"end\":54112,\"start\":54098},{\"end\":54128,\"start\":54112},{\"end\":54143,\"start\":54128},{\"end\":54386,\"start\":54377},{\"end\":54403,\"start\":54386},{\"end\":54772,\"start\":54751},{\"end\":54789,\"start\":54772},{\"end\":54808,\"start\":54789},{\"end\":54815,\"start\":54808},{\"end\":54824,\"start\":54815},{\"end\":54830,\"start\":54824},{\"end\":54835,\"start\":54830},{\"end\":54842,\"start\":54835},{\"end\":54856,\"start\":54842},{\"end\":54871,\"start\":54856},{\"end\":55239,\"start\":55233},{\"end\":55250,\"start\":55239},{\"end\":55263,\"start\":55250},{\"end\":55270,\"start\":55263},{\"end\":55278,\"start\":55270},{\"end\":55285,\"start\":55278},{\"end\":55298,\"start\":55285},{\"end\":55310,\"start\":55298},{\"end\":55319,\"start\":55310},{\"end\":55334,\"start\":55319},{\"end\":55353,\"start\":55334},{\"end\":55661,\"start\":55655},{\"end\":55672,\"start\":55661},{\"end\":55685,\"start\":55672},{\"end\":55692,\"start\":55685},{\"end\":55700,\"start\":55692},{\"end\":55707,\"start\":55700},{\"end\":55722,\"start\":55707},{\"end\":55735,\"start\":55722},{\"end\":55753,\"start\":55735},{\"end\":55766,\"start\":55753},{\"end\":55778,\"start\":55766},{\"end\":55786,\"start\":55778},{\"end\":55807,\"start\":55786},{\"end\":55818,\"start\":55807},{\"end\":55825,\"start\":55818},{\"end\":55835,\"start\":55825},{\"end\":55841,\"start\":55835},{\"end\":55850,\"start\":55841},{\"end\":55859,\"start\":55850},{\"end\":55866,\"start\":55859},{\"end\":55872,\"start\":55866},{\"end\":55884,\"start\":55872},{\"end\":55893,\"start\":55884},{\"end\":55899,\"start\":55893},{\"end\":55906,\"start\":55899},{\"end\":55915,\"start\":55906},{\"end\":55925,\"start\":55915},{\"end\":55935,\"start\":55925},{\"end\":55941,\"start\":55935},{\"end\":55953,\"start\":55941},{\"end\":55969,\"start\":55953},{\"end\":56539,\"start\":56528},{\"end\":56551,\"start\":56539},{\"end\":56560,\"start\":56551},{\"end\":56571,\"start\":56560},{\"end\":56576,\"start\":56571},{\"end\":56585,\"start\":56576},{\"end\":56593,\"start\":56585},{\"end\":56601,\"start\":56593},{\"end\":56613,\"start\":56601},{\"end\":56628,\"start\":56613},{\"end\":56644,\"start\":56628},{\"end\":56654,\"start\":56644},{\"end\":56664,\"start\":56654},{\"end\":56673,\"start\":56664},{\"end\":56682,\"start\":56673},{\"end\":56691,\"start\":56682},{\"end\":56701,\"start\":56691},{\"end\":56707,\"start\":56701},{\"end\":56713,\"start\":56707},{\"end\":56720,\"start\":56713},{\"end\":56726,\"start\":56720},{\"end\":56737,\"start\":56726},{\"end\":56756,\"start\":56737},{\"end\":56770,\"start\":56756},{\"end\":57200,\"start\":57189},{\"end\":57219,\"start\":57200},{\"end\":57443,\"start\":57427},{\"end\":57447,\"start\":57443},{\"end\":57460,\"start\":57447},{\"end\":57476,\"start\":57460},{\"end\":57486,\"start\":57476},{\"end\":57878,\"start\":57859},{\"end\":58203,\"start\":58186},{\"end\":58221,\"start\":58203},{\"end\":58331,\"start\":58319},{\"end\":58337,\"start\":58331},{\"end\":58343,\"start\":58337},{\"end\":58363,\"start\":58343},{\"end\":58377,\"start\":58363},{\"end\":58625,\"start\":58610},{\"end\":58633,\"start\":58625},{\"end\":58641,\"start\":58633},{\"end\":58649,\"start\":58641},{\"end\":58665,\"start\":58649},{\"end\":58676,\"start\":58665},{\"end\":58691,\"start\":58676},{\"end\":59023,\"start\":59008},{\"end\":59031,\"start\":59023},{\"end\":59040,\"start\":59031},{\"end\":59048,\"start\":59040},{\"end\":59056,\"start\":59048},{\"end\":59072,\"start\":59056},{\"end\":59087,\"start\":59072},{\"end\":59373,\"start\":59363},{\"end\":59382,\"start\":59373},{\"end\":59581,\"start\":59564},{\"end\":59598,\"start\":59581},{\"end\":59843,\"start\":59832},{\"end\":59851,\"start\":59843}]", "bib_venue": "[{\"end\":51288,\"start\":51245},{\"end\":51697,\"start\":51636},{\"end\":52072,\"start\":52052},{\"end\":52223,\"start\":52196},{\"end\":52594,\"start\":52561},{\"end\":53053,\"start\":52905},{\"end\":53716,\"start\":53642},{\"end\":54080,\"start\":54033},{\"end\":54467,\"start\":54403},{\"end\":54938,\"start\":54887},{\"end\":55380,\"start\":55353},{\"end\":55994,\"start\":55988},{\"end\":56797,\"start\":56770},{\"end\":57235,\"start\":57219},{\"end\":57535,\"start\":57486},{\"end\":57905,\"start\":57878},{\"end\":58184,\"start\":58139},{\"end\":58742,\"start\":58691},{\"end\":59006,\"start\":58932},{\"end\":59361,\"start\":59322},{\"end\":59644,\"start\":59598},{\"end\":59926,\"start\":59851},{\"end\":51745,\"start\":51699},{\"end\":53188,\"start\":53055},{\"end\":53777,\"start\":53718},{\"end\":54483,\"start\":54469},{\"end\":57924,\"start\":57907}]"}}}, "year": 2023, "month": 12, "day": 17}