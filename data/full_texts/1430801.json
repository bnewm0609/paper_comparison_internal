{"id": 1430801, "updated": "2023-10-01 12:28:56.61", "metadata": {"title": "Learning Convolutional Neural Networks for Graphs", "authors": "[{\"first\":\"Mathias\",\"last\":\"Niepert\",\"middle\":[]},{\"first\":\"Mohamed\",\"last\":\"Ahmed\",\"middle\":[]},{\"first\":\"Konstantin\",\"last\":\"Kutzkov\",\"middle\":[]}]", "venue": "ICML", "journal": "2014-2023", "publication_date": {"year": 2016, "month": 5, "day": 17}, "abstract": "Numerous important problems can be framed as learning from graph data. We propose a framework for learning convolutional neural networks for arbitrary graphs. These graphs may be undirected, directed, and with both discrete and continuous node and edge attributes. Analogous to image-based convolutional networks that operate on locally connected regions of the input, we present a general approach to extracting locally connected regions from graphs. Using established benchmark data sets, we demonstrate that the learned feature representations are competitive with state of the art graph kernels and that their computation is highly efficient.", "fields_of_study": "[\"Computer Science\",\"Mathematics\"]", "external_ids": {"arxiv": "1605.05273", "mag": "2964145825", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/NiepertAK16", "doi": null}}, "content": {"source": {"pdf_hash": "b993df23db7f65821bf911414a97f02ada2c089b", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1605.05273v4.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "e150f88c94a3df43c252ae6efb18fd6359bc6e41", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/b993df23db7f65821bf911414a97f02ada2c089b.txt", "contents": "\nLearning Convolutional Neural Networks for Graphs\n\n\nMathias Niepert mathias.niepert@neclab.eu \nNEC Labs Europe\nHeidelbergGermany\n\nMohamed Ahmed mohamed.ahmed@neclab.eu \nNEC Labs Europe\nHeidelbergGermany\n\nKonstantin Kutzkov \nNEC Labs Europe\nHeidelbergGermany\n\nKonstantin Kutzkov@neclab \nNEC Labs Europe\nHeidelbergGermany\n\nEu \nNEC Labs Europe\nHeidelbergGermany\n\nLearning Convolutional Neural Networks for Graphs\n\nNumerous important problems can be framed as learning from graph data. We propose a framework for learning convolutional neural networks for arbitrary graphs. These graphs may be undirected, directed, and with both discrete and continuous node and edge attributes. Analogous to image-based convolutional networks that operate on locally connected regions of the input, we present a general approach to extracting locally connected regions from graphs. Using established benchmark data sets, we demonstrate that the learned feature representations are competitive with state of the art graph kernels and that their computation is highly efficient.\n\nIntroduction\n\nWith this paper we aim to bring convolutional neural networks to bear on a large class of graph-based learning problems. We consider the following two problems.\n\n1. Given a collection of graphs, learn a function that can be used for classification and regression problems on unseen graphs. The nodes of any two graphs are not necessarily in correspondence. For instance, each graph of the collection could model a chemical compound and the output could be a function mapping unseen compounds to their level of activity against cancer cells.\n\n2. Given a large graph, learn graph representations that can be used to infer unseen graph properties such as node types and missing edges.\n\nWe propose a framework for learning representations for classes of directed and undirected graphs. The graphs may   Figure 1. A CNN with a receptive field of size 3x3. The field is moved over an image from left to right and top to bottom using a particular stride (here: 1) and zero-padding (here: none) (a). The values read by the receptive fields are transformed into a linear layer and fed to a convolutional architecture (b). The node sequence for which the receptive fields are created and the shapes of the receptive fields are fully determined by the hyper-parameters.\n\nhave nodes and edges with multiple discrete and continuous attributes and may have multiple types of edges. Similar to convolutional neural network for images, we construct locally connected neighborhoods from the input graphs. These neighborhoods are generated efficiently and serve as the receptive fields of a convolutional architecture, allowing the framework to learn effective graph representations.\n\nThe proposed approach builds on concepts from convolutional neural networks (CNNs) (Fukushima, 1980;Atlas et al., 1988;LeCun et al., 1998;2015) for images and extends them to arbitrary graphs. Figure 1 illustrates the locally connected receptive fields of a CNN for images. An image can be represented as a square grid graph whose nodes represent pixels. Now, a CNN can be seen as traversing a node sequence (nodes 1-4 in Figure 1(a)) and generating fixed-size neighborhood graphs (the 3x3 grids in Figure 1(b)) for each of the nodes. The neighborhood graphs serve as the receptive fields to read feature values from the pixel nodes. Due to the implicit spatial order of the pixels, the sequence of nodes for which neighborhood graphs are created, from left to right and top to bottom, is uniquely determined. The same holds for NLP problems where each sentence (and its parse-tree) determines a sequence of words. However, for numerous graph collections a problem-specific ordering (spatial, temporal, or otherwise) is missing and the nodes of the graphs are not in correspondence. In these instances, one has to solve two problems: (i) Determining the node sequences for which neighborhood graphs are created and (ii) computing a normalization of neighborhood graphs, that is, a unique mapping from a graph representation into a vector space representation. The proposed approach, termed PATCHY-SAN, addresses these two problems for arbitrary graphs. For each input graph, it first determines nodes (and their order) for which neighborhood graphs are created. For each of these nodes, a neighborhood consisting of exactly k nodes is extracted and normalized, that is, it is uniquely mapped to a space with a fixed linear order. The normalized neighborhood serves as the receptive field for a node under consideration. Finally, feature learning components such as convolutional and dense layers are combined with the normalized neighborhood graphs as the CNN's receptive fields. Figure 2 illustrates the PATCHY-SAN architecture which has several advantages over existing approaches: First, it is highly efficient, naively parallelizable, and applicable to large graphs. Second, for a number of applications, ranging from computational biology to social network analysis, it is important to visualize learned network motifs (Milo et al., 2002). PATCHY-SAN supports feature visualizations providing insights into the structural properties of graphs. Third, instead of crafting yet another graph kernel, PATCHY-SAN learns application dependent features without the need to feature engineering. Our theoretical contributions are the definition of the normalization problem on graphs and its complexity; a method for comparing graph labeling approaches for a collection of graphs; and a result that shows that PATCHY-SAN generalizes CNNs on images. Using standard benchmark data sets, we demonstrate that the learned CNNs for graphs are both efficient and effective compared to state of the art graph kernels.\n\n\nRelated Work\n\nGraph kernels allow kernel-based learning approaches such as SVMs to work directly on graphs (Vishwanathan et al., 2010). Kernels on graphs were originally defined as similarity functions on the nodes of a single graph (Kondor & Lafferty, 2002). Two representative classes of kernels are the skew spectrum kernel (Kondor & Borgwardt, 2008) and kernels based on graphlets (Kondor et al., 2009;Shervashidze et al., 2009). The latter is related to our work, as it builds kernels based on fixed-sized subgraphs. These subgraphs, which are often called motifs or graphlets, reflect functional network properties (Milo et al., 2002;Alon, 2007 (Yanardag & Vishwanathan, 2015) and graph invariant kernels (Orsini et al., 2015) compare graphs based on the existence or count of small substructures such as shortest paths (Borgwardt & Kriegel, 2005), graphlets, subtrees, and other graph invariants (Haussler, 1999;Orsini et al., 2015). In contrast, PATCHY-SAN learns substructures from graph data and is not limited to a predefined set of motifs. Moreover, while all graph kernels have a training complexity at least quadratic in the number of graphs (Shervashidze et al., 2011), which is prohibitive for large-scale problems, PATCHY-SAN scales linearly with the number of graphs.\n\nGraph neural networks (GNNs) (Scarselli et al., 2009) are a recurrent neural network architecture defined on graphs. GNNs apply recurrent neural networks for walks on the graph structure, propagating node representations until a fixed point is reached. The resulting node representations are then used as features in classification and regression problems. GNNs support only discrete labels and perform as many backpropagation operations as there are edges and nodes in the graph per learning iteration. Gated Graph Sequence Neural Networks modify GNNs to use gated recurrent units and to output sequences (Li et al., 2015).\n\nRecent work extended CNNs to topologies that differ from the low-dimensional grid structure (Bruna et al., 2014;Henaff et al., 2015). All of these methods, however, assume one global graph structure, that is, a correspondence of the vertices across input examples. (Duvenaud et al., 2015) perform convolutional type operations on graphs, developing a differentiable variant of one specific graph feature.\n\n\nBackground\n\nWe provide a brief introduction to the required background in convolutional networks and graph theory.\n\n\nConvolutional Neural Networks\n\nCNNs were inspired by earlier work that showed that the visual cortex in animals contains complex arrangements of cells, responsible for detecting light in small local regions of the visual field (Hubel & Wiesel, 1968). CNNs were developed in the 1980s and have been applied to image, speech, text, and drug discovery problems (Atlas et al., 1988;LeCun et al., 1989;1998;2015;Wallach et al., 2015). A predecessor to CNNs was the Neocognitron (Fukushima, 1980). A typical CNN is composed of convolutional and dense layers. The purpose of the first convolutional layer is the extraction of common patterns found within local regions of the input images. CNNs convolve learned filters over the input image, computing the inner product at every image location in the image and outputting the result as tensors whose depth is the number of filters.\n\n\nGraphs\n\nA graph G is a pair (V, E) with V = {v 1 , ..., v n } the set of vertices and E \u2286 V \u00d7 V the set of edges. Let n be the number of vertices and m the number of edges. Each graph can be represented by an adjacency matrix A of size n \u00d7 n, where A i,j = 1 if there is an edge from vertex v i to vertex v j , and A i,j = 0 otherwise. In this case, we say that vertex v i has position i in A. Moreover, if A i,j = 1 we say v i and v j are adjacent. Node and edge attributes are features that attain one value for each node and edge of a graph. We use the term attribute value instead of label to avoid confusion with the graph-theoretical concept of a labeling. A walk is a sequence of nodes in a graph, in which consecutive nodes are connected by an edge. A path is a walk with distinct nodes. We write d(u, v) to denote the distance between u and v, that is, the length of the shortest path between u and v. N 1 (v) is the 1-neighborhood of a node, that is, all nodes that are adjacent to v.\n\nLabeling and Node Partitions. PATCHY-SAN utilizes graph labelings to impose an order on nodes. A graph labeling is a function : V \u2192 S from the set of vertices V to an ordered set S such as the real numbers and integers. A graph labeling procedure computes a graph labeling for an input graph. When it is clear from the context, we use labeling to refer to both, the graph labeling and the procedure to compute it. A ranking (or coloring) is a function r : V \u2192 {1, ..., |V |}. Every labeling induces a ranking r with r(u) < r(v) if and only if (u) > (v). If the labeling of graph G is injective, it determines a total order of G's vertices and a unique adjacency matrix\nA (G) of G where vertex v has position r(v) in A (G). Moreover, every graph labeling induces a partition {V 1 , ..., V n } on V with u, v \u2208 V i if and only if (u) = (v).\nExamples of graph labeling procedures are node degree and other measures of centrality commonly used in the analysis of networks. For instance, the betweeness centrality of a vertex v computes the fractions of shortest paths that pass through v. The Weisfeiler-Lehman algorithm (Weisfeiler & Lehman, 1968;Douglas, 2011) is a procedure for partitioning the vertices of a graph. It is also known as color refinement and naive vertex classification. Color refinement has attracted considerable interest in the ML community since it can be applied to speed-up inference in graphical models (Kersting et al., 2009; and as a method to compute graph kernels (Shervashidze et al., 2011). PATCHY-SAN applies these labeling procedures, among others (degree, page-rank, eigenvector centrality, etc.), to impose an order on the nodes of graphs, replacing application-dependent orders (temporal, spatial, etc.) where missing.\n\nIsomorphism and Canonicalization. The computational problem of deciding whether two graphs are isomorphic surfaces in several application domains. The graph isomorphism (GI) problem is in NP but not known to be in P or NP-hard. Under several mild restrictions, GI is known to be in P. For instance, GI is in P for graphs of bounded degree (Luks, 1982). A canonicalization of a graph G is a graph G with a fixed vertex order which is isomorphic to G and which represents its entire isomorphism class. In practice, the graph canonicalization tool NAUTY has shown remarkable performance (McKay & Piperno, 2014).\n\n\nLearning CNNs for Arbitrary Graphs\n\nWhen CNNs are applied to images, a receptive field (a square grid) is moved over each image with a particular step size. The receptive field reads the pixels' feature values, for each channel once, and a patch of values is created for each channel. Since the pixels of an image have an implicit arrangement -a spatial order -the receptive fields are always moved from left to right and top to bottom. Moreover, the spatial order uniquely determines the nodes of each receptive field and the way these nodes are mapped to a vector space representation (see Figure 1(b)). Consequently, the values read from two pixels using two different locations of the receptive field are assigned to the same relative position if and only if the pixels' structural roles (their spatial position within the receptive field) are identical.\n\nTo show the connection between CNNs and PATCHY-SAN, we frame CNNs on images as identifying a sequence of nodes in the square grid graph representing the image and building a normalized neighborhood graph -a receptive Algorithm 1 SELNODESEQ: Select Node Sequence 1: input: graph labeling procedure , graph G = (V, E), stride s, width w, receptive field size k 2: Vsort = top w elements of V according to 3: i = 1, j = 1 4: while j < w do 5: if i \u2264 |Vsort| then 6: f = RECEPTIVEFIELD(Vsort[i]) 7: else 8: f = ZERORECEPTIVEFIELD() 9: apply f to each input channel 10:\ni = i + s, j = j + 1\nfield -for each node in the identified sequence. For graph collections where an application-dependent node order is missing and where the nodes of any two graphs are not yet aligned, we need to determine for each graph (i) the sequences of nodes for which we create neighborhoods, and (ii) a unique mapping from the graph representation to a vector representation such that nodes with similar structural roles in the neighborhood graphs are positioned similarly in the vector representation.\n\nWe address these problems by leveraging graph labeling procedures that assigns nodes from two different graphs to a similar relative position in their respective adjacency matrices if their structural roles within the graphs are similar. Given a collection of graphs, PATCHY-SAN (SELECT-ASSEMBLE-NORMALIZE) applies the following steps to each graph: (1) Select a fixed-length sequence of nodes from the graph;\n\n(2) assemble a fixed-size neighborhood for each node in the selected sequence; (3) normalize the extracted neighborhood graph; and (4) learn neighborhood representations with convolutional neural networks from the resulting sequence of patches.\n\nIn the following, we describe methods that address the above-mentioned challenges.\n\n\nNode Sequence Selection\n\nNode sequence selection is the process of identifying, for each input graph, a sequence of nodes for which receptive fields are created. Algorithm 1 lists one such procedure. First, the vertices of the input graph are sorted with respect to a given graph labeling. Second, the resulting node sequence is traversed using a given stride s and for each visited node, Algorithm 3 is executed to construct a receptive field, until exactly w receptive fields have been created. The stride s determines the distance, relative to the selected node sequence, between two consecutive nodes for which a receptive field is created. If the number of nodes is smaller than w, the algorithm creates all-zero receptive fields for padding purposes. \n\n\nNeighborhood Assembly\n\nFor each of the nodes identified in the previous step, a receptive field has to be constructed. Algorithm 3 first calls Algorithm 2 to assembles a local neighborhood for the input node. The nodes of the neighborhood are the candidates for the receptive field. Algorithm 2 lists the neighborhood assembly steps. Given as inputs a node v and the size of the receptive field k, the procedure performs a breadth-first search, exploring vertices with an increasing distance from v, and adds these vertices to a set N . If the number of collected nodes is smaller than k, the 1-neighborhood of the vertices most recently added to N are collected, and so on, until at least k vertices are in N , or until there are no more neighbors to add. Note that at this time, the size of N is possibly different to k.\n\n\nGraph Normalization\n\nThe receptive field for a node is constructed by normalizing the neighborhood assembled in the previous step. Illustrated in Figure 3, the normalization imposes an order on the nodes of the neighborhood graph so as to map from the unordered graph space to a vector space with a linear order. The basic idea is to leverage graph labeling procedures that assigns nodes of two different graphs to a similar relative position in the respective adjacency matrices if and only if their structural roles within the graphs are similar.\n\nTo formalize this intuition, we define the optimal graph normalization problem which aims to find a labeling that is optimal relative to a given collection of graphs.\n\nProblem 1 (Optimal graph normalization). Let G be a collection of unlabeled graphs with k nodes, let be an injective graph labeling procedure, let d G be a distance measure on graphs with k nodes, and let d A be a distance measure on k \u00d7 k matrices. Find\u02c6 such that\n= arg min E G d A A (G), A (G ) \u2212 d G (G, G ) .\nThe problem amounts to finding a graph labeling procedure , such that, for any two graphs drawn uniformly at Learning Convolutional Neural Networks for Graphs  Figure 3. The normalization is performed for each of the graphs induced on the neighborhood of a root node v (the red node; node colors indicate distance to the root node). A graph labeling is used to rank the nodes and to create the normalized receptive fields, one of size k (here: k = 9) for node attributes and one of size k \u00d7 k for edge attributes. Normalization also includes cropping of excess nodes and padding with dummy nodes. Each vertex (edge) attribute corresponds to an input channel with the respective receptive field.\n\nAlgorithm 3 RECEPTIVEFIELD: Create Receptive Field 1: input: vertex v, graph labeling , receptive field size k 2: N = NEIGHASSEMB(v, k) 3: Gnorm = NORMALIZEGRAPH(N, v, , k) 4: return Gnorm random from G, the expected difference between the distance of the graphs in vector space (with respect to the adjacency matrices based on ) and the distance of the graphs in graph space is minimized. The optimal graph normalization problem is a generalization of the classical graph canonicalization problem. A canonical labeling algorithm, however, is optimal only for isomorphic graphs and might perform poorly for graphs that are similar but not isomorphic. In contrast, the smaller the expectation of the optimal normalization problem, the better the labeling aligns nodes with similar structural roles. Note that the similarity is determined by d G .\n\nWe have the following result concerning the complexity of the optimal normalization problem. Theorem 1. Optimal graph normalization is NP-hard.\n\nProof: By reduction from subgraph isomorphism.\n\nPATCHY-SAN does not solve the above optimization problem. Instead, it may compare different graph labeling methods and choose the one that performs best relative to a given collection of graphs. Theorem 2. Let G be a collection of graphs and let (G 1 , G 1 ), ..., (G N , G N ) be a sequence of pairs of graphs sampled independently and uniformly at random from G.\nLet\u03b8 := N i=1 d A A (G i ), A (G i ) /N and \u03b8 := E G d A A (G), A (G ) \u2212 d G (G, G ) . If d A \u2265 d G , then E G [\u03b8 1 ] < E G [\u03b8 2 ] if and only if \u03b8 1 < \u03b8 2 .\nTheorem 2 enables us to compare different labeling procedures in an unsupervised manner via a comparison of the corresponding estimators. Under the assumption d A \u2265 d G , the smaller the estimate\u03b8 the smaller the absolute difference. Therefore, we can simply choose the labeling for which\u03b8 is minimal. The assumption d A \u2265 d G holds, for instance, for the edit distance on graphs and the Ham-Algorithm 4 NORMALIZEGRAPH: Graph Normalization 1: input: subset of vertices U from original graph G, vertex v, graph labeling , receptive field size k 2: output: receptive field for v 3: compute ranking r of U using , subject to \u2200u, w \u2208 U : d(u, v) < d(w, v) \u21d2 r(u) < r(w) 4: if |U | > k then 5: N = top k vertices in U according to r 6: compute ranking r of N using , subject to \u2200u, w \u2208 N : ming distance on adjacency matrices. Finally, note that all of the above results can be extended to directed graphs.\nd(u, v) < d(w, v) \u21d2 r(u) < r(w) 7: else if |V | < k\nThe graph normalization problem and the application of appropriate graph labeling procedures for the normalization of local graph structures is at the core of the proposed approach. Within the PATCHY-SAN framework, we normalize the neighborhood graphs of a vertex v. The labeling of the vertices is therefore constrained by the graph distance to v: for any two vertices u, w, if u is closer to v than w, then v is always ranked higher than w. This definition ensures that v has always rank 1, and that the closer a vertex is to v in G, the higher it is ranked in the vector space representation.\n\nSince most labeling methods are not injective, it is necessary to break ties between same-label nodes. To do so, we use NAUTY (McKay & Piperno, 2014). NAUTY accepts prior node partitions as input and breaks remaining ties by choosing the lexicographically maximal adjacency matrix. It is known that graph isomorphism is in PTIME for graphs of bounded degree (Luks, 1982). Due to the constant size k of the neighborhood graphs, the algorithm runs in time polynomial in the size of the original graph and, on average, in time linear in k (Babai et al., 1980). Our experiments verify that computing a canonical labeling of the graph neigborhoods adds a negligible overhead.\n\nAlgorithm 4 lists the normalization procedure. If the size of the input set U is larger than k, it first applies the ranking based on to select the top k nodes and recomputes a ranking on the smaller set of nodes. If the size of U is smaller than k, it adds disconnected dummy nodes. Finally, it induces the subgraph on the vertices N and canonicalizes the graph taking the ranking r as prior coloring.\n\nWe can relate PATCHY-SAN to CNNs for images as follows.\n\nTheorem 3. Given a sequence of pixels taken from an image. Applying PATCHY-SAN with receptive field size (2m \u2212 1) 2 , stride s, no zero padding, and 1-WL normalization to the sequence is identical (up to a fixed permutation of the receptive field) to the first layer of a CNN with receptive field size 2m \u2212 1, stride s, and no zero padding.\n\nProof: It is possible to show that if an input graph is a square grid, then the 1-WL normalized receptive field constructed for a vertex is always a square grid graph with a unique vertex order.\n\n\nConvolutional Architecture\n\nPATCHY-SAN is able to process both vertex and edge attributes (discrete and continuous). Let a v be the number of vertex attributes and let a e be the number of edge attributes. For each input graph G, it applies normalized receptive fields for vertices and edges which results in one (w, k, a v ) and one (w, k, k, a e ) tensor. These can be reshaped to a (wk, a v ) and a (wk 2 , a e ) tensors. Note that a v and a e are the number of input channels. We can now apply a 1-dimensional convolutional layer with stride and receptive field size k to the first and k 2 to the second tensor. The rest of the architecture can be chosen arbitrarily. We may use merge layers to combine convolutional layers representing nodes and edges, respectively.\n\n\nComplexity and Implementation\n\nPATCHY-SAN's algorithm for creating receptive fields is highly efficient and naively parallelizable because the fields are generated independently. We can show the following asymptotic worst-case result.\n\nTheorem 4. Let N be the number of graphs, let k be the receptive field size, w the width, and O(f (n, m)) the complexity of computing a given labeling for a graph with n vertices and m edges. PATCHY-SAN has a worst-case complexity of O(N w(f (n, m) + n log(n) + exp(k))) for computing the receptive fields for N graphs.\n\nProof: Node sequence selection requires the labeling of each input graph and the retrieval of the k highest ranked nodes. For the creation of normalized graph patches, most computational effort is spent applying the labeling procedure to a neighborhood whose size may be larger than k. Let d be the maximum degree of the input graph G, and U the neighborhood returned by Algorithm 2. We have |U | \u2264 (k \u2212 2)d \u2264 n. The term exp(k) comes from the worst-case complexity of the graph canonicalization algorithm NAUTY on a k node graph (Miyazaki, 1997).\n\nFor instance, for the Weisfeiler-Lehman algorithm, which has a complexity of O((n + m) log(n)) (Berkholz et al., 2013), and constants w n and k n, the complexity of PATCHY-SAN is linear in N and quasi-linear in m and n.\n\n\nExperiments\n\nWe conduct three types of experiments: a runtime analysis, a qualitative analysis of the learned features, and a comparison to graph kernels on benchmark data sets.\n\n\nRuntime Analysis\n\nWe assess the efficiency of PATCHY-SAN by applying it to real-world graphs. The objective is to compare the rates at which receptive fields are generated to the rate at which state of the art CNNs perform learning. All input graphs are part of the collection of the Python module GRAPH-TOOL 1 . For a given graph, we used PATCHY-SAN to compute a receptive field for all nodes using the 1-dimensional Weisfeiler-Lehman (Douglas, 2011) (1-WL) algorithm for the normalization. torus is a periodic lattice with 10, 000 nodes; random is a random undirected graph with 10, 000 nodes and a degree distribution P (k) \u221d 1/k and k max = 3; power is a network representing the topology of a power grid in the US; polbooks is a co-purchasing network of books about US politics published during the 2004 presidential election; preferential is a preferential attachment network model where newly added vertices have degree 3; astro-ph is a coauthorship network between authors of preprints posted on the astrophysics arxiv (Newman, 2001); email-enron is a communication network generated from about half a million sent emails (Leskovec et al., 2009). All experiments were run on commodity hardware with 64G RAM and a single 2.8 GHz CPU. Figure 5. Visualization of RBM features learned with 1-dimensional WL normalized receptive fields of size 9 for a torus (periodic lattice, top left), a preferential attachment graph (Barab\u00e1si & Albert 1999, bottom left), a co-purchasing network of political books (top right), and a random graph (bottom right). Instances of these graphs with about 100 nodes are depicted on the left. A visual representation of the feature's weights (the darker a pixel, the stronger the corresponding weight) and 3 graphs sampled from the RBMs by setting all but the hidden node corresponding to the feature to zero. Yellow nodes have position 1 in the adjacency matrices. (Best seen in color.) Figure 4 depicts the receptive fields per second rates for each input graph. For receptive field size k = 5 and k = 10 PATCHY-SAN creates fields at a rate of more than 1000/s except for email-enron with a rate of 600/s and 320/s, respectively. For k = 50, the largest tested size, fields are created at a rate of at least 100/s. A CNN with 2 convolutional and 2 dense layers learns at a rate of about 200-400 training examples per second on the same machine. Hence, the speed at which receptive fields are generated is sufficient to saturate a downstream CNN.\n\n\nFeature Visualization\n\nThe visualization experiments' aim is to qualitatively investigate whether popular models such as the restricted Boltzman machine (RBM) (Freund & Haussler, 1992) can be combined with PATCHY-SAN for unsupervised feature learning. For every input graph, we have generated receptive fields for all nodes and used these as input to an RBM. The RBM had 100 hidden nodes and was trained for 30 epochs with contrastive divergence and a learning rate of 0.01. We visualize the features learned by a single-layer RBM for 1-dimensional Weisfeiler-Lehman (1-WL) normalized receptive fields of size 9. Note that the features learned by the RBM correspond to reoccurring receptive field patterns. Figure 5 depicts some of the features and samples drawn from it for four different graphs.\n\n\nGraph Classification\n\nGraph classification is the problem of assigning graphs to one of several categories.\n\nData Sets. We use 6 standard benchmark data sets to compare run-time and classification accuracy with state of the art graph kernels: MUTAG, PCT, NCI1, NCI109, PRO-TEIN, and D&D. MUTAG (Debnath et al., 1991) is a data set of 188 nitro compounds where classes indicate whether the compound has a mutagenic effect on a bacterium. PTC consists of 344 chemical compounds where classes indicate carcinogenicity for male and female rats (Toivonen et al., 2003). NCI1 and NCI109 are chemical compounds screened for activity against non-small cell lung cancer and ovarian cancer cell lines (Wale & Karypis, 2006). PRO-TEINS is a graph collection where nodes are secondary structure elements and edges indicate neighborhood in the amino-acid sequence or in 3D space. Graphs are classified as enzyme or non-enzyme. D&D is a data set of 1178 protein structures (Dobson & Doig, 2003) classified into enzymes and non-enzymes.\n\nExperimental Set-up. We compared PATCHY-SAN with the shortest-path kernel (SP) (Borgwardt & Kriegel, 2005), the random walk kernel (RW) (Gaertner et al., 2003), the graphlet count kernel (GK) , and the Weisfeiler-Lehman subtree kernel (WL) (Shervashidze et al., 2011). Similar to previous work (Yanardag & Vishwanathan, 2015), we set the height parameter of WL to 2, the size of the graphlets for GK to 7, and chose the decay factor for RW from {10 \u22126 , 10 \u22125 , ..., 10 \u22121 }. We performed 10-fold cross-validation with LIB-SVM (Chang & Lin, 2011), using 9 folds for training and 1 for testing, and repeated the experiments 10 times. We report average prediction accuracies and standard deviations.\n\nFor PATCHY-SAN (referred to as PSCN), we used 1dimensional WL normalization, a width w equal to the average number of nodes (see Table 1), and receptive field sizes of k = 5 and k = 10. For the experiments we only used node attributes. In addition, we ran experiments for k = 10 where we combined receptive fields for nodes and edges using a merge layer (k = 10 E ). To make a fair com- parison, we used a single network architecture with two convolutional layers, one dense hidden layer, and a softmax layer for all experiments. The first convolutional layer had 16 output channels (feature maps). The second conv layer has 8 output channels, a stride of s = 1, and a field size of 10. The convolutional layers have rectified linear units. The dense layer has 128 rectified linear units with a dropout rate of 0.5. Dropout and the relatively small number of neurons are needed to avoid overfitting on the smaller data sets. The only hyperparameter we optimized is the number of epochs and the batch size for the mini-batch gradient decent algorithm RMSPROP. All of the above was implemented with the THEANO (Bergstra et al., 2010) wrapper KERAS (Chollet, 2015). We also applied a logistic regression (PSLR) classifier on the patches for k = 10.\n\nMoreover, we ran experiments with the same set-up 2 on larger social graph data sets (up to 12000 graphs each, with an average of 400 nodes), and compared PATCHY-SAN with previously reported results for the graphlet count (GK) and the deep graphlet count kernel (DGK) (Yanardag & Vishwanathan, 2015). We used the normalized node degree as attribute for PATCHY-SAN, highlighting one of its advantages: it can easily incorporate continuous features.\n\nResults. Table 1 lists the results of the experiments. We omit the results for NCI109 as they are almost identical to NCI1. Despite using a one-fits-all CNN architecture, the CNNs accuracy is highly competitive with existing graph 2 Due to the larger size of the data sets, we removed dropout. kernels. In most cases, a receptive field size of 10 results in the best classification accuracy. The relatively high variance can be explained with the small size of the benchmark data sets and the fact that the CNNs hyperparameters (with the exception of epochs and batch size) were not tuned to individual data sets. Similar to the experience on image and text data, we expect PATCHY-SAN to perform even better for large data sets. Moreover, PATCHY-SAN is between 2 and 8 times more efficient than the most efficient graph kernel (WL). We expect the performance advantage to be much more pronounced for data sets with a large number of graphs. Results for betweeness centrality normalization are similar with the exception of the runtime which increases by about 10%. Logistic regression applied to PATCHY-SAN's receptive fields performs worse, indicating that PATCHY-SAN works especially well in conjunction with CNNs which learn non-linear feature combinations and which share weights across receptive fields.\n\nPATCHY-SAN is also highly competitive on the social graph data. It significantly outperforms the other two kernels on four of the six data sets and achieves ties on the rest. Table 2 lists the results of the experiments.\n\n\nConclusion and Future Work\n\nWe proposed a framework for learning graph representations that are especially beneficial in conjunction with CNNs. It combines two complementary procedures: (a) selecting a sequence of nodes that covers large parts of the graph and (b) generating local normalized neighborhood representations for each of the nodes in the sequence. Experiments show that the approach is competitive with state of the art graph kernels.\n\nDirections for future work include the use of alternative neural network architectures such as RNNs; combining different receptive field sizes; pretraining with RBMs and autoencoders; and statistical relational models based on the ideas of the approach.\n\n\nof the 33 rd International Conference on Machine Learning, New York, NY, USA, 2016. JMLR: W&CP volume 48. Copyright 2016 by the author(s).\n\n\nSeveral alternative methods for vertex sequence selection are possible. For instance, a depth-first traversal of the in-Algorithm 2 NEIGHASSEMB: Neighborhood Assembly 1: input: vertex v, receptive field size k 2: output: set of neighborhood nodes N for v 3: N = [v] 4: L = [v] 5: while |N | < k and |L| > 0 do 6: L = v\u2208L N1(v) 7: N = N \u222a L 8: return the set of vertices N put graph guided by the values of the graph labeling. We leave these ideas to future work.\n\nthen 8 :\n8N = U and k \u2212 |U | dummy nodes 9: else 10: N = U 11: construct the subgraph G[N ] for the vertices N 12: canonicalize G[N ], respecting the prior coloring r 13: return G[N ]\n\nFigure 4 .\n4Receptive fields per second rates on different graphs.\n\n\n). However, due to the combinatorial complexity of subgraph enumeration, graphlet kernels are restricted to... \n... \n\nneighborhood graph construction \n\nconvolutional architecture \n\nnode sequence selection \n\ngraph normalization \n\nFigure 2. An illustration of the proposed architecture. A node \nsequence is selected from a graph via a graph labeling procedure. \nFor some nodes in the sequence, a local neighborhood graph is as-\nsembled and normalized. The normalized neighborhoods are used \nas receptive fields and combined with existing CNN components. \n\nsubgraphs with few nodes. An effective class of graph \nkernels are the Weisfeiler-Lehman (WL) kernels (Sher-\nvashidze et al., 2011). WL kernels, however, only sup-\nport discrete features and use memory linear in the num-\nber of training examples at test time. PATCHY-SAN uses \nWL as one possible labeling procedure to compute re-\nceptive fields. Deep graph kernels \n\nTable 2 .\n2Table 1. Properties of the data sets and accuracy and timing results (in seconds) for PATCHY-SAN and 4 state of the art graph kernels. RE-M10k 31.82 \u00b1 0.08 32.22 \u00b1 0.10 41.32 \u00b1 0.42 Comparison of accuracy results on social graphs[45].Data set \nMUTAG \nPCT \nNCI1 \nPROTEIN \nD & D \nMax \n28 \n109 \n111 \n620 \n5748 \nAvg \n17.93 \n25.56 \n29.87 \n39.06 \n284.32 \nGraphs \n188 \n344 \n4110 \n1113 \n1178 \nSP [7] \n85.79 \u00b1 2.51 \n58.53 \u00b1 2.55 \n73.00 \u00b1 0.51 \n75.07 \u00b1 0.54 \n> 3 days \nRW [17] \n83.68 \u00b1 1.66 \n57.26 \u00b1 1.30 \n> 3 days \n74.22 \u00b1 0.42 \n> 3 days \nGK [38] \n81.58 \u00b1 2.11 \n57.32 \u00b1 1.13 \n62.28 \u00b1 0.29 \n71.67 \u00b1 0.55 \n78.45 \u00b1 0.26 \nWL [39] \n80.72 \u00b1 3.00 (5s) 56.97 \u00b1 2.01 (30s) 80.22 \u00b1 0.51 (375s) 72.92 \u00b1 0.56 (143s) 77.95 \u00b1 0.70 (609s) \nPSCN k=5 \n91.58 \u00b1 5.86 (2s) \n59.43 \u00b1 3.14 (4s) \n72.80 \u00b1 2.06 (59s) \n74.10 \u00b1 1.72 (22s) \n74.58 \u00b1 2.85 (121s) \nPSCN k=10 88.95 \u00b1 4.37 (3s) \n62.29 \u00b1 5.68 (6s) \n76.34 \u00b1 1.68 (76s) \n75.00 \u00b1 2.51 (30s) \n76.27 \u00b1 2.64 (154s) \nPSCN k=10 E 92.63 \u00b1 4.21 (3s) \n60.00 \u00b1 4.82 (6s) \n78.59 \u00b1 1.89 (76s) \n75.89 \u00b1 2.76 (30s) \n77.12 \u00b1 2.41 (154s) \nPSLR k=10 \n87.37 \u00b1 7.88 \n58.57 \u00b1 5.46 \n70.00 \u00b1 1.98 \n71.79 \u00b1 3.71 \n68.39 \u00b1 5.56 \n\nData set \nGK [38] \nDGK [45] \nPSCN k=10 \nCOLLAB 72.84 \u00b1 0.28 73.09 \u00b1 0.25 72.60 \u00b1 2.15 \nIMDB-B \n65.87 \u00b1 0.98 66.96 \u00b1 0.56 71.00 \u00b1 2.29 \nIMDB-M \n43.89 \u00b1 0.38 44.55 \u00b1 0.52 45.23 \u00b1 2.84 \nRE-B \n77.34 \u00b1 0.18 78.04 \u00b1 0.39 86.30 \u00b1 1.58 \nRE-M5k \n41.01 \u00b1 0.17 41.27 \u00b1 0.18 49.10 \u00b1 0.70 \n\nhttps://graph-tool.skewed.de/\nAcknowledgmentsMany thanks to the anonymous ICML reviewers who provided tremendously helpful comments. The research leading to these results has received funding from the European Union's Horizon 2020 innovation action program under grant agreement No 653449-TYPES.\nNetwork motifs: theory and experimental approaches. Uri Alon, Nature Reviews Genetics. 86Alon, Uri. Network motifs: theory and experimental approaches. Nature Reviews Genetics, 8(6):450-461, 2007.\n\nAn artificial neural network for spatio-temporal bipolar patterns: Application to phoneme classification. Les E Atlas, Toshiteru Homma, Robert J Marks, Ii, Neural Information Processing Systems. Anderson, D.Z.Atlas, Les E., Homma, Toshiteru, and Marks, Robert J. II. An artificial neural network for spatio-temporal bipolar patterns: Application to phoneme classification. In An- derson, D.Z. (ed.), Neural Information Processing Sys- tems, pp. 31-40. 1988.\n\nRandom graph isomorphism. L\u00e1szl\u00f3 Babai, Paul Erd\u0151s, Selkow, M Stanley, SIAM J. Computing. 93Babai, L\u00e1szl\u00f3, Erd\u0151s, Paul, and Selkow, Stanley M. Ran- dom graph isomorphism. SIAM J. Computing, 9(3):628- 635, 1980.\n\nEmergence of scaling in random networks. Albert-Laszlo Barab\u00e1si, Albert , R\u00e9ka , Science. 2865439Barab\u00e1si, Albert-Laszlo and Albert, R\u00e9ka. Emergence of scaling in random networks. Science, 286(5439):509- 512, 1999.\n\nTheano: a CPU and GPU math expression compiler. James Bergstra, Breuleux, Olivier, Bastien, Fr\u00e9d\u00e9ric, Lamblin, Pascal, Pascanu, Razvan, Desjardins, Guillaume, Joseph Turian, Warde - Farley, David Bengio, Yoshua , Proceedings of the Python for Scientific Computing Conference (SciPy). the Python for Scientific Computing Conference (SciPy)Bergstra, James, Breuleux, Olivier, Bastien, Fr\u00e9d\u00e9ric, Lamblin, Pascal, Pascanu, Razvan, Desjardins, Guil- laume, Turian, Joseph, Warde-Farley, David, and Ben- gio, Yoshua. Theano: a CPU and GPU math expression compiler. In Proceedings of the Python for Scientific Computing Conference (SciPy), 2010.\n\nMartin. Tight lower and upper bounds for the complexity of canonical colour refinement. Christoph Berkholz, Paul S Bonsma, Grohe , Proceedings of the European Symposium on Algorithms. the European Symposium on AlgorithmsBerkholz, Christoph, Bonsma, Paul S., and Grohe, Mar- tin. Tight lower and upper bounds for the complexity of canonical colour refinement. In Proceedings of the Eu- ropean Symposium on Algorithms, pp. 145-156, 2013.\n\nShortestpath kernels on graphs. Karsten M Borgwardt, Hans-Peter Kriegel, Proceedings of the Fifth IEEE International Conference on Data Mining (ICDM). the Fifth IEEE International Conference on Data Mining (ICDM)Borgwardt, Karsten M. and Kriegel, Hans-Peter. Shortest- path kernels on graphs. In Proceedings of the Fifth IEEE International Conference on Data Mining (ICDM), pp. 74-81, 2005.\n\nSpectral networks and locally connected networks on graphs. Joan Bruna, Zaremba, Wojciech, Arthur Szlam, Yann Le-Cun, International Conference on Learning Representations. Bruna, Joan, Zaremba, Wojciech, Szlam, Arthur, and Le- Cun, Yann. Spectral networks and locally connected net- works on graphs. In International Conference on Learn- ing Representations, 2014.\n\nLibsvm: A library for support vector machines. Chih-Chung Chang, Chih-Jen Lin, 27:1-27:27ACM Trans. Intell. Syst. Technol. 23Chang, Chih-Chung and Lin, Chih-Jen. Libsvm: A library for support vector machines. ACM Trans. Intell. Syst. Technol., 2(3):27:1-27:27, 2011.\n\n. Fran\u00e7ois Chollet, Chollet, Fran\u00e7ois. keras. https://github.com/ fchollet/keras, 2015.\n\nCorwin. Structure-activity relationship of mutagenic aromatic and heteroaromatic nitro compounds. correlation with molecular orbital energies and hydrophobicity. Asim Debnath, Kumar, Rosa L De Compadre, Lopez, Debnath, Gargi, Alan J Shusterman, Hansch , J. Med. Chem. 34Debnath, Asim Kumar, de Compadre, Rosa L. Lopez, Deb- nath, Gargi, Shusterman, Alan J., and Hansch, Cor- win. Structure-activity relationship of mutagenic aro- matic and heteroaromatic nitro compounds. correlation with molecular orbital energies and hydrophobicity. J. Med. Chem., (34):786-797, 1991.\n\nDistinguishing enzyme structures from non-enzymes without alignments. Paul D Dobson, Andrew J Doig, Journal of Molecular Biology. 3304Dobson, Paul D. and Doig, Andrew J. Distinguishing en- zyme structures from non-enzymes without alignments. Journal of Molecular Biology, 330(4):771 -783, 2003.\n\nThe weisfeiler-lehman method and graph isomorphism testing. Brendan L Douglas, arXiv:1101.5211arXiv preprintDouglas, Brendan L. The weisfeiler-lehman method and graph isomorphism testing. arXiv preprint arXiv:1101.5211, 2011.\n\nConvolutional networks on graphs for learning molecular fingerprints. David K Duvenaud, Maclaurin, Jorge Iparraguirre, Bombarell, Rafael, Timothy Hirzel, Alan Aspuru-Guzik, Adams , Ryan P , Advances in Neural Information Processing Systems. Duvenaud, David K, Maclaurin, Dougal, Iparraguirre, Jorge, Bombarell, Rafael, Hirzel, Timothy, Aspuru- Guzik, Alan, and Adams, Ryan P. Convolutional net- works on graphs for learning molecular fingerprints. In Advances in Neural Information Processing Systems, pp. 2215-2223, 2015.\n\nUnsupervised learning of distributions of binary vectors using two layer networks. Yoav Freund, David Haussler, Advances in Neural Information Processing Systems. Freund, Yoav and Haussler, David. Unsupervised learning of distributions of binary vectors using two layer net- works. In Advances in Neural Information Processing Systems, pp. 912-919, 1992.\n\nNeocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position. Kunihiko Fukushima, Biological Cybernetics. 364Fukushima, Kunihiko. Neocognitron: A self-organizing neural network model for a mechanism of pattern recog- nition unaffected by shift in position. Biological Cyber- netics, 36(4):193-202, 1980.\n\nOn graph kernels: Hardness results and efficient alternatives. Thomas Gaertner, Peter Flach, Stefan Wrobel, Proceedings of the 16th Annual Conference on Computational Learning Theory. the 16th Annual Conference on Computational Learning TheoryGaertner, Thomas, Flach, Peter, and Wrobel, Stefan. On graph kernels: Hardness results and efficient alterna- tives. In Proceedings of the 16th Annual Conference on Computational Learning Theory, pp. 129-143, 2003.\n\nConvolution kernels on discrete structures. David Haussler, Department of Computer Science, University of California at Santa CruzTechnical reportHaussler, David. Convolution kernels on discrete struc- tures. Technical report, Department of Computer Sci- ence, University of California at Santa Cruz, 1999.\n\nMikael Henaff, Joan Bruna, Yann Lecun, arXiv:1506.05163Deep convolutional networks on graph-structured data. arXiv preprintHenaff, Mikael, Bruna, Joan, and LeCun, Yann. Deep convolutional networks on graph-structured data. arXiv preprint arXiv:1506.05163, 2015.\n\nReceptive fields and functional architecture of monkey striate cortex. David H Hubel, Wiesel, N Torsten, Journal of Physiology. 195Hubel, David H. and Wiesel, Torsten N. Receptive fields and functional architecture of monkey striate cortex. Journal of Physiology (London), 195:215-243, 1968.\n\nSriraam. Counting belief propagation. Kristian Kersting, Babak Ahmadi, Natarajan , Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence (UAI). the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence (UAI)Kersting, Kristian, Ahmadi, Babak, and Natarajan, Sri- raam. Counting belief propagation. In Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence (UAI), pp. 277-284, 2009.\n\nPower iterated color refinement. Kristian Kersting, Mladenov, Martin, Roman Garnett, Martin Grohe, Proceedings of the Twenty-Eighth AAAI Conference on Artificial Intelligence (AAAI). the Twenty-Eighth AAAI Conference on Artificial Intelligence (AAAI)Kersting, Kristian, Mladenov, Martin, Garnett, Roman, and Grohe, Martin. Power iterated color refinement. In Pro- ceedings of the Twenty-Eighth AAAI Conference on Ar- tificial Intelligence (AAAI), pp. 1904-1910, 2014.\n\nThe skew spectrum of graphs. Risi Kondor, Karsten M Borgwardt, Proceedings of the 25th International Conference on Machine Learning (ICML). the 25th International Conference on Machine Learning (ICML)Kondor, Risi and Borgwardt, Karsten M. The skew spec- trum of graphs. In Proceedings of the 25th International Conference on Machine Learning (ICML), pp. 496-503, 2008.\n\nDiffusion kernels on graphs and other discrete input spaces. Risi Kondor, John Lafferty, Proceedings of the 19th International Conference on Machine Learning (ICML). the 19th International Conference on Machine Learning (ICML)Kondor, Risi and Lafferty, John. Diffusion kernels on graphs and other discrete input spaces. In Proceedings of the 19th International Conference on Machine Learning (ICML), pp. 315-322, 2002.\n\nThe graphlet spectrum. Risi Kondor, Nino Shervashidze, Karsten M Borgwardt, Proceedings of the 26th International Conference on Machine Learning (ICML). the 26th International Conference on Machine Learning (ICML)Kondor, Risi, Shervashidze, Nino, and Borgwardt, Karsten M. The graphlet spectrum. In Proceedings of the 26th International Conference on Machine Learning (ICML), pp. 529-536, 2009.\n\nBackpropagation applied to handwritten zip code recognition. Y Lecun, B Boser, J S Denker, D Henderson, R E Howard, W Hubbard, L D Jackel, Neural Comput. 14LeCun, Y., Boser, B., Denker, J. S., Henderson, D., Howard, R. E., Hubbard, W., and Jackel, L. D. Back- propagation applied to handwritten zip code recognition. Neural Comput., 1(4):541-551, 1989.\n\nGradient-based learning applied to document recognition. Yann Lecun, Bottou, L\u00e9on, Yoshua Bengio, Patrick Haffner, Proceedings of the IEEE. 8611LeCun, Yann, Bottou, L\u00e9on, Bengio, Yoshua, and Haffner, Patrick. Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11):2278- 2324, 1998.\n\nDeep learning. Yann Lecun, Yoshua Bengio, Geoffrey Hinton, Nature. 521LeCun, Yann, Bengio, Yoshua, and Hinton, Geoffrey. Deep learning. Nature, 521:436-444, 2015.\n\nCommunity structure in large networks: Natural cluster sizes and the absence of large well-defined clusters. Jure Leskovec, Kevin J Lang, Anirban Dasgupta, Michael W Mahoney, Internet Mathematics. 61Leskovec, Jure, Lang, Kevin J, Dasgupta, Anirban, and Mahoney, Michael W. Community structure in large net- works: Natural cluster sizes and the absence of large well-defined clusters. Internet Mathematics, 6(1):29- 123, 2009.\n\nGated graph sequence neural networks. Yujia Li, Tarlow, Daniel, Marc Brockschmidt, Richard Zemel, arXiv:1511.05493arXiv preprintLi, Yujia, Tarlow, Daniel, Brockschmidt, Marc, and Zemel, Richard. Gated graph sequence neural networks. arXiv preprint arXiv:1511.05493, 2015.\n\nIsomorphism of graphs of bounded valence can be tested in polynomial time. Eugene M Luks, Journal of Computer and System Sciences. 25Luks, Eugene M. Isomorphism of graphs of bounded va- lence can be tested in polynomial time. Journal of Com- puter and System Sciences, (25):42-65, 1982.\n\nPractical graph isomorphism. Brendan D Mckay, Adolfo Piperno, {II}. Journal of Symbolic Computation. 600McKay, Brendan D. and Piperno, Adolfo. Practical graph isomorphism, {II}. Journal of Symbolic Computation, 60(0):94 -112, 2014.\n\nNetwork motifs: simple building blocks of complex networks. Ron Milo, Shen-Orr, Shai, Itzkovitz, Shalev, Kashtan, Nadav, Dmitri Chklovskii, Uri Alon, Science. 2985594Milo, Ron, Shen-Orr, Shai, Itzkovitz, Shalev, Kashtan, Na- dav, Chklovskii, Dmitri, and Alon, Uri. Network motifs: simple building blocks of complex networks. Science, 298(5594):824-827, 2002.\n\nThe complexity of mckays canonical labeling algorithm. Takunari Miyazaki, Groups and Computation II. 28Miyazaki, Takunari. The complexity of mckays canonical labeling algorithm. In Groups and Computation II, vol- ume 28, pp. 239-256, 1997.\n\nThe structure of scientific collaboration networks. Mark Newman, Ej, Proceedings of the National Academy of Sciences. 982Newman, Mark EJ. The structure of scientific collabora- tion networks. Proceedings of the National Academy of Sciences, 98(2):404-409, 2001.\n\nGraph invariant kernels. F Orsini, P Frasconi, L Raedt, De, Proceedings of the AAAI Conference on Artificial Intelligence (AAAI). the AAAI Conference on Artificial Intelligence (AAAI)Orsini, F., Frasconi, P., and Raedt, L. De. Graph invari- ant kernels. In Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), pp. 678-689, 2015.\n\nThe graph neural network model. F Scarselli, M Gori, A C Tsoi, M Hagenbuchner, G Monfardini, IEEE Transactions on Neural Networks. 201Scarselli, F., Gori, M., Tsoi, A. C., Hagenbuchner, M., and Monfardini, G. The graph neural network model. IEEE Transactions on Neural Networks, 20(1):61-80, 2009.\n\nEfficient graphlet kernels for large graph comparison. Nino Shervashidze, S V N Vishwanathan, Petri, H Tobias, Kurt Mehlhorn, Karsten M Borgwardt, Proceedings of the 12th International Conference on Artificial Intelligence and Statistics (AISTATS). the 12th International Conference on Artificial Intelligence and Statistics (AISTATS)Shervashidze, Nino, Vishwanathan, S.V.N., Petri, To- bias H., Mehlhorn, Kurt, and Borgwardt, Karsten M. Ef- ficient graphlet kernels for large graph comparison. In Proceedings of the 12th International Conference on Ar- tificial Intelligence and Statistics (AISTATS), pp. 488- 495, 2009.\n\nWeisfeiler-lehman graph kernels. Nino Shervashidze, Pascal Schweitzer, Erik Van Leeuwen, Jan, Kurt Mehlhorn, Karsten M Borgwardt, J. Mach. Learn. Res. 12Shervashidze, Nino, Schweitzer, Pascal, van Leeuwen, Erik Jan, Mehlhorn, Kurt, and Borgwardt, Karsten M. Weisfeiler-lehman graph kernels. J. Mach. Learn. Res., 12:2539-2561, 2011.\n\nStatistical evaluation of the predictive toxicology challenge. Toivonen, Hannu, Srinivasan, Ashwin, Ross D King, Stefan Kramer, Christoph Helma, Bioinformatics. 1910Toivonen, Hannu, Srinivasan, Ashwin, King, Ross D, Kramer, Stefan, and Helma, Christoph. Statistical evalu- ation of the predictive toxicology challenge 2000-2001. Bioinformatics, 19(10):1183-1193, 2003.\n\nGraph kernels. S V N Vishwanathan, Nicol N Schraudolph, Risi Kondor, Karsten M Borgwardt, J. Mach. Learn. Res. 11Vishwanathan, S. V. N., Schraudolph, Nicol N., Kondor, Risi, and Borgwardt, Karsten M. Graph kernels. J. Mach. Learn. Res., 11:1201-1242, 2010.\n\nComparison of descriptor spaces for chemical compound retrieval and classification. Nikil Wale, George Karypis, Proceedings of the International Conference on Data Mining (ICDM). the International Conference on Data Mining (ICDM)Wale, Nikil and Karypis, George. Comparison of descrip- tor spaces for chemical compound retrieval and classifi- cation. In Proceedings of the International Conference on Data Mining (ICDM), pp. 678-689, 2006.\n\nAtomnet: A deep convolutional neural network for bioactivity prediction in structure-based drug discovery. Wallach, Izhar, Michael Dzamba, Abraham Heifets, abs/1510.02855CoRRWallach, Izhar, Dzamba, Michael, and Heifets, Abra- ham. Atomnet: A deep convolutional neural network for bioactivity prediction in structure-based drug discovery. CoRR, abs/1510.02855, 2015.\n\nA reduction of a graph to a canonical form and an algebra arising during this reduction. Nauchno-Technicheskaya Informatsia. Boris Weisfeiler, A A Lehman, 2Weisfeiler, Boris and Lehman, AA. A reduction of a graph to a canonical form and an algebra arising during this reduction. Nauchno-Technicheskaya Informatsia, 2(9): 12-16, 1968.\n\nDeep graph kernels. Pinar Yanardag, S V N Vishwanathan, Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data MiningYanardag, Pinar and Vishwanathan, S.V.N. Deep graph ker- nels. In Proceedings of the 21th ACM SIGKDD Inter- national Conference on Knowledge Discovery and Data Mining, pp. 1365-1374, 2015.\n", "annotations": {"author": "[{\"end\":130,\"start\":53},{\"end\":204,\"start\":131},{\"end\":259,\"start\":205},{\"end\":321,\"start\":260},{\"end\":360,\"start\":322}]", "publisher": null, "author_last_name": "[{\"end\":68,\"start\":61},{\"end\":144,\"start\":139},{\"end\":223,\"start\":216},{\"end\":285,\"start\":271},{\"end\":324,\"start\":322}]", "author_first_name": "[{\"end\":60,\"start\":53},{\"end\":138,\"start\":131},{\"end\":215,\"start\":205},{\"end\":270,\"start\":260}]", "author_affiliation": "[{\"end\":129,\"start\":96},{\"end\":203,\"start\":170},{\"end\":258,\"start\":225},{\"end\":320,\"start\":287},{\"end\":359,\"start\":326}]", "title": "[{\"end\":50,\"start\":1},{\"end\":410,\"start\":361}]", "venue": null, "abstract": "[{\"end\":1058,\"start\":412}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2841,\"start\":2824},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2860,\"start\":2841},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":2879,\"start\":2860},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2884,\"start\":2879},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":5084,\"start\":5065},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":5883,\"start\":5856},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":6007,\"start\":5982},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6102,\"start\":6076},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":6155,\"start\":6134},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":6180,\"start\":6155},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":6389,\"start\":6370},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":6399,\"start\":6389},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":6431,\"start\":6400},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":6481,\"start\":6460},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6602,\"start\":6575},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":6668,\"start\":6652},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":6688,\"start\":6668},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":6932,\"start\":6905},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":7088,\"start\":7065},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":7659,\"start\":7642},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":7774,\"start\":7754},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":7794,\"start\":7774},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7950,\"start\":7927},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8435,\"start\":8413},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8564,\"start\":8544},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8583,\"start\":8564},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":8588,\"start\":8583},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":8593,\"start\":8588},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":8614,\"start\":8593},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8676,\"start\":8659},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":11203,\"start\":11176},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11216,\"start\":11203},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":11507,\"start\":11484},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":11576,\"start\":11549},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":12163,\"start\":12151},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":21680,\"start\":21657},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":21901,\"start\":21889},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":22087,\"start\":22067},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":25080,\"start\":25064},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":25201,\"start\":25178},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":25936,\"start\":25921},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":26526,\"start\":26512},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":26638,\"start\":26615},{\"end\":26945,\"start\":26908},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":28152,\"start\":28127},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":29084,\"start\":29062},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":29331,\"start\":29308},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":29481,\"start\":29459},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":29748,\"start\":29727},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":29897,\"start\":29870},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":29950,\"start\":29927},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":30058,\"start\":30031},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":30116,\"start\":30085},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30337,\"start\":30318},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":31621,\"start\":31598},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31651,\"start\":31636},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":32036,\"start\":32005}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":34562,\"start\":34422},{\"attributes\":{\"id\":\"fig_2\"},\"end\":35027,\"start\":34563},{\"attributes\":{\"id\":\"fig_4\"},\"end\":35212,\"start\":35028},{\"attributes\":{\"id\":\"fig_5\"},\"end\":35280,\"start\":35213},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":36202,\"start\":35281},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":37619,\"start\":36203}]", "paragraph": "[{\"end\":1234,\"start\":1074},{\"end\":1614,\"start\":1236},{\"end\":1755,\"start\":1616},{\"end\":2332,\"start\":1757},{\"end\":2739,\"start\":2334},{\"end\":5746,\"start\":2741},{\"end\":7034,\"start\":5763},{\"end\":7660,\"start\":7036},{\"end\":8066,\"start\":7662},{\"end\":8183,\"start\":8081},{\"end\":9060,\"start\":8217},{\"end\":10057,\"start\":9071},{\"end\":10727,\"start\":10059},{\"end\":11810,\"start\":10898},{\"end\":12420,\"start\":11812},{\"end\":13281,\"start\":12459},{\"end\":13847,\"start\":13283},{\"end\":14360,\"start\":13869},{\"end\":14771,\"start\":14362},{\"end\":15017,\"start\":14773},{\"end\":15101,\"start\":15019},{\"end\":15861,\"start\":15129},{\"end\":16686,\"start\":15887},{\"end\":17237,\"start\":16710},{\"end\":17405,\"start\":17239},{\"end\":17672,\"start\":17407},{\"end\":18415,\"start\":17721},{\"end\":19262,\"start\":18417},{\"end\":19407,\"start\":19264},{\"end\":19455,\"start\":19409},{\"end\":19821,\"start\":19457},{\"end\":20881,\"start\":19980},{\"end\":21529,\"start\":20934},{\"end\":22201,\"start\":21531},{\"end\":22605,\"start\":22203},{\"end\":22662,\"start\":22607},{\"end\":23004,\"start\":22664},{\"end\":23200,\"start\":23006},{\"end\":23974,\"start\":23231},{\"end\":24211,\"start\":24008},{\"end\":24532,\"start\":24213},{\"end\":25081,\"start\":24534},{\"end\":25302,\"start\":25083},{\"end\":25482,\"start\":25318},{\"end\":27965,\"start\":25503},{\"end\":28765,\"start\":27991},{\"end\":28875,\"start\":28790},{\"end\":29789,\"start\":28877},{\"end\":30488,\"start\":29791},{\"end\":31735,\"start\":30490},{\"end\":32184,\"start\":31737},{\"end\":33494,\"start\":32186},{\"end\":33716,\"start\":33496},{\"end\":34166,\"start\":33747},{\"end\":34421,\"start\":34168}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10897,\"start\":10728},{\"attributes\":{\"id\":\"formula_1\"},\"end\":13868,\"start\":13848},{\"attributes\":{\"id\":\"formula_2\"},\"end\":17720,\"start\":17673},{\"attributes\":{\"id\":\"formula_3\"},\"end\":19979,\"start\":19822},{\"attributes\":{\"id\":\"formula_4\"},\"end\":20933,\"start\":20882}]", "table_ref": "[{\"end\":30626,\"start\":30619},{\"end\":32202,\"start\":32195},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":33678,\"start\":33671}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1072,\"start\":1060},{\"attributes\":{\"n\":\"2.\"},\"end\":5761,\"start\":5749},{\"attributes\":{\"n\":\"3.\"},\"end\":8079,\"start\":8069},{\"attributes\":{\"n\":\"3.1.\"},\"end\":8215,\"start\":8186},{\"attributes\":{\"n\":\"3.2.\"},\"end\":9069,\"start\":9063},{\"attributes\":{\"n\":\"4.\"},\"end\":12457,\"start\":12423},{\"attributes\":{\"n\":\"4.1.\"},\"end\":15127,\"start\":15104},{\"attributes\":{\"n\":\"4.2.\"},\"end\":15885,\"start\":15864},{\"attributes\":{\"n\":\"4.3.\"},\"end\":16708,\"start\":16689},{\"attributes\":{\"n\":\"4.4.\"},\"end\":23229,\"start\":23203},{\"attributes\":{\"n\":\"5.\"},\"end\":24006,\"start\":23977},{\"attributes\":{\"n\":\"6.\"},\"end\":25316,\"start\":25305},{\"attributes\":{\"n\":\"6.1.\"},\"end\":25501,\"start\":25485},{\"attributes\":{\"n\":\"6.2.\"},\"end\":27989,\"start\":27968},{\"attributes\":{\"n\":\"6.3.\"},\"end\":28788,\"start\":28768},{\"attributes\":{\"n\":\"7.\"},\"end\":33745,\"start\":33719},{\"end\":35037,\"start\":35029},{\"end\":35224,\"start\":35214},{\"end\":36213,\"start\":36204}]", "table": "[{\"end\":36202,\"start\":35390},{\"end\":37619,\"start\":36449}]", "figure_caption": "[{\"end\":34562,\"start\":34424},{\"end\":35027,\"start\":34565},{\"end\":35212,\"start\":35039},{\"end\":35280,\"start\":35226},{\"end\":35390,\"start\":35283},{\"end\":36449,\"start\":36215}]", "figure_ref": "[{\"end\":1881,\"start\":1873},{\"end\":2942,\"start\":2934},{\"end\":3171,\"start\":3163},{\"end\":3248,\"start\":3240},{\"end\":4729,\"start\":4721},{\"end\":13023,\"start\":13015},{\"end\":16843,\"start\":16835},{\"end\":17446,\"start\":17417},{\"end\":17889,\"start\":17881},{\"end\":26734,\"start\":26726},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":27414,\"start\":27406},{\"end\":28683,\"start\":28675}]", "bib_author_first_name": "[{\"end\":37971,\"start\":37968},{\"end\":38223,\"start\":38220},{\"end\":38225,\"start\":38224},{\"end\":38242,\"start\":38233},{\"end\":38256,\"start\":38250},{\"end\":38258,\"start\":38257},{\"end\":38605,\"start\":38599},{\"end\":38617,\"start\":38613},{\"end\":38634,\"start\":38633},{\"end\":38839,\"start\":38826},{\"end\":38856,\"start\":38850},{\"end\":38863,\"start\":38859},{\"end\":39054,\"start\":39049},{\"end\":39166,\"start\":39160},{\"end\":39180,\"start\":39175},{\"end\":39182,\"start\":39181},{\"end\":39196,\"start\":39191},{\"end\":39211,\"start\":39205},{\"end\":39738,\"start\":39729},{\"end\":39753,\"start\":39749},{\"end\":39755,\"start\":39754},{\"end\":39769,\"start\":39764},{\"end\":40117,\"start\":40110},{\"end\":40119,\"start\":40118},{\"end\":40141,\"start\":40131},{\"end\":40534,\"start\":40530},{\"end\":40567,\"start\":40561},{\"end\":40579,\"start\":40575},{\"end\":40893,\"start\":40883},{\"end\":40909,\"start\":40901},{\"end\":41114,\"start\":41106},{\"end\":41359,\"start\":41355},{\"end\":41380,\"start\":41376},{\"end\":41382,\"start\":41381},{\"end\":41423,\"start\":41419},{\"end\":41425,\"start\":41424},{\"end\":41444,\"start\":41438},{\"end\":41839,\"start\":41835},{\"end\":41841,\"start\":41840},{\"end\":41856,\"start\":41850},{\"end\":41858,\"start\":41857},{\"end\":42128,\"start\":42121},{\"end\":42130,\"start\":42129},{\"end\":42363,\"start\":42358},{\"end\":42365,\"start\":42364},{\"end\":42392,\"start\":42387},{\"end\":42433,\"start\":42426},{\"end\":42446,\"start\":42442},{\"end\":42466,\"start\":42461},{\"end\":42473,\"start\":42469},{\"end\":42475,\"start\":42474},{\"end\":42899,\"start\":42895},{\"end\":42913,\"start\":42908},{\"end\":43301,\"start\":43293},{\"end\":43605,\"start\":43599},{\"end\":43621,\"start\":43616},{\"end\":43635,\"start\":43629},{\"end\":44044,\"start\":44039},{\"end\":44309,\"start\":44303},{\"end\":44322,\"start\":44318},{\"end\":44334,\"start\":44330},{\"end\":44642,\"start\":44637},{\"end\":44644,\"start\":44643},{\"end\":44661,\"start\":44660},{\"end\":44905,\"start\":44897},{\"end\":44921,\"start\":44916},{\"end\":44939,\"start\":44930},{\"end\":45355,\"start\":45347},{\"end\":45389,\"start\":45384},{\"end\":45405,\"start\":45399},{\"end\":45816,\"start\":45812},{\"end\":45832,\"start\":45825},{\"end\":45834,\"start\":45833},{\"end\":46218,\"start\":46214},{\"end\":46231,\"start\":46227},{\"end\":46600,\"start\":46596},{\"end\":46613,\"start\":46609},{\"end\":46635,\"start\":46628},{\"end\":46637,\"start\":46636},{\"end\":47031,\"start\":47030},{\"end\":47040,\"start\":47039},{\"end\":47049,\"start\":47048},{\"end\":47051,\"start\":47050},{\"end\":47061,\"start\":47060},{\"end\":47074,\"start\":47073},{\"end\":47076,\"start\":47075},{\"end\":47086,\"start\":47085},{\"end\":47097,\"start\":47096},{\"end\":47099,\"start\":47098},{\"end\":47384,\"start\":47380},{\"end\":47412,\"start\":47406},{\"end\":47428,\"start\":47421},{\"end\":47659,\"start\":47655},{\"end\":47673,\"start\":47667},{\"end\":47690,\"start\":47682},{\"end\":47917,\"start\":47913},{\"end\":47933,\"start\":47928},{\"end\":47935,\"start\":47934},{\"end\":47949,\"start\":47942},{\"end\":47967,\"start\":47960},{\"end\":47969,\"start\":47968},{\"end\":48274,\"start\":48269},{\"end\":48299,\"start\":48295},{\"end\":48321,\"start\":48314},{\"end\":48585,\"start\":48579},{\"end\":48587,\"start\":48586},{\"end\":48828,\"start\":48821},{\"end\":48830,\"start\":48829},{\"end\":48844,\"start\":48838},{\"end\":49088,\"start\":49085},{\"end\":49152,\"start\":49146},{\"end\":49168,\"start\":49165},{\"end\":49448,\"start\":49440},{\"end\":49682,\"start\":49678},{\"end\":49915,\"start\":49914},{\"end\":49925,\"start\":49924},{\"end\":49937,\"start\":49936},{\"end\":50269,\"start\":50268},{\"end\":50282,\"start\":50281},{\"end\":50290,\"start\":50289},{\"end\":50292,\"start\":50291},{\"end\":50300,\"start\":50299},{\"end\":50316,\"start\":50315},{\"end\":50594,\"start\":50590},{\"end\":50610,\"start\":50609},{\"end\":50614,\"start\":50611},{\"end\":50637,\"start\":50636},{\"end\":50650,\"start\":50646},{\"end\":50668,\"start\":50661},{\"end\":50670,\"start\":50669},{\"end\":51195,\"start\":51191},{\"end\":51216,\"start\":51210},{\"end\":51233,\"start\":51229},{\"end\":51256,\"start\":51252},{\"end\":51274,\"start\":51267},{\"end\":51276,\"start\":51275},{\"end\":51596,\"start\":51592},{\"end\":51598,\"start\":51597},{\"end\":51611,\"start\":51605},{\"end\":51629,\"start\":51620},{\"end\":51878,\"start\":51877},{\"end\":51882,\"start\":51879},{\"end\":51902,\"start\":51897},{\"end\":51904,\"start\":51903},{\"end\":51922,\"start\":51918},{\"end\":51938,\"start\":51931},{\"end\":51940,\"start\":51939},{\"end\":52209,\"start\":52204},{\"end\":52222,\"start\":52216},{\"end\":52690,\"start\":52683},{\"end\":52706,\"start\":52699},{\"end\":53057,\"start\":53052},{\"end\":53071,\"start\":53070},{\"end\":53073,\"start\":53072},{\"end\":53287,\"start\":53282},{\"end\":53299,\"start\":53298},{\"end\":53303,\"start\":53300}]", "bib_author_last_name": "[{\"end\":37976,\"start\":37972},{\"end\":38231,\"start\":38226},{\"end\":38248,\"start\":38243},{\"end\":38264,\"start\":38259},{\"end\":38268,\"start\":38266},{\"end\":38611,\"start\":38606},{\"end\":38623,\"start\":38618},{\"end\":38631,\"start\":38625},{\"end\":38642,\"start\":38635},{\"end\":38848,\"start\":38840},{\"end\":39063,\"start\":39055},{\"end\":39073,\"start\":39065},{\"end\":39082,\"start\":39075},{\"end\":39091,\"start\":39084},{\"end\":39101,\"start\":39093},{\"end\":39110,\"start\":39103},{\"end\":39118,\"start\":39112},{\"end\":39127,\"start\":39120},{\"end\":39135,\"start\":39129},{\"end\":39147,\"start\":39137},{\"end\":39158,\"start\":39149},{\"end\":39173,\"start\":39167},{\"end\":39189,\"start\":39183},{\"end\":39203,\"start\":39197},{\"end\":39747,\"start\":39739},{\"end\":39762,\"start\":39756},{\"end\":40129,\"start\":40120},{\"end\":40149,\"start\":40142},{\"end\":40540,\"start\":40535},{\"end\":40549,\"start\":40542},{\"end\":40559,\"start\":40551},{\"end\":40573,\"start\":40568},{\"end\":40586,\"start\":40580},{\"end\":40899,\"start\":40894},{\"end\":40913,\"start\":40910},{\"end\":41122,\"start\":41115},{\"end\":41367,\"start\":41360},{\"end\":41374,\"start\":41369},{\"end\":41394,\"start\":41383},{\"end\":41401,\"start\":41396},{\"end\":41410,\"start\":41403},{\"end\":41417,\"start\":41412},{\"end\":41436,\"start\":41426},{\"end\":41848,\"start\":41842},{\"end\":41863,\"start\":41859},{\"end\":42138,\"start\":42131},{\"end\":42374,\"start\":42366},{\"end\":42385,\"start\":42376},{\"end\":42405,\"start\":42393},{\"end\":42416,\"start\":42407},{\"end\":42424,\"start\":42418},{\"end\":42440,\"start\":42434},{\"end\":42459,\"start\":42447},{\"end\":42906,\"start\":42900},{\"end\":42922,\"start\":42914},{\"end\":43311,\"start\":43302},{\"end\":43614,\"start\":43606},{\"end\":43627,\"start\":43622},{\"end\":43642,\"start\":43636},{\"end\":44053,\"start\":44045},{\"end\":44316,\"start\":44310},{\"end\":44328,\"start\":44323},{\"end\":44340,\"start\":44335},{\"end\":44650,\"start\":44645},{\"end\":44658,\"start\":44652},{\"end\":44669,\"start\":44662},{\"end\":44914,\"start\":44906},{\"end\":44928,\"start\":44922},{\"end\":45364,\"start\":45356},{\"end\":45374,\"start\":45366},{\"end\":45382,\"start\":45376},{\"end\":45397,\"start\":45390},{\"end\":45411,\"start\":45406},{\"end\":45823,\"start\":45817},{\"end\":45844,\"start\":45835},{\"end\":46225,\"start\":46219},{\"end\":46240,\"start\":46232},{\"end\":46607,\"start\":46601},{\"end\":46626,\"start\":46614},{\"end\":46647,\"start\":46638},{\"end\":47037,\"start\":47032},{\"end\":47046,\"start\":47041},{\"end\":47058,\"start\":47052},{\"end\":47071,\"start\":47062},{\"end\":47083,\"start\":47077},{\"end\":47094,\"start\":47087},{\"end\":47106,\"start\":47100},{\"end\":47390,\"start\":47385},{\"end\":47398,\"start\":47392},{\"end\":47404,\"start\":47400},{\"end\":47419,\"start\":47413},{\"end\":47436,\"start\":47429},{\"end\":47665,\"start\":47660},{\"end\":47680,\"start\":47674},{\"end\":47697,\"start\":47691},{\"end\":47926,\"start\":47918},{\"end\":47940,\"start\":47936},{\"end\":47958,\"start\":47950},{\"end\":47977,\"start\":47970},{\"end\":48277,\"start\":48275},{\"end\":48285,\"start\":48279},{\"end\":48293,\"start\":48287},{\"end\":48312,\"start\":48300},{\"end\":48327,\"start\":48322},{\"end\":48592,\"start\":48588},{\"end\":48836,\"start\":48831},{\"end\":48852,\"start\":48845},{\"end\":49093,\"start\":49089},{\"end\":49103,\"start\":49095},{\"end\":49109,\"start\":49105},{\"end\":49120,\"start\":49111},{\"end\":49128,\"start\":49122},{\"end\":49137,\"start\":49130},{\"end\":49144,\"start\":49139},{\"end\":49163,\"start\":49153},{\"end\":49173,\"start\":49169},{\"end\":49457,\"start\":49449},{\"end\":49689,\"start\":49683},{\"end\":49693,\"start\":49691},{\"end\":49922,\"start\":49916},{\"end\":49934,\"start\":49926},{\"end\":49943,\"start\":49938},{\"end\":49947,\"start\":49945},{\"end\":50279,\"start\":50270},{\"end\":50287,\"start\":50283},{\"end\":50297,\"start\":50293},{\"end\":50313,\"start\":50301},{\"end\":50327,\"start\":50317},{\"end\":50607,\"start\":50595},{\"end\":50627,\"start\":50615},{\"end\":50634,\"start\":50629},{\"end\":50644,\"start\":50638},{\"end\":50659,\"start\":50651},{\"end\":50680,\"start\":50671},{\"end\":51208,\"start\":51196},{\"end\":51227,\"start\":51217},{\"end\":51245,\"start\":51234},{\"end\":51250,\"start\":51247},{\"end\":51265,\"start\":51257},{\"end\":51286,\"start\":51277},{\"end\":51563,\"start\":51555},{\"end\":51570,\"start\":51565},{\"end\":51582,\"start\":51572},{\"end\":51590,\"start\":51584},{\"end\":51603,\"start\":51599},{\"end\":51618,\"start\":51612},{\"end\":51635,\"start\":51630},{\"end\":51895,\"start\":51883},{\"end\":51916,\"start\":51905},{\"end\":51929,\"start\":51923},{\"end\":51950,\"start\":51941},{\"end\":52214,\"start\":52210},{\"end\":52230,\"start\":52223},{\"end\":52674,\"start\":52667},{\"end\":52681,\"start\":52676},{\"end\":52697,\"start\":52691},{\"end\":52714,\"start\":52707},{\"end\":53068,\"start\":53058},{\"end\":53080,\"start\":53074},{\"end\":53296,\"start\":53288},{\"end\":53316,\"start\":53304}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":7169406},\"end\":38112,\"start\":37916},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":17693062},\"end\":38571,\"start\":38114},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":9371805},\"end\":38783,\"start\":38573},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":524106},\"end\":38999,\"start\":38785},{\"attributes\":{\"id\":\"b4\"},\"end\":39639,\"start\":39001},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":12616856},\"end\":40076,\"start\":39641},{\"attributes\":{\"id\":\"b6\"},\"end\":40468,\"start\":40078},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":17682909},\"end\":40834,\"start\":40470},{\"attributes\":{\"doi\":\"27:1-27:27\",\"id\":\"b8\",\"matched_paper_id\":961425},\"end\":41102,\"start\":40836},{\"attributes\":{\"id\":\"b9\"},\"end\":41191,\"start\":41104},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":19990980},\"end\":41763,\"start\":41193},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":5719990},\"end\":42059,\"start\":41765},{\"attributes\":{\"doi\":\"arXiv:1101.5211\",\"id\":\"b12\"},\"end\":42286,\"start\":42061},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":1690180},\"end\":42810,\"start\":42288},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":13456135},\"end\":43166,\"start\":42812},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":206775608},\"end\":43534,\"start\":43168},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":10856944},\"end\":43993,\"start\":43536},{\"attributes\":{\"id\":\"b17\"},\"end\":44301,\"start\":43995},{\"attributes\":{\"doi\":\"arXiv:1506.05163\",\"id\":\"b18\"},\"end\":44564,\"start\":44303},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":7136759},\"end\":44857,\"start\":44566},{\"attributes\":{\"id\":\"b20\"},\"end\":45312,\"start\":44859},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":7022441},\"end\":45781,\"start\":45314},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":1199444},\"end\":46151,\"start\":45783},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":5525836},\"end\":46571,\"start\":46153},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":8479149},\"end\":46967,\"start\":46573},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":41312633},\"end\":47321,\"start\":46969},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":14542261},\"end\":47638,\"start\":47323},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":1779661},\"end\":47802,\"start\":47640},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":3612445},\"end\":48229,\"start\":47804},{\"attributes\":{\"doi\":\"arXiv:1511.05493\",\"id\":\"b29\"},\"end\":48502,\"start\":48231},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":2572728},\"end\":48790,\"start\":48504},{\"attributes\":{\"id\":\"b31\"},\"end\":49023,\"start\":48792},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":9884096},\"end\":49383,\"start\":49025},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":7695457},\"end\":49624,\"start\":49385},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":8066142},\"end\":49887,\"start\":49626},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":15486265},\"end\":50234,\"start\":49889},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":206756462},\"end\":50533,\"start\":50236},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":17557614},\"end\":51156,\"start\":50535},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":1797579},\"end\":51490,\"start\":51158},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":60027311},\"end\":51860,\"start\":51492},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":1729012},\"end\":52118,\"start\":51862},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":2596211},\"end\":52558,\"start\":52120},{\"attributes\":{\"doi\":\"abs/1510.02855\",\"id\":\"b42\"},\"end\":52925,\"start\":52560},{\"attributes\":{\"id\":\"b43\"},\"end\":53260,\"start\":52927},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":207227372},\"end\":53689,\"start\":53262}]", "bib_title": "[{\"end\":37966,\"start\":37916},{\"end\":38218,\"start\":38114},{\"end\":38597,\"start\":38573},{\"end\":38824,\"start\":38785},{\"end\":39047,\"start\":39001},{\"end\":39727,\"start\":39641},{\"end\":40108,\"start\":40078},{\"end\":40528,\"start\":40470},{\"end\":40881,\"start\":40836},{\"end\":41353,\"start\":41193},{\"end\":41833,\"start\":41765},{\"end\":42356,\"start\":42288},{\"end\":42893,\"start\":42812},{\"end\":43291,\"start\":43168},{\"end\":43597,\"start\":43536},{\"end\":44635,\"start\":44566},{\"end\":44895,\"start\":44859},{\"end\":45345,\"start\":45314},{\"end\":45810,\"start\":45783},{\"end\":46212,\"start\":46153},{\"end\":46594,\"start\":46573},{\"end\":47028,\"start\":46969},{\"end\":47378,\"start\":47323},{\"end\":47653,\"start\":47640},{\"end\":47911,\"start\":47804},{\"end\":48577,\"start\":48504},{\"end\":48819,\"start\":48792},{\"end\":49083,\"start\":49025},{\"end\":49438,\"start\":49385},{\"end\":49676,\"start\":49626},{\"end\":49912,\"start\":49889},{\"end\":50266,\"start\":50236},{\"end\":50588,\"start\":50535},{\"end\":51189,\"start\":51158},{\"end\":51553,\"start\":51492},{\"end\":51875,\"start\":51862},{\"end\":52202,\"start\":52120},{\"end\":53280,\"start\":53262}]", "bib_author": "[{\"end\":37978,\"start\":37968},{\"end\":38233,\"start\":38220},{\"end\":38250,\"start\":38233},{\"end\":38266,\"start\":38250},{\"end\":38270,\"start\":38266},{\"end\":38613,\"start\":38599},{\"end\":38625,\"start\":38613},{\"end\":38633,\"start\":38625},{\"end\":38644,\"start\":38633},{\"end\":38850,\"start\":38826},{\"end\":38859,\"start\":38850},{\"end\":38866,\"start\":38859},{\"end\":39065,\"start\":39049},{\"end\":39075,\"start\":39065},{\"end\":39084,\"start\":39075},{\"end\":39093,\"start\":39084},{\"end\":39103,\"start\":39093},{\"end\":39112,\"start\":39103},{\"end\":39120,\"start\":39112},{\"end\":39129,\"start\":39120},{\"end\":39137,\"start\":39129},{\"end\":39149,\"start\":39137},{\"end\":39160,\"start\":39149},{\"end\":39175,\"start\":39160},{\"end\":39191,\"start\":39175},{\"end\":39205,\"start\":39191},{\"end\":39214,\"start\":39205},{\"end\":39749,\"start\":39729},{\"end\":39764,\"start\":39749},{\"end\":39772,\"start\":39764},{\"end\":40131,\"start\":40110},{\"end\":40151,\"start\":40131},{\"end\":40542,\"start\":40530},{\"end\":40551,\"start\":40542},{\"end\":40561,\"start\":40551},{\"end\":40575,\"start\":40561},{\"end\":40588,\"start\":40575},{\"end\":40901,\"start\":40883},{\"end\":40915,\"start\":40901},{\"end\":41124,\"start\":41106},{\"end\":41369,\"start\":41355},{\"end\":41376,\"start\":41369},{\"end\":41396,\"start\":41376},{\"end\":41403,\"start\":41396},{\"end\":41412,\"start\":41403},{\"end\":41419,\"start\":41412},{\"end\":41438,\"start\":41419},{\"end\":41447,\"start\":41438},{\"end\":41850,\"start\":41835},{\"end\":41865,\"start\":41850},{\"end\":42140,\"start\":42121},{\"end\":42376,\"start\":42358},{\"end\":42387,\"start\":42376},{\"end\":42407,\"start\":42387},{\"end\":42418,\"start\":42407},{\"end\":42426,\"start\":42418},{\"end\":42442,\"start\":42426},{\"end\":42461,\"start\":42442},{\"end\":42469,\"start\":42461},{\"end\":42478,\"start\":42469},{\"end\":42908,\"start\":42895},{\"end\":42924,\"start\":42908},{\"end\":43313,\"start\":43293},{\"end\":43616,\"start\":43599},{\"end\":43629,\"start\":43616},{\"end\":43644,\"start\":43629},{\"end\":44055,\"start\":44039},{\"end\":44318,\"start\":44303},{\"end\":44330,\"start\":44318},{\"end\":44342,\"start\":44330},{\"end\":44652,\"start\":44637},{\"end\":44660,\"start\":44652},{\"end\":44671,\"start\":44660},{\"end\":44916,\"start\":44897},{\"end\":44930,\"start\":44916},{\"end\":44942,\"start\":44930},{\"end\":45366,\"start\":45347},{\"end\":45376,\"start\":45366},{\"end\":45384,\"start\":45376},{\"end\":45399,\"start\":45384},{\"end\":45413,\"start\":45399},{\"end\":45825,\"start\":45812},{\"end\":45846,\"start\":45825},{\"end\":46227,\"start\":46214},{\"end\":46242,\"start\":46227},{\"end\":46609,\"start\":46596},{\"end\":46628,\"start\":46609},{\"end\":46649,\"start\":46628},{\"end\":47039,\"start\":47030},{\"end\":47048,\"start\":47039},{\"end\":47060,\"start\":47048},{\"end\":47073,\"start\":47060},{\"end\":47085,\"start\":47073},{\"end\":47096,\"start\":47085},{\"end\":47108,\"start\":47096},{\"end\":47392,\"start\":47380},{\"end\":47400,\"start\":47392},{\"end\":47406,\"start\":47400},{\"end\":47421,\"start\":47406},{\"end\":47438,\"start\":47421},{\"end\":47667,\"start\":47655},{\"end\":47682,\"start\":47667},{\"end\":47699,\"start\":47682},{\"end\":47928,\"start\":47913},{\"end\":47942,\"start\":47928},{\"end\":47960,\"start\":47942},{\"end\":47979,\"start\":47960},{\"end\":48279,\"start\":48269},{\"end\":48287,\"start\":48279},{\"end\":48295,\"start\":48287},{\"end\":48314,\"start\":48295},{\"end\":48329,\"start\":48314},{\"end\":48594,\"start\":48579},{\"end\":48838,\"start\":48821},{\"end\":48854,\"start\":48838},{\"end\":49095,\"start\":49085},{\"end\":49105,\"start\":49095},{\"end\":49111,\"start\":49105},{\"end\":49122,\"start\":49111},{\"end\":49130,\"start\":49122},{\"end\":49139,\"start\":49130},{\"end\":49146,\"start\":49139},{\"end\":49165,\"start\":49146},{\"end\":49175,\"start\":49165},{\"end\":49459,\"start\":49440},{\"end\":49691,\"start\":49678},{\"end\":49695,\"start\":49691},{\"end\":49924,\"start\":49914},{\"end\":49936,\"start\":49924},{\"end\":49945,\"start\":49936},{\"end\":49949,\"start\":49945},{\"end\":50281,\"start\":50268},{\"end\":50289,\"start\":50281},{\"end\":50299,\"start\":50289},{\"end\":50315,\"start\":50299},{\"end\":50329,\"start\":50315},{\"end\":50609,\"start\":50590},{\"end\":50629,\"start\":50609},{\"end\":50636,\"start\":50629},{\"end\":50646,\"start\":50636},{\"end\":50661,\"start\":50646},{\"end\":50682,\"start\":50661},{\"end\":51210,\"start\":51191},{\"end\":51229,\"start\":51210},{\"end\":51247,\"start\":51229},{\"end\":51252,\"start\":51247},{\"end\":51267,\"start\":51252},{\"end\":51288,\"start\":51267},{\"end\":51565,\"start\":51555},{\"end\":51572,\"start\":51565},{\"end\":51584,\"start\":51572},{\"end\":51592,\"start\":51584},{\"end\":51605,\"start\":51592},{\"end\":51620,\"start\":51605},{\"end\":51637,\"start\":51620},{\"end\":51897,\"start\":51877},{\"end\":51918,\"start\":51897},{\"end\":51931,\"start\":51918},{\"end\":51952,\"start\":51931},{\"end\":52216,\"start\":52204},{\"end\":52232,\"start\":52216},{\"end\":52676,\"start\":52667},{\"end\":52683,\"start\":52676},{\"end\":52699,\"start\":52683},{\"end\":52716,\"start\":52699},{\"end\":53070,\"start\":53052},{\"end\":53082,\"start\":53070},{\"end\":53298,\"start\":53282},{\"end\":53318,\"start\":53298}]", "bib_venue": "[{\"end\":39339,\"start\":39285},{\"end\":39861,\"start\":39825},{\"end\":40290,\"start\":40229},{\"end\":43779,\"start\":43720},{\"end\":45109,\"start\":45034},{\"end\":45564,\"start\":45497},{\"end\":45983,\"start\":45923},{\"end\":46379,\"start\":46319},{\"end\":46786,\"start\":46726},{\"end\":50072,\"start\":50019},{\"end\":50869,\"start\":50784},{\"end\":52349,\"start\":52299},{\"end\":53501,\"start\":53418},{\"end\":38001,\"start\":37978},{\"end\":38307,\"start\":38270},{\"end\":38661,\"start\":38644},{\"end\":38873,\"start\":38866},{\"end\":39283,\"start\":39214},{\"end\":39823,\"start\":39772},{\"end\":40227,\"start\":40151},{\"end\":40640,\"start\":40588},{\"end\":40957,\"start\":40925},{\"end\":41459,\"start\":41447},{\"end\":41893,\"start\":41865},{\"end\":42119,\"start\":42061},{\"end\":42527,\"start\":42478},{\"end\":42973,\"start\":42924},{\"end\":43335,\"start\":43313},{\"end\":43718,\"start\":43644},{\"end\":44037,\"start\":43995},{\"end\":44410,\"start\":44358},{\"end\":44692,\"start\":44671},{\"end\":45032,\"start\":44942},{\"end\":45495,\"start\":45413},{\"end\":45921,\"start\":45846},{\"end\":46317,\"start\":46242},{\"end\":46724,\"start\":46649},{\"end\":47121,\"start\":47108},{\"end\":47461,\"start\":47438},{\"end\":47705,\"start\":47699},{\"end\":47999,\"start\":47979},{\"end\":48267,\"start\":48231},{\"end\":48633,\"start\":48594},{\"end\":48891,\"start\":48854},{\"end\":49182,\"start\":49175},{\"end\":49484,\"start\":49459},{\"end\":49742,\"start\":49695},{\"end\":50017,\"start\":49949},{\"end\":50365,\"start\":50329},{\"end\":50782,\"start\":50682},{\"end\":51307,\"start\":51288},{\"end\":51651,\"start\":51637},{\"end\":51971,\"start\":51952},{\"end\":52297,\"start\":52232},{\"end\":52665,\"start\":52560},{\"end\":53050,\"start\":52927},{\"end\":53416,\"start\":53318}]"}}}, "year": 2023, "month": 12, "day": 17}