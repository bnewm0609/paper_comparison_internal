{"id": 252991438, "updated": "2023-12-01 20:18:37.854", "metadata": {"title": "Code, quality, and process metrics in graduated and retired ASFI projects", "authors": "[{\"first\":\"\u0218tefan\",\"last\":\"St\u0103nciulescu\",\"middle\":[]},{\"first\":\"Likang\",\"last\":\"Yin\",\"middle\":[]},{\"first\":\"Vladimir\",\"last\":\"Filkov\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Recent work on open source sustainability shows that successful trajectories of projects in the Apache Software Foundation Incubator (ASFI) can be predicted early on, using a set of socio-technical measures. Because OSS projects are socio-technical systems centered around code artifacts, we hypothesize that sustainable projects may exhibit different code and process patterns than unsustainable ones, and that those patterns can grow more apparent as projects evolve over time. Here we studied the code and coding processes of over 200 ASFI projects, and found that ASFI graduated projects have different patterns of code quality and complexity than retired ones. Likewise for the coding processes \u2013 e.g., feature commits or bug-fixing commits are correlated with project graduation success. We find that minor contributors and major contributors (who contribute <5%, respectively >=95% commits) associate with graduation outcomes, implying that having also developers who contribute fewer commits are important for a project\u2019s success. This study provides evidence that OSS projects, especially nascent ones, can benefit from introspection and instrumentation using multidimensional modeling of the whole system, including code, processes, and code quality measures, and how they are interconnected over time.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/sigsoft/StanciulescuYF22", "doi": "10.1145/3540250.3549132"}}, "content": {"source": {"pdf_hash": "25fd18e1f29161352c49ad02d52e4e8ce4323d72", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "d362ab3eec0f99d322b625ab7ed3c6f79b89ded5", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/25fd18e1f29161352c49ad02d52e4e8ce4323d72.txt", "contents": "\nCode, ality, and Process Metrics in Graduated and Retired ASFI Projects\n\n\nS \nSt\u0103nciulescu sstanciulescu@ucdavis.edu \nLikang Yin lkyin@ucdavis.edu \nVladimir Filkov vfilkov@ucdavis.edu \n\nUniversity of California\nDavisUSA\n\n\nUniversity of California\nDavisUSA\n\n\nOpen Source Sustainability; Code Quality\nUniversity of California\nDavisUSA\n\nCode, ality, and Process Metrics in Graduated and Retired ASFI Projects\n10.1145/3540250.3549132ACM Reference Format: S , tefan St\u0103nciulescu, Likang Yin, and Vladimir Filkov. 2022. Code, Quality, and Process Metrics in Graduated and Retired ASFI Projects. In Proceedings of the 30th ACM Joint European Software Engineering Conference and Sympo-sium on the Foundations of Software Engineering (ESEC/FSE '22), November 14-18, 2022, Singapore, Singapore. ACM, New York, NY, USA, 12 pages.\nRecent work on open source sustainability shows that successful trajectories of projects in the Apache Software Foundation Incubator (ASFI) can be predicted early on, using a set of socio-technical measures. Because OSS projects are socio-technical systems centered around code artifacts, we hypothesize that sustainable projects may exhibit different code and process patterns than unsustainable ones, and that those patterns can grow more apparent as projects evolve over time. Here we studied the code and coding processes of over 200 ASFI projects, and found that ASFI graduated projects have different patterns of code quality and complexity than retired ones. Likewise for the coding processes -e.g., feature commits or bug-fixing commits are correlated with project graduation success. We find that minor contributors and major contributors (who contribute <5%, respectively >=95% commits) associate with graduation outcomes, implying that having also developers who contribute fewer commits are important for a project's success.This study provides evidence that OSS projects, especially nascent ones, can benefit from introspection and instrumentation using multidimensional modeling of the whole system, including code, processes, and code quality measures, and how they are interconnected over time.CCS CONCEPTS\u2022 Software and its engineering \u2192 Open source model.KEYWORDS\n\nINTRODUCTION\n\nMozilla, Chromium, and LibreOffice), and is reportedly used in 98% of enterprises 1 . The blockbuster projects notwithstanding, for many other OSS projects, especially nascent ones, becoming sustainable and later remaining on a trajectory to long-term sustainability is an ongoing issue.\n\nThe consequences of a popular OSS project getting off that trajectory can be disastrous, as recent worldwide cybersecurity incidents like log4j have demonstrated [28,44]. In response to such incidents in software security, a meeting in January 2022 at the US White House, 2 between government and private sector stakeholders, resulted in a statement recognizing OSS maintainability and sustainability as issues of national importance, and calling to action to identify \"sustainable mechanisms\" to maintain the most important OSS projects. But what are the characteristics of sustainable OSS projects, and how can they be leveraged into sustainable mechanisms for project maintenance?\n\nWe know that in spite of concentrated programmer labor, many open source projects fail and are abandoned. Coelho and Valente have studied over 100 GitHub projects and identified different reasons for OSS failure, including low number of developers involved, low engagement, and other reasons. [8]. To increase their visibility and chances of success many projects join foundations, like the Apache Software Foundation (ASF), which provide common standards and guidance in exchange for higher community uniformity. The popularity and high standards of foundation supported projects can contribute to their continued sustainability, by attracting a steady supply of programmer effort. ASF in particular serves as an example that has been successfully churning out popular and high quality projects for years. Its incubator, and the Apache Way, 3 has served many nascent projects, graduating those that demonstrated a track record toward sustainability, and retiring others.\n\nMoreover, OSS projects come in different shapes and sizes. This diversity is there from the beginning, when nascent projects are initiated, and continues throughout their life trajectory, and for some, into their eventual sustainable regime. That every project may have a different story and trajectory is in line with contingency theory and organizational management studies [14]. Recognizing this, modern software engineering research is doing away with the \"rules of thumb\", and the one-size-fits-all solutions and replacing them with deeper and more meaningful bespoke solution, where the context and the ecosystem environment are significant determinants of project sustainability [21,52]. These research efforts have benefited from the availability of large-scale repositories of project traces and developer behaviors. The most promising of them have combined multiple different types of data, including traces and communication activities, surveys and developer interviews, and used modeling at both software engineering and social and governance levels [51,52]. Recent work on open source sustainability focused both on technical factors [36,37,41] and social factors [17,47,49,52], and has demonstrated the benefits of using socio-technical networks to forecast project graduation success in the Apache Software Foundation Incubator (ASFI) [21,52]. Those studies found that different patterns of social interactions and different socio-technical behavior mediate differential success outcomes, in particular with respect to sustainability metrics.\n\nWhere the evidence is scant, however, is where we find the next natural research direction: to connect sustainability to the way the software artifacts are created, especially the code. It stands to reason that because code is the product of coding, a social process, and the process of coding is interleaved with activities of the socio-technical system representing the project, a connection, even if indirect, exists among them. In fact, since the initial postulation of Conway's law [9], it has been amply established that the software project sociotechnical structure in commercial projects is associated with the organization [33] and quality [6] of the software artifacts created.\n\nA Motivating Example. We take a look at two different yet similar projects from ASF. Apache Celix is a framework to develop modular software applications. It graduated from the incubator after almost four years, while having only four code contributors and a bit over 300 commits. Its approach was to have a consistent longterm activity, without high intensity development periods. On the other spectrum is SpamAssassin, a well-known anti-spam platform developed for more than 20 years. SpamAssassin was highly active during its incubation period, had many contributors, and averaged over 150 commits per month. It graduated much faster from the incubator, likely also due to its previous well established codebase and community. Both projects were and still are successful, both graduated from the incubator, but had very different trajectories both at code level and at process level.\n\nOur contributions. Guided by the above, and the prior work showing that the notion of OSS sustainability, in the ASF Incubator sense of a trajectory leading to self-reliance has strong connections to a project's socio-technical structure, we hypothesize that:\n\nCode, the coding process, and project quality (e.g., graduation in ASFI) are associated with project sustainability in a way that can be quantitatively measured.\n\nThe following questions, then, arise naturally: is the code and the development process in sustainable projects perceptibly different than in those that are not sustainable? Is the code quality in the former any different than in the latter? To effectively answer these questions one would need guiding theories connecting organizational behavior to outcomes, and data of code, process, and quality, together with data of project sustainability outcomes.\n\nHere, we analyze a dataset of source code and digital traces from the repositories of 200+ ASFI projects, that have been judged to be on the path to sustainability, i.e., retired or not. We extracted software metrics for code, process, and quality, and studied the metricspace differences between graduated and retired ASFI projects at individual metric level, metrics over time, and in models of sustainability. We found the following:\n\n\u2022 Graduated and retired projects are different in their code (graduated have less code per author, and less directories per author), processes (graduated commit more and delete more), and quality (graduated have more complex code and more test code); \u2022 Graduated and retired projects follow different trajectories once they enter the incubator. Some projects are somewhat better equipped to graduate fast, while others strive for a more constant but less commit-heavy activity. Finally, retired projects are more likely to have a higher burden per contributor due to having fewer contributors, an increasing codebase size, and being less likely to attract new contributors; \u2022 An increase in the following metrics increases the odds of graduation: lines of code, major and minor contributors, features commits, corrective commits, medium complexity (11)(12)(13)(14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25) functions, and very large functions. On the flip side, the increase in the following metrics decreases the odds: top level directories, avg. files modified per commit, very large file sizes, and code duplication percentage. This paper is a first step showing that it is possible to associate sustainability with code, quality and process metrics. Our motivation goes beyond ASFI as many more projects fail outside of ASFI, therefore, maintaining projects with large code bases may be more pertinent to them. Our replication package is available on Zenodo. 4 \n\n\nBACKGROUND AND THEORY\n\nIn this section, we summarize the underlying mechanism of the Apache Software Foundation Incubator, the related work on OSS sustainability, and the concepts on code complexity and quality measures. We also introduce the relevant contingency theory.\n\n\nApache Software Foundation Incubator\n\nApache Software Foundation Incubator (ASFI), 5 is a project incubator that provides a deterministic path for in-the-wild OSS projects to attract highly skilled developers, regulate working behaviors, and further joining Apache community. During the incubation, the projects' long-term goal is to become self-sustainable, i.e., the project's community can self-govern itself to sustain its activity and productivity over time. To help incubating projects achieve such level of sustainability, ASF, different from most OSS foundations, provides each incubating project with in-depth mentorship from senior ASF committers. The incubation process often takes several months, and when the project's community is ready for exiting the incubator, all contributors have the obligations to vote for either graduation and retirement; if the decision from the community is positive, then the ASF committee will additionally evaluate the projects' progress on contributor diversity, attractiveness to new contributors, and community building. If all goes well, the project will be graduated, otherwise retired. There is a tenet in Apache Community, and that is 'Community Over Code'. The belief is that if good care is taken of the community, good code will emerge from it. Based on such belief, projects in ASFI are encouraged to build a diverse and meritocratic-based community, though there is little explicit emphasis on code quality or new features to be developed. Previous work has found that there are strong relationships between code quality and project's progress [1,48].\n\n\nOSS Success & Sustainability vis-a-vis Code\n\nOSS success has been studied from various angles, though there is still no universal agreement on the definition of success in OSS projects [10,25,40]. Some researchers use metrics from the user's perspective to measure OSS success, e.g., project downloads, usage, popularity, licenses [7,31,43]. Others use project-centered metrics, e.g., the number of issues, commit frequency, active developers [25].\n\nCoelho et al. surveyed 118 developers and found that projects fail for several reasons [8]: low interest from developers, low code maintainability, and newer projects overtaking the original projects. Furthermore, they discover that failed projects are less likely to follow best practices (e.g., provide contributing guidelines), and failed projects are more similar to less popular projects. A codebase with high complexity and many code dependencies requires more efforts to maintain or to develop new features. Code complexity can also increase due to low code ownership [6], developer turnover or accepting external contributors' code [16]. Sachs used developers' comments to predict a project's success [39] by analyzing the interactions between individuals as a group, based on SYMLOG, a body of social psychology theories [2]. They find that developers' personas do not increase the accuracy of traditional metrics-based methods for predicting a project's success.\n\nCode quality is an important non-functional requirement in a project's lifecycle. Nagappan et al. show that organizational metrics fare better than traditional metrics in predicting faults in OSS projects [33]. Other research has shown that code and process metrics can be useful for detecting code smells [29], design issues [20,32], predicting defects [36] or finding vulnerabilities [42], which can be useful in understanding a project's evolution and potential issues.\n\nAlthough related, OSS sustainability and OSS success are two different concepts. One project can be successful and not sustainable and the most recent log4j vulnerability [28] is a convincing evidence: a well-known and widely used OSS project, but barely maintained by a group of only four non-paid developers. Xia et al. used GitHub related metrics (pull requests, issues, etc) to predict the health of a project [50]. Compared to previous work, they achieve high accuracy (<10% error rate) by tuning their models and parameters, and show that they can accurately predict many health indicators for the next 1, 3, 6, and 12 months. More recently, Yin et al. showed that socio-technical factors (mostly social and technical networks) can be used to forecast the incubation sustainability outcome for ASF incubator projects [52]. They find that a higher number of nodes in the social networks is positively correlated with graduation, whereas the number of nodes in the technical network (code and developers' coding behavior) is negatively associated with graduation for minor projects. Ghapanchi studied project sustainability over time based on two metrics: defect rate velocity and feature enhancement rate [18]. They found that a higher bug-fixing and feature enhancement rate, together with an increase in the frequency of releases helps with long term sustainability. In comparison, we use comprehensive source code and coding process analysis, allowing us to be broader in our analysis by including code quality metrics. Izquierdo et al. studied how OSS projects evolve in the Eclipse incubator [19]. They use product and code related metrics to gauge their maturity. They find that modeling projects that went through the incubator remain stable throughout their lifecycle, indicating that they do not grow and are not able to attract new contributors. As the end result of OSS software is producing useful software, we expect that project sustainability is associated with its code characteristics. However, to the best of our knowledge, there is no study articulating the association between project sustainability and code, process, and quality metrics.\n\n\nContingency Theory\n\nASFI projects, regardless of size, naturally form an organization with internal rules, special regulations, and exclusive person power. Structural contingency theory argues that organizations cannot be fully effective without the necessary structural support [14]. Moreover, there is no single organizational structure that is best fitted for every organization [46]. Thus, to an organization, the most effective structure is contingent upon its internal and external context. According to Ruekert et. al. [38], organizational performance is a mix of many factors, including: structure, people, technology, strategy and culture. Organizations with better fit will achieve higher levels of performance. In a nutshell, the structural contingency theory claims that 'one size does not fit all', and that effective performance depends on many factors [53]. In the specific case of ASFI projects, the context of a project is multi-dimensional, including communications among contributors, seniority of the contributors, and programming languages being used to build the project. Therefore, it is likely that the association between code quality and sustainability is contingent upon those context variables.\n\n\nRESEARCH QUESTIONS\n\nIn this paper we build on the previous work of Yin et al. [52] and study metrics complementary to their socio-technical ones. Our focus is on code, process, and quality metrics to explore how writing code differs across ASFI projects. We hypothesize that retired projects will exhibit different code complexity, process patterns, and quality measures than graduated projects.\n\nTo have actionable insights into projects evolution and sustainability, we consider them in a multi-dimensional space of our metrics. Understanding projects in such a space can give us a glimpse into projects' similarities and differences. Even if projects can be similar in terms of codebase size (measured by the number of files) and project size (measured by the number of active developers), we expect that projects can differ in many ways: they may differ in some process related aspects such as commit frequency, change size, commit types, or the ability of attracting new contributors. As predicted by the contingency theory, projects that successfully progressed to be self-sustainable can go through different trajectory under different context, and the same holds for retired projects that they fail to maintain sustainability due to various context. Therefore, Repositories on GitHub  in such a complex multi-dimensional space, it is of importance to demonstrate that there is sufficient variance to capture differences and similarities between graduated projects and retired projects. Thus, we ask: RQ 1 : How do graduated and retired projects differ across our code, process, and quality metrics? How are the metrics related pairwise?\n\nNext we turn to the temporal evolution of code, process, and quality metrics. In a socio-technical system, feedback from one side to another side takes time, especially in the circumstance of the OSS project where people can work from different time zones. As predicted by the contingency theory, the context of projects is of importance to the organization, and the context is changing over time. Therefore, code, process, and quality metrics' evolution are ideally to be studied temporally, which has been shown to perform better than static metrics for predicting buggy code [36]. We ask: RQ 2 : Are project trajectories of graduated and retired ASFI projects different, along our code, process, and quality metrics?\n\nFinally, we put the metrics together in a model of project graduation. This question aims at exploring how well can our code metrics associate with graduation from the incubator. We expect the association between quality and sustainability can be identified while controlling the context, thus we ask: RQ 3 : What are the code, process, and quality metrics determinants of whether a project is graduated versus retired? Are they different for different programming languages?\n\n\nDATA AND METHODS\n\nIn this section, we present the data collection process and the methods used in the study. Figure 1 presents the overall process.\n\n\nData Collection\n\nWe use the Apache Software Foundation podlings.xml file, 6 for a complete project list. It contains the project meta-data: project name, incubation start and end date, and current status: graduated, retired, or incubating. In total, the list contained 328 projects, out of which, 236 have a Git repository on GitHub. The rest of the projects are either SVN based or we were not able to locate their repository, thus we exclude them. Finally, we clone all 236 Git repositories from 6 URL to the podlings.xml file, downloaded June 2021 Apache's GitHub organization. 7 To collect the metrics from the Git repositories and the mailing archives, we built a tool in Rust that extracts data from repositories and downloads the mailing archives. It then launches two other popular tools: tokei for extracting code size metrics (files, blanks, lines, code, comments), 8 and Sokrates for calculating code quality metrics, 9 and collects their output. For each Git repository, we extract all commits and organize them into monthly batches, called incubation months, based on their date. A project's incubation months are computed for each month from their entry into the incubator (start date) and until they exit the incubator (end date). Note that the first and last month may have less data. This allows us to more easily align with the mailing archives which are stored per calendar month.\n\nWe analyze the commits and extract process metrics for each incubation month. To collect code metrics and code quality metrics, we check out the repository at the last commit in that respective incubation month and run the tools on the source code. Our Rust tool computes the number of directories and root level directories and extracts process metrics. We use tokei to extract code size metrics. tokei's output provides these metrics for each programming language that it finds in the project, which allows us to also identify and record the dominant programming language, i.e. the one that has the most lines of code for each incubation month. To smooth the data for smaller projects, if in a particular incubation month there have been no commits, we reuse the code metrics values from the previous month. If there has been no activity in the first incubation month, we initialize all code and process metrics to 0.\n\nFor the classification of commits into change types, we use the classifier from [15], and use the available generated model into which we feed all the commits' messages. 10 The output is a list with all commits and their classification label: feature, corrective (fixing a bug), perfective (improving the code), non-functional (not related to source code, e.g., documentation), or unknown (unsure how to classify). We aggregate this as a sum of commits that have the same label, for each incubation month and project.\n\nTo measure differences in their development process, we compute for each incubation month a selection of several popular metrics [6,19,20,36] from the project's Git repository: number of commits (excluding merge commits), average commits per developer, number of commit active days, files added, files deleted, files modified, average number of files modified per commit, churn (added + deleted lines), minor contributors (those that provide less than 5% of commits), major contributors (those that provide 95% or more of commits), new contributors (those that are first time commit contributors), number of emails. For code metrics, we record the number of files, lines, comments, blanks, and code (sloc), project root level directories, and total number of directories.\n\nFor the emails, we download the dev mailing list archives for each project and each incubation month. 11 We focus on direct and explicit communication between developers, therefore we count the number of emails that are not JIRA-related emails, but we keep those JIRA emails containing \"Commented\" in the subject. We ignore other kind of JIRA emails (e.g., new issue, issue resolved, issue assigned, etc.). We then extract a set of the developers' emails that sent or replied to an email (emails_dev), and the number of emails. In a month with no emails, these metrics have a value of 0.\n\nWe use Sokrates to extract a number of metrics related to functions, file sizes, McCabe complexity metrics at function level, code duplication, and tests for each incubation month. While Sokrates is not the most obvious choice, due to the fact that our dataset exhibits a large number of programming languages, Sokrates is, to the best of our knowledge, one of the few tools that can perform such widespread source code analyses.\n\nOur datasets, R scripts, and tools are available on Zenodo. 12 \n\n\nModels\n\nTo analyze how graduation is associated with code, processes, and code quality, we use Generalized Linear Regression (glm), and Generalized Mixed Effect Regression (glmer) models [4]. We chose the latter to account for potential random effects introduced by different programming languages. We use R and the glmer function from the lme4 package [5] to build the models. We first clean up the data by removing a number of projects that have either no activity or have incomplete data. From the total 236 Git repositories, we eliminate 18 projects, resulting in 5365 observations across 184 graduated and 34 retired projects. We further remove the top 3% of the outliers, resulting in 5245 observations. For each incubation month we record the most prevalent programming language in terms of code, and we use that as a random effect. We build three regression models: a) the base model, b) the base plus the process metrics, c) and the base plus process metrics plus code quality metrics. The goal is to observe how the addition of process and code quality metrics associate with predicting the outcome -graduation or retirement. We build these three models for two datasets: a glm model using only the Java-based projects (which are the majority of the projects in the dataset), and a glmer model that includes all the projects and uses the programming language as a random effect. Recall that we are also interested in understanding if programming languages play a role in predicting the outcome. Next, we check for multicolinearity using the Variance Influence Factor (VIF) using the check_multicolinearity function from the performance R package [24]. Values below 5 indicate that multicolinearity is not significant. We use two pseudo R 2 values to report the model's goodness of fit, using the r2_nakagawa function from the same performance R package. The marginal R 2 represents the variance solely described by the fixed effects, and the conditional R 2 represents the variance introduced by both fixed and random effects in the model [34]. For creating the results \n\n\nVariables of Interest\n\nFor modeling, we use 23 independent variables representative of software metrics split into three categories: \u00a71 code: lines of source code without comments (SLOC), number of directories, number of top level directories.\n\n\u00a72 process: major contributors, minor contributors, new contributors -the number of authors that have not contributed before the current incubation month, files added -the number of files added in this incubation month, files deleted -the number of files deleted in this incubation month, avg. files modified per commit -the average number of files that were modified in a commit -it excludes files that were added or deleted, only those that existed and were modified, active days -the number of days in an incubation month that had at least one commit, number of emails, corrective -the number of commits that fixed a bug or an issue, features -the number of commits that added some feature, perfective -the number of commits that enhanced (e.g., performance) the code, non functionalthe number of commits that were not code related, for example adding documentation, and incubation month.\n\n\u00a73 quality: test code SLOC -this provides a proxy for how mature a project is and its quality assurance, the ratio between test SLOC and SLOC as a percentage -a small value represents a project with few tests and weak code coverage, number of functions that have a medium risk complexity (McCabe index between 11-25) -functions should have a small cyclomatic complexity in order to be more easily maintained and tested, number of functions that have a very high risk complexity (McCabe index >50) -very complex functions are indicators of bugs hotspots due to being very difficult to test, number of very large files (>1000 SLOC) -large files have been shown to be more likely to contain faults [35], require more efforts from developers to understand and manage, and make the code less readable, number of very large functions (>100 SLOC) -large functions require extra effort to maintain and make code less readable [30], number of lines of code for the most complex function.\n\n\nRESULTS\n\nIn this section, we present the analysis results and summarise our findings for each research question.\n\n5.1 RQ 1 : How do graduated and retired projects differ across our code, process, and quality metrics? How are the metrics related pairwise?\n\nOur dataset consists of 5365 monthly snapshots from 218 projects (across all their incubation months). Among the 218 projects, 184 are graduated and 34 are retired projects. Table 1 shows the descriptive statistics of our data across all 23 metrics. In contrast to Yin et al. [52], here we focus on the properties of the code, process, and code quality metrics. Graduated and retired projects distinguish themselves in several ways. First, one requirement for graduating from the incubator is to attract new contributors to the projects. Our data indicates that retired projects are on average much less likely to attract new contributors during their incubation period, and have fewer main contributors. Second, projects have different code and process characteristics. Graduated projects have more SLOC, but retired have more SLOC per contributor. Similarly for directories. And while retired projects are smaller in size, they modify on average 5.2 files per commit. Graduated projects modify on average 5.7 files per commit, but they are much larger and have more files. Thus, we can argue that retired projects have a different committing style, a consequence, possibly, of less stringent rules on how to make changes. Furthermore, retired projects seem to delete significantly fewer files. Third, there are differences from a code quality perspective. Graduated projects seem to be more complex, having more large files (>1000 LOC), and almost twice the average of the number of very large functions (>100 LOC) when compared to retired projects. Perhaps in line with that, graduated projects exhibit more test code than retired ones. RQ 1 Summary: Graduated and retired projects differentiate themselves through their code (graduated have less code per author, and less directories per author), processes (graduated commit more and delete more), and quality (graduated have more complex code and more test code).\n\n\nRQ 2 :\n\nAre project trajectories of graduated and retired ASFI projects different, along our code, process, and quality metrics?\n\nWe find that the average incubation time over all projects is 18 months, with the average for graduated projects being 16 months, and for retired projects 24 months. Retired projects stayed on average 8 months longer in the incubator than graduated projects. We observe that a number of projects that stay long in the incubator, still manage to graduate -28 graduated projects stayed 36 or more months in the incubator and still graduated, whereas 16 of the 34 retired projects stayed at least 36 months in the incubator. A feasible reason for this difference is that on average, retired projects may need longer time to develop, and get the appropriate accommodation for that. Yin et al. [52] found that while the shorter time spent in incubation is a characteristic of many graduated projects, that by itself is not a very good predictor of graduation. On the other hand, projects that stay shorter in the incubator seem to do so because they are better equipped to graduate from the start (see Fig. 3, right plot), and even increase their average  Left plot shows projects that were in the incubator for more than 24 months and right plot for projects that spent less 24 months or less in the incubator. For readability reasons, we show only the first 24 months of data.\n\nnumber of commits per developer in the first few incubation months. Figure 2 shows the number of active days in each incubation month. Retired projects start with only five days of commit activity a month (for projects incubating <= 24 months), and that decreases towards no activity after 20 months of incubation. Similarly, retired projects in projects that are in the incubator for at least 24 months, have a linear decrease of activity, reaching less than four active days around month 22 in the incubator, whereas graduated projects tend to average 8-10 active days per incubation month for longer period of times. It is clear that graduated projects have a more steady commit-activity throughout the incubation month, which might be one of the main factors for a more successful long-term project development. Along commit activity, we want to understand what kind of contributors contribute to a project. We define three types of contributors: 1) major contributors, those that commit 95% or more of the total commits; 2) minor contributors, those that contribute less than 5% of the total commits, and 3) new contributors, those that are first time contributors (have not contributed before). Figure  4 shows that graduated projects are capable of attracting a few new contributors, whereas retired projects are less likely to do so. Analyzing the minor/major contributors throughout the incubation period, we observe a linear increase for both minor and major contributors in graduated projects, and the opposite in retired projects. Graduated projects are likely more capable to recruit new developers and retain existing ones (indicated also by the new contributors metric). Interestingly, minor contributors seem to be more prevalent in graduated projects than in retired projects. From a sustainability perspective, minor contributors could become committers and maintainers of the project. Thus, projects and maintainers should consider attracting and providing guidance to minor contributors as a way of expanding the project's community.\n\nNext, we focus on understanding the relationship between developers and files. We compute the ratio between the number of files and the number of contributors, which provides us with a measure of development effort. Figure 5 shows two plots: on the left, we see the ratio between the number of files and number of contributors, whereas on the right we see evolution of the codebase size in terms of SLOC. We observe that retired projects' size increases in the first 18 months of the incubation, and the ratio of files/contributors increases linearly as well. That means that while retired projects' codebase is increasing, the number of contributors decreases or stays the same. In other words, retired projects do not seem to be able to sustain their development efforts due to fewer contributors.\n\nIn the case of graduated projects, we see the ratio of files/developer also increasing, but being quite lower than those of retired projects. This indicates that graduated projects, while bigger in size, are more capable of attracting or retaining developers to cope with the increase of the codebase's size. Projects evolve differently from a process perspective also, leading to different outcomes. Graduated projects exhibit a higher number of commits per developer, have more commit active days throughout the incubation, recruit more new contributors, and are able to increase and sustain their activity in the first few months in the incubator. They also communicate more via emails. These projects have a different approach to working once they enter the incubator. In projects that incubate for a shorter period of time, retired projects are less active from the start, and become inactive (commit-wise) towards month 22 of the incubation period. Projects that are able to have more commit activity throughout each month, are more able to keep ongoing the development. Previous work by Yin et al. [52] showed that the number of commits and the developer network are correlated with graduation. We further find that not only the number of commits is relevant, but also how often and what kind of changes happen. Projects should also keep an eye on their code quality and complexity, in addition to grooming long-term and short-term contributors.\n\nCase Study. From the data we collected, we posit that there are different incubation strategies. Some projects have a a short but high intensity development period, and therefore they graduate fast. For example, SpamAssassin spent 7 months in the incubator and had an average of 173 commits per month from 5.8 contributors. 13 Another example is Spark which spent 9 months in the incubator averaging 272 commits per month from 35 contributors. 14 These were clearly under intense and sustained development.\n\nOther projects strive to keep an ongoing activity despite the fewer commits and email exchanges. Apache Celix is a framework to develop modular software applications. 15 The project incubated for 45 months, had four contributors and 308 commits. However, for 39 months there was some activity in the project, either via commits or via emails. The project is still active and under development after its graduation. An opposite example is Weex, 16 a framework for building Mobile cross-platform high performance UIs. Weex spent 55 months in the incubator and had a very high commit activity for the first 12 months (>3500 commits). From month 39 to month 55, there was almost no activity (only 35 commits in total) and developers faced issues in graduating, which ultimately meant that the project had to be retired. After its retirement, it moved under alibaba's open source organization, and continued to be developed. These projects forged their own path and evolved in different ways. As such, there is no exact one way a project may go; instead they need to constantly adapt and adjust based on their current processes, code, and other socio-technical factors. RQ 2 Summary: Graduated and retired projects follow different trajectories once they enter the incubator. Some projects are better equipped to graduate fast, while others strive for a more constant but less commit-heavy activity. Finally, retired projects are more likely to have a higher burden per contributor due to having fewer contributors, an increasing codebase size, and being less likely to attract new contributors.\n\n\nRQ 3 :\n\nWhat are the code, process, and quality metrics determinants of whether a project is graduated versus retired? Are they different for different programming languages?\n\nIn the previous RQs we examined metrics pairwise and in relationship to ASF sustainability. To study the relationship between sustainability and code quality, in the presence of multiple other metrics, we use generalized linear and mixed effects logistic models. We have 25 different programming languages in our data set, with a large spread of the number of projects using a specific language, from 160 projects in Java to 1 project using CVX. As Java is the predominant programming language used by ASF incubator projects, we first provide insights from projects that use Java as the primary programming language, and then we compare the models built on only Java projects to models on all projects programming languages in the ASF incubator. In the following we present those two studies. Java Projects. The results of the first study, on all Java projects are shown in Table 2. The three regression models are predicting the binary outcome of graduation or retirement, the first using base (code) metrics, the second adds process metrics to the base, and the third is the full model, with all code, process, and quality metrics. This allows us to understand the contribution of the different metrics groups to the efficacy of the models. We will use the full model for explaining the details.\n\nIn code metrics, as expected, more SLOC increases the odds of graduation by 15%. The top level directory number is interesting as it is significant and negative, implying 21% lower odds. This is consistent with the notion that less complex code is easier to maintain and thus needs fewer people. As a control, having a higher value for the incubation month decreases graduation substantially (41% lower odds), as discussed earlier in RQ2.\n\nIn process metrics, major contributors is positively and significantly associated with graduation, yielding 84% increased odds; that is, having more major contributors that contribute 95% or more of the total commits, the more likely it is to graduate (i.e., to become ASF sustainable). The effect of minor contributors is small (5% increase in odds) but significant. Prior work has shown they are valuable. They often pick low hanging fruit issues to fix, or work on the code for their own needs. In the long term, some of those minor contributors are given commit access and the possibility to join the project, enabling a project's long-term sustainability.\n\nCode usually evolves through different kind of changes, including adding files, removing files, fixing bugs, adding new features, creating documentation or performing re-factorings. We use the number of added files and the number of deleted files to simulate the dynamics of the code evolution from a file organization perspective. The model shows that there is a small negative effect (3% decrease in odds) and borderline significant for projects that delete more files during their incubation period. Moreover, we find that the average number of files modified per commit has a significant negative effect on graduation, lowering the odds by 6%. Ideal changes should of course be small and well documented in a commit. When the code is complex with many dependencies, as is the case with graduated projects on average, it is likely that more files would have to be modified per commit. This could be attributed to code dependencies, less scrutiny over how to commit changes, or developers experimenting more with the code.\n\nWe also find that two types of commit changes are associated with graduation: corrective commits, which fix bugs and issues, and feature commits, which that add new features, have a significant positive effect on graduation, each adding 7-8% to the odds.\n\nIn code quality metrics, first, having a higher number of files with more than 1KLOC has a sizeable negative effect (19% drop in the odds) associated with graduation. One possible reason for this is the fact that large files are more difficult to maintain and test, and to collaborate on. On the other hand, projects that have a higher number of functions of very large size (>100LOC) are more likely to be self-sustainable, by almost the same odds difference. This is somewhat surprising and merits further study. Given the verbosity of the Java language, we would expect that simply having more functions (modularity) of reasonable sizes is important, from the maintenance, program comprehension (readability), and testing perspective. While sometimes code clones are not considered harmful [22], many other times cloned code leads to more maintenance effort due to the need of fixing the code in multiple places. The model shows that the more duplicated code a project has, the less likely it is to graduate. Finally, and surprisingly test LOC/code LOC does not appear to be significant for sustainability.\n\nAll Projects. We performed a second study on all projects after excluding nine projects that solely use a certain language (i.e., we eliminate projects whose dominant coding language is only used by them). There we used a generalized linear mixed effect model, with programming language as the random effect. The results are  Table 3. The random effect assumes a large portion of the variance in the full model (84.4% conditional vs. 15.4% marginal) as expected due to the oversized importance of programming language choice on all aspect of code, process, and quality. We note that the results are qualitatively very similar as the results on only Java projects. This is not unexpected since 76% of the projects are Java projects, and thus the properties of the Java projects carry over. Still, the remaining projects do show significant congruence with Table 2. It did occur to us to contrast our metrics between functional and imperative languages. Unfortunately we did not have enough examples of projects using the former in order to fit a model successfully.\n\nRQ 3 Summary: We find that an increase in the following increases the odds of graduation: lines of code, major and minor contributors, features commits, corrective commits, medium complexity (11)(12)(13)(14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25) functions, and very large functions. On the flip side, the increase in the following decreases the odds: top level directories, avg. files modified per commit, very large file sizes, and code duplication percentage.\n\n\nDISCUSSION\n\nWe start with a caveat about regression and causality. When models are well fitted and confounds are accounted for, multiple regression can quantify directional effects (e.g., variable x on variable y) and thus, methodologically go beyond mere symmetric correlation. Hence the standard language used: \"the effect of changing variable x is that variable y will change\", etc. However, this is not to imply any strict causality relationship, temporal or otherwise. Moreover, quasi-experimental studies like ours that do not rely on randomized group assignment have in general lower discovery power than well designed randomized trials [27].\n\nWe found that the coefficients of some code quality and process measures are consistent across different projects, while some others are not. E.g., the number of major contributors are positively associated with project sustainability. It suggests that increased number of champions in technical contributions is a signal for project sustainability. As for the design implication, we suggest that OSS maintainers should help create a positive feedback loop for all contributors, giving more ownership and responsibility, while at the same time offering the flexibility to choose what features to work on, and contribute to the project's long-term vision [12]. We also find that the number of corrective commits are positive across projects, suggesting that the presence of explicit corrective message contained in commits may aid project sustainability. Such result suggests corrective messages do not make the project look bad, they may instead signal a green light on the sustainability of the project: corrections are encouraged. Moreover, we found the average file modified per commit, among all process measures, has the most negative effect on project's sustainability. Along with the evidence that the number of files that contain more than 1000 LOC, and the function complexity being negative, we suggest that a commit should only contain the files that are required for that specific change, and to consider modularizing and refactoring large files and complex functions to reduce maintenance and development costs [3,11,35]. The fact that code duplication is negatively associated with sustainability makes sense: duplicated code is a pain to maintain and gives rise to technical debt [13,26,45]. Checking for duplicated code and specifically assigning resources to refactor such code clones should be prioritized at different stages throughout the project's evolution. If possible at all, avoiding the practice is good advice that will lower the maintenance efforts later on.\n\nWe were surprised to find that the number of very large functions increases the odds of graduation as very large functions are difficult to maintain. This can benefit from further study.\n\n\nTHREATS TO VALIDITY\n\nInternal Validity. Collecting code quality data on projects involving a large number of different programming languages is difficult. Although we found no evidence of this in spite of spot checking, one internal threat to our study remains: that the Sokrates tool may not correctly collect and compute different metrics (e.g., complexity metrics are not computed uniformly across programming languages, due to the intricate differences between them). Likewise, the commit classifier might not be as accurate on our commit dataset as in the original study [15], even though it was trained on more than 5,000 commits yielding good accuracy. This is acceptable for our scope, as finding the best commit classifier is out of scope for this work. In our modeling we use the programming language as a random effect to control for any effects introduced by the programming language. While most of the projects have sufficient recorded data (e.g., commits), some repositories had no history (e.g., Guacamole), were an umbrella project for several projects (MyFaces), or had too few observations to make any meaningful conclusions. Thus, we excluded such projects and also eliminated those projects that have the majority of code written in Lua, Go, Erlang, CSS, C#, Kotlin, Autoconf due to being too few projects that use these languages, and thus having very few observations. External validity. We carefully validated our hypotheses and answered our research questions based on the ASF Incubator data. Generalization beyond ASF projects might be difficult, due to the specific frame in which ASF incubating projects evolve. Any further generalization to projects beyond ASF must be made with care. Our aim was to provide evidence that these systems require complex analysis involving multiple perspectives, including the source code and the processes.\n\n\nCONCLUSION\n\nMotivated by prior work on OSS success, health, and sustainability, and driven by contingency theory, we hypothesized that there is a link between project graduation and code, process, and quality metrics of software in ASF incubator projects. In this paper, we presented the first study known to us associating code, process and quality with OSS sustainability. We find that while retired projects have a slightly higher cyclomatic complexity when adjusted for project size, their retirement does not seem to be associated with bugs, complexity or technical debt. We find that both major contributors and minor contributors (though less significant) play a positive role in increasing the sustainability of OSS projects. Among the process and quality factors, the file size, function size, function complexity seem to be most negative, suggesting keeping workflow simple and concise is of importance to sustainability. We consolidate those findings into takeaways for practitioners. Thinking ahead, we hope to generalize our model to projects outside Apache Software Foundation and develop tools for instrumenting general GitHub projects to help them on the trajectories to sustainability.\n\nFigure 1 :\n1Diagram showing the overall process for collecting and analyzing the data. GLM: generalized linear regression model, GLMM: generalized linear mixed-effects regression model.\n\n\nIf a project enters the incubator on 2006-10-15 and leaves the incubator on 2007-01-26, then the first incubation month runs from 2006-10-15 until 2006-10-31, the second incubation month runs from 2006-11-01 until 2006-11-30, and so on, until the incubation month #4 which runs from 2007-01-01 until 2007-01-26.\n\nFigure 2 :\n2The number of commit-wise active days per incubation month. An active day is a day that had at least one commit. On the left are projects incubating for 24 months or more, on the right projects that spent 24 months or less in the incubator. For readability reasons, we show only the first 24 months of data.\n\nFigure 3 :\n3Average number of commits per developer metric.\n\nFigure 4 :\n4Major, minor, and new contributors (log-scale) in graduated and retired projects.\n\nFigure 5 :\n5Plots showing the ratio between files and number of developers (left) and the evolution of the code size (right) for all 218 projects.\n\n\ntable, we use the SjPlot package [23] to create an HTML table, which we then convert to Latex. The table shows the dependent variables (Predictors), the Odds-Ratio (a value >1 has a positive effect, and <1 11 http://mail-archives.apache.org/mod_mbox/ 12 https://zenodo.org/record/6374071has a negative effect on graduation) and P values. The probability definition of odds-ration is: =_ \n1 + \n_ \n. For example, \n\nan odds-ratio of 1.8 means the probability of success is 64% higher \nwith a unit increase in the selected variable. \n\n\n\nTable 1 :\n1Descriptive statistics of graduated projects and retired projects. The mean, median and st. deviation values are computed over all incubation months. Authors are developers who made changes, though they did not necessarily commit those changes.184 graduated projects \n34 retired projects \nmean \nmedian \nst.dev \nmean \nmedian \nst.dev \nSLOC \n123431.66 66219.00 200938.97 89866.66 37513.00 145736.58 \nCommits \n50.36 \n22.00 \n90.96 \n11.39 \n2.00 \n23.70 \nDirectories \n435.19 \n222.00 \n583.98 \n311.33 \n176.00 \n316.17 \nTop Level Directories \n10.31 \n8.00 \n10.26 \n9.53 \n8.00 \n7.22 \nIncubation Months \n15.98 \n12.00 \n13.42 \n24.71 \n21.00 \n17.82 \nAuthors \n5.69 \n3.00 \n7.88 \n1.52 \n1.00 \n1.96 \nMajor Contributors \n2.92 \n3.00 \n2.18 \n1.29 \n1.00 \n1.36 \nMinor Contributors \n2.73 \n0.00 \n6.73 \n0.21 \n0.00 \n0.85 \nNew Contributors \n1.65 \n0.00 \n3.72 \n0.37 \n0.00 \n1.03 \nFiles Added \n172.45 \n18.00 \n807.46 \n56.27 \n0.00 \n432.19 \nFiles Deleted \n131.30 \n3.00 \n735.82 \n37.94 \n0.00 \n379.24 \nFiles \n957.01 \n609.00 \n1077.36 \n807.78 \n371.00 \n1227.41 \nAvg Files Modified per Commit \n5.72 \n3.33 \n11.78 \n5.26 \n1.49 \n23.14 \nActive Days \n10.64 \n9.00 \n8.55 \n3.83 \n2.00 \n5.38 \nEmails \n131.88 \n63.00 \n217.79 \n42.48 \n16.00 \n79.04 \nCorrective \n11.60 \n5.00 \n18.56 \n2.47 \n0.00 \n5.65 \nFeatures \n14.07 \n6.00 \n25.52 \n3.27 \n0.00 \n7.04 \nPerfective \n23.34 \n9.00 \n53.25 \n5.41 \n1.00 \n11.98 \nNon Functional \n0.86 \n0.00 \n1.83 \n0.17 \n0.00 \n0.59 \nNumber of functions \n3570.97 \n2350.00 \n3934.19 \n2768.23 \n1384.50 \n3888.07 \nTest/Main Lines of Code Percentage 47.43 \n27.56 \n126.30 \n32.87 \n23.41 \n36.01 \n#Functions /w McCabe Index 11-25 81.81 \n47.00 \n107.22 \n52.74 \n24.00 \n63.94 \n#Functions /w McCabe Index >51 \n2.47 \n0.00 \n5.41 \n0.82 \n0.00 \n1.69 \nVery Large File Size Count \n6.89 \n1.00 \n21.97 \n3.40 \n1.00 \n4.69 \nVery Large Function Size Count \n17.17 \n5.00 \n32.10 \n9.74 \n3.00 \n15.41 \nCode Duplication Percentage \n16.38 \n12.69 \n14.92 \n16.93 \n13.63 \n15.69 \nMost Complex Function LOC \n305.67 \n134.00 \n1193.30 \n178.81 \n120.00 \n156.75 \n\n\n\nTable 2 :\n2Summary of three GLM models for Java-based projects. Due to code and directories being highly correlated, we removed the directories variable. Similarly, we removed the most complex function LOC variable.Base \nBase, Processes \nBase, Processes, Quality \n\nPredictors \nOdds Ratios p \nOdds Ratios p \nOdds Ratios p \n\nIntercept \n0.83 \n0.378 \n3.49 \n<0.001 1.85 \n0.120 \nSLOC \n1.22 \n<0.001 1.11 \n0.001 \n1.15 \n0.004 \n#Top Level Directories \n0.79 \n<0.001 0.80 \n<0.001 0.79 \n0.001 \nIncubation Month \n0.48 \n<0.001 0.63 \n<0.001 0.59 \n<0.001 \n\n#Major Contributors \n1.82 \n<0.001 1.84 \n<0.001 \n#Minor Contributors \n1.06 \n0.012 1.05 \n0.022 \n#New Contributors \n0.97 \n0.151 \n0.98 \n0.227 \n#Files Added \n1.02 \n0.372 \n1.02 \n0.245 \n#Files Deleted \n0.96 \n0.010 \n0.97 \n0.047 \nAvg. Files Modified per Commit \n0.95 \n0.016 \n0.94 \n0.004 \n#Emails \n0.96 \n0.011 \n0.96 \n0.052 \n#Corrective \n1.08 \n<0.001 1.07 \n0.001 \n#Features \n1.08 \n<0.001 1.08 \n<0.001 \n#Perfective \n1.00 \n0.963 \n0.98 \n0.453 \n#Non Functional \n0.99 \n0.557 \n0.99 \n0.757 \n\nTest/Main Lines of Code Percentage \n1.01 \n0.713 \n#Functions /w McCabe Index 11-25 \n1.10 \n0.002 \n#Functions /w McCabe Index >51 \n1.01 \n0.408 \nVery Large File Size Count \n0.81 \n<0.001 \nVery Large Function Size Count \n1.18 \n<0.001 \nCode Duplication Percentage \n0.85 \n<0.001 \n\nObservations \n3795 \n3795 \n3795 \nR2 Tjur \n0.116 \n0.185 \n0.239 \n\nshown in \n\nTable 3 :\n3Summary of three GLMM models for all projects. The marginal R 2 is much smaller than for the Java-based models.Base \nBase, Processes \nBase, Processes, Quality \n\nPredictors \nOdds Ratios p \nOdds Ratios p \nOdds Ratios p \n\nIntercept \n0.69 \n0.491 \n21.31 \n<0.001 60.25 \n<0.001 \nSLOC \n1.21 \n<0.001 0.93 \n0.129 \n0.98 \n0.759 \n#Directories \n1.27 \n<0.001 1.22 \n0.002 \n1.15 \n0.045 \n#Top Level Directories \n0.67 \n<0.001 0.63 \n<0.001 0.65 \n<0.001 \nIncubation Month \n0.53 \n<0.001 0.73 \n<0.001 0.70 \n<0.001 \n\n#Major Contributors \n2.15 \n<0.001 2.21 \n<0.001 \n#Minor Contributors \n1.09 \n<0.001 1.09 \n<0.001 \n#New Contributors \n0.98 \n0.269 \n0.98 \n0.264 \n#Files Added \n1.00 \n0.764 \n1.01 \n0.675 \n#Files Deleted \n0.96 \n0.001 \n0.96 \n0.003 \nAvg. Files Modified per Commit \n0.93 \n0.001 \n0.92 \n<0.001 \nActive Days \n1.35 \n0.015 \n1.30 \n0.036 \n#Emails \n0.97 \n0.078 \n0.98 \n0.179 \n#Corrective \n1.06 \n0.001 \n1.05 \n0.005 \n#Features \n1.06 \n<0.001 1.06 \n<0.001 \n#Perfective \n1.00 \n0.969 \n1.00 \n0.903 \n#Non Functional \n1.03 \n0.138 \n1.03 \n0.159 \n\nTest/Main Lines of Code Percentage \n1.04 \n0.079 \n#Functions /w McCabe Index 11-25 \n1.01 \n0.772 \n#Functions /w McCabe Index >51 \n1.01 \n0.446 \nVery Large File Size Count \n0.90 \n<0.001 \nVery Large Function Size Count \n1.19 \n<0.001 \nCode Duplication Percentage \n0.87 \n0.004 \nMost Complex Function LOC \n0.73 \n<0.001 \n\nObservations \n4970 \n4970 \n4970 \nMarginal R2 / Conditional R2 \n0.097 / 0.539 \n0.213 / 0.689 \n0.154 / 0.844 \n\n\nhttps://www.pcmag.com/archive/survey-98-percent-of-companies-use-opensource-29-percent-contribute-back-253661 2 https://www.whitehouse.gov/briefing-room/statements-releases/2022/01/13/ readout-of-white-house-meeting-on-software-security/ 3 https://www.apache.org/theapacheway/ This work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://zenodo.org/record/6374071 5 https://incubator.apache.org/\nhttps://github.com/apache/abdera/ 8 https://github.com/XAMPPRocky/tokei 9 https://www.sokrates.dev/ 10 https://github.com/gesteves91/fasttext-commit-classification\nhttps://github.com/apache/SpamAssassin 14 https://github.com/apache/spark\nhttps://github.com/apache/celix 16 https://github.com/apache/incubator-weex\nACKNOWLEDGEMENTWe are grateful to the National Science Foundation for funding this project, under GCR Grant #2020751. We thank the FSE 2022 reviewers for their constructive comments.\nTest Code Quality and Its Relation to Issue Handling Performance. Dimitrios Athanasiou, Ariadi Nugroho, Joost Visser, Andy Zaidman, 10.1109/TSE.2014.2342227IEEE Transactions on Software Engineering. 40Dimitrios Athanasiou, Ariadi Nugroho, Joost Visser, and Andy Zaidman. 2014. Test Code Quality and Its Relation to Issue Handling Performance. IEEE Transac- tions on Software Engineering 40, 11 (2014), 1100-1125. https://doi.org/10.1109/ TSE.2014.2342227\n\nSocial Interaction Systems: Theory and Measurement. 10.4324/9781315129563Robert Freed Bales. 2017. Social Interaction Systems: Theory and Measurement. Routledge. https://doi.org/10.4324/9781315129563\n\nSoftware Complexity and Maintenance Costs. D Rajiv, Banker, M Srikant, Chris F Datar, Dani Kemerer, Zweig, 10.1145/163359.163375Commun. ACM. 3611Rajiv D. Banker, Srikant M. Datar, Chris F. Kemerer, and Dani Zweig. 1993. Software Complexity and Maintenance Costs. Commun. ACM 36, 11 (nov 1993), 81-94. https://doi.org/10.1145/163359.163375\n\nFitting Linear Mixed-Effects Models Using lme4. Douglas Bates, Martin M\u00e4chler, Ben Bolker, Steve Walker, 10.18637/jss.v067.i01Journal of Statistical Software. 67Douglas Bates, Martin M\u00e4chler, Ben Bolker, and Steve Walker. 2015. Fitting Linear Mixed-Effects Models Using lme4. Journal of Statistical Software 67, 1 (2015), 1-48. https://doi.org/10.18637/jss.v067.i01\n\nFitting Linear Mixed-Effects Models Using lme4. Douglas Bates, Martin M\u00e4chler, Ben Bolker, Steve Walker, 10.18637/jss.v067.i01Journal of Statistical Software. 67Douglas Bates, Martin M\u00e4chler, Ben Bolker, and Steve Walker. 2015. Fitting Linear Mixed-Effects Models Using lme4. Journal of Statistical Software 67, 1 (2015), 1-48. https://doi.org/10.18637/jss.v067.i01\n\nDon't Touch My Code! Examining the Effects of Ownership on Software Quality. Christian Bird, Nachiappan Nagappan, Brendan Murphy, Harald Gall, Premkumar Devanbu, 10.1145/2025113.2025119Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering. the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software EngineeringChristian Bird, Nachiappan Nagappan, Brendan Murphy, Harald Gall, and Premkumar Devanbu. 2011. Don't Touch My Code! Examining the Effects of Ownership on Software Quality. In Proceedings of the 19th ACM SIGSOFT Sympo- sium and the 13th European Conference on Foundations of Software Engineering. 4-14. https://doi.org/10.1145/2025113.2025119\n\nUnderstanding the Factors That Impact the Popularity of GitHub Repositories. Hudson Borges, Andre Hora, Marco Tulio Valente, 10.1109/ICSME.2016.312016 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEEHudson Borges, Andre Hora, and Marco Tulio Valente. 2016. Understanding the Factors That Impact the Popularity of GitHub Repositories. In 2016 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, 334-344. https://doi.org/10.1109/ICSME.2016.31\n\nWhy Modern Open Source Projects Fail. Jailton Coelho, Marco Tulio Valente, 10.1145/3106237.3106246Proceedings of the 2017 11th Joint meeting on Foundations of Software Engineering. the 2017 11th Joint meeting on Foundations of Software EngineeringJailton Coelho and Marco Tulio Valente. 2017. Why Modern Open Source Projects Fail. In Proceedings of the 2017 11th Joint meeting on Foundations of Software Engineering (ESEC/FSE 2017). 186-196. https://doi.org/10.1145/3106237.3106246\n\nHow do committees invent. E Melvin, Conway, Datamation. 14Melvin E Conway. 1968. How do committees invent. Datamation 14, 4 (1968), 28-31.\n\nDefining Open Source Software Project Success. Kevin Crowston, Hala Annabi, James Howison, Kevin Crowston, Hala Annabi, and James Howison. 2003. Defining Open Source Software Project Success. (2003).\n\nProgramming-in-the-large versus programming-in-the-small. Frank Deremer, Hans H Kron, IEEE Transactions on Software Engineering. 2Frank DeRemer and Hans H Kron. 1976. Programming-in-the-large versus programming-in-the-small. IEEE Transactions on Software Engineering 2 (1976), 80-86.\n\nWhat Makes a Great Maintainer of Open Source Projects. Edson Dias, Paulo Meirelles, Fernando Castor, Igor Steinmacher, Igor Wiese, Gustavo Pinto, 10.1109/ICSE43902.2021.000932021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE). Edson Dias, Paulo Meirelles, Fernando Castor, Igor Steinmacher, Igor Wiese, and Gustavo Pinto. 2021. What Makes a Great Maintainer of Open Source Projects?. In 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE). 982-994. https://doi.org/10.1109/ICSE43902.2021.00093\n\nThe Evolution of Technical Debt in the Apache Ecosystem. Georgios Digkas, Mircea Lungu, Alexander Chatzigeorgiou, Paris Avgeriou, 10.1007/978-3-319-65831-5_4European Conference on Software Architecture (ECSA). SpringerGeorgios Digkas, Mircea Lungu, Alexander Chatzigeorgiou, and Paris Avgeriou. 2017. The Evolution of Technical Debt in the Apache Ecosystem. In European Conference on Software Architecture (ECSA). Springer, 51-66. https://doi.org/10. 1007/978-3-319-65831-5_4\n\nThe Contingency Theory of Organizations. Lex Donaldson, 10.4135/9781452229249Lex Donaldson. 2001. The Contingency Theory of Organizations. Sage. https: //doi.org/10.4135/9781452229249\n\nCommit Classification using Natural Language Processing: Experiments over Labeled Datasets. E Geanderson, Eduardo Santos, Figueiredo, CIbSE. Geanderson E dos Santos and Eduardo Figueiredo. 2020. Commit Classification using Natural Language Processing: Experiments over Labeled Datasets.. In CIbSE. 110-123.\n\nImpact of Developer Turnover on Quality in Open-Source Software. Matthieu Foucault, Marc Palyart, Xavier Blanc, Gail C Murphy, Jean-R\u00e9my Falleri, 10.1145/2786805.2786870Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE. the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSEMatthieu Foucault, Marc Palyart, Xavier Blanc, Gail C. Murphy, and Jean-R\u00e9my Falleri. 2015. Impact of Developer Turnover on Quality in Open-Source Software. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE). 829-841. https://doi.org/10.1145/2786805.2786870\n\nIntensive Metrics for the Study of the Evolution of Open Source Projects: Case studies from Apache Software Foundation projects. Santiago Gala-P\u00e9rez, Gregorio Robles, M Jes\u00fas, Israel Gonz\u00e1lez-Barahona, Herraiz, 10.1109/MSR.2013.662402310th Working Conference on Mining Software Repositories (MSR). IEEE. Santiago Gala-P\u00e9rez, Gregorio Robles, Jes\u00fas M Gonz\u00e1lez-Barahona, and Israel Herraiz. 2013. Intensive Metrics for the Study of the Evolution of Open Source Projects: Case studies from Apache Software Foundation projects. In 2013 10th Working Conference on Mining Software Repositories (MSR). IEEE, 159-168. https: //doi.org/10.1109/MSR.2013.6624023\n\nPredicting software future sustainability: A longitudinal perspective. Ghapanchi Amir Hossein, 10.1016/j.is.2014.10.005Information Systems. 49Amir Hossein Ghapanchi. 2015. Predicting software future sustainability: A longitudinal perspective. Information Systems 49 (2015), 40-51. https://doi.org/ 10.1016/j.is.2014.10.005\n\nAn Empirical Study on the Maturity of the Eclipse Modeling Ecosystem. Javier Luis, C\u00e1novas Izquierdo, Valerio Cosentino, Jordi Cabot, Javier Luis C\u00e1novas Izquierdo, Valerio Cosentino, and Jordi Cabot. 2017. An Empirical Study on the Maturity of the Eclipse Modeling Ecosystem. In 2017\n\n10.1109/MODELS.2017.19ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS). IEEE. ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS). IEEE, 292-302. https://doi.org/10.1109/MODELS.2017.19\n\nComparing Design and Code Metrics for Software Quality Prediction. Yue Jiang, Bojan Cukic, Tim Menzies, Nick Bartlow, 10.1145/1370788.1370793Proceedings of the 4th International Workshop on Predictor Models in Software Engineering (PROMISE). the 4th International Workshop on Predictor Models in Software Engineering (PROMISE)Yue Jiang, Bojan Cukic, Tim Menzies, and Nick Bartlow. 2008. Comparing Design and Code Metrics for Software Quality Prediction. In Proceedings of the 4th International Workshop on Predictor Models in Software Engineering (PROMISE). 11-18. https://doi.org/10.1145/1370788.1370793\n\nHow Do Successful and Failed Projects Differ? A Socio-Technical Analysis. Mitchell Joblin, Sven Apel, 10.1145/3504003ACM Trans. Softw. Eng. Methodol. 31ArticleMitchell Joblin and Sven Apel. 2021. How Do Successful and Failed Projects Differ? A Socio-Technical Analysis. ACM Trans. Softw. Eng. Methodol. 31, 4, Article 67 (2021), 24 pages. https://doi.org/10.1145/3504003\n\nCloning considered harmful\" considered harmful: patterns of cloning in software. J Cory, Michael W Kapser, Godfrey, 10.1007/s10664-008-9076-6Empirical Software Engineering. 13Cory J Kapser and Michael W Godfrey. 2008. \"Cloning considered harmful\" con- sidered harmful: patterns of cloning in software. Empirical Software Engineering 13, 6 (2008), 645-692. https://doi.org/10.1007/s10664-008-9076-6\n\n2021. sjPlot: Data Visualization for Statistics in Social Science. Daniel L\u00fcdecke, Daniel L\u00fcdecke. 2021. sjPlot: Data Visualization for Statistics in Social Science. https://CRAN.R-project.org/package=sjPlot R package version 2.8.10.\n\n2021. performance: An R Package for Assessment, Comparison and Testing of Statistical Models. Daniel L\u00fcdecke, S Mattan, Indrajeet Ben-Shachar, Philip Patil, Dominique Waggoner, Makowski, 10.21105/joss.03139Journal of Open Source Software. 63139Daniel L\u00fcdecke, Mattan S. Ben-Shachar, Indrajeet Patil, Philip Waggoner, and Dominique Makowski. 2021. performance: An R Package for Assessment, Com- parison and Testing of Statistical Models. Journal of Open Source Software 6, 60 (2021), 3139. https://doi.org/10.21105/joss.03139\n\nMeasuring open source software success. Sang-Yong Tom Lee, Hee-Woong Kim, Sumeet Gupta, 10.1016/j.omega.2007.05.005Omega. 37Sang-Yong Tom Lee, Hee-Woong Kim, and Sumeet Gupta. 2009. Measuring open source software success. Omega 37, 2 (2009), 426-438. https://doi.org/10.1016/j. omega.2007.05.005\n\nInvestigating on the Impact of Software Clones on Technical Debt. Aversano Lerina, Laura Nardi, 10.1109/TechDebt.2019.000292019 IEEE/ACM International Conference on Technical Debt (TechDebt). IEEEAversano Lerina and Laura Nardi. 2019. Investigating on the Impact of Software Clones on Technical Debt. In 2019 IEEE/ACM International Conference on Technical Debt (TechDebt). IEEE, 108-112. https://doi.org/10.1109/TechDebt.2019.00029\n\nQuantifying causality in data science with quasi-experiments. Tony Liu, Lyle Ungar, Konrad Kording, Nature Computational Science. 1Tony Liu, Lyle Ungar, and Konrad Kording. 2021. Quantifying causality in data science with quasi-experiments. Nature Computational Science 1, 1 (2021), 24-32.\n\nDetection Strategies: Metrics-Based Rules for Detecting Design Flaws. Radu Marinescu, 10.1109/ICSM.2004.1357820Proceedings of the 20th IEEE International Conference on Software Maintenance (ICSM). the 20th IEEE International Conference on Software Maintenance (ICSM)IEEERadu Marinescu. 2004. Detection Strategies: Metrics-Based Rules for Detecting Design Flaws. In Proceedings of the 20th IEEE International Conference on Software Maintenance (ICSM). IEEE, 350-359. https://doi.org/10.1109/ICSM.2004.1357820\n\nClean code: a handbook of agile software craftsmanship. C Robert, Martin, Pearson EducationRobert C Martin. 2009. Clean code: a handbook of agile software craftsmanship. Pearson Education.\n\nFactors affecting the success of Open Source Software. Vishal Midha, Prashant Palvia, 10.1016/j.jss.2011.11.010Journal of Systems and Software. 85Vishal Midha and Prashant Palvia. 2012. Factors affecting the success of Open Source Software. Journal of Systems and Software 85, 4 (2012), 895-905. https: //doi.org/10.1016/j.jss.2011.11.010\n\nDECOR: A Method for the Specification and Detection of Code and Design Smells. Naouel Moha, Yann-Ga\u00ebl Gu\u00e9h\u00e9neuc, Laurence Duchien, Anne-Francoise Le Meur, 10.1109/TSE.2009.50IEEE Transactions on Software Engineering. 36Naouel Moha, Yann-Ga\u00ebl Gu\u00e9h\u00e9neuc, Laurence Duchien, and Anne-Francoise Le Meur. 2009. DECOR: A Method for the Specification and Detection of Code and Design Smells. IEEE Transactions on Software Engineering 36, 1 (2009), 20-36. https://doi.org/10.1109/TSE.2009.50\n\nThe Influence of Organizational Structure on Software Quality: An Empirical Case Study. Nachiappan Nagappan, Brendan Murphy, Victor Basili, 10.1145/1368088.1368160ACM/IEEE 30th International Conference on Software Engineering (ICSE). IEEENachiappan Nagappan, Brendan Murphy, and Victor Basili. 2008. The Influence of Organizational Structure on Software Quality: An Empirical Case Study. In ACM/IEEE 30th International Conference on Software Engineering (ICSE). IEEE, 521-530. https://doi.org/10.1145/1368088.1368160\n\nA general and simple method for obtaining R2 from generalized linear mixed-effects models. Shinichi Nakagawa, Holger Schielzeth, Methods in Ecology and Evolution. 4Shinichi Nakagawa and Holger Schielzeth. 2013. A general and simple method for obtaining R2 from generalized linear mixed-effects models. Methods in Ecology and Evolution 4, 2 (2013), 133-142.\n\nWhere the Bugs Are. Thomas J Ostrand, Elaine J Weyuker, Robert M Bell, 10.1145/1013886.1007524ACM SIGSOFT Software Engineering Notes. 29Thomas J. Ostrand, Elaine J. Weyuker, and Robert M. Bell. 2004. Where the Bugs Are. ACM SIGSOFT Software Engineering Notes 29, 4 (2004), 86-96. https: //doi.org/10.1145/1013886.1007524\n\nHow, and Why, Process Metrics Are Better. Foyzur Rahman, Premkumar Devanbu, 35th International Conference on Software Engineering (ICSE). IEEEFoyzur Rahman and Premkumar Devanbu. 2013. How, and Why, Process Metrics Are Better. In 2013 35th International Conference on Software Engineering (ICSE). IEEE, 432-441.\n\nA Study on Defect Density of Open Source Software. Cobra Rahmani, Deepak Khazanchi, 10.1109/ICIS.2010.112010 IEEE/ACIS 9th International Conference on Computer and Information Science. IEEECobra Rahmani and Deepak Khazanchi. 2010. A Study on Defect Density of Open Source Software. In 2010 IEEE/ACIS 9th International Conference on Computer and Information Science. IEEE, 679-683. https://doi.org/10.1109/ICIS.2010.11\n\nThe organization of marketing activities: a contingency theory of structure and performance. Orville C Robert W Ruekert, Kenneth J WalkerJr, Roering, Journal of marketing. 49Robert W Ruekert, Orville C Walker Jr, and Kenneth J Roering. 1985. The organization of marketing activities: a contingency theory of structure and performance. Journal of marketing 49, 1 (1985), 13-25.\n\nPredicting Repository Upkeep with Textual Personality Analysis. Master's thesis. Alexander Sachs, University of WaterlooAlexander Sachs. 2019. Predicting Repository Upkeep with Textual Personality Analysis. Master's thesis. University of Waterloo.\n\nSustainability in open source software commons: Lessons learned from an empirical study of sourceforge projects. M Charles, Schweik, Technology Innovation Management Review. 31Charles M Schweik. 2013. Sustainability in open source software commons: Lessons learned from an empirical study of sourceforge projects. Technology Innovation Management Review 3, 1 (2013).\n\nThe effectiveness of software metrics in identifying error-prone classes in post-release software evolution process. Raed Shatnawi, Wei Li, 10.1016/j.jss.2007.12.794Journal of systems and software. 81Raed Shatnawi and Wei Li. 2008. The effectiveness of software metrics in identi- fying error-prone classes in post-release software evolution process. Journal of systems and software 81, 11 (2008), 1868-1882. https://doi.org/10.1016/j.jss.2007. 12.794\n\nEvaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities. Yonghee Shin, Andrew Meneely, Laurie Williams, Jason A Osborne, 10.1109/TSE.2010.81IEEE Transactions on Software Engineering. 37Yonghee Shin, Andrew Meneely, Laurie Williams, and Jason A Osborne. 2010. Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities. IEEE Transactions on Software Engineering 37, 6 (2010), 772-787. https://doi.org/10.1109/TSE.2010.81\n\nDeterminants of open source software project success: A longitudinal study. Chandrasekar Subramaniam, Ravi Sen, Matthew L Nelson, 10.1016/j.dss.2008.10.005Decision Support Systems. 46Chandrasekar Subramaniam, Ravi Sen, and Matthew L Nelson. 2009. Determi- nants of open source software project success: A longitudinal study. Decision Support Systems 46, 2 (2009), 576-585. https://doi.org/10.1016/j.dss.2008.10.005\n\nThe MITRE Corporation. 2022. CVE-2021-44228. The MITRE Corporation. 2022. CVE-2021-44228. https://cve.mitre.org/cgi-bin/ cvename.cgi?name=CVE-2021-44228. Accessed: 2022-03-10.\n\nAn exploration of technical debt. Edith Tom, Ayb\u00fcke Aurum, Richard Vidgen, 10.1016/j.jss.2012.12.052Journal of Systems and Software. 86Edith Tom, Ayb\u00fcke Aurum, and Richard Vidgen. 2013. An exploration of technical debt. Journal of Systems and Software 86, 6 (2013), 1498-1516. https://doi.org/10. 1016/j.jss.2012.12.052\n\nThe concept of fit in contingency theory. H Andrew, Robert Van De Ven, Drazin, Minnesota Univ Minneapolis Strategic Management Research CenterTechnical ReportAndrew H Van de Ven and Robert Drazin. 1984. The concept of fit in contingency theory. Technical Report. Minnesota Univ Minneapolis Strategic Management Research Center.\n\nThe Sky Is Not the Limit: Multitasking Across GitHub Projects. Bogdan Vasilescu, Kelly Blincoe, Qi Xuan, Casey Casalnuovo, Daniela Damian, Premkumar Devanbu, Vladimir Filkov, 10.1145/2884781.2884875Proceedings of the 38th International Conference on Software Engineering (ICSE). 994-1005. the 38th International Conference on Software Engineering (ICSE). 994-1005Bogdan Vasilescu, Kelly Blincoe, Qi Xuan, Casey Casalnuovo, Daniela Damian, Premkumar Devanbu, and Vladimir Filkov. 2016. The Sky Is Not the Limit: Multitasking Across GitHub Projects. In Proceedings of the 38th International Conference on Software Engineering (ICSE). 994-1005. https://doi.org/10.1145/ 2884781.2884875\n\nContinuous code quality: are we (really) doing that. Carmine Vassallo, Fabio Palomba, Alberto Bacchelli, Harald C Gall, 10.1145/3238147.3240729Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE). the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE)Carmine Vassallo, Fabio Palomba, Alberto Bacchelli, and Harald C. Gall. 2018. Continuous code quality: are we (really) doing that?. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE). 790-795. https://doi.org/10.1145/3238147.3240729\n\nInvestigating Success of Open Source Software Projects: A Social Network Perspective. Jing Wu, Khim-Yong Goh, Qian Tang, Proceedings. 105ICISJing Wu, Khim-Yong Goh, and Qian Tang. 2007. Investigating Success of Open Source Software Projects: A Social Network Perspective. ICIS 2007 Proceedings (2007), 105.\n\nPredicting project health for open source projects (using the DECART hyperparameter optimizer). Tianpei Xia, Wei Fu, Rui Shu, Tim Menzies, arXiv:2006.07240arXiv preprintTianpei Xia, Wei Fu, Rui Shu, and Tim Menzies. 2020. Predicting project health for open source projects (using the DECART hyperparameter optimizer). arXiv preprint arXiv:2006.07240 (2020).\n\nLikang Yin, Mahasweta Chakraborty, Charles Schweik, Seth Frey, Vladimir Filkov, arXiv:2203.03144Open Source Software Sustainability: Combining Institutional Analysis and Socio-Technical Networks. Accepted at CSCW 2022. arXiv preprintLikang Yin, Mahasweta Chakraborty, Charles Schweik, Seth Frey, and Vladimir Filkov. 2022. Open Source Software Sustainability: Combining Institutional Analysis and Socio-Technical Networks. Accepted at CSCW 2022, arXiv preprint arXiv:2203.03144 (2022). https://arxiv.org/pdf/2203.03144.pdf\n\nSustainability Forecasting for Apache Incubator Projects. Likang Yin, Zhuangzhi Chen, Qi Xuan, Vladimir Filkov, 10.1145/3468264.3468563Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE. the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSELikang Yin, Zhuangzhi Chen, Qi Xuan, and Vladimir Filkov. 2021. Sustainability Forecasting for Apache Incubator Projects. In Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE). 1056-1067. https://doi.org/10. 1145/3468264.3468563\n\nOne Size Does Not Fit All: An Empirical Study of Containerized Continuous Deployment Workflows. Yang Zhang, Bogdan Vasilescu, Huaimin Wang, Vladimir Filkov, 10.1145/3236024.3236033Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE. the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSEYang Zhang, Bogdan Vasilescu, Huaimin Wang, and Vladimir Filkov. 2018. One Size Does Not Fit All: An Empirical Study of Containerized Continuous Deploy- ment Workflows. In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE). 295-306. https://doi.org/10.1145/3236024.3236033\n", "annotations": {"author": "[{\"end\":77,\"start\":75},{\"end\":117,\"start\":78},{\"end\":147,\"start\":118},{\"end\":184,\"start\":148},{\"end\":220,\"start\":185},{\"end\":256,\"start\":221},{\"end\":333,\"start\":257}]", "publisher": null, "author_last_name": "[{\"end\":128,\"start\":125},{\"end\":163,\"start\":157}]", "author_first_name": "[{\"end\":76,\"start\":75},{\"end\":90,\"start\":78},{\"end\":124,\"start\":118},{\"end\":156,\"start\":148}]", "author_affiliation": "[{\"end\":219,\"start\":186},{\"end\":255,\"start\":222},{\"end\":332,\"start\":258}]", "title": "[{\"end\":72,\"start\":1},{\"end\":405,\"start\":334}]", "venue": null, "abstract": "[{\"end\":2200,\"start\":819}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2299,\"start\":2298},{\"end\":2671,\"start\":2667},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":2674,\"start\":2671},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3486,\"start\":3483},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4033,\"start\":4032},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4543,\"start\":4539},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":4853,\"start\":4849},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":4856,\"start\":4853},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":5229,\"start\":5225},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":5232,\"start\":5229},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":5314,\"start\":5310},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":5317,\"start\":5314},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":5320,\"start\":5317},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":5344,\"start\":5340},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":5347,\"start\":5344},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":5350,\"start\":5347},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":5353,\"start\":5350},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5517,\"start\":5513},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":5520,\"start\":5517},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6212,\"start\":6209},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":6358,\"start\":6354},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6374,\"start\":6371},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":9469,\"start\":9465},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9473,\"start\":9469},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":9477,\"start\":9473},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":9481,\"start\":9477},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":9485,\"start\":9481},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":9489,\"start\":9485},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":9493,\"start\":9489},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":9497,\"start\":9493},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":9501,\"start\":9497},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":9505,\"start\":9501},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":9509,\"start\":9505},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":9513,\"start\":9509},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9517,\"start\":9513},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":9521,\"start\":9517},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":9525,\"start\":9521},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10083,\"start\":10082},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":11965,\"start\":11962},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":11968,\"start\":11965},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":12161,\"start\":12157},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":12164,\"start\":12161},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":12167,\"start\":12164},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12306,\"start\":12303},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":12309,\"start\":12306},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":12312,\"start\":12309},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":12419,\"start\":12415},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":12512,\"start\":12509},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":13000,\"start\":12997},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":13066,\"start\":13062},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":13135,\"start\":13131},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":13255,\"start\":13252},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":13605,\"start\":13601},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":13706,\"start\":13702},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13726,\"start\":13722},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":13729,\"start\":13726},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":13754,\"start\":13750},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":13786,\"start\":13782},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":14288,\"start\":14284},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":14697,\"start\":14693},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":15084,\"start\":15080},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":15476,\"start\":15472},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":16320,\"start\":16316},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":16423,\"start\":16419},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":16567,\"start\":16563},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":16908,\"start\":16904},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":17344,\"start\":17340},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":19490,\"start\":19486},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":20332,\"start\":20331},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":20756,\"start\":20755},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":20839,\"start\":20838},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":21134,\"start\":21133},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":21187,\"start\":21186},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":22663,\"start\":22659},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":22751,\"start\":22749},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":23230,\"start\":23227},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":23233,\"start\":23230},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":23236,\"start\":23233},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":23239,\"start\":23236},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":23975,\"start\":23973},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":24953,\"start\":24951},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":25147,\"start\":25144},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":25313,\"start\":25310},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":26617,\"start\":26613},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":27010,\"start\":27006},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":28877,\"start\":28873},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":29100,\"start\":29096},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":29695,\"start\":29691},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":32159,\"start\":32155},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":36706,\"start\":36702},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":37377,\"start\":37375},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":37728,\"start\":37726},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":38005,\"start\":38003},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":43808,\"start\":43804},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":45383,\"start\":45379},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":45387,\"start\":45383},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":45391,\"start\":45387},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":45395,\"start\":45391},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":45399,\"start\":45395},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":45403,\"start\":45399},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":45407,\"start\":45403},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":45411,\"start\":45407},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":45415,\"start\":45411},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":45419,\"start\":45415},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":45423,\"start\":45419},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":45427,\"start\":45423},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":45431,\"start\":45427},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":45435,\"start\":45431},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":45439,\"start\":45435},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":46306,\"start\":46302},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":46967,\"start\":46963},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":47836,\"start\":47833},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":47839,\"start\":47836},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":47842,\"start\":47839},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":48008,\"start\":48004},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":48011,\"start\":48008},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":48014,\"start\":48011},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":49066,\"start\":49062}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":51744,\"start\":51558},{\"attributes\":{\"id\":\"fig_1\"},\"end\":52058,\"start\":51745},{\"attributes\":{\"id\":\"fig_2\"},\"end\":52379,\"start\":52059},{\"attributes\":{\"id\":\"fig_4\"},\"end\":52440,\"start\":52380},{\"attributes\":{\"id\":\"fig_5\"},\"end\":52535,\"start\":52441},{\"attributes\":{\"id\":\"fig_6\"},\"end\":52683,\"start\":52536},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":53217,\"start\":52684},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":55196,\"start\":53218},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":56557,\"start\":55197},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":58000,\"start\":56558}]", "paragraph": "[{\"end\":2503,\"start\":2216},{\"end\":3188,\"start\":2505},{\"end\":4161,\"start\":3190},{\"end\":5720,\"start\":4163},{\"end\":6409,\"start\":5722},{\"end\":7297,\"start\":6411},{\"end\":7558,\"start\":7299},{\"end\":7721,\"start\":7560},{\"end\":8177,\"start\":7723},{\"end\":8615,\"start\":8179},{\"end\":10084,\"start\":8617},{\"end\":10358,\"start\":10110},{\"end\":11969,\"start\":10399},{\"end\":12420,\"start\":12017},{\"end\":13394,\"start\":12422},{\"end\":13868,\"start\":13396},{\"end\":16034,\"start\":13870},{\"end\":17259,\"start\":16057},{\"end\":17657,\"start\":17282},{\"end\":18906,\"start\":17659},{\"end\":19627,\"start\":18908},{\"end\":20104,\"start\":19629},{\"end\":20254,\"start\":20125},{\"end\":21656,\"start\":20274},{\"end\":22577,\"start\":21658},{\"end\":23096,\"start\":22579},{\"end\":23869,\"start\":23098},{\"end\":24458,\"start\":23871},{\"end\":24889,\"start\":24460},{\"end\":24954,\"start\":24891},{\"end\":27037,\"start\":24965},{\"end\":27283,\"start\":27063},{\"end\":28176,\"start\":27285},{\"end\":29156,\"start\":28178},{\"end\":29271,\"start\":29168},{\"end\":29413,\"start\":29273},{\"end\":31333,\"start\":29415},{\"end\":31464,\"start\":31344},{\"end\":32739,\"start\":31466},{\"end\":34794,\"start\":32741},{\"end\":35595,\"start\":34796},{\"end\":37049,\"start\":35597},{\"end\":37557,\"start\":37051},{\"end\":39149,\"start\":37559},{\"end\":39326,\"start\":39160},{\"end\":40625,\"start\":39328},{\"end\":41065,\"start\":40627},{\"end\":41727,\"start\":41067},{\"end\":42753,\"start\":41729},{\"end\":43009,\"start\":42755},{\"end\":44120,\"start\":43011},{\"end\":45186,\"start\":44122},{\"end\":45655,\"start\":45188},{\"end\":46307,\"start\":45670},{\"end\":48295,\"start\":46309},{\"end\":48483,\"start\":48297},{\"end\":50352,\"start\":48507},{\"end\":51557,\"start\":50367}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":29596,\"start\":29589},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":40209,\"start\":40202},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":44455,\"start\":44448},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":44984,\"start\":44977}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2214,\"start\":2202},{\"attributes\":{\"n\":\"2\"},\"end\":10108,\"start\":10087},{\"attributes\":{\"n\":\"2.1\"},\"end\":10397,\"start\":10361},{\"attributes\":{\"n\":\"2.2\"},\"end\":12015,\"start\":11972},{\"attributes\":{\"n\":\"2.3\"},\"end\":16055,\"start\":16037},{\"attributes\":{\"n\":\"3\"},\"end\":17280,\"start\":17262},{\"attributes\":{\"n\":\"4\"},\"end\":20123,\"start\":20107},{\"attributes\":{\"n\":\"4.1\"},\"end\":20272,\"start\":20257},{\"attributes\":{\"n\":\"4.2\"},\"end\":24963,\"start\":24957},{\"attributes\":{\"n\":\"4.3\"},\"end\":27061,\"start\":27040},{\"attributes\":{\"n\":\"5\"},\"end\":29166,\"start\":29159},{\"attributes\":{\"n\":\"5.2\"},\"end\":31342,\"start\":31336},{\"attributes\":{\"n\":\"5.3\"},\"end\":39158,\"start\":39152},{\"attributes\":{\"n\":\"6\"},\"end\":45668,\"start\":45658},{\"attributes\":{\"n\":\"7\"},\"end\":48505,\"start\":48486},{\"attributes\":{\"n\":\"8\"},\"end\":50365,\"start\":50355},{\"end\":51569,\"start\":51559},{\"end\":52070,\"start\":52060},{\"end\":52391,\"start\":52381},{\"end\":52452,\"start\":52442},{\"end\":52547,\"start\":52537},{\"end\":53228,\"start\":53219},{\"end\":55207,\"start\":55198},{\"end\":56568,\"start\":56559}]", "table": "[{\"end\":53217,\"start\":53071},{\"end\":55196,\"start\":53474},{\"end\":56557,\"start\":55413},{\"end\":58000,\"start\":56681}]", "figure_caption": "[{\"end\":51744,\"start\":51571},{\"end\":52058,\"start\":51747},{\"end\":52379,\"start\":52072},{\"end\":52440,\"start\":52393},{\"end\":52535,\"start\":52454},{\"end\":52683,\"start\":52549},{\"end\":53071,\"start\":52686},{\"end\":53474,\"start\":53230},{\"end\":55413,\"start\":55209},{\"end\":56681,\"start\":56570}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20224,\"start\":20216},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":32469,\"start\":32463},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":32817,\"start\":32809},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":33951,\"start\":33942},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":35020,\"start\":35012}]", "bib_author_first_name": "[{\"end\":59002,\"start\":58993},{\"end\":59021,\"start\":59015},{\"end\":59036,\"start\":59031},{\"end\":59049,\"start\":59045},{\"end\":59628,\"start\":59627},{\"end\":59645,\"start\":59644},{\"end\":59660,\"start\":59655},{\"end\":59662,\"start\":59661},{\"end\":59674,\"start\":59670},{\"end\":59979,\"start\":59972},{\"end\":59993,\"start\":59987},{\"end\":60006,\"start\":60003},{\"end\":60020,\"start\":60015},{\"end\":60346,\"start\":60339},{\"end\":60360,\"start\":60354},{\"end\":60373,\"start\":60370},{\"end\":60387,\"start\":60382},{\"end\":60744,\"start\":60735},{\"end\":60761,\"start\":60751},{\"end\":60779,\"start\":60772},{\"end\":60794,\"start\":60788},{\"end\":60810,\"start\":60801},{\"end\":61490,\"start\":61484},{\"end\":61504,\"start\":61499},{\"end\":61522,\"start\":61511},{\"end\":61958,\"start\":61951},{\"end\":61978,\"start\":61967},{\"end\":62423,\"start\":62422},{\"end\":62588,\"start\":62583},{\"end\":62603,\"start\":62599},{\"end\":62617,\"start\":62612},{\"end\":62800,\"start\":62795},{\"end\":63082,\"start\":63077},{\"end\":63094,\"start\":63089},{\"end\":63114,\"start\":63106},{\"end\":63127,\"start\":63123},{\"end\":63145,\"start\":63141},{\"end\":63160,\"start\":63153},{\"end\":63628,\"start\":63620},{\"end\":63643,\"start\":63637},{\"end\":63660,\"start\":63651},{\"end\":63682,\"start\":63677},{\"end\":64084,\"start\":64081},{\"end\":64318,\"start\":64317},{\"end\":64338,\"start\":64331},{\"end\":64606,\"start\":64598},{\"end\":64621,\"start\":64617},{\"end\":64637,\"start\":64631},{\"end\":64649,\"start\":64645},{\"end\":64651,\"start\":64650},{\"end\":64669,\"start\":64660},{\"end\":65312,\"start\":65304},{\"end\":65333,\"start\":65325},{\"end\":65343,\"start\":65342},{\"end\":65357,\"start\":65351},{\"end\":65908,\"start\":65899},{\"end\":66228,\"start\":66222},{\"end\":66242,\"start\":66235},{\"end\":66261,\"start\":66254},{\"end\":66278,\"start\":66273},{\"end\":66789,\"start\":66786},{\"end\":66802,\"start\":66797},{\"end\":66813,\"start\":66810},{\"end\":66827,\"start\":66823},{\"end\":67407,\"start\":67399},{\"end\":67420,\"start\":67416},{\"end\":67779,\"start\":67778},{\"end\":67795,\"start\":67786},{\"end\":68169,\"start\":68163},{\"end\":68431,\"start\":68425},{\"end\":68442,\"start\":68441},{\"end\":68460,\"start\":68451},{\"end\":68480,\"start\":68474},{\"end\":68497,\"start\":68488},{\"end\":68910,\"start\":68897},{\"end\":68925,\"start\":68916},{\"end\":68937,\"start\":68931},{\"end\":69228,\"start\":69220},{\"end\":69242,\"start\":69237},{\"end\":69653,\"start\":69649},{\"end\":69663,\"start\":69659},{\"end\":69677,\"start\":69671},{\"end\":69952,\"start\":69948},{\"end\":70444,\"start\":70443},{\"end\":70638,\"start\":70632},{\"end\":70654,\"start\":70646},{\"end\":71002,\"start\":70996},{\"end\":71018,\"start\":71009},{\"end\":71038,\"start\":71030},{\"end\":71065,\"start\":71048},{\"end\":71499,\"start\":71489},{\"end\":71517,\"start\":71510},{\"end\":71532,\"start\":71526},{\"end\":72018,\"start\":72010},{\"end\":72035,\"start\":72029},{\"end\":72303,\"start\":72297},{\"end\":72305,\"start\":72304},{\"end\":72321,\"start\":72315},{\"end\":72323,\"start\":72322},{\"end\":72339,\"start\":72333},{\"end\":72341,\"start\":72340},{\"end\":72647,\"start\":72641},{\"end\":72665,\"start\":72656},{\"end\":72968,\"start\":72963},{\"end\":72984,\"start\":72978},{\"end\":73431,\"start\":73424},{\"end\":73433,\"start\":73432},{\"end\":73459,\"start\":73452},{\"end\":73461,\"start\":73460},{\"end\":73799,\"start\":73790},{\"end\":74072,\"start\":74071},{\"end\":74447,\"start\":74443},{\"end\":74461,\"start\":74458},{\"end\":74895,\"start\":74888},{\"end\":74908,\"start\":74902},{\"end\":74924,\"start\":74918},{\"end\":74940,\"start\":74935},{\"end\":74942,\"start\":74941},{\"end\":75389,\"start\":75377},{\"end\":75407,\"start\":75403},{\"end\":75422,\"start\":75413},{\"end\":75933,\"start\":75928},{\"end\":75945,\"start\":75939},{\"end\":75960,\"start\":75953},{\"end\":76258,\"start\":76257},{\"end\":76273,\"start\":76267},{\"end\":76613,\"start\":76607},{\"end\":76630,\"start\":76625},{\"end\":76642,\"start\":76640},{\"end\":76654,\"start\":76649},{\"end\":76674,\"start\":76667},{\"end\":76692,\"start\":76683},{\"end\":76710,\"start\":76702},{\"end\":77288,\"start\":77281},{\"end\":77304,\"start\":77299},{\"end\":77321,\"start\":77314},{\"end\":77339,\"start\":77333},{\"end\":77341,\"start\":77340},{\"end\":77926,\"start\":77922},{\"end\":77940,\"start\":77931},{\"end\":77950,\"start\":77946},{\"end\":78247,\"start\":78240},{\"end\":78256,\"start\":78253},{\"end\":78264,\"start\":78261},{\"end\":78273,\"start\":78270},{\"end\":78509,\"start\":78503},{\"end\":78524,\"start\":78515},{\"end\":78545,\"start\":78538},{\"end\":78559,\"start\":78555},{\"end\":78574,\"start\":78566},{\"end\":79091,\"start\":79085},{\"end\":79106,\"start\":79097},{\"end\":79115,\"start\":79113},{\"end\":79130,\"start\":79122},{\"end\":79886,\"start\":79882},{\"end\":79900,\"start\":79894},{\"end\":79919,\"start\":79912},{\"end\":79934,\"start\":79926}]", "bib_author_last_name": "[{\"end\":59013,\"start\":59003},{\"end\":59029,\"start\":59022},{\"end\":59043,\"start\":59037},{\"end\":59057,\"start\":59050},{\"end\":59634,\"start\":59629},{\"end\":59642,\"start\":59636},{\"end\":59653,\"start\":59646},{\"end\":59668,\"start\":59663},{\"end\":59682,\"start\":59675},{\"end\":59689,\"start\":59684},{\"end\":59985,\"start\":59980},{\"end\":60001,\"start\":59994},{\"end\":60013,\"start\":60007},{\"end\":60027,\"start\":60021},{\"end\":60352,\"start\":60347},{\"end\":60368,\"start\":60361},{\"end\":60380,\"start\":60374},{\"end\":60394,\"start\":60388},{\"end\":60749,\"start\":60745},{\"end\":60770,\"start\":60762},{\"end\":60786,\"start\":60780},{\"end\":60799,\"start\":60795},{\"end\":60818,\"start\":60811},{\"end\":61497,\"start\":61491},{\"end\":61509,\"start\":61505},{\"end\":61530,\"start\":61523},{\"end\":61965,\"start\":61959},{\"end\":61986,\"start\":61979},{\"end\":62430,\"start\":62424},{\"end\":62438,\"start\":62432},{\"end\":62597,\"start\":62589},{\"end\":62610,\"start\":62604},{\"end\":62625,\"start\":62618},{\"end\":62808,\"start\":62801},{\"end\":62821,\"start\":62810},{\"end\":63087,\"start\":63083},{\"end\":63104,\"start\":63095},{\"end\":63121,\"start\":63115},{\"end\":63139,\"start\":63128},{\"end\":63151,\"start\":63146},{\"end\":63166,\"start\":63161},{\"end\":63635,\"start\":63629},{\"end\":63649,\"start\":63644},{\"end\":63675,\"start\":63661},{\"end\":63691,\"start\":63683},{\"end\":64094,\"start\":64085},{\"end\":64329,\"start\":64319},{\"end\":64345,\"start\":64339},{\"end\":64357,\"start\":64347},{\"end\":64615,\"start\":64607},{\"end\":64629,\"start\":64622},{\"end\":64643,\"start\":64638},{\"end\":64658,\"start\":64652},{\"end\":64677,\"start\":64670},{\"end\":65323,\"start\":65313},{\"end\":65340,\"start\":65334},{\"end\":65349,\"start\":65344},{\"end\":65375,\"start\":65358},{\"end\":65384,\"start\":65377},{\"end\":65921,\"start\":65909},{\"end\":66233,\"start\":66229},{\"end\":66252,\"start\":66243},{\"end\":66271,\"start\":66262},{\"end\":66284,\"start\":66279},{\"end\":66795,\"start\":66790},{\"end\":66808,\"start\":66803},{\"end\":66821,\"start\":66814},{\"end\":66835,\"start\":66828},{\"end\":67414,\"start\":67408},{\"end\":67425,\"start\":67421},{\"end\":67784,\"start\":67780},{\"end\":67802,\"start\":67796},{\"end\":67811,\"start\":67804},{\"end\":68177,\"start\":68170},{\"end\":68439,\"start\":68432},{\"end\":68449,\"start\":68443},{\"end\":68472,\"start\":68461},{\"end\":68486,\"start\":68481},{\"end\":68506,\"start\":68498},{\"end\":68516,\"start\":68508},{\"end\":68914,\"start\":68911},{\"end\":68929,\"start\":68926},{\"end\":68943,\"start\":68938},{\"end\":69235,\"start\":69229},{\"end\":69248,\"start\":69243},{\"end\":69657,\"start\":69654},{\"end\":69669,\"start\":69664},{\"end\":69685,\"start\":69678},{\"end\":69962,\"start\":69953},{\"end\":70451,\"start\":70445},{\"end\":70459,\"start\":70453},{\"end\":70644,\"start\":70639},{\"end\":70661,\"start\":70655},{\"end\":71007,\"start\":71003},{\"end\":71028,\"start\":71019},{\"end\":71046,\"start\":71039},{\"end\":71070,\"start\":71066},{\"end\":71508,\"start\":71500},{\"end\":71524,\"start\":71518},{\"end\":71539,\"start\":71533},{\"end\":72027,\"start\":72019},{\"end\":72046,\"start\":72036},{\"end\":72313,\"start\":72306},{\"end\":72331,\"start\":72324},{\"end\":72346,\"start\":72342},{\"end\":72654,\"start\":72648},{\"end\":72673,\"start\":72666},{\"end\":72976,\"start\":72969},{\"end\":72994,\"start\":72985},{\"end\":73450,\"start\":73434},{\"end\":73468,\"start\":73462},{\"end\":73479,\"start\":73472},{\"end\":73805,\"start\":73800},{\"end\":74080,\"start\":74073},{\"end\":74089,\"start\":74082},{\"end\":74456,\"start\":74448},{\"end\":74464,\"start\":74462},{\"end\":74900,\"start\":74896},{\"end\":74916,\"start\":74909},{\"end\":74933,\"start\":74925},{\"end\":74950,\"start\":74943},{\"end\":75401,\"start\":75390},{\"end\":75411,\"start\":75408},{\"end\":75429,\"start\":75423},{\"end\":75937,\"start\":75934},{\"end\":75951,\"start\":75946},{\"end\":75967,\"start\":75961},{\"end\":76265,\"start\":76259},{\"end\":76284,\"start\":76274},{\"end\":76292,\"start\":76286},{\"end\":76623,\"start\":76614},{\"end\":76638,\"start\":76631},{\"end\":76647,\"start\":76643},{\"end\":76665,\"start\":76655},{\"end\":76681,\"start\":76675},{\"end\":76700,\"start\":76693},{\"end\":76717,\"start\":76711},{\"end\":77297,\"start\":77289},{\"end\":77312,\"start\":77305},{\"end\":77331,\"start\":77322},{\"end\":77346,\"start\":77342},{\"end\":77929,\"start\":77927},{\"end\":77944,\"start\":77941},{\"end\":77955,\"start\":77951},{\"end\":78251,\"start\":78248},{\"end\":78259,\"start\":78257},{\"end\":78268,\"start\":78265},{\"end\":78281,\"start\":78274},{\"end\":78513,\"start\":78510},{\"end\":78536,\"start\":78525},{\"end\":78553,\"start\":78546},{\"end\":78564,\"start\":78560},{\"end\":78581,\"start\":78575},{\"end\":79095,\"start\":79092},{\"end\":79111,\"start\":79107},{\"end\":79120,\"start\":79116},{\"end\":79137,\"start\":79131},{\"end\":79892,\"start\":79887},{\"end\":79910,\"start\":79901},{\"end\":79924,\"start\":79920},{\"end\":79941,\"start\":79935}]", "bib_entry": "[{\"attributes\":{\"doi\":\"10.1109/TSE.2014.2342227\",\"id\":\"b0\",\"matched_paper_id\":10424120},\"end\":59381,\"start\":58927},{\"attributes\":{\"doi\":\"10.4324/9781315129563\",\"id\":\"b1\"},\"end\":59582,\"start\":59383},{\"attributes\":{\"doi\":\"10.1145/163359.163375\",\"id\":\"b2\",\"matched_paper_id\":8376991},\"end\":59922,\"start\":59584},{\"attributes\":{\"doi\":\"10.18637/jss.v067.i01\",\"id\":\"b3\",\"matched_paper_id\":88513115},\"end\":60289,\"start\":59924},{\"attributes\":{\"doi\":\"10.18637/jss.v067.i01\",\"id\":\"b4\",\"matched_paper_id\":88513115},\"end\":60656,\"start\":60291},{\"attributes\":{\"doi\":\"10.1145/2025113.2025119\",\"id\":\"b5\",\"matched_paper_id\":9708684},\"end\":61405,\"start\":60658},{\"attributes\":{\"doi\":\"10.1109/ICSME.2016.31\",\"id\":\"b6\",\"matched_paper_id\":184135},\"end\":61911,\"start\":61407},{\"attributes\":{\"doi\":\"10.1145/3106237.3106246\",\"id\":\"b7\",\"matched_paper_id\":12302770},\"end\":62394,\"start\":61913},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":55165854},\"end\":62534,\"start\":62396},{\"attributes\":{\"id\":\"b9\"},\"end\":62735,\"start\":62536},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1022671},\"end\":63020,\"start\":62737},{\"attributes\":{\"doi\":\"10.1109/ICSE43902.2021.00093\",\"id\":\"b11\",\"matched_paper_id\":232216342},\"end\":63561,\"start\":63022},{\"attributes\":{\"doi\":\"10.1007/978-3-319-65831-5_4\",\"id\":\"b12\",\"matched_paper_id\":4666661},\"end\":64038,\"start\":63563},{\"attributes\":{\"doi\":\"10.4135/9781452229249\",\"id\":\"b13\"},\"end\":64223,\"start\":64040},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":229545423},\"end\":64531,\"start\":64225},{\"attributes\":{\"doi\":\"10.1145/2786805.2786870\",\"id\":\"b15\",\"matched_paper_id\":5656931},\"end\":65173,\"start\":64533},{\"attributes\":{\"doi\":\"10.1109/MSR.2013.6624023\",\"id\":\"b16\",\"matched_paper_id\":5943165},\"end\":65826,\"start\":65175},{\"attributes\":{\"doi\":\"10.1016/j.is.2014.10.005\",\"id\":\"b17\",\"matched_paper_id\":1144606},\"end\":66150,\"start\":65828},{\"attributes\":{\"id\":\"b18\"},\"end\":66436,\"start\":66152},{\"attributes\":{\"doi\":\"10.1109/MODELS.2017.19\",\"id\":\"b19\"},\"end\":66717,\"start\":66438},{\"attributes\":{\"doi\":\"10.1145/1370788.1370793\",\"id\":\"b20\",\"matched_paper_id\":1808439},\"end\":67323,\"start\":66719},{\"attributes\":{\"doi\":\"10.1145/3504003\",\"id\":\"b21\",\"matched_paper_id\":245275177},\"end\":67695,\"start\":67325},{\"attributes\":{\"doi\":\"10.1007/s10664-008-9076-6\",\"id\":\"b22\",\"matched_paper_id\":130098},\"end\":68094,\"start\":67697},{\"attributes\":{\"id\":\"b23\"},\"end\":68329,\"start\":68096},{\"attributes\":{\"doi\":\"10.21105/joss.03139\",\"id\":\"b24\",\"matched_paper_id\":233378359},\"end\":68855,\"start\":68331},{\"attributes\":{\"doi\":\"10.1016/j.omega.2007.05.005\",\"id\":\"b25\",\"matched_paper_id\":55406020},\"end\":69152,\"start\":68857},{\"attributes\":{\"doi\":\"10.1109/TechDebt.2019.00029\",\"id\":\"b26\",\"matched_paper_id\":199435552},\"end\":69585,\"start\":69154},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":234340478},\"end\":69876,\"start\":69587},{\"attributes\":{\"doi\":\"10.1109/ICSM.2004.1357820\",\"id\":\"b28\",\"matched_paper_id\":2054397},\"end\":70385,\"start\":69878},{\"attributes\":{\"id\":\"b29\"},\"end\":70575,\"start\":70387},{\"attributes\":{\"doi\":\"10.1016/j.jss.2011.11.010\",\"id\":\"b30\",\"matched_paper_id\":14939494},\"end\":70915,\"start\":70577},{\"attributes\":{\"doi\":\"10.1109/TSE.2009.50\",\"id\":\"b31\",\"matched_paper_id\":14767901},\"end\":71399,\"start\":70917},{\"attributes\":{\"doi\":\"10.1145/1368088.1368160\",\"id\":\"b32\",\"matched_paper_id\":5048618},\"end\":71917,\"start\":71401},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":122266405},\"end\":72275,\"start\":71919},{\"attributes\":{\"doi\":\"10.1145/1013886.1007524\",\"id\":\"b34\",\"matched_paper_id\":9360032},\"end\":72597,\"start\":72277},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":6720884},\"end\":72910,\"start\":72599},{\"attributes\":{\"doi\":\"10.1109/ICIS.2010.11\",\"id\":\"b36\",\"matched_paper_id\":10783433},\"end\":73329,\"start\":72912},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":168137439},\"end\":73707,\"start\":73331},{\"attributes\":{\"id\":\"b38\"},\"end\":73956,\"start\":73709},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":16142872},\"end\":74324,\"start\":73958},{\"attributes\":{\"doi\":\"10.1016/j.jss.2007.12.794\",\"id\":\"b40\",\"matched_paper_id\":37307717},\"end\":74777,\"start\":74326},{\"attributes\":{\"doi\":\"10.1109/TSE.2010.81\",\"id\":\"b41\",\"matched_paper_id\":15663223},\"end\":75299,\"start\":74779},{\"attributes\":{\"doi\":\"10.1016/j.dss.2008.10.005\",\"id\":\"b42\",\"matched_paper_id\":39055288},\"end\":75715,\"start\":75301},{\"attributes\":{\"id\":\"b43\"},\"end\":75892,\"start\":75717},{\"attributes\":{\"doi\":\"10.1016/j.jss.2012.12.052\",\"id\":\"b44\",\"matched_paper_id\":31215403},\"end\":76213,\"start\":75894},{\"attributes\":{\"id\":\"b45\"},\"end\":76542,\"start\":76215},{\"attributes\":{\"doi\":\"10.1145/2884781.2884875\",\"id\":\"b46\",\"matched_paper_id\":3330083},\"end\":77226,\"start\":76544},{\"attributes\":{\"doi\":\"10.1145/3238147.3240729\",\"id\":\"b47\",\"matched_paper_id\":52068744},\"end\":77834,\"start\":77228},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":6588609},\"end\":78142,\"start\":77836},{\"attributes\":{\"doi\":\"arXiv:2006.07240\",\"id\":\"b49\"},\"end\":78501,\"start\":78144},{\"attributes\":{\"doi\":\"arXiv:2203.03144\",\"id\":\"b50\"},\"end\":79025,\"start\":78503},{\"attributes\":{\"doi\":\"10.1145/3468264.3468563\",\"id\":\"b51\",\"matched_paper_id\":235254232},\"end\":79784,\"start\":79027},{\"attributes\":{\"doi\":\"10.1145/3236024.3236033\",\"id\":\"b52\",\"matched_paper_id\":53081220},\"end\":80647,\"start\":79786}]", "bib_title": "[{\"end\":58991,\"start\":58927},{\"end\":59625,\"start\":59584},{\"end\":59970,\"start\":59924},{\"end\":60337,\"start\":60291},{\"end\":60733,\"start\":60658},{\"end\":61482,\"start\":61407},{\"end\":61949,\"start\":61913},{\"end\":62420,\"start\":62396},{\"end\":62793,\"start\":62737},{\"end\":63075,\"start\":63022},{\"end\":63618,\"start\":63563},{\"end\":64315,\"start\":64225},{\"end\":64596,\"start\":64533},{\"end\":65302,\"start\":65175},{\"end\":65897,\"start\":65828},{\"end\":66784,\"start\":66719},{\"end\":67397,\"start\":67325},{\"end\":67776,\"start\":67697},{\"end\":68423,\"start\":68331},{\"end\":68895,\"start\":68857},{\"end\":69218,\"start\":69154},{\"end\":69647,\"start\":69587},{\"end\":69946,\"start\":69878},{\"end\":70630,\"start\":70577},{\"end\":70994,\"start\":70917},{\"end\":71487,\"start\":71401},{\"end\":72008,\"start\":71919},{\"end\":72295,\"start\":72277},{\"end\":72639,\"start\":72599},{\"end\":72961,\"start\":72912},{\"end\":73422,\"start\":73331},{\"end\":74069,\"start\":73958},{\"end\":74441,\"start\":74326},{\"end\":74886,\"start\":74779},{\"end\":75375,\"start\":75301},{\"end\":75926,\"start\":75894},{\"end\":76605,\"start\":76544},{\"end\":77279,\"start\":77228},{\"end\":77920,\"start\":77836},{\"end\":79083,\"start\":79027},{\"end\":79880,\"start\":79786}]", "bib_author": "[{\"end\":59015,\"start\":58993},{\"end\":59031,\"start\":59015},{\"end\":59045,\"start\":59031},{\"end\":59059,\"start\":59045},{\"end\":59636,\"start\":59627},{\"end\":59644,\"start\":59636},{\"end\":59655,\"start\":59644},{\"end\":59670,\"start\":59655},{\"end\":59684,\"start\":59670},{\"end\":59691,\"start\":59684},{\"end\":59987,\"start\":59972},{\"end\":60003,\"start\":59987},{\"end\":60015,\"start\":60003},{\"end\":60029,\"start\":60015},{\"end\":60354,\"start\":60339},{\"end\":60370,\"start\":60354},{\"end\":60382,\"start\":60370},{\"end\":60396,\"start\":60382},{\"end\":60751,\"start\":60735},{\"end\":60772,\"start\":60751},{\"end\":60788,\"start\":60772},{\"end\":60801,\"start\":60788},{\"end\":60820,\"start\":60801},{\"end\":61499,\"start\":61484},{\"end\":61511,\"start\":61499},{\"end\":61532,\"start\":61511},{\"end\":61967,\"start\":61951},{\"end\":61988,\"start\":61967},{\"end\":62432,\"start\":62422},{\"end\":62440,\"start\":62432},{\"end\":62599,\"start\":62583},{\"end\":62612,\"start\":62599},{\"end\":62627,\"start\":62612},{\"end\":62810,\"start\":62795},{\"end\":62823,\"start\":62810},{\"end\":63089,\"start\":63077},{\"end\":63106,\"start\":63089},{\"end\":63123,\"start\":63106},{\"end\":63141,\"start\":63123},{\"end\":63153,\"start\":63141},{\"end\":63168,\"start\":63153},{\"end\":63637,\"start\":63620},{\"end\":63651,\"start\":63637},{\"end\":63677,\"start\":63651},{\"end\":63693,\"start\":63677},{\"end\":64096,\"start\":64081},{\"end\":64331,\"start\":64317},{\"end\":64347,\"start\":64331},{\"end\":64359,\"start\":64347},{\"end\":64617,\"start\":64598},{\"end\":64631,\"start\":64617},{\"end\":64645,\"start\":64631},{\"end\":64660,\"start\":64645},{\"end\":64679,\"start\":64660},{\"end\":65325,\"start\":65304},{\"end\":65342,\"start\":65325},{\"end\":65351,\"start\":65342},{\"end\":65377,\"start\":65351},{\"end\":65386,\"start\":65377},{\"end\":65923,\"start\":65899},{\"end\":66235,\"start\":66222},{\"end\":66254,\"start\":66235},{\"end\":66273,\"start\":66254},{\"end\":66286,\"start\":66273},{\"end\":66797,\"start\":66786},{\"end\":66810,\"start\":66797},{\"end\":66823,\"start\":66810},{\"end\":66837,\"start\":66823},{\"end\":67416,\"start\":67399},{\"end\":67427,\"start\":67416},{\"end\":67786,\"start\":67778},{\"end\":67804,\"start\":67786},{\"end\":67813,\"start\":67804},{\"end\":68179,\"start\":68163},{\"end\":68441,\"start\":68425},{\"end\":68451,\"start\":68441},{\"end\":68474,\"start\":68451},{\"end\":68488,\"start\":68474},{\"end\":68508,\"start\":68488},{\"end\":68518,\"start\":68508},{\"end\":68916,\"start\":68897},{\"end\":68931,\"start\":68916},{\"end\":68945,\"start\":68931},{\"end\":69237,\"start\":69220},{\"end\":69250,\"start\":69237},{\"end\":69659,\"start\":69649},{\"end\":69671,\"start\":69659},{\"end\":69687,\"start\":69671},{\"end\":69964,\"start\":69948},{\"end\":70453,\"start\":70443},{\"end\":70461,\"start\":70453},{\"end\":70646,\"start\":70632},{\"end\":70663,\"start\":70646},{\"end\":71009,\"start\":70996},{\"end\":71030,\"start\":71009},{\"end\":71048,\"start\":71030},{\"end\":71072,\"start\":71048},{\"end\":71510,\"start\":71489},{\"end\":71526,\"start\":71510},{\"end\":71541,\"start\":71526},{\"end\":72029,\"start\":72010},{\"end\":72048,\"start\":72029},{\"end\":72315,\"start\":72297},{\"end\":72333,\"start\":72315},{\"end\":72348,\"start\":72333},{\"end\":72656,\"start\":72641},{\"end\":72675,\"start\":72656},{\"end\":72978,\"start\":72963},{\"end\":72996,\"start\":72978},{\"end\":73452,\"start\":73424},{\"end\":73472,\"start\":73452},{\"end\":73481,\"start\":73472},{\"end\":73807,\"start\":73790},{\"end\":74082,\"start\":74071},{\"end\":74091,\"start\":74082},{\"end\":74458,\"start\":74443},{\"end\":74466,\"start\":74458},{\"end\":74902,\"start\":74888},{\"end\":74918,\"start\":74902},{\"end\":74935,\"start\":74918},{\"end\":74952,\"start\":74935},{\"end\":75403,\"start\":75377},{\"end\":75413,\"start\":75403},{\"end\":75431,\"start\":75413},{\"end\":75939,\"start\":75928},{\"end\":75953,\"start\":75939},{\"end\":75969,\"start\":75953},{\"end\":76267,\"start\":76257},{\"end\":76286,\"start\":76267},{\"end\":76294,\"start\":76286},{\"end\":76625,\"start\":76607},{\"end\":76640,\"start\":76625},{\"end\":76649,\"start\":76640},{\"end\":76667,\"start\":76649},{\"end\":76683,\"start\":76667},{\"end\":76702,\"start\":76683},{\"end\":76719,\"start\":76702},{\"end\":77299,\"start\":77281},{\"end\":77314,\"start\":77299},{\"end\":77333,\"start\":77314},{\"end\":77348,\"start\":77333},{\"end\":77931,\"start\":77922},{\"end\":77946,\"start\":77931},{\"end\":77957,\"start\":77946},{\"end\":78253,\"start\":78240},{\"end\":78261,\"start\":78253},{\"end\":78270,\"start\":78261},{\"end\":78283,\"start\":78270},{\"end\":78515,\"start\":78503},{\"end\":78538,\"start\":78515},{\"end\":78555,\"start\":78538},{\"end\":78566,\"start\":78555},{\"end\":78583,\"start\":78566},{\"end\":79097,\"start\":79085},{\"end\":79113,\"start\":79097},{\"end\":79122,\"start\":79113},{\"end\":79139,\"start\":79122},{\"end\":79894,\"start\":79882},{\"end\":79912,\"start\":79894},{\"end\":79926,\"start\":79912},{\"end\":79943,\"start\":79926}]", "bib_venue": "[{\"end\":61064,\"start\":60962},{\"end\":62160,\"start\":62094},{\"end\":64871,\"start\":64795},{\"end\":67045,\"start\":66961},{\"end\":70144,\"start\":70075},{\"end\":76907,\"start\":76833},{\"end\":77552,\"start\":77470},{\"end\":79453,\"start\":79316},{\"end\":80267,\"start\":80125},{\"end\":59124,\"start\":59083},{\"end\":59433,\"start\":59383},{\"end\":59723,\"start\":59712},{\"end\":60081,\"start\":60050},{\"end\":60448,\"start\":60417},{\"end\":60960,\"start\":60843},{\"end\":61633,\"start\":61553},{\"end\":62092,\"start\":62011},{\"end\":62450,\"start\":62440},{\"end\":62581,\"start\":62536},{\"end\":62864,\"start\":62823},{\"end\":63270,\"start\":63196},{\"end\":63771,\"start\":63720},{\"end\":64079,\"start\":64040},{\"end\":64364,\"start\":64359},{\"end\":64793,\"start\":64702},{\"end\":65477,\"start\":65410},{\"end\":65966,\"start\":65947},{\"end\":66220,\"start\":66152},{\"end\":66563,\"start\":66460},{\"end\":66959,\"start\":66860},{\"end\":67473,\"start\":67442},{\"end\":67868,\"start\":67838},{\"end\":68161,\"start\":68096},{\"end\":68568,\"start\":68537},{\"end\":68977,\"start\":68972},{\"end\":69344,\"start\":69277},{\"end\":69715,\"start\":69687},{\"end\":70073,\"start\":69989},{\"end\":70441,\"start\":70387},{\"end\":70719,\"start\":70688},{\"end\":71132,\"start\":71091},{\"end\":71633,\"start\":71564},{\"end\":72080,\"start\":72048},{\"end\":72409,\"start\":72371},{\"end\":72735,\"start\":72675},{\"end\":73095,\"start\":73016},{\"end\":73501,\"start\":73481},{\"end\":73788,\"start\":73709},{\"end\":74130,\"start\":74091},{\"end\":74522,\"start\":74491},{\"end\":75012,\"start\":74971},{\"end\":75480,\"start\":75456},{\"end\":75760,\"start\":75717},{\"end\":76025,\"start\":75994},{\"end\":76255,\"start\":76215},{\"end\":76831,\"start\":76742},{\"end\":77468,\"start\":77371},{\"end\":77968,\"start\":77957},{\"end\":78238,\"start\":78144},{\"end\":78720,\"start\":78599},{\"end\":79314,\"start\":79162},{\"end\":80123,\"start\":79966}]"}}}, "year": 2023, "month": 12, "day": 17}