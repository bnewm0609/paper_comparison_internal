{"id": 234251373, "updated": "2023-08-28 19:47:06.285", "metadata": {"title": "A Study of C/C++ Code Weaknesses on Stack Over\ufb02ow", "authors": "[{\"first\":\"Haoxiang\",\"last\":\"Zhang\",\"middle\":[]},{\"first\":\"Shaowei\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Heng\",\"last\":\"Li\",\"middle\":[]},{\"first\":\"Tse-Hsun\",\"last\":\"Chen\",\"middle\":[]},{\"first\":\"Fellow\",\"last\":\"Ahmed E. Hassan\",\"middle\":[\"IEEE\"]}]", "venue": "IEEE Transactions on Software Engineering", "journal": "IEEE Transactions on Software Engineering", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": ",", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3133304533", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/tse/ZhangWLCH22", "doi": "10.1109/tse.2021.3058985"}}, "content": {"source": {"pdf_hash": "406bd979aa8bf83c37945e698118538d79fa158e", "pdf_src": "ScienceParsePlus", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "2f949b79baa8c1474e0c54e9388e11a60ae65bf0", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/406bd979aa8bf83c37945e698118538d79fa158e.txt", "contents": "\nA Study of C/C++ Code Weaknesses on Stack Overflow\n\n\nHaoxiang Zhang \nShaowei Wang \nHeng Li \nTse-Hsun Chen \nFellow, IEEEAhmed E Hassan \nA Study of C/C++ Code Weaknesses on Stack Overflow\n10.1109/TSE.2021.3058985\nStack Overflow hosts millions of solutions that aim to solve developers' programming issues. In this crowdsourced question answering process, Stack Overflow becomes a code hosting website where developers actively share its code. However, code snippets on Stack Overflow may contain security vulnerabilities, and if shared carelessly, such snippets can introduce security problems in software systems. In this paper, we empirically study the prevalence of the Common Weakness Enumeration -CWE, in code snippets of C/C++ related answers. We explore the characteristics of Code w , i.e., code snippets that have CWE instances, in terms of the types of weaknesses, the evolution of Code w , and who contributed such code snippets. We find that: 1) 36 percent (i.e., 32 out of 89) CWE types are detected in Code w on Stack Overflow. Particularly, CWE-119, i.e., improper restriction of operations within the bounds of a memory buffer, is common in both answer code snippets and real-world software systems. Furthermore, the proportion of Code w doubled from 2008 to 2018 after normalizing by the total number of C/C++ snippets in each year. 2) In general, code revisions are associated with a reduction in the number of code weaknesses. However, the majority of Code w had weaknesses introduced in the first version of the code, and these Code w were never revised since then. Only 7.5 percent of users who contributed C/C++ code snippets posted or edited code with weaknesses. Users contributed less code with CWE weakness when they were more active (i.e., they either revised more code snippets or had a higher reputation). We also find that some users tended to have the same CWE type repeatedly in their various code snippets. Our empirical study provides insights to users who share code snippets on Stack Overflow so that they are aware of the potential security issues. To understand the community feedback about improving code weaknesses by answer revisions, we also conduct a qualitative study and find that 62.5 percent of our suggested revisions are adopted by the community. Stack Overflow can perform CWE scanning for all the code that is hosted on its platform. Further research is needed to improve the quality of the crowdsourced knowledge on Stack Overflow.Index Terms-Code security, C/C++, empirical software engineering, crowdsourced knowledge sharing and management, stack overflow \u00c7 Haoxiang Zhang is with the Centre for Software Excellence, Huawei\n\nINTRODUCTION\n\nS TACK Overflow is the world's most popular Q&A website for programming questions. Since its launch in 2008, Stack Overflow has accumulated millions of questions and answers related to programming. When answering questions on Stack Overflow, it is common for developers to attach code snippets within their answers as part of the solutions. Wu et al. observe that 75 percent of the answers contain code snippets [1]. The large collection of code snippets within these answers becomes a code repository for solving programming problems among developers. Prior studies show that the code snippets on Stack Overflow are widely shared by developers [1], [2].\n\nSecurity is a critical property in any code repository. ISO 27005 defines vulnerability as a weakness that can be exploited [3]. Code with weaknesses -Code w , can be risky to share or reuse among developers. As the world's most successful crowdsourced knowledge sharing platform in programming, Stack Overflow has hosted a very large code base. The activities of code sharing lead to code snippets propagating quickly across software systems. Prior studies observe that code snippets in various programming languages on Stack Overflow can be insecure. For example, Meng et al. identified security vulnerabilities, e.g., bypassing certificate validation and using insecure cryptographic hash functions, in the suggested code snippets of accepted answers on Stack Overflow [4]. Rahman et al. observed that 7.1 percent of the Python answers contain at least one insecure coding practice, e.g., code injection [5]. Fischer et al. observed that 15.4 percent of the 1.3 million Android applications contain securityrelated code snippets from Stack Overflow, and 97.9 percent of such code snippets contain at least one insecure code snippet [2]. Furthermore, on Meta Stack Overflow, which is the part of Stack Overflow where users discuss the inner workings and policies of Stack Overflow, we observe that users are concerned about the vulnerable code that is shared on Stack Overflow. 1,2,3,4,5,6 For instance, a user posted the following C code snippet in the first version of an answer 7 : system(\"sudo rm -no-preserve-root -rf /\");\n\nThis code snippet would wipe the entire hard drive. Within 4 minutes, another user removed the insecure code with a revision note saying \"some person may actually try your code without fully understanding it first.\" In another example, 8 a user proposed an answer to print a message by initializing a variable string [100]. Within 5 minutes, another user commented that \"the biggest flaw here is the glaring security hole (buffer overrun!).\" More than two months later, the answerer revised the answer to fix the issue. However, the answer exposed a security vulnerability for more than two months.\n\nIn this paper, we focus on studying the weaknesses of C/ C++ code snippets on Stack Overflow because C/C++ are widely used in different types of software systems [6]. In order to study code weaknesses, we use the Common Weakness Enumeration -CWE, a community-developed collection of common software security weaknesses. 9 C/C++ have the most reported CWE types of all the programming languages that contain CWE [7], [8], and have the most security vulnerabilities [9], [10]. In particular, our study aims to answer the following three research questions (RQs): RQ1: What are the types of code weaknesses that are detected in C/C++ code snippets on Stack Overflow? RQ2: How does code with weaknesses evolve through revisions? RQ3: What are the characteristics of the users who contributed to code with weaknesses? In summary, this paper makes the following contributions:\n\nWe scan 646,716 C/C++ code snippets from Stack Overflow answers. We observe that code weaknesses are detected in 2 percent of the C/C++ answers with code snippets; more specifically, there are 12,998 detected code weaknesses that fall into 36 percent (i.e., 32 out of 89) of all the existing C/C++ CWE types. Especially, we observe that CWE-119/416/190/476/ 415 are commonly detected in Stack Overflow as well as CVE instances in real-world software systems. We suggest that Stack Overflow can perform CWE scanning for all the code that is hosted on its platform. We analyze the trend of code weaknesses, and find that the proportion of Code w grew year by year doubling from 2008 to 2018 after normalizing by the total C/C++ code snippets that are posted in the corresponding years. We examine the code evolution history of all the posted C/C++ code snippets on Stack Overflow. We find that in general, code revisions are associated with a reduction in the number of code weaknesses. However, the majority of Code w have weaknesses in the first version of the code, and they are never revised. We conduct a study with users who contribute Code w . We encourage Stack Overflow to improve the code review mechanism since users tended to commit the same weaknesses repeatedly. We observe that only 7.5 percent of users who posted C/C++ code contributed code weaknesses, and more active users contributed fewer weaknesses. Acar et al. analyzed how Stack Overflow threads are used by Android developers, and observed that developers can copy and paste insecure solutions [11]. Similarly, our study of mining C/C++ code snippets on Stack Overflow wishes to gain a better understanding of the impact of the Stack Overflow information source in terms of code security. The recommendations based on our findings can be used to improve the quality of Stack Overflow as an information source. The building of crowdsourced knowledge while managing any security risks can benefit Stack Overflow as an information resource provider, can benefit the software engineering community in sharing code, and can benefit developers in fixing their security issues. Paper Organization. The rest of this paper is organized as follows. Section 2 introduces the background of code security on Stack Overflow. Section 3 describes our studied code snippets and our approach to detect weaknesses in these code snippets. Section 4 details the results from our case study. Section 5 discusses our findings and their implications. Section 6 discusses the potential threats to the validity of our findings. Section 7 surveys relevant work to our study. Finally, Section 8 concludes our study.\n\n\nBACKGROUND\n\n\nCode Snippets and Their Security Weaknesses on Stack Overflow\n\nMany software systems are written in C/C++, or rely on system components that have been written in C/C++. A survey of sourceforge.com in September 2004 notes that a substantial percentage of open source projects are using C (14,0 percent) and C++ (14,2 percent). By October 2019, the TIOBE index -an indicator of the popularity of programming languages, ranked C and C++ as No. 2 and 4, respectively [12]. Furthermore, out of the 839 CWE types, the programming language with the most reported CWE types is C/C++. There are 89 types of weaknesses, i.e., CWE types, that can be found in the C/C++ programming language. C contains 80 CWE types [7], and C++ contains 84 CWE types [8]. For comparison, Java contains 73 CWE types, and PHP contains 23 CWE types. Therefore, in this empirical study, we wish to gain a deeper understanding of the weaknesses in code snippets on Stack Overflow by analyzing C/C++ code snippetswhich is the programming language with the most CWE types out of all programming languages, within answers on Stack Overflow in RQ1. We refer to code snippets on Stack Overflow as the code snippets that are displayed within answers on Stack Overflow in the rest of the paper, if not otherwise specified. We offer actionable suggestions based on our empirical observations to improve the quality of the crowdsourced code knowledge on Stack Overflow.\n\n\nThe Evolution of Code Snippets on Stack Overflow\n\nStack Overflow encourages the community to revise the content of answers, including both textual description and code snippets, to maintain the quality of such answers. Any code snippet in answers can be revised, and new code snippets can be introduced to the answer at either the answer creation phase or revision phase. To illustrate the evolution of code snippets on Stack Overflow, we show both the answer evolution timeline and the two possible code snippet evolution timelines in Fig. 1. Code weaknesses might be introduced at the creation of a code snippet or during the revision phase. Code weaknesses could also be removed during the revision phase. It is interesting to understand if such revisions help in improving the quality of code snippets in terms of their security weaknesses. Therefore, we study how Code w evolve through revisions in RQ2, e.g., when are the code weaknesses introduced, and whether the code revision helps in reducing code weaknesses? In addition, the activity level of contributors may have an impact on the quality of code snippets that they create or revise. For example, whether less active users are more likely to introduce weaknesses compared to more active users. Therefore, we wish to investigate the characteristics of contributors of code weaknesses and their relationship with code weaknesses in RQ3.\n\n\nSTUDY DESIGN\n\nOur study aims to gain a deep understanding of code weaknesses in Stack Overflow C/C++ answers. In this section, we first describe the process to create our datasets. Then we describe the motivation and approach of our study to answer the research questions. Fig. 2 illustrates the research approaches that we follow to conduct our study.\n\n\nData Collection\n\nThis subsection describes how we collect and construct our studied datasets. We first collect C/C++ code snippets from Stack Overflow answers. Then we detect code weaknesses in these collected code snippets by performing static code analysis. We elaborate on the details of each step below.\n\n\nCollecting Code Snippets in Stack\n\nOverflow Answers\n\nOn Stack Overflow, developers post answers to specific questions that other developers ask. In addition to textual content, questions and answers may contain code snippets. Code snippets are segments of source code that are displayed with a gray background color embedded in the <code>. . .</code> HTML tags on Stack Overflow. Users can learn from such code snippets that are posted by others, and might even reuse such code snippets [13], [14], [15]. For example, in Fig. 3, a user posted a vulnerable C/C++ code snippet in a Stack Overflow answer. 10 The answerer posted the code snippet that used the string functions strlcpy/ strlcat. A commenter pointed out that these functions were not safe and provided an alternative secure solution.\n\nWe analyze the SOTorrent dataset to study the weaknesses of shared code measured by the identified CWE types in such snippets. The SOTorrent dataset provides the version history of Stack Overflow at both the post level and the code snippet/text level within a post -question/ answer [16]. Each code snippet has at least one version, i.e., the original version, or multiple versions, i.e., developers made revisions to the original version of the code. To understand security weaknesses in code snippets and their evolution on Stack Overflow, we leverage the version history of code snippets, i.e., code versions.\n\nIn this paper, we focus on studying code snippets in answers that are associated with the C/C++ tags because C/C++ are the languages that have the most security vulnerabilities [10]. More specifically, from the SOTorrent dataset 11 that is published in December 2018, we collect all the code snippets from answers that are associated with the C/ C++ tags and their associated code versions. In SOTorrent, code version history is reconstructed by mapping a code  10. https://stackoverflow.com/a/48032218/ 11. https://zenodo.org/record/2273117#.XZtTyEFKjmE block to its predecessors in prior post versions through syntax-based similarity metrics. As shown in Table 1, from the 1,598,646 answers in the C/C++ tags, we study the 867,734 (i.e., 54.3 percent) answers that have code snippets. From these answers, there are 1,561,550 code snippets, i.e., 14,194,563 lines of code in their latest version, with 1,833,449 code versions in total.\n\nMany code snippets on Stack Overflow are pseudo code or command line functions, which may introduce bias to our study. To mitigate such bias, we further remove code snippets with less than five lines of code from the above-mentioned dataset by following prior studies [16], [17]. Baltes et al. observed that the median line count of code blocks on Stack Overflow is five [16]. We use the median line count (i.e., five lines of code) as a cutoff value to remove trivial code snippets and to ensure our studied code snippets are meaningful. As a result, we obtain 724,784 code snippets (with 919,947 code versions) from 527,932 answers. We also observe that code snippets in answers that are associated with the C/C++ tags are not necessarily C/C++ code. For example, users may tag a question as C/C++, but may put none-code text within the HTML <code>. . .</code> tags. Therefore, we use a tool called Guesslang 12 to determine whether a code snippet is actually written in C/C++. Guesslang generates a probability of a code snippet being one of 20 pre-defined programming languages, including C and C++, with a guessing accuracy higher than 90 percent according to its website. 13 We check the top five language guesses to see if any of them is C or C++ because we notice that this simple criterion gives high accuracy. We manually check the languages predicted by Gueslang using 100 randomly sampled code snippets, which ensure that we can reach a confidence level of 95 percent and a confidence interval of 10 percent. We find that the programming language of 91 (i.e., 91 percent) of these code snippets is correctly determined. By using Guesslang, we obtain 646,716 C/C++ code snippets (with 826,520 code versions) from 490,778 answers.\n\n\nDetecting Weaknesses in Code Snippets\n\nCommon Weakness Enumeration, i.e., CWE, is a communitydeveloped list of common software security weaknesses. 14 In order to detect C/C++ code snippets with weaknesses, i.e., Code w , we use a static C/C++ code analysis tool called Cppcheck 15 to scan all of the 826,520 code versions of the resulting C/C++ code snippets. Cppcheck is a static analysis tool for C/C++ that supports various source code level checks, e.g., memory/resource leaks, automatic variable checking, and bounds checking [18], [19], [20]. It supports static checks that may not be covered by the compiler itself [21]. Cppcheck is widely used in error analysis for software systems, such as OpenOffice.org, 16 and Debian. 17 From prior studies, Cppcheck is observed to be highly precise. For example, Pomorova et al. observed that Cppcheck has a precision of 89 percent [22]. Arusoaie et al. observed that all the reported errors by Cppcheck were accurate in their experiment [23]. Note that Cppcheck can identify 59 out of the 89 types of code weaknesses in C/C++. 18 The accuracy of Cppcheck is subject to a rigorous evaluation. Three raters, i.e., the first three authors, constructed an oracle dataset of 100 C/C++ code weaknesses -CWE instances, on Stack Overflow that were detected by Cppcheck. Each CWE instance was manually examined by at least two raters to determine whether it is a true CWE instance or not. We observe that Cppcheck achieves an accuracy of 0.85 -85 out of the 100 detected CWE instances are labelled as true CWEs. Note that any disagreement was discussed until consensus was reached among the three raters. We also observe that the agreement among the raters is substantial with a Cohen's Kappa of 0.68 [24].\n\nWe observe that 682,588 code versions have no weakness -no CWE is reported for the scanned code snippets, and 143,932 code versions have at least one weakness, i.e., a CWE instance that is reported by Cppcheck). In addition, we collect all the 154,198 CWE instances. Among all the CWE instances, Cppcheck reports that 129,395 CWE instances are related to syntax errors. Such syntax errors are usually due to the incomplete nature of Stack Overflow code snippets. We remove these instances from our analysis and focus on the resulting 24,803 CWE instances in our following study, which come from 11,748 Code w in 11,235 answers. Note that a code snippet with weaknesses can be from either the latest version of an answer or the earlier versions. From these 11,748 Code w , we collect 14,934 code versions with weaknesses, i.e., Version w , out of the 17,591 code versions. Note that these 11,235 answers with code weaknesses -Answer w , are associated with 10,634 questions, indicating that a question can have more than one answer with code weaknesses. In the rest of this paper, we further study these CWE instances and their evolution in Stack Overflow code snippets. In RQ1 (Section 4.1), we analyze Code w and their associated CWE instances from the latest version of answers in order to capture the current state of C/C++ security weaknesses from Stack Overflow. In RQ2 (Section 4.2) and RQ3 (Section 4.3), we analyze the evolution of these Code w in order to capture the evolution of C/C++ security weaknesses and the user aspects of such weaknesses.\n\n\nStudy Approach\n\nThis subsection discusses the approaches of our empirical study. Overflow, in this RQ, we analyze all the C/C++ code snippets in answers and investigate the characteristics of CWE instances that are detected in these code snippets. We wish to find out how commonly each CWE type is detected in the C/C++ code snippets on Stack Overflow, and the impact of these CWE types on real-world software systems. By answering this RQ, we wish to provide insights to developers on potential security risks when reusing Stack Overflow code snippets, and to inform Stack Overflow about potential security risks together with their trends over time, thus further action can be proposed to enhance the quality of crowdsourced code snippets on Stack Overflow. Approach. To understand how common different types of security weaknesses are detected on Stack Overflow, we first analyze the CWE instances and their types as reported by Cppcheck in the code snippets of the latest versions of C/C++ answers. After identifying the types of CWE instances, we analyze the characteristics of different CWE types, e.g., the proportion of each CWE type among all CWE instances and the trend of different CWE types in terms of their number of instances over time, that is, from September 2008 to December 2018.\n\nFurthermore, to evaluate the impact of our detected security weaknesses of each CWE type, we map each CWE type to its associated vulnerabilities in the Common Vulnerabilities and Exposures -CVE, which is a database containing vulnerabilities that are exposed in real-world software systems [25]. While a CWE instance represents common patterns of vulnerabilities in source code, a CVE instance represents actually vulnerable instances within real-world software products or systems. For example, CVE-2019-15916 19 is a denial of service overflow vulnerability reported in the Linux kernel. That CVE is associated with CWE-119, 20 i.e., improper restriction of operations within the bounds of a memory buffer. We wish to characterize the impact of different CWE types by examining the number of CVE instances that are related to each CWE type. A CWE type with a larger number of CVE instances indicates that this CWE type has a more practical impact in terms of security vulnerabilities on real-world software systems. We also use the median score of the Common Vulnerability Scoring System -CVSS, 21 of all the CVE instances within a CWE type to represent the severity of a CWE type. In this study, we are specifically interested in the security impact of each code weakness, i.e., CWE, and cvedetails.com enables us to count the number of CVE instances for each CWE type directly. On the other hand, nvd.nist.gov only lists CVE instances with their associated CWE types. Hence, we collect the vulnerability data from cvedetails.com. To evaluate the impact of different CWE types, we also refer to the 2019 CWE top 25 list that is made by the CWE team [26], [27]. The list ranks weaknesses based on both their prevalence and the severity of their associated CVEs. The list is a demonstration of the most widespread and critical weaknesses with potentially serious vulnerabilities. Weaknesses that are both popular and severe can rank high in the CWE top 25 list.\n\nLastly, to understand how answers with code weaknesses are recognized by the community, i.e., through vote or acceptance of an answer, we analyze the distribution of answer scores across the latest code snippets with different numbers of CWE instances, and calculate the Spearman's rank-order correlation to understand whether answers containing more weaknesses are less likely to be upvoted. We also calculate the proportion of answers with weaknesses that are accepted by the askers to understand whether answers can still contain weaknesses even though they are accepted.\n\n\nRQ2: How Does Code With Weaknesses Evolve\n\nThrough Revisions?\n\nMotivation. Stack Overflow answers, including their associated code snippets, can be revised through revisions as an effort to maintain the quality of the crowdsourced knowledge [28]. Security weaknesses might be introduced or eliminated through the evolution of such code snippets. To gain a deeper understanding of when such Code w are introduced and how they evolve, we study the evolution of Version w . We wish to provide insights into the impact of code revisions on the security weaknesses of code snippets, e.g., whether the revision mechanism helps improve the quality of code snippets in terms of their security weaknesses. Approach. We first investigate when security weaknesses are introduced throughout the evolution of Code w , i.e., which versions of code snippets start to contain weaknesses. To do so, we collect all the versions of C/C++ code snippets, i.e., including the initial and revised code, in Stack Overflow answers, and scan them with Cppcheck to identify CWE instances and their corresponding types. More specifically, we examine all code snippets that have ever been revised and analyze whether revisions help improve such snippets in terms of security weaknesses. We compare the first and last versions of a code snippet and aim to identify the patterns of the evolution, i.e., whether the last version of a code snippet has an additional, a reduced, or an equal number of weaknesses compared to the first version of a code snippet. Furthermore, we exam these patterns within different CWE types. We also analyze code revisions by comparing all the consecutive code versions to understand the evolution of code quality over time.\n\nWe define the code snippets whose last version has more CWE instances than their first version as deteriorated Code w , while code snippets whose last version has less CWE instances than their first version as improved Code w , and code snippets whose last version has the same number of CWE instances as their first version as unchanged Code w . If a code snippet is identified as improved Code w , we consider that revisions to this code snippet improve it in terms of reducing security weaknesses.\n\nWe observe that users can point out the security issues of a code snippet in comments. Therefore, it is also interesting to investigate the relationship between the number of 19 comments of an answer and the quality of Code w , i.e., whether the associated answer of Code w that has more comments is more likely to be improved eventually.\n\n\nRQ3: What are the Characteristics of the Users who Contributed to Code With Weaknesses?\n\nMotivation. During the creation or revision of a code snippet, users may introduce CWE instances in the code snippet as shown in Section 4.2. In this RQ, we study the users who introduce CWE instances, i.e., by either posting or editing code, during the evolution of Code w . Furthermore, we explore the characteristics when they contribute Code w . A better understanding of such users who participate in the evolution of code snippets can provide insights for Stack Overflow to improve their current mechanism, e.g., code revision, for better code security practices.\n\nApproach. We first identify those users who contributed Version w . We examine whether the majority of Version w were contributed by a small group of the users. Next, we examine whether the activity level of a user on Stack Overflow is associated with the likelihood of their involvement in Version w . To do so, we estimate a user's activity level through two aspects: the number of code versions that were performed by a user and the reputation of the user. It is challenging to measure a user's activity level on Stack Overflow. In our study, we use both code revision count in C/C++ posts and reputation points as proxies to measure user activity level. The reputation of a user is a common proxy to measure user activity level in prior studies [5], [29], [30], [31]. However, the reputation of a user is not directly related to his/her activity level on Stack Overflow. For example, a user can have a high reputation even if he/she only asks popular questions and never posts any answer. Therefore, reputation can be biased to the types of activities, i.e., asking or answering, or activities in other programming languages. To alleviate bias from reputation points, we also use the number of code revisions made by a user to measure their activity level in maintaining code snippets on Stack Overflow. Furthermore, we only consider the number of C/C++ code revisions, which directly reflects a user's activity level with regard to C/C++.\n\nWe analyze the correlation between the number of contributed code versions by a user, including both Version w and code versions without weaknesses, and the code weakness density, i.e., the proportion of Version w , in all the posted code versions by the same user. Second, we study the characteristics of those involved users who contribute any code version, including both Version w and code versions without weaknesses, using their gained reputation points, as a proxy for user activity/involvement on Stack Overflow [29], [31]. We examine whether the number of CWE instances within the contributed Version w by a user is correlated with the gained reputation points by the same user. More specifically, we wish to examine whether or not active users in terms of reputation points are more likely to post secure code snippets. Finally, we wish to understand if users repeatedly contribute the same type of weaknesses, i.e., the same CWE type. We calculate the number of CWE instances by a user across different CWE types. For users who repeatedly post the same CWE type, we measure the timespan of the CWE instances between the first and last CWE instance.\n\nMeasurement of User Reputation. The Stack Overflow platform only provides the current reputation points of a user. In order to measure the reputation points of a user when he/she posts or edits a code version, we first crawled 22 the information of all users who posted/edited C/C++ code snippets, including Code w and code snippets without weaknesses, about their daily gain of reputation points. To calculate the reputation points when a user posted/edited a code snippet, we sum up the daily gain of reputation points before the date of the specific code version.\n\n\nQualitative Study: How Does the Stack Overflow\n\nCommunity Respond to Security Issues of C/C++ Code Snippets?\n\nBy the quantitative analyses described in Section 3.2.2, we aim to understand whether code revisions have an impact on the security weaknesses of Stack Overflow code snippets.\n\nTo better explain the impact of code revisions in code weaknesses reduction [32], we conducted a qualitative study to find out the community feedback about the improvement to code weaknesses. More specifically, we randomly selected 40 Answer w from which Cppcheck detected code weaknesses and manually suggested revisions to the corresponding Code w to fix these CWE instances. Then we collected the feedback towards our suggested answer revisions, e.g., approving our suggested edit, or rejecting our suggestion to revise the answer.\n\n\nEVALUATION RESULTS\n\nThis section provides the detailed results of our empirical study for analyzing the characteristics of code with weaknesses -Code w , in terms of the types of weaknesses in Section 4.1 (RQ1), the evolution of Code w in Section 4.2 (RQ2), and the contributors of such code snippets in Section 4.3 (RQ3).  Fig. 4 shows the number of the reported CVE instances 23 that are related to each CWE type. A CWE type with a larger number of CVE instances indicates that this CWE type has a more practical impact in terms of the security vulnerability on real-world software systems. For example, 12,328 CVE instances 24 related to CWE-119 -improper restriction of operations within the bounds of a memory buffer, were reported, e.g., by companies who found CWE instances in their code, while only one CVE instance 25 related to CWE-775 -missing release of file descriptor or handle after effective lifetime, was reported. Such Code w with CWE types that are labeled in red in Fig. 4 probably should be tagged with potential security risks since such CWE types have higher potential impact on real-world software systems.\n\nIn addition, we calculate the viewcount of question threads that are associated with CWE-119/416/190/476/ 415, and find that it is higher than the viewcount for question threads associated with other CWE types -see Appendix B, available in the online supplemental material. Therefore, the former case attracts significantly more traffic, and are more likely to be used by developers. Neglecting the security weaknesses that are associated with CWE types with a large number of CVE instances can expose crowdsourced code snippets with weaknesses and even potentially lead to harmful situations.\n\nAlthough CWE-908/401 are detected frequently (i.e., 54.2/14 percent instances, respectively), no CVE instance is ever reported for these CWE types. In total, there are 20 CWE types with no reported CVE instance. One possible explanation is that these CWE types are either non-critical in real-world software systems or are easy to detect using security analysis tools during in-house testing, in turn minimizing their security risks in real-world software systems. It is also possible that the CVE database only documents certain types of vulnerabilities, while it does not cover vulnerabilities related to such CWE types. We observe that CWE-908 is the most frequently-detected CWE type in our studied code snippets. In a world of code searching and sharing activities on Stack Overflow, developers can post/share a code snippet in which the variables are not properly initialized, making themselves exposed to potential vulnerabilities. For instance, the uninitialized resource, such as a variable, may contain random values or content that are not properly cleared, which may alter the expected program behavior. Therefore, we suggest that developers pay special attention to the missing initialization when reusing C/C++ code snippets from Stack Overflow.\n\nWe observe that of the top 10 CWE types on Stack Overflow in terms of the CWE instance count, CWE-119 and CWE-476 are also in the 2019 CWE top 25 list, with a rank of 1 and 14, respectively. In addition, the top 5 CWE types on Stack Overflow, i.e., CWE-119/416/190/476/772, which are associated with the largest CVE instance count, are all in the 2019 CWE top 25 list, with a rank of 1, 7, 8, 14, and 21, respectively. This finding suggests that the abovementioned CWE types that are prevalent in terms of either CWE count or CVE count have a large security impact.\n\nFurthermore, we observe that CWE-119 that is associated with more than 10K CVE instances contains high severity vulnerabilities with a median CVSS score in the 7.0 -8.9 range. 26 The CWE types, i.e., CWE-416/190/476/772/415/ 369, that are associated with 111 -1256 CVE instances contain medium severity vulnerabilities with a median CVSS score in the 4.0 -6.9 range. Surprisingly, the CWE types that are associated with fewer than 100 CVE instances contain high severity vulnerabilities, except for CWE-665 that has a median severity score of 5.8.\n\nOverall, the proportion of Code w doubled from 2008 to 2018. Furthermore, Code w in certain CWE types, e.g., Fig. 4. The number of detected CWE instances in the latest versions of answers on Stack Overflow, and the number of CVE instances that are related to each CWE type. The intensity level of the color, e.g., red, indicates the frequency of the reported CVE instances in real-world software systems. A darker red indicates that more CVE instances were reported in real-world software systems. The median CVSS score of CVE instances in each CWE type is shown in parentheses within the legend box.  27 We observe that the number of CWE-119 instances dropped from 2008 to 2011 and since then had a rising trend, although in both 2014 and 2017 the number of CWE instances dropped from the preceding years, respectively. The corresponding CVE instances were increasing until 2017 as shown in Fig. 5. In particular, the severity level of CWE-119 is considerably higher than other CWE types. Therefore, we suggest that developers be cautious about these CWE types when reusing code snippets from Stack Overflow answers, especially paying attention to the boundary of memory buffers when reusing C/C++ code snippets on Stack Overflow. We observe that the median score of answers with different numbers of CWE instances is either zero or one. There is no significant correlation between the answer scores and the number of associated CWE instances (p-value = 0.01). Thus, there is no difference in the scores of answers that contain more or less weakness. In addition, out of the 12,998 CWE instances in the latest version of code snippets with weaknesses, 9,535 (i.e., 73.4 percent) are in non-accepted answers, showing that the majority of the code weaknesses are in non-accepted answers.\n\n\n23\n\nWe identify 36 percent (i.e., 32 out of 89) CWE types in Stack Overflow answers. CWE-908use of uninitialized resource, accounts for 54.2 percent of all the CWE instances. In particular, some types of the detected CWEs, such as CWE-119improper restriction of operations within the bounds of a memory buffer, are common in code snippets and are common weaknesses in real-world software systems. We also observe that the proportion of Code w doubled from 2008 to 2018, and that the number of instances in some CWE types, e.g., CWE-775/119/685, is rising in recent years.\n\n\nRQ2: How Does Code With Weaknesses Evolve\n\nThrough Revisions?\n\n92.6 percent (i.e., 10,884) of the 11,748 Code w has weaknesses introduced when their code snippets were initially created on Stack Overflow, and 69 percent (i.e., 8,103 out of 11,748) of the Code w has never been revised, as shown in Table 2. For example, an answer 28 recommended the use of the strcpy function to solve an error when checking if words in an array of pointers to char are the same as words in a function, although a comment pointed out that \"this is bad, it uses scanf and strcpy unsafely, which causes buffer overflows, a very serious security vulnerability\", the answer was never revised.\n\nIn general, more rounds of code revisions are more likely to reduce code weaknesses. In 31 percent (i.e., 3,645) of Code w , there are 6,831 Version w , that is, code versions with weaknesses. In these 3,645 code snippets with weaknesses, there are a total number of 9,488 code versions. Table 2 lists the number of Code w with different revision numbers. Note that a code snippet with zero revision has one version in its history. The proportion of improved Code w increases as the number of revisions increases, indicating that having more code revisions is beneficial in reducing security weaknesses. More specifically, as the number of revisions increases from one to ! three, the proportion of improved Code w increases from 30.1 to 41.8 percent. We also perform a Mann-Whitney test for both the improved and deteriorated Code w with different revision numbers, and find that for each case the last code version is significantly different from the first code version in terms of the number of CWE instances for each Code w (pvalue < 0.05). To illustrate how users revised their code snippets leading to a reduce of weaknesses, we observe an accepted answer 29 that was revised five times. The initial code snippet in the answer contained CWE-562return of stack variable address, while the latest code snippet no longer contained any weakness. The answerer also posted two comments under the question to explain that \"I had to fix my answer so dest wasn't statically allocated ...\", and to further warn that \"... to reduce risk of misuse and memory leaks. A common problem is that people may come back later to make changes 'borrow' a function for quick use in another feature of the program or another solution and miss that fact and introduce a leak. So it's a good precautionary action.\"\n\nIn Code w with different rounds of code revisions, a larger proportion of code snippets have reduced rather than increased the number of their associated security weaknesses. To illustrate, an answer 30 created a file but never closed it. Later, another  user edited the code to properly close the file in order to release the file handler. Table 2 shows that the improved Code w are at least twice more than the deteriorated Code w for different numbers of code revisions. In the circumstances when code revisions introduce more weaknesses, i.e., deteriorated Code w , the proportion of deteriorated Code w slightly increases from 13.3 to 18.9 percent as the number of code revisions increases from one to ! three. Compared with the improved Code w , the deteriorated Code w have more CWE instances that are possibly related to the addition of more LOC to existing code snippets. To test this assumption, we investigate the relationship between the change of lines of code and the change of number of CWE instances from the first to the last version of a code snippet. We calculate the LOC change ratio using the following equation:\n\nLOC change ratio \u00bc LOC\u00f0last\u00de \u00c0 LOC\u00f0first\u00de LOC\u00f0first\u00de ;\n\nwhere LOC\u00f0first\u00de and LOC\u00f0last\u00de present the LOC in the first and last versions, respectively. We calculate the change of the CWE instance number as the change of CWE instances from the first code version to the last code version CWE count\u00f0last\u00de \u00c0 CWE count\u00f0first\u00de:\n\nWe find that the higher the proportion of LOC change ratio, the more the number of CWE instances changes, suggesting that there is a positive correlation between the LOC change ratio and the CWE change. The distribution of the change of CWE instances number in Code w with different ranges of LOC change ratio is shown in Fig. 6. Code weaknesses are more likely to be detected and a Stack Overflow user is exposed to a higher security risk, especially after revising an answer by adding more code. We cannot make any data-supported conclusion of the reasons for this observation, but one possible explanation is that the user is not aware of the security consequences of the provided content, and the chance of having risk increases when more code is given. We compare Code w and code snippets without weaknesses in terms of their revision number to exam whether Code w are more likely to be revised. Among all the 646,716 code snippets that are scanned by Cppcheck, 20.1 percent (i.e., 130,100) have been revised, while a larger proportion, that is, 31 percent (i.e., 3,645 out of 11,748) of Code w have been revised, indicating that Code w are more likely (54.2 percent) to be revised. The rest 69 percent of the Code w have never been revised. Weaknesses are present in these code snippets as they are created and no further action is ever performed. Khandelwal et al. conducted a survey to understand whether gamification helps in peer code review activity, and found that 54 percent of the correspondents were in strong favour of gamification in code review [33]. Therefore, future research may study whether a gamification mechanism can encourage code review and thus alleviate the risk of code weaknesses on Stack Overflow.\n\nWe calculate the change of CWE instances in two consecutive versions in the 3,645 code snippets with at least two code versions (i.e., 5,843 code revisions in total). In the 5,843 code revisions, 3,728 (i.e., 63.8 percent) of them have the same number of CWE instances compared with the preceding code version. 1,400 (i.e., 24.0 percent) of the revisions have fewer CWE instances compared with the preceding code version. 715 (i.e., 12.2 percent) of the revisions have more CWE instances compared with the preceding code version. Therefore, the majority of the consecutive code revisions (i.e., 63.8 percent) do not change code weakness. In the rest (i.e., 36.2 percent) of the code revisions, revisions are more likely to decrease the code weakness than to increase the code weakness. Among all the consecutive code revisions, 24 percent correct code weaknesses, while after multiple code revisions, i.e., comparing the last version with the first version, 33.4 percent eventually correct code weaknesses. Therefore, more weaknesses are eventually fixed even though they were not fixed in earlier revisions. Fig. 7 shows the distributions of code revisions with different numbers of CWE instances. We observe that the time between the first and last version with weaknesses is much shorter than the time from the last version with weaknesses to present time, 31 as shown in Appendix D, available in the online supplemental material. In other words, users do not see much of the earlier versions compared to the latest version, and the latest version is the final version that is presented to users.\n\nWe further examine the impact of code revisions on the number of CWE instances within each CWE type. For each specific CWE type, we extract the number of CWE instances in the last code version, i.e., C last , the number of CWE  instances in the first code version, i.e., C first , and calculate the change of CWE instances as: \u00f0C last \u00c0 C first \u00de=C first .\n\nFor the majority of CWE types, revisions of Code w reduce the number of CWE instances. For each CWE type, we extract all the Code w that contain such CWE instances, and compare the number of CWE instances in this CWE type between the first and last version of the same Code w . As shown in Fig. 8, we observe that the CWE instances increase for only 6 CWE types, i.e., 404/672/682/786/825/910, while it drops for 24 CWE types. To test if the difference is statistically significant, we perform a Wilcoxon signed-rank test for each CWE type by comparing the number of CWE instances between the first and last version (i.e., paired comparisons). In Fig. 8, we label the change of CWE instances with a \u00c3 sign when the difference is statistically significant (i.e., p-value < 0.05). Note that none of the increases in the number of CWE instances for CWE-404/672/682/786/825/910 is statistically significant, indicating that the revisions of Code w do not increase the number of CWE instances significantly. On the other hand, the improved Code w have a statistically significant drop in their number of CWE-119/401/562/664/665/685/687/ 758/762/775/788/908, indicating the revision of such Code w leads to a decrease in the security weaknesses. Note that for the rest of CWE types with a drop in their last code versions, the revision does not lead to a decrease in the security weaknesses, possibly due to the small number of CWE instances in such cases, i.e., a median value of 20, and a maximum value of 78. We encourage users to pay extra attention to the rest of these CWE types.\n\nIn summary, we observe that code revisions are associated with a reduction in the number of security weaknesses in code snippets in general; however, some code revisions can also introduce weaknesses. We suggest online weakness detection tools to be used to identify Code w . We find that the majority of Code w remain unchanged to the community: they are never revised and may be reused by others. We also observe that 4,271 (i.e., 36.4 percent) of Code w are in an answer revision, i.e., weaknesses still exist even after an answer is revised. We suggest Stack Overflow to use better incentives together with weakness detection tools to motivate users to actively reduce code weaknesses through answer revisions, in turn improving the crowdsourced code quality from a security perspective.\n\nWe observe that Code w without any revisions are less likely to have comments in the associated answer, while Code w that are eventually improved have more comments in the associated answer -see Appendix E, available in the online supplemental material. This finding suggests the positive effect of discussions through commenting on improving the quality of code snippets. As shown in Fig. 3, a comment pointed out that the strlcpy/strlcat functions are insecure in an answer although the answer was never edited. Users are recommended to read through the associated comments in an answer in case security knowledge is added by the community through commenting.\n\nMore rounds of code revisions are associated with a reduction in the number of code weaknesses. A larger proportion of Code w have reduced rather than increased the number of security weaknesses. There is a positive correlation between the LOC change ratio and the CWE change number. In the majority of CWE types, code revisions reduce their associated CWE instances. Especially for CWE-119/401/562/664/665/685/687/758/762/775/ 788/908, the number of weaknesses drops significantly. In addition, Code w are more likely (54.2 percent) to be revised than code in general. However, the majority of Code w have weaknesses introduced in the first code version and they are never revised.\n\n\nRQ3: What are the Characteristics of the Users who Contributed to Code With Weaknesses?\n\nThe majority of the C/C++ Version w were contributed by a small number of users. 72.4 percent (i.e., 10,652) of Version w were posted by 36 percent (i.e., 2,292) of users, as shown in Fig. 9. 64.0 percent (i.e., 4,070) of the users who contribute Version w have contributed only one Version w . Among all the 85,165 users who posted C/C++ code snippets, only 7.5 percent (i.e., 6,361) of them posted code snippets that have weaknesses. More active users are less likely to introduce Code w . Fig. 10 illustrates the relationship between the number of code revisions contributed by a user and the weakness density of a user's code. The figure shows that the weakness density of a user's code drops when the number of contributed code revisions by the user increases. In particular, 15.1 percent (i.e., 958) of the users contribute only one code version ever and it is a Version w , as shown by the top left point in Fig. 10. In Fig. 11, we compare the reputation of the contributor for a code version with different numbers of CWE instances in the code  version, which shows that users with higher reputation tend to introduce fewer CWE instances in their contributed code versions.\n\nAs an example, one user has only 6 Version w , while the current reputation of that user is more than 500K. 32 In particular, we show the median user reputation for each group of contributors, and the medium reputation of the contributors to code versions without weaknesses are at least three times higher than the medium reputation of the contributor to Version w . We run a Mann-Whitney test and observe that the difference in contributors' reputation between code versions without weaknesses and Version w is significant with a p-value < 0.05.\n\nIn total, 78.0 percent of users contribute code with only one CWE type. Furthermore, 42.2 percent (i.e., 2,686) of the users contribute only one CWE instance in all their Version w , as shown in Fig. 12. 81.8 percent (i.e., 5,206) of the users contribute less than five CWE instances in all their Version w .\n\nUsers Tend to Commit the Same Types of CWE Instances Repeatedly. For each CWE type, we show the distribution of the number of contributed CWE instances by different users in Fig. 13. The figure suggests that certain Stack Overflow users repeatedly contribute code snippets with specific CWE types. For example, we observe that in CWE-401/775/908 some users contribute code with such CWE types for more than 10 times. In other words, users may not even realize that they are posting code snippets with the same potential security weaknesses repeatedly. For example, one user has contributed CWE-775, i.e., missing release of file descriptor or handle after effective lifetime, for 79 times. 33 Furthermore, we observe that the timespan when users repeatedly post the same CWE type is short for the majority of the CWE types, i.e., a median value of less than one day except for CWE-562 -see Appendix F, available in the online supplemental material. Future tooling support to identify Stack Overflow code vulnerability can actively support users who repeatedly contribute the same code weakness type.\n\nTo better understand how users contribute different CWE types, we analyze the users who actively contribute code weaknesses, i.e., at least five CWE instances, in their Version w . To understand the CWE types that are contributed by each user, we calculate the normalized entropy of the CWE types from his/her posted Code w . More specifically, we wish to measure whether the CWE types that are contributed by a user are concentrated on a small number of CWE. We count the number of CWE instances for each CWE type, and calculate the normalized entropy of the resulting distribution. Fig. 14 shows the distribution of the normalized entropy for 1,153 users who contributed at least 5 CWE instances. An entropy value of 0 indicates that the user only contributed a single type of CWE in their code snippets. We observe that 37.7 percent of users are likely to introduce a single type of CWE instances in their posted code versions.   \n\n\nIMPLICATIONS OF OUR FINDINGS\n\n\nHow Does the Stack Overflow Community\n\nRespond to Security Issues of C/C++ Code Snippets?\n\nIn our qualitative study to understand how the Stack Overflow community responds to code weaknesses, we observe that 25 out of our 40 (i.e., 62.5 percent) suggested revisions are adopted by the Stack Overflow community, i.e., approved by either the answerers themselves or the Stack Overflow moderators. For example, we fixed a potential memory leak caused by inappropriate use of realloc in an answer, 34 which has been adopted by the answerer. Note that no reason was provided when a suggested revision was approved.\n\nFor the suggested revisions that were rejected, the reasons for the rejections can be: \"this edit was intended to address the author of the post and makes no sense as an edit, it should have been written as a comment or an answer.\" For example, our attempt 35 to fix a potential resource leak was rejected by Stack Overflow moderators based on the above-mentioned reason. Note that most of the rejected revisions were done by Stack Overflow moderators. Although they considered the revisions should have been contributed in a different format, they agreed that the revisions addressed security weaknesses. From our experiment, we do note that the posting of a comment before suggesting the actual code revisions can improve the chance of the suggested revisions being adopted [28]. Our experiment indicates that the effort of fixing the detected code weaknesses are acknowledged by the Stack Overflow community; however, we observe that even for the same code weakness, one suggested revision in an associated answer can be approved while a suggested revision in another answer can be rejected. Some moderators may not be aware of the risk of weaknesses in code snippets, and they are possibly rejecting code revisions that aim to improve the security of the shared code snippets on Stack Overflow. In the 15 out of our 40 suggested revisions that were rejected, the different reasons are summarized in Appendix G, available in the online supplemental material.\n\nThe feedback from the Stack Overflow community highlights the need of a tool to automatically detect and correct Code w , which can identify vulnerable C++ code snippets and warn the user with both explanation and mitigation of the vulnerability as proposed in [6]. Table 3 shows our major findings from empirically mining the C/C++ Code w on Stack Overflow and their implications.\n\n\nImplications for Stack Overflow Users\n\nWe find that certain types of weaknesses, e.g., CWE-119, are common on Stack Overflow while also popular in realworld software systems. We suggest users to pay attention to operations at the bounds of the memory buffer in their code.\n\nOverall, users should be cautious when reusing code from Stack Overflow, since we find the proportion of Code w have doubled during 10 years, i.e., 2008 -2018. Furthermore, the frequency of CWE-775/119/685 is rising in recent years. Certain users are repeatedly contributing the same type of weaknesses. New mechanism can be designed to alert such users about their security issues when they contribute Stack Overflow code snippets. Based on our finding that code revisions are associated with a reduction in code weaknesses, additional efforts are needed to better assist developers with removing code weaknesses.\n\nWe observe that more active users on Stack Overflow contribute fewer Code w . Code revisions, especially the ones that reduce code weaknesses, can be rewarded by extra reputation points and/or badges to improve the quality of the crowdsourced code snippets on Stack Overflow. Note that prior work [5] observe that the user reputation does not correlate with insecure Python code snippets on Stack Overflow. One assumption is that different programming languages may have different phenomenons. We encourage future research to investigate the usage patterns of code vulnerability across different programming languages.\n\nFurthermore, the answerers who contributed more code weaknesses are less active since we observe that more active users contributed fewer Version w . We suggest that Stack Overflow can scan the code snippets online when users post answers. Therefore, inactive users can be alerted about their potentially insecure code before they contribute such code in their answers. Our qualitative study of 40 Code w demonstrates the value of online code review to actively improve the security quality of the code base on Stack Overflow, together with commenting on code weaknesses.\n\nCurrently, it is up to the users themselves to decide whether code snippets are secure enough to share and/or reuse on Stack Overflow. To illustrate the current situation of code security on Stack Overflow, we show a Stack Overflow META discussion. 36 In the question, the asker cited that \"Internet resources such as Stack Overflow are blamed for  promoting insecure solutions that are naively copypasted by inexperienced developers\", and asked that \"does this mean we should do something about it or is it all the developers fault?\". In the two associated answers within this question, one answer starts with \"no, we don't have to change a thing\", while the other starts with \"I don't think we have to change anything systematically.\" Thus, on Stack Overflow META, the opinions of how code security should be maintained show that both the community and the platform do not need to be responsible for improving code security. Our study analyzes how the improvement of code security is done in real-world practices on Stack Overflow. We observe more than 10,000 code weaknesses in our experiment. Our qualitative study demonstrates that actively tagging code with weaknesses is accepted by the community, leading to an improvement of the crowdsourced code quality.\n\n\nTHREATS TO VALIDITY\n\nExternal Validity. In this study, we focus on C/C++ code snippets, while code snippets in other programming languages may have distinct characteristics from our findings of C/C++ code snippets. We encourage future research to investigate security weaknesses in other programming languages. Furthermore, we only investigate code snippets from Stack Overflow answers. Note that code snippets from questions can also have weaknesses. Since questions are posted by askers to seek solutions for their problems, the code snippets in questions are probably problematic to start with. However, code snippets in answers are posted by users who aim to solve issues. Their code snippets are shared more frequently. Therefore, we study code snippets in answers to provide security related insights.\n\nTo mitigate the bias from pseudo code or command line functions, we remove code snippets with less than five lines of code. We may lose a portion of code snippets. However, we do note that there is no standard way to determine the threshold for removing such code snippets, and we follow prior studies [16], [17] in using a threshold of five lines of code. In addition, we use the Guesslang tool to determine whether a code snippet is written in C/C++. Guesslang is based on a deep learning model trained with source code files. Although the accuracy of the tool is evaluated to be 91 percent from our 100 randomly sampled code snippets, around 10 percent of our collected C/C++ code snippets can be false positives. Code snippets that are not in C/C++ can be introduced in our study and may bias our understanding of code weaknesses in Stack Overflow answers. We encourage future research to develop more accurate techniques to identify C/C++ code snippets.\n\nWe detect code snippets with weaknesses using Cppcheck. Cppcheck can identify 59 out of the 89 types of C/C++ code weaknesses. The results that are generated by Cppcheck can contain false positives, which may bias our results, although it aims to minimize false positives. 37 In order to understand the bias of studying the code snippets with Cppcheck, we manually evaluated the accuracy of Cppcheck in Section 3.1.2 and found that it has an accuracy of 0.85.\n\nInternal Validity. When we scan code snippets with Cppcheck, we skip any code snippet that returns syntax errors. Such code snippets are probably code segments that miss a substantial part of the compilable code, thus are not included in our study. This approach may not capture all types of security weaknesses in C/C++ code snippets on Stack Overflow. We evaluate users' activity level by their reputation points on Stack Overflow. It is possible that a user has gained reputation points by activities in other tags. Thus, the gained reputation points may not accurately To complement this, we also consider the number of code revisions that a user has done as the proxy of the activity level of the user.\n\nWe note that there is no single approach that can fully specify the impact of code weaknesses. To provide a thorough view of the impact of code weaknesses, in this study we evaluate the impact of different CWE types by referring to both the CVSS scores and the 2019 CWE top 25 list to provide an overview picture of the impact of CWEs in real world projects. While the CVSS score assesses the severity of a CVE instance, the 2019 CWE top 25 list characterizes the impact of a code weakness that can potentially lead to software vulnerabilities. The CWE top 25 list is provided by the CWE team in evaluating the impact of each CWE type. This approach uses vulnerabilities that have CVE records in the National Vulnerability Database -NVD. However, even in the same top 25 list, some CWE types may have a higher severity score than others, and weaknesses that are not included in the list can still have an impact while being underrepresented in the CWE top 25 list. In addition, the vulnerabilities that are reported by their vendors in the CVE dataset may not represent all the security risks that developers encounter. Last but not least, we use the CWE top 25 list that was published in 2019, while the list itself can evolve over time with their rankings changed or certain CWE types added/removed in the future. Although the majority (i.e., 22) of the CWE types in 2019 still remain as the top 25 in 2020, the interpretation of our analysis reflects the exposure of code weaknesses in 2019. We encourage future work to evaluate the impact of code weaknesses on Stack Overflow, for example, by considering an industry standard third party independent list of security impact, or conducting user surveys. Future work can also study the evolution of code weaknesses over time.\n\nConstruct Validity. Threats related to the construct validity is related to how we define a code snippet as unchanged/improved/deteriorated in terms of its weakness. In our study, we use the number of CWE instances that are detected by Cppcheck as a proxy to measure the quality of a code snippet. However, certain CWE types are more severe than other CWE types. Thus, a quantitative measure, e.g., CWE count, that indicates the quality of code may be biased, as one CWE instance may be more severe than multiple CWE instances combined. To evaluate the impact of code weaknesses, we also show in Fig. 4 the median CVSS score, i.e., a score to represent the severity of software vulnerabilities, of CVE instances that are crawled from cvedetails.com in July 2020 in each CWE type in Section 4.1. According to NVD, 38 a CVSS score of 4.0 to 6.9 is considered medium severity, and a CVSS score of 7.0 to 10.0 is considered high severity. To further understand how code weaknesses are evolving, we also analyze the change of CWE instances for different CWE types in Fig. 8. Furthermore, in our experiment of reporting the results of our scanned code weaknesses on Stack Overflow, 62.5 percent of the identified weaknesses were acknowledged and addressed by users, indicating that Cppcheck can detect code weaknesses that are of concern by the Stack Overflow community.\n\nAnother threat to our construct validity is about how we measure the activity level of a user. It is challenging to measure a user's activities on Stack Overflow. In our study, we use both code revision count and reputation points as proxies to measure user activities. Although these two proxies may introduce bias, our results that are observed based on them are aligned. Future research can explore other metrics to characterize user activities and understand how different users post insecure code snippets on Stack Overflow.\n\nIn RQ3, we select the users that have contributed more than five CWE instances. The threshold selection could be a construction threat to our results. To mitigate the threat, we set the threshold of at least two CWE instances from a user and observed that our result still holds. For 3,666 users who contributed at least two CWE instances, the majority (i.e., 61.8 percent) of users are likely to introduce a single CWE type in their posted code versions.\n\n\nRELATED WORK\n\n\nSecurity in Software Systems\n\nCode security is a critical issue in software engineering. Vulnerable code can undermine the quality of software systems. A remarkable research effort has been invested in the security issues of software systems. For example, Pletea et al. found that 10 percent of discussions on GitHub are related to security [34]. Acar et al. surveyed security guidance resources on the web to inform developers about how to write secure code [35]. Especially, C/C++ security issues are commonly studied in the literature [36], [37], [38], [39], [40], [41], [42], [43]. Alnaeli et al. analyzed how vulnerable source code is used in 15 C/C++ software systems. They showed that vulnerable functions, such as strcmp, strlen and memcpy, play a major roles in unsafe code [42]. Mcheick et al. proposed a tool to detect memory management and type errors in C/C++ based on runtime information [40]. Yang et al. proposed an approach in a commercial security analysis tool to assist developers in fixing software vulnerabilities [44]. Different from prior studies that focus on security at the system level, we focus our study on code snippets.\n\n\nStudying Code on Stack Overflow\n\nFor more than 10 years, Stack Overflow has accumulated questions and answers related to programming, including millions of code snippets. Stack Overflow code snippets are valuable resources for developers. They have been actively studied in the software engineering community. Yang et al. studied the usability of code snippets across C#, Java, Java-Script and Python [15]. They observed that Python and Java-Script code snippets are more parsable/runnable than Java/ C#. An et al. analyzed 399 Android apps to investigate potential license violations when developers reuse code snippets from Stack Overflow and from Android apps into Stack Overflow [13]. Treude et al. surveyed how Stack Overflow code snippets are self-explanatory [45]. Campos et al. analyzed JavaScript code snippets on Stack Overflow and flagged violations, such as errors and stylistic issues [46].\n\nTo better understand whether security issues exist and how they are present in the crowdsourced knowledge of 38. https://nvd.nist.gov/vuln-metrics/cvss Stack Overflow, prior studies investigated various security aspects on Stack Overflow. For example, Yang et al. investigated security-related questions on Stack Overflow. They identified both popular and difficult topics related to security that are asked on Stack Overflow [47]. Barua et al. explored the discussion topics on Stack Overflow and identified security as a diverse topic that crosses multiple domains [48]. Fischer et al. analyzed insecure code snippets related to Android on Stack Overflow, and found that 15 percent of 1.3 million Android applications contained insecure code snippets from Stack Overflow [2]. Meng et al. inspected Stack Overflow threads that are related to Java security and identified the root causes and solutions for Java secure coding [4]. Chen et al. extracted Stack Overflow code snippets related to Java security and observed that at least 41 percent of their inspected security-related answers are insecure [31]. Acar et al. surveyed the security quality of Stack Overflow threads and observed that although Stack Overflow crowdsourced knowledge is accessible compared with official API documentation it often leads to insecurity [49]. Lopez et al. conducted a study to examine how users ask questions related to security on Stack Overflow. They found that security conversations are rich, and some askers and commenters are actively involved in such conversations [50]. Rahman et al. analyzed Python code snippets on Stack Overflow and found that they suffered from insecure coding practices such as code injection [5].\n\nPrior studies examined vulnerabilities on Stack Overflow for Android [2], Java [4], and Python [5]. Different from these studies, our study focuses on C/C++ code snippets, which is the programming language with the most CWE types out of all programming languages -giving us a much larger number of observations. We have a number of observations. For instance, a prior study [5] notes that the user reputation does not correlate with insecure Python code snippets on Stack Overflow, which is the opposite of our finding. In their study, user reputation is normalized by the membership period of a user. We also calculated the normalized user reputation and our findings still hold in terms of the reputation points normalized by time -more active users contribute fewer C/C++ code weaknesses. Different programming language communities may have different user contributions in terms of code weaknesses. In addition, we studied how code weaknesses evolve through revisions and the characteristics of the contributors of these code weaknesses.\n\nC/C++ code weaknesses on Stack Overflow have not been extensively studied in prior work. In [6], Verdi et al. observed that the number of both CWE and vulnerable answers drops over the years. 39 Different from their study, we observe that the proportion of code snippets with C/C++ weaknesses are increasing over the years from 2009 to 2018. The difference in the research design may contribute to the differences between the two findings. For example, Verdi et al. studied answers with the C++ tag, while in our study answers from both the C and C++ tags are examined. In our qualitative study, we observe that users do care about code weaknesses, i.e., Stack Overflow moderators/users frequently fixed the code weaknesses that we reported. Our study highlights the need for a better mechanism to improve the management of Code w , especially given that the number of code weaknesses is increasing over time but weakness maintenance efforts are not increasing proportionally, leading to Stack Overflow becoming a more and more insecure platform for crowdsourced knowledge sharing.\n\nIn addition, Verdi et al. analyzed the prevalence of the migration of vulnerable C++ code snippets from Stack Overflow to GitHub [6], while our study focuses on all C/C ++ code snippets on Stack Overflow, including both code snippets that are possibly migrated to GitHub and code snippets that are not migrated to GitHub. Code snippets with weaknesses may pose a risk even if they have yet to migrate to GitHub. For example, code snippets may be already in use by commercial systems or other open source systems that are not hosted publicly on GitHub; in addition, such vulnerable code may get migrated to GitHub in the future. Besides analyzing the vulnerability types, we also analyze the revision history of Code w and users that contribute such code snippets. We obtain insightful observations, e.g., revisions do help reduce the number of CWE instances, and some contributors repeat the same CWE throughout their different contributions.\n\nIn this paper, we conduct a large-scale empirical study to analyze all code snippets in Stack Overflow answers tagged with C/C++. We are the first study that studies the weaknesses of C/C++ code, which is known to have the most security vulnerabilities [10]. We provide insights to developers so their code sharing activities lead to fewer security risks.\n\n\nCONCLUSION\n\nCode snippets on Stack Overflow are shared widely by developers and code security is a critical condition for reuse. In this study, we investigate the weakness of C/C++ code snippets on Stack Overflow by scanning 646,716 C/C++ code snippets in Stack Overflow answers using Cppcheck. We identified 32 types of code weaknesses on Stack Overflow, and observed that some CWE types, i.e., CWE-119/ 416/190/476/415, are also associated with many vulnerabilities in real-world software systems. In order to explore how Code w evolve, we analyze the revision history of such Code w and find that more code revisions are associated with a reduction of code weaknesses. Our analysis also shows that more active users contribute fewer Version w . Our findings can be leveraged by future studies to improve the quality of Stack Overflow's crowdsourced code snippets.\n\nFig. 1 .\n1Possible timelines for code snippet evolution during the answer creation and revision phases.Fig. 2. Overview of our research approaches.\n\nFig. 3 .\n3An example of an accepted answer with a comment which flags the unsafe use of the string functions in the posted code snippet.\n\nFig. 5 .\n5The growth of the number of CWE-119 instances normalized by the number of C/C++ code snippets in each year. The growth of CVE instances related to CWE-119 is also shown.\n\nFig. 6 .\n6The distribution of the change of CWE instances number across different ranges of LOC change ratio. The negative CWE change occurs within the improved Code w . The zero CWE change occurs within the unchanged Code w . The positive CWE change occurs within the deteriorated Code w .\n\nFig. 7 .\n7The distribution of code revisions with different number of CWE instances in an unchanged, improved, and deteriodated revision, respectively.31. As of December 2018, when our data was collected.\n\nFig. 8 .\n8The change of CWE instances for different CWE types. * indicates that the change is statistically significant (i.e., p-value < 0.05).\n\nFig. 9 .\n9The accumulative proportion of Version w that were posted by the proportion of users.\n\nFig. 10 .\n10As the number of code revisions increases for a user, the density of contributed Version w by that user drops.\n\nFig. 11 .\n11The distribution of user reputation points for users who contribute code versions both without and with different numbers of CWE instances.\n\nFig. 12 .\n12The number/proportion of users who contribute a different number of CWE instances.Fig. 13. The distribution of contributed CWE instances by different users for different CWE types. 32. https://stackoverflow.com/users/505088/ 33. https://stackoverflow.com/users/3422102/ The majority (i.e., 72.4 percent) of Version w were contributed by 36 percent of the users who contributed Version w . Only 7.5 percent of users who contributed C/ C++ code snippets had code weaknesses. Users contribute fewer Version w as their activities increase in terms of both the number of contributed code versions and the gained reputation. 78.0 percent of the users contribute only one CWE type, and users tend to have the same CWE type repeatedly in their contributed code.\n\nFig. 14 .\n14The distribution of entropy for CWE instances of different types.\n\nTABLE 1 The\n1Statistics of the Studied Code Snippets \nWith Weaknesses, i.e., Code w \n\nAnswer # \nCode Snippet # \nCode Version # \n\nSOTorrent \n867,734 \n1,561,550 \n1,833,449 \nLOC > = 5 \n527,932 \n724,784 \n919,947 \nGuesslang \n490,778 \n646,716 \n826,520 \nCode w \n11,235 \n11,748 \n14,934 \n\n\n\n\n. https://www.cvedetails.com/cve/CVE-2019-15916/ 20. https://cwe.mitre.org/data/definitions/119.html 21. https://nvd.nist.gov/vuln-metrics/cvss\n\n\n4.1 RQ1: What are the Types of Code Weaknesses That are Detected in C/C++ Code Snippets on Stack Overflow? 36 percent (i.e., 32 out of 89) of all the C/C++ CWE types are identified in the C/C++ code snippets on Stack Overflow. 12,998 CWE instances are identified within the latest versions of the 7,481 answers. Fig. 4 shows the number of CWE instances in each of the 32 CWE types. The definition of our detected CWE types can be found in Appendix A, which can be found on the Computer Society Digital Library at http:// doi.ieeecomputersociety.org/10.1109/TSE.2021.3058985. The top six most frequent CWE types are: CWE-908, i.e., the use of an uninitialized resource, with 7,041 (54.2 percent) instances:The resource is not properly initialized, and the program can change in an unintended way. CWE-401, i.e., improper release of memory before removing last reference, with 1,820 (14 percent) instances: Memory is not properly released, and an attacker may take advantage of the program in a low memory condition or even launch a denial of service attack. 22. We crawled the data on May 12, 2019. CWE-775, i.e., missing release of file descriptor or handle after effective lifetime, with 672 (5.2 percent) instances:A file handler is not explicitly closed after it is used, and an attacker can prevent other processes from accessing the resource. CWE-562, i.e., return of stack variable address, with 612 (4.7 percent) instances:A function call returns an address on the stack, and the value referenced by the address can change unexpectedly. CWE-119, i.e., improper restriction of operations within the Bounds of a Memory Buffer, with 518 (4 percent) instances:A program can read from or write to a memory location outside of a buffer, and arbitrary code may be executed by redirecting a function pointer to malicious code. CWE-758, i.e., reliance on undefined, unspecified, or implementation-defined behavior, with 482 (3.7 percent) instances:A property may change its behavior when the software is ported to a different platform. Certain CWE types, e.g., CWE-119/416/190/476/415, are associated with more security risks in real-world software systems. More specifically, CWE-119/416/190/476/415 have a larger number of related CVE instances, with 12,285/1,073/ 996/803/151 CVE instances, respectively.\n\n\n. The data was obtained on June 28, 2019. 24. https://www.cvedetails.com/vulnerability-list/cweid-119/vulnerabilities.html \n25. https://www.cvedetails.com/vulnerability-list/cweid-775/ \nvulnerabilities.html \n26. https://nvd.nist.gov/vuln-metrics/cvss \nCWE-119, has increased in recent years. The growth trend of \nCode w and CWE instance count in each individual CWE \ntype are shown in Appendix C, available in the online \nsupplemental material. To further understand the impact \nof such growing CWE types, we analyze the trend of \nCWE-119, which is the CWE type with the largest number \nof CVE instances in real-world software systems, and its \nrelated CVE instances. \n\nTABLE 2 The\n2Number/Proportion of Code w versus Different Number of Code Revisions The data is collected by crawling the CVE information website on October 9, 2019 at https://www.cvedetails.com/vulnerability-list/ cweid-119/vulnerabilities.html 28. https://stackoverflow.com/a/52807726/ 29. https://stackoverflow.com/a/41971294/ 30. https://stackoverflow.com/revisions/18637122/3/#Revisions #Code w #Unchanged #Improved #Deteriorated \n\n0 \n8,103 \nNA \nNA \nNA \n! 1 \n3,645 1,886 (51.7%) 1,218 (33.4%) 541 (14.8%) \n1 \n2,369 1,340 (56.6%) 714 (30.1%) 315 (13.3%) \n2 \n774 \n349 (45.1%) 294 (38.0%) 131 (16.9%) \n! 3 \n502 \n197 (39.2%) 210 (41.8%) 95 (18.9%) \n\n\n\nTABLE 3 Our\n3Major Findings From Empirically Mining the C/C++ Code w on Stack Overflow and Their Implications 37. http://cppcheck.sourceforge.net/manual.pdf reflect the activity level in C/C++ programming languages.\nAuthorized licensed use limited to: Univ of Texas at Dallas. Downloaded on August 10,2023 at 22:38:35 UTC from IEEE Xplore. Restrictions apply.\n\" For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/csdl.\nHe also worked with Synopsys as a software engineer for two years and worked with BlackBerry as a software performance engineer for another two years. His research interests lie within software engineering, in particular, software observability, intelligent operations of software systems, software log mining, software performance engineering, and mining software repositories. More information at: https://www. hengli.org.Tse-Hsun Chen received the BSc degree from the University of British Columbia, Vancouver, Canada, and the MSc and PhD degrees from Queen's University, Kingston, Canada. He is an assistant professor with the Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada. He leads the Software Performance, Analysis, and Reliability (SPEAR) Lab, which focuses on conducting research on performance engineering, program analysis, log analysis, production debugging, and mining software repositories. His work has been published in flagship conferences and journals such as ICSE, FSE, IEEE Transactions on Software Engineering, Empirical Software Engineering, and MSR. He serves regularly as a program committee member of international conferences in the field of software engineering, such as ASE, ICSME, SANER, and ICPC, and he is a regular reviewer for software engineering journals such as the Journal of Systems and Software, Empirical Software Engineering, and IEEE Transactions on Software Engineering. Besides his academic career, he also worked as a software performance engineer with Black-Berry for more than four years. Early tools developed by him were integrated into industrial practice for ensuring the quality of large-scale enterprise systems. For more information, please visit http://petertsehsun. github.io/.Ahmed E. Hassan (Fellow, IEEE) received the PhD degree in computer science from the University of Waterloo, Waterloo, Canada. He is an ACM SIGSOFT influential educator, an NSERC steacie fellow, the Canada research chair (CRC) in software analytics, and the NSERC/BlackBerry software engineering chair with the School of Computing, Queen's University, Canada. His research interests include mining software repositories, empirical software engineering, load testing, and log mining. He spearheaded the creation of the Mining Software Repositories (MSR) conference and its research community. He also serves/d on the editorial boards of IEEE Transactions on Software Engineering, Springer Journal of Empirical Software Engineering, and PeerJ Computer Science. For more information, please visit http://sail.cs.queensu.ca/.\nHow do developers utilize source code from stack overflow?. Y Wu, S Wang, C.-P Bezemer, K Inoue, Empir. Softw. Eng. 242Y. Wu, S. Wang, C.-P. Bezemer, and K. Inoue, \"How do develop- ers utilize source code from stack overflow?,\" Empir. Softw. Eng., vol. 24, no. 2, pp. 637-673, 2019.\n\nStack overflow considered harmful? The impact of copy & paste on Android application security. F Fischer, Proc. IEEE Symp. IEEE SympF. Fischer et al., \"Stack overflow considered harmful? The impact of copy & paste on Android application security,\" in Proc. IEEE Symp. Secur. Privacy, 2017, pp. 121-136.\n\nVulnerability (computing). Wikipedia, AccessedWikipedia, \"Vulnerability (computing).\" Accessed: Feb. 01, 2020. [Online]. Available: https://en.wikipedia.org/wiki/Vulnerability_ (computing)\n\nSecure coding practices in Java: Challenges and vulnerabilities. N Meng, S Nagy, D Yao, W Zhuang, G Arango-Argoty, Proc. 40th Int. 40th IntN. Meng, S. Nagy, D. Yao, W. Zhuang, and G. Arango-Argoty, \"Secure coding practices in Java: Challenges and vulnerabilities,\" in Proc. 40th Int. Conf. Softw. Eng., 2018, pp. 372-383.\n\nSnakes in paradise?: Insecure python-related coding practices in stack overflow. A Rahman, E Farhana, N Imtiaz, Proc. IEEE/ACM 16th Int. Conf. Mining Softw. Repositories. IEEE/ACM 16th Int. Conf. Mining Softw. RepositoriesA. Rahman, E. Farhana, and N. Imtiaz, \"Snakes in paradise?: Insecure python-related coding practices in stack overflow,\" in Proc. IEEE/ACM 16th Int. Conf. Mining Softw. Repositories, 2019, pp. 200-204.\n\nAn empirical study of C++ vulnerabilities in crowd-sourced code examples. M Verdi, A Sami, J Akhondali, F Khomh, G Uddin, A K Motlagh, arXiv:1910.013212021M. Verdi, A. Sami, J. Akhondali, F. Khomh, G. Uddin, and A. K. Motlagh, \"An empirical study of C++ vulnerabilities in crowd-sourced code examples,\" 2021, arXiv:1910.01321.\n\nWeaknesses in software written in C. MITRE. MITRE, \"Weaknesses in software written in C.\" Accessed: Oct. 01, 2019. [Online]. Available: https://cwe.mitre.org/data/ definitions/658.html\n\nWeaknesses in software written in C++. MITRE. MITRE, \"Weaknesses in software written in C++.\" Accessed: Oct. 01, 2019. [Online]. Available: https://cwe.mitre.org/data/ definitions/659.html\n\nWhat are the most secure programming languages. Whitesource, AccessedWhiteSource, \"What are the most secure programming languages?\" Accessed: Jan. 04, 2020, 2019. [Online]. Available: https://www. whitesourcesoftware.com/most-secure-programming-languages/\n\nWhich programming language has the most security vulnerabilities?. Slashdot, AccessedSlashdot, \"Which programming language has the most security vulnerabilities?\" Accessed: Jan. 04, 2020, 2019. [Online]. Available: https://developers.slashdot.org/story/19/03/25/0322202/which- programming-language-has-the-most-security-vulnerabilities\n\nYou get where you're looking for: The impact of information sources on code security. Y Acar, M Backes, S Fahl, D Kim, M L Mazurek, C Stransky, Proc. IEEE Symp. Secur. Privacy. IEEE Symp. Secur. PrivacyY. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky, \"You get where you're looking for: The impact of information sources on code security,\" in Proc. IEEE Symp. Secur. Privacy, 2016, pp. 289-305.\n\nProgramming Language C awarded Programming Language of the Year 2019. Tiobe, TIOBE, \"Programming Language C awarded Programming Language of the Year 2019.\" Accessed: Oct. 01, 2019. [Online].\n\nStack overflow: A code laundering platform?. L An, O Mlouki, F Khomh, G Antoniol, Proc. IEEE 24th Int. Conf. Softw. Anal. Evol. Reeng. IEEE 24th Int. Conf. Softw. Anal. Evol. ReengL. An, O. Mlouki, F. Khomh, and G. Antoniol, \"Stack overflow: A code laundering platform?,\" in Proc. IEEE 24th Int. Conf. Softw. Anal. Evol. Reeng., 2017, pp. 283-293.\n\nOn code reuse from StackOverflow: An exploratory study on android apps. R Abdalkareem, E Shihab, J Rilling, Inf. Softw. Technol. 88R. Abdalkareem, E. Shihab, and J. Rilling, \"On code reuse from StackOverflow: An exploratory study on android apps,\" Inf. Softw. Technol., vol. 88, pp. 148-158, 2017.\n\nFrom query to usable code: An analysis of stack overflow code snippets. D Yang, A Hussain, C V Lopes, Proc. 13th Int. Conf. Mining Softw. Repositories. 13th Int. Conf. Mining Softw. RepositoriesD. Yang, A. Hussain, and C. V. Lopes, \"From query to usable code: An analysis of stack overflow code snippets,\" in Proc. 13th Int. Conf. Mining Softw. Repositories, 2016, pp. 391-402.\n\nSOTorrent: Reconstructing and analyzing the evolution of stack overflow posts. S Baltes, L Dumani, C Treude, S Diehl, Proc. 15th Int. Conf. Mining Softw. Repositories. 15th Int. Conf. Mining Softw. RepositoriesS. Baltes, L. Dumani, C. Treude, and S. Diehl, \"SOTorrent: Reconstructing and analyzing the evolution of stack overflow posts,\" in Proc. 15th Int. Conf. Mining Softw. Repositories, 2018, pp. 319-330.\n\nSpotting working code examples. I Keivanloo, J Rilling, Y Zou, Proc. 36th Int. Conf. Softw. Eng. 36th Int. Conf. Softw. EngI. Keivanloo, J. Rilling, and Y. Zou, \"Spotting working code exam- ples,\" in Proc. 36th Int. Conf. Softw. Eng., 2014, pp. 664-675.\n\nCase study: Static security analysis of the android goldfish kernel. T Liu, R Huuck, Proc. Int. Symp. Formal Methods. Int. Symp. Formal MethodsT. Liu and R. Huuck, \"Case study: Static security analysis of the android goldfish kernel,\" in Proc. Int. Symp. Formal Methods, 2015, pp. 589-592.\n\nIntegrating static analysis tools for improving operating system security. A Joshi, A Tewari, V Kumar, D Bordoloi, Int. J. Comput. Sci. Mobile Comput. 34A. Joshi, A. Tewari, V. Kumar, and D. Bordoloi, \"Integrating static analysis tools for improving operating system security,\" Int. J. Comput. Sci. Mobile Comput., vol. 3, no. 4, pp. 1251-1258, 2014.\n\nAutomatic grader for programming assignment using source code analyzer. S V Yulianto, I Liem, Proc. Int. Conf. Data Softw. Int. Conf. Data SoftwS. V. Yulianto and I. Liem, \"Automatic grader for programming assignment using source code analyzer,\" in Proc. Int. Conf. Data Softw. Eng., 2014, pp. 1-4.\n\nA survey of C and C++ software tools for computational science. D J Worth, C Greenough, L Chin, Sci. Technol. Facilities Council. D. J. Worth, C. Greenough, and L. Chin, \"A survey of C and C++ software tools for computational science,\" Sci. Technol. Facilities Council, pp. 1-38, 2009.\n\nAssessment of the source code static analysis effectiveness for security requirements implementation into software developing process. O V Pomorova, D O Ivanchyshyn, Proc. IEEE 7th Int. Conf. Intell. Data Acquisition Adv. IEEE 7th Int. Conf. Intell. Data Acquisition AdvO. V. Pomorova and D. O. Ivanchyshyn, \"Assessment of the source code static analysis effectiveness for security requirements implementation into software developing process,\" in Proc. IEEE 7th Int. Conf. Intell. Data Acquisition Adv. Comput. Syst., 2013, pp. 640-645.\n\nA comparison of static analysis tools for vulnerability detection in C/C++ code. A Arusoaie, T Ciob\u00e2c A, V Cr Aciun, D Gavrilut, D Lucanu, Proc. Int. Symp. Symbolic Numeric Algorithms Sci. Comput. Int. Symp. Symbolic Numeric Algorithms Sci. ComputA. Arusoaie, T. Ciob\u00e2c a, V. Cr aciun, D. Gavrilut, and D. Lucanu, \"A comparison of static analysis tools for vulnerability detection in C/C++ code,\" in Proc. Int. Symp. Symbolic Numeric Algorithms Sci. Comput., 2017, pp. 161-168.\n\nAn application of hierarchical kappa-type statistics in the assessment of majority agreement among multiple observers. J R Landis, G G Koch, Biometrics. 33J. R. Landis and G. G. Koch, \"An application of hierarchical kappa-type statistics in the assessment of majority agreement among multiple observers,\" Biometrics, vol. 33, pp. 363-374, 1977.\n\nCategorizing and predicting invalid vulnerabilities on common vulnerabilities and exposures. Q Chen, L Bao, L Li, X Xia, L Cai, Proc. 25th Asia-Pacific Softw. 25th Asia-Pacific SoftwQ. Chen, L. Bao, L. Li, X. Xia, and L. Cai, \"Categorizing and pre- dicting invalid vulnerabilities on common vulnerabilities and exposures,\" in Proc. 25th Asia-Pacific Softw. Eng. Conf., 2018, pp. 345-354.\n\n2019 CWE top 25 most dangerous software errors. MITRE. MITRE, \"2019 CWE top 25 most dangerous software errors.\" Accessed: Jan. 28, 2021, 2019. [Online]. Available: https://cwe. mitre.org/top25/archive/2019/2019_cwe_top25.html\n\nImproving software security by eliminating the CWE top 25 vulnerabilities. M Howard, IEEE Secur. Privacy. 73M. Howard, \"Improving software security by eliminating the CWE top 25 vulnerabilities,\" IEEE Secur. Privacy, vol. 7, no. 3, pp. 68-71, May/Jun. 2009.\n\nHow do users revise answers on technical Q&A websites? A case study on stack overflow. S Wang, T.-H Chen, A E Hassan, IEEE Trans. Softw. Eng. 469S. Wang, T.-H. Chen, and A. E. Hassan, \"How do users revise answers on technical Q&A websites? A case study on stack over- flow,\" IEEE Trans. Softw. Eng., vol. 46, no. 9, pp. 1024-1038, Sep. 2020.\n\nBuilding reputation in StackOverflow: An empirical investigation. A Bosu, C S Corley, D Heaton, D Chatterji, J C Carver, N A Kraft, Proc. 10th Work. Conf. Mining Softw. Repositories. 10th Work. Conf. Mining Softw. RepositoriesA. Bosu, C. S. Corley, D. Heaton, D. Chatterji, J. C. Carver, and N. A. Kraft, \"Building reputation in StackOverflow: An empirical investigation,\" in Proc. 10th Work. Conf. Mining Softw. Repositories, 2013, pp. 89-92.\n\nAnalysis of the reputation system and user contributions on a question answering website: StackOverflow. D Movshovitz-Attias, Y Movshovitz-Attias, P Steenkiste, C Faloutsos, Proc. nullD. Movshovitz-Attias, Y. Movshovitz-Attias, P. Steenkiste, and C. Faloutsos, \"Analysis of the reputation system and user contribu- tions on a question answering website: StackOverflow,\" in Proc. IEEE/ACM Int. Conf. Advances Soc. Netw. Anal. Mining, 2013, pp. 886-893.\n\nHow reliable is the crowdsourced knowledge of security implementation. M Chen, F Fischer, N Meng, X Wang, J Grossklags, Proc. 41st Int. Conf. Softw. Eng. 41st Int. Conf. Softw. EngM. Chen, F. Fischer, N. Meng, X. Wang, and J. Grossklags, \"How reli- able is the crowdsourced knowledge of security implementation?\" in Proc. 41st Int. Conf. Softw. Eng., 2019, pp. 536-547.\n\nSelecting empirical methods for software engineering research. S Easterbrook, J Singer, M.-A Storey, D Damian, Guide to Advanced Empirical Software Engineering. Berlin, GermanySpringerS. Easterbrook, J. Singer, M.-A. Storey, and D. Damian, \"Selecting empirical methods for software engineering research,\" in, Guide to Advanced Empirical Software Engineering. Berlin, Germany: Springer, 2008, pp. 285-311.\n\nImpact of gamification on code review process: An experimental study. S Khandelwal, S K Sripada, Y R Reddy, Proc. 10th Innov. Softw. Eng. Conf. 10th Innov. Softw. Eng. ConfS. Khandelwal, S. K. Sripada, and Y. R. Reddy, \"Impact of gamifi- cation on code review process: An experimental study,\" in Proc. 10th Innov. Softw. Eng. Conf., 2017, pp. 122-126.\n\nSecurity and emotion: Sentiment analysis of security discussions on GitHub. D Pletea, B Vasilescu, A Serebrenik, Proc. 11th Work. Conf. Mining Softw. Repositories. 11th Work. Conf. Mining Softw. RepositoriesD. Pletea, B. Vasilescu, and A. Serebrenik, \"Security and emotion: Sentiment analysis of security discussions on GitHub,\" in Proc. 11th Work. Conf. Mining Softw. Repositories, 2014, pp. 348-351.\n\nDevelopers need support, too: A survey of security advice for software developers. Y Acar, C Stransky, D Wermke, C Weir, M L Mazurek, S Fahl, Proc. IEEE Cybersecur. IEEE CybersecurY. Acar, C. Stransky, D. Wermke, C. Weir, M. L. Mazurek, and S. Fahl, \"Developers need support, too: A survey of security advice for software developers,\" in Proc. IEEE Cybersecur. Develop., 2017, pp. 22-26.\n\nSecure Coding in C and C++. R C Seacord, Addison-WesleyReading, MA, USAR. C. Seacord, Secure Coding in C and C++. Reading, MA, USA: Addison-Wesley, 2013.\n\nSecurity of memory allocators for C and C++. Y Younan, W Joosen, F Piessens, H V Den Eynden, Department of Computer Science. Katholieke Universiteit LeuvenY. Younan, W. Joosen, F. Piessens, and H. V. den Eynden, \"Security of memory allocators for C and C++,\" Department of Computer Sci- ence, Katholieke Universiteit Leuven, Belgium, Jul. 2005. [Online]. Avail- able: http://www.fort-knox.org/system/files/CW419.pdf\n\nSecure coding in C and C++ of strings and integers. R Seacord, IEEE Security Privacy. 41R. Seacord, \"Secure coding in C and C++ of strings and integers,\" IEEE Security Privacy, vol. 4, no. 1, pp. 74-76, Jan./Feb. 2006.\n\nImproving memory management security for C and C++. Y Younan, W Joosen, F Piessens, H Van Den Eynden, Int. J. Secure Softw. Eng. 12Y. Younan, W. Joosen, F. Piessens, and H. Van den Eynden, \"Improving memory management security for C and C++,\" Int. J. Secure Softw. Eng., vol. 1, no. 2, pp. 57-82, 2010.\n\nDetecting type errors and secure coding in C/C++ applications. H Mcheick, H Dhiab, M Dbouk, R Mcheik, Proc. ACS/ IEEE Int. ACS/ IEEE IntH. Mcheick, H. Dhiab, M. Dbouk, and R. Mcheik, \"Detecting type errors and secure coding in C/C++ applications,\" in Proc. ACS/ IEEE Int. Conf. Comput. Syst. Appl., 2010, pp. 1-9.\n\nUnderstanding integer overflow in C/C++. W Dietz, P Li, J Regehr, V Adve, ACM Trans. Softw. Eng. Methodol. 251W. Dietz, P. Li, J. Regehr, and V. Adve, \"Understanding integer overflow in C/C++,\" ACM Trans. Softw. Eng. Methodol., vol. 25, no. 1, pp. 2:1-2:29, Dec. 2015.\n\nOn the evolution of mobile computing software systems and C/C++ vulnerable code: Empirical investigation. S M Alnaeli, M Sarnowski, M S Aman, K Yelamarthi, A Abdelgawad, H Jiang, Proc. IEEE 7th Annu. IEEE 7th AnnuS. M. Alnaeli, M. Sarnowski, M. S. Aman, K. Yelamarthi, A. Abdelgawad, and H. Jiang, \"On the evolution of mobile com- puting software systems and C/C++ vulnerable code: Empirical investigation,\" in Proc. IEEE 7th Annu. Ubiquitous Comput. Electron. Mobile Commun. Conf., 2016, pp. 1-7.\n\nVulnerable C/C++ code usage in IoT software systems. S M Alnaeli, M Sarnowski, M S Aman, A Abdelgawad, K Yelamarthi, Proc. IEEE 3rd World Forum Internet of Things. IEEE 3rd World Forum Internet of ThingsS. M. Alnaeli, M. Sarnowski, M. S. Aman, A. Abdelgawad, and K. Yelamarthi, \"Vulnerable C/C++ code usage in IoT software systems,\" in Proc. IEEE 3rd World Forum Internet of Things, 2016, pp. 348-352.\n\nTowards better utilizing static application security testing. J Yang, L Tan, J Peyton, K A Duer, Proc. 41st Int. Conf. Softw. Eng.: Softw. Eng. Practice. 41st Int. Conf. Softw. Eng.: Softw. Eng. PracticeJ. Yang, L. Tan, J. Peyton, and K. A. Duer, \"Towards better utiliz- ing static application security testing,\" in Proc. 41st Int. Conf. Softw. Eng.: Softw. Eng. Practice, 2019, pp. 51-60.\n\nUnderstanding stack overflow code fragments. C Treude, M P Robillard, Proc. IEEE Int. Conf. Softw. Maintenance Evol. IEEE Int. Conf. Softw. Maintenance EvolC. Treude and M. P. Robillard, \"Understanding stack overflow code fragments,\" in Proc. IEEE Int. Conf. Softw. Maintenance Evol., 2017, pp. 509-513.\n\nMining rule violations in JavaScript code snippets. U Campos, G Smethurst, J A P Moraes, R Bonif, G Pinto, Proc. 16th Int. Conf. Mining Softw. Repositories. 16th Int. Conf. Mining Softw. RepositoriesU. Campos, G. Smethurst, J. A. P. Moraes, R. Bonif acio, and G. Pinto, \"Mining rule violations in JavaScript code snippets,\" in Proc. 16th Int. Conf. Mining Softw. Repositories, 2019, pp. 195-199.\n\nWhat security questions do developers ask? A large-scale study of stack overflow posts. X.-L Yang, D Lo, X Xia, Z.-Y Wan, J.-L Sun, J. Comput. Sci. Technol. 315X.-L. Yang, D. Lo, X. Xia, Z.-Y. Wan, and J.-L. Sun, \"What security questions do developers ask? A large-scale study of stack over- flow posts,\" J. Comput. Sci. Technol., vol. 31, no. 5, pp. 910-924, Sep. 2016.\n\nWhat are developers talking about? An analysis of topics and trends in stack overflow. A Barua, S W Thomas, A E Hassan, Empir. Softw. Eng. 193A. Barua, S. W. Thomas, and A. E. Hassan, \"What are developers talking about? An analysis of topics and trends in stack overflow,\" Empir. Softw. Eng., vol. 19, no. 3, pp. 619-654, Jun. 2014.\n\nYou get where you're looking for: The impact of information sources on code security. Y Acar, M Backes, S Fahl, D Kim, M L Mazurek, C Stransky, Proc. IEEE Symp. Secur. Privacy. IEEE Symp. Secur. PrivacyY. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky, \"You get where you're looking for: The impact of information sour- ces on code security,\" in Proc. IEEE Symp. Secur. Privacy, 2016, pp. 289-305.\n\nAn investigation of security conversations in stack overflow: Perceptions of security and community involvement. T Lopez, T T Tun, A Bandara, M Levine, B Nuseibeh, H Sharp, Proc. 1st Int. Workshop Secur. 1st Int. Workshop SecurT. Lopez, T. T. Tun, A. Bandara, M. Levine, B. Nuseibeh, and H. Sharp, \"An investigation of security conversations in stack over- flow: Perceptions of security and community involvement,\" in Proc. 1st Int. Workshop Secur. Awareness Des. Deployment, 2018, pp. 26-32.\n", "annotations": {"author": "[{\"end\":69,\"start\":54},{\"end\":83,\"start\":70},{\"end\":92,\"start\":84},{\"end\":107,\"start\":93},{\"end\":135,\"start\":108}]", "publisher": null, "author_last_name": "[{\"end\":68,\"start\":63},{\"end\":82,\"start\":78},{\"end\":91,\"start\":89},{\"end\":106,\"start\":102},{\"end\":134,\"start\":128}]", "author_first_name": "[{\"end\":62,\"start\":54},{\"end\":77,\"start\":70},{\"end\":88,\"start\":84},{\"end\":101,\"start\":93},{\"end\":125,\"start\":120},{\"end\":127,\"start\":126}]", "author_affiliation": null, "title": "[{\"end\":51,\"start\":1},{\"end\":186,\"start\":136}]", "venue": null, "abstract": "[{\"end\":2677,\"start\":212}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3108,\"start\":3105},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3341,\"start\":3338},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":3346,\"start\":3343},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3476,\"start\":3473},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4124,\"start\":4121},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4259,\"start\":4256},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4487,\"start\":4484},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4731,\"start\":4729},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4733,\"start\":4731},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4735,\"start\":4733},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":4737,\"start\":4735},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4739,\"start\":4737},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":4740,\"start\":4739},{\"end\":4835,\"start\":4832},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5117,\"start\":5116},{\"end\":5202,\"start\":5197},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":5645,\"start\":5642},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5801,\"start\":5800},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":5894,\"start\":5891},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5899,\"start\":5896},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5947,\"start\":5944},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5953,\"start\":5949},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7923,\"start\":7919},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9495,\"start\":9491},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9735,\"start\":9732},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":9770,\"start\":9767},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":13015,\"start\":13011},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":13021,\"start\":13017},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13027,\"start\":13023},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":13129,\"start\":13127},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":13608,\"start\":13604},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":14116,\"start\":14112},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":14786,\"start\":14783},{\"end\":14789,\"start\":14786},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":15145,\"start\":15141},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":15151,\"start\":15147},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":15248,\"start\":15244},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":16053,\"start\":16051},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":16766,\"start\":16764},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":16897,\"start\":16895},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":17152,\"start\":17148},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":17158,\"start\":17154},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":17164,\"start\":17160},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":17243,\"start\":17239},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":17335,\"start\":17333},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":17350,\"start\":17348},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":17500,\"start\":17496},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":17606,\"start\":17602},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":17694,\"start\":17692},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":18361,\"start\":18357},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":21517,\"start\":21513},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":21852,\"start\":21850},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":22322,\"start\":22320},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":22879,\"start\":22875},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":22885,\"start\":22881},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":24009,\"start\":24005},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":26168,\"start\":26166},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":27744,\"start\":27741},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":27750,\"start\":27746},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":27756,\"start\":27752},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":27762,\"start\":27758},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":28961,\"start\":28957},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":28967,\"start\":28963},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":29827,\"start\":29825},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":30534,\"start\":30530},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":34724,\"start\":34722},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":35699,\"start\":35697},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":42950,\"start\":42946},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":44477,\"start\":44475},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":50178,\"start\":50176},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":51619,\"start\":51617},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":53865,\"start\":53863},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":54386,\"start\":54382},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":55333,\"start\":55330},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":56643,\"start\":56640},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":57787,\"start\":57785},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":59918,\"start\":59914},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":59924,\"start\":59920},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":60847,\"start\":60845},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":66236,\"start\":66232},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":66354,\"start\":66350},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":66433,\"start\":66429},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":66439,\"start\":66435},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":66445,\"start\":66441},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":66451,\"start\":66447},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":66457,\"start\":66453},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":66463,\"start\":66459},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":66469,\"start\":66465},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":66475,\"start\":66471},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":66678,\"start\":66674},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":66797,\"start\":66793},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":66931,\"start\":66927},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":67450,\"start\":67446},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":67732,\"start\":67728},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":67815,\"start\":67811},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":67947,\"start\":67943},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":68061,\"start\":68059},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":68380,\"start\":68376},{\"end\":68394,\"start\":68382},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":68521,\"start\":68517},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":68726,\"start\":68723},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":68878,\"start\":68875},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":69055,\"start\":69051},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":69278,\"start\":69274},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":69513,\"start\":69509},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":69663,\"start\":69660},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":69738,\"start\":69735},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":69748,\"start\":69745},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":69764,\"start\":69761},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":70043,\"start\":70040},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":70803,\"start\":70800},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":70902,\"start\":70900},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":71923,\"start\":71920},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":72992,\"start\":72988}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":74108,\"start\":73960},{\"attributes\":{\"id\":\"fig_1\"},\"end\":74246,\"start\":74109},{\"attributes\":{\"id\":\"fig_2\"},\"end\":74427,\"start\":74247},{\"attributes\":{\"id\":\"fig_3\"},\"end\":74719,\"start\":74428},{\"attributes\":{\"id\":\"fig_4\"},\"end\":74925,\"start\":74720},{\"attributes\":{\"id\":\"fig_5\"},\"end\":75070,\"start\":74926},{\"attributes\":{\"id\":\"fig_6\"},\"end\":75167,\"start\":75071},{\"attributes\":{\"id\":\"fig_7\"},\"end\":75291,\"start\":75168},{\"attributes\":{\"id\":\"fig_8\"},\"end\":75444,\"start\":75292},{\"attributes\":{\"id\":\"fig_9\"},\"end\":76211,\"start\":75445},{\"attributes\":{\"id\":\"fig_10\"},\"end\":76290,\"start\":76212},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":76572,\"start\":76291},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":76718,\"start\":76573},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":79026,\"start\":76719},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":79697,\"start\":79027},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":80349,\"start\":79698},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":80566,\"start\":80350}]", "paragraph": "[{\"end\":3347,\"start\":2693},{\"end\":4878,\"start\":3349},{\"end\":5478,\"start\":4880},{\"end\":6350,\"start\":5480},{\"end\":9012,\"start\":6352},{\"end\":10455,\"start\":9091},{\"end\":11856,\"start\":10508},{\"end\":12211,\"start\":11873},{\"end\":12521,\"start\":12231},{\"end\":12575,\"start\":12559},{\"end\":13319,\"start\":12577},{\"end\":13933,\"start\":13321},{\"end\":14871,\"start\":13935},{\"end\":16613,\"start\":14873},{\"end\":18362,\"start\":16655},{\"end\":19920,\"start\":18364},{\"end\":21221,\"start\":19939},{\"end\":23185,\"start\":21223},{\"end\":23761,\"start\":23187},{\"end\":23825,\"start\":23807},{\"end\":25487,\"start\":23827},{\"end\":25989,\"start\":25489},{\"end\":26329,\"start\":25991},{\"end\":26990,\"start\":26421},{\"end\":28435,\"start\":26992},{\"end\":29596,\"start\":28437},{\"end\":30164,\"start\":29598},{\"end\":30275,\"start\":30215},{\"end\":30452,\"start\":30277},{\"end\":30988,\"start\":30454},{\"end\":32121,\"start\":31011},{\"end\":32716,\"start\":32123},{\"end\":33977,\"start\":32718},{\"end\":34544,\"start\":33979},{\"end\":35093,\"start\":34546},{\"end\":36881,\"start\":35095},{\"end\":37455,\"start\":36888},{\"end\":37519,\"start\":37501},{\"end\":38129,\"start\":37521},{\"end\":39925,\"start\":38131},{\"end\":41060,\"start\":39927},{\"end\":41116,\"start\":41062},{\"end\":41381,\"start\":41118},{\"end\":43113,\"start\":41383},{\"end\":44714,\"start\":43115},{\"end\":45072,\"start\":44716},{\"end\":46653,\"start\":45074},{\"end\":47446,\"start\":46655},{\"end\":48109,\"start\":47448},{\"end\":48793,\"start\":48111},{\"end\":50066,\"start\":48885},{\"end\":50615,\"start\":50068},{\"end\":50925,\"start\":50617},{\"end\":52026,\"start\":50927},{\"end\":52961,\"start\":52028},{\"end\":53084,\"start\":53034},{\"end\":53604,\"start\":53086},{\"end\":55067,\"start\":53606},{\"end\":55450,\"start\":55069},{\"end\":55725,\"start\":55492},{\"end\":56341,\"start\":55727},{\"end\":56961,\"start\":56343},{\"end\":57534,\"start\":56963},{\"end\":58800,\"start\":57536},{\"end\":59610,\"start\":58824},{\"end\":60570,\"start\":59612},{\"end\":61031,\"start\":60572},{\"end\":61740,\"start\":61033},{\"end\":63519,\"start\":61742},{\"end\":64885,\"start\":63521},{\"end\":65416,\"start\":64887},{\"end\":65873,\"start\":65418},{\"end\":67042,\"start\":65921},{\"end\":67948,\"start\":67078},{\"end\":69664,\"start\":67950},{\"end\":70706,\"start\":69666},{\"end\":71789,\"start\":70708},{\"end\":72733,\"start\":71791},{\"end\":73090,\"start\":72735},{\"end\":73959,\"start\":73105}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":14599,\"start\":14592},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":37763,\"start\":37756},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":38426,\"start\":38419},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":40275,\"start\":40268},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":55342,\"start\":55335}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2691,\"start\":2679},{\"attributes\":{\"n\":\"2\"},\"end\":9025,\"start\":9015},{\"attributes\":{\"n\":\"2.1\"},\"end\":9089,\"start\":9028},{\"attributes\":{\"n\":\"2.2\"},\"end\":10506,\"start\":10458},{\"attributes\":{\"n\":\"3\"},\"end\":11871,\"start\":11859},{\"attributes\":{\"n\":\"3.1\"},\"end\":12229,\"start\":12214},{\"attributes\":{\"n\":\"3.1.1\"},\"end\":12557,\"start\":12524},{\"attributes\":{\"n\":\"3.1.2\"},\"end\":16653,\"start\":16616},{\"attributes\":{\"n\":\"3.2\"},\"end\":19937,\"start\":19923},{\"attributes\":{\"n\":\"3.2.2\"},\"end\":23805,\"start\":23764},{\"attributes\":{\"n\":\"3.2.3\"},\"end\":26419,\"start\":26332},{\"attributes\":{\"n\":\"3.2.4\"},\"end\":30213,\"start\":30167},{\"attributes\":{\"n\":\"4\"},\"end\":31009,\"start\":30991},{\"end\":36886,\"start\":36884},{\"attributes\":{\"n\":\"4.2\"},\"end\":37499,\"start\":37458},{\"attributes\":{\"n\":\"4.3\"},\"end\":48883,\"start\":48796},{\"attributes\":{\"n\":\"5\"},\"end\":52992,\"start\":52964},{\"attributes\":{\"n\":\"5.1\"},\"end\":53032,\"start\":52995},{\"attributes\":{\"n\":\"5.2\"},\"end\":55490,\"start\":55453},{\"attributes\":{\"n\":\"6\"},\"end\":58822,\"start\":58803},{\"attributes\":{\"n\":\"7\"},\"end\":65888,\"start\":65876},{\"attributes\":{\"n\":\"7.1\"},\"end\":65919,\"start\":65891},{\"attributes\":{\"n\":\"7.2\"},\"end\":67076,\"start\":67045},{\"attributes\":{\"n\":\"8\"},\"end\":73103,\"start\":73093},{\"end\":73969,\"start\":73961},{\"end\":74118,\"start\":74110},{\"end\":74256,\"start\":74248},{\"end\":74437,\"start\":74429},{\"end\":74729,\"start\":74721},{\"end\":74935,\"start\":74927},{\"end\":75080,\"start\":75072},{\"end\":75178,\"start\":75169},{\"end\":75302,\"start\":75293},{\"end\":75455,\"start\":75446},{\"end\":76222,\"start\":76213},{\"end\":76303,\"start\":76292},{\"end\":79710,\"start\":79699},{\"end\":80362,\"start\":80351}]", "table": "[{\"end\":76572,\"start\":76305},{\"end\":79697,\"start\":79131},{\"end\":80349,\"start\":80079}]", "figure_caption": "[{\"end\":74108,\"start\":73971},{\"end\":74246,\"start\":74120},{\"end\":74427,\"start\":74258},{\"end\":74719,\"start\":74439},{\"end\":74925,\"start\":74731},{\"end\":75070,\"start\":74937},{\"end\":75167,\"start\":75082},{\"end\":75291,\"start\":75181},{\"end\":75444,\"start\":75305},{\"end\":76211,\"start\":75458},{\"end\":76290,\"start\":76225},{\"end\":76718,\"start\":76575},{\"end\":79026,\"start\":76721},{\"end\":79131,\"start\":79029},{\"end\":80079,\"start\":79712},{\"end\":80566,\"start\":80364}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":11000,\"start\":10994},{\"end\":12138,\"start\":12132},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13051,\"start\":13045},{\"end\":31321,\"start\":31315},{\"end\":31983,\"start\":31977},{\"end\":35210,\"start\":35204},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":35993,\"start\":35987},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":41711,\"start\":41705},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":44230,\"start\":44224},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":45370,\"start\":45364},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":45727,\"start\":45721},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":47839,\"start\":47833},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":49075,\"start\":49069},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":49384,\"start\":49377},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":49807,\"start\":49800},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":49819,\"start\":49812},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":50819,\"start\":50812},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":51108,\"start\":51101},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":52619,\"start\":52612},{\"end\":64123,\"start\":64117},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":64589,\"start\":64583}]", "bib_author_first_name": "[{\"end\":83496,\"start\":83495},{\"end\":83502,\"start\":83501},{\"end\":83513,\"start\":83509},{\"end\":83524,\"start\":83523},{\"end\":83815,\"start\":83814},{\"end\":84279,\"start\":84278},{\"end\":84287,\"start\":84286},{\"end\":84295,\"start\":84294},{\"end\":84302,\"start\":84301},{\"end\":84312,\"start\":84311},{\"end\":84618,\"start\":84617},{\"end\":84628,\"start\":84627},{\"end\":84639,\"start\":84638},{\"end\":85036,\"start\":85035},{\"end\":85045,\"start\":85044},{\"end\":85053,\"start\":85052},{\"end\":85066,\"start\":85065},{\"end\":85075,\"start\":85074},{\"end\":85084,\"start\":85083},{\"end\":85086,\"start\":85085},{\"end\":86346,\"start\":86345},{\"end\":86354,\"start\":86353},{\"end\":86364,\"start\":86363},{\"end\":86372,\"start\":86371},{\"end\":86379,\"start\":86378},{\"end\":86381,\"start\":86380},{\"end\":86392,\"start\":86391},{\"end\":86912,\"start\":86911},{\"end\":86918,\"start\":86917},{\"end\":86928,\"start\":86927},{\"end\":86937,\"start\":86936},{\"end\":87288,\"start\":87287},{\"end\":87303,\"start\":87302},{\"end\":87313,\"start\":87312},{\"end\":87587,\"start\":87586},{\"end\":87595,\"start\":87594},{\"end\":87606,\"start\":87605},{\"end\":87608,\"start\":87607},{\"end\":87973,\"start\":87972},{\"end\":87983,\"start\":87982},{\"end\":87993,\"start\":87992},{\"end\":88003,\"start\":88002},{\"end\":88337,\"start\":88336},{\"end\":88350,\"start\":88349},{\"end\":88361,\"start\":88360},{\"end\":88629,\"start\":88628},{\"end\":88636,\"start\":88635},{\"end\":88926,\"start\":88925},{\"end\":88935,\"start\":88934},{\"end\":88945,\"start\":88944},{\"end\":88954,\"start\":88953},{\"end\":89275,\"start\":89274},{\"end\":89277,\"start\":89276},{\"end\":89289,\"start\":89288},{\"end\":89567,\"start\":89566},{\"end\":89569,\"start\":89568},{\"end\":89578,\"start\":89577},{\"end\":89591,\"start\":89590},{\"end\":89925,\"start\":89924},{\"end\":89927,\"start\":89926},{\"end\":89939,\"start\":89938},{\"end\":89941,\"start\":89940},{\"end\":90410,\"start\":90409},{\"end\":90422,\"start\":90421},{\"end\":90434,\"start\":90433},{\"end\":90446,\"start\":90445},{\"end\":90458,\"start\":90457},{\"end\":90927,\"start\":90926},{\"end\":90929,\"start\":90928},{\"end\":90939,\"start\":90938},{\"end\":90941,\"start\":90940},{\"end\":91247,\"start\":91246},{\"end\":91255,\"start\":91254},{\"end\":91262,\"start\":91261},{\"end\":91268,\"start\":91267},{\"end\":91275,\"start\":91274},{\"end\":91845,\"start\":91844},{\"end\":92116,\"start\":92115},{\"end\":92127,\"start\":92123},{\"end\":92135,\"start\":92134},{\"end\":92137,\"start\":92136},{\"end\":92438,\"start\":92437},{\"end\":92446,\"start\":92445},{\"end\":92448,\"start\":92447},{\"end\":92458,\"start\":92457},{\"end\":92468,\"start\":92467},{\"end\":92481,\"start\":92480},{\"end\":92483,\"start\":92482},{\"end\":92493,\"start\":92492},{\"end\":92495,\"start\":92494},{\"end\":92922,\"start\":92921},{\"end\":92943,\"start\":92942},{\"end\":92964,\"start\":92963},{\"end\":92978,\"start\":92977},{\"end\":93341,\"start\":93340},{\"end\":93349,\"start\":93348},{\"end\":93360,\"start\":93359},{\"end\":93368,\"start\":93367},{\"end\":93376,\"start\":93375},{\"end\":93704,\"start\":93703},{\"end\":93719,\"start\":93718},{\"end\":93732,\"start\":93728},{\"end\":93742,\"start\":93741},{\"end\":94117,\"start\":94116},{\"end\":94131,\"start\":94130},{\"end\":94133,\"start\":94132},{\"end\":94144,\"start\":94143},{\"end\":94146,\"start\":94145},{\"end\":94476,\"start\":94475},{\"end\":94486,\"start\":94485},{\"end\":94499,\"start\":94498},{\"end\":94886,\"start\":94885},{\"end\":94894,\"start\":94893},{\"end\":94906,\"start\":94905},{\"end\":94916,\"start\":94915},{\"end\":94924,\"start\":94923},{\"end\":94926,\"start\":94925},{\"end\":94937,\"start\":94936},{\"end\":95220,\"start\":95219},{\"end\":95222,\"start\":95221},{\"end\":95392,\"start\":95391},{\"end\":95402,\"start\":95401},{\"end\":95412,\"start\":95411},{\"end\":95424,\"start\":95423},{\"end\":95426,\"start\":95425},{\"end\":95816,\"start\":95815},{\"end\":96036,\"start\":96035},{\"end\":96046,\"start\":96045},{\"end\":96056,\"start\":96055},{\"end\":96068,\"start\":96067},{\"end\":96351,\"start\":96350},{\"end\":96362,\"start\":96361},{\"end\":96371,\"start\":96370},{\"end\":96380,\"start\":96379},{\"end\":96644,\"start\":96643},{\"end\":96653,\"start\":96652},{\"end\":96659,\"start\":96658},{\"end\":96669,\"start\":96668},{\"end\":96979,\"start\":96978},{\"end\":96981,\"start\":96980},{\"end\":96992,\"start\":96991},{\"end\":97005,\"start\":97004},{\"end\":97007,\"start\":97006},{\"end\":97015,\"start\":97014},{\"end\":97029,\"start\":97028},{\"end\":97043,\"start\":97042},{\"end\":97425,\"start\":97424},{\"end\":97427,\"start\":97426},{\"end\":97438,\"start\":97437},{\"end\":97451,\"start\":97450},{\"end\":97453,\"start\":97452},{\"end\":97461,\"start\":97460},{\"end\":97475,\"start\":97474},{\"end\":97837,\"start\":97836},{\"end\":97845,\"start\":97844},{\"end\":97852,\"start\":97851},{\"end\":97862,\"start\":97861},{\"end\":97864,\"start\":97863},{\"end\":98211,\"start\":98210},{\"end\":98221,\"start\":98220},{\"end\":98223,\"start\":98222},{\"end\":98523,\"start\":98522},{\"end\":98533,\"start\":98532},{\"end\":98546,\"start\":98545},{\"end\":98550,\"start\":98547},{\"end\":98560,\"start\":98559},{\"end\":98569,\"start\":98568},{\"end\":98959,\"start\":98955},{\"end\":98967,\"start\":98966},{\"end\":98973,\"start\":98972},{\"end\":98983,\"start\":98979},{\"end\":98993,\"start\":98989},{\"end\":99327,\"start\":99326},{\"end\":99336,\"start\":99335},{\"end\":99338,\"start\":99337},{\"end\":99348,\"start\":99347},{\"end\":99350,\"start\":99349},{\"end\":99660,\"start\":99659},{\"end\":99668,\"start\":99667},{\"end\":99678,\"start\":99677},{\"end\":99686,\"start\":99685},{\"end\":99693,\"start\":99692},{\"end\":99695,\"start\":99694},{\"end\":99706,\"start\":99705},{\"end\":100104,\"start\":100103},{\"end\":100113,\"start\":100112},{\"end\":100115,\"start\":100114},{\"end\":100122,\"start\":100121},{\"end\":100133,\"start\":100132},{\"end\":100143,\"start\":100142},{\"end\":100155,\"start\":100154}]", "bib_author_last_name": "[{\"end\":83499,\"start\":83497},{\"end\":83507,\"start\":83503},{\"end\":83521,\"start\":83514},{\"end\":83530,\"start\":83525},{\"end\":83823,\"start\":83816},{\"end\":84059,\"start\":84050},{\"end\":84284,\"start\":84280},{\"end\":84292,\"start\":84288},{\"end\":84299,\"start\":84296},{\"end\":84309,\"start\":84303},{\"end\":84326,\"start\":84313},{\"end\":84625,\"start\":84619},{\"end\":84636,\"start\":84629},{\"end\":84646,\"start\":84640},{\"end\":85042,\"start\":85037},{\"end\":85050,\"start\":85046},{\"end\":85063,\"start\":85054},{\"end\":85072,\"start\":85067},{\"end\":85081,\"start\":85076},{\"end\":85094,\"start\":85087},{\"end\":85724,\"start\":85713},{\"end\":85997,\"start\":85989},{\"end\":86351,\"start\":86347},{\"end\":86361,\"start\":86355},{\"end\":86369,\"start\":86365},{\"end\":86376,\"start\":86373},{\"end\":86389,\"start\":86382},{\"end\":86401,\"start\":86393},{\"end\":86749,\"start\":86744},{\"end\":86915,\"start\":86913},{\"end\":86925,\"start\":86919},{\"end\":86934,\"start\":86929},{\"end\":86946,\"start\":86938},{\"end\":87300,\"start\":87289},{\"end\":87310,\"start\":87304},{\"end\":87321,\"start\":87314},{\"end\":87592,\"start\":87588},{\"end\":87603,\"start\":87596},{\"end\":87614,\"start\":87609},{\"end\":87980,\"start\":87974},{\"end\":87990,\"start\":87984},{\"end\":88000,\"start\":87994},{\"end\":88009,\"start\":88004},{\"end\":88347,\"start\":88338},{\"end\":88358,\"start\":88351},{\"end\":88365,\"start\":88362},{\"end\":88633,\"start\":88630},{\"end\":88642,\"start\":88637},{\"end\":88932,\"start\":88927},{\"end\":88942,\"start\":88936},{\"end\":88951,\"start\":88946},{\"end\":88963,\"start\":88955},{\"end\":89286,\"start\":89278},{\"end\":89294,\"start\":89290},{\"end\":89575,\"start\":89570},{\"end\":89588,\"start\":89579},{\"end\":89596,\"start\":89592},{\"end\":89936,\"start\":89928},{\"end\":89953,\"start\":89942},{\"end\":90419,\"start\":90411},{\"end\":90431,\"start\":90423},{\"end\":90443,\"start\":90435},{\"end\":90455,\"start\":90447},{\"end\":90465,\"start\":90459},{\"end\":90936,\"start\":90930},{\"end\":90946,\"start\":90942},{\"end\":91252,\"start\":91248},{\"end\":91259,\"start\":91256},{\"end\":91265,\"start\":91263},{\"end\":91272,\"start\":91269},{\"end\":91279,\"start\":91276},{\"end\":91852,\"start\":91846},{\"end\":92121,\"start\":92117},{\"end\":92132,\"start\":92128},{\"end\":92144,\"start\":92138},{\"end\":92443,\"start\":92439},{\"end\":92455,\"start\":92449},{\"end\":92465,\"start\":92459},{\"end\":92478,\"start\":92469},{\"end\":92490,\"start\":92484},{\"end\":92501,\"start\":92496},{\"end\":92940,\"start\":92923},{\"end\":92961,\"start\":92944},{\"end\":92975,\"start\":92965},{\"end\":92988,\"start\":92979},{\"end\":93346,\"start\":93342},{\"end\":93357,\"start\":93350},{\"end\":93365,\"start\":93361},{\"end\":93373,\"start\":93369},{\"end\":93387,\"start\":93377},{\"end\":93716,\"start\":93705},{\"end\":93726,\"start\":93720},{\"end\":93739,\"start\":93733},{\"end\":93749,\"start\":93743},{\"end\":94128,\"start\":94118},{\"end\":94141,\"start\":94134},{\"end\":94152,\"start\":94147},{\"end\":94483,\"start\":94477},{\"end\":94496,\"start\":94487},{\"end\":94510,\"start\":94500},{\"end\":94891,\"start\":94887},{\"end\":94903,\"start\":94895},{\"end\":94913,\"start\":94907},{\"end\":94921,\"start\":94917},{\"end\":94934,\"start\":94927},{\"end\":94942,\"start\":94938},{\"end\":95230,\"start\":95223},{\"end\":95399,\"start\":95393},{\"end\":95409,\"start\":95403},{\"end\":95421,\"start\":95413},{\"end\":95437,\"start\":95427},{\"end\":95824,\"start\":95817},{\"end\":96043,\"start\":96037},{\"end\":96053,\"start\":96047},{\"end\":96065,\"start\":96057},{\"end\":96083,\"start\":96069},{\"end\":96359,\"start\":96352},{\"end\":96368,\"start\":96363},{\"end\":96377,\"start\":96372},{\"end\":96387,\"start\":96381},{\"end\":96650,\"start\":96645},{\"end\":96656,\"start\":96654},{\"end\":96666,\"start\":96660},{\"end\":96674,\"start\":96670},{\"end\":96989,\"start\":96982},{\"end\":97002,\"start\":96993},{\"end\":97012,\"start\":97008},{\"end\":97026,\"start\":97016},{\"end\":97040,\"start\":97030},{\"end\":97049,\"start\":97044},{\"end\":97435,\"start\":97428},{\"end\":97448,\"start\":97439},{\"end\":97458,\"start\":97454},{\"end\":97472,\"start\":97462},{\"end\":97486,\"start\":97476},{\"end\":97842,\"start\":97838},{\"end\":97849,\"start\":97846},{\"end\":97859,\"start\":97853},{\"end\":97869,\"start\":97865},{\"end\":98218,\"start\":98212},{\"end\":98233,\"start\":98224},{\"end\":98530,\"start\":98524},{\"end\":98543,\"start\":98534},{\"end\":98557,\"start\":98551},{\"end\":98566,\"start\":98561},{\"end\":98575,\"start\":98570},{\"end\":98964,\"start\":98960},{\"end\":98970,\"start\":98968},{\"end\":98977,\"start\":98974},{\"end\":98987,\"start\":98984},{\"end\":98997,\"start\":98994},{\"end\":99333,\"start\":99328},{\"end\":99345,\"start\":99339},{\"end\":99357,\"start\":99351},{\"end\":99665,\"start\":99661},{\"end\":99675,\"start\":99669},{\"end\":99683,\"start\":99679},{\"end\":99690,\"start\":99687},{\"end\":99703,\"start\":99696},{\"end\":99715,\"start\":99707},{\"end\":100110,\"start\":100105},{\"end\":100119,\"start\":100116},{\"end\":100130,\"start\":100123},{\"end\":100140,\"start\":100134},{\"end\":100152,\"start\":100144},{\"end\":100161,\"start\":100156}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":54087006},\"end\":83717,\"start\":83435},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":25003307},\"end\":84021,\"start\":83719},{\"attributes\":{\"id\":\"b2\"},\"end\":84211,\"start\":84023},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":3480894},\"end\":84534,\"start\":84213},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":195298513},\"end\":84959,\"start\":84536},{\"attributes\":{\"doi\":\"arXiv:1910.01321\",\"id\":\"b5\"},\"end\":85287,\"start\":84961},{\"attributes\":{\"id\":\"b6\"},\"end\":85473,\"start\":85289},{\"attributes\":{\"id\":\"b7\"},\"end\":85663,\"start\":85475},{\"attributes\":{\"id\":\"b8\"},\"end\":85920,\"start\":85665},{\"attributes\":{\"id\":\"b9\"},\"end\":86257,\"start\":85922},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":15642180},\"end\":86672,\"start\":86259},{\"attributes\":{\"id\":\"b11\"},\"end\":86864,\"start\":86674},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":2398095},\"end\":87213,\"start\":86866},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":5991514},\"end\":87512,\"start\":87215},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":10548729},\"end\":87891,\"start\":87514},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":3989134},\"end\":88302,\"start\":87893},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":4612234},\"end\":88557,\"start\":88304},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":28709654},\"end\":88848,\"start\":88559},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":212533463},\"end\":89200,\"start\":88850},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":18490966},\"end\":89500,\"start\":89202},{\"attributes\":{\"id\":\"b20\"},\"end\":89787,\"start\":89502},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":17403495},\"end\":90326,\"start\":89789},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":52204013},\"end\":90805,\"start\":90328},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":40673292},\"end\":91151,\"start\":90807},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":53404757},\"end\":91540,\"start\":91153},{\"attributes\":{\"id\":\"b25\"},\"end\":91767,\"start\":91542},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":40086875},\"end\":92026,\"start\":91769},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":53690802},\"end\":92369,\"start\":92028},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":7943227},\"end\":92814,\"start\":92371},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":3442070},\"end\":93267,\"start\":92816},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":57573691},\"end\":93638,\"start\":93269},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1105134},\"end\":94044,\"start\":93640},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":283367},\"end\":94397,\"start\":94046},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":16320921},\"end\":94800,\"start\":94399},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":2277790},\"end\":95189,\"start\":94802},{\"attributes\":{\"id\":\"b35\"},\"end\":95344,\"start\":95191},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":14298468},\"end\":95761,\"start\":95346},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":17048717},\"end\":95981,\"start\":95763},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":6606283},\"end\":96285,\"start\":95983},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":2951394},\"end\":96600,\"start\":96287},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":8490392},\"end\":96870,\"start\":96602},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":22159200},\"end\":97369,\"start\":96872},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":15474696},\"end\":97772,\"start\":97371},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":184483574},\"end\":98163,\"start\":97774},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":1524973},\"end\":98468,\"start\":98165},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":195298487},\"end\":98865,\"start\":98470},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":16980899},\"end\":99237,\"start\":98867},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":13252554},\"end\":99571,\"start\":99239},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":15642180},\"end\":99988,\"start\":99573},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":52139210},\"end\":100482,\"start\":99990}]", "bib_title": "[{\"end\":83493,\"start\":83435},{\"end\":83812,\"start\":83719},{\"end\":84276,\"start\":84213},{\"end\":84615,\"start\":84536},{\"end\":85324,\"start\":85289},{\"end\":85512,\"start\":85475},{\"end\":86343,\"start\":86259},{\"end\":86909,\"start\":86866},{\"end\":87285,\"start\":87215},{\"end\":87584,\"start\":87514},{\"end\":87970,\"start\":87893},{\"end\":88334,\"start\":88304},{\"end\":88626,\"start\":88559},{\"end\":88923,\"start\":88850},{\"end\":89272,\"start\":89202},{\"end\":89564,\"start\":89502},{\"end\":89922,\"start\":89789},{\"end\":90407,\"start\":90328},{\"end\":90924,\"start\":90807},{\"end\":91244,\"start\":91153},{\"end\":91588,\"start\":91542},{\"end\":91842,\"start\":91769},{\"end\":92113,\"start\":92028},{\"end\":92435,\"start\":92371},{\"end\":92919,\"start\":92816},{\"end\":93338,\"start\":93269},{\"end\":93701,\"start\":93640},{\"end\":94114,\"start\":94046},{\"end\":94473,\"start\":94399},{\"end\":94883,\"start\":94802},{\"end\":95389,\"start\":95346},{\"end\":95813,\"start\":95763},{\"end\":96033,\"start\":95983},{\"end\":96348,\"start\":96287},{\"end\":96641,\"start\":96602},{\"end\":96976,\"start\":96872},{\"end\":97422,\"start\":97371},{\"end\":97834,\"start\":97774},{\"end\":98208,\"start\":98165},{\"end\":98520,\"start\":98470},{\"end\":98953,\"start\":98867},{\"end\":99324,\"start\":99239},{\"end\":99657,\"start\":99573},{\"end\":100101,\"start\":99990}]", "bib_author": "[{\"end\":83501,\"start\":83495},{\"end\":83509,\"start\":83501},{\"end\":83523,\"start\":83509},{\"end\":83532,\"start\":83523},{\"end\":83825,\"start\":83814},{\"end\":84061,\"start\":84050},{\"end\":84286,\"start\":84278},{\"end\":84294,\"start\":84286},{\"end\":84301,\"start\":84294},{\"end\":84311,\"start\":84301},{\"end\":84328,\"start\":84311},{\"end\":84627,\"start\":84617},{\"end\":84638,\"start\":84627},{\"end\":84648,\"start\":84638},{\"end\":85044,\"start\":85035},{\"end\":85052,\"start\":85044},{\"end\":85065,\"start\":85052},{\"end\":85074,\"start\":85065},{\"end\":85083,\"start\":85074},{\"end\":85096,\"start\":85083},{\"end\":85726,\"start\":85713},{\"end\":85999,\"start\":85989},{\"end\":86353,\"start\":86345},{\"end\":86363,\"start\":86353},{\"end\":86371,\"start\":86363},{\"end\":86378,\"start\":86371},{\"end\":86391,\"start\":86378},{\"end\":86403,\"start\":86391},{\"end\":86751,\"start\":86744},{\"end\":86917,\"start\":86911},{\"end\":86927,\"start\":86917},{\"end\":86936,\"start\":86927},{\"end\":86948,\"start\":86936},{\"end\":87302,\"start\":87287},{\"end\":87312,\"start\":87302},{\"end\":87323,\"start\":87312},{\"end\":87594,\"start\":87586},{\"end\":87605,\"start\":87594},{\"end\":87616,\"start\":87605},{\"end\":87982,\"start\":87972},{\"end\":87992,\"start\":87982},{\"end\":88002,\"start\":87992},{\"end\":88011,\"start\":88002},{\"end\":88349,\"start\":88336},{\"end\":88360,\"start\":88349},{\"end\":88367,\"start\":88360},{\"end\":88635,\"start\":88628},{\"end\":88644,\"start\":88635},{\"end\":88934,\"start\":88925},{\"end\":88944,\"start\":88934},{\"end\":88953,\"start\":88944},{\"end\":88965,\"start\":88953},{\"end\":89288,\"start\":89274},{\"end\":89296,\"start\":89288},{\"end\":89577,\"start\":89566},{\"end\":89590,\"start\":89577},{\"end\":89598,\"start\":89590},{\"end\":89938,\"start\":89924},{\"end\":89955,\"start\":89938},{\"end\":90421,\"start\":90409},{\"end\":90433,\"start\":90421},{\"end\":90445,\"start\":90433},{\"end\":90457,\"start\":90445},{\"end\":90467,\"start\":90457},{\"end\":90938,\"start\":90926},{\"end\":90948,\"start\":90938},{\"end\":91254,\"start\":91246},{\"end\":91261,\"start\":91254},{\"end\":91267,\"start\":91261},{\"end\":91274,\"start\":91267},{\"end\":91281,\"start\":91274},{\"end\":91854,\"start\":91844},{\"end\":92123,\"start\":92115},{\"end\":92134,\"start\":92123},{\"end\":92146,\"start\":92134},{\"end\":92445,\"start\":92437},{\"end\":92457,\"start\":92445},{\"end\":92467,\"start\":92457},{\"end\":92480,\"start\":92467},{\"end\":92492,\"start\":92480},{\"end\":92503,\"start\":92492},{\"end\":92942,\"start\":92921},{\"end\":92963,\"start\":92942},{\"end\":92977,\"start\":92963},{\"end\":92990,\"start\":92977},{\"end\":93348,\"start\":93340},{\"end\":93359,\"start\":93348},{\"end\":93367,\"start\":93359},{\"end\":93375,\"start\":93367},{\"end\":93389,\"start\":93375},{\"end\":93718,\"start\":93703},{\"end\":93728,\"start\":93718},{\"end\":93741,\"start\":93728},{\"end\":93751,\"start\":93741},{\"end\":94130,\"start\":94116},{\"end\":94143,\"start\":94130},{\"end\":94154,\"start\":94143},{\"end\":94485,\"start\":94475},{\"end\":94498,\"start\":94485},{\"end\":94512,\"start\":94498},{\"end\":94893,\"start\":94885},{\"end\":94905,\"start\":94893},{\"end\":94915,\"start\":94905},{\"end\":94923,\"start\":94915},{\"end\":94936,\"start\":94923},{\"end\":94944,\"start\":94936},{\"end\":95232,\"start\":95219},{\"end\":95401,\"start\":95391},{\"end\":95411,\"start\":95401},{\"end\":95423,\"start\":95411},{\"end\":95439,\"start\":95423},{\"end\":95826,\"start\":95815},{\"end\":96045,\"start\":96035},{\"end\":96055,\"start\":96045},{\"end\":96067,\"start\":96055},{\"end\":96085,\"start\":96067},{\"end\":96361,\"start\":96350},{\"end\":96370,\"start\":96361},{\"end\":96379,\"start\":96370},{\"end\":96389,\"start\":96379},{\"end\":96652,\"start\":96643},{\"end\":96658,\"start\":96652},{\"end\":96668,\"start\":96658},{\"end\":96676,\"start\":96668},{\"end\":96991,\"start\":96978},{\"end\":97004,\"start\":96991},{\"end\":97014,\"start\":97004},{\"end\":97028,\"start\":97014},{\"end\":97042,\"start\":97028},{\"end\":97051,\"start\":97042},{\"end\":97437,\"start\":97424},{\"end\":97450,\"start\":97437},{\"end\":97460,\"start\":97450},{\"end\":97474,\"start\":97460},{\"end\":97488,\"start\":97474},{\"end\":97844,\"start\":97836},{\"end\":97851,\"start\":97844},{\"end\":97861,\"start\":97851},{\"end\":97871,\"start\":97861},{\"end\":98220,\"start\":98210},{\"end\":98235,\"start\":98220},{\"end\":98532,\"start\":98522},{\"end\":98545,\"start\":98532},{\"end\":98559,\"start\":98545},{\"end\":98568,\"start\":98559},{\"end\":98577,\"start\":98568},{\"end\":98966,\"start\":98955},{\"end\":98972,\"start\":98966},{\"end\":98979,\"start\":98972},{\"end\":98989,\"start\":98979},{\"end\":98999,\"start\":98989},{\"end\":99335,\"start\":99326},{\"end\":99347,\"start\":99335},{\"end\":99359,\"start\":99347},{\"end\":99667,\"start\":99659},{\"end\":99677,\"start\":99667},{\"end\":99685,\"start\":99677},{\"end\":99692,\"start\":99685},{\"end\":99705,\"start\":99692},{\"end\":99717,\"start\":99705},{\"end\":100112,\"start\":100103},{\"end\":100121,\"start\":100112},{\"end\":100132,\"start\":100121},{\"end\":100142,\"start\":100132},{\"end\":100154,\"start\":100142},{\"end\":100163,\"start\":100154}]", "bib_venue": "[{\"end\":83851,\"start\":83842},{\"end\":84352,\"start\":84344},{\"end\":84758,\"start\":84707},{\"end\":86461,\"start\":86436},{\"end\":87046,\"start\":87001},{\"end\":87708,\"start\":87666},{\"end\":88103,\"start\":88061},{\"end\":88427,\"start\":88401},{\"end\":88702,\"start\":88677},{\"end\":89346,\"start\":89325},{\"end\":90059,\"start\":90011},{\"end\":90575,\"start\":90525},{\"end\":91335,\"start\":91312},{\"end\":92597,\"start\":92554},{\"end\":93000,\"start\":92996},{\"end\":93449,\"start\":93423},{\"end\":93816,\"start\":93801},{\"end\":94218,\"start\":94190},{\"end\":94606,\"start\":94563},{\"end\":94982,\"start\":94967},{\"end\":96423,\"start\":96410},{\"end\":97085,\"start\":97072},{\"end\":97574,\"start\":97535},{\"end\":97977,\"start\":97928},{\"end\":98321,\"start\":98282},{\"end\":98669,\"start\":98627},{\"end\":99775,\"start\":99750},{\"end\":100217,\"start\":100194},{\"end\":83549,\"start\":83532},{\"end\":83840,\"start\":83825},{\"end\":84048,\"start\":84023},{\"end\":84342,\"start\":84328},{\"end\":84705,\"start\":84648},{\"end\":85033,\"start\":84961},{\"end\":85331,\"start\":85326},{\"end\":85519,\"start\":85514},{\"end\":85711,\"start\":85665},{\"end\":85987,\"start\":85922},{\"end\":86434,\"start\":86403},{\"end\":86742,\"start\":86674},{\"end\":86999,\"start\":86948},{\"end\":87342,\"start\":87323},{\"end\":87664,\"start\":87616},{\"end\":88059,\"start\":88011},{\"end\":88399,\"start\":88367},{\"end\":88675,\"start\":88644},{\"end\":88999,\"start\":88965},{\"end\":89323,\"start\":89296},{\"end\":89630,\"start\":89598},{\"end\":90009,\"start\":89955},{\"end\":90523,\"start\":90467},{\"end\":90958,\"start\":90948},{\"end\":91310,\"start\":91281},{\"end\":91595,\"start\":91590},{\"end\":91873,\"start\":91854},{\"end\":92168,\"start\":92146},{\"end\":92552,\"start\":92503},{\"end\":92994,\"start\":92990},{\"end\":93421,\"start\":93389},{\"end\":93799,\"start\":93751},{\"end\":94188,\"start\":94154},{\"end\":94561,\"start\":94512},{\"end\":94965,\"start\":94944},{\"end\":95217,\"start\":95191},{\"end\":95469,\"start\":95439},{\"end\":95847,\"start\":95826},{\"end\":96110,\"start\":96085},{\"end\":96408,\"start\":96389},{\"end\":96707,\"start\":96676},{\"end\":97070,\"start\":97051},{\"end\":97533,\"start\":97488},{\"end\":97926,\"start\":97871},{\"end\":98280,\"start\":98235},{\"end\":98625,\"start\":98577},{\"end\":99022,\"start\":98999},{\"end\":99376,\"start\":99359},{\"end\":99748,\"start\":99717},{\"end\":100192,\"start\":100163}]"}}}, "year": 2023, "month": 12, "day": 17}