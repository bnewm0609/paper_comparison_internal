{"id": 237277210, "updated": "2022-06-12 15:42:30.779", "metadata": {"title": "Rate one-third non-malleable codes", "authors": "[{\"first\":\"Divesh\",\"last\":\"Aggarwal\",\"middle\":[]},{\"first\":\"Bhavana\",\"last\":\"Kanukurthi\",\"middle\":[]},{\"first\":\"Sai\",\"last\":\"Obbattu\",\"middle\":[\"Lakshmi Bhavana\"]},{\"first\":\"Maciej\",\"last\":\"Obremski\",\"middle\":[]},{\"first\":\"Sruthi\",\"last\":\"Sekar\",\"middle\":[]}]", "venue": "IACR Cryptol. ePrint Arch.", "journal": "Proceedings of the 54th Annual ACM SIGACT Symposium on Theory of Computing", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "At ITCS 2010, Dziembowski, Pietrzak, and Wichs introduced Non-malleable Codes (NMCs) which protect against tampering of a codeword of a given message into the codeword of a related message. A well-studied model of tampering is the 2-split-state model where the codeword consists of two independently tamperable states. As with standard error-correcting codes, it is of great importance to build codes with high rates. Following a long line of work, Aggarwal and Obremski (FOCS 2020) showed the first constant rate non-malleable code in the 2\u2212split state model; however, this constant was a minuscule 10\u22126! In this work, we build a Non-malleable Code with rate 1/3. This nearly matches the rate 1/2 lower bound for this model due to Cheraghchi and Guruswami (ITCS 2014). Our construction is simple, requiring just an inner-product extractor, a seeded extractor, and an affine-evasive function.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/iacr/AggarwalKOOS21", "doi": "10.1145/3519935.3519972"}}, "content": {"source": {"pdf_hash": "f4bf476717f37ed781da6b30392d5c2b85bee28c", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "e628d725372746af1501b28e10dad7b926956d52", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/f4bf476717f37ed781da6b30392d5c2b85bee28c.txt", "contents": "\nRate One-Third Non-malleable Codes\nACMCopyright ACM2022. June 20-24, 2022. June 20-24, 2022\n\nMaciej Obremski \nSruthi Sekar \n\nDepartment of Computer Science and Center for Quantum Technologies\nDepartment of Computer Science and Automation\nNational University of Singapore\nSingapore\n\n\nIndian Institute of Science\nBangaloreIndia\n\n\nCenter for Quantum Technologies\nMicrosoft Research\nIndia\n\n\nDepartment of Computer Science\nNational University of Singapore\nSingapore\n\n\nUniversity of California\nBerkeleyUSA\n\nRate One-Third Non-malleable Codes\n\nProceedings of the 54th Annual ACM SIGACT Symposium on Theory of Computing (STOC '22)\nthe 54th Annual ACM SIGACT Symposium on Theory of Computing (STOC '22)Rome, Italy; New York, NY, USA; Rome, ItalyACM142022. June 20-24, 2022. June 20-24, 202210.1145/3519935.3519972ACM Reference Format: * All authors have contributed equally. \u2020 Work done while at Indian Institute of Science, Bangalore./22/06. . . $15.00Non-malleable Codes, Randomness Extractors\nAt ITCS 2010, Dziembowski, Pietrzak, and Wichs introduced Nonmalleable Codes (NMCs) which protect against tampering of a codeword of a given message into the codeword of a related message. A well-studied model of tampering is the 2-split-state model where the codeword consists of two independently tamperable states. As with standard error-correcting codes, it is of great importance to build codes with high rates.Following a long line of work, Aggarwal and Obremski (FOCS 2020) showed the first constant rate non-malleable code in the 2\u2212split state model; however, this constant was a minuscule 10 \u22126 ! In this work, we build a Non-malleable Code with rate 1/3. This nearly matches the rate 1/2 lower bound for this model due to Cheraghchi and Guruswami (ITCS 2014). Our construction is simple, requiring just an inner-product extractor, a seeded extractor, and an affine-evasive function.CCS CONCEPTS\u2022 Theory of computation \u2192 Pseudorandomness and derandomization.\n\nINTRODUCTION\n\nThe security of cryptographic primitives, oftentimes, hold only under idealized assumptions. If we take the case of encryption or digital signatures (or most other primitives), the definition of security follows a standard template: the adversary gets to observe input-output behaviour and then needs to attack the primitive. In most cases, the implicit assumption is that the adversary gets to learn nothing other than this legitimate input-output behaviour. There are many instances where such an idealized setting is far from reality. For instance, there is a powerful class of attacks where the adversary could tamper with the secret keys of the system and observe input-output behaviour on these tampered keys. Such attacks can completely break the security of the system [10,14,45].\n\nMotivated by the need to protect data against such tampering attacks, Dziembowski, Pietrzak and Wichs, in their pioneering work, introduced \"Non-malleable Codes\" (NMCs). Non-malleability is a widely studied notion in cryptography and strives to defend against related tampering. Non-malleable codes, in specific, are coding schemes where the adversary cannot tamper the codeword into the codeword of a related message. Informally, NMCs provide the following guarantee: given a codeword of a message and a function chosen from a tampering family F , decoding ( ) gives something that is either equal to or completely independent of . This becomes extremely relevant when NMCs are used to store the secret key. NMCs assure us that the encoding of the secret key may be tampered with, but the tampered codeword decodes to a message that is independent of the original secret key. A consequence of this for the above-mentioned scenario is that observing input-output behaviour on this tampered key is now rendered useless and the cryptosystem continues to remain secure.\n\nAs observed in [32], it is impossible to build NMCs secure against unrestricted tampering i.e., when F corresponds to the family of all functions. (To see this, simply consider the function ( ) = Enc(Dec( ) + 1).) NMCs are therefore built with respect to specific classes of functions. A well-studied class of tampering functions is the 2-split-state model where the codeword consists of two states and , and the adversary tampers with each of these states independently. This is a very natural model and indeed such NMCs have found many applications in securing against physical (leakage and tampering) attacks [32,46], domain extension of encryption schemes [23,24], non-malleable commitments [36], non-malleable secret sharing [4,12,35,47] and privacy amplification [18].\n\nAs with standard error correcting codes, the most important parameter for a non-malleable code is its rate = where denotes the message length and the codeword length. Cheraghchi and Guruswami [21] showed that the optimal achievable rate for the 2-split-state family is 1 2 . The quest for this holy grail has inspired a long line of fascinating research, introduced new pseudo-random objects and intricate proof techniques. Most recently, Aggarwal and Obremski [9] constructed a constant rate 2-split-state NMC (with negligible error). While asymptotically significant, they achieve a constant rate of only around 1/1, 500, 000. Thus, there is an embarrassingly large gap between the best achievable rate (1/2) and what we currently know (1/1, 500, 000)! In this work, we build 2-split state non-malleable codes with a near-optimal rate 1 3 .\n\n\nOur Results\n\nWe obtain our construction of a rate-1 3 NMC via rate boosters which compile low rate NMCs into high rate ones. Using similar, but simpler, techniques we also obtain rate boosters for related primitives called \"non-malleable 2-source extractors\" (nm2Ext). We start by explaining our results on nm2Ext before proceeding to describe our results on NMCs.\n\nTowards the goal of constructing non-malleable codes, Cheraghchi and Guruswami [22] introduced Non-malleable Extractors as a stronger primitive that immediately yields efficient non-malleable codes as long as the preimage of the extractor is efficiently samplable. Informally, a non-malleable two-source extractor nm2Ext guarantees that for any independent random sources , , and any functions , with at least one of them having no fixed points, nm2Ext( , ) is indistinguishable from uniform even given nm2Ext ( ( ), ( )). 1 It is easy to see that a non-malleable two-source extractor gives non-malleability for a uniformly random message (average-case security) while a non-malleable code achieves nonmalleability for every message (worst-case security). A non-malleable two-source extractor can be transformed into a non-malleable code (Enc, Dec) by setting 2 Enc( ) := nm2Ext \u22121 ( ), and Dec( , ) := nm2Ext( , ). Non-malleable 2\u2212source extractors have been the focus of intense study, with several recent results focusing on improving their rate 3 .\n\nRate Boosters for Non-malleable Extractors. In this work, we give a rate booster for unbalanced non-malleable two-source extractors, with one source being much smaller than the other:\nInformal Theorem 1. If nm2Ext : {0, 1} 1 \u00d7 {0, 1} 2 \u2192 {0, 1} is a strong non-malleable two-source extractor, with 2 = ( 1 ), and Ext : {0, 1} 1 \u00d7 {0, 1} \u2192 {0, 1} 1\n2 is a strong seeded extractor, then nm2Ext \u2032 ( , ) := Ext( ; nm2Ext( , )) is a non-malleable extractor with rate 1/2. 1 We say that the extractor is a strong non-malleable two-source extractor if for any independent random sources , , and any functions , with at least one of them having no fixed points, nm2Ext( , ) is indistinguishable from uniform even given nm2Ext( ( ), ( )) and . 2 Here, the inverse function nm2Ext \u22121 (.), on input , picks and outputs , from the source distributions and , conditioned on nm2Ext( , ) = , respectively. 3 The rate of a non-malleable 2-source extractor is defined to be the ratio of the output length to the sum of the sizes of its two sources. NME to NMC: Limitations. We note that the transformation from nm2Ext to NMCs requires arguing worst-case security from averagecase security, which incurs a factor 2 |message size | penalty in the security parameter. Most results on building 2-split-state NMCs have focused on improving the rate of non-malleable two-source extractors and relied on this lossy transformation to build NMCs. We argue that this may not help.\n\nNote that the output of a seeded extractor, with seed length , is at best 2 \u2212 /2 -close to uniform. So we cannot use the transformation from non-malleable two-source extractors to non-malleable codes mentioned above, since our construction is unable to handle the penalty 2 |message size| = 2 1 /2 in the error. (For the error term to even be just less than 1, > 1 /2 i.e., a setting of parameters where the transformation above is useless.) We observe that this is not just a shortcoming of our construction -any construction of a nonmalleable two-source extractor with rate greater than 1/5 can likely not be transformed to a non-malleable code via the above average to worst-case transformation. To see this, we note that the existential construction via the probabilistic method (which is believed to have optimal parameters) of an -non-malleable two-source extractor given in [22] (Theorem 5.10) requires 3 \u00b7 2 2 > 2 2 , where is the message length. This implies that > 2 (2 \u22122 )/3 . To obtain a nontrivial construction of a non-malleable code, we require < 2 \u2212 which gives 2 > 5 , i.e., the rate of the non-malleable two-source extractor is less than 1/5.\n\nOur Non-malleable Code. With this intuition, we deviate entirely from the approach of building NMCs via Non-malleable 2-source Extractors. We significantly modify the transformation (in Informal Theorem 1) and introduce techniques that allow us to circumvent the average to worst-case penalty to obtain a rate booster directly for non-malleable codes.\n\nInformal Theorem 2 (Main Result). There exists an efficient, information -theoretically secure -right-augmented 4 non-malleable code in the 2-split-state model with rate 1/3. We show two instantiations of the scheme: the first gives us a strikingly simple construction (as we describe in Section 1.2) and achieves an error of 2 \u2212\u03a9 ( 1/5 /polylog( )) ; the second instantiation loses out on the simplicity but achieves an error of = 2\n\u2212\u03a9 ( log 3 )\n, where is the size of the message.\n\nIn the full version of our paper, we also show an application of our rate-1/3 non-malleable codes to get the first non-malleable commitment scheme with computational hiding and statistical hiding, achieving a communication cost of approximately 41 times the length of the message being committed to.\n\n\nTechnical Overview\n\nIn order to highlight the challenges of building high-rate, 2-splitstate NMCs, we start by recalling a related primitive called Nonmalleable Randomness Encoders introduced by Kanukurthi, Obbattu and Sekar [42]. Similar to a 2-split-state NMC, a 2-split-state NMRE consists of two independently tamperable states and .\n\nContrary to an NMC, where the encoder encodes arbitrary messages, an NMRE's encoder outputs and such that they decode to a random string, and herein lies all the difference: while the problem of building high-rate NMCs has eluded researchers for over a decade, we know how to build NMREs with rate 1 2 . At the same time, we emphasize that obtaining a high-rate NMC (instead of an NMRE) is critical for many applications (such as non-malleable commitments.)  Figure 1: Construction of the non-malleable randomness encoder by [42].\n\nInformally, the NMRE of [42] (see Figure 1.) picks the source and seed to a strong seeded extractor (Ext) as well as a key to a message authentication code (MAC). The code consists of two states, left: \u2113 \u2225 \u2225 , and right: , where \u2113, are a low-rate non-malleable encoding of , and is a tag evaluated on with as the key. The codeword, if valid, decodes to Ext( ; ). The high-level idea behind security is that if the codeword was tampered and leads to a different , then it is independent of and extractor security applies. This suffices to argue independence of the tampered message from . (In the case where , = , , MAC security comes into play.)\n\nIn order to extend this construction to encode an arbitrary message , one option would be to reverse sample and such that Ext( ; ) = . Unfortunately, this won't work because, on the one hand, we require the seed to be short (as it is encoded using a poor-rate NMC) and, on the other hand, given a source , there will be at most 2 | | possible messages that could have been encoded. In other words, to obtain any meaningful security, needs to be as long as the message. However, if is long, the above approach will not yield rate gains. These orthogonal constraints are the main stumbling block that we overcome in this work. To do so, we need to somehow use Ext( ; ) to \"mask\" the message . Clearly, since Ext( ; ) needs to be stored in a state different from the one storing , we will consider a target code which has the form (\u2113 \u2225 \u2225 ), ( \u2225 ), where would depend on the message as well as the extractor output Ext( ; ) i.e., , , \"shares\" . While there are many candidates for , the solution to our puzzle lies in figuring out a with which we can prove non-malleability. Here's the tricky part: when the adversary learns the tampered message, she learns information that depends on Ext( ; ). Furthermore, her tampering of , which influences the tampered seed and therefore Ext( ; ), also depends on Ext( ; ). In a nutshell, regardless of what is, it is clear that leveraging the security of the strong randomness extractor to argue non-malleability is not straightforward.\n\nOur first idea to overcome this challenge is to allow to be such that 2Ext(Ext( ; ), ) = where 2Ext is a 2\u2212source extractor. As it turns out, this construction is secure for the following reason: even if the tampered output leaks some information about Ext( ; ), the two source extractor 5 will ensure that the \"masking\" remains secure. This leads to an NMC with rate 1 9 in the split-state model. The main idea behind our final construction is to tackle the information leakage on Ext( ; ) head-on. In particular, though the tampered message may leak information about Ext( ; ), we can ensure that this information is useless as far as breaking nonmalleability is concerned. In fact, we do this while further simplifying our construction: We set the second half of the right state to be ( = Ext( ; ) \u2295 )\u2225 where is a MAC tag of evaluated on key . In retrospect, our encoding scheme is nearly identical to that due to Kanukurthi, Obbattu and Sekar [41]. While [41] gave a four-state construction, we merge states to obtain a two-state construction. We now offer a more detailed overview of the construction as well as the proof. Our construction uses the following building blocks:\nr ( ) ( )\n\nLeft State\n\n\nRight State\n\nMessage m Decoder: Figure 2: Construction Overview. \u2113, come from augmented non-malleable code. The encoder proceeds in steps: first, we randomly sample , , , (all independently of the message we are encoding), then we encode , , using NMC into \u2113, . We then set = Ext( ; ) \u2295 , and evaluate as a MAC tag of on key , and as MAC tag of on key .\n\na message authentication code, a strong seeded extractor, and a low-rate non-malleable code which we shall use to encode the keys of the message authentication code and the seed for the seeded extractor. The overview of the construction can be found in Figure  2. We will use the notation from the above-mentioned figure. Also, for a variable , will denote its tampering. We proceed with a slightly simplified sketch of the proof.\n\nProof Overview. In order to prove non-malleability, we need to demonstrate the existence of a simulator whose outputs is indistinguishable from the output of the tampering experiment. The simulator doesn't use the message; however, it outputs a special symbol to indicate that the tampered message is unchanged. The simulator's output is run through a special wrapper function (typically called \"Copy\" function) that, in this case, outputs the original message.\n\nOur proof proceeds by partitioning our codeword space. Our simulator will pick a codeword at random, check which partition it lies in to determine its output. We describe the partitions below:\n\u2022 P 1 = {(\u2113, , , , , ) : ( , , , ) = ( , , , )\u2227NMDec( \u2113, ) = NMDec(\u2113, )}.\nThis partition captures the scenario when, even after tampering, the inner codeword (\u2113, ) decodes to the same message, and , , , remain unchanged. In this case, the final codeword must decode to the same message.\n\u2022 P 2 = {(\u2113, , , , , ) : ( , , , ) \u2260 ( , , , )\u2227NMDec( \u2113, ) = NMDec(\u2113, )\n}. P 2 captures the scenario when, the decoding of the inner code remains unchanged after tampering, while one of the pairs ( , ) or ( , ) are changed. We will show that if this event occurs then, using the security of MACs, the tampering is detected with overwhelming probability.\n\u2022 P 3 = {(\u2113, , , , , ) : NMDec(\u2113, ) \u2260 NMDec(\u2113, )}. P 3 cap-\ntures the scenario that the inner code is non-trivially tampered and does not decode to NMDec( , ). In this case, we will show that the tampered codeword is independent of the original message .\n\nThe simulator generates the codeword (( , , ), ( , , )) of a random message. If this simulated codeword is in P 1 , it outputs same * . Recall that the wrapper function will then output the original message. If the simulated codeword is in P 2 , the simulator outputs \u22a5, else the simulator outputs Dec ( , , ), ( , , ) . (Note that our code is right-augmented i.e., it satisfies a stronger notion of security where the right state of the codeword can be revealed without breaking non-malleability.)\n\nTo prove non-malleability, we need to show that this behaviour of the simulator is indistinguishable from that of the tampering experiment. To do this, we first show that the probability of a codeword being in any given partition is independent of the message 6 . Next, we show that the output of the tampering experiment is, in each case, indistinguishable from the simulator's output.\n\nFor the case where the codeword is in partition P 1 , it is clear that the simulator output is identical to that of the tampering experiment. We, therefore, focus on the other two cases.\n\n\nCase 1: Codeword is in\nP 2 i.e., NMDec( , ) = NMDec( , ).\nIntuitively, we would like to argue that the tag keys , will remain securely hidden from the adversary, and if he decides to tamper with or he will not be able to fake tags , . Thus either the whole codeword remains untampered (in which case, we are in P 1 ) or the new codeword will not be valid. The standard approach would be to argue that if Pr(NMDec( , ) = NMDec( , )) is not too small then\nPr(tampered codeword is valid \u2227( , ) \u2260 ( , ) | NMDec( , ) = NMDec( , )) is negligible.\nHowever we have to be delicate here. For example if adversary wants to tamper with he has access to and knows that NMDec( , ) = NMDec( , ). This reveals some information about and thus adversary potentially might get hold of some partial information about the encoded data (and , in particular). This is why it is actually easier to directly argue that\nPr(tampered codeword is valid \u2227 ( , ) \u2260 ( , ) \u2227 NMDec( , ) = NMDec( , )) (1)\nis negligible. Notice that the codeword will not be valid in only one of three cases: if NMDec( , ) = \u22a5 or if one of the MACs on or does not verify correctly. Since NMDec( , ) = NMDec( , ) we know that the only options left are the failures to verify MACs. Moreover we know that ( , ) = ( , ), thus Inequality 1 can be rewritten:\nPr(Vrfy ( , ) = Vrfy ( , ) = 1 \u2227 ( , ) \u2260 ( , ) \u2227 NMDec( , ) = NMDec( , ))(2)\nis negligible. Now we can upper-bound the term in the Inequality 2 by the following\nPr(Vrfy ( , ) = Vrfy ( , ) = 1 \u2227 ( , ) \u2260 ( , )).\n\nWhich by the union bound can be upper-bounded with\nPr(Vrfy ( , ) = 1 \u2227 \u2260 ) + Pr(Vrfy ( , ) = 1 \u2227 \u2260 ).\nFinally, we can argue that each of the elements of the sum is negligible. Notice that when tampering with adversary has access to but that can not reveal any information about since every non-malleable code is a secret sharing scheme. The rest follows from the security of MACs.\n\n\nCase 2: Codeword is in\nP 3 i.e., NMDec( , ) \u2260 NMDec( , ).\nIn this case, we will follow the adventures of the seed ; the MACs and keys do not play any role here. In fact, for the purposes of this proof sketch, we will ignore the MAC keys and tags. We will also assume that this case (i.e., codeword \u2208 P 3 ) occurs with substantial probability (else we don't have to worry about it). In such a case, we will argue that the final message is independent of the original message.\n\nTo provide a proof sketch for this case, we consider the following modified construction: Let (\u2113, ) \u2190 NMEnc( ), where (NMEnc, NMDec) is the low-rate non-malleable code. Pick a random , the source for a strong extractor. Then the left state of the final non-malleable code is \u2113 \u2225 (where is sampled from ). The right state is \u2225( = Ext( ; )). In other words, we've simply removed the MAC keys and tags. While this is obviously not a secure non-malleable code, we use this construction for the sake of ease of exposition.\n\nBy the properties of the augmented NMC 7 we know that there is a simulator NMSim that outputs sim , sim . Given that we are in the case where NMDec( , ) \u2260 NMDec( , ), sim is independent of . As discussed earlier, this knowledge alone doesn't suffice for us. The tampering of (which influences ) depends on which in turn uses the extractor output. In order to output the tampered message, we need to be able to compute Ext( ; ). We handle this by using a Markov style argument, as we shall see shortly. 7 Augmented NMC is a natural extension of NMC (and equivalent of strong extraction property). We require that NMDec( , ) is equal or independent of NMDec( , ) and revealing or doesn't ruin this independence.\n\nNon-malleability of the underlying NMC:. To use the non-malleability of the inner code, (NMEnc, NMDec), consider the tampering functions * , * on ( , ) that sample , uniformly and then compute * ( ) = 1 ( , ) and * ( ) = 1 ( , ). Let = NMDec( * ( ), * ( )).\n\nBy the augmented non-malleability of (NMEnc, NMDec), there exists a simulator NMSim such that\n, , , , \u2248 Copy( , NMSim), , , ,(3)\nwhere the output of NMSim depends on , and the functions 1 , 1 . By augmented non-malleability, recall that NMSim is parsed as the joint distribution (NMSim 1 , Sim ). We further denote NMSim 1 by sim , when NMSim 1 is conditioned to not output same * or \u22a5.\n\nWe denote by 1 the event that ( , , , ) \u2208 P 3 , 2 the event that \u2260 (Note that 1 is the same as 2 ), and 3 the event that\nNMSim 1 \u2209 {(same * , )}. We first show that Pr[ 3 ] is high.\nFrom here, using properties of statistical distance, and expanding out the definition of copy, we show that:\n( , , , , )| 2 \u2248 ( sim , Sim , , , )| 3(4)\nWe next show that the (average) conditional entropy of given sim , Sim , Ext( ; ) is high; here Sim and are tamperings of Sim , and can be computed as their deterministic function. In particular, we have that\nH \u221e | sim , Sim , Ext( ; sim )\nis high (as ( sim , Sim , Ext( ; sim )) are \"small enough\"). Further, since is independent of sim , we use the strong extractor property of Ext, to show the following:\nExt( ; ) \u2248 | , Sim , , Sim , Ext( ; sim ), sim(5)\nIn order to proceed with the proof, we will prove a statement similar to the one above; except that instead of the tampered seed being simulated, we will let it be the tampered seed (in the underlying non-malleable code). (Eventually we would need to replace by := Ext( ; ) \u2295 .) For the remainder of the proof, let , , , be distributed as , , , | 1 . Also, let , , , be the corresponding tampered random variables, after tampering conditioned on the event that ( , , , ) \u2208 P 3 . For ease of notation, in the remainder of the exposition below, we skip writing the conditioning on 1 / 2 / 3 (but this exists throughout). By inequality 4 and using simple property of statistical distance, we can get the following inequalities corresponding to the LHS and RHS of inequality 5 respectively:\nExt( ; ), , Sim , , Sim ,Ext( ; sim ), sim \u2248 Ext( ; ), , , , , Ext( ; ),(6)U, , Sim , , Sim , Ext( ; sim ), sim \u2248 U, , , , , Ext( ; ),(7)\nApplying triangle inequality on Inequalities (5), (6), (7), we get that\nExt( ; ) \u2248 | , , , , Ext( ; ),(8)\nNote that in the equation above, there is no dependence on on either side as is independent of . Ultimately, we would like to say that the output of the tampering experiment is indistinguishable from the simulated output. We accomplish this in three steps:\n\n1. Adding . In equation 8, the only information correlated to and is . Since Ext( ; ) \u2248 U even given , we can safely add to Equation 8.\nExt( ; ) \u2248 | , , , , Ext( ; ), , , 1 ( , ) .\nFrom here, we would ideally like to drop and somehow bring back the dependence on via . For now, we drop\nExt( ; ) \u2248 | , , , Ext( ; ), , , .(9)\nThe way we'll bring is to condition on being a \"cipher of \". For that, we first need to prove that is independent of given appropriate auxiliary information.\n\n2. Capturing 's correlation with . In this step, we will prove that is independent of given , , , Ext( ; ), , , . We first observe that is independent of given ( , , ). Now we would like to add the other random variables in the auxiliary information. We use a Lemma due to Dziembowski and Pietrzak [31,Lemma 4] which states that independence in the presence of additional auxiliary information is indeed possible, provided it satisfies a few properties:\n\n\u2022 The auxiliary information may be computed in multiple steps. \u2022 Computation in all of the steps can use ( , , ) and the part of the auxiliary information generated in previous steps. \u2022 Computation in a given step can either depend on or but not both.\n\nBy computing auxiliary information in the order followed by followed by Ext( ; ), we can easily prove that is independent of given , , , Ext( ; ), , , .\n\n3. Conditioning appropriately. Since is independent of given appropriate auxilliary information, in Equation 9, we can condition to either be \u2295 Ext( , ) or \u2295 . (Note that the former is identical to .) By doing so, Equation 9 will lead to the following , , , , Ext( ; ), , , \u2248 U, , , , Ext( ; ), , , , where , are appropriately computed. The desired result follows by observing that the tampered codeword is a function of , , Ext( ; ), , .\n\nPutting it Together. So far, we've described the simulator and sketched the proof for showing that the simulated output is indistinguishable from the tampered output in each of the cases. To complete the proof, we need to combine all three cases and, in particular, the probability that the codewords (tampered vs simulated) lie in each of the partitions needs to be analysed.\n\nCandidate Instatiation. While we can turn any augmented nonmalleable code (or randomness encoder) into a good rate nonmalleable code, a very simple result can be obtained using [6]. To encode a message all we will need is an affine evasive function \u210e. It is a function \u210e : F \u2192 M \u222a\u22a5 such that Pr(\u210e( + ) \u2260 \u22a5 | \u210e( ) = ) is negligible for all , , , and |\u210e( ) = should be efficiently samplable, the construction of the said function can be found in [1,6]. The encoding procedure is described in Figure 3.\n\nShort and Simple: The Encoding Procedure:\n\n(1) Sample , , , uniformly at random.\n\n(2) Sample uniformly random, such that \u210e( ) = , , .\n\n(3) Sample \u2113, \u2208 F uniformly random, such that \u27e8\u2113, \u27e9 = .\n\n(4) Evaluate = Ext( ; ) \u2295 . The final output is: on the left: \u2113, , , and on the right: , , . Figure 3: Simple non-malleable code with a great rate. Here \u210e is an affine evasive function. The decoding procedure is analogous: the decoder inverts Steps 3 and 2, obtains keys , , verifies MACs from the Step 5 and proceeds to obtain the message via the Step 4. If in Step 2 the function \u210e outputs \u22a5, then the decoder aborts and outputs \u22a5.\n\n\nRelated Work\n\nWe now sketch the landscape of this area and particularly summarize the results on 2-split-state NMCs in Table 1. In [32], in addition to introducing non-malleable codes, Dziembowski et al. also introduced a model of tampering called the -split-state model, where the codeword consists of independently tamperable states. They give the first NMC constructions in the -split-state model (where is the codeword length), with rate \u2248 0.19, and the 2-splitstate model (using random oracles). Dziembowski, Kazana and Obremski [30] provided the first construction of 2-split-state NMCs without any assumptions. Their construction enabled encoding of 1-bit messages and used two-source extractors. The first NMC in the 2-split-state model for -bit messages was given by Aggarwal, Dodis and Lovett [6], which used inner product extractors with tools from additive combinatorics. In [21], Cheraghchi and Guruswami brought focus to the rate = message length codeword length of non-malleable codes. In particular, they showed that the optimal achievable rate for the -split-state family is 1 \u2212 1/ . Note that in the split-state tampering model, having as few states is most desirable, with 2 states being the best achievable. By the above result, the best possible rate for the 2-split-state model is therefore 1 2 . A long series of works 8 [5,9,17,20,22,37,[41][42][43][44] has made partial progress towards achieving these parameters. We now discuss some of these results. The work of Cheraghchi and Guruswami [22] gave the first optimal rate non-malleable code in the -split-state model (where is the codeword length). More importantly, this work introduced non-malleable two-source extractors and demonstrated that these special extractors can be used to generically build 2split-state NMCs. This connection has led to several fascinating works [17,20,43,44] striving to improve the rate and number of states of non-malleable codes. Most notably, Chattopadhyay and Zuckerman [20] built a 10-state NMC with a constant rate, making this the first constant rate construction with a sublinear number of states. They achieve their result by first building a non-malleable extractor with 10 sources and then using the connection due to [22]. Aggarwal, Dodis, Kazana and Obremski [5] introduced the concept of non-malleable reductions -which would later be used to build constant rate NMCs [9]. The work of Kanukurthi, Obbattu and Sekar [41] used seeded extractors to build a compiler that transforms a low rate non-malleable code into one with high rate and, in particular, obtained a rate 1/3, 4\u2212state non-malleable code. This was subsequently improved to three states in the works of Kanukurthi, Obbattu and Sekar [42] as well as Gupta, Maji and Wang [37]. Li [44] obtained 2-split-state NMC with rate ( log log log(1/ ) log log(1/ ) ) (where is the error). Particularly, this gave a rate of (log log( )/log( )), for negligible error = 2 \u2212\u03a9 ( ) , and a constant rate for constant error, making this the first constant rate scheme in the 2\u2212split-state model. The most recent work of Aggarwal and Obremski [9] relied on the concept of non-malleable reductions and built the first constant rate 2-split-state NMC with negligible error. \n\n\nOrganization of the Paper\n\nWe describe the preliminary building blocks in Section 2. We then describe our rate boosters for the non-malleable codes in Section 3. Finally, we describe our rate boosters for the non-malleable randomness extractors in Section 4.\n\n\nPRELIMINARIES 2.1 Notation\n\nWe begin by describing some notations which we use. We use \u2208 to denote that is sampled uniformly from the set S, and \u2190 to denote that is sampled from the probability distribution X. The concatenation of two binary strings and is denoted by \u2225 . We denote the length of a binary string by | |, and the cardinality of any set by | |. For any set , denotes the uniform distribution on , and we use the shorthand \u2113 to represent {0,1} \u2113 , for any integer \u2113 > 0. All logarithms are over base 2. The set \\ def = { : \u2208 , \u2209 }, is the set of elements in that are not in .\n\nFor any event , and any random variable 1 , 1 | denotes the distribution of the random variable 1 conditioned on the event . For any random variables 1 , 2 and an event , ( 2 , 1 | , 2 ) denotes the distribution where we sample 2 according to its marginal distribution, and then sample 1 conditioned on the choice of 2 and the event .\n\n\nStatistical Distance and Entropy\n\nLet 1 , 2 be two probability distributions over some set . Their statistical distance is We require the following lemma from [6], which states that if the pairs of random variables ( 1 , 2 ) and ( 1 , 2 ) are statistically close, then for any set A, the conditional random variables 2 conditioned on the event 1 \u2208 A, i.e., 2 | 1 \u2208A , and 2 conditioned on the event 1 \u2208 A, i.e., 2 | 1 \u2208A are also close. Lemma 2.3. [6, Claim 4] Let 1 , 2 , 1 , 2 be random variables such that ( 1 , 2 ) \u2248 ( 1 , 2 ). Then, for any non-empty set A, we have:\n\u0394( 1 ; 2 ) def = max \u2286 {Pr[ 1 \u2208 ]\u2212Pr[ 2 \u2208 ]} = 1 2 \u2208 Pr 1 [ ] \u2212\u0394( 2 | 1 \u2208A ; 2 | 1 \u2208A ) \u2264 2 Pr[ 1 \u2208 A] .\nWe require the following lemmas. The following result is from [31]. For a proof, see [7].\n\nLemma 2.5. Let \u2208 A and \u2208 B, and 0 be random variables such that is independent of given any fixing of the random variable 0 . Let 1 , 2 , . . . be random variables defined as functions of , satisfying the following property. For all \u2208 N, if is even then = ( 0 , 1 , . . . , \u22121 , ) and if is odd, then = ( 0 , 1 , . . . , \u22121 , ) for some function . Then for all , is independent of given any fixing of 0 , 1 , . . . , .\n\nFurther, we require the following simple lemma about the statistical distance between conditional distributions, given the distance between a pair of joint distributions. Lemma 2.6. For any random variables , and and uniform random variable , with , , defined over some binary space X, such that is independent of conditioned on and also independent of conditioned on , if ( , ) \u2248 ( , ), then it implies that ( , )|( \u2295 = ) \u2248 ( , )|( \u2295 = ), for any \u2208 X.\n\nProof. Assume to the contrary that there exists an unbounded adversary, D, who can distinguish between ( , )|( \u2295 = ) and ( , )|( \u2295 = ) for some \u2208 X, with advantage > . Then, we claim that we can build an adversary distinguishing ( , ) and ( , ) with the same advantage. The reduction is simple: given ( , ) from ( , ) or ( , ), we sample \u2190 | \u2295 = . Given the independence of from both | and | , ( , ) is correctly simulated to be either ( , )|( \u2295 = ) (if ( , ) was from ( , )) or ( , )|( \u2295 = ) (if ( , ) was from ( , )), for D. Hence, the lemma is proved. \u25a1 We require the following seeded extractor construction from [38]. \n\n\nRandomness Extractors\n\n\nOne-Time Message Authentication Codes\n\nOur construction also requires the use of information theoretic one-time message authentication codes, which give a guarantee that, given a message-tag pair, ( , ), where is generated using a tag generation algorithm, using a random authentication key, the probability with which an (unbounded) adversary can come up with a valid message-tag pair ( \u2032 , \u2032 ), for \u2032 \u2260 , is negligible. For simplicity, we consider Tag to be a deterministic function. The following lemma guarantees that there exists efficient one-time message authentication codes where the key and tag can be much shorter than the message to be authenticated. We refer the reader to [27] for a construction satisfying these parameters.\n\n\nNon-malleable Codes\n\nNon-malleable codes (NMCs) were introduced in [32]. We now state the equivalent definition of non-malleable codes given in [22]. where Tamper denotes the distribution Dec( (Enc( ))) and Copy( , NMSim) is defined as\u02dc\u2190\nCopy( , NMSim) = \u02dc= same * otherwise\nNMSim should be efficiently samplable given oracle access to (.).\n\nSplit-state Tampering Family. Specifically, we consider NMCs with respect to the two split-state tampering family defined below, for message space {0, 1} and codeword space {0, 1} \u00d7 {0, 1} , comprising two states:\nF split def = {( , ) : , : {0, 1} \u2192 {0, 1} }\nOur construction requires NMCs with respect to the split-state tampering family satisfying an additional property called \"augmented security\", which was introduced in [2], and guarantees that in addition to the tampered message, one of the states, say , of the codeword is also simulatable independent of the message.\n\nWe formally define NMCs against the split-state model, with augmented security below. \nCopy( , NMSim) def \u2261 ( , ) if\u02dc= same * (\u02dc, ) otherwise\nWe call the above code as left-augmented (NMSim outputs the left state), and say that the code is right-augmented when the simulator outputs the right state instead.\n\nWe also require the following secret sharing property of nonmalleable codes in the 2-split-state model F split . It states that any 2split-state non-malleable code is a 2-out-of-2 secret sharing scheme.\n\nLemma 2.14. \n0 , 1 \u2208 {0, 1} , 0 \u2248 2 1 , where ( 0 , 0 ) \u2190 Enc( 0 ) and ( 1 , 1 ) \u2190 Enc( 1 ).\nWe instantiate our NMC with two constructions, one due to [1,3,6] and another due to [44], which are both stated below in Theorems 2.15 and 2.16, respectively. While the former instantiation gives us a very simple non-malleable code, as explained in the introduction, the latter instantiation gives us a better error for the same rate. log log(1/ ) ) and error . The NMC in Theorem 2.15 is shown to be augmented secure in [2]. Further, the NMC in Theorem 2.16 relies on building a two source non-malleable extractor and then using the [22] compiler to get a 2-split-state NMC. Hence, we can show that the NMC in Theorem 2.16 is in fact an augmented NMC using the following two observations: 1) the two source non-malleable extractor constructed in [44] is in fact, a strong two source non-malleable extractor (which allows leaking one complete source); 2) as proved in [42,Proposition 2], the [22] compiler gives an augmented NMC, when a strong twosource non-malleable extractor is used.\n\n\nA RATE BOOSTER FOR NON-MALLEABLE CODES\n\nIn this section, we prove the following result. ) be an -augmented non-malleable code in the split-state model. Then, for any * \u2208 ( ), there exists an efficient ( \u221a + 2 \u2212\u03a9 ( /log ) )-augmented non-malleable code (specifically, right-augmented, i.e., the simulator outputs the right state along with the tampered message) from * -bit messages to at most (3 + (1)) * -bit codewords.\n\nIn Section 3.1, we will give our construction, and its security is proved in Section 3.2. Using (NMEnc, NMDec) from Theorem 2.15, we get the following instantiation, which is conceptually very simple, as shown in Figure 3 in the introduction. Corollary 3.2. For any integer * > 0, * \u2208 2 \u2212\u03a9 ( ( * ) 1/5 /polylog( * )) , there is an efficient * -right-augmented non-malleable code from *bit messages to (3 + (1)) * -bit codewords in the split-state model.\n\nFurther, using (NMEnc, NMDec) from Theorem 2.16, and setting * = log we can get the following instantiation, with a better error at the expense of being more complicated.\n\nCorollary 3.3. For any integer * > 0, * \u2208 2 \u2212\u03a9 ( * /log 3 * ) , there is an efficient * -right-augmented non-malleable code from * -bit messages to (3 + (1)) * -bit codewords in the split-state model.\n\n\nOur Construction\n\nBuilding Blocks. Let = 2 * + 8 . Our construction, shown in Figure 4 requires the following building blocks.\n\n\u2022 Let Ext be the ( , , , * , 2 )-strong seeded extractor from Lemma 2.8 with = * + 4 , and 2 = 2 \u2212\u03a9 ( /log ) .\n\n\u2022 Let (Tag, Vrfy) be the one time 3 -message authentication codes from Lemma 2.10 with key length = \u0398( ), messages of size at most , tag length = \u0398( ), and 3 = 2 \u2212\u03a9 ( ) . We now describe our construction below. The encoder chooses a source and a seed corresponding to a seeded extractor Ext and then computes := \u2295 Ext( ; ), where \u2295 is the bitwise XOR. Further, it authenticates the source and the ciphertext to get the tags and respectively, generates the non-malleable encoding (using the underlying NMC) of the seed and the authentication keys to get (\u2113, ) and finally outputs (\u2113, , ) as one state and ( , , ) as the other.  \n\n\nSecurity Proof\n\nThe correctness of the construction is immediate by definition. We now prove the desired non-malleability.\n\nFix any \u2208 {0, 1} * , tampering functions ( , ) \u2208 F split . Throughout this proof, we use the notation to denote any part of the message/codeword after tampering. Let = ( 1 , 2 , 3 ) and  The event that the codeword is in partition P 1 corresponds to the event when, even after tampering, the decoding of the inner codeword ( , ) remains unchanged, and also , , , remain unchanged, and hence the final tampered codeword must decode to the original message. The event that the codeword is in partition P 2 corresponds to the event that the decoding of the inner code remains unchanged after tampering, while one of the pairs ( , ) or ( , ) are changed. We will show that if this event occurs then, using the security of MACs, the tampering is detected with overwhelming probability. The event that the codeword is in partition P 3 corresponds to the event that the inner code is nontrivially tampered and does not decode to Dec( , ). In this case, we will show that the tampered codeword (and hence its decoding) is independent of the original message . We begin by showing that the event that the codeword ( , , , , , ) \u2208 P for some \u2208 {1, 2, 3} is independent of the message even given , , . 9 We slightly abuse notation and let and denote both the distribution of the authentication tags and as well as samples from those distributions.\n= ( 1 , 2 , 3 ),\nLet be uniform in {0, 1} * and independent of , , , , , and hence also of , . Let = Tag ( ). Let 1 , 2 , 2 be boolean random variables defined as follows. The random variable 1 indicates whether , changes after tampering, i.e., 1 = 1 if and only if ( 2 ( , , ), 3 ( , , )) = ( , ). Similarly, the random variable 2 (respectively, 2 ) indicates whether , (respectively, , ) changes after tampering, i.e., 2 = 1 (respectively, 2 = 1) if and only if ( 2 ( , , ), 3 ( , , )) = ( , ) (respectively, ( 2 ( , , ), 3 ( , , )) = ( , )). Notice that for any , whether the event that ( , , , , , ) \u2208 P (respectively, ( , , , , , ) \u2208 P ) occurs is determined by the random variables , , 1 ( , , ), 1 ( , , ), 1 , and 2 (respectively, , , 1 ( , , ), 1 ( , , ), 1 , and 2 ).\nLemma 3.4. \u0394 , ; , | , , 1 ( , , ), 1 \u2264 4 + 2 \u2212\u03a9 ( /log ) .\nProof. By Lemma 2.14, we have that one of the shares of a splitstate non-malleable code is 2 -independent of the message. In other words, there is a random variable * independent of , , such that , , , \u2248 2 * , , , ,\n\nIntroducing fresh random variable that is sampled independent of , , , , and observing that is a deterministic function of and , we have that , , , , , \u2248 2 * , , , , , .\n\nLet * 1 be a boolean random variable that is 1 if and only if ( 2 ( * , , ), 3 ( * , , )) = ( , ). By Lemma 2.1, the average minentropy of given * 1 , 1 ( * , , ) is at least \u2212 \u2212 1, which is at least . Thus, by Lemma 2.8, we have that \u0394(Ext( ; ) ; | * 1 , 1 ( * , , ), * , , , ) \u2264 2 , (11) where is uniform in {0, 1} * and independent of all other random variables. Applying Lemma 2.2 to Equation 10 twice, we get \u0394( * 1 , 1 ( * , , ), * ; 1 , 1 ( , , ), | Ext( ; ), , , ) \u2264 2 ,\n\nand \u0394( * 1 , 1 ( * , , ), * ; 1 , 1 ( , , ), | , , , ) \u2264 2 .\n\n(13) By triangle inequality on inequalities 11, 12, 13, we get that \u0394(Ext( ; ) ; | 1 , 1 ( , , ), , , , ) \u2264 2 + 4 .\n\nNotice that the distribution is independent of and is only correlated to ( , , , ) (as ( , ) \u2261 NMEnc( , , )). Hence by applying Lemma 2.2, we can include to get that \u0394(Ext( ; ) ; | 1 , 1 ( , , ), , , , , ) \u2264 2 + 4 .\n\nFinally, observing that given ( 1 , 1 ( , , ), , , , , ), the random variable Ext( ; ) \u2295 is distributed as , and \u2295 is distributed as , we get the desired result by another application of Lemma 2.2. \u25a1\n\nThe following lemma bounds the probability that the codeword is in P 2 and doesn't decode to \u22a5. Proof. Since the codeword is in P 2 , we have that Dec( , ) = Dec( , ), and hence , remain unchanged after tampering. Moreover, one of the pairs ( , ) or ( , ) has been tampered with. Assume without loss of generality that ( , ) has been changed after tampering. By the security of MAC, this tampering will be detected by our decoding algorithm as long as the tampering is independent of . We argue using the secret sharing property of non-malleable codes that this is indeed the case since is almost independent of . By Lemma 2.14, we have that one of the shares of a split-state non-malleable code is 2 -independent of the message. In other words, there is a random variable * independent of , , such that , , , \u2248 2 * , , , ,\n\nIntroducing fresh random variable that is sampled independent of , , , , and observing that is a deterministic function of and , we have that Similarly, there exists * independent of , , such that , , , \u2248 2 * , , , , and observing that is independent of , , given , we have that , , , , , \u2248 2 * , , , , , .\n\nThis implies, via an argument similar as above, that\nPr[Vrfy ( 2 ( , , ), 3 ( , , )) = 1 \u2227 ( 2 ( , , ), 3 ( , , ) \u2260 ( , )] \u2264 2 \u2212\u03a9 ( ) + 2 .\nThe desired result then follows from a simple union bound by observing that if Tamper , \u2260 \u22a5, and the codeword is in P 2 , i.e., , remain unchanged after tampering, while , , , are changed after tampering, then we must have that\n\n\u2022 Vrfy ( 2 ( , , ), 3 ( , , )) = 1 \u2022 Vrfy ( 2 ( , , ), 3 ( , , )) = 1,\n\n\u2022 At least one of ( 2 ( , , ), 3 ( , , )) \u2260 ( , ) or ( 2 ( , , ), 3 ( , , )) \u2260 ( , ). Proof. In this lemma, we wish to argue that the decoding of the tampered codeword is independent of the message . We begin by using that since the codeword is in P 3 , the output of the tampered codeword for the inner code NMEnc( , , ) is independent of which is the seed of the strong extractor.\n\nWe will use the non-malleability of the inner code, (NMEnc, NMDec). Consider the tampering functions * , * on ( , ) that sample , uniformly and then compute * ( ) = 1 ( , , Tag ( )) and * ( ) = 1 ( , , Tag ( )). Let , , = NMDec( * ( ), * ( )). 10 By the -augmented non-malleability of (NMEnc, NMDec), there exists a simulator NMSim such that , , , , , , \u2248 Copy( , NMSim), , , ,\n\nwhere the output of NMSim depends on , and the functions 1 , 1 . Recall (from definition 2.13) that NMSim is parsed as the joint distribution (NMSim 1 , Sim ). We further parse NMSim 1 as ( Sim , Sim , Sim ), when NMSim 1 is conditioned to not output same * or \u22a5. If NMSim 1 = \u22a5, set ( Sim , Sim , Sim ) = (\u22a5, \u22a5, \u22a5).\n\nThe event that ( , , , , , ) \u2208 P 3 is the same as ( , , ) \u2260 ( , , ). By inequality (14) \n\u2264 2 \u2212 \u2212 \u2264 2 \u2212 ,\nwhere we use that > 2 + 2 \u2212 . Thus H \u221e ( |NMSim 1 \u2209 {same * , ( , , )}) \u2265 \u2212 . For the remainder of the proof, we assume NMSim 1 \u2209 {same * , ( , , )} (or, when appropriate, ( , , , , , ) \u2208 P 3 ) but don't state them explicitly. Let Vrfy Sim \u2113 := Vrfy Sim ( 2 ( Sim , , ), 3 ( Sim , , )), where = Tag ( ). By Lemma 2.1, we have that H \u221e ( | Sim , Sim , Sim , Vrfy Sim \u2113 , 1 ( Sim , , ), Ext( 2 ( Sim , , ); Sim )) 10 For the purpose of this proof alone, we slightly abuse notation and let , , denote the tampered seed and the MAC keys when the codeword ( ( , , Tag ( )), ( , , Tag ( ))) is tampered using functions , . is at least \u2212 \u2212 * \u2212 \u2212 \u2212 1 \u2265 * + 4 . Thus, by the strong extractor property of Ext, Ext( ; ) \u2248 2 | , Sim , , 1 ( Sim , , ), Sim , Sim Ext( 2 ( Sim , , ); Sim ), Sim , Vrfy Sim \u2113 (16) In order to show that the tampered codeword is independent of the message, we first need a statement similar to the inequality 16, but where the simulated output is replaced by the decoding of the tampering of ( , , , , , ). We will obtain this using (15) twice and applying the triangle inequality. For the remainder of the proof, let , , , , , be distributed as , , , , , | ( , , , , , ) \u2208 P 3 . Also, let , , , , , be the corresponding random variables after tampering conditioned on the event that ( , , , , , ) \u2208 P 3 . We shorthand the distribution in the LHS and RHS of 16 by and , respectively. Also, we define Vrfy \u2113 := Vrfy ( 2 ( , , ), 3 ( , , )). Applying Lemma 2.2 on inequality 15, we get that \u2248 2 Ext( ; ), , , , , Ext( ; ), , , , Vrfy \u2113 ,\n\nand \u2248 2 , , , , , Ext( ; ), , , , Vrfy \u2113 .\n\nBy triangle inequality applied on the inequalities (17), (18), and (16), we have that Ext( ; ) \u2248 2 + 4 | , , , , Ext( ; ), , , , Vrfy \u2113 .\n\nNotice that given ( , , , , , , ), the random variable is independent of , and hence we obtain that \n\nwhere def = 1 ( , , ).\n\nWe now observe that is independent of given , , , Ext( ; ), , , , Vrfy \u2113 , , . To see this, we will use Lemma 2.5 with 0 = , , , , , and then 1 = , 2 = , 3 = Ext( ; ), Vrfy \u2113 , and observing that , , is a deterministic function of and . Thus, Ext( ; ) is independent of given , , , Ext( ; ), , , , Vrfy \u2113 , , . Now, applying Lemma 2.6 to equation 19, with = Ext( , ), = , = ( , , , Ext( ; ), , , , Vrfy \u2113 , , ), and using the above observation that = is independent of Ext( ; ) given and of given , we get that conditioned on \u2295 Ext( ; ) = on the LHS, and on \u2295 = on the RHS: We drop the adjective strong when the distribution is excluded from the statistical distance above. The rate is defined to be the ratio /( 1 + 2 ).\n\nWe consider an ( 1 , 2 , 1 , 2 , , 1 )-strong two-source unbalanced non-malleable extractor, nm2Ext, with 2 = ( 1 ), and an We show that the above function is a two-source non-malleable extractor achieving rate 1/2, with appropriate instantiation of Ext.\n\nTheorem 4.2. If nm2Ext is an ( 1 , 2 , 1 , 2 , , 1 )-strong twosource unbalanced non-malleable extractor, with 2 = ( 1 ) and Ext is an ( 1 , 1 , , , 2 )-strong seeded extractor,then nm2Ext * is an ( 1 , 2 , 1 , 2 , , 1 + 2 )-two-source non-malleable extractor. Further, if we instantiate Ext with the seeded extractor in Lemma 2.8, with\n\n( 5 )\n5Calculate MACs = Tag ( ) and = Tag \u2032 ( ).\n\n\nare said to be -close if \u0394( 1 ; 2 ) \u2264 and denoted by 1 \u2248 2 ). We shorthand \u0394( 1 , ; 2 , ) by \u0394( 1 ; 2 | ) for any random variables 1 , 2 , . The min-entropy of a random variable isH \u221e ( ) = \u2212 log(max Pr[ = ]). For a joint distribution ( , ), the (average) conditional min-entropy of given is defined in[28] asH \u221e ( | ) = \u2212 log( E \u2190 (max Pr[ = | = ]))(here the expectation is taken over for which Pr[ = ] is nonzero). For a random variable over {0, 1} , | is said to be an ( , )\u2212source if H \u221e ( | ) \u2265 . We require the following lemma about conditional min-entropy. Lemma 2.1. [28] If has at most 2 possible values, then H \u221e ( | ) \u2265 H \u221e ( , ) \u2212 \u2265 H \u221e ( ) \u2212 , and, more generally, H \u221e ( | , ) \u2265 H \u221e ( , | ) \u2212 \u2265 H \u221e ( | ) \u2212 . Lemma 2.2. For any random variables , , if \u2248 , then for any (possibly randomized) function , ( ) \u2248 ( ).\n\nLemma 2 . 4 .\n24[9] Let be some random variable distributed over a set S, and let S 1 , . . . , S be a partition of S. Let : S \u2192 T be some function, and let 1 , . . . , be some random variables over the set T . Assume that for all 1 \u2264 \u2264 ,\u0394 ( )| \u2208S ; \u2264 .Then\u0394 ( ( ) ; ) \u2264 Pr[ \u2208 ] ,for some random variable \u2208 T such that for all Pr[ = ] = Pr[ \u2208 S ] \u00b7 Pr[ = ].\n\nDefinition 2. 7 (\n7Seeded Extractors). We say that a polynomial time probabilistic function Ext : {0, 1} \u00d7 {0, 1} \u2192 {0, 1} \u2113 , using bits of randomness, is an ( , , , \u2113, )-strong seeded extractor if for all random variables \u2208 {0, 1} , correlated with , such that H \u221e ( | ) \u2265 , and independent of , and uniform in {0, 1} , we have (Ext( ; ), , ) \u2248 ( \u2113 , , ), where is uniform in {0, 1} \u2113 and independent of , .\n\n\nLemma 2.8. [38] For every constant > 0, all integers \u2265 and all \u2265 0, there is an explicit (efficient) ( , , , \u2113, )\u2212strong seeded extractor with \u2113 = \u2212 O log + log 1 and = O log + log 1 .\n\nDefinition 2. 9 .\n9A family of functions {Tag : {0, 1} \u2192 {0, 1} , Vrfy : {0, 1} \u00d7 {0, 1} \u2192 {0, 1}} \u2208 {0,1} is said to be a \u2212secure one time message authentication code if (1) For \u2208 {0, 1} , \u2200 \u2208 {0, 1} , Pr[Vrfy ( , Tag ( )) = 1] = 1, where for any ( , ), Vrfy ( , ) any \u2260 \u2032 , , \u2032 , Pr[Tag ( ) = |Tag ( \u2032 ) = \u2032 ] \u2264 , where \u2208 {0, 1} .\n\nLemma 2 .\n210.[40] For any , > 0 there is an efficient \u2212secure one time MAC with \u2264 (log( ) + log( 1 )), \u2264 2 , where , , are key, message, tag length respectively.\n\n\nDefinition 2.11. A (possibly randomised) function pair (Enc : M \u2192 C, Dec : C \u2192 M \u222a {\u22a5}) is said to be a coding scheme from M to C if \u2200 \u2208 M, Pr[Dec(Enc( )) = ] = 1(the probability is over the randomness of Enc, Dec). The rate of the coding scheme is given by log | M | log | C | . Definition 2.12. A coding scheme (Enc, Dec) from M to C, is said to be -non-malleable with respect to a tampering function family F \u2286 { : C \u2192 C} if \u2200 \u2208 F , there exists a distribution NMSim (specific to ) over M \u222a {same * , \u22a5} such that \u2200 \u2208 M Tamper \u2248 Copy( , NMSim)\n\n\nNon-malleable Codes). A coding scheme (Enc, Dec) from {0, 1} to {0, 1} \u00d7 {0, 1} is called an -augmented non-malleable code with respect to F split , if the following holds. For any (possibly randomized) ( , ) \u2208 F split , let Tamper , denote the distribution Dec( ( ), ( )), for ( , ) \u2190 Enc( ). There exists a simulator that, given oracle access to ( , ) (.), outputs NMSim = (NMSim 1 , NMSim 2 ) over ({0, 1} \u222a{ * , \u22a5}) \u00d7{0, 1} such that, for all \u2208 {0, 1} Tamper , , \u2248 Copy( , NMSim); , where (NMSim 1 , NMSim 2 ) = (\u02dc, ) \u2190 NMSim, and Copy( , NMSim) is defined as\n\n[ 5 ]\n5Let Enc : {0, 1} \u2192 {0, 1} \u00d7 {0, 1} and Dec : {0, 1} \u00d7 {0, 1} \u2192 {0, 1} \u222a {\u22a5} be an -non-malleable code in the 2-split-state model for some < 1/2. For any pair of messages\n\nTheorem 2 .\n215. [1, 3, 6] There exists and efficient construction of an -non-malleable code in the split state model with message space {0, 1} and codeword space F \u00d7F , for a prime \u2264 2 ( ) , = ( 4 ) and = 2 \u2212\u03a9 ( ) . Theorem 2.16. [44, Theorem 1.15] There are constants 0 < 1 , 2 < 1 such that for any \u2208 N and 2 \u2212 2 log \u2264 \u2264 1 , there exists an explicit non-malleable code in the 2-split-state model with block length 2 , rate \u03a9( log log log(1/ )\n\nTheorem 3. 1 .\n1Let (NMEnc : {0, 1} \u2192 {0, 1} \u00d7{0, 1} , NMDec : {0, 1} \u00d7 {0, 1} \u2192 {0, 1}\n\n\nEnc( ): \u2022 \u2208 {0, 1} , , \u2208 {0, 1} , \u2208 {0, 1} . \u2022 = \u2295 Ext( ; ). \u2022 = Tag ( ) and = Tag ( ). \u2022 (\u2113, ) \u2190 NMEnc( ) where = ( , , ). \u2022 Output (\u2113, , ), ( , , ). Dec((\u2113, , ), ( , , )): \u2022 ( , , ) = NMDec(\u2113, ). \u2022 If Vrfy ( , ) = 1 and Vrfy ( , ) = 1, Output = Ext( ; ) \u2295 . Else, Output \u22a5.\n\nFigure 4 :\n4Our NMC Construction\n\nwhere 1 :\n1{0, 1} + + \u2192 {0, 1} , 2 :{0, 1} + + \u2192 {0, 1} , 3 : {0, 1} + + \u2192 {0, 1} , and 1 : {0, 1} + * + \u2192 {0, 1} , 2 :{0, 1} + * + \u2192 {0, 1} * , 3 : {0, 1} + * + \u2192 {0, 1} . Let , , , , , , , , be the distributions of , , , , , , , \u2113, 9 sampled/computed in Enc( ). Now, apply the tampering to get ( , , ) = ( , , ), ( , , ) = ( , , ), decode to get = NMDec( , ) and = Dec(( , , ), ( , , )). Further, note that the distribution is the distribution Tamper , itself. Our proof proceeds by partitioning the sample space of the codeword, {0, 1} \u00d7 {0, 1} \u00d7 {0, 1} \u00d7 {0, 1} \u00d7 {0, 1} * \u00d7 {0, 1} and proving non-malleability in each of the partitions. Consider the following three partitions.\n\nP 1 =\n1{(\u2113, , , , , ) :( 2 (\u2113, , ), 3 (\u2113, , ), 2 ( , , ), 3 (\u2113, , )) = ( , , , ), NMDec( 1 (\u2113, , ), 1 ( , , )) = NMDec(\u2113, )} P 2 = {(\u2113,, , , , ) : ( 2 (\u2113, , ), 3 (\u2113, , ), 2 ( , , ), 3 (\u2113, , )) \u2260 ( , , , ), NMDec( 1 (\u2113, , ), 1 ( , , )) = NMDec(\u2113, )} and P 3 := {(\u2113, , , , , ) : NMDec( 1 (\u2113, , ), 1 ( , , )) \u2260 NMDec(\u2113, )} ,\n\n\n, \u2260 \u22a5 \u2227 ( , , , , , ) \u2208 P 2 ] \u2264 4 + 2 \u2212\u03a9 ( ) .\n\n\nAlso, by definition of one-time message authentication codes, we have thatPr[Vrfy ( 2 ( * , , ), 3 ( * , , )) = 1 \u2227 ( 2 ( * , , ), 3 ( * , , )) \u2260 ( , )] = 2 \u2212\u03a9 ( ) .By triangle inequality, we get Pr[Vrfy ( 2 ( , , ), 3 ( , , )) = 1 \u2227 ( 2 ( , , ), 3 ( , , )) \u2260 ( , )] \u2264 2 \u2212\u03a9 ( ) + 2 .\n\n\u25a1\nLemma 3.6. For any fixed , , and any > 2 +2 \u2212 , if Pr[( , , , , , ) \u2208 P 3 ] \u2265 , then the statistical distance between Tamper , , , , | ( , , , , , ) \u2208 P 3 and Dec( ( , , ), ( , , )), , , | ( , , , , , ) \u2208 P 3is at most 2 \u2212\u03a9 ( /log ) + 4 .\n\n2 (\n2and the hypothesis of the lemma, we have that Pr[NMSim 1 \u2209 {same * , ( , , )}] \u2265 \u2212 . By Lemma 2.3, we have that ( , , , , , , )| ( , , )\u2260( , , ) \u2248 2 Copy( , NMSim), , , | NMSim 1 \u2209{same * ,( , , ) } ( , , , , , , )| ( , , )\u2260( , , ) \u2248 Sim , Sim , Sim , Sim , , , )| NMSim 1 \u2209{same * ,( , , ) } (15) We have that for any , Pr[ = |NMSim 1 \u2209 {same * , ( , , )}] \u2264 Pr[ = ] Pr[NMSim 1 \u2209 {same * , ( , , )}]\n\n|\n, , , , Ext( ; ), , , , Vrfy \u2113 , , 1 ( , , ) . Using Lemma 2.2, we can drop on both sides to get Ext( ; ) \u2248 2 + 4 | , , , Ext( ; ), , , , Vrfy \u2113 , ,\n\n,\n, , ,Ext( ; ), , , , Vrfy \u2113 , , \u2248 2 + 4 , , , , Ext( ; ), , , , Vrfy \u2113 , , , since conditioned on \u2295 = is distributed identically as given all other random variables on the RHS in the above inequality. The desired result follows by observing that the tampered codeword is a function of , , Ext( ; ), , , Vrfy \u2113 . be functions with no fixed points, i.e., for each \u2208 {0, 1} 1 , \u2208 {0, 1} 2 , ( ) \u2260 and ( ) \u2260 . Then, nm2Ext( , ), , nm2Ext( ( ), ( )) \u2248 , , nm2Ext( ( ), ( ))\n\n\n( 1 , 1 , , , 2 )-strong seeded extractor and define the followingfunction nm2Ext * : {0, 1} 1 \u00d7 {0, 1} 2 \u2192 {0, 1} : nm2Ext * ( , ) def = Ext( ; nm2Ext( , )), \u2200 \u2208 {0, 1} 1 , \u2208 {0, 1} 2\n\nTable 1 :\n1Prior Work on 2-state NMCs ( is codeword length)Work \nRate \n\n[32] \n1/6 (Existential, Random Oracle Model) \n\n[21] \n1/2 (Existential, Lower bound) \n\n[30] \n\u03a9(1/ ) (Only for 1-bit messages) \n\n[1, 3, 6] \n\u03a9(1/ 4/5 ) \n\n[5] \n\n\u2212\u03a9 (1) \n\n[17] \n\n\u2212\u03a9 (1) \n\n[43] \n\u03a9(1/log( )) \n\n[44] \n\u03a9(log log( )/log( )) \n\n[44] \n\u03a9(1) (with constant error) \n\n[9] \n\u2248 1/1, 500, 000 \n\nOur Result \n1/3 \n\n\nRight-augmented property guarantees that the right state of the NMC is simulatable independent of the message, along with the tampered message.\nA two-source extractor takes two entropic sources and outputs perfect randomness.\nThis proof relies on the secret sharing property of the non-malleable code as well as the security of the strong randomness extractor.\nOther works have considered non-malleable codes in models other than the 2-splitstate model or under computational assumptions[2,8,11,34,39],[5,13,15,16,19,25,26,29,33,37], of which, rate optimizing compilers have been built for some (weaker) tampering models like the bitwise and permutation tampering[11], and the local tampering[37], or in the computational setting[2].\n, < 1 /2, then the rate of nm2Ext * is 1/2.\nACKNOWLEDGMENTSThe second author thanks Venkatesan Guruswami for insightful discussions. The authors would also like to thank the anonymous referees for their valuable comments and helpful suggestions. The third author's work is supported by Microsoft Research Grant.\u25a1 Proof of Theorem 3.1. The simulator Sim , does the following. It samples , , , , , , , , . Let sim \u2208 {1, 2, 3} be a random variable indicating the partition (P sim ) in which the sampled codeword belongs. If ( , , , , , ) \u2208 P 1 , then the simulator outputs (same * , , , ) and sets sim = 1, if ( , , , ) \u2208 P 2 then the simulator outputs (\u22a5, , , ) and sets sim = 2, else the simulator outputs Dec(( , , ), ( , , )), , , and sets sim = 3. Now, if \u0394((Tamper , , , , )| ( , , , , , ) \u2208 P ; Copy( , Sim , )| sim = ) \u2264 , by Lemma 2.4, we will get:Combining inequality 20 and 21, by triangle inquality, we get: \u0394((Tamper , , , , ); Copy( , Sim , ))Hence, now we consider each partition and bound the corresponding term in the RHS of the summation in the inequality 22. First, since we know that (Tamper , , , , )| ( , , , , , ) \u2208 P 1 = ( , , , ) and Copy( , Sim , )| sim =1 = ( , , , ), we use Lemma 3.4 to get:In the above inequality 25, we make an abuse of notation, and use (Tamper , , , , )| sim =3, = , = to denote the distribution where the partition is first picked using sim , and then the distribution (Tamper , , , , ) is drawn conditioned on the partition. This distribution is clearly identical to (Tamper , , , , )| ( , , , , , ) \u2208 P 3 , which we use above.A RATE BOOSTER FOR TWO-SOURCE NON-MALLEABLE EXTRACTORSWe begin by defining a strong two-source non-malleable extractor, introduced in[22].\nConsider an ( 1 , 1 )-source , an ( 2 , 2 )-source and tampering functions and (with no fixed points). 12By the nm2Ext security. we get: , nm2Ext( , ), nm2Ext( (Proof. Consider an ( 1 , 1 )-source , an ( 2 , 2 )-source and tampering functions and (with no fixed points). By the nm2Ext security, we get: , nm2Ext( , ), nm2Ext( ( ), ( )) \u2248 1 , , nm2Ext( ( ), ( ))\n\nBy applying the function Ext on the first two distributions on either side and using Lemma 2.2, we get: Ext(. 22By applying the function Ext on the first two distributions on either side and using Lemma 2.2, we get: Ext( ; nm2Ext( , )),nm2Ext( ( ), ( ))\n\n. \u2248 1 Ext. 2\u2248 1 Ext( ; ), nm2Ext( ( ), ( ))\n\n. Hence, by triangle inequality, this gives: Ext( ; nm2Ext( , )),nm2Ext( (Hence, by triangle inequality, this gives: Ext( ; nm2Ext( , )),nm2Ext( ( ), ( ))\n\nAffine-evasive sets modulo a prime. Divesh Aggarwal, 10.1016/j.ipl.2014.10.015Inf. Process. Lett. 115Divesh Aggarwal. 2015. Affine-evasive sets modulo a prime. Inf. Process. Lett. 115, 2 (2015), 382-385. https://doi.org/10.1016/j.ipl.2014.10.015\n\nOptimal Computational Split-state Nonmalleable Codes. Divesh Aggarwal, Shashank Agrawal, Divya Gupta, K Hemanta, Omkant Maji, Manoj Pandey, Prabhakaran, 10.1007/978-3-662-49099-0_15Theory of Cryptography -13th International Conference, TCC 2016-A. Tel Aviv, IsraelProceedings, Part IIDivesh Aggarwal, Shashank Agrawal, Divya Gupta, Hemanta K. Maji, Omkant Pandey, and Manoj Prabhakaran. 2016. Optimal Computational Split-state Non- malleable Codes. In Theory of Cryptography -13th International Conference, TCC 2016-A, Tel Aviv, Israel, January 10-13, 2016, Proceedings, Part II. 393-417. https: //doi.org/10.1007/978-3-662-49099-0_15\n\nRevisiting the Sanders-Bogolyubov-Ruzsa theorem in Fp n and its application to non-malleable codes. Divesh Aggarwal, Jop Bri\u00ebt, 10.1109/ISIT.2016.7541513IEEE International Symposium on Information Theory. Barcelona, SpainIEEEDivesh Aggarwal and Jop Bri\u00ebt. 2016. Revisiting the Sanders-Bogolyubov-Ruzsa theorem in Fp n and its application to non-malleable codes. In IEEE International Symposium on Information Theory, ISIT 2016, Barcelona, Spain, July 10-15, 2016. IEEE, 1322-1326. https://doi.org/10.1109/ISIT.2016.7541513\n\nStronger Leakage-Resilient and Non-Malleable Secret Sharing Schemes for General Access Structures. Divesh Aggarwal, Ivan Damg\u00e5rd, Jesper Buus Nielsen, Maciej Obremski, Erick Purwanto, Jo\u00e3o Ribeiro, Mark Simkin, 10.1007/978-3-030-26951-7_18Advances in Cryptology -CRYPTO 2019 -39th Annual International Cryptology Conference. Santa Barbara, CA, USAProceedings, Part IIDivesh Aggarwal, Ivan Damg\u00e5rd, Jesper Buus Nielsen, Maciej Obremski, Erick Purwanto, Jo\u00e3o Ribeiro, and Mark Simkin. 2019. Stronger Leakage-Resilient and Non-Malleable Secret Sharing Schemes for General Access Structures. In Advances in Cryptology -CRYPTO 2019 -39th Annual International Cryptology Conference, Santa Barbara, CA, USA, August 18-22, 2019, Proceedings, Part II. 510- 539. https://doi.org/10.1007/978-3-030-26951-7_18\n\nNon-malleable Reductions and Applications. Divesh Aggarwal, Yevgeniy Dodis, Tomasz Kazana, Maciej Obremski, 10.1145/2746539.2746544Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015. the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015Portland, OR, USADivesh Aggarwal, Yevgeniy Dodis, Tomasz Kazana, and Maciej Obremski. 2015. Non-malleable Reductions and Applications. In Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015, Portland, OR, USA, June 14-17, 2015. 459-468. https://doi.org/10.1145/2746539.2746544\n\nNon-malleable codes from additive combinatorics. Divesh Aggarwal, Yevgeniy Dodis, Shachar Lovett, 10.1145/2591796.2591804Symposium on Theory of Computing, STOC 2014. New York, NY, USADivesh Aggarwal, Yevgeniy Dodis, and Shachar Lovett. 2014. Non-malleable codes from additive combinatorics. In Symposium on Theory of Computing, STOC 2014, New York, NY, USA, May 31 -June 03, 2014. 774-783. https://doi.org/10. 1145/2591796.2591804\n\nLeakage-resilient non-malleable codes. Divesh Aggarwal, Stefan Dziembowski, Theory of Cryptography Conference. SpringerTomasz Kazana, and Maciej ObremskiDivesh Aggarwal, Stefan Dziembowski, Tomasz Kazana, and Maciej Obrem- ski. 2015. Leakage-resilient non-malleable codes. In Theory of Cryptography Conference. Springer, 398-426.\n\nInception Makes Non-malleable Codes Stronger. Divesh Aggarwal, Tomasz Kazana, Maciej Obremski, 10.1007/978-3-319-70503-3_10Theory of Cryptography -15th International Conference. Yael Kalai and Leonid ReyzinBaltimore, MD, USASpringer10678Proceedings, Part IIDivesh Aggarwal, Tomasz Kazana, and Maciej Obremski. 2017. Inception Makes Non-malleable Codes Stronger. In Theory of Cryptography -15th International Conference, TCC 2017, Baltimore, MD, USA, November 12-15, 2017, Proceedings, Part II (Lecture Notes in Computer Science, Vol. 10678), Yael Kalai and Leonid Reyzin (Eds.). Springer, 319-343. https://doi.org/10.1007/978-3-319-70503-3_10\n\nA constant rate non-malleable code in the split-state model. Divesh Aggarwal, Maciej Obremski, 10.1109/FOCS46700.2020.0012261st IEEE Annual Symposium on Foundations of Computer Science, FOCS 2020. Durham, NC, USAIEEEDivesh Aggarwal and Maciej Obremski. 2020. A constant rate non-malleable code in the split-state model. In 61st IEEE Annual Symposium on Foundations of Computer Science, FOCS 2020, Durham, NC, USA, November 16-19, 2020. IEEE, 1285-1294. https://doi.org/10.1109/FOCS46700.2020.00122\n\nThe EM Side-Channel(s). Dakshi Agrawal, Bruce Archambeault, Josyula R Rao, Pankaj Rohatgi, 10.1007/3-540-36400-5_4Cryptographic Hardware and Embedded Systems -CHES 2002, 4th International Workshop. Burton S. Kaliski Jr., \u00c7etin Kaya Ko\u00e7, and Christof PaarRedwood Shores, CA, USASpringer2523Revised PapersDakshi Agrawal, Bruce Archambeault, Josyula R. Rao, and Pankaj Rohatgi. 2002. The EM Side-Channel(s). In Cryptographic Hardware and Embedded Systems - CHES 2002, 4th International Workshop, Redwood Shores, CA, USA, August 13- 15, 2002, Revised Papers (Lecture Notes in Computer Science, Vol. 2523), Burton S. Kaliski Jr., \u00c7etin Kaya Ko\u00e7, and Christof Paar (Eds.). Springer, 29-45. https: //doi.org/10.1007/3-540-36400-5_4\n\nA Rate-Optimizing Compiler for Non-malleable Codes Against Bit-Wise Tampering and Permutations. Shashank Agrawal, Divya Gupta, K Hemanta, Omkant Maji, Manoj Pandey, Prabhakaran, 10.1007/978-3-662-46494-6_16Theory of Cryptography -12th Theory of Cryptography Conference. Warsaw, PolandProceedings, Part IShashank Agrawal, Divya Gupta, Hemanta K. Maji, Omkant Pandey, and Manoj Prabhakaran. 2015. A Rate-Optimizing Compiler for Non-malleable Codes Against Bit-Wise Tampering and Permutations. In Theory of Cryptography - 12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I. 375-397. https://doi.org/10.1007/978-3-662-46494-6_16\n\nRevisiting Non-Malleable Secret Sharing. Saikrishna Badrinarayanan, Akshayaram Srinivasan, Advances in Cryptology -EUROCRYPT. Saikrishna Badrinarayanan and Akshayaram Srinivasan. 2019. Revisiting Non- Malleable Secret Sharing. In Advances in Cryptology -EUROCRYPT 2019 -38th\n\n10.1007/978-3-030-17653-2_20Annual International Conference on the Theory and Applications of Cryptographic Techniques. Darmstadt, GermanyProceedings, Part I. 593-622Annual International Conference on the Theory and Applications of Cryptographic Techniques, Darmstadt, Germany, May 19-23, 2019, Proceedings, Part I. 593-622. https://doi.org/10.1007/978-3-030-17653-2_20\n\nNon-malleable Codes from Average-Case Hardness: AC 0 , Decision Trees, and Streaming Space-Bounded Tampering. Marshall Ball, Dana Dachman-Soled, Mukul Kulkarni, Tal Malkin, Advances in Cryptology -EUROCRYPT 2018. Jesper Buus Nielsen and Vincent RijmenChamSpringer International PublishingMarshall Ball, Dana Dachman-Soled, Mukul Kulkarni, and Tal Malkin. 2018. Non-malleable Codes from Average-Case Hardness: AC 0 , Decision Trees, and Streaming Space-Bounded Tampering. In Advances in Cryptology -EUROCRYPT 2018, Jesper Buus Nielsen and Vincent Rijmen (Eds.). Springer International Publishing, Cham, 618-650.\n\nDifferential Fault Analysis of Secret Key Cryptosystems. Eli Biham, Adi Shamir, Advances in Cryptology -CRYPTO '97, 17th Annual International Cryptology Conference. Burton S. Kaliski Jr.Santa Barbara, California, USA1294ProceedingsEli Biham and Adi Shamir. 1997. Differential Fault Analysis of Secret Key Cryp- tosystems. In Advances in Cryptology -CRYPTO '97, 17th Annual International Cryptology Conference, Santa Barbara, California, USA, August 17-21, 1997, Pro- ceedings (Lecture Notes in Computer Science, Vol. 1294), Burton S. Kaliski Jr. (Ed.).\n\n. Springer, 10.1007/BFb0052259Springer, 513-525. https://doi.org/10.1007/BFb0052259\n\nBlock-Wise Non-Malleable Codes. Nishanth Chandran, Vipul Goyal, Pratyay Mukherjee, Omkant Pandey, Jalaj Upadhyay, ICALP (LIPIcs. 55Nishanth Chandran, Vipul Goyal, Pratyay Mukherjee, Omkant Pandey, and Jalaj Upadhyay. 2016. Block-Wise Non-Malleable Codes. In ICALP (LIPIcs, Vol. 55).\n\n. Schloss Dagstuhl -Leibniz-Zentrum fuer Informatik. 3114Schloss Dagstuhl -Leibniz-Zentrum fuer Informatik, 31:1-31:14.\n\nInformation-Theoretic Local Non-malleable Codes and Their Applications. Nishanth Chandran, Bhavana Kanukurthi, Srinivasan Raghuraman, 10.1007/978-3-662-49099-0_14Theory of Cryptography -13th International Conference, TCC 2016-A. Tel Aviv, IsraelProceedings, Part IINishanth Chandran, Bhavana Kanukurthi, and Srinivasan Raghuraman. 2016. Information-Theoretic Local Non-malleable Codes and Their Applications. In Theory of Cryptography -13th International Conference, TCC 2016-A, Tel Aviv, Israel, January 10-13, 2016, Proceedings, Part II. 367-392. https://doi.org/10.1007/978-3- 662-49099-0_14\n\nNon-malleable extractors and codes, with their many tampered extensions. Eshan Chattopadhyay, Vipul Goyal, Xin Li, 10.1145/2897518.2897547Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016. the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016Cambridge, MA, USAEshan Chattopadhyay, Vipul Goyal, and Xin Li. 2016. Non-malleable extractors and codes, with their many tampered extensions. In Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016, Cambridge, MA, USA, June 18-21, 2016. 285-298. https://doi.org/10.1145/2897518.2897547\n\nPrivacy Amplification from Non-malleable Codes. Eshan Chattopadhyay, Bhavana Kanukurthi, Sai Lakshmi Bhavana, Sruthi Obbattu, Sekar, 10.1007/978-3-030-35423-7_16Progress in Cryptology -INDOCRYPT 2019 -20th International Conference on Cryptology in India. Feng Hao, Sushmita Ruj, and Sourav Sen GuptaHyderabad, IndiaSpringer11898Proceedings (Lecture Notes in Computer ScienceEshan Chattopadhyay, Bhavana Kanukurthi, Sai Lakshmi Bhavana Obbattu, and Sruthi Sekar. 2019. Privacy Amplification from Non-malleable Codes. In Progress in Cryptology -INDOCRYPT 2019 -20th International Conference on Cryptology in India, Hyderabad, India, December 15-18, 2019, Proceedings (Lecture Notes in Computer Science, Vol. 11898), Feng Hao, Sushmita Ruj, and Sourav Sen Gupta (Eds.). Springer, 318-337. https://doi.org/10.1007/978-3-030-35423-7_16\n\nNon-malleable codes and extractors for small-depth circuits, and affine functions. Eshan Chattopadhyay, Xin Li, STOC. ACM. Eshan Chattopadhyay and Xin Li. 2017. Non-malleable codes and extractors for small-depth circuits, and affine functions. In STOC. ACM, 1171-1184.\n\nNon-malleable Codes against Constant Split-State Tampering. Eshan Chattopadhyay, David Zuckerman, 10.1109/FOCS.2014.4055th IEEE Annual Symposium on Foundations of Computer Science, FOCS. Philadelphia, PA, USAEshan Chattopadhyay and David Zuckerman. 2014. Non-malleable Codes against Constant Split-State Tampering. In 55th IEEE Annual Symposium on Foundations of Computer Science, FOCS 2014, Philadelphia, PA, USA, October 18-21, 2014. 306-315. https://doi.org/10.1109/FOCS.2014.40\n\nCapacity of non-malleable codes. Mahdi Cheraghchi, Venkatesan Guruswami, 10.1145/2554797.2554814Innovations in Theoretical Computer Science, ITCS'14. Princeton, NJ, USAMahdi Cheraghchi and Venkatesan Guruswami. 2014. Capacity of non-malleable codes. In Innovations in Theoretical Computer Science, ITCS'14, Princeton, NJ, USA, January 12-14, 2014. 155-168. https://doi.org/10.1145/2554797.2554814\n\nNon-malleable Coding against Bit-Wise and Split-State Tampering. Mahdi Cheraghchi, Venkatesan Guruswami, 10.1007/978-3-642-54242-8_19Theory of Cryptography -11th Theory of Cryptography Conference, TCC 2014. San Diego, CA, USAMahdi Cheraghchi and Venkatesan Guruswami. 2014. Non-malleable Coding against Bit-Wise and Split-State Tampering. In Theory of Cryptography -11th Theory of Cryptography Conference, TCC 2014, San Diego, CA, USA, February 24-26, 2014. Proceedings. 440-464. https://doi.org/10.1007/978-3-642-54242-8_19\n\nNon-Malleable Encryption: Simpler, Shorter, Stronger. Sandro Coretti, Yevgeniy Dodis, Bj\u00f6rn Tackmann, Daniele Venturi, Theory of Cryptography, Eyal Kushilevitz and Tal MalkinSpringerBerlin Heidelberg; Berlin, HeidelbergSandro Coretti, Yevgeniy Dodis, Bj\u00f6rn Tackmann, and Daniele Venturi. 2016. Non- Malleable Encryption: Simpler, Shorter, Stronger. In Theory of Cryptography, Eyal Kushilevitz and Tal Malkin (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 306-335.\n\nFrom Single-Bit to Multi-Bit Public-Key Encryption via Non-Malleable Codes. IACR Cryptology ePrint Archive. Sandro Coretti, Ueli Maurer, Bj\u00f6rn Tackmann, Daniele Venturi, 324Sandro Coretti, Ueli Maurer, Bj\u00f6rn Tackmann, and Daniele Venturi. 2014. From Single-Bit to Multi-Bit Public-Key Encryption via Non-Malleable Codes. IACR Cryptology ePrint Archive 2014 (2014), 324. http://eprint.iacr.org/2014/324\n\nTight upper and lower bounds for leakage-resilient, locally decodable and updatable nonmalleable codes. Dana Dachman-Soled, Mukul Kulkarni, Aria Shahverdi, 10.1016/j.ic.2019.05.001Inf. Comput. 268Dana Dachman-Soled, Mukul Kulkarni, and Aria Shahverdi. 2019. Tight upper and lower bounds for leakage-resilient, locally decodable and updatable non- malleable codes. Inf. Comput. 268 (2019). https://doi.org/10.1016/j.ic.2019.05.001\n\nLocally Decodable and Updatable Non-malleable Codes and Their Applications. Dana Dachman-Soled, Feng-Hao Liu, Elaine Shi, Hong-Sheng Zhou, 10.1007/s00145-018-9306-zJ. Cryptol. 33Dana Dachman-Soled, Feng-Hao Liu, Elaine Shi, and Hong-Sheng Zhou. 2020. Locally Decodable and Updatable Non-malleable Codes and Their Applications. J. Cryptol. 33, 1 (2020), 319-355. https://doi.org/10.1007/s00145-018-9306-z\n\nRobust Fuzzy Extractors and Authenticated Key Agreement from Close Secrets. Yevgeniy Dodis, Bhavana Kanukurthi, Jonathan Katz, Leonid Reyzin, Adam Smith, IEEE Transactions on Information Theory. Yevgeniy Dodis, Bhavana Kanukurthi, Jonathan Katz, Leonid Reyzin, and Adam Smith. 2012. Robust Fuzzy Extractors and Authenticated Key Agreement from Close Secrets. IEEE Transactions on Information Theory (2012).\n\nFuzzy Extractors: How to Generate Strong Keys from Biometrics and Other Noisy Data. Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, Adam Smith, arXiv:cs/0602007SIAM J. Comput. 38Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, and Adam Smith. 2008. Fuzzy Extractors: How to Generate Strong Keys from Biometrics and Other Noisy Data. SIAM J. Comput. 38, 1 (2008), 97-139. arXiv:cs/0602007.\n\nInformation Theoretic Continuously Non-Malleable Codes in the Constant Split-State Model. Nico D\u00f6ttling, Jesper Buus Nielsen, Maciej Obremski, Electronic Colloquium on Computational Complexity (ECCC). 24Nico D\u00f6ttling, Jesper Buus Nielsen, and Maciej Obremski. 2017. Information Theoretic Continuously Non-Malleable Codes in the Constant Split-State Model. Electronic Colloquium on Computational Complexity (ECCC) 24 (2017), 78. https: //eccc.weizmann.ac.il/report/2017/078\n\nNon-malleable Codes from Two-Source Extractors. Stefan Dziembowski, Tomasz Kazana, Maciej Obremski, 10.1007/978-3-642-40084-1_14Advances in Cryptology -CRYPTO 2013 -33rd Annual Cryptology Conference. Santa Barbara, CA, USAProceedings, Part IIStefan Dziembowski, Tomasz Kazana, and Maciej Obremski. 2013. Non-malleable Codes from Two-Source Extractors. In Advances in Cryptology -CRYPTO 2013 - 33rd Annual Cryptology Conference, Santa Barbara, CA, USA, August 18-22, 2013. Proceedings, Part II. 239-257. https://doi.org/10.1007/978-3-642-40084-1_14\n\nIntrusion-Resilient Secret Sharing. Stefan Dziembowski, Krzysztof Pietrzak, 10.1109/FOCS.2007.35Proceedings of the 48th Annual IEEE Symposium on Foundations of Computer Science (FOCS '07). the 48th Annual IEEE Symposium on Foundations of Computer Science (FOCS '07)Washington, DC, USAIEEE Computer SocietyStefan Dziembowski and Krzysztof Pietrzak. 2007. Intrusion-Resilient Secret Sharing. In Proceedings of the 48th Annual IEEE Symposium on Foundations of Computer Science (FOCS '07). IEEE Computer Society, Washington, DC, USA, 227-237. https://doi.org/10.1109/FOCS.2007.35\n\nNon-Malleable Codes. Stefan Dziembowski, Krzysztof Pietrzak, Daniel Wichs, Innovations in Computer Science -ICS 2010. Beijing, ChinaTsinghua UniversityProceedings. 434-452Stefan Dziembowski, Krzysztof Pietrzak, and Daniel Wichs. 2010. Non-Malleable Codes. In Innovations in Computer Science -ICS 2010, Tsinghua University, Beijing, China, January 5-7, 2010. Proceedings. 434-452. http://conference.itcs.tsinghua. edu.cn/ICS2010/content/papers/34.html\n\nNon-Malleable Codes for Space-Bounded Tampering. Sebastian Faust, Kristina Host\u00e1kov\u00e1, Pratyay Mukherjee, Daniele Venturi, CRYPTO. Springer10402Sebastian Faust, Kristina Host\u00e1kov\u00e1, Pratyay Mukherjee, and Daniele Venturi. 2017. Non-Malleable Codes for Space-Bounded Tampering. In CRYPTO (2) (Lecture Notes in Computer Science, Vol. 10402). Springer, 95-126.\n\nContinuous Non-malleable Codes. Sebastian Faust, Pratyay Mukherjee, Jesper Buus Nielsen, Daniele Venturi, 10.1007/978-3-642-54242-8_20Theory of Cryptography -11th Theory of Cryptography Conference, TCC 2014. San Diego, CA, USAProceedings. 465-488Sebastian Faust, Pratyay Mukherjee, Jesper Buus Nielsen, and Daniele Venturi. 2014. Continuous Non-malleable Codes. In Theory of Cryptography -11th Theory of Cryptography Conference, TCC 2014, San Diego, CA, USA, February 24-26, 2014. Proceedings. 465-488. https://doi.org/10.1007/978-3-642-54242-8_20\n\nNon-malleable secret sharing. Vipul Goyal, Ashutosh Kumar, 10.1145/3188745.3188872Proceedings of the 50th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2018. the 50th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2018Los Angeles, CA, USAVipul Goyal and Ashutosh Kumar. 2018. Non-malleable secret sharing. In Proceedings of the 50th Annual ACM SIGACT Symposium on Theory of Com- puting, STOC 2018, Los Angeles, CA, USA, June 25-29, 2018. 685-698. https: //doi.org/10.1145/3188745.3188872\n\nTextbook non-malleable commitments. Vipul Goyal, Omkant Pandey, Silas Richelson, 10.1145/2897518.2897657Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016. the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016Cambridge, MA, USAVipul Goyal, Omkant Pandey, and Silas Richelson. 2016. Textbook non-malleable commitments. In Proceedings of the 48th Annual ACM SIGACT Symposium on Theory of Computing, STOC 2016, Cambridge, MA, USA, June 18-21, 2016. 1128- 1141. https://doi.org/10.1145/2897518.2897657\n\nNon-malleable Codes Against Lookahead Tampering. Divya Gupta, K Hemanta, Mingyuan Maji, Wang, 10.1007/978-3-030-05378-9_17Progress in Cryptology -INDOCRYPT 2018 -19th International Conference on Cryptology in India. Debrup Chakraborty and Tetsu IwataNew Delhi, IndiaSpringer11356Proceedings (Lecture Notes in Computer ScienceDivya Gupta, Hemanta K. Maji, and Mingyuan Wang. 2018. Non-malleable Codes Against Lookahead Tampering. In Progress in Cryptology -INDOCRYPT 2018 - 19th International Conference on Cryptology in India, New Delhi, India, December 9-12, 2018, Proceedings (Lecture Notes in Computer Science, Vol. 11356), Debrup Chakraborty and Tetsu Iwata (Eds.). Springer, 307-328. https://doi.org/10.1007/ 978-3-030-05378-9_17\n\nUnbalanced Expanders and Randomness Extractors from Parvaresh-Vardy Codes. Venkatesan Guruswami, Christopher Umans, Salil P Vadhan, IEEE Conference on Computational Complexity. Venkatesan Guruswami, Christopher Umans, and Salil P. Vadhan. 2007. Unbal- anced Expanders and Randomness Extractors from Parvaresh-Vardy Codes. In IEEE Conference on Computational Complexity. 96-108.\n\nTamper Detection and Continuous Non-malleable Codes. Zahra Jafargholi, Daniel Wichs, 10.1007/978-3-662-46494-6_19Theory of Cryptography -12th Theory of Cryptography Conference. Warsaw, PolandProceedings, Part I. 451-480Zahra Jafargholi and Daniel Wichs. 2015. Tamper Detection and Continuous Non-malleable Codes. In Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I. 451-480. https://doi.org/10.1007/978-3-662-46494-6_19\n\nOn the Relation between A-Codes and Codes Correcting Independent Errors. Thomas Johansson, Gregory Kabatianskii, Ben J M Smeets, 10.1007/3-540-48285-7_1Advances in Cryptology -EUROCRYPT '93, Workshop on the Theory and Application of of Cryptographic Techniques. Lofthus, NorwayThomas Johansson, Gregory Kabatianskii, and Ben J. M. Smeets. 1993. On the Relation between A-Codes and Codes Correcting Independent Errors. In Advances in Cryptology -EUROCRYPT '93, Workshop on the Theory and Application of of Cryptographic Techniques, Lofthus, Norway, May 23-27, 1993, Proceedings. 1-11. https://doi.org/10.1007/3-540-48285-7_1\n\nFour-State Non-malleable Codes with Explicit Constant Rate. Bhavana Kanukurthi, Sai Lakshmi Bhavana, Sruthi Obbattu, Sekar, 10.1007/978-3-319-70503-3_11Theory of Cryptography -15th International Conference. Baltimore, MD, USAProceedings, Part IIBhavana Kanukurthi, Sai Lakshmi Bhavana Obbattu, and Sruthi Sekar. 2017. Four- State Non-malleable Codes with Explicit Constant Rate. In Theory of Cryptography -15th International Conference, TCC 2017, Baltimore, MD, USA, November 12-15, 2017, Proceedings, Part II. 344-375. https://doi.org/10.1007/978-3-319-70503-3_11\n\nNon-malleable Randomness Encoders and Their Applications. Bhavana Kanukurthi, Sai Lakshmi Bhavana, Sruthi Obbattu, Sekar, 10.1007/978-3-319-78372-7_19Advances in Cryptology -EUROCRYPT 2018 -37th Annual International Conference on the Theory and Applications of Cryptographic Techniques. Tel Aviv, IsraelProceedings, Part IIIBhavana Kanukurthi, Sai Lakshmi Bhavana Obbattu, and Sruthi Sekar. 2018. Non-malleable Randomness Encoders and Their Applications. In Advances in Cryptology -EUROCRYPT 2018 -37th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Tel Aviv, Israel, April 29 - May 3, 2018 Proceedings, Part III. 589-617. https://doi.org/10.1007/978-3-319- 78372-7_19\n\nImproved Non-Malleable Extractors, Non-Malleable Codes and Independent Source Extractors. Xin Li, Symposium on Theory of Computing. Montreal, CanadaXin Li. 2017. Improved Non-Malleable Extractors, Non-Malleable Codes and Independent Source Extractors. In Symposium on Theory of Computing, STOC 2017, Montreal, Canada, June 19-23, 2017.\n\nNon-Malleable Extractors and Non-Malleable Codes: Partially Optimal Constructions. Xin Li, Computational Complexity Conference, CCC 2019. New BrunswickXin Li. 2019. Non-Malleable Extractors and Non-Malleable Codes: Partially Optimal Constructions. In Computational Complexity Conference, CCC 2019, New Brunswick, June 18-20, 2019.\n\nAlgorithmic Tamper-Proof Security under Probing Attacks. Feng-Hao Liu, Anna Lysyanskaya, 10.1007/978-3-642-15317-4_8Security and Cryptography for Networks, 7th International Conference, SCN 2010. Juan A. Garay and Roberto De PriscoAmalfi, ItalySpringer6280Proceedings (Lecture Notes in Computer ScienceFeng-Hao Liu and Anna Lysyanskaya. 2010. Algorithmic Tamper-Proof Security under Probing Attacks. In Security and Cryptography for Networks, 7th Inter- national Conference, SCN 2010, Amalfi, Italy, September 13-15, 2010. Proceedings (Lecture Notes in Computer Science, Vol. 6280), Juan A. Garay and Roberto De Prisco (Eds.). Springer, 106-120. https://doi.org/10.1007/978-3-642-15317-4_8\n\nTamper and Leakage Resilience in the Split-State Model. Feng-Hao Liu, Anna Lysyanskaya, 10.1007/978-3-642-32009-5_30Advances in Cryptology -CRYPTO 2012 -32nd Annual Cryptology Conference. Reihaneh Safavi-Naini and Ran CanettiSanta Barbara, CA, USASpringer7417Proceedings (Lecture Notes in Computer ScienceFeng-Hao Liu and Anna Lysyanskaya. 2012. Tamper and Leakage Resilience in the Split-State Model. In Advances in Cryptology -CRYPTO 2012 -32nd Annual Cryptology Conference, Santa Barbara, CA, USA, August 19-23, 2012. Proceedings (Lecture Notes in Computer Science, Vol. 7417), Reihaneh Safavi-Naini and Ran Canetti (Eds.). Springer, 517-532. https://doi.org/10.1007/978-3-642-32009-5_30\n\nLeakage Resilient Secret Sharing and Applications. Akshayaram Srinivasan, Prashant Nalini Vasudevan, Advances in Cryptology -CRYPTO 2019. Alexandra Boldyreva and Daniele MicciancioChamSpringer International PublishingAkshayaram Srinivasan and Prashant Nalini Vasudevan. 2019. Leakage Re- silient Secret Sharing and Applications. In Advances in Cryptology -CRYPTO 2019, Alexandra Boldyreva and Daniele Micciancio (Eds.). Springer International Publishing, Cham, 480-509.\n", "annotations": {"author": "[{\"end\":110,\"start\":94},{\"end\":124,\"start\":111},{\"end\":282,\"start\":125},{\"end\":327,\"start\":283},{\"end\":386,\"start\":328},{\"end\":462,\"start\":387},{\"end\":501,\"start\":463}]", "publisher": "[{\"end\":39,\"start\":36},{\"end\":740,\"start\":737}]", "author_last_name": "[{\"end\":109,\"start\":101},{\"end\":123,\"start\":118}]", "author_first_name": "[{\"end\":100,\"start\":94},{\"end\":117,\"start\":111}]", "author_affiliation": "[{\"end\":281,\"start\":126},{\"end\":326,\"start\":284},{\"end\":385,\"start\":329},{\"end\":461,\"start\":388},{\"end\":500,\"start\":464}]", "title": "[{\"end\":35,\"start\":1},{\"end\":536,\"start\":502}]", "venue": "[{\"end\":623,\"start\":538}]", "abstract": "[{\"end\":1955,\"start\":988}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2752,\"start\":2748},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":2755,\"start\":2752},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":2758,\"start\":2755},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3848,\"start\":3844},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":4445,\"start\":4441},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":4448,\"start\":4445},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":4493,\"start\":4489},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4496,\"start\":4493},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":4528,\"start\":4524},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4562,\"start\":4559},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4565,\"start\":4562},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":4568,\"start\":4565},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":4571,\"start\":4568},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":4602,\"start\":4598},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":4801,\"start\":4797},{\"end\":4877,\"start\":4874},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5069,\"start\":5066},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5899,\"start\":5895},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":6340,\"start\":6339},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":7338,\"start\":7337},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":7606,\"start\":7605},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":7762,\"start\":7761},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":9210,\"start\":9206},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":10856,\"start\":10852},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":11495,\"start\":11491},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":11526,\"start\":11522},{\"end\":13990,\"start\":13987},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":14570,\"start\":14566},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":14582,\"start\":14578},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":21634,\"start\":21633},{\"end\":24704,\"start\":24694},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":25355,\"start\":25351},{\"end\":25363,\"start\":25355},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":26913,\"start\":26910},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":27180,\"start\":27177},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":27182,\"start\":27180},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":27997,\"start\":27993},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":28400,\"start\":28396},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":28668,\"start\":28665},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":28753,\"start\":28749},{\"end\":29178,\"start\":29175},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":29209,\"start\":29206},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":29211,\"start\":29209},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":29214,\"start\":29211},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29217,\"start\":29214},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":29220,\"start\":29217},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":29223,\"start\":29220},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":29227,\"start\":29223},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":29231,\"start\":29227},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":29235,\"start\":29231},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":29239,\"start\":29235},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":29381,\"start\":29377},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":29718,\"start\":29714},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29721,\"start\":29718},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":29724,\"start\":29721},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":29727,\"start\":29724},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29848,\"start\":29844},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":30103,\"start\":30099},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30145,\"start\":30142},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":30255,\"start\":30252},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":30303,\"start\":30299},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":30583,\"start\":30579},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":30620,\"start\":30616},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":30629,\"start\":30625},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":30972,\"start\":30969},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":32451,\"start\":32448},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":33032,\"start\":33028},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":33054,\"start\":33051},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":34552,\"start\":34548},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":35271,\"start\":35267},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":35393,\"start\":35389},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":35470,\"start\":35466},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":36093,\"start\":36090},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":36909,\"start\":36906},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":36911,\"start\":36909},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":36913,\"start\":36911},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":36937,\"start\":36933},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":37273,\"start\":37270},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":37387,\"start\":37383},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":37600,\"start\":37596},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":37721,\"start\":37717},{\"end\":37735,\"start\":37721},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":37745,\"start\":37741},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":41276,\"start\":41275},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":46466,\"start\":46462},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":46898,\"start\":46896},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":47282,\"start\":47278},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":47538,\"start\":47534},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":47678,\"start\":47677},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":48143,\"start\":48139},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":50021,\"start\":50017},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":50561,\"start\":50558},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":51846,\"start\":51844},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":51851,\"start\":51847},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":57810,\"start\":57807},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":57812,\"start\":57810},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":57815,\"start\":57812},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":57818,\"start\":57815},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":57821,\"start\":57818},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":57825,\"start\":57822},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":57828,\"start\":57825},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":57831,\"start\":57828},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":57834,\"start\":57831},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":57837,\"start\":57834},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":57840,\"start\":57837},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":57843,\"start\":57840},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":57846,\"start\":57843},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":57849,\"start\":57846},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":57852,\"start\":57849},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":57987,\"start\":57983},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":58016,\"start\":58012},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":58052,\"start\":58049}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":49712,\"start\":49663},{\"attributes\":{\"id\":\"fig_2\"},\"end\":50540,\"start\":49713},{\"attributes\":{\"id\":\"fig_3\"},\"end\":50899,\"start\":50541},{\"attributes\":{\"id\":\"fig_4\"},\"end\":51310,\"start\":50900},{\"attributes\":{\"id\":\"fig_5\"},\"end\":51497,\"start\":51311},{\"attributes\":{\"id\":\"fig_6\"},\"end\":51831,\"start\":51498},{\"attributes\":{\"id\":\"fig_7\"},\"end\":51995,\"start\":51832},{\"attributes\":{\"id\":\"fig_8\"},\"end\":52544,\"start\":51996},{\"attributes\":{\"id\":\"fig_9\"},\"end\":53110,\"start\":52545},{\"attributes\":{\"id\":\"fig_10\"},\"end\":53288,\"start\":53111},{\"attributes\":{\"id\":\"fig_11\"},\"end\":53735,\"start\":53289},{\"attributes\":{\"id\":\"fig_12\"},\"end\":53824,\"start\":53736},{\"attributes\":{\"id\":\"fig_13\"},\"end\":54102,\"start\":53825},{\"attributes\":{\"id\":\"fig_14\"},\"end\":54136,\"start\":54103},{\"attributes\":{\"id\":\"fig_15\"},\"end\":54820,\"start\":54137},{\"attributes\":{\"id\":\"fig_16\"},\"end\":55143,\"start\":54821},{\"attributes\":{\"id\":\"fig_17\"},\"end\":55192,\"start\":55144},{\"attributes\":{\"id\":\"fig_18\"},\"end\":55478,\"start\":55193},{\"attributes\":{\"id\":\"fig_19\"},\"end\":55720,\"start\":55479},{\"attributes\":{\"id\":\"fig_20\"},\"end\":56127,\"start\":55721},{\"attributes\":{\"id\":\"fig_21\"},\"end\":56279,\"start\":56128},{\"attributes\":{\"id\":\"fig_22\"},\"end\":56751,\"start\":56280},{\"attributes\":{\"id\":\"fig_23\"},\"end\":56938,\"start\":56752},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":57319,\"start\":56939}]", "paragraph": "[{\"end\":2759,\"start\":1971},{\"end\":3827,\"start\":2761},{\"end\":4603,\"start\":3829},{\"end\":5447,\"start\":4605},{\"end\":5814,\"start\":5463},{\"end\":6868,\"start\":5816},{\"end\":7053,\"start\":6870},{\"end\":8323,\"start\":7218},{\"end\":9486,\"start\":8325},{\"end\":9839,\"start\":9488},{\"end\":10274,\"start\":9841},{\"end\":10323,\"start\":10288},{\"end\":10624,\"start\":10325},{\"end\":10964,\"start\":10647},{\"end\":11496,\"start\":10966},{\"end\":12143,\"start\":11498},{\"end\":13617,\"start\":12145},{\"end\":14799,\"start\":13619},{\"end\":15177,\"start\":14837},{\"end\":15609,\"start\":15179},{\"end\":16072,\"start\":15611},{\"end\":16266,\"start\":16074},{\"end\":16553,\"start\":16341},{\"end\":16907,\"start\":16626},{\"end\":17162,\"start\":16968},{\"end\":17662,\"start\":17164},{\"end\":18050,\"start\":17664},{\"end\":18238,\"start\":18052},{\"end\":18694,\"start\":18299},{\"end\":19134,\"start\":18782},{\"end\":19541,\"start\":19212},{\"end\":19702,\"start\":19619},{\"end\":20133,\"start\":19855},{\"end\":20610,\"start\":20194},{\"end\":21129,\"start\":20612},{\"end\":21840,\"start\":21131},{\"end\":22099,\"start\":21842},{\"end\":22194,\"start\":22101},{\"end\":22487,\"start\":22230},{\"end\":22609,\"start\":22489},{\"end\":22779,\"start\":22671},{\"end\":23031,\"start\":22823},{\"end\":23230,\"start\":23063},{\"end\":24067,\"start\":23281},{\"end\":24277,\"start\":24206},{\"end\":24568,\"start\":24312},{\"end\":24705,\"start\":24570},{\"end\":24855,\"start\":24751},{\"end\":25051,\"start\":24894},{\"end\":25506,\"start\":25053},{\"end\":25759,\"start\":25508},{\"end\":25913,\"start\":25761},{\"end\":26353,\"start\":25915},{\"end\":26731,\"start\":26355},{\"end\":27232,\"start\":26733},{\"end\":27275,\"start\":27234},{\"end\":27314,\"start\":27277},{\"end\":27367,\"start\":27316},{\"end\":27424,\"start\":27369},{\"end\":27859,\"start\":27426},{\"end\":31098,\"start\":27876},{\"end\":31359,\"start\":31128},{\"end\":31950,\"start\":31390},{\"end\":32286,\"start\":31952},{\"end\":32860,\"start\":32323},{\"end\":33055,\"start\":32966},{\"end\":33475,\"start\":33057},{\"end\":33929,\"start\":33477},{\"end\":34554,\"start\":33931},{\"end\":35319,\"start\":34620},{\"end\":35559,\"start\":35343},{\"end\":35662,\"start\":35597},{\"end\":35877,\"start\":35664},{\"end\":36240,\"start\":35923},{\"end\":36328,\"start\":36242},{\"end\":36549,\"start\":36384},{\"end\":36753,\"start\":36551},{\"end\":36767,\"start\":36755},{\"end\":37835,\"start\":36848},{\"end\":38258,\"start\":37878},{\"end\":38713,\"start\":38260},{\"end\":38885,\"start\":38715},{\"end\":39087,\"start\":38887},{\"end\":39216,\"start\":39108},{\"end\":39328,\"start\":39218},{\"end\":39957,\"start\":39330},{\"end\":40082,\"start\":39976},{\"end\":41420,\"start\":40084},{\"end\":42198,\"start\":41438},{\"end\":42474,\"start\":42259},{\"end\":42645,\"start\":42476},{\"end\":43125,\"start\":42647},{\"end\":43187,\"start\":43127},{\"end\":43304,\"start\":43189},{\"end\":43521,\"start\":43306},{\"end\":43722,\"start\":43523},{\"end\":44547,\"start\":43724},{\"end\":44855,\"start\":44549},{\"end\":44909,\"start\":44857},{\"end\":45224,\"start\":44997},{\"end\":45296,\"start\":45226},{\"end\":45680,\"start\":45298},{\"end\":46059,\"start\":45682},{\"end\":46377,\"start\":46061},{\"end\":46467,\"start\":46379},{\"end\":48036,\"start\":46484},{\"end\":48080,\"start\":48038},{\"end\":48219,\"start\":48082},{\"end\":48321,\"start\":48221},{\"end\":48345,\"start\":48323},{\"end\":49068,\"start\":48347},{\"end\":49324,\"start\":49070},{\"end\":49662,\"start\":49326}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":7217,\"start\":7054},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10287,\"start\":10275},{\"attributes\":{\"id\":\"formula_2\"},\"end\":14809,\"start\":14800},{\"attributes\":{\"id\":\"formula_3\"},\"end\":16340,\"start\":16267},{\"attributes\":{\"id\":\"formula_4\"},\"end\":16625,\"start\":16554},{\"attributes\":{\"id\":\"formula_5\"},\"end\":16967,\"start\":16908},{\"attributes\":{\"id\":\"formula_6\"},\"end\":18298,\"start\":18264},{\"attributes\":{\"id\":\"formula_7\"},\"end\":18781,\"start\":18695},{\"attributes\":{\"id\":\"formula_8\"},\"end\":19211,\"start\":19135},{\"attributes\":{\"id\":\"formula_9\"},\"end\":19618,\"start\":19542},{\"attributes\":{\"id\":\"formula_10\"},\"end\":19751,\"start\":19703},{\"attributes\":{\"id\":\"formula_11\"},\"end\":19854,\"start\":19804},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20193,\"start\":20159},{\"attributes\":{\"id\":\"formula_13\"},\"end\":22229,\"start\":22195},{\"attributes\":{\"id\":\"formula_14\"},\"end\":22670,\"start\":22610},{\"attributes\":{\"id\":\"formula_15\"},\"end\":22822,\"start\":22780},{\"attributes\":{\"id\":\"formula_16\"},\"end\":23062,\"start\":23032},{\"attributes\":{\"id\":\"formula_17\"},\"end\":23280,\"start\":23231},{\"attributes\":{\"id\":\"formula_18\"},\"end\":24143,\"start\":24068},{\"attributes\":{\"id\":\"formula_19\"},\"end\":24205,\"start\":24143},{\"attributes\":{\"id\":\"formula_20\"},\"end\":24311,\"start\":24278},{\"attributes\":{\"id\":\"formula_21\"},\"end\":24750,\"start\":24706},{\"attributes\":{\"id\":\"formula_22\"},\"end\":24893,\"start\":24856},{\"attributes\":{\"id\":\"formula_23\"},\"end\":32924,\"start\":32861},{\"attributes\":{\"id\":\"formula_24\"},\"end\":32965,\"start\":32924},{\"attributes\":{\"id\":\"formula_25\"},\"end\":35596,\"start\":35560},{\"attributes\":{\"id\":\"formula_26\"},\"end\":35922,\"start\":35878},{\"attributes\":{\"id\":\"formula_27\"},\"end\":36383,\"start\":36329},{\"attributes\":{\"id\":\"formula_28\"},\"end\":36847,\"start\":36768},{\"attributes\":{\"id\":\"formula_29\"},\"end\":41437,\"start\":41421},{\"attributes\":{\"id\":\"formula_30\"},\"end\":42258,\"start\":42199},{\"attributes\":{\"id\":\"formula_33\"},\"end\":44996,\"start\":44910},{\"attributes\":{\"id\":\"formula_35\"},\"end\":46483,\"start\":46468}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":27988,\"start\":27981}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1969,\"start\":1957},{\"attributes\":{\"n\":\"1.1\"},\"end\":5461,\"start\":5450},{\"attributes\":{\"n\":\"1.2\"},\"end\":10645,\"start\":10627},{\"end\":14821,\"start\":14811},{\"end\":14835,\"start\":14824},{\"attributes\":{\"n\":\"1.2.1\"},\"end\":18263,\"start\":18241},{\"end\":19803,\"start\":19753},{\"attributes\":{\"n\":\"1.2.2\"},\"end\":20158,\"start\":20136},{\"attributes\":{\"n\":\"1.3\"},\"end\":27874,\"start\":27862},{\"attributes\":{\"n\":\"1.4\"},\"end\":31126,\"start\":31101},{\"attributes\":{\"n\":\"2\"},\"end\":31388,\"start\":31362},{\"attributes\":{\"n\":\"2.2\"},\"end\":32321,\"start\":32289},{\"attributes\":{\"n\":\"2.3\"},\"end\":34578,\"start\":34557},{\"attributes\":{\"n\":\"2.4\"},\"end\":34618,\"start\":34581},{\"attributes\":{\"n\":\"2.5\"},\"end\":35341,\"start\":35322},{\"attributes\":{\"n\":\"3\"},\"end\":37876,\"start\":37838},{\"attributes\":{\"n\":\"3.1\"},\"end\":39106,\"start\":39090},{\"attributes\":{\"n\":\"3.2\"},\"end\":39974,\"start\":39960},{\"end\":49669,\"start\":49664},{\"end\":50555,\"start\":50542},{\"end\":50918,\"start\":50901},{\"end\":51516,\"start\":51499},{\"end\":51842,\"start\":51833},{\"end\":53117,\"start\":53112},{\"end\":53301,\"start\":53290},{\"end\":53751,\"start\":53737},{\"end\":54114,\"start\":54104},{\"end\":54147,\"start\":54138},{\"end\":54827,\"start\":54822},{\"end\":55481,\"start\":55480},{\"end\":55725,\"start\":55722},{\"end\":56130,\"start\":56129},{\"end\":56282,\"start\":56281},{\"end\":56949,\"start\":56940}]", "table": "[{\"end\":57319,\"start\":56999}]", "figure_caption": "[{\"end\":49712,\"start\":49671},{\"end\":50540,\"start\":49715},{\"end\":50899,\"start\":50558},{\"end\":51310,\"start\":50920},{\"end\":51497,\"start\":51313},{\"end\":51831,\"start\":51518},{\"end\":51995,\"start\":51844},{\"end\":52544,\"start\":51998},{\"end\":53110,\"start\":52547},{\"end\":53288,\"start\":53119},{\"end\":53735,\"start\":53303},{\"end\":53824,\"start\":53753},{\"end\":54102,\"start\":53827},{\"end\":54136,\"start\":54116},{\"end\":54820,\"start\":54149},{\"end\":55143,\"start\":54829},{\"end\":55192,\"start\":55146},{\"end\":55478,\"start\":55195},{\"end\":55720,\"start\":55482},{\"end\":56127,\"start\":55727},{\"end\":56279,\"start\":56131},{\"end\":56751,\"start\":56283},{\"end\":56938,\"start\":56754},{\"end\":56999,\"start\":56951}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_12\"},\"end\":11433,\"start\":11425},{\"attributes\":{\"ref_id\":\"fig_12\"},\"end\":11540,\"start\":11532},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":14864,\"start\":14856},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":15441,\"start\":15432},{\"end\":27231,\"start\":27223},{\"end\":27527,\"start\":27519},{\"end\":38481,\"start\":38473},{\"attributes\":{\"ref_id\":\"fig_14\"},\"end\":39176,\"start\":39168},{\"attributes\":{\"ref_id\":\"fig_12\"},\"end\":43568,\"start\":43553}]", "bib_author_first_name": "[{\"end\":60630,\"start\":60624},{\"end\":60895,\"start\":60889},{\"end\":60914,\"start\":60906},{\"end\":60929,\"start\":60924},{\"end\":60938,\"start\":60937},{\"end\":60954,\"start\":60948},{\"end\":60966,\"start\":60961},{\"end\":61577,\"start\":61571},{\"end\":61591,\"start\":61588},{\"end\":62100,\"start\":62094},{\"end\":62115,\"start\":62111},{\"end\":62131,\"start\":62125},{\"end\":62152,\"start\":62146},{\"end\":62168,\"start\":62163},{\"end\":62183,\"start\":62179},{\"end\":62197,\"start\":62193},{\"end\":62843,\"start\":62837},{\"end\":62862,\"start\":62854},{\"end\":62876,\"start\":62870},{\"end\":62891,\"start\":62885},{\"end\":63464,\"start\":63458},{\"end\":63483,\"start\":63475},{\"end\":63498,\"start\":63491},{\"end\":63886,\"start\":63880},{\"end\":63903,\"start\":63897},{\"end\":64224,\"start\":64218},{\"end\":64241,\"start\":64235},{\"end\":64256,\"start\":64250},{\"end\":64883,\"start\":64877},{\"end\":64900,\"start\":64894},{\"end\":65345,\"start\":65339},{\"end\":65360,\"start\":65355},{\"end\":65382,\"start\":65375},{\"end\":65384,\"start\":65383},{\"end\":65396,\"start\":65390},{\"end\":66145,\"start\":66137},{\"end\":66160,\"start\":66155},{\"end\":66169,\"start\":66168},{\"end\":66185,\"start\":66179},{\"end\":66197,\"start\":66192},{\"end\":66772,\"start\":66762},{\"end\":66799,\"start\":66789},{\"end\":67486,\"start\":67478},{\"end\":67497,\"start\":67493},{\"end\":67518,\"start\":67513},{\"end\":67532,\"start\":67529},{\"end\":68040,\"start\":68037},{\"end\":68051,\"start\":68048},{\"end\":68659,\"start\":68651},{\"end\":68675,\"start\":68670},{\"end\":68690,\"start\":68683},{\"end\":68708,\"start\":68702},{\"end\":68722,\"start\":68717},{\"end\":69104,\"start\":69096},{\"end\":69122,\"start\":69115},{\"end\":69145,\"start\":69135},{\"end\":69698,\"start\":69693},{\"end\":69719,\"start\":69714},{\"end\":69730,\"start\":69727},{\"end\":70289,\"start\":70284},{\"end\":70312,\"start\":70305},{\"end\":70328,\"start\":70325},{\"end\":70352,\"start\":70346},{\"end\":71156,\"start\":71151},{\"end\":71175,\"start\":71172},{\"end\":71403,\"start\":71398},{\"end\":71424,\"start\":71419},{\"end\":71859,\"start\":71854},{\"end\":71882,\"start\":71872},{\"end\":72289,\"start\":72284},{\"end\":72312,\"start\":72302},{\"end\":72805,\"start\":72799},{\"end\":72823,\"start\":72815},{\"end\":72836,\"start\":72831},{\"end\":72854,\"start\":72847},{\"end\":73333,\"start\":73327},{\"end\":73347,\"start\":73343},{\"end\":73361,\"start\":73356},{\"end\":73379,\"start\":73372},{\"end\":73730,\"start\":73726},{\"end\":73751,\"start\":73746},{\"end\":73766,\"start\":73762},{\"end\":74133,\"start\":74129},{\"end\":74157,\"start\":74149},{\"end\":74169,\"start\":74163},{\"end\":74185,\"start\":74175},{\"end\":74542,\"start\":74534},{\"end\":74557,\"start\":74550},{\"end\":74578,\"start\":74570},{\"end\":74591,\"start\":74585},{\"end\":74604,\"start\":74600},{\"end\":74958,\"start\":74950},{\"end\":74972,\"start\":74966},{\"end\":74990,\"start\":74984},{\"end\":75003,\"start\":74999},{\"end\":75351,\"start\":75347},{\"end\":75368,\"start\":75362},{\"end\":75389,\"start\":75383},{\"end\":75785,\"start\":75779},{\"end\":75805,\"start\":75799},{\"end\":75820,\"start\":75814},{\"end\":76322,\"start\":76316},{\"end\":76345,\"start\":76336},{\"end\":76884,\"start\":76878},{\"end\":76907,\"start\":76898},{\"end\":76924,\"start\":76918},{\"end\":77367,\"start\":77358},{\"end\":77383,\"start\":77375},{\"end\":77402,\"start\":77395},{\"end\":77421,\"start\":77414},{\"end\":77707,\"start\":77698},{\"end\":77722,\"start\":77715},{\"end\":77740,\"start\":77734},{\"end\":77762,\"start\":77755},{\"end\":78250,\"start\":78245},{\"end\":78266,\"start\":78258},{\"end\":78766,\"start\":78761},{\"end\":78780,\"start\":78774},{\"end\":78794,\"start\":78789},{\"end\":79330,\"start\":79325},{\"end\":79339,\"start\":79338},{\"end\":79357,\"start\":79349},{\"end\":80097,\"start\":80087},{\"end\":80120,\"start\":80109},{\"end\":80133,\"start\":80128},{\"end\":80135,\"start\":80134},{\"end\":80449,\"start\":80444},{\"end\":80468,\"start\":80462},{\"end\":80971,\"start\":80965},{\"end\":80990,\"start\":80983},{\"end\":81008,\"start\":81005},{\"end\":81012,\"start\":81009},{\"end\":81584,\"start\":81577},{\"end\":81624,\"start\":81618},{\"end\":82148,\"start\":82141},{\"end\":82188,\"start\":82182},{\"end\":82891,\"start\":82888},{\"end\":83221,\"start\":83218},{\"end\":83532,\"start\":83524},{\"end\":83542,\"start\":83538},{\"end\":84222,\"start\":84214},{\"end\":84232,\"start\":84228},{\"end\":84911,\"start\":84901},{\"end\":84939,\"start\":84924}]", "bib_author_last_name": "[{\"end\":60439,\"start\":60434},{\"end\":60639,\"start\":60631},{\"end\":60904,\"start\":60896},{\"end\":60922,\"start\":60915},{\"end\":60935,\"start\":60930},{\"end\":60946,\"start\":60939},{\"end\":60959,\"start\":60955},{\"end\":60973,\"start\":60967},{\"end\":60986,\"start\":60975},{\"end\":61586,\"start\":61578},{\"end\":61597,\"start\":61592},{\"end\":62109,\"start\":62101},{\"end\":62123,\"start\":62116},{\"end\":62144,\"start\":62132},{\"end\":62161,\"start\":62153},{\"end\":62177,\"start\":62169},{\"end\":62191,\"start\":62184},{\"end\":62204,\"start\":62198},{\"end\":62852,\"start\":62844},{\"end\":62868,\"start\":62863},{\"end\":62883,\"start\":62877},{\"end\":62900,\"start\":62892},{\"end\":63473,\"start\":63465},{\"end\":63489,\"start\":63484},{\"end\":63505,\"start\":63499},{\"end\":63895,\"start\":63887},{\"end\":63915,\"start\":63904},{\"end\":64233,\"start\":64225},{\"end\":64248,\"start\":64242},{\"end\":64265,\"start\":64257},{\"end\":64892,\"start\":64884},{\"end\":64909,\"start\":64901},{\"end\":65353,\"start\":65346},{\"end\":65373,\"start\":65361},{\"end\":65388,\"start\":65385},{\"end\":65404,\"start\":65397},{\"end\":66153,\"start\":66146},{\"end\":66166,\"start\":66161},{\"end\":66177,\"start\":66170},{\"end\":66190,\"start\":66186},{\"end\":66204,\"start\":66198},{\"end\":66217,\"start\":66206},{\"end\":66787,\"start\":66773},{\"end\":66810,\"start\":66800},{\"end\":67491,\"start\":67487},{\"end\":67511,\"start\":67498},{\"end\":67527,\"start\":67519},{\"end\":67539,\"start\":67533},{\"end\":68046,\"start\":68041},{\"end\":68058,\"start\":68052},{\"end\":68544,\"start\":68536},{\"end\":68668,\"start\":68660},{\"end\":68681,\"start\":68676},{\"end\":68700,\"start\":68691},{\"end\":68715,\"start\":68709},{\"end\":68731,\"start\":68723},{\"end\":69113,\"start\":69105},{\"end\":69133,\"start\":69123},{\"end\":69156,\"start\":69146},{\"end\":69712,\"start\":69699},{\"end\":69725,\"start\":69720},{\"end\":69733,\"start\":69731},{\"end\":70303,\"start\":70290},{\"end\":70323,\"start\":70313},{\"end\":70344,\"start\":70329},{\"end\":70360,\"start\":70353},{\"end\":70367,\"start\":70362},{\"end\":71170,\"start\":71157},{\"end\":71178,\"start\":71176},{\"end\":71417,\"start\":71404},{\"end\":71434,\"start\":71425},{\"end\":71870,\"start\":71860},{\"end\":71892,\"start\":71883},{\"end\":72300,\"start\":72290},{\"end\":72322,\"start\":72313},{\"end\":72813,\"start\":72806},{\"end\":72829,\"start\":72824},{\"end\":72845,\"start\":72837},{\"end\":72862,\"start\":72855},{\"end\":73341,\"start\":73334},{\"end\":73354,\"start\":73348},{\"end\":73370,\"start\":73362},{\"end\":73387,\"start\":73380},{\"end\":73744,\"start\":73731},{\"end\":73760,\"start\":73752},{\"end\":73776,\"start\":73767},{\"end\":74147,\"start\":74134},{\"end\":74161,\"start\":74158},{\"end\":74173,\"start\":74170},{\"end\":74190,\"start\":74186},{\"end\":74548,\"start\":74543},{\"end\":74568,\"start\":74558},{\"end\":74583,\"start\":74579},{\"end\":74598,\"start\":74592},{\"end\":74610,\"start\":74605},{\"end\":74964,\"start\":74959},{\"end\":74982,\"start\":74973},{\"end\":74997,\"start\":74991},{\"end\":75009,\"start\":75004},{\"end\":75360,\"start\":75352},{\"end\":75381,\"start\":75369},{\"end\":75398,\"start\":75390},{\"end\":75797,\"start\":75786},{\"end\":75812,\"start\":75806},{\"end\":75829,\"start\":75821},{\"end\":76334,\"start\":76323},{\"end\":76354,\"start\":76346},{\"end\":76896,\"start\":76885},{\"end\":76916,\"start\":76908},{\"end\":76930,\"start\":76925},{\"end\":77373,\"start\":77368},{\"end\":77393,\"start\":77384},{\"end\":77412,\"start\":77403},{\"end\":77429,\"start\":77422},{\"end\":77713,\"start\":77708},{\"end\":77732,\"start\":77723},{\"end\":77753,\"start\":77741},{\"end\":77770,\"start\":77763},{\"end\":78256,\"start\":78251},{\"end\":78272,\"start\":78267},{\"end\":78772,\"start\":78767},{\"end\":78787,\"start\":78781},{\"end\":78804,\"start\":78795},{\"end\":79336,\"start\":79331},{\"end\":79347,\"start\":79340},{\"end\":79362,\"start\":79358},{\"end\":79368,\"start\":79364},{\"end\":80107,\"start\":80098},{\"end\":80126,\"start\":80121},{\"end\":80142,\"start\":80136},{\"end\":80460,\"start\":80450},{\"end\":80474,\"start\":80469},{\"end\":80981,\"start\":80972},{\"end\":81003,\"start\":80991},{\"end\":81019,\"start\":81013},{\"end\":81595,\"start\":81585},{\"end\":81616,\"start\":81597},{\"end\":81632,\"start\":81625},{\"end\":81639,\"start\":81634},{\"end\":82159,\"start\":82149},{\"end\":82180,\"start\":82161},{\"end\":82196,\"start\":82189},{\"end\":82203,\"start\":82198},{\"end\":82894,\"start\":82892},{\"end\":83224,\"start\":83222},{\"end\":83536,\"start\":83533},{\"end\":83554,\"start\":83543},{\"end\":84226,\"start\":84223},{\"end\":84244,\"start\":84233},{\"end\":84922,\"start\":84912},{\"end\":84949,\"start\":84940}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":60130,\"start\":59769},{\"attributes\":{\"id\":\"b1\"},\"end\":60385,\"start\":60132},{\"attributes\":{\"id\":\"b2\"},\"end\":60430,\"start\":60387},{\"attributes\":{\"id\":\"b3\"},\"end\":60586,\"start\":60432},{\"attributes\":{\"doi\":\"10.1016/j.ipl.2014.10.015\",\"id\":\"b4\",\"matched_paper_id\":15912301},\"end\":60833,\"start\":60588},{\"attributes\":{\"doi\":\"10.1007/978-3-662-49099-0_15\",\"id\":\"b5\",\"matched_paper_id\":6767352},\"end\":61469,\"start\":60835},{\"attributes\":{\"doi\":\"10.1109/ISIT.2016.7541513\",\"id\":\"b6\",\"matched_paper_id\":1418200},\"end\":61993,\"start\":61471},{\"attributes\":{\"doi\":\"10.1007/978-3-030-26951-7_18\",\"id\":\"b7\",\"matched_paper_id\":54214903},\"end\":62792,\"start\":61995},{\"attributes\":{\"doi\":\"10.1145/2746539.2746544\",\"id\":\"b8\",\"matched_paper_id\":2544613},\"end\":63407,\"start\":62794},{\"attributes\":{\"doi\":\"10.1145/2591796.2591804\",\"id\":\"b9\",\"matched_paper_id\":2575057},\"end\":63839,\"start\":63409},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":166048},\"end\":64170,\"start\":63841},{\"attributes\":{\"doi\":\"10.1007/978-3-319-70503-3_10\",\"id\":\"b11\",\"matched_paper_id\":274052},\"end\":64814,\"start\":64172},{\"attributes\":{\"doi\":\"10.1109/FOCS46700.2020.00122\",\"id\":\"b12\",\"matched_paper_id\":208058906},\"end\":65313,\"start\":64816},{\"attributes\":{\"doi\":\"10.1007/3-540-36400-5_4\",\"id\":\"b13\",\"matched_paper_id\":21366301},\"end\":66039,\"start\":65315},{\"attributes\":{\"doi\":\"10.1007/978-3-662-46494-6_16\",\"id\":\"b14\",\"matched_paper_id\":13348226},\"end\":66719,\"start\":66041},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":54205776},\"end\":66995,\"start\":66721},{\"attributes\":{\"doi\":\"10.1007/978-3-030-17653-2_20\",\"id\":\"b16\"},\"end\":67366,\"start\":66997},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":1410685},\"end\":67978,\"start\":67368},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":12376527},\"end\":68532,\"start\":67980},{\"attributes\":{\"doi\":\"10.1007/BFb0052259\",\"id\":\"b19\"},\"end\":68617,\"start\":68534},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":2322670},\"end\":68901,\"start\":68619},{\"attributes\":{\"id\":\"b21\"},\"end\":69022,\"start\":68903},{\"attributes\":{\"doi\":\"10.1007/978-3-662-49099-0_14\",\"id\":\"b22\",\"matched_paper_id\":5373990},\"end\":69618,\"start\":69024},{\"attributes\":{\"doi\":\"10.1145/2897518.2897547\",\"id\":\"b23\",\"matched_paper_id\":11022208},\"end\":70234,\"start\":69620},{\"attributes\":{\"doi\":\"10.1007/978-3-030-35423-7_16\",\"id\":\"b24\",\"matched_paper_id\":19219558},\"end\":71066,\"start\":70236},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":7549512},\"end\":71336,\"start\":71068},{\"attributes\":{\"doi\":\"10.1109/FOCS.2014.40\",\"id\":\"b26\",\"matched_paper_id\":15492569},\"end\":71819,\"start\":71338},{\"attributes\":{\"doi\":\"10.1145/2554797.2554814\",\"id\":\"b27\",\"matched_paper_id\":564427},\"end\":72217,\"start\":71821},{\"attributes\":{\"doi\":\"10.1007/978-3-642-54242-8_19\",\"id\":\"b28\",\"matched_paper_id\":1470207},\"end\":72743,\"start\":72219},{\"attributes\":{\"id\":\"b29\"},\"end\":73217,\"start\":72745},{\"attributes\":{\"id\":\"b30\"},\"end\":73620,\"start\":73219},{\"attributes\":{\"doi\":\"10.1016/j.ic.2019.05.001\",\"id\":\"b31\",\"matched_paper_id\":164314665},\"end\":74051,\"start\":73622},{\"attributes\":{\"doi\":\"10.1007/s00145-018-9306-z\",\"id\":\"b32\",\"matched_paper_id\":17042867},\"end\":74456,\"start\":74053},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":2139711},\"end\":74864,\"start\":74458},{\"attributes\":{\"doi\":\"arXiv:cs/0602007\",\"id\":\"b34\",\"matched_paper_id\":2095658},\"end\":75255,\"start\":74866},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":578034},\"end\":75729,\"start\":75257},{\"attributes\":{\"doi\":\"10.1007/978-3-642-40084-1_14\",\"id\":\"b36\",\"matched_paper_id\":415299},\"end\":76278,\"start\":75731},{\"attributes\":{\"doi\":\"10.1109/FOCS.2007.35\",\"id\":\"b37\",\"matched_paper_id\":7408818},\"end\":76855,\"start\":76280},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":3635922},\"end\":77307,\"start\":76857},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":31419280},\"end\":77664,\"start\":77309},{\"attributes\":{\"doi\":\"10.1007/978-3-642-54242-8_20\",\"id\":\"b40\",\"matched_paper_id\":565041},\"end\":78213,\"start\":77666},{\"attributes\":{\"doi\":\"10.1145/3188745.3188872\",\"id\":\"b41\",\"matched_paper_id\":19126777},\"end\":78723,\"start\":78215},{\"attributes\":{\"doi\":\"10.1145/2897518.2897657\",\"id\":\"b42\",\"matched_paper_id\":262759},\"end\":79274,\"start\":78725},{\"attributes\":{\"doi\":\"10.1007/978-3-030-05378-9_17\",\"id\":\"b43\",\"matched_paper_id\":53570458},\"end\":80010,\"start\":79276},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":20233192},\"end\":80389,\"start\":80012},{\"attributes\":{\"doi\":\"10.1007/978-3-662-46494-6_19\",\"id\":\"b45\",\"matched_paper_id\":1165875},\"end\":80890,\"start\":80391},{\"attributes\":{\"doi\":\"10.1007/3-540-48285-7_1\",\"id\":\"b46\",\"matched_paper_id\":33747456},\"end\":81515,\"start\":80892},{\"attributes\":{\"doi\":\"10.1007/978-3-319-70503-3_11\",\"id\":\"b47\",\"matched_paper_id\":3985961},\"end\":82081,\"start\":81517},{\"attributes\":{\"doi\":\"10.1007/978-3-319-78372-7_19\",\"id\":\"b48\",\"matched_paper_id\":28991729},\"end\":82796,\"start\":82083},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":1523893},\"end\":83133,\"start\":82798},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":4774427},\"end\":83465,\"start\":83135},{\"attributes\":{\"doi\":\"10.1007/978-3-642-15317-4_8\",\"id\":\"b51\",\"matched_paper_id\":12201066},\"end\":84156,\"start\":83467},{\"attributes\":{\"doi\":\"10.1007/978-3-642-32009-5_30\",\"id\":\"b52\",\"matched_paper_id\":531576},\"end\":84848,\"start\":84158},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":54209830},\"end\":85319,\"start\":84850}]", "bib_title": "[{\"end\":60622,\"start\":60588},{\"end\":60887,\"start\":60835},{\"end\":61569,\"start\":61471},{\"end\":62092,\"start\":61995},{\"end\":62835,\"start\":62794},{\"end\":63456,\"start\":63409},{\"end\":63878,\"start\":63841},{\"end\":64216,\"start\":64172},{\"end\":64875,\"start\":64816},{\"end\":65337,\"start\":65315},{\"end\":66135,\"start\":66041},{\"end\":66760,\"start\":66721},{\"end\":67476,\"start\":67368},{\"end\":68035,\"start\":67980},{\"end\":68649,\"start\":68619},{\"end\":69094,\"start\":69024},{\"end\":69691,\"start\":69620},{\"end\":70282,\"start\":70236},{\"end\":71149,\"start\":71068},{\"end\":71396,\"start\":71338},{\"end\":71852,\"start\":71821},{\"end\":72282,\"start\":72219},{\"end\":73724,\"start\":73622},{\"end\":74127,\"start\":74053},{\"end\":74532,\"start\":74458},{\"end\":74948,\"start\":74866},{\"end\":75345,\"start\":75257},{\"end\":75777,\"start\":75731},{\"end\":76314,\"start\":76280},{\"end\":76876,\"start\":76857},{\"end\":77356,\"start\":77309},{\"end\":77696,\"start\":77666},{\"end\":78243,\"start\":78215},{\"end\":78759,\"start\":78725},{\"end\":79323,\"start\":79276},{\"end\":80085,\"start\":80012},{\"end\":80442,\"start\":80391},{\"end\":80963,\"start\":80892},{\"end\":81575,\"start\":81517},{\"end\":82139,\"start\":82083},{\"end\":82886,\"start\":82798},{\"end\":83216,\"start\":83135},{\"end\":83522,\"start\":83467},{\"end\":84212,\"start\":84158},{\"end\":84899,\"start\":84850}]", "bib_author": "[{\"end\":60441,\"start\":60434},{\"end\":60641,\"start\":60624},{\"end\":60906,\"start\":60889},{\"end\":60924,\"start\":60906},{\"end\":60937,\"start\":60924},{\"end\":60948,\"start\":60937},{\"end\":60961,\"start\":60948},{\"end\":60975,\"start\":60961},{\"end\":60988,\"start\":60975},{\"end\":61588,\"start\":61571},{\"end\":61599,\"start\":61588},{\"end\":62111,\"start\":62094},{\"end\":62125,\"start\":62111},{\"end\":62146,\"start\":62125},{\"end\":62163,\"start\":62146},{\"end\":62179,\"start\":62163},{\"end\":62193,\"start\":62179},{\"end\":62206,\"start\":62193},{\"end\":62854,\"start\":62837},{\"end\":62870,\"start\":62854},{\"end\":62885,\"start\":62870},{\"end\":62902,\"start\":62885},{\"end\":63475,\"start\":63458},{\"end\":63491,\"start\":63475},{\"end\":63507,\"start\":63491},{\"end\":63897,\"start\":63880},{\"end\":63917,\"start\":63897},{\"end\":64235,\"start\":64218},{\"end\":64250,\"start\":64235},{\"end\":64267,\"start\":64250},{\"end\":64894,\"start\":64877},{\"end\":64911,\"start\":64894},{\"end\":65355,\"start\":65339},{\"end\":65375,\"start\":65355},{\"end\":65390,\"start\":65375},{\"end\":65406,\"start\":65390},{\"end\":66155,\"start\":66137},{\"end\":66168,\"start\":66155},{\"end\":66179,\"start\":66168},{\"end\":66192,\"start\":66179},{\"end\":66206,\"start\":66192},{\"end\":66219,\"start\":66206},{\"end\":66789,\"start\":66762},{\"end\":66812,\"start\":66789},{\"end\":67493,\"start\":67478},{\"end\":67513,\"start\":67493},{\"end\":67529,\"start\":67513},{\"end\":67541,\"start\":67529},{\"end\":68048,\"start\":68037},{\"end\":68060,\"start\":68048},{\"end\":68546,\"start\":68536},{\"end\":68670,\"start\":68651},{\"end\":68683,\"start\":68670},{\"end\":68702,\"start\":68683},{\"end\":68717,\"start\":68702},{\"end\":68733,\"start\":68717},{\"end\":69115,\"start\":69096},{\"end\":69135,\"start\":69115},{\"end\":69158,\"start\":69135},{\"end\":69714,\"start\":69693},{\"end\":69727,\"start\":69714},{\"end\":69735,\"start\":69727},{\"end\":70305,\"start\":70284},{\"end\":70325,\"start\":70305},{\"end\":70346,\"start\":70325},{\"end\":70362,\"start\":70346},{\"end\":70369,\"start\":70362},{\"end\":71172,\"start\":71151},{\"end\":71180,\"start\":71172},{\"end\":71419,\"start\":71398},{\"end\":71436,\"start\":71419},{\"end\":71872,\"start\":71854},{\"end\":71894,\"start\":71872},{\"end\":72302,\"start\":72284},{\"end\":72324,\"start\":72302},{\"end\":72815,\"start\":72799},{\"end\":72831,\"start\":72815},{\"end\":72847,\"start\":72831},{\"end\":72864,\"start\":72847},{\"end\":73343,\"start\":73327},{\"end\":73356,\"start\":73343},{\"end\":73372,\"start\":73356},{\"end\":73389,\"start\":73372},{\"end\":73746,\"start\":73726},{\"end\":73762,\"start\":73746},{\"end\":73778,\"start\":73762},{\"end\":74149,\"start\":74129},{\"end\":74163,\"start\":74149},{\"end\":74175,\"start\":74163},{\"end\":74192,\"start\":74175},{\"end\":74550,\"start\":74534},{\"end\":74570,\"start\":74550},{\"end\":74585,\"start\":74570},{\"end\":74600,\"start\":74585},{\"end\":74612,\"start\":74600},{\"end\":74966,\"start\":74950},{\"end\":74984,\"start\":74966},{\"end\":74999,\"start\":74984},{\"end\":75011,\"start\":74999},{\"end\":75362,\"start\":75347},{\"end\":75383,\"start\":75362},{\"end\":75400,\"start\":75383},{\"end\":75799,\"start\":75779},{\"end\":75814,\"start\":75799},{\"end\":75831,\"start\":75814},{\"end\":76336,\"start\":76316},{\"end\":76356,\"start\":76336},{\"end\":76898,\"start\":76878},{\"end\":76918,\"start\":76898},{\"end\":76932,\"start\":76918},{\"end\":77375,\"start\":77358},{\"end\":77395,\"start\":77375},{\"end\":77414,\"start\":77395},{\"end\":77431,\"start\":77414},{\"end\":77715,\"start\":77698},{\"end\":77734,\"start\":77715},{\"end\":77755,\"start\":77734},{\"end\":77772,\"start\":77755},{\"end\":78258,\"start\":78245},{\"end\":78274,\"start\":78258},{\"end\":78774,\"start\":78761},{\"end\":78789,\"start\":78774},{\"end\":78806,\"start\":78789},{\"end\":79338,\"start\":79325},{\"end\":79349,\"start\":79338},{\"end\":79364,\"start\":79349},{\"end\":79370,\"start\":79364},{\"end\":80109,\"start\":80087},{\"end\":80128,\"start\":80109},{\"end\":80144,\"start\":80128},{\"end\":80462,\"start\":80444},{\"end\":80476,\"start\":80462},{\"end\":80983,\"start\":80965},{\"end\":81005,\"start\":80983},{\"end\":81021,\"start\":81005},{\"end\":81597,\"start\":81577},{\"end\":81618,\"start\":81597},{\"end\":81634,\"start\":81618},{\"end\":81641,\"start\":81634},{\"end\":82161,\"start\":82141},{\"end\":82182,\"start\":82161},{\"end\":82198,\"start\":82182},{\"end\":82205,\"start\":82198},{\"end\":82896,\"start\":82888},{\"end\":83226,\"start\":83218},{\"end\":83538,\"start\":83524},{\"end\":83556,\"start\":83538},{\"end\":84228,\"start\":84214},{\"end\":84246,\"start\":84228},{\"end\":84924,\"start\":84901},{\"end\":84951,\"start\":84924}]", "bib_venue": "[{\"end\":61099,\"start\":61083},{\"end\":61692,\"start\":61676},{\"end\":62342,\"start\":62320},{\"end\":63109,\"start\":63017},{\"end\":63592,\"start\":63575},{\"end\":64396,\"start\":64378},{\"end\":65028,\"start\":65013},{\"end\":65592,\"start\":65569},{\"end\":66325,\"start\":66311},{\"end\":67135,\"start\":67117},{\"end\":67623,\"start\":67619},{\"end\":68196,\"start\":68166},{\"end\":69269,\"start\":69253},{\"end\":69933,\"start\":69845},{\"end\":70551,\"start\":70535},{\"end\":71546,\"start\":71525},{\"end\":71989,\"start\":71971},{\"end\":72444,\"start\":72426},{\"end\":75953,\"start\":75931},{\"end\":76564,\"start\":76469},{\"end\":76989,\"start\":76975},{\"end\":77892,\"start\":77874},{\"end\":78474,\"start\":78384},{\"end\":79004,\"start\":78916},{\"end\":79542,\"start\":79526},{\"end\":80582,\"start\":80568},{\"end\":81169,\"start\":81154},{\"end\":81742,\"start\":81724},{\"end\":82386,\"start\":82370},{\"end\":82946,\"start\":82930},{\"end\":83286,\"start\":83273},{\"end\":83711,\"start\":83698},{\"end\":84405,\"start\":84383},{\"end\":85034,\"start\":85030},{\"end\":59870,\"start\":59769},{\"end\":60240,\"start\":60132},{\"end\":60396,\"start\":60389},{\"end\":60684,\"start\":60666},{\"end\":61081,\"start\":61016},{\"end\":61674,\"start\":61624},{\"end\":62318,\"start\":62234},{\"end\":63015,\"start\":62925},{\"end\":63573,\"start\":63530},{\"end\":63950,\"start\":63917},{\"end\":64348,\"start\":64295},{\"end\":65011,\"start\":64939},{\"end\":65511,\"start\":65429},{\"end\":66309,\"start\":66247},{\"end\":66845,\"start\":66812},{\"end\":67115,\"start\":67025},{\"end\":67579,\"start\":67541},{\"end\":68143,\"start\":68060},{\"end\":68746,\"start\":68733},{\"end\":68954,\"start\":68905},{\"end\":69251,\"start\":69186},{\"end\":69843,\"start\":69758},{\"end\":70489,\"start\":70397},{\"end\":71189,\"start\":71180},{\"end\":71523,\"start\":71456},{\"end\":71969,\"start\":71917},{\"end\":72424,\"start\":72352},{\"end\":72797,\"start\":72745},{\"end\":73325,\"start\":73219},{\"end\":73813,\"start\":73802},{\"end\":74227,\"start\":74217},{\"end\":74651,\"start\":74612},{\"end\":75041,\"start\":75027},{\"end\":75456,\"start\":75400},{\"end\":75929,\"start\":75859},{\"end\":76467,\"start\":76376},{\"end\":76973,\"start\":76932},{\"end\":77437,\"start\":77431},{\"end\":77872,\"start\":77800},{\"end\":78382,\"start\":78297},{\"end\":78914,\"start\":78829},{\"end\":79490,\"start\":79398},{\"end\":80187,\"start\":80144},{\"end\":80566,\"start\":80504},{\"end\":81152,\"start\":81044},{\"end\":81722,\"start\":81669},{\"end\":82368,\"start\":82233},{\"end\":82928,\"start\":82896},{\"end\":83271,\"start\":83226},{\"end\":83661,\"start\":83583},{\"end\":84344,\"start\":84274},{\"end\":84986,\"start\":84951}]"}}}, "year": 2023, "month": 12, "day": 17}