{"id": 229576527, "updated": "2022-01-16 12:42:10.007", "metadata": {"title": "ANGHABENCH: A Suite with One Million Compilable C Benchmarks for Code-Size Reduction", "authors": "[{\"middle\":[\"Faustino\"],\"last\":\"da Silva\",\"first\":\"Anderson\"},{\"middle\":[\"Conde\"],\"last\":\"Kind\",\"first\":\"Bruno\"},{\"middle\":[\"Wesley\"],\"last\":\"de Souza Magalh\u00e3es\",\"first\":\"Jos\u00e9\"},{\"middle\":[\"Nunes\"],\"last\":\"Rocha\",\"first\":\"Jer\u00f4nimo\"},{\"middle\":[\"Campos\"],\"last\":\"Ferreira Guimar\u00e3es\",\"first\":\"Breno\"},{\"middle\":[\"Magno\"],\"last\":\"Quin\u00e3o Pereira\",\"first\":\"Fernando\"}]", "venue": "2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)", "journal": "2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "A predictive compiler uses properties of a program to decide how to optimize it. The compiler is trained on a collection of programs to derive a model which determines its actions in face of unknown codes. One of the challenges of predictive compilation is how to find good training sets. Regardless of the programming language, the availability of human-made benchmarks is limited. Moreover, current synthesizers produce code that is very different from actual programs, and mining compilable code from open repositories is difficult, due to program dependencies. In this paper, we use a combination of web crawling and type inference to overcome these problems for the C programming language. We use a type reconstructor based on Hindley-Milner's algorithm to produce ANGHABENCH, a virtually unlimited collection of real-world compilable C programs. Although ANGHABENCH programs are not executable, they can be transformed into object files by any C compliant compiler. Therefore, they can be used to train compilers for code size reduction. We have used thousands of ANGHABENCH programs to train YACOS, a predictive compiler based on LLVM. The version of YACOS autotuned with ANGHABENCH generates binaries for the LLVM test suite over 10% smaller than clang -Oz. It compresses code impervious even to the state-of-the-art Function Sequence Alignment technique published in 2019, as it does not require large binaries to work well.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/cgo/SilvaKMRGP21", "doi": "10.1109/cgo51591.2021.9370322"}}, "content": {"source": {"pdf_hash": "2699dbb4e33fd43a2557e61f2ba507abc9004929", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "759e45a4f3261a337a0f109b7c5c8650afe3def1", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/2699dbb4e33fd43a2557e61f2ba507abc9004929.txt", "contents": "\nANGHABENCH: A Suite with One Million Compilable C Benchmarks for Code-Size Reduction\n\n\nAnderson Faustino Da Silva anderson@din.uem.br \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nBruno Conde \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nJos\u00e9 Wesley \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nSouza Magalh\u00e3es \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nJer\u00f4nimo Nunes Rocha \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nBreno Campos brenosfg@dcc.ufmg.br \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nFerreira Guimar\u00e3es \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nFernando Magno fernando@dcc.ufmg.br \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nQuint\u00e3o Pereira \nDepartment of Informatics UEM\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nDepartment of Computer Science UFMG\nBrazil, Brazil, Brazil, Brazil, Brazil, Brazil\n\nANGHABENCH: A Suite with One Million Compilable C Benchmarks for Code-Size Reduction\n10.1109/CGO51591.2021.9370322Index Terms-BenchmarkRepositorySynthesisTraining\nA predictive compiler uses properties of a program to decide how to optimize it. The compiler is trained on a collection of programs to derive a model which determines its actions in face of unknown codes. One of the challenges of predictive compilation is how to find good training sets. Regardless of the programming language, the availability of humanmade benchmarks is limited. Moreover, current synthesizers produce code that is very different from actual programs, and mining compilable code from open repositories is difficult, due to program dependencies. In this paper, we use a combination of web crawling and type inference to overcome these problems for the C programming language. We use a type reconstructor based on Hindley-Milner's algorithm to produce ANGHABENCH, a virtually unlimited collection of real-world compilable C programs. Although ANGHABENCH programs are not executable, they can be transformed into object files by any C compliant compiler. Therefore, they can be used to train compilers for code size reduction. We have used thousands of ANGHABENCH programs to train YACOS, a predictive compiler based on LLVM. The version of YACOS autotuned with ANGHABENCH generates binaries for the LLVM test suite over 10% smaller than clang -Oz. It compresses code impervious even to the state-of-the-art Function Sequence Alignment technique published in 2019, as it does not require large binaries to work well.\n\nI. INTRODUCTION\n\nThe growing popularity of stochastic classification techniques is contributing to making compiler autotuning an effective approach to the generation of efficient programs [1], [2], [3]. Autotuning is implemented as follows. A compiler is trained on a collection of programs, and uses knowledge acquired during training to optimize unseen codes. Samples from the known collection of programs are compiled in different ways, and the best results, given some objective function such as running time or size, are recorded. The compiler uses this model to decide which optimizations to apply on an unknown program P u . Autotuning has been shown to be effective along different dimensions of code efficiency, such as running time [4], [5], [6], [7], [8], energy consumption [9], [10], code size [11], [12], [13], hardware usage [14], [15], and the size-speed relation [16], [17], for instance.\n\nThe Problem Posed by the Lack of Benchmarks. A common shortcoming in this field, extensively discussed by Cummins et al. [14], is the small size of typical training sets. Cummins et al. have analyzed 25 research papers published between 2013 and 2016, from four conferences: CGO, HiPC, PACT, and PPoPP. They observe that \"the average number of benchmarks used in each paper [is] 17\". This result, although at first surprising, should not be unexpected. Typical benchmarks contain a small number of programs: SPEC CINT2006 [18] contains 12, SPEC CFP2006 [18] contains 17, Parsec [19] contains 13, Rodinia [20] contains 23, Polybench [21] contains 30, cBench [22] contains 30, and NPB v.1 [23] contains 8. The problem with these small numbers is, in the words of Cummins et al., that \"heuristics learned on one benchmark suite fail to generalize across other suites\". Wang and O'Boyle subsume well the essence of the problem: \"The most immediate problem continues to be gathering enough sufficient high quality training data. Although there are numerous benchmark sites publicly available, the number of programs available is relatively sparse compared to the number that a typical compiler will encounter in its lifetime.\" [3] To circumvent the obstacle posed by a perceived lack of benchmarks, compiler researchers resort to program generation. With such purpose, automatically constructed programs have been used to tune compiler heuristics in specific scenarios [24], [10], [25], [26], [27]. However, these programs cannot be easily employed in general purpose compilers: they consist of micro-kernels that exercise particular aspects of the target hardware or of the target programming language. As an example, Sreelatha et al. [10] generate code snippets to find optimum constants for their code generation approach. Each program performs one action several times, be it to access memory, to synchronize threads, to force branch mispredictions, etc. Such behavior, although befitting Sreelatha et al.'s needs, is unlikely to occur in real-world programs.\n\nOur Contributions. We bring forward a new technique to generate compilable benchmarks for C. As we explain in Section III, we mine C code from open-source repositories.\n\nAlthough an obvious solution to the synthesis of benchmarks, this approach is not common. It is difficult to compile code downloaded from repositories automatically, due to dependencies. In the words of Cummins et al. [14]: \"preparing each of the thousands of open source projects to be directly applicable for learning compiler heuristics would be an insurmountable task.\" In this paper, we show how to compile these codes without human intervention. Key to the success of this endeavor is type reconstruction. We use PsycheC, a type inference engine for C [28], to fill up all the missing dependencies of code mined from the internet. This combination of code crawler and type reconstruction yields a collection of compilable programs that is practically unbounded. Summary of Results. We call ANGHABENCH the collection of C benchmarks that we synthesize. Every benchmark is compilable, albeit non-executable. ANGHABENCH can be parsed by any C analyzer, can be converted into intermediate representations such as LLVM IR and gcc Gimple, and can be translated into object files. ANGHABENCH supports compiler tuning for code size reduction, and lets researchers study properties of real-world programs via static code analyses. Such possibilities are summarized in the following list of contributions:\n\n\u2022 Reconstructor: Section III-A describes the infrastructure that we use to obtain compilable C programs from public repositories. This combination of web crawler and type inference engine is able to produce one million compilable C functions in about one week, including the time to download files and reconstruct types. \u2022 Distribution: We provide a public collection of over one million compilable C files, organized as singlefunction and multi-function benchmarks. As we explain in Section III-B, this collection is browsable-search being guided by a vector of features that we extract from the LLVM representation [29] of each program. \u2022 Applications: Section IV-B shows that ANGHABENCH predicts well the behavior of compiler optimizations. In Section IV-D, we use ANGHABENCH to train YACOS, a framework implemented by Filho et al. [6], [30] to find good optimization sequences for LLVM. Considering code size as the objective functions, we show that ANGHABENCH yields a training set 45.33% and 36.77% more effective than programs generated by CSMITH [31] and LDRGEN [32]. \u2022 Optimization: We have used ANGHABENCH to produce a code reduction tool, ANGHAZ, that improves clang-Oz by 11.1% on average. To compile an unseen program P u , ANGHAZ searches a database of optimized functions for the program P k the closest to P u , given a well-known distance metric [5]. As discussed in Section IV-E, by applying onto P u optimizations known to be effective on P k , ANGHAZ can reduce codes impervious to even Rocha et al.'s state-of-the-art approach published in CGO19's distinguished paper [33].\n\nWhy Compilation Matters. We call \"compilable\" a file known in the C specification as a translation unit [34,. From a translation unit a C compiler can produce an object file. There are analyses that can be performed on the source code of programs, without the need to produce compilable code [35], [36], [37]. However, all the analyses and applications that we present in Section IV require compilable code, because these techniques either run on LLVM bytecodes or on machine code. In Section IV-F we show that type inference is essential to give us a large quantity of compilable benchmarks. Without type inference, we cannot go from the program's abstract syntax tree to object code, due to missing dependencies.\n\nThe Benefits of a Large Code Base. The reader could think that it is simple to analyze any partial C function, even if not compilable, as long as it is syntactically valid. This statement is not true. The C grammar is not context free; hence, most parsers, including clang's and gcc's, require all the dependencies in place, otherwise, statements like T * c become ambiguous: is T a type, or the first operand of a multiplication? Other ambiguities exist [28]. Having this large and unambiguous code base opens up many opportunities to understand real-world C programs. We have performed some analysis to this end, which, for the sake of space, we discuss in an extended technical report that accompanies this paper [38].\n\n\nII. OVERVIEW\n\n\nA. Predictive Compilation\n\nAs mentioned in Section I, a predictive compiler relies on properties of known programs to approximate properties of unknown programs. The collection formed by all the known programs is called the Training Set. Predictions, in this context, consist in matching static program properties, also called features, with compilation actions 1 . The concept of static program property has been defined in previous work; however, because this is a central notion to this paper, we recall its definition, using the notation proposed by Pereira et al. [39]:\n\nDefinition 1 (Static Program Feature). Given a program P , a static program feature f (P ) is any characteristic of P , with the following attributes:\n\n\u2022 Static: f (P ) depends only on the syntax of P ; \u2022 Consistent: if f (P ) = x and f (P ) = x , then x = x ;\n\n\u2022 Available: f (P ) can be computed in polynomial time.\n\nAn ordered sequence of program features determines a feature vector. The set of every possible feature vector gives us a feature space. Such space can be explored in many different ways. For instance, because it abides by Euclidean Laws, it is sound to define distance between vectors. Example 1 illustrates these concepts.\n\nExample 1. Figure 1 shows a three-dimentional feature space. The three features that form it are Number of Instructions, Number of Stores and Loop Depth, i.e., the depth level of the innermost natural loop in the program. The training phase of a predictive compiler consists in a search, not necessarily exhaustive, for the most adequate compilation action for each program in the training set. The notion of \"most adequate action\" depends on two factors: (i) the objective function that guides the search; and (ii) the representation of the action. Typical objective functions include runtime, size and energy consumption. Common representations include tuples and lists of optimizations. In the former case, the order of application of an optimization is fixedwhat varies is the occurrence or not of the optimization [6], [40]. In the latter, any permutation of a known universe of optimizations is acceptable [41], [42], [43].\n\nExample 2. The property space seen in Figure 1 contains twelve programs, each one represented as a dot. The figure shows the feature vectors of two programs. The best tuple of optimizations, from a universe of five candidates, for each one of these two programs is also shown. A zero means that the optimization is inactive; a one means that it should be applied onto that program. Such tuples can be found using different heuristics, including exhaustive search. In this example, we assume that the objective function is size; thus, a tuple t 1 is better than a tuple t 2 when the optimizations in t 1 reduce code size more than the optimizations in t 2 .\n\nOnce a compiler is trained, it can be used to optimize unknown programs. Optimizations, in this case, are based on approximations: the behavior observed in the training set is used to approximate the behavior of the unseen code. There are many ways to implement these approximations: neural networks, supporting vector machines, decision trees, etc. Example 3 uses one of such techniques: classification based on K-nearest neighbors [44], to perform predictions.\n\nExample 3. Figure 2 shows how the K-Nearest Neighbors algorithm can predict the best optimization tuple for \n\n\nB. The Need for Benchmarks\n\nIf the training collection is small, then large chunks of the feature space will remain uncovered by the known codes. Compilers can still perform predictions; however, the information available during training might not approximate the behavior of unseen programs. To circumvent this problem, researchers often use synthetic benchmark suites. In this section, we analyze some of these approaches.\n\nDeepSmith. One of the most successful benchmark generators in use today is DEEPSMITH [45], an evolution of Cummins et al.'s CLGEN [14]. DEEPSMITH has been able to produce realistic OpenCL programs. It is meant to be programming language agnostic; however, our attempts to use it towards generating C, instead of OpenCL, programs met with no success. Below, we narrate three of our experiences. In every case, we use compilable C programs drawn from a collection of half-a-million samples mined from open-source repositories as the initial training corpus:\n\n\u2022 Training set: 30,000 randomly chosen C files. 107,264 candidate strings generated in 15 hours using a seed function signature with one argument. Results: Nine programs could be compiled. The largest LLVM bytecode had five instructions (Clang -O0). \u2022 Training set: 30,000 randomly chosen C files. Generation: 131,760 candidate strings in 30 hours using a seed signature with four arguments. Results: 1,178 programs could be successfully compiled. The largest program had six lines of code, and 36 LLVM instructions. \u2022 Training set: the 10,000 largest C files in the available collection. Generation: 54,912 candidate strings generated in 10 hours using a seed function signature with four arguments. Results: Seventeen programs could be successfully compiled. The largest program had five lines of code, and 16 LLVM instructions. Compiler Fuzzers. A compiler fuzzer produces random programs to uncover bugs in compilers. The most successful tool of this sort is CSMITH [31]. Programs generated by CSMITH have revealed hundreds of bugs in the LLVM infrastructure, and dozens in gcc's. LDRGEN, another tool of similar purposes, has also been effectively employed to find bugs in different compilers. Although tremendously successful as bug-finding resources, fuzzers are not meant to be used to generate training data for predictive compilers. Programs generated by fuzzers like CSMITH and LDRGEN tend to differ from real-world codes. Thus, properties inferred from them may not generalize to programs written by people. The next example supports this statement with empirical data.\n\nExample 4. Figure 3 shows the relation between stores and loads in the 275 programs in the LLVM test suite. For each store, we find 3.35 load instructions. This analysis was performed in LLVM bytecodes compiled with -O0, but optimized with mem2reg. This optimization, mem2reg, has been used in this experiment to remove memory access operations related to stack-allocated variables. Without this optimization, binaries would contain too many loads and stores without a counterpart in the source code. Analyzing 10K programs generated by CSMITH, we find the inverse behavior: 0.47 loads per store. 10K programs produced by LDRGEN fare no better: they contain only one store instruction. The programs synthesized by DEEPSMITH (1,204 samples) approximate the ratio found in the actual benchmarks: for each store, we find 2.97 load instructions. Nevertheless, they are too small: the largest program contains only two store instructions.\n\n\nIII. THE ANGHABENCH COLLECTION\n\n\nA. The Program Reconstruction Framework\n\nWe developed a completely automated process for generating compilable programs from open source projects. This infrastructure has three major components: (i) Repository Crawler; (ii) Function Extractor; and (iii) Type Inference Engine. Each of these steps is described in the rest of this section.\n\nThe Repository Crawler. The first stage in our framework consists in gathering the source-code from which we shall build benchmarks. Programs are mined from GitHub, via a web crawler. We filter out projects tagged as using the C programming language, then sort them by popularity (we use GitHub stars as a metric of popularity). The crawler traverses a prefix of this sorted list, whose length is determined by the user, cloning each of the repositories in order. The codebase of each repository is cleaned to remove files which are not C source or header files. This corpus of C programs is then provided as input to the Function Extractor.\n\nThe Function Extractor. The function extractor separates mined files into a collection of would-be programs, consisting of one C function per file. The extractor is a clang plugin, which runs after Clang's Abstract Syntax Tree building step. It traverses the program's AST, looking for function declarations. If a declaration is found and has a matching definition, we outline its implementation to a separate file. The plugin can run in two modes: it can either create a file for each function found, or one single file that aggregates all function definitions found within that input source file. Clang builds an AST for a program even if errors occur during compilation. However, unless dependencies can be solved, it cannot move from this point towards a final object file. Example 5 illustrates some issues that prevent compilation.\n\nExample 5. Figure 4 shows a function extracted from the source code of the Tox peer-to-peer messaging application. This function (without the declarations in the grey box) is not compilable, namely because it calls another function whose declaration is unavailable in line 7, and contains references to an unknown type BS LIST in lines 6, 7 and 12.\n\nThe Type Inference Engine. Once we have a large number of candidate programs, the next challenge is to make them compilable. To solve issues that prevent compilation, such as those seen in Example 5, we run each program through the PsycheC type inference engine [28]. PsycheC will fill the missing pieces within the candidate program, generating a version of its code that compiles. Example 6. The grey box in Figure 4 shows the result of running the function bs_list_find through PsycheC. The resulting program has a function declaration for the missing function find, as well as a valid definition for the missing type BS LIST. This is all the absent information that prevented compilation of the original code. Therefore, any C compiler can successfully compile this new version without errors.\n\nOn the Preservation of Information. PsycheC does not change the control flow graph of programs. However, changes may happen in the types of variables: fields present in structs and unions in the original program might be omitted in the reconstructed code, or might be declared with different types. Omissions happen if these fields are not used. Thus, the intermediate representations of the original and reconstructed programs are identical, except for the types of the variables.\n\n\nB. The Code Distribution Framework\n\nTo distribute the programs assembled using the techniques seen in Section III-A, we have created a public website. Different benchmark suites can be downloaded from it. All these collections include only compilable codes. Compilation has been certified using gcc 7.5, LLVM v.6, v.8 and v10. Currently, we distribute the following suites: a set with 1M files containing single functions; a set with 530K files containing single functions; the 10K largest files from the above set; -15K files containing multiple functions.\n\n\u2022 The LLVM test suite: 275 programs. \u2022 The 10K largest programs among 530K programs generated with LDRGEN. \u2022 The 10K largest programs among 530K programs generated with CSMITH. \u2022 All the 1,204 programs that we have produced with DEEPSMITH (see Section II). Figure 5 reports data about the size of the programs in the different collections. Program size is measured as the number of instructions of these programs in the LLVM intermediate representation. When converting programs to LLVM, we use the mem2reg pass, to move to virtual registers all the program variables that, otherwise, would be allocated on the stack.\n\n\nCollection\n\nQuantity Granularity A Protocol to Build Benchmarks. The largest ANGHABENCH collection contains 1,033,890 programs. For faster experiments, we also provide smaller suites. To build collections of N benchmarks, we follow the procedure below:\n\n\nMean\n\n1) Let R be a list with the most popular git repositories, in number of stars, with a majority of files in C, in descending order, and let C be the collection of benchmarks. 2) While C has less than N files, we: a) Remove r, the current most popular repository from R; b) Add to C every function from r (see Section III-A). The Code Search Engine. The public distribution contains a code search engine, which lets users retrieve the K closest program to a given code. Proximity is measured as the Euclidean Distance computed on the feature vectors introduced in Section II-A. We use LLVM to mine features from the intermediate representation of programs. Today, users can assemble vectors using features taken from a collection of 239 candidate program characteristics. We also provide three predefined feature vectors:\n\n\u2022 LLVMSTS: 59 features produced by the LLVM's --stats flag applied on clang -O0. \u2022 NUMERICAL FEATURES: 43 features taken from Filho et al. [6]. They project Namolaru et al. [5] features onto the LLVM IR. \u2022 DEFAULT: A seven-features vector for fast searches, formed by (number of) instructions, stores, loads, basic blocks, Control Flow edges, variables and variable uses Our similarity search does not relate programs based on semantic equivalence,\u00e0 la Alon et al. [46]. Rather, close programs, in our context, are codes that tend to behave similarly when exposed to the same set of compiler optimizations. Therefore, it is assumed that the chosen feature vectors will relate programs by the effect that optimizations provoke on them. Notice, nevertheless, that while this is the objective, this result is not guaranteed to hold, given the statistical nature of every experiment described in this paper.\n\n\nIV. EVALUATION\n\nThis section investigates the six research questions enumerated below. Further studies are available in the extended version of this work [38]:\n\nRQA What is the mining rate of the infrastructure described in Section III-A? RQB Can ANGHABENCH better predict the impact of compiler optimizations on programs? RQC Can ANGHABENCH better approximate the properties of human-written benchmarks than code produced by other program synthesizers? RQD How does ANGHABENCH compare to other synthetic benchmarks as training data for a predictive compiler? RQE How does ANGHAZ compare to the state-of-the-art binary reducer of Rocha et al [33]? RQF Can we build a collection similar to ANGHABENCH without the support of type inference?\n\nGround Truth. RQB presupposes the existence of a ground truth, that is, a collection of \"typical\" real-world benchmarks. Different benchmarks have been used at different times and places throughout the still short history of compilers. Therefore, finding a universally acceptable ground truth is an endeavor of improbable success. In this paper, we settle for a collection of 288 programs, which includes every benchmark available in the LLVM test collection (275 programs), plus the programs in the SPEC CINT CPU2006 suite (13 programs). In all, this collection gives us 1,450,035 lines of code, spread across 31,366 functions from 2,315 files.\n\n\nA. RQA: Mining Throughput\n\nThis section investigates the rate in which the infrastructure from Section III-A produces valid benchmarks. A benchmark is considered valid when we can use both clang and gcc to convert it to an object file. Methodology: We set up our framework to collect and reconstruct code, until a threshold of 1,000,000 compilable programs had been reached. The metric used for ranking repositories by popularity was GitHub's star feature. We executed the extraction-reconstruction process in parallel on an 8-core Intel i7-3770, with 16 GBs of RAM, running Ubuntu 16.04. We set a maximum execution timeout of 5 seconds for the type inference's constraint-solving step, as its unification algorithm has a potentially exponential worst-case performance [28]. We were concerned with answering two questions about our framework's performance:\n\n\u2022 How long does it take, on average, to generate a compilable program? \u2022 What is the success rate of the program reconstructor? Discussion: To reach the threshold of 1,000,000 programs, our framework collected code from 148 repositories. It produced 1,044,023 compilable programs in 145 hours. This gives us an average rate of one benchmark per 0.5 seconds. In total, 1,882,687 candidate functions were extracted. Thus, the success rate for the reconstruction process was approximately 55.5%. Only 3,666 reconstructions failed due to the timeout. The most common reasons for failures were unpreprocessed macros that were not syntactically valid in C.\n\n\nB. RQB: Predicting Compiler Behavior\n\nThe goal of this section is to support the thesis that ANGHABENCH predicts more accurately the behavior of compiler optimizations than other synthetic benchmarks suites. Methodology: We shall investigate the code size reduction obtained by two different optimization levels of clang: -O1 and -O3, when applied on different benchmark collections. The choice for these two optimization levels is arbitrary; the ANGHABENCH distribution contains the same study for other optimization levels, and results are similar. We use the Mean Square Prediction Error (MSPE) as a measure of accuracy, defined as (predicted value \u2212 observed value) 2 . To carry out predictions, we fit a linear model M in a synthetic benchmark, relating the size of programs when compiled with clang -O0 and clang -O1 (or -O3). M is then used to predict program size in the ground-truth collection. Discussion: Figure 6 summarizes our findings. Each figure shows a main diagonal, and the regression line. Because optimizations tend to remove instructions, the regression line is always under the main diagonal. We give the slope of the regression line (Slp), and a measure of accuracy (Err). Err denotes the ratio between the MSPE of a given collection (ANGHABENCH, CSMITH, LDRGEN, DEEPSMITH) and the MSPE of the ground-truth. We compute Err as follows:\n\n1) Let be the regression line that we fit into a given synthetic collection. 2) Let g be the regression line that we fit into the groundtruth collection. 3) Let m g be the MSPE that we obtain using g on the ground-truth collection (this is the standard definition of MSPE). 4) Let m be the MSPE that we obtain when using also on the ground-truth collection. 5) We let Err = m/m g . The lower the value of Err, the better the predictor used to compute it. We report the error for the second largest collection in ANGHABENCH with 530K single functions (the collection with 1M samples makes this experiment too slow). Figure 6 shows that ANGHABENCH's error is one order of magnitude smaller than errors produced by the other collections. Programs from the CSMITH and from the LDRGEN collections are easy to optimize. They are made to execute without undefined behavior. To avoid undefinedness, they contain hardcoded inputs. The excess of constants leads to code that is easy to simplify. The programs generated by DEEPSMITH are also easy to optimize, although they do not contain hard-coded inputs (they are not meant to run). In this case, optimization opportunities come from an excess of deadcode.\n\n\nC. RQC: Code Similarity\n\nThis paper defends the thesis that ANGHABENCH approximates more closely the properties of real-world code than other synthetic program sets. This section provides evidence that such is the case. To this end, we shall rely on the measure of \"distance\" between programs, which we discuss below.   Methodology: There exists a rich assortment of functions to measure the distance between programs [47]. We have adopted two of them: the Euclidean distance on numerical feature vectors, and the MCoeff relation between two programs proposed by Filho et al. [6]. The latter is a metric that measures how similarly two programs respond to the same sequence of compiler optimizations. Our choice is purely pragmatic: the infrastructure described in Section III-B already simplifies the computation of these two metrics. Furthermore, these two functions meet the following properties, assuming that p 1 and p 2 are programs:\n(i) d(p 1 , p 2 ) \u2265 0, (ii) d(p 1 , p 2 ) = d(p 2 , p 1 ), and (iii) d(p 1 , p 2 ) \u2264 d(p 1 , p 3 ) + d(p 3 , p 2 )\n, for any p 3 / \u2208 {p 1 , p 2 }. Finally, although there exist similarity metrics that are likely to be more expressive than those that we chose, e.g., a la DEEPSIM [48], they tend to be more costly to compute. Discussion: Figure 7 shows the distance of each one of the 288 programs in the ground-truth to the different synthetic collections. The distance of a program p g in the ground-truth collection to a collection C of synthetic benchmarks is given by d(p g , p c ), where p c is the program in C that is the closest to p g , and d is either the Euclidean distance on numerical feature vectors, or MCoeff.\n\nThe average Euclidean distance from the ground-truth collection to ANGHABENCH is 6.7x shorter than to the CSMITH (available in our public distribution) collection, and 33.3x shorter than to the LDRGEN (available in our public distribution-See Sec. III-B) collection. This difference is smaller once we consider MCoeff, but it is still noticeable. ANGHABENCH is approximately 21% and 29% closer to the ground-truth than the CSMITH collection and the LDRGEN collection, respectively. Diversity. We use the notions of distance seen in this section to argue that ANGHABENCH is more diverse than the other synthetic collections that we use. The data in Figure 8 supports this statement. For each point (N b , K) (c,d) in Figure 8, we assume that c is either ANGHABENCH, CSMITH, or LDRGEN, and d is a distance function, e.g., numerical features, or MCoeff. In this case, N b is the number of benchmarks from collection c that wins as one of the K closest programs to some benchmark in the ground-truth collection. Thus, a very homogeneous collection c would have all the programs with the same features; leading to (N b , K) (c,d) = K always. A very diverse collection, in turn, would give us (N b , K) (c,d) = N g \u00d7K, where N g is the number of benchmarks in the groundtruth set. Therefore, according to these definitions, the larger (N b , K) (c,d) , the more heterogenous is collection c, and the better it covers the feature space.\n\n\nD. RQD: Predictive Compilation\n\nThis section provides evidence that ANGHABENCH yields better training sets than other benchmark generators. To this end, we have used different synthetic collections of benchmarks to train YACOS, the predictive compiler implemented by Filho et al. [6], [30]. YACOS uses a heuristic based on Kennedy et al. [49]'s particle swarm optimization (PSO) to find good optimization sequences. Methodology -Benchmarks: We have trained YACOS using the three collections mentioned in Section III-B, each with 10K files: ANGHABENCH, CSMITH and LDRGEN. For the last two collections, we produced 530K files, and took the 10K largest. We adopted this expedient for fairness, as the 10K programs from ANGHABENCH were selected from a collection of 530K benchmarks. Programs in the CSMITH collection are larger; hence, training based on them takes much longer: on average, three hours per file. The other two collections yield faster training time: on average 20 minutes per file. In total, training took 87 days, using 16 cores running at 3.40GHz.  with an initial population of 100 particles, which evolves for 10 generations. Nevertheless, the exact implementation of this heuristic is immaterial to the understanding of this paper-it suffices to know that its quality varies with the training set.\n\n\nMethodology -Prediction:\n\nOnce training is complete, YACOS uses similarity search (i.e., KNN with K=1) to find the known program P k in the training set that is the closest to a given unknown program P u . We have used the two measures of distance seen in Section IV-C: Euclidean distance applied on numerical feature vectors, and MCoeff. We let S k be the list of optimizations associated with P k . From S k , YACOS can build different list of optimizations to be applied onto P u following four strategies:\n\n\u2022 Elite: let S e \u2286 S k be a subset of S k (|S k | = 100) formed by the lists that improve on clang -Oz. We apply on P u every sequence in S e , and keep the best result. If S e is empty, this strategy has no effect on P u . \u2022 JX, X \u2208 {1, 10, 100}:] we apply on P u Just the X best sequences in S k , and keep the best result. The sequences in S k are ordered by their effect on P k . The most effective optimization comes first. Discussion: For validation, we use the ground-truth collection mentioned in Section IV-C. Figures 9 and 10 summarize the results of this experiment. A winning strategy is the pair in {Elite, J1, J10, J100} \u00d7 {ANGHABENCH, CSMITH, LDRGEN} that yields the smallest bytecodes when applied to the validation set. We omit results involving benchmarks produced by DEEPSMITH. Due to their simplicity, their feature vectors contain mostly zeros. Boldface fonts mark winners considering minimum, maximum, mean and median code reduction. ANGHABENCH wins in most cases. When using the Euclidean Distance with the Elite choice, ANGHABENCH reduces code by 10.6% on average. If we use MCoeff, gains are higher: 11.1%. These results were not obtained in small programs: the ground-truth used as validation contains the 13 integer programs from SPEC CPU2006. Elite J1 J10 J100 Elite J1 J10 J100 Fig. 9. Percentage of code reduction, measured over number of LLVM bytecodes, produced from the ground truth using YACOS parameterized with the Euclidean distance. #P reports the number of programs in which we have observed positive results over clang -Oz. Averages are geometric mean.\n\nThe gray cells in Figures 9 and 10 contain results for programs in which we could find a list of optimization better than clang -Oz. If we consider average values for these programs, then the difference between ANGHABENCH and the other collections is less apparent, as we are counting only positive results. However, ANGHABENCH is able to find non-trivial lists of optimization for more programs than the other synthetic collections. For instance, using the Elite strategy with Euclidean distance (Fig. 9), YACOS trained with ANGHABENCH was able to reduce the size of 280 programs (compared with clang -Oz), vs only 12 if we train YACOS with CSMITH, and 199, if we train YACOS with LDRGEN.  Fig. 10. Percentage of reduction (same as Fig. 9) achieved on the ground truth using the MCoeff distance.\n\nUsing the ground-truth as the training set. We have also used the ground-truth (288 programs, including SPEC CINT CPUT2006) as the training set to predict good optimization sequences to itself. In this experiment, we have used a leaveone-out methodology with the MCoeff distance. Leave-oneout is applied per benchmark. The ground-truth is formed by the combination of 36 different benchmark collections. Thus, we use 35 suites as the training set, and one suite as the test set. On the J1 strategy, ANGHABENCH finds a better list of optimization than clang -Oz for 231 out of 288 programs. The ground-truth beats clang -Oz in only 30 programs. The average size reduction across all programs is 4.8% using ANGHABENCH (Figure 10) vs -14.2% using the ground-truth. On J10, ANGHABENCH outperforms clang -Oz in 273 programs, and the ground-truth in 109. On J100, they obtain statistically similar results: 283 vs 284 improvements. We emphasize that the ground-truth is much smaller than ANGHABENCH: we are comparing a training set of 10,000 samples with a training set with strictly less than 288.\n\n\nE. RQE: Code Size Reduction\n\nThis section provides some perspective on the code size reduction achieved by a compiler trained with ANGHABENCH.\n\nTo this end, we analyze the effects of this compiler on MIBENCH [50]. MIBENCH has been used by Rocha et al. [33] as a challenging case study. Rocha Figure 11 reports the results that we have obtained after compiling MIBENCH with YACOS. The baseline is clang -Os. This is the same baseline adopted by Rocha et al. For reference, Figure 11 also reports, on top, the percentages of code size reduction observed by Rocha et al. Numbers refer to the size of the object file produced after compilation. Elite J1 J10 J100 Fig. 11. Percentage of code size reduction achieved on MIBENCH, measured over size of object files, in bytes. Numbers on top are percentage of reduction reported by Rocha et al. [33]. Numbers at the bottom are percentage of reduction achieved by YACOS, using the Elite approach.\n\nYACOS outperforms FMSA on MIBENCH; however, the bad performance of FMSA on MIBENCH had been noticed by Rocha et al. [33]. As we have mentioned, FMSA does better in larger code bases, for in this case, there are more redundancies to explore 2 . We emphasize that these numbers cannot be directly compared: they were not produced in the same empirical setup. Nevertheless, in at least eight benchmarks from MIBENCH, where Rocha et al. have reported no gains, we could observe reductions of 6.0% on average (geo-mean), compared to clang -Os. Another fact that this experiment highlights is that clang -Os and clang -Oz still leave much room for improvement. In benchmarks like bitcount and strsearch it is possible to find sequences of optimizations that are almost twice as efficient as clang -Os, and approximately 8% better than clang -Oz. Finally, it must be understood that FMSA is a compiler optimization, whereas our approach is rather a replacement to the LLVM pass manager. In other words, it would have been possible to include FMSA as one of the optimizations of YACOS's search strategy. We have not performed this new experiment simply because FMSA is not available by default in LLVM.\n\n\nF. RQF: The Role of Type Inference\n\nProvided that we can mine open-source repositories, and there are so many of them, one could expect that some of these programs naturally compile without type reconstruction. In this section, we show that such code base is worse than ANGHABENCH when used to train a predictive compiler.\n\n1) The Need for Type Inference: One of the benchmark collections distributed in our website consists of 529,498 C functions and their respective LLVM bytecodes. This collection of over half-a-million compilable benchmarks has been produced out of 54,431 files taken from 79 open source repositories. Out of these files, we extracted 698,449 functions, sizes varying from one line to 45,263 lines of code (Radare2's assembler). Thus, we produced an initial code base of 698,449 C files, each file containing a single function. We run PsycheC with a timeout of 30 seconds on this code base. PsycheC has been able to reconstruct dependencies of 529,498 functions; thus, ensuring their compilation. Compilation consists in the generation of an object file out of the function-a task performed with clang 6.0.1.\n\nOut of the 698,449 functions, 31,935 were directly compilable as-is, that is, without PsycheC's inference. To perform automatic compilation, we invoke clang on a preprocessed C file containing an individual function extracted as-is. Hence, without type inference, we could ensure compilation of 4.6% of the programs. With type inference, we could ensure compilation of 75,8% of all the programs. Failures to reconstruct types were mostly due to macros that were not syntactically valid in C without preprocessing.\n\n2) On the Consequence of using Small Functions: As we have mentioned, we can compile automatically less than 5% of the functions that we download, even considering all the dependencies in the C files where these functions exist. Nevertheless, given that we can download millions of functions, 5% is already enough to give us a non-negligible number of benchmarks. However, these compilable functions tend to be very small. The median number of LLVM bytecodes is seven (in contrast to 36, using type inference). Said functions are unlikely to contain features such as arrays of structs, type casts, recursive types, double pointer dereferences, etc. It is typical that developers separate definitions from implementations into different files in the C ecosystem. It suffices to have one missing file or the wrong version of one library, and the entire program will fail to compile. Due to their small size, the naturally compilable functions are not effective to tune a compiler. Figure 12 demonstrates this fact with data. The figure compares YACOS, when trained with our collection of half-a-million functions (from which we selected the 10K largest samples), or with the collection of 31.9K directly compilable functions (from which, again, we selected the 10K largest functions). The small size of the latter group prevents it from being an effective training set. For instance, using these functions, YACOS reduces the size of MiBench's bitcount by 10%, whereas using ANGHABENCH, it achieves 16.9%. In susan, the naturally compilable functions lead to an increase of code size (5.4%), whereas ANGHABENCH reduces it by 1.7%. Although there are benchmarks in MIBENCH where the naturally compilable functions lead to more compression, these gains are close to those obtained by ANGHABENCH, and seldom occur.\n\nV. RELATED WORK This paper deals with synthesis of benchmarks and code size reduction. Because the former has been discussed in Section II, we now focus on the latter. Yet, we start our discussion mentioning some work on the synthesis of benchmarks. Synthesis of Benchmarks. The creation of synthetic benchmarks has become a frequent focus of research. Random program generators, such as CSMITH [31], LDRGEN [32] and Orange3 [52], [53] have been successfully used to produce C programs for stress-testing compilers, often finding correctness bugs in industrial implementations [54]. Although conceived to find bugs, these tools have also been used to improve the quality of the optimized code emitted by mainstream C compilers [55], [56]. Nevertheless, such tools, given their goals, are not designed to produce realistic code.\n\nRecent effort to create human-like C programs has leveraged Deep Learning techniques to generate code similar to realworld examples. CLGEN [14] uses this approach to generate OpenCL kernels, while DEEPSMITH [45] generalizes this technique to other languages. Nonetheless, we have found that DEEPSMITH has trouble synthesizing non-trivial C programs when trained with corpora of open source projects, as we have explained in Section II-B. We could not use it to train YACOS, in Section IV-D, because the feature vectors of its programs contained mostly zeros. Following a different approach, Richards et al. have produced realistic JavaScript benchmarks, out of monitored browser sections [57]. Type reconstruction is not an issue in this scenario, because JavaScript is dynamically typed. One shortcoming of this modus operandi is scalability, because it is not fully automatic. Richards' technique still requires users to create a browsing section, which will then be instrumented. Code Size Reduction. Several compiler transformations have code reduction as either the main goal or a desirable consequence [33], [51], [58], [59], [60], [61], [62]. Often, such techniques involve Code Factoring, the identification of redundant code within the program. Code motion techniques search for identical instructions and merge them to avoid redundancy [62], [63], [64], [63]. Function Merging is the other main category in the field. This optimization finds functions that are semantically similar or equivalent, and generates new functions to replace them [65], [66], [67]. It is possible to merge even functions that are slightly different. When functions that meet a similarity threshold are found, a new procedure is created. The new function contains additional control-flow to choose between which original implementation should be executed [33], [51], [68].\n\nIn spite of program compression being an old problem, effective and elegant code size reduction techniques have been discovered as recently as the current year [51]. Nevertheless, the contributions of this paper are orthogonal to these techniques, because we do not propose new optimizations. Rather, our synthetic benchmarks can help a compiler identify when each of these optimizations might be profitable. To support this observation, in Section IV-E we showed how to augment a C compiler with knowledge extracted from our benchmarks. Autotuning for Binary Size Reduction. Code size has been a common objective function of predictive compilers. The earliest works in this direction used genetic algorithms to continually improve the size of the code generated for target applications [42], [69], [70]. These early approaches evolve a sequence of optimizations for each individual program; thus, search runs until convergence for each program being optimized. The technique described in section IV-E, on the other hand, can simply find the program in the training set that better approximates the target application. Therefore, once the predictive model has been trained, the impact on compilation time is minimal.\n\n\nVI. CONCLUSION\n\nThis paper has presented a framework to produce compilable C programs out of open-source repositories, which we have used to generate more than one million benchmarks. Compilation is ensured via type inference. Different applications of these benchmarks have been shown, with emphasis on predictive size reduction. In this regard, we showed that in benchmarks like bitcount and blowfish, from MIBENCH, it is possible to find sequences of optimizations that are about 15% better than clang -Os, and approximately 8% better than clang -Oz.\n\nLicense. Although the process of building the compilable benchmarks is automatic, adding the licenses to the files is not. To fulfill this task, we need to find the license(s) used in the repository, which is not necessarily present in the program's source code. We have preserved the original licenses of a subset of 128,411 files from the following repositories: FFmpeg, DeepMind, openssl, SoftEtherVPN, libgit2, php-src, radare2, darwin-xnu, mongoose, reactos, git, nodemcu-firmware, redis, h2o, and obs-studio. These repositories give us a total of 38.9K C files. These files have been organized as an external LLVM test suite.\n\nFurther Uses of ANGHABENCH. In addition to the applications seen in this paper, we are aware of a few other uses of ANGHABENCH. For instance, ANGHABENCH has been used to: (i) stress-test two C-to-Verilog compilers: LEGUP and VIVADO; (ii) test routing algorithms that convert C programs to FPGA circuits; (iii) fine-tune register assignment heuristics; (iv) compare the speed of C parsers; (v) check the effectiveness of a termination checker, the ULTIMATE Automizer; and (vi) scale up program synthesis, following an idea proposed by Bornholt and Torlak [71].\n\nSoftware. ANGHABENCH is publicly available at http: //cuda.dcc.ufmg.br/angha. In addition to the benchmarks, this webpage contains links to the infrastructure used to build them, including crawler, function extractor and type inference engine [28].\n\nFig. 1 .\n1Training a predictive compiler.\n\nFig. 2 .\n2Performing predictions. a program. Given an unknown program with feature vector (stores = 25, innermost = 1, instructions = 75), we find the four closest programs to this vector. The predictor activates the i th optimization if said optimization is active among the closest neighbors, and turns it off otherwise.\n\nFig. 3 .Fig. 4 .\n34A comparison between the number of stores and loads found in different benchmark collections. To ease visual comparison, each plot shows the line (in pink) produced for the programs in the LLVM test suite and the main diagonal (in grey), i.e., X = Y . The code outside the grey area is an example of non-compilable candidate program extracted from the toxcore repository. The code in the grey area was introduced by PsycheC, to ensure compilation.\n\nFig. 6 .\n6The effect of compiler optimizations on the size of programs. Instructions are measured in hundreds.\n\nFig. 7 .\n7Distance between the ground-truth and different synthetic benchmarks. Each collection is formed by the 10K largest programs out of a pool of 530K candidates. Red dots are programs from the SPEC CPU2006 suite.\n\n\nMethodology -Training: Training consists in associating each benchmark in the training set with 100 sequences of optimizations-each sequence with 60 optimizations. These optimizations come from a set of 83 passes available in LLVM. Searching the feature space, in this setting, is the problem of associating with the feature vector of a program P the best list of optimizations for P . YACOS's PSO is parameterized\n\nFig. 8 .\n8Number of programs that win for K-nearest of some program in the ground-truth. The X-axis is K.\n\n\nof code reduction reported by Rocha et al., relative to clang -Os Percentage of code reduction relative to clang\n\n\nPercentage of variation on number of LLVM bytecodes (instructions) in the final linked file Angha Fig. 12. Performance of YACOS (with the Elite choice) on the MIBENCH programs. We use two training sets: ANGHABENCH (10K largest functions) and the functions that we can compile without type inference. Percentage of reduction is measured with regards to clang -Oz on the number of LLVM bytecodes in optimized programs.\n\n\nFig. 5. Instructions per benchmarks in the collections that we distribute. SD is Standard Deviation.SD \nMedian \n\n1M \nFunctions \n61.60 \n81.41 \n36 \n\n530K \nFunctions \n63.24 \n97.32 \n36 \n\n10K \nFunctions \n534.07 \n336.38 \n433 \n\n15K \nWhole files \n266.64 \n419.79 \n119 \n\n530K \nFunctions \n5,844.67 5,876.67 \n3,933 \n\n10K \nFunctions \n20,190.90 3,649.04 \n19,161 \n\n530K \nFunctions \n1,950.54 1,216.82 \n2,007 \n\n10K \nFunctions \n4,753.50 \n322.65 \n4,668 \n\nDeepSmith \n1K \nFunctions \n13.00 \n2.98 \n12 \n\nLLVM+SPEC06 \n288 \nWhole files \n6,737.35 41,262.08 \n584 \n\nAnghaBench \n\nCSmith \n\nLDRGen \n\n\n\n\net al. have designed and implemented a technique to reduce code size by merging common sequences of instructions. Their Function Merging by Sequence Alignment (FMSA) approach excels when applied onto large code bases, as there are more opportunities for merging redundant code. However, their technique yields poor results when applied onto small programs-a natural consequence of a statistical lack of redundancies. Rocha et al. have used MIBENCH to demonstrate this last point. Methodology: We compile MIBENCH with YACOS trained with the 10K largest programs from ANGHABENCH. Program similarity is measured with the Euclidean distance. Euclidean distance is used in this experiment because it is the default program metric used in YACOS. We use the subset of MIBENCH available in the LLVM test suite. Discussion:\nPrevious work on predictive compilation, such as Zanella et al's[30], also talk about dynamic program features. These are properties observed during the execution of programs. In this paper, we focus entirely on static program properties, as the benchmarks that we produce are not meant to run.\n Rocha et al.  have published a new code size reduction technique that extends sequence alignment to SSA-form programs[51]. We believe that their new algorithm, SalSSA, is the most effective size reduction technique in use today. When applied onto MIBENCH, SalSSA achieves a geo-mean reduction of 1.4% to 1.6%; twice as much as FMSA. However, a direct comparison with our work is not possible, for they reported results only for ARM.\nACKNOWLEDGEMENT This work has been made possible by grants from different research agencies, namely CNPq, CAPES and FAPEMIG. We thank Luigi Soares and Augusto Noronha for reading a draft of this paper. We also thank the CGO reviewers, for all the time and expertise that they have put into our manuscript.\nA survey on compiler autotuning using machine learning. A H Ashouri, W Killian, J Cavazos, G Palermo, C Silvano, Comput. Surv. 51542A. H. Ashouri, W. Killian, J. Cavazos, G. Palermo, and C. Silvano, \"A survey on compiler autotuning using machine learning,\" Comput. Surv., vol. 51, no. 5, pp. 96:1-96:42, 2018.\n\nMachine learning in compilers: Past, present and future. H Leather, C Cummins, FDL. Washington, DC, USAIEEEH. Leather and C. Cummins, \"Machine learning in compilers: Past, present and future,\" in FDL. Washington, DC, USA: IEEE, 2020.\n\nMachine learning in compiler optimization. Z Wang, M F P O&apos;boyle, Proceedings of the IEEE. 10611Z. Wang and M. F. P. O'Boyle, \"Machine learning in compiler opti- mization,\" Proceedings of the IEEE, vol. 106, no. 11, pp. 1879-1901, 2018.\n\nCOBAYN: Compiler autotuning framework using bayesian networks. A H Ashouri, G Mariani, G Palermo, E Park, J Cavazos, C Silvano, TACO. 132A. H. Ashouri, G. Mariani, G. Palermo, E. Park, J. Cavazos, and C. Silvano, \"COBAYN: Compiler autotuning framework using bayesian networks,\" TACO, vol. 13, no. 2, pp. 21:1-21:25, 2016. [Online].\n\n. 10.1145/2928270Available: http://doi.acm.org/10.1145/2928270\n\nPractical aggregation of semantical program properties for machine learning based optimization. M Namolaru, A Cohen, G Fursin, A Zaks, A Freund, CASES. New York, NY, USAACMM. Namolaru, A. Cohen, G. Fursin, A. Zaks, and A. Freund, \"Practical aggregation of semantical program properties for machine learning based optimization,\" in CASES. New York, NY, USA: ACM, 2010, pp. 197- 206.\n\nYet another intelligent code-generating system: A flexible and low-cost solution. J F Filho, L G A Rodriguez, A F Da Silva, J. Comput. Sci. Technol. 335J. F. Filho, L. G. A. Rodriguez, and A. F. da Silva, \"Yet another intelligent code-generating system: A flexible and low-cost solution,\" J. Comput. Sci. Technol., vol. 33, no. 5, pp. 940-965, 2018.\n\nScaling up superoptimization. P M Phothilimthana, A Thakur, R Bodik, D Dhurjati, ASPLOS. New York, NY, USAACMP. M. Phothilimthana, A. Thakur, R. Bodik, and D. Dhurjati, \"Scaling up superoptimization,\" in ASPLOS. New York, NY, USA: ACM, 2016, pp. 297-310.\n\nExploration of compiler optimization sequences using a hybrid approach. T C De Souza Xavier, A F Da Silva, Computing and Informatics. 371T. C. de Souza Xavier and A. F. da Silva, \"Exploration of compiler optimization sequences using a hybrid approach,\" Computing and Infor- matics, vol. 37, no. 1, pp. 165-185, 2018.\n\nCompilerassisted adaptive program scheduling in big.little systems: Poster. M Novaes, V Petrucci, A Gamati\u00e9, F M Q Pereira, PPoPP. ACMM. Novaes, V. Petrucci, A. Gamati\u00e9, and F. M. Q. a. Pereira, \"Compiler- assisted adaptive program scheduling in big.little systems: Poster,\" in PPoPP. New York, NY, USA: ACM, 2019, pp. 429-430.\n\nCHOAMP: cost based hardware optimization for asymmetric multicore processors. J K V Sreelatha, S Balachandran, R Nasre, Trans. Multi-Scale Computing Systems. 42J. K. V. Sreelatha, S. Balachandran, and R. Nasre, \"CHOAMP: cost based hardware optimization for asymmetric multicore processors,\" Trans. Multi-Scale Computing Systems, vol. 4, no. 2, pp. 163-176, 2018.\n\nBinary translation using peephole superoptimizers. S Bansal, A Aiken, OSDI. Berkeley, CA, USAUSENIX AssociationS. Bansal and A. Aiken, \"Binary translation using peephole superopti- mizers,\" in OSDI. Berkeley, CA, USA: USENIX Association, 2008, pp. 177-192.\n\nLearning to superoptimize programs. R Bunel, A Desmaison, M P Kumar, P H S Torr, P Kohli, ICLR. Toulon, FranceOpenReviewR. Bunel, A. Desmaison, M. P. Kumar, P. H. S. Torr, and P. Kohli, \"Learning to superoptimize programs,\" in ICLR. Toulon, France: OpenReview, 2017.\n\nStochastic program optimization. E Schkufza, R Sharma, A Aiken, Commun. ACM. 592E. Schkufza, R. Sharma, and A. Aiken, \"Stochastic program optimiza- tion,\" Commun. ACM, vol. 59, no. 2, pp. 114-122, 2016.\n\nSynthesizing benchmarks for predictive modeling. C Cummins, P Petoumenos, Z Wang, H Leather, CGO. Piscataway, NJ, USAIEEEC. Cummins, P. Petoumenos, Z. Wang, and H. Leather, \"Synthesizing benchmarks for predictive modeling,\" in CGO. Piscataway, NJ, USA: IEEE, 2017, pp. 86-99.\n\nStatic placement of computation on heterogeneous devices. G Poesia, B C F Guimar\u00e3es, F Ferracioli, F M Q Pereira, PACMPL. 1OOPSLA28G. Poesia, B. C. F. Guimar\u00e3es, F. Ferracioli, and F. M. Q. Pereira, \"Static placement of computation on heterogeneous devices,\" PACMPL, vol. 1, no. OOPSLA, pp. 50:1-50:28, 2017.\n\nAutomatic construction of inlining heuristics using machine learning. D Simon, J Cavazos, C Wimmer, S Kulkarni, CGO. Washington, DC, USAIEEE Computer SocietyD. Simon, J. Cavazos, C. Wimmer, and S. Kulkarni, \"Automatic construction of inlining heuristics using machine learning,\" in CGO. Washington, DC, USA: IEEE Computer Society, 2013, pp. 1-12.\n\nTo inline or not to inline? enhanced inlining decisions. P Zhao, J N Amaral, SpringerHeidelberg, GermanyP. Zhao and J. N. Amaral, \"To inline or not to inline? enhanced inlining decisions,\" in LCPC. Heidelberg, Germany: Springer, 2003, pp. 405- 419.\n\nSPEC CPU2006 benchmark descriptions. J L Henning, SIGARCH Comput. Archit. News. 344J. L. Henning, \"SPEC CPU2006 benchmark descriptions,\" SIGARCH Comput. Archit. News, vol. 34, no. 4, pp. 1-17, Sep. 2006. [Online].\n\n. 10.1145/1186736.1186737Available: http://doi.acm.org/10.1145/1186736.1186737\n\nParsec: A parallel simulation environment for complex systems. R Bagrodia, R Meyer, M Takai, Y Chen, X Zeng, J Martin, H Y Song, Computer. 3110R. Bagrodia, R. Meyer, M. Takai, Y.-a. Chen, X. Zeng, J. Martin, and H. Y. Song, \"Parsec: A parallel simulation environment for complex systems,\" Computer, vol. 31, no. 10, pp. 77-85, 1998. [Online].\n\n. 10.1109/2.722293Available: https://doi.org/10.1109/2.722293\n\nRodinia: A benchmark suite for heterogeneous computing. S Che, M Boyer, J Meng, D Tarjan, J W Sheaffer, S.-H Lee, K Skadron, IISWC. Washington, DC, USAIEEES. Che, M. Boyer, J. Meng, D. Tarjan, J. W. Sheaffer, S.-H. Lee, and K. Skadron, \"Rodinia: A benchmark suite for heterogeneous computing,\" in IISWC. Washington, DC, USA: IEEE, 2009, pp. 44-54.\n\nPolyBench/C 4.2.1: The polyhedral C benchmark suite. L.-N Pouchet, T Yuki, L.-N. Pouchet and T. Yuki, \"PolyBench/C 4.2.1: The polyhedral C benchmark suite,\" 2018. [Online]. Available: http://polybench.sf.net\n\nCollective optimization: A practical collaborative approach. G Fursin, O Temam, 1- 20:29Trans. Archit. Code Optim. 74G. Fursin and O. Temam, \"Collective optimization: A practical collab- orative approach,\" Trans. Archit. Code Optim., vol. 7, no. 4, pp. 20:1- 20:29, 2010.\n\nD Bailey, E Barszcz, J Barton, D Browning, R Carter, L Dagum, R Fatoohi, P Frederickson, T Lasinski, R Schreiber, H Simon, V Venkatakrishnan, S Weeratunga, 10.1177/109434209100500306The NAS parallel benchmarks. 5D. Bailey, E. Barszcz, J. Barton, D. Browning, R. Carter, L. Dagum, R. Fatoohi, P. Frederickson, T. Lasinski, R. Schreiber, H. Simon, V. Venkatakrishnan, and S. Weeratunga, \"The NAS parallel benchmarks,\" Int. J. High Perform. Comput. Appl., vol. 5, no. 3, pp. 63-73, 1991. [Online]. Available: http://dx.doi.org/10.1177/109434209100500306\n\nA black-box approach to energy-aware scheduling on integrated cpu-gpu systems. R Barik, N Farooqui, B T Lewis, C Hu, T Shpeisman, CGO. New York, NY, USAACMR. Barik, N. Farooqui, B. T. Lewis, C. Hu, and T. Shpeisman, \"A black-box approach to energy-aware scheduling on integrated cpu-gpu systems,\" in CGO. New York, NY, USA: ACM, 2016, pp. 70-81.\n\nMapping parallelism to multi-cores: A machine learning based approach. Z Wang, M F O&apos;boyle, PPoPP. New York, NY, USAACMZ. Wang and M. F. O'Boyle, \"Mapping parallelism to multi-cores: A machine learning based approach,\" in PPoPP. New York, NY, USA: ACM, 2009, pp. 75-84.\n\nPartitioning streaming parallelism for multi-cores: A machine learning based approach. Z Wang, M F Boyle, PACT. New York, NY, USAACMZ. Wang and M. F. O Boyle, \"Partitioning streaming parallelism for multi-cores: A machine learning based approach,\" in PACT. New York, NY, USA: ACM, 2010, pp. 307-318.\n\nSmart multi-task scheduling for opencl programs on CPU/GPU heterogeneous platforms. Y Wen, Z Wang, M F P O&apos;boyle, HiPC. Los Alamitos, CA, USAIEEEY. Wen, Z. Wang, and M. F. P. O'Boyle, \"Smart multi-task scheduling for opencl programs on CPU/GPU heterogeneous platforms,\" in HiPC. Los Alamitos, CA, USA: IEEE, 2014, pp. 1-10.\n\nInference of static semantics for incomplete c programs. L T C Melo, R G Ribeiro, M R De Ara\u00fajo, F M Q Pereira, 10.1145/3158117Proc. ACM Program. Lang. 2POPLL. T. C. Melo, R. G. Ribeiro, M. R. de Ara\u00fajo, and F. M. Q. a. Pereira, \"Inference of static semantics for incomplete c programs,\" Proc. ACM Program. Lang., vol. 2, no. POPL, pp. 29:1-29:28, Dec. 2018. [Online]. Available: http://doi.acm.org/10.1145/3158117\n\nLLVM: A compilation framework for lifelong program analysis & transformation. C Lattner, V Adve, CGO. Washington, DC, USAIEEE75C. Lattner and V. Adve, \"LLVM: A compilation framework for lifelong program analysis & transformation,\" in CGO. Washington, DC, USA: IEEE, 2004, pp. 75-. [Online]. Available: http://dl.acm.org/citation. cfm?id=977395.977673\n\nYACOS: a complete infrastructure to the design and exploration of code optimization sequences. A F Zanella, A F Da Silva, F M Q Pereira, SBLP. New York, NY, USAACMA. F. Zanella, A. F. da Silva, and F. M. Q. ao Pereira, \"YACOS: a com- plete infrastructure to the design and exploration of code optimization sequences,\" in SBLP. New York, NY, USA: ACM, 2020, pp. 56-63.\n\nFinding and understanding bugs in c compilers. X Yang, Y Chen, E Eide, J Regehr, PLDI. New York, NY, USAACMX. Yang, Y. Chen, E. Eide, and J. Regehr, \"Finding and understanding bugs in c compilers,\" in PLDI. New York, NY, USA: ACM, 2011, pp. 283-294.\n\nLiveness-driven random program generation. G Barany, LOPSTR. Heidelberg, GermanySpringerG. Barany, \"Liveness-driven random program generation,\" in LOPSTR. Heidelberg, Germany: Springer, 2017, pp. 112-127.\n\nFunction merging by sequence alignment. R C O Rocha, P Petoumenos, Z Wang, M Cole, H Leather, CGO. Piscataway, NJ, USAIEEE PressR. C. O. Rocha, P. Petoumenos, Z. Wang, M. Cole, and H. Leather, \"Function merging by sequence alignment,\" in CGO. Piscataway, NJ, USA: IEEE Press, 2019, pp. 149-163.\n\nIso-Standard, ISO/IEC 9899:tc3 -committee draft of the C99 standard. ISO-Standard, \"ISO/IEC 9899:tc3 -committee draft of the C99 stan- dard,\" 2011.\n\nLanguage Features for Software Evolution and Aspect-Oriented Interfaces: An Exploratory Study. R Dyer, H Rajan, Y Cai, Springer-VerlagBerlin, HeidelbergR. Dyer, H. Rajan, and Y. Cai, Language Features for Software Evo- lution and Aspect-Oriented Interfaces: An Exploratory Study. Berlin, Heidelberg: Springer-Verlag, 2013, p. 148-183.\n\nMining billions of ast nodes to study actual and potential usage of java language features. R Dyer, H Rajan, H A Nguyen, T N Nguyen, ICSE. New York, NY, USAACMR. Dyer, H. Rajan, H. A. Nguyen, and T. N. Nguyen, \"Mining billions of ast nodes to study actual and potential usage of java language features,\" in ICSE. New York, NY, USA: ACM, 2014, p. 779-790.\n\nHow C++ developers use immutability declarations: An empirical study. J Eyolfson, P Lam, ICSE. Washington, DC, USAIEEEJ. Eyolfson and P. Lam, \"How C++ developers use immutability decla- rations: An empirical study,\" in ICSE. Washington, DC, USA: IEEE, 2019, p. 362-372.\n\nAnghabench: a synthetic collection of benchmarks mined from open-source repositories. A F Silva, B Kind, J W M Aes, J Rocha, B G , F M Q Pereira, Universidade Federal de Minas GeraisTechA. F. da Silva, B. Kind, J. W. M. aes, J. Rocha, B. G. aes, and F. M. Q. ao Pereira, \"Anghabench: a synthetic collection of benchmarks mined from open-source repositories,\" Universidade Federal de Minas Gerais, Tech. Rep. 01-2020, 2020.\n\nStatic prediction of silent stores. F M Q Pereira, G V Leobas, A Gamati\u00e9, ACM Trans. Archit. Code Optim. 154F. M. Q. a. Pereira, G. V. Leobas, and A. Gamati\u00e9, \"Static prediction of silent stores,\" ACM Trans. Archit. Code Optim., vol. 15, no. 4, pp. 44:1-44:26, 2018.\n\nMilepost GCC: Machine learning enabled self-tuning compiler. G Fursin, Y Kashnikov, A W Memon, Z Chamski, O Temam, M Namolaru, E Yom-Tov, B Mendelson, A Zaks, E Courtois, International journal of parallel programming. 393G. Fursin, Y. Kashnikov, A. W. Memon, Z. Chamski, O. Temam, M. Namolaru, E. Yom-Tov, B. Mendelson, A. Zaks, E. Courtois et al., \"Milepost GCC: Machine learning enabled self-tuning compiler,\" Inter- national journal of parallel programming, vol. 39, no. 3, pp. 296-327, 2011.\n\nMeta optimization: Improving compiler heuristics with machine learning. M Stephenson, S Amarasinghe, M Martin, U.-M O&apos;reilly, 10.1145/781131.781141Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, ser. PLDI '03. the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, ser. PLDI '03New York, NY, USAACMM. Stephenson, S. Amarasinghe, M. Martin, and U.-M. O'Reilly, \"Meta optimization: Improving compiler heuristics with machine learning,\" in Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, ser. PLDI '03. New York, NY, USA: ACM, 2003, pp. 77-90. [Online]. Available: http://doi.acm.org/10.1145/781131.781141\n\nOptimizing for reduced code space using genetic algorithms. K D Cooper, P J Schielke, D Subramanian, 10.1145/314403.314414Proceedings of the ACM SIGPLAN 1999 Workshop on Languages, Compilers, and Tools for Embedded Systems, ser. LCTES '99. the ACM SIGPLAN 1999 Workshop on Languages, Compilers, and Tools for Embedded Systems, ser. LCTES '99New York, NY, USAACMK. D. Cooper, P. J. Schielke, and D. Subramanian, \"Optimizing for reduced code space using genetic algorithms,\" in Proceedings of the ACM SIGPLAN 1999 Workshop on Languages, Compilers, and Tools for Embedded Systems, ser. LCTES '99. New York, NY, USA: ACM, 1999, pp. 1-9. [Online]. Available: http://doi.acm.org/10.1145/314403.314414\n\nUsing machine learning to focus iterative optimization. F Agakov, E Bonilla, J Cavazos, B Franke, G Fursin, M F P O&apos;boyle, J Thomson, M Toussaint, C K I Williams, 10.1109/CGO.2006.37Proceedings of the International Symposium on Code Generation and Optimization, ser. CGO '06. the International Symposium on Code Generation and Optimization, ser. CGO '06Washington, DC, USAIEEE Computer SocietyF. Agakov, E. Bonilla, J. Cavazos, B. Franke, G. Fursin, M. F. P. O'Boyle, J. Thomson, M. Toussaint, and C. K. I. Williams, \"Using machine learning to focus iterative optimization,\" in Proceedings of the International Symposium on Code Generation and Optimization, ser. CGO '06. Washington, DC, USA: IEEE Computer Society, 2006, pp. 295-305. [Online]. Available: http://dx.doi.org/10.1109/CGO.2006.37\n\nNearest neighbor pattern classification. T Cover, P Hart, Trans. Inf. Theor. 131T. Cover and P. Hart, \"Nearest neighbor pattern classification,\" Trans. Inf. Theor., vol. 13, no. 1, pp. 21-27, 2006.\n\nCompiler fuzzing through deep learning. C Cummins, P Petoumenos, A Murray, H Leather, ISSTA. New York, NY, USAACMC. Cummins, P. Petoumenos, A. Murray, and H. Leather, \"Compiler fuzzing through deep learning,\" in ISSTA. New York, NY, USA: ACM, 2018, pp. 95-105.\n\nCode2vec: Learning distributed representations of code. U Alon, M Zilberstein, O Levy, E Yahav, 1-40:29Proc. ACM Program. Lang. 3POPLU. Alon, M. Zilberstein, O. Levy, and E. Yahav, \"Code2vec: Learning distributed representations of code,\" Proc. ACM Program. Lang., vol. 3, no. POPL, pp. 40:1-40:29, 2019.\n\nImproved similarity measures for software clustering. R Naseem, O Maqbool, S Muhammad, CSMR. Washington, DC, USAIEEE Computer SocietyR. Naseem, O. Maqbool, and S. Muhammad, \"Improved similarity measures for software clustering,\" in CSMR. Washington, DC, USA: IEEE Computer Society, 2011, pp. 45-54.\n\nDeepSim: Deep learning code functional similarity. G Zhao, J Huang, ESEC/FSE. New York, NY, USAACMG. Zhao and J. Huang, \"DeepSim: Deep learning code functional similarity,\" in ESEC/FSE. New York, NY, USA: ACM, 2018, p. 141-151.\n\nParticle swarm optimization. J Kennedy, R Eberhart, Proceedings of the International Conference on Neural Networks. the International Conference on Neural Networks4J. Kennedy and R. Eberhart, \"Particle swarm optimization,\" in Proceed- ings of the International Conference on Neural Networks, vol. 4, Nov 1995, pp. 1942-1948 vol.4.\n\nMiBench: A free, commercially representative embedded benchmark suite. M R Guthaus, J S Ringenberg, D Ernst, T M Austin, T Mudge, R B Brown, WWC. Washington, DC, USAIEEEM. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and R. B. Brown, \"MiBench: A free, commercially representative embedded benchmark suite,\" in WWC. Washington, DC, USA: IEEE, 2001, pp. 3-14.\n\nEffective function merging in the ssa form. R C O Rocha, P Petoumenos, Z Wang, M Cole, H Leather, PLDI. New York, NY, USAACMR. C. O. Rocha, P. Petoumenos, Z. Wang, M. Cole, and H. Leather, \"Effective function merging in the ssa form,\" in PLDI. New York, NY, USA: ACM, 2020, p. 854-868.\n\nReinforcing random testing of arithmetic optimization of c compilers by scaling up size and number of expressions. E Nagai, A Hashimoto, N Ishiura, IPSJ Trans. System LSI Design Methodology. 7E. Nagai, A. Hashimoto, and N. Ishiura, \"Reinforcing random testing of arithmetic optimization of c compilers by scaling up size and number of expressions,\" IPSJ Trans. System LSI Design Methodology, vol. 7, pp. 91-100, 2014.\n\nIntroducing loop statements in random testing of c compilers based on expected value calculation. K Nakamura, N Ishiura, Proc. the Workshop on Synthesis And System Integration of Mixed Information Technologies. the Workshop on Synthesis And System Integration of Mixed Information TechnologiesSASIMI 2015K. Nakamura and N. Ishiura, \"Introducing loop statements in random testing of c compilers based on expected value calculation,\" in Proc. the Workshop on Synthesis And System Integration of Mixed Information Technologies (SASIMI 2015), 2015, pp. 226-227.\n\nA survey of compiler testing. J Chen, J Patra, M Pradel, Y Xiong, H Zhang, D Hao, L Zhang, ACM Comput. Surv. 531J. Chen, J. Patra, M. Pradel, Y. Xiong, H. Zhang, D. Hao, and L. Zhang, \"A survey of compiler testing,\" ACM Comput. Surv., vol. 53, no. 1, 2020.\n\nDetecting arithmetic optimization opportunities for c compilers by randomly generated equivalent programs. A Hashimoto, N Ishiura, IPSJ Transactions on System LSI Design Methodology. 9A. Hashimoto and N. Ishiura, \"Detecting arithmetic optimization oppor- tunities for c compilers by randomly generated equivalent programs,\" IPSJ Transactions on System LSI Design Methodology, vol. 9, pp. 21- 29, 2016.\n\nFinding missed compiler optimizations by differential testing. G Barany, 10.1145/3178372.3179521Proceedings of the 27th International Conference on Compiler Construction. the 27th International Conference on Compiler ConstructionNew York, NY, USAACMG. Barany, \"Finding missed compiler optimizations by differential testing,\" in Proceedings of the 27th International Conference on Compiler Construction, ser. CC 2018. New York, NY, USA: ACM, 2018, pp. 82-92. [Online]. Available: http://doi.acm.org/10.1145/ 3178372.3179521\n\nAutomated construction of javascript benchmarks. G Richards, A Gal, B Eich, J Vitek, SIGPLAN Not. 4610G. Richards, A. Gal, B. Eich, and J. Vitek, \"Automated construction of javascript benchmarks,\" SIGPLAN Not., vol. 46, no. 10, p. 677-694, 2011.\n\nPartial dead code elimination. J Knoop, O R\u00fcthing, B Steffen, SIGPLAN Not. 296J. Knoop, O. R\u00fcthing, and B. Steffen, \"Partial dead code elimination,\" SIGPLAN Not., vol. 29, no. 6, pp. 147-158, Jun. 1994. [Online].\n\n. 10.1145/773473.178256Available: http://doi.acm.org/10.1145/773473.178256\n\nSafe icf: Pointer safe and unwinding aware identical code folding in gold. S Tallam, C Coutant, I L Taylor, X D Li, C Demetriou, S. Tallam, C. Coutant, I. L. Taylor, X. D. Li, and C. Demetriou, \"Safe icf: Pointer safe and unwinding aware identical code folding in gold,\"\n\nGlobal common subexpression elimination. J Cocke, 10.1145/390013.808480SIGPLAN Not. 57J. Cocke, \"Global common subexpression elimination,\" SIGPLAN Not., vol. 5, no. 7, pp. 20-24, Jul. 1970. [Online]. Available: http://doi.acm.org/10.1145/390013.808480\n\nCode compression. J Ernst, W Evans, C W Fraser, T A Proebsting, S Lucco, 10.1145/258915.258947Proceedings of the ACM SIGPLAN 1997 Conference on Programming Language Design and Implementation, ser. PLDI '97. the ACM SIGPLAN 1997 Conference on Programming Language Design and Implementation, ser. PLDI '97New York, NY, USAACMJ. Ernst, W. Evans, C. W. Fraser, T. A. Proebsting, and S. Lucco, \"Code compression,\" in Proceedings of the ACM SIGPLAN 1997 Conference on Programming Language Design and Implementation, ser. PLDI '97. New York, NY, USA: ACM, 1997, pp. 358-365. [Online]. Available: http://doi.acm.org/10.1145/258915.258947\n\nUsing peephole optimization on intermediate code. A S Tanenbaum, H Van Staveren, J W Stevenson, 10.1145/357153.357155ACM Trans. Program. Lang. Syst. 41A. S. Tanenbaum, H. van Staveren, and J. W. Stevenson, \"Using peephole optimization on intermediate code,\" ACM Trans. Program. Lang. Syst., vol. 4, no. 1, pp. 21-36, Jan. 1982. [Online]. Available: http://doi.acm.org/10.1145/357153.357155\n\nEffective partial redundancy elimination. P Briggs, K D Cooper, 10.1145/178243.178257Proceedings of the ACM SIGPLAN 1994 Conference on Programming Language Design and Implementation, ser. PLDI '94. the ACM SIGPLAN 1994 Conference on Programming Language Design and Implementation, ser. PLDI '94New York, NY, USAACMP. Briggs and K. D. Cooper, \"Effective partial redundancy elimination,\" in Proceedings of the ACM SIGPLAN 1994 Conference on Programming Language Design and Implementation, ser. PLDI '94. New York, NY, USA: ACM, 1994, pp. 159-170. [Online]. Available: http: //doi.acm.org/10.1145/178243.178257\n\nCode factoring in gcc. G L\u00f3ki, \u00c1 Kiss, J J\u00e1sz, Besz\u00e9des, Proceedings of the 2004 GCC Developers' Summit. the 2004 GCC Developers' SummitG. L\u00f3ki,\u00c1. Kiss, J. J\u00e1sz, and\u00c1. Besz\u00e9des, \"Code factoring in gcc,\" in Proceedings of the 2004 GCC Developers' Summit, 2004, pp. 79-84.\n\nGraph-based procedural abstraction. A Dreweke, M Worlein, I Fischer, D Schell, T Meinl, M Philippsen, 10.1109/CGO.2007.14Proceedings of the International Symposium on Code Generation and Optimization, ser. CGO '07. the International Symposium on Code Generation and Optimization, ser. CGO '07Washington, DC, USAIEEE Computer SocietyGCC Developers SummitA. Dreweke, M. Worlein, I. Fischer, D. Schell, T. Meinl, and M. Philippsen, \"Graph-based procedural abstraction,\" in Proceedings of the International Symposium on Code Generation and Optimization, ser. CGO '07. Washington, DC, USA: IEEE Computer Society, 2007, pp. 259-270. [Online]. Available: https://doi.org/10.1109/CGO.2007.14 in GCC Developers Summit, 2010. [Online]. Available: http://gcc.gnu. org/wiki/summit2010?action=AttachFile&do=view&target=tallam.pdf\n\nOptimizing large applications. M Liska, arXivM. Liska, \"Optimizing large applications,\" arXiv, 2014.\n\nnov) Mergefunctions pass, how it works. L C Infrastructure, L. C. Infrastructure. (2019, nov) Mergefunctions pass, how it works. [Online]. Available: http://llvm.org/docs/MergeFunctions.html# mergefunctions-pass-how-it-works\n\nExploiting function similarity for code size reduction. T J Edler Von Koch, B Franke, P Bhandarkar, A Dasgupta, 10.1145/2597809.2597811Proceedings of the 2014 SIGPLAN/SIGBED Conference on Languages, Compilers and Tools for Embedded Systems, ser. LCTES '14. the 2014 SIGPLAN/SIGBED Conference on Languages, Compilers and Tools for Embedded Systems, ser. LCTES '14New York, NY, USAACMT. J. Edler von Koch, B. Franke, P. Bhandarkar, and A. Dasgupta, \"Exploiting function similarity for code size reduction,\" in Proceedings of the 2014 SIGPLAN/SIGBED Conference on Languages, Compilers and Tools for Embedded Systems, ser. LCTES '14. New York, NY, USA: ACM, 2014, pp. 85-94. [Online]. Available: http: //doi.acm.org/10.1145/2597809.2597811\n\nFinding effective optimization phase sequences. P Kulkarni, W Zhao, H Moon, K Cho, D Whalley, J Davidson, M Bailey, Y Paek, K Gallivan, 10.1145/780732.780735Proceedings of the 2003 ACM SIGPLAN Conference on Language, Compiler, and Tool for Embedded Systems, ser. LCTES '03. the 2003 ACM SIGPLAN Conference on Language, Compiler, and Tool for Embedded Systems, ser. LCTES '03New York, NY, USAACMP. Kulkarni, W. Zhao, H. Moon, K. Cho, D. Whalley, J. Davidson, M. Bailey, Y. Paek, and K. Gallivan, \"Finding effective optimization phase sequences,\" in Proceedings of the 2003 ACM SIGPLAN Conference on Language, Compiler, and Tool for Embedded Systems, ser. LCTES '03. New York, NY, USA: ACM, 2003, pp. 12-23. [Online]. Available: http://doi.acm.org/10.1145/780732.780735\n\nEvolving transformation sequences using genetic algorithms. D Fatiregun, M Harman, R M Hierons, Source Code Analysis and Manipulation. Fourth IEEE International Workshop onD. Fatiregun, M. Harman, and R. M. Hierons, \"Evolving transformation sequences using genetic algorithms,\" in Source Code Analysis and Manipulation, Fourth IEEE International Workshop on, Sep. 2004, pp. 65-74.\n\nScaling program synthesis by exploiting existing code. J Bornholt, E Torlak, J. Bornholt and E. Torlak, \"Scaling program synthesis by exploiting existing code,\" 2015.\n", "annotations": {"author": "[{\"start\":\"88\",\"end\":\"393\"},{\"start\":\"394\",\"end\":\"664\"},{\"start\":\"665\",\"end\":\"935\"},{\"start\":\"936\",\"end\":\"1210\"},{\"start\":\"1211\",\"end\":\"1490\"},{\"start\":\"1491\",\"end\":\"1783\"},{\"start\":\"1784\",\"end\":\"2061\"},{\"start\":\"2062\",\"end\":\"2356\"},{\"start\":\"2357\",\"end\":\"2631\"}]", "publisher": null, "author_last_name": "[{\"start\":\"97\",\"end\":\"114\"},{\"start\":\"400\",\"end\":\"405\"},{\"start\":\"670\",\"end\":\"676\"},{\"start\":\"942\",\"end\":\"951\"},{\"start\":\"1226\",\"end\":\"1231\"},{\"start\":\"1497\",\"end\":\"1503\"},{\"start\":\"1793\",\"end\":\"1802\"},{\"start\":\"2071\",\"end\":\"2076\"},{\"start\":\"2365\",\"end\":\"2372\"}]", "author_first_name": "[{\"start\":\"88\",\"end\":\"96\"},{\"start\":\"394\",\"end\":\"399\"},{\"start\":\"665\",\"end\":\"669\"},{\"start\":\"936\",\"end\":\"941\"},{\"start\":\"1211\",\"end\":\"1219\"},{\"start\":\"1220\",\"end\":\"1225\"},{\"start\":\"1491\",\"end\":\"1496\"},{\"start\":\"1784\",\"end\":\"1792\"},{\"start\":\"2062\",\"end\":\"2070\"},{\"start\":\"2357\",\"end\":\"2364\"}]", "author_affiliation": "[{\"start\":\"136\",\"end\":\"392\"},{\"start\":\"407\",\"end\":\"663\"},{\"start\":\"678\",\"end\":\"934\"},{\"start\":\"953\",\"end\":\"1209\"},{\"start\":\"1233\",\"end\":\"1489\"},{\"start\":\"1526\",\"end\":\"1782\"},{\"start\":\"1804\",\"end\":\"2060\"},{\"start\":\"2099\",\"end\":\"2355\"},{\"start\":\"2374\",\"end\":\"2630\"}]", "title": "[{\"start\":\"1\",\"end\":\"85\"},{\"start\":\"2632\",\"end\":\"2716\"}]", "venue": null, "abstract": "[{\"start\":\"2795\",\"end\":\"4227\"}]", "bib_ref": "[{\"start\":\"4417\",\"end\":\"4420\",\"attributes\":{\"ref_id\":\"b0\"}},{\"start\":\"4422\",\"end\":\"4425\",\"attributes\":{\"ref_id\":\"b1\"}},{\"start\":\"4427\",\"end\":\"4430\",\"attributes\":{\"ref_id\":\"b2\"}},{\"start\":\"4971\",\"end\":\"4974\",\"attributes\":{\"ref_id\":\"b3\"}},{\"start\":\"4976\",\"end\":\"4979\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"4981\",\"end\":\"4984\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"4986\",\"end\":\"4989\",\"attributes\":{\"ref_id\":\"b7\"}},{\"start\":\"4991\",\"end\":\"4994\",\"attributes\":{\"ref_id\":\"b8\"}},{\"start\":\"5015\",\"end\":\"5018\",\"attributes\":{\"ref_id\":\"b9\"}},{\"start\":\"5020\",\"end\":\"5024\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"5036\",\"end\":\"5040\",\"attributes\":{\"ref_id\":\"b11\"}},{\"start\":\"5042\",\"end\":\"5046\",\"attributes\":{\"ref_id\":\"b12\"}},{\"start\":\"5048\",\"end\":\"5052\",\"attributes\":{\"ref_id\":\"b13\"}},{\"start\":\"5069\",\"end\":\"5073\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"5075\",\"end\":\"5079\",\"attributes\":{\"ref_id\":\"b15\"}},{\"start\":\"5109\",\"end\":\"5113\",\"attributes\":{\"ref_id\":\"b16\"}},{\"start\":\"5115\",\"end\":\"5119\",\"attributes\":{\"ref_id\":\"b17\"}},{\"start\":\"5257\",\"end\":\"5261\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"5658\",\"end\":\"5662\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"5689\",\"end\":\"5693\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"5714\",\"end\":\"5718\",\"attributes\":{\"ref_id\":\"b20\"}},{\"start\":\"5740\",\"end\":\"5744\",\"attributes\":{\"ref_id\":\"b22\"}},{\"start\":\"5768\",\"end\":\"5772\",\"attributes\":{\"ref_id\":\"b23\"}},{\"start\":\"5793\",\"end\":\"5797\",\"attributes\":{\"ref_id\":\"b24\"}},{\"start\":\"5823\",\"end\":\"5827\",\"attributes\":{\"ref_id\":\"b25\"}},{\"start\":\"6358\",\"end\":\"6361\",\"attributes\":{\"ref_id\":\"b2\"}},{\"start\":\"6600\",\"end\":\"6604\",\"attributes\":{\"ref_id\":\"b26\"}},{\"start\":\"6606\",\"end\":\"6610\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"6612\",\"end\":\"6616\",\"attributes\":{\"ref_id\":\"b27\"}},{\"start\":\"6618\",\"end\":\"6622\",\"attributes\":{\"ref_id\":\"b28\"}},{\"start\":\"6624\",\"end\":\"6628\",\"attributes\":{\"ref_id\":\"b29\"}},{\"start\":\"6867\",\"end\":\"6871\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"7584\",\"end\":\"7588\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"7924\",\"end\":\"7928\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"9286\",\"end\":\"9290\",\"attributes\":{\"ref_id\":\"b31\"}},{\"start\":\"9504\",\"end\":\"9507\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"9509\",\"end\":\"9513\",\"attributes\":{\"ref_id\":\"b32\"}},{\"start\":\"9723\",\"end\":\"9727\",\"attributes\":{\"ref_id\":\"b33\"}},{\"start\":\"9739\",\"end\":\"9743\",\"attributes\":{\"ref_id\":\"b34\"}},{\"start\":\"10032\",\"end\":\"10035\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"10258\",\"end\":\"10262\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"10369\",\"end\":\"10373\",\"attributes\":{\"ref_id\":\"b36\"}},{\"start\":\"10557\",\"end\":\"10561\",\"attributes\":{\"ref_id\":\"b37\"}},{\"start\":\"10563\",\"end\":\"10567\",\"attributes\":{\"ref_id\":\"b38\"}},{\"start\":\"10569\",\"end\":\"10573\",\"attributes\":{\"ref_id\":\"b39\"}},{\"start\":\"11436\",\"end\":\"11440\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"11697\",\"end\":\"11701\",\"attributes\":{\"ref_id\":\"b40\"}},{\"start\":\"12289\",\"end\":\"12293\",\"attributes\":{\"ref_id\":\"b41\"}},{\"start\":\"13759\",\"end\":\"13762\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"13764\",\"end\":\"13768\",\"attributes\":{\"ref_id\":\"b42\"}},{\"start\":\"13852\",\"end\":\"13856\",\"attributes\":{\"ref_id\":\"b43\"}},{\"start\":\"13858\",\"end\":\"13862\",\"attributes\":{\"ref_id\":\"b44\"}},{\"start\":\"13864\",\"end\":\"13868\",\"attributes\":{\"ref_id\":\"b45\"}},{\"start\":\"14962\",\"end\":\"14966\",\"attributes\":{\"ref_id\":\"b46\"}},{\"start\":\"15615\",\"end\":\"15619\",\"attributes\":{\"ref_id\":\"b47\"}},{\"start\":\"15660\",\"end\":\"15664\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"17057\",\"end\":\"17061\",\"attributes\":{\"ref_id\":\"b33\"}},{\"start\":\"21073\",\"end\":\"21077\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"24494\",\"end\":\"24497\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"24528\",\"end\":\"24531\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"24820\",\"end\":\"24824\",\"attributes\":{\"ref_id\":\"b48\"}},{\"start\":\"25415\",\"end\":\"25419\",\"attributes\":{\"ref_id\":\"b40\"}},{\"start\":\"25903\",\"end\":\"25907\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"27418\",\"end\":\"27422\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"31139\",\"end\":\"31143\",\"attributes\":{\"ref_id\":\"b49\"}},{\"start\":\"31297\",\"end\":\"31300\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"31940\",\"end\":\"31944\",\"attributes\":{\"ref_id\":\"b50\"}},{\"start\":\"34100\",\"end\":\"34103\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"34105\",\"end\":\"34109\",\"attributes\":{\"ref_id\":\"b32\"}},{\"start\":\"34158\",\"end\":\"34162\",\"attributes\":{\"ref_id\":\"b51\"}},{\"start\":\"39343\",\"end\":\"39347\",\"attributes\":{\"ref_id\":\"b52\"}},{\"start\":\"39387\",\"end\":\"39391\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"39421\",\"end\":\"39426\"},{\"start\":\"39972\",\"end\":\"39976\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"40190\",\"end\":\"40194\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"45123\",\"end\":\"45127\",\"attributes\":{\"ref_id\":\"b33\"}},{\"start\":\"45136\",\"end\":\"45140\",\"attributes\":{\"ref_id\":\"b34\"}},{\"start\":\"45153\",\"end\":\"45157\",\"attributes\":{\"ref_id\":\"b54\"}},{\"start\":\"45159\",\"end\":\"45163\",\"attributes\":{\"ref_id\":\"b55\"}},{\"start\":\"45305\",\"end\":\"45309\",\"attributes\":{\"ref_id\":\"b56\"}},{\"start\":\"45455\",\"end\":\"45459\",\"attributes\":{\"ref_id\":\"b57\"}},{\"start\":\"45461\",\"end\":\"45465\",\"attributes\":{\"ref_id\":\"b58\"}},{\"start\":\"45696\",\"end\":\"45700\",\"attributes\":{\"ref_id\":\"b14\"}},{\"start\":\"45764\",\"end\":\"45768\",\"attributes\":{\"ref_id\":\"b47\"}},{\"start\":\"46245\",\"end\":\"46249\",\"attributes\":{\"ref_id\":\"b59\"}},{\"start\":\"46665\",\"end\":\"46669\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"46671\",\"end\":\"46675\",\"attributes\":{\"ref_id\":\"b53\"}},{\"start\":\"46677\",\"end\":\"46681\",\"attributes\":{\"ref_id\":\"b60\"}},{\"start\":\"46683\",\"end\":\"46687\",\"attributes\":{\"ref_id\":\"b63\"}},{\"start\":\"46689\",\"end\":\"46693\",\"attributes\":{\"ref_id\":\"b64\"}},{\"start\":\"46695\",\"end\":\"46699\",\"attributes\":{\"ref_id\":\"b65\"}},{\"start\":\"46701\",\"end\":\"46705\",\"attributes\":{\"ref_id\":\"b66\"}},{\"start\":\"46903\",\"end\":\"46907\",\"attributes\":{\"ref_id\":\"b66\"}},{\"start\":\"46909\",\"end\":\"46913\",\"attributes\":{\"ref_id\":\"b67\"}},{\"start\":\"46915\",\"end\":\"46919\",\"attributes\":{\"ref_id\":\"b68\"}},{\"start\":\"46921\",\"end\":\"46925\",\"attributes\":{\"ref_id\":\"b67\"}},{\"start\":\"47108\",\"end\":\"47112\",\"attributes\":{\"ref_id\":\"b62\"}},{\"start\":\"47114\",\"end\":\"47118\",\"attributes\":{\"ref_id\":\"b69\"}},{\"start\":\"47120\",\"end\":\"47124\",\"attributes\":{\"ref_id\":\"b70\"}},{\"start\":\"47398\",\"end\":\"47402\",\"attributes\":{\"ref_id\":\"b35\"}},{\"start\":\"47404\",\"end\":\"47408\",\"attributes\":{\"ref_id\":\"b53\"}},{\"start\":\"47410\",\"end\":\"47414\",\"attributes\":{\"ref_id\":\"b71\"}},{\"start\":\"47577\",\"end\":\"47581\",\"attributes\":{\"ref_id\":\"b53\"}},{\"start\":\"48204\",\"end\":\"48208\",\"attributes\":{\"ref_id\":\"b44\"}},{\"start\":\"48210\",\"end\":\"48214\",\"attributes\":{\"ref_id\":\"b72\"}},{\"start\":\"48216\",\"end\":\"48220\",\"attributes\":{\"ref_id\":\"b73\"}},{\"start\":\"50378\",\"end\":\"50382\",\"attributes\":{\"ref_id\":\"b74\"}},{\"start\":\"50628\",\"end\":\"50632\",\"attributes\":{\"ref_id\":\"b30\"}},{\"start\":\"54311\",\"end\":\"54315\",\"attributes\":{\"ref_id\":\"b32\"}},{\"start\":\"54660\",\"end\":\"54664\",\"attributes\":{\"ref_id\":\"b53\"}}]", "figure": "[{\"start\":\"50634\",\"end\":\"50676\",\"attributes\":{\"id\":\"fig_0\"}},{\"start\":\"50677\",\"end\":\"51000\",\"attributes\":{\"id\":\"fig_1\"}},{\"start\":\"51001\",\"end\":\"51468\",\"attributes\":{\"id\":\"fig_2\"}},{\"start\":\"51469\",\"end\":\"51580\",\"attributes\":{\"id\":\"fig_4\"}},{\"start\":\"51581\",\"end\":\"51800\",\"attributes\":{\"id\":\"fig_5\"}},{\"start\":\"51801\",\"end\":\"52217\",\"attributes\":{\"id\":\"fig_6\"}},{\"start\":\"52218\",\"end\":\"52324\",\"attributes\":{\"id\":\"fig_7\"}},{\"start\":\"52325\",\"end\":\"52439\",\"attributes\":{\"id\":\"fig_9\"}},{\"start\":\"52440\",\"end\":\"52858\",\"attributes\":{\"id\":\"fig_10\"}},{\"start\":\"52859\",\"end\":\"53429\",\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"}},{\"start\":\"53430\",\"end\":\"54246\",\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"}}]", "paragraph": "[{\"start\":\"4246\",\"end\":\"5134\"},{\"start\":\"5136\",\"end\":\"7194\"},{\"start\":\"7196\",\"end\":\"7364\"},{\"start\":\"7366\",\"end\":\"8667\"},{\"start\":\"8669\",\"end\":\"10263\"},{\"start\":\"10265\",\"end\":\"10979\"},{\"start\":\"10981\",\"end\":\"11702\"},{\"start\":\"11747\",\"end\":\"12294\"},{\"start\":\"12296\",\"end\":\"12446\"},{\"start\":\"12448\",\"end\":\"12556\"},{\"start\":\"12558\",\"end\":\"12613\"},{\"start\":\"12615\",\"end\":\"12938\"},{\"start\":\"12940\",\"end\":\"13869\"},{\"start\":\"13871\",\"end\":\"14527\"},{\"start\":\"14529\",\"end\":\"14991\"},{\"start\":\"14993\",\"end\":\"15101\"},{\"start\":\"15132\",\"end\":\"15528\"},{\"start\":\"15530\",\"end\":\"16085\"},{\"start\":\"16087\",\"end\":\"17668\"},{\"start\":\"17670\",\"end\":\"18603\"},{\"start\":\"18680\",\"end\":\"18977\"},{\"start\":\"18979\",\"end\":\"19620\"},{\"start\":\"19622\",\"end\":\"20459\"},{\"start\":\"20461\",\"end\":\"20809\"},{\"start\":\"20811\",\"end\":\"21608\"},{\"start\":\"21610\",\"end\":\"22091\"},{\"start\":\"22130\",\"end\":\"22651\"},{\"start\":\"22653\",\"end\":\"23270\"},{\"start\":\"23285\",\"end\":\"23525\"},{\"start\":\"23534\",\"end\":\"24353\"},{\"start\":\"24355\",\"end\":\"25258\"},{\"start\":\"25277\",\"end\":\"25420\"},{\"start\":\"25422\",\"end\":\"25999\"},{\"start\":\"26001\",\"end\":\"26646\"},{\"start\":\"26676\",\"end\":\"27505\"},{\"start\":\"27507\",\"end\":\"28157\"},{\"start\":\"28198\",\"end\":\"29518\"},{\"start\":\"29520\",\"end\":\"30718\"},{\"start\":\"30746\",\"end\":\"31660\"},{\"start\":\"31776\",\"end\":\"32386\"},{\"start\":\"32388\",\"end\":\"33817\"},{\"start\":\"33852\",\"end\":\"35134\"},{\"start\":\"35163\",\"end\":\"35646\"},{\"start\":\"35648\",\"end\":\"37240\"},{\"start\":\"37242\",\"end\":\"38038\"},{\"start\":\"38040\",\"end\":\"39132\"},{\"start\":\"39164\",\"end\":\"39277\"},{\"start\":\"39279\",\"end\":\"40072\"},{\"start\":\"40074\",\"end\":\"41268\"},{\"start\":\"41307\",\"end\":\"41593\"},{\"start\":\"41595\",\"end\":\"42401\"},{\"start\":\"42403\",\"end\":\"42916\"},{\"start\":\"42918\",\"end\":\"44726\"},{\"start\":\"44728\",\"end\":\"45555\"},{\"start\":\"45557\",\"end\":\"47415\"},{\"start\":\"47417\",\"end\":\"48633\"},{\"start\":\"48652\",\"end\":\"49189\"},{\"start\":\"49191\",\"end\":\"49822\"},{\"start\":\"49824\",\"end\":\"50383\"},{\"start\":\"50385\",\"end\":\"50633\"}]", "formula": "[{\"start\":\"31661\",\"end\":\"31775\",\"attributes\":{\"id\":\"formula_0\"}}]", "table_ref": null, "section_header": "[{\"start\":\"4229\",\"end\":\"4244\"},{\"start\":\"11705\",\"end\":\"11717\"},{\"start\":\"11720\",\"end\":\"11745\"},{\"start\":\"15104\",\"end\":\"15130\"},{\"start\":\"18606\",\"end\":\"18636\"},{\"start\":\"18639\",\"end\":\"18678\"},{\"start\":\"22094\",\"end\":\"22128\"},{\"start\":\"23273\",\"end\":\"23283\"},{\"start\":\"23528\",\"end\":\"23532\"},{\"start\":\"25261\",\"end\":\"25275\"},{\"start\":\"26649\",\"end\":\"26674\"},{\"start\":\"28160\",\"end\":\"28196\"},{\"start\":\"30721\",\"end\":\"30744\"},{\"start\":\"33820\",\"end\":\"33850\"},{\"start\":\"35137\",\"end\":\"35161\"},{\"start\":\"39135\",\"end\":\"39162\"},{\"start\":\"41271\",\"end\":\"41305\"},{\"start\":\"48636\",\"end\":\"48650\"},{\"start\":\"50635\",\"end\":\"50643\"},{\"start\":\"50678\",\"end\":\"50686\"},{\"start\":\"51002\",\"end\":\"51018\"},{\"start\":\"51470\",\"end\":\"51478\"},{\"start\":\"51582\",\"end\":\"51590\"},{\"start\":\"52219\",\"end\":\"52227\"}]", "table": "[{\"start\":\"52961\",\"end\":\"53429\"}]", "figure_caption": "[{\"start\":\"50645\",\"end\":\"50676\"},{\"start\":\"50688\",\"end\":\"51000\"},{\"start\":\"51021\",\"end\":\"51468\"},{\"start\":\"51480\",\"end\":\"51580\"},{\"start\":\"51592\",\"end\":\"51800\"},{\"start\":\"51803\",\"end\":\"52217\"},{\"start\":\"52229\",\"end\":\"52324\"},{\"start\":\"52327\",\"end\":\"52439\"},{\"start\":\"52442\",\"end\":\"52858\"},{\"start\":\"52861\",\"end\":\"52961\"},{\"start\":\"53432\",\"end\":\"54246\"}]", "figure_ref": "[{\"start\":\"12951\",\"end\":\"12959\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"13909\",\"end\":\"13917\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"15004\",\"end\":\"15012\",\"attributes\":{\"ref_id\":\"fig_1\"}},{\"start\":\"17681\",\"end\":\"17689\"},{\"start\":\"20472\",\"end\":\"20480\"},{\"start\":\"21221\",\"end\":\"21229\"},{\"start\":\"22910\",\"end\":\"22918\"},{\"start\":\"29076\",\"end\":\"29084\",\"attributes\":{\"ref_id\":\"fig_4\"}},{\"start\":\"30135\",\"end\":\"30143\",\"attributes\":{\"ref_id\":\"fig_4\"}},{\"start\":\"31998\",\"end\":\"32006\",\"attributes\":{\"ref_id\":\"fig_5\"}},{\"start\":\"33036\",\"end\":\"33044\",\"attributes\":{\"ref_id\":\"fig_7\"}},{\"start\":\"33104\",\"end\":\"33112\",\"attributes\":{\"ref_id\":\"fig_7\"}},{\"start\":\"36167\",\"end\":\"36183\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"36955\",\"end\":\"36961\"},{\"start\":\"37260\",\"end\":\"37276\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"37739\",\"end\":\"37746\"},{\"start\":\"37933\",\"end\":\"37940\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"37975\",\"end\":\"37981\"},{\"start\":\"38756\",\"end\":\"38766\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"39427\",\"end\":\"39436\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"39607\",\"end\":\"39616\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"39794\",\"end\":\"39801\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"43897\",\"end\":\"43906\",\"attributes\":{\"ref_id\":\"fig_0\"}}]", "bib_author_first_name": "[{\"start\":\"55338\",\"end\":\"55339\"},{\"start\":\"55340\",\"end\":\"55341\"},{\"start\":\"55351\",\"end\":\"55352\"},{\"start\":\"55362\",\"end\":\"55363\"},{\"start\":\"55373\",\"end\":\"55374\"},{\"start\":\"55384\",\"end\":\"55385\"},{\"start\":\"55650\",\"end\":\"55651\"},{\"start\":\"55661\",\"end\":\"55662\"},{\"start\":\"55871\",\"end\":\"55872\"},{\"start\":\"55879\",\"end\":\"55880\"},{\"start\":\"55881\",\"end\":\"55884\"},{\"start\":\"56134\",\"end\":\"56135\"},{\"start\":\"56136\",\"end\":\"56137\"},{\"start\":\"56147\",\"end\":\"56148\"},{\"start\":\"56158\",\"end\":\"56159\"},{\"start\":\"56169\",\"end\":\"56170\"},{\"start\":\"56177\",\"end\":\"56178\"},{\"start\":\"56188\",\"end\":\"56189\"},{\"start\":\"56564\",\"end\":\"56565\"},{\"start\":\"56576\",\"end\":\"56577\"},{\"start\":\"56585\",\"end\":\"56586\"},{\"start\":\"56595\",\"end\":\"56596\"},{\"start\":\"56603\",\"end\":\"56604\"},{\"start\":\"56933\",\"end\":\"56934\"},{\"start\":\"56935\",\"end\":\"56936\"},{\"start\":\"56944\",\"end\":\"56945\"},{\"start\":\"56946\",\"end\":\"56949\"},{\"start\":\"56961\",\"end\":\"56962\"},{\"start\":\"56963\",\"end\":\"56964\"},{\"start\":\"57232\",\"end\":\"57233\"},{\"start\":\"57234\",\"end\":\"57235\"},{\"start\":\"57252\",\"end\":\"57253\"},{\"start\":\"57262\",\"end\":\"57263\"},{\"start\":\"57271\",\"end\":\"57272\"},{\"start\":\"57530\",\"end\":\"57531\"},{\"start\":\"57532\",\"end\":\"57533\"},{\"start\":\"57551\",\"end\":\"57552\"},{\"start\":\"57553\",\"end\":\"57554\"},{\"start\":\"57852\",\"end\":\"57853\"},{\"start\":\"57862\",\"end\":\"57863\"},{\"start\":\"57874\",\"end\":\"57875\"},{\"start\":\"57885\",\"end\":\"57886\"},{\"start\":\"57887\",\"end\":\"57890\"},{\"start\":\"58183\",\"end\":\"58184\"},{\"start\":\"58185\",\"end\":\"58188\"},{\"start\":\"58200\",\"end\":\"58201\"},{\"start\":\"58216\",\"end\":\"58217\"},{\"start\":\"58520\",\"end\":\"58521\"},{\"start\":\"58530\",\"end\":\"58531\"},{\"start\":\"58763\",\"end\":\"58764\"},{\"start\":\"58772\",\"end\":\"58773\"},{\"start\":\"58785\",\"end\":\"58786\"},{\"start\":\"58787\",\"end\":\"58788\"},{\"start\":\"58796\",\"end\":\"58797\"},{\"start\":\"58798\",\"end\":\"58801\"},{\"start\":\"58808\",\"end\":\"58809\"},{\"start\":\"59028\",\"end\":\"59029\"},{\"start\":\"59040\",\"end\":\"59041\"},{\"start\":\"59050\",\"end\":\"59051\"},{\"start\":\"59248\",\"end\":\"59249\"},{\"start\":\"59259\",\"end\":\"59260\"},{\"start\":\"59273\",\"end\":\"59274\"},{\"start\":\"59281\",\"end\":\"59282\"},{\"start\":\"59534\",\"end\":\"59535\"},{\"start\":\"59544\",\"end\":\"59545\"},{\"start\":\"59546\",\"end\":\"59549\"},{\"start\":\"59561\",\"end\":\"59562\"},{\"start\":\"59575\",\"end\":\"59576\"},{\"start\":\"59577\",\"end\":\"59580\"},{\"start\":\"59856\",\"end\":\"59857\"},{\"start\":\"59865\",\"end\":\"59866\"},{\"start\":\"59876\",\"end\":\"59877\"},{\"start\":\"59886\",\"end\":\"59887\"},{\"start\":\"60191\",\"end\":\"60192\"},{\"start\":\"60199\",\"end\":\"60200\"},{\"start\":\"60201\",\"end\":\"60202\"},{\"start\":\"60421\",\"end\":\"60422\"},{\"start\":\"60423\",\"end\":\"60424\"},{\"start\":\"60742\",\"end\":\"60743\"},{\"start\":\"60754\",\"end\":\"60755\"},{\"start\":\"60763\",\"end\":\"60764\"},{\"start\":\"60772\",\"end\":\"60773\"},{\"start\":\"60780\",\"end\":\"60781\"},{\"start\":\"60788\",\"end\":\"60789\"},{\"start\":\"60798\",\"end\":\"60799\"},{\"start\":\"60800\",\"end\":\"60801\"},{\"start\":\"61142\",\"end\":\"61143\"},{\"start\":\"61149\",\"end\":\"61150\"},{\"start\":\"61158\",\"end\":\"61159\"},{\"start\":\"61166\",\"end\":\"61167\"},{\"start\":\"61176\",\"end\":\"61177\"},{\"start\":\"61178\",\"end\":\"61179\"},{\"start\":\"61190\",\"end\":\"61194\"},{\"start\":\"61200\",\"end\":\"61201\"},{\"start\":\"61488\",\"end\":\"61492\"},{\"start\":\"61502\",\"end\":\"61503\"},{\"start\":\"61705\",\"end\":\"61706\"},{\"start\":\"61715\",\"end\":\"61716\"},{\"start\":\"61917\",\"end\":\"61918\"},{\"start\":\"61927\",\"end\":\"61928\"},{\"start\":\"61938\",\"end\":\"61939\"},{\"start\":\"61948\",\"end\":\"61949\"},{\"start\":\"61960\",\"end\":\"61961\"},{\"start\":\"61970\",\"end\":\"61971\"},{\"start\":\"61979\",\"end\":\"61980\"},{\"start\":\"61990\",\"end\":\"61991\"},{\"start\":\"62006\",\"end\":\"62007\"},{\"start\":\"62018\",\"end\":\"62019\"},{\"start\":\"62031\",\"end\":\"62032\"},{\"start\":\"62040\",\"end\":\"62041\"},{\"start\":\"62059\",\"end\":\"62060\"},{\"start\":\"62548\",\"end\":\"62549\"},{\"start\":\"62557\",\"end\":\"62558\"},{\"start\":\"62569\",\"end\":\"62570\"},{\"start\":\"62571\",\"end\":\"62572\"},{\"start\":\"62580\",\"end\":\"62581\"},{\"start\":\"62586\",\"end\":\"62587\"},{\"start\":\"62887\",\"end\":\"62888\"},{\"start\":\"62895\",\"end\":\"62896\"},{\"start\":\"62897\",\"end\":\"62898\"},{\"start\":\"63179\",\"end\":\"63180\"},{\"start\":\"63187\",\"end\":\"63188\"},{\"start\":\"63189\",\"end\":\"63190\"},{\"start\":\"63477\",\"end\":\"63478\"},{\"start\":\"63484\",\"end\":\"63485\"},{\"start\":\"63492\",\"end\":\"63493\"},{\"start\":\"63494\",\"end\":\"63497\"},{\"start\":\"63780\",\"end\":\"63781\"},{\"start\":\"63782\",\"end\":\"63785\"},{\"start\":\"63792\",\"end\":\"63793\"},{\"start\":\"63794\",\"end\":\"63795\"},{\"start\":\"63805\",\"end\":\"63806\"},{\"start\":\"63807\",\"end\":\"63808\"},{\"start\":\"63820\",\"end\":\"63821\"},{\"start\":\"63822\",\"end\":\"63825\"},{\"start\":\"64217\",\"end\":\"64218\"},{\"start\":\"64228\",\"end\":\"64229\"},{\"start\":\"64586\",\"end\":\"64587\"},{\"start\":\"64588\",\"end\":\"64589\"},{\"start\":\"64599\",\"end\":\"64600\"},{\"start\":\"64601\",\"end\":\"64602\"},{\"start\":\"64613\",\"end\":\"64614\"},{\"start\":\"64615\",\"end\":\"64618\"},{\"start\":\"64907\",\"end\":\"64908\"},{\"start\":\"64915\",\"end\":\"64916\"},{\"start\":\"64923\",\"end\":\"64924\"},{\"start\":\"64931\",\"end\":\"64932\"},{\"start\":\"65154\",\"end\":\"65155\"},{\"start\":\"65357\",\"end\":\"65358\"},{\"start\":\"65359\",\"end\":\"65362\"},{\"start\":\"65370\",\"end\":\"65371\"},{\"start\":\"65384\",\"end\":\"65385\"},{\"start\":\"65392\",\"end\":\"65393\"},{\"start\":\"65400\",\"end\":\"65401\"},{\"start\":\"65857\",\"end\":\"65858\"},{\"start\":\"65865\",\"end\":\"65866\"},{\"start\":\"65874\",\"end\":\"65875\"},{\"start\":\"66190\",\"end\":\"66191\"},{\"start\":\"66198\",\"end\":\"66199\"},{\"start\":\"66207\",\"end\":\"66208\"},{\"start\":\"66209\",\"end\":\"66210\"},{\"start\":\"66219\",\"end\":\"66220\"},{\"start\":\"66221\",\"end\":\"66222\"},{\"start\":\"66524\",\"end\":\"66525\"},{\"start\":\"66536\",\"end\":\"66537\"},{\"start\":\"66811\",\"end\":\"66812\"},{\"start\":\"66813\",\"end\":\"66814\"},{\"start\":\"66822\",\"end\":\"66823\"},{\"start\":\"66830\",\"end\":\"66831\"},{\"start\":\"66832\",\"end\":\"66835\"},{\"start\":\"66841\",\"end\":\"66842\"},{\"start\":\"66850\",\"end\":\"66851\"},{\"start\":\"66852\",\"end\":\"66853\"},{\"start\":\"66856\",\"end\":\"66857\"},{\"start\":\"66858\",\"end\":\"66861\"},{\"start\":\"67185\",\"end\":\"67186\"},{\"start\":\"67187\",\"end\":\"67190\"},{\"start\":\"67200\",\"end\":\"67201\"},{\"start\":\"67202\",\"end\":\"67203\"},{\"start\":\"67212\",\"end\":\"67213\"},{\"start\":\"67478\",\"end\":\"67479\"},{\"start\":\"67488\",\"end\":\"67489\"},{\"start\":\"67501\",\"end\":\"67502\"},{\"start\":\"67503\",\"end\":\"67504\"},{\"start\":\"67512\",\"end\":\"67513\"},{\"start\":\"67523\",\"end\":\"67524\"},{\"start\":\"67532\",\"end\":\"67533\"},{\"start\":\"67544\",\"end\":\"67545\"},{\"start\":\"67555\",\"end\":\"67556\"},{\"start\":\"67568\",\"end\":\"67569\"},{\"start\":\"67576\",\"end\":\"67577\"},{\"start\":\"67986\",\"end\":\"67987\"},{\"start\":\"68000\",\"end\":\"68001\"},{\"start\":\"68015\",\"end\":\"68016\"},{\"start\":\"68025\",\"end\":\"68029\"},{\"start\":\"68711\",\"end\":\"68712\"},{\"start\":\"68713\",\"end\":\"68714\"},{\"start\":\"68723\",\"end\":\"68724\"},{\"start\":\"68725\",\"end\":\"68726\"},{\"start\":\"68737\",\"end\":\"68738\"},{\"start\":\"69403\",\"end\":\"69404\"},{\"start\":\"69413\",\"end\":\"69414\"},{\"start\":\"69424\",\"end\":\"69425\"},{\"start\":\"69435\",\"end\":\"69436\"},{\"start\":\"69445\",\"end\":\"69446\"},{\"start\":\"69455\",\"end\":\"69456\"},{\"start\":\"69457\",\"end\":\"69460\"},{\"start\":\"69475\",\"end\":\"69476\"},{\"start\":\"69486\",\"end\":\"69487\"},{\"start\":\"69499\",\"end\":\"69500\"},{\"start\":\"69501\",\"end\":\"69504\"},{\"start\":\"70188\",\"end\":\"70189\"},{\"start\":\"70197\",\"end\":\"70198\"},{\"start\":\"70386\",\"end\":\"70387\"},{\"start\":\"70397\",\"end\":\"70398\"},{\"start\":\"70411\",\"end\":\"70412\"},{\"start\":\"70421\",\"end\":\"70422\"},{\"start\":\"70664\",\"end\":\"70665\"},{\"start\":\"70672\",\"end\":\"70673\"},{\"start\":\"70687\",\"end\":\"70688\"},{\"start\":\"70695\",\"end\":\"70696\"},{\"start\":\"70968\",\"end\":\"70969\"},{\"start\":\"70978\",\"end\":\"70979\"},{\"start\":\"70989\",\"end\":\"70990\"},{\"start\":\"71265\",\"end\":\"71266\"},{\"start\":\"71273\",\"end\":\"71274\"},{\"start\":\"71472\",\"end\":\"71473\"},{\"start\":\"71483\",\"end\":\"71484\"},{\"start\":\"71846\",\"end\":\"71847\"},{\"start\":\"71848\",\"end\":\"71849\"},{\"start\":\"71859\",\"end\":\"71860\"},{\"start\":\"71861\",\"end\":\"71862\"},{\"start\":\"71875\",\"end\":\"71876\"},{\"start\":\"71884\",\"end\":\"71885\"},{\"start\":\"71886\",\"end\":\"71887\"},{\"start\":\"71896\",\"end\":\"71897\"},{\"start\":\"71905\",\"end\":\"71906\"},{\"start\":\"71907\",\"end\":\"71908\"},{\"start\":\"72197\",\"end\":\"72198\"},{\"start\":\"72199\",\"end\":\"72202\"},{\"start\":\"72210\",\"end\":\"72211\"},{\"start\":\"72224\",\"end\":\"72225\"},{\"start\":\"72232\",\"end\":\"72233\"},{\"start\":\"72240\",\"end\":\"72241\"},{\"start\":\"72555\",\"end\":\"72556\"},{\"start\":\"72564\",\"end\":\"72565\"},{\"start\":\"72577\",\"end\":\"72578\"},{\"start\":\"72957\",\"end\":\"72958\"},{\"start\":\"72969\",\"end\":\"72970\"},{\"start\":\"73448\",\"end\":\"73449\"},{\"start\":\"73456\",\"end\":\"73457\"},{\"start\":\"73465\",\"end\":\"73466\"},{\"start\":\"73475\",\"end\":\"73476\"},{\"start\":\"73484\",\"end\":\"73485\"},{\"start\":\"73493\",\"end\":\"73494\"},{\"start\":\"73500\",\"end\":\"73501\"},{\"start\":\"73783\",\"end\":\"73784\"},{\"start\":\"73796\",\"end\":\"73797\"},{\"start\":\"74142\",\"end\":\"74143\"},{\"start\":\"74652\",\"end\":\"74653\"},{\"start\":\"74664\",\"end\":\"74665\"},{\"start\":\"74671\",\"end\":\"74672\"},{\"start\":\"74679\",\"end\":\"74680\"},{\"start\":\"74881\",\"end\":\"74882\"},{\"start\":\"74890\",\"end\":\"74891\"},{\"start\":\"74901\",\"end\":\"74902\"},{\"start\":\"75215\",\"end\":\"75216\"},{\"start\":\"75225\",\"end\":\"75226\"},{\"start\":\"75236\",\"end\":\"75237\"},{\"start\":\"75238\",\"end\":\"75239\"},{\"start\":\"75248\",\"end\":\"75249\"},{\"start\":\"75250\",\"end\":\"75251\"},{\"start\":\"75256\",\"end\":\"75257\"},{\"start\":\"75453\",\"end\":\"75454\"},{\"start\":\"75683\",\"end\":\"75684\"},{\"start\":\"75692\",\"end\":\"75693\"},{\"start\":\"75701\",\"end\":\"75702\"},{\"start\":\"75703\",\"end\":\"75704\"},{\"start\":\"75713\",\"end\":\"75714\"},{\"start\":\"75715\",\"end\":\"75716\"},{\"start\":\"75729\",\"end\":\"75730\"},{\"start\":\"76346\",\"end\":\"76347\"},{\"start\":\"76348\",\"end\":\"76349\"},{\"start\":\"76361\",\"end\":\"76362\"},{\"start\":\"76377\",\"end\":\"76378\"},{\"start\":\"76379\",\"end\":\"76380\"},{\"start\":\"76729\",\"end\":\"76730\"},{\"start\":\"76739\",\"end\":\"76740\"},{\"start\":\"76741\",\"end\":\"76742\"},{\"start\":\"77319\",\"end\":\"77320\"},{\"start\":\"77327\",\"end\":\"77328\"},{\"start\":\"77335\",\"end\":\"77336\"},{\"start\":\"77604\",\"end\":\"77605\"},{\"start\":\"77615\",\"end\":\"77616\"},{\"start\":\"77626\",\"end\":\"77627\"},{\"start\":\"77637\",\"end\":\"77638\"},{\"start\":\"77647\",\"end\":\"77648\"},{\"start\":\"77656\",\"end\":\"77657\"},{\"start\":\"78417\",\"end\":\"78418\"},{\"start\":\"78528\",\"end\":\"78529\"},{\"start\":\"78530\",\"end\":\"78531\"},{\"start\":\"78770\",\"end\":\"78771\"},{\"start\":\"78772\",\"end\":\"78773\"},{\"start\":\"78790\",\"end\":\"78791\"},{\"start\":\"78800\",\"end\":\"78801\"},{\"start\":\"78814\",\"end\":\"78815\"},{\"start\":\"79499\",\"end\":\"79500\"},{\"start\":\"79511\",\"end\":\"79512\"},{\"start\":\"79519\",\"end\":\"79520\"},{\"start\":\"79527\",\"end\":\"79528\"},{\"start\":\"79534\",\"end\":\"79535\"},{\"start\":\"79545\",\"end\":\"79546\"},{\"start\":\"79557\",\"end\":\"79558\"},{\"start\":\"79567\",\"end\":\"79568\"},{\"start\":\"79575\",\"end\":\"79576\"},{\"start\":\"80280\",\"end\":\"80281\"},{\"start\":\"80293\",\"end\":\"80294\"},{\"start\":\"80303\",\"end\":\"80304\"},{\"start\":\"80305\",\"end\":\"80306\"},{\"start\":\"80657\",\"end\":\"80658\"},{\"start\":\"80669\",\"end\":\"80670\"}]", "bib_author_last_name": "[{\"start\":\"55342\",\"end\":\"55349\"},{\"start\":\"55353\",\"end\":\"55360\"},{\"start\":\"55364\",\"end\":\"55371\"},{\"start\":\"55375\",\"end\":\"55382\"},{\"start\":\"55386\",\"end\":\"55393\"},{\"start\":\"55652\",\"end\":\"55659\"},{\"start\":\"55663\",\"end\":\"55670\"},{\"start\":\"55873\",\"end\":\"55877\"},{\"start\":\"55885\",\"end\":\"55897\"},{\"start\":\"56138\",\"end\":\"56145\"},{\"start\":\"56149\",\"end\":\"56156\"},{\"start\":\"56160\",\"end\":\"56167\"},{\"start\":\"56171\",\"end\":\"56175\"},{\"start\":\"56179\",\"end\":\"56186\"},{\"start\":\"56190\",\"end\":\"56197\"},{\"start\":\"56566\",\"end\":\"56574\"},{\"start\":\"56578\",\"end\":\"56583\"},{\"start\":\"56587\",\"end\":\"56593\"},{\"start\":\"56597\",\"end\":\"56601\"},{\"start\":\"56605\",\"end\":\"56611\"},{\"start\":\"56937\",\"end\":\"56942\"},{\"start\":\"56950\",\"end\":\"56959\"},{\"start\":\"56965\",\"end\":\"56973\"},{\"start\":\"57236\",\"end\":\"57250\"},{\"start\":\"57254\",\"end\":\"57260\"},{\"start\":\"57264\",\"end\":\"57269\"},{\"start\":\"57273\",\"end\":\"57281\"},{\"start\":\"57534\",\"end\":\"57549\"},{\"start\":\"57555\",\"end\":\"57563\"},{\"start\":\"57854\",\"end\":\"57860\"},{\"start\":\"57864\",\"end\":\"57872\"},{\"start\":\"57876\",\"end\":\"57883\"},{\"start\":\"57891\",\"end\":\"57898\"},{\"start\":\"58189\",\"end\":\"58198\"},{\"start\":\"58202\",\"end\":\"58214\"},{\"start\":\"58218\",\"end\":\"58223\"},{\"start\":\"58522\",\"end\":\"58528\"},{\"start\":\"58532\",\"end\":\"58537\"},{\"start\":\"58765\",\"end\":\"58770\"},{\"start\":\"58774\",\"end\":\"58783\"},{\"start\":\"58789\",\"end\":\"58794\"},{\"start\":\"58802\",\"end\":\"58806\"},{\"start\":\"58810\",\"end\":\"58815\"},{\"start\":\"59030\",\"end\":\"59038\"},{\"start\":\"59042\",\"end\":\"59048\"},{\"start\":\"59052\",\"end\":\"59057\"},{\"start\":\"59250\",\"end\":\"59257\"},{\"start\":\"59261\",\"end\":\"59271\"},{\"start\":\"59275\",\"end\":\"59279\"},{\"start\":\"59283\",\"end\":\"59290\"},{\"start\":\"59536\",\"end\":\"59542\"},{\"start\":\"59550\",\"end\":\"59559\"},{\"start\":\"59563\",\"end\":\"59573\"},{\"start\":\"59581\",\"end\":\"59588\"},{\"start\":\"59858\",\"end\":\"59863\"},{\"start\":\"59867\",\"end\":\"59874\"},{\"start\":\"59878\",\"end\":\"59884\"},{\"start\":\"59888\",\"end\":\"59896\"},{\"start\":\"60193\",\"end\":\"60197\"},{\"start\":\"60203\",\"end\":\"60209\"},{\"start\":\"60425\",\"end\":\"60432\"},{\"start\":\"60744\",\"end\":\"60752\"},{\"start\":\"60756\",\"end\":\"60761\"},{\"start\":\"60765\",\"end\":\"60770\"},{\"start\":\"60774\",\"end\":\"60778\"},{\"start\":\"60782\",\"end\":\"60786\"},{\"start\":\"60790\",\"end\":\"60796\"},{\"start\":\"60802\",\"end\":\"60806\"},{\"start\":\"61144\",\"end\":\"61147\"},{\"start\":\"61151\",\"end\":\"61156\"},{\"start\":\"61160\",\"end\":\"61164\"},{\"start\":\"61168\",\"end\":\"61174\"},{\"start\":\"61180\",\"end\":\"61188\"},{\"start\":\"61195\",\"end\":\"61198\"},{\"start\":\"61202\",\"end\":\"61209\"},{\"start\":\"61493\",\"end\":\"61500\"},{\"start\":\"61504\",\"end\":\"61508\"},{\"start\":\"61707\",\"end\":\"61713\"},{\"start\":\"61717\",\"end\":\"61722\"},{\"start\":\"61919\",\"end\":\"61925\"},{\"start\":\"61929\",\"end\":\"61936\"},{\"start\":\"61940\",\"end\":\"61946\"},{\"start\":\"61950\",\"end\":\"61958\"},{\"start\":\"61962\",\"end\":\"61968\"},{\"start\":\"61972\",\"end\":\"61977\"},{\"start\":\"61981\",\"end\":\"61988\"},{\"start\":\"61992\",\"end\":\"62004\"},{\"start\":\"62008\",\"end\":\"62016\"},{\"start\":\"62020\",\"end\":\"62029\"},{\"start\":\"62033\",\"end\":\"62038\"},{\"start\":\"62042\",\"end\":\"62057\"},{\"start\":\"62061\",\"end\":\"62071\"},{\"start\":\"62550\",\"end\":\"62555\"},{\"start\":\"62559\",\"end\":\"62567\"},{\"start\":\"62573\",\"end\":\"62578\"},{\"start\":\"62582\",\"end\":\"62584\"},{\"start\":\"62588\",\"end\":\"62597\"},{\"start\":\"62889\",\"end\":\"62893\"},{\"start\":\"62899\",\"end\":\"62911\"},{\"start\":\"63181\",\"end\":\"63185\"},{\"start\":\"63191\",\"end\":\"63196\"},{\"start\":\"63479\",\"end\":\"63482\"},{\"start\":\"63486\",\"end\":\"63490\"},{\"start\":\"63498\",\"end\":\"63510\"},{\"start\":\"63786\",\"end\":\"63790\"},{\"start\":\"63796\",\"end\":\"63803\"},{\"start\":\"63809\",\"end\":\"63818\"},{\"start\":\"63826\",\"end\":\"63833\"},{\"start\":\"64219\",\"end\":\"64226\"},{\"start\":\"64230\",\"end\":\"64234\"},{\"start\":\"64590\",\"end\":\"64597\"},{\"start\":\"64603\",\"end\":\"64611\"},{\"start\":\"64619\",\"end\":\"64626\"},{\"start\":\"64909\",\"end\":\"64913\"},{\"start\":\"64917\",\"end\":\"64921\"},{\"start\":\"64925\",\"end\":\"64929\"},{\"start\":\"64933\",\"end\":\"64939\"},{\"start\":\"65156\",\"end\":\"65162\"},{\"start\":\"65363\",\"end\":\"65368\"},{\"start\":\"65372\",\"end\":\"65382\"},{\"start\":\"65386\",\"end\":\"65390\"},{\"start\":\"65394\",\"end\":\"65398\"},{\"start\":\"65402\",\"end\":\"65409\"},{\"start\":\"65613\",\"end\":\"65625\"},{\"start\":\"65859\",\"end\":\"65863\"},{\"start\":\"65867\",\"end\":\"65872\"},{\"start\":\"65876\",\"end\":\"65879\"},{\"start\":\"66192\",\"end\":\"66196\"},{\"start\":\"66200\",\"end\":\"66205\"},{\"start\":\"66211\",\"end\":\"66217\"},{\"start\":\"66223\",\"end\":\"66229\"},{\"start\":\"66526\",\"end\":\"66534\"},{\"start\":\"66538\",\"end\":\"66541\"},{\"start\":\"66815\",\"end\":\"66820\"},{\"start\":\"66824\",\"end\":\"66828\"},{\"start\":\"66836\",\"end\":\"66839\"},{\"start\":\"66843\",\"end\":\"66848\"},{\"start\":\"66862\",\"end\":\"66869\"},{\"start\":\"67191\",\"end\":\"67198\"},{\"start\":\"67204\",\"end\":\"67210\"},{\"start\":\"67214\",\"end\":\"67221\"},{\"start\":\"67480\",\"end\":\"67486\"},{\"start\":\"67490\",\"end\":\"67499\"},{\"start\":\"67505\",\"end\":\"67510\"},{\"start\":\"67514\",\"end\":\"67521\"},{\"start\":\"67525\",\"end\":\"67530\"},{\"start\":\"67534\",\"end\":\"67542\"},{\"start\":\"67546\",\"end\":\"67553\"},{\"start\":\"67557\",\"end\":\"67566\"},{\"start\":\"67570\",\"end\":\"67574\"},{\"start\":\"67578\",\"end\":\"67586\"},{\"start\":\"67988\",\"end\":\"67998\"},{\"start\":\"68002\",\"end\":\"68013\"},{\"start\":\"68017\",\"end\":\"68023\"},{\"start\":\"68030\",\"end\":\"68043\"},{\"start\":\"68715\",\"end\":\"68721\"},{\"start\":\"68727\",\"end\":\"68735\"},{\"start\":\"68739\",\"end\":\"68750\"},{\"start\":\"69405\",\"end\":\"69411\"},{\"start\":\"69415\",\"end\":\"69422\"},{\"start\":\"69426\",\"end\":\"69433\"},{\"start\":\"69437\",\"end\":\"69443\"},{\"start\":\"69447\",\"end\":\"69453\"},{\"start\":\"69461\",\"end\":\"69473\"},{\"start\":\"69477\",\"end\":\"69484\"},{\"start\":\"69488\",\"end\":\"69497\"},{\"start\":\"69505\",\"end\":\"69513\"},{\"start\":\"70190\",\"end\":\"70195\"},{\"start\":\"70199\",\"end\":\"70203\"},{\"start\":\"70388\",\"end\":\"70395\"},{\"start\":\"70399\",\"end\":\"70409\"},{\"start\":\"70413\",\"end\":\"70419\"},{\"start\":\"70423\",\"end\":\"70430\"},{\"start\":\"70666\",\"end\":\"70670\"},{\"start\":\"70674\",\"end\":\"70685\"},{\"start\":\"70689\",\"end\":\"70693\"},{\"start\":\"70697\",\"end\":\"70702\"},{\"start\":\"70970\",\"end\":\"70976\"},{\"start\":\"70980\",\"end\":\"70987\"},{\"start\":\"70991\",\"end\":\"70999\"},{\"start\":\"71267\",\"end\":\"71271\"},{\"start\":\"71275\",\"end\":\"71280\"},{\"start\":\"71474\",\"end\":\"71481\"},{\"start\":\"71485\",\"end\":\"71493\"},{\"start\":\"71850\",\"end\":\"71857\"},{\"start\":\"71863\",\"end\":\"71873\"},{\"start\":\"71877\",\"end\":\"71882\"},{\"start\":\"71888\",\"end\":\"71894\"},{\"start\":\"71898\",\"end\":\"71903\"},{\"start\":\"71909\",\"end\":\"71914\"},{\"start\":\"72203\",\"end\":\"72208\"},{\"start\":\"72212\",\"end\":\"72222\"},{\"start\":\"72226\",\"end\":\"72230\"},{\"start\":\"72234\",\"end\":\"72238\"},{\"start\":\"72242\",\"end\":\"72249\"},{\"start\":\"72557\",\"end\":\"72562\"},{\"start\":\"72566\",\"end\":\"72575\"},{\"start\":\"72579\",\"end\":\"72586\"},{\"start\":\"72959\",\"end\":\"72967\"},{\"start\":\"72971\",\"end\":\"72978\"},{\"start\":\"73450\",\"end\":\"73454\"},{\"start\":\"73458\",\"end\":\"73463\"},{\"start\":\"73467\",\"end\":\"73473\"},{\"start\":\"73477\",\"end\":\"73482\"},{\"start\":\"73486\",\"end\":\"73491\"},{\"start\":\"73495\",\"end\":\"73498\"},{\"start\":\"73502\",\"end\":\"73507\"},{\"start\":\"73785\",\"end\":\"73794\"},{\"start\":\"73798\",\"end\":\"73805\"},{\"start\":\"74144\",\"end\":\"74150\"},{\"start\":\"74654\",\"end\":\"74662\"},{\"start\":\"74666\",\"end\":\"74669\"},{\"start\":\"74673\",\"end\":\"74677\"},{\"start\":\"74681\",\"end\":\"74686\"},{\"start\":\"74883\",\"end\":\"74888\"},{\"start\":\"74892\",\"end\":\"74899\"},{\"start\":\"74903\",\"end\":\"74910\"},{\"start\":\"75217\",\"end\":\"75223\"},{\"start\":\"75227\",\"end\":\"75234\"},{\"start\":\"75240\",\"end\":\"75246\"},{\"start\":\"75252\",\"end\":\"75254\"},{\"start\":\"75258\",\"end\":\"75267\"},{\"start\":\"75455\",\"end\":\"75460\"},{\"start\":\"75685\",\"end\":\"75690\"},{\"start\":\"75694\",\"end\":\"75699\"},{\"start\":\"75705\",\"end\":\"75711\"},{\"start\":\"75717\",\"end\":\"75727\"},{\"start\":\"75731\",\"end\":\"75736\"},{\"start\":\"76350\",\"end\":\"76359\"},{\"start\":\"76363\",\"end\":\"76375\"},{\"start\":\"76381\",\"end\":\"76390\"},{\"start\":\"76731\",\"end\":\"76737\"},{\"start\":\"76743\",\"end\":\"76749\"},{\"start\":\"77321\",\"end\":\"77325\"},{\"start\":\"77329\",\"end\":\"77333\"},{\"start\":\"77337\",\"end\":\"77341\"},{\"start\":\"77343\",\"end\":\"77351\"},{\"start\":\"77606\",\"end\":\"77613\"},{\"start\":\"77617\",\"end\":\"77624\"},{\"start\":\"77628\",\"end\":\"77635\"},{\"start\":\"77639\",\"end\":\"77645\"},{\"start\":\"77649\",\"end\":\"77654\"},{\"start\":\"77658\",\"end\":\"77668\"},{\"start\":\"78419\",\"end\":\"78424\"},{\"start\":\"78532\",\"end\":\"78546\"},{\"start\":\"78774\",\"end\":\"78788\"},{\"start\":\"78792\",\"end\":\"78798\"},{\"start\":\"78802\",\"end\":\"78812\"},{\"start\":\"78816\",\"end\":\"78824\"},{\"start\":\"79501\",\"end\":\"79509\"},{\"start\":\"79513\",\"end\":\"79517\"},{\"start\":\"79521\",\"end\":\"79525\"},{\"start\":\"79529\",\"end\":\"79532\"},{\"start\":\"79536\",\"end\":\"79543\"},{\"start\":\"79547\",\"end\":\"79555\"},{\"start\":\"79559\",\"end\":\"79565\"},{\"start\":\"79569\",\"end\":\"79573\"},{\"start\":\"79577\",\"end\":\"79585\"},{\"start\":\"80282\",\"end\":\"80291\"},{\"start\":\"80295\",\"end\":\"80301\"},{\"start\":\"80307\",\"end\":\"80314\"},{\"start\":\"80659\",\"end\":\"80667\"},{\"start\":\"80671\",\"end\":\"80677\"}]", "bib_entry": "[{\"start\":\"55282\",\"end\":\"55591\",\"attributes\":{\"matched_paper_id\":\"4096056\",\"id\":\"b0\"}},{\"start\":\"55593\",\"end\":\"55826\",\"attributes\":{\"matched_paper_id\":\"221855481\",\"id\":\"b1\"}},{\"start\":\"55828\",\"end\":\"56069\",\"attributes\":{\"matched_paper_id\":\"13662098\",\"id\":\"b2\"}},{\"start\":\"56071\",\"end\":\"56402\",\"attributes\":{\"matched_paper_id\":\"17606249\",\"id\":\"b3\"}},{\"start\":\"56404\",\"end\":\"56466\",\"attributes\":{\"id\":\"b4\",\"doi\":\"10.1145/2928270\"}},{\"start\":\"56468\",\"end\":\"56849\",\"attributes\":{\"matched_paper_id\":\"451579\",\"id\":\"b5\"}},{\"start\":\"56851\",\"end\":\"57200\",\"attributes\":{\"matched_paper_id\":\"52276113\",\"id\":\"b6\"}},{\"start\":\"57202\",\"end\":\"57456\",\"attributes\":{\"matched_paper_id\":\"2482823\",\"id\":\"b7\"}},{\"start\":\"57458\",\"end\":\"57774\",\"attributes\":{\"matched_paper_id\":\"46894476\",\"id\":\"b8\"}},{\"start\":\"57776\",\"end\":\"58103\",\"attributes\":{\"matched_paper_id\":\"59618215\",\"id\":\"b9\"}},{\"start\":\"58105\",\"end\":\"58467\",\"attributes\":{\"matched_paper_id\":\"51879473\",\"id\":\"b10\"}},{\"start\":\"58469\",\"end\":\"58725\",\"attributes\":{\"matched_paper_id\":\"15857056\",\"id\":\"b11\"}},{\"start\":\"58727\",\"end\":\"58993\",\"attributes\":{\"matched_paper_id\":\"9556453\",\"id\":\"b12\"}},{\"start\":\"58995\",\"end\":\"59197\",\"attributes\":{\"matched_paper_id\":\"1340257\",\"id\":\"b13\"}},{\"start\":\"59199\",\"end\":\"59474\",\"attributes\":{\"matched_paper_id\":\"215755891\",\"id\":\"b14\"}},{\"start\":\"59476\",\"end\":\"59784\",\"attributes\":{\"matched_paper_id\":\"23118082\",\"id\":\"b15\"}},{\"start\":\"59786\",\"end\":\"60132\",\"attributes\":{\"matched_paper_id\":\"14292124\",\"id\":\"b16\"}},{\"start\":\"60134\",\"end\":\"60382\",\"attributes\":{\"id\":\"b17\"}},{\"start\":\"60384\",\"end\":\"60597\",\"attributes\":{\"matched_paper_id\":\"8911258\",\"id\":\"b18\"}},{\"start\":\"60599\",\"end\":\"60677\",\"attributes\":{\"id\":\"b19\",\"doi\":\"10.1145/1186736.1186737\"}},{\"start\":\"60679\",\"end\":\"61021\",\"attributes\":{\"matched_paper_id\":\"1264294\",\"id\":\"b20\"}},{\"start\":\"61023\",\"end\":\"61084\",\"attributes\":{\"id\":\"b21\",\"doi\":\"10.1109/2.722293\"}},{\"start\":\"61086\",\"end\":\"61433\",\"attributes\":{\"matched_paper_id\":\"206915521\",\"id\":\"b22\"}},{\"start\":\"61435\",\"end\":\"61642\",\"attributes\":{\"id\":\"b23\"}},{\"start\":\"61644\",\"end\":\"61915\",\"attributes\":{\"matched_paper_id\":\"15362498\",\"id\":\"b24\",\"doi\":\"1- 20:29\"}},{\"start\":\"61917\",\"end\":\"62467\",\"attributes\":{\"id\":\"b25\",\"doi\":\"10.1177/109434209100500306\"}},{\"start\":\"62469\",\"end\":\"62814\",\"attributes\":{\"matched_paper_id\":\"14699409\",\"id\":\"b26\"}},{\"start\":\"62816\",\"end\":\"63090\",\"attributes\":{\"matched_paper_id\":\"2879163\",\"id\":\"b27\"}},{\"start\":\"63092\",\"end\":\"63391\",\"attributes\":{\"matched_paper_id\":\"8124243\",\"id\":\"b28\"}},{\"start\":\"63393\",\"end\":\"63721\",\"attributes\":{\"matched_paper_id\":\"13219479\",\"id\":\"b29\"}},{\"start\":\"63723\",\"end\":\"64137\",\"attributes\":{\"matched_paper_id\":\"25187059\",\"id\":\"b30\",\"doi\":\"10.1145/3158117\"}},{\"start\":\"64139\",\"end\":\"64489\",\"attributes\":{\"matched_paper_id\":\"978769\",\"id\":\"b31\"}},{\"start\":\"64491\",\"end\":\"64858\",\"attributes\":{\"matched_paper_id\":\"225042210\",\"id\":\"b32\"}},{\"start\":\"64860\",\"end\":\"65109\",\"attributes\":{\"matched_paper_id\":\"868674\",\"id\":\"b33\"}},{\"start\":\"65111\",\"end\":\"65315\",\"attributes\":{\"matched_paper_id\":\"7854890\",\"id\":\"b34\"}},{\"start\":\"65317\",\"end\":\"65611\",\"attributes\":{\"matched_paper_id\":\"71150716\",\"id\":\"b35\"}},{\"start\":\"65613\",\"end\":\"65760\",\"attributes\":{\"id\":\"b36\"}},{\"start\":\"65762\",\"end\":\"66096\",\"attributes\":{\"id\":\"b37\"}},{\"start\":\"66098\",\"end\":\"66452\",\"attributes\":{\"matched_paper_id\":\"14699842\",\"id\":\"b38\"}},{\"start\":\"66454\",\"end\":\"66723\",\"attributes\":{\"matched_paper_id\":\"174799695\",\"id\":\"b39\"}},{\"start\":\"66725\",\"end\":\"67147\",\"attributes\":{\"id\":\"b40\"}},{\"start\":\"67149\",\"end\":\"67415\",\"attributes\":{\"matched_paper_id\":\"58535180\",\"id\":\"b41\"}},{\"start\":\"67417\",\"end\":\"67912\",\"attributes\":{\"matched_paper_id\":\"16124383\",\"id\":\"b42\"}},{\"start\":\"67914\",\"end\":\"68649\",\"attributes\":{\"matched_paper_id\":\"207565232\",\"id\":\"b43\",\"doi\":\"10.1145/781131.781141\"}},{\"start\":\"68651\",\"end\":\"69345\",\"attributes\":{\"matched_paper_id\":\"7097187\",\"id\":\"b44\",\"doi\":\"10.1145/314403.314414\"}},{\"start\":\"69347\",\"end\":\"70145\",\"attributes\":{\"matched_paper_id\":\"7891873\",\"id\":\"b45\",\"doi\":\"10.1109/CGO.2006.37\"}},{\"start\":\"70147\",\"end\":\"70344\",\"attributes\":{\"matched_paper_id\":\"5246200\",\"id\":\"b46\"}},{\"start\":\"70346\",\"end\":\"70606\",\"attributes\":{\"matched_paper_id\":\"49362428\",\"id\":\"b47\"}},{\"start\":\"70608\",\"end\":\"70912\",\"attributes\":{\"matched_paper_id\":\"4710028\",\"id\":\"b48\",\"doi\":\"1-40:29\"}},{\"start\":\"70914\",\"end\":\"71212\",\"attributes\":{\"matched_paper_id\":\"2788086\",\"id\":\"b49\"}},{\"start\":\"71214\",\"end\":\"71441\",\"attributes\":{\"matched_paper_id\":\"53081316\",\"id\":\"b50\"}},{\"start\":\"71443\",\"end\":\"71773\",\"attributes\":{\"matched_paper_id\":\"3114196\",\"id\":\"b51\"}},{\"start\":\"71775\",\"end\":\"72151\",\"attributes\":{\"matched_paper_id\":\"759854\",\"id\":\"b52\"}},{\"start\":\"72153\",\"end\":\"72438\",\"attributes\":{\"matched_paper_id\":\"219397174\",\"id\":\"b53\"}},{\"start\":\"72440\",\"end\":\"72857\",\"attributes\":{\"matched_paper_id\":\"2363998\",\"id\":\"b54\"}},{\"start\":\"72859\",\"end\":\"73416\",\"attributes\":{\"matched_paper_id\":\"51822929\",\"id\":\"b55\"}},{\"start\":\"73418\",\"end\":\"73674\",\"attributes\":{\"matched_paper_id\":\"207925991\",\"id\":\"b56\"}},{\"start\":\"73676\",\"end\":\"74077\",\"attributes\":{\"matched_paper_id\":\"28542604\",\"id\":\"b57\"}},{\"start\":\"74079\",\"end\":\"74601\",\"attributes\":{\"matched_paper_id\":\"3418906\",\"id\":\"b58\",\"doi\":\"10.1145/3178372.3179521\"}},{\"start\":\"74603\",\"end\":\"74848\",\"attributes\":{\"matched_paper_id\":\"440163\",\"id\":\"b59\"}},{\"start\":\"74850\",\"end\":\"75062\",\"attributes\":{\"matched_paper_id\":\"1846253\",\"id\":\"b60\"}},{\"start\":\"75064\",\"end\":\"75138\",\"attributes\":{\"id\":\"b61\",\"doi\":\"10.1145/773473.178256\"}},{\"start\":\"75140\",\"end\":\"75410\",\"attributes\":{\"id\":\"b62\"}},{\"start\":\"75412\",\"end\":\"75663\",\"attributes\":{\"matched_paper_id\":\"14897038\",\"id\":\"b63\",\"doi\":\"10.1145/390013.808480\"}},{\"start\":\"75665\",\"end\":\"76294\",\"attributes\":{\"matched_paper_id\":\"1073985\",\"id\":\"b64\",\"doi\":\"10.1145/258915.258947\"}},{\"start\":\"76296\",\"end\":\"76685\",\"attributes\":{\"matched_paper_id\":\"16456933\",\"id\":\"b65\",\"doi\":\"10.1145/357153.357155\"}},{\"start\":\"76687\",\"end\":\"77294\",\"attributes\":{\"matched_paper_id\":\"7367561\",\"id\":\"b66\",\"doi\":\"10.1145/178243.178257\"}},{\"start\":\"77296\",\"end\":\"77566\",\"attributes\":{\"matched_paper_id\":\"53700272\",\"id\":\"b67\"}},{\"start\":\"77568\",\"end\":\"78384\",\"attributes\":{\"matched_paper_id\":\"10384296\",\"id\":\"b68\",\"doi\":\"10.1109/CGO.2007.14\"}},{\"start\":\"78386\",\"end\":\"78486\",\"attributes\":{\"id\":\"b69\"}},{\"start\":\"78488\",\"end\":\"78712\",\"attributes\":{\"id\":\"b70\"}},{\"start\":\"78714\",\"end\":\"79449\",\"attributes\":{\"matched_paper_id\":\"18229717\",\"id\":\"b71\",\"doi\":\"10.1145/2597809.2597811\"}},{\"start\":\"79451\",\"end\":\"80218\",\"attributes\":{\"matched_paper_id\":\"13428632\",\"id\":\"b72\",\"doi\":\"10.1145/780732.780735\"}},{\"start\":\"80220\",\"end\":\"80600\",\"attributes\":{\"matched_paper_id\":\"8972636\",\"id\":\"b73\"}},{\"start\":\"80602\",\"end\":\"80768\",\"attributes\":{\"id\":\"b74\"}}]", "bib_title": "[{\"start\":\"55282\",\"end\":\"55336\"},{\"start\":\"55593\",\"end\":\"55648\"},{\"start\":\"55828\",\"end\":\"55869\"},{\"start\":\"56071\",\"end\":\"56132\"},{\"start\":\"56468\",\"end\":\"56562\"},{\"start\":\"56851\",\"end\":\"56931\"},{\"start\":\"57202\",\"end\":\"57230\"},{\"start\":\"57458\",\"end\":\"57528\"},{\"start\":\"57776\",\"end\":\"57850\"},{\"start\":\"58105\",\"end\":\"58181\"},{\"start\":\"58469\",\"end\":\"58518\"},{\"start\":\"58727\",\"end\":\"58761\"},{\"start\":\"58995\",\"end\":\"59026\"},{\"start\":\"59199\",\"end\":\"59246\"},{\"start\":\"59476\",\"end\":\"59532\"},{\"start\":\"59786\",\"end\":\"59854\"},{\"start\":\"60384\",\"end\":\"60419\"},{\"start\":\"60679\",\"end\":\"60740\"},{\"start\":\"61086\",\"end\":\"61140\"},{\"start\":\"61644\",\"end\":\"61703\"},{\"start\":\"62469\",\"end\":\"62546\"},{\"start\":\"62816\",\"end\":\"62885\"},{\"start\":\"63092\",\"end\":\"63177\"},{\"start\":\"63393\",\"end\":\"63475\"},{\"start\":\"63723\",\"end\":\"63778\"},{\"start\":\"64139\",\"end\":\"64215\"},{\"start\":\"64491\",\"end\":\"64584\"},{\"start\":\"64860\",\"end\":\"64905\"},{\"start\":\"65111\",\"end\":\"65152\"},{\"start\":\"65317\",\"end\":\"65355\"},{\"start\":\"66098\",\"end\":\"66188\"},{\"start\":\"66454\",\"end\":\"66522\"},{\"start\":\"67149\",\"end\":\"67183\"},{\"start\":\"67417\",\"end\":\"67476\"},{\"start\":\"67914\",\"end\":\"67984\"},{\"start\":\"68651\",\"end\":\"68709\"},{\"start\":\"69347\",\"end\":\"69401\"},{\"start\":\"70147\",\"end\":\"70186\"},{\"start\":\"70346\",\"end\":\"70384\"},{\"start\":\"70608\",\"end\":\"70662\"},{\"start\":\"70914\",\"end\":\"70966\"},{\"start\":\"71214\",\"end\":\"71263\"},{\"start\":\"71443\",\"end\":\"71470\"},{\"start\":\"71775\",\"end\":\"71844\"},{\"start\":\"72153\",\"end\":\"72195\"},{\"start\":\"72440\",\"end\":\"72553\"},{\"start\":\"72859\",\"end\":\"72955\"},{\"start\":\"73418\",\"end\":\"73446\"},{\"start\":\"73676\",\"end\":\"73781\"},{\"start\":\"74079\",\"end\":\"74140\"},{\"start\":\"74603\",\"end\":\"74650\"},{\"start\":\"74850\",\"end\":\"74879\"},{\"start\":\"75412\",\"end\":\"75451\"},{\"start\":\"75665\",\"end\":\"75681\"},{\"start\":\"76296\",\"end\":\"76344\"},{\"start\":\"76687\",\"end\":\"76727\"},{\"start\":\"77296\",\"end\":\"77317\"},{\"start\":\"77568\",\"end\":\"77602\"},{\"start\":\"78714\",\"end\":\"78768\"},{\"start\":\"79451\",\"end\":\"79497\"},{\"start\":\"80220\",\"end\":\"80278\"}]", "bib_author": "[{\"start\":\"55338\",\"end\":\"55351\"},{\"start\":\"55351\",\"end\":\"55362\"},{\"start\":\"55362\",\"end\":\"55373\"},{\"start\":\"55373\",\"end\":\"55384\"},{\"start\":\"55384\",\"end\":\"55395\"},{\"start\":\"55650\",\"end\":\"55661\"},{\"start\":\"55661\",\"end\":\"55672\"},{\"start\":\"55871\",\"end\":\"55879\"},{\"start\":\"55879\",\"end\":\"55899\"},{\"start\":\"56134\",\"end\":\"56147\"},{\"start\":\"56147\",\"end\":\"56158\"},{\"start\":\"56158\",\"end\":\"56169\"},{\"start\":\"56169\",\"end\":\"56177\"},{\"start\":\"56177\",\"end\":\"56188\"},{\"start\":\"56188\",\"end\":\"56199\"},{\"start\":\"56564\",\"end\":\"56576\"},{\"start\":\"56576\",\"end\":\"56585\"},{\"start\":\"56585\",\"end\":\"56595\"},{\"start\":\"56595\",\"end\":\"56603\"},{\"start\":\"56603\",\"end\":\"56613\"},{\"start\":\"56933\",\"end\":\"56944\"},{\"start\":\"56944\",\"end\":\"56961\"},{\"start\":\"56961\",\"end\":\"56975\"},{\"start\":\"57232\",\"end\":\"57252\"},{\"start\":\"57252\",\"end\":\"57262\"},{\"start\":\"57262\",\"end\":\"57271\"},{\"start\":\"57271\",\"end\":\"57283\"},{\"start\":\"57530\",\"end\":\"57551\"},{\"start\":\"57551\",\"end\":\"57565\"},{\"start\":\"57852\",\"end\":\"57862\"},{\"start\":\"57862\",\"end\":\"57874\"},{\"start\":\"57874\",\"end\":\"57885\"},{\"start\":\"57885\",\"end\":\"57900\"},{\"start\":\"58183\",\"end\":\"58200\"},{\"start\":\"58200\",\"end\":\"58216\"},{\"start\":\"58216\",\"end\":\"58225\"},{\"start\":\"58520\",\"end\":\"58530\"},{\"start\":\"58530\",\"end\":\"58539\"},{\"start\":\"58763\",\"end\":\"58772\"},{\"start\":\"58772\",\"end\":\"58785\"},{\"start\":\"58785\",\"end\":\"58796\"},{\"start\":\"58796\",\"end\":\"58808\"},{\"start\":\"58808\",\"end\":\"58817\"},{\"start\":\"59028\",\"end\":\"59040\"},{\"start\":\"59040\",\"end\":\"59050\"},{\"start\":\"59050\",\"end\":\"59059\"},{\"start\":\"59248\",\"end\":\"59259\"},{\"start\":\"59259\",\"end\":\"59273\"},{\"start\":\"59273\",\"end\":\"59281\"},{\"start\":\"59281\",\"end\":\"59292\"},{\"start\":\"59534\",\"end\":\"59544\"},{\"start\":\"59544\",\"end\":\"59561\"},{\"start\":\"59561\",\"end\":\"59575\"},{\"start\":\"59575\",\"end\":\"59590\"},{\"start\":\"59856\",\"end\":\"59865\"},{\"start\":\"59865\",\"end\":\"59876\"},{\"start\":\"59876\",\"end\":\"59886\"},{\"start\":\"59886\",\"end\":\"59898\"},{\"start\":\"60191\",\"end\":\"60199\"},{\"start\":\"60199\",\"end\":\"60211\"},{\"start\":\"60421\",\"end\":\"60434\"},{\"start\":\"60742\",\"end\":\"60754\"},{\"start\":\"60754\",\"end\":\"60763\"},{\"start\":\"60763\",\"end\":\"60772\"},{\"start\":\"60772\",\"end\":\"60780\"},{\"start\":\"60780\",\"end\":\"60788\"},{\"start\":\"60788\",\"end\":\"60798\"},{\"start\":\"60798\",\"end\":\"60808\"},{\"start\":\"61142\",\"end\":\"61149\"},{\"start\":\"61149\",\"end\":\"61158\"},{\"start\":\"61158\",\"end\":\"61166\"},{\"start\":\"61166\",\"end\":\"61176\"},{\"start\":\"61176\",\"end\":\"61190\"},{\"start\":\"61190\",\"end\":\"61200\"},{\"start\":\"61200\",\"end\":\"61211\"},{\"start\":\"61488\",\"end\":\"61502\"},{\"start\":\"61502\",\"end\":\"61510\"},{\"start\":\"61705\",\"end\":\"61715\"},{\"start\":\"61715\",\"end\":\"61724\"},{\"start\":\"61917\",\"end\":\"61927\"},{\"start\":\"61927\",\"end\":\"61938\"},{\"start\":\"61938\",\"end\":\"61948\"},{\"start\":\"61948\",\"end\":\"61960\"},{\"start\":\"61960\",\"end\":\"61970\"},{\"start\":\"61970\",\"end\":\"61979\"},{\"start\":\"61979\",\"end\":\"61990\"},{\"start\":\"61990\",\"end\":\"62006\"},{\"start\":\"62006\",\"end\":\"62018\"},{\"start\":\"62018\",\"end\":\"62031\"},{\"start\":\"62031\",\"end\":\"62040\"},{\"start\":\"62040\",\"end\":\"62059\"},{\"start\":\"62059\",\"end\":\"62073\"},{\"start\":\"62548\",\"end\":\"62557\"},{\"start\":\"62557\",\"end\":\"62569\"},{\"start\":\"62569\",\"end\":\"62580\"},{\"start\":\"62580\",\"end\":\"62586\"},{\"start\":\"62586\",\"end\":\"62599\"},{\"start\":\"62887\",\"end\":\"62895\"},{\"start\":\"62895\",\"end\":\"62913\"},{\"start\":\"63179\",\"end\":\"63187\"},{\"start\":\"63187\",\"end\":\"63198\"},{\"start\":\"63477\",\"end\":\"63484\"},{\"start\":\"63484\",\"end\":\"63492\"},{\"start\":\"63492\",\"end\":\"63512\"},{\"start\":\"63780\",\"end\":\"63792\"},{\"start\":\"63792\",\"end\":\"63805\"},{\"start\":\"63805\",\"end\":\"63820\"},{\"start\":\"63820\",\"end\":\"63835\"},{\"start\":\"64217\",\"end\":\"64228\"},{\"start\":\"64228\",\"end\":\"64236\"},{\"start\":\"64586\",\"end\":\"64599\"},{\"start\":\"64599\",\"end\":\"64613\"},{\"start\":\"64613\",\"end\":\"64628\"},{\"start\":\"64907\",\"end\":\"64915\"},{\"start\":\"64915\",\"end\":\"64923\"},{\"start\":\"64923\",\"end\":\"64931\"},{\"start\":\"64931\",\"end\":\"64941\"},{\"start\":\"65154\",\"end\":\"65164\"},{\"start\":\"65357\",\"end\":\"65370\"},{\"start\":\"65370\",\"end\":\"65384\"},{\"start\":\"65384\",\"end\":\"65392\"},{\"start\":\"65392\",\"end\":\"65400\"},{\"start\":\"65400\",\"end\":\"65411\"},{\"start\":\"65613\",\"end\":\"65627\"},{\"start\":\"65857\",\"end\":\"65865\"},{\"start\":\"65865\",\"end\":\"65874\"},{\"start\":\"65874\",\"end\":\"65881\"},{\"start\":\"66190\",\"end\":\"66198\"},{\"start\":\"66198\",\"end\":\"66207\"},{\"start\":\"66207\",\"end\":\"66219\"},{\"start\":\"66219\",\"end\":\"66231\"},{\"start\":\"66524\",\"end\":\"66536\"},{\"start\":\"66536\",\"end\":\"66543\"},{\"start\":\"66811\",\"end\":\"66822\"},{\"start\":\"66822\",\"end\":\"66830\"},{\"start\":\"66830\",\"end\":\"66841\"},{\"start\":\"66841\",\"end\":\"66850\"},{\"start\":\"66850\",\"end\":\"66856\"},{\"start\":\"66856\",\"end\":\"66871\"},{\"start\":\"67185\",\"end\":\"67200\"},{\"start\":\"67200\",\"end\":\"67212\"},{\"start\":\"67212\",\"end\":\"67223\"},{\"start\":\"67478\",\"end\":\"67488\"},{\"start\":\"67488\",\"end\":\"67501\"},{\"start\":\"67501\",\"end\":\"67512\"},{\"start\":\"67512\",\"end\":\"67523\"},{\"start\":\"67523\",\"end\":\"67532\"},{\"start\":\"67532\",\"end\":\"67544\"},{\"start\":\"67544\",\"end\":\"67555\"},{\"start\":\"67555\",\"end\":\"67568\"},{\"start\":\"67568\",\"end\":\"67576\"},{\"start\":\"67576\",\"end\":\"67588\"},{\"start\":\"67986\",\"end\":\"68000\"},{\"start\":\"68000\",\"end\":\"68015\"},{\"start\":\"68015\",\"end\":\"68025\"},{\"start\":\"68025\",\"end\":\"68045\"},{\"start\":\"68711\",\"end\":\"68723\"},{\"start\":\"68723\",\"end\":\"68737\"},{\"start\":\"68737\",\"end\":\"68752\"},{\"start\":\"69403\",\"end\":\"69413\"},{\"start\":\"69413\",\"end\":\"69424\"},{\"start\":\"69424\",\"end\":\"69435\"},{\"start\":\"69435\",\"end\":\"69445\"},{\"start\":\"69445\",\"end\":\"69455\"},{\"start\":\"69455\",\"end\":\"69475\"},{\"start\":\"69475\",\"end\":\"69486\"},{\"start\":\"69486\",\"end\":\"69499\"},{\"start\":\"69499\",\"end\":\"69515\"},{\"start\":\"70188\",\"end\":\"70197\"},{\"start\":\"70197\",\"end\":\"70205\"},{\"start\":\"70386\",\"end\":\"70397\"},{\"start\":\"70397\",\"end\":\"70411\"},{\"start\":\"70411\",\"end\":\"70421\"},{\"start\":\"70421\",\"end\":\"70432\"},{\"start\":\"70664\",\"end\":\"70672\"},{\"start\":\"70672\",\"end\":\"70687\"},{\"start\":\"70687\",\"end\":\"70695\"},{\"start\":\"70695\",\"end\":\"70704\"},{\"start\":\"70968\",\"end\":\"70978\"},{\"start\":\"70978\",\"end\":\"70989\"},{\"start\":\"70989\",\"end\":\"71001\"},{\"start\":\"71265\",\"end\":\"71273\"},{\"start\":\"71273\",\"end\":\"71282\"},{\"start\":\"71472\",\"end\":\"71483\"},{\"start\":\"71483\",\"end\":\"71495\"},{\"start\":\"71846\",\"end\":\"71859\"},{\"start\":\"71859\",\"end\":\"71875\"},{\"start\":\"71875\",\"end\":\"71884\"},{\"start\":\"71884\",\"end\":\"71896\"},{\"start\":\"71896\",\"end\":\"71905\"},{\"start\":\"71905\",\"end\":\"71916\"},{\"start\":\"72197\",\"end\":\"72210\"},{\"start\":\"72210\",\"end\":\"72224\"},{\"start\":\"72224\",\"end\":\"72232\"},{\"start\":\"72232\",\"end\":\"72240\"},{\"start\":\"72240\",\"end\":\"72251\"},{\"start\":\"72555\",\"end\":\"72564\"},{\"start\":\"72564\",\"end\":\"72577\"},{\"start\":\"72577\",\"end\":\"72588\"},{\"start\":\"72957\",\"end\":\"72969\"},{\"start\":\"72969\",\"end\":\"72980\"},{\"start\":\"73448\",\"end\":\"73456\"},{\"start\":\"73456\",\"end\":\"73465\"},{\"start\":\"73465\",\"end\":\"73475\"},{\"start\":\"73475\",\"end\":\"73484\"},{\"start\":\"73484\",\"end\":\"73493\"},{\"start\":\"73493\",\"end\":\"73500\"},{\"start\":\"73500\",\"end\":\"73509\"},{\"start\":\"73783\",\"end\":\"73796\"},{\"start\":\"73796\",\"end\":\"73807\"},{\"start\":\"74142\",\"end\":\"74152\"},{\"start\":\"74652\",\"end\":\"74664\"},{\"start\":\"74664\",\"end\":\"74671\"},{\"start\":\"74671\",\"end\":\"74679\"},{\"start\":\"74679\",\"end\":\"74688\"},{\"start\":\"74881\",\"end\":\"74890\"},{\"start\":\"74890\",\"end\":\"74901\"},{\"start\":\"74901\",\"end\":\"74912\"},{\"start\":\"75215\",\"end\":\"75225\"},{\"start\":\"75225\",\"end\":\"75236\"},{\"start\":\"75236\",\"end\":\"75248\"},{\"start\":\"75248\",\"end\":\"75256\"},{\"start\":\"75256\",\"end\":\"75269\"},{\"start\":\"75453\",\"end\":\"75462\"},{\"start\":\"75683\",\"end\":\"75692\"},{\"start\":\"75692\",\"end\":\"75701\"},{\"start\":\"75701\",\"end\":\"75713\"},{\"start\":\"75713\",\"end\":\"75729\"},{\"start\":\"75729\",\"end\":\"75738\"},{\"start\":\"76346\",\"end\":\"76361\"},{\"start\":\"76361\",\"end\":\"76377\"},{\"start\":\"76377\",\"end\":\"76392\"},{\"start\":\"76729\",\"end\":\"76739\"},{\"start\":\"76739\",\"end\":\"76751\"},{\"start\":\"77319\",\"end\":\"77327\"},{\"start\":\"77327\",\"end\":\"77335\"},{\"start\":\"77335\",\"end\":\"77343\"},{\"start\":\"77343\",\"end\":\"77353\"},{\"start\":\"77604\",\"end\":\"77615\"},{\"start\":\"77615\",\"end\":\"77626\"},{\"start\":\"77626\",\"end\":\"77637\"},{\"start\":\"77637\",\"end\":\"77647\"},{\"start\":\"77647\",\"end\":\"77656\"},{\"start\":\"77656\",\"end\":\"77670\"},{\"start\":\"78417\",\"end\":\"78426\"},{\"start\":\"78528\",\"end\":\"78548\"},{\"start\":\"78770\",\"end\":\"78790\"},{\"start\":\"78790\",\"end\":\"78800\"},{\"start\":\"78800\",\"end\":\"78814\"},{\"start\":\"78814\",\"end\":\"78826\"},{\"start\":\"79499\",\"end\":\"79511\"},{\"start\":\"79511\",\"end\":\"79519\"},{\"start\":\"79519\",\"end\":\"79527\"},{\"start\":\"79527\",\"end\":\"79534\"},{\"start\":\"79534\",\"end\":\"79545\"},{\"start\":\"79545\",\"end\":\"79557\"},{\"start\":\"79557\",\"end\":\"79567\"},{\"start\":\"79567\",\"end\":\"79575\"},{\"start\":\"79575\",\"end\":\"79587\"},{\"start\":\"80280\",\"end\":\"80293\"},{\"start\":\"80293\",\"end\":\"80303\"},{\"start\":\"80303\",\"end\":\"80316\"},{\"start\":\"80657\",\"end\":\"80669\"},{\"start\":\"80669\",\"end\":\"80679\"}]", "bib_venue": "[{\"start\":\"55677\",\"end\":\"55696\"},{\"start\":\"56620\",\"end\":\"56637\"},{\"start\":\"57291\",\"end\":\"57308\"},{\"start\":\"58545\",\"end\":\"58562\"},{\"start\":\"58823\",\"end\":\"58837\"},{\"start\":\"59297\",\"end\":\"59316\"},{\"start\":\"59903\",\"end\":\"59922\"},{\"start\":\"61218\",\"end\":\"61237\"},{\"start\":\"62604\",\"end\":\"62621\"},{\"start\":\"62920\",\"end\":\"62937\"},{\"start\":\"63204\",\"end\":\"63221\"},{\"start\":\"63518\",\"end\":\"63539\"},{\"start\":\"64241\",\"end\":\"64260\"},{\"start\":\"64634\",\"end\":\"64651\"},{\"start\":\"64947\",\"end\":\"64964\"},{\"start\":\"65172\",\"end\":\"65191\"},{\"start\":\"65416\",\"end\":\"65435\"},{\"start\":\"66237\",\"end\":\"66254\"},{\"start\":\"66549\",\"end\":\"66568\"},{\"start\":\"68179\",\"end\":\"68292\"},{\"start\":\"68891\",\"end\":\"69009\"},{\"start\":\"69628\",\"end\":\"69724\"},{\"start\":\"70439\",\"end\":\"70456\"},{\"start\":\"71007\",\"end\":\"71026\"},{\"start\":\"71292\",\"end\":\"71309\"},{\"start\":\"71559\",\"end\":\"71606\"},{\"start\":\"71921\",\"end\":\"71940\"},{\"start\":\"72257\",\"end\":\"72274\"},{\"start\":\"73070\",\"end\":\"73152\"},{\"start\":\"74250\",\"end\":\"74325\"},{\"start\":\"75872\",\"end\":\"75985\"},{\"start\":\"76885\",\"end\":\"76998\"},{\"start\":\"77401\",\"end\":\"77432\"},{\"start\":\"77783\",\"end\":\"77879\"},{\"start\":\"78971\",\"end\":\"79093\"},{\"start\":\"79725\",\"end\":\"79842\"},{\"start\":\"55395\",\"end\":\"55407\"},{\"start\":\"55672\",\"end\":\"55675\"},{\"start\":\"55899\",\"end\":\"55922\"},{\"start\":\"56199\",\"end\":\"56203\"},{\"start\":\"56613\",\"end\":\"56618\"},{\"start\":\"56975\",\"end\":\"56998\"},{\"start\":\"57283\",\"end\":\"57289\"},{\"start\":\"57565\",\"end\":\"57590\"},{\"start\":\"57900\",\"end\":\"57905\"},{\"start\":\"58225\",\"end\":\"58261\"},{\"start\":\"58539\",\"end\":\"58543\"},{\"start\":\"58817\",\"end\":\"58821\"},{\"start\":\"59059\",\"end\":\"59070\"},{\"start\":\"59292\",\"end\":\"59295\"},{\"start\":\"59590\",\"end\":\"59596\"},{\"start\":\"59898\",\"end\":\"59901\"},{\"start\":\"60134\",\"end\":\"60189\"},{\"start\":\"60434\",\"end\":\"60462\"},{\"start\":\"60808\",\"end\":\"60816\"},{\"start\":\"61211\",\"end\":\"61216\"},{\"start\":\"61435\",\"end\":\"61486\"},{\"start\":\"61732\",\"end\":\"61757\"},{\"start\":\"62099\",\"end\":\"62126\"},{\"start\":\"62599\",\"end\":\"62602\"},{\"start\":\"62913\",\"end\":\"62918\"},{\"start\":\"63198\",\"end\":\"63202\"},{\"start\":\"63512\",\"end\":\"63516\"},{\"start\":\"63850\",\"end\":\"63873\"},{\"start\":\"64236\",\"end\":\"64239\"},{\"start\":\"64628\",\"end\":\"64632\"},{\"start\":\"64941\",\"end\":\"64945\"},{\"start\":\"65164\",\"end\":\"65170\"},{\"start\":\"65411\",\"end\":\"65414\"},{\"start\":\"65627\",\"end\":\"65680\"},{\"start\":\"65762\",\"end\":\"65855\"},{\"start\":\"66231\",\"end\":\"66235\"},{\"start\":\"66543\",\"end\":\"66547\"},{\"start\":\"66725\",\"end\":\"66809\"},{\"start\":\"67223\",\"end\":\"67252\"},{\"start\":\"67588\",\"end\":\"67633\"},{\"start\":\"68066\",\"end\":\"68177\"},{\"start\":\"68773\",\"end\":\"68889\"},{\"start\":\"69534\",\"end\":\"69626\"},{\"start\":\"70205\",\"end\":\"70222\"},{\"start\":\"70432\",\"end\":\"70437\"},{\"start\":\"70711\",\"end\":\"70734\"},{\"start\":\"71001\",\"end\":\"71005\"},{\"start\":\"71282\",\"end\":\"71290\"},{\"start\":\"71495\",\"end\":\"71557\"},{\"start\":\"71916\",\"end\":\"71919\"},{\"start\":\"72251\",\"end\":\"72255\"},{\"start\":\"72588\",\"end\":\"72629\"},{\"start\":\"72980\",\"end\":\"73068\"},{\"start\":\"73509\",\"end\":\"73525\"},{\"start\":\"73807\",\"end\":\"73857\"},{\"start\":\"74175\",\"end\":\"74248\"},{\"start\":\"74688\",\"end\":\"74699\"},{\"start\":\"74912\",\"end\":\"74923\"},{\"start\":\"75140\",\"end\":\"75213\"},{\"start\":\"75483\",\"end\":\"75494\"},{\"start\":\"75759\",\"end\":\"75870\"},{\"start\":\"76413\",\"end\":\"76443\"},{\"start\":\"76772\",\"end\":\"76883\"},{\"start\":\"77353\",\"end\":\"77399\"},{\"start\":\"77689\",\"end\":\"77781\"},{\"start\":\"78386\",\"end\":\"78415\"},{\"start\":\"78488\",\"end\":\"78526\"},{\"start\":\"78849\",\"end\":\"78969\"},{\"start\":\"79608\",\"end\":\"79723\"},{\"start\":\"80316\",\"end\":\"80353\"},{\"start\":\"80602\",\"end\":\"80655\"}]"}}}, "year": 2023, "month": 12, "day": 17}