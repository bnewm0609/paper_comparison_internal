{"id": 253523563, "updated": "2023-10-05 08:21:16.678", "metadata": {"title": "Security Closure of IC Layouts Against Hardware Trojans", "authors": "[{\"first\":\"Fangzhou\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Qijing\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Bangqi\",\"last\":\"Fu\",\"middle\":[]},{\"first\":\"Shui\",\"last\":\"Jiang\",\"middle\":[]},{\"first\":\"Xiaopeng\",\"last\":\"Zhang\",\"middle\":[]},{\"first\":\"Lilas\",\"last\":\"Alrahis\",\"middle\":[]},{\"first\":\"Ozgur\",\"last\":\"Sinanoglu\",\"middle\":[]},{\"first\":\"Johann\",\"last\":\"Knechtel\",\"middle\":[]},{\"first\":\"Tsung-Yi\",\"last\":\"Ho\",\"middle\":[]},{\"first\":\"Evangeline\",\"last\":\"Young\",\"middle\":[\"F.\",\"Y.\"]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Due to cost benefits, supply chains of integrated circuits (ICs) are largely outsourced nowadays. However, passing ICs through various third-party providers gives rise to many threats, like piracy of IC intellectual property or insertion of hardware Trojans, i.e., malicious circuit modifications. In this work, we proactively and systematically harden the physical layouts of ICs against post-design insertion of Trojans. Toward that end, we propose a multiplexer-based logic-locking scheme that is (i) devised for layout-level Trojan prevention, (ii) resilient against state-of-the-art, oracle-less machine learning attacks, and (iii) fully integrated into a tailored, yet generic, commercial-grade design flow. Our work provides in-depth security and layout analysis on a challenging benchmark suite. We show that ours can render layouts resilient, with reasonable overheads, against Trojan insertion in general and also against second-order attacks (i.e., adversaries seeking to bypass the locking defense in an oracle-less setting). We release our layout artifacts for independent verification [29] and we will release our methodology's source code.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2211.07997", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/ispd/WangWFJ0ASKHY23", "doi": "10.1145/3569052.3571878"}}, "content": {"source": {"pdf_hash": "2ed66b46d5f3636a5fdca9f068b4d467c65a020d", "pdf_src": "Arxiv", "pdf_uri": "[\"https://export.arxiv.org/pdf/2211.07997v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "942534808000835c06306fdb630131a76bb0d43c", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/2ed66b46d5f3636a5fdca9f068b4d467c65a020d.txt", "contents": "\nSecurity Closure of IC Layouts Against Hardware Trojans\n\n\nFangzhou Wang fzwang@cse.cuhk.edu.hk \nThe Chinese University of Hong Kong\n\n\nQijing Wang qjwang21@cse.cuhk.edu.hk \nBangqi Fu \nThe Chinese University of Hong Kong\n\n\nShui Jiang sjiang22@cse.cuhk.edu.hk \nThe Chinese University of Hong Kong\n\n\nXiaopeng Zhang xpzhang@cse.cuhk.edu.hk \nThe Chinese University of Hong Kong\n\n\nLilas Alrahis \nThe Chinese University of Hong Kong\n\n\nNew York University Abu Dhabi\n\n\nOzgur Sinanoglu ozgursin@nyu.edu \nNew York University Abu Dhabi\n\n\nJohann Knechtel johann@nyu.edu \nNew York University Abu Dhabi\n\n\nTsung-Yi Ho tyho@cse.cuhk.edu.hk \nThe Chinese University of Hong Kong\n\n\nEvangeline F Y Young fyyoung@cse.cuhk.edu.hk \nThe Chinese University of Hong Kong\n\n\nSecurity Closure of IC Layouts Against Hardware Trojans\nHardware Trojansphysical designsecurity closurelogic lockingISPD'22 contest\nDue to cost benefits, supply chains of integrated circuits (ICs) are largely outsourced nowadays. However, passing ICs through various third-party providers gives rise to many threats, like piracy of IC intellectual property or insertion of hardware Trojans, i.e., malicious circuit modifications.In this work, we proactively and systematically harden the physical layouts of ICs against post-design insertion of Trojans. Toward that end, we propose a multiplexer-based logic-locking scheme that is (i) devised for layout-level Trojan prevention, (ii) resilient against state-of-the-art, oracle-less machine learning attacks, and (iii) fully integrated into a tailored, yet generic, commercial-grade design flow. Our work provides in-depth security and layout analysis on a challenging benchmark suite. We show that ours can render layouts resilient, with reasonable overheads, against Trojan insertion in general and also against second-order attacks (i.e., adversaries seeking to bypass the locking defense in an oracle-less setting).We release our layout artifacts for independent verification [29] and we will release our methodology's source code.\n\nINTRODUCTION\n\nIn this work, we focus on the threat of hardware Trojans, i.e., malicious circuit modifications. By design, Trojans are only minor in extent but severe in fallout [9,31,32]. Many Trojan countermeasures have been proposed over the years (see also Sec. 2.1.2 and 3). Aside from (i) reactive, post-silicon monitoring and (ii) pre-/postsilicon verification, testing, detection, and inspection, we argue that (iii) proactive, pre-silicon prevention is essential to hinder Trojans to begin with. However, most related prior art falls short in terms of resilience against advanced attacks and/or overheads.\n\nThe objective of this work is security closure against hardware Trojans. Note that security closure is an emerging paradigm to proactively harden the physical layouts of integrated circuits (ICs) at design-time against various threats that are executed post-design time [17,18]. In this work, we aim for proactive, pre-silicon Trojan prevention, by carefully and systematically hardening the physical layout of ICs as a whole against post-design Trojan insertion. Toward that end, and more so for Trojan defense in general, we have identified the following research challenges:\n\n\u2022 Robustness -Any defense must remain robust in place. That is, a foundry-based adversary, being fully aware that some Trojan defense is put in place, would naturally want to first circumvent that defense (i.e., stealthily remove, override, or otherwise render useless) before inserting their Trojan. Such second-order attacks represent a key challenge where prior art, be they proactive or reactive defenses, falls short. \u2022 Effectiveness -Any defense should be able to protect against various Trojans. This is especially true for proactive, presilicon schemes which have only \"one shot\" at design-time.\n\nLayouts should be protected as a whole, i.e., in terms of (i) layout resources that are exploited for Trojan insertion (e.g., open placement sites, free routing tracks, available timing slacks) and (ii) structure and functionality, analysed by adversaries for targeted Trojan insertion. \u2022 Efficiency -Any defense should incur limited, controllable overheads. Taking control over such trade-offs requires two parts: (i) metrics for security and overheads, and (ii) some integrated, secure-by-design methodology, utilizing the metrics and user guidance as needed.\n\nAccordingly, our work makes the following contributions:\n\n(1) Layout-level logic locking -We propose a multiplexer (MUX)based locking scheme, called TroMUX, devised to hinder postdesign Trojan insertion. Our locking scheme addresses the above challenges through the following capabilities: (a) Robustness -TroMUX is devised to withstand state-ofthe-art, machine learning (ML)-based attacks on locking, like SCOPE [1] and MuxLink [2]. This is essential to hinder adversaries from circumventing the Trojan defense. (b) Effectiveness -By the security promise of locking, attackers cannot easily insert targeted Trojans anymore, i.e., Trojans that require understanding of the original design. Furthermore, by densely filling up the layout with as many TroMUX instances as practically possible (keeping the design quality well under control), attackers cannot easily insert additional Trojan logic in general anymore. (2) Integrated security closure -We propose an effective and efficient methodology for security closure against post-design Trojan insertion. The methodology is fully integrated into a commercial-grade physical-synthesis flow. Such integration is essential to achieve (i) the above outlined security principles and (ii) take control of security-versus-overheads trade-offs arising for security closure of layouts.\n\nRelease: We will release our source codes. We release our artifacts of secured layouts already during pre-publication [29], to enable independent verification of our work.  [9,31]. This notion is very diverse, covering modifications that: (i) leak information from an IC, reduce its performance, or disrupt its working altogether; (ii) are always on, triggered internally, or triggered externally; (iii) are introduced through untrustworthy third-party intellectual property (IP), adversarial designers, during outsourced mask generation, manufacturing, packaging of ICs; etc.\n\n\nBACKGROUND AND\n\nMost if not all Trojans comprise a trigger and a payload; the trigger activates the payload on some attack condition, and the payload serves to perform an actual attack. Triggers are often based on low-controllability nets (LCNs)-to complicate their detection during testing-whereas payloads are targeting on sensitive assets like key registers. Note that trigger and payload are implemented individually but are working together in tandem. Also note that most Trojans require some layout-level resources like open placement sites, free routing tracks, and/or available timing slacks.\n\n\nPrior Art for Countermeasures.\n\nPrior art for Trojan countermeasures can be classified into:\n\n\u2022 Proactive detection schemes, that is pre-silicon verification (e.g., [7,9]), post-silicon testing (e.g., [8,9]), or post-silicon inspection (e.g., [25]); \u2022 Proactive, pre-silicon prevention schemes (e.g., [4,5,10,13,17,19,22,27,30]); \u2022 Reactive, post-silicon monitoring schemes (e.g., [11,14,26]). Proactive detection and reactive monitoring schemes are generally challenged by advanced and stealthy Trojans [12,32]. Further, reactive monitoring as well as proactive prevention schemes typically require some dedicated hardware support-if not secured properly, the related circuitry may well be circumvented by adversaries during the course of Trojan insertion.\n\nGiven these challenges, a robust scheme for proactive prevention is essential to hinder Trojans early on, as best as possible. We discuss prior art for proactive, pre-silicon prevention in more detail in Sec. 3. A comparison of prior art and ours is also outlined in Table 1.\n\nFinally, note that the three classes are orthogonal, yet generally compatible. To increase the overall resilience against Trojans, techniques from all classes could (and should) be utilized jointly, if permissible in terms of design overheads and cost.\n\n\nSecurity Closure\n\nAs indicated, security closure is an emerging paradigm that seeks to proactively harden the physical layouts of ICs, at design time, against various threats that are executed post-design time [17,18]. In the broader context of secure-by-design efforts for electronic design automation (EDA) tools [15,21,23], security closure aims for secure physical-synthesis stages.\n\nSecurity closure against Trojans means to control physical synthesis such that insertion of Trojans becomes impractical, while at the same time managing the impact on design quality of such Notation: Y -yes, N -no, (?) -unclear, (Y) -yes but some caveat, (N) -unlikely Two scenarios are differentiated: effective against targeted Trojans / against untargeted Trojans. Robustness impacts effectiveness; related cases are labelled via \u2032 .\n\nThe employed locking scheme has been broken in [3].\n\nWe argue that such schemes can be reverted by adversaries.\n\nmeasures [17,18]. For example, an aggressively dense layout would leave only few open placement sites and few routing resources exploitable for Trojan insertion. While aggressively dense layouts are already challenging by themselves, in terms of managing design quality, such naive approach is still not good enough for security closure. This is because, for one, an advanced Trojan like A2 [32] may require only 20 placement sites for an advanced analog implementation [24]; 1 such very few sites are likely to remain even in aggressively dense layouts. For another, imagine a second-order attack where an adversary would first revise the layout as much as necessary (but also as little as possible, to avoid subsequent detection), and only then insert their Trojan. In short, successful efforts for security closure against Trojans need to holistically address the challenges outlined in Sec. 1.\n\n\nLogic Locking\n\nLogic locking, or locking for short, means to incorporate so-called key-gate structures that are controlled by secret key-bits. While locking is largely known for protection of IC's IP, it can also serve for Trojan defense. In fact, different such schemes have been proposed: AND/OR locking [10], X(N)OR locking [19,22], and custom locking [27]. We discuss relevant prior art in more detail in Sec. 3.1.\n\nRecently, ML-based attacks like SAIL [6], SCOPE [1], OMLA [3] and MuxLink [2] succeeded in learning various design features and subsequently predicting key-gates, all in an oracle-less setting, 2 i.e., without need for a functional chip that can be queried for its functional behaviour. For example, MuxLink learns on the structure of regular, unlocked parts of the design at hand, using a graph representation of the design, and then deciphers the MUX key-gates. More specifically, MuxLink considers each MUX key-gate's input at a time, connecting it to the output of the MUX, thereby essentially bypassing the key-gate, and contrasts the resulting different structures to the trained knowledge to predict the more likely structure.\n\nIn short, ML-resilient locking schemes remain an open challenge, but are essential for locking-based, proactive Trojan prevention.\n\n\nPRIOR ART 3.1 Locking-Based Trojan Prevention\n\nDupuis et al. [10] lock LCNs using AND/OR key-gates, to hinder insertion of Trojan triggers. They consider timing slacks, varying toggling thresholds, and balanced switching probabilities. Samimi et al. [22] follow similar principles as Dupuis et al., but utilize X(N)OR key-gates. Marcelli et al. [19] propose a multi-objective algorithm, seeking to minimize LCNs and maximize the efficacy of X(N)OR locking at the same time. \u0160i\u0161ejkovi\u0107 et al. [27] secure inter-module control signals against software-controlled hardware Trojans, using encryption circuitry along with regular locking. For the latter, they do not specify/limit the type of key-gates.\n\nThe above prior art has limitations as follows.\n\n\u2022 Dupuis et al. [10] cannot protect against insertion of targeted Trojans. This is because they utilize AND/OR key-gates to tune the controllability of nets, not to obfuscate the design. \u2022 \u0160i\u0161ejkovi\u0107 et al. [27] only protect against Trojans targeting on inter-module control signals, not on modules' internals. \u2022 None consider Trojan prevention at the layout level; all are working only at netlist level. This implies that none can conclusively prevent insertion of Trojan logic into the layout. \u2022 None explicitly prevent Trojan payloads. \u0160i\u0161ejkovi\u0107 et al. [27] are using locking in general, without focus on triggers or payloads, and others are locking only low-controllability nets (to hinder insertion of Trojan triggers). \u2022 None show robustness against ML-based attacks; all are prone to second-order attacks bypassing the locking defense. This is most evident for Dupuis et al. [10]: they employ a direct, hard-coded correlation of key-bit '0' to OR keygates, key-bit '1' to AND key-gates, respectively, and do not employ re-synthesis, which is essential for obfuscation of that correlation, but would be challenging for their objective of tuning the controllability of nets.\n\nNote that, in contrast, our work addresses all these limitations.\n\n\nLayout-Level Trojan Prevention\n\nXiao et al. [30] fill layouts with built-in self-test components, arguing that tampering of those structures (by adversaries regaining layout resources to insert their Trojans) is detected by post-silicon testing. Similarly, Ba et al. [4,5] fill layouts with additional circuitry. Knechtel et al. [17] propose techniques for Trojan-resistant physical synthesis, based on locally increasing placement density (to hinder Trojan insertion) and locally increasing routing density (to hinder Trojan routing). Hossein-Talaee et al. [13] redistribute white space/open sites otherwise exploitable for Trojan insertion. The above prior art has limitations as follows.\n\n\u2022 None protects against insertion of targeted Trojans. In the absence of locking or other obfuscation schemes, the original design is fully accessible by adversaries. \u2022 None conclusively shows robustness against second-order attacks, as in adversaries regaining layout resources despite the defense put in place. For example, for the work in [13], shifting of white spaces can be trivially reverted. \u2022 For full efficacy, the work in [30] requires 100% test coverage which can be difficult to achieve. Further, the methodology is challenged by high utilization rates, limiting its practicability. \u2022 For the work in [4,5,30], the number of additionally required primary inputs scales with layout filling. This is impractical; pads for primary inputs/outputs (PIs/POs) are large in actual ICs and, if not employed wisely, can considerably increase the chip outline, directly increasing cost for silicon area.\n\nNote that, in contrast, our work addresses all these limitations.\n\n\nTHREAT MODELS\n\nTrojans: We follow a classical threat model that is consistent with the literature as follows.\n\n(1) We assume adversaries reside within manufacturing facilities, whereas the design process is considered trustworthy.  (1) also follows that we do not account for Trojans introduced by, e.g., malicious designers or third-party IP modules. Against such threats, and to increase a layout's overall Trojan resilience, countermeasures orthogonal to ours, namely proactive detection or reactive monitoring schemes (Sec. 2.1.2), may be applied along with ours. (4) We assume Trojans are implemented using regular standard cells, not by modifying interconnects or transistors, etc. (5) We assume targeted Trojans with triggers based on LCNs and payloads targeting on assets, i.e., security-critical components like key registers. (6) The adversaries' objective is to insert some Trojan(s), more specifically trigger and payload components, into the layout.\n\nLocking: First, recall that we employ locking not for IP protection, but to hinder Trojan insertion. Toward that end, we follow an oracle-less threat model that is consistent with both the literature and the above threat model on Trojans as follows.\n\n(1) The adversaries' objective is to circumvent the locking scheme, to (a) understand the true functionality of the design, required for targeted Trojan insertion, and (b) to regain layout resources, required for Trojan insertion in general. (2) Given that adversaries are assumed to reside within manufacturing facilities, only oracle-less attacks are applicable. None of the well-known Boolean satisfiability-based attacks are applicable. Neither applicable are oracle-less attacks on locking schemes unlike TroMUX, e.g., [33]. (3) Following Kerckhoffs' principle, all implementation details for TroMUX locking are known to the adversaries; only the key-bits remain undisclosed.\n\n\nMETHODOLOGY\n\nThis work is motivated by the need for a proactive, pre-silicon Trojan-prevention scheme that is robust, effective, and efficient. As discussed in Sec. 3, prior art falls short toward that end.\n\nOur approach-which can be summarized as locking and layout filling applied in unison-aims to hinder first-order and secondorder Trojan-insertion attacks. We integrate an ML-resilient, MUXbased locking scheme directly into the IC layouts. Unlike prior art, we neither employ trivial filler/spare cells, nor separate circuitry, nor vulnerable locking schemes. To protect IC layouts holistically, our methodology carefully embeds, in a security-aware manner, as many locking instances during physical instances as practically possible, i.e., keeping the design quality well under control. Our methodology is fully integrated into commercial-grade design tools.\n\nNext, we describe the components of our methodology, i.e., a MUX-based locking scheme and a physical-synthesis flow for security-and design-aware locking and layout filling. Note that both are devised to be working in unison, but also require individual solutions toward that end.\n\n\nTroMUX\n\nOur MUX-based locking scheme, TroMUX, is specifically devised to hinder post-design Trojan insertion. Given the rise of powerful ML-based attacks on simple locking schemes, e.g., on X(N)OR keygates [3], we opt for MUX-based locking which is considered more resilient [28]. Still, even MUX-based schemes have been attacked recently [1,2]. To render TroMUX resilient against such advanced ML-based attacks, we devise the following implementation.\n\nLocking Approach. Unlike prior art, TroMUX is not based on obfuscating the netlist connectivity through MUX key-gates, but on using MUX key-gates for regular locking. Thus, for TroMUX, there is no information leakage arising from MUX key-gates for the connectivity and structure of the design, which is the key vulnerability of prior art [2]. Instead, TroMUX employs simple but resilient key-gate structures with localized connectivity, described next.\n\nLearning-Resilient Key-Gate Structures. The design of TroMUX ensures that key-bits are fully randomized, without any correlation to each of the locked gate's true functionality. To do so, TroMUX instances render the locked gates interchangeable with respect to their complementary counterparts, e.g., a NAND gate can act as AND or NAND, only depending on the key-bit.\n\nWhen locking gates using TroMUX instances, one picks randomly from the different possible configurations (Fig. 1). It is essential to note how the different configurations are structurally indistinguishable; only the key-bits determine the true functionality. Also, key-bits are easy to randomize for any particular true functionality, simply by randomly picking one of the possible configurations. For simple complementary gates, like (a) AND and (b) NAND, there are four different pairwise configurations which are indistinguishable on their own. Note how half the configurations are based on first transforming the original gates to their counterparts; this serves for further obfuscation of the overall layout regarding the distribution of gate types.\n\nLocking of Complex Gates. Concerning flip-flops (FFs), these can be locked as is, by connecting the Q and QN ports to a dedicated key-gate structure (Fig. 1(c)). 3 For commercial libraries, where FF outputs are typically optimized and trimmed, similar key-gate structures as for simple gates can be initiated (Fig. 1(d)). For other complex gates like AOI, we observe that complementary counterparts appear rarely in an optimized layout, if they are available at all in the library. Thus, we defer locking of such complex gates as follows. When such complex gate is selected for locking, we search its fan-out in depth-first manner for simple gates and FFs, covering all the fan-out paths. Then, all the found simple gates and FFs are locked instead, which essentially translates to locking the downstream structure of that complex gate.\n\nNo Information Leakage from Physical Layout. As indicated, there are no direct correlations between the types of original versus the locked gate, the connectivity within and across TroMUX instances, and the correct key-bit; all are interchangeable, randomly chosen, and thus indistinguishable for an attacker.\n\nIt is also important to note that the two internal TroMUX nets connecting to the MUX inputs (or driving the MUX fan-out for the case of Q and QN FFs, Fig. 1(c)) share a path and are, thus, both optimized/impacted at once by EDA tools. Accordingly, an attacker seeking to study the underlying timing paths, driver strengths, etc., would not gain any additional information.\n\n\nPhysical Synthesis\n\nWith the proposed locking scheme, we introduce a physical-synthesis flow that is capable of hardening any post-route layout with negligible timing and area overheads. As outlined in Fig. 2, we start with the original netlist and other necessary data to generate a baseline layout and then carefully interleave logic locking and physical synthesis to produce a final protected layout.\n\n\nTwo-Stage Locking Scheme.\n\nIn the first stage, we lock all security-critical FFs, as defined by assets. After locking, we conduct placement and routing (P&R), and obtain a partially protected layout (PPL). A PPL has only FF assets protected; no other parts like (1) (3)  LCNs and LCCs (i.e., the cells driving LCNs; both are targets for Trojan triggers) are protected yet. Further, a PPL has relatively low utilization, leaving placement sites exposed to Trojan insertion. In the second stage, we thus aim at locking as many cells as possible to fill the layout, also prioritizing the locking of LCCs, all without degrading the design quality. With the physical layoutrelated information obtained from the PPL, we first derive the number of cells to be locked, then perform cell selection considering timing and controllability (detailed in Sec. 5.2.4). After locking all selected cells, P&R is re-run, and we finally retrieve a highly-utilized layout with all security-critical components well protected through both TroMUX locking and much fewer placement sites left open.\n\n\nStorage of Key-Bits.\n\nFor each TroMUX instance, there will be one corresponding key-bit, requiring some facility to store all key-bits. We employ a large shift register for the following reasons:\n\n\u2022 Prior art often considers adding a dedicated PI for each keybit, which is not scalable. For us, we only require two additional PIs (data in, load) for any number of key-bits. \u2022 Ours incurs negligible impact on performance and power, 4 while the impact on area is even desired (see below).  [20]. We require this library for the recently introduced ISPD'22 benchmarks for security closure of physical layouts [18].\n\n\nOn-Demand Key Length.\n\nTroMUX instances occupy open placement sites with their INVs, MUXes, and FFs. After locking security assets, we determine the additional key length required to fill the physical layout at hand as follows:\n= _ _ ( ) + ( ) + ( ) +(1)\nwhere ( ) represents the size of the smallest INV cell in the library, etc., and is a parameter for timing budget. As commercial tools will usually conduct timing optimization by gate sizing and buffer/inverter insertion, we need to reserve some additional space during locking. Accordingly, for designs where timing closure is more challenging, we will need a larger , and vice versa.\n\n\nCell Selection Considering Timing and Controllability.\n\nRecall that, in the second locking stage, we lock selected cells to reduce the number of open sites and protect more LCNs/LCCs. As keygate structures can introduce further cell delays to related timing paths, the selection of cells to lock becomes critical for timing closure. Thus, we propose a scoring function ( , , ) to comprehensively describe the priority of a cell as follows.\n( , , ) = \u2211\ufe01 \u2208 ( ) ( , ),(2)( , ) = 1 1 + (\u22122 \u00b7 ( , )) \u00b7 1 ( ) + 10 \u22123 ,(3)( , ) = \uf8f1 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f3 min \u2208 ( ) . , if | ( )| > 0, \u22120.5 , otherwise,(4)\nwith terms described in Table 2. The cell score is represented as the sum of net scores to generalize to multi-output cases, e.g., both Q and QN of a FF are used. Further, we devise ( , ) to jointly consider timing and controllability. Using sigmoid, the score value remains positive even for negative but small slacks. Besides, since ( ) \u2208 [0, 2] and nets with \u2264 0.1 are considered as LCNs in this work, we add a small margin (10 \u22123 ) to avoid both divby-0 and ( ) from dominating the score. When calculating MS, some nets may not be covered by any reported timing paths (due to limitations of the commercial tool). For those nets, ( , ) returns -0.5, a fall-back value close to average negative slacks observed; this value serves to conservatively penalize cells with unknown timing.\n\n\nAlgorithm 1 Cell Selection Considering Timing and Controllability\n\nInput: Standard Cells , Nets , Timing Paths , Key Length , Locking Delay . Output: The Set of Cells to Lock \u2032 .\n\n1:\n\u2032 \u2190 { }; 2: while | \u2032 | < do 3:\nforeach cell \u2208 do 4:\n\n. \u2190 ( , , ); \u22b2 Score calculation for each cell 5:\n\nLet \u210e be the cell with the highest score in ; 6:\n\n\u2032 .\n\n( \u210e ); 7:\n\n. ( \u210e ); 8:\n\nforeach net \u2208 ( \u210e ) do 9:\n\nforeach timing path \u2208 ( ) do 10:\n\n. \u2190 . \u2212 ; \u22b2 Pessimistic slack estimation 11: return \u2032 ;\n\nUsing the above scoring, we propose an iterative cell-selection algorithm in Algorithm 1. In each iteration, we calculate cell scores (line 3-4) and pick those cells with the highest score (line 5-7). Next, we update the slacks of affected timing paths based on , a pessimistic estimate of delay introduced by locking, defined as the sum of worst-case delays for INV_X1 and MUX2_X1 (i.e., the default TroMUX cells for our experiments), as derived from the libraries for the matching corner cases (line 8-10).\n\nOur initial experiments show that the proposed two-stage locking scheme is more timing-friendly over a single-stage approach. That is, when we did directly use the physical information extracted from the baseline layouts (marked in red in Fig. 2) for cell selection and related locking, it was much harder to achieve timing closure, due to the accumulation of slack estimation errors. 6 EXPERIMENTAL RESULTS 6.1 Setup 6.1.1 Tools. As indicated, we base our work on a commercial-grade design flow. Without loss of generality, we use Cadence Innovus 20.14 for physical synthesis. The methodology is implemented in custom TCL scripts and Python code. For security analysis using SCOPE and MuxLink, setup details are provided in Sec. 6.3.\n\n\nBenchmarks.\n\nWe employ the benchmark suite from the ISPD'22 contest on security closure [18]. The suite comprises a range of crypto cores as well as the openMSP430 microcontroller. As Table 3 shows, the designs vary in terms of complexity, utilization, size (cells, nets), available metal layers, timing constraints, and corners. Since the suite was synthesized by legacy versions of Cadence Innovus, we resynthesize all designs at our end with floorplan utilization rates similar to the original post-route benchmark layouts; only the rates for AES_3, openMSP430_2, and TDEA are set 10% lower, as needed to lock all security assets. \n\n\nResults on the ISPD'22 Benchmark Suite\n\nWe quantify security and layout results for the resynthesized baseline layouts versus the final, protected layouts in Table 4. First, all the protected layouts show much higher utilization rates, thereby reducing open placement sites by 90.3% on average and rendering designs much more resilient against Trojan insertion in general. Meanwhile, we achieve higher track utilization (defined as total routed wire length / total track length) compared with the baseline layout such that routing from triggers to payloads will be more challenging for the attackers. Second, as another layer of protection, recall that all security assets are locked and that LCNs/LCCs are well locked in most layouts, except for those with relatively high initial utilizations. Third, all layouts are without any design rule check (DRC) violations, despite the ultra-high utilization. This demonstrates the effectiveness of our proposed flow. Fourth, total power is increased by 18.5% on average, which seems reasonable given all the additional cells introduced with TroMUX instances.\n\nIn Fig. 3, we show the layouts of the exemplary Camellia design in three stages as described in Fig. 2. After locking assets, there are still a number of open sites. However, with the second locking stage, we manage to increase the utilization to as high as 98.9%.\n\n\nML-Based Attack Analysis\n\nRecall that we use logic locking to both protect security-critical components in particular and the layout in general. Attackers would want to undermine our locking and remove TroMUX instances, to be able to insert Trojans targeted on assets and LCNs/LCCs in particular (Sec. 4). Thus, we evaluate ours against state-of-the-art ML-based attacks SCOPE [1] and MuxLink [2].\n\nSetup for SCOPE. The attack expects designs in bench format. Thus, we resynthesize our locked benchmarks using the benchspecific, limited set of cells, (i.e., AND, OR, NAND, NOR, INV, BUF, DFF, XOR, and XNOR) and convert the netlists into bench format using an in-house Python script. Since the attack cannot handle loops in the locked designs, we represent FFs as pseudo PIs/POs. Further, we use the default margin value of 0 [1].\n\nSetup for MuxLink. The original implementation supports only selected gates (i.e., AND, NAND, OR, NOR, INV, XOR, XNOR, BUF). Since we use the ISPD'22 benchmarks where all gates from the  Nangate library are used, we extend the one-hot feature vectors of MuxLink accordingly. Consistent with the original operation of MuxLink, we treat each pin of each gate as a node and the connections between pins, including those going through gates, as edges. The connections between the input/output pins of TroMUX key-gates are kept as test set for prediction, while all others (except PI or PO connections) are used as training set. We adopt the same graph neural network configuration and training hyperparameters as in [2]; in particular, number of hops for extracting subgraphs is set to 3 and the threshold in post-processing is set to 0.01. Evaluation Metrics. We report the performance of the SCOPE and MuxLink attacks using the following established metrics: accuracy (AC), precision (PC), key prediction accuracy (KPA), and COnstant Propagation Effect (COPE, [1]); all metrics are in percentage. AC measures the percentage of correctly deciphered keybits, i.e., ( / ). PC measures the correctly deciphered key-bits, optimistically considering every /undeciphered value as a correct guess, i.e., (( + )/ ). KPA measures the correctly deciphered key-bits over the entire prediction set, i.e., ( /( \u2212 )). COPE measures the vulnerability against the SCOPE attack; COPE = 0% means the attack fails entirely.\n\nResults for SCOPE. The results in Table 5 show that 19.35%/19.25% of the key bits are correctly recovered on average. The average value of 0.065% for COPE means that the attack fails almost entirely. Further, the average KPA of 53.72% versus 46.28% for the two keys 5 indicates that SCOPE is forced to random guessing for ours. Note that the attack can only decipher a single bit for TDEA, thus resulting in KPA of 100% and 0% for that design.\n\nResults for MuxLink. The results in Table 5 show that MuxLink can only predict, on average, 20.90% of the key-bits. Moreover, the average KPA is 53.21%, clearly indicating that MuxLink is forced to random guessing. In contrast to prior art like D-MUX [2, 28]-also showcased in Table 5-ours is superior in thwarting the attack. \n\n\nDiscussion of Prior Art\n\nRecall the review of related prior art in Sec. 3.1 and the overview in Table 1. Note that none of the prior art released their results artifacts publicly. Further, most of the prior art uses different technology libraries and implementation schemes, as well as different benchmarks. Thus, a direct comparison is impractical. Still, it is essential to recall the considerable limitations of those studies and to forecast related implications. For example, for X(N)OR key-gates utilized by Samimi et al. [22] and Marcelli et al. [19], we note that Alrahis et al. [3] have independently shown that such locking can be circumvented with up to 97.22% accuracy. Thus, we argue that locking as applied by Samimi et al. [22] and Marcelli et al. [19] can be easily circumvented, unlike ours (Sec. 6.3).\n\n\nCONCLUSION\n\nWe propose a MUX-based locking scheme, called TroMUX, along with a carefully tuned physical-synthesis flow, for preventing targeted Trojan insertion. To the best of our knowledge, ours is the first to systematically employ locking and layout-level means in unison for Trojan prevention. Results on the ISPD'22 contest benchmarks show that ours can reduce the number of open placement sites by 90.3% on average, with security-critical components secured by logic locking. Further, we demonstrate the superior resilience of ours against ML-based attacks: on average, SCOPE and MuxLink can only correctly predict 19.35%/19.25% and 20.90% of the key-bits, respectively, with around 50% key-prediction accuracy for both, indicating our scheme is enforcing random guessing.\n\nISPD 2023 ,\n2023March 26-29, 2023, Online \u00a9 2023 Association for Computing Machinery. This is the author's version of the work. It is posted here for your personal use. Not for redistribution. The definitive Version of Record was published in Proceedings of International Symposium on Physical Design (ISPD 2023).\n\n( 2 )\n2From (1) follows that adversaries have no knowledge of the original unprotected design, only of the protected physical layout at hand. (3) From\n\nFigure 1 :\n1Design of different TroMUX instances. The key-bit is connected to the MUX select line. (a, b) Locking of complementary (N)AND gates; other pairings of simple gates are locked similarly. (c, d) Locking of flip-flops (FFs) with different output configurations.\n\nFigure 2 :\n2Our physical-synthesis flow, which consists of three parts: (1) initial synthesis, (2) locking of security assets, and (3) locking considering timing and controllability.\n\nFigure 3 :\n3Camellia layout, after initial synthesis (left), locking of security assets (middle), and locking considering timing and controllability (right). The utilization increases from 49.5% to 59.2%, and eventually to 98.9%. Gates introduced by TroMUX instances are marked in blue while the other standard cells are filled with grey dots.\n\n\nMOTIVATION 2.1 Trojans 2.1.1 Working Principles. Trojans are malicious hardware modifications\n\nTable 1 :\n1High-Level Comparison with Prior ArtWork \nApproach \nRobust \nEffective \nEfficient \nArtifacts \n\nTarg. / Untarg. \nAvailable \n\n[10] \nLocking \nN [10, 22] \nN \n\u2032 / N \n(Y) \nN \n\n[19, 22] \nLocking \n(N) \n(N) \n\u2032 / N \n(Y) \nN \n\n[27] \nLocking \n(?) \n(?) \n\u2032 / N \n(Y) \nN \n\n[4, 5, 30] Addit. Logic \n(?) \nN / (?) \n\n\u2032 \n\n(Y) \nN \n\n[13, 17] \nPhys. Synth. \n(N) \nN / (N) \n\n\u2032 \n\nY \nN \n\nOurs: \nLocking and \nY \nY / (Y) \nY \nY [29] \nTroMUX Layout Filling \n\n\n\nTable 2 :\n2Notations for Cell SelectionTerm \nDescription \n\nThe set of standard cell instances \n\nA cell instance from \n\nThe set of nets \n\nA net from \n\n( ) \nThe set of nets driven by \n\nThe set of timing paths \n\n( ) \nThe set of timing paths covering \n\n( , ) \nThe minimum slack of paths covering \n\n( ) \nThe number of toggles per clock cycle for \n\n\u2022 The FFs used to build up the shift register are also helpful \nfor locally filling open placement sites as needed, whereas \nbulky memory blocks would rather complicate this task. \n\u2022 Finally, memory blocks are unavailable for the library used \nin this work, i.e., Nangate 45nm Open Cell Library \n\nTable 3 :\n3Benchmark StatisticsDesign \nF. Utils #(Cells) #(Nets) #(ML) CP Corner \n\nAES_1 \n75.0% \n16509 \n19694 \n10 \n1 \ntypical \nAES_2 \n75.0% \n16509 \n19694 \n10 \n1 \ntypical \nAES_3 \n85.0% \n15836 \n19020 \n10 \n1 \ntypical \nCamellia \n50.0% \n6710 \n7160 \n6 \n10 \nslow \nCAST \n50.0% \n12682 \n13057 \n6 \n10 \nslow \nMISTY \n50.0% \n9517 \n9904 \n6 \n10 \nslow \nopenMSP430_1 50.0% \n4690 \n5312 \n6 \n30 \nslow \nopenMSP430_2 70.0% \n5921 \n6550 \n6 \n8 \nslow \nPRESENT \n50.0% \n868 \n1046 \n6 \n10 \nslow \nSEED \n50.0% \n12682 \n13057 \n6 \n10 \nslow \nSPARX \n50.0% \n8146 \n10884 \n6 \n10 \nslow \nTDEA \n70.0% \n2269 \n2594 \n6 \n4 \nslow \n\n* F. Utils: floorplanning utilization for resynthesis; #(Cells/Nets): number of \ncells/nets in original netlists; #(ML): number of metal layers; CP (ns): clock period; \nCorner: typical is characterized for 1.1V and 25C, slow for 0.95V and 125C. \n\n\n\nTable 4 :\n4Layout and Security Results for Ours on the ISPD'22 Contest Benchmark Suite * Utils: utilization after physical synthesis; #(Open): number of open sites; TU: track utilization; WNS (ns): worst negative slack; TNS (ns): total negative slack; Power (mW): total power; \u0394(Open): reduction of number of open sites; SA: security assets; LSA: locked security assets; LCC: low-controllable cells; LLCC: locked low-controllable cells; KL: key length (bits).Design \nBaseline Layout (Resynthesized) \nProtected Layout (Final) \n\nUtils #(Open) TU WNS \nTNS Power Utils #(Open) \u0394(Open) \nTU \nWNS \nTNS Power #(LSA)/#(SA) #(LLCC)/#(LCC) \nKL \n\nAES_1 \n75.4% 43,980 8.7% 0.000 0.000 59.957 96.2% \n6,838 \n-84.5% \n11.1% -0.013 -0.043 60.552 \n291/291 \n884/1,389 \n1,199 \nAES_2 \n75.1% 44,420 8.7% -0.001 -0.003 59.441 96.3% \n6,649 \n-85.0% \n10.9% -0.008 -0.017 61.040 \n291/291 \n908/1,431 \n1,202 \nAES_3 \n85.7% 22,129 9.7% -0.001 -0.002 59.869 96.6% \n5,225 \n-76.4% \n11.2% -0.031 -4.657 62.787 \n291/291 \n150/1,310 \n441 \nCamellia \n49.5% 33,919 9.5% 1.194 0.000 \n1.233 98.9% \n753 \n-97.8% \n13.3% 0.015 0.000 \n1.488 \n256/256 \n724/724 \n1,271 \nCAST \n49.1% 54,444 9.1% 0.047 0.000 \n3.136 93.6% \n6,879 \n-87.4% \n12.7% -0.134 -1.455 3.912 \n192/192 \n983/994 \n1,572 \nMISTY \n48.5% 43,359 8.6% -0.021 -0.037 2.238 94.4% \n4,686 \n-89.2% \n12.4% -0.140 -1.515 2.966 \n204/204 \n307/312 \n1,215 \nopenMSP430_1 49.7% 32,799 6.2% 0.000 0.000 \n0.375 97.9% \n1,389 \n-95.8% \n12.6% 0.000 0.000 \n0.544 \n340/340 \n441/456 \n1,218 \nopenMSP430_2 70.5% 15,125 7.7% 0.000 0.000 \n1.239 97.1% \n1,497 \n-90.1% \n10.6% -0.006 -0.015 1.369 \n334/334 \n209/696 \n543 \nPRESENT \n49.8% \n6,284 \n4.4% 6.694 0.000 \n0.198 98.0% \n245 \n-96.1% \n6.8% \n4.935 0.000 \n0.235 \n80/80 \n3/3 \n241 \nSEED \n49.1% 54,444 9.1% 0.047 0.000 \n3.136 94.3% \n6,056 \n-88.9% \n12.7% -0.182 -1.072 3.908 \n195/195 \n979/989 \n1,612 \nSPARX \n49.9% 69,979 6.3% 2.452 0.000 \n2.164 98.8% \n1,658 \n-97.6% \n14.0% 0.027 0.000 \n2.822 \n2,176/2,176 \n361/375 \n2,582 \nTDEA \n70.4% \n5,559 \n6.8% 0.049 0.000 \n1.084 98.4% \n304 \n-94.5% \n8.0% \n0.027 0.000 \n1.153 \n168/168 \n6/47 \n214 \n\n\n\nTable 5 :\n5ML-Based Attack Results on Different Locking Schemes * AC: accuracy; PC: precision; KPA: key prediction accuracy; COPE: COnstant Prop. Effect; #(X): number of undeciphered key-bits; NA: Locking using the script in [2] fails.Design \nKL \n\nSCOPE [1] \nMuxLink [2] \n\nCOPE (%) \nTroMUX Key 1 \nTroMUX Key 2 \n#(X) \nTroMUX \nD-MUX [2, 28] \nAC (%) KPA (%) AC (%) KPA (%) \nAC (%) PC (%) KPA (%) #(X) AC (%) PC (%) KPA (%) #(X) \nAES_1 \n1,199 \n0.1919 \n28.86 \n48.39 \n30.78 \n51.61 \n484 \n28.77 \n71.48 \n50.22 \n512 \n78.15 \n79.90 \n79.54 \n21 \nAES_2 \n1,202 \n0.1864 \n31.53 \n52.71 \n28.29 \n47.29 \n483 \n28.12 \n75.04 \n52.98 \n564 \n80.45 \n81.70 \n81.47 \n15 \nAES_3 \n441 \n0.1075 \n23.36 \n48.13 \n25.17 \n51.87 \n227 \n8.16 \n90.02 \n45.00 \n361 \n88.44 \n89.12 \n89.04 \n3 \nCamellia \n1,271 \n0.0240 \n14.16 \n51.72 \n13.22 \n48.28 \n923 \n26.12 \n73.80 \n49.92 \n606 \n90.64 \n92.60 \n92.46 \n25 \nCAST \n1,572 \n0.0359 \n18.58 \n50.52 \n18.19 \n49.48 \n994 \n37.47 \n66.03 \n52.45 \n449 \n93.74 \n94.32 \n94.29 \n7 \nMISTY \n1,215 \n0.1036 \n23.70 \n48.90 \n24.77 \n51.10 \n626 \n33.33 \n65.84 \n49.39 \n395 \n97.84 \n98.03 \n98.02 \n3 \nopenMSP430_1 1,218 \n0.0432 \n19.87 \n49.90 \n19.95 \n50.10 \n733 \n23.56 \n76.60 \n50.17 \n646 \nNA \nNA \nNA \nNA \nopenMSP430_2 543 \n0.0306 \n29.28 \n52.13 \n26.89 \n47.87 \n238 \n9.39 \n90.42 \n49.51 \n440 \n66.85 \n69.98 \n69.01 \n17 \nPRESENT \n241 \n0.0434 \n2.49 \n42.86 \n3.32 \n57.14 \n227 \n11.62 \n95.02 \n70.00 \n201 \nNA \nNA \nNA \nNA \nSEED \n1,612 \n0.0343 \n18.55 \n49.10 \n19.23 \n50.90 \n1,003 37.03 \n64.02 \n50.72 \n435 \n97.33 \n97.70 \n97.70 \n6 \nSPARX \n2,582 \n0.0176 \n21.42 \n50.23 \n21.22 \n49.77 \n1,481 \n5.38 \n94.93 \n51.48 \n2,312 \nNA \nNA \nNA \nNA \nTDEA \n214 \n0.0001 \n0.47 \n100.00 \n0.00 \n0.00 \n213 \n1.87 \n99.07 \n66.67 \n208 \nNA \nNA \nNA \nNA \nAvg. \n-\n0.0682 \n19.35 \n53.72 \n19.25 \n46.28 \n-\n20.90 \n80.19 \n53.21 \n-\n86.68 \n87.92 \n87.69 \n-\n\n\nThis is a remarkable exception-other Trojans reported in the literature, as well as a digital version of A2 itself, require hundreds or thousands of sites[24].2 Only the oracle-less setting is relevant for our work as we are utilizing locking for proactive, pre-silicon prevention of Trojans, not for IP protection against end-users.\nWe note that, independently of our work, this key-gate structure was proposed by Karmakar et al.[16], though in the context of locking scan chains.(a) AND (b) NAND\nFor a design locked with key-bits, loading will take clock cycles. This is done during initial boot-up, when the main circuitry is still hold in reset; runtime cost for such one-time initialization are considered negligible. Once the load signal signal is set low, the key-bits will remain stable, consuming only some static FF power.\nSCOPE predicts the two mutually complementary keys, representing the possible configurations of '0' and '1' versus '1' and '0' for key-bits.\n\nSCOPE: Synthesis-Based Constant Propagation Attack on Logic Locking. A , Trans. VLSI. 29A. Alaql et al. 2021. SCOPE: Synthesis-Based Constant Propagation Attack on Logic Locking. Trans. VLSI 29, 8 (2021), 1529-1542.\n\nMuxLink: Circumventing Learning-Resilient MUX-Locking Using Graph Neural Network-based Link Prediction. L Alrahis, Proc. DATE. DATEL. Alrahis et al. 2022. MuxLink: Circumventing Learning-Resilient MUX-Locking Using Graph Neural Network-based Link Prediction. In Proc. DATE. 694-699.\n\nOMLA: An Oracle-Less Machine Learning-Based Attack on Logic Locking. L Alrahis, TCS. 69L. Alrahis et al. 2022. OMLA: An Oracle-Less Machine Learning-Based Attack on Logic Locking. TCS 69, 3 (2022), 1602-1606.\n\nHardware Trojan prevention using layout-level design approach. P.-S Ba, Proc. Europ, Conf. Circ. Theory Des. Europ, Conf. Circ. Theory DesP.-S. Ba et al. 2015. Hardware Trojan prevention using layout-level design approach. In Proc. Europ, Conf. Circ. Theory Des. 1-4.\n\nHardware Trust through Layout Filling: A Hardware Trojan Prevention Technique. P.-S Ba, Proc. ISVLSI. ISVLSIP.-S. Ba et al. 2016. Hardware Trust through Layout Filling: A Hardware Trojan Prevention Technique. In Proc. ISVLSI. 254-259.\n\nSAIL: Machine Learning Guided Structural Analysis Attack on Hardware Obfuscation. P Chakraborty, Proc. AHOST. AHOSTP. Chakraborty et al. 2018. SAIL: Machine Learning Guided Structural Analysis Attack on Hardware Obfuscation. In Proc. AHOST. 56-61.\n\nHardware Trojan Detection in Third-Party Digital Intellectual Property Cores by Multilevel Feature Analysis. X Chen, TCAD. 37X. Chen et al. 2018. Hardware Trojan Detection in Third-Party Digital Intellectual Property Cores by Multilevel Feature Analysis. TCAD 37, 7 (2018), 1370-1383.\n\nNovel Design Strategy Toward A2 Trojan Detection Based on. D Deng, Built-In Acceleration Structure. TCAD. 39D. Deng et al. 2020. Novel Design Strategy Toward A2 Trojan Detection Based on Built-In Acceleration Structure. TCAD 39, 12 (2020), 4496-4509.\n\nHardware Trojans in Chips: A Survey for Detection and Prevention. C Dong, Sensors. 2018C. Dong et al. 2020. Hardware Trojans in Chips: A Survey for Detection and Prevention. Sensors 20, 18 (2020).\n\nA novel hardware logic encryption technique for thwarting illegal overproduction and Hardware Trojans. S Dupuis, Proc. IOLTS. IOLTSS. Dupuis et al. 2014. A novel hardware logic encryption technique for thwarting illegal overproduction and Hardware Trojans. In Proc. IOLTS. 49-54.\n\nDetection of Layout-Level Trojans by Monitoring Substrate with Preexisting Built-in Sensors. L A Guimar\u00e3es, Proc. ISVLSI. ISVLSIL. A. Guimar\u00e3es et al. 2017. Detection of Layout-Level Trojans by Monitoring Substrate with Preexisting Built-in Sensors. In Proc. ISVLSI. 290-295.\n\nWhen Capacitors Attack: Formal Method Driven Design and Detection of Charge-Domain Trojans. X Guo, Proc. DATE. DATEX. Guo et al. 2019. When Capacitors Attack: Formal Method Driven Design and Detection of Charge-Domain Trojans. In Proc. DATE. 1727-1732.\n\nLayout Vulnerability Reduction against Trojan Insertion Using Security-Aware White Space Distribution. H Hossein-Talaee, A Jahanian, Proc. ISVLSI. ISVLSIH. Hossein-Talaee and A. Jahanian. 2017. Layout Vulnerability Reduction against Trojan Insertion Using Security-Aware White Space Distribution. In Proc. ISVLSI.\n\nR2D2: Runtime reassurance and detection of A2 Trojan. Y Hou, Proc. HOST. HOSTY. Hou et al. 2018. R2D2: Runtime reassurance and detection of A2 Trojan. In Proc. HOST. 195-200.\n\nAn Overview of Hardware Security and Trust: Threats, Countermeasures and Design Tools. W Hu, TCAD. W. Hu et al. 2020. An Overview of Hardware Security and Trust: Threats, Countermeasures and Design Tools. TCAD (2020).\n\nOn Securing Scan Obfuscation Strategies Against ScanSAT Attack. R Karmakar, S Chattopadhyay, Proc. ISQED. ISQEDR. Karmakar and S. Chattopadhyay. 2020. On Securing Scan Obfuscation Strate- gies Against ScanSAT Attack. In Proc. ISQED. 213-218.\n\nSecurity Closure of Physical Layouts. J , Proc. ICCAD. ICCADJ. Knechtel et al. 2021. Security Closure of Physical Layouts. In Proc. ICCAD. 1-9.\n\nBenchmarking Security Closure of Physical Layouts: ISPD 2022 Contest. J , Proc. ISPD. ISPDJ. Knechtel et al. 2022. Benchmarking Security Closure of Physical Layouts: ISPD 2022 Contest. In Proc. ISPD. 221-228.\n\nAn evolutionary approach to hardware encryption and Trojan-horse mitigation. A Marcelli, Proc. DATE. DATEA. Marcelli et al. 2017. An evolutionary approach to hardware encryption and Trojan-horse mitigation. In Proc. DATE. 1593-1598.\n\nNanGate FreePDK45 Open Cell Library. Nangate IncNangate Inc 2011. NanGate FreePDK45 Open Cell Library. Nangate Inc. http: //www.nangate.com/?page_id=2325\n\nSecurity is an Architectural Design Constraint. P Ravi, Microprocess. Microsyst. 68CP. Ravi et al. 2019. Security is an Architectural Design Constraint. Microprocess. Microsyst. 68, C (2019), 17-27.\n\nHardware enlightening: No where to hide your Hardware Trojans!. M S Samimi, Proc. IOLTS. IOLTSM. S. Samimi et al. 2016. Hardware enlightening: No where to hide your Hardware Trojans!. In Proc. IOLTS. 251-256.\n\nKeynote address: Design of secure systems -Where are the EDA tools. G Sigl, Proc. ICCAD. ICCADG. Sigl. 2011. Keynote address: Design of secure systems -Where are the EDA tools?. In Proc. ICCAD. 1-1.\n\nICAS: an Extensible Framework for Estimating the Susceptibility of IC Layouts to Additive Trojans. T , Proc. SP. SPT. Trippel et al. 2020. ICAS: an Extensible Framework for Estimating the Suscep- tibility of IC Layouts to Additive Trojans. In Proc. SP. 1742-1759.\n\nTrojan Scanner: Detecting Hardware Trojans with Rapid SEM Imaging combined with Image Processing and Machine Learning. N Vashistha, ISTFA. N. Vashistha et al. 2018. Trojan Scanner: Detecting Hardware Trojans with Rapid SEM Imaging combined with Image Processing and Machine Learning. In ISTFA.\n\nRuntime Identification of Hardware Trojans by Feature Analysis on Gate-Level Unstructured Data and Anomaly Detection. A Vijayan, TODAES. 254A. Vijayan et al. 2020. Runtime Identification of Hardware Trojans by Feature Analysis on Gate-Level Unstructured Data and Anomaly Detection. TODAES 25, 4 (2020).\n\nControl-Lock: Securing Processor Cores Against Software-Controlled Hardware Trojans. D \u0160i\u0161ejkovi\u0107, Proc. GLSVLSI. GLSVLSID. \u0160i\u0161ejkovi\u0107 et al. 2019. Control-Lock: Securing Processor Cores Against Software-Controlled Hardware Trojans. In Proc. GLSVLSI. 27-32.\n\nDeceptive Logic Locking for Hardware Integrity Protection Against Machine Learning Attacks. D \u0160i\u0161ejkovi\u0107, F Merchant, L M Reimann, R Leupers, TCAD. 41D. \u0160i\u0161ejkovi\u0107, F. Merchant, L. M. Reimann, and R. Leupers. 2022. Deceptive Logic Locking for Hardware Integrity Protection Against Machine Learning Attacks. TCAD 41, 6 (2022), 1716-1729.\n\nBaseline and Protected Layouts. F Wang, F. Wang et al. 2022. Baseline and Protected Layouts. https://drive.google.com/ drive/folders/1A_Cy6w2n31_wuPKVayz50R-1lfXfC4vH?usp=sharing\n\nA Novel Built-In Self-Authentication Technique to Prevent Inserting Hardware Trojans. K Xiao, TCAD. 33K. Xiao et al. 2014. A Novel Built-In Self-Authentication Technique to Prevent Inserting Hardware Trojans. TCAD 33, 12 (2014), 1778-1791.\n\nHardware Trojans: Lessons Learned After One Decade of Research. K Xiao, TODAES. 2223K. Xiao et al. 2016. Hardware Trojans: Lessons Learned After One Decade of Research. TODAES 22, 1 (2016), 6:1-6:23.\n\nA2: Analog Malicious Hardware. K Yang, M Hicks, Q Dong, T Austin, D Sylvester, Proc. SP. SPK. Yang, M. Hicks, Q. Dong, T. Austin, and D. Sylvester. 2016. A2: Analog Malicious Hardware. In Proc. SP. 18-37.\n\nSecurity Analysis of Anti-SAT. M Yasin, Proc. ASP-DAC. ASP-DACM. Yasin et al. 2017. Security Analysis of Anti-SAT. In Proc. ASP-DAC. 342-347.\n", "annotations": {"author": "[{\"end\":134,\"start\":59},{\"end\":172,\"start\":135},{\"end\":221,\"start\":173},{\"end\":296,\"start\":222},{\"end\":374,\"start\":297},{\"end\":459,\"start\":375},{\"end\":525,\"start\":460},{\"end\":589,\"start\":526},{\"end\":661,\"start\":590},{\"end\":745,\"start\":662}]", "publisher": null, "author_last_name": "[{\"end\":72,\"start\":68},{\"end\":146,\"start\":142},{\"end\":182,\"start\":180},{\"end\":232,\"start\":227},{\"end\":311,\"start\":306},{\"end\":388,\"start\":381},{\"end\":475,\"start\":466},{\"end\":541,\"start\":533},{\"end\":601,\"start\":599},{\"end\":682,\"start\":677}]", "author_first_name": "[{\"end\":67,\"start\":59},{\"end\":141,\"start\":135},{\"end\":179,\"start\":173},{\"end\":226,\"start\":222},{\"end\":305,\"start\":297},{\"end\":380,\"start\":375},{\"end\":465,\"start\":460},{\"end\":532,\"start\":526},{\"end\":598,\"start\":590},{\"end\":672,\"start\":662},{\"end\":676,\"start\":673}]", "author_affiliation": "[{\"end\":133,\"start\":97},{\"end\":220,\"start\":184},{\"end\":295,\"start\":259},{\"end\":373,\"start\":337},{\"end\":426,\"start\":390},{\"end\":458,\"start\":428},{\"end\":524,\"start\":494},{\"end\":588,\"start\":558},{\"end\":660,\"start\":624},{\"end\":744,\"start\":708}]", "title": "[{\"end\":56,\"start\":1},{\"end\":801,\"start\":746}]", "venue": null, "abstract": "[{\"end\":2030,\"start\":878}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2212,\"start\":2209},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2215,\"start\":2212},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":2218,\"start\":2215},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":2921,\"start\":2917},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":2924,\"start\":2921},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":4810,\"start\":4807},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4826,\"start\":4823},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":5845,\"start\":5841},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5899,\"start\":5896},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":5902,\"start\":5899},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":7073,\"start\":7070},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":7075,\"start\":7073},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":7109,\"start\":7106},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":7111,\"start\":7109},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":7152,\"start\":7148},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7209,\"start\":7206},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":7211,\"start\":7209},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":7214,\"start\":7211},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7217,\"start\":7214},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7220,\"start\":7217},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":7223,\"start\":7220},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":7226,\"start\":7223},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7229,\"start\":7226},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":7232,\"start\":7229},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7290,\"start\":7286},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7293,\"start\":7290},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":7296,\"start\":7293},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":7413,\"start\":7409},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":7416,\"start\":7413},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8410,\"start\":8406},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8413,\"start\":8410},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":8515,\"start\":8511},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":8518,\"start\":8515},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":8521,\"start\":8518},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":9072,\"start\":9069},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":9148,\"start\":9144},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":9151,\"start\":9148},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":9530,\"start\":9526},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9609,\"start\":9605},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":10345,\"start\":10341},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":10366,\"start\":10362},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":10369,\"start\":10366},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":10394,\"start\":10390},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":10495,\"start\":10492},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":10506,\"start\":10503},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":10516,\"start\":10513},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":10532,\"start\":10529},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":11388,\"start\":11384},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":11577,\"start\":11573},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":11672,\"start\":11668},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":11819,\"start\":11815},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":12092,\"start\":12088},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":12283,\"start\":12279},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":12633,\"start\":12629},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":12959,\"start\":12955},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":13370,\"start\":13366},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":13592,\"start\":13589},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":13594,\"start\":13592},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":13655,\"start\":13651},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":13884,\"start\":13880},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":14360,\"start\":14356},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":14451,\"start\":14447},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":14631,\"start\":14628},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":14633,\"start\":14631},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":14636,\"start\":14633},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":16449,\"start\":16446},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":16732,\"start\":16728},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":18246,\"start\":18243},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":18316,\"start\":18312},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":18379,\"start\":18376},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":18381,\"start\":18379},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":18832,\"start\":18829},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":20234,\"start\":20233},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":22266,\"start\":22263},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23511,\"start\":23510},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":23571,\"start\":23567},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":23689,\"start\":23685},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":27535,\"start\":27531},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":29831,\"start\":29828},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":29847,\"start\":29844},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":30280,\"start\":30277},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":30998,\"start\":30995},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":31344,\"start\":31341},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":33092,\"start\":33088},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33117,\"start\":33113},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":33150,\"start\":33147},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":33302,\"start\":33298},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33327,\"start\":33323},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":41410,\"start\":41406},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":41412,\"start\":41411},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":41686,\"start\":41682}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":34476,\"start\":34162},{\"attributes\":{\"id\":\"fig_1\"},\"end\":34628,\"start\":34477},{\"attributes\":{\"id\":\"fig_2\"},\"end\":34900,\"start\":34629},{\"attributes\":{\"id\":\"fig_3\"},\"end\":35084,\"start\":34901},{\"attributes\":{\"id\":\"fig_4\"},\"end\":35429,\"start\":35085},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":35525,\"start\":35430},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":35963,\"start\":35526},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":36603,\"start\":35964},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":37435,\"start\":36604},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":39495,\"start\":37436},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":41251,\"start\":39496}]", "paragraph": "[{\"end\":2645,\"start\":2046},{\"end\":3224,\"start\":2647},{\"end\":3829,\"start\":3226},{\"end\":4392,\"start\":3831},{\"end\":4450,\"start\":4394},{\"end\":5721,\"start\":4452},{\"end\":6299,\"start\":5723},{\"end\":6902,\"start\":6318},{\"end\":6997,\"start\":6937},{\"end\":7662,\"start\":6999},{\"end\":7939,\"start\":7664},{\"end\":8193,\"start\":7941},{\"end\":8582,\"start\":8214},{\"end\":9020,\"start\":8584},{\"end\":9073,\"start\":9022},{\"end\":9133,\"start\":9075},{\"end\":10032,\"start\":9135},{\"end\":10453,\"start\":10050},{\"end\":11188,\"start\":10455},{\"end\":11320,\"start\":11190},{\"end\":12021,\"start\":11370},{\"end\":12070,\"start\":12023},{\"end\":13252,\"start\":12072},{\"end\":13319,\"start\":13254},{\"end\":14012,\"start\":13354},{\"end\":14919,\"start\":14014},{\"end\":14986,\"start\":14921},{\"end\":15098,\"start\":15004},{\"end\":15951,\"start\":15100},{\"end\":16202,\"start\":15953},{\"end\":16884,\"start\":16204},{\"end\":17093,\"start\":16900},{\"end\":17752,\"start\":17095},{\"end\":18034,\"start\":17754},{\"end\":18489,\"start\":18045},{\"end\":18943,\"start\":18491},{\"end\":19312,\"start\":18945},{\"end\":20069,\"start\":19314},{\"end\":20907,\"start\":20071},{\"end\":21218,\"start\":20909},{\"end\":21592,\"start\":21220},{\"end\":21998,\"start\":21615},{\"end\":23075,\"start\":22028},{\"end\":23273,\"start\":23100},{\"end\":23690,\"start\":23275},{\"end\":23920,\"start\":23716},{\"end\":24333,\"start\":23948},{\"end\":24775,\"start\":24392},{\"end\":25708,\"start\":24923},{\"end\":25889,\"start\":25778},{\"end\":25893,\"start\":25891},{\"end\":25946,\"start\":25926},{\"end\":25997,\"start\":25948},{\"end\":26047,\"start\":25999},{\"end\":26052,\"start\":26049},{\"end\":26063,\"start\":26054},{\"end\":26076,\"start\":26065},{\"end\":26103,\"start\":26078},{\"end\":26137,\"start\":26105},{\"end\":26194,\"start\":26139},{\"end\":26704,\"start\":26196},{\"end\":27440,\"start\":26706},{\"end\":28077,\"start\":27456},{\"end\":29182,\"start\":28120},{\"end\":29448,\"start\":29184},{\"end\":29848,\"start\":29477},{\"end\":30281,\"start\":29850},{\"end\":31784,\"start\":30283},{\"end\":32229,\"start\":31786},{\"end\":32558,\"start\":32231},{\"end\":33379,\"start\":32586},{\"end\":34161,\"start\":33394}]", "formula": "[{\"attributes\":{\"id\":\"formula_1\"},\"end\":23947,\"start\":23921},{\"attributes\":{\"id\":\"formula_2\"},\"end\":24804,\"start\":24776},{\"attributes\":{\"id\":\"formula_3\"},\"end\":24851,\"start\":24804},{\"attributes\":{\"id\":\"formula_4\"},\"end\":24922,\"start\":24851},{\"attributes\":{\"id\":\"formula_5\"},\"end\":25925,\"start\":25894}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":7938,\"start\":7931},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":24954,\"start\":24947},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":27634,\"start\":27627},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":28245,\"start\":28238},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":31827,\"start\":31820},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":32274,\"start\":32267},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":32515,\"start\":32508},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":32664,\"start\":32657}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2044,\"start\":2032},{\"attributes\":{\"n\":\"2\"},\"end\":6316,\"start\":6302},{\"attributes\":{\"n\":\"2.1.2\"},\"end\":6935,\"start\":6905},{\"attributes\":{\"n\":\"2.2\"},\"end\":8212,\"start\":8196},{\"attributes\":{\"n\":\"2.3\"},\"end\":10048,\"start\":10035},{\"attributes\":{\"n\":\"3\"},\"end\":11368,\"start\":11323},{\"attributes\":{\"n\":\"3.2\"},\"end\":13352,\"start\":13322},{\"attributes\":{\"n\":\"4\"},\"end\":15002,\"start\":14989},{\"attributes\":{\"n\":\"5\"},\"end\":16898,\"start\":16887},{\"attributes\":{\"n\":\"5.1\"},\"end\":18043,\"start\":18037},{\"attributes\":{\"n\":\"5.2\"},\"end\":21613,\"start\":21595},{\"attributes\":{\"n\":\"5.2.1\"},\"end\":22026,\"start\":22001},{\"attributes\":{\"n\":\"5.2.2\"},\"end\":23098,\"start\":23078},{\"attributes\":{\"n\":\"5.2.3\"},\"end\":23714,\"start\":23693},{\"attributes\":{\"n\":\"5.2.4\"},\"end\":24390,\"start\":24336},{\"end\":25776,\"start\":25711},{\"attributes\":{\"n\":\"6.1.2\"},\"end\":27454,\"start\":27443},{\"attributes\":{\"n\":\"6.2\"},\"end\":28118,\"start\":28080},{\"attributes\":{\"n\":\"6.3\"},\"end\":29475,\"start\":29451},{\"attributes\":{\"n\":\"6.4\"},\"end\":32584,\"start\":32561},{\"attributes\":{\"n\":\"7\"},\"end\":33392,\"start\":33382},{\"end\":34174,\"start\":34163},{\"end\":34483,\"start\":34478},{\"end\":34640,\"start\":34630},{\"end\":34912,\"start\":34902},{\"end\":35096,\"start\":35086},{\"end\":35536,\"start\":35527},{\"end\":35974,\"start\":35965},{\"end\":36614,\"start\":36605},{\"end\":37446,\"start\":37437},{\"end\":39506,\"start\":39497}]", "table": "[{\"end\":35963,\"start\":35574},{\"end\":36603,\"start\":36004},{\"end\":37435,\"start\":36636},{\"end\":39495,\"start\":37896},{\"end\":41251,\"start\":39732}]", "figure_caption": "[{\"end\":34476,\"start\":34179},{\"end\":34628,\"start\":34485},{\"end\":34900,\"start\":34642},{\"end\":35084,\"start\":34914},{\"end\":35429,\"start\":35098},{\"end\":35525,\"start\":35432},{\"end\":35574,\"start\":35538},{\"end\":36004,\"start\":35976},{\"end\":36636,\"start\":36616},{\"end\":37896,\"start\":37448},{\"end\":39732,\"start\":39508}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":19427,\"start\":19419},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":20230,\"start\":20220},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":20390,\"start\":20380},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":21379,\"start\":21370},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":21803,\"start\":21797},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":26952,\"start\":26945},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":29193,\"start\":29187},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":29286,\"start\":29280}]", "bib_author_first_name": "[{\"end\":42297,\"start\":42296},{\"end\":42549,\"start\":42548},{\"end\":42798,\"start\":42797},{\"end\":43005,\"start\":43001},{\"end\":43290,\"start\":43286},{\"end\":43526,\"start\":43525},{\"end\":43802,\"start\":43801},{\"end\":44038,\"start\":44037},{\"end\":44297,\"start\":44296},{\"end\":44532,\"start\":44531},{\"end\":44803,\"start\":44802},{\"end\":44805,\"start\":44804},{\"end\":45079,\"start\":45078},{\"end\":45344,\"start\":45343},{\"end\":45362,\"start\":45361},{\"end\":45610,\"start\":45609},{\"end\":45819,\"start\":45818},{\"end\":46015,\"start\":46014},{\"end\":46027,\"start\":46026},{\"end\":46232,\"start\":46231},{\"end\":46409,\"start\":46408},{\"end\":46626,\"start\":46625},{\"end\":46986,\"start\":46985},{\"end\":47202,\"start\":47201},{\"end\":47204,\"start\":47203},{\"end\":47416,\"start\":47415},{\"end\":47647,\"start\":47646},{\"end\":47932,\"start\":47931},{\"end\":48226,\"start\":48225},{\"end\":48497,\"start\":48496},{\"end\":48763,\"start\":48762},{\"end\":48777,\"start\":48776},{\"end\":48789,\"start\":48788},{\"end\":48791,\"start\":48790},{\"end\":48802,\"start\":48801},{\"end\":49041,\"start\":49040},{\"end\":49275,\"start\":49274},{\"end\":49494,\"start\":49493},{\"end\":49662,\"start\":49661},{\"end\":49670,\"start\":49669},{\"end\":49679,\"start\":49678},{\"end\":49687,\"start\":49686},{\"end\":49697,\"start\":49696},{\"end\":49868,\"start\":49867}]", "bib_author_last_name": "[{\"end\":42557,\"start\":42550},{\"end\":42806,\"start\":42799},{\"end\":43008,\"start\":43006},{\"end\":43293,\"start\":43291},{\"end\":43538,\"start\":43527},{\"end\":43807,\"start\":43803},{\"end\":44043,\"start\":44039},{\"end\":44302,\"start\":44298},{\"end\":44539,\"start\":44533},{\"end\":44815,\"start\":44806},{\"end\":45083,\"start\":45080},{\"end\":45359,\"start\":45345},{\"end\":45371,\"start\":45363},{\"end\":45614,\"start\":45611},{\"end\":45822,\"start\":45820},{\"end\":46024,\"start\":46016},{\"end\":46041,\"start\":46028},{\"end\":46635,\"start\":46627},{\"end\":46991,\"start\":46987},{\"end\":47211,\"start\":47205},{\"end\":47421,\"start\":47417},{\"end\":47942,\"start\":47933},{\"end\":48234,\"start\":48227},{\"end\":48508,\"start\":48498},{\"end\":48774,\"start\":48764},{\"end\":48786,\"start\":48778},{\"end\":48799,\"start\":48792},{\"end\":48810,\"start\":48803},{\"end\":49046,\"start\":49042},{\"end\":49280,\"start\":49276},{\"end\":49499,\"start\":49495},{\"end\":49667,\"start\":49663},{\"end\":49676,\"start\":49671},{\"end\":49684,\"start\":49680},{\"end\":49694,\"start\":49688},{\"end\":49707,\"start\":49698},{\"end\":49874,\"start\":49869}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":236521870},\"end\":42442,\"start\":42227},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":245130941},\"end\":42726,\"start\":42444},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":240538491},\"end\":42936,\"start\":42728},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":28638987},\"end\":43205,\"start\":42938},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":14793380},\"end\":43441,\"start\":43207},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":52892745},\"end\":43690,\"start\":43443},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":49275797},\"end\":43976,\"start\":43692},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":214419334},\"end\":44228,\"start\":43978},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":221720791},\"end\":44426,\"start\":44230},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":1944370},\"end\":44707,\"start\":44428},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":1826947},\"end\":44984,\"start\":44709},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":155109195},\"end\":45238,\"start\":44986},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":4702641},\"end\":45553,\"start\":45240},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":49184384},\"end\":45729,\"start\":45555},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":232657074},\"end\":45948,\"start\":45731},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":220568216},\"end\":46191,\"start\":45950},{\"attributes\":{\"id\":\"b16\"},\"end\":46336,\"start\":46193},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":248151110},\"end\":46546,\"start\":46338},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":20568732},\"end\":46780,\"start\":46548},{\"attributes\":{\"id\":\"b19\"},\"end\":46935,\"start\":46782},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":75138444},\"end\":47135,\"start\":46937},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":20986841},\"end\":47345,\"start\":47137},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":41875},\"end\":47545,\"start\":47347},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":216394845},\"end\":47810,\"start\":47547},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":76658894},\"end\":48105,\"start\":47812},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":218517357},\"end\":48409,\"start\":48107},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":155100575},\"end\":48668,\"start\":48411},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":236087393},\"end\":49006,\"start\":48670},{\"attributes\":{\"id\":\"b28\"},\"end\":49186,\"start\":49008},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":5254845},\"end\":49427,\"start\":49188},{\"attributes\":{\"id\":\"b30\"},\"end\":49628,\"start\":49429},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":7133559},\"end\":49834,\"start\":49630},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":14767169},\"end\":49977,\"start\":49836}]", "bib_title": "[{\"end\":42294,\"start\":42227},{\"end\":42546,\"start\":42444},{\"end\":42795,\"start\":42728},{\"end\":42999,\"start\":42938},{\"end\":43284,\"start\":43207},{\"end\":43523,\"start\":43443},{\"end\":43799,\"start\":43692},{\"end\":44035,\"start\":43978},{\"end\":44294,\"start\":44230},{\"end\":44529,\"start\":44428},{\"end\":44800,\"start\":44709},{\"end\":45076,\"start\":44986},{\"end\":45341,\"start\":45240},{\"end\":45607,\"start\":45555},{\"end\":45816,\"start\":45731},{\"end\":46012,\"start\":45950},{\"end\":46229,\"start\":46193},{\"end\":46406,\"start\":46338},{\"end\":46623,\"start\":46548},{\"end\":46983,\"start\":46937},{\"end\":47199,\"start\":47137},{\"end\":47413,\"start\":47347},{\"end\":47644,\"start\":47547},{\"end\":47929,\"start\":47812},{\"end\":48223,\"start\":48107},{\"end\":48494,\"start\":48411},{\"end\":48760,\"start\":48670},{\"end\":49272,\"start\":49188},{\"end\":49491,\"start\":49429},{\"end\":49659,\"start\":49630},{\"end\":49865,\"start\":49836}]", "bib_author": "[{\"end\":42300,\"start\":42296},{\"end\":42559,\"start\":42548},{\"end\":42808,\"start\":42797},{\"end\":43010,\"start\":43001},{\"end\":43295,\"start\":43286},{\"end\":43540,\"start\":43525},{\"end\":43809,\"start\":43801},{\"end\":44045,\"start\":44037},{\"end\":44304,\"start\":44296},{\"end\":44541,\"start\":44531},{\"end\":44817,\"start\":44802},{\"end\":45085,\"start\":45078},{\"end\":45361,\"start\":45343},{\"end\":45373,\"start\":45361},{\"end\":45616,\"start\":45609},{\"end\":45824,\"start\":45818},{\"end\":46026,\"start\":46014},{\"end\":46043,\"start\":46026},{\"end\":46235,\"start\":46231},{\"end\":46412,\"start\":46408},{\"end\":46637,\"start\":46625},{\"end\":46993,\"start\":46985},{\"end\":47213,\"start\":47201},{\"end\":47423,\"start\":47415},{\"end\":47650,\"start\":47646},{\"end\":47944,\"start\":47931},{\"end\":48236,\"start\":48225},{\"end\":48510,\"start\":48496},{\"end\":48776,\"start\":48762},{\"end\":48788,\"start\":48776},{\"end\":48801,\"start\":48788},{\"end\":48812,\"start\":48801},{\"end\":49048,\"start\":49040},{\"end\":49282,\"start\":49274},{\"end\":49501,\"start\":49493},{\"end\":49669,\"start\":49661},{\"end\":49678,\"start\":49669},{\"end\":49686,\"start\":49678},{\"end\":49696,\"start\":49686},{\"end\":49709,\"start\":49696},{\"end\":49876,\"start\":49867}]", "bib_venue": "[{\"end\":42311,\"start\":42300},{\"end\":42569,\"start\":42559},{\"end\":42811,\"start\":42808},{\"end\":43045,\"start\":43010},{\"end\":43307,\"start\":43295},{\"end\":43551,\"start\":43540},{\"end\":43813,\"start\":43809},{\"end\":44082,\"start\":44045},{\"end\":44311,\"start\":44304},{\"end\":44552,\"start\":44541},{\"end\":44829,\"start\":44817},{\"end\":45095,\"start\":45085},{\"end\":45385,\"start\":45373},{\"end\":45626,\"start\":45616},{\"end\":45828,\"start\":45824},{\"end\":46054,\"start\":46043},{\"end\":46246,\"start\":46235},{\"end\":46422,\"start\":46412},{\"end\":46647,\"start\":46637},{\"end\":46817,\"start\":46782},{\"end\":47016,\"start\":46993},{\"end\":47224,\"start\":47213},{\"end\":47434,\"start\":47423},{\"end\":47658,\"start\":47650},{\"end\":47949,\"start\":47944},{\"end\":48242,\"start\":48236},{\"end\":48523,\"start\":48510},{\"end\":48816,\"start\":48812},{\"end\":49038,\"start\":49008},{\"end\":49286,\"start\":49282},{\"end\":49507,\"start\":49501},{\"end\":49717,\"start\":49709},{\"end\":49889,\"start\":49876},{\"end\":42575,\"start\":42571},{\"end\":43076,\"start\":43047},{\"end\":43315,\"start\":43309},{\"end\":43558,\"start\":43553},{\"end\":44559,\"start\":44554},{\"end\":44837,\"start\":44831},{\"end\":45101,\"start\":45097},{\"end\":45393,\"start\":45387},{\"end\":45632,\"start\":45628},{\"end\":46061,\"start\":46056},{\"end\":46253,\"start\":46248},{\"end\":46428,\"start\":46424},{\"end\":46653,\"start\":46649},{\"end\":47231,\"start\":47226},{\"end\":47441,\"start\":47436},{\"end\":47662,\"start\":47660},{\"end\":48532,\"start\":48525},{\"end\":49721,\"start\":49719},{\"end\":49898,\"start\":49891}]"}}}, "year": 2023, "month": 12, "day": 17}