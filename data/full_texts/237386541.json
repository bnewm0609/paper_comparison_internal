{"id": 237386541, "updated": "2023-10-05 22:57:00.802", "metadata": {"title": "CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation", "authors": "[{\"first\":\"Yue\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Weishi\",\"last\":\"Wang\",\"middle\":[]},{\"first\":\"Shafiq\",\"last\":\"Joty\",\"middle\":[]},{\"first\":\"Steven C.H.\",\"last\":\"Hoi\",\"middle\":[]}]", "venue": "EMNLP", "journal": "Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "Pre-trained models for Natural Languages (NL) like BERT and GPT have been recently shown to transfer well to Programming Languages (PL) and largely benefit a broad set of code-related tasks. Despite their success, most current methods either rely on an encoder-only (or decoder-only) pre-training that is suboptimal for generation (resp. understanding) tasks or process the code snippet in the same way as NL, neglecting the special characteristics of PL such as token types. We present CodeT5, a unified pre-trained encoder-decoder Transformer model that better leverages the code semantics conveyed from the developer-assigned identifiers. Our model employs a unified framework to seamlessly support both code understanding and generation tasks and allows for multi-task learning. Besides, we propose a novel identifier-aware pre-training task that enables the model to distinguish which code tokens are identifiers and to recover them when they are masked. Furthermore, we propose to exploit the user-written code comments with a bimodal dual generation task for better NL-PL alignment. Comprehensive experiments show that CodeT5 significantly outperforms prior methods on understanding tasks such as code defect detection and clone detection, and generation tasks across various directions including PL-NL, NL-PL, and PL-PL. Further analysis reveals that our model can better capture semantic information from code. Our code and pre-trained models are released at https://github.com/salesforce/CodeT5.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2109.00859", "mag": null, "acl": "2021.emnlp-main.685", "pubmed": null, "pubmedcentral": null, "dblp": "conf/emnlp/0034WJH21", "doi": "10.18653/v1/2021.emnlp-main.685"}}, "content": {"source": {"pdf_hash": "ef00788468b89169e1e78e9bf6d31a510c553eee", "pdf_src": "ACL", "pdf_uri": "[\"https://www.aclanthology.org/2021.emnlp-main.685.pdf\"]", "oa_url_match": true, "oa_info": {"license": "CCBY", "open_access_url": "https://aclanthology.org/2021.emnlp-main.685.pdf", "status": "HYBRID"}}, "grobid": {"id": "e07a79aaea511f6b4e525a77bb25a849f6bbceb6", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/ef00788468b89169e1e78e9bf6d31a510c553eee.txt", "contents": "\nCodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\nAssociation for Computational LinguisticsCopyright Association for Computational LinguisticsNovember 7-11, 2021. 2021\n\nYue Wang wang.y@salesforce.com \nSalesforce Research Asia\n\n\nWeishi Wang weishi.wang@salesforce.com \nShafiq Joty sjoty@salesforce.com \nSteven C H Hoi shoi@salesforce.com \nSalesforce Research Asia\n\n\n\nNanyang Technological University\nSingapore\n\nCodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation\n\nProceedings of the 2021 Conference on Empirical Methods in Natural Language Processing\nthe 2021 Conference on Empirical Methods in Natural Language ProcessingAssociation for Computational LinguisticsNovember 7-11, 2021. 20218696\nPre-trained models for Natural Languages (NL) like BERT and GPT have been recently shown to transfer well to Programming Languages (PL) and largely benefit a broad set of code-related tasks. Despite their success, most current methods either rely on an encoder-only (or decoder-only) pre-training that is suboptimal for generation (resp. understanding) tasks or process the code snippet in the same way as NL, neglecting the special characteristics of PL such as token types. We present CodeT5, a unified pre-trained encoder-decoder Transformer model that better leverages the code semantics conveyed from the developer-assigned identifiers. Our model employs a unified framework to seamlessly support both code understanding and generation tasks and allows for multi-task learning. Besides, we propose a novel identifier-aware pre-training task that enables the model to distinguish which code tokens are identifiers and to recover them when they are masked. Furthermore, we propose to exploit the user-written code comments with a bimodal dual generation task for better NL-PL alignment. Comprehensive experiments show that CodeT5 significantly outperforms prior methods on understanding tasks such as code defect detection and clone detection, and generation tasks across various directions including PL-NL, NL-PL, and PL-PL. Further analysis reveals that our model can better capture semantic information from code. Our code and pre-trained models are released at https: //github.com/salesforce/CodeT5.\n\nIntroduction\n\nPre-trained language models such as BERT (Devlin et al., 2019), GPT (Radford et al., 2019), and T5 (Raffel et al., 2020) have greatly boosted performance in a wide spectrum of natural language processing (NLP) tasks. They typically employ a pre-train then fine-tune paradigm that aims to derive generic language representations by selfsupervised training on large-scale unlabeled data, which can be transferred to benefit multiple downstream tasks, especially those with limited data annotation. Inspired by their success, there are many recent attempts to adapt these pre-training methods for programming language (PL) Kanade et al., 2020;Feng et al., 2020), showing promising results on code-related tasks. However, despite their success, most of these models rely on either an encoder-only model similar to BERT Feng et al., 2020) or a decoder-only model like GPT (Kanade et al., 2020), which is suboptimal for generation and understanding tasks, respectively. For example, CodeBERT (Feng et al., 2020) requires an additional decoder when applied for the code summarization task, where this decoder cannot benefit from the pre-training. Besides, most existing methods simply employ the conventional NLP pretraining techniques on source code by regarding it as a sequence of tokens like NL. This largely ignores the rich structural information in code, which is vital to fully comprehend the code semantics.\n\nIn this work, we present CodeT5, a pre-trained encoder-decoder model that considers the token type information in code. Our CodeT5 builds on the T5 architecture (Raffel et al., 2020) that employs denoising sequence-to-sequence (Seq2Seq) pre-training and has been shown to benefit both understanding and generation tasks in natural language. In addition, we propose to leverage the developer-assigned identifiers in code. When writing programs, developers tend to employ informative identifiers to make the code more understandable, so that these identifiers would generally preserve rich code semantics, e.g., the \"binarySearch\" identifier in Figure 2 directly indicates its functionality. To fuse such code-specific knowledge, we propose a novel identifier-aware objective that trains the model to distinguish which tokens are identifiers and recover them when they are masked.\n\nFurthermore, we propose to leverage the code and its accompanying comments to learn a better NL-PL alignment. Developers often provide documentation for programs to facilitate better software maintenance (de Souza et al., 2005), so that such PL-NL pairs are widely available in most source code. Specifically, we regard the NL\u2192PL generation and PL\u2192NL generation as dual tasks and simultaneously optimize the model on them.\n\nWe pre-train CodeT5 on the CodeSearchNet data (Husain et al., 2019) following (Feng et al., 2020) that consists of both unimodal (PL-only) and bimodal (PL-NL) data on six PLs. In addition to that, we further collect extra data of C/C# from open-source Github repositories. We finetune CodeT5 on most tasks in the CodeXGLUE benchmark , including two understanding tasks: code defect detection and clone detection, and generation tasks such as code summarization, generation, translation, and refinement. As shown in Figure 1, we also explore multi-task learning to fine-tune CodeT5 on multiple tasks at a time using a task control code as the source prompt. In summary, we make the following contributions:\n\n\u2022 We present one of the first unified encoderdecoder models CodeT5 to support both coderelated understanding and generation tasks, and also allows for multi-task learning.\n\n\u2022 We propose a novel identifier-aware pretraining objective that considers the crucial token type information (identifiers) from code. Besides, we propose to leverage the NL-PL pairs that are naturally available in source code to learn a better cross-modal alignment.\n\n\u2022 Extensive experiments show that CodeT5 yields state-of-the-art results on the fourteen sub-tasks in CodeXGLUE. Further analysis shows our CodeT5 can better capture the code semantics with the proposed identifier-aware pre-training and bimodal dual generation primarily benefits NL\u2194PL tasks.\n\n\nRelated Work\n\nPre-training on Natural Language. Pretrained models based on Transformer architectures (Vaswani et al., 2017) have led to state-of-the-art performance on a broad set of NLP tasks. They can be generally categorized into three groups: encoder-only models such as BERT (Devlin et al., 2019), RoBERTa (Liu et al., 2019b), and ELECTRA (Clark et al., 2020), decoder-only models like GPT (Radford et al., 2019), and encoder-decoder models such as MASS (Song et al., 2019), BART (Lewis et al., 2020), and T5 (Raffel et al., 2020). Compared to encoder-only and decoder-only models that respectively favor understanding and generation tasks, encoder-decoder models can well support both types of tasks. They often employ denoising sequence-to-sequence pre-training objectives that corrupt the source input and require the decoder to recover them. In this work, we extend T5 to the programming language and propose a novel identifier-aware denoising objective that enables the model to better comprehend the code.\n\nPre-training on Programming Language. Pretraining on the programming language is a nascent field where much recent work attempts to extend the NLP pre-training methods to source code. Cu-BERT (Kanade et al., 2020) and CodeBERT (Feng et al., 2020) are the two pioneer models. CuBERT employs BERT's powerful masked language modeling objective to derive generic code-specific representation, and CodeBERT further adds a replaced token detection (Clark et al., 2020) task to learn NL-PL cross-modal representation. Besides the BERT-style models,  and  respectively employ GPT and UniLM (Dong et al., 2019)  Masked Input Output (a) Masked Span Prediction Figure 2: Pre-training tasks of CodeT5. We first alternately train span prediction, identifier prediction, and identifier tagging on both unimodal and bimodal data, and then leverage the bimodal data for dual generation training.\n\nencoder-decoder models based on T5 for programming language pre-training and support a more comprehensive set of tasks. Some emerging work (Clement et al., 2020;Mastropaolo et al., 2021;Elnaggar et al., 2021) in the recent literature also explore the T5 framework on code, but they only focus on a limited subset of generation tasks and do not support understanding tasks like us. Apart from these, PLBART (Ahmad et al., 2021) based on another encoder-decoder model BART can also support both understanding and generation tasks. However, all the above prior work simply processes code in the same way as natural language and largely ignores the code-specific characteristics. Instead, we propose to leverage the identifier information in code for pre-training.\n\nRecently, GraphCodeBERT  incorporates the data flow extracted from the code structure into CodeBERT, while Rozi\u00e8re et al. (2021) propose a deobfuscation objective to leverage the structural aspect of PL. These models only focus on training a better code-specific encoder. Z\u00fcgner et al. (2021) proposes to capture the relative distances between code tokens over the code structure. By contrast, we specifically focus on the identifiers that reserve rich code semantics and fuse such information into a Seq2Seq model via two novel identifier tagging and prediction tasks.\n\n\nCodeT5\n\nOur CodeT5 builds on an encoder-decoder framework with the same architecture as T5 (Raffel et al., 2020). It aims to derive generic representations for programming language (PL) and natural language (NL) via pre-training on unlabeled source code. As illustrated in Figure 2, we extend the de-noising Seq2Seq objective in T5 by proposing two identifier tagging and prediction tasks to enable the model to better leverage the token type information from PL, which are the identifiers assigned by developers. To improve the NL-PL alignment, we further propose a bimodal dual learning objective for a bidirectional conversion between NL and PL.\n\nIn the following, we introduce how CodeT5 encodes PL and NL inputs ( \u00a73.1) and our proposed identifier-aware pre-training tasks ( \u00a73.2), followed by the fine-tuning with task-specific transfer learning and multi-task training ( \u00a73.3).\n\n\nEncoding NL and PL\n\nAt the pre-training stage, our model would receive either PL-only or NL-PL as inputs depending on whether the code snippet has accompanying NL descriptions or not. For the NL-PL bimodal inputs, we concatenate them into a sequence with a delimiter token [SEP] and represent the whole input sequence into the format as x = ([CLS], w 1 , ..., w n , [SEP], c 1 , ..., c m , [SEP]), where n and m denote the number of NL word tokens and PL code tokens, respectively. The NL word sequence will be empty for PL-only unimodal inputs.\n\nIn order to capture more code-specific features, we propose to leverage token type information from code. We focus on the type of identifiers (e.g., function names and variables) as they are one of the most PL-agnostic features and reserve rich code semantics. Specifically, we convert the PL segment into an Abstract Syntax Tree (AST) and extract the node types for each code token. Finally, we construct a sequence of binary labels y \u2208 {0, 1} m for the PL segment, where each y i \u2208 {0, 1} represents whether the code token c i is an identifier or not.\n\n\nPre-training Tasks\n\nWe now introduce our proposed pre-training tasks that enable CodeT5 to learn useful patterns from either PL-only or NL-PL bimodal data.\n\nIdentifier-aware Denoising Pre-training. Denoising Sequence-to-Sequence (Seq2Seq) pretraining has been shown to be quite effective in a broad set of NLP tasks (Song et al., 2019;Raffel et al., 2020;Lewis et al., 2020). This denoising objective typically first corrupts the source sequence with some noising functions and then requires the decoder to recover the original texts. In this work, we utilize a span masking objective similar to T5 (Raffel et al., 2020) that randomly masks spans with arbitrary lengths and then predicts these masked spans combined with some sentinel tokens at the decoder. We refer this task to Masked Span Prediction (MSP), as illustrated in Figure 2 (a).\n\nSpecifically, we employ the same 15% corruption rate as T5 and ensure the average span length to be 3 by uniformly sampling spans of from 1 to 5 tokens. Moreover, we employ the whole word masking by sampling spans before subword tokenization, which aims to avoid masking partial subtokens and is shown to be helpful (Sun et al., 2019). Notably, we pre-train a shared model for various PLs to learn robust cross-lingual representations. We describe the masked span prediction loss as:\nL M SP (\u03b8) = k t=1 \u2212 log P \u03b8 (x mask t |x \\mask , x mask <t ),\n(1) where \u03b8 are the model parameters, x \\mask is the masked input, x mask is the masked sequence to predict from the decoder with k denoting the number of tokens in x mask , and x mask <t is the span sequence generated so far.\n\nTo fuse more code-specific structural information (the identifier node type in AST) into the model, we propose two additional tasks: Identifier Tagging (IT) and Masked Identifier Prediction (MIP) to complement the denoising pre-training. .\n\n\u2022 Identifier Tagging (IT) It aims to notify the model with the knowledge of whether this code token is an identifier or not, which shares a similar spirit of syntax highlighting in some developeraided tools. As shown in Figure 2 (b), we map the final hidden states of the PL segment at the CodeT5 encoder into a sequence of probabilities p = (p 1 , ..., p m ), and compute a binary cross en-tropy loss for sequence labeling:\nL IT (\u03b8 e ) = m i=1 \u2212[y i log p i + (1 \u2212 y i ) log(1 \u2212 p i )],\n(2) where \u03b8 e are the encoder parameters. Note that by casting the task as a sequence labeling problem, the model is expected to capture the code syntax and the data flow structures of the code.\n\n\u2022 Masked Identifier Prediction (MIP) Different from the random span masking in MSP, we mask all identifiers in the PL segment and employ a unique sentinel token for all occurrences of one specific identifier. In the field of software engineering, this is called obfuscation where changing identifier names does not impact the code semantics. Inspired by Rozi\u00e8re et al. (2021), we arrange the unique identifiers with the sentinel tokens into a target sequence I as shown in Figure 2 (c). We then predict it in an auto-regressive manner:\nL M IP (\u03b8) = |I| j=1 \u2212 log P \u03b8 (I j |x \\I , I <j ),(3)\nwhere x \\I is the masked input. Note that deobfuscation is a more challenging task that requires the model to comprehend the code semantics based on obfuscated code and link the occurrences of the same identifiers together. We alternately optimize these three losses with an equal probability, which constitutes our proposed identifier-aware denoising pre-training.\n\nBimodal Dual Generation. In the pre-training phase, the decoder only sees discrete masked spans and identifiers, which is disparate from the downstream tasks where the decoder needs to generate either fluent NL texts or syntactically correct code snippets. To close the gap between the pretraining and fine-tuning, we propose to leverage the NL-PL bimodal data to train the model for a bidirectional conversion as shown in Figure 2 (d). Specifically, we regard the NL\u2192PL generation and PL\u2192NL generation as dual tasks and simultaneously optimize the model on them. For each NL-PL bimodal datapoint, we construct two training instances with reverse directions and add language ids (e.g., <java> and <en> for Java PL and English NL, respectively). This operation can be also seen as a special case of T5's span masking by either masking the full NL or PL segment from the bimodal inputs. This task aims to improve the alignment between the NL and PL counterparts.\n\n\nFine-tuning CodeT5\n\nAfter pre-training on large-scale unlabeled data, we adapt CodeT5 to downstream tasks via either taskspecific transfer learning or multi-task learning.\n\nTask-specific Transfer Learning: Generation vs. Understanding Tasks. Code-related tasks can be categorized into generation and understanding tasks. For the former one, our CodeT5 can be naturally adapted with its Seq2Seq framework. For understanding tasks, we investigate two ways of either generating the label as a unigram target sequence (Raffel et al., 2020), or predicting it from the vocabulary of class labels based on the last decoder hidden state following Lewis et al. (2020).\n\nMulti-task Learning. We also explore a multitask learning setting by training a shared model on multiple tasks at a time. Multi-task learning is able to reduce computation cost by reusing the most of model weights for many tasks and has been shown to improve the model generalization capability in NL pre-training (Liu et al., 2019a). We follow Raffel et al. (2020) to employ the same unified model for all tasks without adding any taskspecific networks but allow to select different best checkpoints for different tasks. To notify the model with which task it is dealing with, we design a unified format of task control codes and prepend it into the source inputs as shown in Figure 1. For instance, we employ \"Translate Java to CSharp:\" as the source prompt for the code-to-code translation task from Java to CSharp.\n\nAs different tasks have different dataset sizes, we follow Conneau and Lample (2019) to employ a balanced sampling strategy. For N number of datasets (or tasks), with probabilities {q i } N i=1 , we define the following multinomial distribution to sample from:\nq i = r \u03b1 i N j=1 r \u03b1 j , where r i = n i N k=1 n k ,(4)\nwhere n i is number of examples for i-th task and \u03b1 is set to 0.7. This balanced sampling aims to alleviate the bias towards high-resource tasks.\n\n4 Experimental Setup\n\n\nPre-training Dataset\n\nWe follow Feng et al. (2020) to employ Code-SearchNet (Husain et al., 2019) to pre-train  CodeT5, which consists of six PLs with both unimodal and bimodal data. Apart from that, we additionally collect two datasets of C/CSharp from BigQuery 1 to ensure that all downstream tasks have overlapped PLs with the pre-training data. In total, we employ around 8.35 million instances for pretraining. Table 1 shows some basic statistics. To obtain the identifier labels from code, we leverage the tree-sitter 2 to convert the PL into an abstract syntax tree and then extract its node type information. We filter out reserved keywords for each PL from its identifier list. We observe that PLs have different identifier rates, where Go has the least rate of 19% and Ruby has the highest rate of 32%.\nPLs W/ NL W/o NL Identifier CodeSearchNet \uf8f1 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f2 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f4 \uf8f3\n\nCode-specific Tokenizer\n\nTokenization is a key ingredient for the success of pre-trained language models like BERT and GPT. They often employ a Byte-Pair Encoding (BPE) tokenizer (Sennrich et al., 2016) \n\n\nDownstream Tasks and Metrics\n\nWe cover most generation and understanding tasks in the CodeXGLUE benchmark  and employ the provided public datasets and the same data splits following it for all these tasks. We first consider two cross-modal generation tasks. Code summarization aims to summarize a function-level code snippet into English descriptions. The dataset consists of six PLs including Ruby, JavaScript, Go, Python, Java, and PHP from CodeSearchNet (Husain et al., 2019). We employ the smoothed BLEU-4 (Lin and Och, 2004) to evaluate this task. Code generation is the task to generate a code snippet based on NL descriptions. We employ the Concode data (Iyer et al., 2018) in Java where the input contains both NL texts and class environment contexts, and the output is a function. We evaluate it with BLEU-4, exact match (EM) accuracy, and CodeBLEU (Ren et al., 2020) that considers syntactic and semantic matches based on the code structure in addition to the n-gram match.\n\nBesides, we consider two code-to-code generation tasks. Code translation aims to migrate legacy software from one PL to another, where we focus on translating functions from Java to CSharp and vice versa. Code refinement aims to convert a buggy function into a correct one. We employ two Java datasets provided by Tufano et al. (2019) with various function lengths: small (fewer than 50 tokens) and medium (50-100 tokens). We use BLEU-4 and exact match to evaluate them.\n\nWe also investigate how CodeT5 performs on two understanding-based tasks. The first one is defect detection that aims to predict whether a code is vulnerable to software systems or not. We use the C dataset provided by  for experiment. The second task is clone detection which aims to measure the similarity between two code snippets and predict whether they have the same functionality. We experiment with the Java data provided by Wang et al. (2020). We employ F1 score and accuracy for evaluating these two tasks respectively. In total, our CodeT5 supports six tasks and fourteen sub-tasks in CodeXGLUE with a unified encoder-decoder model.\n\n\nComparison Models\n\nWe compare CodeT5 with state-of-the-art (SOTA) pre-trained models that can be categorized into three types: encoder-only, decoder-only, and encoder-decoder models. As encoder-only models, we consider RoBERTa (Liu et al., 2019b), RoBERTa (code) trained with masked language modeling (MLM) on code, CodeBERT (Feng et al., 2020) trained with both MLM and replaced token detection (Clark et al., 2020), GraphCode-BERT  using data flow from code, and DOBF (Rozi\u00e8re et al., 2021) trained with the identifier deobfuscation objective. Note that although DOBF employs a Seq2Seq model during pre-training, it only aims to train a better encoder for downstream tasks without exploring the potential benefit of the pre-trained decoder.\n\nFor decoder-only models, we compare GPT-2 (Radford et al., 2019) and its adaptations on code domain including CodeGPT-2, and CodeGPTadapted. The difference is that the latter one utilizes a GPT-2 checkpoint for model initialization while the former one is trained from scratch. As encoder-decoder models, the current SOTA model for the CodeXGLUE benchmark is PLBART (Ahmad et al., 2021) based on BART (Lewis et al., 2020) architecture. For pre-training data, most of these models employ CodeSearchNet (Husain et al., 2019) except DOBF and PLBART. DOBF is pretrained on 7.9M Java and 3.6M Python files from BigQuery while PLBART employs a much larger data with 470M Python and 210M Java functions, and 47M NL posts from StackOverflow.  \n\n\nModel Configurations\n\nWe build CodeT5 based on Huggingface's T5 (Raffel et al., 2020) PyTorch implementation 3 and employ two sizes of CodeT5-small (60M) and CodeT5-base (220M). We set the maximum source and target sequence lengths to be 512 and 256, respectively. We use the mixed precision of FP16 to accelerate the pre-training. We set the batch size to 1024 and employ the peak learning rate of 2e-4 with linear decay. We pre-train the model with the denoising objective for 100 epochs and bimodal dual training for further 50 epochs on a cluster of 16 NVIDIA A100 GPUs with 40G memory. The total training time for CodeT5-small and CodeT5base is 5 and 12 days, respectively. In the fine-tuning phase, we find that the tasks in CodeXGLUE  are quite sensitive to some hyper parameters such as learning rate, training steps, and batch size. We conduct a grid search and select the best parameters based on the validation set. In multi-task learning, we cover all downstream tasks except clone detection.\n\n\nResults and Analysis\n\nIn this section, we compare CodeT5 with SOTA models on a broad set of CodeXGLUE downstream tasks ( \u00a75.1), and investigate the effects of our bimodal dual generation and multi-task learning ( \u00a75.2), followed by a detailed analysis on the proposed identifier-aware pre-training ( \u00a75.3).\n\n\nCodeXGLUE Downstream Tasks\n\nWe evaluate two sizes of our model: CodeT5small and CodeT5-base that are pre-trained with identifier-aware denoising. In addition, we consider the model that continues to train with bimodal dual 3 https://huggingface.co/ generation (dual-gen) and show the results with multi-task fine-tuning. The results of all comparison models are obtained from their original papers and also the CodeXGLUE paper . Code Summarization. We show code summarization results of smoothed BLEU-4 on six PL data in Table 2. We observe all our model variants significantly outperform prior work with either an encode-only (RoBERTa, CodeBERT, DOBF) or encoder-decoder framework (PLBART). Moreover, the salient performance gap between these two groups of models confirms that encode-only frameworks are suboptimal for generation tasks. Compared to the SOTA encoder-decoder model PLBART, we find that even our CodeT5-small yields better overall scores (also on Python and Java) given that our model is much smaller (60M vs. 140M) and PLBART is pre-trained with much larger Python and Java data (> 100 times). We attribute such improvement to our identifier-aware denoising pre-training and better employment of bimodal training data 4 . By increasing the model size, our CodeT5-base boosts the overall performance by over 1.2 absolute points over PLBART. Code Generation. We compare CodeT5 with GPT-style models and PLBART in Table 3. Our CodeT5-small outperforms all decoder-only models and also the SOTA PLBART, which again confirms the superiority of encoder-decoder models at generating code snippets. Moreover, our CodeT5-base further significantly pushes the SOTA results across three metrics. Particularly, it achieves around 4.7 points improvement on CodeBLEU over PLBART, indicating our CodeT5 can better comprehend the code syntax and semantics with the help of identifier-aware pre-training. Code-to-Code Generation Tasks. We compare two code-to-code generation tasks: code translation and code refinement in Table 4 and further consider one naive copy baseline by copying the source input as the target prediction. In the code translation task, our CodeT5-small outperforms most of baselines and obtains comparable results with PLBART, which shows the advantages of encoder-decoder models in the code-to-code generation setting. Our CodeT5-base further achieves consistent improvements over PLBART across various metrics for translating from Java to C# and vice versa.\n\nHere we show one CodeT5's output of translating C# to Java in Figure 3. In this case, despite the poor BLEU score, CodeT5 is able to generate a function that reserves the same functionality and even has better readability compared to the ground-truth. This reveals that CodeT5 has a good generalization ability instead of memorizing and repeating what it has seen before. On the other hand, it also suggests that BLEU score is not a perfect evaluation metric for code generation tasks, where sometimes a higher score can instead reflect the problematic copy issues of neural models.\n\nAnother code-to-code generation task is code refinement, a challenging task that requires to detect which parts of code are buggy and fix them via generating a bug-free code sequence. Due to the large overlap of source and target code, even the naive copy approach yields very high BLEU scores but zero exact matches. Therefore, we focus on the exact match (EM) metric to evaluate on this task. As shown in Table 4, we observe that EM scores for the small data are consistently higher than the medium one, indicating that it is harder to fix bugs for a longer code snippet. Our CodeT5-base significantly outperforms all baselines on EM and especially boosts over 4.8 points for the more challenging medium task (13.96 vs. GraphCodeBERT's 9.10), reflecting its strong code understanding capability.\n\nUnderstanding Tasks. We compare with two understanding tasks of defect detection and clone de-  Table 6: Ablation study with CodeT5-small on four selected tasks. \"Sum-PY\" denotes code summarization on Python and \"Code-Gen\" denotes code generation.\n\ntection in Table 5. Specifically, we generate the binary labels as a unigram sequence from the decoder for the defect detection task, while for the clone detection task, we first obtain the sequence embedding of each code snippet using the last decoder state following Lewis et al. (2020) and then predict the labels by measuring their similarity. Both CodeT5-small and CodeT5-base outperform all baselines on the defect detection task while CodeT5-base yields 2.6 accuracy score improvement than PLBART. For the clone detection task, our CodeT5 models achieve comparable results to the SOTA GraphCodeBERT and PLBART models. These results demonstrate that with an encode-decoder framework, our CodeT5 can still be adapted well for understanding tasks.\n\n\nEffects of Bimodal Dual Generation and Multi-task Learning\n\nWe examine the effects of bimodal dual generation at pre-training and multi-task learning at finetuning. The bimodal pre-training brings consistent improvements for code summarization and generation tasks on both CodeT5-small and CodeT5-base. However, this pre-training task does not help and even sometimes slightly hurts the performance for PL-PL generation and understanding tasks. We anticipate this is because bimodal dual generation learns a better alignment between PL and NL that naturally benefits the former tasks involving both PL and NL. As a side effect, this objective could bias the model towards the PL-NL tasks and affect its performance on PL-PL tasks.\n\nIn multi-task learning, it generally improves most of downstream tasks except the code translation and defect detection. Particularly, it largely boosts the performance on code summarization, which is not surprising as code summarization takes up the largest portion of sub tasks (six out of thirteen) and thereby benefit the most from the multi-task learning. Besides, we observe that multi-task learning consistently improves the per- formance of code refinement, which might benefit from the joint training of both small and medium refinement data. Another possible reason is that multi-task training with defect detection would enable the model to better comprehend the code semantics for bug detection, which is also a necessary intermediate step for code refinement.\n\n\nAnalyzing Identifier-aware Pre-training\n\nWe provide an ablation study to examine the contribution of each component in our identifier-aware pre-training objective. Specifically, we compare the performance of our CodeT5-small on four selected tasks by ablating each of the three objectives: masked span prediction (MSP), identifier tagging (IT), and masked identifier prediction (MIP). As shown in Table 6, we observe that generally removing one of the objectives would reduce the performance for all tasks, indicating that all objectives contribute to the better code understanding of our CodeT5. However, the effect of each objective differs across tasks. Specifically, removing MSP would largely reduce the performance of all generation tasks but instead increase the defect detection performance. This shows that masked span prediction is more crucial for capturing syntactic information for generation tasks. On the contrary, removing MIP would hurt the defect detection task the most, indicating that it might focus more on code semantic understanding. By combining these objectives, our CodeT5 can better capture both syntactic and semantic information from code. We further provide outputs from CodeT5 and its variant without MIP and IT on code generation in Figure 4. We observe that CodeT5 can correctly generate the exact function, while the model without MIP and IT fails to recover the identifiers of \"s2\" and \"hasField\". This shows our identifier-aware denoising pre-training can better distinguish and leverage the identifier information.  Table 7: Compare MSP and MIP on a subset of Java in CodeSearchNet. \"#Pred M\" denotes the ratio of prediction numbers that matches the sentinel token numbers.\n\nWe also investigate the identifier tagging performance and find it achieves over 99% F1 for all PLs, showing that our CodeT5 can confidently distinguish identifiers in code. We then check whether MSP and MIP tasks would have conflicts as they employ the same sentinel tokens for masking. In identifier masking, all occurrences of one unique identifier are replaced with the same sentinel token, resulting in a many-to-one mapping compared to the one-to-one mapping in span prediction. We compare models pre-trained with either MSP or MIP, and both on these two tasks in Table 7. We report the prediction accuracy and also the ratio of how often they can generate the same number of predictions as the sentinel tokens. We observe that pre-training only with either MIP or MSP would bias the model towards that task, achieving poor accuracy and higher mismatch in number of predictions when applied to the other task. Interestingly, we find that MIP-only objective can better recover the correct number of predictions in the MSP task than MSP-only does for the MIP task, meaning that it is easier to adapt from many-to-one mapping to one-to-one mapping and difficult for the opposite. At last, combining them can help our model to make a good trade-off on both tasks.\n\n\nConclusion\n\nWe have presented CodeT5, a pre-trained encoderdecoder model that incorporates the token type information from code. We propose a novel identifieraware pre-training objective to better leverage the identifiers and propose a bimodal dual generation task to learn a better NL-PL alignment using code and its comments. Our unified model can support both code understanding and generation tasks and allow for multi-task learning. Experiments show that CodeT5 significantly outperforms all prior work in most CodeXGLUE tasks. Further analysis also reveals its better code comprehension capability across various programming languages.\n\n\nBroader Impact and Ethical Consideration\n\nOur work generally belongs to NLP applications for software intelligence. With the goal of improving the development productivity of software with machine learning methods, software intelligence research has attracted increasing attention in both academia and industries over the last decade. Software code intelligence techniques can help developers to reduce tedious repetitive workloads, enhance the programming quality and improve the overall software development productivity. This would considerably decrease their working time and also could potentially reduce the computation and operational cost, as a bug might degrade the system performance or even crash the entire system. Our work addresses the fundamental challenge of software code pre-training, our study covers a wide range of code intelligence applications in the software development lifecycle, and the proposed CodeT5 method achieves the state-of-the-art performance on many of the benchmark tasks, showing its great potential benefit towards this goal.\n\nWe further discuss the ethical consideration of training CodeT5 and the potential risks when applying it into real-world downstream applications:\n\nDataset bias. The training datasets in our study are source code including user-written comments from open source Github repositories and publicly available, which do not tie to any specific application. However, it is possible that these datasets would encode some stereotypes like race and gender from the text comments or even from the source code such as variables, function and class names. As such, social biases would be intrinsically embedded into the models trained on them. As suggested by Chen et al. (2021), interventions such as filtration or modulation of generated outputs may help to mitigate these biases in code corpus.\n\nComputational cost. Our model pre-training requires non-trivial computational resources though we have tried our best to carefully design our experiments and improve experiments to save unnecessary computation costs. In fact, compared to the recent large-scale language model Codex (Chen et al., 2021), our CodeT5-base has a much smaller model size of 220M than theirs of 12B (\u223c 55\u00d7). In addition, we experiment on Google Cloud Platform which purchases carbon credits to reduce its carbon footprint, e.g., training CodeT5-base produced around 49.25 kg CO 2 which was totally off-set by the provider. Furthermore, we release our pre-trained models publicly to avoid repeated training for the code intelligence research community.\n\nAutomation bias. As CodeT5 can be deployed to provide coding assistance such as code generation for aiding developers, automation bias of machine learning systems should be carefully considered, especially for developers who tend to overrely on the model-generated outputs. Sometimes these systems might produce functions that superficially appear correct but do not actually align with the developer's intents. If developers unintentionally adopt these incorrect code suggestions, it might cause them much longer time on debugging and even lead to some significant safety issues. We suggest practitioners using CodeT5 should always bear in mind that its generation outputs should be only taken as references which require domain experts for further correctness and security checking.\n\nSecurity implications. We train CodeT5 on existing code corpus including CodeSearchNet (Husain et al., 2019) and a small fraction of Google BigQuery, both of which are originally collected from public Github repositories. Pre-trained models might encode some sensitive information (e.g., personal addresses or identification numbers) from the training data. Though we have conducted multirounds of data cleaning to mitigate this before training our models, it is still possible that some sensitive information cannot be completely removed. Besides, due to the non-deterministic nature of generation models like CodeT5, it might produce some vulnerable code to harmfully affect the software and even be able to benefit more advanced malware development when deliberately misused.\n\nFigure 1 :\n1Illustration of our CodeT5 for code-related understanding and generation tasks.\n\nFigure 3 :\n3One translation (C# to Java) example that is semantically correct but with a 50.23% BLEU-4 score.\n\nTable 1 :\n1Dataset statistics. \"Identifier\" denotes the proportion of identifiers over all code tokens for each PL.\n\nTable 2 :\n2Smoothed BLEU-4 scores on the code summarization task. The \"Overall\" column shows the average scores over six PLs. Best results are in bold.Methods \nEM BLEU CodeBLEU \n\nGPT-2 \n17.35 25.37 \n29.69 \nCodeGPT-2 \n18.25 28.69 \n32.71 \nCodeGPT-adapted 20.10 32.79 \n35.98 \nPLBART \n18.75 36.69 \n38.52 \n\nCodeT5-small \n21.55 38.13 \n41.39 \n+dual-gen \n19.95 39.02 \n42.21 \n+multi-task \n20.15 35.89 \n38.83 \nCodeT5-base \n22.30 40.73 \n43.20 \n+dual-gen \n22.70 41.48 \n44.10 \n+multi-task \n21.15 37.54 \n40.01 \n\n\n\nTable 3 :\n3Results on the code generation task. EM denotes the exact match.\n\nTable 4 :\n4BLEU-4 scores and exact match (EM) accuracies for code translation (Java to \nC# and C# to Java) and code refinement (small and medium) tasks. \n\nMethods \nDefect \nClone \nAccuracy \nF1 \n\nRoBERTa \n61.05 \n94.9 \nCodeBERT \n62.08 \n96.5 \nDOBF \n-\n96.5 \nGraphCodeBERT \n-\n97.1 \nPLBART \n63.18 \n97.2 \n\nCodeT5-small \n63.40 \n97.1 \n+dual-gen \n63.47 \n97.0 \n+multi-task \n63.58 \n-\nCodeT5-base \n65.78 \n97.2 \n+dual-gen \n62.88 \n97.0 \n+multi-task \n65.02 \n-\n\nTable 5: Results on the code defect detec-\ntion and clone detection tasks. \n\n\nhttps://console.cloud.google.com/ marketplace/details/github/github-repos 2 https://tree-sitter.github.io/ tree-sitter/\nApart from bimodal dual generation, we concatenate NL and PL for training while PLBART deals with them separately.\nhttps://github.com/microsoft/ CodeXGLUE\nAcknowledgementsWe thank Akhilesh Deepak Gotmare, Amrita Saha, Junnan Li, and Chen Xing for valuable discussions. We thank Kathy Baxter for the ethical review. We thank the CodeXGLUE team  who provide wonderful code 5 to facilitate the easy evaluation on their benchmarks and especially thank Daya Guo for clarifying some confused points. We also thank our anonymous reviewers for their insightful feedback on our paper.\nUnified pre-training for program understanding and generation. Saikat Wasi Uddin Ahmad, Baishakhi Chakraborty, Kai-Wei Ray, Chang, 10.18653/v1/2021.naacl-main.211Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2021. the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2021OnlineAssociation for Computational LinguisticsWasi Uddin Ahmad, Saikat Chakraborty, Baishakhi Ray, and Kai-Wei Chang. 2021. Unified pre-training for program understanding and generation. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computa- tional Linguistics: Human Language Technologies, NAACL-HLT 2021, Online, June 6-11, 2021, pages 2655-2668. Association for Computational Linguis- tics.\n\nMark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde De Oliveira Pinto, Jared Kaplan, Harrison Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad Bavarian, Clemens Winter, Philippe Tillet, Felipe Petroski Such, Dave Cummings, Matthias Plappert, Fotios Chantzis. Igor Babuschkin, Suchir Balaji, Shantanu Jain, William Saunders, Christopher Hesse, Andrew NElizabeth Barnes, Ariel Herbert-Voss, William Hebgen Guss, Alex Nichol, Alex Paino, Nikolas Tezak, Jie TangMark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan, Harrison Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, Alex Ray, Raul Puri, Gretchen Krueger, Michael Petrov, Heidy Khlaaf, Girish Sastry, Pamela Mishkin, Brooke Chan, Scott Gray, Nick Ryder, Mikhail Pavlov, Alethea Power, Lukasz Kaiser, Mohammad Bavarian, Clemens Win- ter, Philippe Tillet, Felipe Petroski Such, Dave Cum- mings, Matthias Plappert, Fotios Chantzis, Eliza- beth Barnes, Ariel Herbert-Voss, William Hebgen Guss, Alex Nichol, Alex Paino, Nikolas Tezak, Jie Tang, Igor Babuschkin, Suchir Balaji, Shantanu Jain, William Saunders, Christopher Hesse, Andrew N.\n\n. Jan Carr, Joshua Leike, Vedant Achiam, Evan Misra, Alec Morikawa, Matthew Radford, Miles Knight, Mira Brundage, Katie Murati, Peter Mayer, Bob Welinder, Dario Mcgrew, Sam Amodei, Mccandlish, Ilya Sutskever, and Wojciech Zaremba. 2021. Evaluating large language models trained on code. CoRR, abs/2107.03374Carr, Jan Leike, Joshua Achiam, Vedant Misra, Evan Morikawa, Alec Radford, Matthew Knight, Miles Brundage, Mira Murati, Katie Mayer, Peter Welin- der, Bob McGrew, Dario Amodei, Sam McCandlish, Ilya Sutskever, and Wojciech Zaremba. 2021. Evalu- ating large language models trained on code. CoRR, abs/2107.03374.\n\nELECTRA: pretraining text encoders as discriminators rather than generators. Kevin Clark, Minh-Thang Luong, Quoc V Le, Christopher D Manning, 8th International Conference on Learning Representations. Addis Ababa, Ethiopia2020OpenReview.netKevin Clark, Minh-Thang Luong, Quoc V. Le, and Christopher D. Manning. 2020. ELECTRA: pre- training text encoders as discriminators rather than generators. In 8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020. OpenReview.net.\n\nPymt5: multi-mode translation of natural language and python code with transformers. Colin B Clement, Dawn Drain, Jonathan Timcheck, Alexey Svyatkovskiy, Neel Sundaresan, 10.18653/v1/2020.emnlp-main.728Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing. the 2020 Conference on Empirical Methods in Natural Language Processing2020Association for Computational LinguisticsColin B. Clement, Dawn Drain, Jonathan Timcheck, Alexey Svyatkovskiy, and Neel Sundaresan. 2020. Pymt5: multi-mode translation of natural language and python code with transformers. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing, EMNLP 2020, On- line, November 16-20, 2020, pages 9052-9065. As- sociation for Computational Linguistics.\n\nCrosslingual language model pretraining. Alexis Conneau, Guillaume Lample, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems. NeurIPS; Vancouver, BC, CanadaAlexis Conneau and Guillaume Lample. 2019. Cross- lingual language model pretraining. In Advances in Neural Information Processing Systems 32: An- nual Conference on Neural Information Processing Systems 2019, NeurIPS 2019, December 8-14, 2019, Vancouver, BC, Canada, pages 7057-7067.\n\nA study of the documentation essential to software maintenance. Sergio Cozzetti, B De Souza, Nicolas Anquetil, K\u00e1thia Mar\u00e7al De Oliveira, 10.1145/1085313.1085331Proceedings of the 23rd Annual International Conference on Design of Communication: documenting & Designing for Pervasive Information, SIGDOC 2005. the 23rd Annual International Conference on Design of Communication: documenting & Designing for Pervasive Information, SIGDOC 2005Coventry, UKACMSergio Cozzetti B. de Souza, Nicolas Anquetil, and K\u00e1thia Mar\u00e7al de Oliveira. 2005. A study of the doc- umentation essential to software maintenance. In Proceedings of the 23rd Annual International Con- ference on Design of Communication: documenting & Designing for Pervasive Information, SIGDOC 2005, Coventry, UK, September 21-23, 2005, pages 68-75. ACM.\n\nBERT: pre-training of deep bidirectional transformers for language understanding. Jacob Devlin, Ming-Wei Chang, Kenton Lee, Kristina Toutanova, Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019. the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019Minneapolis, MN, USA1Long and Short PapersJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: pre-training of deep bidirectional transformers for language under- standing. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019, Minneapolis, MN, USA, June 2-7, 2019, Volume 1 (Long and Short Pa- pers), pages 4171-4186.\n\nUnified language model pre-training for natural language understanding and generation. Li Dong, Nan Yang, Wenhui Wang, Furu Wei, Xiaodong Liu, Yu Wang, Jianfeng Gao, Ming Zhou, Hsiao-Wuen Hon, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems. NeurIPS; Vancouver, BC, CanadaLi Dong, Nan Yang, Wenhui Wang, Furu Wei, Xi- aodong Liu, Yu Wang, Jianfeng Gao, Ming Zhou, and Hsiao-Wuen Hon. 2019. Unified language model pre-training for natural language understand- ing and generation. In Advances in Neural Infor- mation Processing Systems 32: Annual Conference on Neural Information Processing Systems 2019, NeurIPS 2019, December 8-14, 2019, Vancouver, BC, Canada, pages 13042-13054.\n\nCodetrans: Towards cracking the language of silicone's code through self-supervised deep learning and high performance computing. Ahmed Elnaggar, Wei Ding, Llion Jones, Tom Gibbs, Tamas Feher, Christoph Angerer, Silvia Severini, Florian Matthes, Burkhard Rost, abs/2104.02443Ahmed Elnaggar, Wei Ding, Llion Jones, Tom Gibbs, Tamas Feher, Christoph Angerer, Silvia Severini, Florian Matthes, and Burkhard Rost. 2021. Code- trans: Towards cracking the language of silicone's code through self-supervised deep learning and high performance computing. CoRR, abs/2104.02443.\n\nCodebert: A pre-trained model for programming and natural languages. Zhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xiaocheng Feng, Ming Gong, Linjun Shou, Bing Qin, Ting Liu, Daxin Jiang, Ming Zhou, 10.18653/v1/2020.findings-emnlp.139Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: Findings, EMNLP 2020. the 2020 Conference on Empirical Methods in Natural Language Processing: Findings, EMNLP 2020Association for Computational LinguisticsZhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xi- aocheng Feng, Ming Gong, Linjun Shou, Bing Qin, Ting Liu, Daxin Jiang, and Ming Zhou. 2020. Code- bert: A pre-trained model for programming and nat- ural languages. In Proceedings of the 2020 Con- ference on Empirical Methods in Natural Language Processing: Findings, EMNLP 2020, Online Event, 16-20 November 2020, pages 1536-1547. Associa- tion for Computational Linguistics.\n\nGraphcodebert: Pre-training code representations with data flow. Daya Guo, Shuai Shuo Ren, Zhangyin Lu, Duyu Feng, Shujie Tang, Long Liu, Nan Zhou, Alexey Duan, Shengyu Svyatkovskiy, Michele Fu, Tufano, Colin B Shao Kun Deng, Dawn Clement, Neel Drain, Jian Sundaresan, Daxin Yin, Ming Jiang, Zhou, 9th International Conference on Learning Representations, ICLR 2021, Virtual Event. AustriaOpenReview.netDaya Guo, Shuo Ren, Shuai Lu, Zhangyin Feng, Duyu Tang, Shujie Liu, Long Zhou, Nan Duan, Alexey Svyatkovskiy, Shengyu Fu, Michele Tu- fano, Shao Kun Deng, Colin B. Clement, Dawn Drain, Neel Sundaresan, Jian Yin, Daxin Jiang, and Ming Zhou. 2021. Graphcodebert: Pre-training code representations with data flow. In 9th Inter- national Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3-7, 2021. OpenReview.net.\n\nCodesearchnet challenge: Evaluating the state of semantic code search. Hamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, Marc Brockschmidt, abs/1909.09436CoRRHamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, and Marc Brockschmidt. 2019. Code- searchnet challenge: Evaluating the state of seman- tic code search. CoRR, abs/1909.09436.\n\nMapping language to code in programmatic context. Srinivasan Iyer, Ioannis Konstas, Alvin Cheung, Luke Zettlemoyer, 10.18653/v1/d18-1192Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing. the 2018 Conference on Empirical Methods in Natural Language ProcessingBrussels, BelgiumAssociation for Computational LinguisticsSrinivasan Iyer, Ioannis Konstas, Alvin Cheung, and Luke Zettlemoyer. 2018. Mapping language to code in programmatic context. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, Brussels, Belgium, October 31 -November 4, 2018, pages 1643-1652. Associ- ation for Computational Linguistics.\n\nLearning and evaluating contextual embedding of source code. Aditya Kanade, Petros Maniatis, Gogul Balakrishnan, Kensen Shi, PMLRProceedings of the 37th International Conference on Machine Learning. the 37th International Conference on Machine LearningVirtual Event2020Aditya Kanade, Petros Maniatis, Gogul Balakrishnan, and Kensen Shi. 2020. Learning and evaluating contextual embedding of source code. In Proceed- ings of the 37th International Conference on Ma- chine Learning, ICML 2020, 13-18 July 2020, Vir- tual Event, volume 119 of Proceedings of Machine Learning Research, pages 5110-5121. PMLR.\n\nBART: denoising sequence-to-sequence pretraining for natural language generation, translation, and comprehension. Mike Lewis, Yinhan Liu, Naman Goyal ; Abdelrahman Mohamed, Omer Levy, Veselin Stoyanov, Luke Zettlemoyer, 10.18653/v1/2020.acl-main.703Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics. the 58th Annual Meeting of the Association for Computational LinguisticsOnlineAssociation for Computational Linguistics2020Mike Lewis, Yinhan Liu, Naman Goyal, Mar- jan Ghazvininejad, Abdelrahman Mohamed, Omer Levy, Veselin Stoyanov, and Luke Zettlemoyer. 2020. BART: denoising sequence-to-sequence pre- training for natural language generation, translation, and comprehension. In Proceedings of the 58th An- nual Meeting of the Association for Computational Linguistics, ACL 2020, Online, July 5-10, 2020, pages 7871-7880. Association for Computational Linguistics.\n\nORANGE: a method for evaluating automatic evaluation metrics for machine translation. Chin-Yew Lin, Franz Josef Och, COLING 2004, 20th International Conference on Computational Linguistics, Proceedings of the Conference. Geneva, SwitzerlandChin-Yew Lin and Franz Josef Och. 2004. ORANGE: a method for evaluating automatic evaluation met- rics for machine translation. In COLING 2004, 20th International Conference on Computational Linguis- tics, Proceedings of the Conference, 23-27 August 2004, Geneva, Switzerland.\n\nMultitask learning based pre-trained language model for code completion. Fang Liu, Ge Li, Yunfei Zhao, Zhi Jin, 10.1145/3324884.341659135th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020. Melbourne, AustraliaIEEEFang Liu, Ge Li, Yunfei Zhao, and Zhi Jin. 2020. Multi- task learning based pre-trained language model for code completion. In 35th IEEE/ACM Interna- tional Conference on Automated Software Engineer- ing, ASE 2020, Melbourne, Australia, September 21- 25, 2020, pages 473-485. IEEE.\n\nMulti-task deep neural networks for natural language understanding. Xiaodong Liu, Pengcheng He, Weizhu Chen, Jianfeng Gao, 10.18653/v1/p19-1441Proceedings of the 57th Conference of the Association for Computational Linguistics, ACL 2019. the 57th Conference of the Association for Computational Linguistics, ACL 2019Florence, ItalyLong Papers1Association for Computational LinguisticsXiaodong Liu, Pengcheng He, Weizhu Chen, and Jian- feng Gao. 2019a. Multi-task deep neural networks for natural language understanding. In Proceedings of the 57th Conference of the Association for Compu- tational Linguistics, ACL 2019, Florence, Italy, July 28-August 2, 2019, Volume 1: Long Papers, pages 4487-4496. Association for Computational Linguis- tics.\n\nRoberta: A robustly optimized BERT pretraining approach. Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, Veselin Stoyanov, abs/1907.11692CoRRYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Man- dar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019b. Roberta: A robustly optimized BERT pretraining ap- proach. CoRR, abs/1907.11692.\n\nCodexglue: A machine learning benchmark dataset for code understanding and generation. Shuai Lu, Daya Guo, Shuo Ren, Junjie Huang, Alexey Svyatkovskiy, Ambrosio Blanco, Colin B Clement, Dawn Drain, Daxin Jiang, Duyu Tang, Ge Li, Lidong Zhou, Linjun Shou, Long Zhou, Michele Tufano, Ming Gong, Ming Zhou, Nan Duan, Neel Sundaresan, Shengyu Shao Kun Deng, Shujie Fu, Liu, abs/2102.04664CoRRShuai Lu, Daya Guo, Shuo Ren, Junjie Huang, Alexey Svyatkovskiy, Ambrosio Blanco, Colin B. Clement, Dawn Drain, Daxin Jiang, Duyu Tang, Ge Li, Li- dong Zhou, Linjun Shou, Long Zhou, Michele Tu- fano, Ming Gong, Ming Zhou, Nan Duan, Neel Sun- daresan, Shao Kun Deng, Shengyu Fu, and Shujie Liu. 2021. Codexglue: A machine learning bench- mark dataset for code understanding and generation. CoRR, abs/2102.04664.\n\nStudying the usage of text-to-text transfer transformer to support code-related tasks. Antonio Mastropaolo, Simone Scalabrino, Nathan Cooper, David Nader-Palacio, Denys Poshyvanyk, Rocco Oliveto, Gabriele Bavota, 10.1109/ICSE43902.2021.0004143rd IEEE/ACM International Conference on Software Engineering, ICSE 2021. Madrid, SpainIEEEAntonio Mastropaolo, Simone Scalabrino, Nathan Cooper, David Nader-Palacio, Denys Poshyvanyk, Rocco Oliveto, and Gabriele Bavota. 2021. Study- ing the usage of text-to-text transfer transformer to support code-related tasks. In 43rd IEEE/ACM Inter- national Conference on Software Engineering, ICSE 2021, Madrid, Spain, 22-30 May 2021, pages 336- 347. IEEE.\n\nLanguage models are unsupervised multitask learners. Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, OpenAI blog. 189Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. 2019. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9.\n\nExploring the limits of transfer learning with a unified text-to-text transformer. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J Liu, J. Mach. Learn. Res. 2167Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020. Exploring the limits of transfer learning with a unified text-to-text trans- former. J. Mach. Learn. Res., 21:140:1-140:67.\n\nCodebleu: a method for automatic evaluation of code synthesis. Daya Shuo Ren, Shuai Guo, Long Lu, Shujie Zhou, Duyu Liu, Neel Tang, Ming Sundaresan, Ambrosio Zhou, Shuai Blanco, Ma, Shuo Ren, Daya Guo, Shuai Lu, Long Zhou, Shujie Liu, Duyu Tang, Neel Sundaresan, Ming Zhou, Am- brosio Blanco, and Shuai Ma. 2020. Codebleu: a method for automatic evaluation of code synthesis. CoRR, abs/2009.10297.\n\nUnsupervised translation of programming languages. Marie-Anne Baptiste Rozi\u00e8re, Lowik Lachaux, Guillaume Chanussot, Lample, Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020. 2020virtualBaptiste Rozi\u00e8re, Marie-Anne Lachaux, Lowik Chanussot, and Guillaume Lample. 2020. Unsu- pervised translation of programming languages. In Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual.\n\nDOBF: A deobfuscation pre-training objective for programming languages. Marie-Anne Baptiste Rozi\u00e8re, Marc Lachaux, Guillaume Szafraniec, Lample, abs/2102.07492CoRRBaptiste Rozi\u00e8re, Marie-Anne Lachaux, Marc Szafraniec, and Guillaume Lample. 2021. DOBF: A deobfuscation pre-training objective for program- ming languages. CoRR, abs/2102.07492.\n\nNeural machine translation of rare words with subword units. Rico Sennrich, Barry Haddow, Alexandra Birch, 10.18653/v1/p16-1162Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, ACL 2016. the 54th Annual Meeting of the Association for Computational Linguistics, ACL 2016Berlin1Long Papers. The Association for Computer LinguisticsRico Sennrich, Barry Haddow, and Alexandra Birch. 2016. Neural machine translation of rare words with subword units. In Proceedings of the 54th Annual Meeting of the Association for Computational Lin- guistics, ACL 2016, August 7-12, 2016, Berlin, Ger- many, Volume 1: Long Papers. The Association for Computer Linguistics.\n\nMASS: masked sequence to sequence pre-training for language generation. Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, Tie-Yan Liu, PMLRProceedings of the 36th International Conference on Machine Learning, ICML 2019. the 36th International Conference on Machine Learning, ICML 2019Long Beach, California, USA97Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, and Tie- Yan Liu. 2019. MASS: masked sequence to se- quence pre-training for language generation. In Pro- ceedings of the 36th International Conference on Machine Learning, ICML 2019, 9-15 June 2019, Long Beach, California, USA, volume 97 of Pro- ceedings of Machine Learning Research, pages 5926-5936. PMLR.\n\nERNIE: enhanced representation through knowledge integration. Yu Sun, Shuohuan Wang, Yu-Kun Li, Shikun Feng, Xuyi Chen, Han Zhang, Xin Tian, Danxiang Zhu, Hua Hao Tian, Wu, abs/1904.09223CoRRYu Sun, Shuohuan Wang, Yu-Kun Li, Shikun Feng, Xuyi Chen, Han Zhang, Xin Tian, Danxiang Zhu, Hao Tian, and Hua Wu. 2019. ERNIE: en- hanced representation through knowledge integra- tion. CoRR, abs/1904.09223.\n\nIntellicode compose: code generation using transformer. Alexey Svyatkovskiy, Shengyu Shao Kun Deng, Neel Fu, Sundaresan, 10.1145/3368089.3417058ESEC/FSE '20: 28th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, Virtual Event. USAACMAlexey Svyatkovskiy, Shao Kun Deng, Shengyu Fu, and Neel Sundaresan. 2020. Intellicode compose: code generation using transformer. In ESEC/FSE '20: 28th ACM Joint European Software Engineer- ing Conference and Symposium on the Founda- tions of Software Engineering, Virtual Event, USA, November 8-13, 2020, pages 1433-1443. ACM.\n\nAn empirical study on learning bug-fixing patches in the wild via neural machine translation. Michele Tufano, Cody Watson, Gabriele Bavota, 10.1145/3340544ACM Trans. Softw. Eng. Methodol. 28429Massimiliano Di Penta, Martin White, and Denys PoshyvanykMichele Tufano, Cody Watson, Gabriele Bavota, Mas- similiano Di Penta, Martin White, and Denys Poshy- vanyk. 2019. An empirical study on learning bug-fixing patches in the wild via neural machine translation. ACM Trans. Softw. Eng. Methodol., 28(4):19:1-19:29.\n\nAttention is all you need. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, Illia Polosukhin, Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems. Long Beach, CA, USAAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Pro- cessing Systems 30: Annual Conference on Neural Information Processing Systems 2017, December 4- 9, 2017, Long Beach, CA, USA, pages 5998-6008.\n\nDetecting code clones with graph neural network and flow-augmented abstract syntax tree. Wenhan Wang, Ge Li, Bo Ma, Xin Xia, Zhi Jin, 10.1109/SANER48275.2020.905485727th IEEE International Conference on Software Analysis, Evolution and Reengineering. London, ON, CanadaIEEE2020Wenhan Wang, Ge Li, Bo Ma, Xin Xia, and Zhi Jin. 2020. Detecting code clones with graph neu- ral network and flow-augmented abstract syntax tree. In 27th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2020, London, ON, Canada, February 18- 21, 2020, pages 261-271. IEEE.\n\nDevign: Effective vulnerability identification by learning comprehensive program semantics via graph neural networks. Yaqin Zhou, Shangqing Liu, Jing Kai Siow, Xiaoning Du, Yang Liu, Advances in Neural Information Processing Systems 32: Annual Conference on Neural Information Processing Systems. NeurIPS; Vancouver, BC, CanadaYaqin Zhou, Shangqing Liu, Jing Kai Siow, Xiaon- ing Du, and Yang Liu. 2019. Devign: Effective vulnerability identification by learning comprehen- sive program semantics via graph neural networks. In Advances in Neural Information Processing Sys- tems 32: Annual Conference on Neural Information Processing Systems 2019, NeurIPS 2019, December 8-14, 2019, Vancouver, BC, Canada, pages 10197- 10207.\n\nLanguage-agnostic representation learning of source code from structure and context. Daniel Z\u00fcgner, Tobias Kirschstein, Michele Catasta, Jure Leskovec, Stephan G\u00fcnnemann, 9th International Conference on Learning Representations, ICLR 2021, Virtual Event. AustriaOpenReview.netDaniel Z\u00fcgner, Tobias Kirschstein, Michele Catasta, Jure Leskovec, and Stephan G\u00fcnnemann. 2021. Language-agnostic representation learning of source code from structure and context. In 9th Inter- national Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3-7, 2021. OpenReview.net.\n", "annotations": {"author": "[{\"end\":284,\"start\":226},{\"end\":324,\"start\":285},{\"end\":358,\"start\":325},{\"end\":421,\"start\":359},{\"end\":466,\"start\":422}]", "publisher": "[{\"end\":148,\"start\":107},{\"end\":773,\"start\":732}]", "author_last_name": "[{\"end\":234,\"start\":230},{\"end\":296,\"start\":292},{\"end\":336,\"start\":332},{\"end\":373,\"start\":370}]", "author_first_name": "[{\"end\":229,\"start\":226},{\"end\":291,\"start\":285},{\"end\":331,\"start\":325},{\"end\":365,\"start\":359},{\"end\":369,\"start\":366}]", "author_affiliation": "[{\"end\":283,\"start\":258},{\"end\":420,\"start\":395},{\"end\":465,\"start\":423}]", "title": "[{\"end\":106,\"start\":1},{\"end\":572,\"start\":467}]", "venue": "[{\"end\":660,\"start\":574}]", "abstract": "[{\"end\":2309,\"start\":803}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2387,\"start\":2366},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":2415,\"start\":2393},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":2445,\"start\":2424},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":2965,\"start\":2945},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2983,\"start\":2965},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3158,\"start\":3140},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3213,\"start\":3192},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3330,\"start\":3311},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3917,\"start\":3897},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4843,\"start\":4820},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":5107,\"start\":5086},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":5136,\"start\":5118},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":6607,\"start\":6585},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":6785,\"start\":6764},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":6814,\"start\":6795},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":6848,\"start\":6828},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6901,\"start\":6879},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":6962,\"start\":6943},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":6989,\"start\":6969},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7019,\"start\":6998},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":7715,\"start\":7694},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7748,\"start\":7729},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7964,\"start\":7944},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":8103,\"start\":8084},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":8544,\"start\":8522},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":8569,\"start\":8544},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":8591,\"start\":8569},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":9273,\"start\":9252},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":9437,\"start\":9417},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":9829,\"start\":9808},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":12042,\"start\":12023},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12062,\"start\":12042},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":12081,\"start\":12062},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12327,\"start\":12306},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":12884,\"start\":12866},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":16706,\"start\":16685},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":16829,\"start\":16810},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":17165,\"start\":17146},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":17197,\"start\":17177},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":17736,\"start\":17711},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":18190,\"start\":18172},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":18237,\"start\":18216},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":19228,\"start\":19205},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":19710,\"start\":19689},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19761,\"start\":19742},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19912,\"start\":19893},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":20551,\"start\":20531},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":21140,\"start\":21122},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":21581,\"start\":21562},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":21679,\"start\":21660},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":21751,\"start\":21731},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":22143,\"start\":22121},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":22500,\"start\":22480},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":22601,\"start\":22580},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":28537,\"start\":28518},{\"end\":35867,\"start\":35849},{\"end\":36289,\"start\":36270}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":38375,\"start\":38283},{\"attributes\":{\"id\":\"fig_1\"},\"end\":38486,\"start\":38376},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":38603,\"start\":38487},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":39103,\"start\":38604},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":39180,\"start\":39104},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":39703,\"start\":39181}]", "paragraph": "[{\"end\":3734,\"start\":2325},{\"end\":4614,\"start\":3736},{\"end\":5038,\"start\":4616},{\"end\":5745,\"start\":5040},{\"end\":5918,\"start\":5747},{\"end\":6187,\"start\":5920},{\"end\":6481,\"start\":6189},{\"end\":7500,\"start\":6498},{\"end\":8381,\"start\":7502},{\"end\":9143,\"start\":8383},{\"end\":9714,\"start\":9145},{\"end\":10365,\"start\":9725},{\"end\":10601,\"start\":10367},{\"end\":11149,\"start\":10624},{\"end\":11704,\"start\":11151},{\"end\":11862,\"start\":11727},{\"end\":12548,\"start\":11864},{\"end\":13033,\"start\":12550},{\"end\":13323,\"start\":13097},{\"end\":13564,\"start\":13325},{\"end\":13990,\"start\":13566},{\"end\":14248,\"start\":14054},{\"end\":14785,\"start\":14250},{\"end\":15206,\"start\":14841},{\"end\":16168,\"start\":15208},{\"end\":16342,\"start\":16191},{\"end\":16830,\"start\":16344},{\"end\":17650,\"start\":16832},{\"end\":17912,\"start\":17652},{\"end\":18115,\"start\":17970},{\"end\":18137,\"start\":18117},{\"end\":18952,\"start\":18162},{\"end\":19229,\"start\":19051},{\"end\":20215,\"start\":19262},{\"end\":20687,\"start\":20217},{\"end\":21332,\"start\":20689},{\"end\":22077,\"start\":21354},{\"end\":22814,\"start\":22079},{\"end\":23821,\"start\":22839},{\"end\":24130,\"start\":23846},{\"end\":26615,\"start\":24161},{\"end\":27199,\"start\":26617},{\"end\":27998,\"start\":27201},{\"end\":28247,\"start\":28000},{\"end\":29000,\"start\":28249},{\"end\":29733,\"start\":29063},{\"end\":30507,\"start\":29735},{\"end\":32221,\"start\":30551},{\"end\":33488,\"start\":32223},{\"end\":34132,\"start\":33503},{\"end\":35200,\"start\":34177},{\"end\":35347,\"start\":35202},{\"end\":35986,\"start\":35349},{\"end\":36716,\"start\":35988},{\"end\":37502,\"start\":36718},{\"end\":38282,\"start\":37504}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":13096,\"start\":13034},{\"attributes\":{\"id\":\"formula_1\"},\"end\":14053,\"start\":13991},{\"attributes\":{\"id\":\"formula_2\"},\"end\":14840,\"start\":14786},{\"attributes\":{\"id\":\"formula_3\"},\"end\":17969,\"start\":17913},{\"attributes\":{\"id\":\"formula_4\"},\"end\":19024,\"start\":18953}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":18563,\"start\":18556},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":24661,\"start\":24654},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":25568,\"start\":25561},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":26162,\"start\":26155},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":27615,\"start\":27608},{\"end\":28103,\"start\":28096},{\"end\":28267,\"start\":28260},{\"end\":30914,\"start\":30907},{\"end\":32071,\"start\":32064},{\"end\":32800,\"start\":32793}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2323,\"start\":2311},{\"attributes\":{\"n\":\"2\"},\"end\":6496,\"start\":6484},{\"attributes\":{\"n\":\"3\"},\"end\":9723,\"start\":9717},{\"attributes\":{\"n\":\"3.1\"},\"end\":10622,\"start\":10604},{\"attributes\":{\"n\":\"3.2\"},\"end\":11725,\"start\":11707},{\"attributes\":{\"n\":\"3.3\"},\"end\":16189,\"start\":16171},{\"attributes\":{\"n\":\"4.1\"},\"end\":18160,\"start\":18140},{\"attributes\":{\"n\":\"4.2\"},\"end\":19049,\"start\":19026},{\"attributes\":{\"n\":\"4.3\"},\"end\":19260,\"start\":19232},{\"attributes\":{\"n\":\"4.4\"},\"end\":21352,\"start\":21335},{\"attributes\":{\"n\":\"4.5\"},\"end\":22837,\"start\":22817},{\"attributes\":{\"n\":\"5\"},\"end\":23844,\"start\":23824},{\"attributes\":{\"n\":\"5.1\"},\"end\":24159,\"start\":24133},{\"attributes\":{\"n\":\"5.2\"},\"end\":29061,\"start\":29003},{\"attributes\":{\"n\":\"5.3\"},\"end\":30549,\"start\":30510},{\"attributes\":{\"n\":\"6\"},\"end\":33501,\"start\":33491},{\"end\":34175,\"start\":34135},{\"end\":38294,\"start\":38284},{\"end\":38387,\"start\":38377},{\"end\":38497,\"start\":38488},{\"end\":38614,\"start\":38605},{\"end\":39114,\"start\":39105},{\"end\":39191,\"start\":39182}]", "table": "[{\"end\":39103,\"start\":38756},{\"end\":39703,\"start\":39193}]", "figure_caption": "[{\"end\":38375,\"start\":38296},{\"end\":38486,\"start\":38389},{\"end\":38603,\"start\":38499},{\"end\":38756,\"start\":38616},{\"end\":39180,\"start\":39116}]", "figure_ref": "[{\"end\":4387,\"start\":4379},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5563,\"start\":5555},{\"end\":8160,\"start\":8152},{\"end\":9998,\"start\":9990},{\"end\":12543,\"start\":12535},{\"end\":13794,\"start\":13786},{\"end\":14731,\"start\":14723},{\"end\":15639,\"start\":15631},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":17517,\"start\":17509},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":26687,\"start\":26679},{\"end\":31784,\"start\":31776}]", "bib_author_first_name": "[{\"end\":40469,\"start\":40463},{\"end\":40497,\"start\":40488},{\"end\":40518,\"start\":40511},{\"end\":41310,\"start\":41306},{\"end\":41322,\"start\":41317},{\"end\":41337,\"start\":41331},{\"end\":41349,\"start\":41343},{\"end\":41364,\"start\":41356},{\"end\":41395,\"start\":41390},{\"end\":41412,\"start\":41404},{\"end\":41426,\"start\":41422},{\"end\":41442,\"start\":41434},{\"end\":41455,\"start\":41451},{\"end\":41470,\"start\":41466},{\"end\":41480,\"start\":41476},{\"end\":41495,\"start\":41487},{\"end\":41512,\"start\":41505},{\"end\":41526,\"start\":41521},{\"end\":41541,\"start\":41535},{\"end\":41556,\"start\":41550},{\"end\":41572,\"start\":41566},{\"end\":41584,\"start\":41579},{\"end\":41595,\"start\":41591},{\"end\":41610,\"start\":41603},{\"end\":41626,\"start\":41619},{\"end\":41640,\"start\":41634},{\"end\":41657,\"start\":41649},{\"end\":42656,\"start\":42653},{\"end\":42669,\"start\":42663},{\"end\":42683,\"start\":42677},{\"end\":42696,\"start\":42692},{\"end\":42708,\"start\":42704},{\"end\":42726,\"start\":42719},{\"end\":42741,\"start\":42736},{\"end\":42754,\"start\":42750},{\"end\":42770,\"start\":42765},{\"end\":42784,\"start\":42779},{\"end\":42795,\"start\":42792},{\"end\":42811,\"start\":42806},{\"end\":42823,\"start\":42820},{\"end\":43352,\"start\":43347},{\"end\":43370,\"start\":43360},{\"end\":43382,\"start\":43378},{\"end\":43384,\"start\":43383},{\"end\":43400,\"start\":43389},{\"end\":43402,\"start\":43401},{\"end\":43886,\"start\":43881},{\"end\":43888,\"start\":43887},{\"end\":43902,\"start\":43898},{\"end\":43918,\"start\":43910},{\"end\":43935,\"start\":43929},{\"end\":43954,\"start\":43950},{\"end\":44629,\"start\":44623},{\"end\":44648,\"start\":44639},{\"end\":45157,\"start\":45151},{\"end\":45169,\"start\":45168},{\"end\":45187,\"start\":45180},{\"end\":45214,\"start\":45198},{\"end\":45988,\"start\":45983},{\"end\":46005,\"start\":45997},{\"end\":46019,\"start\":46013},{\"end\":46033,\"start\":46025},{\"end\":46890,\"start\":46888},{\"end\":46900,\"start\":46897},{\"end\":46913,\"start\":46907},{\"end\":46924,\"start\":46920},{\"end\":46938,\"start\":46930},{\"end\":46946,\"start\":46944},{\"end\":46961,\"start\":46953},{\"end\":46971,\"start\":46967},{\"end\":46988,\"start\":46978},{\"end\":47682,\"start\":47677},{\"end\":47696,\"start\":47693},{\"end\":47708,\"start\":47703},{\"end\":47719,\"start\":47716},{\"end\":47732,\"start\":47727},{\"end\":47749,\"start\":47740},{\"end\":47765,\"start\":47759},{\"end\":47783,\"start\":47776},{\"end\":47801,\"start\":47793},{\"end\":48195,\"start\":48187},{\"end\":48206,\"start\":48202},{\"end\":48216,\"start\":48212},{\"end\":48226,\"start\":48223},{\"end\":48242,\"start\":48233},{\"end\":48253,\"start\":48249},{\"end\":48266,\"start\":48260},{\"end\":48277,\"start\":48273},{\"end\":48287,\"start\":48283},{\"end\":48298,\"start\":48293},{\"end\":48310,\"start\":48306},{\"end\":49093,\"start\":49089},{\"end\":49104,\"start\":49099},{\"end\":49123,\"start\":49115},{\"end\":49132,\"start\":49128},{\"end\":49145,\"start\":49139},{\"end\":49156,\"start\":49152},{\"end\":49165,\"start\":49162},{\"end\":49178,\"start\":49172},{\"end\":49192,\"start\":49185},{\"end\":49214,\"start\":49207},{\"end\":49232,\"start\":49227},{\"end\":49234,\"start\":49233},{\"end\":49254,\"start\":49250},{\"end\":49268,\"start\":49264},{\"end\":49280,\"start\":49276},{\"end\":49298,\"start\":49293},{\"end\":49308,\"start\":49304},{\"end\":49944,\"start\":49939},{\"end\":49962,\"start\":49953},{\"end\":49974,\"start\":49967},{\"end\":49991,\"start\":49982},{\"end\":50007,\"start\":50003},{\"end\":50291,\"start\":50281},{\"end\":50305,\"start\":50298},{\"end\":50320,\"start\":50315},{\"end\":50333,\"start\":50329},{\"end\":50980,\"start\":50974},{\"end\":50995,\"start\":50989},{\"end\":51011,\"start\":51006},{\"end\":51032,\"start\":51026},{\"end\":51637,\"start\":51633},{\"end\":51651,\"start\":51645},{\"end\":51662,\"start\":51657},{\"end\":51696,\"start\":51692},{\"end\":51710,\"start\":51703},{\"end\":51725,\"start\":51721},{\"end\":52519,\"start\":52511},{\"end\":52536,\"start\":52525},{\"end\":53020,\"start\":53016},{\"end\":53028,\"start\":53026},{\"end\":53039,\"start\":53033},{\"end\":53049,\"start\":53046},{\"end\":53545,\"start\":53537},{\"end\":53560,\"start\":53551},{\"end\":53571,\"start\":53565},{\"end\":53586,\"start\":53578},{\"end\":54279,\"start\":54273},{\"end\":54289,\"start\":54285},{\"end\":54300,\"start\":54295},{\"end\":54315,\"start\":54308},{\"end\":54326,\"start\":54320},{\"end\":54339,\"start\":54334},{\"end\":54350,\"start\":54346},{\"end\":54361,\"start\":54357},{\"end\":54373,\"start\":54369},{\"end\":54394,\"start\":54387},{\"end\":54742,\"start\":54737},{\"end\":54751,\"start\":54747},{\"end\":54761,\"start\":54757},{\"end\":54773,\"start\":54767},{\"end\":54787,\"start\":54781},{\"end\":54810,\"start\":54802},{\"end\":54824,\"start\":54819},{\"end\":54826,\"start\":54825},{\"end\":54840,\"start\":54836},{\"end\":54853,\"start\":54848},{\"end\":54865,\"start\":54861},{\"end\":54874,\"start\":54872},{\"end\":54885,\"start\":54879},{\"end\":54898,\"start\":54892},{\"end\":54909,\"start\":54905},{\"end\":54923,\"start\":54916},{\"end\":54936,\"start\":54932},{\"end\":54947,\"start\":54943},{\"end\":54957,\"start\":54954},{\"end\":54968,\"start\":54964},{\"end\":54988,\"start\":54981},{\"end\":55010,\"start\":55004},{\"end\":55544,\"start\":55537},{\"end\":55564,\"start\":55558},{\"end\":55583,\"start\":55577},{\"end\":55597,\"start\":55592},{\"end\":55618,\"start\":55613},{\"end\":55636,\"start\":55631},{\"end\":55654,\"start\":55646},{\"end\":56199,\"start\":56195},{\"end\":56216,\"start\":56209},{\"end\":56226,\"start\":56221},{\"end\":56239,\"start\":56234},{\"end\":56251,\"start\":56246},{\"end\":56264,\"start\":56260},{\"end\":56546,\"start\":56541},{\"end\":56559,\"start\":56555},{\"end\":56573,\"start\":56569},{\"end\":56592,\"start\":56583},{\"end\":56604,\"start\":56598},{\"end\":56620,\"start\":56613},{\"end\":56634,\"start\":56629},{\"end\":56644,\"start\":56641},{\"end\":56654,\"start\":56649},{\"end\":56656,\"start\":56655},{\"end\":57011,\"start\":57007},{\"end\":57027,\"start\":57022},{\"end\":57037,\"start\":57033},{\"end\":57048,\"start\":57042},{\"end\":57059,\"start\":57055},{\"end\":57069,\"start\":57065},{\"end\":57080,\"start\":57076},{\"end\":57101,\"start\":57093},{\"end\":57113,\"start\":57108},{\"end\":57404,\"start\":57394},{\"end\":57428,\"start\":57423},{\"end\":57447,\"start\":57438},{\"end\":57982,\"start\":57972},{\"end\":58005,\"start\":58001},{\"end\":58024,\"start\":58015},{\"end\":58308,\"start\":58304},{\"end\":58324,\"start\":58319},{\"end\":58342,\"start\":58333},{\"end\":59014,\"start\":59008},{\"end\":59023,\"start\":59021},{\"end\":59032,\"start\":59029},{\"end\":59046,\"start\":59038},{\"end\":59058,\"start\":59051},{\"end\":59659,\"start\":59657},{\"end\":59673,\"start\":59665},{\"end\":59686,\"start\":59680},{\"end\":59697,\"start\":59691},{\"end\":59708,\"start\":59704},{\"end\":59718,\"start\":59715},{\"end\":59729,\"start\":59726},{\"end\":59744,\"start\":59736},{\"end\":59753,\"start\":59750},{\"end\":60058,\"start\":60052},{\"end\":60080,\"start\":60073},{\"end\":60100,\"start\":60096},{\"end\":60720,\"start\":60713},{\"end\":60733,\"start\":60729},{\"end\":60750,\"start\":60742},{\"end\":61164,\"start\":61158},{\"end\":61178,\"start\":61174},{\"end\":61192,\"start\":61188},{\"end\":61206,\"start\":61201},{\"end\":61223,\"start\":61218},{\"end\":61236,\"start\":61231},{\"end\":61238,\"start\":61237},{\"end\":61252,\"start\":61246},{\"end\":61266,\"start\":61261},{\"end\":61850,\"start\":61844},{\"end\":61859,\"start\":61857},{\"end\":61866,\"start\":61864},{\"end\":61874,\"start\":61871},{\"end\":61883,\"start\":61880},{\"end\":62467,\"start\":62462},{\"end\":62483,\"start\":62474},{\"end\":62493,\"start\":62489},{\"end\":62497,\"start\":62494},{\"end\":62512,\"start\":62504},{\"end\":62521,\"start\":62517},{\"end\":63162,\"start\":63156},{\"end\":63177,\"start\":63171},{\"end\":63198,\"start\":63191},{\"end\":63212,\"start\":63208},{\"end\":63230,\"start\":63223}]", "bib_author_last_name": "[{\"end\":40486,\"start\":40470},{\"end\":40509,\"start\":40498},{\"end\":40522,\"start\":40519},{\"end\":40529,\"start\":40524},{\"end\":41315,\"start\":41311},{\"end\":41329,\"start\":41323},{\"end\":41341,\"start\":41338},{\"end\":41354,\"start\":41350},{\"end\":41388,\"start\":41365},{\"end\":41402,\"start\":41396},{\"end\":41420,\"start\":41413},{\"end\":41432,\"start\":41427},{\"end\":41449,\"start\":41443},{\"end\":41464,\"start\":41456},{\"end\":41474,\"start\":41471},{\"end\":41485,\"start\":41481},{\"end\":41503,\"start\":41496},{\"end\":41519,\"start\":41513},{\"end\":41533,\"start\":41527},{\"end\":41548,\"start\":41542},{\"end\":41564,\"start\":41557},{\"end\":41577,\"start\":41573},{\"end\":41589,\"start\":41585},{\"end\":41601,\"start\":41596},{\"end\":41617,\"start\":41611},{\"end\":41632,\"start\":41627},{\"end\":41647,\"start\":41641},{\"end\":41666,\"start\":41658},{\"end\":42661,\"start\":42657},{\"end\":42675,\"start\":42670},{\"end\":42690,\"start\":42684},{\"end\":42702,\"start\":42697},{\"end\":42717,\"start\":42709},{\"end\":42734,\"start\":42727},{\"end\":42748,\"start\":42742},{\"end\":42763,\"start\":42755},{\"end\":42777,\"start\":42771},{\"end\":42790,\"start\":42785},{\"end\":42804,\"start\":42796},{\"end\":42818,\"start\":42812},{\"end\":42830,\"start\":42824},{\"end\":42842,\"start\":42832},{\"end\":43358,\"start\":43353},{\"end\":43376,\"start\":43371},{\"end\":43387,\"start\":43385},{\"end\":43410,\"start\":43403},{\"end\":43896,\"start\":43889},{\"end\":43908,\"start\":43903},{\"end\":43927,\"start\":43919},{\"end\":43948,\"start\":43936},{\"end\":43965,\"start\":43955},{\"end\":44637,\"start\":44630},{\"end\":44655,\"start\":44649},{\"end\":45166,\"start\":45158},{\"end\":45178,\"start\":45170},{\"end\":45196,\"start\":45188},{\"end\":45223,\"start\":45215},{\"end\":45995,\"start\":45989},{\"end\":46011,\"start\":46006},{\"end\":46023,\"start\":46020},{\"end\":46043,\"start\":46034},{\"end\":46895,\"start\":46891},{\"end\":46905,\"start\":46901},{\"end\":46918,\"start\":46914},{\"end\":46928,\"start\":46925},{\"end\":46942,\"start\":46939},{\"end\":46951,\"start\":46947},{\"end\":46965,\"start\":46962},{\"end\":46976,\"start\":46972},{\"end\":46992,\"start\":46989},{\"end\":47691,\"start\":47683},{\"end\":47701,\"start\":47697},{\"end\":47714,\"start\":47709},{\"end\":47725,\"start\":47720},{\"end\":47738,\"start\":47733},{\"end\":47757,\"start\":47750},{\"end\":47774,\"start\":47766},{\"end\":47791,\"start\":47784},{\"end\":47806,\"start\":47802},{\"end\":48200,\"start\":48196},{\"end\":48210,\"start\":48207},{\"end\":48221,\"start\":48217},{\"end\":48231,\"start\":48227},{\"end\":48247,\"start\":48243},{\"end\":48258,\"start\":48254},{\"end\":48271,\"start\":48267},{\"end\":48281,\"start\":48278},{\"end\":48291,\"start\":48288},{\"end\":48304,\"start\":48299},{\"end\":48315,\"start\":48311},{\"end\":49097,\"start\":49094},{\"end\":49113,\"start\":49105},{\"end\":49126,\"start\":49124},{\"end\":49137,\"start\":49133},{\"end\":49150,\"start\":49146},{\"end\":49160,\"start\":49157},{\"end\":49170,\"start\":49166},{\"end\":49183,\"start\":49179},{\"end\":49205,\"start\":49193},{\"end\":49217,\"start\":49215},{\"end\":49225,\"start\":49219},{\"end\":49248,\"start\":49235},{\"end\":49262,\"start\":49255},{\"end\":49274,\"start\":49269},{\"end\":49291,\"start\":49281},{\"end\":49302,\"start\":49299},{\"end\":49314,\"start\":49309},{\"end\":49320,\"start\":49316},{\"end\":49951,\"start\":49945},{\"end\":49965,\"start\":49963},{\"end\":49980,\"start\":49975},{\"end\":50001,\"start\":49992},{\"end\":50020,\"start\":50008},{\"end\":50296,\"start\":50292},{\"end\":50313,\"start\":50306},{\"end\":50327,\"start\":50321},{\"end\":50345,\"start\":50334},{\"end\":50987,\"start\":50981},{\"end\":51004,\"start\":50996},{\"end\":51024,\"start\":51012},{\"end\":51036,\"start\":51033},{\"end\":51643,\"start\":51638},{\"end\":51655,\"start\":51652},{\"end\":51690,\"start\":51663},{\"end\":51701,\"start\":51697},{\"end\":51719,\"start\":51711},{\"end\":51737,\"start\":51726},{\"end\":52523,\"start\":52520},{\"end\":52540,\"start\":52537},{\"end\":53024,\"start\":53021},{\"end\":53031,\"start\":53029},{\"end\":53044,\"start\":53040},{\"end\":53053,\"start\":53050},{\"end\":53549,\"start\":53546},{\"end\":53563,\"start\":53561},{\"end\":53576,\"start\":53572},{\"end\":53590,\"start\":53587},{\"end\":54283,\"start\":54280},{\"end\":54293,\"start\":54290},{\"end\":54306,\"start\":54301},{\"end\":54318,\"start\":54316},{\"end\":54332,\"start\":54327},{\"end\":54344,\"start\":54340},{\"end\":54355,\"start\":54351},{\"end\":54367,\"start\":54362},{\"end\":54385,\"start\":54374},{\"end\":54403,\"start\":54395},{\"end\":54745,\"start\":54743},{\"end\":54755,\"start\":54752},{\"end\":54765,\"start\":54762},{\"end\":54779,\"start\":54774},{\"end\":54800,\"start\":54788},{\"end\":54817,\"start\":54811},{\"end\":54834,\"start\":54827},{\"end\":54846,\"start\":54841},{\"end\":54859,\"start\":54854},{\"end\":54870,\"start\":54866},{\"end\":54877,\"start\":54875},{\"end\":54890,\"start\":54886},{\"end\":54903,\"start\":54899},{\"end\":54914,\"start\":54910},{\"end\":54930,\"start\":54924},{\"end\":54941,\"start\":54937},{\"end\":54952,\"start\":54948},{\"end\":54962,\"start\":54958},{\"end\":54979,\"start\":54969},{\"end\":55002,\"start\":54989},{\"end\":55013,\"start\":55011},{\"end\":55018,\"start\":55015},{\"end\":55556,\"start\":55545},{\"end\":55575,\"start\":55565},{\"end\":55590,\"start\":55584},{\"end\":55611,\"start\":55598},{\"end\":55629,\"start\":55619},{\"end\":55644,\"start\":55637},{\"end\":55661,\"start\":55655},{\"end\":56207,\"start\":56200},{\"end\":56219,\"start\":56217},{\"end\":56232,\"start\":56227},{\"end\":56244,\"start\":56240},{\"end\":56258,\"start\":56252},{\"end\":56274,\"start\":56265},{\"end\":56553,\"start\":56547},{\"end\":56567,\"start\":56560},{\"end\":56581,\"start\":56574},{\"end\":56596,\"start\":56593},{\"end\":56611,\"start\":56605},{\"end\":56627,\"start\":56621},{\"end\":56639,\"start\":56635},{\"end\":56647,\"start\":56645},{\"end\":56660,\"start\":56657},{\"end\":57020,\"start\":57012},{\"end\":57031,\"start\":57028},{\"end\":57040,\"start\":57038},{\"end\":57053,\"start\":57049},{\"end\":57063,\"start\":57060},{\"end\":57074,\"start\":57070},{\"end\":57091,\"start\":57081},{\"end\":57106,\"start\":57102},{\"end\":57120,\"start\":57114},{\"end\":57124,\"start\":57122},{\"end\":57421,\"start\":57405},{\"end\":57436,\"start\":57429},{\"end\":57457,\"start\":57448},{\"end\":57465,\"start\":57459},{\"end\":57999,\"start\":57983},{\"end\":58013,\"start\":58006},{\"end\":58035,\"start\":58025},{\"end\":58043,\"start\":58037},{\"end\":58317,\"start\":58309},{\"end\":58331,\"start\":58325},{\"end\":58348,\"start\":58343},{\"end\":59019,\"start\":59015},{\"end\":59027,\"start\":59024},{\"end\":59036,\"start\":59033},{\"end\":59049,\"start\":59047},{\"end\":59062,\"start\":59059},{\"end\":59663,\"start\":59660},{\"end\":59678,\"start\":59674},{\"end\":59689,\"start\":59687},{\"end\":59702,\"start\":59698},{\"end\":59713,\"start\":59709},{\"end\":59724,\"start\":59719},{\"end\":59734,\"start\":59730},{\"end\":59748,\"start\":59745},{\"end\":59762,\"start\":59754},{\"end\":59766,\"start\":59764},{\"end\":60071,\"start\":60059},{\"end\":60094,\"start\":60081},{\"end\":60103,\"start\":60101},{\"end\":60115,\"start\":60105},{\"end\":60727,\"start\":60721},{\"end\":60740,\"start\":60734},{\"end\":60757,\"start\":60751},{\"end\":61172,\"start\":61165},{\"end\":61186,\"start\":61179},{\"end\":61199,\"start\":61193},{\"end\":61216,\"start\":61207},{\"end\":61229,\"start\":61224},{\"end\":61244,\"start\":61239},{\"end\":61259,\"start\":61253},{\"end\":61277,\"start\":61267},{\"end\":61855,\"start\":61851},{\"end\":61862,\"start\":61860},{\"end\":61869,\"start\":61867},{\"end\":61878,\"start\":61875},{\"end\":61887,\"start\":61884},{\"end\":62472,\"start\":62468},{\"end\":62487,\"start\":62484},{\"end\":62502,\"start\":62498},{\"end\":62515,\"start\":62513},{\"end\":62525,\"start\":62522},{\"end\":63169,\"start\":63163},{\"end\":63189,\"start\":63178},{\"end\":63206,\"start\":63199},{\"end\":63221,\"start\":63213},{\"end\":63240,\"start\":63231}]", "bib_entry": "[{\"attributes\":{\"doi\":\"10.18653/v1/2021.naacl-main.211\",\"id\":\"b0\",\"matched_paper_id\":232185260},\"end\":41304,\"start\":40400},{\"attributes\":{\"id\":\"b1\"},\"end\":42649,\"start\":41306},{\"attributes\":{\"id\":\"b2\"},\"end\":43268,\"start\":42651},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":213152193},\"end\":43794,\"start\":43270},{\"attributes\":{\"doi\":\"10.18653/v1/2020.emnlp-main.728\",\"id\":\"b4\",\"matched_paper_id\":222178041},\"end\":44580,\"start\":43796},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":58981712},\"end\":45085,\"start\":44582},{\"attributes\":{\"doi\":\"10.1145/1085313.1085331\",\"id\":\"b6\",\"matched_paper_id\":9333486},\"end\":45899,\"start\":45087},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":52967399},\"end\":46799,\"start\":45901},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":147704286},\"end\":47545,\"start\":46801},{\"attributes\":{\"doi\":\"abs/2104.02443\",\"id\":\"b9\"},\"end\":48116,\"start\":47547},{\"attributes\":{\"doi\":\"10.18653/v1/2020.findings-emnlp.139\",\"id\":\"b10\",\"matched_paper_id\":211171605},\"end\":49022,\"start\":48118},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":221761146},\"end\":49866,\"start\":49024},{\"attributes\":{\"doi\":\"abs/1909.09436\",\"id\":\"b12\"},\"end\":50229,\"start\":49868},{\"attributes\":{\"doi\":\"10.18653/v1/d18-1192\",\"id\":\"b13\",\"matched_paper_id\":52125417},\"end\":50911,\"start\":50231},{\"attributes\":{\"doi\":\"PMLR\",\"id\":\"b14\",\"matched_paper_id\":220425306},\"end\":51517,\"start\":50913},{\"attributes\":{\"doi\":\"10.18653/v1/2020.acl-main.703\",\"id\":\"b15\",\"matched_paper_id\":204960716},\"end\":52423,\"start\":51519},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":7139779},\"end\":52941,\"start\":52425},{\"attributes\":{\"doi\":\"10.1145/3324884.3416591\",\"id\":\"b17\",\"matched_paper_id\":229703606},\"end\":53467,\"start\":52943},{\"attributes\":{\"doi\":\"10.18653/v1/p19-1441\",\"id\":\"b18\",\"matched_paper_id\":59523594},\"end\":54214,\"start\":53469},{\"attributes\":{\"doi\":\"abs/1907.11692\",\"id\":\"b19\"},\"end\":54648,\"start\":54216},{\"attributes\":{\"doi\":\"abs/2102.04664\",\"id\":\"b20\"},\"end\":55448,\"start\":54650},{\"attributes\":{\"doi\":\"10.1109/ICSE43902.2021.00041\",\"id\":\"b21\",\"matched_paper_id\":231786586},\"end\":56140,\"start\":55450},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":160025533},\"end\":56456,\"start\":56142},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":204838007},\"end\":56942,\"start\":56458},{\"attributes\":{\"id\":\"b24\"},\"end\":57341,\"start\":56944},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":219401607},\"end\":57898,\"start\":57343},{\"attributes\":{\"doi\":\"abs/2102.07492\",\"id\":\"b26\"},\"end\":58241,\"start\":57900},{\"attributes\":{\"doi\":\"10.18653/v1/p16-1162\",\"id\":\"b27\",\"matched_paper_id\":1114678},\"end\":58934,\"start\":58243},{\"attributes\":{\"doi\":\"PMLR\",\"id\":\"b28\",\"matched_paper_id\":146808476},\"end\":59593,\"start\":58936},{\"attributes\":{\"doi\":\"abs/1904.09223\",\"id\":\"b29\"},\"end\":59994,\"start\":59595},{\"attributes\":{\"doi\":\"10.1145/3368089.3417058\",\"id\":\"b30\",\"matched_paper_id\":218673683},\"end\":60617,\"start\":59996},{\"attributes\":{\"doi\":\"10.1145/3340544\",\"id\":\"b31\",\"matched_paper_id\":56517510},\"end\":61129,\"start\":60619},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":13756489},\"end\":61753,\"start\":61131},{\"attributes\":{\"doi\":\"10.1109/SANER48275.2020.9054857\",\"id\":\"b33\",\"matched_paper_id\":211205176},\"end\":62342,\"start\":61755},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":202539112},\"end\":63069,\"start\":62344},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":232307359},\"end\":63656,\"start\":63071}]", "bib_title": "[{\"end\":40461,\"start\":40400},{\"end\":43345,\"start\":43270},{\"end\":43879,\"start\":43796},{\"end\":44621,\"start\":44582},{\"end\":45149,\"start\":45087},{\"end\":45981,\"start\":45901},{\"end\":46886,\"start\":46801},{\"end\":48185,\"start\":48118},{\"end\":49087,\"start\":49024},{\"end\":50279,\"start\":50231},{\"end\":50972,\"start\":50913},{\"end\":51631,\"start\":51519},{\"end\":52509,\"start\":52425},{\"end\":53014,\"start\":52943},{\"end\":53535,\"start\":53469},{\"end\":55535,\"start\":55450},{\"end\":56193,\"start\":56142},{\"end\":56539,\"start\":56458},{\"end\":57392,\"start\":57343},{\"end\":58302,\"start\":58243},{\"end\":59006,\"start\":58936},{\"end\":60050,\"start\":59996},{\"end\":60711,\"start\":60619},{\"end\":61156,\"start\":61131},{\"end\":61842,\"start\":61755},{\"end\":62460,\"start\":62344},{\"end\":63154,\"start\":63071}]", "bib_author": "[{\"end\":40488,\"start\":40463},{\"end\":40511,\"start\":40488},{\"end\":40524,\"start\":40511},{\"end\":40531,\"start\":40524},{\"end\":41317,\"start\":41306},{\"end\":41331,\"start\":41317},{\"end\":41343,\"start\":41331},{\"end\":41356,\"start\":41343},{\"end\":41390,\"start\":41356},{\"end\":41404,\"start\":41390},{\"end\":41422,\"start\":41404},{\"end\":41434,\"start\":41422},{\"end\":41451,\"start\":41434},{\"end\":41466,\"start\":41451},{\"end\":41476,\"start\":41466},{\"end\":41487,\"start\":41476},{\"end\":41505,\"start\":41487},{\"end\":41521,\"start\":41505},{\"end\":41535,\"start\":41521},{\"end\":41550,\"start\":41535},{\"end\":41566,\"start\":41550},{\"end\":41579,\"start\":41566},{\"end\":41591,\"start\":41579},{\"end\":41603,\"start\":41591},{\"end\":41619,\"start\":41603},{\"end\":41634,\"start\":41619},{\"end\":41649,\"start\":41634},{\"end\":41668,\"start\":41649},{\"end\":42663,\"start\":42653},{\"end\":42677,\"start\":42663},{\"end\":42692,\"start\":42677},{\"end\":42704,\"start\":42692},{\"end\":42719,\"start\":42704},{\"end\":42736,\"start\":42719},{\"end\":42750,\"start\":42736},{\"end\":42765,\"start\":42750},{\"end\":42779,\"start\":42765},{\"end\":42792,\"start\":42779},{\"end\":42806,\"start\":42792},{\"end\":42820,\"start\":42806},{\"end\":42832,\"start\":42820},{\"end\":42844,\"start\":42832},{\"end\":43360,\"start\":43347},{\"end\":43378,\"start\":43360},{\"end\":43389,\"start\":43378},{\"end\":43412,\"start\":43389},{\"end\":43898,\"start\":43881},{\"end\":43910,\"start\":43898},{\"end\":43929,\"start\":43910},{\"end\":43950,\"start\":43929},{\"end\":43967,\"start\":43950},{\"end\":44639,\"start\":44623},{\"end\":44657,\"start\":44639},{\"end\":45168,\"start\":45151},{\"end\":45180,\"start\":45168},{\"end\":45198,\"start\":45180},{\"end\":45225,\"start\":45198},{\"end\":45997,\"start\":45983},{\"end\":46013,\"start\":45997},{\"end\":46025,\"start\":46013},{\"end\":46045,\"start\":46025},{\"end\":46897,\"start\":46888},{\"end\":46907,\"start\":46897},{\"end\":46920,\"start\":46907},{\"end\":46930,\"start\":46920},{\"end\":46944,\"start\":46930},{\"end\":46953,\"start\":46944},{\"end\":46967,\"start\":46953},{\"end\":46978,\"start\":46967},{\"end\":46994,\"start\":46978},{\"end\":47693,\"start\":47677},{\"end\":47703,\"start\":47693},{\"end\":47716,\"start\":47703},{\"end\":47727,\"start\":47716},{\"end\":47740,\"start\":47727},{\"end\":47759,\"start\":47740},{\"end\":47776,\"start\":47759},{\"end\":47793,\"start\":47776},{\"end\":47808,\"start\":47793},{\"end\":48202,\"start\":48187},{\"end\":48212,\"start\":48202},{\"end\":48223,\"start\":48212},{\"end\":48233,\"start\":48223},{\"end\":48249,\"start\":48233},{\"end\":48260,\"start\":48249},{\"end\":48273,\"start\":48260},{\"end\":48283,\"start\":48273},{\"end\":48293,\"start\":48283},{\"end\":48306,\"start\":48293},{\"end\":48317,\"start\":48306},{\"end\":49099,\"start\":49089},{\"end\":49115,\"start\":49099},{\"end\":49128,\"start\":49115},{\"end\":49139,\"start\":49128},{\"end\":49152,\"start\":49139},{\"end\":49162,\"start\":49152},{\"end\":49172,\"start\":49162},{\"end\":49185,\"start\":49172},{\"end\":49207,\"start\":49185},{\"end\":49219,\"start\":49207},{\"end\":49227,\"start\":49219},{\"end\":49250,\"start\":49227},{\"end\":49264,\"start\":49250},{\"end\":49276,\"start\":49264},{\"end\":49293,\"start\":49276},{\"end\":49304,\"start\":49293},{\"end\":49316,\"start\":49304},{\"end\":49322,\"start\":49316},{\"end\":49953,\"start\":49939},{\"end\":49967,\"start\":49953},{\"end\":49982,\"start\":49967},{\"end\":50003,\"start\":49982},{\"end\":50022,\"start\":50003},{\"end\":50298,\"start\":50281},{\"end\":50315,\"start\":50298},{\"end\":50329,\"start\":50315},{\"end\":50347,\"start\":50329},{\"end\":50989,\"start\":50974},{\"end\":51006,\"start\":50989},{\"end\":51026,\"start\":51006},{\"end\":51038,\"start\":51026},{\"end\":51645,\"start\":51633},{\"end\":51657,\"start\":51645},{\"end\":51692,\"start\":51657},{\"end\":51703,\"start\":51692},{\"end\":51721,\"start\":51703},{\"end\":51739,\"start\":51721},{\"end\":52525,\"start\":52511},{\"end\":52542,\"start\":52525},{\"end\":53026,\"start\":53016},{\"end\":53033,\"start\":53026},{\"end\":53046,\"start\":53033},{\"end\":53055,\"start\":53046},{\"end\":53551,\"start\":53537},{\"end\":53565,\"start\":53551},{\"end\":53578,\"start\":53565},{\"end\":53592,\"start\":53578},{\"end\":54285,\"start\":54273},{\"end\":54295,\"start\":54285},{\"end\":54308,\"start\":54295},{\"end\":54320,\"start\":54308},{\"end\":54334,\"start\":54320},{\"end\":54346,\"start\":54334},{\"end\":54357,\"start\":54346},{\"end\":54369,\"start\":54357},{\"end\":54387,\"start\":54369},{\"end\":54405,\"start\":54387},{\"end\":54747,\"start\":54737},{\"end\":54757,\"start\":54747},{\"end\":54767,\"start\":54757},{\"end\":54781,\"start\":54767},{\"end\":54802,\"start\":54781},{\"end\":54819,\"start\":54802},{\"end\":54836,\"start\":54819},{\"end\":54848,\"start\":54836},{\"end\":54861,\"start\":54848},{\"end\":54872,\"start\":54861},{\"end\":54879,\"start\":54872},{\"end\":54892,\"start\":54879},{\"end\":54905,\"start\":54892},{\"end\":54916,\"start\":54905},{\"end\":54932,\"start\":54916},{\"end\":54943,\"start\":54932},{\"end\":54954,\"start\":54943},{\"end\":54964,\"start\":54954},{\"end\":54981,\"start\":54964},{\"end\":55004,\"start\":54981},{\"end\":55015,\"start\":55004},{\"end\":55020,\"start\":55015},{\"end\":55558,\"start\":55537},{\"end\":55577,\"start\":55558},{\"end\":55592,\"start\":55577},{\"end\":55613,\"start\":55592},{\"end\":55631,\"start\":55613},{\"end\":55646,\"start\":55631},{\"end\":55663,\"start\":55646},{\"end\":56209,\"start\":56195},{\"end\":56221,\"start\":56209},{\"end\":56234,\"start\":56221},{\"end\":56246,\"start\":56234},{\"end\":56260,\"start\":56246},{\"end\":56276,\"start\":56260},{\"end\":56555,\"start\":56541},{\"end\":56569,\"start\":56555},{\"end\":56583,\"start\":56569},{\"end\":56598,\"start\":56583},{\"end\":56613,\"start\":56598},{\"end\":56629,\"start\":56613},{\"end\":56641,\"start\":56629},{\"end\":56649,\"start\":56641},{\"end\":56662,\"start\":56649},{\"end\":57022,\"start\":57007},{\"end\":57033,\"start\":57022},{\"end\":57042,\"start\":57033},{\"end\":57055,\"start\":57042},{\"end\":57065,\"start\":57055},{\"end\":57076,\"start\":57065},{\"end\":57093,\"start\":57076},{\"end\":57108,\"start\":57093},{\"end\":57122,\"start\":57108},{\"end\":57126,\"start\":57122},{\"end\":57423,\"start\":57394},{\"end\":57438,\"start\":57423},{\"end\":57459,\"start\":57438},{\"end\":57467,\"start\":57459},{\"end\":58001,\"start\":57972},{\"end\":58015,\"start\":58001},{\"end\":58037,\"start\":58015},{\"end\":58045,\"start\":58037},{\"end\":58319,\"start\":58304},{\"end\":58333,\"start\":58319},{\"end\":58350,\"start\":58333},{\"end\":59021,\"start\":59008},{\"end\":59029,\"start\":59021},{\"end\":59038,\"start\":59029},{\"end\":59051,\"start\":59038},{\"end\":59064,\"start\":59051},{\"end\":59665,\"start\":59657},{\"end\":59680,\"start\":59665},{\"end\":59691,\"start\":59680},{\"end\":59704,\"start\":59691},{\"end\":59715,\"start\":59704},{\"end\":59726,\"start\":59715},{\"end\":59736,\"start\":59726},{\"end\":59750,\"start\":59736},{\"end\":59764,\"start\":59750},{\"end\":59768,\"start\":59764},{\"end\":60073,\"start\":60052},{\"end\":60096,\"start\":60073},{\"end\":60105,\"start\":60096},{\"end\":60117,\"start\":60105},{\"end\":60729,\"start\":60713},{\"end\":60742,\"start\":60729},{\"end\":60759,\"start\":60742},{\"end\":61174,\"start\":61158},{\"end\":61188,\"start\":61174},{\"end\":61201,\"start\":61188},{\"end\":61218,\"start\":61201},{\"end\":61231,\"start\":61218},{\"end\":61246,\"start\":61231},{\"end\":61261,\"start\":61246},{\"end\":61279,\"start\":61261},{\"end\":61857,\"start\":61844},{\"end\":61864,\"start\":61857},{\"end\":61871,\"start\":61864},{\"end\":61880,\"start\":61871},{\"end\":61889,\"start\":61880},{\"end\":62474,\"start\":62462},{\"end\":62489,\"start\":62474},{\"end\":62504,\"start\":62489},{\"end\":62517,\"start\":62504},{\"end\":62527,\"start\":62517},{\"end\":63171,\"start\":63156},{\"end\":63191,\"start\":63171},{\"end\":63208,\"start\":63191},{\"end\":63223,\"start\":63208},{\"end\":63242,\"start\":63223}]", "bib_venue": "[{\"end\":40871,\"start\":40722},{\"end\":41973,\"start\":41866},{\"end\":43491,\"start\":43470},{\"end\":44157,\"start\":44086},{\"end\":44801,\"start\":44771},{\"end\":45539,\"start\":45396},{\"end\":46368,\"start\":46205},{\"end\":47138,\"start\":47108},{\"end\":48555,\"start\":48462},{\"end\":49413,\"start\":49406},{\"end\":50543,\"start\":50455},{\"end\":51165,\"start\":51112},{\"end\":51935,\"start\":51857},{\"end\":52665,\"start\":52646},{\"end\":53182,\"start\":53162},{\"end\":53800,\"start\":53707},{\"end\":55779,\"start\":55766},{\"end\":58557,\"start\":58469},{\"end\":59240,\"start\":59149},{\"end\":60286,\"start\":60283},{\"end\":61412,\"start\":61393},{\"end\":62024,\"start\":62006},{\"end\":62671,\"start\":62641},{\"end\":63333,\"start\":63326},{\"end\":40720,\"start\":40562},{\"end\":41772,\"start\":41668},{\"end\":43468,\"start\":43412},{\"end\":44084,\"start\":43998},{\"end\":44769,\"start\":44657},{\"end\":45394,\"start\":45248},{\"end\":46203,\"start\":46045},{\"end\":47106,\"start\":46994},{\"end\":47675,\"start\":47547},{\"end\":48460,\"start\":48352},{\"end\":49404,\"start\":49322},{\"end\":49937,\"start\":49868},{\"end\":50453,\"start\":50367},{\"end\":51110,\"start\":51042},{\"end\":51855,\"start\":51768},{\"end\":52644,\"start\":52542},{\"end\":53160,\"start\":53078},{\"end\":53705,\"start\":53612},{\"end\":54271,\"start\":54216},{\"end\":54735,\"start\":54650},{\"end\":55764,\"start\":55691},{\"end\":56287,\"start\":56276},{\"end\":56681,\"start\":56662},{\"end\":57005,\"start\":56944},{\"end\":57584,\"start\":57467},{\"end\":57970,\"start\":57900},{\"end\":58467,\"start\":58370},{\"end\":59147,\"start\":59068},{\"end\":59655,\"start\":59595},{\"end\":60281,\"start\":60140},{\"end\":60805,\"start\":60774},{\"end\":61391,\"start\":61279},{\"end\":62004,\"start\":61920},{\"end\":62639,\"start\":62527},{\"end\":63324,\"start\":63242}]"}}}, "year": 2023, "month": 12, "day": 17}