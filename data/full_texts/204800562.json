{"id": 204800562, "updated": "2023-11-11 01:16:27.227", "metadata": {"title": "Resource Allocation in Mobility-Aware Federated Learning Networks: A Deep Reinforcement Learning Approach", "authors": "[{\"first\":\"Huy\",\"last\":\"Nguyen\",\"middle\":[\"T.\"]},{\"first\":\"Nguyen\",\"last\":\"Luong\",\"middle\":[\"Cong\"]},{\"first\":\"Jun\",\"last\":\"Zhao\",\"middle\":[]},{\"first\":\"Chau\",\"last\":\"Yuen\",\"middle\":[]},{\"first\":\"Dusit\",\"last\":\"Niyato\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2019, "month": 10, "day": 21}, "abstract": "Federated learning allows mobile devices, i.e., workers, to use their local data to collaboratively train a global model required by the model owner. Federated learning thus addresses the privacy issues of traditional machine learning. However, federated learning faces the energy constraints of the workers and the high network resource cost due to the fact that a number of global model transmissions may be required to achieve the target accuracy. To address the energy constraint, a power beacon can be used that recharges energy to the workers. However, the model owner may need to pay an energy cost to the power beacon for the energy recharge. To address the high network resource cost, the model owner can use a WiFi channel, called default channel, for the global model transmissions. However, communication interruptions may occur due to the instability of the default channel quality. For this, special channels such as LTE channels can be used, but this incurs channel cost. As such, the problem of the model owner is to decide amounts of energy recharged to the workers and to choose channels used to transmit its global model to the workers to maximize the number of global model transmissions while minimizing the energy and channel costs. This is challenging for the model owner under the uncertainty of the channel, energy and mobility states of the workers. In this paper, we thus propose to employ the Deep Q-Network (DQN) that enables the model owner to find the optimal decisions on the energy and the channels without any a priori network knowledge. Simulation results show that the proposed DQN always achieves better performance compared to the conventional algorithms.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3093930561", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/wf-iot/NguyenLZYN20", "doi": "10.1109/wf-iot48130.2020.9221089"}}, "content": {"source": {"pdf_hash": "9a0771508074ed0b042105aa820afe06e32d44ba", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1910.09172v1.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1910.09172", "status": "GREEN"}}, "grobid": {"id": "4d3c0b9db56ea0226dc02f1c44af416bec9f41d3", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/9a0771508074ed0b042105aa820afe06e32d44ba.txt", "contents": "\nResource Allocation in Mobility-Aware Federated Learning Networks: A Deep Reinforcement Learning Approach\n\n\nHuy T Nguyen \nNguyen Cong Luong \nJun Zhao \nChau Yuen \u2020yuenchau@sutd.edu.sg. \nEngineering Product Development\nSingapore University of Technology and Design\nSingapore\n\nDusit Niyato dniyato@ntu.edu.sg \n\nSchool of Computer Science and Engineering\nNanyang Technological University\nSingapore\n\nResource Allocation in Mobility-Aware Federated Learning Networks: A Deep Reinforcement Learning Approach\nIndex Terms-Federated learningdeep reinforcement learn- ingchannel selectionenergy allocationmobility\nFederated learning allows mobile devices, i.e., workers, to use their local data to collaboratively train a global model required by the model owner. Federated learning thus addresses the privacy issues of traditional machine learning. However, federated learning faces the energy constraints of the workers and the high network resource cost due to the fact that a number of global model transmissions may be required to achieve the target accuracy. To address the energy constraint, a power beacon can be used that recharges energy to the workers. However, the model owner may need to pay an energy cost to the power beacon for the energy recharge. To address the high network resource cost, the model owner can use a WiFi channel, called default channel, for the global model transmissions. However, communication interruptions may occur due to the instability of the default channel quality. For this, special channels such as LTE channels can be used, but this incurs channel cost. As such, the problem of the model owner is to decide amounts of energy recharged to the workers and to choose channels used to transmit its global model to the workers to maximize the number of global model transmissions while minimizing the energy and channel costs. This is challenging for the model owner under the uncertainty of the channel, energy and mobility states of the workers. In this paper, we thus propose to employ the Deep Q-Network (DQN) that enables the model owner to find the optimal decisions on the energy and the channels without any a priori network knowledge. Simulation results show that the proposed DQN always achieves better performance compared to the conventional algorithms.\n\nI. INTRODUCTION\n\nIn traditional machine learning approaches, neural network models are trained at a server or a data center. Thus, the centralized learning approaches typically require the raw data, e.g., photos and location information, collected by mobile devices to be centralized at the server [1]. The centralized learning approaches thus face big issues including privacy, long propagation delay, and backbone network burden [2].\n\nRecently, federated learning as a decentralized machine learning approach has been proposed to address the above issues [3], [4]. In the federated learning, mobile devices, i.e., workers, are required to collaboratively train the neural network model of the model owner 1 . In particular, the model owner first transmits its global model to the workers. The workers then use their data to train the model locally and send the model updates to the model owner. The model owner aggregates the model updates from the workers to a new global model and transmits it back to the workers for training. The model owner and the workers periodically exchange and update the model until a target accuracy is achieved [5]. By updating the models rather than the raw data, the federated learning alleviates many challenging problems, e.g, privacy issues and the backbone network burden issues, of the traditional machine learning [6]. However, the federated learning faces two limitations.\n\nThe first limitation is that the workers as mobile devices have energy constraints, and this can make the workers inactive. To address this limitation, a power beacon can be used to recharge energy to the workers. However, the model owner may need to pay an energy cost to the power beacon for the energy recharge. Thus, the model owner must decide appropriate amounts of energy recharged to the workers. The second limitation is that to achieve the target accuracy of the global model, a number of global model transmissions from the model owner to the workers may be required. This incurs a high network resource cost, i.e., the bandwidth cost, to the model owner. To reduce the network resource cost, the model owner uses the WiFi channel or Bluetooth channel, called default channel, for the global model transmissions. As such, the model owner can transmit its global model to the workers with a free access cost. However, the default channel sometimes has low quality, and the global model transmissions may be unreliable [7]. Moreover, the coverage of the default channel is very short that may result in the communication interruptions between the model owner and the workers due to the mobility of the workers. The model owner can thus use so-called special channels such as LTE channels or TV White Space channels for the global model transmissions [8]. However, using such a special channel requires a high communication cost, i.e., channel cost.\n\nAs such, the problem of the model owner is (i) to decide amounts of energy recharged to the workers and (ii) to choose channels, i.e., the default channel or the special channels, for the global model transmissions to maximize the number of successful transmissions while minimizing the energy cost and the channel cost. This is challenging for the model owner since the mobile environment is stochastic in which the channel, energy, and mobility states are uncertain and unpredictable. In this paper, we thus propose to employ the Deep Q-Network (DQN) [9] that enables the model owner to find the optimal decisions on the energy and the channels with no existing network knowledge. In particular, we first formulate a stochastic optimization problem of the model owner that maximizes the number of global model transmissions while minimizing the energy cost and the channel cost. Then, the Deep Q-Learning (DQL) algorithm with Double Deep Q-Network (DDQN) [10] is adopted to derive the optimal policy for the model owner. Simulation results show that the proposed DQL always achieves the better performance compared with baseline algorithms.\n\n\nII. SYSTEM MODEL\n\nWe consider a downlink model of a Federated Learning Network (FLNet) as shown in Fig. 1. The network consists of a model owner and a set L of L workers, i.e., L {1, . . . , L}. The model owner generates a global model, i.e., weight parameters, and transmits the model to the workers for training. The training requires multiple iterations until the global accuracy is achieved [11]. Each worker is equipped with a capacitylimited battery that can store a maximum number of e max energy units. Note that as there is few energy in the battery, the worker may become inactive and cannot communicate with the server. The worker's battery can be recharged by a power beacon, and the model owner pays an energy cost to the power beacon for the energy recharging. To minimize the energy cost while reducing the inactivity probability of the workers, the model owner needs to determine appropriate amounts of energy recharged to the workers, e.g., through energy control links. Note that the workers may have different distances to the power beacon and consume different amounts of energy for uploading their local models. Let \u00b5 l denote the weighted metric of recharging energy to worker l. Without loss of generality, assuming that the workers with higher index have longer distances to the power beacon and higher weighted metrics, i.e., \u00b5 1 \u2264 \u00b7 \u00b7 \u00b7 \u2264 \u00b5 L . As such, using \u00b5 l is to guarantee \"fairness\" among the workers.\n\nAs mobile devices, the workers have a possibility of movement that can result in the link disconnection and communication interruption as the worker is out of the coverage of the power beacon. Denote q l as the probability that worker l is present in the coverage. Within the coverage, the model owner transmits its global model to the workers by using the WiFi channel or Bluetooth channel, i.e., default channel, with freecost access. The default channel has an unstable connection due to the low quality. Let p su denote the probability that the model owner transmits its global model over the default channel successfully. This means that the transmission fails with a probability of (1 \u2212 p su ). To mitigate the communication interruption between the model owner and the workers, special channels, e.g., the LTE channels and TV White Space channels, can be employed. Denote N as a set of N \u22121 special channels, i.e., N {2, . . . , N }. As the model owner decides to use special channel n \u2208 N , it is charged with an access cost \u03bb n > 0 that is proportional to the channel quality. The special channels may have different quality, and we assume that \u03bb 2 < \u00b7 \u00b7 \u00b7 < \u03bb N . Denote p n su as the probability that the global model transmission over special channel n is successful.\n\nThe problem of the model owner is to decide which channel, i.e., the default channel or one of N \u2212 1 special channels, can be used to transmit its global model to each worker to maximize the number of successful transmissions and minimize the channel cost. In addition, the model owner needs to decide appropriate amounts of energy recharged to the workers to minimize the energy cost while mitigating the inactivity possibility of the workers.\n\n\nIII. PROBLEM FORMULATION\n\nUnder the uncertainty of the states of the channels and the workers, the problem of the model owner can be formulated as a stochastic optimization problem that defined by a tuple < S, A, P, R >, where \u2022 S: The state space of the network. \u2022 A: The action space of the model owner.\n\n\u2022 P: The state transition probability function, where the current state s \u2208 S transits to the next state s \u2208 S with probability P s,s (a) when action a \u2208 A is executed. \u2022 R: The reward function of the model owner. First, we consider the action space of the model owner. Given the problem mentioned in Section II, the action space of the model owner can be expressed as follows:\nA = (a c 1 , a e 1 , . . . , a c l , a e l , . . . , a c L , a e L ) ; a c l \u2208 {0, 1, 2, . . . , N }, a e l \u2208 {0, 1, . . . , e max }, l \u2208 L ,\nwhere a c l = 0 means that the model owner does not transmit the global model to worker l, a c l = 1 means that the default channel is used for transmitting the global model to worker l, a c l = n means that special channel n, n \u2208 N is used for transmitting the model to worker l, and a e l refers to the amount of energy recharged to worker l.\n\nNext, we consider the state space of the network. The state space of the network can be regarded as a combination of state spaces of L workers, i.e., S = L l=1 S l , where is the Cartesian product, and S l is the state space of worker l that is defined as follows:\nS l = (w l , e l , X l ); w l \u2208 {0, 1}, e l \u2208 {0, 1, . . . , e max }, X l \u2208 {0, 1} ,\nwhere w l is the state of channel that the model owner uses to transmit its global model to worker l, w l = 1 if the channel is good, and w l = 0 otherwise. e l refers to the energy state of worker l that is the current number of energy units in the battery. X l is the mobility state of worker l, X l = 1 means that worker l is in the communication range of the model owner, and X l = 0 otherwise. Now, we consider the state transition of the model owner. For the energy transition, each worker consumes its energy for training the model required by the model owner and running its local applications. In general, the amount of consumed energy is unknown to the model owner. To model the transition of energy state for the worker, we use the Markov chain. We assume that in each training iteration, the worker consumes at least one energy unit and at most two energy units for training the model and running local application. The recharging energy to the workers happens after the training in each iteration. The energy state transition of worker l is shown in Fig. 2, where the energy is reduced by either one unit with a probability of (1 \u2212 p l ) or two units with a probability of p l under the condition of e l \u2265 2. Note that at e l = 1, the energy state can directly transfer to state e l = 0 with the probability of 1 due to the energy consumption of running local applications. For the channel and mobility, we model the channel state w l and the mobility state X l as a Bernoulli process, which takes value 1 with probability p su or p n su , \u2200n \u2208 N and q l , respectively. Finally, we define the reward of the model owner. One of the objectives is to maximize the number of successful trans-missions of the model owner. We assume that the model owner earns a positive utility \u2206 from the successful transmission to each worker. Let I l denote the utility that the model owner receives for transmitting its global model to worker l. I l can be expressed as follows:\nI l = \u2206 if the transmission is successful, 0 otherwise.\nAs the model owner decides to use special channel \u03bb n to transmit the global model to worker l, the model owner must pay channel access cost C c l = \u03bb n , i.e., to a network provider. Otherwise, as the model owner chooses not to transmit or chooses the default channel to transmit the global model to worker l, C c l = 0. Thus, C c l is determined as follows:\nC c l = \u03bb n if a c l = n, n \u2208 N , 0\nif a c l = 0 or a c l = 1. When the model owner decides to transmit its global model to worker l, i.e., by using either the default channel or the special channel, the worker consumes energy for training and uploading the local model. The worker's battery can be recharged by the power beacon, and there is energy cost C e l . C e l is the cost that the model owner pays the power beacon for recharging energy to worker l. C e l is a function of the weighted metric \u00b5 l and the amount of recharging energy a e l . C e l is given by\nC e l = \u00b5 l a e l if X l = 1, \u00b5 out a e l otherwise,\nwhere \u00b5 out is the weighted metric for recharging energy from outside the coverage. Note that the model owner pays a higher cost to recharge the energy if the worker is outside of the coverage, meaning that \u00b5 out > \u00b5 l , \u2200l \u2208 L.\n\nThe reward of the model owner is defined as a function of state s \u2208 S and action a \u2208 A as follows:\nR (s, a) = l\u2208L \u03b1 I I l I max \u2212 \u03b1 c C c l C c,max \u2212 \u03b1 e C e l C e,max ,(1)\n\nAlgorithm 1 DQL algorithm\n\nInitialization \u03b3, \u03b2, \u03b8, \u03b8\", \u03ba = 0 repeat Initialize network state s from L workers, i = 0 repeat Choose action a according to -greedy policy Execute action a and obtain reward r and next state s Store tuple < s, a, r, s > in M Sample M b experiences < s, a, r, s > from M Determine a max = arg max a \u2208A Q(s , a ; \u03b8) Execute (6) to obtain y DDQN Perform gradient descent step on (4) to update \u03b8 Reset \u03b8\" = \u03b8 every I \u2212 iterations Reset i \u2190 i + 1 until i is greater than maximum number of iterations in episode \u03ba Reset \u03ba \u2190 \u03ba + 1 until \u03ba is greater than maximum number of episodes where \u03b1 I , \u03b1 c , and \u03b1 e are the scale factors. I max = \u2206L, C c,max = N L and C e,max = \u00b5 out e max L are the maximum values of the total utility, channel cost and energy cost, respectively.\n\nGiven each state s \u2208 S, the model owner must determine the optimal action a \u2208 A to maximize the accumulated reward. The output is the optimal policy, which is defined as \u03c0 * : S \u2192 A. To obtain the optimal policy \u03c0 * , the conventional Q-Learning (QL) algorithm [12] can be utilized. The main idea of QL algorithm is to update Q-values, i.e., Q(s, a), of state-action pairs for a Q-table by using Bellman's equation as follows [12]:\n\nQ(s, a) = s \u2208S P \u03c0 (s, s )(R(s, a) + \u03b3V (s )).\n\n(2)\n\nThus, the Q-value is updated as follows\nQ new (s, a) = (1 \u2212 \u03b2)Q(s, a) + \u03b2 R(s, a) + \u03b3 max a \u2208A Q(s , a ) ,(3)\nwhere \u03b2 is the learning rate, and \u03b3 is the discount factor, 0 \u2264 \u03b3 < 1.\n\nAfter updating the Q(s, a) values, the model owner can rely on the Q-table to determine the optimal action from any state to maximize the accumulated reward. However, this QL algorithm is only feasible for networks with small state and action spaces. As the number of workers L increases, the problem of the model owner is high dimensional due to the involvement of the large state and action spaces. Therefore, the Deep Q-Learning (DQL) algorithm [9], which is a combination of deep neural network (DNN) and QL, is adopted to find the optimal policy for the model owner.\n\n\nIV. DEEP Q-LEARNING ALGORITHM\n\nDifferent from the QL algorithm, the DQL algorithm uses a DNN to derive approximate Q-values, i.e., Q * (s, a), instead of the Q-table. The input of the DNN is one of states of the model owner, and the output includes Q-values Q(s, a; \u03b8) of all possible actions, where \u03b8 is the weights of the DNN. To obtain the approximate values Q * (s, a), the DNN needs to be trained by using experiences < s, a, r, s >. In particular, the DQL algorithm updates weights \u03b8 of the DQN to minimize the loss function defined as follows:\nL(\u03b8) = E (y DQN (t) \u2212 Q(s, a; \u03b8)) 2 ,(4)\nwhere y DQN is the target value that is given by\ny DQN = r + \u03b3 arg max a \u2208A Q(s , a ; \u03b8 ),(5)\nwhere \u03b8 is the weights of the DNN from the previous iteration and r is the current reward. Note that action a is selected according to the -greedy policy. From (5), we observe that the max operator uses the same Q-value for both action selection and action evaluation. As a result, the derived policy may be inaccurate due to the over-optimistic estimation [13].\n\nTo address the over-optimistic problem, the action selection should be decoupled from the action evaluation. For this, the Double Deep Q-network (DDQN) [10] can be used. The main feature of DDQN is the use of two separate DNNs i.e., an online network with weights \u03b8 and a target network with weights \u03b8\". The weights of the online network are updated at each iteration, while those of the target network are kept constant. For every I \u2212 iterations, the target network's weights \u03b8\" are reset to \u03b8. The target function of DDQN is defined by\ny DDQN = r + \u03b3Q(s , arg max a \u2208A\nQ(s , a ; \u03b8); \u03b8\").\n\nAs seen from (6), the weights of the online network, i.e., \u03b8, are used to select an action, while those of the target network, i.e., \u03b8\", are used to evaluate the action. Both the online network and the target network use the next state s to compute the optimal value Q(s , a ; \u03b8). Given \u03b3 and r, the target value y DDQN is calculated based on (6). Then, a gradient descent step is performed to update the weights of online networks \u03b8 based on the loss function L(\u03b8) in (4). To guarantee the stability of the learning, the DQL algorithm employs an experience replay memory M, where a mini-batch of M b experiences is taken at each iteration to train the DNNs. Algorithm 1 shows how to implement the DQL algorithm.\n\n\nV. NUMERICAL RESULTS\n\nIn this section, we present experimental results to evaluate the performance of the proposed DQL algorithm. For comparison, we use the QL [12], greedy, and random algorithms as baseline schemes. For the greedy algorithm, the model owner decides the maximum amount of energy charged to each worker and selects the special channel with the highest quality to transmit the global model to the worker. For the random algorithm, selecting the channel and deciding the amount of charging energy for each worker are random. The algorithms are implemented by using TensorFlow deep learning library [14]. In particular for the DQL, we employ two DNNs, and each DNN has a size of 32 \u00d7 32 \u00d7 32. The Adam optimizer is used that allows to adjust the learning rate during the training phase. The learning rate \u03b2 is set to 0.001 to avoid the loss of local minima. The DQL algorithm prefers the long-term reward, and thus the discount factor \u03b3 is set to 0.9. We use the -greedy policy with = 0.9 that balances between the exploration and exploitation. During the training phase, is linearly reduced to zero that moves from the exploration to the exploitation. The probabilities of energy consumption and mobility of the workers are set as follows p l = p en and q l = q mo , \u2200l \u2208 L. Other parameters are shown in Table I. In Fig. 3, we plot the comparison among algorithms in terms of convergence speed and reward. As seen, the convergence speed of the DQL algorithm is much faster than that of the QL algorithm. Specifically, the DQL algorithm converges to the stable value of the reward within 5000 episodes, while the QL algorithm needs to take around 8000 episodes for the convergence. Also, the reward obtained by the DQL is much higher than those obtained by the baseline algorithms. In particular, the rewards obtained by the DQL, QL, greedy, and random algorithms are 4300, 2700, 2550, and 480, respectively. These results show that the DQL algorithm enables the model owner to learn the optimal polity. In particular with the greedy algorithm, the model owner employs the special channel with the highest quality and decides the maximum amount of energy recharged to each worker. The greedy algorithm can enable the model owner to improve its utility. However, it incurs the high channel cost and energy cost that significantly reduces the reward. For the random algorithm, the model owner randomly selects channels and amounts of energy. This may reduce the number of successful transmissions, and the workers may often face low energy states. Therefore, the random algorithm obtains the worst performance. The performance improvement of the DQL algorithm compared with the baseline algorithms is maintained even if the mobility parameter q mo varies as shown in Fig. 4. Note that as the mobility parameter increases, the rewards obtained by all the algorithms generally increase. This is due to the fact as q mo approaches 1, most workers are in the coverage and the default channel is used. This significantly reduces the channel and energy costs and increases the reward.\n\nNext, we evaluate the DQL algorithm as the number of workers L varies. Fig. 5 shows the average utility obtained by the DQL algorithm under the different number of workers. As seen, the convergence speed of the DQL algorithm is slower as the number of workers increases. The reason is that as the number of workers increases, the action and state spaces increase that reduces the convergence speed of the algorithm. It is worth noting that the DQL algorithm converges to the same average utility regardless the number of workers. This is because of that the model owner already learns the optimal policy to obtain the maximum utility.\n\nFinally, it is interesting to consider how the model owner selects the channel for transmitting its global model to each worker given the worker's mobility state. Without loss of generality, we consider the worker 1. As shown in Fig. 6, as the worker is outside of the coverage, X 1 = 0, the model owner selects one special channel. Specifically, special channel 2, i.e., n = 2, is selected since it has a lower cost than other special channels. As the worker is present in the coverage, both the channels, i.e., the special channels and default channel, can be used. However, the selection frequency of the default channel is higher than that of the special channels. The reason is that the default channel has quality enough, e.g., p su = 0.8, and using the default channel results in reducing the channel cost.\n\n\nVI. CONCLUSIONS\n\nIn this paper, we have presented the DQL algorithm for the resource allocation in the mobility-aware federated learning network. In particular, we first formulate the channel selection and energy decision of the model owner as a stochastic optimization problem. The optimization problem aims to maximize the number of successful transmissions of the model owner while minimizing the energy and channel costs. To solve the problem, we have developed the DQL algorithm with DDQN. The simulation results show that the reward obtained by the proposed DQL is significantly higher than those obtained by the conventional algorithms. This means that the proposed DQL algorithm enables the model owner to learn the optimal decisions under the stochastic and uncertainty of the network environment.\n\n\nFig. 1. A downlink model of FLNet.\n\nFig. 2 .\n2Energy state transition model of worker l.\n\nFig. 3 .\n3Reward and convergence speed comparison.\n\nFig. 5 .\n5The average utility with various L values.\n\nFig. 6 .\n6Channel policy for worker 1.\n\nTABLE I\nIPARAMETER SETTINGS \n\nL = N = e max \n3 \n\u2206 \n5 \n{\u00b5 1 , \u00b5 2 , \u00b5 3 , \u00b5out} \n{0.1, 0.2, 0.3, 0.8} \n{\u03bb 2 , \u03bb 3 } \n{2, 3} \n{psu, p 2 \nsu , p 3 \nsu } \n{0.5, 0.95, 0.98} \n{\u03b1 I , \u03b1c, \u03b1e} \n{3, 1, 1} \n{pen, qmo} \n{0.5, 0.8} \n\n\nIn the rest of the paper, we use \"model owner\" to refer to the server which creates the global model, and \"worker\" is a mobile device which trains the global model.\n\nCrowd-Tracker: Optimized urban moving object tracking using mobile crowd sensing. Y Jing, B Guo, Z Wang, V O Li, J C Lam, Z Yu, IEEE Internet Things J. 55Y. Jing, B. Guo, Z. Wang, V. O. Li, J. C. Lam, and Z. Yu, \"Crowd- Tracker: Optimized urban moving object tracking using mobile crowd sensing,\" IEEE Internet Things J., vol. 5, no. 5, pp. 3452-3463, Oct. 2017.\n\nA survey on mobile edge computing: The communication perspective. Y Mao, C You, J Zhang, K Huang, K B Letaief, IEEE Commun. Surveys Tuts. 194Y. Mao, C. You, J. Zhang, K. Huang, and K. B. Letaief, \"A survey on mobile edge computing: The communication perspective,\" IEEE Commun. Surveys Tuts., vol. 19, no. 4, pp. 2322-2358, Aug. 2017.\n\nCommunication-efficient learning of deep networks from decentralized data. H B Mcmahan, E Moore, D Ramage, S Hampson, arXiv:1602.05629arXiv preprintH. B. McMahan, E. Moore, D. Ramage, S. Hampson et al., \"Communication-efficient learning of deep networks from decentralized data,\" arXiv preprint arXiv:1602.05629, Feb. 2016.\n\nEfficient training management for mobile crowd-machine learning: A deep reinforcement learning approach. T T Anh, N C Luong, D Niyato, D I Kim, L.-C Wang, IEEE Wirel. Commun. Lett. T. T. Anh, N. C. Luong, D. Niyato, D. I. Kim, and L.-C. Wang, \"Efficient training management for mobile crowd-machine learning: A deep reinforcement learning approach,\" IEEE Wirel. Commun. Lett., May 2019.\n\nFederated learning: Collaborative machine learning without centralized training data. B Mcmahan, D Ramage, Google Research Blog. 3B. McMahan and D. Ramage, \"Federated learning: Collaborative ma- chine learning without centralized training data,\" Google Research Blog, vol. 3, Apr. 2017.\n\nFederated learning in mobile edge networks: A comprehensive survey. W Y B Lim, N C Luong, D T Hoang, Y Jiao, Y.-C Liang, Q Yang, D Niyato, C Miao, arXiv:1909.11875arXiv preprintW. Y. B. Lim, N. C. Luong, D. T. Hoang, Y. Jiao, Y.-C. Liang, Q. Yang, D. Niyato, and C. Miao, \"Federated learning in mobile edge networks: A comprehensive survey,\" arXiv preprint arXiv:1909.11875, Sep. 2019.\n\nEnterprise LTE and WiFi interworking system and a proposed network selection solution. L Xu, J Xie, X Xu, S Wang, Proc. Symp. SympL. Xu, J. Xie, X. Xu, and S. Wang, \"Enterprise LTE and WiFi interworking system and a proposed network selection solution,\" in Proc. Symp. Archit. Netw. Commun. Syst., Mar. 2016, pp. 137-138.\n\nUnlocking 5G spectrum potential for intelligent IoT: Opportunities, challenges, and solutions. M K Afzal, Y B Zikria, S Mumtaz, A Rayes, A Al-Dulaimi, M Guizani, IEEE Commun. Mag. 5610M. K. Afzal, Y. B. Zikria, S. Mumtaz, A. Rayes, A. Al-Dulaimi, and M. Guizani, \"Unlocking 5G spectrum potential for intelligent IoT: Opportunities, challenges, and solutions,\" IEEE Commun. Mag., vol. 56, no. 10, pp. 92-93, Oct. 2018.\n\nHuman-level control through deep reinforcement learning. V Mnih, K Kavukcuoglu, D Silver, A A Rusu, J Veness, M G Bellemare, A Graves, M Riedmiller, A K Fidjeland, G Ostrovski, Nature. 5187540529V. Mnih, K. Kavukcuoglu, D. Silver, A. A. Rusu, J. Veness, M. G. Bellemare, A. Graves, M. Riedmiller, A. K. Fidjeland, G. Ostrovski et al., \"Human-level control through deep reinforcement learning,\" Nature, vol. 518, no. 7540, p. 529, Feb. 2015.\n\nDeep reinforcement learning with double Q-learning. H Van Hasselt, A Guez, D Silver, AAAI. Phoenix, ArizonaH. Van Hasselt, A. Guez, and D. Silver, \"Deep reinforcement learning with double Q-learning,\" in AAAI, Phoenix, Arizona, Mar. 2016, pp. 1-7.\n\nFederated learning over wireless networks: Optimization model design and analysis. N H Tran, W Bao, A Zomaya, C S Hong, IEEE INFOCOM 2019-IEEE Conference on Computer Communications. N. H. Tran, W. Bao, A. Zomaya, and C. S. Hong, \"Federated learning over wireless networks: Optimization model design and analysis,\" in IEEE INFOCOM 2019-IEEE Conference on Computer Communications, Apr. 2019, pp. 1387-1395.\n\nQ-learning. C J Watkins, P Dayan, Machine learning. 83-4C. J. Watkins and P. Dayan, \"Q-learning,\" Machine learning, vol. 8, no. 3-4, pp. 279-292, May 1992.\n\nT T Anh, N C Luong, D Niyato, Y.-C Liang, D I Kim, arXiv:1810.04520Deep reinforcement learning for time scheduling in RF-powered backscatter cognitive radio networks. arXiv preprintT. T. Anh, N. C. Luong, D. Niyato, Y.-C. Liang, and D. I. Kim, \"Deep reinforcement learning for time scheduling in RF-powered backscatter cognitive radio networks,\" arXiv preprint arXiv:1810.04520, 2018.\n\nTensorflow: A system for large-scale machine learning. M Abadi, P Barham, J Chen, Z Chen, A Davis, J Dean, M Devin, S Ghemawat, G Irving, M Isard, Proc. 12th USENIX Symp. Operating Syst. Des. Implementation. 12th USENIX Symp. Operating Syst. Des. ImplementationM. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard et al., \"Tensorflow: A system for large-scale machine learning,\" in Proc. 12th USENIX Symp. Operating Syst. Des. Implementation, 2016, pp. 265-283.\n", "annotations": {"author": "[{\"end\":122,\"start\":109},{\"end\":141,\"start\":123},{\"end\":151,\"start\":142},{\"end\":274,\"start\":152},{\"end\":307,\"start\":275},{\"end\":395,\"start\":308}]", "publisher": null, "author_last_name": "[{\"end\":121,\"start\":115},{\"end\":140,\"start\":135},{\"end\":150,\"start\":146},{\"end\":161,\"start\":157},{\"end\":287,\"start\":281}]", "author_first_name": "[{\"end\":112,\"start\":109},{\"end\":114,\"start\":113},{\"end\":129,\"start\":123},{\"end\":134,\"start\":130},{\"end\":145,\"start\":142},{\"end\":156,\"start\":152},{\"end\":280,\"start\":275}]", "author_affiliation": "[{\"end\":273,\"start\":186},{\"end\":394,\"start\":309}]", "title": "[{\"end\":106,\"start\":1},{\"end\":501,\"start\":396}]", "venue": null, "abstract": "[{\"end\":2297,\"start\":604}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2600,\"start\":2597},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2733,\"start\":2730},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":2859,\"start\":2856},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2864,\"start\":2861},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3007,\"start\":3006},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3445,\"start\":3442},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3656,\"start\":3653},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4745,\"start\":4742},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5076,\"start\":5073},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5729,\"start\":5726},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":6134,\"start\":6130},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":6717,\"start\":6713},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15484,\"start\":15480},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15649,\"start\":15645},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":16338,\"start\":16335},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":17508,\"start\":17504},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":17667,\"start\":17663},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":18981,\"start\":18977},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19433,\"start\":19429}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":24204,\"start\":24168},{\"attributes\":{\"id\":\"fig_1\"},\"end\":24258,\"start\":24205},{\"attributes\":{\"id\":\"fig_2\"},\"end\":24310,\"start\":24259},{\"attributes\":{\"id\":\"fig_3\"},\"end\":24364,\"start\":24311},{\"attributes\":{\"id\":\"fig_4\"},\"end\":24404,\"start\":24365},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":24628,\"start\":24405}]", "paragraph": "[{\"end\":2734,\"start\":2316},{\"end\":3712,\"start\":2736},{\"end\":5171,\"start\":3714},{\"end\":6315,\"start\":5173},{\"end\":7753,\"start\":6336},{\"end\":9034,\"start\":7755},{\"end\":9480,\"start\":9036},{\"end\":9788,\"start\":9509},{\"end\":10167,\"start\":9790},{\"end\":10654,\"start\":10310},{\"end\":10920,\"start\":10656},{\"end\":12980,\"start\":11006},{\"end\":13396,\"start\":13037},{\"end\":13964,\"start\":13433},{\"end\":14246,\"start\":14018},{\"end\":14346,\"start\":14248},{\"end\":15217,\"start\":14449},{\"end\":15650,\"start\":15219},{\"end\":15698,\"start\":15652},{\"end\":15703,\"start\":15700},{\"end\":15744,\"start\":15705},{\"end\":15885,\"start\":15815},{\"end\":16458,\"start\":15887},{\"end\":17011,\"start\":16492},{\"end\":17101,\"start\":17053},{\"end\":17509,\"start\":17147},{\"end\":18048,\"start\":17511},{\"end\":18100,\"start\":18082},{\"end\":18814,\"start\":18102},{\"end\":21907,\"start\":18839},{\"end\":22543,\"start\":21909},{\"end\":23358,\"start\":22545},{\"end\":24167,\"start\":23378}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10309,\"start\":10168},{\"attributes\":{\"id\":\"formula_1\"},\"end\":11005,\"start\":10921},{\"attributes\":{\"id\":\"formula_2\"},\"end\":13036,\"start\":12981},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13432,\"start\":13397},{\"attributes\":{\"id\":\"formula_4\"},\"end\":14017,\"start\":13965},{\"attributes\":{\"id\":\"formula_5\"},\"end\":14420,\"start\":14347},{\"attributes\":{\"id\":\"formula_6\"},\"end\":15814,\"start\":15745},{\"attributes\":{\"id\":\"formula_7\"},\"end\":17052,\"start\":17012},{\"attributes\":{\"id\":\"formula_8\"},\"end\":17146,\"start\":17102},{\"attributes\":{\"id\":\"formula_9\"},\"end\":18081,\"start\":18049}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":20143,\"start\":20136}]", "section_header": "[{\"end\":2314,\"start\":2299},{\"end\":6334,\"start\":6318},{\"end\":9507,\"start\":9483},{\"end\":14447,\"start\":14422},{\"end\":16490,\"start\":16461},{\"end\":18837,\"start\":18817},{\"end\":23376,\"start\":23361},{\"end\":24214,\"start\":24206},{\"end\":24268,\"start\":24260},{\"end\":24320,\"start\":24312},{\"end\":24374,\"start\":24366},{\"end\":24413,\"start\":24406}]", "table": "[{\"end\":24628,\"start\":24415}]", "figure_caption": "[{\"end\":24204,\"start\":24170},{\"end\":24258,\"start\":24216},{\"end\":24310,\"start\":24270},{\"end\":24364,\"start\":24322},{\"end\":24404,\"start\":24376}]", "figure_ref": "[{\"end\":6423,\"start\":6417},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":12075,\"start\":12069},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":20154,\"start\":20148},{\"end\":21602,\"start\":21596},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21986,\"start\":21980},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":22780,\"start\":22774}]", "bib_author_first_name": "[{\"end\":24878,\"start\":24877},{\"end\":24886,\"start\":24885},{\"end\":24893,\"start\":24892},{\"end\":24901,\"start\":24900},{\"end\":24903,\"start\":24902},{\"end\":24909,\"start\":24908},{\"end\":24911,\"start\":24910},{\"end\":24918,\"start\":24917},{\"end\":25226,\"start\":25225},{\"end\":25233,\"start\":25232},{\"end\":25240,\"start\":25239},{\"end\":25249,\"start\":25248},{\"end\":25258,\"start\":25257},{\"end\":25260,\"start\":25259},{\"end\":25570,\"start\":25569},{\"end\":25572,\"start\":25571},{\"end\":25583,\"start\":25582},{\"end\":25592,\"start\":25591},{\"end\":25602,\"start\":25601},{\"end\":25925,\"start\":25924},{\"end\":25927,\"start\":25926},{\"end\":25934,\"start\":25933},{\"end\":25936,\"start\":25935},{\"end\":25945,\"start\":25944},{\"end\":25955,\"start\":25954},{\"end\":25957,\"start\":25956},{\"end\":25967,\"start\":25963},{\"end\":26294,\"start\":26293},{\"end\":26305,\"start\":26304},{\"end\":26564,\"start\":26563},{\"end\":26568,\"start\":26565},{\"end\":26575,\"start\":26574},{\"end\":26577,\"start\":26576},{\"end\":26586,\"start\":26585},{\"end\":26588,\"start\":26587},{\"end\":26597,\"start\":26596},{\"end\":26608,\"start\":26604},{\"end\":26617,\"start\":26616},{\"end\":26625,\"start\":26624},{\"end\":26635,\"start\":26634},{\"end\":26970,\"start\":26969},{\"end\":26976,\"start\":26975},{\"end\":26983,\"start\":26982},{\"end\":26989,\"start\":26988},{\"end\":27301,\"start\":27300},{\"end\":27303,\"start\":27302},{\"end\":27312,\"start\":27311},{\"end\":27314,\"start\":27313},{\"end\":27324,\"start\":27323},{\"end\":27334,\"start\":27333},{\"end\":27343,\"start\":27342},{\"end\":27357,\"start\":27356},{\"end\":27682,\"start\":27681},{\"end\":27690,\"start\":27689},{\"end\":27705,\"start\":27704},{\"end\":27715,\"start\":27714},{\"end\":27717,\"start\":27716},{\"end\":27725,\"start\":27724},{\"end\":27735,\"start\":27734},{\"end\":27737,\"start\":27736},{\"end\":27750,\"start\":27749},{\"end\":27760,\"start\":27759},{\"end\":27774,\"start\":27773},{\"end\":27776,\"start\":27775},{\"end\":27789,\"start\":27788},{\"end\":28119,\"start\":28118},{\"end\":28134,\"start\":28133},{\"end\":28142,\"start\":28141},{\"end\":28399,\"start\":28398},{\"end\":28401,\"start\":28400},{\"end\":28409,\"start\":28408},{\"end\":28416,\"start\":28415},{\"end\":28426,\"start\":28425},{\"end\":28428,\"start\":28427},{\"end\":28734,\"start\":28733},{\"end\":28736,\"start\":28735},{\"end\":28747,\"start\":28746},{\"end\":28879,\"start\":28878},{\"end\":28881,\"start\":28880},{\"end\":28888,\"start\":28887},{\"end\":28890,\"start\":28889},{\"end\":28899,\"start\":28898},{\"end\":28912,\"start\":28908},{\"end\":28921,\"start\":28920},{\"end\":28923,\"start\":28922},{\"end\":29320,\"start\":29319},{\"end\":29329,\"start\":29328},{\"end\":29339,\"start\":29338},{\"end\":29347,\"start\":29346},{\"end\":29355,\"start\":29354},{\"end\":29364,\"start\":29363},{\"end\":29372,\"start\":29371},{\"end\":29381,\"start\":29380},{\"end\":29393,\"start\":29392},{\"end\":29403,\"start\":29402}]", "bib_author_last_name": "[{\"end\":24883,\"start\":24879},{\"end\":24890,\"start\":24887},{\"end\":24898,\"start\":24894},{\"end\":24906,\"start\":24904},{\"end\":24915,\"start\":24912},{\"end\":24921,\"start\":24919},{\"end\":25230,\"start\":25227},{\"end\":25237,\"start\":25234},{\"end\":25246,\"start\":25241},{\"end\":25255,\"start\":25250},{\"end\":25268,\"start\":25261},{\"end\":25580,\"start\":25573},{\"end\":25589,\"start\":25584},{\"end\":25599,\"start\":25593},{\"end\":25610,\"start\":25603},{\"end\":25931,\"start\":25928},{\"end\":25942,\"start\":25937},{\"end\":25952,\"start\":25946},{\"end\":25961,\"start\":25958},{\"end\":25972,\"start\":25968},{\"end\":26302,\"start\":26295},{\"end\":26312,\"start\":26306},{\"end\":26572,\"start\":26569},{\"end\":26583,\"start\":26578},{\"end\":26594,\"start\":26589},{\"end\":26602,\"start\":26598},{\"end\":26614,\"start\":26609},{\"end\":26622,\"start\":26618},{\"end\":26632,\"start\":26626},{\"end\":26640,\"start\":26636},{\"end\":26973,\"start\":26971},{\"end\":26980,\"start\":26977},{\"end\":26986,\"start\":26984},{\"end\":26994,\"start\":26990},{\"end\":27309,\"start\":27304},{\"end\":27321,\"start\":27315},{\"end\":27331,\"start\":27325},{\"end\":27340,\"start\":27335},{\"end\":27354,\"start\":27344},{\"end\":27365,\"start\":27358},{\"end\":27687,\"start\":27683},{\"end\":27702,\"start\":27691},{\"end\":27712,\"start\":27706},{\"end\":27722,\"start\":27718},{\"end\":27732,\"start\":27726},{\"end\":27747,\"start\":27738},{\"end\":27757,\"start\":27751},{\"end\":27771,\"start\":27761},{\"end\":27786,\"start\":27777},{\"end\":27799,\"start\":27790},{\"end\":28131,\"start\":28120},{\"end\":28139,\"start\":28135},{\"end\":28149,\"start\":28143},{\"end\":28406,\"start\":28402},{\"end\":28413,\"start\":28410},{\"end\":28423,\"start\":28417},{\"end\":28433,\"start\":28429},{\"end\":28744,\"start\":28737},{\"end\":28753,\"start\":28748},{\"end\":28885,\"start\":28882},{\"end\":28896,\"start\":28891},{\"end\":28906,\"start\":28900},{\"end\":28918,\"start\":28913},{\"end\":28927,\"start\":28924},{\"end\":29326,\"start\":29321},{\"end\":29336,\"start\":29330},{\"end\":29344,\"start\":29340},{\"end\":29352,\"start\":29348},{\"end\":29361,\"start\":29356},{\"end\":29369,\"start\":29365},{\"end\":29378,\"start\":29373},{\"end\":29390,\"start\":29382},{\"end\":29400,\"start\":29394},{\"end\":29409,\"start\":29404}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":25157,\"start\":24795},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":206578365},\"end\":25492,\"start\":25159},{\"attributes\":{\"doi\":\"arXiv:1602.05629\",\"id\":\"b2\"},\"end\":25817,\"start\":25494},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":54461092},\"end\":26205,\"start\":25819},{\"attributes\":{\"id\":\"b4\"},\"end\":26493,\"start\":26207},{\"attributes\":{\"doi\":\"arXiv:1909.11875\",\"id\":\"b5\"},\"end\":26880,\"start\":26495},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":23575148},\"end\":27203,\"start\":26882},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":53038613},\"end\":27622,\"start\":27205},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":205242740},\"end\":28064,\"start\":27624},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":6208256},\"end\":28313,\"start\":28066},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":86439367},\"end\":28719,\"start\":28315},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":208910339},\"end\":28876,\"start\":28721},{\"attributes\":{\"doi\":\"arXiv:1810.04520\",\"id\":\"b12\"},\"end\":29262,\"start\":28878},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":6287870},\"end\":29773,\"start\":29264}]", "bib_title": "[{\"end\":24875,\"start\":24795},{\"end\":25223,\"start\":25159},{\"end\":25922,\"start\":25819},{\"end\":26291,\"start\":26207},{\"end\":26967,\"start\":26882},{\"end\":27298,\"start\":27205},{\"end\":27679,\"start\":27624},{\"end\":28116,\"start\":28066},{\"end\":28396,\"start\":28315},{\"end\":28731,\"start\":28721},{\"end\":29317,\"start\":29264}]", "bib_author": "[{\"end\":24885,\"start\":24877},{\"end\":24892,\"start\":24885},{\"end\":24900,\"start\":24892},{\"end\":24908,\"start\":24900},{\"end\":24917,\"start\":24908},{\"end\":24923,\"start\":24917},{\"end\":25232,\"start\":25225},{\"end\":25239,\"start\":25232},{\"end\":25248,\"start\":25239},{\"end\":25257,\"start\":25248},{\"end\":25270,\"start\":25257},{\"end\":25582,\"start\":25569},{\"end\":25591,\"start\":25582},{\"end\":25601,\"start\":25591},{\"end\":25612,\"start\":25601},{\"end\":25933,\"start\":25924},{\"end\":25944,\"start\":25933},{\"end\":25954,\"start\":25944},{\"end\":25963,\"start\":25954},{\"end\":25974,\"start\":25963},{\"end\":26304,\"start\":26293},{\"end\":26314,\"start\":26304},{\"end\":26574,\"start\":26563},{\"end\":26585,\"start\":26574},{\"end\":26596,\"start\":26585},{\"end\":26604,\"start\":26596},{\"end\":26616,\"start\":26604},{\"end\":26624,\"start\":26616},{\"end\":26634,\"start\":26624},{\"end\":26642,\"start\":26634},{\"end\":26975,\"start\":26969},{\"end\":26982,\"start\":26975},{\"end\":26988,\"start\":26982},{\"end\":26996,\"start\":26988},{\"end\":27311,\"start\":27300},{\"end\":27323,\"start\":27311},{\"end\":27333,\"start\":27323},{\"end\":27342,\"start\":27333},{\"end\":27356,\"start\":27342},{\"end\":27367,\"start\":27356},{\"end\":27689,\"start\":27681},{\"end\":27704,\"start\":27689},{\"end\":27714,\"start\":27704},{\"end\":27724,\"start\":27714},{\"end\":27734,\"start\":27724},{\"end\":27749,\"start\":27734},{\"end\":27759,\"start\":27749},{\"end\":27773,\"start\":27759},{\"end\":27788,\"start\":27773},{\"end\":27801,\"start\":27788},{\"end\":28133,\"start\":28118},{\"end\":28141,\"start\":28133},{\"end\":28151,\"start\":28141},{\"end\":28408,\"start\":28398},{\"end\":28415,\"start\":28408},{\"end\":28425,\"start\":28415},{\"end\":28435,\"start\":28425},{\"end\":28746,\"start\":28733},{\"end\":28755,\"start\":28746},{\"end\":28887,\"start\":28878},{\"end\":28898,\"start\":28887},{\"end\":28908,\"start\":28898},{\"end\":28920,\"start\":28908},{\"end\":28929,\"start\":28920},{\"end\":29328,\"start\":29319},{\"end\":29338,\"start\":29328},{\"end\":29346,\"start\":29338},{\"end\":29354,\"start\":29346},{\"end\":29363,\"start\":29354},{\"end\":29371,\"start\":29363},{\"end\":29380,\"start\":29371},{\"end\":29392,\"start\":29380},{\"end\":29402,\"start\":29392},{\"end\":29411,\"start\":29402}]", "bib_venue": "[{\"end\":27012,\"start\":27008},{\"end\":28173,\"start\":28157},{\"end\":29525,\"start\":29472},{\"end\":24945,\"start\":24923},{\"end\":25295,\"start\":25270},{\"end\":25567,\"start\":25494},{\"end\":25998,\"start\":25974},{\"end\":26334,\"start\":26314},{\"end\":26561,\"start\":26495},{\"end\":27006,\"start\":26996},{\"end\":27383,\"start\":27367},{\"end\":27807,\"start\":27801},{\"end\":28155,\"start\":28151},{\"end\":28495,\"start\":28435},{\"end\":28771,\"start\":28755},{\"end\":29043,\"start\":28945},{\"end\":29470,\"start\":29411}]"}}}, "year": 2023, "month": 12, "day": 17}