{"id": 2444655, "updated": "2023-09-28 22:55:23.903", "metadata": {"title": "Community structure in social and biological networks", "authors": "[{\"first\":\"M.\",\"last\":\"Girvan\",\"middle\":[]},{\"first\":\"M.\",\"last\":\"Newman\",\"middle\":[\"E. J.\"]}]", "venue": "Proceedings of the National Academy of Sciences of the United States of America", "journal": "Proceedings of the National Academy of Sciences of the United States of America", "publication_date": {"year": 2002, "month": 6, "day": 11}, "abstract": "A number of recent studies have focused on the statistical properties of networked systems such as social networks and the Worldwide Web. Researchers have concentrated particularly on a few properties that seem to be common to many networks: the small-world property, power-law degree distributions, and network transitivity. In this article, we highlight another property that is found in many networks, the property of community structure, in which network nodes are joined together in tightly knit groups, between which there are only looser connections. We propose a method for detecting such communities, built around the idea of using centrality indices to find community boundaries. We test our method on computer-generated and real-world graphs whose community structure is already known and find that the method detects this known structure with high sensitivity and reliability. We also apply the method to two networks whose community structure is not well known\u2014a collaboration network and a food web\u2014and find that it detects significant and informative community divisions in both cases.", "fields_of_study": "[\"Physics\"]", "external_ids": {"arxiv": "cond-mat/0112110", "mag": "1971421925", "acl": null, "pubmed": "12060727", "pubmedcentral": null, "dblp": null, "doi": "10.1073/pnas.122653799"}}, "content": {"source": {"pdf_hash": "64d9afb373856813574ed31c97378e37c417c92a", "pdf_src": "Highwire", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": null, "open_access_url": "http://www.pnas.org/content/99/12/7821.full.pdf", "status": "BRONZE"}}, "grobid": {"id": "a28895d587bac8eacaecb4f8b07cf9d4baa16148", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/64d9afb373856813574ed31c97378e37c417c92a.txt", "contents": "\nCommunity structure in social and biological networks\n\n\nM Girvan \nSanta Fe Institute\n1399 Hyde Park Road, Santa Fe87501NM\n\nDepartment of Physics\nCornell University\nClark Hall14853-2501IthacaNY\n\nM E J Newman \nSanta Fe Institute\n1399 Hyde Park Road, Santa Fe87501NM\n\nDepartment of Physics\nUniversity of Michigan\n48109-1120Ann ArborMI\n\nCommunity structure in social and biological networks\napproved April 6, 2002 (received for review December 6, 2001)Edited by Lawrence A. Shepp, Rutgers, State University of New Jersey-New Brunswick, Piscataway, NJ, and\nA number of recent studies have focused on the statistical properties of networked systems such as social networks and the Worldwide Web. Researchers have concentrated particularly on a few properties that seem to be common to many networks: the small-world property, power-law degree distributions, and network transitivity. In this article, we highlight another property that is found in many networks, the property of community structure, in which network nodes are joined together in tightly knit groups, between which there are only looser connections. We propose a method for detecting such communities, built around the idea of using centrality indices to find community boundaries. We test our method on computer-generated and real-world graphs whose community structure is already known and find that the method detects this known structure with high sensitivity and reliability. We also apply the method to two networks whose community structure is not well known-a collaboration network and a food web-and find that it detects significant and informative community divisions in both cases.\n\nM any systems take the form of networks, sets of nodes or vertices joined together in pairs by links or edges (1). Examples include social networks (2)(3)(4) such as acquaintance networks (5) and collaboration networks (6), technological networks such as the Internet (7), the Worldwide Web (8,9), and power grids (4,5), and biological networks such as neural networks (4), food webs (10), and metabolic networks (11,12). Recent research on networks among mathematicians and physicists has focused on a number of distinctive statistical properties that most networks seem to share. One such property is the ''small world effect,'' which is the name given to the finding that the average distance between vertices in a network is short (13,14), usually scaling logarithmically with the total number n of vertices. Another is the right-skewed degree distributions that many networks possess (8,9,(15)(16)(17). The degree of a vertex in a network is the number of other vertices to which it is connected, and one finds that there are typically many vertices in a network with low degree and a small number with high degree, the precise distribution often following a power-law or exponential form (1,5,15).\n\nA third property that many networks have in common is clustering, or network transitivity, which is the property that two vertices that are both neighbors of the same third vertex have a heightened probability of also being neighbors of one another. In the language of social networks, two of your friends will have a greater probability of knowing one another than will two people chosen at random from the population, on account of their common acquaintance with you. This effect is quantified by the clustering coefficient C (4,18), defined by C \u03ed 3\u03eb (number of triangles on the graph) (number of connected triples of vertices) .\n\n\n[1]\n\nThis number is precisely the probability that two of one's friends are friends themselves. It is 1 on a fully connected graph (everyone knows everyone else) and has typical values in the range of 0.1 to 0.5 in many real-world networks.\n\nIn this article, we consider another property, which, as we will show, appears to be common to many networks, the property of community structure. (This property is also sometimes called clustering, but we refrain from this usage to avoid confusion with the other meaning of the word clustering introduced in the preceding paragraph.) Consider for a moment the case of social networks-networks of friendships or other acquaintances between individuals. It is a matter of common experience that such networks seem to have communities in them: subsets of vertices within which vertex-vertex connections are dense, but between which connections are less dense. A figurative sketch of a network with such a community structure is shown in Fig. 1. (Certainly it is possible that the communities themselves also join together to form metacommunities, and that those metacommunities are themselves joined together, and so on in a hierarchical fashion. This idea is discussed further in the next section.) The ability to detect community structure in a network could clearly have practical applications. Communities in a social network might represent real social groupings, perhaps by interest or background; communities in a citation network (19) might represent related papers on a single topic; communities in a metabolic network might represent cycles and other functional groupings; communities on the web might represent pages on related topics. Being able to identify these communities could help us to understand and exploit these networks more effectively.\n\nIn this article we propose a method for detecting community structure and apply it to the study of a number of different social and biological networks. As we will show, when applied to networks for which the community structure is already known from other studies, our method appears to give excellent agreement with the expected results. When applied to networks for which we do not have other information about communities, it gives promising results that may help us understand better the interplay between network structure and function.\n\n\nDetecting Community Structure\n\nIn this section we review existing methods for detecting community structure and discuss the ways in which these approaches may fail, before describing our own method, which avoids some of the shortcomings of the traditional techniques.\n\nTraditional Methods. The traditional method for detecting community structure in networks such as that depicted in Fig. 1 is hierarchical clustering. One first calculates a weight W ij for every pair i,j of vertices in the network, which represents in some sense how closely connected the vertices are. (We give some examples of possible such weights below.) Then one takes the n vertices in the network, with no edges between them, and adds edges between pairs one by one in order of their weights, starting with the pair with the strongest weight and progressing to the weakest. As edges are added, the resulting graph shows a nested set of This paper was submitted directly (Track II) to the PNAS office. \u2021 To whom reprint requests should be addressed. E-mail: girvan@santafe.edu. increasingly large components (connected subsets of vertices), which are taken to be the communities. Because the components are properly nested, they all can be represented by using a tree of the type shown in Fig. 2, in which the lowest level at which two vertices are connected represents the strength of the edge that resulted in their first becoming members of the same community. A ''slice'' through this tree at any level gives the communities that existed just before an edge of the corresponding weight was added. Trees of this type are sometimes called dendrograms in the sociological literature.\n\nMany different weights have been proposed for use with hierarchical clustering algorithms. One possible definition of the weight is the number of node-independent paths between vertices. Two paths that connect the same pair of vertices are said to be node-independent if they share none of the same vertices other than their initial and final vertices. One can similarly also count edge-independent paths. It is known (20) that the number of node-independent (edge-independent) paths between two vertices i and j in a graph is equal to the minimum number of vertices (edges) that must be removed from the graph to disconnect i and j from one another. Thus these numbers are in a sense a measure of the robustness of the network to deletion of nodes (edges) (21). Numbers of independent paths can be computed quickly by using polynomial-time ''max-flow'' algorithms such as the augmenting path algorithm (22).\n\nAnother possible way to define weights between vertices is to count the total number of paths that run between them (all paths, not just those that are node-or edge-independent). However, because the number of paths between any two vertices is infinite (unless it is zero), one typically weights paths of length \u1409 by a factor \u2423 \u1409 with \u2423 small, so that the weighted count of the number of paths converges (23). Thus long paths contribute exponentially less weight than those that are short. If A is the adjacency matrix of the network, such that A ij is 1 if there is an edge between vertices i and j and 0 otherwise, then the weights in this definition are given by the elements of the matrix\nW \u03ed \u1409 \u03ed 0 \u03f1 \u0351\u2423A\u0352 \u1409 \u03ed \u0353I \u03ea \u2423A\u0354 \u03ea 1 . [2]\nFor the sum to converge, we must choose \u2423 smaller than the reciprocal of the largest eigenvalue of A.\n\nBoth of these definitions of the weights give reasonable results for community structure in some cases. In other cases they are less successful. In particular, both have a tendency to separate single peripheral vertices from the communities to which they should rightly belong. If a vertex is, for example, connected to the rest of a network by only a single edge then, to the extent that it belongs to any community, it should clearly be considered to belong to the community at the other end of that edge. Unfortunately, both the numbers of independent paths and the weighted path counts for such vertices are small and hence single nodes often remain isolated from the network when the communities are constructed. This and other pathologies, along with poor results from these methods in some networks where the community structure is well known from other studies, make the hierarchical clustering method, although useful, far from perfect.\n\n\nEdge ''Betweenness'' and Community Structure.\n\nTo sidestep the shortcomings of the hierarchical clustering method, we here propose an alternative approach to the detection of communities. Instead of trying to construct a measure that tells us which edges are most central to communities, we focus instead on those edges that are least central, the edges that are most ''between'' communities. Rather than constructing communities by adding the strongest edges to an initially empty vertex set, we construct them by progressively removing edges from the original graph.\n\nVertex betweenness has been studied in the past as a measure of the centrality and influence of nodes in networks. First proposed by Freeman (24), the betweenness centrality of a vertex i is defined as the number of shortest paths between pairs of other vertices that run through i. It is a measure of the influence of a node over the flow of information between other nodes, especially in cases where information flow over a network primarily follows the shortest available path.\n\nTo find which edges in a network are most between other pairs of vertices, we generalize Freeman's betweenness centrality to edges and define the edge betweenness of an edge as the number of shortest paths between pairs of vertices that run along it. If there is more than one shortest path between a pair of vertices, each path is given equal weight such that the total weight of all of the paths is unity. If a network contains communities or groups that are only loosely connected by a few intergroup edges, then all shortest paths between different communities must go along one of these few edges. Thus, the edges connecting communities will have high edge betweenness. By removing these edges, we separate groups from one another and so reveal the underlying community structure of the graph.\n\nThe algorithm we propose for identifying communities is simply stated as follows:   4. Repeat from step 2 until no edges remain. As a practical matter, we calculate the betweennesses by using the fast algorithm of Newman (25), which calculates betweenness for all m edges in a graph of n vertices in time O(mn). Because this calculation has to be repeated once for the removal of each edge, the entire algorithm runs in worst-case time O(m 2 n). However, after the removal of each edge, we only have to recalculate the betweennesses of those edges that were affected by the removal, which is at most only those in the same component as the removed edge. This means that running time may be better than worst-case for networks with strong community structure (those that rapidly break up into separate components after the first few iterations of the algorithm).\n\nTo try to reduce the running time of the algorithm further, one might be tempted to calculate the betweennesses of all edges only once and then remove them in order of decreasing betweenness. We find, however, that this strategy does not work well, because if two communities are connected by more than one edge, then there is no guarantee that all of those edges will have high betweenness-we only know that at least one of them will. By recalculating betweennesses after the removal of each edge we ensure that at least one of the remaining edges between two communities will always have a high value.\n\n\nTests of the Method\n\nIn this section we present a number of tests of our algorithm on computer-generated graphs and on real-world networks for which the community structure is already known. In each case we find that our algorithm reliably detects the known structure.\n\nComputer-Generated Graphs. To test the performance of our algorithm we have applied it to a large set of artificial, computergenerated graphs similar to those depicted in Fig. 1. Each graph was constructed with 128 vertices divided into four communities of 32 vertices each. Edges were placed between vertex pairs independently at random, with probability P in for vertices belonging to the same community and P out for vertices in different communities, with P out \u03fd P in . The probabilities were chosen so as to keep the average degree z of a vertex equal to 16. This produces graphs that have known community structure, but which are essentially random in other respects. Feeding these graphs into our algorithm, we measured the fraction of vertices that were classified by the algorithm into their correct communities, as a function of the average number of intercommunity edges per vertex. The results are shown in Fig. 3 (circles). As Fig.  3 shows, the algorithm performs nearly perfectly when z out \u03fd 6, classifying 90% or more of the vertices correctly. Only for z out \u0546 6 does the fraction correctly classified start to fall off substantially. In other words, the algorithm performs very well almost to the point at which each vertex has as many intercommunity as intracommunity connections.\n\nFor comparison we also show in Fig. 3 (squares) the fraction of vertices classified correctly by a standard hierarchical clustering calculation based on independent path counts computed by using max-flow. As Fig. 3 shows, the performance of this method is far inferior to that of our method.\n\nZachary's Karate Club Study. Although computer-generated networks provide a reproducible and well controlled test bed for our community-structure algorithm, it is clearly desirable to test the algorithm on data from real-world networks as well. To this end, we have selected two datasets representing real-world networks for which the community structure is already known from other sources. The first of these is drawn from the well known karate club study of Zachary (26). In this study, Zachary observed 34 members of a karate club over a period of 2 years. During the course of the study, a disagreement developed between the administrator of the club and the club's instructor, which ultimately resulted in the instructor's leaving and starting a new club, taking about a half of the original club's members with him.\n\nZachary constructed a network of friendships between members of the club, using a variety of measures to estimate the strength of ties between individuals. Here we use a simple unweighted version of his network and apply our algorithm to it in an attempt to identify the factions involved in the split of club. Fig. 4a shows the network, with the instructor and the administrator represented by nodes 1 and 34, respectively. Fig. 4b shows the hierarchical tree of communities produced by our method. The most fundamental split in the network is the first one at the top of the tree, which divides the network into two groups of roughly equal size. This split corresponds almost perfectly with the actual division of the club members after the break-up, as revealed by which club they attended afterward. Only one node, node 3, is classified incorrectly. In other words, the application of our algorithm to the empirically observed network of friendships is a good predictor of the subsequent social evolution of the group.\n\nFor comparison we also have performed a traditional hierarchical clustering based on edge-independent paths for the karate club network; the resulting tree is shown in Fig. 4c. As Fig. 4c shows, this method correctly identifies the core vertex sets {1,2,3} and {33,34} of the two communities, but otherwise there appears to be little correlation with the actual split of the club, indicating once again that our method is significantly more accurate and sensitive than the standard method.\n\nCollege Football. As a further test of our algorithm, we turn to the world of United States college football. (Football here means American football, not soccer.) The network we look at is a representation of the schedule of Division I games for the 2000 season: vertices in the graph represent teams (identified by their college names) and edges represent regular-season games between the two teams they connect. What makes this network interesting is that it incorporates a known community structure. The teams are divided into conferences containing around 8-12 teams each. Games are more frequent between members of the same conference than between members of different conferences, with teams playing an average of about seven intraconference games and four interconference games in the 2000 season. Interconference play is not uniformly distributed; teams that are geographically close to one another but belong to different conferences are more likely to play one another than teams separated by large geographic distances.\n\nApplying our algorithm to this network, we find that it identifies the conference structure with a high degree of success (Fig. 5). Almost all teams are correctly grouped with the other teams in their conference. There are a few independent teams that do not belong to any conference-these tend to be grouped with the conference with which they are most closely associated. The few cases in which the algorithm seems to fail actually correspond to nuances in the scheduling of games. For example, the Sunbelt Conference is broken into two pieces and grouped with members of the Western Athletic Conference. This happens because the Sunbelt teams played nearly as many games against Western Athletic teams as they did against teams in their own conference. They also played quite a large fraction of their interconference games against Mid-American teams. Naturally, our algorithm fails in cases like this where the network structure genuinely does not correspond to the conference structure. In all other respects, however, it performs remarkably well.  (26) as described in the text. Nodes associated with the club administrator's faction are drawn as circles, those associated with the instructor's faction are drawn as squares. (b) Hierarchical tree showing the complete community structure for the network calculated by using the algorithm presented in this article. The initial split of the network into two groups is in agreement with the actual factions observed by Zachary, with the exception that node 3 is misclassified. (c) Hierarchical tree calculated by using edge-independent path counts, which fails to extract the known community structure of the network. \n\n\nApplications\n\nIn the previous section we tested our algorithm on a number of networks for which the community structure was known beforehand. The results indicate that our algorithm is a sensitive and accurate method for extracting community structure from both real and artificial networks. In this section, we apply our method to two more networks for which the structure is not known and show that in these cases it can help us to understand the make-up of otherwise complex and tangled datasets. Our first example is a collaboration network of scientists; our second is a food web of marine organisms in the Chesapeake Bay.\n\nCollaboration Network. We have applied our community-finding method to a collaboration network of scientists at the Santa Fe Institute, an interdisciplinary research center in Santa Fe, New Mexico (and current academic home to both authors of this article). The 271 vertices in this network represent scientists in residence at the Santa Fe Institute during any part of calendar year 1999 or 2000 and their collaborators. An edge is drawn between a pair of scientists if they coauthored one or more articles during the same time period. The network includes all journal and book publications by the scientists involved, along with all papers that appeared in the institute's technical reports series. On average, each scientist coauthored articles with approximately five others.\n\nIn Fig. 6 we illustrate the results from the application of our algorithm to the largest component of the collaboration graph (which consists of 118 scientists). Vertices are drawn as different shapes according to the primary divisions detected. We find that the algorithm splits the network into a few strong communities, with the divisions running principally along disciplinary lines. The community indicated by diamonds is the least well defined and represents a group of scientists using agent-based models to study problems in economics and traffic flow. The algorithm further divides this group into smaller components that corre-spond roughly with the split between economics and traffic. The community represented by circles is comprised of a group of scientists working on mathematical models in ecology and forms a fairly cohesive structure, as evidenced by the fact that the algorithm does not break it into smaller components to any significant extent. The largest community, indicated by squares of various shades, represents a group working primarily in statistical physics and is subdivided into well defined smaller groups, which are denoted by the different shadings. In this case, each subcommunity seems to revolve around the research interests of one dominant member. The community represented by triangles is a group working primarily on the structure of RNA. It, too, can be divided further into smaller subcommunities, centered once again around the interests of leading members.\n\nOur algorithm thus seems to find two types of communities: scientists grouped together by similarity either of research topic or methodology. It is not surprising to see communities built around research topics; we expect scientists to collaborate primarily with others with whom their research focus is closely aligned. The formation of communities around methodologies is more interesting and may be the mark of truly interdisciplinary work. For example, the grouping of those working on economics with those working on traffic models may seem surprising, until one realizes that the technical approaches these scientists have taken are quite similar. As a result of these kinds of similarities, the network contains ties between researchers from traditionally disparate fields. We conjecture that this feature may be peculiar to interdisciplinary centers like the Santa Fe Institute.\n\nFood Web. We have also applied our algorithm to a food web of marine organisms living in the Chesapeake Bay, a large estuary on the east coast of the United States. This network was originally compiled by Baird and Ulanowicz (27) and contains 33 vertices representing the ecosystem's most prominent taxa. Most taxa are represented at the species or genus level, although some vertices represent larger groups of related species. Edges between taxa indicate trophic relationships-one taxon feeding on another. Although relationships of this kind are inherently directed, we here ignore direction and consider the network to be undirected.\n\nApplying our algorithm to this network, we find two well defined communities of roughly equal size, plus a small number of vertices that belong to neither community (see Fig. 7). As Fig.  7 shows, the split between the two large communities corresponds quite closely with the division between pelagic organisms (those that dwell principally near the surface or in the middle depths of the bay) and benthic organisms (those that dwell near the bottom). Interestingly, the algorithm includes within each group organisms from a variety of different trophic levels. This finding contrasts with other techniques that have been used to analyze food webs (28), which tend to cluster taxa according to trophic level rather than habitat. Our results seem to imply that pelagic and benthic organisms in the Chesapeake Bay can be separated into reasonably self-contained ecological subsystems. The separation is not perfect: a small number of benthic organisms find their way into the pelagic community, presumably indicating that these species play a substantial role in the food chains of their surface-dwelling colleagues. This finding suggests that the simple traditional division of taxa into pelagic or benthic may not be an ideal classification in this case.\n\nWe also have applied our method to a number of other food webs. Interestingly, although some of these show clear community structure similar to that of Fig. 7, some others do not. This could be because some ecosystems are genuinely not composed of separate communities, but it also could be because many food webs, unlike other networks, are dense, i.e., the number of edges scales as the square of the number of vertices rather than scaling linearly (29). Our algorithm was designed with sparse networks in mind, and it is possible that it may not perform as well on dense networks.\n\n\nConclusions\n\nIn this article we have investigated community structure in networks of various kinds, introducing a method for detecting such structure. Unlike previous methods that focus on finding the strongly connected cores of communities, our approach works by using information about edge betweenness to detect community peripheries. We have tested our method on computer-generated graphs and have shown that it detects the known community structure with a high degree of success. We have also tested it on two real-world networks with well documented structure and find the results to be in excellent agreement with expectations. In addition, we have given two examples of applications of the algorithm to networks whose structure was not previously well documented and find that in both cases it extracts clear communities that appear to correspond to plausible and informative divisions of the network nodes.\n\nA number of extensions or improvements of our method may be possible. First, we hope to generalize the method to handle both weighted and directed graphs. Second, we hope that it may be possible to improve the speed of the algorithm. At present, the algorithm runs in time O(n 3 ) on sparse graphs, where n is the number of vertices in the network. This makes it impractical for very large graphs. Detecting communities in, for instance, the large collaboration networks (6) or subsets of the web graph (9) that have been studied recently, would be entirely unfeasible. Perhaps, however, the basic principles of our approachfocusing on the boundaries of communities rather than their cores, and making use of edge betweenness-can be incorporated into a modified method that scales more favorably with network size.\n\nWe hope that the ideas and methods presented here will prove useful in the analysis of many other types of networks. Possible further applications range from the determination of functional clusters within neural networks to analysis of communities on the Worldwide Web, as well as others not yet thought of. We hope to see such applications in the future.\n\nFig. 1 .\n1A schematic representation of a network with community structure. In this network there are three communities of densely connected vertices (circles with solid lines), with a much lower density of connections (gray lines) between them.\n\nFig. 2 .\n2An example of a small hierarchical clustering tree. The circles at the bottom represent the vertices in the network, and the tree shows the order in which they join together to form communities for a given definition of the weight W ij of connections between vertex pairs.\n\nFig. 3 .\n3The fraction of vertices correctly classified in computer-generated graphs of the type described in the text, as the average number of intercommunity edges per vertex is varied. The circles are results for the method presented in this article; the squares are for a standard hierarchical clustering calculation based on numbers of edge-independent paths between vertices. Each point is an average over 100 realizations of the graphs. Lines between points are included solely as a guide to the eye.\n\nFig. 4 .\n4(a) The friendship network from Zachary's karate club study\n\nFig. 5 .\n5Hierarchical tree for the network reflecting the schedule of regularseason Division I college football games for year 2000. Nodes in the network represent teams, and edges represent games between teams. Our algorithm identifies nearly all of the conference structure in the network.\n\nFig. 6 .\n6The largest component of the Santa Fe Institute collaboration network, with the primary divisions detected by our algorithm indicated by different vertex shapes.\n\n1 .\n1Calculate the betweenness for all edges in the network. 2. Remove the edge with the highest betweenness. 3. Recalculate betweennesses for all edges affected by the removal.\n\u0349 www.pnas.org\u035ecgi\u035edoi\u035e10.1073\u035epnas.122653799 Girvan and Newman\n\u0349 www.pnas.org\u035ecgi\u035edoi\u035e10.1073\u035epnas.122653799 Girvan and Newman\n\u0349 www.pnas.org\u035ecgi\u035edoi\u035e10.1073\u035epnas.122653799 Girvan and Newman\nWe thank Jennifer Dunne, Neo Martinez, Matthew Salganik, Steve Strogatz, and Doug White for useful conversations, and Jennifer Dunne, Sarah Knutson, Matthew Salganik, and Doug White for help with compiling the data for the food web, collaboration, college football, and karate club networks, respectively. This work was funded in part by National Science Foundation Grants DMS-0109086, DGE-9870631, and PHY-9910217.\n. S H Strogatz, Nature. 410Strogatz, S. H. (2001) Nature (London) 410, 268-276.\n\nSocial Network Analysis. S Wasserman, K Faust, Cambridge Univ. PressCambridge, U.K.Wasserman, S. & Faust, K. (1994) Social Network Analysis (Cambridge Univ. Press, Cambridge, U.K.).\n\nSocial Network Analysis: A Handbook (Sage, London). J Scott, 2nd EdScott, J. (2000) Social Network Analysis: A Handbook (Sage, London), 2nd Ed.\n\n. D J Watts, S H Strogatz, Nature. 393Watts, D. J. & Strogatz, S. H. (1998) Nature (London) 393, 440-442.\n\nL A N Amaral, A Scala, M Barth\u00e9l\u00e9my, H E Stanley, Proc. Natl. Acad. Sci. USA 97. Natl. Acad. Sci. USA 97Amaral, L. A. N., Scala, A., Barth\u00e9l\u00e9my, M. & Stanley, H. E. (2000) Proc. Natl. Acad. Sci. USA 97, 11149-11152.\n\nM E J Newman, Proc. Natl. Acad. Sci. USA 98. Natl. Acad. Sci. USA 98Newman, M. E. J. (2001) Proc. Natl. Acad. Sci. USA 98, 404-409.\n\n. M Faloutsos, P Faloutsos, C Faloutsos, Comput. Commun. Rev. 29Faloutsos, M., Faloutsos, P. & Faloutsos, C. (1999) Comput. Commun. Rev. 29, 251-262.\n\n. R Albert, H Jeong, A.-L Barab\u00e1si, Nature. 401Albert, R., Jeong, H. & Barab\u00e1si, A.-L. (1999) Nature (London) 401, 130-131.\n\n. A Broder, R Kumar, F Maghoul, P Raghavan, S Rajagopalan, R Stata, A Tomkins, J Wiener, Comput. Networks. 33Broder, A., Kumar, R., Maghoul, F., Raghavan, P., Rajagopalan, S., Stata, R., Tomkins, A. & Wiener, J. (2000) Comput. Networks 33, 309-320.\n\n. R J Williams, N D Martinez, Nature. 404Williams, R. J. & Martinez, N. D. (2000) Nature (London) 404, 180-183.\n\n. H Jeong, B Tombor, R Albert, Z N Oltvai, A.-L Barab\u00e1si, Nature. 407Jeong, H., Tombor, B., Albert, R., Oltvai, Z. N. & Barab\u00e1si, A.-L. (2000) Nature (London) 407, 651-654.\n\n. D A Fell, A Wagner, Nat. Biotechnol. 18Fell, D. A. & Wagner, A. (2000) Nat. Biotechnol. 18, 1121-1122.\n\n. I Pool, S De, M Kochen, Social Networks. 1Pool, I. de S. & Kochen, M. (1978) Social Networks 1, 1-48.\n\n. S Milgram, Psychol. Today. 15. Barab\u00e1si, A.-L. & Albert, R.2ScienceMilgram, S. (1967) Psychol. Today 2, 60-67. 15. Barab\u00e1si, A.-L. & Albert, R. (1999) Science 286, 509-512.\n\n. P L Krapivsky, S Redner, F Leyvraz, Phys. Rev. Lett. 85Krapivsky, P. L., Redner, S. & Leyvraz, F. (2000) Phys. Rev. Lett. 85, 4629-4632.\n\n. S N Dorogovtsev, J F F Mendes, A N Samukhin, Phys. Rev. Lett. 85Dorogovtsev, S. N., Mendes, J. F. F. & Samukhin, A. N. (2000) Phys. Rev. Lett. 85, 4633-4636.\n\n. M E J Newman, S H Strogatz, D J Watts, Phys. Rev. E. 6426118Newman, M. E. J., Strogatz, S. H. & Watts, D. J. (2001) Phys. Rev. E 64, 026118.\n\n. S Redner, Eur. Phys. J. B. 4Redner, S. (1998) Eur. Phys. J. B 4, 131-134.\n\n. K Menger, Fundamenta Mathematicae. 10Menger, K. (1927) Fundamenta Mathematicae 10, 96-115.\n\n. D R White, F Harary, Sociol. Methodol. 31White, D. R. & Harary, F. (2001) Sociol. Methodol. 31, 305-359.\n\nR K Ahuja, T L Magnanti, J B Orlin, Network Flows: Theory, Algorithms, and Applications. Upper Saddle River, NJPrentice-HallAhuja, R. K., Magnanti, T. L. & Orlin, J. B. (1993) Network Flows: Theory, Algorithms, and Applications (Prentice-Hall, Upper Saddle River, NJ).\n\n. L Katz, Psychometrika. 18Katz, L. (1953) Psychometrika 18, 39-43.\n\n. L Freeman, Sociometry. 40Freeman, L. (1977) Sociometry 40, 35-41.\n\n. M E J Newman, Phys. Rev. E. 6416131Newman, M. E. J. (2001) Phys. Rev. E 64, 016131.\n\n. W W Zachary, J. Anthropol. Res. 33Zachary, W. W. (1977) J. Anthropol. Res. 33, 452-473.\n\n. D Baird, R E Ulanowicz, Ecol. Monogr. 59Baird, D. & Ulanowicz, R. E. (1989) Ecol. Monogr. 59, 329-364.\n\n. P Yodzis, K O Winemiller, 87Yodzis, P. & Winemiller, K. O. (1999) Oikos 87, 327-340.\n\n. N D Martinez, Am. Nat. 139Martinez, N. D. (1992) Am. Nat. 139, 1208-1218.\n\nHierarchical tree for the Chesapeake Bay food web described in the text. Fig. 7. Hierarchical tree for the Chesapeake Bay food web described in the text.\n", "annotations": {"author": "[{\"end\":194,\"start\":57},{\"end\":333,\"start\":195}]", "publisher": null, "author_last_name": "[{\"end\":65,\"start\":59},{\"end\":207,\"start\":201}]", "author_first_name": "[{\"end\":58,\"start\":57},{\"end\":196,\"start\":195},{\"end\":200,\"start\":197}]", "author_affiliation": "[{\"end\":122,\"start\":67},{\"end\":193,\"start\":124},{\"end\":264,\"start\":209},{\"end\":332,\"start\":266}]", "title": "[{\"end\":54,\"start\":1},{\"end\":387,\"start\":334}]", "venue": null, "abstract": "[{\"end\":1653,\"start\":553}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1768,\"start\":1765},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1806,\"start\":1803},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1809,\"start\":1806},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1812,\"start\":1809},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1846,\"start\":1843},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1877,\"start\":1874},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":1949,\"start\":1946},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1951,\"start\":1949},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1972,\"start\":1969},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1974,\"start\":1972},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2027,\"start\":2024},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2043,\"start\":2039},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2072,\"start\":2068},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2075,\"start\":2072},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2394,\"start\":2390},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2397,\"start\":2394},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2547,\"start\":2544},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2549,\"start\":2547},{\"end\":2553,\"start\":2549},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":2557,\"start\":2553},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2561,\"start\":2557},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2852,\"start\":2849},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2854,\"start\":2852},{\"end\":2857,\"start\":2854},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3391,\"start\":3388},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3394,\"start\":3391},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4977,\"start\":4973},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":7925,\"start\":7921},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8264,\"start\":8260},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":8410,\"start\":8406},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":8821,\"start\":8817},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":10912,\"start\":10908},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12274,\"start\":12270},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":15857,\"start\":15853},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":19813,\"start\":19809},{\"end\":24462,\"start\":24438},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":25524,\"start\":25520},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":26583,\"start\":26579},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":28105,\"start\":28102}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":29050,\"start\":28804},{\"attributes\":{\"id\":\"fig_1\"},\"end\":29334,\"start\":29051},{\"attributes\":{\"id\":\"fig_2\"},\"end\":29843,\"start\":29335},{\"attributes\":{\"id\":\"fig_3\"},\"end\":29914,\"start\":29844},{\"attributes\":{\"id\":\"fig_4\"},\"end\":30208,\"start\":29915},{\"attributes\":{\"id\":\"fig_5\"},\"end\":30381,\"start\":30209},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":30560,\"start\":30382}]", "paragraph": "[{\"end\":2858,\"start\":1655},{\"end\":3492,\"start\":2860},{\"end\":3735,\"start\":3500},{\"end\":5295,\"start\":3737},{\"end\":5839,\"start\":5297},{\"end\":6109,\"start\":5873},{\"end\":7501,\"start\":6111},{\"end\":8411,\"start\":7503},{\"end\":9105,\"start\":8413},{\"end\":9247,\"start\":9146},{\"end\":10194,\"start\":9249},{\"end\":10765,\"start\":10244},{\"end\":11247,\"start\":10767},{\"end\":12047,\"start\":11249},{\"end\":12910,\"start\":12049},{\"end\":13515,\"start\":12912},{\"end\":13786,\"start\":13539},{\"end\":15089,\"start\":13788},{\"end\":15382,\"start\":15091},{\"end\":16206,\"start\":15384},{\"end\":17230,\"start\":16208},{\"end\":17721,\"start\":17232},{\"end\":18753,\"start\":17723},{\"end\":20427,\"start\":18755},{\"end\":21057,\"start\":20444},{\"end\":21838,\"start\":21059},{\"end\":23343,\"start\":21840},{\"end\":24231,\"start\":23345},{\"end\":24870,\"start\":24233},{\"end\":26126,\"start\":24872},{\"end\":26711,\"start\":26128},{\"end\":27629,\"start\":26727},{\"end\":28445,\"start\":27631},{\"end\":28803,\"start\":28447}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":9145,\"start\":9106}]", "table_ref": null, "section_header": "[{\"end\":3498,\"start\":3495},{\"end\":5871,\"start\":5842},{\"end\":10242,\"start\":10197},{\"end\":13537,\"start\":13518},{\"end\":20442,\"start\":20430},{\"end\":26725,\"start\":26714},{\"end\":28813,\"start\":28805},{\"end\":29060,\"start\":29052},{\"end\":29344,\"start\":29336},{\"end\":29853,\"start\":29845},{\"end\":29924,\"start\":29916},{\"end\":30218,\"start\":30210},{\"end\":30386,\"start\":30383}]", "table": null, "figure_caption": "[{\"end\":29050,\"start\":28815},{\"end\":29334,\"start\":29062},{\"end\":29843,\"start\":29346},{\"end\":29914,\"start\":29855},{\"end\":30208,\"start\":29926},{\"end\":30381,\"start\":30220},{\"end\":30560,\"start\":30388}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":4479,\"start\":4472},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":6232,\"start\":6226},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":7112,\"start\":7106},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":13965,\"start\":13959},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14724,\"start\":14708},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":14736,\"start\":14729},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":15128,\"start\":15122},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":15305,\"start\":15299},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":16526,\"start\":16519},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":16640,\"start\":16633},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17407,\"start\":17400},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17419,\"start\":17412},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":18885,\"start\":18877},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":21849,\"start\":21843},{\"end\":25048,\"start\":25042},{\"end\":25061,\"start\":25054},{\"end\":26286,\"start\":26280}]", "bib_author_first_name": "[{\"end\":31172,\"start\":31171},{\"end\":31174,\"start\":31173},{\"end\":31276,\"start\":31275},{\"end\":31289,\"start\":31288},{\"end\":31486,\"start\":31485},{\"end\":31581,\"start\":31580},{\"end\":31583,\"start\":31582},{\"end\":31592,\"start\":31591},{\"end\":31594,\"start\":31593},{\"end\":31686,\"start\":31685},{\"end\":31690,\"start\":31687},{\"end\":31700,\"start\":31699},{\"end\":31709,\"start\":31708},{\"end\":31723,\"start\":31722},{\"end\":31725,\"start\":31724},{\"end\":31903,\"start\":31902},{\"end\":31907,\"start\":31904},{\"end\":32038,\"start\":32037},{\"end\":32051,\"start\":32050},{\"end\":32064,\"start\":32063},{\"end\":32189,\"start\":32188},{\"end\":32199,\"start\":32198},{\"end\":32211,\"start\":32207},{\"end\":32314,\"start\":32313},{\"end\":32324,\"start\":32323},{\"end\":32333,\"start\":32332},{\"end\":32344,\"start\":32343},{\"end\":32356,\"start\":32355},{\"end\":32371,\"start\":32370},{\"end\":32380,\"start\":32379},{\"end\":32391,\"start\":32390},{\"end\":32564,\"start\":32563},{\"end\":32566,\"start\":32565},{\"end\":32578,\"start\":32577},{\"end\":32580,\"start\":32579},{\"end\":32677,\"start\":32676},{\"end\":32686,\"start\":32685},{\"end\":32696,\"start\":32695},{\"end\":32706,\"start\":32705},{\"end\":32708,\"start\":32707},{\"end\":32721,\"start\":32717},{\"end\":32851,\"start\":32850},{\"end\":32853,\"start\":32852},{\"end\":32861,\"start\":32860},{\"end\":32957,\"start\":32956},{\"end\":32965,\"start\":32964},{\"end\":32971,\"start\":32970},{\"end\":33062,\"start\":33061},{\"end\":33238,\"start\":33237},{\"end\":33240,\"start\":33239},{\"end\":33253,\"start\":33252},{\"end\":33263,\"start\":33262},{\"end\":33378,\"start\":33377},{\"end\":33380,\"start\":33379},{\"end\":33395,\"start\":33394},{\"end\":33399,\"start\":33396},{\"end\":33409,\"start\":33408},{\"end\":33411,\"start\":33410},{\"end\":33539,\"start\":33538},{\"end\":33543,\"start\":33540},{\"end\":33553,\"start\":33552},{\"end\":33555,\"start\":33554},{\"end\":33567,\"start\":33566},{\"end\":33569,\"start\":33568},{\"end\":33683,\"start\":33682},{\"end\":33760,\"start\":33759},{\"end\":33854,\"start\":33853},{\"end\":33856,\"start\":33855},{\"end\":33865,\"start\":33864},{\"end\":33960,\"start\":33959},{\"end\":33962,\"start\":33961},{\"end\":33971,\"start\":33970},{\"end\":33973,\"start\":33972},{\"end\":33985,\"start\":33984},{\"end\":33987,\"start\":33986},{\"end\":34232,\"start\":34231},{\"end\":34301,\"start\":34300},{\"end\":34370,\"start\":34369},{\"end\":34374,\"start\":34371},{\"end\":34457,\"start\":34456},{\"end\":34459,\"start\":34458},{\"end\":34548,\"start\":34547},{\"end\":34557,\"start\":34556},{\"end\":34559,\"start\":34558},{\"end\":34654,\"start\":34653},{\"end\":34664,\"start\":34663},{\"end\":34666,\"start\":34665},{\"end\":34742,\"start\":34741},{\"end\":34744,\"start\":34743}]", "bib_author_last_name": "[{\"end\":31183,\"start\":31175},{\"end\":31286,\"start\":31277},{\"end\":31295,\"start\":31290},{\"end\":31492,\"start\":31487},{\"end\":31589,\"start\":31584},{\"end\":31603,\"start\":31595},{\"end\":31697,\"start\":31691},{\"end\":31706,\"start\":31701},{\"end\":31720,\"start\":31710},{\"end\":31733,\"start\":31726},{\"end\":31914,\"start\":31908},{\"end\":32048,\"start\":32039},{\"end\":32061,\"start\":32052},{\"end\":32074,\"start\":32065},{\"end\":32196,\"start\":32190},{\"end\":32205,\"start\":32200},{\"end\":32220,\"start\":32212},{\"end\":32321,\"start\":32315},{\"end\":32330,\"start\":32325},{\"end\":32341,\"start\":32334},{\"end\":32353,\"start\":32345},{\"end\":32368,\"start\":32357},{\"end\":32377,\"start\":32372},{\"end\":32388,\"start\":32381},{\"end\":32398,\"start\":32392},{\"end\":32575,\"start\":32567},{\"end\":32589,\"start\":32581},{\"end\":32683,\"start\":32678},{\"end\":32693,\"start\":32687},{\"end\":32703,\"start\":32697},{\"end\":32715,\"start\":32709},{\"end\":32730,\"start\":32722},{\"end\":32858,\"start\":32854},{\"end\":32868,\"start\":32862},{\"end\":32962,\"start\":32958},{\"end\":32968,\"start\":32966},{\"end\":32978,\"start\":32972},{\"end\":33070,\"start\":33063},{\"end\":33250,\"start\":33241},{\"end\":33260,\"start\":33254},{\"end\":33271,\"start\":33264},{\"end\":33392,\"start\":33381},{\"end\":33406,\"start\":33400},{\"end\":33420,\"start\":33412},{\"end\":33550,\"start\":33544},{\"end\":33564,\"start\":33556},{\"end\":33575,\"start\":33570},{\"end\":33690,\"start\":33684},{\"end\":33767,\"start\":33761},{\"end\":33862,\"start\":33857},{\"end\":33872,\"start\":33866},{\"end\":33968,\"start\":33963},{\"end\":33982,\"start\":33974},{\"end\":33993,\"start\":33988},{\"end\":34237,\"start\":34233},{\"end\":34309,\"start\":34302},{\"end\":34381,\"start\":34375},{\"end\":34467,\"start\":34460},{\"end\":34554,\"start\":34549},{\"end\":34569,\"start\":34560},{\"end\":34661,\"start\":34655},{\"end\":34677,\"start\":34667},{\"end\":34753,\"start\":34745}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":31248,\"start\":31169},{\"attributes\":{\"id\":\"b1\"},\"end\":31431,\"start\":31250},{\"attributes\":{\"id\":\"b2\"},\"end\":31576,\"start\":31433},{\"attributes\":{\"id\":\"b3\"},\"end\":31683,\"start\":31578},{\"attributes\":{\"id\":\"b4\"},\"end\":31900,\"start\":31685},{\"attributes\":{\"id\":\"b5\"},\"end\":32033,\"start\":31902},{\"attributes\":{\"id\":\"b6\"},\"end\":32184,\"start\":32035},{\"attributes\":{\"id\":\"b7\"},\"end\":32309,\"start\":32186},{\"attributes\":{\"id\":\"b8\"},\"end\":32559,\"start\":32311},{\"attributes\":{\"id\":\"b9\"},\"end\":32672,\"start\":32561},{\"attributes\":{\"id\":\"b10\"},\"end\":32846,\"start\":32674},{\"attributes\":{\"id\":\"b11\"},\"end\":32952,\"start\":32848},{\"attributes\":{\"id\":\"b12\"},\"end\":33057,\"start\":32954},{\"attributes\":{\"id\":\"b13\"},\"end\":33233,\"start\":33059},{\"attributes\":{\"id\":\"b14\"},\"end\":33373,\"start\":33235},{\"attributes\":{\"id\":\"b15\"},\"end\":33534,\"start\":33375},{\"attributes\":{\"id\":\"b16\"},\"end\":33678,\"start\":33536},{\"attributes\":{\"id\":\"b17\"},\"end\":33755,\"start\":33680},{\"attributes\":{\"id\":\"b18\"},\"end\":33849,\"start\":33757},{\"attributes\":{\"id\":\"b19\"},\"end\":33957,\"start\":33851},{\"attributes\":{\"id\":\"b20\"},\"end\":34227,\"start\":33959},{\"attributes\":{\"id\":\"b21\"},\"end\":34296,\"start\":34229},{\"attributes\":{\"id\":\"b22\"},\"end\":34365,\"start\":34298},{\"attributes\":{\"id\":\"b23\"},\"end\":34452,\"start\":34367},{\"attributes\":{\"id\":\"b24\"},\"end\":34543,\"start\":34454},{\"attributes\":{\"id\":\"b25\"},\"end\":34649,\"start\":34545},{\"attributes\":{\"id\":\"b26\"},\"end\":34737,\"start\":34651},{\"attributes\":{\"id\":\"b27\"},\"end\":34814,\"start\":34739},{\"attributes\":{\"id\":\"b28\"},\"end\":34969,\"start\":34816}]", "bib_title": null, "bib_author": "[{\"end\":31185,\"start\":31171},{\"end\":31288,\"start\":31275},{\"end\":31297,\"start\":31288},{\"end\":31494,\"start\":31485},{\"end\":31591,\"start\":31580},{\"end\":31605,\"start\":31591},{\"end\":31699,\"start\":31685},{\"end\":31708,\"start\":31699},{\"end\":31722,\"start\":31708},{\"end\":31735,\"start\":31722},{\"end\":31916,\"start\":31902},{\"end\":32050,\"start\":32037},{\"end\":32063,\"start\":32050},{\"end\":32076,\"start\":32063},{\"end\":32198,\"start\":32188},{\"end\":32207,\"start\":32198},{\"end\":32222,\"start\":32207},{\"end\":32323,\"start\":32313},{\"end\":32332,\"start\":32323},{\"end\":32343,\"start\":32332},{\"end\":32355,\"start\":32343},{\"end\":32370,\"start\":32355},{\"end\":32379,\"start\":32370},{\"end\":32390,\"start\":32379},{\"end\":32400,\"start\":32390},{\"end\":32577,\"start\":32563},{\"end\":32591,\"start\":32577},{\"end\":32685,\"start\":32676},{\"end\":32695,\"start\":32685},{\"end\":32705,\"start\":32695},{\"end\":32717,\"start\":32705},{\"end\":32732,\"start\":32717},{\"end\":32860,\"start\":32850},{\"end\":32870,\"start\":32860},{\"end\":32964,\"start\":32956},{\"end\":32970,\"start\":32964},{\"end\":32980,\"start\":32970},{\"end\":33072,\"start\":33061},{\"end\":33252,\"start\":33237},{\"end\":33262,\"start\":33252},{\"end\":33273,\"start\":33262},{\"end\":33394,\"start\":33377},{\"end\":33408,\"start\":33394},{\"end\":33422,\"start\":33408},{\"end\":33552,\"start\":33538},{\"end\":33566,\"start\":33552},{\"end\":33577,\"start\":33566},{\"end\":33692,\"start\":33682},{\"end\":33769,\"start\":33759},{\"end\":33864,\"start\":33853},{\"end\":33874,\"start\":33864},{\"end\":33970,\"start\":33959},{\"end\":33984,\"start\":33970},{\"end\":33995,\"start\":33984},{\"end\":34239,\"start\":34231},{\"end\":34311,\"start\":34300},{\"end\":34383,\"start\":34369},{\"end\":34469,\"start\":34456},{\"end\":34556,\"start\":34547},{\"end\":34571,\"start\":34556},{\"end\":34663,\"start\":34653},{\"end\":34679,\"start\":34663},{\"end\":34755,\"start\":34741}]", "bib_venue": "[{\"end\":31789,\"start\":31766},{\"end\":31970,\"start\":31947},{\"end\":34070,\"start\":34048},{\"end\":31191,\"start\":31185},{\"end\":31273,\"start\":31250},{\"end\":31483,\"start\":31433},{\"end\":31611,\"start\":31605},{\"end\":31764,\"start\":31735},{\"end\":31945,\"start\":31916},{\"end\":32095,\"start\":32076},{\"end\":32228,\"start\":32222},{\"end\":32416,\"start\":32400},{\"end\":32597,\"start\":32591},{\"end\":32738,\"start\":32732},{\"end\":32885,\"start\":32870},{\"end\":32995,\"start\":32980},{\"end\":33086,\"start\":33072},{\"end\":33288,\"start\":33273},{\"end\":33437,\"start\":33422},{\"end\":33589,\"start\":33577},{\"end\":33707,\"start\":33692},{\"end\":33792,\"start\":33769},{\"end\":33890,\"start\":33874},{\"end\":34046,\"start\":33995},{\"end\":34252,\"start\":34239},{\"end\":34321,\"start\":34311},{\"end\":34395,\"start\":34383},{\"end\":34486,\"start\":34469},{\"end\":34583,\"start\":34571},{\"end\":34762,\"start\":34755},{\"end\":34887,\"start\":34816}]"}}}, "year": 2023, "month": 12, "day": 17}