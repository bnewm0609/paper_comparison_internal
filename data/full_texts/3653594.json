{"id": 3653594, "updated": "2023-11-08 14:09:42.085", "metadata": {"title": "Using Trusted Data to Train Deep Networks on Labels Corrupted by Severe Noise", "authors": "[{\"first\":\"Dan\",\"last\":\"Hendrycks\",\"middle\":[]},{\"first\":\"Mantas\",\"last\":\"Mazeika\",\"middle\":[]},{\"first\":\"Duncan\",\"last\":\"Wilson\",\"middle\":[]},{\"first\":\"Kevin\",\"last\":\"Gimpel\",\"middle\":[]}]", "venue": "NeurIPS", "journal": "10477-10486", "publication_date": {"year": 2018, "month": 2, "day": 14}, "abstract": "The growing importance of massive datasets with the advent of deep learning makes robustness to label noise a critical property for classifiers to have. Sources of label noise include automatic labeling for large datasets, non-expert labeling, and label corruption by data poisoning adversaries. In the latter case, corruptions may be arbitrarily bad, even so bad that a classifier predicts the wrong labels with high confidence. To protect against such sources of noise, we leverage the fact that a small set of clean labels is often easy to procure. We demonstrate that robustness to label noise up to severe strengths can be achieved by using a set of trusted data with clean labels, and propose a loss correction that utilizes trusted examples in a data-efficient manner to mitigate the effects of label noise on deep neural network classifiers. Across vision and natural language processing tasks, we experiment with various label noises at several strengths, and show that our method significantly outperforms existing methods.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1802.05300", "mag": "2964309657", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/nips/HendrycksMWG18", "doi": null}}, "content": {"source": {"pdf_hash": "42988fd04c4ac8ca3daec3bc96ae2f16dd1aa37c", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1802.05300v3.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "fe7ea03911af8645e6d46ce94391f2c72c37cc8c", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/42988fd04c4ac8ca3daec3bc96ae2f16dd1aa37c.txt", "contents": "\nUsing Trusted Data to Train Deep Networks on Labels Corrupted by Severe Noise\n\n\nDan Hendrycks hendrycks@berkeley.edu \nMantas Mazeika mantas@ttic.edu \nDuncan Wilson duncanw@nevada.unr.edu \nKevin Gimpel kgimpel@ttic.edu \n\nUniversity of California\nBerkeley\n\n\nFoundational Research Institute\nUniversity of Chicago\nToyota Technological Institute at Chicago\n\n\nUsing Trusted Data to Train Deep Networks on Labels Corrupted by Severe Noise\n\nThe growing importance of massive datasets with the advent of deep learning makes robustness to label noise a critical property for classifiers to have. Sources of label noise include automatic labeling, non-expert labeling, and label corruption by data poisoning adversaries. In the latter case, corruptions may be arbitrarily bad, even so bad that a classifier predicts the wrong labels with high confidence. To protect against such sources of noise, we leverage the fact that a small set of clean labels is often easy to procure. We demonstrate that robustness to label noise up to severe strengths can be achieved by using a set of trusted data with clean labels, and propose a loss correction that utilizes trusted examples in a data-efficient manner to mitigate the effects of label noise on deep neural network classifiers. Across vision and natural language processing tasks, we experiment with various label noises at several strengths, and show that our method significantly outperforms existing methods.\n\nIntroduction\n\nRobustness to label noise is set to become an increasingly important property of supervised learning models. With the advent of deep learning, the need for more labeled data makes it inevitable that not all examples will have high-quality labels. This is especially true of data sources that admit automatic label extraction, such as web crawling for images, and tasks for which high-quality labels are expensive to produce, such as semantic segmentation or parsing. Additionally, label corruption may arise in data poisoning [9,23]. Both natural and malicious label corruptions tend to sharply degrade the performance of classification systems [29].\n\nWe consider the scenario where we have access to a large set of examples with potentially corrupted labels and determine how much can be gained from access to a small set of examples where labels are considered gold standard. This scenario is realistic, as it is usually the case that a number of trusted examples have been gathered in the validation and test sets, and that more could be gathered if necessary.\n\nTo leverage the additional information from trusted labels, we propose a new loss correction and empirically verify it on a number of vision and natural language datasets with label corruption. Specifically, we demonstrate recovery from extremely high levels of label noise, including the dire case when the untrusted data has a majority of its labels corrupted. Such severe corruption can occur in adversarial situations like data poisoning, or when the number of classes is large. In comparison to loss corrections that do not employ trusted data [17], our method is significantly more accurate in problem settings with moderate to severe label noise. Relative to a recent method which also uses trusted data [10], our method is far more data-efficient and generally more accurate. These results demonstrate that systems can weather label corruption with access only to a small number of gold standard labels. Experiment code is available at https://github.com/mmazeika/glc.\n\n\nRelated Work\n\nThe performance of machine learning systems reliant on labeled data has been shown to degrade noticeably in the presence of label noise [16,18]. In the case of adversarial label noise, this degradation can be even worse [19]. Accordingly, modeling, correcting, and learning with noisy labels has been well studied [15,1,3].\n\nThe methods of [14,8,17,24] allow for label noise robustness by modifying the model's architecture or by implementing a loss correction. Unlike Mnih and Hinton [14] who focus on binary classification of aerial images and Larsen et al. [8] who assume symmetric label noise, [17,24] consider label noise in the multi-class problem setting with asymmetric noise.\n\nSukhbaatar et al. [24] introduce a stochastic matrix measuring label corruption, note its inability to be calculated without access to the true labels, and propose a method of forward loss correction. Forward loss correction adds a linear layer to the end of the model and the loss is adjusted accordingly to incorporate learning about the label noise. Patrini et al. [17] also make use of the forward loss correction mechanism, and propose an estimate of the label corruption estimation matrix which relies on strong assumptions, and does not make use of clean labels.\n\nContra [24,17], we make the assumption that during training the model has access to a small set of clean labels. See Charikar, Steinhardt, and Valiant [2] for a general analysis of this assumption. This assumption has been leveraged by others for the purpose of label noise robustness, most notably [25,10,26,20]. Veit et al. [25] use human-verified labels to train a label cleaning network by estimating the residuals between the noisy and clean labels in a multi-label classification setting. In the multi-class setting that we focus on in this work, Li et al. [10] propose distilling the predictions of a model trained on clean labels into a second network trained on these predictions and the noisy labels. Our work differs from these two in that we do not train neural networks on the clean labels alone.  ) and three matrix estimates for a corrupted CIFAR-10 dataset. Entry C ij is the probability that a label of class i is corrupted to class j, or symbolically C ij = p( y = j|y = i).\n\n\nGold Loss Correction\n\nWe are given an untrusted dataset D of u examples (x, y), and we assume that these examples are potentially corrupted examples from the true data distribution p(x, y) with K classes. Corruption is specified by a label noise distribution p( y | y, x). We are also given a trusted dataset D of t examples drawn from p(x, y), where t/u 1. We refer to t/u as the trusted fraction. Concretely, a web scraper labeling images from metadata may produce an untrusted set, while expert-annotated examples would form a trusted dataset and be a gold standard.\n\nWe explore two avenues of utilizing D to improve this approach. The first directly uses the trusted data while training the final classifier. As this could be applied to existing methods, we run ablations to demonstrate its effect. The second avenue uses the additional information conferred by the clean labels to better model the label noise for use in a corrected classifier.\n\nOur method makes use of D to estimate the K \u00d7 K matrix of corruption probabilities C ij = p( y = j | y = i). Once this estimate is obtained, we use it to train a modified classifier from which we recover an estimate of the desired conditional distribution p(y | x). We call this method the Gold Loss Correction (GLC), so named because we make use of trusted or gold standard labels.\n\nEstimating The Corruption Matrix. First, we train a classifier p( y | x) on D. Let y and y be in the set of possible labels. To estimate the probability p( y | y), we use the identity p( y | y, x)p(x | y) = p( y | y)p(x | y, y). Integrating over all x gives us p( y | y, x)p(x | y) dx = p( y | y) p(x | y, y) dx = p( y | y).\n\nWe can approximate the integral on the left with the expectation of p( y | y, x) over the empirical distribution of x given y. Assuming conditional independence of y and y given x, we have p( y | y, x) = p( y | x), which is directly approximated by p( y | x), the classifier trained on D. More explicitly, let A i be the subset of x in D with label i. Denote our estimate of C by C. We have\nC ij = 1 |A i | x\u2208Ai p( y = j | x) = 1 |A i | x\u2208Ai p( y = j | y = i, x) \u2248 p( y = j | y = i).\nThis is how we estimate our corruption matrix for the GLC. The approximation relies on p( y | x) being a good estimate of p( y | x), on the number of trusted examples of each class, and on the extent to which the conditional independence assumption is satisfied. The conditional independence assumption is reasonable, as it is usually the case that noisy labeling processes do not have access to the true label. Moreover, when the data are separable (i.e. y is deterministic given x), the assumption follows. A proof of this is provided in the Supplementary Material. We investigate these factors in experiments.\n\nAlgorithm GOLD LOSS CORRECTION (GLC) 1: Input: Trusted data D, untrusted data D, loss 2: Train network f (x) = p( y|x; \u03b8) \u2208 R K on D 3: Fill C \u2208 R K\u00d7K with zeros 4: for k = 1, . . . , K do 5: num_examples = 0 6: for (x i , y i ) \u2208 D such that y i = k do 7: num_examples += 1 8: Training a Corrected Classifier. Now with C, we follow the method of [24,17] to train a corrected classifier, which we now briefly describe. Given the K \u00d7 1 softmax output s of an untrained classifier, we define the new output as s := Cs. We then train p( s | x) on the noisy labels with cross-entropy loss. We can further improve on this method by using trusted data to train the corrected classifier. Thus, we apply no correction on examples from the trusted set encountered during training. This has the effect of allowing the GLC to handle a degree of instance-dependency in the label noise [13], though our experiments suggest that most of the GLC's performance gains derive from our C estimate. A concrete algorithm of our method is provided here.\nC\u2022 k += f (x i ) {add f (x i ) to kth\n\nExperiments\n\nGenerating Corrupted Labels. Suppose our dataset has t + u examples. We sample a set of t trusted datapoints D, and the remaining u untrusted examples form D, which we probabilistically corrupt according to a true corruption matrix C. Note that we do not have knowledge of which of our u untrusted examples are corrupted. We only know that they are potentially corrupted. To generate the untrusted labels from the true labels in D, we first obtain a corruption matrix C. Then, for an example with true label i, we sample the corrupted label from the categorical distribution parameterized by the ith row of C. Note that this does not satisfy the conditional independence assumption required for our estimate of C. However, we find that the GLC still works well in practice, perhaps because this assumption is also satisfied when the data are separable, in the sense that each x has a single true y, which is approximately true in many of our experiments.\n\nComparing Loss Correction Methods. The GLC differs from previous loss corrections for label noise in that it reasonably assumes access to a high-quality annotation source. Therefore, to compare to other loss correction methods, we ask how each method performs when starting from the same dataset with the same label noise. In other words, the only additional information our method uses is knowledge of which examples are trusted, and which are potentially corrupted.  \n\n\nDatasets and Architectures\n\nMNIST. The MNIST dataset contains 28 \u00d7 28 grayscale images of the digits 0-9. The training set has 60,000 images and the test set has 10,000 images. For preprocessing, we rescale the pixels to the interval [0, 1].We train a 2-layer fully connected network with 256 hidden dimensions. We train with Adam for 10 epochs using batches of size 32 and a learning rate of 0.001. For regularization, we use 2 weight decay on all layers with \u03bb = 1 \u00d7 10 \u22126 . CIFAR. The two CIFAR datasets contain 32 \u00d7 32 \u00d7 3 color images. CIFAR-10 has ten classes, and CIFAR-100 has 100 classes. CIFAR-100 has 20 \"superclasses\" which partition its 100 classes into 20 semantically similar sets. We use these superclasses for hierarchical noise. Both datasets have 50,000 training images and 10,000 testing images. For both datasets, we train a Wide Residual Network [28] of depth 40 and a widening factor of 2. We train for 75 epochs using SGD with Nesterov momentum and a cosine learning rate schedule [11].\n\nIMDB. The IMDB Large Movie Reviews dataset [12] contains 50,000 highly polarized movie reviews from the Internet Movie Database, split evenly into train and test sets. We pad and clip reviews to a length of 200 tokens, and learn 50-dimensional word vectors from scratch for a vocab size of 5,000.We train an LSTM with 64 hidden dimensions on this data. We train using the Adam optimizer [7] for 3 epochs with batch size 64 and the suggested learning rate of 0.001. For regularization, we use dropout [22] on the linear output layer with a dropping probability of 0.2.\n\nTwitter. The Twitter Part of Speech dataset [4] contains 1,827 tweets annotated with 25 POS tags. This is split into a training set of 1,000 tweets, a development set of 327 tweets, and a test set of 500 tweets. We use the development set to augment the training set. We use pretrained 50-dimensional word vectors, and for each token, we concatenate word vectors in a fixed window centered on the token. These form our training and test set. We use a window size of 3, and train a 2-layer fully connected network with hidden size 256, and use the GELU nonlinearity [6]. We train with Adam for 15 epochs with batch size 64 and learning rate of 0.001. For regularization, we use 2 weight decay with \u03bb = 5 \u00d7 10 \u22125 on all but the linear output layer.\n\nSST. The Stanford Sentiment Treebank dataset consists of single sentence movie reviews [21]. We use the 2-class version (i.e. SST2), which has 6,911 reviews in the training set, 872 in the development set, and 1,821 in the test set. We use the development set to augment the training set. We pad and clip reviews to a length of 30 tokens and learn 100-dimensional word vectors from scratch for a vocab size of 10,000. Our classifier is a word-averaging model with an affine output layer. We use the Adam optimizer for 5 epochs with batch size 50 and learning rate 0.001. For regularization, we use 2 weight decay with \u03bb = 1 \u00d7 10 \u22124 on the output layer. \n\n\nLabel Noise Corrections\n\nForward Loss Correction. The forward correction method from Patrini et al. [17] also obtains C by training a classifier on the noisy labels, and using the resulting softmax probabilities. However, this method does not make use of a trusted fraction of the training data. Instead, it uses the argmax at the 97 th percentile of softmax probabilities for a given class as a heuristic for detecting an example that is truly a member of said class. As in the original paper, we replace this with the argmax over all softmax probabilities for a given class on CIFAR-100 experiments. The estimate of C is then used to train a corrected classifier in the same way as the GLC.\n\nForward Gold. To examine the effect of training on trusted labels as done by the GLC, we augment the Forward method by replacing its estimate of C with the identity on trusted examples. We call this method Forward Gold. It can also be seen as the GLC with the Forward method's estimate of C.\n\nDistillation. The distillation method of Li et al. [10] involves training a neural network on a large trusted dataset and using this network to provide soft targets for the untrusted data. In this way, labels are \"distilled\" from a neural network. If the classifier's decisions for untrusted inputs are less reliable than the original noisy labels, then the network's utility is limited. Thus, to obtain a reliable neural network, a large trusted dataset is necessary. A new classifier is trained using labels that are a convex combination of the soft targets and the original untrusted labels.\n\n\nConfusion\n\nMatrices. An intuitive alternative to the GLC is to estimate C by a confusion matrix. To do this, we train a classifier on the untrusted examples, obtain its confusion matrix on the trusted examples, row-normalize the matrix, and then train a corrected classifier as in the GLC.\n\n\nUniform, Flip, and Hierarchical Corruption\n\nCorruption-Generating Matrices. We consider three types of corruption matrices: corrupting uniformly to all classes, i.e. C ij = 1/K, flipping a label to a different class, and corrupting uniformly to classes which are semantically similar. To create a uniform corruption at different strengths, we  take a convex combination of an identity matrix and the matrix 11 T /K. We refer to the coefficient of 11 T /K as the corruption strength for a \"uniform\" corruption. A \"flip\" corruption at strength m involves, for each row, giving an off-diagonal column probability mass m and the entries along the diagonal probability mass 1 \u2212 m. Finally, a more realistic corruption is hierarchical corruption. For this corruption, we apply uniform corruption only to semantically similar classes; for example, \"bed\" may be corrupted to \"couch\" but not \"beaver\" in CIFAR-100. For CIFAR-100, examples are deemed semantically similar if they share the same \"superclass\" label specified by the dataset creators.\n\nExperiments and Analysis of Results. We train the models described in Section 4.1 under uniform, label-flipping, and hierarchical label corruptions at various fractions of trusted data. To assess the performance of the GLC, we compare it to other loss correction methods and two baselines: one where we train a network only on trusted data without any label corrections, and one where the network trains on all data without any label corrections. We record errors on the test sets at the corruption strengths Across all experiments, the GLC obtains better area under the error curve than the baselines and the Forward and Distillation methods. The rankings of the other methods and baselines are mixed. On MNIST, training on the trusted data alone outperforms all methods save for the GLC and Confusion Matrix, but performs significantly worse on CIFAR-100, even with large trusted fractions.\n\nThe Confusion Matrix correction performs second to the GLC, which indicates that normalized confusion matrices are not as accurate as our method of estimating C. We verified this by inspecting the estimates directly, and found that normalized confusion matrices give a highly biased estimate due to taking an argmax over class scores rather than using random sampling. Figure 1 shows an example of this bias in the case of label flipping corruption at a strength of 7/10.\n\nInterestingly, Forward Gold performs worse than Forward on several datasets. We did not observe the same behavior when turning off the corresponding component of the GLC, and believe it may be due to variance introduced during training by the difference in signal provided by the Forward method's C estimate and the clean labels. The GLC provides a superior C estimate, and thus may be better able to leverage training on the clean labels. Additional results on SVHN are in the Supplementary Material.\n\nWe also compare the GLC to the recent work of Ren et al. [20], which proposes a loss correction that uses a trusted set and meta-learning. We find that the GLC consistently outperforms this method.  \n\n\nWeak Classifier Labels\n\nOur next benchmark for the GLC is to use noisy labels obtained from a weak classifier. This models the scenario of label noise arising from a classification system weaker than one's own, but with access to information about the true labels that one wishes to transfer to one's own system. For example, scraping image labels from surrounding text on web pages provides a valuable signal, but these labels would train a sub-par classifier without correcting the label noise. This setting exactly satisfies the conditional independence assumption on label noise used for our C estimate, because the weak classifier does not take the true label as input when outputting noisy labels.\n\nWeak Classifier Label Generation. To obtain the labels, we train 40-layer Wide Residual Networks on CIFAR-10 and CIFAR-100 with clean labels for ten epochs each. Then, we sample from their softmax distributions with a temperature of 5, and fix the resulting labels. This results in noisy labels which we use in place of the labels obtained through the uniform, flip, and hierarchical corruption methods. The labelings produced by the weak classifiers have accuracies of 40% on CIFAR-10 and 7% on CIFAR-100. Despite the presence of highly corrupted labels, we are able to significantly recover performance with the use of a trusted set. Note that unlike the previous corruption methods, weak classifier labels have only one corruption strength. Thus, performance is measured in percent error rather than area under the error curve. Results are displayed in Table 3.\n\nAnalysis of Results. On average, the GLC outperforms all other methods in the weak classifier label experiments. The Distillation method performs better than the GLC by a small margin at the highest trusted fraction, but performs worse at lower trusted fractions, indicating that the GLC enjoys superior data efficiency. This is highlighted by the GLC attaining a 26.94% error rate on CIFAR-10 with a trusted fraction of only 1%, down from the original error rate of 60%. It should be noted, however, that training with no correction attains 28.32% error on this experiment, suggesting that the weak classifier labels have low bias. The improvement conferred by the GLC is greater with larger trusted fractions.\n\n\nDiscussion\n\nData Efficiency. We have seen that the GLC works for small trusted fractions. We further corroborate its data efficiency by turning to the Clothing1M dataset [26]. Clothing1M is a massive dataset with both human-annotated and noisy labels, which we use to compare the data efficiency of the GLC to that of Distillation when very few trusted labels are present. It consists in 1 million noisily labeled clothing images obtained by crawling online marketplaces. 50,000 images have human-annotated examples, from which we take subsamples as our trusted set.\n\nFor both the GLC and Distillation, we first fine-tune a ResNet-34 on untrusted training examples for four epochs, and use this to estimate our corruption matrix. Thereafter, we fine-tune the network for four more epochs on the combined trusted and untrusted sets using the respective method. During fine tuning, we freeze the first seven layers, and train using gradient descent with Nesterov momentum and a cosine learning rate schedule. For preprocessing, we randomly crop and use mirroring. We also upsample the trusted dataset, finding this to give better performance for both methods. As shown in Figure 3, the GLC outperforms Distillation by a large margin, especially with fewer trusted examples. This is because Distillation requires fine-tuning a classifier on the trusted data alone, which generalizes poorly with very few examples. By contrast, estimating the C matrix can be done with very few examples. Correspondingly, we find that our advantage decreases as the number of trusted examples increases.\n\nWith more trusted labels, performance on Clothing1M saturates, as evident in Figure 3. We consider the extreme and train on the entire trusted set for Clothing1M. We fine-tune a pre-trained 50layer ResNeXt [27] on untrusted training examples to estimate our corruption matrix. Then, we fine-tune the ResNeXt on all training examples. During fine-tuning, we use gradient descent with Nesterov momentum. During the first two epochs, we tune only the output layer with a learning rate of 10 \u22122 . Thereafter, we tune the whole network at a learning rate of 10 \u22123 for two epochs, and for another two epochs at 10 \u22124 . Then we apply our loss correction. Now, we fine-tune the entire network at a learning rate of 10 \u22123 for two epochs, continue training at 10 \u22124 , and early-stop based upon the validation set. In a previous work, Xiao et al. [26] obtain 78.24% in this setting. However, our method obtains a state-of-the-art accuracy of 80.67%, while with this procedure the Forward method only obtains 79.03% accuracy.\n\nImproving C Estimation. For some datasets, the classifier p( y | x) may be a poor estimate of p( y | x), presenting a bottleneck in the estimation of C for the GLC. To see the extent to which this could impact performance, and whether simple methods for improving p( y | x) could help, we ran several variants of the GLC experiment on CIFAR-100 under the label flipping corruption at a trusted fraction of 5/100 which we now describe. For all variants, we averaged the area under the error curve over five random initializations.\n\n1. In the first variant, we replaced the GLC estimate of C with C, the true corruption matrix. 2. As demonstrated by Guo et al. [5], modern deep neural network classifiers tend to have overconfident softmax distributions. We found this to be the case with our p( y | x) estimate, despite the higher entropy of the noisy labels, so we used the temperature scaling confidence calibration method proposed in the paper to calibrate p( y | x). 3. Suppose we know the base rates of corrupted labels b, where b i = p( y = i), and the base rate of true labels b of the trusted set. If we posit that C 0 corrupted the labels, then we should have b T C 0 = b T . Thus, we may obtain a superior estimate of the corruption matrix by computing a new estimate\nC = argmin C b T C 0 \u2212 b T 2 2 + \u03bb C \u2212 C 0 2 2 subject to C1 = 1.\nWe found that using the true corruption matrix as our C provides a benefit of 0.96 percentage points in area under the error curve, but neither the confidence calibration nor the base rate incorporation was able to change the performance from the original GLC. This indicates that the GLC is robust to the use of uncalibrated networks for estimating C, and that improving its performance may be difficult without directly improving the performance of the neural network used to estimate p(y | x).\n\n\nConclusion\n\nIn this work, we have shown the impact of having a small set of trusted examples on label noise robustness in neural network classifiers. We proposed the Gold Loss Correction (GLC), a method for coping with label noise. This method leverages the assumption that the model has access to a small set of correct labels in order to yield accurate estimates of the noise distribution. Throughout our experiments, the GLC surpasses previous label noise robustness methods across various natural language processing and vision domains which we showed by considering several corruptions and numerous strengths, including severe strengths. These results demonstrate that the GLC is a powerful, data-efficient method for improving robustness to label noise.\n\nA Proof: Separability Implies Y \u22a5 Y | X\n\nWe show here that the conditional independence assumption required by our C estimator is satisfied when the data are separable, meaning that the label is deterministic given the input.\n\nLet X, Y, Y be random variables following a data distribution P X,Y, Y , where Y and Y are categorical.\n\nSemantically, Y represents the true label, and Y represents the noisy label. Suppose that the data are separable, meaning that P Y |X (y | x) = 0 holds for all y but y * , in which case we have P Y |X (y * | x) = 1. For brevity in the rest of the proof, we will use shorthand probability notation, i.e. p(y * | x) = 1. Using the separability assumption, we have\np( y | x) = y p(y, y | x) = y p( y | y, x)p(y | x) = p( y | y * , x).(1)\nWe will use this to show that p(y, y | x) = p(y | x)p( y | x) for all y, y, x. Let y and x be given. For y = y * , we have\np(y, y | x) = p(y, y, x) p(x) = 0 p(x) = 0,\nbecause separability implies p(y, x) = 0 for y = y * . This is also equal to p(y | x)p( y | x), so the case where y = y * is covered. Suppose y = y * . We have\np(y * , y | x) = p(y * , y, x) p(x) = p( y | y * , x)p(y * , x) p(x) = p( y | x)p(y * | x),\nwhere in the last step we use equation (1). This completes the proof.      \n\n\nB Additional Results and Error Plots\n\nFigure 1 :\n1A label corruption matrix (top left\n\n\nk /= num_examples 11: end for 12: Initialize new model g(x) = p(y|x; \u03b8) 13: Train with (g(x), y) on D, ( Cg(x), y) on D 14: Output: Model p(y|x; \u03b8)\n\nFigure 2 :\n2Error curves for numerous label correction methods using a full range of label corruption strengths on several different vision and natural language processing datasets.\n\n\n{0, 0.1, . . . , 1.0}. Since we compute the model's accuracy at numerous corruption strengths, CIFAR experiments involve training over 500 Wide Residual Networks. In Tables 1 and 2, we report the area under the error curves across corruption strengths {0, 0.1, . . . , 1.0} for all baselines and corrections. A sample of error curves are displayed in Figure 2. These curves are the linear interpolation of the errors at the eleven corruption strengths.\n\nFigure 3 :\n3Data efficiency of our method compared to Distillation on Clothing1M.\n\nFigure 5 :\n5Error curves for numerous label correction methods on vision datasets using several label corruption types and a full range of label corruption strengths.\n\nFigure 7 :\n7Error curves for numerous label correction methods on NLP datasets using several label corruption types and a full range of label corruption strengths.\n\n\nTable 1: Vision dataset results. Percent trusted is the trusted fraction multiplied by 100. Unless otherwise indicated, all values are percentages representing the area under the error curve computed at 11 test points. The best mean result is bolded.Corruption \nType \n\nPercent \nTrusted \n\nTrusted \nOnly \n\nNo Corr. Forward Forward \nGold \n\nDistill. Confusion \nMatrix \n\nGLC \n(Ours) \n\nMNIST \n\nUniform \n5 \n37.6 \n12.9 \n14.5 \n13.5 \n42.1 \n21.8 \n10.3 \nUniform \n10 \n12.9 \n12.3 \n13.9 \n12.3 \n9.2 \n15.1 \n6.3 \nUniform \n25 \n6.6 \n9.3 \n11.8 \n9.2 \n5.8 \n11.0 \n4.7 \nFlip \n5 \n37.6 \n50.1 \n51.7 \n41.4 \n46.5 \n11.7 \n3.4 \nFlip \n10 \n12.9 \n51.1 \n48.8 \n36.4 \n32.4 \n5.6 \n2.9 \nFlip \n25 \n6.6 \n47.7 \n50.2 \n37.1 \n28.2 \n3.8 \n2.6 \nMean \n19.0 \n30.6 \n31.8 \n25.0 \n27.4 \n11.5 \n5.0 \n\nCIFAR-10 \n\nUniform \n5 \n39.6 \n31.9 \n9.1 \n27.8 \n29.7 \n22.4 \n9.0 \nUniform \n10 \n31.3 \n31.9 \n8.6 \n20.6 \n18.3 \n22.7 \n6.9 \nUniform \n25 \n17.4 \n32.7 \n7.7 \n27.1 \n11.6 \n16.7 \n6.4 \nFlip \n5 \n39.6 \n53.3 \n38.6 \n47.8 \n29.7 \n8.1 \n6.6 \nFlip \n10 \n31.3 \n53.2 \n36.5 \n51.0 \n18.1 \n8.2 \n6.2 \nFlip \n25 \n17.4 \n52.7 \n37.6 \n49.5 \n11.8 \n7.1 \n6.1 \nMean \n29.4 \n42.6 \n23.0 \n37.3 \n19.9 \n14.2 \n6.9 \n\nCIFAR-100 \n\nUniform \n5 \n82.4 \n48.8 \n47.7 \n49.6 \n87.5 \n53.6 \n42.4 \nUniform \n10 \n67.3 \n48.4 \n47.2 \n48.9 \n61.2 \n49.7 \n33.9 \nUniform \n25 \n52.2 \n45.4 \n43.6 \n46.0 \n39.8 \n39.6 \n27.3 \nFlip \n5 \n82.4 \n62.1 \n61.6 \n62.6 \n87.1 \n28.6 \n27.1 \nFlip \n10 \n67.3 \n61.9 \n61.0 \n62.2 \n61.8 \n26.9 \n25.8 \nFlip \n25 \n52.2 \n59.6 \n57.5 \n61.4 \n40.0 \n25.1 \n24.7 \nHierarchical 5 \n82.4 \n50.9 \n51.0 \n52.4 \n87.1 \n45.8 \n34.8 \nHierarchical 10 \n67.3 \n51.9 \n50.5 \n52.1 \n61.7 \n38.8 \n30.2 \nHierarchical 25 \n52.2 \n54.3 \n47.0 \n51.1 \n39.7 \n29.7 \n25.4 \nMean \n67.3 \n53.7 \n51.9 \n54.0 \n62.9 \n37.5 \n30.2 \n\n\nTable 2 :\n2NLP dataset results. Percent trusted is the trusted fraction multiplied by 100. Unless otherwise indicated, all values are percentages representing the area under the error curve computed at 11 test points. The best mean result is bolded.\n\n\nTo conserve space, results are in the Supplementary Material.Percent \nTrusted \n\nTrusted \nOnly \n\nNo \nCorr. \n\nForward Forward \nGold \n\nDistill. Confusion \nMatrix \n\nGLC \n(Ours) \n\nCIFAR-10 \n\n1 \n62.9 \n28.3 \n28.1 \n30.9 \n60.4 \n31.9 \n26.9 \n5 \n39.6 \n27.1 \n26.6 \n25.5 \n28.1 \n27 \n21.9 \n10 \n31.3 \n25.9 \n25.1 \n22.9 \n17.8 \n24.2 \n19.2 \nMean \n44.6 \n27.1 \n26.6 \n26.4 \n35.44 \n27.7 \n22.7 \n\nCIFAR-100 \n\n5 \n82.4 \n71.1 \n73.9 \n73.6 \n88.3 \n74.1 \n68.7 \n10 \n67.3 \n66 \n68.2 \n66.1 \n62.5 \n63.8 \n56.6 \n25 \n52.2 \n56.9 \n56.9 \n51.4 \n39.7 \n50.8 \n40.8 \nMean \n67.3 \n64.7 \n66.3 \n63.7 \n63.5 \n62.9 \n55.4 \n\n\n\nTable 3 :\n3Results when obtaining noisy labels by sampling from the softmax distribution of a weak classifier. Percent trusted is the trusted fraction multiplied by 100. Unless otherwise indicated, all values are the percent error. The best average result for each dataset is shown in bold.\n\nTable 4 :\n4Results on the method of Ren et al.[19]. Results from all methods besides Ren et al. are copied fromTable 5. Percent trusted is the trusted fraction multiplied by 100. Unless otherwise indicated, all values are percentages representing the area under the error curve computed at 11 test points. The best mean result is shown in bold.Corruption \nType \n\nPercent \nTrusted \n\nTrusted \nOnly \n\nNo Corr. Forward Forward \nGold \n\nDistill. Confusion \nMatrix \n\nGLC \n(Ours) \n\nMNIST \n\nUniform \n5 \n37.6 \n12.9 \n14.5 \n13.5 \n42.1 \n21.8 \n10.3 \nUniform \n10 \n12.9 \n12.3 \n13.9 \n12.3 \n9.2 \n15.1 \n6.3 \nUniform \n25 \n6.6 \n9.3 \n11.8 \n9.2 \n5.8 \n11.0 \n4.7 \nFlip \n5 \n37.6 \n50.1 \n51.7 \n41.4 \n46.6 \n11.7 \n3.4 \nFlip \n10 \n12.9 \n51.1 \n48.8 \n36.4 \n32.4 \n5.6 \n2.9 \nFlip \n25 \n6.6 \n47.7 \n50.2 \n37.1 \n28.2 \n3.8 \n2.6 \nMean \n19.0 \n30.6 \n31.8 \n25.0 \n27.4 \n11.5 \n5.0 \n\nSVHN \n\nUniform \n0.1 \n80.4 \n25.5 \n26.2 \n26.8 \n80.9 \n25.7 \n24.4 \nUniform \n1 \n79.7 \n25.5 \n24.2 \n24.9 \n80.4 \n28.2 \n28.1 \nUniform \n5 \n24.3 \n25.5 \n15.0 \n15.7 \n24.1 \n2.7 \n2.8 \nFlip \n0.1 \n80.4 \n51.0 \n51.0 \n50.9 \n89.1 \n19.8 \n19.4 \nFlip \n1 \n79.7 \n51.0 \n43.9 \n49.5 \n86.3 \n17.8 \n21.7 \nFlip \n5 \n24.3 \n51.0 \n43.2 \n49.0 \n17.6 \n2.2 \n2.2 \nMean \n61.5 \n38.2 \n33.9 \n36.1 \n63.1 \n16.1 \n16.4 \n\nCIFAR-10 \n\nUniform \n5 \n39.6 \n31.9 \n9.1 \n27.9 \n29.7 \n22.4 \n9.0 \nUniform \n10 \n31.3 \n31.9 \n8.6 \n20.6 \n18.3 \n22.7 \n6.9 \nUniform \n25 \n17.4 \n32.7 \n7.7 \n27.1 \n11.6 \n16.7 \n6.4 \nFlip \n5 \n39.6 \n53.3 \n38.6 \n47.8 \n29.7 \n8.1 \n6.6 \nFlip \n10 \n31.3 \n53.2 \n36.5 \n51.0 \n18.1 \n8.2 \n6.2 \nFlip \n25 \n17.4 \n52.7 \n37.6 \n49.5 \n11.8 \n7.1 \n6.1 \nMean \n29.4 \n42.6 \n23.0 \n37.3 \n19.9 \n14.2 \n6.9 \n\nCIFAR-100 \n\nUniform \n5 \n82.4 \n48.8 \n47.7 \n49.6 \n87.5 \n53.6 \n42.4 \nUniform \n10 \n67.3 \n48.4 \n47.2 \n48.9 \n61.2 \n49.7 \n33.9 \nUniform \n25 \n52.2 \n45.4 \n43.6 \n46.0 \n39.8 \n39.6 \n27.3 \nFlip \n5 \n82.4 \n62.1 \n61.6 \n62.6 \n87.1 \n28.6 \n27.1 \nFlip \n10 \n67.3 \n61.9 \n61.0 \n62.2 \n61.9 \n26.9 \n25.8 \nFlip \n25 \n52.2 \n59.6 \n57.5 \n61.4 \n40.0 \n25.1 \n24.7 \nHierarchical 5 \n82.4 \n50.9 \n51.0 \n52.4 \n87.1 \n45.8 \n34.8 \nHierarchical 10 \n67.3 \n51.9 \n50.5 \n52.1 \n61.7 \n38.8 \n30.2 \nHierarchical 25 \n52.2 \n54.3 \n47.0 \n51.1 \n39.7 \n29.7 \n25.4 \nMean \n67.3 \n53.7 \n51.9 \n54.0 \n62.9 \n37.5 \n30.2 \n\n\n\nTable 5 :\n5Vision dataset results. These differ from the results in the paper by the addition of SVHN. Percent trusted is the trusted fraction multiplied by 100. Unless otherwise indicated, all values are percentages representing the area under the error curve computed at 11 test points. The best mean result is shown in bold.\nAcknowledgmentsWe thank NVIDIA for donating GPUs used in this research.\nSupport Vector Machines Under Adversarial Label Noise. B Biggio, P Nelson, Laskov, ACMLB Biggio, B Nelson, and P Laskov. \"Support Vector Machines Under Adversarial Label Noise\". In: ACML (2011).\n\nLearning from Untrusted Data. Moses Charikar, Jacob Steinhardt, Gregory Valiant, STOCMoses Charikar, Jacob Steinhardt, and Gregory Valiant. \"Learning from Untrusted Data\". In: STOC (2017).\n\nClassification in the presence of label noise: a survey. Beno\u00eet Fr\u00e9nay, Michel Verleysen, IEEE Trans Neural Netw Learn Syst. Beno\u00eet Fr\u00e9nay and Michel Verleysen. \"Classification in the presence of label noise: a survey\". In: IEEE Trans Neural Netw Learn Syst (2014).\n\nPart-of-speech Tagging for Twitter: Annotation, Features, and Experiments. Kevin Gimpel, ACLKevin Gimpel et al. \"Part-of-speech Tagging for Twitter: Annotation, Features, and Experi- ments\". In: ACL (2011).\n\nOn Calibration of Modern Neural Networks. Chuan Guo, Chuan Guo et al. \"On Calibration of Modern Neural Networks\". In: ICML (2017).\n\nBridging Nonlinearities and Stochastic Regularizers with Gaussian Error Linear Units. Dan Hendrycks, Kevin Gimpel, CoRRDan Hendrycks and Kevin Gimpel. \"Bridging Nonlinearities and Stochastic Regularizers with Gaussian Error Linear Units\". In: CoRR (2016).\n\nAdam: A Method for Stochastic Optimization. P Diederik, Jimmy Kingma, Ba, ICLRDiederik P. Kingma and Jimmy Ba. \"Adam: A Method for Stochastic Optimization\". In: ICLR (2014).\n\nDesign of robust neural network classifiers. J Larsen, Proceedings of the 1998 IEEE International Conference on. the 1998 IEEE International Conference onAcoustics, Speech and Signal ProcessingJ Larsen et al. \"Design of robust neural network classifiers\". In: Acoustics, Speech and Signal Processing, 1998. Proceedings of the 1998 IEEE International Conference on. 1998.\n\nData Poisoning Attacks on Factorization-Based Collaborative Filtering. Bo Li, NIPSBo Li et al. \"Data Poisoning Attacks on Factorization-Based Collaborative Filtering\". In: NIPS (2016).\n\nLearning from Noisy Labels with Distillation. Yuncheng Li, Yuncheng Li et al. \"Learning from Noisy Labels with Distillation\". In: ICCV (2017).\n\nSGDR: Stochastic Gradient Descent with Warm Restarts. Ilya Loshchilov, Frank Hutter, ICLRIlya Loshchilov and Frank Hutter. \"SGDR: Stochastic Gradient Descent with Warm Restarts\". In: ICLR (2016).\n\nLearning Word Vectors for Sentiment Analysis. Andrew L Maas, Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies. the 49th Annual Meeting of the Association for Computational Linguistics: Human Language TechnologiesAndrew L. Maas et al. \"Learning Word Vectors for Sentiment Analysis\". In: Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies. 2011.\n\nLearning from Binary Labels with Instance-Dependent Corruption. Aditya Krishna Menon, Brendan Van Rooyen, Nagarajan Natarajan, CoRRAditya Krishna Menon, Brendan van Rooyen, and Nagarajan Natarajan. \"Learning from Binary Labels with Instance-Dependent Corruption\". In: CoRR (2016).\n\nLearning to label aerial images from noisy data. Volodymyr Mnih, Geoffrey E Hinton, ICMLVolodymyr Mnih and Geoffrey E Hinton. \"Learning to label aerial images from noisy data\". In: ICML (2012).\n\nLearning with Noisy Labels. Nagarajan Natarajan, Advances in Neural Information Processing Systems 26. Nagarajan Natarajan et al. \"Learning with Noisy Labels\". In: Advances in Neural Information Processing Systems 26. 2013.\n\nA study of the effect of different types of noise on the precision of supervised learning techniques. Albert David F Nettleton, Albert Orriols-Puig, Fornells, Artif Intell Rev. David F Nettleton, Albert Orriols-Puig, and Albert Fornells. \"A study of the effect of different types of noise on the precision of supervised learning techniques\". In: Artif Intell Rev (2010).\n\nMaking Deep Neural Networks Robust to Label Noise: a Loss Correction Approach. Giorgio Patrini, CVPRGiorgio Patrini et al. \"Making Deep Neural Networks Robust to Label Noise: a Loss Correction Approach\". In: CVPR (2016).\n\nClass Noise and Supervised Learning in Medical Domains: The Effect of Feature Extraction. M Pechenizkiy, 19th IEEE Symposium on Computer-Based Medical Systems (CBMS'06). M Pechenizkiy et al. \"Class Noise and Supervised Learning in Medical Domains: The Effect of Feature Extraction\". In: 19th IEEE Symposium on Computer-Based Medical Systems (CBMS'06). 2006.\n\nTraining Deep Neural Networks on Noisy Labels with Bootstrapping. Scott Reed, ICLR Workshop. Scott Reed et al. \"Training Deep Neural Networks on Noisy Labels with Bootstrapping\". In: ICLR Workshop (2014).\n\nLearning to Reweight Examples for Robust Deep Learning. Thu Mengye Ren, ICMLThu Mengye Ren et al. \"Learning to Reweight Examples for Robust Deep Learning\". In: ICML (2018).\n\nRecursive Deep Models for Semantic Compositionality Over a Sentiment Treebank. Richard Socher, Conference on Empirical Methods in Natural Language Processing. Richard Socher et al. \"Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank\". In: Conference on Empirical Methods in Natural Language Processing. 2013.\n\nDropout: A simple way to prevent neural networks from overfitting. Nitish Srivastava, The Journal of Machine Learning Research. Nitish Srivastava et al. \"Dropout: A simple way to prevent neural networks from overfitting\". In: The Journal of Machine Learning Research (2014).\n\nCertified Defenses for Data Poisoning Attacks. Jacob Steinhardt, Pang Wei Koh, Percy Liang, Jacob Steinhardt, Pang Wei Koh, and Percy Liang. \"Certified Defenses for Data Poisoning Attacks\". In: NIPS. 2017.\n\nTraining Convolutional Networks with Noisy Labels. Sainbayar Sukhbaatar, ICLR Workshop. Sainbayar Sukhbaatar et al. \"Training Convolutional Networks with Noisy Labels\". In: ICLR Workshop (2014).\n\nLearning From Noisy Large-Scale Datasets With Minimal Supervision. Andreas Veit, Andreas Veit et al. \"Learning From Noisy Large-Scale Datasets With Minimal Supervision\". In: CVPR (2017).\n\nLearning from massive noisy labeled data for image classification. Tong Xiao, CVPRTong Xiao et al. \"Learning from massive noisy labeled data for image classification\". In: CVPR (2015).\n\nAggregated Residual Transformations for Deep Neural Networks. Saining Xie, CVPRSaining Xie et al. \"Aggregated Residual Transformations for Deep Neural Networks\". In: CVPR (2016).\n\nWide Residual Networks. Sergey Zagoruyko, Nikos Komodakis, BMVCSergey Zagoruyko and Nikos Komodakis. \"Wide Residual Networks\". In: BMVC (2016).\n\nClass Noise vs. Attribute Noise: A Quantitative Study. Xingquan Zhu, Xindong Wu, Artificial Intelligence Review. Xingquan Zhu and Xindong Wu. \"Class Noise vs. Attribute Noise: A Quantitative Study\". In: Artificial Intelligence Review (2004).\n", "annotations": {"author": "[{\"end\":118,\"start\":81},{\"end\":150,\"start\":119},{\"end\":188,\"start\":151},{\"end\":219,\"start\":189},{\"end\":255,\"start\":220},{\"end\":354,\"start\":256}]", "publisher": null, "author_last_name": "[{\"end\":94,\"start\":85},{\"end\":133,\"start\":126},{\"end\":164,\"start\":158},{\"end\":201,\"start\":195}]", "author_first_name": "[{\"end\":84,\"start\":81},{\"end\":125,\"start\":119},{\"end\":157,\"start\":151},{\"end\":194,\"start\":189}]", "author_affiliation": "[{\"end\":254,\"start\":221},{\"end\":353,\"start\":257}]", "title": "[{\"end\":78,\"start\":1},{\"end\":432,\"start\":355}]", "venue": null, "abstract": "[{\"end\":1448,\"start\":434}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1993,\"start\":1990},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":1996,\"start\":1993},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":2113,\"start\":2109},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3082,\"start\":3078},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":3244,\"start\":3240},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3662,\"start\":3658},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3665,\"start\":3662},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3746,\"start\":3742},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3840,\"start\":3836},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3842,\"start\":3840},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3844,\"start\":3842},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3866,\"start\":3862},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3868,\"start\":3866},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3871,\"start\":3868},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3874,\"start\":3871},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4011,\"start\":4007},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4085,\"start\":4082},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4124,\"start\":4120},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4127,\"start\":4124},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4230,\"start\":4226},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4580,\"start\":4576},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4790,\"start\":4786},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4793,\"start\":4790},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4933,\"start\":4930},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5082,\"start\":5078},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5085,\"start\":5082},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5088,\"start\":5085},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":5091,\"start\":5088},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5109,\"start\":5105},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":5346,\"start\":5342},{\"end\":8744,\"start\":8742},{\"end\":8789,\"start\":8787},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":8884,\"start\":8880},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8887,\"start\":8884},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":9410,\"start\":9406},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":11917,\"start\":11913},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":12054,\"start\":12050},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":12104,\"start\":12100},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12447,\"start\":12444},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":12561,\"start\":12557},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":12673,\"start\":12670},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":13194,\"start\":13191},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13465,\"start\":13461},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":14134,\"start\":14130},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":15072,\"start\":15068},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":18877,\"start\":18873},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":21477,\"start\":21473},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":23097,\"start\":23093},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":23727,\"start\":23723},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":24564,\"start\":24561},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":31888,\"start\":31884}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":27854,\"start\":27806},{\"attributes\":{\"id\":\"fig_1\"},\"end\":28004,\"start\":27855},{\"attributes\":{\"id\":\"fig_3\"},\"end\":28187,\"start\":28005},{\"attributes\":{\"id\":\"fig_4\"},\"end\":28642,\"start\":28188},{\"attributes\":{\"id\":\"fig_5\"},\"end\":28725,\"start\":28643},{\"attributes\":{\"id\":\"fig_7\"},\"end\":28893,\"start\":28726},{\"attributes\":{\"id\":\"fig_8\"},\"end\":29058,\"start\":28894},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":30724,\"start\":29059},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":30975,\"start\":30725},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":31544,\"start\":30976},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":31836,\"start\":31545},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":33967,\"start\":31837},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":34296,\"start\":33968}]", "paragraph": "[{\"end\":2114,\"start\":1464},{\"end\":2527,\"start\":2116},{\"end\":3505,\"start\":2529},{\"end\":3845,\"start\":3522},{\"end\":4206,\"start\":3847},{\"end\":4777,\"start\":4208},{\"end\":5771,\"start\":4779},{\"end\":6343,\"start\":5796},{\"end\":6723,\"start\":6345},{\"end\":7107,\"start\":6725},{\"end\":7433,\"start\":7109},{\"end\":7825,\"start\":7435},{\"end\":8531,\"start\":7919},{\"end\":9564,\"start\":8533},{\"end\":10571,\"start\":9617},{\"end\":11042,\"start\":10573},{\"end\":12055,\"start\":11073},{\"end\":12624,\"start\":12057},{\"end\":13372,\"start\":12626},{\"end\":14027,\"start\":13374},{\"end\":14722,\"start\":14055},{\"end\":15015,\"start\":14724},{\"end\":15611,\"start\":15017},{\"end\":15903,\"start\":15625},{\"end\":16944,\"start\":15950},{\"end\":17838,\"start\":16946},{\"end\":18311,\"start\":17840},{\"end\":18814,\"start\":18313},{\"end\":19015,\"start\":18816},{\"end\":19721,\"start\":19042},{\"end\":20587,\"start\":19723},{\"end\":21300,\"start\":20589},{\"end\":21869,\"start\":21315},{\"end\":22885,\"start\":21871},{\"end\":23900,\"start\":22887},{\"end\":24431,\"start\":23902},{\"end\":25178,\"start\":24433},{\"end\":25741,\"start\":25245},{\"end\":26503,\"start\":25756},{\"end\":26544,\"start\":26505},{\"end\":26730,\"start\":26546},{\"end\":26835,\"start\":26732},{\"end\":27198,\"start\":26837},{\"end\":27394,\"start\":27272},{\"end\":27598,\"start\":27439},{\"end\":27766,\"start\":27691}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":7918,\"start\":7826},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9602,\"start\":9565},{\"attributes\":{\"id\":\"formula_2\"},\"end\":25244,\"start\":25179},{\"attributes\":{\"id\":\"formula_3\"},\"end\":27271,\"start\":27199},{\"attributes\":{\"id\":\"formula_4\"},\"end\":27438,\"start\":27395},{\"attributes\":{\"id\":\"formula_5\"},\"end\":27690,\"start\":27599}]", "table_ref": "[{\"end\":5591,\"start\":5590},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":20586,\"start\":20579}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1462,\"start\":1450},{\"attributes\":{\"n\":\"2\"},\"end\":3520,\"start\":3508},{\"attributes\":{\"n\":\"3\"},\"end\":5794,\"start\":5774},{\"attributes\":{\"n\":\"4\"},\"end\":9615,\"start\":9604},{\"attributes\":{\"n\":\"4.1\"},\"end\":11071,\"start\":11045},{\"attributes\":{\"n\":\"4.2\"},\"end\":14053,\"start\":14030},{\"end\":15623,\"start\":15614},{\"attributes\":{\"n\":\"4.3\"},\"end\":15948,\"start\":15906},{\"attributes\":{\"n\":\"4.4\"},\"end\":19040,\"start\":19018},{\"attributes\":{\"n\":\"5\"},\"end\":21313,\"start\":21303},{\"attributes\":{\"n\":\"6\"},\"end\":25754,\"start\":25744},{\"end\":27805,\"start\":27769},{\"end\":27817,\"start\":27807},{\"end\":28016,\"start\":28006},{\"end\":28654,\"start\":28644},{\"end\":28737,\"start\":28727},{\"end\":28905,\"start\":28895},{\"end\":30735,\"start\":30726},{\"end\":31555,\"start\":31546},{\"end\":31847,\"start\":31838},{\"end\":33978,\"start\":33969}]", "table": "[{\"end\":30724,\"start\":29311},{\"end\":31544,\"start\":31039},{\"end\":33967,\"start\":32182}]", "figure_caption": "[{\"end\":27854,\"start\":27819},{\"end\":28004,\"start\":27857},{\"end\":28187,\"start\":28018},{\"end\":28642,\"start\":28190},{\"end\":28725,\"start\":28656},{\"end\":28893,\"start\":28739},{\"end\":29058,\"start\":28907},{\"end\":29311,\"start\":29061},{\"end\":30975,\"start\":30737},{\"end\":31039,\"start\":30978},{\"end\":31836,\"start\":31557},{\"end\":32182,\"start\":31849},{\"end\":34296,\"start\":33980}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":18217,\"start\":18209},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":22481,\"start\":22473},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":22972,\"start\":22964}]", "bib_author_first_name": "[{\"end\":34425,\"start\":34424},{\"end\":34435,\"start\":34434},{\"end\":34600,\"start\":34595},{\"end\":34616,\"start\":34611},{\"end\":34636,\"start\":34629},{\"end\":34818,\"start\":34812},{\"end\":34833,\"start\":34827},{\"end\":35102,\"start\":35097},{\"end\":35277,\"start\":35272},{\"end\":35451,\"start\":35448},{\"end\":35468,\"start\":35463},{\"end\":35664,\"start\":35663},{\"end\":35680,\"start\":35675},{\"end\":35840,\"start\":35839},{\"end\":36239,\"start\":36237},{\"end\":36406,\"start\":36398},{\"end\":36554,\"start\":36550},{\"end\":36572,\"start\":36567},{\"end\":36745,\"start\":36739},{\"end\":36747,\"start\":36746},{\"end\":37242,\"start\":37236},{\"end\":37250,\"start\":37243},{\"end\":37265,\"start\":37258},{\"end\":37287,\"start\":37278},{\"end\":37512,\"start\":37503},{\"end\":37527,\"start\":37519},{\"end\":37529,\"start\":37528},{\"end\":37686,\"start\":37677},{\"end\":37982,\"start\":37976},{\"end\":38008,\"start\":38002},{\"end\":38332,\"start\":38325},{\"end\":38559,\"start\":38558},{\"end\":38898,\"start\":38893},{\"end\":39293,\"start\":39286},{\"end\":39617,\"start\":39611},{\"end\":39872,\"start\":39867},{\"end\":39889,\"start\":39885},{\"end\":39904,\"start\":39899},{\"end\":40087,\"start\":40078},{\"end\":40297,\"start\":40290},{\"end\":40482,\"start\":40478},{\"end\":40666,\"start\":40659},{\"end\":40807,\"start\":40801},{\"end\":40824,\"start\":40819},{\"end\":40985,\"start\":40977},{\"end\":40998,\"start\":40991}]", "bib_author_last_name": "[{\"end\":34432,\"start\":34426},{\"end\":34442,\"start\":34436},{\"end\":34450,\"start\":34444},{\"end\":34609,\"start\":34601},{\"end\":34627,\"start\":34617},{\"end\":34644,\"start\":34637},{\"end\":34825,\"start\":34819},{\"end\":34843,\"start\":34834},{\"end\":35109,\"start\":35103},{\"end\":35281,\"start\":35278},{\"end\":35461,\"start\":35452},{\"end\":35475,\"start\":35469},{\"end\":35673,\"start\":35665},{\"end\":35687,\"start\":35681},{\"end\":35691,\"start\":35689},{\"end\":35847,\"start\":35841},{\"end\":36242,\"start\":36240},{\"end\":36409,\"start\":36407},{\"end\":36565,\"start\":36555},{\"end\":36579,\"start\":36573},{\"end\":36752,\"start\":36748},{\"end\":37256,\"start\":37251},{\"end\":37276,\"start\":37266},{\"end\":37297,\"start\":37288},{\"end\":37517,\"start\":37513},{\"end\":37536,\"start\":37530},{\"end\":37696,\"start\":37687},{\"end\":38000,\"start\":37983},{\"end\":38021,\"start\":38009},{\"end\":38031,\"start\":38023},{\"end\":38340,\"start\":38333},{\"end\":38571,\"start\":38560},{\"end\":38903,\"start\":38899},{\"end\":39103,\"start\":39089},{\"end\":39300,\"start\":39294},{\"end\":39628,\"start\":39618},{\"end\":39883,\"start\":39873},{\"end\":39897,\"start\":39890},{\"end\":39910,\"start\":39905},{\"end\":40098,\"start\":40088},{\"end\":40302,\"start\":40298},{\"end\":40487,\"start\":40483},{\"end\":40670,\"start\":40667},{\"end\":40817,\"start\":40808},{\"end\":40834,\"start\":40825},{\"end\":40989,\"start\":40986},{\"end\":41001,\"start\":40999}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":34563,\"start\":34369},{\"attributes\":{\"id\":\"b1\"},\"end\":34753,\"start\":34565},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":6054025},\"end\":35020,\"start\":34755},{\"attributes\":{\"id\":\"b3\"},\"end\":35228,\"start\":35022},{\"attributes\":{\"id\":\"b4\"},\"end\":35360,\"start\":35230},{\"attributes\":{\"id\":\"b5\"},\"end\":35617,\"start\":35362},{\"attributes\":{\"id\":\"b6\"},\"end\":35792,\"start\":35619},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":15184159},\"end\":36164,\"start\":35794},{\"attributes\":{\"id\":\"b8\"},\"end\":36350,\"start\":36166},{\"attributes\":{\"id\":\"b9\"},\"end\":36494,\"start\":36352},{\"attributes\":{\"id\":\"b10\"},\"end\":36691,\"start\":36496},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":1428702},\"end\":37170,\"start\":36693},{\"attributes\":{\"id\":\"b12\"},\"end\":37452,\"start\":37172},{\"attributes\":{\"id\":\"b13\"},\"end\":37647,\"start\":37454},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":423350},\"end\":37872,\"start\":37649},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":7531746},\"end\":38244,\"start\":37874},{\"attributes\":{\"id\":\"b16\"},\"end\":38466,\"start\":38246},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":3920589},\"end\":38825,\"start\":38468},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":2181703},\"end\":39031,\"start\":38827},{\"attributes\":{\"id\":\"b19\"},\"end\":39205,\"start\":39033},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":990233},\"end\":39542,\"start\":39207},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":6844431},\"end\":39818,\"start\":39544},{\"attributes\":{\"id\":\"b22\"},\"end\":40025,\"start\":39820},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":6458072},\"end\":40221,\"start\":40027},{\"attributes\":{\"id\":\"b24\"},\"end\":40409,\"start\":40223},{\"attributes\":{\"id\":\"b25\"},\"end\":40595,\"start\":40411},{\"attributes\":{\"id\":\"b26\"},\"end\":40775,\"start\":40597},{\"attributes\":{\"id\":\"b27\"},\"end\":40920,\"start\":40777},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":3331253},\"end\":41163,\"start\":40922}]", "bib_title": "[{\"end\":34810,\"start\":34755},{\"end\":35837,\"start\":35794},{\"end\":36737,\"start\":36693},{\"end\":37675,\"start\":37649},{\"end\":37974,\"start\":37874},{\"end\":38556,\"start\":38468},{\"end\":38891,\"start\":38827},{\"end\":39284,\"start\":39207},{\"end\":39609,\"start\":39544},{\"end\":40076,\"start\":40027},{\"end\":40975,\"start\":40922}]", "bib_author": "[{\"end\":34434,\"start\":34424},{\"end\":34444,\"start\":34434},{\"end\":34452,\"start\":34444},{\"end\":34611,\"start\":34595},{\"end\":34629,\"start\":34611},{\"end\":34646,\"start\":34629},{\"end\":34827,\"start\":34812},{\"end\":34845,\"start\":34827},{\"end\":35111,\"start\":35097},{\"end\":35283,\"start\":35272},{\"end\":35463,\"start\":35448},{\"end\":35477,\"start\":35463},{\"end\":35675,\"start\":35663},{\"end\":35689,\"start\":35675},{\"end\":35693,\"start\":35689},{\"end\":35849,\"start\":35839},{\"end\":36244,\"start\":36237},{\"end\":36411,\"start\":36398},{\"end\":36567,\"start\":36550},{\"end\":36581,\"start\":36567},{\"end\":36754,\"start\":36739},{\"end\":37258,\"start\":37236},{\"end\":37278,\"start\":37258},{\"end\":37299,\"start\":37278},{\"end\":37519,\"start\":37503},{\"end\":37538,\"start\":37519},{\"end\":37698,\"start\":37677},{\"end\":38002,\"start\":37976},{\"end\":38023,\"start\":38002},{\"end\":38033,\"start\":38023},{\"end\":38342,\"start\":38325},{\"end\":38573,\"start\":38558},{\"end\":38905,\"start\":38893},{\"end\":39105,\"start\":39089},{\"end\":39302,\"start\":39286},{\"end\":39630,\"start\":39611},{\"end\":39885,\"start\":39867},{\"end\":39899,\"start\":39885},{\"end\":39912,\"start\":39899},{\"end\":40100,\"start\":40078},{\"end\":40304,\"start\":40290},{\"end\":40489,\"start\":40478},{\"end\":40672,\"start\":40659},{\"end\":40819,\"start\":40801},{\"end\":40836,\"start\":40819},{\"end\":40991,\"start\":40977},{\"end\":41003,\"start\":40991}]", "bib_venue": "[{\"end\":34422,\"start\":34369},{\"end\":34593,\"start\":34565},{\"end\":34878,\"start\":34845},{\"end\":35095,\"start\":35022},{\"end\":35270,\"start\":35230},{\"end\":35446,\"start\":35362},{\"end\":35661,\"start\":35619},{\"end\":35905,\"start\":35849},{\"end\":36235,\"start\":36166},{\"end\":36396,\"start\":36352},{\"end\":36548,\"start\":36496},{\"end\":36870,\"start\":36754},{\"end\":37234,\"start\":37172},{\"end\":37501,\"start\":37454},{\"end\":37750,\"start\":37698},{\"end\":38049,\"start\":38033},{\"end\":38323,\"start\":38246},{\"end\":38636,\"start\":38573},{\"end\":38918,\"start\":38905},{\"end\":39087,\"start\":39033},{\"end\":39364,\"start\":39302},{\"end\":39670,\"start\":39630},{\"end\":39865,\"start\":39820},{\"end\":40113,\"start\":40100},{\"end\":40288,\"start\":40223},{\"end\":40476,\"start\":40411},{\"end\":40657,\"start\":40597},{\"end\":40799,\"start\":40777},{\"end\":41033,\"start\":41003},{\"end\":35948,\"start\":35907},{\"end\":36973,\"start\":36872}]"}}}, "year": 2023, "month": 12, "day": 17}