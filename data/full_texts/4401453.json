{"id": 4401453, "updated": "2023-09-29 02:51:47.29", "metadata": {"title": "An Empirical Study of Fault Localization Families and Their Combinations", "authors": "[{\"first\":\"Daming\",\"last\":\"Zou\",\"middle\":[]},{\"first\":\"Jingjing\",\"last\":\"Liang\",\"middle\":[]},{\"first\":\"Yingfei\",\"last\":\"Xiong\",\"middle\":[]},{\"first\":\"Michael\",\"last\":\"Ernst\",\"middle\":[\"D.\"]},{\"first\":\"Lu\",\"last\":\"Zhang\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2018, "month": 3, "day": 27}, "abstract": "The performance of fault localization techniques is critical to their adoption in practice. This paper reports on an empirical study of a wide range of fault localization techniques on real-world faults. Different from previous studies, this paper (1) considers a wide range of techniques from different families, (2) combines different techniques, and (3) considers the execution time of different techniques. Our results reveal that a combined technique significantly outperforms any individual technique (200% increase in faults localized in Top 1), suggesting that combination may be a desirable way to apply fault localization techniques and that future techniques should also be evaluated in the combined setting. Our implementation is publicly available for evaluating and combining fault localization techniques.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1803.09939", "mag": "2962715466", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/tse/ZouLXEZ21", "doi": "10.1109/tse.2019.2892102"}}, "content": {"source": {"pdf_hash": "ce870da91f15c6ac1e3f16fbd31ec7682e227ca6", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1803.09939v2.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1803.09939", "status": "GREEN"}}, "grobid": {"id": "09adda280c81bd957416b70dfe85599c1e5922aa", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/ce870da91f15c6ac1e3f16fbd31ec7682e227ca6.txt", "contents": "\nAn Empirical Study of Fault Localization Families and Their Combinations\n\n\nDaming Zou \nJingjing Liang \nYingfei Xiong \nMichael D Ernst \nLu Zhang \nAn Empirical Study of Fault Localization Families and Their Combinations\n1Index Terms-Fault localizationlearning to rankprogram debuggingsoftware testingempirical study\nThe performance of fault localization techniques is critical to their adoption in practice. This paper reports on an empirical study of a wide range of fault localization techniques on real-world faults. Different from previous studies, this paper (1) considers a wide range of techniques from different families, (2) combines different techniques, and (3) considers the execution time of different techniques. Our results reveal that a combined technique significantly outperforms any individual technique (200% increase in faults localized in Top 1), suggesting that combination may be a desirable way to apply fault localization techniques and that future techniques should also be evaluated in the combined setting. Our implementation is publicly available for evaluating and combining fault localization techniques.\n\nINTRODUCTION\n\nT HE goal of fault localization is to identify defective program elements related to software failures. Automated fault localization uses static and run-time information about the program to identify program elements that may be the root cause of the failure. This paper considers seven families of fault localization techniques, which take as input seven different types of information:\n\n\u2022 Spectrum-based fault localization (SBFL) [1], [2], [3]: utilizing test coverage information \u2022 Mutation-based fault localization (MBFL) [4], [5]: utilizing test results from mutating the program \u2022 Dynamic program slicing [6], [7]: utilizing dynamic program dependencies \u2022 Stack trace analysis [8], [9]: utilizing crash reports \u2022 Predicate switching [10]: utilizing test results from mutating the results of conditional expressions \u2022 Information-retrieval-based fault localization (IRbased FL) [11]: utilizing bug report information \u2022 History-based fault localization [12], [13]: utilizing the development history Some techniques compute a suspiciousness score for each program element and can generate a ranked list of elements, such as spectrum-based fault localization. Other techniques only mark a set of elements as suspicious, such as dynamic program slicing.\n\nThe performance of fault localization is critical to its adoption in practice. Fault localization techniques are helpful only when the root causes are ranked at a high absolute position [14], [15], such as within the top 5 [16]. A number of empirical studies [17], [18], [19], [20] have evaluated the performance of SBFL and MBFL. However, no empirical study has evaluated the performance of other techniques on real-world faults, as far as we know.\n\nThis paper reports on an empirical study of a wide range of fault localization techniques from different families. Following the insight from existing work [17] that the performance of fault localization techniques may differ between real faults and artificial faults, our study is based on 357 real-world faults from the Defects4J dataset [21].\n\nOur study has two main novel aspects. First, since techniques in different families use different information sources, it is interesting to know how much these techniques are correlated to each other. We measured the correlation between different pairs of techniques and explored the possibility of combining these techniques using the learning to rank model [22]. In contrast, previous work usually considers techniques in one or a few families [23], e.g., combining different formulae in SBFL [24] or combining SBFL and history-based techniques [25], and our work, CombineFL, is the first to explore combinations of a wide range of techniques that rely on different information sources.\n\nThe second novelty is that we measured the time cost of different fault localization techniques. Existing studies have shown that efficiency and scalability are both critical to the adoption of fault localization techniques [16]. Thus, a good fault localization approach must balance between localization performance and cost. We have considered different usage scenarios to find the best balance in practice.\n\nWe also improved the measurement of fault localization performance by designing a new measurement E inspect that calculates the expected rank when multiple faulty elements are presented in ties.\n\nFinally, we have released our experimental infrastructure CombineFL-core and the fault localization data of the studied techniques, which can be used by other researchers to evaluate fault localization techniques and to combine different fault localization techniques.\n\n\narXiv:1803.09939v2 [cs.SE] 7 Jan 2019\n\nOur study has the following main findings:\n\n\u2022 On real-world faults, all techniques except for Bugspots and BugLocator localize more than 6% of faults in the top 10. The best family, SBFL, localizes about 44% faults of in the top 10.\n\n\u2022 Most techniques in our study are weakly correlated with each another, especially those in different families, indicating the potential of combining them.\n\n\u2022 CombineFL improves performance significantly: 200/63/51/31% increase in localized faults in the top 1/3/5/10, compared to the best standalone technique.\n\n\u2022 CombineFL also outperforms the four state-of-theart fault localization approaches, MULTRIC [24], Savant [26], FLUCCS [25], and TraPT [27] by 133%, 167%, 11% and 18% in Top 1 correspondingly.\n\n\u2022 Time costs of different fault localization families can be categorized into several levels. When using a technique at one time cost level, it does not affect run time to include all techniques from the preceding levels, but it does improve fault localization effectiveness.\n\n\u2022 The above findings hold at both statement and method granularities -that is, when the FL technique is identifying suspicious statements and when it is identifying suspicious methods.\n\nTo sum up, the paper makes the following contributions.\n\n\n\u2022\n\nThe first empirical study that compares a wide range of fault localization techniques on real faults.\n\n\u2022 A combined technique, CombineFL, which is configurable based on the time cost, and the peak performance of the technique significantly outperforms standalone techniques.\n\n\u2022 An infrastructure, CombineFL-core, for evaluating and combining fault localization techniques for future research.\n\nThe rest of the paper is organized as follows. Section 2 presents background about several fault localization families. Section 3 gives the empirical evaluation methodology. Section 4 shows the experiment results and answers the research questions. Section 5 discusses related research. Section 6 discusses the implications for future research. Section 7 concludes.\n\n\nBACKGROUND\n\nCommonly, a fault localization technique takes as input a faulty program and a set of test cases with at least one failed test, and it generates as output a potentially ranked list of suspicious program elements. Recently, some approaches [11], [13], [28] considered other input information, such as the bug report or the development history. This paper also considers these approaches. The common levels of granularity for program elements are statements, methods, and files. This paper uses statements as program elements, except for Sections 4.5 and 4.6 which compare results for different granularities.\n\nThis section first introduces seven families of fault localization techniques, and then introduces the learning to rank model for combining different techniques. \n\n\nSpectrum-Based Fault Localization\n\nA program spectrum is a measurement of run-time behavior, such as code coverage [3]. Collofello and Cousins proposed that program spectra be used for fault localization [29]. Comparing program spectra on passed and failed test cases enable ranking of program elements. The more frequently an element is executed in failed tests, and the less frequently it is executed in passed tests, the more suspicious the element is.\n\nTypically, an SBFL approach calculates suspiciousness scores using a ranking metric [30], [31], [32], or risk evaluation formula [1], [33], based on four values collected from the executions of the tests, as shown in Table 1. For example, Ochiai [2] and DStar [34] are effective SBFL techniques [17], [33], [35] using the formulas:\nOchiai (element) = e f (e f + n f ) \u00b7 (e f + e p ) DStar (element) = e * f e p + n f\nDStar's notation '*' is a variable, which we set to 2 based on the recommendation from Wong et al. [34].\n\n\nMutation-Based Fault Localization\n\nMutation-based fault localization uses information from mutation analysis [36], rather than from regular program execution, as inputs to its ranking metric or risk evaluation formula. While SBFL techniques consider whether a statement is executed or not, MBFL techniques consider whether the execution of a statement affects the result of a test by injecting mutants. A mutant typically changes one expression or statement by replacing one operand or expression with another [17]. If a program statement affects failed tests more frequently and affects passed tests more rarely, it is more suspicious. For a statement s, a MBFL technique:\n\n\u2022 generates a set of mutants m(s) = m 1 (s), m 2 (s), ... ,\n\n\u2022 assigns each mutant a score S mutant (m i (s)), and \u2022 aggregates the scores to a statement suspiciousness score S statement (s).\n\nMUSE [5] and Metallaxis-FL [4] are two state-of-the-art MBFL techniques.\n\nMUSE assigns each mutant a suspiciousness score as follows:\nS mutant (m i ) = failed (m i ) \u2212 f 2p p2f \u00b7 passed (m i )\nwhere failed (m i ) is the number of test cases that failed on the original program but now pass on a mutant m i , and likewise for passed (m i ). f 2p is the number of test cases that change from fail to pass on any mutant, and likewise for p2f . To aggregate mutant suspiciousness scores into a statement suspiciousness score, MUSE uses S statement (s) = Avg mi\u2208m(s) S mutant (m i ).\n\nMetallaxis assigns each mutant a suspiciousness score using the Ochiai formula:\nS mutant (m i ) = failed (m i ) totalfailed \u00b7 (failed (m i ) + passed (m i ))\nwhere failed (m i ) is the number of test cases that failed on the original program and now the output changes on a mutant m i , and similarly for passed (m i ). totalfailed is the total number of test cases that fail on the original program. A mutant is said to be killed by a test case if the test case has different execution results on the mutated program and the original program [37]. A test case that kills mutants may carry diagnostic information. Note that the definition of killed in MUSE and Metallaxis is different. In MUSE, a failed test case must change to passed to count as killing a mutant. In Metallaxis, a failed test case only needs to generate a different output (may still be failed) to count as killing a mutant.\n\n\nProgram Slicing\n\nA slicing criterion is a set of variables at a program location; for example, they might be variables that have unexpected or undesired values. A program slice is a subset of program elements that potentially affect the slicing criterion [38].\n\nProgram slicing was introduced as a debugging tool to reduce a program to a minimal form while still maintaining a given behavior [39]. Static slicing only uses the source code and accounts for all possible executions of the program.\n\nDynamic slicing focuses on one execution for a specific input [40]. The key difference between dynamic slicing and static slicing is that dynamic slicing only includes executed statements for the specific input, but static slicing includes possibly-executed statements for all potential inputs. Since dynamic slices are significantly smaller, they are more suitable and effective for program debugging [41].\n\nThe following example shows the difference between static slicing and dynamic slicing.\nint collatz(int x) { 1: int res; 2: if ((x % 2) == 0) 3:\nres = x / 2; 4: else 5: res = x * 3 + 1; 6: return res; }\n\nThe collatz function returns x/2 when x is even and returns 3x + 1 when x is odd. Let the slicing criterion be res at line 6. Static slicing includes statements in both the then and else block, because both may affect the value of res. Dynamic slicing considers a particular execution of the program. For example, for x=3, the dynamic slice would contain line 5, but would not contain line 3.\n\n\nStack trace Analysis\n\nA stack trace is the list of active stack frames during execution of a program. Each stack frame corresponds to a function call that has not yet returned. Stack traces are useful information sources for developers during debugging tasks. When the system crashes, the stack trace indicates the currently active function calls and the point where the crash occurred.\n\n\nPredicate Switching\n\nPredicate switching [10] is a fault localization technique designed for faults related to control flow. A predicate, or conditional expression, controls the execution of different branches. If a failed test case can be changed to a passed test case by modifying the evaluated result of a predicate, the predicate is called a critical predicate and may be the root cause of the fault.\n\nThe technique first traces the execution of the failed test and identifies all instances of branch predicates. Then it repeatedly re-runs the test, forcibly switching the outcome of a different predicate each time. If switching a predicate produces the correct output, the predicate is potentially the cause of the fault and is called a critical predicate.\n\nPredicate switching is similar to MBFL techniques, as they both apply mutations and examine the change of the execution results. We treat predicate switching as a different family because predicate switching mutates the control flow rather than the program itself. For example, if a conditional expression has been evaluated multiple times during the program execution, predicate switching inverses one evaluation at a time instead of all evaluations. Furthermore, previous work [17], [27] does not include predicate switching as an MBFL approach as far as we are aware.\n\n\nInformation Retrieval-Based Fault Localization\n\nInformation Retrieval (IR) was initially used to index text and search for documents [42]. Recent studies [11], [28], [43], [44] have applied information retrieval techniques to fault localization. These approaches take as input a bug report, rather than a set of test cases, and generate as output a list of relevant source code files [45].\n\nThese approaches treat the bug reports as a query and then rank the source code files by their relevance to the query. Unlike aforementioned fault localization families, IRbased fault localization techniques do not require program execution information, such as passed and failed test cases. They locate relevant files based on the bug report [11].\n\n\nHistory-Based Fault Localization\n\nProgram files that contained more bugs in the past are likely to have more bugs in the future [46]. Development history can be used for fault prediction, which ranks the elements in a program by their likelihood to be defective. Traditionally, fault prediction and fault localization are considered as different problems, and fault prediction runs before any failure has been discovered [12]. However, since they both produce a list of suspicious elements, this paper also considers fault prediction techniques.\n\nWe consider a simple fault prediction technique introduced by Rahman et al. [13]. This technique ranks files by the number of fixing changes applied on them. This simple technique has the same utility for inspections as a more sophisticated fault prediction technique, FixCache [12].\n\n\nLearning to Rank\n\nLearning to rank techniques train a machine learning model for a ranking task [47]. Learning to rank is widely used in Information Retrieval (IR) and Natural Language Processing (NLP) [48]. For example, in document retrieval, the task is to sort documents by their relevance to a query. One way to create the ranking model is with expert knowledge. By contrast, learning to rank techniques improve ranking performance and automatically create the ranking model, integrating many features (or signals).\n\nLiu categorized learning to rank models into three groups [48]. Pointwise techniques transform the rank problem into a regression or ordinal classification problem for the ordinal score in the training data. Pairwise techniques approximate the problem by a classification problem: creating a classifier for classifying item pairs according to their ordinal position. The goal of pairwise techniques is to minimize ordinal inversions. Listwise techniques take ranking lists as input and evaluate the ranking lists directly by the loss functions.\n\nRecently, Xuan and Monperrus showed that learning to rank model can be used to combine different formulae in SBFL [24]. The basic idea is to treat the suspiciousness score produced by different formulae as features and use learning to rank to find a model that ranks the faulty element as high as possible. In this paper we apply learning to rank similarly to combine techniques from different families.\n\n\nEXPERIMENTAL METHODOLOGY\n\n\nExperiment Overview and Research Questions\n\nOur experiments investigate the following research questions.\n\n\nRQ1: How effective are the standalone fault localization techniques?\n\nThis question helps us to understand the performance of widely-used techniques.\n\n\nRQ2:\n\nAre these techniques correlated? What is their correlation?\n\nThis question explores the possibility of combining different techniques. If different techniques are not correlated, then combining them may archive better performance.\n\n\nRQ3:\n\nHow effectively can we combine these techniques using learning to rank?\n\nThis question considers a specific way of combining different techniques, and evaluates the performance of the combined technique.\n\n\nRQ4:\n\nWhat is the run-time cost of standalone techniques and combined techniques?\n\nThe previous question only concerns the effectiveness of the combined techniques. This question considers the efficiency. The best technique for a given use case balances effectiveness and efficiency. \n\n\nRQ5:\n\nAre the results the same for statement and method granularity?\n\nWe shall answer the preceding four questions first at statement granularity, which is often used in evaluating fault localization approaches [33], [49], [50], [51] and in downstream applications such as program repair [52], [53], [54]. On the other hand, several studies have suggested that methods may be a better granularity for developers [26], [55], so we repeated the experiments for the above questions at the method granularity.\n\n\nRQ6:\n\nHow effective the combined approach is when compared with the state-of-the-art techniques?\n\nRecently, a set of new fault localization approaches were proposed. Interestingly, they also use learning to rank to combine existing techniques or other features. This research question compares the performance of our combined approach to these approaches.\n\n\nExperimental Subjects\n\nOur experiments evaluate fault localization techniques on the Defects4J [21] benchmark, version v1.0.1 ( Table 2). De-fects4J contains 357 faults minimized from real-world faults in five open-source Java projects. Many previous studies on fault localization used Defects4J as their benchmarks [17], [26], [56]. For each fault, Defects4J provides a faulty version of the project, a fixed version of the project, and a suite of test cases that contains at least one failed test case that triggers the fault.\n\n\nStudied Techniques and Their Implementations\n\nA fault localization technique outputs one of the following:\n\n\u2022 A ranked list. Examples include the SBFL, MBFL, stack trace, and history-based families, and one slicing technique.\n\n\u2022 A suspicious set. The techniques do not distinguish the suspiciousness between these elements. Examples include the predicate switching family and some slicing techniques.\n\n\nSBFL and MBFL\n\nPearson et al. [17] studied the performance of SBFL and MBFL on Defects4j, and our experiments reuse their infrastructure and the collected test coverage information. For SBFL, we used only the two techniques that performed best in Pearson et al.'s study: Ochiai [2] and DStar [34]. The parameter * in DStar is set to 2. For MBFL, we used the two mainstream MBFL techniques, MUSE [5] and Metallaxis [4]. The formulae for calculating the suspiciousness are introduced in Sections 2.1 and 2.2.\n\n\nDynamic Slicing\n\nThe JavaSlicer dynamic slicing tool [57] is based on the dynamic slicing algorithm of Wang and Roychoudhury [58], [59], with extensions for object-oriented programs. The JavaSlicer implementation attaches to the program as a Java agent and rewrites classes as they are loaded into the Java VM.\n\nA test fails by throwing an exception, either because of a violated assertion or a run-time crash. If there is only a single failed test, we use the execution of the statement that throws the exception as the slicing criterion. The slice then contains all statements that may have affected the statement that throws the exception.\n\nIf there are multiple failed tests, our experiments apply three strategies from a previous study [60] to utilize multiple slices: union, intersection, and frequency. The first two strategies calculate the union or the intersection of the slices and report a set of statements as results. The frequency strategy calculates the inclusion frequency for each statement and reports a ranked list of statements based on the frequency. The more frequently a statement is included in the slice of a failed test, the more suspicious the statement is.\n\n\nStack Trace Analysis\n\nAccording to Schroter et al. [61], if the stack trace includes the faulty method around 40% of the faults can be located in the very first frame, and 90% of the faults can be located within the top 10 stack frames.\n\nWe defined a stack trace technique based on this insight. If the exception is thrown by the testing framework (such as JUnit), then the technique returns an empty suspicious list. Otherwise, we call the fault a crash fault and the suspicious list consists of the frames in the stack trace. The frame at depth d is given suspiciousness score 1/d score. The score of an element (method) is its maximum score in all failed tests.\n\n\nPredicate Switching\n\nWe re-implemented Zhang et al.'s method of predicate switching for Java (the original implementation was for x86/x64 Linux binaries) [10]. Our implementation of the technique is based on Eclipse Java development tools (JDT). The technique first traces the execution of the failed test case and records all executed predicates. Then it forcibly switches the outcome of a predicate at run time. Once switching a predicate makes the failed test case pass, it reports the predicate as a critical predicate. The technique produces a set of critical predicates as the suspicious program elements.\n\n\nIR-based Fault Localization\n\nBugLocator [11] ranks all files based on the textual similarity between the initial bug report and the source code file using a revised Vector Space Model (rSVM).\n\nSince the granularity in BugLocator is source file, our implementation uses the file score for all statements in it.\n\nFor example, if BugLocator reports that file1.java has suspiciousness score 0.2, then it marks every executable statement in file1.java with suspiciousness score 0.2.\n\n\nHistory-Based Fault Localization\n\nBugspots 2 is an implementation of Rahman et al.'s algorithm [13]. Bugspots collects revision control changes with descriptions related to 'fix' or 'close'. The tool ranks more recent bug-fixing changes higher than older ones. the granularity in Bugspots is source file. Our implementation maps the score of a suspicious file to all executable statements as in Section 3.3.5.\n\nBugspots supports only Git repositories. However, the version control system of Chart in Defects4J uses a private format of Subversion and neither git-svn 3 nor svn2git 4 can convert this format. As a result, our experiments apply Bugspots on the Math, Lang, Time, and Closure projects.\n\n\nLearning to Rank\n\nFor the learning to rank model, our experiments associate each program statement with a vector\nSuspiciousness(e) = s t1 (e), s t2 (e), ...\nwhere e is a program element, and s ti (e) is the suspiciousness score of e reported by technique t i . The vector values are normalized to be within the domain [0, 1], where 1 is most suspicious and 0 is least suspicious.\n\nThen our experiments apply rankSVM [62] to train the learning to rank model. RankSVM is an open-source learning to rank tool based on LIBSVM [63]. It implements a pairwise learning to rank model and has been used in previous fault localization work [25], [26]. It generates pairwise constraints, e.g., e faulty i > e correct j , and the training goal is to rank the faulty elements at the top, i.e., maximize satisfied pairwise constraints.\n\n\nMeasurements\n\nTo evaluate fault localization techniques, we need to measure their performance quantitatively. Previous studies use similar metrics for this measurement, but they may differ in how they handle cases such as insertion or multiple faulty elements. This section describes the measurement methods used in our study.\n\n\nDetermining Faulty Elements\n\nTo understand how faulty elements are ranked, we need first to determine which elements in the program are faulty. Following common practice [17], [25], [26], we define the faulty program elements as those modified or deleted in the developer patch 5 that fixes the defect. In the following example patch, i.e., the diff between the fixed and the faulty program, the second line is considered faulty. However, sometimes a developer patch only inserts new elements rather than modifies or deletes old elements. To deal with insertions, we follow the principle used by Pearson et al. [17]: a fault localization technique should report the element immediately following the inserted element. The rationale is that the immediately following element indicates the location that a developer should change to fix the defect.\n\n\nMultiple Faulty Elements\n\nMany defective programs have multiple defective elements.\n\nIn Defects4J, there are two common reasons for multiple faulty elements.\n\n\u2022 To repair a fault, the programmer changed multiple elements.\n\n\u2022 The patch of a fault not only repairs the current fault but also repairs cloned bugs, i.e., the same bug in cloned code snippets.\n\nFollowing existing work [17], we consider a fault to be localized by a fault localization technique if any faulty element is localized. It is assumed that if a fault localization technique gives any of the faulty elements, the developer can deduce the other faulty elements. Furthermore, when multiple cloned bugs exist, the developer can re-run fault localization to find the others or can use techniques for repairing cloned bugs [64], [65] to discover and fix other bugs.\n\n\nElements with the Same Score\n\nFault localization techniques often assign the same suspiciousness score to elements, either because the techniques are designed to only locate elements but not to rank them (e.g., union strategy in slicing), or because the techniques cannot distinguish some elements (e.g., statements in a basic block in SBFL). When presenting the suspicious list to the user, the elements with the same score are presented in an arbitrary order, and thus we need to consider the order when measuring the performance.\n\nPrevious studies [17], [45], [66] treat elements with the same score as all the nth element in the list, where n is their average rank. However, this method may unnecessarily lower their ranks when multiple faulty elements exist. For example, suppose a set of tied elements are all faulty. Then regardless how this set is sorted, the user will find a faulty element at the first element in the set, rather than at the average rank.\n\nTo overcome this problem, in our study we measure the performance of a fault localization by the expected rank of the first faulty element, assuming tied elements are arbitrarily sorted. More concretely, assuming a group of t tied elements starting at P start that contains t f faulty elements and there is no faulty element before P start , we define E inspect , which measures the expected rank of the first faulty element using the following formula.\nE inspect = P start + t\u2212t f k=1 k t\u2212k\u22121 t f \u22121 t t f\nThe equation within the summation is the probability for the top-ranked faulty element to appear in the kth location after P start : that is, the number of all combinations where the first faulty element is at k ( t\u2212k\u22121 t f \u22121 ) divided by the number of all combinations ( t t f ). Notice that, when there is only one faulty element, i.e., t f = 1, the equation reduces to:\nE inspect = P start + t \u2212 1 2\nwhich is the same as average rank, also average accuracy, in existing studies [26], [27]. Also, when all tied elements are faulty, i.e., t f = t, the equation reduces to:\nE inspect = P start\nwhich indicates the first element in the tied set.\n\n\nMetrics\n\nSo far we have defined how to calculate the expected rank of the first faulty element. Based on this definition we use two metrics to measure the performance of a fault localization technique.\n\nE inspect @n counts the number of the 357 faults that were successfully localized within the top n positions of the resultant ranked lists, i.e., the number of faults that E inspect values on these faults are less than or equal to n. It is adapted from metric acc@n [26], [27]. A previous study [14] suggested that programmers will only inspect the top few positions in a ranked list, and E inspect @n reflects this.\n\nEXAM [67] is the percentage of elements that have to be inspected until finding a faulty element, averaged across all 357 faults uniformly. It is a commonly used metric for fault localization techniques [17], [30], [68]. The EXAM score measures the relative position of the faulty element in the ranked list. Smaller EXAM scores are better.\n\nThe E inspect @n metric is a more meaningful measure of fault localization quality than the EXAM score. A developer will only examine the first few reports from a tool (say, 5 or 10) and a program repair tool will only examine the first 200 or so reports. Therefore, any reports other than these are irrelevant and can be disregarded, yet they are most of the reports and dominate the EXAM score. This paper includes the EXAM score to enable comparison with earlier papers.\n\n\nEXPERIMENT RESULTS\n\nOur experiments investigate and answer six research questions. The granularity of all experiments is statements, except in Sections 4.5 and 4.6.  Table 3 shows the E inspect @n and EXAM of each standalone technique.  Bugspots did not locate any fault in its top-10 statements and BugLocator did not locate any fault in its top-5 statements. A possible reason is that the two techniques works at the file granularity and all statements in a file will be tied. Even if the faulty statement is in the identified file, the statement will be tied with many other statements and will not be ranked high. Stack trace analysis only works on crash faults (Section 3.3.3). In the Defects4J dataset, 25% of the faults (90 out of 357) are crash faults, including application-defined exceptions, out of memory errors, and stack overflow errors. Table 4 shows that stack trace analysis locates 22% of crash faults (20 out of 90) at top-1. By contrast, the second best technique on these crash faults is Metallaxis, which identifies 11% of faults (10 out of 90) at top-1. This finding indicates that the stack trace is a vital information source for  crash faults. It is also consistent with debugging scenarios in practice: when a program crashes, the developer often starts by examining the stack trace.\n\n\nResults and Findings\n\n\nFinding 1.4:\n\nPredicate switching is not the most effective technique on \"predicate-related\" faults. A predicate-related fault is one whose patch modifies the predicate in a conditional statement. In the Defects4J dataset, 32% of the faults are predicate-related faults. Table 5 shows the performance of each standalone technique on predicate-related faults. It was surprising to us that MBFL family works better than predicate switching on predicaterelated faults. When working on predicates, MBFL and predicate switching have similar mechanisms. They both modify the predicates and check whether the execution result changes. Predicate switching may underperform MBFL because MBFL can further rank the critical predicates (modifying which can change the execution result) while predicate switching cannot.\n\n\nRQ2. Correlation between Techniques\n\nThis research question explores the possibility of combining different techniques. Two techniques are (positively) correlated if they are good at localizing the same sorts of faults. If two techniques are less correlated, they may provide different information, and combining them has the potential to outperform either of the component techniques.\n\n\nProcedure\n\nFirst, to visually illustrate the correlation between techniques, we drew the results of each pair of techniques as a scatter plot. Each figure has 357 points, one for each fault in our dataset. The coordinate (x, y) for a fault means on this fault, the E inspect for technique on X-axis is x, and the E inspect for technique on Y-axis is y.\n\nTo quantify the correlation between each pair of techniques, we computed coefficient of determination r 2 , which measures of the linear correlation between two variables [69]. Recall that a developer will only examine the first few reports from a tool (say, 5 or 10) and a program repair tool will only examine the first 200 or so reports. When computing the correlation, we used all points such that x \u2264 q or y \u2264 q, for threshold q = 100. We also computed the p-value, to determine whether the correlation coefficient is statistically significant. Figure 1's scatter plots visualize the correlation between three sample pairs of techniques. The three pairs capture typical patterns of the plots, and we omit the rest of the plots as they are similar to one of the three plots. In Fig. 1 (A), most points lie on the diagonal. This distribution pattern means the two SBFL techniques, Ochiai and DStar, have almost the same E inspect values on all faults. The two techniques are very correlated and each is unlikely to provide more information than the other.\n\n\nQualitative Results\n\nIn Fig. 1 (B), there are many faults located in upperleft and lower-right regions, which correspond to faults that one technique works well on, while the other works poorly. These faults suggest that the two techniques are not positively correlated.\n\nThe dots in Fig. 1 (C) are located on the diagonal in the upper right region, but they are scattered in other regions. This pattern indicates that there are a set of faults where both techniques perform poorly, but there are also many faults where one technique performs well but the other does not. Table 6 shows the coefficient of determination, r 2 , between each pair of techniques. Different from Fig. 1, which is a logscale plot, this experiment calculates r 2 based on E inspect , without log-scale normalization. Notice that the table is a symmetric matrix. In Table 6, there are 55 pairs of different techniques. Only two of them are significantly correlated at p-value less than 0.05 level: Ochiai, DStar from SBFL, with r 2 = 0.753, p-value 0.01, and union, frequency from slicing, with r 2 = 0.310, p-value 0.01. The r 2 values in other pairs of techniques are much smaller, and the p-values of them are larger than 0.05, which suggests that there is no statistically significant correlation between other pairs of techniques, at least for the reports that a programmer or tool may view.\n\n\nQuantitative Results\n\nTwo techniques may provide different information when they are less correlated. Since there exist many weakly correlated pairs, if a method could utilize the information from different techniques, it may improve the effectiveness of fault localization.\n\n\nFinding 2.3:\n\nThe strongly correlated techniques only exist in the same family, but not all techniques in the same family are strongly correlated.\n\nThe most correlated pair of techniques, Ochiai and DStar, is from the SBFL family. The second most correlated pair is from the slicing family. However, not all techniques from the same family are strongly correlated. For example, the two from MBFL family are weakly correlated, and so is intersection with other slicing techniques. This finding suggests that though it may be less promising to combine techniques from the same family, it is still worth investigating.\n\n\nRQ3. Effectiveness of Combining Techniques\n\nSection 4.2 indicates that the techniques are potentially complementary to each other. This section applies the learning to rank model to combine techniques.\n\n\nProcedure\n\nOur experiments perform cross-validation to evaluate the ranking model. Cross-validation estimates model performance without losing modeling or test capability despite small data size. In particular, we used two cross-validation methods.  \u2022 k-fold validation. This simulates within-project training. The original data were randomly split into k different sets of the same size and the trainingvalidation is performed k times, each time training on k-1 sets and validating on the other set. We set k = 10 in our experiment.\n\n\u2022 Cross-project validation. This simulates cross-project training. We treat one project as the test set and the other projects as the training sets, and repeat the process for each project.\n\nWe performed two sets of experiments to evaluate the combined technique.\n\n\n\u2022\n\nThe first experiment measured the performance of combining all techniques.\n\n\n\u2022\n\nThe second experiment evaluated the contribution of each fault localization family. We excluded one family at a time and repeated the learning to rank procedure.  Table 7 shows the results of the first experiment on validation methods. The evaluation results of the two validation methods are similar. Both of the two validation methods indicate that the combined technique significantly outperforms any standalone techniques in Table 3. These results suggest that the learning to rank model we used has good generalizability across different projects. Since the performances of the two methods are close, the rest of the paper reports only 10-fold validation. \n\n\nResults and Findings\n\n\nFinding 3.2:\n\nThe combined technique significantly outperforms any standalone technique. Table 8 shows the results of the two experiments on combined techniques. The All Families row presents the results of the first experiment, i.e., the results of combining all families. The next rows present the results of the second experiment, where each row shows the performance of excluding one family at a time. The reduction of excluding a family is marked after the E inspect value.\n\nThe combined technique in the All families row is significantly better than any standalone techniques. At E inspect @1, 3, 5, 10, the combined technique improves 200%, 63%, 46% and 31% over the former best, respectively. At EXAM, it improves from 0.033 to 0.0173, an improvement of 48% from the former best. These results indicate that learning to rank is an effective method to combine different fault localization techniques and the performance of the combined technique is significantly improved.    Table 8 shows that removing any family decreases all metrics. Bugspots, which does not rank any faulty element into the top 10 when used alone, slightly improved all E inspect @n values when combined with other techniques.\n\n\nRQ4. Time Consumption and Combination Strategy\n\nThis research question measures the run-time cost of each technique. Furthermore, we explored the optimal combination strategy under different time limitations, corresponding to various debugging scenarios.\n\n\nProcedure\n\nWe designed two experiments. The first experiment measured the time consumption for each fault localization technique. We also measured the run time for the learning to rank model, which indicates the combination overhead. The second experiment combined fault localization families one by one and measured the execution time and the performance of the combined technique in order to find optimal combinations under different time limits.\n\nOur experiments include or exclude an entire family at a time, rather than including/excluding specific techniques. The reason is that for each family, all techniques use the same raw data. Once the raw data is collected, the overhead for applying an extra technique from the same family is only re-calculating the scores and re-ranking the program elements, which is negligible. Table 9 shows the time consumption for each technique. The average column presents the average time consumed per fault over the whole dataset, and the project name columns present the run time for the specific project. The learning to rank row at the bottom of Table 9 shows the overhead for the training procedure, which costs around 10 seconds on average. The combination time is always less than a second except that it is 28 seconds for Closure. A possible reason is Closure is a JavaScript compiler and FL techniques would generate a long suspicious list, which make the learning procedure takes longer run-time. Since the combination of techniques involves at least two different techniques, this result suggests the overhead introduced by learning to rank model is small.\n\n\nResults and Findings\n\n\nFinding 4.2:\n\nThe efficiency of families can be categorized into several levels with different orders of magnitude.\n\n\u2022 Level 1: history-based, stack trace, and IR-based. Bugspots is the fastest technique; it only needs to examine the development history. Stack trace is also a fast technique; it needs to execute the test cases, once. IR-based technique measures the textual similarity between the bug report and the source files, which takes a few seconds.\n\n\u2022 Level 2: slicing and SBFL. The slicing and SBFL families have similar mechanisms. They need to trace the execution of test cases, once. The main difference that affects the efficiency is that SBFL needs to trace all the test cases while slicing only needs to trace failed test cases.\n\n\u2022 Level 3: predicate switching. Predicate switching is slower than the above families; it needs to modify predicates in the program and execute test cases multiple times.  sults. Therefore, all techniques in preceding levels should be included. Table 10 shows the combinations at different time consumption levels, and the estimated time consumption. If more than one family is included, the estimated time consumption is the running time for each family and the training time for learning to rank. For each level, we merged the corresponding families into the preceding time levels one by one. Table 10 shows that performance is significantly improved from level 1 to level 2. This result means slicing and SBFL brings vital information to the combined technique. It is also notably improved from level 3 to level 4, which means MBFL brings useful information to the combined technique, but it is also very costly.\n\nUsing Table 10, developers can pick the best combination of techniques based on their use case. If the fault is a crash fault, the developer may try level 1 first, which gives the result instantly and is effective for crash bugs. For other real-time debugging, developers should try the combination at level 2, which only takes a few minutes. Since level 3 is three times as expensive as level 2 but the results are barely different, a developer would never choose to run level 3. If a developer debugs for more than a few minutes, it makes sense to run level 4 in the background and examine its results as soon as they are available, since CPU costs are much lower than human time. \n\n\nRQ5. Results at Method Granularity\n\nSections 4.1 to 4.4 answered the RQs at statement granularity. Some other studies have suggested that method may be a better granularity for developers [26], [55]. We repeated the previous experiments at method granularity and checked whether the answers still hold.\n\nThe suspiciousness score for a method is defined as the maximum score of its statements.\n\n\nResults and Findings\n\nFinding 5.1: The main findings in RQ1 and RQ3 still hold at method granularity.   Table 11 shows the E inspect @n and EXAM for each technique. The EXAM here presents the percentage of methods needed to inspect before finding the faulty one. The findings in RQ1 still hold at method granularity:\n\n\u2022 SBFL is the most effective fault localization family. Ochiai and DStar have the best performance on all metrics.\n\n\u2022 Stack trace is the most effective technique on crash faults. Based on 88 crash faults, stack trace can locate 44% of them at top-1, and 83% at top-10, which is consistent with the previous study [61].\n\n\u2022 The relative performance between techniques have no significant changes. Table 12 shows the results of the learning to rank model. The results are significantly improved from standalone techniques in Table 11, which is consistent with the main findings in RQ3.  [26] 63 -TraPT [27] 142 -FLUCCS [25] -106\n\n\nRQ6. Comparison with State-of-the-Art Techniques\n\nOther recent learning to rank approaches [24], [25], [26], [27] improve the performance of fault localization by combining techniques in one family or by augmenting one family with additional information. We compared our approach with these techniques. A detailed discussion of the compared techniques can be found in Section 5.1.\n\nWe obtained the performance of the compared approaches on Defects4J from previous publications [25], [26], [27]. Three of them (MULTRIC, Savant, TraPT) were evaluated on the whole dataset of Defects4J, while FLUCCS was evaluated on a subset of Defects4J containing 210 faults. To compare with FLUCCS, we also performed a cross-validation of our approach over the subset of 210 faults. All results of the compared approaches were obtained via cross-validation, where FLUCCS uses 10-fold crossvalidation, and MULTRIC, Savant, and TraPT use 357-fold cross-validation.\n\nThis paper used newly defined metrics E inspect at top-n and others used average rank at top-n. These two metrics are only equivalent when n = 1, so Table 13 shows that. All results are at the method granularity as all the compared approaches support only method granularity.\n\nThe result in Table 13 shows that CombineFL, which is the approach proposed in this paper, is significantly better than all these techniques. This result indicates that combining techniques from different families is an effective way to improve the performance of fault localization approaches. Furthermore, some information used in the compared approaches are not used in our approach, so we may further combine these techniques to achieve potentially better results in the future.\n\nNotice that the aforesaid discussion only compares the output between the approaches. In practice, the run-time cost is also an important metric when comparing approaches. For example, since FLUCCS does not include the mutation component, it might require significantly less execution time than CombineFL. However, the existing papers did not report the run-time cost of these approaches so a comparison is left for future work.\n\n\nRELATED WORK\n\nTo our knowledge, this paper is the first empirical study on a wide range of fault localization families.\n\n\nLearning to Combine\n\nSeveral studies have applied the learning to rank model to improve the effectiveness of fault localization techniques.\n\nXuan and Monperrus [24] proposed a learning-based approach, MULTRIC, to integrate 25 existing SBFL risk formulae. They conducted experiments on ten open-source Java programs with 5386 seeded (artificial) faults, and found that MULTRIC is more effective than theoretically optimal formulae studied by Xie et al. [1]. In this paper, we found that different techniques in SBFL family may contain strongly correlated information on real-world projects. To further improve the fault localization effectiveness, extra information sources should be introduced rather than only considering the SBFL family.\n\nLe et al. [26] presented Savant, which augmented SBFL with Daikon [70] invariants as an additional feature. They applied the learning to rank model to integrate SBFL techniques and invariant information. They evaluated Savant on real-world faults from the Defects4J [21] dataset and found that Savant outperforms the best four SBFL formulae, including MULTRIC.\n\nSohn and Yoo [25] proposed FLUCCS, which extended SBFL techniques with code change metrics. They applied two learning to rank techniques, Genetic Programming, and linear rank Support Vector Machines. They also evaluated FLUCCS on the Defects4J dataset and found FLUCCS exceeds state-of-the-art SBFL techniques.\n\nLi and Zhang [27] proposed TraPT, which used the learning to rank technique to extend MBFL with mutation information gathered from test code and messages. In their experiments, TraPT outperformed state-of-the-art MBFL and SBFL techniques.\n\nTo sum up, existing studies mainly focus on combining techniques in one family or augmenting one family with additional information. Compared with these studies, this paper is the first comprehensive and systematic study to combine a wide range of families. Our study includes eleven techniques from seven families, and we analyzed the contribution and the cost of each technique. The combined technique significantly outperforms any standalone technique. Nevertheless, we also observe that existing studies use some information that has not been considered in this paper. The additional information could further improve to the combined technique.\n\n\nEmpirical Studies on Fault Localization\n\nFault localization techniques have been extensively evaluated empirically.\n\nJones and Harrold [18] introduced the Tarantula SBFL technique and compared it with three other SBFL techniques based on test coverage (Set Union, Set Intersection, Nearest-Neighbor [7]) and with Cause Transitions [71] on the Siemens test suite [72]. They found that Tarantula is more effective and efficient than the other techniques.\n\nAbreu et al. [2] introduced Ochiai, another SBFL technique. They found that Ochiai outperforms two other SBFL techniques (Jaccard [73] and Tarantula [18]) on the Siemens test suite.\n\nLe et al. [74] also empirically evaluated several SBFL techniques on the Siemens test suite, to check whether the theoretically and practically best SBFL techniques match. This study suggested that Ochiai outperforms the theoretically optimal techniques by Xie et al. [1], because the optimality assumptions are unmet on their dataset.\n\nWong et al. [34] introduced DStar and compared over thirty SBFL techniques on nine different sets of programs, including Siemens test suite and several other projects. They found that DStar is more effective than all other techniques on all projects.\n\nPearson et al. [17] evaluated SBFL and MBFL techniques on both artificial and real-world faults to find whether the previous findings over artificial faults still hold on realworld faults. They identify several cases where results on artificial faults are different from those on real-world faults, indicating that experimenting over real-world faults is important. In other words, results from the Siemens test suite are not characteristic of real-world faults.\n\nZhang et al. [41] evaluated three dynamic slicing techniques on a set of real-world faults. They found that data slicing [75] is effective for memory related faults and full slicing [40] was adequate for other faults. None of the faults in their dataset required Relevant slicing [76], [77].\n\nTo sum up, existing studies mainly focus on evaluating techniques in one family, in particular, the SBFL family. Compared with these studies, our work evaluates a wide range of seven families. In addition, we also evaluate on large real-world projects and use a new metric to better measure elements with the same score. Finally, we also evaluate the combination of different techniques.\n\n\nIMPLICATIONS\n\nThis section highlights implications for future research in fault localization.\n\n\nEvaluating Fault Localization Techniques\n\nTraditionally, fault localization techniques are often used and evaluated individually. This paper shows that it is easy to combine even very different fault localization techniques. We recommend that users should not to use a technique standalone, but instead combine multiple techniques within a time limit.\n\nThis implies that, for researchers evaluating a fault localization technique, it is more important to understand how the technique contributes in combination with existing techniques, than understanding the performance of the technique in isolation. Understanding the combination includes two aspects: (1) how much this technique can contribute to the combination of all existing approaches, and (2) how much this technique can contribute to the combination within a specific time limit. That is, both effectiveness and efficiency should be considered.\n\n\nInfrastructure for Evaluating Fault Localization Techniques\n\nTo facilitate evaluation of future fault localization techniques, our infrastructure CombineFL-core and the fault localization data of the eleven studied fault localization techniques are available at https://damingz.github.io/ combinefl/index.html.\n\nGiven a user-selected combination of techniques, our infrastructure automatically calculates its E inspect and EXAM scores on Defects4J and measures the execution time. To integrate a new technique into the dataset, the user only needs to provide the suspiciousness scores for program elements in each defect, as well as the execution time, in a specific format. Then the combinations of the newly added technique with any other existing techniques are automatically supported. Both statement granularity and method granularity are supported.\n\n\nEfficiency\n\nIn the existing evaluation of fault localization approaches, efficiency often receives less attention than effectiveness. However, our study reveals that different techniques have huge differences in execution time, and some techniques are infeasible in certain use cases. Thus, efficiency is a critical issue that must be taken into consideration when evaluating fault localization techniques. Furthermore, optimizing the efficiency of fault localization techniques [78], [79] is an important research direction.\n\nOn the other hand, it is so far not clear how exactly efficiency affects the debugging performance of developers. This relates to questions such as: is it worthwhile to wait for the fault localization technique to produce a more accurate result or should the developer start with a less accurate result? Future work is needed to answer these questions.\n\n\nInformation Sources\n\nOur study reveals that, when two techniques use the same information source, their performance is similar. Thus, in fault localization research, it seems to be more promising to find new information sources than optimizing existing information sources. Recent studies [25], [26], [27] also confirm that integrating more information sources significantly outperforms any techniques in the SBFL family.\n\n\nMethods for Combining Approaches\n\nOur study used a learning to rank approach to combine different techniques. This approach treats different techniques as black boxes and combines the suspiciousness scores linearly. This simple approach has multiple limitations. First, treating different techniques as black boxes disallows finegrained combination. For example, different techniques may contain the same computations, but treating them as black boxes does not allow us to reuse these computations nor to utilize any intermediate results. Second, linear combination may not be optimal, and other possibilities are left to be explored. Third, this approach requires a training process, and how much the training data affect the effectiveness is yet unknown. These limitations call for new research on novel ways to combine different techniques as well as understanding more about the learning to rank approach.\n\n\nCONCLUSION\n\nThis paper investigates the performance of a wide range of fault localization techniques, including eleven techniques from seven families, on 357 real-world faults. We evaluated the effectiveness of each standalone fault localization technique. Then we applied learning to rank model to combine these fault localization techniques. Finally, we also measured the execution time. Our experiments included both statement and method granularities.\n\nThe combined techniques significantly outperform any standalone technique. Furthermore, different techniques have significant different execution time. Based on these findings, we recommend combining fault localization techniques grouped by different time cost levels, and future fault localization techniques should also be evaluated in this setting. To facilitate research and application, our infrastructure CombineFL-core and the fault localization data of the eleven fault localization techniques for evaluating and combining fault localization techniques is available at https://damingz.github.io/combinefl/index.html. suite reduction,\" SCIENCE CHINA Information Sciences, vol. 60, no. 9, p. 092112, 2017.\n\nDaming Zou received his B.S. degree in computer science and technology from Peking University. He is currently working toward the Ph.D. degree advised by Professor Lu Zhang and Professor Yingfei Xiong at Peking University. His research interests include software testing, software analysis, and program repair. \n\n\nJingjing\n\n\nMichael D. Ernst Michael Ernst is a Professor of Computer\n\nScience & Engineering at the University of Washington. Ernst's research aims to make software more reliable, more secure, and easier (and more fun!) to produce. His primary technical interests are in software engineering, programming languages, type theory, security, program analysis, bug prediction, testing, and verification. Ernst's research combines strong theoretical foundations with realistic experimentation, with an eye to changing the way that software developers work. Lu Zhang is a professor at the School of Electronics Engineering and Computer Science, Peking University, P.R. China. He received both PhD and BSc in Computer Science from Peking University in 2000 and 1995 respectively. He was a postdoctoral researcher in Oxford Brookes University and University of Liverpool, UK. He served on the program committees of many prestigious conferences, such FSE, OOPSLA, ISSTA, and ASE. He was a program co-chair of SCAM2008 and a program co-chair of ICSM17. He has been on the editorial boards of Journal of Software Maintenance and Evolution: Research and Practice and Software Testing, Verification and Reliability. His current research interests include software testing and analysis, program comprehension, software maintenance and evolution,software reuse and component-based software development, and service computing.\n\nFinding 1. 1 :\n1SBFL is the most effective standalone fault localization family in our experiments.Two techniques of SBFL, Ochiai and DStar, are the best and second best on E inspect @3, 5, 10 and EXAM. The two techniques locate 156 and 155 faults (about 44% of all faults) in the top 10 reports. SBFL may underperform at E inspect @1 because blocks are the minimum granularity that SBFL can identify. In a single execution, the statements in a basic block are all executed or not executed, so the elements in a basic block always have the same e f , e p , n f , n p values and the same score.\n\nFinding 1. 2 :\n2Bugspots and BugLocator are not as effective at localizing faulty statements as other techniques.\n\nFinding 1. 3 :\n3Stack trace is the most effective technique on crash faults.\n\nFig. 1 .\n1The Correlation of Three Example Pairs of Techniques. The X and Y values for a point show the E inspect values for two techniques on the same bug. E inspect is the expected rank of the first faulty element in the FL tool's output, or the number of elements that a user would have to inspect before inspecting a faulty element.\n\nFinding 2. 1 :\n1Different correlation patterns exist between different pairs of techniques.\n\nFinding 2. 2 :\n2Most techniques are weakly correlated, including all techniques in different families.\n\nFinding 3. 1 :\n1The two cross-validation methods yield similar evaluation results.\n\nFinding 3. 3 :\n3The contribution of each technique to the combined result is not determined by its effectiveness as a standalone technique.For example, while the IR-based family could not locate\n\nFinding 3. 4 :\n4All families contribute to the overall results.\n\nFinding 4. 1 :\n1The training time for learning to rank is small compared to the fault localization time.\n\n\u2022\nLevel 4: MBFL. MBFL is the slowest family; it needs to modify all possible statements in the program and execute test cases multiple times. Finding 4.3: Including preceding level families only slightly affects the time consumption but always improves the re-\n\nFinding 4. 4 :\n4Level 2 and Level 4 are two levels with good balance between effectiveness and efficiency, while Level 1 is a good choice for crash bugs.\n\n\nLiang is a Ph.D. Student advised by Professor Yingfei Xiong at Peking University. She received her B.S. degree in software engineering from East China Normal University. Her research interests are fault localization and program repair. Yingfei Xiong is an associate professor at Peking University. He got his Ph.D. degree from the University of Tokyo in 2009 and worked as a postdoctoral fellow at University of Waterloo between 2009 and 2011. His research interest is software engineering and programming languages.\n\nTABLE 1 Input\n1Values for Spectrum-Based Fault Localization e f Number of failed tests that execute the program element. ep Number of passed tests that execute the program element. n f Number of failed tests that do not execute the program element. np Number of passed tests that do not execute the program element.\n\nTABLE 2\n2Defects4J Dataset (version 1.0.1). 'Faults' is the number of defective \nversions of the program. 'LoC' is average lines of code for each buggy \nversion of the project, as reported by cloc 1 . \n\nProject \nFaults \nLoC \n\nApache Commons Math \n106 103.9k \nApache Commons Lang \n65 \n49.9k \nJoda-Time \n27 105.2k \nJFreeChart \n26 132.2k \nGoogle Closure compiler \n133 216.2k \n\nTotal \n357 138.0k \n\n\n\n\n2. https://github.com/igrigorik/bugspots 3. https://git-scm.com/docs/git-svn 4. https://github.com/nirvdrum/svn2git 5. In the Defects4J dataset, the developer patch has been minimized to eliminate changes unrelated to the bug fix.1 if (real == 0.0 && imaginary == 0.0) { \n2-\nreturn NaN; \n3+ \nreturn INF; \n4 } \n5 \n6 if (isInfinite) { \n7 \nreturn ZERO; \n8 } \n9 ... \n\n\n\nTABLE 3 The\n3Performance of Standalone Techniques on all 357 faults. Boldface indicates the best-performing techniques.Family \nTechnique \nEinspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\nSBFL \nOchiai \n16 (4%) \n81 (23%) \n111 (31%) 156 (44%) \n0.033 \nDStar \n17 (5%) \n84 (24%) 111 (31%) 155 (43%) \n0.033 \n\nMBFL \nMetallaxis 23 (6%) \n78 (22%) \n103 (29%) \n129 (36%) \n0.118 \nMUSE \n24 (7%) 44 (12%) \n58 (16%) \n68 (19%) \n0.304 \n\nslicing \n\nunion \n5 (1%) \n33 (9%) \n58 (16%) \n84 (24%) \n0.207 \nintersection 5 (1%) \n35 (10%) \n55 (15%) \n71 (20%) \n0.222 \nfrequency \n6 (2%) \n39 (11%) \n58 (16%) \n84 (24%) \n0.208 \n\nstack \ntrace \n\nstack \ntrace \n20 (6%) \n31 (9%) \n38 (11%) \n38 (11%) \n0.311 \n\npredicate \nswitching \n\npredicate \nswitching \n3 (1%) \n15 (4%) \n20 (6%) \n23 (6%) \n0.331 \n\nIR-based \nBugLocator 0 (0%) \n0 (0%) \n0 (0%) \n3 (1%) \n0.212 \n\nhistory-\nbased \nBugspots \n0 (0%) \n0 (0%) \n0 (0%) \n0 (0%) \n0.465 \n\n4.1 RQ1. Effectiveness of standalone techniques \n\n4.1.1 Procedure \nTo evaluate the effectiveness of standalone fault localization \ntechniques, we invoked each technique on Defects4J and \ncompared their E inspect @n and EXAM scores. The defini-\ntions of E inspect @n and EXAM are in Section 3.4.4. \n\n\n\nTABLE 4 The\n4Performance of Techniques on Crash Faults (90 out of 357 faults, \n25%) \n\nFamily \nTechnique \nEinspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\nSBFL \nOchiai \n4 (4%) \n17 (19%) \n32 (36%) \n50 (56%) \n0.028 \nDStar \n4 (4%) \n18 (20%) \n33 (37%) \n50 (56%) \n0.029 \n\nMBFL \nMetallaxis 10 (11%) \n30 (33%) \n35 (39%) \n44 (49%) \n0.083 \nMUSE \n6 (7%) \n13 (14%) \n18 (20%) \n19 (21%) \n0.345 \n\nslicing \n\nunion \n2 (2%) \n13 (14%) \n26 (29%) \n36 (40%) \n0.112 \nintersection 2 (2%) \n13 (14%) \n21 (23%) \n30 (33%) \n0.136 \nfrequency \n2 (2%) \n14 (16%) \n25 (28%) \n36 (40%) \n0.112 \n\nstack \ntrace \n\nstack \ntrace \n20 (22%) 31 (34%) 38 (42%) 38 (42%) \n0.194 \n\npredicate \nswitching \n\npredicate \nswitching \n1 (1%) \n5 (6%) \n8 (9%) \n9 (10%) \n0.323 \n\nIR-based \nBugLocator 0 (0%) \n0 (0%) \n0 (0%) \n0 (0%) \n0.199 \n\nhistory-\nbased \nBugspots \n0 (0%) \n0 (0%) \n0 (0%) \n0 (0%) \n0.433 \n\n\n\nTABLE 5 The\n5Performance of Techniques on Predicate-Related Faults (115 out of 357 faults, 32%)Family \nTechnique \nEinspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\nSBFL \nOchiai \n5 (4%) \n20 (17%) \n29 (25%) \n43 (37%) \n0.027 \nDStar \n5 (4%) \n21 (18%) \n30 (26%) \n43 (37%) \n0.028 \n\nMBFL \nMetallaxis 8 (7%) \n25 (22%) 34 (30%) 44 (38%) \n0.090 \nMUSE \n13 (11%) 24 (21%) \n32 (28%) \n35 (30%) \n0.174 \n\nslicing \n\nunion \n0 (0%) \n6 (5%) \n12 (10%) \n26 (23%) \n0.171 \nintersection 0 (0%) \n9 (8%) \n13 (11%) \n20 (17%) \n0.185 \nfrequency \n0 (0%) \n10 (9%) \n15 (13%) \n27 (23%) \n0.172 \n\nstack \ntrace \n\nstack \ntrace \n4 (3%) \n7 (6%) \n10 (9%) \n10 (9%) \n0.255 \n\npredicate \nswitching \n\npredicate \nswitching \n3 (3%) \n15 (13%) \n20 (17%) \n23 (20%) \n0.216 \n\nIR-based \nBugLocator 0 (0%) \n0 (0%) \n0 (0%) \n1 (0%) \n0.156 \n\nhistory-\nbased \nBugspots \n0 (0%) \n0 (0%) \n0 (0%) \n0 (0%) \n0.417 \n\n\n\nTABLE 6 r\n62 between Pairs of Techniques. The two pairs of statistically significantly correlated techniques (p-value < 0.05) are highlighted.Family \nSBFL \nMBFL \nslicing \nstack trace \npredicate \nswitching \nIR-based \nhistory-\nbased \n\nFamily \nTechnique \nOchiai DStar \nMetallaxis MUSE \nunion \nintersection frequency stack trace \npredicate \nswitching \nBugLocator Bugspots \n\nSBFL \nOchiai \n-\n0.753 \n0.001 \n0.005 \n0.000 \n0.001 \n0.001 \n0.000 \n0.001 \n0.001 \n0.000 \nDStar \n0.753 \n-\n0.001 \n0.004 \n0.000 \n0.000 \n0.000 \n0.000 \n0.001 \n0.001 \n0.000 \n\nMBFL \nMetallaxis \n0.001 \n0.001 \n1.000 \n0.002 \n0.008 \n0.005 \n0.005 \n0.004 \n0.003 \n0.003 \n0.001 \nMUSE \n0.005 \n0.004 \n0.002 \n1.000 \n0.012 \n0.013 \n0.013 \n0.015 \n0.009 \n0.015 \n0.024 \n\nslicing \n\nunion \n0.000 \n0.000 \n0.008 \n0.012 \n-\n0.004 \n0.310 \n0.009 \n0.010 \n0.003 \n0.000 \nintersection 0.001 \n0.000 \n0.005 \n0.013 \n0.004 \n-\n0.015 \n0.007 \n0.009 \n0.004 \n0.003 \nfrequency \n0.001 \n0.000 \n0.005 \n0.013 \n0.310 \n0.015 \n-\n0.005 \n0.009 \n0.003 \n0.000 \n\nstack trace \nstack trace \n0.000 \n0.000 \n0.004 \n0.015 \n0.009 \n0.007 \n0.005 \n-\n0.014 \n0.005 \n0.022 \n\npredicate \nswitching \n\npredicate \nswitching \n0.001 \n0.001 \n0.003 \n0.009 \n0.010 \n0.009 \n0.009 \n0.014 \n-\n0.007 \n0.026 \n\nIR-based \nBugLocator \n0.001 \n0.001 \n0.003 \n0.015 \n0.003 \n0.004 \n0.003 \n0.005 \n0.007 \n-\n0.009 \n\nhistory-\nbased \nBugspots \n0.000 \n0.000 \n0.001 \n0.024 \n0.000 \n0.003 \n0.000 \n0.022 \n0.026 \n0.009 \n-\n\n\n\nTABLE 7\n7Learning to Rank Results. Comparing cross project validation and k-fold validation.Validation Method \nEinspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\n10-fold \n72 (20%) 137 (38%) 168 (47%) 205 (57%) \n0.0173 \ncross project \n68 (19%) 130 (36%) 165 (46%) 197 (55%) \n0.0171 \n\n\n\nTABLE 8\n8Learning to Rank Results. Learning to rank is significantly better than any original technique. The reduction of excluding a family is marked after the E inspect value. The Ochiai, DStar, and MUSE rows are copied fromTable 3for comparison.Family / \nE inspect \nEXAM \nTechnique \n@1 \n@3 \n@5 \n@10 \n\nAll Families \n72 (20%) 137 (38%) 168 (47%) 205 (57%) 0.0173 \n\nw/o SBFL \n61 (-11) \n120 (-17) \n145 (-23) \n188 (-27) \n0.0225 \nw/o MBFL \n52 (-20) \n122 (-15) \n148 (-20) \n194 (-11) \n0.0206 \nw/o slicing \n58 (-14) \n129 (-8) \n165 (-3) \n201 (-4) \n0.0190 \nw/o stack trace \n63 (-9) \n133 (-4) \n161 (-7) \n199 (-6) \n0.0176 \nw/o predicate \nswitching \n68 (-4) \n136 (-1) \n165 (-3) \n198 (-7) \n0.0178 \n\nw/o IR-based \n66 (-6) \n134 (-3) \n162 (-6) \n194 (-11) \n0.0173 \nw/o history-based 71 (-1) \n136 (-1) \n167 (-1) \n203 (-2) \n0.0173 \n\nOchiai \n16 (4%) \n81(23%) \n111 (31%) 156 (44%) 0.033 \nDStar \n17 (5%) \n84 (24%) \n111 (31%) 155 (43%) 0.033 \nMUSE \n24 (7%) \n44 (12%) \n58 (16%) \n68 (19%) \n0.304 \n\n\n\nTABLE 9 Time\n9Consumption of Each Technique (in seconds, to 2 digits of precision)Time Level \nFamily \nTechnique \nAverage \nMath Lang \nTime Chart Closure \n\nLevel 1 (Seconds) \n\nhistory-\nbased \nBugspots \n0.54 \n0.66 \n0.22 \n0.20 \n-\n0.67 \n\nstack trace \nstack trace \n1.3 \n0.17 \n0.15 \n0.39 \n0.18 \n3.1 \n\nIR-based \nBugLocator \n5.6 \n6.6 \n4.3 \n4.7 \n4.6 \n5.8 \n\nLevel 2 (Minutes) \n\nslicing \n\nunion \n80 \n44 \n39 \n29 \n47 \n150 \nintersection \n80 \n44 \n39 \n29 \n47 \n150 \nfrequency \n80 \n44 \n39 \n29 \n47 \n150 \n\nSBFL \nOchiai \n200 \n86 \n26 \n85 \n44 \n430 \nDStar \n200 \n86 \n26 \n85 \n44 \n430 \n\nLevel 3 (Around ten minutes) \npredicate \nswitching \n\npredicate \nswitching \n620 \n170 \n73 \n1100 \n120 \n1200 \n\nLevel 4 (Hours) \nMBFL \nMetallaxis \n4800 \n3000 \n270 12000 \n5400 \n7000 \nMUSE \n4800 \n3000 \n270 12000 \n5400 \n7000 \n\n-\nlearning to rank \n11 \n0.32 0.082 \n0.68 \n0.42 \n28 \n\nany bugs in Top 1-5 and predicate switching can locate 3-20 \nbugs in Top 1-5, removing the IR-based family has a larger \nimpact than predicate switching in Top 1-5. This finding in-\ndicates that, when considering a fault localization technique, \nit is not enough to evaluate its individual performance: we \nneed to evaluate it in combination with other techniques. \n\n\n\nTABLE 10 Optimal\n10Strategies under Time Consumption LevelsTime Level \nTechnique \nEstimated Time \nE inspect \nEXAM \n(in seconds) \n@1 \n@3 \n@5 \n@10 \n\nLevel 1 \n\nhistory-based \n0.54 \n0 (0%) \n0 (0%) \n0 (0%) \n0 (0%) \n0.465 \nstack trace \n1.3 \n19 (5%) \n29 (8%) \n35 (10%) \n35 (10%) \n0.311 \nstack trace +history-based \n13 \n19 (5%) \n29 (8%) \n35 (10%) \n35 (10%) \n0.311 \nstack trace +history-based +IR-based \n19 \n25 (7%) \n42 (12%) \n53 (15%) \n63 (18%) \n0.0421 \n\nLevel 2 \n\nLevel 1 +slicing \n98 \n28 (8%) \n65 (18%) \n95 (27%) \n124 (35%) \n0.0353 \nLevel 1 +SBFL \n220 \n39 (11%) \n105 (29%) \n132 (37%) \n174 (49%) \n0.0244 \nLevel 1 +SBFL +slicing \n300 \n52 (15%) 120 (34%) 146 (41%) 189 (53%) \n0.0217 \n\nLevel 3 \nLevel 2 +predicate switching \n920 \n52 (15%) \n122 (34%) \n148 (41%) \n194 (54%) \n0.0206 \n\nLevel 4 \nLevel 3 +MBFL \n5700 \n72 (20%) \n137 (38%) \n168 (47%) \n205 (57%) \n0.0173 \n\n\n\nTABLE 11 The\n11Performance of Standalone Techniques, Method Granularity.Family \nTechnique \nEinspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\nSBFL \nOchiai \n92 (26%) \n180 (50%) \n207 (58%) 241 (68%) \n0.044 \nDStar \n95 (27%) 182 (51%) 207 (58%) 241 (68%) \n0.044 \n\nMBFL \nMetallaxis 83 (23%) \n151 (42%) \n181 (51%) \n208 (58%) \n0.108 \nMUSE \n54 (15%) \n95 (27%) \n112 (31%) \n134 (38%) \n0.274 \n\nslicing \n\nunion \n35 (10%) \n80 (22%) \n106 (30%) \n131 (37%) \n0.259 \nintersection 35 (10%) \n73 (20%) \n90 (25%) \n114 (32%) \n0.279 \nfrequency \n39 (11%) \n84 (24%) \n104 (29%) \n133 (37%) \n0.259 \n\nstack \ntrace \n\nstack \ntrace \n39 (11%) \n59 (17%) \n68 (19%) \n73 (20%) \n0.366 \n\npredicate \nswitching \n\npredicate \nswitching \n15 (4%) \n38 (11%) \n50 (14%) \n60 (17%) \n0.390 \n\nIR-based \nBugLocator 0 (0%) \n3(1%) \n11(3%) \n35(10%) \n0.275 \n\nhistory-\nbased \nBugspots \n0 (0%) \n2 (1%) \n4 (1%) \n13 (4%) \n0.498 \n\n *  EXAM here is based on the number of methods. \n\n\n\nTABLE 12\n12Learning to Rank Results, Method Granularity.Technique \nE inspect \nEXAM \n@1 \n@3 \n@5 \n@10 \n\nAll techniques \n168 (47%) 230 (64%) 247 (69%) 271 (76%) \n0.0034 \n\n\n\nTABLE 13\n13Comparison with other learning to rank techniques, for E inspect @1 at method granularity. CombineFL is the approach proposed in this paper.Technique \non 357 faults on 210 faults \n\nCombineFL \n168 \n118 \n\nMULTRIC [27] \n72 \n-\nSavant \nACKNOWLEDGMENTS\nA theoretical analysis of the risk evaluation formulas for spectrum-based fault localization. X Xie, T Y Chen, F.-C Kuo, B Xu, ACM Transactions on Software Engineering and Methodology (TOSEM). 22431X. Xie, T. Y. Chen, F.-C. Kuo, and B. Xu, \"A theoretical analysis of the risk evaluation formulas for spectrum-based fault localiza- tion,\" ACM Transactions on Software Engineering and Methodology (TOSEM), vol. 22, no. 4, p. 31, 2013.\n\nOn the accuracy of spectrum-based fault localization. R Abreu, P Zoeteweij, A J Van Gemund, Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION. IEEER. Abreu, P. Zoeteweij, and A. J. Van Gemund, \"On the accuracy of spectrum-based fault localization,\" in Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION, 2007. TAICPART-MUTATION 2007. IEEE, 2007, pp. 89-98.\n\nAn empirical investigation of the relationship between spectra differences and regression faults. M J Harrold, G Rothermel, K Sayre, R Wu, L Yi, Software Testing Verification and Reliability. 103M. J. Harrold, G. Rothermel, K. Sayre, R. Wu, and L. Yi, \"An empir- ical investigation of the relationship between spectra differences and regression faults,\" Software Testing Verification and Reliability, vol. 10, no. 3, pp. 171-194, 2000.\n\nMetallaxis-fl: mutation-based fault localization. M Papadakis, Y Le Traon, Software Testing, Verification and Reliability. 25M. Papadakis and Y. Le Traon, \"Metallaxis-fl: mutation-based fault localization,\" Software Testing, Verification and Reliability, vol. 25, no. 5-7, pp. 605-628, 2015.\n\nAsk the mutants: Mutating faulty programs for fault localization. S Moon, Y Kim, M Kim, S Yoo, Software Testing, Verification and Validation. IEEEIEEE Seventh International Conference onS. Moon, Y. Kim, M. Kim, and S. Yoo, \"Ask the mutants: Mu- tating faulty programs for fault localization,\" in Software Testing, Verification and Validation (ICST), 2014 IEEE Seventh International Conference on. IEEE, 2014, pp. 153-162.\n\nFault localization using execution slices and dataflow tests. H Agrawal, J R Horgan, S London, W E Wong, Proceedings., Sixth International Symposium on. Sixth International Symposium onIEEESoftware Reliability EngineeringH. Agrawal, J. R. Horgan, S. London, and W. E. Wong, \"Fault localization using execution slices and dataflow tests,\" in Software Reliability Engineering, 1995. Proceedings., Sixth International Sympo- sium on. IEEE, 1995, pp. 143-151.\n\nFault localization with nearest neighbor queries. M Renieres, S P Reiss, Proceedings. 18th IEEE International Conference on. 18th IEEE International Conference onIEEEAutomated Software EngineeringM. Renieres and S. P. Reiss, \"Fault localization with nearest neigh- bor queries,\" in Automated Software Engineering, 2003. Proceedings. 18th IEEE International Conference on. IEEE, 2003, pp. 30-39.\n\nBoosting bug-report-oriented fault localization with segmentation and stack-trace analysis. C.-P Wong, Y Xiong, H Zhang, D Hao, L Zhang, H Mei, Software Maintenance and Evolution (ICSME). IEEEC.-P. Wong, Y. Xiong, H. Zhang, D. Hao, L. Zhang, and H. Mei, \"Boosting bug-report-oriented fault localization with segmenta- tion and stack-trace analysis,\" in Software Maintenance and Evolu- tion (ICSME), 2014 IEEE International Conference on. IEEE, 2014, pp. 181-190.\n\nCrashlocator: locating crashing faults based on crash stacks. R Wu, H Zhang, S.-C Cheung, S Kim, Proceedings of the 2014 International Symposium on Software Testing and Analysis. the 2014 International Symposium on Software Testing and AnalysisACMR. Wu, H. Zhang, S.-C. Cheung, and S. Kim, \"Crashlocator: locat- ing crashing faults based on crash stacks,\" in Proceedings of the 2014 International Symposium on Software Testing and Analysis. ACM, 2014, pp. 204-214.\n\nLocating faults through automated predicate switching. X Zhang, N Gupta, R Gupta, International Conference on Software Engineering. X. Zhang, N. Gupta, and R. Gupta, \"Locating faults through auto- mated predicate switching,\" in International Conference on Software Engineering, 2006, pp. 272-281.\n\nWhere should the bugs be fixed? more accurate information retrieval-based bug localization based on bug reports. J Zhou, H Zhang, D Lo, Software Engineering (ICSE), 2012 34th International Conference on. IEEEJ. Zhou, H. Zhang, and D. Lo, \"Where should the bugs be fixed? more accurate information retrieval-based bug localization based on bug reports,\" in Software Engineering (ICSE), 2012 34th Interna- tional Conference on. IEEE, 2012, pp. 14-24.\n\nPredicting faults from cached history. S Kim, T Zimmermann, E J WhiteheadJr, A Zeller, Proceedings of the 29th international conference on Software Engineering. the 29th international conference on Software EngineeringIEEE Computer SocietyS. Kim, T. Zimmermann, E. J. Whitehead Jr, and A. Zeller, \"Pre- dicting faults from cached history,\" in Proceedings of the 29th international conference on Software Engineering. IEEE Computer Society, 2007, pp. 489-498.\n\nBugcache for inspections: hit or miss. F Rahman, D Posnett, A Hindle, E Barr, P Devanbu, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering. the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineeringACMF. Rahman, D. Posnett, A. Hindle, E. Barr, and P. Devanbu, \"Bug- cache for inspections: hit or miss?\" in Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering. ACM, 2011, pp. 322-331.\n\nAre automated debugging techniques actually helping programmers. C Parnin, A Orso, Proceedings of the 2011 international symposium on software testing and analysis. the 2011 international symposium on software testing and analysisACMC. Parnin and A. Orso, \"Are automated debugging techniques actually helping programmers?\" in Proceedings of the 2011 interna- tional symposium on software testing and analysis. ACM, 2011, pp. 199-209.\n\nautomated debugging considered harmful\" considered harmful: A user study revisiting the usefulness of spectra-based fault localization techniques with professionals using real bugs from large systems. X Xia, L Bao, D Lo, S Li, Software Maintenance and Evolution (ICSME). IEEEX. Xia, L. Bao, D. Lo, and S. Li, \"\"automated debugging considered harmful\" considered harmful: A user study revisiting the useful- ness of spectra-based fault localization techniques with profession- als using real bugs from large systems,\" in Software Maintenance and Evolution (ICSME), 2016 IEEE International Conference on. IEEE, 2016, pp. 267-278.\n\nPractitioners' expectations on automated fault localization. P S Kochhar, X Xia, D Lo, S Li, Proceedings of the 25th International Symposium on Software Testing and Analysis. the 25th International Symposium on Software Testing and AnalysisACMP. S. Kochhar, X. Xia, D. Lo, and S. Li, \"Practitioners' expectations on automated fault localization,\" in Proceedings of the 25th Interna- tional Symposium on Software Testing and Analysis. ACM, 2016, pp. 165-176.\n\nEvaluating & improving fault localization techniques. S Pearson, J Campos, R Just, G Fraser, R Abreu, M D Ernst, D Pang, B Keller, ICSE'17, Proceedings of the 39th International Conference on Software Engineering. S. Pearson, J. Campos, R. Just, G. Fraser, R. Abreu, M. D. Ernst, D. Pang, and B. Keller, \"Evaluating & improving fault localization techniques,\" in ICSE'17, Proceedings of the 39th International Confer- ence on Software Engineering, May 24-26, 2017.\n\nEmpirical evaluation of the tarantula automatic fault-localization technique. J A Jones, M J Harrold, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering. the 20th IEEE/ACM international Conference on Automated software engineeringACMJ. A. Jones and M. J. Harrold, \"Empirical evaluation of the tarantula automatic fault-localization technique,\" in Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering. ACM, 2005, pp. 273-282.\n\nA practical evaluation of spectrum-based fault localization. R Abreu, P Zoeteweij, R Golsteijn, A J Van Gemund, Journal of Systems and Software. 8211R. Abreu, P. Zoeteweij, R. Golsteijn, and A. J. Van Gemund, \"A practical evaluation of spectrum-based fault localization,\" Journal of Systems and Software, vol. 82, no. 11, pp. 1780-1792, 2009.\n\nAn empirical investigation of program spectra. M J Harrold, G Rothermel, R Wu, L Yi, Acm Sigplan Notices. ACM33M. J. Harrold, G. Rothermel, R. Wu, and L. Yi, \"An empirical investigation of program spectra,\" in Acm Sigplan Notices, vol. 33, no. 7. ACM, 1998, pp. 83-90.\n\nDefects4j: A database of existing faults to enable controlled testing studies for java programs. R Just, D Jalali, M D Ernst, Proceedings of the 2014 International Symposium on Software Testing and Analysis. the 2014 International Symposium on Software Testing and AnalysisACMR. Just, D. Jalali, and M. D. Ernst, \"Defects4j: A database of existing faults to enable controlled testing studies for java programs,\" in Proceedings of the 2014 International Symposium on Software Testing and Analysis. ACM, 2014, pp. 437-440.\n\nLearning to rank using gradient descent. C Burges, T Shaked, E Renshaw, A Lazier, M Deeds, N Hamilton, G Hullender, Proceedings of the 22nd international conference on Machine learning. the 22nd international conference on Machine learningACMC. Burges, T. Shaked, E. Renshaw, A. Lazier, M. Deeds, N. Hamil- ton, and G. Hullender, \"Learning to rank using gradient descent,\" in Proceedings of the 22nd international conference on Machine learning. ACM, 2005, pp. 89-96.\n\nLightweight fault localization combined with fault context to improve fault absolute rank. Y Wang, Z Huang, Y Li, B Fang, SCIENCE CHINA Information Sciences. 60992113Y. Wang, Z. Huang, Y. Li, and B. Fang, \"Lightweight fault localiza- tion combined with fault context to improve fault absolute rank,\" SCIENCE CHINA Information Sciences, vol. 60, no. 9, p. 092113, 2017.\n\nLearning to combine multiple ranking metrics for fault localization. J Xuan, M Monperrus, Software Maintenance and Evolution (ICSME), 2014 IEEE International Conference on. IEEEJ. Xuan and M. Monperrus, \"Learning to combine multiple rank- ing metrics for fault localization,\" in Software Maintenance and Evolution (ICSME), 2014 IEEE International Conference on. IEEE, 2014, pp. 191-200.\n\nFluccs: using code and change metrics to improve fault localization. J Sohn, S Yoo, Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. the 26th ACM SIGSOFT International Symposium on Software Testing and AnalysisACMJ. Sohn and S. Yoo, \"Fluccs: using code and change metrics to im- prove fault localization,\" in Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 2017, pp. 273-283.\n\nA learning-torank based fault localization approach using likely invariants. T.-D Le, D Lo, C Le Goues, L Grunske, Proceedings of the 25th International Symposium on Software Testing and Analysis. the 25th International Symposium on Software Testing and AnalysisACMT.-D. B Le, D. Lo, C. Le Goues, and L. Grunske, \"A learning-to- rank based fault localization approach using likely invariants,\" in Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 2016, pp. 177-188.\n\nTransforming programs and tests in tandem for fault localization. X Li, L Zhang, Proceedings of the ACM on Programming Languages. 192X. Li and L. Zhang, \"Transforming programs and tests in tandem for fault localization,\" Proceedings of the ACM on Programming Languages, vol. 1, no. OOPSLA, p. 92, 2017.\n\nLocus: Locating bugs from software changes. M Wen, R Wu, S.-C Cheung, Automated Software Engineering (ASE). M. Wen, R. Wu, and S.-C. Cheung, \"Locus: Locating bugs from software changes,\" in Automated Software Engineering (ASE), 2016\n\nTowards automatic software fault location through decision-to-decision path analysis. J S Collofello, L Cousins, National Computer Conference. 539J. S. Collofello and L. Cousins, \"Towards automatic software fault location through decision-to-decision path analysis,\" in National Computer Conference. IEEE, 1986, p. 539.\n\nA model for spectrabased software diagnosis. L Naish, H J Lee, K Ramamohanarao, ACM Transactions on software engineering and methodology (TOSEM). 20311L. Naish, H. J. Lee, and K. Ramamohanarao, \"A model for spectra- based software diagnosis,\" ACM Transactions on software engineer- ing and methodology (TOSEM), vol. 20, no. 3, p. 11, 2011.\n\nA similarity-aware approach to testing based fault localization. D Hao, Y Pan, L Zhang, W Zhao, H Mei, J Sun, Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering. the 20th IEEE/ACM international Conference on Automated software engineeringACMD. Hao, Y. Pan, L. Zhang, W. Zhao, H. Mei, and J. Sun, \"A similarity-aware approach to testing based fault localization,\" in Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering. ACM, 2005, pp. 291-294.\n\nEliminating harmful redundancy for testing-based fault localization using test suite reduction: An experimental study. D Hao, L Zhang, H Zhong, H Mei, J Sun, Software Maintenance, 2005. ICSM'05. Proceedings of the 21st IEEE International Conference on. IEEED. Hao, L. Zhang, H. Zhong, H. Mei, and J. Sun, \"Eliminating harmful redundancy for testing-based fault localization using test suite reduction: An experimental study,\" in Software Maintenance, 2005. ICSM'05. Proceedings of the 21st IEEE International Conference on. IEEE, 2005, pp. 683-686.\n\nEvolving human competitive spectra-based fault localisation techniques. S Yoo, SSBSE. SpringerS. Yoo, \"Evolving human competitive spectra-based fault localisa- tion techniques.\" in SSBSE. Springer, 2012, pp. 244-258.\n\nThe dstar method for effective software fault localization. W E Wong, V Debroy, R Gao, Y Li, IEEE Transactions on Reliability. 631W. E. Wong, V. Debroy, R. Gao, and Y. Li, \"The dstar method for ef- fective software fault localization,\" IEEE Transactions on Reliability, vol. 63, no. 1, pp. 290-308, 2014.\n\nShould i follow this fault localization tools output?. T.-D B Le, D Lo, F Thung, Empirical Software Engineering. 205T.-D. B. Le, D. Lo, and F. Thung, \"Should i follow this fault localization tools output?\" Empirical Software Engineering, vol. 20, no. 5, pp. 1237-1274, 2015.\n\nAn analysis and survey of the development of mutation testing. Y Jia, M Harman, IEEE transactions on software engineering. 375Y. Jia and M. Harman, \"An analysis and survey of the develop- ment of mutation testing,\" IEEE transactions on software engineering, vol. 37, no. 5, pp. 649-678, 2011.\n\nPredictive mutation testing. J Zhang, Z Wang, L Zhang, D Hao, L Zang, S Cheng, L Zhang, Proceedings of the 25th International Symposium on Software Testing and Analysis. the 25th International Symposium on Software Testing and AnalysisACMJ. Zhang, Z. Wang, L. Zhang, D. Hao, L. Zang, S. Cheng, and L. Zhang, \"Predictive mutation testing,\" in Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 2016, pp. 342-353.\n\nA brief survey of program slicing. B Xu, J Qian, X Zhang, Z Wu, L Chen, ACM SIGSOFT Software Engineering Notes. 302B. Xu, J. Qian, X. Zhang, Z. Wu, and L. Chen, \"A brief survey of program slicing,\" ACM SIGSOFT Software Engineering Notes, vol. 30, no. 2, pp. 1-36, 2005.\n\nProgram slicing. M Weiser, Proceedings of the 5th international conference on Software engineering. the 5th international conference on Software engineeringIEEE PressM. Weiser, \"Program slicing,\" in Proceedings of the 5th international conference on Software engineering. IEEE Press, 1981, pp. 439-449.\n\nDynamic program slicing. B Korel, J Laski, Information Processing Letters. 293B. Korel and J. Laski, \"Dynamic program slicing,\" Information Processing Letters, vol. 29, no. 3, pp. 155-163, 1988.\n\nA study of effectiveness of dynamic slicing in locating real faults. X Zhang, N Gupta, R Gupta, Empirical Software Engineering. 122X. Zhang, N. Gupta, and R. Gupta, \"A study of effectiveness of dynamic slicing in locating real faults,\" Empirical Software Engi- neering, vol. 12, no. 2, pp. 143-160, 2007.\n\nR Baeza-Yates, B Ribeiro-Neto, Modern Information Retrieval: The Concepts and Technology Behind Search. Addison-Wesley Publishing Company2nd ed. USAR. Baeza-Yates and B. Ribeiro-Neto, Modern Information Retrieval: The Concepts and Technology Behind Search, 2nd ed. USA: Addison- Wesley Publishing Company, 2008.\n\nImproving bug localization using structured information retrieval. R K Saha, M Lease, S Khurshid, D E Perry, Automated Software Engineering (ASE). R. K. Saha, M. Lease, S. Khurshid, and D. E. Perry, \"Improving bug localization using structured information retrieval,\" in Automated Software Engineering (ASE), 2013 IEEE/ACM 28th International Con- ference on. IEEE, 2013, pp. 345-355.\n\nA survey on bugreport analysis. J Zhang, D Hao, B Xie, L Zhang, H Mei, SCIENCE CHINA Information Sciences. 582J. Zhang, D. Hao, B. Xie, L. Zhang, and H. Mei, \"A survey on bug- report analysis,\" SCIENCE CHINA Information Sciences, vol. 58, no. 2, pp. 1-24, Feb 2015.\n\nA survey on software fault localization. W E Wong, R Gao, Y Li, R Abreu, F Wotawa, IEEE Transactions on Software Engineering. 428W. E. Wong, R. Gao, Y. Li, R. Abreu, and F. Wotawa, \"A survey on software fault localization,\" IEEE Transactions on Software Engi- neering, vol. 42, no. 8, pp. 707-740, 2016.\n\nA comparative analysis of the efficiency of change metrics and static code attributes for defect prediction. R Moser, W Pedrycz, G Succi, Proceedings of the 30th international conference on Software engineering. the 30th international conference on Software engineeringACMR. Moser, W. Pedrycz, and G. Succi, \"A comparative analysis of the efficiency of change metrics and static code attributes for defect prediction,\" in Proceedings of the 30th international conference on Software engineering. ACM, 2008, pp. 181-190.\n\nA short introduction to learning to rank. H Li, IEICE TRANS-ACTIONS on Information and Systems. 9410H. Li, \"A short introduction to learning to rank,\" IEICE TRANS- ACTIONS on Information and Systems, vol. 94, no. 10, pp. 1854-1862, 2011.\n\nLearning to rank for information retrieval. T.-Y Liu, Foundations and Trends R in Information Retrieval. 33T.-Y. Liu et al., \"Learning to rank for information retrieval,\" Foun- dations and Trends R in Information Retrieval, vol. 3, no. 3, pp. 225- 331, 2009.\n\nProvably optimal and human-competitive results in sbse for spectrum based fault localisation. X Xie, F.-C Kuo, T Y Chen, S Yoo, M Harman, International Symposium on Search Based Software Engineering. SpringerX. Xie, F.-C. Kuo, T. Y. Chen, S. Yoo, and M. Harman, \"Provably optimal and human-competitive results in sbse for spectrum based fault localisation,\" in International Symposium on Search Based Soft- ware Engineering. Springer, 2013, pp. 224-238.\n\nTowards interactive fault localization using test information. D Hao, L Zhang, H Mei, J Sun, Software Engineering Conference, 2006. APSEC 2006. 13th Asia Pacific. IEEED. Hao, L. Zhang, H. Mei, and J. Sun, \"Towards interactive fault localization using test information,\" in Software Engineering Conference, 2006. APSEC 2006. 13th Asia Pacific. IEEE, 2006, pp. 277-284.\n\nCooperative software testing and analysis: Advances and challenges. T Xie, L Zhang, X Xiao, Y.-F Xiong, D Hao, Journal of Computer Science and Technology. 294T. Xie, L. Zhang, X. Xiao, Y.-F. Xiong, and D. Hao, \"Cooperative software testing and analysis: Advances and challenges,\" Journal of Computer Science and Technology, vol. 29, no. 4, pp. 713-723, 2014.\n\nPrecise condition synthesis for program repair. Y Xiong, J Wang, R Yan, J Zhang, S Han, G Huang, L Zhang, Proceedings of the 39th International Conference on Software Engineering. the 39th International Conference on Software EngineeringIEEE PressY. Xiong, J. Wang, R. Yan, J. Zhang, S. Han, G. Huang, and L. Zhang, \"Precise condition synthesis for program repair,\" in Pro- ceedings of the 39th International Conference on Software Engineering. IEEE Press, 2017, pp. 416-426.\n\nShaping program repair space with existing patches and similar code. J Jiang, Y Xiong, H Zhang, Q Gao, X Chen, Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. the 27th ACM SIGSOFT International Symposium on Software Testing and AnalysisACMJ. Jiang, Y. Xiong, H. Zhang, Q. Gao, and X. Chen, \"Shaping program repair space with existing patches and similar code,\" in Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 2018, pp. 298-309.\n\nIdentifying patch correctness in test-based program repair. Y Xiong, X Liu, M Zeng, L Zhang, G Huang, Proceedings of the 40th International Conference on Software Engineering. the 40th International Conference on Software EngineeringACMY. Xiong, X. Liu, M. Zeng, L. Zhang, and G. Huang, \"Identifying patch correctness in test-based program repair,\" in Proceedings of the 40th International Conference on Software Engineering. ACM, 2018, pp. 789-799.\n\nFeature location using probabilistic ranking of methods based on execution scenarios and information retrieval. D Poshyvanyk, Y.-G Gueheneuc, A Marcus, G Antoniol, V Rajlich, IEEE Transactions on Software Engineering. 336D. Poshyvanyk, Y.-G. Gueheneuc, A. Marcus, G. Antoniol, and V. Rajlich, \"Feature location using probabilistic ranking of meth- ods based on execution scenarios and information retrieval,\" IEEE Transactions on Software Engineering, vol. 33, no. 6, 2007.\n\nGrt: An automated test generator using orchestrated program analysis. L Ma, C Artho, C Zhang, H Sato, J Gmeiner, R Ramler, 30th IEEE/ACM International Conference on. IEEEAutomated Software Engineering (ASE)L. Ma, C. Artho, C. Zhang, H. Sato, J. Gmeiner, and R. Ramler, \"Grt: An automated test generator using orchestrated program analysis,\" in Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on. IEEE, 2015, pp. 842-847.\n\nDesign and implementation of an efficient dynamic slicer for Java. C Hammacher, Bachelor's ThesisC. Hammacher, \"Design and implementation of an efficient dy- namic slicer for Java,\" Bachelor's Thesis, Nov. 2008.\n\nDynamic slicing on java bytecode traces. T Wang, A Roychoudhury, ACM Transactions on Programming Languages and Systems (TOPLAS). 30210T. Wang and A. Roychoudhury, \"Dynamic slicing on java bytecode traces,\" ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 30, no. 2, p. 10, 2008.\n\nUsing compressed bytecode traces for slicing java programs. Proceedings. 26th International Conference on. 26th International Conference onIEEEin Software Engineering--, \"Using compressed bytecode traces for slicing java pro- grams,\" in Software Engineering, 2004. ICSE 2004. Proceedings. 26th International Conference on. IEEE, 2004, pp. 512-521.\n\nHeuristics for automatic localization of software faults. H Pan, E H Spafford, H. Pan and E. H. Spafford, \"Heuristics for automatic localization of software faults,\" World Wide Web, 1992.\n\nDo stack traces help developers fix bugs?. A Schroter, A Schr\u00f6ter, N Bettenburg, R Premraj, in 2010 7th IEEE Working Conference on Mining Software Repositories. IEEEA. Schroter, A. Schr\u00f6ter, N. Bettenburg, and R. Premraj, \"Do stack traces help developers fix bugs?\" in 2010 7th IEEE Working Conference on Mining Software Repositories. IEEE, 2010, pp. 118-121.\n\nLarge-scale kernel ranksvm. T.-M Kuo, C.-P Lee, C.-J Lin, Proceedings of the 2014 SIAM international conference on data mining. SIAM. the 2014 SIAM international conference on data mining. SIAMT.-M. Kuo, C.-P. Lee, and C.-J. Lin, \"Large-scale kernel ranksvm,\" in Proceedings of the 2014 SIAM international conference on data mining. SIAM, 2014, pp. 812-820.\n\nLIBSVM: A library for support vector machines. C.-C Chang, C.-J Lin, ACM Transactions on Intelligent Systems and Technology. 227C.-C. Chang and C.-J. Lin, \"LIBSVM: A library for support vector machines,\" ACM Transactions on Intelligent Systems and Technology, vol. 2, pp. 27:1-27:27, 2011.\n\nSystematic editing: generating program transformations from an example. N Meng, M Kim, K S Mckinley, PLDI. N. Meng, M. Kim, and K. S. McKinley, \"Systematic editing: gener- ating program transformations from an example,\" in PLDI, 2011, pp. 329-342.\n\nLASE: an example-based program transformation tool for locating and applying systematic edits. J Jacobellis, N Meng, M Kim, ICSE. J. Jacobellis, N. Meng, and M. Kim, \"LASE: an example-based program transformation tool for locating and applying systematic edits,\" in ICSE, 2013, pp. 1319-1322.\n\nThreats to the validity and value of empirical assessments of the accuracy of coverage-based fault locators. F Steimann, M Frenkel, R Abreu, Proceedings of the 2013 International Symposium on Software Testing and Analysis. the 2013 International Symposium on Software Testing and AnalysisACMF. Steimann, M. Frenkel, and R. Abreu, \"Threats to the validity and value of empirical assessments of the accuracy of coverage-based fault locators,\" in Proceedings of the 2013 International Symposium on Software Testing and Analysis. ACM, 2013, pp. 314-324.\n\nA crosstab-based statistical method for effective fault localization. E Wong, T Wei, Y Qi, L Zhao, Software Testing, Verification, and Validation. IEEE1st International Conference onE. Wong, T. Wei, Y. Qi, and L. Zhao, \"A crosstab-based statistical method for effective fault localization,\" in Software Testing, Verifi- cation, and Validation, 2008 1st International Conference on. IEEE, 2008, pp. 42-51.\n\nEffective software fault localization using an rbf neural network. W E Wong, V Debroy, R Golden, X Xu, B Thuraisingham, IEEE Transactions on Reliability. 611W. E. Wong, V. Debroy, R. Golden, X. Xu, and B. Thuraisingham, \"Effective software fault localization using an rbf neural network,\" IEEE Transactions on Reliability, vol. 61, no. 1, pp. 149-169, 2012.\n\nThirteen ways to look at the correlation coefficient. J , Lee Rodgers, W A Nicewander, The American Statistician. 421J. Lee Rodgers and W. A. Nicewander, \"Thirteen ways to look at the correlation coefficient,\" The American Statistician, vol. 42, no. 1, pp. 59-66, 1988.\n\nDynamically discovering likely program invariants to support program evolution. M D Ernst, J Cockrell, W G Griswold, D Notkin, IEEE Transactions on Software Engineering. 272M. D. Ernst, J. Cockrell, W. G. Griswold, and D. Notkin, \"Dynam- ically discovering likely program invariants to support program evolution,\" IEEE Transactions on Software Engineering, vol. 27, no. 2, pp. 99-123, 2001.\n\nLocating causes of program failures. H Cleve, A Zeller, Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference on. IEEEH. Cleve and A. Zeller, \"Locating causes of program failures,\" in Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference on. IEEE, 2005, pp. 342-351.\n\nExperiments of the effectiveness of dataflow-and controlflow-based test adequacy criteria. M Hutchins, H Foster, T Goradia, T Ostrand, Proceedings of the 16th international conference on Software engineering. the 16th international conference on Software engineeringIEEEM. Hutchins, H. Foster, T. Goradia, and T. Ostrand, \"Experiments of the effectiveness of dataflow-and controlflow-based test ade- quacy criteria,\" in Proceedings of the 16th international conference on Software engineering. IEEE, 1994, pp. 191-200.\n\nPinpoint: Problem determination in large, dynamic internet services. M Y Chen, E Kiciman, E Fratkin, A Fox, E Brewer, Proceedings. International Conference on. International Conference onIEEEDependable Systems and NetworksM. Y. Chen, E. Kiciman, E. Fratkin, A. Fox, and E. Brewer, \"Pin- point: Problem determination in large, dynamic internet services,\" in Dependable Systems and Networks, 2002. DSN 2002. Proceedings. International Conference on. IEEE, 2002, pp. 595-604.\n\nTheory and practice, do they match? a case with spectrum-based fault localization. T.-D B Le, F Thung, D Lo, 29th IEEE International Conference on. IEEESoftware Maintenance (ICSM)T.-D. B. Le, F. Thung, and D. Lo, \"Theory and practice, do they match? a case with spectrum-based fault localization,\" in Software Maintenance (ICSM), 2013 29th IEEE International Conference on. IEEE, 2013, pp. 380-383.\n\nPrecise dynamic slicing algorithms. X Zhang, R Gupta, Y Zhang, Software Engineering, 2003. Proceedings. 25th International Conference on. IEEEX. Zhang, R. Gupta, and Y. Zhang, \"Precise dynamic slicing algorithms,\" in Software Engineering, 2003. Proceedings. 25th Inter- national Conference on. IEEE, 2003, pp. 319-329.\n\nIncremental regression testing. H Agrawal, J R Horgan, E W Krauser, S A London, Software Maintenance, 1993. CSM-93, Proceedings., Conference on. IEEEH. Agrawal, J. R. Horgan, E. W. Krauser, and S. A. London, \"Incremental regression testing,\" in Software Maintenance, 1993. CSM-93, Proceedings., Conference on. IEEE, 1993, pp. 348-357.\n\nAn efficient relevant slicing method for debugging. T Gyim\u00f3thy, \u00c1 Besz\u00e9des, I Forg\u00e1cs, ACM SIGSOFT Software Engineering Notes. 246T. Gyim\u00f3thy,\u00c1. Besz\u00e9des, and I. Forg\u00e1cs, \"An efficient relevant slicing method for debugging,\" ACM SIGSOFT Software Engineer- ing Notes, vol. 24, no. 6, pp. 303-321, 1999.\n\nFaster mutation analysis via equivalence modulo states. B Wang, Y Xiong, Y Shi, L Zhang, D Hao, Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. the 26th ACM SIGSOFT International Symposium on Software Testing and AnalysisACMB. Wang, Y. Xiong, Y. Shi, L. Zhang, and D. Hao, \"Faster mutation analysis via equivalence modulo states,\" in Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 2017, pp. 295-306.\n\nCosteffective testing based fault localization with distance based test. X Wang, S Jiang, P Gao, X Ju, R Wang, Y Zhang, X. Wang, S. Jiang, P. Gao, X. Ju, R. Wang, and Y. Zhang, \"Cost- effective testing based fault localization with distance based test-\n", "annotations": {"author": "[{\"end\":87,\"start\":76},{\"end\":103,\"start\":88},{\"end\":118,\"start\":104},{\"end\":135,\"start\":119},{\"end\":145,\"start\":136}]", "publisher": null, "author_last_name": "[{\"end\":86,\"start\":83},{\"end\":102,\"start\":97},{\"end\":117,\"start\":112},{\"end\":134,\"start\":129},{\"end\":144,\"start\":139}]", "author_first_name": "[{\"end\":82,\"start\":76},{\"end\":96,\"start\":88},{\"end\":111,\"start\":104},{\"end\":126,\"start\":119},{\"end\":128,\"start\":127},{\"end\":138,\"start\":136}]", "author_affiliation": null, "title": "[{\"end\":73,\"start\":1},{\"end\":218,\"start\":146}]", "venue": null, "abstract": "[{\"end\":1135,\"start\":315}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1586,\"start\":1583},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1591,\"start\":1588},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1596,\"start\":1593},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":1680,\"start\":1677},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":1685,\"start\":1682},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":1765,\"start\":1762},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":1770,\"start\":1767},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":1837,\"start\":1834},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1842,\"start\":1839},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":1894,\"start\":1890},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2038,\"start\":2034},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2112,\"start\":2108},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2118,\"start\":2114},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2597,\"start\":2593},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":2603,\"start\":2599},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2634,\"start\":2630},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":2670,\"start\":2666},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":2676,\"start\":2672},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":2682,\"start\":2678},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":2688,\"start\":2684},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3018,\"start\":3014},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3202,\"start\":3198},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":3568,\"start\":3564},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":3655,\"start\":3651},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":3704,\"start\":3700},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3756,\"start\":3752},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4123,\"start\":4119},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":4975,\"start\":4973},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5456,\"start\":5452},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5469,\"start\":5465},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5482,\"start\":5478},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":5498,\"start\":5494},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7094,\"start\":7090},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":7100,\"start\":7096},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7106,\"start\":7102},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7743,\"start\":7740},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":7833,\"start\":7829},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":8170,\"start\":8166},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":8176,\"start\":8172},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":8182,\"start\":8178},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":8214,\"start\":8211},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8220,\"start\":8216},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":8331,\"start\":8328},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8346,\"start\":8342},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8381,\"start\":8377},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8387,\"start\":8383},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":8393,\"start\":8389},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":8602,\"start\":8598},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":8719,\"start\":8715},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":9120,\"start\":9116},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9482,\"start\":9479},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9504,\"start\":9501},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":10601,\"start\":10597},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":11209,\"start\":11205},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":11346,\"start\":11342},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":11513,\"start\":11509},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":11853,\"start\":11849},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":12888,\"start\":12884},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":14090,\"start\":14086},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":14096,\"start\":14092},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":14317,\"start\":14313},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":14338,\"start\":14334},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":14344,\"start\":14340},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":14350,\"start\":14346},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":14356,\"start\":14352},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":14568,\"start\":14564},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":14918,\"start\":14914},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":15054,\"start\":15050},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15347,\"start\":15343},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":15549,\"start\":15545},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":15751,\"start\":15747},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":15855,\"start\":15851},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":15961,\"start\":15957},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":16338,\"start\":16334},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":16940,\"start\":16936},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":18468,\"start\":18464},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":18474,\"start\":18470},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":18480,\"start\":18476},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":18486,\"start\":18482},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":18545,\"start\":18541},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":18551,\"start\":18547},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":18557,\"start\":18553},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":18669,\"start\":18665},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":18675,\"start\":18671},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":19218,\"start\":19214},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19439,\"start\":19435},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":19445,\"start\":19441},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":19451,\"start\":19447},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":20087,\"start\":20083},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":20334,\"start\":20331},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":20349,\"start\":20345},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":20451,\"start\":20448},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20470,\"start\":20467},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":20619,\"start\":20615},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":20691,\"start\":20687},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":20697,\"start\":20693},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":21307,\"start\":21303},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":21805,\"start\":21801},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":22575,\"start\":22571},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":23075,\"start\":23071},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":23610,\"start\":23606},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":24631,\"start\":24627},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":24737,\"start\":24733},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":24845,\"start\":24841},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":24851,\"start\":24847},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":25538,\"start\":25534},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":25544,\"start\":25540},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":25550,\"start\":25546},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":25979,\"start\":25975},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":26597,\"start\":26593},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":27005,\"start\":27001},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":27011,\"start\":27007},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":27601,\"start\":27597},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":27607,\"start\":27603},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":27613,\"start\":27609},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":29006,\"start\":29002},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29012,\"start\":29008},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":29641,\"start\":29637},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":29647,\"start\":29643},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":29670,\"start\":29666},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":29798,\"start\":29794},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":29996,\"start\":29992},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":30002,\"start\":29998},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":30008,\"start\":30004},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":33670,\"start\":33666},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":44240,\"start\":44236},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":44246,\"start\":44242},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":45078,\"start\":45074},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":45349,\"start\":45345},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":45364,\"start\":45360},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":45381,\"start\":45377},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":45484,\"start\":45480},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":45490,\"start\":45486},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":45496,\"start\":45492},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":45502,\"start\":45498},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":45870,\"start\":45866},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":45876,\"start\":45872},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":45882,\"start\":45878},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":47815,\"start\":47811},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":48106,\"start\":48103},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":48406,\"start\":48402},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":48462,\"start\":48458},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":48662,\"start\":48658},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":48771,\"start\":48767},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":49083,\"start\":49079},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":50096,\"start\":50092},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":50259,\"start\":50256},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":50292,\"start\":50288},{\"attributes\":{\"ref_id\":\"b71\"},\"end\":50323,\"start\":50319},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":50427,\"start\":50424},{\"attributes\":{\"ref_id\":\"b72\"},\"end\":50545,\"start\":50541},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":50564,\"start\":50560},{\"attributes\":{\"ref_id\":\"b73\"},\"end\":50608,\"start\":50604},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":50865,\"start\":50862},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":50947,\"start\":50943},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":51202,\"start\":51198},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":51664,\"start\":51660},{\"attributes\":{\"ref_id\":\"b74\"},\"end\":51772,\"start\":51768},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":51833,\"start\":51829},{\"attributes\":{\"ref_id\":\"b75\"},\"end\":51931,\"start\":51927},{\"attributes\":{\"ref_id\":\"b76\"},\"end\":51937,\"start\":51933},{\"attributes\":{\"ref_id\":\"b77\"},\"end\":54674,\"start\":54670},{\"attributes\":{\"ref_id\":\"b78\"},\"end\":54680,\"start\":54676},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":55366,\"start\":55362},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":55372,\"start\":55368},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":55378,\"start\":55374}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":59897,\"start\":59303},{\"attributes\":{\"id\":\"fig_1\"},\"end\":60012,\"start\":59898},{\"attributes\":{\"id\":\"fig_2\"},\"end\":60090,\"start\":60013},{\"attributes\":{\"id\":\"fig_3\"},\"end\":60428,\"start\":60091},{\"attributes\":{\"id\":\"fig_4\"},\"end\":60521,\"start\":60429},{\"attributes\":{\"id\":\"fig_5\"},\"end\":60625,\"start\":60522},{\"attributes\":{\"id\":\"fig_6\"},\"end\":60709,\"start\":60626},{\"attributes\":{\"id\":\"fig_7\"},\"end\":60905,\"start\":60710},{\"attributes\":{\"id\":\"fig_8\"},\"end\":60970,\"start\":60906},{\"attributes\":{\"id\":\"fig_9\"},\"end\":61076,\"start\":60971},{\"attributes\":{\"id\":\"fig_10\"},\"end\":61338,\"start\":61077},{\"attributes\":{\"id\":\"fig_11\"},\"end\":61493,\"start\":61339},{\"attributes\":{\"id\":\"fig_12\"},\"end\":62012,\"start\":61494},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":62329,\"start\":62013},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":62725,\"start\":62330},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":63092,\"start\":62726},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":64263,\"start\":63093},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":65096,\"start\":64264},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":65932,\"start\":65097},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":67318,\"start\":65933},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":67586,\"start\":67319},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":68562,\"start\":67587},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":69762,\"start\":68563},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":70618,\"start\":69763},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":71522,\"start\":70619},{\"attributes\":{\"id\":\"tab_12\",\"type\":\"table\"},\"end\":71692,\"start\":71523},{\"attributes\":{\"id\":\"tab_13\",\"type\":\"table\"},\"end\":71935,\"start\":71693}]", "paragraph": "[{\"end\":1538,\"start\":1151},{\"end\":2405,\"start\":1540},{\"end\":2856,\"start\":2407},{\"end\":3203,\"start\":2858},{\"end\":3893,\"start\":3205},{\"end\":4304,\"start\":3895},{\"end\":4500,\"start\":4306},{\"end\":4770,\"start\":4502},{\"end\":4854,\"start\":4812},{\"end\":5044,\"start\":4856},{\"end\":5201,\"start\":5046},{\"end\":5357,\"start\":5203},{\"end\":5551,\"start\":5359},{\"end\":5828,\"start\":5553},{\"end\":6014,\"start\":5830},{\"end\":6071,\"start\":6016},{\"end\":6178,\"start\":6077},{\"end\":6351,\"start\":6180},{\"end\":6469,\"start\":6353},{\"end\":6836,\"start\":6471},{\"end\":7458,\"start\":6851},{\"end\":7622,\"start\":7460},{\"end\":8080,\"start\":7660},{\"end\":8413,\"start\":8082},{\"end\":8603,\"start\":8499},{\"end\":9279,\"start\":8641},{\"end\":9340,\"start\":9281},{\"end\":9472,\"start\":9342},{\"end\":9546,\"start\":9474},{\"end\":9607,\"start\":9548},{\"end\":10052,\"start\":9667},{\"end\":10133,\"start\":10054},{\"end\":10947,\"start\":10212},{\"end\":11210,\"start\":10967},{\"end\":11445,\"start\":11212},{\"end\":11854,\"start\":11447},{\"end\":11942,\"start\":11856},{\"end\":12057,\"start\":12000},{\"end\":12451,\"start\":12059},{\"end\":12840,\"start\":12476},{\"end\":13247,\"start\":12864},{\"end\":13605,\"start\":13249},{\"end\":14177,\"start\":13607},{\"end\":14569,\"start\":14228},{\"end\":14919,\"start\":14571},{\"end\":15467,\"start\":14956},{\"end\":15752,\"start\":15469},{\"end\":16274,\"start\":15773},{\"end\":16820,\"start\":16276},{\"end\":17225,\"start\":16822},{\"end\":17360,\"start\":17299},{\"end\":17512,\"start\":17433},{\"end\":17580,\"start\":17521},{\"end\":17751,\"start\":17582},{\"end\":17831,\"start\":17760},{\"end\":17963,\"start\":17833},{\"end\":18047,\"start\":17972},{\"end\":18250,\"start\":18049},{\"end\":18321,\"start\":18259},{\"end\":18758,\"start\":18323},{\"end\":18857,\"start\":18767},{\"end\":19116,\"start\":18859},{\"end\":19647,\"start\":19142},{\"end\":19756,\"start\":19696},{\"end\":19875,\"start\":19758},{\"end\":20050,\"start\":19877},{\"end\":20559,\"start\":20068},{\"end\":20872,\"start\":20579},{\"end\":21204,\"start\":20874},{\"end\":21747,\"start\":21206},{\"end\":21986,\"start\":21772},{\"end\":22414,\"start\":21988},{\"end\":23028,\"start\":22438},{\"end\":23222,\"start\":23060},{\"end\":23340,\"start\":23224},{\"end\":23508,\"start\":23342},{\"end\":23920,\"start\":23545},{\"end\":24208,\"start\":23922},{\"end\":24323,\"start\":24229},{\"end\":24590,\"start\":24368},{\"end\":25032,\"start\":24592},{\"end\":25361,\"start\":25049},{\"end\":26210,\"start\":25393},{\"end\":26296,\"start\":26239},{\"end\":26370,\"start\":26298},{\"end\":26434,\"start\":26372},{\"end\":26567,\"start\":26436},{\"end\":27043,\"start\":26569},{\"end\":27578,\"start\":27076},{\"end\":28011,\"start\":27580},{\"end\":28466,\"start\":28013},{\"end\":28893,\"start\":28520},{\"end\":29094,\"start\":28924},{\"end\":29165,\"start\":29115},{\"end\":29369,\"start\":29177},{\"end\":29787,\"start\":29371},{\"end\":30129,\"start\":29789},{\"end\":30604,\"start\":30131},{\"end\":31917,\"start\":30627},{\"end\":32750,\"start\":31957},{\"end\":33138,\"start\":32790},{\"end\":33493,\"start\":33152},{\"end\":34553,\"start\":33495},{\"end\":34826,\"start\":34577},{\"end\":35927,\"start\":34828},{\"end\":36204,\"start\":35952},{\"end\":36353,\"start\":36221},{\"end\":36822,\"start\":36355},{\"end\":37026,\"start\":36869},{\"end\":37562,\"start\":37040},{\"end\":37753,\"start\":37564},{\"end\":37827,\"start\":37755},{\"end\":37907,\"start\":37833},{\"end\":38574,\"start\":37913},{\"end\":39078,\"start\":38614},{\"end\":39805,\"start\":39080},{\"end\":40062,\"start\":39856},{\"end\":40513,\"start\":40076},{\"end\":41673,\"start\":40515},{\"end\":41814,\"start\":41713},{\"end\":42156,\"start\":41816},{\"end\":42443,\"start\":42158},{\"end\":43360,\"start\":42445},{\"end\":44045,\"start\":43362},{\"end\":44350,\"start\":44084},{\"end\":44440,\"start\":44352},{\"end\":44759,\"start\":44465},{\"end\":44875,\"start\":44761},{\"end\":45079,\"start\":44877},{\"end\":45386,\"start\":45081},{\"end\":45769,\"start\":45439},{\"end\":46335,\"start\":45771},{\"end\":46612,\"start\":46337},{\"end\":47096,\"start\":46614},{\"end\":47526,\"start\":47098},{\"end\":47648,\"start\":47543},{\"end\":47790,\"start\":47672},{\"end\":48390,\"start\":47792},{\"end\":48752,\"start\":48392},{\"end\":49064,\"start\":48754},{\"end\":49304,\"start\":49066},{\"end\":49954,\"start\":49306},{\"end\":50072,\"start\":49998},{\"end\":50409,\"start\":50074},{\"end\":50592,\"start\":50411},{\"end\":50929,\"start\":50594},{\"end\":51181,\"start\":50931},{\"end\":51645,\"start\":51183},{\"end\":51938,\"start\":51647},{\"end\":52327,\"start\":51940},{\"end\":52423,\"start\":52344},{\"end\":52777,\"start\":52468},{\"end\":53331,\"start\":52779},{\"end\":53644,\"start\":53395},{\"end\":54188,\"start\":53646},{\"end\":54716,\"start\":54203},{\"end\":55070,\"start\":54718},{\"end\":55494,\"start\":55094},{\"end\":56406,\"start\":55531},{\"end\":56864,\"start\":56421},{\"end\":57577,\"start\":56866},{\"end\":57890,\"start\":57579},{\"end\":59302,\"start\":57963}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":8498,\"start\":8414},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9666,\"start\":9608},{\"attributes\":{\"id\":\"formula_2\"},\"end\":10211,\"start\":10134},{\"attributes\":{\"id\":\"formula_3\"},\"end\":11999,\"start\":11943},{\"attributes\":{\"id\":\"formula_4\"},\"end\":24367,\"start\":24324},{\"attributes\":{\"id\":\"formula_5\"},\"end\":28519,\"start\":28467},{\"attributes\":{\"id\":\"formula_6\"},\"end\":28923,\"start\":28894},{\"attributes\":{\"id\":\"formula_7\"},\"end\":29114,\"start\":29095}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":8306,\"start\":8299},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":19255,\"start\":19247},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":30780,\"start\":30773},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":31466,\"start\":31459},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":32221,\"start\":32214},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":35135,\"start\":35128},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":35404,\"start\":35397},{\"attributes\":{\"ref_id\":\"tab_7\"},\"end\":38083,\"start\":38076},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":38349,\"start\":38342},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":38696,\"start\":38689},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":39590,\"start\":39583},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":40902,\"start\":40895},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":41163,\"start\":41156},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":42698,\"start\":42690},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":43048,\"start\":43040},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":43376,\"start\":43368},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":44555,\"start\":44547},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":45164,\"start\":45156},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":45291,\"start\":45283},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":46494,\"start\":46486},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":46636,\"start\":46628}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1149,\"start\":1137},{\"end\":4810,\"start\":4773},{\"end\":6075,\"start\":6074},{\"attributes\":{\"n\":\"2\"},\"end\":6849,\"start\":6839},{\"attributes\":{\"n\":\"2.1\"},\"end\":7658,\"start\":7625},{\"attributes\":{\"n\":\"2.2\"},\"end\":8639,\"start\":8606},{\"attributes\":{\"n\":\"2.3\"},\"end\":10965,\"start\":10950},{\"attributes\":{\"n\":\"2.4\"},\"end\":12474,\"start\":12454},{\"attributes\":{\"n\":\"2.5\"},\"end\":12862,\"start\":12843},{\"attributes\":{\"n\":\"2.6\"},\"end\":14226,\"start\":14180},{\"attributes\":{\"n\":\"2.7\"},\"end\":14954,\"start\":14922},{\"attributes\":{\"n\":\"2.8\"},\"end\":15771,\"start\":15755},{\"attributes\":{\"n\":\"3\"},\"end\":17252,\"start\":17228},{\"attributes\":{\"n\":\"3.1\"},\"end\":17297,\"start\":17255},{\"end\":17431,\"start\":17363},{\"end\":17519,\"start\":17515},{\"end\":17758,\"start\":17754},{\"end\":17970,\"start\":17966},{\"end\":18257,\"start\":18253},{\"end\":18765,\"start\":18761},{\"attributes\":{\"n\":\"3.2\"},\"end\":19140,\"start\":19119},{\"attributes\":{\"n\":\"3.3\"},\"end\":19694,\"start\":19650},{\"attributes\":{\"n\":\"3.3.1\"},\"end\":20066,\"start\":20053},{\"attributes\":{\"n\":\"3.3.2\"},\"end\":20577,\"start\":20562},{\"attributes\":{\"n\":\"3.3.3\"},\"end\":21770,\"start\":21750},{\"attributes\":{\"n\":\"3.3.4\"},\"end\":22436,\"start\":22417},{\"attributes\":{\"n\":\"3.3.5\"},\"end\":23058,\"start\":23031},{\"attributes\":{\"n\":\"3.3.6\"},\"end\":23543,\"start\":23511},{\"attributes\":{\"n\":\"3.3.7\"},\"end\":24227,\"start\":24211},{\"attributes\":{\"n\":\"3.4\"},\"end\":25047,\"start\":25035},{\"attributes\":{\"n\":\"3.4.1\"},\"end\":25391,\"start\":25364},{\"attributes\":{\"n\":\"3.4.2\"},\"end\":26237,\"start\":26213},{\"attributes\":{\"n\":\"3.4.3\"},\"end\":27074,\"start\":27046},{\"attributes\":{\"n\":\"3.4.4\"},\"end\":29175,\"start\":29168},{\"attributes\":{\"n\":\"4\"},\"end\":30625,\"start\":30607},{\"attributes\":{\"n\":\"4.1.2\"},\"end\":31940,\"start\":31920},{\"end\":31955,\"start\":31943},{\"attributes\":{\"n\":\"4.2\"},\"end\":32788,\"start\":32753},{\"attributes\":{\"n\":\"4.2.1\"},\"end\":33150,\"start\":33141},{\"attributes\":{\"n\":\"4.2.2\"},\"end\":34575,\"start\":34556},{\"attributes\":{\"n\":\"4.2.3\"},\"end\":35950,\"start\":35930},{\"end\":36219,\"start\":36207},{\"attributes\":{\"n\":\"4.3\"},\"end\":36867,\"start\":36825},{\"attributes\":{\"n\":\"4.3.1\"},\"end\":37038,\"start\":37029},{\"end\":37831,\"start\":37830},{\"end\":37911,\"start\":37910},{\"attributes\":{\"n\":\"4.3.2\"},\"end\":38597,\"start\":38577},{\"end\":38612,\"start\":38600},{\"attributes\":{\"n\":\"4.4\"},\"end\":39854,\"start\":39808},{\"attributes\":{\"n\":\"4.4.1\"},\"end\":40074,\"start\":40065},{\"attributes\":{\"n\":\"4.4.2\"},\"end\":41696,\"start\":41676},{\"end\":41711,\"start\":41699},{\"attributes\":{\"n\":\"4.5\"},\"end\":44082,\"start\":44048},{\"attributes\":{\"n\":\"4.5.1\"},\"end\":44463,\"start\":44443},{\"attributes\":{\"n\":\"4.6\"},\"end\":45437,\"start\":45389},{\"attributes\":{\"n\":\"5\"},\"end\":47541,\"start\":47529},{\"attributes\":{\"n\":\"5.1\"},\"end\":47670,\"start\":47651},{\"attributes\":{\"n\":\"5.2\"},\"end\":49996,\"start\":49957},{\"attributes\":{\"n\":\"6\"},\"end\":52342,\"start\":52330},{\"attributes\":{\"n\":\"6.1\"},\"end\":52466,\"start\":52426},{\"attributes\":{\"n\":\"6.2\"},\"end\":53393,\"start\":53334},{\"attributes\":{\"n\":\"6.3\"},\"end\":54201,\"start\":54191},{\"attributes\":{\"n\":\"6.4\"},\"end\":55092,\"start\":55073},{\"attributes\":{\"n\":\"6.5\"},\"end\":55529,\"start\":55497},{\"attributes\":{\"n\":\"7\"},\"end\":56419,\"start\":56409},{\"end\":57901,\"start\":57893},{\"end\":57961,\"start\":57904},{\"end\":59318,\"start\":59304},{\"end\":59913,\"start\":59899},{\"end\":60028,\"start\":60014},{\"end\":60100,\"start\":60092},{\"end\":60444,\"start\":60430},{\"end\":60537,\"start\":60523},{\"end\":60641,\"start\":60627},{\"end\":60725,\"start\":60711},{\"end\":60921,\"start\":60907},{\"end\":60986,\"start\":60972},{\"end\":61079,\"start\":61078},{\"end\":61354,\"start\":61340},{\"end\":62027,\"start\":62014},{\"end\":62338,\"start\":62331},{\"end\":63105,\"start\":63094},{\"end\":64276,\"start\":64265},{\"end\":65109,\"start\":65098},{\"end\":65943,\"start\":65934},{\"end\":67327,\"start\":67320},{\"end\":67595,\"start\":67588},{\"end\":68576,\"start\":68564},{\"end\":69780,\"start\":69764},{\"end\":70632,\"start\":70620},{\"end\":71532,\"start\":71524},{\"end\":71702,\"start\":71694}]", "table": "[{\"end\":62725,\"start\":62340},{\"end\":63092,\"start\":62958},{\"end\":64263,\"start\":63213},{\"end\":65096,\"start\":64278},{\"end\":65932,\"start\":65193},{\"end\":67318,\"start\":66076},{\"end\":67586,\"start\":67412},{\"end\":68562,\"start\":67836},{\"end\":69762,\"start\":68646},{\"end\":70618,\"start\":69823},{\"end\":71522,\"start\":70692},{\"end\":71692,\"start\":71580},{\"end\":71935,\"start\":71845}]", "figure_caption": "[{\"end\":59897,\"start\":59320},{\"end\":60012,\"start\":59915},{\"end\":60090,\"start\":60030},{\"end\":60428,\"start\":60102},{\"end\":60521,\"start\":60446},{\"end\":60625,\"start\":60539},{\"end\":60709,\"start\":60643},{\"end\":60905,\"start\":60727},{\"end\":60970,\"start\":60923},{\"end\":61076,\"start\":60988},{\"end\":61338,\"start\":61080},{\"end\":61493,\"start\":61356},{\"end\":62012,\"start\":61496},{\"end\":62329,\"start\":62029},{\"end\":62958,\"start\":62728},{\"end\":63213,\"start\":63107},{\"end\":65193,\"start\":65111},{\"end\":66076,\"start\":65945},{\"end\":67412,\"start\":67329},{\"end\":67836,\"start\":67597},{\"end\":68646,\"start\":68578},{\"end\":69823,\"start\":69783},{\"end\":70692,\"start\":70635},{\"end\":71580,\"start\":71535},{\"end\":71845,\"start\":71705}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34053,\"start\":34045},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34287,\"start\":34277},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34590,\"start\":34580},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34846,\"start\":34840},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":35236,\"start\":35230}]", "bib_author_first_name": "[{\"end\":72047,\"start\":72046},{\"end\":72054,\"start\":72053},{\"end\":72056,\"start\":72055},{\"end\":72067,\"start\":72063},{\"end\":72074,\"start\":72073},{\"end\":72441,\"start\":72440},{\"end\":72450,\"start\":72449},{\"end\":72463,\"start\":72462},{\"end\":72465,\"start\":72464},{\"end\":72914,\"start\":72913},{\"end\":72916,\"start\":72915},{\"end\":72927,\"start\":72926},{\"end\":72940,\"start\":72939},{\"end\":72949,\"start\":72948},{\"end\":72955,\"start\":72954},{\"end\":73303,\"start\":73302},{\"end\":73316,\"start\":73315},{\"end\":73612,\"start\":73611},{\"end\":73620,\"start\":73619},{\"end\":73627,\"start\":73626},{\"end\":73634,\"start\":73633},{\"end\":74031,\"start\":74030},{\"end\":74042,\"start\":74041},{\"end\":74044,\"start\":74043},{\"end\":74054,\"start\":74053},{\"end\":74064,\"start\":74063},{\"end\":74066,\"start\":74065},{\"end\":74476,\"start\":74475},{\"end\":74488,\"start\":74487},{\"end\":74490,\"start\":74489},{\"end\":74917,\"start\":74913},{\"end\":74925,\"start\":74924},{\"end\":74934,\"start\":74933},{\"end\":74943,\"start\":74942},{\"end\":74950,\"start\":74949},{\"end\":74959,\"start\":74958},{\"end\":75348,\"start\":75347},{\"end\":75354,\"start\":75353},{\"end\":75366,\"start\":75362},{\"end\":75376,\"start\":75375},{\"end\":75807,\"start\":75806},{\"end\":75816,\"start\":75815},{\"end\":75825,\"start\":75824},{\"end\":76163,\"start\":76162},{\"end\":76171,\"start\":76170},{\"end\":76180,\"start\":76179},{\"end\":76539,\"start\":76538},{\"end\":76546,\"start\":76545},{\"end\":76560,\"start\":76559},{\"end\":76562,\"start\":76561},{\"end\":76577,\"start\":76576},{\"end\":76999,\"start\":76998},{\"end\":77009,\"start\":77008},{\"end\":77020,\"start\":77019},{\"end\":77030,\"start\":77029},{\"end\":77038,\"start\":77037},{\"end\":77587,\"start\":77586},{\"end\":77597,\"start\":77596},{\"end\":78158,\"start\":78157},{\"end\":78165,\"start\":78164},{\"end\":78172,\"start\":78171},{\"end\":78178,\"start\":78177},{\"end\":78647,\"start\":78646},{\"end\":78649,\"start\":78648},{\"end\":78660,\"start\":78659},{\"end\":78667,\"start\":78666},{\"end\":78673,\"start\":78672},{\"end\":79099,\"start\":79098},{\"end\":79110,\"start\":79109},{\"end\":79120,\"start\":79119},{\"end\":79128,\"start\":79127},{\"end\":79138,\"start\":79137},{\"end\":79147,\"start\":79146},{\"end\":79149,\"start\":79148},{\"end\":79158,\"start\":79157},{\"end\":79166,\"start\":79165},{\"end\":79589,\"start\":79588},{\"end\":79591,\"start\":79590},{\"end\":79600,\"start\":79599},{\"end\":79602,\"start\":79601},{\"end\":80078,\"start\":80077},{\"end\":80087,\"start\":80086},{\"end\":80100,\"start\":80099},{\"end\":80113,\"start\":80112},{\"end\":80115,\"start\":80114},{\"end\":80408,\"start\":80407},{\"end\":80410,\"start\":80409},{\"end\":80421,\"start\":80420},{\"end\":80434,\"start\":80433},{\"end\":80440,\"start\":80439},{\"end\":80728,\"start\":80727},{\"end\":80736,\"start\":80735},{\"end\":80746,\"start\":80745},{\"end\":80748,\"start\":80747},{\"end\":81194,\"start\":81193},{\"end\":81204,\"start\":81203},{\"end\":81214,\"start\":81213},{\"end\":81225,\"start\":81224},{\"end\":81235,\"start\":81234},{\"end\":81244,\"start\":81243},{\"end\":81256,\"start\":81255},{\"end\":81713,\"start\":81712},{\"end\":81721,\"start\":81720},{\"end\":81730,\"start\":81729},{\"end\":81736,\"start\":81735},{\"end\":82061,\"start\":82060},{\"end\":82069,\"start\":82068},{\"end\":82449,\"start\":82448},{\"end\":82457,\"start\":82456},{\"end\":82933,\"start\":82929},{\"end\":82939,\"start\":82938},{\"end\":82945,\"start\":82944},{\"end\":82948,\"start\":82946},{\"end\":82957,\"start\":82956},{\"end\":83423,\"start\":83422},{\"end\":83429,\"start\":83428},{\"end\":83705,\"start\":83704},{\"end\":83712,\"start\":83711},{\"end\":83721,\"start\":83717},{\"end\":83981,\"start\":83980},{\"end\":83983,\"start\":83982},{\"end\":83997,\"start\":83996},{\"end\":84261,\"start\":84260},{\"end\":84270,\"start\":84269},{\"end\":84272,\"start\":84271},{\"end\":84279,\"start\":84278},{\"end\":84622,\"start\":84621},{\"end\":84629,\"start\":84628},{\"end\":84636,\"start\":84635},{\"end\":84645,\"start\":84644},{\"end\":84653,\"start\":84652},{\"end\":84660,\"start\":84659},{\"end\":85201,\"start\":85200},{\"end\":85208,\"start\":85207},{\"end\":85217,\"start\":85216},{\"end\":85226,\"start\":85225},{\"end\":85233,\"start\":85232},{\"end\":85704,\"start\":85703},{\"end\":85910,\"start\":85909},{\"end\":85912,\"start\":85911},{\"end\":85920,\"start\":85919},{\"end\":85930,\"start\":85929},{\"end\":85937,\"start\":85936},{\"end\":86214,\"start\":86210},{\"end\":86216,\"start\":86215},{\"end\":86222,\"start\":86221},{\"end\":86228,\"start\":86227},{\"end\":86495,\"start\":86494},{\"end\":86502,\"start\":86501},{\"end\":86755,\"start\":86754},{\"end\":86764,\"start\":86763},{\"end\":86772,\"start\":86771},{\"end\":86781,\"start\":86780},{\"end\":86788,\"start\":86787},{\"end\":86796,\"start\":86795},{\"end\":86805,\"start\":86804},{\"end\":87210,\"start\":87209},{\"end\":87216,\"start\":87215},{\"end\":87224,\"start\":87223},{\"end\":87233,\"start\":87232},{\"end\":87239,\"start\":87238},{\"end\":87463,\"start\":87462},{\"end\":87775,\"start\":87774},{\"end\":87784,\"start\":87783},{\"end\":88015,\"start\":88014},{\"end\":88024,\"start\":88023},{\"end\":88033,\"start\":88032},{\"end\":88252,\"start\":88251},{\"end\":88267,\"start\":88266},{\"end\":88632,\"start\":88631},{\"end\":88634,\"start\":88633},{\"end\":88642,\"start\":88641},{\"end\":88651,\"start\":88650},{\"end\":88663,\"start\":88662},{\"end\":88665,\"start\":88664},{\"end\":88982,\"start\":88981},{\"end\":88991,\"start\":88990},{\"end\":88998,\"start\":88997},{\"end\":89005,\"start\":89004},{\"end\":89014,\"start\":89013},{\"end\":89258,\"start\":89257},{\"end\":89260,\"start\":89259},{\"end\":89268,\"start\":89267},{\"end\":89275,\"start\":89274},{\"end\":89281,\"start\":89280},{\"end\":89290,\"start\":89289},{\"end\":89631,\"start\":89630},{\"end\":89640,\"start\":89639},{\"end\":89651,\"start\":89650},{\"end\":90085,\"start\":90084},{\"end\":90329,\"start\":90325},{\"end\":90636,\"start\":90635},{\"end\":90646,\"start\":90642},{\"end\":90653,\"start\":90652},{\"end\":90655,\"start\":90654},{\"end\":90663,\"start\":90662},{\"end\":90670,\"start\":90669},{\"end\":91060,\"start\":91059},{\"end\":91067,\"start\":91066},{\"end\":91076,\"start\":91075},{\"end\":91083,\"start\":91082},{\"end\":91434,\"start\":91433},{\"end\":91441,\"start\":91440},{\"end\":91450,\"start\":91449},{\"end\":91461,\"start\":91457},{\"end\":91470,\"start\":91469},{\"end\":91774,\"start\":91773},{\"end\":91783,\"start\":91782},{\"end\":91791,\"start\":91790},{\"end\":91798,\"start\":91797},{\"end\":91807,\"start\":91806},{\"end\":91814,\"start\":91813},{\"end\":91823,\"start\":91822},{\"end\":92272,\"start\":92271},{\"end\":92281,\"start\":92280},{\"end\":92290,\"start\":92289},{\"end\":92299,\"start\":92298},{\"end\":92306,\"start\":92305},{\"end\":92792,\"start\":92791},{\"end\":92801,\"start\":92800},{\"end\":92808,\"start\":92807},{\"end\":92816,\"start\":92815},{\"end\":92825,\"start\":92824},{\"end\":93295,\"start\":93294},{\"end\":93312,\"start\":93308},{\"end\":93325,\"start\":93324},{\"end\":93335,\"start\":93334},{\"end\":93347,\"start\":93346},{\"end\":93728,\"start\":93727},{\"end\":93734,\"start\":93733},{\"end\":93743,\"start\":93742},{\"end\":93752,\"start\":93751},{\"end\":93760,\"start\":93759},{\"end\":93771,\"start\":93770},{\"end\":94181,\"start\":94180},{\"end\":94368,\"start\":94367},{\"end\":94376,\"start\":94375},{\"end\":95034,\"start\":95033},{\"end\":95041,\"start\":95040},{\"end\":95043,\"start\":95042},{\"end\":95208,\"start\":95207},{\"end\":95220,\"start\":95219},{\"end\":95232,\"start\":95231},{\"end\":95246,\"start\":95245},{\"end\":95557,\"start\":95553},{\"end\":95567,\"start\":95563},{\"end\":95577,\"start\":95573},{\"end\":95935,\"start\":95931},{\"end\":95947,\"start\":95943},{\"end\":96248,\"start\":96247},{\"end\":96256,\"start\":96255},{\"end\":96263,\"start\":96262},{\"end\":96265,\"start\":96264},{\"end\":96520,\"start\":96519},{\"end\":96534,\"start\":96533},{\"end\":96542,\"start\":96541},{\"end\":96828,\"start\":96827},{\"end\":96840,\"start\":96839},{\"end\":96851,\"start\":96850},{\"end\":97340,\"start\":97339},{\"end\":97348,\"start\":97347},{\"end\":97355,\"start\":97354},{\"end\":97361,\"start\":97360},{\"end\":97743,\"start\":97742},{\"end\":97745,\"start\":97744},{\"end\":97753,\"start\":97752},{\"end\":97763,\"start\":97762},{\"end\":97773,\"start\":97772},{\"end\":97779,\"start\":97778},{\"end\":98089,\"start\":98088},{\"end\":98095,\"start\":98092},{\"end\":98106,\"start\":98105},{\"end\":98108,\"start\":98107},{\"end\":98386,\"start\":98385},{\"end\":98388,\"start\":98387},{\"end\":98397,\"start\":98396},{\"end\":98409,\"start\":98408},{\"end\":98411,\"start\":98410},{\"end\":98423,\"start\":98422},{\"end\":98735,\"start\":98734},{\"end\":98744,\"start\":98743},{\"end\":99113,\"start\":99112},{\"end\":99125,\"start\":99124},{\"end\":99135,\"start\":99134},{\"end\":99146,\"start\":99145},{\"end\":99611,\"start\":99610},{\"end\":99613,\"start\":99612},{\"end\":99621,\"start\":99620},{\"end\":99632,\"start\":99631},{\"end\":99643,\"start\":99642},{\"end\":99650,\"start\":99649},{\"end\":100102,\"start\":100098},{\"end\":100104,\"start\":100103},{\"end\":100110,\"start\":100109},{\"end\":100119,\"start\":100118},{\"end\":100452,\"start\":100451},{\"end\":100461,\"start\":100460},{\"end\":100470,\"start\":100469},{\"end\":100768,\"start\":100767},{\"end\":100779,\"start\":100778},{\"end\":100781,\"start\":100780},{\"end\":100791,\"start\":100790},{\"end\":100793,\"start\":100792},{\"end\":100804,\"start\":100803},{\"end\":100806,\"start\":100805},{\"end\":101124,\"start\":101123},{\"end\":101136,\"start\":101135},{\"end\":101148,\"start\":101147},{\"end\":101431,\"start\":101430},{\"end\":101439,\"start\":101438},{\"end\":101448,\"start\":101447},{\"end\":101455,\"start\":101454},{\"end\":101464,\"start\":101463},{\"end\":101947,\"start\":101946},{\"end\":101955,\"start\":101954},{\"end\":101964,\"start\":101963},{\"end\":101971,\"start\":101970},{\"end\":101977,\"start\":101976},{\"end\":101985,\"start\":101984}]", "bib_author_last_name": "[{\"end\":72051,\"start\":72048},{\"end\":72061,\"start\":72057},{\"end\":72071,\"start\":72068},{\"end\":72077,\"start\":72075},{\"end\":72447,\"start\":72442},{\"end\":72460,\"start\":72451},{\"end\":72476,\"start\":72466},{\"end\":72924,\"start\":72917},{\"end\":72937,\"start\":72928},{\"end\":72946,\"start\":72941},{\"end\":72952,\"start\":72950},{\"end\":72958,\"start\":72956},{\"end\":73313,\"start\":73304},{\"end\":73325,\"start\":73317},{\"end\":73617,\"start\":73613},{\"end\":73624,\"start\":73621},{\"end\":73631,\"start\":73628},{\"end\":73638,\"start\":73635},{\"end\":74039,\"start\":74032},{\"end\":74051,\"start\":74045},{\"end\":74061,\"start\":74055},{\"end\":74071,\"start\":74067},{\"end\":74485,\"start\":74477},{\"end\":74496,\"start\":74491},{\"end\":74922,\"start\":74918},{\"end\":74931,\"start\":74926},{\"end\":74940,\"start\":74935},{\"end\":74947,\"start\":74944},{\"end\":74956,\"start\":74951},{\"end\":74963,\"start\":74960},{\"end\":75351,\"start\":75349},{\"end\":75360,\"start\":75355},{\"end\":75373,\"start\":75367},{\"end\":75380,\"start\":75377},{\"end\":75813,\"start\":75808},{\"end\":75822,\"start\":75817},{\"end\":75831,\"start\":75826},{\"end\":76168,\"start\":76164},{\"end\":76177,\"start\":76172},{\"end\":76183,\"start\":76181},{\"end\":76543,\"start\":76540},{\"end\":76557,\"start\":76547},{\"end\":76572,\"start\":76563},{\"end\":76584,\"start\":76578},{\"end\":77006,\"start\":77000},{\"end\":77017,\"start\":77010},{\"end\":77027,\"start\":77021},{\"end\":77035,\"start\":77031},{\"end\":77046,\"start\":77039},{\"end\":77594,\"start\":77588},{\"end\":77602,\"start\":77598},{\"end\":78162,\"start\":78159},{\"end\":78169,\"start\":78166},{\"end\":78175,\"start\":78173},{\"end\":78181,\"start\":78179},{\"end\":78657,\"start\":78650},{\"end\":78664,\"start\":78661},{\"end\":78670,\"start\":78668},{\"end\":78676,\"start\":78674},{\"end\":79107,\"start\":79100},{\"end\":79117,\"start\":79111},{\"end\":79125,\"start\":79121},{\"end\":79135,\"start\":79129},{\"end\":79144,\"start\":79139},{\"end\":79155,\"start\":79150},{\"end\":79163,\"start\":79159},{\"end\":79173,\"start\":79167},{\"end\":79597,\"start\":79592},{\"end\":79610,\"start\":79603},{\"end\":80084,\"start\":80079},{\"end\":80097,\"start\":80088},{\"end\":80110,\"start\":80101},{\"end\":80126,\"start\":80116},{\"end\":80418,\"start\":80411},{\"end\":80431,\"start\":80422},{\"end\":80437,\"start\":80435},{\"end\":80443,\"start\":80441},{\"end\":80733,\"start\":80729},{\"end\":80743,\"start\":80737},{\"end\":80754,\"start\":80749},{\"end\":81201,\"start\":81195},{\"end\":81211,\"start\":81205},{\"end\":81222,\"start\":81215},{\"end\":81232,\"start\":81226},{\"end\":81241,\"start\":81236},{\"end\":81253,\"start\":81245},{\"end\":81266,\"start\":81257},{\"end\":81718,\"start\":81714},{\"end\":81727,\"start\":81722},{\"end\":81733,\"start\":81731},{\"end\":81741,\"start\":81737},{\"end\":82066,\"start\":82062},{\"end\":82079,\"start\":82070},{\"end\":82454,\"start\":82450},{\"end\":82461,\"start\":82458},{\"end\":82936,\"start\":82934},{\"end\":82942,\"start\":82940},{\"end\":82954,\"start\":82949},{\"end\":82965,\"start\":82958},{\"end\":83426,\"start\":83424},{\"end\":83435,\"start\":83430},{\"end\":83709,\"start\":83706},{\"end\":83715,\"start\":83713},{\"end\":83728,\"start\":83722},{\"end\":83994,\"start\":83984},{\"end\":84005,\"start\":83998},{\"end\":84267,\"start\":84262},{\"end\":84276,\"start\":84273},{\"end\":84293,\"start\":84280},{\"end\":84626,\"start\":84623},{\"end\":84633,\"start\":84630},{\"end\":84642,\"start\":84637},{\"end\":84650,\"start\":84646},{\"end\":84657,\"start\":84654},{\"end\":84664,\"start\":84661},{\"end\":85205,\"start\":85202},{\"end\":85214,\"start\":85209},{\"end\":85223,\"start\":85218},{\"end\":85230,\"start\":85227},{\"end\":85237,\"start\":85234},{\"end\":85708,\"start\":85705},{\"end\":85917,\"start\":85913},{\"end\":85927,\"start\":85921},{\"end\":85934,\"start\":85931},{\"end\":85940,\"start\":85938},{\"end\":86219,\"start\":86217},{\"end\":86225,\"start\":86223},{\"end\":86234,\"start\":86229},{\"end\":86499,\"start\":86496},{\"end\":86509,\"start\":86503},{\"end\":86761,\"start\":86756},{\"end\":86769,\"start\":86765},{\"end\":86778,\"start\":86773},{\"end\":86785,\"start\":86782},{\"end\":86793,\"start\":86789},{\"end\":86802,\"start\":86797},{\"end\":86811,\"start\":86806},{\"end\":87213,\"start\":87211},{\"end\":87221,\"start\":87217},{\"end\":87230,\"start\":87225},{\"end\":87236,\"start\":87234},{\"end\":87244,\"start\":87240},{\"end\":87470,\"start\":87464},{\"end\":87781,\"start\":87776},{\"end\":87790,\"start\":87785},{\"end\":88021,\"start\":88016},{\"end\":88030,\"start\":88025},{\"end\":88039,\"start\":88034},{\"end\":88264,\"start\":88253},{\"end\":88280,\"start\":88268},{\"end\":88639,\"start\":88635},{\"end\":88648,\"start\":88643},{\"end\":88660,\"start\":88652},{\"end\":88671,\"start\":88666},{\"end\":88988,\"start\":88983},{\"end\":88995,\"start\":88992},{\"end\":89002,\"start\":88999},{\"end\":89011,\"start\":89006},{\"end\":89018,\"start\":89015},{\"end\":89265,\"start\":89261},{\"end\":89272,\"start\":89269},{\"end\":89278,\"start\":89276},{\"end\":89287,\"start\":89282},{\"end\":89297,\"start\":89291},{\"end\":89637,\"start\":89632},{\"end\":89648,\"start\":89641},{\"end\":89657,\"start\":89652},{\"end\":90088,\"start\":90086},{\"end\":90333,\"start\":90330},{\"end\":90640,\"start\":90637},{\"end\":90650,\"start\":90647},{\"end\":90660,\"start\":90656},{\"end\":90667,\"start\":90664},{\"end\":90677,\"start\":90671},{\"end\":91064,\"start\":91061},{\"end\":91073,\"start\":91068},{\"end\":91080,\"start\":91077},{\"end\":91087,\"start\":91084},{\"end\":91438,\"start\":91435},{\"end\":91447,\"start\":91442},{\"end\":91455,\"start\":91451},{\"end\":91467,\"start\":91462},{\"end\":91474,\"start\":91471},{\"end\":91780,\"start\":91775},{\"end\":91788,\"start\":91784},{\"end\":91795,\"start\":91792},{\"end\":91804,\"start\":91799},{\"end\":91811,\"start\":91808},{\"end\":91820,\"start\":91815},{\"end\":91829,\"start\":91824},{\"end\":92278,\"start\":92273},{\"end\":92287,\"start\":92282},{\"end\":92296,\"start\":92291},{\"end\":92303,\"start\":92300},{\"end\":92311,\"start\":92307},{\"end\":92798,\"start\":92793},{\"end\":92805,\"start\":92802},{\"end\":92813,\"start\":92809},{\"end\":92822,\"start\":92817},{\"end\":92831,\"start\":92826},{\"end\":93306,\"start\":93296},{\"end\":93322,\"start\":93313},{\"end\":93332,\"start\":93326},{\"end\":93344,\"start\":93336},{\"end\":93355,\"start\":93348},{\"end\":93731,\"start\":93729},{\"end\":93740,\"start\":93735},{\"end\":93749,\"start\":93744},{\"end\":93757,\"start\":93753},{\"end\":93768,\"start\":93761},{\"end\":93778,\"start\":93772},{\"end\":94191,\"start\":94182},{\"end\":94373,\"start\":94369},{\"end\":94389,\"start\":94377},{\"end\":95038,\"start\":95035},{\"end\":95052,\"start\":95044},{\"end\":95217,\"start\":95209},{\"end\":95229,\"start\":95221},{\"end\":95243,\"start\":95233},{\"end\":95254,\"start\":95247},{\"end\":95561,\"start\":95558},{\"end\":95571,\"start\":95568},{\"end\":95581,\"start\":95578},{\"end\":95941,\"start\":95936},{\"end\":95951,\"start\":95948},{\"end\":96253,\"start\":96249},{\"end\":96260,\"start\":96257},{\"end\":96274,\"start\":96266},{\"end\":96531,\"start\":96521},{\"end\":96539,\"start\":96535},{\"end\":96546,\"start\":96543},{\"end\":96837,\"start\":96829},{\"end\":96848,\"start\":96841},{\"end\":96857,\"start\":96852},{\"end\":97345,\"start\":97341},{\"end\":97352,\"start\":97349},{\"end\":97358,\"start\":97356},{\"end\":97366,\"start\":97362},{\"end\":97750,\"start\":97746},{\"end\":97760,\"start\":97754},{\"end\":97770,\"start\":97764},{\"end\":97776,\"start\":97774},{\"end\":97793,\"start\":97780},{\"end\":98103,\"start\":98096},{\"end\":98119,\"start\":98109},{\"end\":98394,\"start\":98389},{\"end\":98406,\"start\":98398},{\"end\":98420,\"start\":98412},{\"end\":98430,\"start\":98424},{\"end\":98741,\"start\":98736},{\"end\":98751,\"start\":98745},{\"end\":99122,\"start\":99114},{\"end\":99132,\"start\":99126},{\"end\":99143,\"start\":99136},{\"end\":99154,\"start\":99147},{\"end\":99618,\"start\":99614},{\"end\":99629,\"start\":99622},{\"end\":99640,\"start\":99633},{\"end\":99647,\"start\":99644},{\"end\":99657,\"start\":99651},{\"end\":100107,\"start\":100105},{\"end\":100116,\"start\":100111},{\"end\":100122,\"start\":100120},{\"end\":100458,\"start\":100453},{\"end\":100467,\"start\":100462},{\"end\":100476,\"start\":100471},{\"end\":100776,\"start\":100769},{\"end\":100788,\"start\":100782},{\"end\":100801,\"start\":100794},{\"end\":100813,\"start\":100807},{\"end\":101133,\"start\":101125},{\"end\":101145,\"start\":101137},{\"end\":101156,\"start\":101149},{\"end\":101436,\"start\":101432},{\"end\":101445,\"start\":101440},{\"end\":101452,\"start\":101449},{\"end\":101461,\"start\":101456},{\"end\":101468,\"start\":101465},{\"end\":101952,\"start\":101948},{\"end\":101961,\"start\":101956},{\"end\":101968,\"start\":101965},{\"end\":101974,\"start\":101972},{\"end\":101982,\"start\":101978},{\"end\":101991,\"start\":101986}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":14834203},\"end\":72384,\"start\":71952},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":8923739},\"end\":72813,\"start\":72386},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":14933644},\"end\":73250,\"start\":72815},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":14816637},\"end\":73543,\"start\":73252},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":18716551},\"end\":73966,\"start\":73545},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":16926697},\"end\":74423,\"start\":73968},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":11870449},\"end\":74819,\"start\":74425},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":12319675},\"end\":75283,\"start\":74821},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17081501},\"end\":75749,\"start\":75285},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":2355764},\"end\":76047,\"start\":75751},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":8037297},\"end\":76497,\"start\":76049},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":47388286},\"end\":76957,\"start\":76499},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":46530},\"end\":77519,\"start\":76959},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":6223273},\"end\":77954,\"start\":77521},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":206868103},\"end\":78583,\"start\":77956},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":16190256},\"end\":79042,\"start\":78585},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":2776850},\"end\":79508,\"start\":79044},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":14937735},\"end\":80014,\"start\":79510},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":2705973},\"end\":80358,\"start\":80016},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":14784833},\"end\":80628,\"start\":80360},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":12796895},\"end\":81150,\"start\":80630},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":11168734},\"end\":81619,\"start\":81152},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":1746154},\"end\":81989,\"start\":81621},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":11223473},\"end\":82377,\"start\":81991},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":33311602},\"end\":82850,\"start\":82379},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":1635455},\"end\":83354,\"start\":82852},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":9956551},\"end\":83658,\"start\":83356},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":13048843},\"end\":83892,\"start\":83660},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":27164566},\"end\":84213,\"start\":83894},{\"attributes\":{\"id\":\"b29\"},\"end\":84554,\"start\":84215},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":17777200},\"end\":85079,\"start\":84556},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":18095907},\"end\":85629,\"start\":85081},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":51755821},\"end\":85847,\"start\":85631},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":264979},\"end\":86153,\"start\":85849},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":12072575},\"end\":86429,\"start\":86155},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":6853229},\"end\":86723,\"start\":86431},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":12734659},\"end\":87172,\"start\":86725},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":13763349},\"end\":87443,\"start\":87174},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":3720268},\"end\":87747,\"start\":87445},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":5523801},\"end\":87943,\"start\":87749},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":3566711},\"end\":88249,\"start\":87945},{\"attributes\":{\"id\":\"b41\"},\"end\":88562,\"start\":88251},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":2134475},\"end\":88947,\"start\":88564},{\"attributes\":{\"id\":\"b43\"},\"end\":89214,\"start\":88949},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":7844555},\"end\":89519,\"start\":89216},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":16074379},\"end\":90040,\"start\":89521},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":9997448},\"end\":90279,\"start\":90042},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":28826624},\"end\":90539,\"start\":90281},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":18302903},\"end\":90994,\"start\":90541},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":15378841},\"end\":91363,\"start\":90996},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":7144412},\"end\":91723,\"start\":91365},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":3155193},\"end\":92200,\"start\":91725},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":49269943},\"end\":92729,\"start\":92202},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":36312942},\"end\":93180,\"start\":92731},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":9938922},\"end\":93655,\"start\":93182},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":18614264},\"end\":94111,\"start\":93657},{\"attributes\":{\"id\":\"b56\"},\"end\":94324,\"start\":94113},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":2814942},\"end\":94624,\"start\":94326},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":12394125},\"end\":94973,\"start\":94626},{\"attributes\":{\"id\":\"b59\"},\"end\":95162,\"start\":94975},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":1273561},\"end\":95523,\"start\":95164},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":5327694},\"end\":95882,\"start\":95525},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":961425},\"end\":96173,\"start\":95884},{\"attributes\":{\"id\":\"b63\",\"matched_paper_id\":9974267},\"end\":96422,\"start\":96175},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":6887441},\"end\":96716,\"start\":96424},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":15100072},\"end\":97267,\"start\":96718},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":3089661},\"end\":97673,\"start\":97269},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":3329645},\"end\":98032,\"start\":97675},{\"attributes\":{\"id\":\"b68\",\"matched_paper_id\":2478952},\"end\":98303,\"start\":98034},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":2061682},\"end\":98695,\"start\":98305},{\"attributes\":{\"id\":\"b70\",\"matched_paper_id\":1024262},\"end\":99019,\"start\":98697},{\"attributes\":{\"id\":\"b71\",\"matched_paper_id\":6182111},\"end\":99539,\"start\":99021},{\"attributes\":{\"id\":\"b72\",\"matched_paper_id\":496552},\"end\":100013,\"start\":99541},{\"attributes\":{\"id\":\"b73\",\"matched_paper_id\":15641614},\"end\":100413,\"start\":100015},{\"attributes\":{\"id\":\"b74\",\"matched_paper_id\":7135142},\"end\":100733,\"start\":100415},{\"attributes\":{\"id\":\"b75\",\"matched_paper_id\":10311436},\"end\":101069,\"start\":100735},{\"attributes\":{\"id\":\"b76\",\"matched_paper_id\":2926068},\"end\":101372,\"start\":101071},{\"attributes\":{\"id\":\"b77\",\"matched_paper_id\":9026899},\"end\":101871,\"start\":101374},{\"attributes\":{\"id\":\"b78\"},\"end\":102125,\"start\":101873}]", "bib_title": "[{\"end\":72044,\"start\":71952},{\"end\":72438,\"start\":72386},{\"end\":72911,\"start\":72815},{\"end\":73300,\"start\":73252},{\"end\":73609,\"start\":73545},{\"end\":74028,\"start\":73968},{\"end\":74473,\"start\":74425},{\"end\":74911,\"start\":74821},{\"end\":75345,\"start\":75285},{\"end\":75804,\"start\":75751},{\"end\":76160,\"start\":76049},{\"end\":76536,\"start\":76499},{\"end\":76996,\"start\":76959},{\"end\":77584,\"start\":77521},{\"end\":78155,\"start\":77956},{\"end\":78644,\"start\":78585},{\"end\":79096,\"start\":79044},{\"end\":79586,\"start\":79510},{\"end\":80075,\"start\":80016},{\"end\":80405,\"start\":80360},{\"end\":80725,\"start\":80630},{\"end\":81191,\"start\":81152},{\"end\":81710,\"start\":81621},{\"end\":82058,\"start\":81991},{\"end\":82446,\"start\":82379},{\"end\":82927,\"start\":82852},{\"end\":83420,\"start\":83356},{\"end\":83702,\"start\":83660},{\"end\":83978,\"start\":83894},{\"end\":84258,\"start\":84215},{\"end\":84619,\"start\":84556},{\"end\":85198,\"start\":85081},{\"end\":85701,\"start\":85631},{\"end\":85907,\"start\":85849},{\"end\":86208,\"start\":86155},{\"end\":86492,\"start\":86431},{\"end\":86752,\"start\":86725},{\"end\":87207,\"start\":87174},{\"end\":87460,\"start\":87445},{\"end\":87772,\"start\":87749},{\"end\":88012,\"start\":87945},{\"end\":88629,\"start\":88564},{\"end\":88979,\"start\":88949},{\"end\":89255,\"start\":89216},{\"end\":89628,\"start\":89521},{\"end\":90082,\"start\":90042},{\"end\":90323,\"start\":90281},{\"end\":90633,\"start\":90541},{\"end\":91057,\"start\":90996},{\"end\":91431,\"start\":91365},{\"end\":91771,\"start\":91725},{\"end\":92269,\"start\":92202},{\"end\":92789,\"start\":92731},{\"end\":93292,\"start\":93182},{\"end\":93725,\"start\":93657},{\"end\":94365,\"start\":94326},{\"end\":94684,\"start\":94626},{\"end\":95205,\"start\":95164},{\"end\":95551,\"start\":95525},{\"end\":95929,\"start\":95884},{\"end\":96245,\"start\":96175},{\"end\":96517,\"start\":96424},{\"end\":96825,\"start\":96718},{\"end\":97337,\"start\":97269},{\"end\":97740,\"start\":97675},{\"end\":98086,\"start\":98034},{\"end\":98383,\"start\":98305},{\"end\":98732,\"start\":98697},{\"end\":99110,\"start\":99021},{\"end\":99608,\"start\":99541},{\"end\":100096,\"start\":100015},{\"end\":100449,\"start\":100415},{\"end\":100765,\"start\":100735},{\"end\":101121,\"start\":101071},{\"end\":101428,\"start\":101374}]", "bib_author": "[{\"end\":72053,\"start\":72046},{\"end\":72063,\"start\":72053},{\"end\":72073,\"start\":72063},{\"end\":72079,\"start\":72073},{\"end\":72449,\"start\":72440},{\"end\":72462,\"start\":72449},{\"end\":72478,\"start\":72462},{\"end\":72926,\"start\":72913},{\"end\":72939,\"start\":72926},{\"end\":72948,\"start\":72939},{\"end\":72954,\"start\":72948},{\"end\":72960,\"start\":72954},{\"end\":73315,\"start\":73302},{\"end\":73327,\"start\":73315},{\"end\":73619,\"start\":73611},{\"end\":73626,\"start\":73619},{\"end\":73633,\"start\":73626},{\"end\":73640,\"start\":73633},{\"end\":74041,\"start\":74030},{\"end\":74053,\"start\":74041},{\"end\":74063,\"start\":74053},{\"end\":74073,\"start\":74063},{\"end\":74487,\"start\":74475},{\"end\":74498,\"start\":74487},{\"end\":74924,\"start\":74913},{\"end\":74933,\"start\":74924},{\"end\":74942,\"start\":74933},{\"end\":74949,\"start\":74942},{\"end\":74958,\"start\":74949},{\"end\":74965,\"start\":74958},{\"end\":75353,\"start\":75347},{\"end\":75362,\"start\":75353},{\"end\":75375,\"start\":75362},{\"end\":75382,\"start\":75375},{\"end\":75815,\"start\":75806},{\"end\":75824,\"start\":75815},{\"end\":75833,\"start\":75824},{\"end\":76170,\"start\":76162},{\"end\":76179,\"start\":76170},{\"end\":76185,\"start\":76179},{\"end\":76545,\"start\":76538},{\"end\":76559,\"start\":76545},{\"end\":76576,\"start\":76559},{\"end\":76586,\"start\":76576},{\"end\":77008,\"start\":76998},{\"end\":77019,\"start\":77008},{\"end\":77029,\"start\":77019},{\"end\":77037,\"start\":77029},{\"end\":77048,\"start\":77037},{\"end\":77596,\"start\":77586},{\"end\":77604,\"start\":77596},{\"end\":78164,\"start\":78157},{\"end\":78171,\"start\":78164},{\"end\":78177,\"start\":78171},{\"end\":78183,\"start\":78177},{\"end\":78659,\"start\":78646},{\"end\":78666,\"start\":78659},{\"end\":78672,\"start\":78666},{\"end\":78678,\"start\":78672},{\"end\":79109,\"start\":79098},{\"end\":79119,\"start\":79109},{\"end\":79127,\"start\":79119},{\"end\":79137,\"start\":79127},{\"end\":79146,\"start\":79137},{\"end\":79157,\"start\":79146},{\"end\":79165,\"start\":79157},{\"end\":79175,\"start\":79165},{\"end\":79599,\"start\":79588},{\"end\":79612,\"start\":79599},{\"end\":80086,\"start\":80077},{\"end\":80099,\"start\":80086},{\"end\":80112,\"start\":80099},{\"end\":80128,\"start\":80112},{\"end\":80420,\"start\":80407},{\"end\":80433,\"start\":80420},{\"end\":80439,\"start\":80433},{\"end\":80445,\"start\":80439},{\"end\":80735,\"start\":80727},{\"end\":80745,\"start\":80735},{\"end\":80756,\"start\":80745},{\"end\":81203,\"start\":81193},{\"end\":81213,\"start\":81203},{\"end\":81224,\"start\":81213},{\"end\":81234,\"start\":81224},{\"end\":81243,\"start\":81234},{\"end\":81255,\"start\":81243},{\"end\":81268,\"start\":81255},{\"end\":81720,\"start\":81712},{\"end\":81729,\"start\":81720},{\"end\":81735,\"start\":81729},{\"end\":81743,\"start\":81735},{\"end\":82068,\"start\":82060},{\"end\":82081,\"start\":82068},{\"end\":82456,\"start\":82448},{\"end\":82463,\"start\":82456},{\"end\":82938,\"start\":82929},{\"end\":82944,\"start\":82938},{\"end\":82956,\"start\":82944},{\"end\":82967,\"start\":82956},{\"end\":83428,\"start\":83422},{\"end\":83437,\"start\":83428},{\"end\":83711,\"start\":83704},{\"end\":83717,\"start\":83711},{\"end\":83730,\"start\":83717},{\"end\":83996,\"start\":83980},{\"end\":84007,\"start\":83996},{\"end\":84269,\"start\":84260},{\"end\":84278,\"start\":84269},{\"end\":84295,\"start\":84278},{\"end\":84628,\"start\":84621},{\"end\":84635,\"start\":84628},{\"end\":84644,\"start\":84635},{\"end\":84652,\"start\":84644},{\"end\":84659,\"start\":84652},{\"end\":84666,\"start\":84659},{\"end\":85207,\"start\":85200},{\"end\":85216,\"start\":85207},{\"end\":85225,\"start\":85216},{\"end\":85232,\"start\":85225},{\"end\":85239,\"start\":85232},{\"end\":85710,\"start\":85703},{\"end\":85919,\"start\":85909},{\"end\":85929,\"start\":85919},{\"end\":85936,\"start\":85929},{\"end\":85942,\"start\":85936},{\"end\":86221,\"start\":86210},{\"end\":86227,\"start\":86221},{\"end\":86236,\"start\":86227},{\"end\":86501,\"start\":86494},{\"end\":86511,\"start\":86501},{\"end\":86763,\"start\":86754},{\"end\":86771,\"start\":86763},{\"end\":86780,\"start\":86771},{\"end\":86787,\"start\":86780},{\"end\":86795,\"start\":86787},{\"end\":86804,\"start\":86795},{\"end\":86813,\"start\":86804},{\"end\":87215,\"start\":87209},{\"end\":87223,\"start\":87215},{\"end\":87232,\"start\":87223},{\"end\":87238,\"start\":87232},{\"end\":87246,\"start\":87238},{\"end\":87472,\"start\":87462},{\"end\":87783,\"start\":87774},{\"end\":87792,\"start\":87783},{\"end\":88023,\"start\":88014},{\"end\":88032,\"start\":88023},{\"end\":88041,\"start\":88032},{\"end\":88266,\"start\":88251},{\"end\":88282,\"start\":88266},{\"end\":88641,\"start\":88631},{\"end\":88650,\"start\":88641},{\"end\":88662,\"start\":88650},{\"end\":88673,\"start\":88662},{\"end\":88990,\"start\":88981},{\"end\":88997,\"start\":88990},{\"end\":89004,\"start\":88997},{\"end\":89013,\"start\":89004},{\"end\":89020,\"start\":89013},{\"end\":89267,\"start\":89257},{\"end\":89274,\"start\":89267},{\"end\":89280,\"start\":89274},{\"end\":89289,\"start\":89280},{\"end\":89299,\"start\":89289},{\"end\":89639,\"start\":89630},{\"end\":89650,\"start\":89639},{\"end\":89659,\"start\":89650},{\"end\":90090,\"start\":90084},{\"end\":90335,\"start\":90325},{\"end\":90642,\"start\":90635},{\"end\":90652,\"start\":90642},{\"end\":90662,\"start\":90652},{\"end\":90669,\"start\":90662},{\"end\":90679,\"start\":90669},{\"end\":91066,\"start\":91059},{\"end\":91075,\"start\":91066},{\"end\":91082,\"start\":91075},{\"end\":91089,\"start\":91082},{\"end\":91440,\"start\":91433},{\"end\":91449,\"start\":91440},{\"end\":91457,\"start\":91449},{\"end\":91469,\"start\":91457},{\"end\":91476,\"start\":91469},{\"end\":91782,\"start\":91773},{\"end\":91790,\"start\":91782},{\"end\":91797,\"start\":91790},{\"end\":91806,\"start\":91797},{\"end\":91813,\"start\":91806},{\"end\":91822,\"start\":91813},{\"end\":91831,\"start\":91822},{\"end\":92280,\"start\":92271},{\"end\":92289,\"start\":92280},{\"end\":92298,\"start\":92289},{\"end\":92305,\"start\":92298},{\"end\":92313,\"start\":92305},{\"end\":92800,\"start\":92791},{\"end\":92807,\"start\":92800},{\"end\":92815,\"start\":92807},{\"end\":92824,\"start\":92815},{\"end\":92833,\"start\":92824},{\"end\":93308,\"start\":93294},{\"end\":93324,\"start\":93308},{\"end\":93334,\"start\":93324},{\"end\":93346,\"start\":93334},{\"end\":93357,\"start\":93346},{\"end\":93733,\"start\":93727},{\"end\":93742,\"start\":93733},{\"end\":93751,\"start\":93742},{\"end\":93759,\"start\":93751},{\"end\":93770,\"start\":93759},{\"end\":93780,\"start\":93770},{\"end\":94193,\"start\":94180},{\"end\":94375,\"start\":94367},{\"end\":94391,\"start\":94375},{\"end\":95040,\"start\":95033},{\"end\":95054,\"start\":95040},{\"end\":95219,\"start\":95207},{\"end\":95231,\"start\":95219},{\"end\":95245,\"start\":95231},{\"end\":95256,\"start\":95245},{\"end\":95563,\"start\":95553},{\"end\":95573,\"start\":95563},{\"end\":95583,\"start\":95573},{\"end\":95943,\"start\":95931},{\"end\":95953,\"start\":95943},{\"end\":96255,\"start\":96247},{\"end\":96262,\"start\":96255},{\"end\":96276,\"start\":96262},{\"end\":96533,\"start\":96519},{\"end\":96541,\"start\":96533},{\"end\":96548,\"start\":96541},{\"end\":96839,\"start\":96827},{\"end\":96850,\"start\":96839},{\"end\":96859,\"start\":96850},{\"end\":97347,\"start\":97339},{\"end\":97354,\"start\":97347},{\"end\":97360,\"start\":97354},{\"end\":97368,\"start\":97360},{\"end\":97752,\"start\":97742},{\"end\":97762,\"start\":97752},{\"end\":97772,\"start\":97762},{\"end\":97778,\"start\":97772},{\"end\":97795,\"start\":97778},{\"end\":98092,\"start\":98088},{\"end\":98105,\"start\":98092},{\"end\":98121,\"start\":98105},{\"end\":98396,\"start\":98385},{\"end\":98408,\"start\":98396},{\"end\":98422,\"start\":98408},{\"end\":98432,\"start\":98422},{\"end\":98743,\"start\":98734},{\"end\":98753,\"start\":98743},{\"end\":99124,\"start\":99112},{\"end\":99134,\"start\":99124},{\"end\":99145,\"start\":99134},{\"end\":99156,\"start\":99145},{\"end\":99620,\"start\":99610},{\"end\":99631,\"start\":99620},{\"end\":99642,\"start\":99631},{\"end\":99649,\"start\":99642},{\"end\":99659,\"start\":99649},{\"end\":100109,\"start\":100098},{\"end\":100118,\"start\":100109},{\"end\":100124,\"start\":100118},{\"end\":100460,\"start\":100451},{\"end\":100469,\"start\":100460},{\"end\":100478,\"start\":100469},{\"end\":100778,\"start\":100767},{\"end\":100790,\"start\":100778},{\"end\":100803,\"start\":100790},{\"end\":100815,\"start\":100803},{\"end\":101135,\"start\":101123},{\"end\":101147,\"start\":101135},{\"end\":101158,\"start\":101147},{\"end\":101438,\"start\":101430},{\"end\":101447,\"start\":101438},{\"end\":101454,\"start\":101447},{\"end\":101463,\"start\":101454},{\"end\":101470,\"start\":101463},{\"end\":101954,\"start\":101946},{\"end\":101963,\"start\":101954},{\"end\":101970,\"start\":101963},{\"end\":101976,\"start\":101970},{\"end\":101984,\"start\":101976},{\"end\":101993,\"start\":101984}]", "bib_venue": "[{\"end\":74153,\"start\":74121},{\"end\":74587,\"start\":74550},{\"end\":75529,\"start\":75464},{\"end\":76717,\"start\":76660},{\"end\":77269,\"start\":77167},{\"end\":77751,\"start\":77686},{\"end\":78825,\"start\":78760},{\"end\":79781,\"start\":79705},{\"end\":80903,\"start\":80838},{\"end\":81391,\"start\":81338},{\"end\":82634,\"start\":82557},{\"end\":83114,\"start\":83049},{\"end\":84835,\"start\":84759},{\"end\":86960,\"start\":86895},{\"end\":87601,\"start\":87545},{\"end\":89790,\"start\":89733},{\"end\":91962,\"start\":91905},{\"end\":92484,\"start\":92407},{\"end\":92964,\"start\":92907},{\"end\":94765,\"start\":94733},{\"end\":95718,\"start\":95659},{\"end\":97006,\"start\":96941},{\"end\":99287,\"start\":99230},{\"end\":99728,\"start\":99701},{\"end\":101641,\"start\":101564},{\"end\":72143,\"start\":72079},{\"end\":72563,\"start\":72478},{\"end\":73005,\"start\":72960},{\"end\":73373,\"start\":73327},{\"end\":73685,\"start\":73640},{\"end\":74119,\"start\":74073},{\"end\":74548,\"start\":74498},{\"end\":75007,\"start\":74965},{\"end\":75462,\"start\":75382},{\"end\":75881,\"start\":75833},{\"end\":76251,\"start\":76185},{\"end\":76658,\"start\":76586},{\"end\":77165,\"start\":77048},{\"end\":77684,\"start\":77604},{\"end\":78225,\"start\":78183},{\"end\":78758,\"start\":78678},{\"end\":79256,\"start\":79175},{\"end\":79703,\"start\":79612},{\"end\":80159,\"start\":80128},{\"end\":80464,\"start\":80445},{\"end\":80836,\"start\":80756},{\"end\":81336,\"start\":81268},{\"end\":81777,\"start\":81743},{\"end\":82162,\"start\":82081},{\"end\":82555,\"start\":82463},{\"end\":83047,\"start\":82967},{\"end\":83484,\"start\":83437},{\"end\":83766,\"start\":83730},{\"end\":84035,\"start\":84007},{\"end\":84359,\"start\":84295},{\"end\":84757,\"start\":84666},{\"end\":85332,\"start\":85239},{\"end\":85715,\"start\":85710},{\"end\":85974,\"start\":85942},{\"end\":86266,\"start\":86236},{\"end\":86552,\"start\":86511},{\"end\":86893,\"start\":86813},{\"end\":87284,\"start\":87246},{\"end\":87543,\"start\":87472},{\"end\":87822,\"start\":87792},{\"end\":88071,\"start\":88041},{\"end\":88353,\"start\":88282},{\"end\":88709,\"start\":88673},{\"end\":89054,\"start\":89020},{\"end\":89340,\"start\":89299},{\"end\":89731,\"start\":89659},{\"end\":90136,\"start\":90090},{\"end\":90384,\"start\":90335},{\"end\":90739,\"start\":90679},{\"end\":91157,\"start\":91089},{\"end\":91518,\"start\":91476},{\"end\":91903,\"start\":91831},{\"end\":92405,\"start\":92313},{\"end\":92905,\"start\":92833},{\"end\":93398,\"start\":93357},{\"end\":93821,\"start\":93780},{\"end\":94178,\"start\":94113},{\"end\":94453,\"start\":94391},{\"end\":94731,\"start\":94686},{\"end\":95031,\"start\":94975},{\"end\":95323,\"start\":95256},{\"end\":95657,\"start\":95583},{\"end\":96007,\"start\":95953},{\"end\":96280,\"start\":96276},{\"end\":96552,\"start\":96548},{\"end\":96939,\"start\":96859},{\"end\":97414,\"start\":97368},{\"end\":97827,\"start\":97795},{\"end\":98146,\"start\":98121},{\"end\":98473,\"start\":98432},{\"end\":98837,\"start\":98753},{\"end\":99228,\"start\":99156},{\"end\":99699,\"start\":99659},{\"end\":100161,\"start\":100124},{\"end\":100551,\"start\":100478},{\"end\":100878,\"start\":100815},{\"end\":101196,\"start\":101158},{\"end\":101562,\"start\":101470},{\"end\":101944,\"start\":101873}]"}}}, "year": 2023, "month": 12, "day": 17}