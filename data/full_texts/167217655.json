{"id": 167217655, "updated": "2023-09-28 03:33:48.782", "metadata": {"title": "AI Feynman: a Physics-Inspired Method for Symbolic Regression", "authors": "[{\"first\":\"Silviu-Marian\",\"last\":\"Udrescu\",\"middle\":[]},{\"first\":\"Max\",\"last\":\"Tegmark\",\"middle\":[]}]", "venue": "Science Advances, 6:eaay2631, April 15, 2020", "journal": null, "publication_date": {"year": 2019, "month": null, "day": null}, "abstract": "A core challenge for both physics and artificial intellicence (AI) is symbolic regression: finding a symbolic expression that matches data from an unknown function. Although this problem is likely to be NP-hard in principle, functions of practical interest often exhibit symmetries, separability, compositionality and other simplifying properties. In this spirit, we develop a recursive multidimensional symbolic regression algorithm that combines neural network fitting with a suite of physics-inspired techniques. We apply it to 100 equations from the Feynman Lectures on Physics, and it discovers all of them, while previous publicly available software cracks only 71; for a more difficult test set, we improve the state of the art success rate from 15% to 90%.", "fields_of_study": "[\"Physics\",\"Computer Science\"]", "external_ids": {"arxiv": "1905.11481", "mag": "3016401366", "acl": null, "pubmed": "32426452", "pubmedcentral": "7159912", "dblp": "journals/corr/abs-1905-11481", "doi": "10.1126/sciadv.aay2631"}}, "content": {"source": {"pdf_hash": "af2d14cbf1c47f896ea1c0d653f2b2c3f3d72df8", "pdf_src": "PubMedCentral", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": "CCBYNC", "open_access_url": "https://advances.sciencemag.org/content/advances/6/16/eaay2631.full.pdf", "status": "GOLD"}}, "grobid": {"id": "10b1c4bc880a54680a6afbef021eca3a4d388bf2", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/af2d14cbf1c47f896ea1c0d653f2b2c3f3d72df8.txt", "contents": "\nAI Feynman: A physics-inspired method for symbolic regression\n\n\nSilviu-Marian Udrescu \nMax Tegmark \nAI Feynman: A physics-inspired method for symbolic regression\nUdrescu and Tegmark, Sci. Adv. 2020; 6 : eaay2631 15 April 2020S C I E N C E A D V A N C E S | R E S E A R C H A R T I C L E 1 of 16 C O M P U T E R S C I E N C E\nA core challenge for both physics and artificial intelligence (AI) is symbolic regression: finding a symbolic expression that matches data from an unknown function. Although this problem is likely to be NP-hard in principle, functions of practical interest often exhibit symmetries, separability, compositionality, and other simplifying properties. In this spirit, we develop a recursive multidimensional symbolic regression algorithm that combines neural network fitting with a suite of physics-inspired techniques. We apply it to 100 equations from the Feynman Lectures on Physics, and it discovers all of them, while previous publicly available software cracks only 71; for a more difficult physicsbased test set, we improve the state-of-the-art success rate from 15 to 90%.\n\nINTRODUCTION\n\nIn 1601, Johannes Kepler got access to the world's best data tables on planetary orbits, and after 4 years and about 40 failed attempts to fit the Mars data to various ovoid shapes, he launched a scientific revolution by discovering that Mars' orbit was an ellipse (1). This was an example of symbolic regression: discovering a symbolic expression that accurately matches a given dataset. More specifically, we are given a table of numbers, whose rows are of the form {x 1 ,\u2026, x n , y} where y = f(x 1 , \u2026, x n ), and our task is to discover the correct symbolic expression for the unknown mystery function f, optionally including the complication of noise.\n\nGrowing datasets have motivated attempts to automate such regression tasks, with notable success. For the special case where the unknown function f is a linear combination of known functions of {x 1 , \u2026, x n }, symbolic regression reduces to simply solving a system of linear equations. Linear regression (where f is simply an affine function) is ubiquitous in the scientific literature, from finance to psychology. The case where f is a linear combination of monomials in {x 1 , \u2026, x n } corresponds to linear regression with interaction terms, and to polynomial fitting more generally. There are countless other examples of popular regression functions that are linear combinations of known functions, ranging from Fourier expansions to wavelet transforms. Despite these successes with special cases, the general symbolic regression problem remains unsolved, and it is easy to see why: If we encode functions as strings of symbols, then the number of such strings grows exponentially with string length, so if we simply test all strings by increasing length, it may take longer than the age of our universe until we get to the function we are looking for.\n\nThis combinatorial challenge of an exponentially large search space characterizes many famous classes of problems, from code breaking and Rubik's cube to the natural selection problem of finding those genetic codes that produce the most evolutionarily fit organisms. This has motivated genetic algorithms (2,3) for targeted searches in exponentially large spaces, which replace the abovementioned brute-force search by biology-inspired strategies of mutation, selection, inheritance, and recombination; crudely speaking, the role of genes is played by useful symbol strings that may form part of the sought-after formula or program. Such algorithms have been successfully applied to areas ranging from design of antennas (4,5) and vehicles (6) to wireless routing (7), vehicle routing (8), robot navigation (9), code breaking (10), discovering partial differential equations (11), investment strategy (12), marketing (13), classification (14), Rubik's cube (15), program synthesis (16), and metabolic networks (17).\n\nThe symbolic regression problem for mathematical functions (the focus of this paper) has been tackled with a variety of methods (18)(19)(20), including sparse regression (21)(22)(23)(24) and genetic algorithms (25,26). By far, the most successful of these is, as we will see in Results, the genetic algorithm outlined in (27) and implemented in the commercial Eureqa software (26).\n\nThe purpose of this paper was to further improve on this state of the art, using physics-inspired strategies enabled by neural networks. Our most important contribution is using neural networks to discover hidden simplicity such as symmetry or separability in the mystery data, which enables us to recursively break harder problems into simpler ones with fewer variables.\n\nThe rest of this paper is organized as follows. In Results, we present the results of applying our algorithm, which recursively combines six strategies, finding major improvements over the state-of-the-art Eureqa algorithm. In Discussion, we summarize our conclusions and discuss opportunities for further progress.\n\n\nRESULTS\n\nIn this section, we present our results and the algorithm by which they were obtained.\n\nOverall algorithm Generic functions f(x 1 , \u2026, x n ) are extremely complicated and near impossible for symbolic regression to discover. However, functions appearing in physics and many other scientific applications often have some of the following simplifying properties that make them easier to discover:\n\n(1) Units: f and the variables upon which it depends have known physical units.\n\n(2) Low-order polynomial: f (or part thereof) is a polynomial of low degree.\n\n(3) Compositionality: f is a composition of a small set of elementary functions, each typically taking no more than two arguments. (4) Smoothness: f is continuous and perhaps even analytic in its domain.\n\n(5) Symmetry: f exhibits translational, rotational, or scaling symmetry with respect to some of its variables.\n\n(6) Separability: f can be written as a sum or product of two parts with no variables in common.\n\nThe question of why these properties are common remains controversial and not fully understood (28,29). However, as we will see below, this does not prevent us from discovering and exploiting these properties to facilitate symbolic regression.\n\nProperty (1) enables dimensional analysis, which often transforms the problem into a simpler one with fewer independent variables. Property (2) enables polynomial fitting, which quickly solves the problem by solving a system of linear equations to determine the polynomial coefficients. Property (3) enables f to be represented as a parse tree with a small number of node types, sometimes enabling f or a subexpression to be found via a brute-force search. Property (4) enables approximating f using a feed-forward neural network with a smooth activation function. Property (5) can be confirmed using said neural network and enables the problem to be transformed into a simpler one with one independent variable less (or even fewer for n > 2 rotational symmetry). Property (6) can be confirmed using said neural network and enables the independent variables to be partitioned into two disjoint sets and the problem to be transformed into two simpler ones, each involving the variables from one of these sets.\n\nThe overall algorithm (available at https://github.com/SJ001/ AI-Feynman) is schematically illustrated in Fig. 1. It consists of a series of modules that try to exploit each of the above-mentioned properties. Like a human scientist, it tries many different strategies (modules) in turn, and if it cannot solve the full problem in one fell swoop, it tries to transform it and divide it into simpler pieces that can be tackled separately, recursively relaunching the full algorithm on each piece. Figure 2 illustrates an example of how a particular mystery dataset (Newton's law of gravitation with nine variables) is solved. Below, we describe each of these algorithm modules in turn.\n\n\nDimensional analysis\n\nOur dimensional analysis module exploits the well-known fact that many problems in physics can be simplified by requiring the units of the two sides of an equation to match. This often transforms the problem into a simpler one with a smaller number of variables that are all dimensionless. In the best-case scenario, the transformed problem involves solving for a function of zero variables, i.e., a constant. We automate dimensional analysis as follows. Table 3 show the physical units of all variables appearing in our 100 mysteries, expressed as products of the fundamental units (meter, second, kilogram, kelvin, and volt) to various integer powers. We, thus, represent the units of each variable by a vector u of five integers as in the table. For a mystery of the form y = f(x 1 , \u2026, x n ), we define the matrix M whose i th column is the u vector corresponding to the variable x i , and define the vector b as the u vector corresponding to y. We now let the vector p be a solution to the equation Mp = b, and the columns of the matrix U form a basis for the null space, so that MU = 0, and define a new mystery y\u2032 = f \u2032 (x\u2032 1 , \u2026, x\u2032 n ) where\nx ' i \u2261 \u220f i=j n x j U ij , y' \u2261 y \u2500 y * , y * \u2261 \u220f i=1 n x i p i .(1)\nBy construction, the new variables x i \u2032 and y\u2032 are dimensionless, and the number n\u2032 of new variables is equal to the dimensionality of the null space. When n\u2032 > 0, we have the freedom to choose any basis we want for the null space and also to replace p by a vector of the form p + Ua for any vector a; we use this freedom to set as many elements as possible in p and U equal to zero, i.e., to make the new variables depend on as few old variables as possible. This choice is useful because it typically results in the resulting powers of the dimensionless variables being integers, making the final expression much easier to find than when the powers are fractions or irrational numbers.\n\n\nPolynomial fit\n\nMany functions f(x 1 , \u2026, x n ) in physics and other sciences either are low-order polynomials, e.g., the kinetic energy \nK = m _ 2 ( v x 2 + v y 2 + v z 2 ) ,S C I E N C E A D V A N C E S | R E S E A R C H A R T I C L E 3 of 16\nor have parts that are, e.g., the denominator of the gravitational force\nF = Gm 1 m 2 ___________________ ( x 1 \u2212 x 2 ) 2 + ( y 1 \u2212 y 2 ) 2 + ( z 1 \u2212 z 2 ) 2 .\nWe therefore include a module that tests whether a mystery can be solved by a low-order polynomial. Our method uses the standard method of solving a system of linear equations to find the best-fit polynomial coefficients. It tries fitting the mystery data to polynomials of degree 0, 1,..., d max = 4 and declares success if the best-fitting polynomial gives root mean square (rms) fitting error \u2264 \uf065 p (we discuss the setting of this threshold below).\n\n\nBrute force\n\nOur brute-force symbolic regression model simply tries all possible symbolic expressions within some class, in order of increasing com-plexity, terminating either when the maximum fitting error drops below a threshold \u03f5 p or after a maximum runtime t max has been exceeded. Although this module alone could solve all our mysteries in principle, it would, in many cases, take longer than the age of our universe in practice. Our brute-force method is, thus, typically most helpful once a mystery has been transformed/broken apart into simpler pieces by the modules described below.\n\nWe generate the expressions to try by representing them as strings of symbols, trying first all strings of length 1, then all of length 2, etc., saving time by only generating those strings that are syntactically correct. The symbols used are the independent variables as well a subset of those listed in Table 1, each representing a constant or a function. We minimize string length by using reverse Polish notation, so that parentheses become unnecessary. For example, x + y can be expressed as the string \"xy+\", the number \u22122/3 can be expressed as the string \"0<<1>>/\", and the relativistic momentum formula mv / \u221a _ 1 \u2212 v 2 / c 2 can be expressed as the string \"mv*1vv*cc*/\u2212R/\". Inspection of Table 1 reveals that many of the symbols are redundant. For example, \"1\" = \"0>\" and \"x\u223c\" = \"0x\u2212\". \uf070 = 2 arcsin 1, so if we drop the symbol \"P\", mysteries involving \uf070 can still get solved with P replaced by \"1N1>*\"-it just takes longer.\n\nSince there are s n strings of length n using an alphabet of s symbols, there can be a substantial cost both from using too many symbols (increasing s) and from using too few symbols (increasing the required n or even making a solution impossible). As a compromise, our brute-force module tries to solve the mystery using three different symbol subsets as explained in the caption of Table 1. To exploit the fact that many equations or parts thereof have multiplicative or additive constants, our brute-force method comes in two variants that automatically solves for such constants, thus allowing the algorithm to focus on the symbolic expression and not on numerical constants.\n\nAlthough the problem of overfitting is most familiar when searching a continuous parameter space, the same phenomenon can occur when searching our discrete space of symbol strings. To mitigate this, we follow the prescription in (30) and define the winning function to be the one with rms fitting error \u03f5 < \u03f5 b that has the smallest total description length\nDL \u2261 log 2 N + \u03bb log 2 [ max ( 1, \u03f5 \u2500 \u03f5 d ) ](2)\nwhere \u03f5 d = 10 \u221215 , and N is the rank of the string on the list of all strings tried. The two terms correspond roughly to the number of bits required to store the symbol string and the prediction errors, respectively, if the hyperparameter \uf06c is set to equal the number of data points N d . We use \uf06c = N d 1/2 in our experiments below to prioritize simpler formulas. If the mystery has been generated using a neural network (see below), we set the precision threshold \u03f5 b to 10 times the validation error, otherwise we set it to 10 \u22125 .\n\n\nNeural network-based tests and transformations\n\nEven after applying the dimensional analysis, many mysteries are still too complex to be solved by the polyfit or brute-force modules in a reasonable amount of time. However, if the mystery function f(x 1 , \u2026, x n ) can be found to have simplifying properties, it may be possible to transform it into one or more simpler mysteries that can be more easily solved. To search for such properties, we need to be able to evaluate f at points {x 1 , \u2026, x n } of our choosing where we . Then, a neural network was trained to fit this function, which revealed two translational symmetries (each eliminating one variable, by defining g \u2261 c\u2212d and h \u2261 e \u2212 f) as well as multiplicative separability, enabling the factorization \u2131 (a, b, g, h) = G(a) H (b, g, h), thus splitting the problem into two simpler ones. Both G and H then were solved by polynomial fitting, the latter after applying one of a series of simple transformations (in this case, inversion). For many other mysteries, the final step was instead solved using brute-force symbolic search as described in the text.\n\ntypically have no data. For example, to test whether a function f has translational symmetry, we need to test if f(x 1 , x 2 ) = f(x 1 + a, x 2 + a) for various constants a, but if a given data point has its two variables separated by x 2 \u2212 x 1 = 1.61803, we typically have no other examples in our dataset with exactly that variable separation. To perform our tests, we thus need an accurate high-dimensional interpolation between our data point.\n\n\nNeural network training\n\nTo obtain such an interpolating function for a given mystery, we train a neural network to predict the output given its input. We train a feed-forward, fully connected neural network with six hidden layers with soft plus activation functions, the first three having 128 neurons and the last three having 64 neurons. For each mystery, we generated 100,000 data points, using 80% as the training set and the remainder as the validation set, training for 100 epochs with learning rate 0.005 and batch size 2048. We use the rms error loss function and the Adam optimizer with a weight decay of 10 \u22122 . The learning rate and momentum schedules were implemented as described in (31,32) using the FastAI package (33), with a ration of 20 between the maximum and minimum learning rates, and using 10% of the iterations for the last part of the training cycle. For the momentum, the maximum \uf062 1 value was 0.95 and the minimum 0.85, while \uf062 2 = 0.99.\n\nIf the neural network were expressive enough to be able to perfectly fit the mystery function, and the training process would never get stuck in a local minimum, then one might naively expect the rms validation error \u03f5 NN 0 to scale as f rms \u03f5 / N d 1/2 in the limit of ample data, with a constant prefactor depending on the number of function arguments and the function's complexity. Here, f rms is the rms of the f values in the dataset, N d is the number of data points, and \u03f5 is the relative rms noise on the independent variable as explored in the \"Dependence on noise level\" section. For realistic situations, one expects limited expressibility and convergence to keep \u03f5 NN 0 above some positive floor even as N d \u2192 \u221e and \u03f5 \u2192 0. In practice, we obtained \u03f5 NN 0 values between 10 \u22123 f rms and 10 \u22125 f rms across the range of tested equations.\n\n\nTranslational symmetry and generalizations\n\nWe test for translational symmetry using the neural network as detailed in Algorithm 1. We first check if the f(x 1 , x 2 , x 3 ,\u2026) = f(x 1 + a, x 2 + a, x 3 \u2026) to within a precision \u03f5 sym . If that is the case, then f depends on x 1 and x 2 only through their difference, so we replace these two input variables by a single new variable x 1 \u2032 \u2261 x 2 \u2212 x 1 . Otherwise, we repeat this test for all pairs of input variables and also test whether any variable pair can be replaced by its sum, product, or ratio. The ratio case corresponds to scaling symmetry, where two variables can be simultaneously rescaled without changing the answer. If any of these simplifying properties is found, the resulting transformed mystery (with one fewer input variables) is iteratively passed into a fresh instantiation of our full AI Feynman symbolic regression algorithm, as illustrated in Fig. 1. After experimentation, we chose the precision threshold \u03f5 sym to be seven times the neural network validation error, which roughly optimized the training set performance. (If the noise were Gaussian, even a cut at 4 rather than 7 standard deviations would produce negligible false positives.) Separability We test for separability using the neural network as exemplified in Algorithm 2. A function is separable if it can be split into two parts with no variables in common. We test for both additive and multiplicative separability, corresponding to these two parts being added and multiplied, respectively (the logarithm of a multiplicatively separable function is additively separable).\n\nFor example, to test whether a function of two variables is multiplicatively separable, i.e., of the form f(x 1 , x 2 ) = g(x 1 )h(x 2 ) for some univariate functions g and h, we first select two constants c 1 and c 2 ; for numerical robustness, we choose c i to be the means of all the values of x i in the mystery dataset, i = 1,2. We then compute the quantity\n\uf044 sep ( x 1 , x 2 ) \u2261 f rms \u22121 | f( x 1 , x 2 ) \u2212 f( x 1 , c 2 ) f( c 1 , x 2 ) \u2500 f( c 1 , c 2 ) | (3)\nfor each data point. This is a measure of nonseparability, since it vanishes if f is multiplicatively separable. The equation is considered separable if the rms average \uf044 sep over the mystery dataset is less than an accuracy threshold \u03f5 sep , which is chosen to be N = 10 times the neural network validation error. [We also check whether the function is multiplicatively separable up to an additive constant: f(x 1 ,\nx 2 ) = a + g(x 1 )h(x 2 )\n, where a is a constant. As a backup, we retain the above-mentioned simpler test for multiplicative separability, which proved more robust when a = 0.] If separability is found, we define the two new univariate mysteries y\u2032 \u2261 f(x 1 , c 2 ) and y\u2032\u2032 \u2261 f(c 1 , x 2 )/f(c 1 , c 2 ). We pass the first one, y\u2032, back to fresh instantiations of our full AI Feynman symbolic regression algorithm, and if it gets solved, we redefine y\u2032\u2032 \u2261 y/y\u2032c num , where c num represents any multiplicative numerical constant that appears in y\u2032. We then pass y\u2032\u2032 back to our algorithm, and if it gets solved, the final solution is y = y\u2032y\u2032\u2032/c num . We test for additive separability analogously, simply replacing * and / by + and \u2212 above; also, c num will represent Table 1. Functions optionally included in brute-force search. The following three subsets are tried in turn: \"+\u2212*/><~SPLICER\", \"+\u2212*/> 0~\" and \"+\u2212*/><~REPLICANTS0\".\n\n\nSymbol\n\nMeaning Arguments an additive numerical constant in this case. If we succeed in solving the two parts, then the full solution to the original mystery is the sum of the two parts minus the numerical constant. When there are more than two variables x i , we are testing all the possible subsets of variables that can lead to separability and proceed as above for the newly created two mysteries.\n+\n\nSetting variables equal\n\nWe also exploit the neural network to explore the effect of setting two input variables equal and attempting to solve the corresponding new mystery y\u2032 with one fewer variable. We try this for all variable pairs, and if the resulting new mystery is solved, we try solving the mystery y\u2032\u2032 \u2261 y/y\u2032 that has the found solution divided out.\n\nAs an example, this technique solves the Gaussian probability distribution mystery I.6.2. After making \uf071 and \uf073 equal and dividing the initial equation by the result, we are getting rid of the denominator, and the remaining part of the equation is an exponential. After taking the logarithm of this (see the below section), the resulting expression can be easily solved by the brute-force method.\n\n\nExtra transformations\n\nIn addition, several transformations are applied to the dependent and independent variables, which proved to be useful for solving certain equations. Thus, for each equation, we ran the brute force and polynomial fit on a modified version of the equation in which the dependent variable was transformed by one of the following functions: square root, raise to the power of 2, log, exp, inverse, sin, cos, tan, arcsin, arccos, and arctan. This reduces the number of symbols needed by the brute force by one, and in certain cases, it even allows the polynomial fit to solve the equation, when the brute force would otherwise fail. For example, the formula for the distance between two points in the three-dimensional (3D) Euclidean space: \u221a ___________________________ ( x 1 \u2212 x 2 ) 2 + ( y 1 \u2212 y 2 ) 2 + ( z 1 \u2212 z 2 ) 2 , once raised to the power of 2 becomes just a polynomial that can be easily discovered by the polynomial fit algorithm. The same transformations are also applied to the dependent variables, one at a time. In addition, multiplication and division by 2 were added as transformations in this case.\n\nIt should be noted that, like most machine-learning methods, the AI Feynman algorithm has some hyperparameters that can be tuned to optimize performance on the problems at hand. They were all introduced above, but for convenience, they are also summarized in Table 2.\n\n\nThe Feynman Symbolic Regression Database\n\nTo facilitate quantitative testing of our and other symbolic regression algorithms, we created the 6-gigabyte Feynman Symbolic Regression Database (FSReD) and made it freely available for download at https://space.mit.edu/home/tegmark/aifeynman.html. For each regression mystery, the database contains the following: 1) Data table: A table of numbers, whose rows are of the form {x 1 , x 2 , \u2026, y}, where y = f(x 1 , x 2 , \u2026); the challenge is to discover the correct analytic expression for the mystery function f.\n\n2) Unit table: A table specifying the physical units of the input and output variables as 6D vectors of the form seen in Table 3.\n\n3\n\n\n) Equation:\n\nThe analytic expression for the mystery function f, for answer checking.\n\nTo test an analytic regression algorithm using the database, its task is to predict f for each mystery taking the data table (and optionally the unit table) as input. Of course, there are typically many symbolically different ways of expressing the same function. For example, if the mystery function f is (u + v)/(1 + uv/c 2 ), then the symbolically different expression (v + u)/(1 + uv/c 2 ) should count as a correct solution. The rule for evaluating an analytic regression method is therefore that a mystery function f is deemed correctly solved by a candidate expression f \u2032 if algebraic simplification of the expression f\u2032 \u2212 f (say, with the Simplify function in \"Mathematica\" or the simplify function in the Python SymPy package) produces the symbol \"0. \"\n\nTo sample equations from a broad range of physics areas, the database is generated using 100 equations from the seminal Feynman Lectures on Physics (34-36), a challenging three-volume course covering classical mechanics, electromagnetism, and quantum mechanics as well as a selection of other core physics topics; we prioritized the most complex equations, excluding ones involving derivatives or integrals. The equations are listed in Tables 4 and 5 and can be seen to involve between one and nine independent variables as well as the elementary functions +, \u2212, * , /, sqrt, exp, log, sin, cos, arsin, and tanh. The numbers appearing in these equations are seen to be simple rational numbers as well as e and \uf070.\n\nWe also included in the database a set of 20 more challenging \"bonus\" equations, extracted from other seminal physics books: Classical Mechanics by Goldstein et al. (37); Classical Electrodynamics by Jackson (38); Gravitation and Cosmology: Principles and Applications of the General Theory of Relativity by Weinberg (39); and Quantum Field Theory and the Standard Model by Schwartz (40). These equations were selected for being both famous and complicated.\n\nThe data table provided for each mystery equation contains 10 5 rows corresponding to randomly generated input variables. These are sampled uniformly between one and five. For certain equations, the range of sampling was slightly adjusted to avoid unphysical result, such as division by zero, or taking the square root of a negative number. The range used for each equation is listed in the FSReD.   \nA Area 2 0 0 0 0 k b Boltzmann constant 2 \u22122 1 \u22121 0 C Capacitance 2 \u22122 1 0 \u22122 q, q 1 , q 2 Charge 2 \u22122 1 0 \u22121 j Current density 0 \u22123 1 0 \u22121 I, I 0 Current Intensity 2 \u22123 1 0 \u22121 \uf072, \uf072 0 Density \u22123 0 1 0 0 \uf071, \uf071 1 , \uf071 2 , \uf073, n Dimensionless 0 0 0 0 0 g_, k f , \uf067, \uf063, \uf062, \uf061 Dimensionless 0 0 0 0 0 p \uf067 , n 0 , \uf064, f, \uf06d Dimensionless 0 0 0 0 0 n 0 , \uf064, f, \uf06d, Z 1 , Z 2 Dimensionless 0 0 0 0 0 D Diffusion coefficient 2 \u22121 0 0 0 \uf06d drift Drift velocity constant 0 \u22121 1 0 0 p d Electric dipole moment 3 \u22122 1 0 \u22121 E f Electric field \u22121 0 0 0 1 \u03f5 Electric permitivity 1 \u22122 1 0 \u22122 E, K, U Energy 2 \u22122 1 0 0 E den Energy density \u22121 \u22122 1 0 0 F E Energy flux 0 \u22123 1 0 0 F, N n\n\nAlgorithm comparison\n\nWe reviewed the symbolic regression literature for publicly available software against which our method could be compared. To the best of our knowledge, the best competitor by far is the commercial Eureqa software sold by Nutonian Inc. at https://www.nutonian.com/products/eureqa, implementing an improved version of the generic search algorithm outlined in (27). We compared the AI Feynman and Eureqa algorithms by applying them both to the Feynman Database for symbolic regression, allowing a maximum of 2 hours of central processing unit (CPU) time per mystery. Tables 4 and 5 show that Eureqa solved 71% of the 100 basic mysteries, while AI Feynman solved 100%.\n\nFor this comparison, the AI Feynman algorithm was run using the hyperparameter settings in Table 2. For Eureqa, each mystery was run on four CPUs. The symbols used in trying to solve the equations were +, \u2212, *, /, constant, integer constant, input variable, sqrt, exp, log, sin, and cos. To help Eureqa gain speed, we included the additional functions arcsin and arccos only for those mysteries requiring them, and we used only 300 data points (since it does not use a neural network, adding additional data does not help much). The time taken to solve an equation using our algorithm, as presented in Tables 4  and 5, corresponds to the time needed for an equation to be solved using a set of symbols that can actually solve it (see Table 1). Equations I. 15.3t and I.48.2 were solved using the second set of symbols, so the overall time needed for these two equations is 1 hour longer than the one listed in the tables. Equations I. 15.3x and II.35.21 were solved using the third set of symbols, so the overall time taken is 2 hours longer than the one listed here.\n\nCloser inspection of these tables reveals that the greatest improvement of our algorithm over Eureqa is for the most complicated mysteries, where our neural network enables eliminating variables by discovering symmetries and separability. The neural network becomes even more important when we rerun AI Feynman without the dimensional analysis module: It now solves 93% of the mysteries and makes very heavy use of the neural network to discover separability and translational symmetries. Without dimensional analysis, many of the mysteries retain variables that appear only raised to some power or in a multiplicative prefactor, and AI Feynman tends to recursively discover them and factor them out one by one. For example, the neural network strategy is used six times when solving\nF = Gm 1 m 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ( x 2 \u2212 x 1 ) 2 + ( y 2 \u2212 y 1 ) 2 + ( z 2 \u2212 z 1 ) 2\nwithout dimensional analysis: three times to discover translational symmetry that replaces x 2 \u2212 x 1 , y 2 \u2212 y 1 , and z 2 \u2212 z 1 by new variables, once to group together G and m 1 into a new variable a, once to group together a and m 2 into a new variable b, and one last time to discover separability and factor out b. This shows that although dimensional analysis often provides major time savings, it is usually not necessary for successfully solving the problem. Inspection of how AI Feynman and Eureqa make progress over time reveals interesting differences. The progress of AI Feynman over time corresponds to repeatedly reducing the number of independent variables, and every time this occurs, it is virtually guaranteed to be a step in the right direction. In contrast, genetic algorithms such as Eureqa make progress over time by finding successively better approximations, but there is no guarantee that more accurate symbolic expressions are closer to the truth when viewed as strings of symbols. Specifically, by virtue of being a genetic algorithm, Eureqa has the  continued on next page advantage of not searching the space of symbolic expressions blindly like our brute-force module, but rather with the possibility of a net drift toward more accurate (\"fit\") equations. The flip side of this is that if Eureqa finds a fairly accurate yet incorrect formula with a quite different functional form, it risks getting stuck near that local optimum. This reflects a fundamental challenge for genetic approaches symbolic regression: If the final formula is composed of separate parts that are not summed but combined in some more complicated way (as a ratio, say), then each of the parts may be useless fits on their own and unable to evolutionarily compete.\nVariables Units m s kg T V p F Pressure \u22121 \u22122 1 0 0 R Resistance \u22122 3 \u22121 0 2 \uf06d S Shear modulus \u22121 \u22122 1 0 0 L rad Spectral radiance 0 \u22122 1 0 0 k spring Spring constant 0 \u22122 1 0 0 \uf073 den Surface charge density 0 \u22122 1 0 \u22121 T, T 1 , T 2 Temperature 0 0 0 1 0 \uf06b Thermal conductivity 1 \u22123 1 \u22121 0 t, t 1 Time 0 1 0 0 0 \uf074 Torque 2 \u22122 1 0 0 A vec Vector potential \u22121 1 0 0 1 u, v, v 1 , c, w Velocity 1 \u22121 0 0 0 V, V 1 , V 2 Volume 3 0 0 0 0 \uf072 c , \uf072 c0 Volume charge density \u22121 \u22122 1 0 \u22121 V e Voltage 0 0 0 0 1 k Wave number \u22121 0 0 0 0 Y Young modulus \u22121 \u22122 1 0 0\uf077 = 1 + v / c _ \u221a _ 1 \u2212 v 2 / c 2 \uf077 0 14 da,\n\nDependence on data size\n\nTo investigate the effect of changing the size of the dataset, we repeatedly reduced the size of each dataset by a factor of 10 until our AI Feynman algorithm failed to solve it. As seen in Tables 4 and 5, most equations are discovered by the polynomial fit and brute-force methods using only 10 data points. One hundred data points are needed in some cases because the algorithm may otherwise overfit when the true equation is complex, \"discovering\" an incorrect equation that is too simple. As expected, equations that require the use of a neural network to be solved need substantially more data points (between 10 2 and 10 6 ) for the network to be able to learn the mystery function accurately enough (i.e., obtaining rms accuracy better than 10 \u22123 ). Note that expressions requiring the neural network are typically more complex, so one might intuitively expect them to require larger datasets for the correct equation to be discovered without overfitting, even when using alternate approaches such as genetic algorithms.\n\n\nDependence on noise level\n\nSince real data are almost always afflicted with measurement errors or other forms of noise, we investigated the robustness of our algorithm. For each mystery, we added independent Gaussian random noise to its dependent variable y, of standard deviation \u03f5 y rms , where y rms denotes the rms y value for the mystery before noise has been added. We initially set the relative noise level \u03f5 = 10 \u22126 and then repeatedly multiplied \u03f5 by 10 until the AI Feynman algorithm could no longer solve the mystery. As seen in Tables 4 and 5, most of the equations can still be recovered exactly with an \u03f5 value of 10 \u22124 or less, while almost half of them are still solved for \u03f5 = 10 \u22122 .\n\nFor these noise experiments, we adjusted the threshold for the brute-force and polynomial fit algorithms when the noise level changed, such that not finding a solution at all was preferred over finding an approximate solution. These thresholds were not optimized for each mystery individually, so a better choice of these thresholds might allow the exact equation to be recovered with an even higher noise level for certain equations. In future work, it will also be interesting to quantify performance of the algorithm on data with noise added to the independent variables, as well as directly on real-world data.\n\n\nBonus mysteries\n\nThe 100 basic mysteries discussed above should be viewed as a training set for our AI Feynman algorithm, since we made improvements to its implementation and hyperparameters to optimize performance. In contrast, we can view the 20 bonus mysteries as a test set, since we deliberately selected and analyzed them only after the AI Feynman algorithm and its hyperparameter settings ( Table 2) had been finalized. The bonus mysteries are interesting also by virtue of being substantially more complex and difficult in order to better identify the limitations of our method. Table 6 shows that Eureqa solved only 15% of the bonus mysteries, while AI Feynman solved 90%. The fact that the success percentage differs more between the two methods for the bonus mysteries than for the basic mysteries reflects the increased equation complexity, which requires our neural network-based strategies for a larger fraction of the cases.\n\nTo shed light on the limitations of the AI Feynman algorithm, it is interesting to consider the two mysteries for which it failed. The radiated gravitational wave power mystery was reduced to the form y = \u2212 32 a 2 (1 + a) _ 5 b 5 by dimensional analysis, corresponding to the string \"aaa > * * bbbbb * * * * /\" in reverse Polish notation (ignoring the multiplicative prefactor \u2212 32 _ 5 ). This would require about 2 years for the brute-force method, exceeding our allotted time limit. The Jackson 2.11 mystery was reduced to the form a \u2212 1 _ 4\uf070 a _ b (1 \u2212 a 2 ) 2 by dimensional analysis, corresponding to the string \"aP0 > > > > * \\abaa * < aa * < * * / * \u2212\" in reverse Polish notation, which would require about 100 times the age of our universe for the brute-force method.\n\nIt is likely that both of these mysteries can be solved with relatively minor improvements of our algorithm. The first mystery would have been solved had the algorithm not failed to discover that a 2 (1 + a)/b 5 is separable. The large dynamic range induced by the fifth power in the denominator caused the neural network to miss the separability tolerance threshold; potential solutions include temporarily limiting the parameter range or analyzing the logarithm of the absolute value (to discover additive separability).\n\nIf we had used different units in the second mystery, where 1/4\uf070\u03f5 was replaced by the Coulomb constant k, the costly 4\uf070 factor (requiring seven symbols \"PPPP + + +\" or \"P0 > > > > * \") would have disappeared. Moreover, if we had used a different set of function symbols that included \"Q\" for squaring, then brute force could quickly have discovered that a \u2212 a _ b (1 \u2212 a 2 ) 2 is solved by \"aabaQ < Q * / \u2212\". Similarly, introducing a symbol \u2227 denoting exponentiation, enabling the string  for a b to be shortened from \"aLb * E\" to \"ab \u2227 , \" would enable brute force to solve many mysteries faster, including Jackson 2.11. Last, a powerful strategy that could ameliorate both of these failures would be to add symbols corresponding to parameters that are numerically optimized over. This strategy is currently implemented in Eureqa, but not AI Feynman, and could make a useful upgrade as long as it is done in a way that does not unduly slow down the symbolic brute-force search. In summary, the two failures of the AI  Feynman algorithm signal not unsurmountable obstacles, but motivation for further work.\n\nIn addition, we tested the performance of our algorithm on the mystery functions presented in (41) (we wish to thank the anonymous reviewer who brought this dataset to our attention). Some equations appear twice; we included them only once. Our algorithm again outperformed Eureqa, discovering 66.7% of the equations, while Eureqa discovered 48.9%. The fact that the AI Feynman algorithm performs less well on this test set than on genuine physics formulas traces back to the fact that most of the equations presented in (41) are rather arbitrary compositions of elementary functions unlikely to occur in real-world problems, thus lacking the symmetries, separability, etc., that the neural network part of our algorithm is able to exploit.\n\n\nDISCUSSION\n\nWe have presented a novel physics-inspired algorithm for solving multidimensional analytic regression problems: finding a symbolic expression that matches data from an unknown algebraic function.\n\nOur key innovation lies in combining traditional fitting techniques with a neural network-based approach that can repeatedly reduce a problem to simpler ones, eliminating dependent variables by discovering properties such as symmetries and separability in the unknown function. To facilitate quantitative benchmarking of our and other symbolic regression algorithms, we created a freely downloadable database with 100 regression mysteries drawn from the Feynman Lectures on Physics and a bonus set of an additional 20 mysteries selected for difficulty and fame.\n\n\nKey findings\n\nThe preexisting state-of-the-art symbolic regression software Eureqa (26) discovered 68% of the Feynman equations and 15% of the bonus equations, while our AI Feynman algorithm discovered 100 and 90%, respectively, including Kepler's ellipse equation mentioned in the Introduction (third entry in Table 6). Most of the 100 Feynman equations could be solved even if the data size was reduced to merely 10 2 data points or had percent-level noise added, but the most complex equations needing neural network fitting required more data and less noise.\n\nCompared with the genetic algorithm of Eureqa, the most interesting improvements are seen for the most difficult mysteries where the neural network strategy is repeatedly deployed. Here, the progress of AI Feynman over time corresponds to repeatedly reducing the problem to simpler ones with fewer variables, while Eureqa and other genetic algorithms are forced to solve the full problem by exploring a vast search space, risking getting stuck in local optima.\n\n\nOpportunities for further work\n\nBoth the successes and failures of our algorithm motivate further work to make it better, and we will now briefly comment on promising improvement strategies. Although we mostly used the same elementary function options (Table 1) and hyperparameter settings ( Table 2) for all mysteries, these could be strategically chosen based on an automated preanalysis of each mystery. For example, observed oscillatory behavior could suggest including sin and cos, and lack thereof could suggest saving time by excluding them.\n\nOur code could also be straightforwardly integrated into a larger program discovering equations involving derivatives and integrals, which frequently occur in physics equations. For example, if we suspect that our formula contains a partial differential equation, then the user can simply estimate various derivatives from the data (or its interpolation, using a neural network) and include them in the AI Feynman algorithm as independent variables, thus discovering the differential equation in question.\n\nWe saw how, even if the mystery data have very low noise, substantial de facto noise was introduced by imperfect neural network fitting, complicating subsequent solution steps. It will therefore be valuable to explore better neural network architectures, ideally reducing fitting noise to the 10 \u22126 level. This may be easier than in many other contexts, since we do not care whether the neural network generalizes poorly outside the domain where we have data: As long as it is highly accurate within this domain, it serves our purpose of correctly factoring separable functions, etc.\n\nOur brute-force method can be better integrated with a neural network search for hidden simplicity. Our implemented symmetry search simply tests whether two input variables a and b can be replaced by a bivariate function of them, specifically +, \u2212, * , or /, corresponding to length 3 strings \"ab+\", \"ab\u2212\", \"ab * \", and \"ab/\". This can be readily generalized to longer strings involving two or more variables, for example, bivariate functions ab 2 or e a cos b.\n\nA second example of improved brute-force use is if the neural network reveals that the function can be exactly solved after setting some variable a equal to something else (say zero, one, or another variable). A brute-force search can now be performed in the vicinity of the discovered exact expression: For example, if the expression is valid for a = 0, the brute-force search can insert additive terms that vanish for a = 0 and multiplicative terms that equal unity for a = 0, thus being likely to discover the full formula much faster than an unrestricted brute-force search from scratch.\n\nLast but not least, it is likely that marrying the best features from both our method and genetic algorithms can spawn a method that outperforms both. Genetic algorithms such as Eureqa perform quite well even in the presence of substantial noise, whether they output not merely one hopefully correct formula, but rather a Pareto frontier, a sequence of increasingly complex formulas that provide progressively better accuracy. Although it may not be clear which of these formulas is correct, it is more likely that the correct formula is one of them than any particular one that an algorithm might guess. When our neural network identifies separability, a so generated Pareto frontier could thus be used to generate candidate formulas for one factor, after which each one could be substituted back and tested as above, and the best solution to the full expression would be retained. Our brute-force algorithm can similarly be upgraded to return a Pareto frontier instead of a single formula.\n\nIn summary, symbolic regression algorithms are getting better and are likely to continue improving. We look forward to the day when, for the first time in the history of physics, a computer, just like Kepler, discovers a useful and hitherto unknown physics formula through symbolic regression!\n\n\nMATERIALS AND METHODS\n\nThe materials used for the symbolic regression tests are all in the FSReD, available at https://space.mit.edu/home/tegmark/ aifeynman.html. The method by which we have implemented our algorithm is as a freely available software package made available at\n\nFig. 2 .\n2Example: How our AI Feynman algorithm discovered mystery Equation 5. Given a mystery table with many examples of the gravitational force F together with the nine independent variables G, m 1 , m 2 , x 1 ,..., z 2 , this table was recursively transformed into simpler ones until the correct equation was found. First, dimensional analysis generated a table of six dimensionless independent variables a = m 2 /m 1 ,..., f = z 1 /x 1 and the dimensionless dependent variable \u2131 \u2261 F \u00f7 Gm\n\nz, z 1 , z 2 , r, r 1 , r 2 \uf06c, d 1 , d 2 , d, f f , aI 1 , I 2 , I * , I *B, B x , B y , B\n12121212on next page Udrescu and Tegmark, Sci. Adv. 2020;\n\nTable 2 .\n2Hyperparameters in our algorithm and the setting we use in this paper.Symbol \nMeaning \nSetting \n\n\u03f5 br \nTolerance in brute-force \nmodule \n\n10 \u22125 \n\n\u03f5 pol \nTolerance in polynomial \nfit module \n\n10 \u22124 \n\n\u03f5 NN \n\n0 \n\n\nValidation error \ntolerance for neural \nnetwork use \n\n10 \u22122 \n\n\u03f5 sep \nTolerance for \nseparability \n\n10 \u03f5 NN \n\n\u03f5 sym \nTolerance for symmetry \n7 \u03f5 NN \n\n\u03f5 bf \n\nsep \n\nTolerance in brute-force \nmodule after \nseparability \n\n10 \u03f5 NN \n\n\u03f5 pol \n\nsep \n\nTolerance in polynomial \nfit module after \nseparability \n\n10 \u03f5 NN \n\n\uf06c \nImportance of accuracy \nrelative to complexity \nN d \n\n1/2 \n\n\nTable 3 .\n3Unit table used for our automated dimensional analysis.Variables \nUnits \nm \ns \nkg \nT \nV \n\na, g \nAcceleration \n1 \n\u22122 \n0 \n0 \n0 \n\nh, \u210f, L, J z \nAngular momentum \n2 \n\u22121 \n1 \n0 \n0 \n\n\n\nTable 4 .\n4Tested Feynman equations, part 1. Abbreviations in the \"Methods used\" column: da, dimensional analysis; bf, brute force; pf, polyfit; ev, set two variables equal; sym, symmetry; sep, separability. Suffixes denote the type of symmetry or separability (sym-, translational symmetry; sep*, multiplicative separability; etc.) or the preprocessing before brute force (e.g., bf-inverse means inverting the mystery function before bf).Feynman Eq. \nEquation \nSolution Time (s) \nMethods Used Data Needed Solved By Eureqa \nSolved W/o \nda \n\nNoise \nTolerance \n\nI.6.20a \nf = e \u2212 \uf071 2 /2 / \u221a \n\n_ \n\n\n2\uf070 \n16 \nbf \n10 \nNo \nYes \n10 \u22122 \n\nI.6.20 \nf = e \u2212 \uf071 2 \n\n\n_ \n\n2 \uf073 2 / \u221a \n\n_ \n\n\n2 \uf070\uf073 2 \n2992 \nev, bf-log \n10 2 \nNo \nYes \n10 \u22124 \n\nI.6.20b \nf = e \u2212 (\uf071\u2212 \uf071 1 ) 2 \n\n\n_ \n\n2 \uf073 2 / \u221a \n\n_ \n\n\n2 \uf070\uf073 2 \n4792 \nsym-, ev, bf-log \n10 3 \nNo \nYes \n10 \u22124 \n\nI.8.14 \n\nd = \u221a \n\n__________________ \n\n\n\n\n( x 2 \u2212 x 1 ) 2 + ( y 2 \u2212 y 1 ) 2 \n544 \nda, pf-squared \n10 2 \nNo \nYes \n10 \u22124 \n\nI.9.18 \nF = \n\nG m 1 m 2 \n\n\n\n___________________ \n\n\n\n( x 2 \u2212 x 1 ) 2 + ( y 2 \u2212 y 1 ) 2 + ( z 2 \u2212 z 1 ) 2 \n\n5975 \nda, sym-, sym-, \nsep * , pf-inv \n10 6 \nNo \nYes \n10 \u22125 \n\nI.10.7 \nm = \n\nm 0 \n\n\n_ \n\n\u221a \n\n_ \n\n\n1 \u2212 v 2 \n\n_ \nc 2 \n\n14 \nda, bf \n10 \nNo \nYes \n10 \u22124 \n\nI.11.19 \nA = x 1 y 1 + x 2 y 2 + x 3 y 3 \n184 \nda, pf \n10 2 \nYes \nYes \n10 \u22123 \n\nI.12.1 \nF = \uf06dN n \n12 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nI.12.2 \nF = \n\nq 1 q 2 \n\n\n_ \n\n4\uf070\u03f5 r 2 \n\n17 \nda, bf \n10 \nYes \nYes \n10 \u22122 \n\nI.12.4 \nE f = \n\nq 1 \n\n\n_ \n\n4\uf070\u03f5 r 2 \n\n12 \nda \n10 \nYes \nYes \n10 \u22122 \n\nI.12.5 \nF = q 2 E f \n8 \nda \n10 \nYes \nYes \n10 \u22122 \n\nI.12.11 \nF = q(E f + Bv sin \uf071) \n19 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nI.13.4 \nK = 1 \n_ \n2 m( v 2 + u 2 + w 2 ) \n22 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nI.13.12 \nU = G m 1 m 2 ( 1 \n_ \nr 2 \u2212 1 \n_ \nr 1 ) \n20 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nI.14.3 \nU = mgz \n12 \nda \n10 \nYes \nYes \n10 \u22122 \n\nI.14.4 \nU = \n\nk \nspring x 2 \n\n\n_ \n\n2 \n\n\n9 \nda \n10 \nYes \nYes \n10 \u22122 \n\nI.15.3x \nx 1 = x \u2212 ut \n_ \n\n\u221a \n\n_ \n\n\n\n1 \u2212 u 2 / c 2 \n\n22 \nda, bf \n10 \nNo \nNo \n10 \u22123 \n\nI.15.3t \nt 1 = t \u2212 ux / c 2 \n\n_ \n\n\u221a \n\n_ \n\n\n\n1 \u2212 u 2 / c 2 \n\n20 \nda, bf \n10 2 \nNo \nNo \n10 \u22124 \n\nI.15.10 \np = \nm 0 v \n_ \n\n\u221a \n\n_ \n\n\n\n1 \u2212 v 2 / c 2 \n\n13 \nda, bf \n10 \nNo \nYes \n10 \u22124 \n\nI.16.6 \nv 1 = u + v \n_ \n\n1 + uv / c 2 \n\n18 \nda, bf \n10 \nNo \nYes \n10 \u22123 \n\nI.18.4 \nr = \n\nm 1 r 1 + m 2 r 2 \n\n\n\n_ \n\nm 1 + m 2 \n\n\n17 \nda, bf \n10 \nYes \nYes \n10 \u22122 \n\nI.18.12 \n\uf074 = rF sin \uf071 \n15 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nI.18.16 \nL = mrv sin \uf071 \n17 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nI.24.6 \nE = 1 \n_ \n4 m( \uf077 2 + \uf077 0 \n2 ) x 2 \n22 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nI.25.13 \nV \ne = \n\nq \n\n\n_ \n\nC \n\n10 \nda \n10 \nYes \nYes \n10 \u22122 \n\ncontinued on next page \n\n\nTable 5 .\n5Tested Feynman equations, part 2 (same notation as inTable 4).Feynman Eq. \nEquation \nSolution Time \n(s) \n\nMethods Used Data Needed \nSolved By \nEureqa \n\nSolved W/o da \nNoise \nTolerance \n\nII.2.42 \nP = \n\n\uf06b( T 2 \u2212 T \n1 ) A \n\n\n_ \n\nd \n\n\n54 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.3.24 \nF E = P \n_ \n\n4\uf070 r 2 \n\n8 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.4.23 \nV \ne = \n\nq \n\n\n_ \n\n4\uf070\u03f5r \n\n10 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.6.11 \nV \ne = 1 \n_ \n\n4\uf070\u03f5 \n\np d cos \uf071 \n\n\n_ \nr 2 \n18 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.6.15a \nE f = 3 \n_ \n\n4\uf070\u03f5 \n\np d z \n_ \n\nr 5 \u221a \n\n_ \n\n\nx 2 + y 2 \n2801 \nda, sm, bf \n10 4 \nNo \nYes \n10 \u22123 \n\nII.6.15b \nE f = 3 \n_ \n\n4\uf070\u03f5 \n\np d \n_ \nr 3 cos \uf071sin \uf071 \n23 \nda, bf \n10 \nYes \nYes \n10 \u22122 \n\nII.8.7 \nE = 3 \n_ \n5 \n\nq 2 \n\n\n_ \n\n4\uf070\u03f5d \n\n10 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.8.31 \nE den = \n\n\u03f5 E f \n\n2 \n\n\n_ \n\n2 \n\n\n8 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.10.9 \nE f = \n\n\uf073 den \n\n\n_ \n\u03f5 1 \n_ \n\n1 + \uf063 \n\n13 \nda, bf \n10 \nYes \nYes \n10 \u22122 \n\nII.11.3 \nx = \n\nqE f \n\n\n_ \n\nm( \uf077 0 \n2 \u2212 \uf077 2 ) \n\n25 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.11.17 \nn = n 0 ( 1 + \n\np d E f cos \uf071 \n\n\n_ \nk b T ) \n28 \nda, bf \n10 \nYes \nYes \n10 \u22122 \n\nII.11.20 \nP * = \n\nn \uf072 p d \n2 E f \n\n\n_ \n3 k b T \n18 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.11.27 \nP * = n\uf061 \n_ \n1 \u2212 n\uf061 / 3 \u03f5 E f \n337 \nda bf-inverse \n10 2 \nNo \nYes \n10 \u22123 \n\nII.11.28 \n\uf071 = 1 + n\uf061 \n_ \n\n1 \u2212 (n\uf061 / 3) \n\n1708 \nda, sym*, bf \n10 2 \nNo \nYes \n10 \u22124 \n\nII.13.17 \nB = 1 \n_ \n\n4\uf070\u03f5 c 2 \n\n2I \n\n\n_ \nr \n13 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.13.23 \n\uf072 c = \n\n\uf072 c 0 \n\n\n_ \n\n\u221a \n\n_ \n\n\n\n1 \u2212 v 2 / c 2 \n\n13 \nda, bf \n10 2 \nNo \nYes \n10 \u22124 \n\nII.13.34 \nj = \n\uf072 c 0 v \n_ \n\n\u221a \n\n_ \n\n\n\n1 \u2212 v 2 / c 2 \n\n14 \nda, bf \n10 \nNo \nYes \n10 \u22124 \n\nII.15.4 \nE = \u2212 \uf06d M B cos \uf071 \n14 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.15.5 \nE = \u2212 p d E f cos \uf071 \n14 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.21.32 \nV \ne = \n\nq \n\n\n_ \n\n\n4\uf070\u03f5r(1 \u2212 v / c) \n\n21 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.24.17 \n\nk = \u221a \n\n_ \n\n\uf077 2 \n\n\n_ \nc 2 \u2212 \uf070 2 \n\n_ \nd 2 \n62 \nda bf \n10 \nNo \nYes \n10 \u22125 \n\nII.27.16 \nF E = \u03f5 cE f \n\n2 \n\n13 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.27.18 \nE den = \u03f5 E f \n\n2 \n\n9 \nda \n10 \nYes \nYes \n10 \u22122 \n\ncontinued on next page \n\n\n\nexp ( \uf06d m B / ( k b T ) ) + exp (\u2212 \uf06d m B / ( k b T ) )Feynman Eq. \nEquation \nSolution Time \n(s) \n\nMethods Used Data Needed \nSolved By \nEureqa \n\nSolved W/o da \nNoise \nTolerance \n\nII.34.2a \nI = \n\nqv \n\n\n_ \n\n2\uf070r \n\n11 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.34.2 \n\uf06d M = \n\nqvr \n\n\n_ \n\n2 \n\n\n11 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.34.11 \n\uf077 = \n\ng \n_ qB \n\n\n_ \n\n2m \n\n\n16 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nII.34.29a \n\uf06d M = \n\nqh \n\n\n_ \n\n4\uf070m \n\n12 \nda \n10 \nYes \nYes \n10 \u22122 \n\nII.34.29b \nE = \n\ng \n_ \uf06d M B J \n\nz \n_ \n\u210f \n18 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nII.35.18 \nn = \n\nn 0 \n\n\n\n______________________ \n\n\n\n\n30 \nda, bf \n10 \nNo \nYes \n10 \u22122 \n\nII.35.21 \nM = n \uf072 \uf06d M tanh ( \n\uf06d M B \n_ \nk b T ) \n1597 \nda, halve-input, \nbf \n10 \nYes \nNo \n10 \u22124 \n\nII.36.38 \nf = \n\n\uf06d m B \n\n\n_ \nk b T + \n\uf06d m \uf061M \n_ \n\n\u03f5 c 2 k b T \n\n77 \nda bf \n10 \nYes \nYes \n10 \u22122 \n\nII.37.1 \nE = \uf06d M (1 + \uf063)B \n15 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.38.3 \nF = YAx \n_ \n\nd \n\n\n47 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nII.38.14 \n\uf06d S = Y \n_ \n\n2(1 + \uf073) \n\n13 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nIII.4.32 \nn = 1 \n_ \n\ne \u210f\uf077 \n\n_ \n\nk b T \u2212 1 \n\n20 \nda, bf \n10 \nNo \nYes \n10 \u22123 \n\nIII.4.33 \nE = \u210f\uf077 \n_ \n\ne \u210f\uf077 \n\n_ \n\nk b T \u2212 1 \n\n19 \nda, bf \n10 \nNo \nYes \n10 \u22123 \n\nIII.7.38 \n\uf077 = \n\n2 \uf06d M B \n\n\n_ \n\u210f \n13 \nda \n10 \nYes \nYes \n10 \u22122 \n\nIII.8.54 \n\np \uf067 = sin ( \n\nEt \n\n\n_ \n\n\u210f ) \n\n2 \n\n39 \nda, bf \n10 \nNo \nYes \n10 \u22123 \n\nIII.9.52 \np \uf067 = \np d E f t \n_ \n\n\u210f \n\nsin ((\uf077 \u2212 \uf077 0 ) t / 2) 2 \n\n\n\n___________ \n\n((\uf077 \u2212 \uf077 0 ) t / 2) 2 \n3162 \nda, sym-, sm, bf \n10 3 \nNo \nYes \n10 \u22123 \n\nIII.10.19 \n\nE = \uf06d M \u221a \n\n_ \n\n\n\nB x \n2 + B y \n2 + B z \n\n2 \n\n\n410 \nda, bf-squared \n10 2 \nYes \nYes \n10 \u22124 \n\nIII.12.43 \nL = n\u210f \n11 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nIII.13.18 \nv = 2E d 2 k \n_ \n\n\u210f \n\n\n16 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nIII.14.14 \nI = I 0 ( e \n\nq V \n\ne \n\n\n_ \nk b T \n\n\u2212 1) \n18 \nda, bf \n10 \nNo \nYes \n10 \u22123 \n\nIII.15.12 \nE = 2U(1 \u2212 cos (kd)) \n14 \nda, bf \n10 \nYes \nYes \n10 \u22124 \n\nIII.15.14 \nm = \u210f 2 \n\n_ \n\n2E d 2 \n\n10 \nda \n10 \nYes \nYes \n10 \u22122 \n\nIII.15.27 \nk = 2\uf070\uf061 \n_ \nnd \n14 \nda, bf \n10 \nYes \nYes \n10 \u22123 \n\nIII.17.37 \nf = \uf062(1 + \uf061cos \uf071) \n27 \nbf \n10 \nYes \nYes \n10 \u22123 \n\nIII.19.51 \nE = \n\n\u2212 m q 4 \n\n\n_ \n2 (4\uf070\u03f5) 2 \u210f 2 1 \n_ \n\nn 2 \n\n18 \nda, bf \n10 \nYes \nYes \n10 \u22125 \n\nIII.21.20 \nj = \n\n\u2212 \uf072 c 0 qA vec \n\n\n_ \nm \n13 \nda \n10 \nYes \nYes \n10 \u22122 \n\n\nTable 6 .\n6Tested bonus equations.Goldstein 8.56  is for the special case where the vectors p and A are parallel.Source \nEquation \nSolved \nSolved by Eureqa \nMethods used \n\nThe authors declare that they have no competing interests. Data and materials availability: All data needed to evaluate the conclusions in the paper are present in the paper, at https:// space.mit.edu/home/tegmark/aifeynman.html, and at https://github.com/SJ001/AI-Feynman. Any additional datasets, analysis details, and material recipes are available upon request.Rutherford scatteringYesNo da, sm, bfYesNo da, sym-, bfYes No da, bfGoldstein 3.99Yes No da, sym*, bfGoldstein 8.56No da, sep+, bf-squaredGoldstein 12.80Yes Yes da, bfNo da, bf-inv   x 2 [j] = mean(x[j]) error = RMSE(net(x),net(x 1 ) + net(x 2 )-net(x eq )) error = error/RMSE(net(x)) if error <10 \u00d7 NN error :x 1 = delete(x 1 ,index 2 ) x 2 = delete(x 2 ,index 1 ) return x 1 , x 2 , index 1 , index 2\nThe Astronomical Revolution. A Koyr\u00e9, Copernicus-Kepler-Borelli (RoutledgeA. Koyr\u00e9, The Astronomical Revolution: Copernicus-Kepler-Borelli (Routledge, 2013).\n\nN M Amil, N Bredeche, C Gagn\u00e9, S Gelly, M Schoenauer, O Teytaud, European Conference on Genetic Programming. SpringerN. M. Amil, N. Bredeche, C. Gagn\u00e9, S. Gelly, M. Schoenauer, O.Teytaud, European Conference on Genetic Programming (Springer, 2009), pp. 327-338.\n\nS K Pal, P P Wang, Genetic algorithms for pattern recognition. CRC pressS. K. Pal, P. P. Wang, Genetic algorithms for pattern recognition (CRC press, 2017).\n\n. J D Lohn, W F Kraus, D S Linden, IEEE Antenna & Propagation Society Mtg. 3814J. D. Lohn, W. F. Kraus, D. S. Linden, IEEE Antenna & Propagation Society Mtg. 3, 814 (2002).\n\nD S Linden, Proceedings 2002 NASA/DoD Conference on Evolvable Hardware. 2002 NASA/DoD Conference on Evolvable HardwareD. S. Linden, Proceedings 2002 NASA/DoD Conference on Evolvable Hardware (IEEE, 2002), pp. 147-151.\n\n. H Yu, N Yu, The Pennsylvania State University, (University ParkH. Yu, N. Yu, The Pennsylvania State University, (University Park, 2003) pp. 1-9.\n\nS Panthong, S Jantarang, CCECE 2003-Canadian Conference on Electrical and Computer Engineering. Toward a Caring and Humane Technology. IEEE3Cat. No. 03CH37436S. Panthong, S. Jantarang, CCECE 2003-Canadian Conference on Electrical and Computer Engineering. Toward a Caring and Humane Technology (Cat. No. 03CH37436) (IEEE, 2003), vol. 3, pp. 1597-1600.\n\nGenetic algorithm-based dynamic vehicle route search using car-to-car communication. B Oh, Y Na, J Yang, S Park, J Nang, J Kim, Adv. Electr. Comput. En. 10B. Oh, Y. Na, J. Yang, S. Park, J. Nang, J. Kim, Genetic algorithm-based dynamic vehicle route search using car-to-car communication. Adv. Electr. Comput. En. 10, 81-86 (2010).\n\nUsing genetic algorithms to learn reactive control parameters for autonomous robotic navigation. A Ram, R Arkin, G Boone, M Pearce, Adapt. Behav. 2A. Ram, R. Arkin, G. Boone, M. Pearce, Using genetic algorithms to learn reactive control parameters for autonomous robotic navigation. Adapt. Behav. 2, 277-305 (1994).\n\nGenetic algorithms in cryptography. B Delman, Rochester Institute of TechnologyB. Delman, Genetic algorithms in cryptography. Rochester Institute of Technology (2004).\n\n. S Kim, P Lu, S Mukherjee, M Gilbert, L Jing, V Ceperic, M Soljacic, arXiv:1912.04825arXiv preprintS. Kim, P. Lu, S. Mukherjee, M. Gilbert, L. Jing, V. Ceperic, M. Soljacic, arXiv preprint arXiv:1912.04825 (2019).\n\nGenetic algorithms and investment strategies. R J Bauer, John Wiley & Sons19320R. J. Bauer, Genetic algorithms and investment strategies, (John Wiley & Sons, ed. 1, 1994), vol. 19, p. 320.\n\nA genetic algorithms approach to forecasting of wireless subscribers. R Venkatesan, V Kumar, Int. J. Forecast. 18R. Venkatesan, V. Kumar, A genetic algorithms approach to forecasting of wireless subscribers. Int. J. Forecast. 18, 625-646 (2002).\n\nW L Cava, T R Singh, J Taggart, S Suri, J Moore, International Conference on Learning Representations. W. L. Cava, T. R. Singh, J. Taggart, S. Suri, J. Moore, International Conference on Learning Representations (2019), https://openreview.net/forum?id=Hke-JhA9Y7.\n\nS Mcaleer, F Agostinelli, A Shmakov, P Baldi, International Conference on Learning Representations. S. McAleer, F. Agostinelli, A. Shmakov, P. Baldi, International Conference on Learning Representations (2019);\n\nGenetic Programming: On the Programming of Computers by Means of Natural Selection. J R Koza, J R Koza, MIT Press1J. R. Koza, J. R. Koza, Genetic Programming: On the Programming of Computers by Means of Natural Selection (MIT Press, 1992), vol. 1.\n\nAutomated refinement and inference of analytical models for metabolic networks. M D Schmidt, R R Vallabhajosyula, J W Jenkins, J E Hood, A S Soni, J P Wikswo, H Lipson, Phys. Biol. 855011M. D. Schmidt, R. R. Vallabhajosyula, J. W. Jenkins, J. E. Hood, A. S. Soni, J. P. Wikswo, H. Lipson, Automated refinement and inference of analytical models for metabolic networks. Phys. Biol. 8, 055011 (2011).\n\nR K Mcree, Proceedings of the 12th Annual Conference Companion on Genetic and Evolutionary Computation. the 12th Annual Conference Companion on Genetic and Evolutionary ComputationNew York, NY, USAACMR. K. McRee, Proceedings of the 12th Annual Conference Companion on Genetic and Evolutionary Computation (ACM, New York, NY, USA, 2010), GECCO '10, pp. 1983-1990;\n\n. http:/doi.acm.org/10.1145/1830761.1830841http://doi.acm.org/10.1145/1830761.1830841.\n\nS Stijven, W Minnebo, K Vladislavleva, http:/doi.acm.org/10.1145/2001858.2002059Proceedings of the 13th Annual Conference Companion on Genetic and Evolutionary Computation. the 13th Annual Conference Companion on Genetic and Evolutionary ComputationNew York, NY, USAACMS. Stijven, W. Minnebo, K. Vladislavleva, Proceedings of the 13th Annual Conference Companion on Genetic and Evolutionary Computation (ACM, New York, NY, USA, 2011), GECCO '11, pp. 623-630; http://doi.acm.org/10.1145/2001858.2002059.\n\nW Kong, C Liaw, A Mehta, D Sivakumar, International Conference on Learning Representations. W. Kong, C. Liaw, A. Mehta, D. Sivakumar, International Conference on Learning Representations (2019);\n\nT Mcconaghy, Genetic Programming Theory and Practice IX. SpringerT. McConaghy, Genetic Programming Theory and Practice IX (Springer, 2011), pp. 235-260.\n\nI Arnaldo, U.-M O&apos;reilly, K Veeramachaneni, Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation. the 2015 Annual Conference on Genetic and Evolutionary ComputationACMI. Arnaldo, U.-M. O'Reilly, K. Veeramachaneni, Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation (ACM, 2015), pp. 983-990.\n\nDiscovering governing equations from data by sparse identification of nonlinear dynamical systems. S L Brunton, J L Proctor, J N Kutz, Proc. Natl. Acad. Sci. U.S.A. 113S. L. Brunton, J. L. Proctor, J. N. Kutz, Discovering governing equations from data by sparse identification of nonlinear dynamical systems. Proc. Natl. Acad. Sci. U.S.A. 113, 3932-3937 (2016).\n\nSparse identification of nonlinear dynamics for rapid model recovery. M Quade, M Abel, J Nathanutz, S L Brunton, Chaos. 2863116M. Quade, M. Abel, J. Nathanutz, S. L. Brunton, Sparse identification of nonlinear dynamics for rapid model recovery. Chaos 28, 063116 (2018).\n\nD P Searson, D E Leahy, M J Willis, Proceedings of the International multiconference of engineers and computer scientists (Citeseer, 2010). the International multiconference of engineers and computer scientists (Citeseer, 2010)1D. P. Searson, D. E. Leahy, M. J. Willis, Proceedings of the International multiconference of engineers and computer scientists (Citeseer, 2010), vol. 1, pp. 77-80.\n\n. R Praksova, Eureqa: Software review. Genet. Program. Evol. M. 12R. Praksova, Eureqa: Software review. Genet. Program. Evol. M. 12, 173-178 (2011).\n\nDistilling free-form natural laws from experimental data. M Schmidt, H Lipson, Science. 324M. Schmidt, H. Lipson, Distilling free-form natural laws from experimental data. Science 324, 81-85 (2009).\n\nH Mhaskar, Q Liao, T Poggio, Center for Brains, Minds and Machines (CBMM), arXiv. Technical reportH. Mhaskar, Q. Liao, T. Poggio, Technical report, Center for Brains, Minds and Machines (CBMM), arXiv (2016).\n\nWhy does deep and cheap learning work so well?. H W Lin, M Tegmark, D Rolnick, J. Stat. Phys. 168H. W. Lin, M. Tegmark, D. Rolnick, Why does deep and cheap learning work so well? J. Stat. Phys. 168, 1223-1247 (2017).\n\nToward an artificial intelligence physicist for unsupervised learning. T Wu, M Tegmark, Phys. Rev. E. 10033311T. Wu, M. Tegmark, Toward an artificial intelligence physicist for unsupervised learning. Phys. Rev. E. 100, 033311 (2019).\n\nSuper-convergence: Very fast training of residual networks using large learning rates. L N Smith, N Topin, L. N. Smith, N. Topin, Super-convergence: Very fast training of residual networks using large learning rates (2018);\n\nA disciplined approach to neural network hyper-parameters: Part 1 -learning rate, batch size, momentum, and weight decay. L N Smith, arXiv:1803.09820L. N. Smith, A disciplined approach to neural network hyper-parameters: Part 1 -learning rate, batch size, momentum, and weight decay. arXiv:1803.09820 (2018).\n\n. J Howard, J. Howard et al., Fastai, https://github.com/fastai/fastai (2018).\n\nR Feynman, R Leighton, M Sands, The Feynman Lectures on Physics: The New Millennium Edition: Mainly Mechanics, Radiation, and Heat. Basic Books1R. Feynman, R. Leighton, M. Sands, The Feynman Lectures on Physics: The New Millennium Edition: Mainly Mechanics, Radiation, and Heat, vol. 1 (Basic Books, 1963);\n\nR Feynman, R Leighton, M Sands, The Feynman Lectures on Physics. Pearson/Addison-Wesley2R. Feynman, R. Leighton, M. Sands, The Feynman Lectures on Physics, vol. 2 in The Feynman Lectures on Physics (Pearson/Addison-Wesley, 1963b);\n\nR Feynman, R Leighton, M Sands, The Feynman Lectures on Physics. Pearson/Addison-Wesley3R. Feynman, R. Leighton, M. Sands, The Feynman Lectures on Physics, vol. 3 in The Feynman Lectures on Physics (Pearson/Addison-Wesley, 1963);\n\nH Goldstein, C Poole, J Safko, Classical Mechanics. Addison WesleyH. Goldstein, C. Poole, J. Safko, Classical Mechanics (Addison Wesley, 2002);\n\nJ D Jackson, Classical electrodynamics. New York, NYWileyJ. D. Jackson, Classical electrodynamics (Wiley, New York, NY, ed. 3, 1999);\n\nS Weinberg, Gravitation and Cosmology: Principles and Applications of the General Theory of Relativity. New YorkWileyS. Weinberg, Gravitation and Cosmology: Principles and Applications of the General Theory of Relativity (New York: Wiley, 1972).\n\nM Schwartz, Quantum Field Theory and the Standard Model, Quantum Field Theory and the Standard Model. Cambridge Univ. PressM. Schwartz, Quantum Field Theory and the Standard Model, Quantum Field Theory and the Standard Model (Cambridge Univ. Press, 2014);\n\nJ Mcdermott, D R White, S Luke, L Manzoni, M Castelli, L Vanneschi, W Jaskowski, K Krawiec, R Harper, K De Jong, Proceedings of the 14th Annual Conference on Genetic and Evolutionary Computation. the 14th Annual Conference on Genetic and Evolutionary ComputationACMJ. McDermott, D. R. White, S. Luke, L. Manzoni, M. Castelli, L. Vanneschi, W. Jaskowski, K. Krawiec, R. Harper, K. De Jong, Proceedings of the 14th Annual Conference on Genetic and Evolutionary Computation (ACM, 2012), pp. 791-798.\n", "annotations": {"author": "[{\"end\":87,\"start\":65},{\"end\":100,\"start\":88}]", "publisher": null, "author_last_name": "[{\"end\":86,\"start\":79},{\"end\":99,\"start\":92}]", "author_first_name": "[{\"end\":78,\"start\":65},{\"end\":91,\"start\":88}]", "author_affiliation": null, "title": "[{\"end\":62,\"start\":1},{\"end\":162,\"start\":101}]", "venue": null, "abstract": "[{\"end\":1103,\"start\":326}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":3245,\"start\":3242},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3247,\"start\":3245},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3661,\"start\":3658},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3663,\"start\":3661},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3680,\"start\":3677},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3725,\"start\":3722},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3747,\"start\":3744},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3816,\"start\":3812},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":3842,\"start\":3838},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3858,\"start\":3854},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3879,\"start\":3875},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3898,\"start\":3894},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3922,\"start\":3918},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3951,\"start\":3947},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4086,\"start\":4082},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4090,\"start\":4086},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":4094,\"start\":4090},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":4128,\"start\":4124},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":4132,\"start\":4128},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":4136,\"start\":4132},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":4140,\"start\":4136},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":4168,\"start\":4164},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4171,\"start\":4168},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":4279,\"start\":4275},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4334,\"start\":4330},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5725,\"start\":5722},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":6105,\"start\":6101},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":6108,\"start\":6105},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":13182,\"start\":13178},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":16163,\"start\":16159},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":16166,\"start\":16163},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":16196,\"start\":16192},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":25715,\"start\":25711},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":25758,\"start\":25754},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":25867,\"start\":25863},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":25933,\"start\":25929},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":27451,\"start\":27447},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":28515,\"start\":28513},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":28693,\"start\":28691},{\"end\":35763,\"start\":35755},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":38310,\"start\":38306}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":45085,\"start\":44592},{\"attributes\":{\"id\":\"fig_1\"},\"end\":45235,\"start\":45086},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":45830,\"start\":45236},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":46019,\"start\":45831},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":48587,\"start\":46020},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":50591,\"start\":48588},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":52746,\"start\":50592},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":52919,\"start\":52747}]", "paragraph": "[{\"end\":1776,\"start\":1119},{\"end\":2935,\"start\":1778},{\"end\":3952,\"start\":2937},{\"end\":4335,\"start\":3954},{\"end\":4708,\"start\":4337},{\"end\":5025,\"start\":4710},{\"end\":5123,\"start\":5037},{\"end\":5430,\"start\":5125},{\"end\":5511,\"start\":5432},{\"end\":5589,\"start\":5513},{\"end\":5794,\"start\":5591},{\"end\":5906,\"start\":5796},{\"end\":6004,\"start\":5908},{\"end\":6249,\"start\":6006},{\"end\":7259,\"start\":6251},{\"end\":7944,\"start\":7261},{\"end\":9119,\"start\":7969},{\"end\":9877,\"start\":9189},{\"end\":10017,\"start\":9896},{\"end\":10197,\"start\":10125},{\"end\":10736,\"start\":10285},{\"end\":11332,\"start\":10752},{\"end\":12266,\"start\":11334},{\"end\":12947,\"start\":12268},{\"end\":13306,\"start\":12949},{\"end\":13892,\"start\":13356},{\"end\":15010,\"start\":13943},{\"end\":15459,\"start\":15012},{\"end\":16427,\"start\":15487},{\"end\":17276,\"start\":16429},{\"end\":18893,\"start\":17323},{\"end\":19257,\"start\":18895},{\"end\":19777,\"start\":19361},{\"end\":20711,\"start\":19805},{\"end\":21115,\"start\":20722},{\"end\":21478,\"start\":21144},{\"end\":21875,\"start\":21480},{\"end\":23015,\"start\":21901},{\"end\":23284,\"start\":23017},{\"end\":23844,\"start\":23329},{\"end\":23975,\"start\":23846},{\"end\":23978,\"start\":23977},{\"end\":24066,\"start\":23994},{\"end\":24830,\"start\":24068},{\"end\":25544,\"start\":24832},{\"end\":26003,\"start\":25546},{\"end\":26405,\"start\":26005},{\"end\":27754,\"start\":27089},{\"end\":28823,\"start\":27756},{\"end\":29608,\"start\":28825},{\"end\":31461,\"start\":29694},{\"end\":33112,\"start\":32085},{\"end\":33816,\"start\":33142},{\"end\":34432,\"start\":33818},{\"end\":35374,\"start\":34452},{\"end\":36151,\"start\":35376},{\"end\":36675,\"start\":36153},{\"end\":37783,\"start\":36677},{\"end\":38525,\"start\":37785},{\"end\":38735,\"start\":38540},{\"end\":39298,\"start\":38737},{\"end\":39863,\"start\":39315},{\"end\":40325,\"start\":39865},{\"end\":40876,\"start\":40360},{\"end\":41383,\"start\":40878},{\"end\":41968,\"start\":41385},{\"end\":42431,\"start\":41970},{\"end\":43024,\"start\":42433},{\"end\":44017,\"start\":43026},{\"end\":44312,\"start\":44019},{\"end\":44591,\"start\":44338}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":9188,\"start\":9120},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10055,\"start\":10018},{\"attributes\":{\"id\":\"formula_2\"},\"end\":10124,\"start\":10055},{\"attributes\":{\"id\":\"formula_3\"},\"end\":10284,\"start\":10198},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13355,\"start\":13307},{\"attributes\":{\"id\":\"formula_5\"},\"end\":19360,\"start\":19258},{\"attributes\":{\"id\":\"formula_6\"},\"end\":19804,\"start\":19778},{\"attributes\":{\"id\":\"formula_7\"},\"end\":21117,\"start\":21116},{\"attributes\":{\"id\":\"formula_8\"},\"end\":27065,\"start\":26406},{\"attributes\":{\"id\":\"formula_9\"},\"end\":29693,\"start\":29609},{\"attributes\":{\"id\":\"formula_10\"},\"end\":32014,\"start\":31462},{\"attributes\":{\"id\":\"formula_11\"},\"end\":32058,\"start\":32014}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":8431,\"start\":8424},{\"end\":11646,\"start\":11639},{\"end\":12038,\"start\":12031},{\"end\":12659,\"start\":12652},{\"end\":20555,\"start\":20548},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":23283,\"start\":23276},{\"end\":23671,\"start\":23649},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":23974,\"start\":23967},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":25282,\"start\":25268},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":27854,\"start\":27847},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":28373,\"start\":28358},{\"end\":28497,\"start\":28490},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":32289,\"start\":32275},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":33669,\"start\":33655},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":34840,\"start\":34833},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":35029,\"start\":35022},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":39619,\"start\":39612},{\"end\":40588,\"start\":40580},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":40627,\"start\":40620}]", "section_header": "[{\"end\":1117,\"start\":1105},{\"end\":5035,\"start\":5028},{\"end\":7967,\"start\":7947},{\"end\":9894,\"start\":9880},{\"end\":10750,\"start\":10739},{\"end\":13941,\"start\":13895},{\"end\":15485,\"start\":15462},{\"end\":17321,\"start\":17279},{\"end\":20720,\"start\":20714},{\"end\":21142,\"start\":21119},{\"end\":21899,\"start\":21878},{\"end\":23327,\"start\":23287},{\"end\":23992,\"start\":23981},{\"end\":27087,\"start\":27067},{\"end\":32083,\"start\":32060},{\"end\":33140,\"start\":33115},{\"end\":34450,\"start\":34435},{\"end\":38538,\"start\":38528},{\"end\":39313,\"start\":39301},{\"end\":40358,\"start\":40328},{\"end\":44336,\"start\":44315},{\"end\":44601,\"start\":44593},{\"end\":45177,\"start\":45087},{\"end\":45246,\"start\":45237},{\"end\":45841,\"start\":45832},{\"end\":46030,\"start\":46021},{\"end\":48598,\"start\":48589},{\"end\":52757,\"start\":52748}]", "table": "[{\"end\":45830,\"start\":45318},{\"end\":46019,\"start\":45898},{\"end\":48587,\"start\":46460},{\"end\":50591,\"start\":48662},{\"end\":52746,\"start\":50648},{\"end\":52919,\"start\":52861}]", "figure_caption": "[{\"end\":45085,\"start\":44603},{\"end\":45235,\"start\":45186},{\"end\":45318,\"start\":45248},{\"end\":45898,\"start\":45843},{\"end\":46460,\"start\":46032},{\"end\":48662,\"start\":48600},{\"end\":50648,\"start\":50594},{\"end\":52861,\"start\":52759}]", "figure_ref": "[{\"end\":7373,\"start\":7367},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":7764,\"start\":7756},{\"end\":18203,\"start\":18197}]", "bib_author_first_name": "[{\"end\":53718,\"start\":53717},{\"end\":53848,\"start\":53847},{\"end\":53850,\"start\":53849},{\"end\":53858,\"start\":53857},{\"end\":53870,\"start\":53869},{\"end\":53879,\"start\":53878},{\"end\":53888,\"start\":53887},{\"end\":53902,\"start\":53901},{\"end\":54111,\"start\":54110},{\"end\":54113,\"start\":54112},{\"end\":54120,\"start\":54119},{\"end\":54122,\"start\":54121},{\"end\":54271,\"start\":54270},{\"end\":54273,\"start\":54272},{\"end\":54281,\"start\":54280},{\"end\":54283,\"start\":54282},{\"end\":54292,\"start\":54291},{\"end\":54294,\"start\":54293},{\"end\":54443,\"start\":54442},{\"end\":54445,\"start\":54444},{\"end\":54664,\"start\":54663},{\"end\":54670,\"start\":54669},{\"end\":54810,\"start\":54809},{\"end\":54822,\"start\":54821},{\"end\":55248,\"start\":55247},{\"end\":55254,\"start\":55253},{\"end\":55260,\"start\":55259},{\"end\":55268,\"start\":55267},{\"end\":55276,\"start\":55275},{\"end\":55284,\"start\":55283},{\"end\":55593,\"start\":55592},{\"end\":55600,\"start\":55599},{\"end\":55609,\"start\":55608},{\"end\":55618,\"start\":55617},{\"end\":55849,\"start\":55848},{\"end\":55984,\"start\":55983},{\"end\":55991,\"start\":55990},{\"end\":55997,\"start\":55996},{\"end\":56010,\"start\":56009},{\"end\":56021,\"start\":56020},{\"end\":56029,\"start\":56028},{\"end\":56040,\"start\":56039},{\"end\":56244,\"start\":56243},{\"end\":56246,\"start\":56245},{\"end\":56458,\"start\":56457},{\"end\":56472,\"start\":56471},{\"end\":56635,\"start\":56634},{\"end\":56637,\"start\":56636},{\"end\":56645,\"start\":56644},{\"end\":56647,\"start\":56646},{\"end\":56656,\"start\":56655},{\"end\":56667,\"start\":56666},{\"end\":56675,\"start\":56674},{\"end\":56900,\"start\":56899},{\"end\":56911,\"start\":56910},{\"end\":56926,\"start\":56925},{\"end\":56937,\"start\":56936},{\"end\":57196,\"start\":57195},{\"end\":57198,\"start\":57197},{\"end\":57206,\"start\":57205},{\"end\":57208,\"start\":57207},{\"end\":57441,\"start\":57440},{\"end\":57443,\"start\":57442},{\"end\":57454,\"start\":57453},{\"end\":57456,\"start\":57455},{\"end\":57475,\"start\":57474},{\"end\":57477,\"start\":57476},{\"end\":57488,\"start\":57487},{\"end\":57490,\"start\":57489},{\"end\":57498,\"start\":57497},{\"end\":57500,\"start\":57499},{\"end\":57508,\"start\":57507},{\"end\":57510,\"start\":57509},{\"end\":57520,\"start\":57519},{\"end\":57761,\"start\":57760},{\"end\":57763,\"start\":57762},{\"end\":58213,\"start\":58212},{\"end\":58224,\"start\":58223},{\"end\":58235,\"start\":58234},{\"end\":58717,\"start\":58716},{\"end\":58725,\"start\":58724},{\"end\":58733,\"start\":58732},{\"end\":58742,\"start\":58741},{\"end\":58913,\"start\":58912},{\"end\":59067,\"start\":59066},{\"end\":59081,\"start\":59077},{\"end\":59098,\"start\":59097},{\"end\":59523,\"start\":59522},{\"end\":59525,\"start\":59524},{\"end\":59536,\"start\":59535},{\"end\":59538,\"start\":59537},{\"end\":59549,\"start\":59548},{\"end\":59551,\"start\":59550},{\"end\":59857,\"start\":59856},{\"end\":59866,\"start\":59865},{\"end\":59874,\"start\":59873},{\"end\":59887,\"start\":59886},{\"end\":59889,\"start\":59888},{\"end\":60058,\"start\":60057},{\"end\":60060,\"start\":60059},{\"end\":60071,\"start\":60070},{\"end\":60073,\"start\":60072},{\"end\":60082,\"start\":60081},{\"end\":60084,\"start\":60083},{\"end\":60454,\"start\":60453},{\"end\":60660,\"start\":60659},{\"end\":60671,\"start\":60670},{\"end\":60802,\"start\":60801},{\"end\":60813,\"start\":60812},{\"end\":60821,\"start\":60820},{\"end\":61059,\"start\":61058},{\"end\":61061,\"start\":61060},{\"end\":61068,\"start\":61067},{\"end\":61079,\"start\":61078},{\"end\":61300,\"start\":61299},{\"end\":61306,\"start\":61305},{\"end\":61551,\"start\":61550},{\"end\":61553,\"start\":61552},{\"end\":61562,\"start\":61561},{\"end\":61811,\"start\":61810},{\"end\":61813,\"start\":61812},{\"end\":62001,\"start\":62000},{\"end\":62079,\"start\":62078},{\"end\":62090,\"start\":62089},{\"end\":62102,\"start\":62101},{\"end\":62387,\"start\":62386},{\"end\":62398,\"start\":62397},{\"end\":62410,\"start\":62409},{\"end\":62619,\"start\":62618},{\"end\":62630,\"start\":62629},{\"end\":62642,\"start\":62641},{\"end\":62850,\"start\":62849},{\"end\":62863,\"start\":62862},{\"end\":62872,\"start\":62871},{\"end\":62995,\"start\":62994},{\"end\":62997,\"start\":62996},{\"end\":63130,\"start\":63129},{\"end\":63377,\"start\":63376},{\"end\":63634,\"start\":63633},{\"end\":63647,\"start\":63646},{\"end\":63649,\"start\":63648},{\"end\":63658,\"start\":63657},{\"end\":63666,\"start\":63665},{\"end\":63677,\"start\":63676},{\"end\":63689,\"start\":63688},{\"end\":63702,\"start\":63701},{\"end\":63715,\"start\":63714},{\"end\":63726,\"start\":63725},{\"end\":63736,\"start\":63735},{\"end\":63739,\"start\":63737}]", "bib_author_last_name": "[{\"end\":53724,\"start\":53719},{\"end\":53855,\"start\":53851},{\"end\":53867,\"start\":53859},{\"end\":53876,\"start\":53871},{\"end\":53885,\"start\":53880},{\"end\":53899,\"start\":53889},{\"end\":53910,\"start\":53903},{\"end\":54117,\"start\":54114},{\"end\":54127,\"start\":54123},{\"end\":54278,\"start\":54274},{\"end\":54289,\"start\":54284},{\"end\":54301,\"start\":54295},{\"end\":54452,\"start\":54446},{\"end\":54667,\"start\":54665},{\"end\":54673,\"start\":54671},{\"end\":54819,\"start\":54811},{\"end\":54832,\"start\":54823},{\"end\":55251,\"start\":55249},{\"end\":55257,\"start\":55255},{\"end\":55265,\"start\":55261},{\"end\":55273,\"start\":55269},{\"end\":55281,\"start\":55277},{\"end\":55288,\"start\":55285},{\"end\":55597,\"start\":55594},{\"end\":55606,\"start\":55601},{\"end\":55615,\"start\":55610},{\"end\":55625,\"start\":55619},{\"end\":55856,\"start\":55850},{\"end\":55988,\"start\":55985},{\"end\":55994,\"start\":55992},{\"end\":56007,\"start\":55998},{\"end\":56018,\"start\":56011},{\"end\":56026,\"start\":56022},{\"end\":56037,\"start\":56030},{\"end\":56049,\"start\":56041},{\"end\":56252,\"start\":56247},{\"end\":56469,\"start\":56459},{\"end\":56478,\"start\":56473},{\"end\":56642,\"start\":56638},{\"end\":56653,\"start\":56648},{\"end\":56664,\"start\":56657},{\"end\":56672,\"start\":56668},{\"end\":56681,\"start\":56676},{\"end\":56908,\"start\":56901},{\"end\":56923,\"start\":56912},{\"end\":56934,\"start\":56927},{\"end\":56943,\"start\":56938},{\"end\":57203,\"start\":57199},{\"end\":57213,\"start\":57209},{\"end\":57451,\"start\":57444},{\"end\":57472,\"start\":57457},{\"end\":57485,\"start\":57478},{\"end\":57495,\"start\":57491},{\"end\":57505,\"start\":57501},{\"end\":57517,\"start\":57511},{\"end\":57527,\"start\":57521},{\"end\":57769,\"start\":57764},{\"end\":58221,\"start\":58214},{\"end\":58232,\"start\":58225},{\"end\":58249,\"start\":58236},{\"end\":58722,\"start\":58718},{\"end\":58730,\"start\":58726},{\"end\":58739,\"start\":58734},{\"end\":58752,\"start\":58743},{\"end\":58923,\"start\":58914},{\"end\":59075,\"start\":59068},{\"end\":59095,\"start\":59082},{\"end\":59113,\"start\":59099},{\"end\":59533,\"start\":59526},{\"end\":59546,\"start\":59539},{\"end\":59556,\"start\":59552},{\"end\":59863,\"start\":59858},{\"end\":59871,\"start\":59867},{\"end\":59884,\"start\":59875},{\"end\":59897,\"start\":59890},{\"end\":60068,\"start\":60061},{\"end\":60079,\"start\":60074},{\"end\":60091,\"start\":60085},{\"end\":60463,\"start\":60455},{\"end\":60668,\"start\":60661},{\"end\":60678,\"start\":60672},{\"end\":60810,\"start\":60803},{\"end\":60818,\"start\":60814},{\"end\":60828,\"start\":60822},{\"end\":61065,\"start\":61062},{\"end\":61076,\"start\":61069},{\"end\":61087,\"start\":61080},{\"end\":61303,\"start\":61301},{\"end\":61314,\"start\":61307},{\"end\":61559,\"start\":61554},{\"end\":61568,\"start\":61563},{\"end\":61819,\"start\":61814},{\"end\":62008,\"start\":62002},{\"end\":62087,\"start\":62080},{\"end\":62099,\"start\":62091},{\"end\":62108,\"start\":62103},{\"end\":62395,\"start\":62388},{\"end\":62407,\"start\":62399},{\"end\":62416,\"start\":62411},{\"end\":62627,\"start\":62620},{\"end\":62639,\"start\":62631},{\"end\":62648,\"start\":62643},{\"end\":62860,\"start\":62851},{\"end\":62869,\"start\":62864},{\"end\":62878,\"start\":62873},{\"end\":63005,\"start\":62998},{\"end\":63139,\"start\":63131},{\"end\":63386,\"start\":63378},{\"end\":63644,\"start\":63635},{\"end\":63655,\"start\":63650},{\"end\":63663,\"start\":63659},{\"end\":63674,\"start\":63667},{\"end\":63686,\"start\":63678},{\"end\":63699,\"start\":63690},{\"end\":63712,\"start\":63703},{\"end\":63723,\"start\":63716},{\"end\":63733,\"start\":63727},{\"end\":63744,\"start\":63740}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":53845,\"start\":53688},{\"attributes\":{\"id\":\"b1\"},\"end\":54108,\"start\":53847},{\"attributes\":{\"id\":\"b2\"},\"end\":54266,\"start\":54110},{\"attributes\":{\"id\":\"b3\"},\"end\":54440,\"start\":54268},{\"attributes\":{\"id\":\"b4\"},\"end\":54659,\"start\":54442},{\"attributes\":{\"id\":\"b5\"},\"end\":54807,\"start\":54661},{\"attributes\":{\"id\":\"b6\"},\"end\":55160,\"start\":54809},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":113323885},\"end\":55493,\"start\":55162},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":6168061},\"end\":55810,\"start\":55495},{\"attributes\":{\"id\":\"b9\"},\"end\":55979,\"start\":55812},{\"attributes\":{\"doi\":\"arXiv:1912.04825\",\"id\":\"b10\"},\"end\":56195,\"start\":55981},{\"attributes\":{\"id\":\"b11\"},\"end\":56385,\"start\":56197},{\"attributes\":{\"id\":\"b12\"},\"end\":56632,\"start\":56387},{\"attributes\":{\"id\":\"b13\"},\"end\":56897,\"start\":56634},{\"attributes\":{\"id\":\"b14\"},\"end\":57109,\"start\":56899},{\"attributes\":{\"id\":\"b15\"},\"end\":57358,\"start\":57111},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":15202886},\"end\":57758,\"start\":57360},{\"attributes\":{\"id\":\"b17\"},\"end\":58122,\"start\":57760},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/1830761.1830841\",\"id\":\"b18\"},\"end\":58210,\"start\":58124},{\"attributes\":{\"doi\":\"http:/doi.acm.org/10.1145/2001858.2002059\",\"id\":\"b19\"},\"end\":58714,\"start\":58212},{\"attributes\":{\"id\":\"b20\"},\"end\":58910,\"start\":58716},{\"attributes\":{\"id\":\"b21\"},\"end\":59064,\"start\":58912},{\"attributes\":{\"id\":\"b22\"},\"end\":59421,\"start\":59066},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":1594001},\"end\":59784,\"start\":59423},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":49230861},\"end\":60055,\"start\":59786},{\"attributes\":{\"id\":\"b25\"},\"end\":60449,\"start\":60057},{\"attributes\":{\"id\":\"b26\"},\"end\":60599,\"start\":60451},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":7366016},\"end\":60799,\"start\":60601},{\"attributes\":{\"id\":\"b28\"},\"end\":61008,\"start\":60801},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":2494297},\"end\":61226,\"start\":61010},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":204194135},\"end\":61461,\"start\":61228},{\"attributes\":{\"id\":\"b31\"},\"end\":61686,\"start\":61463},{\"attributes\":{\"doi\":\"arXiv:1803.09820\",\"id\":\"b32\"},\"end\":61996,\"start\":61688},{\"attributes\":{\"id\":\"b33\"},\"end\":62076,\"start\":61998},{\"attributes\":{\"id\":\"b34\"},\"end\":62384,\"start\":62078},{\"attributes\":{\"id\":\"b35\"},\"end\":62616,\"start\":62386},{\"attributes\":{\"id\":\"b36\"},\"end\":62847,\"start\":62618},{\"attributes\":{\"id\":\"b37\"},\"end\":62992,\"start\":62849},{\"attributes\":{\"id\":\"b38\"},\"end\":63127,\"start\":62994},{\"attributes\":{\"id\":\"b39\"},\"end\":63374,\"start\":63129},{\"attributes\":{\"id\":\"b40\"},\"end\":63631,\"start\":63376},{\"attributes\":{\"id\":\"b41\"},\"end\":64129,\"start\":63633}]", "bib_title": "[{\"end\":55245,\"start\":55162},{\"end\":55590,\"start\":55495},{\"end\":56455,\"start\":56387},{\"end\":57438,\"start\":57360},{\"end\":59520,\"start\":59423},{\"end\":59854,\"start\":59786},{\"end\":60657,\"start\":60601},{\"end\":61056,\"start\":61010},{\"end\":61297,\"start\":61228}]", "bib_author": "[{\"end\":53726,\"start\":53717},{\"end\":53857,\"start\":53847},{\"end\":53869,\"start\":53857},{\"end\":53878,\"start\":53869},{\"end\":53887,\"start\":53878},{\"end\":53901,\"start\":53887},{\"end\":53912,\"start\":53901},{\"end\":54119,\"start\":54110},{\"end\":54129,\"start\":54119},{\"end\":54280,\"start\":54270},{\"end\":54291,\"start\":54280},{\"end\":54303,\"start\":54291},{\"end\":54454,\"start\":54442},{\"end\":54669,\"start\":54663},{\"end\":54675,\"start\":54669},{\"end\":54821,\"start\":54809},{\"end\":54834,\"start\":54821},{\"end\":55253,\"start\":55247},{\"end\":55259,\"start\":55253},{\"end\":55267,\"start\":55259},{\"end\":55275,\"start\":55267},{\"end\":55283,\"start\":55275},{\"end\":55290,\"start\":55283},{\"end\":55599,\"start\":55592},{\"end\":55608,\"start\":55599},{\"end\":55617,\"start\":55608},{\"end\":55627,\"start\":55617},{\"end\":55858,\"start\":55848},{\"end\":55990,\"start\":55983},{\"end\":55996,\"start\":55990},{\"end\":56009,\"start\":55996},{\"end\":56020,\"start\":56009},{\"end\":56028,\"start\":56020},{\"end\":56039,\"start\":56028},{\"end\":56051,\"start\":56039},{\"end\":56254,\"start\":56243},{\"end\":56471,\"start\":56457},{\"end\":56480,\"start\":56471},{\"end\":56644,\"start\":56634},{\"end\":56655,\"start\":56644},{\"end\":56666,\"start\":56655},{\"end\":56674,\"start\":56666},{\"end\":56683,\"start\":56674},{\"end\":56910,\"start\":56899},{\"end\":56925,\"start\":56910},{\"end\":56936,\"start\":56925},{\"end\":56945,\"start\":56936},{\"end\":57205,\"start\":57195},{\"end\":57215,\"start\":57205},{\"end\":57453,\"start\":57440},{\"end\":57474,\"start\":57453},{\"end\":57487,\"start\":57474},{\"end\":57497,\"start\":57487},{\"end\":57507,\"start\":57497},{\"end\":57519,\"start\":57507},{\"end\":57529,\"start\":57519},{\"end\":57771,\"start\":57760},{\"end\":58223,\"start\":58212},{\"end\":58234,\"start\":58223},{\"end\":58251,\"start\":58234},{\"end\":58724,\"start\":58716},{\"end\":58732,\"start\":58724},{\"end\":58741,\"start\":58732},{\"end\":58754,\"start\":58741},{\"end\":58925,\"start\":58912},{\"end\":59077,\"start\":59066},{\"end\":59097,\"start\":59077},{\"end\":59115,\"start\":59097},{\"end\":59535,\"start\":59522},{\"end\":59548,\"start\":59535},{\"end\":59558,\"start\":59548},{\"end\":59865,\"start\":59856},{\"end\":59873,\"start\":59865},{\"end\":59886,\"start\":59873},{\"end\":59899,\"start\":59886},{\"end\":60070,\"start\":60057},{\"end\":60081,\"start\":60070},{\"end\":60093,\"start\":60081},{\"end\":60465,\"start\":60453},{\"end\":60670,\"start\":60659},{\"end\":60680,\"start\":60670},{\"end\":60812,\"start\":60801},{\"end\":60820,\"start\":60812},{\"end\":60830,\"start\":60820},{\"end\":61067,\"start\":61058},{\"end\":61078,\"start\":61067},{\"end\":61089,\"start\":61078},{\"end\":61305,\"start\":61299},{\"end\":61316,\"start\":61305},{\"end\":61561,\"start\":61550},{\"end\":61570,\"start\":61561},{\"end\":61821,\"start\":61810},{\"end\":62010,\"start\":62000},{\"end\":62089,\"start\":62078},{\"end\":62101,\"start\":62089},{\"end\":62110,\"start\":62101},{\"end\":62397,\"start\":62386},{\"end\":62409,\"start\":62397},{\"end\":62418,\"start\":62409},{\"end\":62629,\"start\":62618},{\"end\":62641,\"start\":62629},{\"end\":62650,\"start\":62641},{\"end\":62862,\"start\":62849},{\"end\":62871,\"start\":62862},{\"end\":62880,\"start\":62871},{\"end\":63007,\"start\":62994},{\"end\":63141,\"start\":63129},{\"end\":63388,\"start\":63376},{\"end\":63646,\"start\":63633},{\"end\":63657,\"start\":63646},{\"end\":63665,\"start\":63657},{\"end\":63676,\"start\":63665},{\"end\":63688,\"start\":63676},{\"end\":63701,\"start\":63688},{\"end\":63714,\"start\":63701},{\"end\":63725,\"start\":63714},{\"end\":63735,\"start\":63725},{\"end\":63746,\"start\":63735}]", "bib_venue": "[{\"end\":53715,\"start\":53688},{\"end\":53954,\"start\":53912},{\"end\":54171,\"start\":54129},{\"end\":54341,\"start\":54303},{\"end\":54512,\"start\":54454},{\"end\":54942,\"start\":54834},{\"end\":55313,\"start\":55290},{\"end\":55639,\"start\":55627},{\"end\":55846,\"start\":55812},{\"end\":56241,\"start\":56197},{\"end\":56496,\"start\":56480},{\"end\":56735,\"start\":56683},{\"end\":56997,\"start\":56945},{\"end\":57193,\"start\":57111},{\"end\":57539,\"start\":57529},{\"end\":57862,\"start\":57771},{\"end\":58383,\"start\":58292},{\"end\":58806,\"start\":58754},{\"end\":58967,\"start\":58925},{\"end\":59196,\"start\":59115},{\"end\":59586,\"start\":59558},{\"end\":59904,\"start\":59899},{\"end\":60195,\"start\":60093},{\"end\":60513,\"start\":60465},{\"end\":60687,\"start\":60680},{\"end\":60881,\"start\":60830},{\"end\":61102,\"start\":61089},{\"end\":61328,\"start\":61316},{\"end\":61548,\"start\":61463},{\"end\":61808,\"start\":61688},{\"end\":62208,\"start\":62110},{\"end\":62449,\"start\":62418},{\"end\":62681,\"start\":62650},{\"end\":62899,\"start\":62880},{\"end\":63032,\"start\":63007},{\"end\":63231,\"start\":63141},{\"end\":63476,\"start\":63388},{\"end\":63827,\"start\":63746},{\"end\":54560,\"start\":54514},{\"end\":57957,\"start\":57864},{\"end\":58478,\"start\":58385},{\"end\":59264,\"start\":59198},{\"end\":60284,\"start\":60197},{\"end\":63046,\"start\":63034},{\"end\":63241,\"start\":63233},{\"end\":63895,\"start\":63829}]"}}}, "year": 2023, "month": 12, "day": 17}