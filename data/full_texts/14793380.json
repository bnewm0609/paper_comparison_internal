{"id": 14793380, "updated": "2023-11-24 17:22:17.938", "metadata": {"title": "Hardware Trust through Layout Filling: a Hardware Trojan Prevention Technique", "authors": "[{\"first\":\"Papa-Sidy\",\"last\":\"Ba\",\"middle\":[]},{\"first\":\"Sophie\",\"last\":\"Dupuis\",\"middle\":[]},{\"first\":\"Manikandan\",\"last\":\"Palanichamy\",\"middle\":[]},{\"first\":\"Giorgio\",\"last\":\"Natale\",\"middle\":[\"Di\"]},{\"first\":\"Bruno\",\"last\":\"Rouzeyre\",\"middle\":[]}]", "venue": "2016 IEEE Computer Society Annual Symposium on VLSI (ISVLSI)", "journal": "2016 IEEE Computer Society Annual Symposium on VLSI (ISVLSI)", "publication_date": {"year": 2016, "month": null, "day": null}, "abstract": "\u2014 The insertion of malicious alterations to a circuit, referred to as Hardware Trojans, is a threat considered more and more seriously during the last years. Numerous methods have been proposed in the literature to detect the presence of such alterations. More recently, Design-for-Hardware-Trust (DfHT) methods have been proposed, that enhance the design of the circuit in order to incorporate features that can either prevent the insertion of a HT or that can help detection methods. This paper focuses on a HT prevention technique that aims at creating a layout without filler cells, which are assumed to provide a great opportunity for HT insertion, in order to make the insertion of a HT in a layout as difficult as possible.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2484886826", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/isvlsi/BaDMFNR16", "doi": "10.1109/isvlsi.2016.22"}}, "content": {"source": {"pdf_hash": "cbbdb2f0c48cddfdce2cd3ab2aaa9b0a2f6218fb", "pdf_src": "ScienceParsePlus", "pdf_uri": "[\"https://hal-lirmm.ccsd.cnrs.fr/lirmm-01346529/file/9039a254.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "https://hal-lirmm.ccsd.cnrs.fr/lirmm-01346529/document", "status": "GREEN"}}, "grobid": {"id": "9554ffee607d057ed5fd8302b064b2103489a616", "type": "plain-text", "url": "s3://ai2-s2-science-parse-plus-prod/parse-results/s2orc_worker/cbbdb2f0c48cddfdce2cd3ab2aaa9b0a2f6218fb.txt", "contents": "\nHardware'Trust'through'Layout'Filling:' a'Hardware'Trojan'Prevention'Technique'\n\n\nPapa-Sidy Ba \nSophie Dupuis \nManikandan Palanichamy \nGiorgio Di Natale \nBruno Rouzeyre \n\nUMR 5506\nLIRMM (Universit\u00e9 de Montpellier / CNRS\n\n\n\nMontpellierFrance\n\nHardware'Trust'through'Layout'Filling:' a'Hardware'Trojan'Prevention'Technique'\n3FB4767E2B13FAF41044F7D53BCF834910.1109/ISVLSI.2016.22Harware-TrojansDesign-for-Hardware-TrustLayoutPlacement and routing\nThe insertion of malicious alterations to a circuit, referred to as Hardware Trojans, is a threat considered more and more seriously during the last years.Numerous methods have been proposed in the literature to detect the presence of such alterations.More recently, Design-for-Hardware-Trust (DfHT) methods have been proposed, that enhance the design of the circuit in order to incorporate features that can either prevent the insertion of a HT or that can help detection methods.This paper focuses on a HT prevention technique that aims at creating a layout without filler cells, which are assumed to provide a great opportunity for HT insertion, in order to make the insertion of a HT in a layout as difficult as possible.\n\nINTRODUCTION\n\nWith ever-shrinking transistor technologies, the cost of new fabrication facilities is becoming prohibitive and outsourcing the fabrication process to low-cost locations has become a major trend in the Integrated Circuits (ICs) industry.This raises the question about untrusted foundries in which the insertion of malicious circuitry, referred to as Hardware Trojans (HTs), is a possible threat [1,2].A wide variety of HTs can indeed be implemented for altering the initial functionality of a design.They differ in their phase of insertion in the flow, physical characteristics, activation mechanisms, or functionality [3].The challenge lies in how to detect HTs and/or prevent HT insertion knowing the stealthy nature of that threat.Few hundred transistors are indeed sufficient to insert a malicious behavior in a billiontransistor design.There is therefore a need of developing novel techniques to secure the ICs against this threat [4].\n\nMany studies have been recently dedicated to the HT threat.Proposed techniques can be classified into two main categories: detection methods and DfHT.In the former case, the design flow of the circuit is not modified and the circuit is tested after its fabrication in order to ensure the nonexistence of HT.On the contrary, DfHT methods consist in enhancing the design of the circuit in order to incorporate features that can either prevent the insertion of a HT or that can help detection methods [5].\n\nHTs detection methods are divided into two types: sidechannel analysis [6,7], and logic testing [8][9][10][11].Side channel analysis methods focus on monitoring physical parameters of the circuit, such as the power consumption [6] or path delay [7].Relying on golden ICs (i.e.circuit that have been ensured to be HT-free by destructive methods), a comparison is made with the circuits under test.The assumption is that the introduction of any additional malicious logic would increase power consumption or some path delay.The main weakness of side-channel analysis is to manage process variations.This makes them hardly effective on small HTs.Most logic testing based methods focus on so-called rare values based HTs i.e.HTs that are dormant until a very rare condition activates/triggers them [8].The HT payload is then observed with an error on the outputs.The main concern is then to be able to activate potential HTs at test time i.e. find test vectors that can maximize the chances of activating HTs [9,10].More recently, it is assumed in [11] that an attacker may not have control on the internal signals of a circuit and that he will rather attach a HT trigger on the inputs.The goal is then to produce a reduced set of test vectors using combinatorial testing.Logic testing methods reach their limits when the needed set of test vectors increase to an unaffordable size.They can therefore be hardly effective when considering large HTs requiring the control of numerous signals.\n\nGiven the limitations of HT detection methods, the idea of modifying the design flow has emerged.These DfHT methods incorporate into circuits features that can help detection methods or/and make more difficult the insertion of a HT [12][13][14][15][16][17][18][19][20].\n\nIn this paper, we focus on a DfHT method that aims at preventing an attacker in an untrusted foundry from inserting a HT at the layout level.The proposed method consists in creating a circuit layout as dense as possible.As shown in [12], a possible threat for easy HT insertion is indeed provided by the filler cells.Filler cells are inserted in the empty spaces of the circuit layout after the placement step and do not have any specific logic function.Their goal is to improve the density uniformity of the circuit [21].They can provide a great opportunity for HT insertion because they are not tested after production.Therefore they can be easily removed and replaced by a HT.Furthermore, removing filler cells to replace them with new gates seems stealthier from a visual inspection point of view [22] than modifying the original functional cells of the circuit.In this way, any intentional modification of the placement of the logic gates becomes extremely hard to be performed by a possible attacker.\n\nThe authors of [12] proposed a technique called Built-In Self-Authentication (BISA) in which interconnected combinational cells are used as filler cells in order to create an additional combinational network.By testing the extra network (besides the original design), it is possible to understand if filler cells have been altered.The test of the additional network is performed through a Built-In Self-Test architecture, where Linear Feed Back Shift Registers (LFSRs) and Multiple-Input Shift-Registers (MISRs) are also implemented in the space dedicated to filler cells.Based on the same insight, it is proposed in [13] to improve the method by prioritizing the empty spaces to fill, since achieving 100% occupation ratio is in most cases impossible for routability reasons.The proposed idea is to fill in priority the so called \"critical empty spaces\" i.e. the ones that are close to signals which are prone to be selected for HT triggering.Furthermore, it is also proposed in [13] to use shift registers in order to test the added combinational functions, instead of a TPG and a MISR, with the intention of needing less space left.However, this method still reaches its limits because of the large size of the FFs.Firstly, there may be a lack of FFs inserted with regards to the number of combinational cells inserted.Secondly, when the original occupancy rate reaches about 85% in medium size ASICs, no space is large enough to hold a FF.\n\nThe contribution of this paper is to enhance the method proposed in [13], by: 1. Providing an enhanced algorithm that allows deriving the best number of combinatorial functions given the possible number of FFs to insert; 2. Describing experiments consisting in inserting only logical gates when a design is too dense to contain any FF; 3. Describing resulting circuits in terms of power consumption and timing.The rest of the paper is organized as follows: Section II presents related works on HT prevention.Section III details the proposed layout level design approach.Experimental results are presented in Section IV.Finally, Section V concludes the paper.\n\n\nII. RELATED WORKS\n\n\nA. RTL level\n\nChakraborty et al. propose in [14] to modify Finite-State Machines (FSMs) in order to create a special mode of system operation called \"transparent mode\" that allows to control low-controllability signals and observe lowobservability signals.A key port is added to the circuits, and on the application of the right sequence of keys, the FSM enters the transparent mode.\n\nThe method proposed in [15] consists also in adding a key, but in that case, the goal is to obfuscate the FSM: upon activation, the circuit is in an \"obfuscated mode\", and enters the normal mode only upon application of the right input sequence of keys.\n\n\nB. Gate level\n\nThe approach proposed in [16] inserts so-called \"dummy flips-flops\" in order to improve the controllability of the design and thus remove rare triggering condition for HTs.\n\nThe method in [17] aims also at removing rare triggering conditions thanks to the insertion of AND/OR gates controlled by a key.These gates have the double feature of changing the controllability of the signals (in order to remove low controllable signals) and obfuscating the functionality of the circuit: the circuit behaves correctly only upon the application of the right key.\n\n\nC. Layout level\n\nIn [18], controllability is improved thanks to an inverted voltage scheme.Voltage inversion on a CMOS gate indeed changes the gate behavior e.g. a NAND gate behaves like a AND gate, a NOR gate behaves like an OR gate.Consequently, while the NAND gate output is initially low controllable to '0' and easily controllable to '1', the voltage inversion on that gate makes its output easily controllable to '0' (and low controllable to '1').Using both voltage configurations allows controlling the gate output to both values.This approach affects the place and root process since gates with the same combinatorial depth must be connected to the same voltage supply network, and gates in the alternate levels (combinatorial depths i and i+1) must be connected to separate supply voltage network.\n\n\nD. Transistor level\n\nMethods in [19,20] propose to change the standard-cell library used.\n\nIt is proposed in [19] to implement circuits with differential cascade voltage switch logic (DCVSL), which produces complementary logic values in all signals.The assumption is that the insertion of a HT will necessarily lead to non-complementary inputs in a DCVSL gate and consequently abnormal short-circuit power peaks.Note that any HT implementation leading to produce errors simultaneously on complementary values will not be detected.\n\nThe idea of creating new types of CMOS gates that include not only the wanted functionality but also a so-called dual functionality is introduced in [20].The aim of this dual functionality is that a slight change caused by a HT in the primary functionality should cause a large difference in the dual functionality.A potential HT should therefore be easily detected by logic testing methods.This hypothesis, interesting in theory, has unfortunately not been implemented.\n\n\nE. Synthesis\n\nAs mentioned before, Design-for-Trust methods are useful, either to help detection methods or to make HT insertion more difficult.Methods at RTL or gate levels provide effective protection, but need to incorporate new functionality into the circuits and therefore entail silicon area overhead.Method proposed in [19,20] require creating the ICs with uncommon logic cells, which can be very costly and lead to a non-negligible area/power consumption overhead.\n\nThe only methods that do not generate larger circuits are the ones based on \"layout filling\", as proposed in [12,13].Filling unused spaces with functional cells instead of filler cells has indeed no impact on the silicon area.Furthermore, these methods are not costly or time consuming since they are based on a standard library as well as standard place and route tools.Although promising in theory, this idea may nevertheless be limited by the place/route tools capabilities.Placement and routing are indeed critical steps in the VLSI design flow.Limited routing resources (in terms of number of available wire tracks) are indeed the initial cause of the need to enlarge the layout during placement to provide enough wire tracks to resolve routing congestion, hence the creation of the \"empty spaces\" between the standard cells.Filling these empty spaces with functional cells and connecting these additional cells together may generate new routing constraints, which may lead to unroutable layouts.That is why the idea of prioritizing the empty spaces to fill was introduced in [13].However, the method proposed in [13] reached its limits because of the size of the shift registers to add.We address this issue in this paper by proposing an enhanced procedure in which an iterative analysis to derive the best way to connect the combinatorial cells together given the possible number of FFs to insert.\n\n\nIII. PROPOSED LAYOUT-LEVEL HT PREVENTION APPROACH\n\nFig. 1 shows the block diagram of the proposed layout level design approach.The principle of this method is to fill the \"empty spaces\" needed to perform routing with extra combinatorial functions.Thus an attacker has no room in the design to add extra functions such as HTs.Extra standard-cells are inserted and connected together to form several combinatorial functions that are independent from the original design.A significant constraint is to create testable functions.The goal of the method is indeed to test these functions on the fabricated ICs to ensure that no function has been modified by an attacker introducing a HT.Although it is difficult for an attacker to identify additional functions from the original circuit, the pessimistic scenario in which the attacker succeeds is therefore handled.In order to test these functions, shift-registers are used at both input and output sides in order to apply input patterns and receive output responses.These shift-registers are also implemented within unused empty spaces.\n\nThe next sub-sections detail the global flow, as well as the several steps of the method: the identification of the socalled \"critical empty spaces\" in the layout, the filling with standard cells and shift registers and the building of the extra functions.\n\n\nA. Global flow\n\nFrom a placed circuit (and a chosen initial occupation ratio), the global flow of the experimental procedure is as follows:\n\n1. Computation of the empty spaces and critical empty spaces, 2. Placement of the maximum number of FFs that can fit into these empty spaces (possibly none) to create the shift registers, 3. Placement of the logic cells in the remaining empty spaces (giving priority to critical empty spaces), 4. Interconnections of cell in order to create the appropriate number of logical functions depending on the number of FFs (only 1 function in case of no FF inserted).Then the whole circuit is routed (original circuit and added functions).\n\nThe aim of this procedure is to find the maximum occupation ratio possible that allows routing.The procedure described is then used iteratively, with a goal ratio of 100%, which is decremented until no routing violation occurs.\n\nOnce the ICs are fabricated, a test phase is required before they are deployed in the field.In addition to the conventional tests ensuring the proper operation of each IC, it is necessary to test the additional functions, to ensure that a HT was not inserted.To do so, input patterns are shifted in thanks to the input shift register, and the responses of all combinatorial functions are shifted out.\n\nOne has to notice that the shift-registers are using a separate clock than the original circuit.Firstly, it allows to switch of the additional functions once in the field in order to prevent unnecessary power consumption.Secondly, it allows relaxing the timing constraints of the additional functions, which will also help relaxing the constraints for routing these functions.\n\n\nB. Identification of critical empty spaces\n\nAs mentioned before, even with a filling method as the one we propose, being able to always achieve 100% occupation ratio is not possible given routing limited resources.We therefore propose to fill in priority so called \"critical empty spaces\" as follows.\n\n\"Critical empty spaces\" are the empty spaces that are close to signals with a large slack (i.e.time margin).The reason is that an attacker is likely to insert a HT in that kind of empty spaces in order take advantage of the large slack of these signals to insert a HT's trigger.These signals are indeed insensitive to HT insertions from a delay point of view i.e. the insertion of a HT will not result in any degradation in the timing performance of the original design and will be insensitive to HT detection techniques based on delay measurements [10].Therefore, these critical empty spaces will be considered as a priority during filling.\n\n\nC. Filling\n\nFirst of all, flips-flops that will be used to create shift-in and shift-out registers are inserted.The flip-flop being a very large cell, it is introduced first in order to use all the \"big empty spaces\".As will be seen in the experimental results section, due to the large size of flip-flops, the number of flipflops introduced is often not sufficient with respect to the number of combinatorial gates.Thus in this step, we insert as many flip-flops as possible.\n\nThen, left critical empty spaces are filled with combinatorial cells, from larger to smaller ones.Last, left empty spaces are filled the same way.The choice of the combinatorial cells to use is done according to each cell's a) width, b) number of inputs, and c) decoupling capacitance value.For an empty space of a given size, the choice is firstly restricted to the larger cells fitting into this empty space (in order to limit the number of introduced cells).Then, cells with a large number of inputs have priority (because it helps reduce the size of the functions as described afterwards).Last, cells with larger decoupling capacitance values have priority because they help to compensate the absence of filler or decoupling capacitance (DECAP) cells [26].For instance if we consider different cells with different parameters from Table I, the OR4 gate is the most suitable one for an empty space of 5um.Note that, cells with large fan-outs are presented in Table I.One can choose not to use such cells in order to prevent possible resizing attacks, or to use them (under the assumption that an attacker will not be able to perform such an attack).\n\nBesides, if an empty space can contain only an inverter, we choose to let it empty: this kind of empty space will not usable by an attacker.Furthermore, if we made the choice to insert an inverter and use it in the creation of the combinatorial functions, it would generate additional unnecessary contraints on the routing.\n\n\nD. Construction of the extra functions\n\nOnce added in the layout, the cells are connected in a tree structure to build up the functions, as shown in Fig. 2. The process iterates, from inputs down to outputs until a function with 1 output is created.In order to prevent routing congestion, the first cell of each function is chosen as close as possible to one flip-flop and other cells used to build the function under construction are selected from the first one's closer cells.\n\nIn order to prevent an attacker from replacing a function with a HT, a constraint is to consider: not create two identical functions.This would give an attacker the opportunity to replace one of the two functions (and connect together the two outputs) without this being visible during the test phase.\n\nBesides, as mentioned before, this method can face a lack of FFs inserted relative to the number of logical functions created.Given that the number of functions inputs is directly related to the number of FFs in the shift in register, and the number of functions to the number of FFs in the shift out register, the idea is to find the optimal function size (i.e.inputs number) i.e. the size that produces an optimal number between the number of inputs and outputs, resulting in the smallest number of FF possible.In practice, we iteratively run the global flow for several input numbers, observe the resulting number of functions and then choose the optimal one.\n\n\nI. EXPERIMENTAL RESULTS\n\nWe evaluated our method on several benchmarks.Experiments were conducted with a 65nm library and Synopsys tools for synthesis, placement and routing.Table II presents the results of layout filling in terms of: (1) initial occupation ratio (OR) and final OR reached (i.e. the densest OR without routing violation), (2) initial and final leakage power (note that since the extra testable functions are connected to a separate clock, they are off during normal operation and therefore do not increase dynamic power) and (3) initial and final data time arrival.To comprehend the filling of the circuits, the number of FFs and logical cells inserted is presented as well as the number of functions created (along with the number of inputs for each function) and the number of combinatorial cells that remain unconnected due to a lack of FFs.Last, to better evaluate the difficulty for an attacker after applying our method, the number of NAND gates that could be inserted after filling is presented.\n\nHigh occupancy rates (above 90%) can be achieved by our method.Besides, the final OR achieved is generally the largest from the minimum initial OR and the bigger the initial OR, the greater the risk of a lack of FFs.Leakage power is degraded as expected, in proportion to the number of added cells: the bigger the initial occupation ratio, the less the deterioration.Data arrival time is degraded or enhanced.It totally depends on the routing algorithm; no prediction can be made.The number of exploitable spaces remaining after filling may seem too large in some cases, however, this number is in most cases far smaller than the number of cells inserted.This shows that the method has removed a majority of opportunities an attacker A layout of the benchmark s35932 cipher is presented in Fig. 3 in which the circuit is placed with an OR of 75%.The cells in yellow/bold are the cells added by our method with a goal OR of 100%.\n\nTable III presents results in case of an initial OR too large to insert any FF.To test the limits of the method, the initial OR chosen is the maximum OR possible without routing violation.Our method can cope with such constraints, since it manages to insert logical cells and to create a logical function in all cases, even achieving 100% in 2 cases.Fig. 4 shows the interest of seeking for the best combination between the number of combinatorial functions and the number of inputs for each function i.e. the number of inputs that leads the least amount of nonconnected logical cells, depending on the possible number of FFs.In this figure, the number of remaining unconnected cells is presented, according to the number of inputs chosen for the combinatorial functions.These data correspond to the filling of the ARM4U benchmark, from 80% to 91%.36 FFs can be inserted.All numbers of functions inputs have been tested from 4 to 35, and only one solution allows to have no cells remaining not connected: 16 inputs.Thanks to this method, our method can be applied on circuits with an initial rate up to 85% (only 80% were reached in [15]).In this paper, we have presented a DfHT method that aims at creating a layout as dense as possible in order to prevent possible HT insertion at layout level by an attacker in an untrusted foundry.The method consists in filling empty spaces in a layout by functional cells instead of filler cells.These additional functions are testable in order to prevent an attacker from replacing them with a HT.Such a method can generate large constraints for the routing; we explained how to minimize these additional constraints.Experimental results show that very high occupancy rates can be achieved, which demonstrates the feasibility of the method.To avoid potential degradation of the critical path due to routing, a future work could be to develop an ad-hoc routing algorithm, in order to route the additional functions after the routing of the initial circuit, i.e. without modifying the initial routing.\n\nFigure 1 .\n1\nFigure 1.Block diagram of an IC with HT prevention\n\n\nFigure 2 .\n2\nFigure 2. Function formation\n\n\nFigure 3 .\n3\nFigure 3. Layout occupation (added cells in yellow/bold)\n\n\nFigure 4 .\n4\nFigure 4. Iterative analysis of the functions size II.CONCLUSION\n\n\nTABLE I\nI.CELL SELECTIONFunctionWidth (um)Input CountDECAPNAN3X384.630.67AND4X254.640.44AOI12X5530.61AOI21X35530.61OAI12X37530.65OAI21X37530.65OR4XX29540.51FF1FF1FF2FF3Level 1.........FFn\n\nTABLE II\nII.LAYOUT FILLING (1)BenchmarkInitial ORInitial leakage power (nW)Initial DAT (ns)Final ORFinal leakage power (nW)Final DAT (ns)FFs/cellsInputs/ FunctionsLeft-cells overNAND possibleAES75173.595.1891191.56 (+10%)5.22(+0.8%)61/103630/312728080173.955.1190185.13 (%6%)5.25 (+2.8%)27/60912/143123785173.595.1288175.6 (+1%)5.12 (-0.2%)6/1725/151202S132077514.310.899523.51 (+64%)0.6 (-32%)29/12519/10008013.420.919018.41 (+37)0.58 (-36%)13/805/89558513.420.929014.99 (+12)0.92 (+0%)7/392/5651S3593275118.141.1995175.24 (+48%)0.77 (-35%)277/97762/26013980117.911.1791160.8 (+36%)0.71 (-39%)131/50411/70038385117.151.1390145.69 (+24%)0.73 (-45%)112/21710/340552RSA7535.999.89345.35 (+26)9.84 (+0.3%)62/32817/230458035.929.829343.26 (+20%)9.63 (-2%)53/20946/70398535.869.729238.86 (+8%)9.9 (+1.8%)16/11410/6189RS2327518.281.99122.63 (+24%)1.84 (-4%)32/15727/50258018.291.99120.95 (+15%)1.83 (-4.7%)19/10215/40288518.262.18718.72 (+2)1.92 (-8.7%)4/173/11260ARM4U7541.499.719350.26 (+21%)10.79 (+11%)70/32863/60428041.489.869146.98 (+13%)10.77 (+9.3%)36/19116/200798541.459.89143.6 (+5%)10.52 (+7.4%)22/9713/8081\n\nTABLE III .\nIII\n(2)OUT FILLING(2)\nBenchmark Initial OR Final ORNumber of InputsAES93%94%19S1320799%100%8S3593299%100%30RSA94%95%9RS23295%96%9ARM4U96%97%10\n-1-4673-9039-2/16 $31.00 \u00a9 2016 IEEE DOI 10.1109/ISVLSI.2016.22\nACKNOWLEDGMENTThis project has been funded by the French Government (BPI-OSEO) under grant FUI#14 HOMERE (Hardware trOjans : Menaces et robustEsse des ciRcuits intEgr\u00e9s).\nDetecting malicious inclusions in secure hardware: challenges and solutions. X Wang, M Tehranipoor, J Plusquellic, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST'08). 2008\n\nCounterfeit integrated circuits: a rising threat in the global semicondictor supply chain. U Guin, K Huang, D Dimase, J M Carulli, M Tehranipoor, Y Makris, Proceedings of the IEEE. the IEEE2014102\n\nA survey of hardware trojan taxonomy and detection. M Tehranipoor, F Koushanfar, IEEE Design & Test of Computer. 272010\n\nHardware trojan attacks: threat analysis and countermeasures. S Bhunia, M S Hsiao, M Banga, S Narasimhan, Proceedings of the IEEE. the IEEE2014102\n\nRegaining trust in VLSI design: design-for-trust techniques. J Rajendran, O Sinanoglu, R Karri, Proceedings of the IEEE. the IEEE2014102\n\nTrojan detection using IC fingerprinting. D Agrawal, S Baktir, D Karakoyunlu, P Rohatgi, B Sunar, IEEE Symposium on Security and Privacy (SP'07). 2007\n\nHardware trojan detection using path delay fingerprint. Y Jin, Y Makris, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST'08). 2008\n\nTowards trojan-free trusted ICs: problem analysis and detection scheme. F Wolf, C Papachristou, S Bhunia, R S Chakraborty, Design, Automation and Test in Europe (DATE'08). 2008\n\nMERO: a statistical approach for hardware trojan detection. R S Chakraborty, F Wolff, S Paul, C Papachristou, S Bhunia, International Conference on Cryptographic Hardware and Embedded Systems (CHES'09). 2009\n\nNew testing procedure for finding insertion sites of stealthy hardware trojans. S Dupuis, P.-S Ba, M.-L Flottes, G Di Natale, B Rouzeyre, Design Automation & Test in Europe (DATE'15). 2015\n\nExciting FPGA cryptographic trojans using combinatorial testing. P Kitsos, D E Simos, J Torres-Jimenez, A G Voyiatzis, IEEE International Symposiul on Software Reliability Engineering (ISSRE'15). 2015\n\nBISA: built-in self-authentication for preventing hardware trojan insertion. K Xiao, M Tehranipoor, International symposium on Hardware-oriented security and trust (HOST'13). 2013\n\nHardware trojan prevention using layout-level design approach. P.-S Ba, P Manikandan, S Dupuis, M.-L Flottes, G Di Natale, B Rouzeyre, IEEE European Conference on Circuit Theory and Design. 2015\n\nOn-demand transparency for improving hardware trojan detectability. R S Chakraborty, S Paul, S Bhunia, IEEE International Workshop on Hardware-Oriented Secutity and Trust (HOST'08). 2008\n\nSecurity against hardware trojan attacks using key-based design obfuscation. R S Chakraborty, S Bhunia, Journal of Electronic Testing. 2762011\n\nA novel technique for improving hardware trojan detection and reducing trojan activation time. H Salmani, M Tehranipoor, J Plusquellic, IEEE Transactions on Very Large Scale Integration (VLSI) Systems. 201220\n\nA novel hardware logic encryption technique for thwarting illegal overproduction and hardware trojans. S Dupuis, P.-S Ba, G Di Natale, , M.-L Flottes, B Rouzeyre, IEEE International On-Line Testing Symposium (IOLTS'14). 2014\n\nVITAMIN: voltage inversion technique to ascertain malicious insertions in ICs. M Banga, M S Hsiao, IEEE International Workshop on Hardware-Oriented Security and Trust (HOST'09). 2009\n\nEfficient hardware trojan detection with differential cascade voltage switch logic. W Danesh, J Dofe, Q Yu, VLSI Desing, Special Issue on Advanced VLSI Architecture Design for Emerging Digital Systems. 2014\n\nTrojan immune circuits using duality. Y Alkabani, Euromocro Conference on Digital System Design (DSD'12). 2012\n\nLayout design method of semiconductor integrated circuit, and semiconductor integrated circuit, with high integration level of multiple level metalization. J Ichimiya, 2006Patent 7,076,756\n\nHardware trojan horses in cryptographic IP cores. S Bhasin, J.-L Danger, X T Ngo, S Guilley, Fault Diagnostic and Tolerance in Cryptography (FDTC'13). 2013\n", "annotations": {"author": "[{\"end\":96,\"start\":83},{\"end\":111,\"start\":97},{\"end\":135,\"start\":112},{\"end\":154,\"start\":136},{\"end\":170,\"start\":155},{\"end\":222,\"start\":171},{\"end\":242,\"start\":223}]", "publisher": null, "author_last_name": "[{\"end\":95,\"start\":93},{\"end\":110,\"start\":104},{\"end\":134,\"start\":123},{\"end\":153,\"start\":147},{\"end\":169,\"start\":161}]", "author_first_name": "[{\"end\":92,\"start\":83},{\"end\":103,\"start\":97},{\"end\":122,\"start\":112},{\"end\":143,\"start\":136},{\"end\":146,\"start\":144},{\"end\":160,\"start\":155}]", "author_affiliation": "[{\"end\":221,\"start\":172},{\"end\":241,\"start\":224}]", "title": "[{\"end\":80,\"start\":1},{\"end\":322,\"start\":243}]", "venue": null, "abstract": "[{\"end\":1170,\"start\":445}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1584,\"start\":1581},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1586,\"start\":1584},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1808,\"start\":1805},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2125,\"start\":2122},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2629,\"start\":2626},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2706,\"start\":2703},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2708,\"start\":2706},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2731,\"start\":2728},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2734,\"start\":2731},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2738,\"start\":2734},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2742,\"start\":2738},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2862,\"start\":2859},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2880,\"start\":2877},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":3429,\"start\":3426},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3640,\"start\":3637},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":3643,\"start\":3640},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3680,\"start\":3676},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4356,\"start\":4352},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4360,\"start\":4356},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4364,\"start\":4360},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4368,\"start\":4364},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4372,\"start\":4368},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4376,\"start\":4372},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":4380,\"start\":4376},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":4384,\"start\":4380},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4388,\"start\":4384},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4627,\"start\":4623},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":4912,\"start\":4908},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5196,\"start\":5192},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5418,\"start\":5414},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6020,\"start\":6016},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6383,\"start\":6379},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6916,\"start\":6912},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":7573,\"start\":7569},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":7937,\"start\":7933},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":8210,\"start\":8206},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":8373,\"start\":8369},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":8762,\"start\":8758},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":9583,\"start\":9579},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":9586,\"start\":9583},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":9660,\"start\":9656},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10232,\"start\":10228},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":10882,\"start\":10878},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10885,\"start\":10882},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":11139,\"start\":11135},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11142,\"start\":11139},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":12111,\"start\":12107},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":12148,\"start\":12144},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":16315,\"start\":16311},{\"end\":17643,\"start\":17639},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":22900,\"start\":22896},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":25388,\"start\":25385}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":23868,\"start\":23803},{\"attributes\":{\"id\":\"fig_2\"},\"end\":23912,\"start\":23869},{\"attributes\":{\"id\":\"fig_3\"},\"end\":23984,\"start\":23913},{\"attributes\":{\"id\":\"fig_4\"},\"end\":24064,\"start\":23985},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":24253,\"start\":24065},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":25367,\"start\":24254},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":25523,\"start\":25368}]", "paragraph": "[{\"end\":2126,\"start\":1186},{\"end\":2630,\"start\":2128},{\"end\":4118,\"start\":2632},{\"end\":4389,\"start\":4120},{\"end\":5397,\"start\":4391},{\"end\":6842,\"start\":5399},{\"end\":7502,\"start\":6844},{\"end\":7908,\"start\":7539},{\"end\":8163,\"start\":7910},{\"end\":8353,\"start\":8181},{\"end\":8735,\"start\":8355},{\"end\":9544,\"start\":8755},{\"end\":9636,\"start\":9568},{\"end\":10077,\"start\":9638},{\"end\":10549,\"start\":10079},{\"end\":11024,\"start\":10566},{\"end\":12430,\"start\":11026},{\"end\":13514,\"start\":12484},{\"end\":13772,\"start\":13516},{\"end\":13914,\"start\":13791},{\"end\":14448,\"start\":13916},{\"end\":14677,\"start\":14450},{\"end\":15079,\"start\":14679},{\"end\":15457,\"start\":15081},{\"end\":15760,\"start\":15504},{\"end\":16403,\"start\":15762},{\"end\":16882,\"start\":16418},{\"end\":18036,\"start\":16884},{\"end\":18361,\"start\":18038},{\"end\":18842,\"start\":18404},{\"end\":19145,\"start\":18844},{\"end\":19809,\"start\":19147},{\"end\":20831,\"start\":19837},{\"end\":21761,\"start\":20833},{\"end\":23802,\"start\":21763},{\"end\":23867,\"start\":23817},{\"end\":23911,\"start\":23883},{\"end\":23983,\"start\":23927},{\"end\":24063,\"start\":23999},{\"end\":25402,\"start\":25385}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":17726,\"start\":17725},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":17853,\"start\":17852},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":19994,\"start\":19992}]", "section_header": "[{\"end\":1184,\"start\":1172},{\"end\":7522,\"start\":7505},{\"end\":7537,\"start\":7525},{\"end\":8179,\"start\":8166},{\"end\":8753,\"start\":8738},{\"end\":9566,\"start\":9547},{\"end\":10564,\"start\":10552},{\"end\":12482,\"start\":12433},{\"end\":13789,\"start\":13775},{\"end\":15502,\"start\":15460},{\"end\":16416,\"start\":16406},{\"end\":18402,\"start\":18364},{\"end\":19835,\"start\":19812},{\"end\":23814,\"start\":23804},{\"end\":23880,\"start\":23870},{\"end\":23924,\"start\":23914},{\"end\":23996,\"start\":23986},{\"end\":24073,\"start\":24066},{\"end\":24263,\"start\":24255},{\"end\":25380,\"start\":25369}]", "table": "[{\"end\":24253,\"start\":24075},{\"end\":25367,\"start\":24266},{\"end\":25523,\"start\":25403}]", "figure_caption": "[{\"end\":23868,\"start\":23816},{\"end\":23912,\"start\":23882},{\"end\":23984,\"start\":23926},{\"end\":24064,\"start\":23998},{\"end\":25403,\"start\":25384}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":12490,\"start\":12489},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":18519,\"start\":18518},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21629,\"start\":21628},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":22119,\"start\":22118}]", "bib_author_first_name": "[{\"end\":25837,\"start\":25836},{\"end\":25845,\"start\":25844},{\"end\":25860,\"start\":25859},{\"end\":26051,\"start\":26050},{\"end\":26059,\"start\":26058},{\"end\":26068,\"start\":26067},{\"end\":26078,\"start\":26077},{\"end\":26080,\"start\":26079},{\"end\":26091,\"start\":26090},{\"end\":26106,\"start\":26105},{\"end\":26210,\"start\":26209},{\"end\":26225,\"start\":26224},{\"end\":26341,\"start\":26340},{\"end\":26351,\"start\":26350},{\"end\":26353,\"start\":26352},{\"end\":26362,\"start\":26361},{\"end\":26371,\"start\":26370},{\"end\":26488,\"start\":26487},{\"end\":26501,\"start\":26500},{\"end\":26514,\"start\":26513},{\"end\":26607,\"start\":26606},{\"end\":26618,\"start\":26617},{\"end\":26628,\"start\":26627},{\"end\":26643,\"start\":26642},{\"end\":26654,\"start\":26653},{\"end\":26773,\"start\":26772},{\"end\":26780,\"start\":26779},{\"end\":26947,\"start\":26946},{\"end\":26955,\"start\":26954},{\"end\":26971,\"start\":26970},{\"end\":26981,\"start\":26980},{\"end\":26983,\"start\":26982},{\"end\":27113,\"start\":27112},{\"end\":27115,\"start\":27114},{\"end\":27130,\"start\":27129},{\"end\":27139,\"start\":27138},{\"end\":27147,\"start\":27146},{\"end\":27163,\"start\":27162},{\"end\":27342,\"start\":27341},{\"end\":27355,\"start\":27351},{\"end\":27364,\"start\":27360},{\"end\":27375,\"start\":27374},{\"end\":27388,\"start\":27387},{\"end\":27517,\"start\":27516},{\"end\":27527,\"start\":27526},{\"end\":27529,\"start\":27528},{\"end\":27538,\"start\":27537},{\"end\":27556,\"start\":27555},{\"end\":27558,\"start\":27557},{\"end\":27731,\"start\":27730},{\"end\":27739,\"start\":27738},{\"end\":27901,\"start\":27897},{\"end\":27907,\"start\":27906},{\"end\":27921,\"start\":27920},{\"end\":27934,\"start\":27930},{\"end\":27945,\"start\":27944},{\"end\":27958,\"start\":27957},{\"end\":28099,\"start\":28098},{\"end\":28101,\"start\":28100},{\"end\":28116,\"start\":28115},{\"end\":28124,\"start\":28123},{\"end\":28296,\"start\":28295},{\"end\":28298,\"start\":28297},{\"end\":28313,\"start\":28312},{\"end\":28458,\"start\":28457},{\"end\":28469,\"start\":28468},{\"end\":28484,\"start\":28483},{\"end\":28676,\"start\":28675},{\"end\":28689,\"start\":28685},{\"end\":28695,\"start\":28694},{\"end\":28713,\"start\":28707},{\"end\":28724,\"start\":28723},{\"end\":28878,\"start\":28877},{\"end\":28887,\"start\":28886},{\"end\":28889,\"start\":28888},{\"end\":29067,\"start\":29066},{\"end\":29077,\"start\":29076},{\"end\":29085,\"start\":29084},{\"end\":29229,\"start\":29228},{\"end\":29459,\"start\":29458},{\"end\":29543,\"start\":29542},{\"end\":29556,\"start\":29552},{\"end\":29566,\"start\":29565},{\"end\":29568,\"start\":29567},{\"end\":29575,\"start\":29574}]", "bib_author_last_name": "[{\"end\":25842,\"start\":25838},{\"end\":25857,\"start\":25846},{\"end\":25872,\"start\":25861},{\"end\":26056,\"start\":26052},{\"end\":26065,\"start\":26060},{\"end\":26075,\"start\":26069},{\"end\":26088,\"start\":26081},{\"end\":26103,\"start\":26092},{\"end\":26113,\"start\":26107},{\"end\":26222,\"start\":26211},{\"end\":26236,\"start\":26226},{\"end\":26348,\"start\":26342},{\"end\":26359,\"start\":26354},{\"end\":26368,\"start\":26363},{\"end\":26382,\"start\":26372},{\"end\":26498,\"start\":26489},{\"end\":26511,\"start\":26502},{\"end\":26520,\"start\":26515},{\"end\":26615,\"start\":26608},{\"end\":26625,\"start\":26619},{\"end\":26640,\"start\":26629},{\"end\":26651,\"start\":26644},{\"end\":26660,\"start\":26655},{\"end\":26777,\"start\":26774},{\"end\":26787,\"start\":26781},{\"end\":26952,\"start\":26948},{\"end\":26968,\"start\":26956},{\"end\":26978,\"start\":26972},{\"end\":26995,\"start\":26984},{\"end\":27127,\"start\":27116},{\"end\":27136,\"start\":27131},{\"end\":27144,\"start\":27140},{\"end\":27160,\"start\":27148},{\"end\":27170,\"start\":27164},{\"end\":27349,\"start\":27343},{\"end\":27358,\"start\":27356},{\"end\":27372,\"start\":27365},{\"end\":27385,\"start\":27376},{\"end\":27397,\"start\":27389},{\"end\":27524,\"start\":27518},{\"end\":27535,\"start\":27530},{\"end\":27553,\"start\":27539},{\"end\":27568,\"start\":27559},{\"end\":27736,\"start\":27732},{\"end\":27751,\"start\":27740},{\"end\":27904,\"start\":27902},{\"end\":27918,\"start\":27908},{\"end\":27928,\"start\":27922},{\"end\":27942,\"start\":27935},{\"end\":27955,\"start\":27946},{\"end\":27967,\"start\":27959},{\"end\":28113,\"start\":28102},{\"end\":28121,\"start\":28117},{\"end\":28131,\"start\":28125},{\"end\":28310,\"start\":28299},{\"end\":28320,\"start\":28314},{\"end\":28466,\"start\":28459},{\"end\":28481,\"start\":28470},{\"end\":28496,\"start\":28485},{\"end\":28683,\"start\":28677},{\"end\":28692,\"start\":28690},{\"end\":28705,\"start\":28696},{\"end\":28721,\"start\":28714},{\"end\":28733,\"start\":28725},{\"end\":28884,\"start\":28879},{\"end\":28895,\"start\":28890},{\"end\":29074,\"start\":29068},{\"end\":29082,\"start\":29078},{\"end\":29088,\"start\":29086},{\"end\":29238,\"start\":29230},{\"end\":29468,\"start\":29460},{\"end\":29550,\"start\":29544},{\"end\":29563,\"start\":29557},{\"end\":29572,\"start\":29569},{\"end\":29583,\"start\":29576}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":10208709},\"end\":25957,\"start\":25759},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":15766845},\"end\":26155,\"start\":25959},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":206459491},\"end\":26276,\"start\":26157},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":207022595},\"end\":26424,\"start\":26278},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":14136632},\"end\":26562,\"start\":26426},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":11254435},\"end\":26714,\"start\":26564},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":324445},\"end\":26872,\"start\":26716},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":207168934},\"end\":27050,\"start\":26874},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":6622727},\"end\":27259,\"start\":27052},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":13981929},\"end\":27449,\"start\":27261},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":17670791},\"end\":27651,\"start\":27451},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":13915850},\"end\":27832,\"start\":27653},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":28638987},\"end\":28028,\"start\":27834},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":17452694},\"end\":28216,\"start\":28030},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":7997825},\"end\":28360,\"start\":28218},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":5242798},\"end\":28570,\"start\":28362},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":1944370},\"end\":28796,\"start\":28572},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":14075154},\"end\":28980,\"start\":28798},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":38627749},\"end\":29188,\"start\":28982},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":8968279},\"end\":29300,\"start\":29190},{\"attributes\":{\"id\":\"b20\"},\"end\":29490,\"start\":29302},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":1552040},\"end\":29647,\"start\":29492}]", "bib_title": "[{\"end\":25834,\"start\":25759},{\"end\":26048,\"start\":25959},{\"end\":26207,\"start\":26157},{\"end\":26338,\"start\":26278},{\"end\":26485,\"start\":26426},{\"end\":26604,\"start\":26564},{\"end\":26770,\"start\":26716},{\"end\":26944,\"start\":26874},{\"end\":27110,\"start\":27052},{\"end\":27339,\"start\":27261},{\"end\":27514,\"start\":27451},{\"end\":27728,\"start\":27653},{\"end\":27895,\"start\":27834},{\"end\":28096,\"start\":28030},{\"end\":28293,\"start\":28218},{\"end\":28455,\"start\":28362},{\"end\":28673,\"start\":28572},{\"end\":28875,\"start\":28798},{\"end\":29064,\"start\":28982},{\"end\":29226,\"start\":29190},{\"end\":29540,\"start\":29492}]", "bib_author": "[{\"end\":25844,\"start\":25836},{\"end\":25859,\"start\":25844},{\"end\":25874,\"start\":25859},{\"end\":26058,\"start\":26050},{\"end\":26067,\"start\":26058},{\"end\":26077,\"start\":26067},{\"end\":26090,\"start\":26077},{\"end\":26105,\"start\":26090},{\"end\":26115,\"start\":26105},{\"end\":26224,\"start\":26209},{\"end\":26238,\"start\":26224},{\"end\":26350,\"start\":26340},{\"end\":26361,\"start\":26350},{\"end\":26370,\"start\":26361},{\"end\":26384,\"start\":26370},{\"end\":26500,\"start\":26487},{\"end\":26513,\"start\":26500},{\"end\":26522,\"start\":26513},{\"end\":26617,\"start\":26606},{\"end\":26627,\"start\":26617},{\"end\":26642,\"start\":26627},{\"end\":26653,\"start\":26642},{\"end\":26662,\"start\":26653},{\"end\":26779,\"start\":26772},{\"end\":26789,\"start\":26779},{\"end\":26954,\"start\":26946},{\"end\":26970,\"start\":26954},{\"end\":26980,\"start\":26970},{\"end\":26997,\"start\":26980},{\"end\":27129,\"start\":27112},{\"end\":27138,\"start\":27129},{\"end\":27146,\"start\":27138},{\"end\":27162,\"start\":27146},{\"end\":27172,\"start\":27162},{\"end\":27351,\"start\":27341},{\"end\":27360,\"start\":27351},{\"end\":27374,\"start\":27360},{\"end\":27387,\"start\":27374},{\"end\":27399,\"start\":27387},{\"end\":27526,\"start\":27516},{\"end\":27537,\"start\":27526},{\"end\":27555,\"start\":27537},{\"end\":27570,\"start\":27555},{\"end\":27738,\"start\":27730},{\"end\":27753,\"start\":27738},{\"end\":27906,\"start\":27897},{\"end\":27920,\"start\":27906},{\"end\":27930,\"start\":27920},{\"end\":27944,\"start\":27930},{\"end\":27957,\"start\":27944},{\"end\":27969,\"start\":27957},{\"end\":28115,\"start\":28098},{\"end\":28123,\"start\":28115},{\"end\":28133,\"start\":28123},{\"end\":28312,\"start\":28295},{\"end\":28322,\"start\":28312},{\"end\":28468,\"start\":28457},{\"end\":28483,\"start\":28468},{\"end\":28498,\"start\":28483},{\"end\":28685,\"start\":28675},{\"end\":28694,\"start\":28685},{\"end\":28707,\"start\":28694},{\"end\":28723,\"start\":28707},{\"end\":28735,\"start\":28723},{\"end\":28886,\"start\":28877},{\"end\":28897,\"start\":28886},{\"end\":29076,\"start\":29066},{\"end\":29084,\"start\":29076},{\"end\":29090,\"start\":29084},{\"end\":29240,\"start\":29228},{\"end\":29470,\"start\":29458},{\"end\":29552,\"start\":29542},{\"end\":29565,\"start\":29552},{\"end\":29574,\"start\":29565},{\"end\":29585,\"start\":29574}]", "bib_venue": "[{\"end\":26148,\"start\":26140},{\"end\":26417,\"start\":26409},{\"end\":26555,\"start\":26547},{\"end\":25951,\"start\":25874},{\"end\":26138,\"start\":26115},{\"end\":26268,\"start\":26238},{\"end\":26407,\"start\":26384},{\"end\":26545,\"start\":26522},{\"end\":26708,\"start\":26662},{\"end\":26866,\"start\":26789},{\"end\":27044,\"start\":26997},{\"end\":27253,\"start\":27172},{\"end\":27443,\"start\":27399},{\"end\":27645,\"start\":27570},{\"end\":27826,\"start\":27753},{\"end\":28022,\"start\":27969},{\"end\":28210,\"start\":28133},{\"end\":28351,\"start\":28322},{\"end\":28562,\"start\":28498},{\"end\":28790,\"start\":28735},{\"end\":28974,\"start\":28897},{\"end\":29182,\"start\":29090},{\"end\":29294,\"start\":29240},{\"end\":29456,\"start\":29302},{\"end\":29641,\"start\":29585}]"}}}, "year": 2023, "month": 12, "day": 17}