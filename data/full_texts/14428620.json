{"id": 14428620, "updated": "2022-08-29 15:58:10.928", "metadata": {"title": "The webgraph framework I: compression techniques", "authors": "[{\"first\":\"P.\",\"last\":\"Boldi\",\"middle\":[]},{\"first\":\"S.\",\"last\":\"Vigna\",\"middle\":[]}]", "venue": "WWW '04", "journal": null, "publication_date": {"year": 2004, "month": null, "day": null}, "abstract": "Studying web graphs is often difficult due to their large size. Recently,several proposals have been published about various techniques that allow tostore a web graph in memory in a limited space, exploiting the inner redundancies of the web. The WebGraph framework is a suite of codes, algorithms and tools that aims at making it easy to manipulate large web graphs. This papers presents the compression techniques used in WebGraph, which are centred around referentiation and intervalisation (which in turn are dual to each other). WebGraph can compress the WebBase graph (118 Mnodes, 1 Glinks)in as little as 3.08 bits per link, and its transposed version in as littleas 2.89 bits per link.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "1994727615", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/www/BoldiV04", "doi": "10.1145/988672.988752"}}, "content": {"source": {"pdf_hash": "994cb27986bc8d09e33c1f98ed836e503871681b", "pdf_src": "MergedPDFExtraction", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "bd86b387e871ded2bb6c08f660d824250c837187", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/994cb27986bc8d09e33c1f98ed836e503871681b.txt", "contents": "\nIntroduction Codings Algorithmic techniques Conclusions The WebGraph Framework: Compression Techniques\n\n\nPaolo Boldi \nSebastiano Vigna \nPaolo Boldi \nSebastiano Vignadsi \n\nDSI\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\n\nUniversit\u00e0 di Milano\nItaly\n\nIntroduction Codings Algorithmic techniques Conclusions The WebGraph Framework: Compression Techniques\n\n\n\nThe offset vector tells us from where successors of a given node start. Implicitly, it contains the outdegree of the node. we must express explicitly the outdegree.\n\n\nIntroduction Codings Algorithmic techniques Conclusions\n\nVariable-length representation Variable-length representations are a basic technique in full-text indexing.\n\n\nIntroduction\n\nCodings Algorithmic techniques Conclusions \u03b3 coding\n\nThe \u03b3 coding of x \u2208 N + can be obtained by writing the index of the most significant bit of x in unary, followed by x (stripped of the MSB) in binary. Thus\nx = 1 + 2 log x =\u21d2 p(x) \u221d 1 2x 2 (Zipf) Introduction\n\nCodings Algorithmic techniques Conclusions\n\n\nSuccessors & locality\n\nSince many link are navigational, the URLs they point to share a large prefix. Thus, if we order lexicographically URLs, for many arcs x \u2192 y often |x \u2212 y | will be small. So, we represent the successors y 1 < y 2 < \u00b7 \u00b7 \u00b7 < y k using their gaps y 1 \u2212 x, y 2 \u2212 y 1 \u2212 1, . . . , y k \u2212 y k\u22121 \u2212 1 which are distributed as a Zipf with exponent \u2248 1.2. Commonly used: variable-length nibble coding, a list of 4-bit blocks whose MSB specifies whether the list has ended (it is redundant). WebGraph uses by default \u03b6 k , a new family of non-redundant codes with intended distribution close to a Zipfian with exponent < 1.6 (\u03b6 3 is the default choice). \n\n\nDifferential compression\n\nWebGraph pushes much farther this idea: we code use a list of copy blocks, which specify by inclusion/exclusion the sublists that must be alternatively copied or discarded. \n\n\nImplementation\n\nRandom access to successor lists is implemented lazily through a cascade of iterators.\n\nEach series of interval and each reference cause the creation of an iterator; the same happens for references.\n\n\nIntroduction Codings Algorithmic techniques Conclusions\n\n\nConclusions\n\nWebGraph combines new codes, new insights on the structure of the Web graph and new algorithmic techniques to achieve a very high compression ratio, while still retaining a good access speed (but it could be better).\n\nOur software is highly tunable: you can experiment with dozens of codes, algorithmic techniques and compression parameters, and there is a large unexplored space of combinations.\n\nA theoretically interesting question is how to combine optimally differential compression and intervalisation: we do not know whether is current greedy approach (first copy as much as you can, then intervalise) is necessarily the best one.\n\n\nPaolo Boldi, Sebastiano VignaDSI, Universit\u00e0 di Milano, ItalyThe WebGraph Framework:Compression TechniquesIntroduction \nCodings \nAlgorithmic techniques \nConclusions \n\nReferentiation: an example \n\nNode Outdegree \nSuccessors \n. . . \n. . . \n. . . \n15 \n11 \n13, 15, 16, 17, 18, 19, 23, 24, 203, 315, 1034 \n16 \n10 \n15, 16, 17, 22, 23, 24, 315, 316, 317, 3041 \n17 \n0 \n18 \n5 \n13, 15, 16, 17, 50 \n. . . \n. . . \n. . . \n\nNode Outd. \nRef. \nCopy list \nExtra nodes \n. . . \n. . . \n. . . \n. . . \n. . . \n15 \n11 \n0 \n13, 15, 16, 17, 18, 19, 23, 24, 203, 315, 1034 \n16 \n10 \n1 \n01110011010 22, 316, 317, 3041 \n17 \n0 \n18 \n5 \n3 \n11110000000 50 \n. . . \n. . . \n. . . \n. . . \n. . . \n\nPaolo Boldi, Sebastiano VignaDSI, Universit\u00e0 di Milano, Italy \nThe WebGraph Framework:Compression Techniques \n\nIntroduction \nCodings \nAlgorithmic techniques \nConclusions \n\n\nPaolo Boldi, Sebastiano VignaDSI, Universit\u00e0 di Milano, ItalyThe WebGraph Framework:Compression Techniques\nThe results of all iterators are then merged.The advantage of laziness is that we never have to build an actual list of successors in memory, so the overhead is limited to the number of actual reads, not to the number of successors lists that would be necessary to re-create a given one.Access speedAccess speed to a compressed graph is commonly measured in the time required to access a link (\u2248 300 ns for WebGraph).This quantity, however, is strongly dependent on the architecture (e.g., cache size), and, even more, on low-level optimisations (e.g., hard-coding of the first codewords of an instantaneaous code).To compare speeds reliably, we need public data, that anyone can access, and a common framework for the low-level operations.A first step is http://webgraph-data.dsi.unimi.it/. We provide freely available data to compare compression techniques.\nThe parameter R is essential for deciding the ratio compression/speed. W essentially decreases compression time only. The parameter R is essential for deciding the ratio compression/speed. W essentially decreases compression time only.\n", "annotations": {"author": "[{\"end\":118,\"start\":106},{\"end\":136,\"start\":119},{\"end\":149,\"start\":137},{\"end\":170,\"start\":150},{\"end\":203,\"start\":171},{\"end\":232,\"start\":204},{\"end\":261,\"start\":233},{\"end\":290,\"start\":262},{\"end\":319,\"start\":291},{\"end\":348,\"start\":320},{\"end\":377,\"start\":349},{\"end\":406,\"start\":378},{\"end\":435,\"start\":407},{\"end\":464,\"start\":436},{\"end\":493,\"start\":465}]", "publisher": null, "author_last_name": "[{\"end\":117,\"start\":112},{\"end\":135,\"start\":130},{\"end\":148,\"start\":143},{\"end\":169,\"start\":161}]", "author_first_name": "[{\"end\":111,\"start\":106},{\"end\":129,\"start\":119},{\"end\":142,\"start\":137},{\"end\":160,\"start\":150}]", "author_affiliation": "[{\"end\":202,\"start\":172},{\"end\":231,\"start\":205},{\"end\":260,\"start\":234},{\"end\":289,\"start\":263},{\"end\":318,\"start\":292},{\"end\":347,\"start\":321},{\"end\":376,\"start\":350},{\"end\":405,\"start\":379},{\"end\":434,\"start\":408},{\"end\":463,\"start\":437},{\"end\":492,\"start\":466}]", "title": "[{\"end\":103,\"start\":1},{\"end\":596,\"start\":494}]", "venue": null, "abstract": null, "bib_ref": null, "figure": "[{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":3884,\"start\":3052}]", "paragraph": "[{\"end\":764,\"start\":600},{\"end\":931,\"start\":824},{\"end\":999,\"start\":948},{\"end\":1156,\"start\":1001},{\"end\":1921,\"start\":1279},{\"end\":2123,\"start\":1950},{\"end\":2228,\"start\":2142},{\"end\":2340,\"start\":2230},{\"end\":2630,\"start\":2414},{\"end\":2810,\"start\":2632},{\"end\":3051,\"start\":2812}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":1209,\"start\":1157}]", "table_ref": null, "section_header": "[{\"end\":822,\"start\":767},{\"end\":946,\"start\":934},{\"end\":1253,\"start\":1211},{\"end\":1277,\"start\":1256},{\"end\":1948,\"start\":1924},{\"end\":2140,\"start\":2126},{\"end\":2398,\"start\":2343},{\"end\":2412,\"start\":2401}]", "table": "[{\"end\":3884,\"start\":3160}]", "figure_caption": "[{\"end\":3160,\"start\":3054}]", "figure_ref": null, "bib_author_first_name": null, "bib_author_last_name": null, "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":5087,\"start\":4852}]", "bib_title": null, "bib_author": null, "bib_venue": "[{\"end\":4968,\"start\":4852}]"}}}, "year": 2023, "month": 12, "day": 17}