{"id": 235614315, "updated": "2023-10-06 01:44:42.515", "metadata": {"title": "Federated Learning Based on Dynamic Regularization", "authors": "[{\"first\":\"Durmus\",\"last\":\"Acar\",\"middle\":[\"Alp\",\"Emre\"]},{\"first\":\"Yue\",\"last\":\"Zhao\",\"middle\":[]},{\"first\":\"Ramon\",\"last\":\"Navarro\",\"middle\":[\"Matas\"]},{\"first\":\"Matthew\",\"last\":\"Mattina\",\"middle\":[]},{\"first\":\"Paul\",\"last\":\"Whatmough\",\"middle\":[\"N.\"]},{\"first\":\"Venkatesh\",\"last\":\"Saligrama\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2021, "month": 11, "day": 8}, "abstract": "We propose a novel federated learning method for distributively training neural network models, where the server orchestrates cooperation between a subset of randomly chosen devices in each round. We view Federated Learning problem primarily from a communication perspective and allow more device level computations to save transmission costs. We point out a fundamental dilemma, in that the minima of the local-device level empirical loss are inconsistent with those of the global empirical loss. Different from recent prior works, that either attempt inexact minimization or utilize devices for parallelizing gradient computation, we propose a dynamic regularizer for each device at each round, so that in the limit the global and device solutions are aligned. We demonstrate both through empirical results on real and synthetic data as well as analytical results that our scheme leads to efficient training, in both convex and non-convex settings, while being fully agnostic to device heterogeneity and robust to large number of devices, partial participation and unbalanced data.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2111.04263", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2111-04263", "doi": null}}, "content": {"source": {"pdf_hash": "c0246309e164f55b9dc39ed088957c37ce455c52", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2111.04263v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "b01c957a7230d97e56fd2434fd64057bfa83e74a", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/c0246309e164f55b9dc39ed088957c37ce455c52.txt", "contents": "\nPublished as a conference paper at ICLR 2021 FEDERATED LEARNING BASED ON DYNAMIC REGULARIZATION\n\n\nDurmus Alp \nEmre Acar \nYue Zhao yue.zhao@arm.com \nRamon Matas Navarro \nMatthew Mattina matthew.mattina@arm.com \nPaul N Whatmough paul.whatmough@arm.com \nVenkatesh Saligrama \nPublished as a conference paper at ICLR 2021 FEDERATED LEARNING BASED ON DYNAMIC REGULARIZATION\n\nWe propose a novel federated learning method for distributively training neural network models, where the server orchestrates cooperation between a subset of randomly chosen devices in each round. We view Federated Learning problem primarily from a communication perspective and allow more device level computations to save transmission costs. We point out a fundamental dilemma, in that the minima of the local-device level empirical loss are inconsistent with those of the global empirical loss. Different from recent prior works, that either attempt inexact minimization or utilize devices for parallelizing gradient computation, we propose a dynamic regularizer for each device at each round, so that in the limit the global and device solutions are aligned. We demonstrate both through empirical results on real and synthetic data as well as analytical results that our scheme leads to efficient training, in both convex and non-convex settings, while being fully agnostic to device heterogeneity and robust to large number of devices, partial participation and unbalanced data.\n\nINTRODUCTION\n\nIn McMahan et al. (2017), the authors proposed federated learning (FL), a concept that leverages data spread across many devices, to learn classification tasks distributively without recourse to data sharing. The authors identified four principle characteristics of FL based on several use cases. First, the communication links between the server and devices are unreliable, and at any time, there may only be a small subset of devices that are active. Second, data is massively distributed, namely the number of devices are large, while amount of data per device is small. Third, device data is heterogeneous, in that data in different devices are sampled from different parts of the sample space. Finally, data is unbalanced, in that the amount of data per device is highly variable.\n\nThe basic FL problem can be cast as one of empirical minimization of a global loss objective, which is decomposable as a sum of device-level empirical loss objectives. The number of communication rounds, along with the amount of bits communicated per round, has emerged as a fundamental gold standard for FL problems. Many mobile and IoT devices are bandwidth constrained, and wireless transmission and reception is significantly more power hungry than computation (Halgamuge et al., 2009). As such schemes that reduce communication are warranted. While distributed SGD is a viable method in this context, it is nevertheless communication inefficient.\n\nA Fundamental Dilemma. Motivated by these ideas, recent work has proposed to push optimization burden onto the devices, in order to minimize amount of communications. Much of the work in this context, propose to optimize the local risk objective based on running SGD over mini-batched device data, analogous to what one would do in a centralized scenario. On the one hand, training models on local data that minimize local empirical loss appears to be meaningful, but yet, doing so, Dynamic Regularization. To overcome these issues, we revisit the FL problem, and view it primarily from a communication perspective, with the goal of minimizing communication, and as such allowing for significantly more processing and optimization at the device level, since communication is the main source of energy consumption (Yadav & Yadav, 2016;Latr\u00e9 et al., 2011). This approach, while increasing computation for devices, leads to substantial improvement in communication efficiency over existing state-of-the-art methods, uniformly across the four FL scenarios (unreliable links, massive distribution, substantial heterogeneity, and unbalanced data). Specifically, in each round, we dynamically modify the device objective with a penalty term so that, in the limit, when model parameters converge, they do so to stationary points of the global empirical loss. Concretely, we add linear and quadratic penalty terms, whose minima is consistent with the global stationary point. We then provide an analysis of our proposed FL algorithm and demonstrate convergence of the local device models to models that satisfy conditions for local minima of global empirical loss with a rate of O 1 T where T is number of rounds communicated. For convex smooth functions, with m devices, and P devices active per round, our convergence rate for average loss with balanced data scales as We perform experiments on both visual and language real-world datasets including MNIST, EMNIST, CIFAR-10, CIFAR-100 and Shakespeare. We tabulate performance studying cases that are reflective of FL scenarios, namely, for (i) varying device participation levels, (ii) massively distributed data, (iii) various levels of heterogeneity, as well as (iv) unbalanced local data settings. Our proposed algorithm, FedDyn, has similar overhead to competing approaches, but converges at a significantly faster rate. This results in a substantial reduction in communication compared to baseline approaches such as conventional FedAvg (McMahan et al., 2017), FedProx (Li et al., 2020) and SCAFFOLD (Karimireddy et al., 2019), for achieving target accuracy. Furthermore, our approach is simple to implement, requiring far less hyperparameter tuning compared to competing methods.\n\nContributions. We summarize our main results here.\n\n\u2022 We present, FedDyn, a novel dynamic regularization method for FL. Key to FedDyn is a new concept, where in each round the risk objective for each device is dynamically updated so as to ensure that the device optima is asymptotically consistent with stationary points of the global empirical loss, \u2022 We prove convergence results for FedDyn in both convex and non-convex settings, and obtain sharp results for communication rounds required for achieving target accuracy. Our results for convex case improves significantly over state-of-art prior works. FedDyn in theory is unaffected by heterogeneity, massively distributed data, and quality of communication links, \u2022 On benchmark examples FedDyn achieves significant communication savings over competing methods uniformly across various choices of device heterogeneity and device participation on massively distributed large-scale text and visual datasets.\n\nRelated Work. FL is a fast evolving topic, and we only describe closely related approaches here. Comprehensive field studies have appeared in Kairouz et al. (2019); Li et al. (2020). The general FL setup involves two types of updates, the server and device, and each of these updates are associated with minimizing some local loss function, which by itself could be updated dynamically over different rounds. At any round, there are methods that attempt to fully optimize or others that propose inexact optimization. We specifically focus on relevant works that address the four FL scenarios (massive distribution, heterogeneity, unreliable links, and unbalanced data) here.\n\nOne line of work proposes local SGD (Stich, 2019) based updates, wherein each participating device performs a single local SGD step. The server then averages received models. In contrast to local SGD, our method proposes to minimize a local penalized empirical loss.\n\nFedAvg (McMahan et al., 2017) is a generalization of local SGD, which proposes a larger number of local SGD steps per round. Still, FedAvg inexactly solves device side optimization. Identifying when to stop minimizing so that one gets a good accuracy-communication trade-off is based on tuning the number of epochs and the learning rate (McMahan et al., 2017;Li et al., 2020b). Despite the strong empirical performance of FedAvg in IID settings, performance degrades in non-IID scenarios (Zhao et al., 2018).\n\nSeveral modifications of FedAvg have been proposed to handle non-IID settings. These variants include using a decreasing learning rate (Li et al., 2020b); modifying device empirical loss dynamically (Li et al., 2020a); or modifying server side updates (Hsu et al., 2019;Reddi et al., 2020). Methods that use a decreasing learning rate or customized server side updates still rely on local SGD updates within devices. While these works do recognize the incompatibility of local and global stationary points, their proposed fix is based on inexact minimization. Additionally, in order to establish convergence for non-IID situations, these works impose additional \"bounded-non-IID\" conditions.\n\nFedProx (Li et al., 2020a) is related to our method. Like us they propose a dynamic regularizer, which is modified based on server supplied models. This regularizer penalizes updates that are far away from the server model. Nevertheless, the resulting regularizer does not result in aligning the global and local stationary points, and as such inexact minimization is warranted, and they do so by carefully choosing learning rates and epochs. Furthermore, tuning requires some knowledge of statistical heterogeneity.\n\nIn a similar vein, there are works that augment updates with extra device variables that are also transmitted along with the models (Karimireddy et al., 2019;Shamir et al., 2014). These works prove convergence guarantees through adding device-dependent regularizers. Nevertheless, they suffer additional communication costs and they are not extensively experimented with deep neural networks. Among them, SCAFFOLD (Karimireddy et al., 2019) is a closely related work even though it transmits extra variables and a more detailed comparison is given in Section 2.\n\nAnother line of distributed optimization methods (Kone\u010dn\u1ef3 et al., 2016;Makhdoumi & Ozdaglar, 2017;Shamir et al., 2014;Yuan & Ma, 2020;Pathak & Wainwright, 2020;Liang et al., 2019;Li et al., 2020c;Condat et al., 2020) could be considered in this setting. Moreover, there are works that extend analysis of SGD type methods to FL settings (Gorbunov et al., 2020;Khaled et al., 2020b;Li & Richt\u00e1rik, 2020). However, these algorithms are proposed for full device participation case which fails to satisfy one important aspect of FL. FedSVRG (Kone\u010dn\u1ef3 et al., 2016) and DANE (Shamir et al., 2014) need gradient information from all devices at each round and they are not directly applicable to partial FL settings. For example, FedDANE (Li et al., 2019) is a version of DANE that works in partial participation. However, FedDANE performs worse than FedAvg empirically with partial participation (Li et al., 2019). Similar to these works, FedPD (Zhang et al., 2020) method is proposed in distributed optimization with a different participation notion. FedPD activates either all devices or no devices per round which again fails to satisfy partial participation in FL.\n\nLastly, another set of works aims to decrease communication costs by compressing the transmitted models (Dutta et al., 2019;Mishchenko et al., 2019;Alistarh et al., 2017). They save communication costs through decreasing bit-rate of the transmission. These ideas are complementary to our work and they can be integrated to our proposed solution.\n\n\nMETHOD\n\nWe assume there is a cloud server which can transmit and receive messages from m client devices. Each device, k \u2208 [m] consists of N k training instances in the form of features, x \u2208 X and corresponding labels y \u2208 Y that are drawn IID from a device-indexed joint distribution, (x, y) \u223c P k .\n\nOur objective is to solve arg min\n\u03b8\u2208R d \uf8ee \uf8f0 (\u03b8) 1 m k\u2208[m] L k (\u03b8) \uf8f9 \uf8fb Algorithm 1: Federated Dynamic Regularizer -(FedDyn) Input: T, \u03b8 0 , \u03b1 > 0, \u2207L k (\u03b8 0 k ) = 0. for t = 1, 2, . . . T do Sample devices P t \u2286 [m]\nand transmit \u03b8 t\u22121 to each selected device, for each device k \u2208 P t , and in parallel do\nSet \u03b8 t k = argmin \u03b8 L k (\u03b8) \u2212 \u2207L k (\u03b8 t\u22121 k ), \u03b8 + \u03b1 2 \u03b8 \u2212 \u03b8 t\u22121 2 , Set \u2207L k (\u03b8 t k ) = \u2207L k (\u03b8 t\u22121 k ) \u2212 \u03b1 \u03b8 t k \u2212 \u03b8 t\u22121 , Transmit device model \u03b8 t\nk to server, end for for each device k \u2208 P t , and in parallel do\nSet \u03b8 t k = \u03b8 t\u22121 k , \u2207L k (\u03b8 t k ) = \u2207L k (\u03b8 t\u22121 k ), end for Set h t = h t\u22121 \u2212 \u03b1 1 m k\u2208Pt \u03b8 t k \u2212 \u03b8 t\u22121 , Set \u03b8 t = 1 |Pt| k\u2208Pt \u03b8 t k \u2212 1 \u03b1 h t end for where, L k (\u03b8) = E (x,y)\u223cD k [ k (\u03b8; (x, y))]\nis the empirical loss of the kth device, and \u03b8 are the parameters of our neural network, whose structure is assumed to be identical across the devices and the server. We denote by \u03b8 * a local minima of the global empirical loss function.\n\nFedDyn Method. Our proposed method, FedDyn, is displayed in Algorithm 1. In each round, t \u2208 [T ], a subset of devices P t \u2282 [m] are active, and the server transmits its current model, \u03b8 t\u22121 , to these devices. Each active device then optimizes a local empirical risk objective, which is the sum of its local empirical loss and a penalized risk function. The penalized risk, which is dynamically updated, is based on current local device model, and the received server model:\n\u03b8 t k = argmin \u03b8 R k (\u03b8; \u03b8 t\u22121 k , \u03b8 t\u22121 ) L k (\u03b8) \u2212 \u2207L k (\u03b8 t\u22121 k ), \u03b8 + \u03b1 2 \u03b8 \u2212 \u03b8 t\u22121 2 .(1)\nDevices compute their local gradient, \u2207L k \u03b8 t\u22121 k , recursively, by noting that the first order condition for local optima must satisfy,\n\u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 t\u22121 k ) + \u03b1(\u03b8 t k \u2212 \u03b8 t\u22121 ) = 0(2)\nStale devices do not update their models. Updated device models, \u03b8 t k , k \u2208 P t are then transmitted to server, which then updates its model to \u03b8 t as displayed in Algorithm 1.\n\nIntuitive Justification. To build intuition into our method, we first highlight a fundamental issue about the Federated Dynamic Regularizer setup. It is that stationary points for device losses, in general, do not conform to global losses. Indeed, a global stationary point, \u03b8 * must necessarily satisfy,\n\u2207 (\u03b8 t ) 1 m k\u2208[m] \u2207L k (\u03b8 * ) = k\u2208[m] E (x,y)\u223cD k \u2207 k (\u03b8 * ; (x, y)) = 0.(3)\nIn contrast a device's stationary point, \u03b8 * k satisfies, \u2207L k (\u03b8 * k ) = 0, and in general due to heterogeneity of data (P k = P j for k = j), the individual device-wise gradients are non-zero \u2207L k (\u03b8 * ) = 0. This means that the dual goals of (i) seeking model convergence to a consensus, namely, \u03b8 t k \u2192 \u03b8 t \u2192 \u03b8 * , and (ii) the fact that model updates are based on optimizing local empirical losses is inconsistent 2 .\n\nDynamic Regularization. Our proposed risk objective in Eq. 1 dynamically modifies local loss functions, so that, if in fact local models converge to a consensus, the consensus point is consistent with stationary point of the global loss. To see this, first note that if we initialize at a consensus point, namely, \u03b8 t\u22121 k = \u03b8 t\u22121 , we have, \u2207R(\u03b8, \u03b8 t\u22121 k , \u03b8 t\u22121 ) = 0 for \u03b8 = \u03b8 t\u22121 . Thus our choice can be 2 As pointed in related work prior works based on SGD implicitly account for the inconsistency by performing inexact minimization, and additional hyperparameter tuning. seen as modifying the device loss so that the stationary points of device risk is consistent with server model.\n\nKey Property of Algorithm 1. If local device models converge, they converge to the server model, and the convergence point is a stationary point of the global loss. To see this, observe from Eq 2 that if \u03b8 t k \u2192 \u03b8 \u221e k , it generally follows that, \u2207L k (\u03b8 t k ) \u2192 \u2207L k (\u03b8 \u221e k ), and as a consequence, we have \u03b8 t \u2192 \u03b8 \u221e k . In turn this implies that \u03b8 \u221e k \u2192 \u03b8 \u221e , i.e., is independent of k. Putting all of this together with our server update equations we have that \u03b8 t convergence implies h t \u2192 0. Now the server state h t k \u2207L k (\u03b8 t k ), and as such in the limit we are left with k \u2207L k (\u03b8 t k ) \u2192 k \u2207L k (\u03b8 \u221e ) = 0. This implies that we converge to a point that turns out to be a stationary point of the global risk.\n\n\nCONVERGENCE ANALYSIS OF FEDDYN.\n\nProperties outlined in the previous section, motivates our FedDyn convergence analysis of device and server models. We will present theoretical results for strongly convex, convex and non-convex functions. Theorem 1. Assuming a constant number of devices are selected uniformly at random in each round, |P t | = P , for a suitably chosen of \u03b1 > 0, Algorithm 1 satisfies,\n\n\u2022 \u00b5 strongly convex and L smooth {L k } m k=1 functions,\nE 1 R T \u22121 t=0 r t \u03b3 t \u2212 * = O \uf8eb \uf8ed 1 r T \uf8eb \uf8ed \u03b2 \u03b8 0 \u2212 \u03b8 * 2 + m P 1 \u03b2 \uf8eb \uf8ed 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \u2022 Convex and L smooth {L k } m k=1 functions, E 1 T T \u22121 t=0 \u03b3 t \u2212 * = O \uf8eb \uf8ed 1 T m P \uf8eb \uf8ed L \u03b8 0 \u2212 \u03b8 * 2 + 1 L 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \u2022 Nonconvex and L smooth {L k } m k=1 functions, E \u2207 (\u03b3 T ) 2 = O \uf8eb \uf8ed 1 T \uf8eb \uf8ed L m P (\u03b8 0 ) \u2212 * + L 2 1 m k\u2208[m] \u03b8 0 k \u2212 \u03b8 0 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 where \u03b3 t = 1 P k\u2208Pt \u03b8 t k , \u03b8 * =arg min \u03b8 (\u03b8), * = (\u03b8 * ) , r= 1 + \u00b5 \u03b1 , R= T \u22121\nt=0 r t \u03b2= max 5 m P \u00b5, 30L and \u03b3 T is a random variable that takes values {\u03b3 s } T \u22121 s=0 with equal probability.\n\nTheorem 1 gives rates for strongly convex, convex and nonconvex local losses. For strongly convex and smooth functions, in expectation, a weighted average of active device averages converge at a linear rate. For convex and smooth functions, in expectation, the global loss of active device averages, converges at a rate O 1 T m P . Following convention, this rate is for the empirical loss averaged across devices. As such this rate would hold with moderate data imbalance. In situations with significant imbalance, which scales with data size, these results would have to account for the variance in the amount of data/device. Furthermore, the m P factor might appear surprising, but note that our bounds hold under expectation, namely, the error reflects the average over all random choices of devices. Similarly, for nonconvex and smooth functions, in expectation, average of active device models converges to a stationary point at O 1 T m P rate. The expectation is taken over randomness in active device set at each round. Similar to known convergence theorems, the problem dependent constants are related to how good the algorithm is initialized. We refer to Appendix B for a detailed proof.\n\nFedDyn vs. SCAFFOLD (Karimireddy et al., 2019). While SCAFFOLD appears to be similar to our method, there are fundamental differences. Practically, SCAFFOLD communicates twice as many bits as FedDyn or Federated Dynamic Regularizer, transmitting back and forth, both a model and its gradient. The 2\u00d7 increase in bits can be substantial for many low-power IoT applications, since energy consumption for communication dominates computation. Conceptually, we attribute the increased bit-rate to algorithmic differences. At the device-level, our modified risk incorporates a linear term, \u2207L k (\u03b8 t k ) (which we can compute readily (Eq. 2)). Applying our perspective to SCAFFOLD, in full participation setting, we see SCAFFOLD as replacing our linear\nterm \u2207L k (\u03b8 t k ), \u03b8 with \u2207L k (\u03b8 t ) \u2212 1 m k\u2208[m] \u2207L k (\u03b8 t k ), \u03b8 . While \u2207L k (\u03b8 t )\ncan be locally computed, after \u03b8 t is received, the term 1 m k\u2208[m] \u2207L k (\u03b8 t k ) is unknown and must be transmitted by the server, leading to increased bit-rate. Note that this is unavoidable, since ignoring this term, leads to freezing device updates (optimizing L k (\u03b8) \u2212 \u2207L k (\u03b8 t ), \u03b8 \u2212 \u03b8 t + \u03b1 2 \u03b8 \u2212 \u03b8 t 2 results in \u03b8 = \u03b8 t ). This extra term is a surrogate for \u2207 (\u03b8 t ), which is unavailable. As such we believe that these differences are responsible for FedDyn's improved rate (in rounds) in theory as well as practice.\n\nFinally, apart from conceptual differences, there are also implementation differences. SCAFFOLD runs SGD, and adapts hyperparameter tuning for a given number of rounds to maximize accuracy. In contrast, our approach, based on exact minimization, is agnostic to specific implementation, and as such we utilize significantly less tuning.\n\n\nEXPERIMENTS\n\nOur goal in this section is to evaluate FedDyn against competing methods on benchmark datasets for various FL scenarios 3 . Our results will highlight trade-offs and benefits of our exact minimization relative to prior inexact minimization methods. To ensure a fair comparison, the usual SGD procedure is adapted for the FedDyn algorithm in the device update as in FedAvg rather than leveraging an off the shelf optimization solver. We provide a brief description of the datasets and the models used in the experiments. A detailed description of our setup can be found in Appendix A.1. Partial participation was handled by sampling devices at random in each round independent of previous rounds.\n\nDatasets. We used benchmark datasets with the same train/test splits as in previous works (McMahan et al., 2017;Li et al., 2020a) which are MNIST (LeCun et al., 1998), CIFAR-10, CIFAR-100 (Krizhevsky et al., 2009), a subset of EMNIST (Cohen et al., 2017) (EMNIST-L), Shakespeare (Shakespeare, 1994) as well as a synthetic dataset. The IID split is generated by randomly assigning datapoints to the devices. The Dirichlet distribution is used on the label ratios to ensure uneven label distributions among devices for non-IID splits as in Yurochkin et al. (2019). For example, in MNIST, 100 device experiments, each device has about 5 and 3 classes that consume 80% of local data at Dirichlet parameter settings of 0.6 and 0.3 respectively. To generate unbalanced data, we sample the number of datapoints from a lognormal distribution. Controlling the variance of lognormal distribution gives unbalanced data. For instance, in CIFAR-10, 100 device experiments, balanced and unbalanced data settings have standard deviation of device sample size of 0 and 0.3 respectively.\n\nModels. We use fully-connected neural network architectures for MNIST and EMNIST-L with 2 hidden layers. The number of neurons in the layers are 200 and 100; and the models achieve 98.4% and 95.0% test accuracy in MNIST and EMNIST-L respectively. The model used for MNIST is the same as used in McMahan et al. (2017). For CIFAR-10 and CIFAR-100, we use a CNN model, similar to McMahan et al. (2017), consisting of 2 convolutional layers with 64 5 \u00d7 5 filters followed by 2 fully connected layers with 394 and 192 neurons, and a softmax layer. The model achieves 85.2% and 55.3% test accuracy for CIFAR-10 and CIFAR-100 respectively. For the next character prediction task (Shakespeare), we use a stacked LSTM, similar to Li et al. (2020a). This architecture achieves a test accuracy of 50.8% and 51.2% in IID and non-IID settings respectively. Both IID and non-IID performances are reported since splits are randomly regenerated from the entire Shakespeare writing. Hence centralized data and the centralized model performance is different.\n\nIn passing, we note that while the accuracies reported are state-of-art for our chosen models, higher capacity models can achieve higher performance on these datasets. As such, our aim is to compare the relative performance of these models in FL using FedDyn and other strong baselines.\n\nComparison of Methods. We report the performance of FedDyn, SCAFFOLD, FedAvg and FedProx on synthetic and real datasets. We also experimented with distributed SGD, where devices in each round compute gradients on the server supplied model on local data, and communicate these gradients. Its performance was not competitive relative to other methods. Therefore, we do not tabulate it here. We cover synthetic data generation and its results in Appendix A.1.\n\nThe standard goal in FL is to minimize amount of bits transferred. For this reason, we adopt the number of models transmitted to achieve a target accuracy as our metric in our comparisons. This metric is different than comparing communication rounds since not all methods communicate the same amount of information per round. FedDyn, FedAvg and FedProx transmit/receive the same amount of models for a fixed number of rounds whereas SCAFFOLD costs twice due to transmission of states. We compare algorithms for two different accuracy levels which we pick them to be close to performance obtained by centralizing data. Along with transmission costs of each method, we report the communication savings of FedDyn compared to each baseline in parenthesis. For methods that could not achieve aimed accuracy within the communication constraint, we append transmission cost with + sign. We observe FedDyn results in communication savings compared to all baselines to reach a target accuracy. We test FedDyn under the four characteristic properties of FL which are partial participation, large number of devices, heterogeneous data, and unbalanced data.\n\nModerate vs. Large Number of Devices. FedDyn significantly outperforms competing methods in the practically relevant massively distributed scenario. We report the performance of FedDyn on CIFAR-10 and CIFAR-100 with moderate and large number of devices in Table 1, while keeping the participation level constant (10%) and the data amounts balanced. Specifically, the moderately distributed setting has 100 devices with 500 images per device. The massively distributed setting has 1000 devices with 50 images per device for CIFAR-10, as well as 500 devices with 100 images per device for CIFAR-100. In each distributed setting, the data is partitioned in both IID and non-IID (Dirichlet 0.3) fashion. FedDyn leads to substantial transmission reduction in each of the regimes.\n\nFirst, the communication saving in the massive setting is significantly larger relative to the moderate setting. Compared to SCAFFOLD, FedDyn leads to 4.8\u00d7 and 2.9\u00d7 gains respectively on CIFAR-10 IID setting. SCAFFOLD is not able to achieve 80% within 2000 rounds in the massive setting (shown in Figure 4a), thus actual saving is more than 4.8\u00d7. Similar trend is observed in the non-IID setting of CIFAR-10 and CIFAR-100. Second, all the methods require more communications to achieve a reasonable accuracy in the massive setting as the dataset is more decentralized. For instance, it takes FedDyn 637 rounds to achieve 84.5% with 100 devices, while it takes 840 rounds to achieve 80.0% with 1000 devices. Similar trend is observed for CIFAR-100 and other methods. FedDyn always achieves the target accuracy with fewer rounds and thus leads to significant saving. Third, a higher target accuracy may result in a greater saving. For instance, the saving relative to SCAFFOLD increases from 3\u00d7 to 4.8\u00d7 in the CIFAR-10 IID massive setting. We may attribute this to the fact that FedDyn aligns device functions to global loss and efficiently optimizes the problem.\n\nFull vs. Partial Participation Levels. FedDyn outperforms baseline methods across different device participation levels. We consider different device participation levels with 100 devices and balanced data in Table 2 where part of CIFAR-10 and CIFAR-100 results are omitted since they are reported in moderate number of devices section of Table 1. The Shakespeare non-IID results are separately shown, since it has a natural non-IID split which does not conform with the Dirichlet distribution. The communication gain, with respect to best baseline, increases with greater participation levels from 2.9\u00d7 to 9.4\u00d7; 4.0\u00d7 to 12.8\u00d7 and 4.2\u00d7 to 7.9\u00d7 for CIFAR-10 in different device distribution settings. We observe a similar performance increase in full participation for most of the datasets. This validates our hypothesis that FedDyn more efficiently incorporates information from all devices compared to other methods, and results in more savings in full participation. Similar to previous results, a greater target accuracy gives a greater savings in most of the settings. We also report results for 1% participation regime with different device distribution settings (See Table 5 in Appendix A.1).\n\nBalanced vs. Unbalanced Data. FedDyn is more robust to unbalanced data than competing methods. We fix number of devices (100) and participation level (10%) and consider effect of unbalanced data (Table 4 (Appendix A.1)). FedDyn achieves 4.3\u00d7 gains over the best competitor, SCAFFOLD to achieve the target accuracy. As before, gains increase with the target accuracy.\n\nIID vs. non-IID Device Distribution. FedDyn outperforms baseline methods across different device distribution levels. We consider heterogeneous device distributions in the context of varying device numbers, participation levels and balanced-unbalanced settings in Table 1, 2 and 4 (Appendix A.1) respectively. Device distributions become more non-IID as we go from IID, Dirichlet .6 to Dirichlet .3 splits which makes global optimization problem harder. We see a clear effect of this change in Table  2 for 10% participation level and in Table 4 for unbalanced setting. For instance, increasing non-IID level results in a greater communication saving such as from 2.9\u00d7, 4.0\u00d7 to 4.2\u00d7 in CIFAR-10 10% participation. Similar statement holds for MNIST, EMNIST-L and Shakespeare in Table 2 and for CIFAR-10 unbalanced setting in Table 4. We do not observe a significant difference in savings for full participation setting in Table 2.\n\nSummary. Overall, FedDyn consistently leads to substantial communication savings compared to baseline methods uniformly across various FL regimes of interest. We realize large gains in the practically relevant massively distributed data setting.\n\n\nCONCLUSION\n\nWe proposed FedDyn, a novel FL method for distributively training neural network models. FedDyn is based on exact minimization, wherein at each round, each participating device, dynamically updates its regularizer so that the optimal model for the regularized loss is in conformity with the global empirical loss. Our approach is different from prior works that attempt to parallelize gradient computation, and in doing so they trade-off target accuracy with communications, and necessitate inexact minimization. We investigate different characteristic FL settings to validate our method. We demonstrate both through empirical results on real and synthetic data as well as analytical results that our scheme leads to efficient training with convergence rate as O 1 T where T is number of rounds, in both convex and non-convex settings, and a linear rate in strongly convex setting, while being fully agnostic to device heterogeneity and robust to large number of devices, partial participation and unbalanced data. \n(x j , y j ) of device i are generated based on y j = arg max(\u03b8 * i x j + b * i ) where x j \u2208 R 30\u00d71 , y j \u2208 {1, 2, . . . 5}, \u03b8 * i \u2208 R 5\u00d730 , and b * i \u2208 R 5\u00d71 . (\u03b8 * i , b * i )\ntuple represents the optimal parameter set for device i and each element of these tuples are randomly\ndrawn from N (\u00b5 i , 1) where \u00b5 i \u223c N (0, \u03b3 1 ). The features of datapoints are modeled as (x j \u223c N (\u03bd i , \u03c3)) where \u03c3 is a diagonal covariance matrix with elements \u03c3 k,k = k \u22121.2 and each element of \u03bd i is drawn from N (\u03b2 i , 1) where \u03b2 i \u223c N (0, \u03b3 2 ).\nThe number of datapoints in device i follows a lognormal distribution with variance \u03b3 3 . In this generation procees, \u03b3 1 , \u03b3 2 and \u03b3 3 regulate the relation of the optimal models for each device, the distribution of the features for each device and the amount of datapoints per device respectively.\n\nWe simulate different settings by allowing only one type of heterogeneity at a time and disabling the randomness from the other two. For instance, if we want to disable type 1 heterogeneity, we draw one single set of optimal parameters (\u03b8 * , b * ) \u223c N (0, 1) and use it to generate datapoints for all devices. Similarly, \u03bd i is set to 0 to disable type 2 heterogeneity and \u03b3 3 is set to 0 to disable type 3 heterogeneity. We consider four settings in total, including type 1, 2, and 3 heterogeneous as well as a homogeneous setting. The number of devices is set to 20 and the number of datapoints per device is on average 200 in the generation process.\n\nModels. We test FedDyn, SCAFFOLD, FedAvg and FedProx using a multiclass logistic classification model with cross entropy loss. We keep batch size to be 10, weight decay to be 10 \u22125 .\n\nWe test learning rates in  Table 6 reports the number models transmitted relative to one round of FedAvg to achieve the target training loss for best hyperparameter selection in various settings with 10% device participation. As shown, FedDyn leads to communication savings in each of the settings in range 1.1\u00d7 to 7.6\u00d7.\n\n\nA.2 REAL DATA\n\nDatasets. MNIST, EMNIST-L, CIFAR-10 and CIFAR-100 are used for image classification tasks and Shakespeare dataset is used for a next character prediction task. The image size is (1 \u00d7 28 \u00d7 28) in MNIST and EMNIST; (3 \u00d7 32 \u00d7 32) in CIFAR-10 and CIFAR-100 with overall 10 classes in MNIST and CIFAR-10; 62 classes in EMNIST; and 100 classes in CIFAR-100. We choose the first 10 letters from the letter section of EMNIST (named it as EMNIST-L) similar to (Li et al., 2020a) work. Features in Shakespeare dataset consists of 80 characters and labels are the following characters. Overall, there are 80 different labels for datapoints.\n\nWe use the usual train and test splits for MNIST, EMNIST-L, CIFAR-10 and CIFAR-100. The number of training and test samples of the benchmark datasets are summarized in Table 3.\n\nTo generate IID splits, we randomly divide training datapoints and assign them to devices. For non-IID splits, we utilize the Dirichlet distribution as in (Yurochkin et al., 2019). Firstly, a vector of size equal to the number of classes are drawn using Dirichlet distribution for each device. These vectors correspond to class priors per devices. Then one label is sampled based on these vectors for each device and an image is sampled without replacement based on the label. This process is repeated until all datapoints are assigned to devices. The procedure allows the label ratios of each device to follow a Dirichlet distribution. The hyperparameter of Dirichlet distribution corresponds to statistical heterogeneity level in the device datapoints. Overall, for a 100 device experiment, each device has 600, 480, 500 and 500 datapoints in MNIST, EMNIST-L, CIFAR-10 and CIFAR-100 respectively. For these datasets, three different federated settings are generated including an IID and two non-IID Dirichlet settings with .6 and .3 priors. Figure 3 shows the heterogeneity levels for MNIST dataset in these different settings. The amount of most occurred class labels that consume 40%, 60% and 80% of device data are shown in the histogram plots. For example, every class label is equally represented in IID setting hence 4, 6 and 8 classes occupy 40%, 60%, and 80% of the local datapoints for each device. If we consider non-IID settings, we see 80% of local data belongs to mostly 4 or 5 different classes for Dirichlet .6; and 3 or 4 different classes for Dirichlet .3 settings.\n\nTo generate unbalanced data, we sample datapoint amounts from a lognormal distribution. Controlling the variance of lognormal distribution gives unbalanced data per devices. For instance, in CIFAR-10, balanced and unbalanced data settings have standard deviation of data amounts among devices as 0 and 0.3 respectively.\n\nLEAF (Caldas et al., 2018) is used to generate the Shakespeare dataset used in this work. The LEAF framework allows to generate IID as well as non-IID federated settings. The non-IID dataset is the natural split of Shakespeare where each device corresponds to a role and the local dataset contains this role's sentences. The IID dataset is generated by combining the sentences from all roles and randomly dividing them into devices. In this work, we consider 100 devices and restrict number of datapoints per device to 2000.\n\n\nModels.\n\nWe use fully connected neural network architectures for MNIST and EMNIST-L. Both models take input images as a vector of 784 dimensions followed by 2 hidden layers and a final softmax layer. The number of neurons in the hidden layers are 200 and 100 for MNIST and EMNIST-L respectively. These models achieve 98.4% and 95.0% test accuracy in MNIST and EMNIST-L if trained on datapoints from all devices. The model considered for MNIST is the same model used in original FedAvg work (McMahan et al., 2017).\n\nFor CIFAR-10 and CIFAR-100, we use a CNN consisting of two convolutional layers with 64 5 \u00d7 5 filters, two 2 \u00d7 2 max pooling layers, two fully connected layers with 394 and 192 neurons, and finally a softmax layer. The models achieve 85.2% and 55.3% test accuracy in CIFAR-10 and CIFAR-100 respectively. Our CNN model is similar to the used for CIFAR-10 in the original FedAvg work (McMahan et al., 2017), except that we don't use Batch Normalization layers.\n\nFor the next character prediction task (Shakespeare), we use an LSTM. The model converts an 80 character long input sequence to a 80 \u00d7 8 sequence using an embedding. This sequence is fed to a two layer LSTM with hidden size of 100 units. The output of stacked LSTM is passed to a softmax layer. Overall, this architecture achieves a test accuracy of 50.8% and 51.2% in IID and non-IID settings, respectively, if trained on data from all devices. We report both IID and non-IID performance here because the datasets are randomly regenerated out of the whole Shakespeare writing hence train and test split is different for both cases. This Neural Network model is the same model used in the original FedProx study (Li et al., 2020a).\n\nIn passing, we note here that, we are not after state of the art model performances for these datasets, our aim is to compare the performances of these models in federated setting using FedDyn and other baselines.\n\nHyperparameters. We consider different hyperparameter configurations for different setups and datasets. For all the experiments, we fix batch size as 50 for MNIST, CIFAR-10, CIFAR-100 and EMNIST-L datasets and as 100 for Shakespeare dataset.\n\nWe note here that \u00b5, \u03b1 and K hyperparameters are used only in FedProx, FedDyn and SCAFFOLD respectively. K is the equivalent of epoch for SCAFFOLD algorithm and we searched K values to have the same amount of local computation as in other methods. For example, if each device has 500 datapoints, batch size is 50 and epoch is 10, local devices apply 100 SGD steps which is equivalent to K being 100. For the partial participation, 100 devices, balanced data setup, the selected configuration for FedAvg is .1 learning rate and 10 epoch; for FedProx is .1 learning rate and .0001 \u00b5; for FedDyn is .1 learning rate, 50 epoch and .01 \u03b1; and for SCAFFOLD is .1 learning rate and 600 K for all IID and Dirichlet settings except that \u03b1 is chosen to be .03 for 10% IID setting. 0.998 learning rate decay per communication round is used and weight decay of 10 \u22124 is applied to prevent overfitting for all methods.\n\nFor the centralized model, we choose learning rate as .1, epoch as 150 and learning rate is halved in every 50 epochs.\n\nEMNIST-L. We used similar hyperparameters as in MNIST dataset. The configuration for FedAvg is .1 learning rate and 20 epoch; for FedProx is .1 learning rate and 10 \u22124 \u00b5; for FedDyn is .1 learning rate, 50 epoch and 0.005 \u03b1; and for SCAFFOLD is .1 learning rate and 500 K for all IID and Dirichlet full participation settings.\n\nThe selected configuration for FedAvg is .1 learning rate and 10 epoch; for FedProx is .1 learning rate and .0001 \u00b5; for FedDyn is .1 learning rate, 50 epoch; and for SCAFFOLD is .1 learning rate and 500 K for all IID and Dirichlet partial settings. \u03b1 is chosen to be .003 for 10% and 1% IID;\n\n.005 for 10% Dirichlet .6 and 1% Dirichlet .3 ; .001 for 1% Dirichlet .6 and .01 for 10% Dirichlet .3 settings. 0.998 learning rate decay per communication round is used and weight decay of 10 \u22124 is applied to prevent overfitting for all methods. Weight decay of 10 \u22124 is applied to prevent overfitting and no learning rate decay across communications rounds is used. The selected configuration for FedAvg is 1 learning rate and 5 epoch; for FedProx is 1 learning rate, 5 epoch and .0001 \u00b5; for FedDyn is 1 learning rate, 5 epoch and .009 \u03b1; and for SCAFFOLD is 1 learning rate and 100 K in IID and non IID settings.\n\nFor the partial participation, 100 devices, balanced data setup, we choose 1 learning rate and 5 epoch for FedAvg; 1 learning rate, 5 epoch and .0001 \u00b5 for FedProx; 1 learning rate and 100 K for SCAFFOLD; and 1 learning rate and 5 epoch for FedDyn in all cases. \u03b1 is .015 and .001 for 10% and 1% settings respectively. No learning rate decay is applied for 10% settings and a decay of .998 is applied for 1% settings. Weight decay of 10 \u22124 is applied to prevent overfitting. For the centralized model, we choose learning rate as 1, epoch as 150 and learning rate is halved in every 50 epochs.\n\nAdditionally, we performed gradient clipping to prevent overflow in weights for all methods. We found out that, this increases stability of algorithms.\n\nConvergence Plots. We give convergence plots of experiments. The convergence plots of moderate and large number of devices in different device distributions are shown in Figure 4 and 5 for CIFAR-10 and CIFAR-100 datasets. Similarly, convergence curves of different participation levels and distributions are plotted in Figure 6, 7, 8, 9 and 10 for all datasets. Finally, Figure 12 and 13 show convergence plots for balanced data and unbalance data in different device distributions.\n\nWe emphasize that convergence curves show accuracy achieved with respect to rounds communicated. However, the metric we want to minimize, the amount of information transmitted, is not the same as number of communication rounds. For instance, SCAFFOLD transmits two models including state of devices per communication round. This difference is accounted in the tables.\n\nWe observed that averaging all device models gives more stable convergence curves hence we report the performance of the average model from all devices in each communication round. We note that we do not modify the algorithms, this part is only for reporting purposes.\n\nAdditional to experiments stated, we test our algorithm with a more complex model. We consider ResNet18 (He et al., 2016) structure on CIFAR-10 IID, 100 devices, balanced data, 10% participation setting. Batch normalization layers have inherent statistics which can be problematic in FL. Therefore, we use group normalization (Wu & He, 2018) instead of Batch normalization in ResNet18. The convergence curves are shown in Figure 11. FedDyn still outperforms the baseline methods in a higher capacity model setup.\n\n\nA.3 \u03b1 SENSITIVITY ANALYSIS OF FEDDYN\n\n\u03b1 is an important parameter of FedDyn. Indeed, it is the only hyperparameter of the algorithm when devices have access to an optimization solver. In theory, \u03b1 balances two problem dependent constants as shown in Theorem 2, Theorem 3 and Theorem 4. Consequently, optimal value of \u03b1 depends on these constants. Since these constants are independent of T , the value of \u03b1 does not asymptotically affect convergence rate.\n\nTo test sensitivity, we consider CIFAR-10, IID, 100 devices, 10% participation setting. Figure 1a shows convergence plots for different \u03b1 configurations while keeping all other parameters constant in FedDyn. Figure 1b presents the best achieved test accuracy with respect to different \u03b1 values. We see that best test performance is obtained when \u03b1 = 10 \u22121 . We note that all configurations converge, but some of them converges to a better stationary points. This aligns with the theory because we guarantee convergence to a stationary point. \n\n\nA.4 COMPARISON TO A FULL PARTICIPATION METHOD\n\nRecently, FedSplit (Pathak & Wainwright, 2020) is introduced to target non IID data distributions among devices. The work simplifies FL setting by considering full device participation. It charac-terizes FedAvg convergence and shows that FedAvg should do only one step update per device in each round to achieve global minima if device losses are different. In such cases, FedAvg becomes decentralized SGD. After pointing out this inconsistency, FedSplit is given as a potential solution.\n\nIn this work, we aim to solve FL problem with four principle characteristic which are partial participation due to unreliable communication links, massive number of devices, heterogeneous device data and unbalanced data amounts per device. Partial participation is a critical property, because, it is inconceivable that we will not be in a situation where we have all devices participating in each round. However, FedSplit does not support partial participation.\n\nNevertheless, we adapt FedSplit to partial participation setting with the following changes. If a device is not active in the current round, its model z t+1 k = z t k and its intermediate state z\nt+ 1 2 k = z t\u22121+ 1 2 k\nare frozen. For the server model, we have two options. First option is to keep the server model as average of all device models, x t = 1 m k\u2208m z t k , which is named as FedSplit All. Second option is to have the server model as the average of only current round's active devices x t = 1 |Pt| k\u2208Pt z t k , which is named as FedSplit Act. In passing, we do not claim that these modifications are optimal.\n\nFor empirical evaluation, we consider CIFAR-10, 100 devices, 100% and 10% participation settings. Figure 2a and 2b show comparison between FedSplit and FedDyn for 100% and 10% participation levels respectively. FedSplit All and FedSplit Act are the same in full participation setting hence shown as one method. We observe that FedDyn performs better than FedSplit in both cases. We see that FedSplit All where the server model averages all device models is significantly underperforming than FedSplit Act where the server only averages active devices. This is due to the fact that the server model is too slow to change when all devices are averaged because most of the devices are the same across consecutive rounds. We further note that it might not be easy to get convergence theory of FedSplit in the partial participation setting.     Figure 3: MNIST-Histogram of device counts whose 40% (3a), 60% (3b), and 80% (3c) datapoints belong to k classes.  Figure 7: CIFAR-100-Convergence curves for participation fractions ranging from 100% to 10% to 1% in the IID, Dirichlet (.6) and Dirichlet (.3) settings with 100 devices and balanced data.     \nDefinition 1. L k is L smooth if \u2207L k (x) \u2212 \u2207L k (y) \u2264 L x \u2212 y \u2200x, y\nSmoothness implies the following quadratic bound,\nL k (y) \u2264 L k (x) + \u2207L k (x), y \u2212 x + L 2 y \u2212 x 2 \u2200x, y(4)\nIf {L k } m k=1 s are convex and L smooth we have 1 2Lm\nk\u2208[m] \u2207L k (x) \u2212 \u2207L k (x * ) 2 \u2264 (x) \u2212 (x * ) \u2200x (5) \u2212 \u2207L k (x), z \u2212 y \u2264 \u2212L k (z) + L k (y) + L 2 z \u2212 x 2 \u2200x, y, z(6)\nwhere (x) = 1 m m k=1 L k (x) and \u2207 (x * ) = 0. We state convergence as, Theorem 2. For convex and L smooth {L k } m k=1 functions and \u03b1 \u2265 25L, Algorithm 1 satisfies\nE 1 T T \u22121 t=0 \u03b3 t \u2212 (\u03b8 * ) \u2264 1 T \uf8eb \uf8ed 10\u03b1 \u03b8 0 \u2212 \u03b8 * 2 + 100 m P 1 \u03b1 \uf8eb \uf8ed 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 = O 1 T where \u03b3 t = 1 P k\u2208Pt \u03b8 t k , \u03b8 * = arg min \u03b8 (\u03b8).\nIf \u03b1 = 30L m P , we get the statement in Theorem 1. Throughout the proof, we utilize similar techniques as in SCAFFOLD (Karimireddy et al., 2019) convergence. We define a set of variables which are useful in the analysis. Algorithm 1 freezes \u03b8 k and its gradients if the device is not active.\nLet's define virtual {\u03b8 t k } variables as \u03b8 t k = arg min \u03b8 L k (\u03b8) \u2212 \u2207L k (\u03b8 t\u22121 k ), \u03b8 + \u03b1 2 \u03b8 \u2212 \u03b8 t\u22121 2 \u2200k \u2208 [m], t > 0(7)\nWe see that\u03b8\n1 \u03b1 (\u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k )) \u2200k \u2208 P t(8)\n\u03b8 t consists of active device average and gradient parts. Let's express active device average and its relation with the server model as,\n\u03b3 t = 1 P k\u2208Pt \u03b8 t k ; \u03b3 t = \u03b8 t + 1 \u03b1 h t(9)\nDue to linear update of \u2207L k , h state in the server becomes as h t = 1 m k\u2208[m] \u2207L k (\u03b8 t k ). Let's define some quantities that we would like to control.\nC t = 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 * ) 2 , t = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2\nC t tracks how well local gradients of device models approximate the gradient of optimal model. If models converge to \u03b8 * , C t will be 0. t keeps track of how much local models change compared to average of device models from previous round. Again, upon convergence t will be 0.\n\nAfter these definitions, Theorem 2 can be seen as a direct consequence of the following Lemma, Published as a conference paper at ICLR 2021\nLemma 1. For convex and L smooth {L k } m k=1 functions, if \u03b1 \u2265 25L, Algorithm 1 satisfies E \u03b3 t \u2212 \u03b8 * 2 + \u03baC t \u2264 E \u03b3 t\u22121 \u2212 \u03b8 * 2 + \u03baC t\u22121 \u2212 \u03ba 0 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) where \u03ba = 8 m P 1 \u03b1 L+\u03b1 \u03b1 2 \u221220L 2 , \u03ba 0 = 2 1 \u03b1 \u03b1 2 \u221220\u03b1L\u221240L 2 \u03b1 2 \u221220L 2\nLemma 1 can be telescoped in the following way,\n\u03ba 0 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 E \u03b3 t\u22121 \u2212 \u03b8 * 2 + \u03baC t\u22121 \u2212 E \u03b3 t \u2212 \u03b8 * 2 + \u03baC t \u03ba 0 T t=1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 E \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0 \u2212 E \u03b3 T \u2212 \u03b8 * 2 + \u03baC T\nIf \u03b1 \u2265 25L, \u03ba 0 and \u03ba become positive. By definition, we also have C t sequences as positive.\n\nEliminating negative terms on RHS gives,\n\u03ba 0 T t=1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 E \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0\nApplying Jensen on LHS gives,\nE 1 T T t=1 \u03b3 t\u22121 \u2212 (\u03b8 * ) \u2264 1 T 1 \u03ba 0 \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0 = O 1 T\nwhich proves the statement in Theorem 2.\n\nSimilar to fundamental gradient descent analysis, \u03b3 t \u2212\u03b8 * 2 is expressed as \u03b3 t \u2212\u03b3 t\u22121 +\u03b3 t\u22121 \u2212\u03b8 * 2 and expanded in the proof of Lemma 1. The resulting expression has (\u03b3 t \u2212 \u03b3 t\u22121 ) and \u03b3 t \u2212 \u03b3 t\u22121 2 terms. To tackle these extra terms, we state the following Lemmas and prove long ones at the end. Lemma 2. Algorithm 1 satisfies\nE \u03b3 t \u2212 \u03b3 t\u22121 = 1 \u03b1m k\u2208[m] E \u2212\u2207L k (\u03b8 t k )\nProof.\nE \u03b3 t \u2212 \u03b3 t\u22121 = E 1 P k\u2208Pt \u03b8 t k \u2212 \u03b8 t\u22121 \u2212 1 \u03b1 h t\u22121 = E 1 P k\u2208Pt \u03b8 t k \u2212 \u03b8 t\u22121 \u2212 1 \u03b1 h t\u22121 = E 1 \u03b1P k\u2208Pt \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 = E 1 \u03b1P k\u2208Pt \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 = E \uf8ee \uf8f0 1 \u03b1m k\u2208[m] \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 \uf8f9 \uf8fb = 1 \u03b1m k\u2208[m] E \u2212\u2207L k (\u03b8 t k )\nwhere first equation is from definition in Eq. 9. The following equations come from Eq. 8 and \u03b8 t k = \u03b8 t k if k \u2208 P t respectively. Fifth equation is due to taking expectation while conditioning on randomness before time t. If conditioned on randomness prior to t, every variable except P t is revealed and each device is selected with probability P m . Last one is due to definition of\nh t = 1 m k\u2208[m] \u2207L k (\u03b8 t k ).\nSimilarly, \u03b3 t \u2212 \u03b3 t\u22121 2 is bounded with the following, Lemma 3. Algorithm 1 satisfies\nE \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 t Proof. E \u03b3 t \u2212 \u03b3 t\u22121 2 =E 1 P k\u2208Pt \u03b8 t k \u2212 \u03b3 t\u22121 2 \u2264 1 P E k\u2208Pt \u03b8 t k \u2212 \u03b3 t\u22121 2 = 1 P E k\u2208Pt \u03b8 t k \u2212 \u03b3 t\u22121 2 = 1 P P m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2 = t\nwhere first equality comes from Eq. 9. The following inequality applies Jensen. Remaining relations are due to\u03b8 t k = \u03b8 t k if k \u2208 P t , taking expectation by conditioning on randomness before time t and definition of t .\n\nWe need to further bound excess t term arising in Lemma 3. We introduce two more Lemmas to handle this term. Lemma 4. For convex and L smooth {L k } m k=1 functions, Algorithm 1 satisfies\n1 \u2212 4L 2 1 \u03b1 2 t \u2264 8 1 \u03b1 2 C t\u22121 + 8L 1 \u03b1 2 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * )\nLemma 5. For convex and L smooth {L k } m k=1 functions, Algorithm 1 satisfies\nC t \u2264 1 \u2212 P m C t\u22121 + 2L 2 P m t + 4L P m E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) terms constitute LHS of the telescopic sum. Let's express \u03b3 t \u2212 \u03b8 * 2 term as, E \u03b3 t \u2212 \u03b8 * 2 =E \u03b3 t\u22121 \u2212 \u03b8 * + \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 + 2E \u03b3 t\u22121 \u2212 \u03b8 * , \u03b3 t \u2212 \u03b3 t\u22121 + E \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 + 2 \u03b1m k\u2208[m] E \u03b3 t\u22121 \u2212 \u03b8 * , \u2212\u2207L k (\u03b8 t k ) + E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264E \u03b3 t\u22121 \u2212 \u03b8 * 2 + 2 \u03b1m k\u2208[m] E L k (\u03b8 * ) \u2212 L k (\u03b3 t\u22121 ) + L 2 \u03b8 t k \u2212 \u03b3 t\u22121 2 + E \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 \u2212 2 \u03b1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) + L \u03b1 t + E \u03b3 t \u2212 \u03b3 t\u22121 2(10)\nwhere we first expand the square term and use Lemma 2. Following inequality is due to Eq. 6.\n\nLet's scale Lemma 4 and 5 with \u03b1 L+\u03b1 \u03b1 2 \u221220L 2 and 8 m P 1 \u03b1 L+\u03b1 \u03b1 2 \u221220L 2 respectively. We note that the coefficients are positive due to the condition on \u03b1. Summing Eq. 10, Lemma 3, scaled versions of Lemma 5 and 4 gives the statement in Lemma 1.\n\nWe give the omitted proofs here. Lemma 6. \u2200{v j } n j=1 \u2208 R d , triangular inequality satisfies \nE h t 2 \u2264 C t Proof. E h t 2 =E 1 m k\u2208[m] \u2207L k (\u03b8 t k ) 2 = E 1 m k\u2208[m] \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 * ) 2 = C t\nFirst equality is due to server update rule of h vector; second adds (\u2207 (\u03b8 * ) = 0); third applies Jensen Inq.; and last one is the definition of C t .\n\nProof of Lemma 4\nt = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2 = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b8 t\u22121 \u2212 1 \u03b1 h t\u22121 2 = 1 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 2 = 1 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 * ) + \u2207L k (\u03b8 * ) \u2212 \u2207L k (\u03b3 t\u22121 ) + \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 2 \u2264 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 * ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 E h t\u22121 2 \u2264 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 * ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 C t\u22121 \u2264 8 \u03b1 2 C t\u22121 + 4L 2 \u03b1 2 t + 8L\n\u03b1 2 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) where first and second come from Eq. 9 and 8. Following inequalities come from Lemma 6, 7, smoothness and Eq. 5. Rearranging terms gives the Lemma.\n\n\nProof of Lemma 5\nC t = 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 * ) 2 = 1 \u2212 P m 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 * ) 2 + P m 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b8 * ) 2 = 1 \u2212 P m C t\u22121 + P m 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) + \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m C t\u22121 + 2P m 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 2P m 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m C t\u22121 + 2L 2 P m t + 2P m 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m C t\u22121 + 2L 2 P m t + 4LP m E (\u03b3 t\u22121 ) \u2212 (\u03b8 * )\nwhere first equality comes from taking expectation with respect to P t ; second equality comes from definition of C t . Inequalities follow from Lemma 6, smoothness and Eq. 5 respectively.\n\n\nB.2 STRONGLY CONVEX ANALYSIS\n\nWe state convergence for \u00b5 strongly convex and L smooth {L k } m k=1 functions as, Theorem 3. For \u00b5 strongly convex and L smooth {L k } m k=1 functions and \u03b1 \u2265 max 5 m P \u00b5, 30L , Algorithm 1 satisfies\nE 1 R T \u22121 t=0 r t \u03b3 t \u2212 (\u03b8 * ) \u2264 1 r T \u22121 \uf8eb \uf8ed 20\u03b1 \u03b8 0 \u2212 \u03b8 * 2 + 400 m P 1 \u03b1 \uf8eb \uf8ed 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 where \u03b3 t = 1 P k\u2208Pt \u03b8 t k , r = 1 + \u00b5 \u03b1 , R = T \u22121 t=0 r t , \u03b8 * = arg min \u03b8 (\u03b8).\nIf \u03b1 = max 5 m P \u00b5, 30L we get the statement in Theorem 1. We will use the same {\u03b8 t k }, \u03b3 t , C t , t variables defined in Eq. 7,8,9. With these definitions in mind, Theorem 3 can be seen as a direct consequence of the following Lemma, Lemma 8. For \u00b5 strongly convex and L smooth {L k } m k=1 functions, if \u03b1 \u2265 max 5 m P \u00b5, 30L , Algorithm 1 satisfies\nr E \u03b3 t \u2212 \u03b8 * 2 + \u03baC t \u2264 E \u03b3 t\u22121 \u2212 \u03b8 * 2 + \u03baC t\u22121 \u2212 \u03ba 0 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * )\nwhere \u03ba = 8m(L+\u03b1) z , \u03ba 0 = 2\u03b1 3 P +2\u03b1 2 P \u00b5\u22122\u03b1 2 m\u00b5\u221240\u03b1 2 LP \u221280\u03b1L 2 P \u221240\u03b1LP \u00b5+8\u03b1Lm\u00b5+16L 2 m\u00b5\u221280L 2 P \u00b5 \u03b1z , z = \u03b1 3 P + \u03b1 2 P \u00b5 \u2212 \u03b1 2 m\u00b5 \u2212 20\u03b1L 2 P + 4L 2 m\u00b5 \u2212 20L 2 P \u00b5, r = 1 + \u00b5 \u03b1 .\n\nLet's multiply Lemma 8 with r t\u22121 and telescope as,\n\u03ba 0 r t\u22121 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 r t\u22121 E \u03b3 t\u22121 \u2212 \u03b8 * 2 + \u03baC t\u22121 \u2212 r t E \u03b3 t \u2212 \u03b8 * 2 + \u03baC t \u03ba 0 T t=1 r t\u22121 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 E \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0 \u2212 r T E \u03b3 T \u2212 \u03b8 * 2 + \u03baC T\nIf \u03b1 \u2265 max 5 m P \u00b5, 30L , \u03ba 0 and \u03ba become positive. Dividing both sides with R = T \u22121 t=0 r t and eliminating negative terms on RHS gives,\n\u03ba 0 1 R T t=1 r t\u22121 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) \u2264 1 R E \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0\nApplying Jensen on LHS gives,\nE 1 R T t=1 r t\u22121 \u03b3 t\u22121 \u2212 (\u03b8 * ) \u2264 1 R 1 \u03ba 0 \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0\nWe have 1 R = r\u22121 r T \u22121 \u2264 1 r T \u22121 . Combining two inequalities, we get,\nE 1 R T t=1 r t\u22121 \u03b3 t\u22121 \u2212 (\u03b8 * ) \u2264 1 r T \u22121 1 \u03ba 0 \u03b3 0 \u2212 \u03b8 * 2 + \u03baC 0\nwhich proves the statement in Theorem 3.\n\nThe proof of Lemma 8 is similar to the convex analysis. We generalize Eq. 6 to strongly convex functions for{L k } m k=1 s are \u00b5 strongly convex and L smooth as,\n\u2212 \u2207L k (x), z \u2212 y \u2264 \u2212L k (z) + L k (y) + L 2 z \u2212 x 2 \u2212 \u00b5 2 x \u2212 y 2 \u2200x, y, z(11)\nSince strongly convex functions are convex functions and we only change Eq. 6, we can directly use Lemma 2, 3, 4 and 5. Let's rewrite \u03b3 t \u2212 \u03b8 * 2 expression as,\nE \u03b3 t \u2212 \u03b8 * 2 =E \u03b3 t\u22121 \u2212 \u03b8 * + \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 + 2E \u03b3 t\u22121 \u2212 \u03b8 * , \u03b3 t \u2212 \u03b3 t\u22121 + E \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 + 2 \u03b1m k\u2208[m] E \u03b3 t\u22121 \u2212 \u03b8 * , \u2212\u2207L k (\u03b8 t k ) + E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 2 \u03b1m k\u2208[m] E L k (\u03b8 * ) \u2212 L k (\u03b3 t\u22121 ) + L 2 \u03b8 t k \u2212 \u03b3 t\u22121 2 \u2212 \u00b5 2 \u03b8 t k \u2212 \u03b8 * 2 + E \u03b3 t\u22121 \u2212 \u03b8 * 2 + E \u03b3 t \u2212 \u03b3 t\u22121 2 =E \u03b3 t\u22121 \u2212 \u03b8 * 2 \u2212 2 \u03b1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) + L \u03b1 t \u2212 \u00b5 \u03b1 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b8 * 2 + E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264E \u03b3 t\u22121 \u2212 \u03b8 * 2 \u2212 2 \u03b1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) + L \u03b1 t \u2212 \u00b5 \u03b1 E \u03b3 t \u2212 \u03b8 * 2 + E \u03b3 t \u2212 \u03b3 t\u22121 2(\n12) where we first expand the square term and use Lemma 2. Following inequalities use Eq. 11 and Lemma 9. Rearranging Eq. 12 gives,\n1 + \u00b5 \u03b1 E \u03b3 t \u2212 \u03b8 * 2 \u2264 E \u03b3 t\u22121 \u2212 \u03b8 * 2 \u2212 2 \u03b1 E (\u03b3 t\u22121 ) \u2212 (\u03b8 * ) + L \u03b1 t + E \u03b3 t \u2212 \u03b3 t\u22121 2(13)\nLet's define z = \u03b1 3 P + \u03b1 2 P \u00b5 \u2212 \u03b1 2 m\u00b5 \u2212 20\u03b1L 2 P + 4L 2 m\u00b5 \u2212 20L 2 P \u00b5. Let's scale Lemma 4 and 5 with \u03b1(L+\u03b1)(P \u03b1+P \u00b5\u2212m\u00b5) z and 8m(L+\u03b1)(\u03b1+\u00b5) \u03b1z respectively. We note that the coefficients are positive due to the condition on \u03b1. Summing Eq. 13, Lemma 3, scaled versions of Lemma 5 and 4 gives the statement in Lemma 8.\n\nWe give Lemma 9 and its proof here. Lemma 9. Algorithm 1 satisfies\n\u2212 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b8 * 2 \u2264 \u2212E \u03b3 t \u2212 \u03b8 * 2\nProof.\nE \u03b3 t \u2212 \u03b8 * 2 =E 1 P k\u2208Pt \u03b8 t k \u2212 \u03b8 * 2 \u2264 1 P E k\u2208Pt \u03b8 t k \u2212 \u03b8 * 2 = 1 P E k\u2208Pt \u03b8 t k \u2212 \u03b8 * 2 = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b8 * 2\nwhere first equality comes from Eq. 9. The following inequality applies Jensen. Remaining relations are due to\u03b8 t k = \u03b8 t k if k \u2208 P t and taking expectation by conditioning on randomness before time t. Rearranging the terms gives the statement in Lemma.\n\n\nB.3 NONCONVEX ANALYSIS\n\nWe state convergence for nonconvex L smooth {L k } m k=1 s as, Theorem 4. For nonconvex and L smooth {L k } m k=1 functions and \u03b1 \u2265 20L m P , Algorithm 1 satisfies\nE 1 T T t=1 \u2207 (\u03b3 t\u22121 ) 2 \u2264 1 T \uf8eb \uf8ed 3\u03b1 (\u03b8 0 ) \u2212 * + 30L 3 m P 1 \u03b1 \uf8eb \uf8ed 1 m k\u2208[m] E \u03b8 0 k \u2212 \u03b8 0 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 = O 1 T where \u03b3 t = 1 P k\u2208Pt \u03b8 t k , * = min \u03b8 (\u03b8).\nIf \u03b1 = 30L m P , we get the statement in Theorem 1. We will use {\u03b8 t k } and \u03b3 t variables as defined Eq. 7, 8, 9. Since we aim to find a stationary in the nonconvex case, let's define a new C t and keep t the same as,\nC t = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t 2 , t = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2\nSimilarly, C t tracks how well local models approximate the current active device average. Upon convergence C t and t will be 0.\n\nTheorem 4 can be seen as a direct consequence of the following Lemma,\nLemma 10. For L smooth {L k } m k=1 functions, if \u03b1 \u2265 20L m P , Algorithm 1 satisfies E (\u03b3 t ) + \u03baC t \u2264 E (\u03b3 t\u22121 ) + \u03baC t\u22121 \u2212 \u03ba 0 E \u2207 (\u03b3 t\u22121 ) 2 where \u03ba = 4L 3 P \u03b1+L \u03b1 2m\u2212P z , \u03ba 0 = 1 2\u03b1 \u03b1 2 P 2 \u22124\u03b1LP 2 \u221232L 2 m 2 \u221216L 2 P m\u221224L 2 P 2 z , z = \u03b1 2 P 2 \u2212 32L 2 m 2 + 16L 2 P m \u2212 20L 2 P 2 .\nLemma 10 can be telescoped as,\n\u03ba 0 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 E (\u03b3 t\u22121 ) \u2212 * + \u03baC t\u22121 \u2212 E (\u03b3 t ) \u2212 * + \u03baC t \u03ba 0 T t=1 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 E (\u03b3 0 ) \u2212 * + \u03baC 0 \u2212 E (\u03b3 T ) \u2212 * + \u03baC T\nIf \u03b1 \u2265 20L m P , we have \u03ba 0 and \u03ba as positive quantities. By definition, we also have C t sequences as positive. Eliminating negative terms on RHS and summing over time give,\nE 1 T T t=1 \u2207 (\u03b3 t\u22121 ) 2 \u2264 1 T 1 \u03ba 0 \uf8eb \uf8ed (\u03b8 0 ) \u2212 * + \u03ba \uf8eb \uf8ed 1 m k\u2208[m] E \u03b8 0 k \u2212 \u03b8 0 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8\nwhich proves the statement in Theorem 2.\n\nThe proof of Lemma 10 builds on Eq. 4 where we upper bound (\u03b3 t ) with (\u03b3 t\u22121 ). Eq. 4 gives (\u03b3 t \u2212 \u03b3 t\u22121 ) and \u2207 (\u03b3 t\u22121 ) on RHS. We state a set of Lemmas to tackle these terms. We note here that Lemma 2 and 3 holds since t is the same as in convex case.\n\nTo bound excess t term, we introduce two more Lemmas as Lemma 11. For L smooth {L k } m k=1 functions, Algorithm 1 satisfies\n1 \u2212 4L 2 1 \u03b1 2 t \u2264 8L 2 1 \u03b1 2 C t\u22121 + 4 1 \u03b1 2 E \u2207 (\u03b3 t\u22121 ) 2 Lemma 12. For L smooth {L k } m k=1 functions, Algorithm 1 satisfies C t \u2264 2 m \u2212 P 2m \u2212 P C t\u22121 + 2 P 2m \u2212 P t + 2 m P E \u03b3 t \u2212 \u03b3 t\u22121 2\nUsing Eq. 4 we get,\nE (\u03b3 t ) \u2212 E (\u03b3 t\u22121 ) \u2212 L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 E \u2207 (\u03b3 t\u22121 ), \u03b3 t \u2212 \u03b3 t\u22121 = 1 \u03b1 E \uf8ee \uf8f0 \u2207 (\u03b3 t\u22121 ), 1 m k\u2208[m] \u2212\u2207L k (\u03b8 t k ) \uf8f9 \uf8fb \u2264 1 2\u03b1 E 1 m k\u2208[m] \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \u2212 1 2\u03b1 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 1 2\u03b1 1 m k\u2208[m] E \u2207L k (\u03b8 t k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \u2212 1 2\u03b1 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 L 2 2\u03b1 t \u2212 1 2\u03b1 E \u2207 (\u03b3 t\u22121 ) 2(14)\nwhere first equality uses Lemma 2. The following inequalities are due to a, b \u2264 1 2 b+a 2 \u2212 1 2 a 2 , Jensen Inq. and smoothness.\n\nLet's define z = \u03b1 2 P 2 \u2212 32L 2 m 2 + 16L 2 P m \u2212 20L 2 P 2 and scale Lemma 12, 3 and 11 with z 0 = 4L 3 P \u03b1+L \u03b1 2m\u2212P z , z 1 = L 2 + z 0 2m P , and z 2 = LP 2 \u03b1 2 L+\u03b1 z respectively. We note that the coefficients are positive due to the condition on \u03b1. Summing Eq. 14, scaled versions of Lemma 3, 11 and 12 gives the statement in Lemma 10.\n\nLastly, we note that the convergence analysis is given with respect to L2 norm in the gradients. L2 norm arises in the analysis because Eq. 4 has L2 norm due to our definition of smoothness. Furthermore, the analysis can be extended to different norms. To do so, smoothness needs to be defined with respect to primal and dual norms as in Eq. 3 in Nesterov et al. (2020).\n\nWe give the omitted proofs here.\n\n\nProof of Lemma 11\nt = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2 = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b8 t\u22121 \u2212 1 \u03b1 h t\u22121 2 = 1 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k ) \u2212 h t\u22121 2 = 1 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b3 t\u22121 ) + \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 t k ) \u2212 \u2207 (\u03b3 t\u22121 ) + \u2207 (\u03b3 t\u22121 ) \u2212 h t\u22121 2 \u2264 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 t k ) 2 + 4 \u03b1 2 E \u2207 (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 E \u2207 (\u03b3 t\u22121 ) \u2212 h t\u22121 2 \u2264 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 t k ) 2 + 4 \u03b1 2 E \u2207 (\u03b3 t\u22121 ) 2 + 4 \u03b1 2 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 t\u22121 k ) 2 \u2264 8L 2 \u03b1 2 C t\u22121 + 4L 2 \u03b1 2 t + 4 \u03b1 2 E \u2207 (\u03b3 t\u22121 ) 2\nwhere first, second and third come from definition of t , Eq. 9 and 8. The following inequalities are due to Lemma 6, Jensen Inq. and smoothness. Rearranging terms gives the Lemma.\n\n\nProof of Lemma 12\nC t = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t 2 = 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 + \u03b3 t\u22121 \u2212 \u03b3 t 2 \u2264 1 + P 2m \u2212 P 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2 + 1 + 2m \u2212 P P 1 m k\u2208[m] E \u03b3 t \u2212 \u03b3 t\u22121 2 = P m 1 + P 2m \u2212 P 1 m k\u2208[m] E \u03b8 t k \u2212 \u03b3 t\u22121 2 + 1 \u2212 P m 1 + P 2m \u2212 P 1 m k\u2208[m]\nE \u03b8 t\u22121 k \u2212 \u03b3 t\u22121 2 + 1 + 2m \u2212 P P E \u03b3 t \u2212 \u03b3 t\u22121 2 = P m 1 + P 2m \u2212 P t + 1 \u2212 P m 1 + P 2m \u2212 P C t\u22121 + 1 + 2m \u2212 P P E \u03b3 t \u2212 \u03b3 t\u22121 2\n\n\nC.2 FEDDYNONEGD CONVERGENCE RATE\n\nFor the sake of completeness, we state convergence results for FedDynOneGD as, Theorem 5. Assuming a constant number of devices are selected uniformly at random in each round, |P t | = P , for a suitably chosen of \u03b1 > 0, FedDynOneGD, Algorithm 2 satisfies,\n\n\u2022 \u00b5 strongly convex and L smooth {L k } m k=1 functions,\nE 1 R T \u22121 t=0 r t \u03b3 t \u2212 * = O \uf8eb \uf8ed 1 r T \uf8eb \uf8ed \u03b2 \u03b8 0 \u2212 \u03b8 * 2 + m P 1 \u03b2 \uf8eb \uf8ed 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \u2022 Convex and L smooth {L k } m k=1 functions, E 1 T T \u22121 t=0 \u03b3 t \u2212 * = O \uf8eb \uf8ed 1 T m P \uf8eb \uf8ed L \u03b8 0 \u2212 \u03b8 * 2 + 1 L 1 m k\u2208[m] \u2207L k (\u03b8 * ) 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 \u2022 Nonconvex and L smooth {L k } m k=1 functions, E \u2207 (\u03b3 T ) 2 = O \uf8eb \uf8ed 1 T \uf8eb \uf8ed L m P (\u03b8 0 ) \u2212 * + L 2 1 m k\u2208[m] \u03b8 0 k \u2212 \u03b8 0 2 \uf8f6 \uf8f8 \uf8f6 \uf8f8 where \u03b3 t = 1 P k\u2208Pt \u03b8 t k , \u03b8 * =arg min \u03b8 (\u03b8), * = (\u03b8 * ) , r= 1 + \u00b5 3\u03b1 , R= 3\u03b1 E \u03b3 t \u2212\u03b8 * 2 + L+\u00b5 \u03b1 3 A t\u22121 + 1+ \u00b5 \u03b1 t(17)\nWe add scaled versions of Lemma 14 and 15 to Eq. 17 to get telescopic terms. Firstly, we assume \u03b1 \u2265 max 50 m P \u00b5, 50L . Then, we multiply Lemma 14 and 15 with 1+ \u00b5 \u03b1 and (1+ \u00b5 3\u03b1 ) L+\u00b5\n\u03b1 3 + 8 \u03b1 2 + 4L 2 \u03b1 4 (1+ \u00b5 \u03b1 ) P m 1\u2212 2L 2 \u03b1 2 (1+ \u00b5 3\u03b1 )\u2212 \u00b5 3\u03b1\nrespectively. Due to the assumption on \u03b1, the multiplication coefficients are positive. If we add the scaled versions of lemmas, add it to Eq. 17 and scale both sides with \u03b1, we get,\nE (\u03b3 t\u22121 )\u2212 (\u03b8 * ) \u2264 \u03b1E \u03b3 t\u22121 \u2212\u03b8 * 2 +\u03baA t\u22121 \u2212 1+ \u00b5 3\u03b1 \u03b1E \u03b3 t \u2212 \u03b8 * 2 +\u03baA t\nwhere \u03ba \u2264 10 m P 1 \u03b1 . If we multiply both sides with 1 + \u00b5 3\u03b1 t\u22121 and average over time, we get telescoping terms on RHS. Bounding telescoping terms with the initial conditions and upper bounding \u03ba give,\n1 T T t=1 1 + \u00b5 3\u03b1 t\u22121 E (\u03b3 t\u22121 )\u2212 (\u03b8 * ) \u2264 1 T \u03b1E \u03b3 0 \u2212 \u03b8 * 2 +10 m P 1 \u03b1 A 0(18)\nDividing both sides with T t=1 1 + \u00b5 3\u03b1 t\u22121 and using Jensen Inq. on LHS give the linear convergence rate in Theorem 5.\nA t = 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b8 * ) 2 = 1 \u2212 P m 1 m k\u2208[m] E h t\u22121 k \u2212 \u2207L k (\u03b8 * ) 2 + P m 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 = 1 \u2212 P m A t\u22121 + P m 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b3 t\u22121 ) + \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m A t\u22121 + 2P m 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 2P m 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m + P m 2L 2 \u03b1 2 A t\u22121 + 2P m 1 m k\u2208[m] E \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b8 * ) 2 \u2264 1 \u2212 P m + P m 2L 2 \u03b1 2 A t\u22121 + 4LP m E (\u03b3 t\u22121 ) \u2212 (\u03b8 * )\nwhere we first take expectation with respect to P t , then use Lemma 6, smoothness, Lemma 18 and Eq. 5.\n\n\nProof of Lemma 16\nE \u03b3 t \u2212 \u03b8 * 2 = E \u03b3 t \u2212 \u03b3 t\u22121 + \u03b3 t\u22121 \u2212 \u03b8 t\u22121 + \u03b8 t\u22121 \u2212 \u03b8 * 2 \u2264 3E \u03b3 t \u2212 \u03b3 t\u22121 2 + 3E \u03b3 t\u22121 \u2212 \u03b8 t\u22121 2 + 3E \u03b8 t\u22121 \u2212 \u03b8 * 2 \u2264 3E \u03b3 t \u2212 \u03b3 t\u22121 2 + 3 \u03b1 2 E h t\u22121 2 + 3E \u03b8 t\u22121 \u2212 \u03b8 * 2 \u2264 3E \u03b3 t \u2212 \u03b3 t\u22121 2 + 3 \u03b1 2 A t\u22121 + 3E \u03b8 t\u22121 \u2212 \u03b8 * 2\nwhere we use Jensen Inq, Eq. 9 and Lemma 17. Rearranging the terms gives the statement.\n\n\nC.2.2 CONVEX ANALYSIS\n\nWe follow a similar analysis as in Section C.2.1. By setting \u00b5 = 0, we can rewrite Eq. 18 for convex and smooth functions as,\n1 T T t=1 E (\u03b3 t\u22121 )\u2212 (\u03b8 * ) \u2264 1 T \u03b1E \u03b3 0 \u2212 \u03b8 * 2 +10 m P 1 \u03b1 A 0\nApplying Jensen on RHS and setting \u03b1 = 50L m P gives the rate in Theorem 5.\n\n\nC.2.3 NONCONVEX ANALYSIS\n\nWe need to refine Eq. 14 and 15 for nonconvex functions. We extend these lemmas as, We continue with the use quadratic bound of smoothness, Eq. 4, as,\nE[ (\u03b3 t )] \u2212 E[ (\u03b3 t\u22121 )] \u2264 E \u2207 (\u03b3 t\u22121 ), \u03b3 t \u2212 \u03b3 t\u22121 + L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 = 1 \u03b1 E \uf8ee \uf8f0 \u2207 (\u03b3 t\u22121 ), 1 m k\u2208[m] \u2212\u2207L k (\u03b8 t\u22121 ) \uf8f9 \uf8fb + L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 1 2\u03b1 E 1 m k\u2208[m] \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \u2212 1 2\u03b1 E \u2207 (\u03b3 t\u22121 ) 2 + L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 1 2\u03b1 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \u2212 1 2\u03b1 E \u2207 (\u03b3 t\u22121 ) 2 + L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 L 2 \u03b1 3 B t\u22121 \u2212 1 2\u03b1 \u2212 L 2 \u03b1 3 E \u2207 (\u03b3 t\u22121 ) 2 + L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 L 2 \u03b1 3 B t\u22121 \u2212 1 2\u03b1 \u2212 L 2 \u03b1 3 E \u2207 (\u03b3 t\u22121 ) 2 + L 2 t(19)\nwhere we use Lemma 13, a, b \u2264 1 2 b + a 2 \u2212 1 2 a 2 , Jensen Inq., Lemma 21 and 3. We scale Lemma 19 and 20 and add it to to Eq. 19 to get telescopic terms. Let's assume \u03b1 \u2265 50L m P . We multiply Lemma 19 and 20 with 2m P L 2 z + L 2 and z respectively where\nz = 2L \u03b1 2 + 4L 3 \u03b1 4 + L 2 \u03b1 3 P 2m\u2212P \u2212 4P 2m\u2212P L 2 \u03b1 2 \u2212 8m P L 2 1 \u03b1 2 + 2L 2 \u03b1 4\n. Due to the assumption on \u03b1, the multiplication coefficients are positive. Adding the scaled versions of lemmas to Eq. 19 and scaling both sides with \u03b1 give,\nE \u2207 (\u03b3 t\u22121 ) 2 \u2264 4\u03b1E[ (\u03b3 t\u22121 )]+\u03baB t\u22121 \u2212 4\u03b1E[ (\u03b3 t )]+\u03baB t\nwhere \u03ba \u2264 50 m P 1 \u03b1 L. If we average over time, we get telescoping terms on RHS. Bounding telescoping terms with the initial conditions and upper bounding \u03ba give,\n1 T T t=1 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 1 T 4\u03b1 (\u03b8 0 ) \u2212 * +50 m P 1 \u03b1 LB 0(20)\nSetting \u03b1 = 50L m P gives the convergence rate in Theorem 5. We give proof of the stated lemmas here.\n\nLemma 21. Algorithm 2 satisfies\n1 m k\u2208[m] E \u2207L k (\u03b3 t ) \u2212 \u2207L k (\u03b8 t ) 2 \u2264 2L 2 \u03b1 2 B t + 2L 2 \u03b1 2 E \u2207 (\u03b3 t ) 2 . Proof. 1 m k\u2208[m] E \u2207L k (\u03b3 t ) \u2212 \u2207L k (\u03b8 t ) 2 \u2264 L 2 E \u03b3 t \u2212 \u03b8 t 2 = L 2 \u03b1 2 E h t 2 = L 2 \u03b1 2 E h t \u2212 \u2207 (\u03b3 t ) + \u2207 (\u03b3 t ) 2 \u2264 2L 2 \u03b1 2 E h t \u2212 \u2207 (\u03b3 t ) 2 + 2L 2 \u03b1 2 E \u2207 (\u03b3 t ) 2 \u2264 2L 2 \u03b1 2 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b3 t ) 2 + 2L 2 \u03b1 2 E \u2207 (\u03b3 t ) 2 = 2L 2 \u03b1 2 B t + 2L 2 \u03b1 2 E \u2207 (\u03b3 t ) 2\nwhere we use smoothness, Eq. 9 and Jensen Inq.\n\u03b1 2 E \u2207 (\u03b3 t\u22121 ) 2 \u2264 4 \u03b1 2 + 8L 2 \u03b1 4 B t\u22121 + 4 \u03b1 2 + 8L 2 \u03b1 4 E \u2207 (\u03b3 t\u22121 ) 2\nwhere the equations are based on Eq. 9 and the client update rule. The inequalities come from Lemma 6, Jensen Inq., and Lemma 21.\n\nProof of Lemma 20\nB t = 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b3 t ) 2 = 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b3 t\u22121 ) + \u2207L k (\u03b3 t\u22121 ) \u2212 \u2207L k (\u03b3 t ) 2 \u2264 1 + P 2m \u2212 P 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 1 + 2m \u2212 P P 1 m k\u2208[m] E \u2207L k (\u03b3 t ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \u2264 2m 2m \u2212 P 1 m k\u2208[m] E h t k \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + 2m P L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 = 2m 2m \u2212 P \uf8ee \uf8f0 1 \u2212 P m 1 m k\u2208[m] E h t\u22121 k \u2212 \u2207L k (\u03b3 t\u22121 ) 2 + P m 1 m k\u2208[m] E \u2207L k (\u03b8 t\u22121 ) \u2212 \u2207L k (\u03b3 t\u22121 ) 2 \uf8f9 \uf8fb + 2m P L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 2m 2m \u2212 P 1 \u2212 P m + 2 P m L 2 \u03b1 2 B t\u22121 + 2 P m L 2 \u03b1 2 2m 2m \u2212 P E \u2207 (\u03b3 t\u22121 ) 2 + 2m P L 2 E \u03b3 t \u2212 \u03b3 t\u22121 2 \u2264 2m 2m \u2212 P 1 \u2212 P m + 2 P m L 2 \u03b1 2 B t\u22121 + 2 P m L 2 \u03b1 2 2m 2m \u2212 P E \u2207 (\u03b3 t\u22121 ) 2 + 2m P L 2 t\nwhere we use a + b 2 \u2264 (1 + z) a 2 + 1 + 1 z b 2 for z > 0 and smoothness in the first and second inequalities. The following equality is due to taking expectation conditioned on randomness before time t. Final inequalities come from Lemma 21 and 3.\n\n[ 1 ,\n1.1] and epochs in [1, 10, 50] for all three algorithms. \u03b1 parameter of FedDyn is chosen among [.1, .01, .001]; K parameter of SCAFFOLD is searched in [20, 200, 1000] which corresponds to the same amount of computation using above epoch list; and \u00b5 regularization hyperparameter of FedProx in [0.01, .0001].\n\n\nMNIST. As for the 100 devices, balanced data, full participation setup, hyperparameters are searched for all algorithms in all IID and Dirichlet settings for a fixed 100 communication rounds. The search space consists of learning rates in [.1, .01], epochs in [10, 20, 50], Ks in [120, 240, 600], \u00b5s in [1, .01, .0001] and \u03b1s in [.001, .01, .03, .1]. Weight decay of 10 \u22124 is applied to prevent overfitting and no learning rate decay across communications rounds is used. The selected configuration for FedAvg is .1 learning rate and 20 epoch; for FedProx is .1 learning rate and .0001 \u00b5; for FedDyn is .1 learning rate, 50 epoch and .01 \u03b1; and for SCAFFOLD is .1 learning rate and 600 K for all IID and Dirichlet settings. These configurations are fixed and their performances are obtained for 500 communication rounds.\n\n\nFor the centralized model, we choose learning rate as .1, epoch as 150 and learning rate is halved in every 50 epochs.CIFAR-10. The same hyperparameters are applied to all the CIFAR-10 experiments, including: 0.1 for learning rate, 5 for epochs, and 10 \u22123 for weight decay. The learning rate decay is selected from the range of [0.992, 0.998, 1.0]. The \u03b1 value is selected from the range of [10 \u22123 , 10 \u22122 , 10 \u22121 ] for FedDyn. The \u00b5s value is selected from the range of [10 \u22122 , 10 \u22123 , 10 \u22124 ].For the centralized model, we choose learning rate as .1, epoch as 500 and learning rate decay as .992.CIFAR-100. The same hyperparameters are applied to the CIFAR-100 experiments with 100 devices. including: 0.1 for learning rate, 5 for epochs, and 10 \u22123 for weight decay. The learning rate decay is selected from the range of [0.992, 0.998, 1.0]. The \u03b1 value is selected from the range of [10 \u22123 , 10 \u22122 , 10 \u22121 ] for FedDyn. The \u00b5s value is selected from the range of [10 \u22122 , 10 \u22123 , 10 \u22124 ].As for 500 device, balanced data, 10% participation, IID setup, .1 learning rate, .0001 \u00b5, 10 \u22123 weight decay applied. Epochs in [2, 5] and corresponding Ks in [4,10] searched. \u03b1s in [.1, .01, .001] are considered for FedDyn. Epoch of 2 is selected for FedDyn, FedAvg and FedProx, K of 4 is selected for SCAFFOLD. .01 \u03b1 value is selected for FedDyn. The same parameters are chosen for 500 device, balanced data, 10% participation, Dirichlet .3 setup.As for 100 device, unbalanced data, 10% participation, IID and Dirichlet .3 settings, epoch of 2 is selected for FedDyn, FedAvg and FedProx, K of 20 is selected for SCAFFOLD. .1 \u03b1 value is applied for FedDyn. .0001 \u00b5 is used in FedProx.For the centralized model, we choose learning rate as .1, epoch as 500 and learning rate decay as .992. Shakespeare. As for 100 devices, balanced data, full participation setup, the hyperparameters are searched with all combinations of learning rate in [1], epochs in [1, 5], Ks in [20, 100], \u00b5s in [.01, .0001] and \u03b1s in [.001, .009, .01, .015].\n\nFigure 1 :\n1CIFAR-10 -\u03b1 sensitivity analysis of FedDyn.\n\nFigure 2 :\n2CIFAR-10 -FedSplit and FedDyn comparison in full and 10% participation settings.A.5 FIGURES OMITTED IN THE MAIN TEXT\n\nFigure 8 :\n8MNIST-Convergence curves for participation fractions ranging from 100% to 10% to 1% in the IID, Dirichlet (.6) and Dirichlet (.3) settings with 100 devices and balanced data.\n\nFigure 9 :Figure 10 :Figure 11 :\n91011EMNIST-L-Convergence curves for participation fractions ranging from 100% to 10% to 1% in the IID, Dirichlet (.6) and Dirichlet (.3) settings with 100 devices and balanced data. Shakespeare-Convergence curves for participation fractions ranging from 100% to 10% to 1% in the IID, and non-IID settings with 100 devices and balanced data. Convergence curves for ResNet18 with 1000 devices and balanced data.\n\nFigure 12 :Figure 13 :\n1213CIFAR-10-Convergence curves for balanced and unbalanced data distributions with 10% participation level as well as 100 devices in the IID and Dirichlet (.3) settings. CIFAR-100-Convergence curves for balanced and unbalanced data distributions with 10% participation level as well as 100 devices in the IID and Dirichlet (.\n\nj 2 .\n2Multiplying both sides with n 2 gives the inequality. Lemma 7. Algorithm 1 satisfies\n\nTable 1 :\n1Number of parameters transmitted relative to one round of FedAvg to reach target test accuracy for moderate and large number of devices in IID and Dirichlet .3 settings. SCAFFOLD communicates the current model and its associated gradient per round, while others communicate only the current model. As such number of rounds for SCAFFOLD is one half of those reported.Device Number \nDataset \nAccuracy FedDyn \nSCAFFOLD \nFedAvg \nFedProx \n\nModerate \n\nIID \n\nCIFAR-10 \n84.5 \n637 \n1852(2.9\u00d7) \n1000+(>1.6\u00d7) 1000+(>1.6\u00d7) \n82.3 \n240 \n512(2.1\u00d7) \n994(4.1\u00d7) \n825(3.4\u00d7) \n\nCIFAR-100 \n51.0 \n522 \n1854(3.6\u00d7) \n1000+(>1.9\u00d7) 1000+(>1.9\u00d7) \n40.9 \n159 \n286(1.8\u00d7) \n822(5.2\u00d7) \n873(5.5\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n82.5 \n444 \n1880(4.2\u00d7) \n1000+(>2.3\u00d7) 1000+(>2.3\u00d7) \n80.7 \n232 \n594(2.6\u00d7) \n863(3.7\u00d7) \n930(4.0\u00d7) \n\nCIFAR-100 \n51.0 \n561 \n1884(3.4\u00d7) \n1000+(>1.8\u00d7) 1000+(>1.8\u00d7) \n42.3 \n170 \n330(1.9\u00d7) \n959(5.6\u00d7) \n882(5.2\u00d7) \n\nMassive \n\nIID \n\nCIFAR-10 \n80.0 \n840 \n4000+(>4.8\u00d7) 2000+(>2.4\u00d7) 2000+(>2.4\u00d7) \n62.3 \n305 \n928(3.0\u00d7) \n1277(4.2\u00d7) \n1274(4.2\u00d7) \n\nCIFAR-100 \n50.1 \n1445 \n3982(2.8\u00d7) \n2000+(>1.4\u00d7) 2000+(>1.4\u00d7) \n38.3 \n477 \n1408(3.0\u00d7) \n1997(4.2\u00d7) \n1974(4.1\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n80.0 \n831 \n4000+(>4.8\u00d7) 2000+(>2.4\u00d7) 2000+(>2.4\u00d7) \n70.6 \n350 \n2138(6.1\u00d7) \n1962(5.6\u00d7) \n1517(4.3\u00d7) \n\nCIFAR-100 \n47.0 \n969 \n4000(4.1\u00d7) \n2000+(>2.1\u00d7) 2000+(>2.1\u00d7) \n39.9 \n467 \n2266(4.9\u00d7) \n1913(4.1\u00d7) \n1794(3.8\u00d7) \n\n\n\nTable 2 :\n2Number of parameters transmitted relative to one round of FedAvg to reach target test accuracy for 100% and 10% participation regimes in the IID, non-IID settings. SCAFFOLD communicates the current model and its associated gradient per round, while others communicate only the current model. As such number of rounds for SCAFFOLD is one half of those reported.Alex Krizhevsky et al. Learning multiple layers of features from tiny images. Technical report, 2009. Beno\u00eet Latr\u00e9, Bart Braem, Ingrid Moerman, Chris Blondia, and Piet Demeester. A survey on wireless body area networks. Wireless networks, 17(1):1-18, 2011. Yann LeCun, L\u00e9on Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11):2278-2324, 1998. T. Li, A. K. Sahu, A. Talwalkar, and V. Smith. Federated learning: Challenges, methods, and future directions. IEEE Signal Processing Magazine, 37(3):50-60, 2020. Tian Li, Anit Kumar Sahu, Manzil Zaheer, Maziar Sanjabi, Ameet Talwalkar, and Virginia Smithy. Feddane: A federated newton-type method. In 2019 53rd Asilomar Conference on Signals, Systems, and Computers, pp. 1227-1231. IEEE, 2019. Tian Li, Anit Kumar Sahu, Manzil Zaheer, Maziar Sanjabi, Ameet Talwalkar, and Virginia Smith. Federated optimization in heterogeneous networks. In Proceedings of Machine Learning and Systems 2020, pp. 429-450, 2020a. Xiang Li, Kaixuan Huang, Wenhao Yang, Shusen Wang, and Zhihua Zhang. On the convergence of fedavg on non-iid data. In International Conference on Learning Representations, 2020b. URL https://openreview.net/forum?id=HJxNAnVtDS. Zhize Li and Peter Richt\u00e1rik. A unified analysis of stochastic gradient methods for nonconvex federated optimization. arXiv preprint arXiv:2006.07013, 2020. Zhize Li, Dmitry Kovalev, Xun Qian, and Peter Richt\u00e1rik. Acceleration for compressed gradient descent in distributed and federated optimization. arXiv preprint arXiv:2002.11364, 2020c. Xianfeng Liang, Shuheng Shen, Jingchang Liu, Zhen Pan, Enhong Chen, and Yifei Cheng. Variance reduced local sgd with lower communication complexity. arXiv preprint arXiv:1912.12844, 2019. Ali Makhdoumi and Asuman Ozdaglar. Convergence rate of distributed admm over networks. IEEE Transactions on Automatic Control, 62(10):5082-5095, 2017. Grigory Malinovsky, Dmitry Kovalev, Elnur Gasanov, Laurent Condat, and Peter Richtarik. From local sgd to local fixed point methods for federated learning. arXiv preprint arXiv:2004.01442, 2020. Brendan McMahan, Eider Moore, Daniel Ramage, Seth Hampson, and Blaise Aguera y Arcas. Communication-efficient learning of deep networks from decentralized data. In Artificial Intelligence and Statistics, pp. 1273-1282, 2017. Konstantin Mishchenko, Eduard Gorbunov, Martin Tak\u00e1\u010d, and Peter Richt\u00e1rik. Distributed learning with compressed gradient differences. arXiv preprint arXiv:1901.09269, 2019. Yurii Nesterov, Alexander Gasnikov, Sergey Guminov, and Pavel Dvurechensky. Primal-dual accelerated gradient methods with small-dimensional relaxation oracle. Optimization Methods and Software, pp. 1-38, 2020. Reese Pathak and Martin J Wainwright. Fedsplit: An algorithmic framework for fast federated optimization. arXiv preprint arXiv:2005.05238, 2020. Sashank Reddi, Zachary Charles, Manzil Zaheer, Zachary Garrett, Keith Rush, Jakub Kone\u010dn\u1ef3, Sanjiv Kumar, and H Brendan McMahan. Adaptive federated optimization. arXiv preprint arXiv:2003.00295, 2020. William Shakespeare. The complete works of william shakespeare, 1994. URL http://www. gutenberg.org/files/100/old/1994-01-100.zip. Ohad Shamir, Nati Srebro, and Tong Zhang. Communication-efficient distributed optimization using an approximate newton-type method. In International conference on machine learning, pp. 1000-1008, 2014. Sebastian Urban Stich. Local SGD converges fast and communicates little. International Conference on Learning Representations (ICLR), pp. arXiv:1805.09767, 2019. URL https://arxiv. org/abs/1805.09767. Yuxin Wu and Kaiming He. Group normalization. In Proceedings of the European conference on computer vision (ECCV), pp. 3-19, 2018. Sarika Yadav and Rama Shankar Yadav. A review on energy efficient protocols in wireless sensor networks. Wireless Networks, 22(1):335-350, 2016. Honglin Yuan and Tengyu Ma. Federated accelerated stochastic gradient descent. arXiv preprint arXiv:2006.08950, 2020. Mikhail Yurochkin, Mayank Agarwal, Soumya Ghosh, Kristjan Greenewald, Nghia Hoang, and Yasaman Khazaeni. Bayesian nonparametric federated learning of neural networks. In International Conference on Machine Learning, pp. 7252-7261, 2019.Xinwei Zhang, Mingyi Hong, Sairaj Dhople, Wotao Yin, and Yang Liu. Fedpd: A federated learning framework with optimal rates and adaptivity to non-iid data. arXiv preprint arXiv:2005.11418, 2020.Yue Zhao, Meng Li, Liangzhen Lai, Naveen Suda, Damon Civin, and Vikas Chandra. Federated learning with non-iid data. arXiv preprint arXiv:1806.00582, 2018.Dataset. We introduce a synthetic dataset to reflect different properties of FL by using a similar process as inLi et al. (2020a). The datapointsParticipation \nDataset \nAccuracy FedDyn SCAFFOLD \nFedAvg \nFedProx \n\n100% \n\nIID \n\nCIFAR-10 \n85.0 \n198 \n1860(9.4\u00d7) \n1000+(>5.1\u00d7) \n1000+(>5.1\u00d7) \n81.4 \n67 \n320(4.8\u00d7) \n754(11.3\u00d7) \n655(9.8\u00d7) \n\nCIFAR-100 \n51.0 \n259 \n1744(6.7\u00d7) \n1000+(>3.9\u00d7) \n1000+(>3.9\u00d7) \n39.4 \n55 \n172(3.1\u00d7) \n1000+(>18.2\u00d7) \n741(13.5\u00d7) \n\nMNIST \n98.2 \n38 \n72(1.9\u00d7) \n194(5.1\u00d7) \n445(11.7\u00d7) \n97.2 \n9 \n18(2.0\u00d7) \n31(3.4\u00d7) \n28(3.1\u00d7) \n\nEMNIST-L \n94.6 \n65 \n414(6.4\u00d7) \n307(4.7\u00d7) \n1000+(>15\u00d7) \n93.6 \n16 \n36(2.2\u00d7) \n66(4.1\u00d7) \n62(3.9\u00d7) \n\nShakespeare \n46.4 \n33 \n74(2.2\u00d7) \n96(2.9\u00d7) \n113(3.4\u00d7) \n45.4 \n28 \n64(2.3\u00d7) \n59(2.1\u00d7) \n56(2.0\u00d7) \nDirichlet (.6) \n\nCIFAR-10 \n84.0 \n148 \n1890(12.8\u00d7) \n1000+(>6.8\u00d7) \n1000+(>6.8\u00d7) \n80.3 \n64 \n392(6.1\u00d7) \n869(13.6\u00d7) \n724(11.3\u00d7) \n\nCIFAR-100 \n51.0 \n468 \n1838(3.9\u00d7) \n1000+(>2.1\u00d7) \n1000+(>2.1\u00d7) \n40.6 \n73 \n206(2.8\u00d7) \n998(13.7\u00d7) \n592(8.1\u00d7) \n\nMNIST \n98.1 \n39 \n108(2.8\u00d7) \n157(4.0\u00d7) \n416(10.7\u00d7) \n97.1 \n11 \n24(2.2\u00d7) \n38(3.5\u00d7) \n34(3.1\u00d7) \n\nEMNIST-L \n94.9 \n207 \n552(2.7\u00d7) \n410(2.0\u00d7) \n1000+(>4.8\u00d7) \n93.9 \n20 \n42(2.1\u00d7) \n73(3.6\u00d7) \n61(3.0\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n83.5 \n223 \n1762(7.9\u00d7) \n1000+(>4.5\u00d7) \n1000+(>4.5\u00d7) \n80.2 \n70 \n504(7.2\u00d7) \n705(10.1\u00d7) \n1000+(>14.3\u00d7) \n\nCIFAR-100 \n50.5 \n405 \n1940(4.8\u00d7) \n1000+(>2.5\u00d7) \n1000+(>2.5\u00d7) \n41.0 \n80 \n224(2.8\u00d7) \n911(11.4\u00d7) \n1000+(>12.5\u00d7) \n\nMNIST \n98.1 \n35 \n76(2.2\u00d7) \n313(8.9\u00d7) \n458(13.1\u00d7) \n97.1 \n10 \n24(2.4\u00d7) \n49(4.9\u00d7) \n44(4.4\u00d7) \n\nEMNIST-L \n94.5 \n65 \n210(3.2\u00d7) \n492(7.6\u00d7) \n1000+(>15\u00d7) \n93.5 \n23 \n46(2.0\u00d7) \n78(3.4\u00d7) \n69(3.0\u00d7) \nNon-IID \n\nShakespeare \n47.3 \n33 \n70(2.1\u00d7) \n134(4.1\u00d7) \n150+(>4.5\u00d7) \n46.3 \n28 \n62(2.2\u00d7) \n53(1.9\u00d7) \n64(2.3\u00d7) \n\n10% \n\nIID \n\nMNIST \n98.2 \n100 \n142(1.4\u00d7) \n588(5.9\u00d7) \n362(3.6\u00d7) \n97.2 \n31 \n52(1.7\u00d7) \n49(1.6\u00d7) \n43(1.4\u00d7) \n\nEMNIST-L \n94.6 \n104 \n160(1.5\u00d7) \n330(3.2\u00d7) \n210(2.0\u00d7) \n93.6 \n58 \n84(1.4\u00d7) \n69(1.2\u00d7) \n65(1.1\u00d7) \n\nShakespeare \n46.9 \n63 \n94(1.5\u00d7) \n138(2.2\u00d7) \n190(3.0\u00d7) \n45.9 \n56 \n76(1.4\u00d7) \n96(1.7\u00d7) \n75(1.3\u00d7) \nDirichlet (.6) \n\nCIFAR-10 \n83.5 \n403 \n1618(4.0\u00d7) \n1000+(>2.5\u00d7) \n1000+(>2.5\u00d7) \n81.3 \n189 \n486(2.6\u00d7) \n977(5.2\u00d7) \n943(5.0\u00d7) \n\nCIFAR-100 \n51.0 \n521 \n1910(3.7\u00d7) \n1000+(>1.9\u00d7) \n1000+(>1.9\u00d7) \n41.6 \n170 \n302(1.8\u00d7) \n931(5.5\u00d7) \n748(4.4\u00d7) \n\nMNIST \n98.1 \n129 \n194(1.5\u00d7) \n581(4.5\u00d7) \n361(2.8\u00d7) \n97.1 \n37 \n60(1.6\u00d7) \n57(1.5\u00d7) \n57(1.5\u00d7) \n\nEMNIST-L \n94.9 \n192 \n296(1.5\u00d7) \n306(1.6\u00d7) \n1000+(>5.2\u00d7) \n93.9 \n55 \n102(1.9\u00d7) \n95(1.7\u00d7) \n86(1.6\u00d7) \nDirichlet (.3) \n\nMNIST \n98.2 \n90 \n208(2.3\u00d7) \n428(4.8\u00d7) \n858(9.5\u00d7) \n97.2 \n37 \n68(1.8\u00d7) \n76(2.1\u00d7) \n61(1.6\u00d7) \n\nEMNIST-L \n94.4 \n107 \n178(1.7\u00d7) \n804(7.5\u00d7) \n1000+(>9.3\u00d7) \n93.4 \n58 \n100(1.7\u00d7) \n81(1.4\u00d7) \n86(1.5\u00d7) \nNon-IID \n\nShakespeare \n47.6 \n63 \n102(1.6\u00d7) \n169(2.7\u00d7) \n133(2.1\u00d7) \n46.6 \n56 \n82(1.5\u00d7) \n80(1.4\u00d7) \n66(1.2\u00d7) \n\n\nTable 3 :\n3DatasetsDataset \nTrain Samples Amount Test Samples Amount \nCIFAR-10 \n50000 \n10000 \nCIFAR-100 \n50000 \n10000 \nMNIST \n60000 \n10000 \nEMNIST-L \n48000 \n8000 \nShakespeare \n200000 \n40000 \n\n\nTable 4 :\n4Number of parameters transmitted relative to one round of FedAvg to reach target test accuracy for balanced data and unbalanced data in IID and Dirichlet .3 settings with 10% participation. SCAFFOLD communicates the current model and its associated gradient per round, while others communicate only the current model. As such number of rounds for SCAFFOLD is one half of those reported.Local Data \nDataset \nAccuracy FedDyn SCAFFOLD \nFedAvg \nFedProx \n\nBalanced \n\nIID \n\nCIFAR-10 \n84.5 \n637 \n1852(2.9\u00d7) \n1000+(>1.6\u00d7) 1000+(>1.6\u00d7) \n82.3 \n240 \n512(2.1\u00d7) \n994(4.1\u00d7) \n825(3.4\u00d7) \n\nCIFAR-100 \n51.0 \n522 \n1854(3.6\u00d7) \n1000+(>1.9\u00d7) 1000+(>1.9\u00d7) \n40.9 \n159 \n286(1.8\u00d7) \n822(5.2\u00d7) \n873(5.5\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n82.5 \n444 \n1880(4.2\u00d7) \n1000+(>2.3\u00d7) 1000+(>2.3\u00d7) \n80.7 \n232 \n594(2.6\u00d7) \n863(3.7\u00d7) \n930(4.0\u00d7) \n\nCIFAR-100 \n51.0 \n561 \n1884(3.4\u00d7) \n1000+(>1.8\u00d7) 1000+(>1.8\u00d7) \n42.3 \n170 \n330(1.9\u00d7) \n959(5.6\u00d7) \n882(5.2\u00d7) \n\nUnbalanced \n\nIID \n\nCIFAR-10 \n84.0 \n335 \n1152(3.4\u00d7) \n1000+(>3.0\u00d7) 1000+(>3.0\u00d7) \n82.3 \n213 \n548(2.6\u00d7) \n834(3.9\u00d7) \n834(3.9\u00d7) \n\nCIFAR-100 \n53.0 \n386 \n1656(4.3\u00d7) \n1000+(>2.6\u00d7) 1000+(>2.6\u00d7) \n48.2 \n209 \n800(3.8\u00d7) \n968(4.6\u00d7) \n945(4.5\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n82.5 \n524 \n1998(3.8\u00d7) \n1000+(>1.9\u00d7) 1000+(>1.9\u00d7) \n80.1 \n274 \n652(2.4\u00d7) \n893(3.3\u00d7) \n1000+(>3.6\u00d7) \n\nCIFAR-100 \n52.0 \n503 \n1928(3.8\u00d7) \n1000+(>2.0\u00d7) 1000+(>2.0\u00d7) \n47.3 \n234 \n942(4.0\u00d7) \n871(3.7\u00d7) \n1000+(>4.3\u00d7) \n\n\nTable 5 :\n5Number of parameters transmitted relative to one round of FedAvg to reach target test accuracy for 1% participation regime in the IID, non-IID settings. SCAFFOLD communicates the current model and its associated gradient per round, while others communicate only the current model. As such number of rounds for SCAFFOLD is one half of those reported.Participation \nDataset \nAccuracy FedDyn SCAFFOLD \nFedAvg \nFedProx \n\n1% \n\nIID \n\nCIFAR-10 \n82.6 \n660 \n1544(2.3\u00d7) \n892(1.4\u00d7) 1000+(>1.5\u00d7) \n81.6 \n543 \n1150(2.1\u00d7) \n603(1.1\u00d7) \n707(1.3\u00d7) \n\nCIFAR-100 \n39.8 \n409 \n1982(4.8\u00d7) \n428(1.0\u00d7) \n512(1.3\u00d7) \n38.8 \n396 \n1862(4.7\u00d7) \n392(1.0\u00d7) \n454(1.1\u00d7) \n\nMNIST \n98.3 \n529 \n956(1.8\u00d7) \n644(1.2\u00d7) \n451(0.9\u00d7) \n97.3 \n145 \n290(2.0\u00d7) \n151(1.0\u00d7) \n143(1.0\u00d7) \n\nEMNIST-L \n94.9 \n483 \n1136(2.4\u00d7) \n826(1.7\u00d7) 1000+(>2.1\u00d7) \n93.9 \n210 \n554(2.6\u00d7) \n216(1.0\u00d7) \n238(1.1\u00d7) \n\nShakespeare \n43.0 \n170 \n460(2.7\u00d7) \n188(1.1\u00d7) \n151(0.9\u00d7) \n42.0 \n148 \n342(2.3\u00d7) \n149(1.0\u00d7) \n142(1.0\u00d7) \nDirichlet (.6) \n\nCIFAR-10 \n81.0 \n561 \n1510(2.7\u00d7) \n977(1.7\u00d7) \n841(1.5\u00d7) \n80.0 \n436 \n1100(2.5\u00d7) \n673(1.5\u00d7) \n623(1.4\u00d7) \n\nCIFAR-100 \n36.6 \n355 \n1996(5.6\u00d7) \n341(1.0\u00d7) \n352(1.0\u00d7) \n35.6 \n342 \n1876(5.5\u00d7) \n317(0.9\u00d7) \n342(1.0\u00d7) \n\nMNIST \n98.2 \n486 \n1502(3.1\u00d7) \n863(1.8\u00d7) \n754(1.6\u00d7) \n97.2 \n180 \n332(1.8\u00d7) \n199(1.1\u00d7) \n166(0.9\u00d7) \n\nEMNIST-L \n94.8 \n405 \n1230(3.0\u00d7) \n504(1.2\u00d7) 1000+(>2.5\u00d7) \n93.8 \n195 \n576(3.0\u00d7) \n256(1.3\u00d7) \n294(1.5\u00d7) \nDirichlet (.3) \n\nCIFAR-10 \n79.0 \n590 \n1580(2.7\u00d7) \n955(1.6\u00d7) \n738(1.3\u00d7) \n78.0 \n452 \n1272(2.8\u00d7) \n653(1.4\u00d7) \n497(1.1\u00d7) \n\nCIFAR-100 \n36.1 \n343 \n1990(5.8\u00d7) \n317(0.9\u00d7) \n342(1.0\u00d7) \n35.1 \n321 \n1866(5.8\u00d7) \n294(0.9\u00d7) \n314(1.0\u00d7) \n\nMNIST \n98.2 \n521 \n954(1.8\u00d7) \n951(1.8\u00d7) \n974(1.9\u00d7) \n97.2 \n157 \n318(2.0\u00d7) \n169(1.1\u00d7) \n177(1.1\u00d7) \n\nEMNIST-L \n94.4 \n442 \n1860(4.2\u00d7) \n481(1.1\u00d7) 1000+(>2.3\u00d7) \n93.4 \n241 \n694(2.9\u00d7) \n286(1.2\u00d7) \n279(1.2\u00d7) \nNon-IID \n\nShakespeare \n43.8 \n158 \n388(2.5\u00d7) \n159(1.0\u00d7) \n153(1.0\u00d7) \n42.8 \n143 \n318(2.2\u00d7) \n146(1.0\u00d7) \n145(1.0\u00d7) \n\n2 \n4 \n6 \n8 \n10 \n\nClass Count \n\n0 \n\n20 \n\n40 \n\n60 \n\n80 \n\n100 \n\nDevice Count \n\nMNIST -40% data \n\nIID \nDirichlet (.6) \nDirichlet (.3) \n\n(a) \n\n2 \n4 \n6 \n8 \n10 \n\nClass Count \n\n0 \n\n20 \n\n40 \n\n60 \n\n80 \n\n100 \n\nDevice Count \n\nMNIST -60% data \n\nIID \nDirichlet (.6) \nDirichlet (.3) \n\n(b) \n\n2 \n4 \n6 \n8 \n10 \n\nClass Count \n\n0 \n\n20 \n\n40 \n\n60 \n\n80 \n\n100 \n\nDevice Count \n\nMNIST -80% data \n\nIID \nDirichlet (.6) \nDirichlet (.3) \n\n(c) \n\n\n\nTable 6 :\n6Number of parameters transmitted relative to one round of FedAvg to reach target test accuracy for convex synthetic problem in different types of heterogeneity settings. SCAFFOLD communicates the current model and its associated gradient per round, while others communicate only the current model. As such number of rounds for SCAFFOLD is one half of those reported. Convergence curves for different 100 and 500 devices in the IID and Dirichlet (.3) settings with 10% participation level and balanced data.Loss \nFedDyn SCAFFOLD \nFedAvg \nFedProx \nHomogeneous \n0.0603 \n32 \n70(2.2\u00d7) \n136(4.2\u00d7) \n49(1.5\u00d7) \nType 1 Heterogeneous \n1.5717 \n17 \n88(5.2\u00d7) \n20(1.2\u00d7) \n18(1.1\u00d7) \nType 2 Heterogeneous \n0.1205 \n150 \n164(1.1\u00d7) \n274(1.8\u00d7) 275(1.8\u00d7) \nType 3 Heterogeneous \n0.0854 \n34 \n260(7.6\u00d7) \n79(2.3\u00d7) \n106(3.1\u00d7) \n\n\n\n\nLemma 19. For L smooth {L k } m k=1 functions, Algorithm 2 satisfies Lemma 20. For L smooth {L k } m k=1 functions, Algorithm 2 satisfiest \u2264 \n\n4 \n\u03b1 2 + \n\n8L 2 \n\u03b1 4 B t\u22121 + \n\n4 \n\u03b1 2 + \n\n8L 2 \n\u03b1 4 E \u2207 (\u03b3 t\u22121 ) 2 \n\nB t \u2264 \n2m \n2m \u2212 P \n1 + \nP \nm \n\n2L 2 \n\u03b1 2 \u2212 1 B t\u22121 + \n\nL 2 \n\u03b1 2 \n\n4P \n2m \u2212 P \nE \u2207 (\u03b3 t\u22121 ) 2 + \n2m \nP \nL 2 \n\nt \n\nTo see this consider the situation where losses are differentiable. As such stationary points for global empirical loss demand that only the sum of the gradients of device empirical losses are zero, and not necessarily that the individual device gradients are zero. Indeed, in statistically heterogeneous situations, such as where we have heterogeneous dominance of classes, stationary points of local empirical functions do not coincide.\nWe open sourced our code in https://github.com/alpemreacar/FedDyn.\nt k = \u03b8 t k if k \u2208 P t and\u03b8 t k doesn't depend on P t . First order condition in Eq. 7 and in device optimization giv\u1ebd\u03b8 t k \u2212 \u03b8 t\u22121 = 1 \u03b1 (\u2207L k (\u03b8 t\u22121 k ) \u2212 \u2207L k (\u03b8 t k )) \u2200k \u2208 [m]; \u03b8 t k \u2212 \u03b8 t\u22121 =\nWe note that our experiments uses FedDyn.\nT \u22121 t=0 r t \u03b2= max 50 m P \u00b5, 50L and \u03b3 T is a random variable that takes values {\u03b3 s } T \u22121 s=0 with equal probability.We give the proof by following the same process as in FedDyn analysis. Similarly, we define virtual {\u03b8 t k } variables as\u03b8 t k = \u03b8 t\u22121 \u2212 1 \u03b1 \u2207L k (\u03b8 t\u22121 ) \u2212 h t\u22121 k ,h t k = h t\u22121 k \u2212 \u03b1 \u03b8 t k \u2212 \u03b8 t\u22121 , \u2200k \u2208 [m], t > 0 (15) We see that\u03b8 t k = \u03b8 t k andh t k = h t k if k \u2208 P t .\u03b8 t k andht k don't depend on P t . We follow the same \u03b3 definition as in Eq. 9, .i.e \u03b3 t = 1 P k\u2208Pt \u03b8 t k ; \u03b3 t = \u03b8 t + 1 \u03b1 h t . Finally, based on the local state update rules we have,h t = 1 m k\u2208[m] h t k ,h t k = \u2207L k (\u03b8 t\u22121 )(16)\nPlease see the example in https://github.com/alpemreacar/FedDynClarification/blob/main/Lemma17 SCAFFOLD.pdf.\nACKNOWLEDGEMENTSAlgorithm 2: Federated Dynamic Regularizer One Step -(FedDynOneGD)Input: T, \u03b8 0 , \u03b1 > 0, \u2207L k (\u03b8 0 k ) = 0. for t = 1, 2, . . . T do Sample devices P t \u2286 [m] and transmit \u03b8 t\u22121 to each selected device, for each device k \u2208 P t , and in parallel dok to server, end for for each device k \u2208 P t , and in parallel dowhere we start with definition of C t . First inequality is due to a + b 2 \u2264 (1 + z) a 2 + 1 + 1 z b 2 for z > 0. The following equality takes expectation conditioned on randomness before time t. Since each device is selected with probability P m , \u03b8 t k is a random variable that is equal to\u03b8 t k with probability P m . Otherwise, it is \u03b8 t\u22121 k . Final equality is due to definitions of t and C t .We analyze a variant of FedDyn that uses only one gradient update in the clients. Algorithm 2 presents FedDynOneGD method. Different from FedDyn, FedDynOneGD does one gradient descent update in the clients so that the device optimization is faster than FedDyn. We show that FedDynOneGD has the same asymptotic convergence rate guarantees 4 .FedDynOneGD is a practical algorithm. In each round, active devices calculate gradients of the local data rather than doing a full minimization. Since the number of data points in each device is small, computing a gradient, .i.e having one dataset pass, is not a costly operation. We present FedDynOneGD to show that a lightweight FedDyn variant also achieves the same convergence rates.Note that the gold-standard for comparison in federated learning is often the number of communication rounds(McMahan et al., 2017). Nevertheless, we may also want to keep track of computations per round. These are often complementary metrics. Remark 1. Computation and communications. GD versus SGD. To get a handle on computation, we provide results with performing one gradient descent in FedDynOneGD algorithm. Our results show that one gradient descent step, which amounts to a single-pass through the data points in a device achieves expected target error with the same number of rounds compared to FedDyn as presented in Theorem 5. We may wonder whether SGD would be more beneficial in the computation metric. To understand this point note that prior works, that utilize SGD on each device, the number of computations per-device is no smaller than taking one-pass through the local dataset(Khaled et al., 2020a;Li et al., 2020b;Karimireddy et al., 2019). As such SGD leads to larger noise at this level of computations, and often results in requiring a larger number of communication rounds. Furthermore, unlike GD, SGD is not parallelizable. SGD method needs to update the local model and evaluate the gradient in the updated model in a sequential manner. Differently, GD methods can evaluate the gradient by parallelizing among device datapoints. For this reason, SGD does not appear to offer any advantages over GD with respect to both communication rounds or computations per round.Recently, Karimireddy et al.(2019)presented an improved version of convergence analysis which matches FedDyn rate for convex functions. The comparison is given in Remark 11 ofKarimireddy et al. (2019). For the nonconvex setting, the convergence rate of SCAFFOLD builds upon 'lag in the control variates' for each round, (Lemma 17 page 32). We construct an example with quadratic functions and numerically evaluate Lemma 17. However, we can not empirically verify the claim in Lemma 17 5 . Since Lemma 17 is essential for the convergence rate, it is not clear if SCAFFOLD gets better rate for nonconvex functions compared to FedDyn.\nQsgd: Communicationefficient sgd via gradient quantization and encoding. Dan Alistarh, Demjan Grubic, Jerry Li, Ryota Tomioka, Milan Vojnovic, Advances in Neural Information Processing Systems. Dan Alistarh, Demjan Grubic, Jerry Li, Ryota Tomioka, and Milan Vojnovic. Qsgd: Communication- efficient sgd via gradient quantization and encoding. In Advances in Neural Information Processing Systems, pp. 1709-1720, 2017.\n\nLEAF: A benchmark for federated settings. Sebastian Caldas, Peter Wu, Tian Li, Jakub Konecn\u00fd, H Brendan Mcmahan, Virginia Smith, Ameet Talwalkar, abs/1812.01097CoRRSebastian Caldas, Peter Wu, Tian Li, Jakub Konecn\u00fd, H. Brendan McMahan, Virginia Smith, and Ameet Talwalkar. LEAF: A benchmark for federated settings. CoRR, abs/1812.01097, 2018. URL http://arxiv.org/abs/1812.01097.\n\nEmnist: Extending mnist to handwritten letters. Gregory Cohen, Saeed Afshar, Jonathan Tapson, Andre Van Schaik, 2017 International Joint Conference on Neural Networks (IJCNN). IEEEGregory Cohen, Saeed Afshar, Jonathan Tapson, and Andre Van Schaik. Emnist: Extending mnist to handwritten letters. In 2017 International Joint Conference on Neural Networks (IJCNN), pp. 2921-2926. IEEE, 2017.\n\nDistributed proximal splitting algorithms with rates and acceleration. Laurent Condat, Grigory Malinovsky, Peter Richt\u00e1rik, arXiv:2010.00952arXiv preprintLaurent Condat, Grigory Malinovsky, and Peter Richt\u00e1rik. Distributed proximal splitting algorithms with rates and acceleration. arXiv preprint arXiv:2010.00952, 2020.\n\nOn the discrepancy between the theoretical analysis and practical implementations of compressed communication for distributed deep learning. Aritra Dutta, El Houcine, Ahmed M Bergou, Chen-Yu Abdelmoniem, Atal Narayan Ho, Marco Sahu, Panos Canini, Kalnis, arXiv:1911.08250arXiv preprintAritra Dutta, El Houcine Bergou, Ahmed M Abdelmoniem, Chen-Yu Ho, Atal Narayan Sahu, Marco Canini, and Panos Kalnis. On the discrepancy between the theoretical analysis and practical implementations of compressed communication for distributed deep learning. arXiv preprint arXiv:1911.08250, 2019.\n\nA unified theory of sgd: Variance reduction, sampling, quantization and coordinate descent. Eduard Gorbunov, Filip Hanzely, Peter Richt\u00e1rik, International Conference on Artificial Intelligence and Statistics. PMLREduard Gorbunov, Filip Hanzely, and Peter Richt\u00e1rik. A unified theory of sgd: Variance reduc- tion, sampling, quantization and coordinate descent. In International Conference on Artificial Intelligence and Statistics, pp. 680-690. PMLR, 2020.\n\nAn estimation of sensor energy consumption. Moshe Malka N Halgamuge, Kotagiri Zukerman, Hai L Ramamohanarao, Vu, Progress in Electromagnetics Research. 12Malka N Halgamuge, Moshe Zukerman, Kotagiri Ramamohanarao, and Hai L Vu. An estimation of sensor energy consumption. Progress in Electromagnetics Research, 12:259-295, 2009.\n\nDeep residual learning for image recognition. Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun, Proceedings of the IEEE conference on computer vision and pattern recognition. the IEEE conference on computer vision and pattern recognitionKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 770-778, 2016.\n\nMeasuring the effects of non-identical data distribution for federated visual classification. CoRR, abs/1909.06335. Tzu-Ming Harry Hsu, Hang Qi, Matthew Brown, Tzu-Ming Harry Hsu, Hang Qi, and Matthew Brown. Measuring the effects of non-identical data distribution for federated visual classification. CoRR, abs/1909.06335, 2019. URL http: //arxiv.org/abs/1909.06335.\n\nPeter Kairouz, Brendan Mcmahan, Brendan Avent, Aur\u00e9lien Bellet, Mehdi Bennis, arXiv:1912.04977Advances and open problems in federated learning. Keith Bonawitz, Zachary Charles, Graham Cormode, Rachel CummingsarXiv preprintPeter Kairouz, H Brendan McMahan, Brendan Avent, Aur\u00e9lien Bellet, Mehdi Bennis, Arjun Nitin Bhagoji, Keith Bonawitz, Zachary Charles, Graham Cormode, Rachel Cummings, et al. Advances and open problems in federated learning. arXiv preprint arXiv:1912.04977, 2019.\n\nSCAFFOLD: stochastic controlled averaging for on-device federated learning. Satyen Sai Praneeth Karimireddy, Mehryar Kale, Mohri, J Sashank, Sebastian U Reddi, Ananda Theertha Stich, Suresh, abs/1910.06378CoRRSai Praneeth Karimireddy, Satyen Kale, Mehryar Mohri, Sashank J. Reddi, Sebastian U. Stich, and Ananda Theertha Suresh. SCAFFOLD: stochastic controlled averaging for on-device federated learning. CoRR, abs/1910.06378, 2019. URL http://arxiv.org/abs/1910.06378.\n\nTighter theory for local sgd on identical and heterogeneous data. Ahmed Khaled, Konstantin Mishchenko, Peter Richtarik, Proceedings of the Twenty Third International Conference on Artificial Intelligence and Statistics, Proceedings of Machine Learning Research. the Twenty Third International Conference on Artificial Intelligence and Statistics, Machine Learning ResearchOnlineAhmed Khaled, Konstantin Mishchenko, and Peter Richtarik. Tighter theory for local sgd on identical and heterogeneous data. In Proceedings of the Twenty Third International Conference on Artificial Intelligence and Statistics, Proceedings of Machine Learning Research, pp. 4519-4529, Online, 26- 28 Aug 2020a. PMLR. URL http://proceedings.mlr.press/v108/bayoumi20a. html.\n\nUnified analysis of stochastic gradient methods for composite convex and smooth optimization. Ahmed Khaled, Othmane Sebbouh, Nicolas Loizou, M Robert, Peter Gower, Richt\u00e1rik, arXiv:2006.11573arXiv preprintAhmed Khaled, Othmane Sebbouh, Nicolas Loizou, Robert M Gower, and Peter Richt\u00e1rik. Unified analysis of stochastic gradient methods for composite convex and smooth optimization. arXiv preprint arXiv:2006.11573, 2020b.\n\nFederated optimization: Distributed machine learning for on-device intelligence. Jakub Kone\u010dn\u1ef3, Brendan Mcmahan, Daniel Ramage, Peter Richt\u00e1rik, arXiv:1610.02527arXiv preprintJakub Kone\u010dn\u1ef3, H Brendan McMahan, Daniel Ramage, and Peter Richt\u00e1rik. Federated optimization: Distributed machine learning for on-device intelligence. arXiv preprint arXiv:1610.02527, 2016.\n", "annotations": {"author": "[{\"end\":110,\"start\":99},{\"end\":121,\"start\":111},{\"end\":148,\"start\":122},{\"end\":169,\"start\":149},{\"end\":210,\"start\":170},{\"end\":251,\"start\":211},{\"end\":272,\"start\":252}]", "publisher": null, "author_last_name": "[{\"end\":109,\"start\":106},{\"end\":120,\"start\":116},{\"end\":130,\"start\":126},{\"end\":168,\"start\":155},{\"end\":185,\"start\":178},{\"end\":227,\"start\":218},{\"end\":271,\"start\":262}]", "author_first_name": "[{\"end\":105,\"start\":99},{\"end\":115,\"start\":111},{\"end\":125,\"start\":122},{\"end\":154,\"start\":149},{\"end\":177,\"start\":170},{\"end\":215,\"start\":211},{\"end\":217,\"start\":216},{\"end\":261,\"start\":252}]", "author_affiliation": null, "title": "[{\"end\":96,\"start\":1},{\"end\":368,\"start\":273}]", "venue": null, "abstract": "[{\"end\":1453,\"start\":370}]", "bib_ref": "[{\"end\":1493,\"start\":1472},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2745,\"start\":2721},{\"end\":3743,\"start\":3722},{\"end\":3762,\"start\":3743},{\"end\":5416,\"start\":5387},{\"end\":5443,\"start\":5418},{\"end\":5483,\"start\":5448},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":6763,\"start\":6742},{\"end\":6781,\"start\":6765},{\"end\":7573,\"start\":7551},{\"end\":7903,\"start\":7881},{\"end\":7920,\"start\":7903},{\"end\":8051,\"start\":8032},{\"end\":8207,\"start\":8189},{\"end\":8271,\"start\":8253},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":8324,\"start\":8306},{\"end\":8343,\"start\":8324},{\"end\":8773,\"start\":8755},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":9423,\"start\":9397},{\"end\":9443,\"start\":9423},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":9899,\"start\":9877},{\"end\":9926,\"start\":9899},{\"end\":9946,\"start\":9926},{\"end\":9962,\"start\":9946},{\"end\":9988,\"start\":9962},{\"end\":10007,\"start\":9988},{\"end\":10024,\"start\":10007},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10044,\"start\":10024},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":10187,\"start\":10164},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":10208,\"start\":10187},{\"end\":10229,\"start\":10208},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":10386,\"start\":10364},{\"end\":10417,\"start\":10391},{\"end\":10733,\"start\":10716},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":11114,\"start\":11094},{\"end\":11138,\"start\":11114},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":11160,\"start\":11138},{\"end\":18052,\"start\":18017},{\"end\":20530,\"start\":20508},{\"end\":20547,\"start\":20530},{\"end\":20584,\"start\":20558},{\"end\":20630,\"start\":20596},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":20672,\"start\":20652},{\"end\":20979,\"start\":20956},{\"end\":21806,\"start\":21785},{\"end\":21888,\"start\":21867},{\"end\":22228,\"start\":22211},{\"end\":33141,\"start\":33117},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":34895,\"start\":34874},{\"end\":35908,\"start\":35886},{\"end\":36315,\"start\":36293},{\"end\":37101,\"start\":37083},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":41819,\"start\":41803},{\"end\":46815,\"start\":46780},{\"end\":54016,\"start\":54010},{\"end\":54018,\"start\":54016},{\"end\":54020,\"start\":54018},{\"end\":60516,\"start\":60485}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":68217,\"start\":67903},{\"attributes\":{\"id\":\"fig_2\"},\"end\":69040,\"start\":68218},{\"attributes\":{\"id\":\"fig_3\"},\"end\":71067,\"start\":69041},{\"attributes\":{\"id\":\"fig_4\"},\"end\":71124,\"start\":71068},{\"attributes\":{\"id\":\"fig_5\"},\"end\":71254,\"start\":71125},{\"attributes\":{\"id\":\"fig_6\"},\"end\":71442,\"start\":71255},{\"attributes\":{\"id\":\"fig_7\"},\"end\":71887,\"start\":71443},{\"attributes\":{\"id\":\"fig_8\"},\"end\":72238,\"start\":71888},{\"attributes\":{\"id\":\"fig_9\"},\"end\":72331,\"start\":72239},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":73702,\"start\":72332},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":81382,\"start\":73703},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":81575,\"start\":81383},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":82956,\"start\":81576},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":85262,\"start\":82957},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":86075,\"start\":85263},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":86402,\"start\":86076}]", "paragraph": "[{\"end\":2254,\"start\":1469},{\"end\":2907,\"start\":2256},{\"end\":5637,\"start\":2909},{\"end\":5689,\"start\":5639},{\"end\":6598,\"start\":5691},{\"end\":7274,\"start\":6600},{\"end\":7542,\"start\":7276},{\"end\":8052,\"start\":7544},{\"end\":8745,\"start\":8054},{\"end\":9263,\"start\":8747},{\"end\":9826,\"start\":9265},{\"end\":10988,\"start\":9828},{\"end\":11335,\"start\":10990},{\"end\":11636,\"start\":11346},{\"end\":11671,\"start\":11638},{\"end\":11941,\"start\":11853},{\"end\":12159,\"start\":12094},{\"end\":12597,\"start\":12360},{\"end\":13073,\"start\":12599},{\"end\":13306,\"start\":13169},{\"end\":13543,\"start\":13366},{\"end\":13849,\"start\":13545},{\"end\":14350,\"start\":13928},{\"end\":15040,\"start\":14352},{\"end\":15760,\"start\":15042},{\"end\":16166,\"start\":15796},{\"end\":16224,\"start\":16168},{\"end\":16805,\"start\":16691},{\"end\":18004,\"start\":16807},{\"end\":18752,\"start\":18006},{\"end\":19368,\"start\":18841},{\"end\":19705,\"start\":19370},{\"end\":20416,\"start\":19721},{\"end\":21488,\"start\":20418},{\"end\":22530,\"start\":21490},{\"end\":22818,\"start\":22532},{\"end\":23276,\"start\":22820},{\"end\":24423,\"start\":23278},{\"end\":25199,\"start\":24425},{\"end\":26362,\"start\":25201},{\"end\":27562,\"start\":26364},{\"end\":27930,\"start\":27564},{\"end\":28861,\"start\":27932},{\"end\":29108,\"start\":28863},{\"end\":30138,\"start\":29123},{\"end\":30420,\"start\":30319},{\"end\":30974,\"start\":30675},{\"end\":31629,\"start\":30976},{\"end\":31813,\"start\":31631},{\"end\":32135,\"start\":31815},{\"end\":32782,\"start\":32153},{\"end\":32960,\"start\":32784},{\"end\":34546,\"start\":32962},{\"end\":34867,\"start\":34548},{\"end\":35393,\"start\":34869},{\"end\":35909,\"start\":35405},{\"end\":36369,\"start\":35911},{\"end\":37102,\"start\":36371},{\"end\":37317,\"start\":37104},{\"end\":37560,\"start\":37319},{\"end\":38467,\"start\":37562},{\"end\":38587,\"start\":38469},{\"end\":38915,\"start\":38589},{\"end\":39209,\"start\":38917},{\"end\":39827,\"start\":39211},{\"end\":40421,\"start\":39829},{\"end\":40574,\"start\":40423},{\"end\":41058,\"start\":40576},{\"end\":41427,\"start\":41060},{\"end\":41697,\"start\":41429},{\"end\":42211,\"start\":41699},{\"end\":42669,\"start\":42252},{\"end\":43213,\"start\":42671},{\"end\":43751,\"start\":43263},{\"end\":44215,\"start\":43753},{\"end\":44412,\"start\":44217},{\"end\":44839,\"start\":44437},{\"end\":45989,\"start\":44841},{\"end\":46108,\"start\":46059},{\"end\":46223,\"start\":46168},{\"end\":46507,\"start\":46342},{\"end\":46962,\"start\":46670},{\"end\":47102,\"start\":47090},{\"end\":47289,\"start\":47153},{\"end\":47490,\"start\":47336},{\"end\":47852,\"start\":47573},{\"end\":47993,\"start\":47854},{\"end\":48282,\"start\":48235},{\"end\":48526,\"start\":48433},{\"end\":48568,\"start\":48528},{\"end\":48651,\"start\":48622},{\"end\":48758,\"start\":48718},{\"end\":49090,\"start\":48760},{\"end\":49141,\"start\":49135},{\"end\":49822,\"start\":49435},{\"end\":49940,\"start\":49854},{\"end\":50329,\"start\":50108},{\"end\":50518,\"start\":50331},{\"end\":50661,\"start\":50583},{\"end\":51276,\"start\":51184},{\"end\":51528,\"start\":51278},{\"end\":51626,\"start\":51530},{\"end\":51930,\"start\":51779},{\"end\":51948,\"start\":51932},{\"end\":52750,\"start\":52579},{\"end\":53455,\"start\":53267},{\"end\":53688,\"start\":53488},{\"end\":54238,\"start\":53885},{\"end\":54502,\"start\":54315},{\"end\":54555,\"start\":54504},{\"end\":54871,\"start\":54732},{\"end\":54968,\"start\":54939},{\"end\":55106,\"start\":55033},{\"end\":55216,\"start\":55176},{\"end\":55379,\"start\":55218},{\"end\":55620,\"start\":55460},{\"end\":56252,\"start\":56121},{\"end\":56670,\"start\":56349},{\"end\":56738,\"start\":56672},{\"end\":56790,\"start\":56784},{\"end\":57167,\"start\":56913},{\"end\":57357,\"start\":57194},{\"end\":57731,\"start\":57513},{\"end\":57926,\"start\":57798},{\"end\":57997,\"start\":57928},{\"end\":58318,\"start\":58288},{\"end\":58630,\"start\":58455},{\"end\":58765,\"start\":58725},{\"end\":59022,\"start\":58767},{\"end\":59148,\"start\":59024},{\"end\":59364,\"start\":59345},{\"end\":59802,\"start\":59673},{\"end\":60145,\"start\":59804},{\"end\":60517,\"start\":60147},{\"end\":60551,\"start\":60519},{\"end\":61404,\"start\":61224},{\"end\":61796,\"start\":61665},{\"end\":62089,\"start\":61833},{\"end\":62147,\"start\":62091},{\"end\":62841,\"start\":62657},{\"end\":63090,\"start\":62908},{\"end\":63371,\"start\":63167},{\"end\":63574,\"start\":63455},{\"end\":64163,\"start\":64060},{\"end\":64500,\"start\":64413},{\"end\":64651,\"start\":64526},{\"end\":64793,\"start\":64718},{\"end\":64972,\"start\":64822},{\"end\":65702,\"start\":65444},{\"end\":65946,\"start\":65788},{\"end\":66169,\"start\":66006},{\"end\":66337,\"start\":66236},{\"end\":66370,\"start\":66339},{\"end\":66785,\"start\":66739},{\"end\":66993,\"start\":66864},{\"end\":67012,\"start\":66995},{\"end\":67902,\"start\":67653}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":11852,\"start\":11672},{\"attributes\":{\"id\":\"formula_1\"},\"end\":12093,\"start\":11942},{\"attributes\":{\"id\":\"formula_2\"},\"end\":12359,\"start\":12160},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13168,\"start\":13074},{\"attributes\":{\"id\":\"formula_4\"},\"end\":13365,\"start\":13307},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13927,\"start\":13850},{\"attributes\":{\"id\":\"formula_6\"},\"end\":16690,\"start\":16225},{\"attributes\":{\"id\":\"formula_7\"},\"end\":18840,\"start\":18753},{\"attributes\":{\"id\":\"formula_8\"},\"end\":30318,\"start\":30139},{\"attributes\":{\"id\":\"formula_9\"},\"end\":30674,\"start\":30421},{\"attributes\":{\"id\":\"formula_10\"},\"end\":44436,\"start\":44413},{\"attributes\":{\"id\":\"formula_11\"},\"end\":46058,\"start\":45990},{\"attributes\":{\"id\":\"formula_12\"},\"end\":46167,\"start\":46109},{\"attributes\":{\"id\":\"formula_13\"},\"end\":46341,\"start\":46224},{\"attributes\":{\"id\":\"formula_14\"},\"end\":46669,\"start\":46508},{\"attributes\":{\"id\":\"formula_15\"},\"end\":47089,\"start\":46963},{\"attributes\":{\"id\":\"formula_16\"},\"end\":47152,\"start\":47103},{\"attributes\":{\"id\":\"formula_17\"},\"end\":47335,\"start\":47290},{\"attributes\":{\"id\":\"formula_18\"},\"end\":47572,\"start\":47491},{\"attributes\":{\"id\":\"formula_19\"},\"end\":48234,\"start\":47994},{\"attributes\":{\"id\":\"formula_20\"},\"end\":48432,\"start\":48283},{\"attributes\":{\"id\":\"formula_21\"},\"end\":48621,\"start\":48569},{\"attributes\":{\"id\":\"formula_22\"},\"end\":48717,\"start\":48652},{\"attributes\":{\"id\":\"formula_23\"},\"end\":49134,\"start\":49091},{\"attributes\":{\"id\":\"formula_24\"},\"end\":49434,\"start\":49142},{\"attributes\":{\"id\":\"formula_25\"},\"end\":49853,\"start\":49823},{\"attributes\":{\"id\":\"formula_26\"},\"end\":50107,\"start\":49941},{\"attributes\":{\"id\":\"formula_27\"},\"end\":50582,\"start\":50519},{\"attributes\":{\"id\":\"formula_28\"},\"end\":51183,\"start\":50662},{\"attributes\":{\"id\":\"formula_29\"},\"end\":51778,\"start\":51627},{\"attributes\":{\"id\":\"formula_30\"},\"end\":52578,\"start\":51949},{\"attributes\":{\"id\":\"formula_31\"},\"end\":53266,\"start\":52770},{\"attributes\":{\"id\":\"formula_32\"},\"end\":53884,\"start\":53689},{\"attributes\":{\"id\":\"formula_33\"},\"end\":54314,\"start\":54239},{\"attributes\":{\"id\":\"formula_34\"},\"end\":54731,\"start\":54556},{\"attributes\":{\"id\":\"formula_35\"},\"end\":54938,\"start\":54872},{\"attributes\":{\"id\":\"formula_36\"},\"end\":55032,\"start\":54969},{\"attributes\":{\"id\":\"formula_37\"},\"end\":55175,\"start\":55107},{\"attributes\":{\"id\":\"formula_38\"},\"end\":55459,\"start\":55380},{\"attributes\":{\"id\":\"formula_39\"},\"end\":56120,\"start\":55621},{\"attributes\":{\"id\":\"formula_40\"},\"end\":56348,\"start\":56253},{\"attributes\":{\"id\":\"formula_41\"},\"end\":56783,\"start\":56739},{\"attributes\":{\"id\":\"formula_42\"},\"end\":56912,\"start\":56791},{\"attributes\":{\"id\":\"formula_43\"},\"end\":57512,\"start\":57358},{\"attributes\":{\"id\":\"formula_44\"},\"end\":57797,\"start\":57732},{\"attributes\":{\"id\":\"formula_45\"},\"end\":58287,\"start\":57998},{\"attributes\":{\"id\":\"formula_46\"},\"end\":58454,\"start\":58319},{\"attributes\":{\"id\":\"formula_47\"},\"end\":58724,\"start\":58631},{\"attributes\":{\"id\":\"formula_48\"},\"end\":59344,\"start\":59149},{\"attributes\":{\"id\":\"formula_49\"},\"end\":59672,\"start\":59365},{\"attributes\":{\"id\":\"formula_50\"},\"end\":61223,\"start\":60572},{\"attributes\":{\"id\":\"formula_51\"},\"end\":61664,\"start\":61425},{\"attributes\":{\"id\":\"formula_52\"},\"end\":62656,\"start\":62148},{\"attributes\":{\"id\":\"formula_53\"},\"end\":62907,\"start\":62842},{\"attributes\":{\"id\":\"formula_54\"},\"end\":63166,\"start\":63091},{\"attributes\":{\"id\":\"formula_55\"},\"end\":63454,\"start\":63372},{\"attributes\":{\"id\":\"formula_56\"},\"end\":64059,\"start\":63575},{\"attributes\":{\"id\":\"formula_57\"},\"end\":64412,\"start\":64184},{\"attributes\":{\"id\":\"formula_58\"},\"end\":64717,\"start\":64652},{\"attributes\":{\"id\":\"formula_59\"},\"end\":65443,\"start\":64973},{\"attributes\":{\"id\":\"formula_60\"},\"end\":65787,\"start\":65703},{\"attributes\":{\"id\":\"formula_61\"},\"end\":66005,\"start\":65947},{\"attributes\":{\"id\":\"formula_62\"},\"end\":66235,\"start\":66170},{\"attributes\":{\"id\":\"formula_63\"},\"end\":66738,\"start\":66371},{\"attributes\":{\"id\":\"formula_64\"},\"end\":66863,\"start\":66786},{\"attributes\":{\"id\":\"formula_65\"},\"end\":67652,\"start\":67013}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":24688,\"start\":24681},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":26580,\"start\":26573},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":26710,\"start\":26703},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":27544,\"start\":27537},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":28203,\"start\":28196},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":28434,\"start\":28426},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":28477,\"start\":28470},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":28716,\"start\":28709},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":28763,\"start\":28756},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":28860,\"start\":28853},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":31849,\"start\":31842},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":32959,\"start\":32952}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1467,\"start\":1455},{\"attributes\":{\"n\":\"2\"},\"end\":11344,\"start\":11338},{\"attributes\":{\"n\":\"2.1\"},\"end\":15794,\"start\":15763},{\"attributes\":{\"n\":\"3\"},\"end\":19719,\"start\":19708},{\"attributes\":{\"n\":\"4\"},\"end\":29121,\"start\":29111},{\"end\":32151,\"start\":32138},{\"end\":35403,\"start\":35396},{\"end\":42250,\"start\":42214},{\"end\":43261,\"start\":43216},{\"end\":52769,\"start\":52753},{\"end\":53486,\"start\":53458},{\"end\":57192,\"start\":57170},{\"end\":60571,\"start\":60554},{\"end\":61424,\"start\":61407},{\"end\":61831,\"start\":61799},{\"end\":64183,\"start\":64166},{\"end\":64524,\"start\":64503},{\"end\":64820,\"start\":64796},{\"end\":67909,\"start\":67904},{\"end\":71079,\"start\":71069},{\"end\":71136,\"start\":71126},{\"end\":71266,\"start\":71256},{\"end\":71476,\"start\":71444},{\"end\":71911,\"start\":71889},{\"end\":72245,\"start\":72240},{\"end\":72342,\"start\":72333},{\"end\":73713,\"start\":73704},{\"end\":81393,\"start\":81384},{\"end\":81586,\"start\":81577},{\"end\":82967,\"start\":82958},{\"end\":85273,\"start\":85264}]", "table": "[{\"end\":73702,\"start\":72710},{\"end\":81382,\"start\":78825},{\"end\":81575,\"start\":81403},{\"end\":82956,\"start\":81974},{\"end\":85262,\"start\":83318},{\"end\":86075,\"start\":85781},{\"end\":86402,\"start\":86215}]", "figure_caption": "[{\"end\":68217,\"start\":67911},{\"end\":69040,\"start\":68220},{\"end\":71067,\"start\":69043},{\"end\":71124,\"start\":71081},{\"end\":71254,\"start\":71138},{\"end\":71442,\"start\":71268},{\"end\":71887,\"start\":71482},{\"end\":72238,\"start\":71916},{\"end\":72331,\"start\":72247},{\"end\":72710,\"start\":72344},{\"end\":78825,\"start\":73715},{\"end\":81403,\"start\":81395},{\"end\":81974,\"start\":81588},{\"end\":83318,\"start\":82969},{\"end\":85781,\"start\":85275},{\"end\":86215,\"start\":86078}]", "figure_ref": "[{\"end\":25507,\"start\":25498},{\"end\":34013,\"start\":34005},{\"end\":40754,\"start\":40746},{\"end\":40903,\"start\":40895},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":40956,\"start\":40947},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":42130,\"start\":42121},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":42768,\"start\":42759},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":42888,\"start\":42879},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":44948,\"start\":44939},{\"end\":45689,\"start\":45681},{\"end\":45804,\"start\":45796}]", "bib_author_first_name": "[{\"end\":91544,\"start\":91541},{\"end\":91561,\"start\":91555},{\"end\":91575,\"start\":91570},{\"end\":91585,\"start\":91580},{\"end\":91600,\"start\":91595},{\"end\":91938,\"start\":91929},{\"end\":91952,\"start\":91947},{\"end\":91961,\"start\":91957},{\"end\":91971,\"start\":91966},{\"end\":91982,\"start\":91981},{\"end\":91990,\"start\":91983},{\"end\":92008,\"start\":92000},{\"end\":92021,\"start\":92016},{\"end\":92323,\"start\":92316},{\"end\":92336,\"start\":92331},{\"end\":92353,\"start\":92345},{\"end\":92367,\"start\":92362},{\"end\":92737,\"start\":92730},{\"end\":92753,\"start\":92746},{\"end\":92771,\"start\":92766},{\"end\":93128,\"start\":93122},{\"end\":93153,\"start\":93148},{\"end\":93155,\"start\":93154},{\"end\":93171,\"start\":93164},{\"end\":93189,\"start\":93185},{\"end\":93197,\"start\":93190},{\"end\":93207,\"start\":93202},{\"end\":93219,\"start\":93214},{\"end\":93662,\"start\":93656},{\"end\":93678,\"start\":93673},{\"end\":93693,\"start\":93688},{\"end\":94070,\"start\":94065},{\"end\":94098,\"start\":94090},{\"end\":94112,\"start\":94109},{\"end\":94114,\"start\":94113},{\"end\":94403,\"start\":94396},{\"end\":94415,\"start\":94408},{\"end\":94431,\"start\":94423},{\"end\":94441,\"start\":94437},{\"end\":94921,\"start\":94907},{\"end\":94931,\"start\":94927},{\"end\":94943,\"start\":94936},{\"end\":95165,\"start\":95160},{\"end\":95182,\"start\":95175},{\"end\":95199,\"start\":95192},{\"end\":95215,\"start\":95207},{\"end\":95229,\"start\":95224},{\"end\":95728,\"start\":95722},{\"end\":95762,\"start\":95755},{\"end\":95777,\"start\":95776},{\"end\":95796,\"start\":95787},{\"end\":95798,\"start\":95797},{\"end\":95821,\"start\":95806},{\"end\":96188,\"start\":96183},{\"end\":96207,\"start\":96197},{\"end\":96225,\"start\":96220},{\"end\":96967,\"start\":96962},{\"end\":96983,\"start\":96976},{\"end\":97000,\"start\":96993},{\"end\":97010,\"start\":97009},{\"end\":97024,\"start\":97019},{\"end\":97378,\"start\":97373},{\"end\":97395,\"start\":97388},{\"end\":97411,\"start\":97405},{\"end\":97425,\"start\":97420}]", "bib_author_last_name": "[{\"end\":91553,\"start\":91545},{\"end\":91568,\"start\":91562},{\"end\":91578,\"start\":91576},{\"end\":91593,\"start\":91586},{\"end\":91609,\"start\":91601},{\"end\":91945,\"start\":91939},{\"end\":91955,\"start\":91953},{\"end\":91964,\"start\":91962},{\"end\":91979,\"start\":91972},{\"end\":91998,\"start\":91991},{\"end\":92014,\"start\":92009},{\"end\":92031,\"start\":92022},{\"end\":92329,\"start\":92324},{\"end\":92343,\"start\":92337},{\"end\":92360,\"start\":92354},{\"end\":92378,\"start\":92368},{\"end\":92744,\"start\":92738},{\"end\":92764,\"start\":92754},{\"end\":92781,\"start\":92772},{\"end\":93134,\"start\":93129},{\"end\":93146,\"start\":93136},{\"end\":93162,\"start\":93156},{\"end\":93183,\"start\":93172},{\"end\":93200,\"start\":93198},{\"end\":93212,\"start\":93208},{\"end\":93226,\"start\":93220},{\"end\":93234,\"start\":93228},{\"end\":93671,\"start\":93663},{\"end\":93686,\"start\":93679},{\"end\":93703,\"start\":93694},{\"end\":94088,\"start\":94071},{\"end\":94107,\"start\":94099},{\"end\":94128,\"start\":94115},{\"end\":94132,\"start\":94130},{\"end\":94406,\"start\":94404},{\"end\":94421,\"start\":94416},{\"end\":94435,\"start\":94432},{\"end\":94445,\"start\":94442},{\"end\":94925,\"start\":94922},{\"end\":94934,\"start\":94932},{\"end\":94949,\"start\":94944},{\"end\":95173,\"start\":95166},{\"end\":95190,\"start\":95183},{\"end\":95205,\"start\":95200},{\"end\":95222,\"start\":95216},{\"end\":95236,\"start\":95230},{\"end\":95753,\"start\":95729},{\"end\":95767,\"start\":95763},{\"end\":95774,\"start\":95769},{\"end\":95785,\"start\":95778},{\"end\":95804,\"start\":95799},{\"end\":95827,\"start\":95822},{\"end\":95835,\"start\":95829},{\"end\":96195,\"start\":96189},{\"end\":96218,\"start\":96208},{\"end\":96235,\"start\":96226},{\"end\":96974,\"start\":96968},{\"end\":96991,\"start\":96984},{\"end\":97007,\"start\":97001},{\"end\":97017,\"start\":97011},{\"end\":97030,\"start\":97025},{\"end\":97041,\"start\":97032},{\"end\":97386,\"start\":97379},{\"end\":97403,\"start\":97396},{\"end\":97418,\"start\":97412},{\"end\":97435,\"start\":97426}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":1193239},\"end\":91885,\"start\":91468},{\"attributes\":{\"doi\":\"abs/1812.01097\",\"id\":\"b1\"},\"end\":92266,\"start\":91887},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":30587588},\"end\":92657,\"start\":92268},{\"attributes\":{\"doi\":\"arXiv:2010.00952\",\"id\":\"b3\"},\"end\":92979,\"start\":92659},{\"attributes\":{\"doi\":\"arXiv:1911.08250\",\"id\":\"b4\"},\"end\":93562,\"start\":92981},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":166228166},\"end\":94019,\"start\":93564},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":13721898},\"end\":94348,\"start\":94021},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":206594692},\"end\":94789,\"start\":94350},{\"attributes\":{\"id\":\"b8\"},\"end\":95158,\"start\":94791},{\"attributes\":{\"doi\":\"arXiv:1912.04977\",\"id\":\"b9\"},\"end\":95644,\"start\":95160},{\"attributes\":{\"doi\":\"abs/1910.06378\",\"id\":\"b10\"},\"end\":96115,\"start\":95646},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":210839089},\"end\":96866,\"start\":96117},{\"attributes\":{\"doi\":\"arXiv:2006.11573\",\"id\":\"b12\"},\"end\":97290,\"start\":96868},{\"attributes\":{\"doi\":\"arXiv:1610.02527\",\"id\":\"b13\"},\"end\":97656,\"start\":97292}]", "bib_title": "[{\"end\":91539,\"start\":91468},{\"end\":92314,\"start\":92268},{\"end\":93654,\"start\":93564},{\"end\":94063,\"start\":94021},{\"end\":94394,\"start\":94350},{\"end\":96181,\"start\":96117}]", "bib_author": "[{\"end\":91555,\"start\":91541},{\"end\":91570,\"start\":91555},{\"end\":91580,\"start\":91570},{\"end\":91595,\"start\":91580},{\"end\":91611,\"start\":91595},{\"end\":91947,\"start\":91929},{\"end\":91957,\"start\":91947},{\"end\":91966,\"start\":91957},{\"end\":91981,\"start\":91966},{\"end\":92000,\"start\":91981},{\"end\":92016,\"start\":92000},{\"end\":92033,\"start\":92016},{\"end\":92331,\"start\":92316},{\"end\":92345,\"start\":92331},{\"end\":92362,\"start\":92345},{\"end\":92380,\"start\":92362},{\"end\":92746,\"start\":92730},{\"end\":92766,\"start\":92746},{\"end\":92783,\"start\":92766},{\"end\":93136,\"start\":93122},{\"end\":93148,\"start\":93136},{\"end\":93164,\"start\":93148},{\"end\":93185,\"start\":93164},{\"end\":93202,\"start\":93185},{\"end\":93214,\"start\":93202},{\"end\":93228,\"start\":93214},{\"end\":93236,\"start\":93228},{\"end\":93673,\"start\":93656},{\"end\":93688,\"start\":93673},{\"end\":93705,\"start\":93688},{\"end\":94090,\"start\":94065},{\"end\":94109,\"start\":94090},{\"end\":94130,\"start\":94109},{\"end\":94134,\"start\":94130},{\"end\":94408,\"start\":94396},{\"end\":94423,\"start\":94408},{\"end\":94437,\"start\":94423},{\"end\":94447,\"start\":94437},{\"end\":94927,\"start\":94907},{\"end\":94936,\"start\":94927},{\"end\":94951,\"start\":94936},{\"end\":95175,\"start\":95160},{\"end\":95192,\"start\":95175},{\"end\":95207,\"start\":95192},{\"end\":95224,\"start\":95207},{\"end\":95238,\"start\":95224},{\"end\":95755,\"start\":95722},{\"end\":95769,\"start\":95755},{\"end\":95776,\"start\":95769},{\"end\":95787,\"start\":95776},{\"end\":95806,\"start\":95787},{\"end\":95829,\"start\":95806},{\"end\":95837,\"start\":95829},{\"end\":96197,\"start\":96183},{\"end\":96220,\"start\":96197},{\"end\":96237,\"start\":96220},{\"end\":96976,\"start\":96962},{\"end\":96993,\"start\":96976},{\"end\":97009,\"start\":96993},{\"end\":97019,\"start\":97009},{\"end\":97032,\"start\":97019},{\"end\":97043,\"start\":97032},{\"end\":97388,\"start\":97373},{\"end\":97405,\"start\":97388},{\"end\":97420,\"start\":97405},{\"end\":97437,\"start\":97420}]", "bib_venue": "[{\"end\":91660,\"start\":91611},{\"end\":91927,\"start\":91887},{\"end\":92442,\"start\":92380},{\"end\":92728,\"start\":92659},{\"end\":93120,\"start\":92981},{\"end\":93771,\"start\":93705},{\"end\":94171,\"start\":94134},{\"end\":94524,\"start\":94447},{\"end\":94905,\"start\":94791},{\"end\":95302,\"start\":95254},{\"end\":95720,\"start\":95646},{\"end\":96377,\"start\":96237},{\"end\":96960,\"start\":96868},{\"end\":97371,\"start\":97292},{\"end\":94588,\"start\":94526},{\"end\":95368,\"start\":95304},{\"end\":96489,\"start\":96379}]"}}}, "year": 2023, "month": 12, "day": 17}