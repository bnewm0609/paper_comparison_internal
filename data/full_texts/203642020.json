{"id": 203642020, "updated": "2023-11-08 05:49:32.447", "metadata": {"title": "An Empirical Study of C++ Vulnerabilities in Crowd-Sourced Code Examples", "authors": "[{\"first\":\"Morteza\",\"last\":\"Verdi\",\"middle\":[]},{\"first\":\"Ashkan\",\"last\":\"Sami\",\"middle\":[]},{\"first\":\"Jafar\",\"last\":\"Akhondali\",\"middle\":[]},{\"first\":\"Foutse\",\"last\":\"Khomh\",\"middle\":[]},{\"first\":\"Gias\",\"last\":\"Uddin\",\"middle\":[]},{\"first\":\"Alireza\",\"last\":\"Motlagh\",\"middle\":[\"Karami\"]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2019, "month": 10, "day": 3}, "abstract": "Software developers share programming solutions in Q&A sites like Stack Overflow. The reuse of crowd-sourced code snippets can facilitate rapid prototyping. However, recent research shows that the shared code snippets may be of low quality and can even contain vulnerabilities. This paper aims to understand the nature and the prevalence of security vulnerabilities in crowd-sourced code examples. To achieve this goal, we investigate security vulnerabilities in the C++ code snippets shared on Stack Overflow over a period of 10 years. In collaborative sessions involving multiple human coders, we manually assessed each code snippet for security vulnerabilities following CWE (Common Weakness Enumeration) guidelines. From the 72,483 reviewed code snippets used in at least one project hosted on GitHub, we found a total of 69 vulnerable code snippets categorized into 29 types. Many of the investigated code snippets are still not corrected on Stack Overflow. The 69 vulnerable code snippets found in Stack Overflow were reused in a total of 2859 GitHub projects. To help improve the quality of code snippets shared on Stack Overflow, we developed a browser extension that allow Stack Overflow users to check for vulnerabilities in code snippets when they upload them on the platform.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1910.01321", "mag": "3085545669", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/tse/VerdiSAKUM22", "doi": "10.1109/tse.2020.3023664"}}, "content": {"source": {"pdf_hash": "92d211c65ae8c8006c07d34dfa0587e278d0ac00", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1910.01321v1.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/1910.01321", "status": "GREEN"}}, "grobid": {"id": "3ecb71c198f9f7f68e27d2765470f09eb55bfc70", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/92d211c65ae8c8006c07d34dfa0587e278d0ac00.txt", "contents": "\nAn Empirical Study of C++ Vulnerabilities in Crowd-Sourced Code Examples\n\n\nMorteza Verdi \nAshkan Sami \nJafar Akhondali \nFoutse Khomh \nGias Uddin \nAlireza Karami Motlagh \nAn Empirical Study of C++ Vulnerabilities in Crowd-Sourced Code Examples\n1Index Terms-Stack OverflowSoftware SecurityC++SOTorrentVulnerability MigrationGitHubVulnerability Evolution !\nSoftware developers share programming solutions in Q&A sites like Stack Overflow. The reuse of crowd-sourced code snippets can facilitate rapid prototyping. However, recent research shows that the shared code snippets may be of low quality and can even contain vulnerabilities. This paper aims to understand the nature and the prevalence of security vulnerabilities in crowd-sourced code examples. To achieve this goal, we investigate security vulnerabilities in the C++ code snippets shared on Stack Overflow over a period of 10 years. In collaborative sessions involving multiple human coders, we manually assessed each code snippet for security vulnerabilities following CWE (Common Weakness Enumeration) guidelines. From the 72,483 reviewed code snippets used in at least one project hosted on GitHub, we found a total of 69 vulnerable code snippets categorized into 29 types. Many of the investigated code snippets are still not corrected on Stack Overflow. The 69 vulnerable code snippets found in Stack Overflow were reused in a total of 2859 GitHub projects. To help improve the quality of code snippets shared on Stack Overflow, we developed a browser extension that allow Stack Overflow users to check for vulnerabilities in code snippets when they upload them on the platform.\n\nINTRODUCTION\n\nA major goal of software development is to deliver high quality software in timely and cost-efficient manner. Code reuse is an accepted practice and an essential approach to achieve this premise [1]. The reused code snippets come from many different sources and in different forms, e.g., third-party library [2], open source software [3], and Question and Answer (Q&A) websites such as Stack Overflow [4], [5]. Sharing code snippets and code examples is also a common learning practice [6]. Novices and even more senior developers leverage code examples and explanations shared on platforms like Stack Overflow, to learn how to perform new programming tasks or use certain APIs [1], [7], [8], [9]. Multiple studies [10], [11], [12] have investigated knowledge flow and knowledge sharing from Stack Overflow answers to repositories of open source software hosted in GitHub. They report that code snippets found on Stack Overflow can be toxic, i.e., of poor quality, and can potentially lead to license violations [12]. An important aspect of quality that has not been investigated in details by the research community is security. If vulnerable codes snippets are migrated from Stack Overflow to applications, these applications will be prone to attacks.\n\nMost studies published on security aspects of code snip- pets posted on Stack Overflow focused on Java and Python; overlooking C++ which is the fourth most popular programming language [13]. C++ is the language of choice for embedded, resource-constrained programs. It is also extensively used in large and distributed systems. Vulnerabilities in C++ code snippets are therefore likely to have a major impact. However, to the best of our knowledge, no study has examined the security aspects of C++ Stack overflow code snippets. This paper aims to fill this gap in the literature. More specifically, we aim to understand the nature and the prevalence of security vulnerabilities in code examples shared on Stack Overflow. To achieve this goal, we empirically study C++ vulnerabilities in code examples shared in Stack Overflow along the following two dimensions:\n\n\u2022 Prevalence. We review the C++ vulnerability types contained in a Stack Overflow data-set named SOTOR-RENT [14], [15] and analyze their evolution over time; in particular their migration to GitHub projects. From 72,483 C++ code snippets reused in at least one GitHub project we found 69 vulnerabilities belonging to 29 different types of vulnerabilities. \u2022 Propagation. We investigate how the vulnerable code snippets were reused in GitHub repositories. The 69 identified vulnerable code snippets are used in 2589 GitHub files. The most common vulnerability propagated from Stack Overflow to GitHub is CWE-150 (Improper neutralization of space, meta, or control space).\n\nTo assist developers in reusing code from stack Overflow safely, we developed a Chrome extension that allow checking for vulnerabilities in code snippets when they are uploaded on Stack Overflow. We tracked all the vulnerable C++ code snippets found on Stack Overflow to their reusing projects on GitHub.\n\nWe conducted a survey of GitHub developers who copied Vulnerable Code from Stack Overflow to their GitHub repositories.\n\nOne of the challenges in software is the reuse of vulnerable codes to accelerate the development of a software product, which ultimately leads to a decrease in software quality [8], [9]. Through this study, we aim to inform programmers and developers about the risks of reusing vulnerable code snippets from Stack Overflow.\n\nThe remainder of this paper is organised as follows. Section 2 provides background information about code reuse and discusses the related literature. Section 3 introduces our research questions and data collection and data processing. Section 4 and Section 5 discusses obtained results, while Section 6 discusses the implications of our findings. Section 7 discusses threats to the validity of our study and Section 8 concludes the paper; outlining some avenues for future works.\n\n\nBACKGROUND AND RELATED WORK\n\nIn this section, we provide background information about security vulnerabilities and review the related literature.\n\n\nCWE (Common Weakness Enumeration\n\nCWE is a community-developed list of common software security weaknesses. It serves as a common reference, a measuring stick for software security tools, and as a baseline for weakness identification, mitigation, and prevention efforts. It is regarded as an universal online dictionary of weaknesses that have been found in computer software. The purpose of CWE is to facilitate the effective use of tools that can identify, find and resolve bugs, vulnerabilities and exposures, in computer software before the programs are distributed to the public.\n\n\nReusing of Code Shared in Stack Overflow\n\nStack Overflow is regarded as the most popular question and answer website for software developers [15]. Software developers benefit from SO posts, while programming [8], [12], [18], [19], [20], and read about the technologies and tools needed for development [21], [22], [23]. Thus, research on Stack Overflow is of high importance in software community. Developers create and maintain software by standing on the shoulders of others [24]; they reuse components and libraries, and mine the Web for information that can help them in their tasks [25]. For help with their code, developers often turn to programming question and answer (Q&A) communities, most visible of which is Stack Overflow [26], [27].\n\nXia et al. [11] show that a large number of open source systems reuse outdated third-party libraries which can lead to harmful effects to the software because they may introduce security flaws in the software.\n\nAbdalkareem et al. [1] examined F-Droid repositories, and identified clones between Stack Overflow posts and Android apps. They observed that copied code from SO posts can have an adverse effect on the quality of applications.\n\nYang et al. [10] analyzed 909k non-fork Python projects hosted on GitHub, which contain 290M function definitions, and 1.9M Python snippets captured in Stack Overflow and performed a quantitative analysis of block-level code cloning intra and inter Stack Overflow and GitHub.\n\nAkanda Nishi et al. [28] studied code duplication between two popular sources of software development information: the Stack Overflow Q&A site and software development tutorials, to understand the evolution of duplicated information overtime.\n\nAn et al. [20] investigated clones between 399 Android apps and Stack Overflow posts. They found 1,226 code snippets which were reused from 68 Android apps. This reused of code snippets resulted in 1,279 cases of potential license violations.\n\n\nSecurity challenges of Stack Overflow code snippets\n\nSeveral studies have reported the presence of insecure code in highly up-voted, and accepted answers on Stack Overflow [8], [29], [30]. However, these studies did not investigated C++ code snippets. Yet, C++ is the fourth most popular programming language. The use of insecure code snippets has been linked to multiple software attacks in which user credentials, credit card numbers, and other private information were stolen [31]. C++ is reported to  [8] , [19], [25], [26]. The studies [10], [11], [12], [20] included reusability in Java and Android application, [1], [40] in Python, [28] in Third party code, [41] in IDE, [42] in API documentation, [43] in Php.\n\nThis study indicates the reusability of Stack Overflow C++ codes to GitHub projects and the prevalence of these codes in GitHub repositories that until now not mentioned.\n\n\nSecurity of C++ Posts in Stack Overflow\n\nSoftware security is a very broad and, at the same time, extremely difficult to detect specially for C++ programming language. We analyze C++ code snippets in Stack Overflow answer posts.\n\nStudies [8], [29] in java Script and android application, [7], [30], [35] in java and [23] in python showed the Stack Overflow have a security vulnerability in their code snippets that uses in applications, open source projects, and APIs.\n\nWe carefully scrutinized the vulnerability and expressed each of them with a CWE vulnerability label of the C++ code in Stack Overflow answer posts so far no study has been conducted in this area.\n\n\nSecurity in GitHub Repositories\n\nThis study shows all possible vulnerable C++ GitHub projects used Stack Overflow vulnerable code snippets.\n\nStudy about analysis of security in GitHub projects contain secure coding, sentiment analysis, security issues [36], [37], [38], [39].\n\nNo studies exists specifically addresses the C++ vulnerable GitHub projects that migrated from Stack Overflow codes. be prone to misuses (e.g., memory corruption bugs) that can easily lead to vulnerable code and exploitable applications [32], [33], [34]. Fischer et al. [8] found insecure code snippets from Stack Overflow copied into 196,403 Android applications, published on Google Play. Zhang et al. [35] investigated the quality of Stack Overflow code snippets by examining the misuse of API calls. They reported that approximately 31% of their analysed code snippets possibly incorporate API misuses that could lead to failures and-or resource leakages.\n\n\nSecurity issues in GitHub\n\nRahman et al. [36] detected seven types of security smells that are indicative of security weaknesses in IaC scripts and identified 21,201 occurrences of security smells that include 1326 occurrences of hard-coded passwords. Zahedi et al. [37] examined issue topics in GitHub repositories and found that only 3% of them were related to security. The majority of these security issues were cryptography issues. Pletea et al. [38] examined security-related discussions on GitHub, and report that they represent approximately 10% of all discussions on GitHub. They also report that security related discussions are often associated with negative emotions. Acar et al. [39] conducted an experiment with active GitHub users to examine the validity of recruiting convenience samples in security-related study. They observed that neither the self-reported status of participants (i.e., as student or professional developers) nor the security background of the participants correlated with their capacity to complete security tasks successfully.\n\n\nRESEARCH QUESTIONS AND DATA COLLECTION\n\n\nResearch Questions\n\nWe explore the following Research Questions (RQs): RQ1: How prevalent are C++ vulnerabilities in Stack Overflow code snippets? Previous work on other programming languages revealed the existence of vulnerable code in Stack Overflow [7] [44]. To understand the existence and distribution of insecure C++ codes in Stack Overflow, we reviewed and analyzed C++ answer posts throughout the ten years of Stack Overflow history stored in SOTorrent that had link to GitHub projects. RQ2: How are the vulnerable C++ code exampled shared in Stack Overflow reused in GitHub repositories? Knowledge sharing by code reuse routinely occurs between Stack Overflow and GitHub. The effect of vulnerable code migration to GitHub projects have not been investigated in any programming languages so far. Detected C++ vulnerable Stack Overflow code snippets might have migrated to GitHub and ended up deployed in the field. This research question aims to examine the extent of this phenomenon.\n\n\nData collection\n\nIn this section, we describe the data collection and analysis approaches that we used to answer our two research questions. Figure 1 shows a general overview of our data processing approach. We will describe each step in our data processing approach. The corresponding data and scripts are available at [45].  SOTorrent provides access to the version history of Stack Overflow content for ten years. As shown in Figure 2, whole post, individual text or code snippet can be accessed independently. According to Figure 3, SOTorrent connects code snippets from Stack Overflow posts to other platforms by aggregating URLs from surrounding text blocks and comments and by collecting references from GitHub files to Stack Overflow posts [14], [15]. \n\n\nData Preprocessing\n\nThe total count of questions with C++ tag was 583,415 out of 16,389,567. These questions had 1,074,990 answers, including previous and modified versions. A total of 1,738,346 version histories existed. As shown in Figure 5, at least 50% of the posts in the Stack Overflow only had one edit in their context.\n\nOur study aimed to analyze code snippets that migrated to GitHub; therefore, answers without code snippets were removed. Answers with one or more code snippets summed up to 1,032,696. The count of answers that migrated to GitHub and had C++ tag was 1,770. These 1,770 C++ answers have been referenced in 14,779 GitHub files. These 14,779 references came from 8,172 unique projects. The distribution of GitHub files in GitHub projects is shown in Figure 4. A vulnerability might exist in older versions of a code snippet in an answer, and a developer might copied that vulnerable code snippet into a GitHub file at that time.\n\nSo we had to also analyze older versions of code snippets too. Including older versions of the code snippets, of these answers there were 121,892 possible cases of migrations from code snippets to GitHub.  \n\n\nData cleaning\n\nNot all code snippets in SOTorrent were actually C++ codes. Figure 7 shows a tagged code snippet supposed to be C++. Other examples of pseudo codes or plain texts tagged as code snippet could be found. Syntaxnet, a natural language processing tool was used to detect code snippets that had actual C++ codes. Syntaxnet is one of the most accurate parsers available [46]. The main difference between Syntaxnet and other NLP tools is that Syntaxnet does not use the meaning of the sentence, but also considers the words independent of each other. Among 121,892 possible code snippets only 72,483 code snippets were actually C++ code snippets included in 1,325 answers.\n\nAt SOTorrent, each change in question or answer in Stack Overflow is stored as a set of records but links to GitHub projects are only provided just at the answer level. Therefore, we must review all the code snippets within SOTorrent for vulnerabilities but to investigate the migration we have to follow the link to GitHub at the answer level of the code snippet. SourcererCC [47] was used to find cloned code snippets with exact similarity (Type-1 clone) and 2,056 different sets of similar code snippets within SOTorrent were identified. This makes vulnerability assessments more efficient. On the other hand, when a vulnerability is found in a clone, all the similar clones have the same vulnerability. Afterwards, we can find out possible dangerous migrations in links to GitHub projects provided at the answer level of all the similar code snippet.\n\n\nPREVALENCE OF C++ VULNERABILITIES IN STACK OVERFLOW CODE EXAMPLES (RQ1)\n\n\nApproach\n\nIn order to make the review process more efficient and systematic we created a web application having a simple interface with language-specific syntax highlighting. The web-based review application could mark code snippets as vulnerable, assign one or more CWE tags for each code snippet and view all similar code of a same answer at once.\n\n\nFig. 8: Flowchart of code reviewing in first step\n\nThree experienced master students (first, third and sixth authors) in C++ security issues were chosen to review each code snippets. As shown in previous section, only 2,056 unique code snippets needed to be reviewed. The reviewers tagged the vulnerabilities by appropriate CWE's. At the first step of manual inspection process, the goal was to reduce data-set size without losing accuracy. Thus, all code snippets that were certainly not vulnerable were removed, As shown in Figure 8, our three reviewers inspected the code snippets and marked any possible vulnerable code snippet as vulnerable code. If a vulnerability within a code snippet was noticeable within first round of review, They would write a short description explaining why they thought the code snippet might be vulnerable. The specific steps that were followed are described below. This process took 868 hours. In contrast, code snippets not having a specific functionality or which were only used for teaching purposes (and did not have vulnerabilities) were removed. During the review process, reviewers were directly in contact with each other and solved their disagreement through discussions. According to Fleiss' Kappa [48] we calculate Cohen's Kappa [48] score agreement between three raters 0.26 that is a fair agreement. After this first stage of thorough code review, 498 possible vulnerable code snippets were detected. The first round of review was presented to author 2, a professor in software security for validation. A group meeting of 12 graduate students who previously had system and/or software security courses at graduate level finalized the first round of review. The second round of review process was more robust and followed a self-established guidelines. In order to find vulnerabilities in answers, reviewers needed to indulge deeper into the process and have a better understanding of code snippets and its evolution. Based on knowledge obtained from first round of review, we established a set of guidelines explained bellow to find as many vulnerabilities in the code snippets as possible and not miss any.\n\n\n1) Read the corresponding question to answer with the probable vulnerable code snippet:\n\nTo have a better understanding of the reasons why developers shared the code snippet on Stack Overflow. 2) Read last version of answer, its description and analyze evolution of code over time: To find out whether the vulnerability has been fixed or evolved within the various versions. 3) Read comments of answers: To find out if the vulnerability has been reported through comments of the post. As an example, in Figure 9, 1 st and 2 nd comments indicated a vulnerability, and 3 rd and 4 th comments indicated deprecated answer. Source code of answer is also included in listing 1. Usually security is not the first priority of answerers in Stack Overflow. Answerers focus more on functionality than security. For example in listing 5, the goal is to read a vector, but no bounds checking is performed. Using a larger value than index bound can happen either by a programming mistake or could be the doing of an attacker.\n\nAfter the second round of review process, the identified vulnerable code snippets were confirmed and tagged based on CWE's. One or multiple CWE tag(s) were assigned to each code snippet. These tags allowed us to track the evolution of the security of the code snippets throughout the evolution of Stack Overflow.\n\n\nResults\n\nOverall, the distribution of all C++ answers from 2008 to 2018 is shown in Figure 11. If one hypothesizes that Stack Overflow usage reflects the popularity of the programming language, C++ has been the most popular programming language in 2013, and its usage declined after that. The distribution of Stack Overflow answers linked to GitHub projects by year, also shown in Figure 11, again shows that in 2013, C++ had the most migrations to GitHub projects. From our manual reviews of the code snippets, we found 99 vulnerable code snippets residing in 69 answers. By looking at the distribution of vulnerable answers, we find that most vulnerable answers were created in 2011 (as shown in Figure  10). The frequency of CWE's in code snippets is presented in Figure 12. CWE-1006 and CWE-754 are the most frequent ones. The list of CWEs that have been found is explained in Table 3. A complete description of CWE's can be found at [50]. In the following, we present some examples of vulnerabilities found in the inspected code snippets.  \n\n\nImproper input validation:\n\nWhen software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. \n\n\nOS command injection:\n\nConstructs all or part of an OS command using externally-influenced input from an upstream component, that could modify the intended OS command when it is sent to a downstream component. Improper encoding or escaping of output A structured message is prepared to communicate with another component, but encoding or escaping of the data is either missing or done incorrectly. 10 2\n\n\n121\n\n\nStack base buffer overflow\n\nThe situation is where the buffer is rewritten in the stack (like, a local variable or, rarely, a parameter to a function). 8 9 1 125\n\n\nOut-of-bounds Read\n\nThe software reads data past the end, or before the beginning, of the intended buffer. 16 1\n\n\nIncorrect calculation of buffer size\n\nDoes not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow. 13 1\n\n\n134\n\nUse of externally controlled format string Have been used a function that accepts a format string as an argument, but the format string originates from an external source. \n\n\nImproper Check for Unusual or Exceptional Conditions\n\nThis vulnerability occurs based on the assumption that events or specific circumstances never happen, such as low memory conditions, lack of access to resources. \n\n\n158\n\n\nImproper neutralization of null byte or null character\n\nThe input is received from a upstream component, but it does not neutralize or incorrectly neutralizes when null bytes are sent to a downstream component. \n\n\n190\n\nInteger overflow or wraparound Perform a calculation that can produce an integer overflow or wraparound, when the calculation is used for resource management or execution control. \n\n\n193\n\nOff by one error A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value. 8 1\n\n\nUncontrolled memory allocation\n\nMemory is allocated based on invalid size and allowing arbitrary amounts of memory to be allocated. \n\n\nUnchecked return value\n\nThe return value is not checked by a method or function, which may create an unexpected state. \n\n\nBad Coding Practices\n\nThese weaknesses are deemed to cause exploitation's that are not vulnerable by self but indicate that the application is not developed carefully. \n\n\nValidate input Weaknesses\n\nWeaknesses are related to the design and architecture of a system's input validation components that could lead to a degradation of the quality of data flow in a system. \n\n\nUntrusted search path\n\nThe application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. 10 1\n\n\n476\n\nNull pointer deference A NULL pointer dereference occurs when dereference a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. \n\n\nUse of obsolete function\n\nThe code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained. \n\n\nFunction call with incorrect specific arguments\n\nThe product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses. \n\n\nClassic buffer overflow\n\nBeen copied an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer. \n\n\nIncorrect calculation\n\nPerform a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. \n\n\n686\n\nFunction call with incorrect argument type A function, procedure, or procedure is called up with arguments that are not properly specified, resulting in always mistaken behavior and resulting weaknesses.  \n\n\n150\n\nImproper neutralization of escape, meta, or control sequence The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements when they are sent to a downstream component. 11 1\n\n\n758\n\nReliance on Undefined unspecific or implementation defined behavior\u0168 sed an API function, data structure, in a way that relies on properties that are not always guaranteed to hold for that entity. \n\n\nImproper handling of undefined values\n\nDoes not handled or incorrectly handled when a value is not defined or supported for the associated parameter, field, or argument name. 8 1\n\n\nloop with unreachable exit condition\n\nThe program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. \n\n\n369\n\nDivide by zero Typically occurs when an unexpected value is provided to the product, or an error occurs that is not properly detected. 8 [51] that may lead to unpredictable behaviour, memory corruption and application crash. If one pays special attention and always passes the length a number at maximum one less than the desired, the function works correctly, otherwise we have off-by-one error. Line 's[i] = alphanum[rand() % sizeof(alphanum) -1]' is faulty since size of 'alphanum' is '63', where the last character in the string indexed 69 th is 'NULL'. Therefore, once in a while a NULL may be included in the generated 'random' string. This vulnerability can be categorized as 'CWE-754: Improper check for unusual or exceptional conditions' [52], where an improper number may be used as a return of a function leading to a crash or other unintended behaviours. Another appropriate category is 'CWE-1006: Bad coding practices'. Stated differently, a generated random string with this algorithm may include 'NULL' in the middle of string. Moreover, 'rand()' is an obsolete function in C and C++. So another vulnerability category is 'CWE-477: Use of obsolete function' a major degradation in software quality. Another vulnerability exists within the code since the developer did not use a random seed before calling the function. Thus, the generated random number is not 'random' at all. Moreover, 'rand() % mod' is not a good practice since it returns lower bits which are not again random [53]. Another vulnerability is shown in Listing 2 of answer 21653558. The code snippet in this answer uses 'malloc' to allocate memory and passes its pointer to a function in QT library that requires a valid pointer. malloc return pointer may be set to NULL in case of malloc failure. Thus, the return pointer from malloc must be checked even if the amount of memory requested is small [54]. In this example, return value of malloc is not checked. This vulnerability is called CWE-252 [55]; Unchecked return value. In case of malloc failure null pointer dereference occurs. std :: string cur path = lua tostring )( L, \u22121 ); cur path.append( ';' ) ; cur path.append( path ); lua pop( L, 1 ) ; lua pushstring( L, cur path.c str () ) ; lua setfield ( L, \u22122, \"path\" ); lua pop( L, 1 ) ; return 0; } Listing 4 deals with system path programmatically, or different paths the program searches. The operation is dangerous and should be performed carefully. For example, 'path' in this function may contain multiple paths separated by ';'. For instance, '/usr/share/lua;/foo/bar/evil/path'. Having an untrusted search path within the paths produces the probability of arbitrary code execution with privilege of the program and redirection to a wrong file potentially triggering a crash. The vulnerability is called CWE-426: Untrusted search path. For more on this vulnerability, please refer to [56]. The search may lead to execution of programs, which in turn lead to unusual or exceptional conditions; i.e. CWE-754: Improper check for unusual or exceptional conditions. Moreover, all the return values of the functions in the code snippet are not checked. Thus, the snippet also has CWE-252: Unchecked return values. In Answer 41031865 shown in Listing 5, 'current index + sizeof(T)' can become larger than size of 'vec' due to CWE-1019: Validate inputs vulnerability. In addition, when index exceeds the limit, information leakage can occur or CWE-125; the vulnerability 'Out of bound read' is present. The vulnerability for other functions defined in this code snippet is exactly the same as the two vulnerable functions. However if filename in function includes a NULL character, all of above methods will fail. This is a common trick to bypass web application firewalls and file uploaders. Example: Validating 'shell.txt\\0.php' will return True for all of above functions.\n\n\nPROPAGATION OF C++ VULNERABLE CODE FROM STACK OVERFLOW TO GITHUB (RQ2)\n\n\nHow frequently are the vulnerable code examples from Stack Overflow copied to GitHub? (RQ2.1)\n\n\u2022 Approach. To detect the vulnerable code snippets that migrated to GitHub projects, it may seem plausible to use clone detection tools like SourcererCC [47]. However, the most effective clone detection tools work only for Java applications, e.g., Oreo [57]. The ones that can detect C++ clones only work at file or class level. For Java, SourcererCC can find cloned procedures but the same capability is not implemented for C++. The majority of vulnerable code segments that we found are functions or a part of a function. Therefore, we had to use some heuristics to search and find similar codes in linked GitHub projects. To find vulnerable clones, we searched for the signatures of the code snippets in Stack Overflow by looking at the sequences of keywords that can uniquely find them within GitHub projects. The used heuristics are explained below: We take motivation from previous work [58], [59] and use a rule-base approach to detect security flaws. We used rules because unlike keyword-based searching, rules are less susceptible to false positive [58], [59]. We select an ordered sequence of keywords that with or without them, the vulnerable code can be found within the linked GitHub projects. For each code version, we chose a unique set of words to identify that specific version in GitHub projects. For example, to detect vulnerable GitHub projects that used the code snippet shown in listing 1, we searched 'RAND()' keyword and for older version chose RAND() and )-1 keywords. To evaluate this method, we randomly selected five GitHub files from from the 69 vulnerable answers and reviewed them manually. Every link to Github has been tagged either with vulnerable (YES) or not vulnerable (NO). This section was chosen as our BASELINE method. We then run the our set of keywords using the discussed algorithm on the 287 GitHub files, which reported whether there is a vulnerability in the GitHub file or not. We then changed the criteria for choosing the keywords for the algorithm and chose the keywords randomly without changing the number of words selected for each code snippets. In order to select random keywords, at first the comments of the code snippet has been removed, then the code snippet has been tokenized. We then removed reserved keywords from code snippet and only chose words with more than three characters as a candidate keyword. The following results are presented for two methods (Chosen-Keyword and Random-Keyword) and compare it with the baseline method.  The most important weakness of the Random-Keyword is the use of keywords that do not indicate existence of security vulnerabilities in GitHub code. According to listing 7 the sequence chosen for Chosen-Keyword is based on the fact that by navigating and searching ordered keywords, the vulnerability was detected mean while in the Random-Keyword method this criterion is determined without consideration  \n\n\nHow frequently are the copied vulnerable code examples fixed in the GitHub repositories? (RQ2.2)\n\nWe created a new web application to make the review process more efficient and systematic. With the review system, we assessed whether the vulnerable Stack Overflow code snippets that were migrated to GitHub were either fixed or still contained the vulnerability.\n\n\u2022 Results. Among 287 GitHub files that must be checked, vulnerabilities were corrected in 34 files and other 253 GitHub file still had vulnerabilities. For instance as can be seen in Listing 8, the two CWE-789 [60] and CWE-252 [55] were corrected. ..... } As shown in listing 9 boundary was limited and mentioned in comments of source code in GitHub file and CWE-125 [61], CWEcategory-1019 [62] and CWE-20 [63] were corrected. To inform developers about vulnerability in their repositories, a script has been used to make an issue on the repository. The script has been fed with our code review result. Developers have been notified with information including:\n\n\u2022 Description: The vulnerability in the code snippet is explicitly expressed. \u2022 Example: An attack scenario is provide to justify why the vulnerability is dangerous and how it may lead to exploitation. \u2022 Mitigation Scenario: The mitigation scenario is included to inform the developer on how to fix the vulnerability. \u2022 Reference: An authenticated reference is provided to show vulnerability is labelled based on objective and factual judgements.\n\n\u2022 Results. In addition, a set of questions related to the vulnerability with multiple choice or Likert scale answers were given. We received 15 response from 174 issues that were sent.\n\nAs shown in Figure 14 GitHub owner comments about existence vulnerability in their code. In the end, we asked the users about the best way to know about the vulnerability shows in Figure 17. \n\n\nIMPLICATIONS OF FINDINGS\n\nOf the fifteen responses we received out of a 117 issues to the GitHub owners, 40% pointed to the possibility of vulnerabilities in the code provided their input data is not dynamic and 13.3% acknowledge the vulnerability in the code but are reluctant to fix it. Most practitioner agree to implement a automated security mechanism to detect vulnerabilities in the code. They expressed the use of the browser extension [45] and offline tool to run ad-hoc on Stack Overflow methods more effective than other methods to inform users to vulnerabilities in the code examples.\n\nTo inform users about existence vulnerability in the code, we have developed a browser extension. Suppose that a developer needs to create a random alpha-numeric string in C++ for their task in their program. The developer searches in Stack Overflow for a possible solution. The search shows a question with ID 440133 as the top match. The importance of the question is determined in Stack Overflow based on how developers perceive the question. This asker of this question offered a bounty reward of 100 to the accepted answer. Consequently, the question received many answers. The accepted answer (ID 440240) has 263 scores (upvote -downvote) and it was viewed more than 174,000 times as of today. Therefore, a new developer looking for a solution for this task is expected to be convinced to use the solution provided in the answer. However, the provided solution has one of the security vulnerabilities as we discussed in Section 4.2 (Listing 1). Therefore, the provided solution, if used as is, will introduce potential C++ security vulnerability in the developer's software. Our browser extension aims to prevent developers from reusing such vulnerable code snippets, as well as to recommend them of better alternatives, i.e., non-vulnerable code snippets in other Stack Overflow posts. As we Do you have any other suggestions to design automated techniques to assist developers to handle security vulnerabilities while using code from online forums? Please write in couple of sentences below (text box) 5\n\nCould automated vulnerability analyses of code snippets in online forums be useful in your future development tasks? 5-point Likert scale for each opinion 6\n\nWould you like to informed of such a tool that could be developed in future? (3-point Likert scale for each opinion) 7\n\nGet developers email address to expand the vulnerability detection tool (text box) recall from our survey of GitHub developers, such a browser extension was also desired by the survey respondents.\n\nIn Figure 18, we show a screenshot of our developed extension. The extension gets activated when a developer visits a Stack Overflow post. The extension consults our database of vulnerable C++ code snippets in Stack Overflow to determine whether the provided solution in the post is vulnerable. If the provided solution is indeed found vulnerable, the extension then shows a warning message to the developer with an explanation of why the code snippet is vulnerable (see 18). The extension then recommends non-vulnerable similar code snippets from other Stack Overflow posts, so that the developer can reuse those safe code snippets instead of the vulnerable code snippet. \n\n\nTHREATS TO VALIDITY\n\nWe now discuss the threats to validity of our study following the guidelines for case study research.\n\nConstruct validity threats: Concern the relation between theory and observation. In our study, threats to the construct validity are mainly due to measurement errors. We use the state-of-the-art clone detection tool, SourcererCC [47], to identify similar code between the Stack Overflow C++ code snippets. We use the tokenization at file level in SourcererCC and set the similarity degree 100 percent to find all exact C++ code in Stack Overflow all other setting have default setting. So far, SourcerecCC has not implemented the block-level tokenization implementation for C++, so we used our heuristic to detect vulnerable C++ code snippets from Stack Overflow to GitHub that can miss some vulnerable codes. Other concern is related to false negatives that Syntaxnet [46] may have produced. Internal validity threats: Any misrepresentation in the topic areas we used SOTorrent dataset would effect our analysis. For instance, migrated Stack Overflow code snippets that SOTorrent may have missed to link to GitHub projects were automatically omitted from our analysis. Moreover, several posts are not correctly tagged, so C++ snippets that are not correctly tagged are also not included in our analysis. These missed snippets would just extend our analysis to a broader perspectives but does not have any effect on the results obtained. External validity threats: Concern the possibility to generalize our results. The findings in this paper was focused on Stack Overflow and does not generalize to other Q&A websites.\n\n\nCONCLUSION\n\nIn this paper, we have analyzed vulnerabilities in C++ code snippets shared on Stack Overflow and their migration to GitHub projects. This is the first study that address the security issues of C++ code examples shared on Stack Overflow. We have investigated security vulnerabilities in the C++ code snippets shared on Stack Overflow over a period of 10 years. From the 72,483 reviewed code snippets used in at least one project hosted on GitHub, we found a total of 69 vulnerable code snippets categorized into 29 types. Bad coding practices, improper check for unusual or exceptional conditions and improper input validation were most prevalent types of vulnerabilities. The 69 vulnerable code snippets found in Stack Overflow were reused in a total of 2859 GitHub projects. Information about the detected vulnerabilities were presented to developers of the studied projects. Although they acknowledged the vulnerabilities, many of them are still not corrected today.\n\n\nTo study Stack Overflow posts evolution and their relation with GitHub, SOTorrent data-set Version 2018-09-23 has been used. This version of SOTorrent contains posts from 2008 until 2018. In total there are 41,472,536 question and answer posts and 109,385,095 post version with 206,560,269 post block versions containing 6,039,434 links to software projects. There are 3,861,573 links to public GitHub repositories.\n\nFig. 1 :\n1Overall steps in case study Fig. 2: Structure of SOTorrent posts\n\nFig. 3 :\n3Connection of SOTorrent table to other resources\n\nFig. 4 :\n4Distribution of GitHub URLs in GitHub projects\n\nFig. 5 :\n5Count of Edits, GithubUrls and Code Blocks for answers post\n\nFig. 6 :\n6Distribution of CWE's and Vulnerable Answers by year Fig. 7: Example of code snippet in answer with no real c++ code, but only configuration of 'makefile' -Answer id 13109884\n\nFig. 9 :\n9Comments to vulnerable Answer in Stack overflow with id (440240) 4) Look for deprecated or dangerous functions in code snippet: For example 'rand()' function is obsoleted since C++11 [49] and it is not recommended for random-number generation and cryptographic operations. 5) Check the arguments passed to the functions in the code snippet: Types of arguments and their values are very important. For example, an out-of-bound large unsigned integer passed to a function that accepts signed integers may interpret the value as a negative number which results in an undefined behaviour or a program crash. 6) Check function usages based on official documentations: For referencing and proper documentation of found vulnerabilities, official documentations were extensively used throughout the review process. For example in listing 2, return value of malloc was not checked. 7) Look for logical vulnerabilities in code snippets.\n\nFig. 10 :\n10Frequency of CWEs in Each AnswerFig. 11: Distribution of answers in C++ by year Listing 1: Generate random string in C++ -Answer id 440240 in Stack overflow, shows vulnerability due to use rand function with incorrect using method, (CWE-1006, CWE-477, CWE-193, CWE-754) void alphanum [ gen random (char * s, const int len) ] { static const char alphanum[] = \"0123456789\" \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" \"abcdefghijklmnopqrstuvwxyz\"; for ( int i = 0; i < len; ++i) { s[ i ] = alphanum[ rand()% ( sizeof(alphanum)\u22121)]; } s[len] = 0; }\n\n\nCalled free() twice on the same memory address, potentially leading to modification of unexpected\n\n\nof potentially dangerous function Invoked a potentially dangerous function that could introduce a vulnerability if it is used incorrectly.\n\nListing 2 :\n2Execute functor in given thread in QT -Answer id 21653558 in Stack overflow, shows vulnerability due to use malloc function without checking return special condition, (CWE-1006, CWE-252, CWE-789, CWE-476) class FunctorCallEvent: public QMetaCallEvent { public: template <typename Functor> FunctorCallEvent(Functor && fun, QObject * receiver) : QMetaCallEvent(new QtPrivate::QFunctorSlotObject<Functor, 0, typename QtPrivate::List Left<void, 0>::Value, void> (std :: forward<Functor>(fun)), receiver, 0, 0,0,( void ** ) malloc (sizeof(void*)));\n\n\nexec(const char * cmd) { std :: shared ptr<FILE> pipe(popen ( cmd , \"r\"), pclose); if (! pipe) return \"ERROR\"; char buffer[128]; std :: string result = \"\"; while (! feof (pipe.get () ) ) { if ( fgets (buffer , 128, pipe.get () ) != NULL) result += buffer; } return result ; } The function shown in Listing 3 is vulnerable to code injection (OS command injection) attacks since user inputs commands are inputted and not checked. In other words, any command with privilege level of the program can be executed without any errors or warnings.Listing 4: Set the global LUA PATH variable programmatically -Answer id 4156038 in Stack overflow, shows vulnerability due to second arg in this function may contain multiple path separated by \";\" (CWE-754, CWE-252, CWE-426) int setLuaPath( lua State * L, const char * path ){ lua getglobal( L, \"package\" ); lua getfield ( L, \u22121, \"path\" );\n\nListing 5 :\n5Set Byte vector to integer type -Answer id 41031865 in Stack overflow, shows vulnerability due to out of bound read and the lack of checking the size of the variable, (CWE-20, CWE-125, CWE-1019) template<typename T> static T get from vector(const std::vector<uint8 t>& vec, const size t current index )){ T result; uint8 t * ptr = (uint8 t * ) &result; size t idx = current index + sizeof(T); while(idx > current index) * ptr++ = vec[\n\nListing 6 :\n6Checks if string ends with .txt -Part of answer id 20447331 in Stack overflow, all defined functions have vulnerability have fail if input string that contain a null value, (CWE-158, CWE-1019) bool ends with (std :: string const &a, std :: string const &b) { auto len = b.length() ; auto pos = a.length() \u2212 len; if (pos < 0) return false ; auto pos a = &a[pos]; auto pos b = &b[0]; while ( * pos a) if ( * pos a++ != * pos b++) return false ; return true ; } bool ends with string (std :: string const& str, std :: string const& what) { return what.size() <= str.size () && str.find(what, str . size () \u2212 what.size()) != str .npos; } In answer (20447331) shown in Listing 6 on how to validate whether a file name ends with \".txt\" or not, this answer includes code of functions and their benchmarks for six methods in the original code snippet in answer post.\n\nFig. 13 :\n13Comparing Results for Two Method of vulnerable part of the code and its sequence which will lead into incorrect results. of GitHub files for 69 vulnerable answers was 2859 GitHub links that has been showen in table 5 separated by CWE definition. After run previous method, our algorithm found 287 GitHub vulnerable files can potentially have security flaws. Samples of False-Positive and False-Negative Chosen-Keyword heuristic and Random-Keyword heuristic results can be found in online material.\n\nListing 9 :\n9Code was Fixed in GitHub File mentioned in comment for answer id 41031865 in Stack Overflow //check if we can read sizeof(T) bytes starting the next index check lenght(vec.size() , sizeof (T), current index + 1); T result ; auto * ptr = reinterpret cast <uint8 t * >(&result); for ( size t i = 0; i < sizeof(T); ++i) { * ptr++ = vec[current index + sizeof(T) \u2212i]; } return result ; } 5.3 How did the GitHub developers react when informed of the vulnerable code examples? (RQ2.3) \u2022 Approach.\n\nFig. 14 :\n14User opinion about exists vulnerability in their codeFigure 15shows the response of some users about vulnerability in their projects. As shown in Figure16, the user's opinion about the usefulness of the automatic detection of the vulnerability was discussed.\n\nFig. 15 :\n15User response about security vulnerability in their code Fig. 16: User opinion about automated vulnerability analysis useful for future development Fig. 17: How inform developer of potential vulnerabilities in code examples\n\nFig. 18 :\n18Browser Extension for Code Snippet with AnswerId 440240 in Stack Overflow\n\nM .\nMVerdi is with Shiraz University, Iran. E-mail: m.verdi@shirazu.ac.ir A. Sami (Corresponding Author) is with Shiraz University, Iran. E-mail: sami@shirazu.ac.ir J. Akhondali is with Shiraz University, Iran. E-mail: jafar.akhondali@yahoo.com F. Khomh is with Polytechnique Montreal University, Quebec Canada. E-mail: foutse.khomh@polymtl.ca G. Uddin is with Polytechnique Montreal University, Quebec Canada. Email: giasu@cs.mcgill.ca A. Karami Motlagh is with Chamran University, Iran. E-mail: alireza.karami.m@gmail.com\n\nTABLE 1 :\n1Research contributions made in this paper to understand The prevalence and propagation of C++ vulnerabilities in crowd-Sourced code examples Evidence of the propagation of Vulnerable C++ Code snippets from Stack Overflow to GitHub Repositories.\n\nTABLE 2 :\n2Comparison between our study and prior studies In this study we investigated the reusability of C++ code snippets from Stack Overflow answer posts to GitHub projects. Reusability in Stack Overflow contain copying code in other open sources application, license violation in Stack Overflow and use in open source projects such as GitHub repositoriesTheme \nOur Study \nPrior Study \nComparison \nReusability \nof \nC++ Posts in \nStack Overflow \n\n\n\nTABLE 3 :\n3The different types of CWE C++ vulnerabilities and their frequency as we observed in our dataset of Stack Overflow Answers. Each tick in X-axis denotes the last one/two letters of a year, e.g., 8 for 2008 to 16 for 2016.CWE Title and Description \n\n\nTable 5 :\n5The different types of CWE C++ vulnerabilities and their frequency as we observed in our dataset \nof Stack Overflow Answers. Each tick in X-axis denotes the last one/two letters of a year, e.g., 8 for 2008 to 16 for 2016. \n\nCWE \nTitle and Description \nFrequency by Year \n\n710 \nImproper adherence to coding standards \nNot followed certain coding rules for development, which can lead to resultant weaknesses. \n\n11 \n\n1 \n\n\n\n\nFig. 12: Frequency of CWEs in code snippets This code snippet of answer 440240 shown in Listing 1 can be dangerous. Functions with count parameters like 'len' should take into account the terminating 'NULL' as an extra character. But this function actually writes into the character 'len+1' when executing s[len] = 0. That is CWE-193: Off-by-one-error vulnerability9 \n\n1 \n\n413 \n\nImproper resource locking \nThe software does not lock or does not correctly lock a resource when the software must have exclusive access \nto the resource. \n\n8 \n\n1 \n\n0 \n5 \n10 \n15 \n20 \n\nCWE-1006 \nCWE-754 \nCWE-20 \nCWE-252 \nCWE-1019 \nCWE-477 \nCWE-789 \nCWE-158 \nCWE-134 \nCWE-476 \nCWE-121 \nCWE-415 \nCWE-676 \nCWE-628 \nCWE-686 \nCWE-835 \nCWE-369 \nCWE-116 \nCWE-232 \nCWE-758 \nCWE-120 \nCWE-682 \nCWE-190 \nCWE-413 \nCWE-710 \nCWE-150 \nCWE-78 \nCWE-426 \nCWE-193 \nCWE-131 \nCWE-125 \n\n20 \n19 \n17 \n15 \n15 \n9 \n8 \n5 \n3 \n3 \n2 \n2 \n2 \n2 \n2 \n2 \n2 \n2 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n1 \n\n#Frequency \n\nCWE \n\n\n\nTABLE 4 :\n4Two Method Results ACCURACY= T rueP ositive +T rueN egative T rueP ositive + F alseP ositive + F alseP ositive + F alseN egative\u2022 Results. \nFor each method we calculate Recall, Precision, F1-Measure \nand Accuracy: \n\nRECALL= \n\nT rueP ositive \nT rueP ositive + F alseN egative \n\nPRECISION= \n\nT rueP ositive \nT rueP ositive + F alseP ositive \n\nF1 Measure= 2 * P recision  * Recall \n\nP recision + Recall \n\n\n\nTABLE 5 :\n5CWEs detection in GitHub Repositories with chosen-keyword AlgorithmGitHub Count \nConfirm Count \nCWE Title \n1539 \n4 \nCWE-835-Loop with unreachable Exit condition \n703 \n37 \nCWE-20-Improper input validation \n653 \n72 \nCWE-754-Improper check for unusual or exceptional condi-\ntion \n324 \n187 \nCWE-1006-Bad coding practice \n250 \n5 \nCWE-158-Improper neutralization of null byte or null char-\nacter \n212 \n2 \nCWE-369-Divided by zero \n151 \n141 \nCWE-150-Improper neutralization of escape, meta, or control \nsequence \n118 \n0 \nCWE-628-Function call with incorrectly specific argument \n89 \n14 \nCWE-252-Unchecked return value \n73 \n2 \nCWE-134-Use of externally controlled format string \n54 \n4 \nCWE-476-Null pointer dereference \n53 \n4 \nCWE-789-Uncontrolled memory allocation \n41 \n12 \nCWE-477-Use of obsolete function \n20 \n1 \nCWE-676-Use of potentially dangerous function \n20 \n0 \nCWE-232-Improper handling of undefined values \n14 \n2 \nCWE-121-Stack base buffer overflow \n7 \n0 \nCWE-415-Double free \n5 \n1 \nCWE-78-Improper neutralization of special elements used in \nan os command \n5 \n0 \nCWE-413-Improper resource locking \n5 \n5 \nCWE-116-Improper encoding or escaping of output \n5 \n0 \nCWE-193-Off by one error \n3 \n3 \nCWE-682-Incorrect calculation \n3 \n0 \nCWE-686-Function call with incorrect argument type \n3 \n0 \nCWE-120-Buffer copy without checking size of input \n3 \n0 \nCWE-131-Incorrect calculation of buffer size \n3 \n1 \nCWE-710-Improper adherence to coding standard \n1 \n0 \nCWE-426-Untrusted search path \n\n\n\n\nconst int num elems = width * height; unsigned char * img = (unsgined char * )malloc(3 * num elems); int i =0;Listing 8: Part of code was Fixed and improved in GitHub File for answer id \n2654860 in Stack Overflow \n\n//Improve and adapted version of http://stackoverflow.com/a/ \n2654860 \nvoid save bmp(string filename, uchar4 * ptr, const int width, const \nint height) \n{ \n\n\nTABLE 6 :\n6Questions asked in primary survey. Which of the following situation for our issue was true? (eight options) 2Please justify your choice above (text box) 3What would be the best way to inform developers of potential vulnerabilities in code examples shared in Stack Overflow(5-point Likert scale for each opinion) 4NO \nQuestion \n\n1 \n\n\nOn code reuse from stackoverflow: An exploratory study on android apps. Rabe Abdalkareem, Emad Shihab, Juergen Rilling, Information and Software Technology. 88Rabe Abdalkareem, Emad Shihab, and Juergen Rilling. On code reuse from stackoverflow: An exploratory study on android apps. Information and Software Technology, 88:148-158, 2017.\n\nEffects of reuse on quality, productivity, and economics. C Wayne, Lim, IEEE software. 115Wayne C Lim. Effects of reuse on quality, productivity, and economics. IEEE software, 11(5):23-30, 1994.\n\nWhere does this code come from and where does it go?-integrated code history tracker for open source systems. Katsuro Inoue, Yusuke Sasaki, Pei Xia, Yuki Manabe, Proceedings of the 34th International Conference on Software Engineering. the 34th International Conference on Software EngineeringIEEE PressKatsuro Inoue, Yusuke Sasaki, Pei Xia, and Yuki Manabe. Where does this code come from and where does it go?-integrated code history tracker for open source systems. In Proceedings of the 34th International Conference on Software Engineering, pages 331-341. IEEE Press, 2012.\n\nWhat are mobile developers asking about? a large scale study using stack overflow. Christoffer Rosen, Emad Shihab, Empirical Software Engineering. 213Christoffer Rosen and Emad Shihab. What are mobile developers asking about? a large scale study using stack overflow. Empirical Software Engineering, 21(3):1192-1223, 2016.\n\nHow developers search for code: a case study. Caitlin Sadowski, T Kathryn, Sebastian Stolee, Elbaum, Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. the 2015 10th Joint Meeting on Foundations of Software EngineeringACMCaitlin Sadowski, Kathryn T Stolee, and Sebastian Elbaum. How developers search for code: a case study. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, pages 191- 201. ACM, 2015.\n\nWhat makes a good code example?: A study of programming q&a in stackoverflow. Jonathan Seyed Mehdi Nasehi, Frank Sillito, Chris Maurer, Burns, 28th IEEE International Conference on Software Maintenance (ICSM). IEEESeyed Mehdi Nasehi, Jonathan Sillito, Frank Maurer, and Chris Burns. What makes a good code example?: A study of pro- gramming q&a in stackoverflow. In 2012 28th IEEE International Conference on Software Maintenance (ICSM), pages 25-34. IEEE, 2012.\n\nYou get where you're looking for: The impact of information sources on code security. Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L Mazurek, Christian Stransky, 2016 IEEE Symposium on Security and Privacy (SP). IEEEYasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L Mazurek, and Christian Stransky. You get where you're looking for: The impact of information sources on code security. In 2016 IEEE Symposium on Security and Privacy (SP), pages 289-305. IEEE, 2016.\n\nStack overflow considered harmful? the impact of copy&paste on android application security. Felix Fischer, Konstantin B\u00f6ttinger, Huang Xiao, Christian Stransky, Yasemin Acar, Michael Backes, Sascha Fahl, 2017 IEEE Symposium on Security and Privacy (SP). IEEEFelix Fischer, Konstantin B\u00f6ttinger, Huang Xiao, Christian Stran- sky, Yasemin Acar, Michael Backes, and Sascha Fahl. Stack over- flow considered harmful? the impact of copy&paste on android application security. In 2017 IEEE Symposium on Security and Privacy (SP), pages 121-136. IEEE, 2017.\n\nSoftware quality analysis by code clones in industrial legacy software. Akito Monden, Daikai Nakae, Toshihiro Kamiya, Shin-Ichi Sato, Ken-Ichi Matsumoto, Proceedings Eighth IEEE Symposium on Software Metrics. Eighth IEEE Symposium on Software MetricsIEEEAkito Monden, Daikai Nakae, Toshihiro Kamiya, Shin-ichi Sato, and Ken-ichi Matsumoto. Software quality analysis by code clones in industrial legacy software. In Proceedings Eighth IEEE Symposium on Software Metrics, pages 87-94. IEEE, 2002.\n\nStack overflow in github: any snippets there. Di Yang, Pedro Martins, Vaibhav Saini, Cristina Lopes, 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR). IEEEDi Yang, Pedro Martins, Vaibhav Saini, and Cristina Lopes. Stack overflow in github: any snippets there? In 2017 IEEE/ACM 14th In- ternational Conference on Mining Software Repositories (MSR), pages 280-290. IEEE, 2017.\n\nStudying reuse of out-dated third-party code in open source projects. Pei Xia, Makoto Matsushita, Norihiro Yoshida, Katsuro Inoue, Information and Media Technologies. 92Pei Xia, Makoto Matsushita, Norihiro Yoshida, and Katsuro Inoue. Studying reuse of out-dated third-party code in open source projects. Information and Media Technologies, 9(2):155-161, 2014.\n\nToxic code snippets on stack overflow. Chaiyong Ragkhitwetsagul, Jens Krinke, Matheus Paixao, Giuseppe Bianco, Rocco Oliveto, IEEE Transactions on Software Engineering. Chaiyong Ragkhitwetsagul, Jens Krinke, Matheus Paixao, Giuseppe Bianco, and Rocco Oliveto. Toxic code snippets on stack overflow. IEEE Transactions on Software Engineering, 2019.\n\nTIOBE Index for. Tiobe Company, Online; accessed 19TIOBE Company. TIOBE Index for January 2019. https://www. tiobe.com/tiobe-index/, 2019. [Online; accessed 19-January-2019].\n\nSotorrent: Reconstructing and analyzing the evolution of stack overflow posts. Sebastian Baltes, Lorik Dumani, Christoph Treude, Stephan Diehl, Proceedings of the 15th International Conference on Mining Software Repositories. the 15th International Conference on Mining Software RepositoriesACMSebastian Baltes, Lorik Dumani, Christoph Treude, and Stephan Diehl. Sotorrent: Reconstructing and analyzing the evolution of stack overflow posts. In Proceedings of the 15th International Conference on Mining Software Repositories, pages 319-330. ACM, 2018.\n\nSotorrent: Studying the origin, evolution, and usage of stack overflow code snippets. Sebastian Baltes, Christoph Treude, Stephan Diehl, Proceedings of the 16th International Conference on Mining Software Repositories. the 16th International Conference on Mining Software RepositoriesIEEE PressSebastian Baltes, Christoph Treude, and Stephan Diehl. Sotorrent: Studying the origin, evolution, and usage of stack overflow code snippets. In Proceedings of the 16th International Conference on Mining Software Repositories, pages 191-194. IEEE Press, 2019.\n\nAutomatic adaptive detection and prevention of buffer overflow attacks. C Cowan, Proc. of the 7USENIX Security Conf. of the 7USENIX Security ConfSan Antonio, TexasC Cowan. Automatic adaptive detection and prevention of buffer overflow attacks. In Proc. of the 7USENIX Security Conf., San Antonio, Texas, 1998.\n\nChecking for race conditions in file accesses. Matt Bishop, Michael Dilger, Computing systems. 22Matt Bishop, Michael Dilger, et al. Checking for race conditions in file accesses. Computing systems, 2(2):131-152, 1996.\n\nJumping through hoops: Why do java developers struggle with cryptography apis?. Sarah Nadi, Stefan Kr\u00fcger, Mira Mezini, Eric Bodden, Proceedings of the 38th International Conference on Software Engineering. the 38th International Conference on Software EngineeringACMSarah Nadi, Stefan Kr\u00fcger, Mira Mezini, and Eric Bodden. Jump- ing through hoops: Why do java developers struggle with cryp- tography apis? In Proceedings of the 38th International Conference on Software Engineering, pages 935-946. ACM, 2016.\n\nUnderstanding the factors for fast answers in technical q&a websites: An empirical study of four stack exchange websites. Shaowei Wang, Ahmed E Tse-Hsun Chen, Hassan, Proceedings of the 40th International Conference on Software Engineering. the 40th International Conference on Software EngineeringShaowei Wang, Tse-Hsun Chen, and Ahmed E Hassan. Under- standing the factors for fast answers in technical q&a websites: An empirical study of four stack exchange websites. In Proceedings of the 40th International Conference on Software Engineering, pages 884- 884, 2018.\n\nStack overflow: a code laundering platform. Le An, Ons Mlouki, Foutse Khomh, Giuliano Antoniol, 2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEELe An, Ons Mlouki, Foutse Khomh, and Giuliano Antoniol. Stack overflow: a code laundering platform? In 2017 IEEE 24th Interna- tional Conference on Software Analysis, Evolution and Reengineering (SANER), pages 283-293. IEEE, 2017.\n\nWhat questions do programmers ask about configuration as code?. Akond Rahman, Asif Partho, Patrick Morrison, Laurie Williams, Proceedings of the 4th International Workshop on Rapid Continuous Software Engineering. the 4th International Workshop on Rapid Continuous Software EngineeringACMAkond Rahman, Asif Partho, Patrick Morrison, and Laurie Williams. What questions do programmers ask about configu- ration as code? In Proceedings of the 4th International Workshop on Rapid Continuous Software Engineering, pages 16-22. ACM, 2018.\n\nWhat are developers talking about? an analysis of topics and trends in stack overflow. Anton Barua, W Stephen, Ahmed E Thomas, Hassan, Empirical Software Engineering. 193Anton Barua, Stephen W Thomas, and Ahmed E Hassan. What are developers talking about? an analysis of topics and trends in stack overflow. Empirical Software Engineering, 19(3):619-654, 2014.\n\nSnakes in paradise?: insecure python-related coding practices in stack overflow. Akond Rahman, Effat Farhana, Nasif Imtiaz, Proceedings of the 16th International Conference on Mining Software Repositories. the 16th International Conference on Mining Software RepositoriesIEEE PressAkond Rahman, Effat Farhana, and Nasif Imtiaz. Snakes in par- adise?: insecure python-related coding practices in stack overflow. In Proceedings of the 16th International Conference on Mining Software Repositories, pages 200-204. IEEE Press, 2019.\n\nThe impact of social media on software engineering practices and tools. Margaret-Anne Storey, Christoph Treude, Arie Van Deursen, Li-Te Cheng, Proceedings of the FSE/SDP workshop on Future of software engineering research. the FSE/SDP workshop on Future of software engineering researchACMMargaret-Anne Storey, Christoph Treude, Arie van Deursen, and Li-Te Cheng. The impact of social media on software engineering practices and tools. In Proceedings of the FSE/SDP workshop on Future of software engineering research, pages 359-364. ACM, 2010.\n\nTwo studies of opportunistic programming: interleaving web foraging, learning, and writing code. Joel Brandt, J Philip, Joel Guo, Mira Lewenstein, Scott R Dontcheva, Klemmer, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. the SIGCHI Conference on Human Factors in Computing SystemsACMJoel Brandt, Philip J Guo, Joel Lewenstein, Mira Dontcheva, and Scott R Klemmer. Two studies of opportunistic programming: in- terleaving web foraging, learning, and writing code. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pages 1589-1598. ACM, 2009.\n\nDesign lessons from the fastest q&a site in the west. Lena Mamykina, Bella Manoim, Manas Mittal, George Hripcsak, Bj\u00f6rn Hartmann, Proceedings of the SIGCHI conference on Human factors in computing systems. the SIGCHI conference on Human factors in computing systemsACMLena Mamykina, Bella Manoim, Manas Mittal, George Hripcsak, and Bj\u00f6rn Hartmann. Design lessons from the fastest q&a site in the west. In Proceedings of the SIGCHI conference on Human factors in computing systems, pages 2857-2866. ACM, 2011.\n\nSearching stack overflow for api-usage-related bug fixes using snippet-based queries. C Eduardo, Martin Campos, Marcelo A Monperrus, Maia, Proceedings of the 26th Annual International Conference on Computer Science and Software Engineering. the 26th Annual International Conference on Computer Science and Software EngineeringIBM Corp.Eduardo C Campos, Martin Monperrus, and Marcelo A Maia. Searching stack overflow for api-usage-related bug fixes using snippet-based queries. In Proceedings of the 26th Annual Inter- national Conference on Computer Science and Software Engineering, pages 232-242. IBM Corp., 2016.\n\nCharacterizing duplicate code snippets between stack overflow and tutorials. Agnieszka Manziba Akanda Nishi, Kostadin Ciborowska, Damevski, Proceedings of the 16th International Conference on Mining Software Repositories. the 16th International Conference on Mining Software RepositoriesIEEE PressManziba Akanda Nishi, Agnieszka Ciborowska, and Kostadin Damevski. Characterizing duplicate code snippets between stack overflow and tutorials. In Proceedings of the 16th International Conference on Mining Software Repositories, pages 240-244. IEEE Press, 2019.\n\nSecure coding practices in java: Challenges and vulnerabilities. Na Meng, Stefan Nagy, Danfeng Yao, Wenjie Zhuang, Gustavo Arango-Argoty, 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE). IEEENa Meng, Stefan Nagy, Danfeng Yao, Wenjie Zhuang, and Gustavo Arango-Argoty. Secure coding practices in java: Challenges and vulnerabilities. In 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE), pages 372-383. IEEE, 2018.\n\nHow reliable is the crowdsourced knowledge of security implementation?. Mengsu Chen, Felix Fischer, Na Meng, Xiaoyin Wang, Jens Grossklags, Proceedings of the 41st International Conference on Software Engineering. the 41st International Conference on Software EngineeringIEEE PressMengsu Chen, Felix Fischer, Na Meng, Xiaoyin Wang, and Jens Grossklags. How reliable is the crowdsourced knowledge of security implementation? In Proceedings of the 41st International Conference on Software Engineering, pages 536-547. IEEE Press, 2019.\n\nWhy eve and mallory love android: An analysis of android ssl (in) security. Sascha Fahl, Marian Harbach, Thomas Muders, Lars Baumg\u00e4rtner, Bernd Freisleben, Matthew Smith, Proceedings of the 2012 ACM conference on Computer and communications security. the 2012 ACM conference on Computer and communications securityACMSascha Fahl, Marian Harbach, Thomas Muders, Lars Baumg\u00e4rtner, Bernd Freisleben, and Matthew Smith. Why eve and mallory love android: An analysis of android ssl (in) security. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 50-61. ACM, 2012.\n\nIts4: A static vulnerability scanner for c and c++ code. John Viega, Jon-Thomas Bloch, Yoshi Kohno, Gary Mcgraw, Proceedings 16th Annual Computer Security Applications Conference (ACSAC'00). 16th Annual Computer Security Applications Conference (ACSAC'00)IEEEJohn Viega, Jon-Thomas Bloch, Yoshi Kohno, and Gary McGraw. Its4: A static vulnerability scanner for c and c++ code. In Proceedings 16th Annual Computer Security Applications Conference (ACSAC'00), pages 257-267. IEEE, 2000.\n\nJflow: Practical mostlystatic information flow control. C Andrew, Andrew C Myers, Myers, Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languages. the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming languagesACMAndrew C Myers and Andrew C Myers. Jflow: Practical mostly- static information flow control. In Proceedings of the 26th ACM SIGPLAN-SIGACT symposium on Principles of programming lan- guages, pages 228-241. ACM, 1999.\n\nSecurity vulnerabilities of the top ten programming languages: C, java, c++, objective-c, c#, php, visual basic, python, perl, and ruby. Stephen Turner, Journal of Technology Research. 51Stephen Turner. Security vulnerabilities of the top ten program- ming languages: C, java, c++, objective-c, c#, php, visual basic, python, perl, and ruby. Journal of Technology Research, 5:1, 2014.\n\nAre code examples on an online q&a forum reliable. Tianyi Zhang, Ganesha Upadhyaya, Anastasia Reinhardt, Hridesh Rajan, Miryung Kim, Tianyi Zhang, Ganesha Upadhyaya, Anastasia Reinhardt, Hridesh Rajan, and Miryung Kim. Are code examples on an online q&a forum reliable? 2018.\n\nThe seven sins: security smells in infrastructure as code scripts. Akond Rahman, Chris Parnin, Laurie Williams, Proceedings of the 41st International Conference on Software Engineering. the 41st International Conference on Software EngineeringIEEE PressAkond Rahman, Chris Parnin, and Laurie Williams. The seven sins: security smells in infrastructure as code scripts. In Proceedings of the 41st International Conference on Software Engineering, pages 164-175. IEEE Press, 2019.\n\nAn empirical study of security issues posted in open source projects. Mansooreh Zahedi, Muhammad Ali Babar, Christoph Treude, Proceedings of the 51st Hawaii International Conference on System Sciences. the 51st Hawaii International Conference on System SciencesMansooreh Zahedi, Muhammad Ali Babar, and Christoph Treude. An empirical study of security issues posted in open source projects. In Proceedings of the 51st Hawaii International Conference on System Sciences, 2018.\n\nSecurity and emotion: sentiment analysis of security discussions on github. Daniel Pletea, Bogdan Vasilescu, Alexander Serebrenik, Proceedings of the 11th working conference on mining software repositories. the 11th working conference on mining software repositoriesACMDaniel Pletea, Bogdan Vasilescu, and Alexander Serebrenik. Secu- rity and emotion: sentiment analysis of security discussions on github. In Proceedings of the 11th working conference on mining software repositories, pages 348-351. ACM, 2014.\n\nSecurity developer studies with github users: Exploring a convenience sample. Yasemin Acar, Christian Stransky, Dominik Wermke, Michelle L Mazurek, Sascha Fahl, Thirteenth Symposium on Usable Privacy and Security ({SOUPS} 2017). Yasemin Acar, Christian Stransky, Dominik Wermke, Michelle L Mazurek, and Sascha Fahl. Security developer studies with github users: Exploring a convenience sample. In Thirteenth Symposium on Usable Privacy and Security ({SOUPS} 2017), pages 81-95, 2017.\n\nGistable: Evaluating the executability of python code snippets on github. Eric Horton, Chris Parnin, 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEEEric Horton and Chris Parnin. Gistable: Evaluating the executabil- ity of python code snippets on github. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME), pages 217-227. IEEE, 2018.\n\nMining stackoverflow to turn the ide into a self-confident programming prompter. Luca Ponzanelli, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, Michele Lanza, Proceedings of the 11th Working Conference on Mining Software Repositories. the 11th Working Conference on Mining Software RepositoriesACMLuca Ponzanelli, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, and Michele Lanza. Mining stackoverflow to turn the ide into a self-confident programming prompter. In Proceedings of the 11th Working Conference on Mining Software Repositories, pages 102-111. ACM, 2014.\n\nAugmenting api documentation with insights from stack overflow. Christoph Treude, P Martin, Robillard, 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE). IEEEChristoph Treude and Martin P Robillard. Augmenting api docu- mentation with insights from stack overflow. In 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), pages 392-403. IEEE, 2016.\n\nLeveraging flawed tutorials for seeding large-scale web vulnerability discovery. Tommi Unruh, Bhargava Shastry, Malte Skoruppa, Federico Maggi, Konrad Rieck, Jean-Pierre Seifert, Fabian Yamaguchi, 11th {USENIX} Workshop on Offensive Technologies. {WOOT} 17Tommi Unruh, Bhargava Shastry, Malte Skoruppa, Federico Maggi, Konrad Rieck, Jean-Pierre Seifert, and Fabian Yamaguchi. Leveraging flawed tutorials for seeding large-scale web vulnera- bility discovery. In 11th {USENIX} Workshop on Offensive Technolo- gies ({WOOT} 17), 2017.\n\nSecure coding practices in java: Challenges and vulnerabilities. Na Meng, Stefan Nagy, Danfeng Yao, Wenjie Zhuang, Gustavo Arango-Argoty, 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE). IEEENa Meng, Stefan Nagy, Danfeng Yao, Wenjie Zhuang, and Gustavo Arango-Argoty. Secure coding practices in java: Challenges and vulnerabilities. In 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE), pages 372-383. IEEE, 2018.\n\nAnnouncing SyntaxNet: The Worlds Most Accurate Parser Goes Open Source. Google Company, Google Company. Announcing SyntaxNet: The Worlds Most Accurate Parser Goes Open Source. https://ai.googleblog.com/ 2016/05/announcing-syntaxnet-worlds-most.html, 2019. [Ac- cessed 29 Jun. 2019].\n\nSourcerercc: Scaling code clone detection to big-code. Hitesh Sajnani, Vaibhav Saini, Jeffrey Svajlenko, K Chanchal, Cristina V Roy, Lopes, 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE). IEEEHitesh Sajnani, Vaibhav Saini, Jeffrey Svajlenko, Chanchal K Roy, and Cristina V Lopes. Sourcerercc: Scaling code clone detection to big-code. In 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), pages 1157-1168. IEEE, 2016.\n\nFree-Marginal Multirater Kappa: An Alternative to Fleiss FixedMarginal Multirater Kappa. J Justus, Randolph, Justus J. Randolph. Free-Marginal Multirater Kappa: An Alterna- tive to Fleiss FixedMarginal Multirater Kappa. https://files.eric. ed.gov/fulltext/ED490661.pdf, 2005. [Accessed 27 Jun. 2019].\n\nDeprecating rand() and Friends. Walter E Brown, Walter E. Brown. Deprecating rand() and Friends. http://www. open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3775.pdf, 2013. [Accessed 27 Jun. 2019].\n\nCommunity developed list of common software security weaknesses. CWE Mitre. Community developed list of common software security weak- nesses. CWE Mitre. https://cwe.mitre.org/. [Accessed 27 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE 193. Community developed list of common software security weak- nesses. CWE 193. https://cwe.mitre.org/data/definitions/193. html. [Accessed 27 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE. 754Community developed list of common software security weak- nesses. CWE 754. https://cwe.mitre.org/data/definitions/754. html. [Accessed 27 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE. 252Community developed list of common software security weak- nesses. CWE 252. https://cwe.mitre.org/data/definitions/252. html. [Accessed 30 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE. 426Community developed list of common software security weak- nesses. CWE 426. https://cwe.mitre.org/data/definitions/426. html. [Accessed 30 July. 2018].\n\nOreo: Detection of clones in the twilight zone. Vaibhav Saini, Farima Farmahinifarahani, Yadong Lu, Pierre Baldi, Cristina V Lopes, Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software EngineeringACMVaibhav Saini, Farima Farmahinifarahani, Yadong Lu, Pierre Baldi, and Cristina V Lopes. Oreo: Detection of clones in the twilight zone. In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pages 354-365. ACM, 2018.\n\nDetecting fragile comments. Kaur Inderjot, Martin P Ratol, Robillard, Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering. the 32Nd IEEE/ACM International Conference on Automated Software EngineeringIEEE PressInderjot Kaur Ratol and Martin P Robillard. Detecting fragile comments. In Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering, pages 112-122. IEEE Press, 2017.\n\n/* icomment: Bugs or bad comments?. Lin Tan, Ding Yuan, Gopal Krishna, Yuanyuan Zhou, *. In ACM SIGOPS Operating Systems Review. 41ACMLin Tan, Ding Yuan, Gopal Krishna, and Yuanyuan Zhou. /* icomment: Bugs or bad comments?*. In ACM SIGOPS Operating Systems Review, volume 41, pages 145-158. ACM, 2007.\n\nCommunity developed list of common software security weaknesses. CWE. 789Community developed list of common software security weak- nesses. CWE 789. https://cwe.mitre.org/data/definitions/789. html. [Accessed 30 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE. 125Community developed list of common software security weak- nesses. CWE 125. https://cwe.mitre.org/data/definitions/125. html. [Accessed 30 July. 2018].\n\nCommunity developed list of common software security weaknesses. CWE 1019. Community developed list of common software security weak- nesses. CWE 1019. https://cwe.mitre.org/data/definitions/1019. html. [Accessed 30 July. 2018].\n\nCommunity developed list of common software security weaknesses. 20Community developed list of common software security weak- nesses. CWE 20. https://cwe.mitre.org/data/definitions/20.html. [Accessed 30 July. 2018].\n", "annotations": {"author": "[{\"end\":90,\"start\":76},{\"end\":103,\"start\":91},{\"end\":120,\"start\":104},{\"end\":134,\"start\":121},{\"end\":146,\"start\":135},{\"end\":170,\"start\":147}]", "publisher": null, "author_last_name": "[{\"end\":89,\"start\":84},{\"end\":102,\"start\":98},{\"end\":119,\"start\":110},{\"end\":133,\"start\":128},{\"end\":145,\"start\":140},{\"end\":169,\"start\":162}]", "author_first_name": "[{\"end\":83,\"start\":76},{\"end\":97,\"start\":91},{\"end\":109,\"start\":104},{\"end\":127,\"start\":121},{\"end\":139,\"start\":135},{\"end\":154,\"start\":147},{\"end\":161,\"start\":155}]", "author_affiliation": null, "title": "[{\"end\":73,\"start\":1},{\"end\":243,\"start\":171}]", "venue": null, "abstract": "[{\"end\":1642,\"start\":355}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":1856,\"start\":1853},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":1969,\"start\":1966},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":1995,\"start\":1992},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":2062,\"start\":2059},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":2067,\"start\":2064},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2147,\"start\":2144},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2339,\"start\":2336},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2344,\"start\":2341},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":2349,\"start\":2346},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2354,\"start\":2351},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2377,\"start\":2373},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2383,\"start\":2379},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2389,\"start\":2385},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2674,\"start\":2670},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3102,\"start\":3098},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3889,\"start\":3885},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":3895,\"start\":3891},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5056,\"start\":5053},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5061,\"start\":5058},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6563,\"start\":6559},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":6629,\"start\":6626},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":6635,\"start\":6631},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":6641,\"start\":6637},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":6647,\"start\":6643},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":6653,\"start\":6649},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":6724,\"start\":6720},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":6730,\"start\":6726},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":6736,\"start\":6732},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":6899,\"start\":6895},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":7009,\"start\":7005},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":7157,\"start\":7153},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7163,\"start\":7159},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":7181,\"start\":7177},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7399,\"start\":7396},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":7621,\"start\":7617},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7906,\"start\":7902},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8140,\"start\":8136},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8546,\"start\":8543},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":8552,\"start\":8548},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":8558,\"start\":8554},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":8854,\"start\":8850},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8879,\"start\":8876},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":8886,\"start\":8882},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":8892,\"start\":8888},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8898,\"start\":8894},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":8916,\"start\":8912},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":8922,\"start\":8918},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":8928,\"start\":8924},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8934,\"start\":8930},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":8992,\"start\":8989},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":8998,\"start\":8994},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":9014,\"start\":9010},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":9040,\"start\":9036},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":9053,\"start\":9049},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":9080,\"start\":9076},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":9504,\"start\":9501},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":9510,\"start\":9506},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":9554,\"start\":9551},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":9560,\"start\":9556},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":9566,\"start\":9562},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":9583,\"start\":9579},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":10188,\"start\":10184},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":10194,\"start\":10190},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":10200,\"start\":10196},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":10206,\"start\":10202},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":10450,\"start\":10446},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":10456,\"start\":10452},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":10462,\"start\":10458},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":10482,\"start\":10479},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":10617,\"start\":10613},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":10916,\"start\":10912},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":11141,\"start\":11137},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":11326,\"start\":11322},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":11567,\"start\":11563},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":12234,\"start\":12231},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":12239,\"start\":12235},{\"end\":13298,\"start\":13294},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":13726,\"start\":13722},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":13732,\"start\":13728},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":15284,\"start\":15280},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":15964,\"start\":15960},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":18113,\"start\":18109},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":18145,\"start\":18141},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":21294,\"start\":21290},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":21981,\"start\":21979},{\"end\":22149,\"start\":22144},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":22265,\"start\":22263},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":22424,\"start\":22422},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":23377,\"start\":23376},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":24205,\"start\":24203},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":25543,\"start\":25541},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":25929,\"start\":25928},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":26229,\"start\":26228},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":26234,\"start\":26230},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":26844,\"start\":26840},{\"end\":27978,\"start\":27974},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":28077,\"start\":28073},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":28978,\"start\":28974},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":30285,\"start\":30281},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":30385,\"start\":30381},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":31025,\"start\":31021},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":31031,\"start\":31027},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":31190,\"start\":31186},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":31196,\"start\":31192},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":33611,\"start\":33607},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":33628,\"start\":33624},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":33768,\"start\":33764},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":33791,\"start\":33787},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":33807,\"start\":33803},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":37948,\"start\":37945},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":38507,\"start\":38503},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":39047,\"start\":39043}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":41195,\"start\":40778},{\"attributes\":{\"id\":\"fig_1\"},\"end\":41271,\"start\":41196},{\"attributes\":{\"id\":\"fig_2\"},\"end\":41331,\"start\":41272},{\"attributes\":{\"id\":\"fig_3\"},\"end\":41389,\"start\":41332},{\"attributes\":{\"id\":\"fig_4\"},\"end\":41460,\"start\":41390},{\"attributes\":{\"id\":\"fig_5\"},\"end\":41646,\"start\":41461},{\"attributes\":{\"id\":\"fig_6\"},\"end\":42584,\"start\":41647},{\"attributes\":{\"id\":\"fig_7\"},\"end\":43127,\"start\":42585},{\"attributes\":{\"id\":\"fig_17\"},\"end\":43227,\"start\":43128},{\"attributes\":{\"id\":\"fig_21\"},\"end\":43368,\"start\":43228},{\"attributes\":{\"id\":\"fig_26\"},\"end\":43926,\"start\":43369},{\"attributes\":{\"id\":\"fig_27\"},\"end\":44807,\"start\":43927},{\"attributes\":{\"id\":\"fig_28\"},\"end\":45256,\"start\":44808},{\"attributes\":{\"id\":\"fig_29\"},\"end\":46129,\"start\":45257},{\"attributes\":{\"id\":\"fig_30\"},\"end\":46640,\"start\":46130},{\"attributes\":{\"id\":\"fig_31\"},\"end\":47145,\"start\":46641},{\"attributes\":{\"id\":\"fig_32\"},\"end\":47417,\"start\":47146},{\"attributes\":{\"id\":\"fig_33\"},\"end\":47654,\"start\":47418},{\"attributes\":{\"id\":\"fig_34\"},\"end\":47741,\"start\":47655},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":48266,\"start\":47742},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":48523,\"start\":48267},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":48975,\"start\":48524},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":49235,\"start\":48976},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":49667,\"start\":49236},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":50631,\"start\":49668},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":51046,\"start\":50632},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":52542,\"start\":51047},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":52916,\"start\":52543},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":53260,\"start\":52917}]", "paragraph": "[{\"end\":2911,\"start\":1658},{\"end\":3775,\"start\":2913},{\"end\":4447,\"start\":3777},{\"end\":4753,\"start\":4449},{\"end\":4874,\"start\":4755},{\"end\":5199,\"start\":4876},{\"end\":5680,\"start\":5201},{\"end\":5828,\"start\":5712},{\"end\":6415,\"start\":5865},{\"end\":7164,\"start\":6460},{\"end\":7375,\"start\":7166},{\"end\":7603,\"start\":7377},{\"end\":7880,\"start\":7605},{\"end\":8124,\"start\":7882},{\"end\":8368,\"start\":8126},{\"end\":9088,\"start\":8424},{\"end\":9260,\"start\":9090},{\"end\":9491,\"start\":9304},{\"end\":9731,\"start\":9493},{\"end\":9929,\"start\":9733},{\"end\":10071,\"start\":9965},{\"end\":10207,\"start\":10073},{\"end\":10868,\"start\":10209},{\"end\":11935,\"start\":10898},{\"end\":12971,\"start\":11999},{\"end\":13734,\"start\":12991},{\"end\":14064,\"start\":13757},{\"end\":14690,\"start\":14066},{\"end\":14898,\"start\":14692},{\"end\":15581,\"start\":14916},{\"end\":16437,\"start\":15583},{\"end\":16863,\"start\":16524},{\"end\":19021,\"start\":16917},{\"end\":20035,\"start\":19113},{\"end\":20349,\"start\":20037},{\"end\":21397,\"start\":20361},{\"end\":21578,\"start\":21428},{\"end\":21983,\"start\":21604},{\"end\":22153,\"start\":22020},{\"end\":22267,\"start\":22176},{\"end\":22426,\"start\":22308},{\"end\":22606,\"start\":22434},{\"end\":22825,\"start\":22663},{\"end\":23045,\"start\":22890},{\"end\":23233,\"start\":23053},{\"end\":23379,\"start\":23241},{\"end\":23514,\"start\":23414},{\"end\":23636,\"start\":23541},{\"end\":23807,\"start\":23661},{\"end\":24007,\"start\":23837},{\"end\":24207,\"start\":24033},{\"end\":24376,\"start\":24215},{\"end\":24528,\"start\":24405},{\"end\":24744,\"start\":24580},{\"end\":24916,\"start\":24772},{\"end\":25086,\"start\":24942},{\"end\":25299,\"start\":25094},{\"end\":25545,\"start\":25307},{\"end\":25750,\"start\":25553},{\"end\":25931,\"start\":25792},{\"end\":26085,\"start\":25972},{\"end\":29957,\"start\":26093},{\"end\":33031,\"start\":30128},{\"end\":33395,\"start\":33132},{\"end\":34057,\"start\":33397},{\"end\":34505,\"start\":34059},{\"end\":34691,\"start\":34507},{\"end\":34884,\"start\":34693},{\"end\":35483,\"start\":34913},{\"end\":36996,\"start\":35485},{\"end\":37154,\"start\":36998},{\"end\":37274,\"start\":37156},{\"end\":37472,\"start\":37276},{\"end\":38147,\"start\":37474},{\"end\":38272,\"start\":38171},{\"end\":39793,\"start\":38274},{\"end\":40777,\"start\":39808}]", "formula": null, "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":21240,\"start\":21233}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1656,\"start\":1644},{\"attributes\":{\"n\":\"2\"},\"end\":5710,\"start\":5683},{\"attributes\":{\"n\":\"2.1\"},\"end\":5863,\"start\":5831},{\"attributes\":{\"n\":\"2.2\"},\"end\":6458,\"start\":6418},{\"attributes\":{\"n\":\"2.3\"},\"end\":8422,\"start\":8371},{\"end\":9302,\"start\":9263},{\"end\":9963,\"start\":9932},{\"attributes\":{\"n\":\"2.4\"},\"end\":10896,\"start\":10871},{\"attributes\":{\"n\":\"3\"},\"end\":11976,\"start\":11938},{\"attributes\":{\"n\":\"3.1\"},\"end\":11997,\"start\":11979},{\"attributes\":{\"n\":\"3.2\"},\"end\":12989,\"start\":12974},{\"attributes\":{\"n\":\"3.3\"},\"end\":13755,\"start\":13737},{\"attributes\":{\"n\":\"3.4\"},\"end\":14914,\"start\":14901},{\"attributes\":{\"n\":\"4\"},\"end\":16511,\"start\":16440},{\"attributes\":{\"n\":\"4.1\"},\"end\":16522,\"start\":16514},{\"end\":16915,\"start\":16866},{\"end\":19111,\"start\":19024},{\"attributes\":{\"n\":\"4.2\"},\"end\":20359,\"start\":20352},{\"end\":21426,\"start\":21400},{\"attributes\":{\"n\":\"78\"},\"end\":21602,\"start\":21581},{\"end\":21989,\"start\":21986},{\"end\":22018,\"start\":21992},{\"end\":22174,\"start\":22156},{\"attributes\":{\"n\":\"131\"},\"end\":22306,\"start\":22270},{\"end\":22432,\"start\":22429},{\"attributes\":{\"n\":\"754\"},\"end\":22661,\"start\":22609},{\"end\":22831,\"start\":22828},{\"end\":22888,\"start\":22834},{\"end\":23051,\"start\":23048},{\"end\":23239,\"start\":23236},{\"attributes\":{\"n\":\"789\"},\"end\":23412,\"start\":23382},{\"attributes\":{\"n\":\"252\"},\"end\":23539,\"start\":23517},{\"end\":23659,\"start\":23639},{\"end\":23835,\"start\":23810},{\"end\":24031,\"start\":24010},{\"end\":24213,\"start\":24210},{\"end\":24403,\"start\":24379},{\"attributes\":{\"n\":\"628\"},\"end\":24578,\"start\":24531},{\"end\":24770,\"start\":24747},{\"end\":24940,\"start\":24919},{\"end\":25092,\"start\":25089},{\"end\":25305,\"start\":25302},{\"end\":25551,\"start\":25548},{\"end\":25790,\"start\":25753},{\"attributes\":{\"n\":\"835\"},\"end\":25970,\"start\":25934},{\"end\":26091,\"start\":26088},{\"attributes\":{\"n\":\"5\"},\"end\":30030,\"start\":29960},{\"attributes\":{\"n\":\"5.1\"},\"end\":30126,\"start\":30033},{\"attributes\":{\"n\":\"5.2\"},\"end\":33130,\"start\":33034},{\"attributes\":{\"n\":\"6\"},\"end\":34911,\"start\":34887},{\"attributes\":{\"n\":\"7\"},\"end\":38169,\"start\":38150},{\"attributes\":{\"n\":\"8\"},\"end\":39806,\"start\":39796},{\"end\":41205,\"start\":41197},{\"end\":41281,\"start\":41273},{\"end\":41341,\"start\":41333},{\"end\":41399,\"start\":41391},{\"end\":41470,\"start\":41462},{\"end\":41656,\"start\":41648},{\"end\":42595,\"start\":42586},{\"end\":43381,\"start\":43370},{\"end\":44820,\"start\":44809},{\"end\":45269,\"start\":45258},{\"end\":46140,\"start\":46131},{\"end\":46653,\"start\":46642},{\"end\":47156,\"start\":47147},{\"end\":47428,\"start\":47419},{\"end\":47665,\"start\":47656},{\"end\":47746,\"start\":47743},{\"end\":48277,\"start\":48268},{\"end\":48534,\"start\":48525},{\"end\":48986,\"start\":48977},{\"end\":49246,\"start\":49237},{\"end\":50642,\"start\":50633},{\"end\":51057,\"start\":51048},{\"end\":52927,\"start\":52918}]", "table": "[{\"end\":48975,\"start\":48884},{\"end\":49235,\"start\":49208},{\"end\":49667,\"start\":49248},{\"end\":50631,\"start\":50035},{\"end\":51046,\"start\":50772},{\"end\":52542,\"start\":51126},{\"end\":52916,\"start\":52655},{\"end\":53260,\"start\":53242}]", "figure_caption": "[{\"end\":41195,\"start\":40780},{\"end\":41271,\"start\":41207},{\"end\":41331,\"start\":41283},{\"end\":41389,\"start\":41343},{\"end\":41460,\"start\":41401},{\"end\":41646,\"start\":41472},{\"end\":42584,\"start\":41658},{\"end\":43127,\"start\":42598},{\"end\":43227,\"start\":43130},{\"end\":43368,\"start\":43230},{\"end\":43926,\"start\":43383},{\"end\":44807,\"start\":43929},{\"end\":45256,\"start\":44822},{\"end\":46129,\"start\":45271},{\"end\":46640,\"start\":46143},{\"end\":47145,\"start\":46655},{\"end\":47417,\"start\":47159},{\"end\":47654,\"start\":47431},{\"end\":47741,\"start\":47668},{\"end\":48266,\"start\":47748},{\"end\":48523,\"start\":48279},{\"end\":48884,\"start\":48536},{\"end\":49208,\"start\":48988},{\"end\":50035,\"start\":49670},{\"end\":50772,\"start\":50644},{\"end\":51126,\"start\":51059},{\"end\":52655,\"start\":52545},{\"end\":53242,\"start\":52929}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":13123,\"start\":13115},{\"attributes\":{\"ref_id\":\"fig_26\"},\"end\":13411,\"start\":13403},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":13509,\"start\":13501},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":13979,\"start\":13971},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":14520,\"start\":14512},{\"end\":14984,\"start\":14976},{\"end\":17400,\"start\":17392},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":19535,\"start\":19527},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20445,\"start\":20436},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":20742,\"start\":20733},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":21060,\"start\":21050},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":21128,\"start\":21119},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34714,\"start\":34705},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":34882,\"start\":34873},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":37486,\"start\":37477}]", "bib_author_first_name": "[{\"end\":53338,\"start\":53334},{\"end\":53356,\"start\":53352},{\"end\":53372,\"start\":53365},{\"end\":53660,\"start\":53659},{\"end\":53914,\"start\":53907},{\"end\":53928,\"start\":53922},{\"end\":53940,\"start\":53937},{\"end\":53950,\"start\":53946},{\"end\":54471,\"start\":54460},{\"end\":54483,\"start\":54479},{\"end\":54754,\"start\":54747},{\"end\":54766,\"start\":54765},{\"end\":54785,\"start\":54776},{\"end\":55258,\"start\":55250},{\"end\":55284,\"start\":55279},{\"end\":55299,\"start\":55294},{\"end\":55729,\"start\":55722},{\"end\":55743,\"start\":55736},{\"end\":55758,\"start\":55752},{\"end\":55771,\"start\":55765},{\"end\":55785,\"start\":55777},{\"end\":55787,\"start\":55786},{\"end\":55806,\"start\":55797},{\"end\":56235,\"start\":56230},{\"end\":56255,\"start\":56245},{\"end\":56272,\"start\":56267},{\"end\":56288,\"start\":56279},{\"end\":56306,\"start\":56299},{\"end\":56320,\"start\":56313},{\"end\":56335,\"start\":56329},{\"end\":56767,\"start\":56762},{\"end\":56782,\"start\":56776},{\"end\":56799,\"start\":56790},{\"end\":56817,\"start\":56808},{\"end\":56832,\"start\":56824},{\"end\":57234,\"start\":57232},{\"end\":57246,\"start\":57241},{\"end\":57263,\"start\":57256},{\"end\":57279,\"start\":57271},{\"end\":57668,\"start\":57665},{\"end\":57680,\"start\":57674},{\"end\":57701,\"start\":57693},{\"end\":57718,\"start\":57711},{\"end\":58003,\"start\":57995},{\"end\":58025,\"start\":58021},{\"end\":58041,\"start\":58034},{\"end\":58058,\"start\":58050},{\"end\":58072,\"start\":58067},{\"end\":58569,\"start\":58560},{\"end\":58583,\"start\":58578},{\"end\":58601,\"start\":58592},{\"end\":58617,\"start\":58610},{\"end\":59130,\"start\":59121},{\"end\":59148,\"start\":59139},{\"end\":59164,\"start\":59157},{\"end\":59662,\"start\":59661},{\"end\":59951,\"start\":59947},{\"end\":59967,\"start\":59960},{\"end\":60205,\"start\":60200},{\"end\":60218,\"start\":60212},{\"end\":60231,\"start\":60227},{\"end\":60244,\"start\":60240},{\"end\":60760,\"start\":60753},{\"end\":60772,\"start\":60767},{\"end\":60774,\"start\":60773},{\"end\":61248,\"start\":61246},{\"end\":61256,\"start\":61253},{\"end\":61271,\"start\":61265},{\"end\":61287,\"start\":61279},{\"end\":61702,\"start\":61697},{\"end\":61715,\"start\":61711},{\"end\":61731,\"start\":61724},{\"end\":61748,\"start\":61742},{\"end\":62260,\"start\":62255},{\"end\":62269,\"start\":62268},{\"end\":62284,\"start\":62279},{\"end\":62286,\"start\":62285},{\"end\":62616,\"start\":62611},{\"end\":62630,\"start\":62625},{\"end\":62645,\"start\":62640},{\"end\":63145,\"start\":63132},{\"end\":63163,\"start\":63154},{\"end\":63176,\"start\":63172},{\"end\":63195,\"start\":63190},{\"end\":63707,\"start\":63703},{\"end\":63717,\"start\":63716},{\"end\":63730,\"start\":63726},{\"end\":63740,\"start\":63736},{\"end\":63758,\"start\":63753},{\"end\":63760,\"start\":63759},{\"end\":64265,\"start\":64261},{\"end\":64281,\"start\":64276},{\"end\":64295,\"start\":64290},{\"end\":64310,\"start\":64304},{\"end\":64326,\"start\":64321},{\"end\":64804,\"start\":64803},{\"end\":64820,\"start\":64814},{\"end\":64836,\"start\":64829},{\"end\":64838,\"start\":64837},{\"end\":65420,\"start\":65411},{\"end\":65451,\"start\":65443},{\"end\":65961,\"start\":65959},{\"end\":65974,\"start\":65968},{\"end\":65988,\"start\":65981},{\"end\":66000,\"start\":65994},{\"end\":66016,\"start\":66009},{\"end\":66439,\"start\":66433},{\"end\":66451,\"start\":66446},{\"end\":66463,\"start\":66461},{\"end\":66477,\"start\":66470},{\"end\":66488,\"start\":66484},{\"end\":66978,\"start\":66972},{\"end\":66991,\"start\":66985},{\"end\":67007,\"start\":67001},{\"end\":67020,\"start\":67016},{\"end\":67039,\"start\":67034},{\"end\":67059,\"start\":67052},{\"end\":67557,\"start\":67553},{\"end\":67575,\"start\":67565},{\"end\":67588,\"start\":67583},{\"end\":67600,\"start\":67596},{\"end\":68038,\"start\":68037},{\"end\":68055,\"start\":68047},{\"end\":68604,\"start\":68597},{\"end\":68903,\"start\":68897},{\"end\":68918,\"start\":68911},{\"end\":68939,\"start\":68930},{\"end\":68958,\"start\":68951},{\"end\":68973,\"start\":68966},{\"end\":69195,\"start\":69190},{\"end\":69209,\"start\":69204},{\"end\":69224,\"start\":69218},{\"end\":69682,\"start\":69673},{\"end\":69699,\"start\":69691},{\"end\":69703,\"start\":69700},{\"end\":69720,\"start\":69711},{\"end\":70162,\"start\":70156},{\"end\":70177,\"start\":70171},{\"end\":70198,\"start\":70189},{\"end\":70677,\"start\":70670},{\"end\":70693,\"start\":70684},{\"end\":70711,\"start\":70704},{\"end\":70728,\"start\":70720},{\"end\":70730,\"start\":70729},{\"end\":70746,\"start\":70740},{\"end\":71155,\"start\":71151},{\"end\":71169,\"start\":71164},{\"end\":71568,\"start\":71564},{\"end\":71589,\"start\":71581},{\"end\":71610,\"start\":71598},{\"end\":71626,\"start\":71621},{\"end\":71643,\"start\":71636},{\"end\":72140,\"start\":72131},{\"end\":72150,\"start\":72149},{\"end\":72550,\"start\":72545},{\"end\":72566,\"start\":72558},{\"end\":72581,\"start\":72576},{\"end\":72600,\"start\":72592},{\"end\":72614,\"start\":72608},{\"end\":72633,\"start\":72622},{\"end\":72649,\"start\":72643},{\"end\":73064,\"start\":73062},{\"end\":73077,\"start\":73071},{\"end\":73091,\"start\":73084},{\"end\":73103,\"start\":73097},{\"end\":73119,\"start\":73112},{\"end\":73542,\"start\":73536},{\"end\":73809,\"start\":73803},{\"end\":73826,\"start\":73819},{\"end\":73841,\"start\":73834},{\"end\":73854,\"start\":73853},{\"end\":73873,\"start\":73865},{\"end\":73875,\"start\":73874},{\"end\":74310,\"start\":74309},{\"end\":74560,\"start\":74554},{\"end\":74562,\"start\":74561},{\"end\":75884,\"start\":75877},{\"end\":75898,\"start\":75892},{\"end\":75924,\"start\":75918},{\"end\":75935,\"start\":75929},{\"end\":75951,\"start\":75943},{\"end\":75953,\"start\":75952},{\"end\":76592,\"start\":76588},{\"end\":76611,\"start\":76603},{\"end\":77050,\"start\":77047},{\"end\":77060,\"start\":77056},{\"end\":77072,\"start\":77067},{\"end\":77090,\"start\":77082}]", "bib_author_last_name": "[{\"end\":53350,\"start\":53339},{\"end\":53363,\"start\":53357},{\"end\":53380,\"start\":53373},{\"end\":53666,\"start\":53661},{\"end\":53671,\"start\":53668},{\"end\":53920,\"start\":53915},{\"end\":53935,\"start\":53929},{\"end\":53944,\"start\":53941},{\"end\":53957,\"start\":53951},{\"end\":54477,\"start\":54472},{\"end\":54490,\"start\":54484},{\"end\":54763,\"start\":54755},{\"end\":54774,\"start\":54767},{\"end\":54792,\"start\":54786},{\"end\":54800,\"start\":54794},{\"end\":55277,\"start\":55259},{\"end\":55292,\"start\":55285},{\"end\":55306,\"start\":55300},{\"end\":55313,\"start\":55308},{\"end\":55734,\"start\":55730},{\"end\":55750,\"start\":55744},{\"end\":55763,\"start\":55759},{\"end\":55775,\"start\":55772},{\"end\":55795,\"start\":55788},{\"end\":55815,\"start\":55807},{\"end\":56243,\"start\":56236},{\"end\":56265,\"start\":56256},{\"end\":56277,\"start\":56273},{\"end\":56297,\"start\":56289},{\"end\":56311,\"start\":56307},{\"end\":56327,\"start\":56321},{\"end\":56340,\"start\":56336},{\"end\":56774,\"start\":56768},{\"end\":56788,\"start\":56783},{\"end\":56806,\"start\":56800},{\"end\":56822,\"start\":56818},{\"end\":56842,\"start\":56833},{\"end\":57239,\"start\":57235},{\"end\":57254,\"start\":57247},{\"end\":57269,\"start\":57264},{\"end\":57285,\"start\":57280},{\"end\":57672,\"start\":57669},{\"end\":57691,\"start\":57681},{\"end\":57709,\"start\":57702},{\"end\":57724,\"start\":57719},{\"end\":58019,\"start\":58004},{\"end\":58032,\"start\":58026},{\"end\":58048,\"start\":58042},{\"end\":58065,\"start\":58059},{\"end\":58080,\"start\":58073},{\"end\":58335,\"start\":58322},{\"end\":58576,\"start\":58570},{\"end\":58590,\"start\":58584},{\"end\":58608,\"start\":58602},{\"end\":58623,\"start\":58618},{\"end\":59137,\"start\":59131},{\"end\":59155,\"start\":59149},{\"end\":59170,\"start\":59165},{\"end\":59668,\"start\":59663},{\"end\":59958,\"start\":59952},{\"end\":59974,\"start\":59968},{\"end\":60210,\"start\":60206},{\"end\":60225,\"start\":60219},{\"end\":60238,\"start\":60232},{\"end\":60251,\"start\":60245},{\"end\":60765,\"start\":60761},{\"end\":60788,\"start\":60775},{\"end\":60796,\"start\":60790},{\"end\":61251,\"start\":61249},{\"end\":61263,\"start\":61257},{\"end\":61277,\"start\":61272},{\"end\":61296,\"start\":61288},{\"end\":61709,\"start\":61703},{\"end\":61722,\"start\":61716},{\"end\":61740,\"start\":61732},{\"end\":61757,\"start\":61749},{\"end\":62266,\"start\":62261},{\"end\":62277,\"start\":62270},{\"end\":62293,\"start\":62287},{\"end\":62301,\"start\":62295},{\"end\":62623,\"start\":62617},{\"end\":62638,\"start\":62631},{\"end\":62652,\"start\":62646},{\"end\":63152,\"start\":63146},{\"end\":63170,\"start\":63164},{\"end\":63188,\"start\":63177},{\"end\":63201,\"start\":63196},{\"end\":63714,\"start\":63708},{\"end\":63724,\"start\":63718},{\"end\":63734,\"start\":63731},{\"end\":63751,\"start\":63741},{\"end\":63770,\"start\":63761},{\"end\":63779,\"start\":63772},{\"end\":64274,\"start\":64266},{\"end\":64288,\"start\":64282},{\"end\":64302,\"start\":64296},{\"end\":64319,\"start\":64311},{\"end\":64335,\"start\":64327},{\"end\":64812,\"start\":64805},{\"end\":64827,\"start\":64821},{\"end\":64848,\"start\":64839},{\"end\":64854,\"start\":64850},{\"end\":65441,\"start\":65421},{\"end\":65462,\"start\":65452},{\"end\":65472,\"start\":65464},{\"end\":65966,\"start\":65962},{\"end\":65979,\"start\":65975},{\"end\":65992,\"start\":65989},{\"end\":66007,\"start\":66001},{\"end\":66030,\"start\":66017},{\"end\":66444,\"start\":66440},{\"end\":66459,\"start\":66452},{\"end\":66468,\"start\":66464},{\"end\":66482,\"start\":66478},{\"end\":66499,\"start\":66489},{\"end\":66983,\"start\":66979},{\"end\":66999,\"start\":66992},{\"end\":67014,\"start\":67008},{\"end\":67032,\"start\":67021},{\"end\":67050,\"start\":67040},{\"end\":67065,\"start\":67060},{\"end\":67563,\"start\":67558},{\"end\":67581,\"start\":67576},{\"end\":67594,\"start\":67589},{\"end\":67607,\"start\":67601},{\"end\":68045,\"start\":68039},{\"end\":68061,\"start\":68056},{\"end\":68068,\"start\":68063},{\"end\":68611,\"start\":68605},{\"end\":68909,\"start\":68904},{\"end\":68928,\"start\":68919},{\"end\":68949,\"start\":68940},{\"end\":68964,\"start\":68959},{\"end\":68977,\"start\":68974},{\"end\":69202,\"start\":69196},{\"end\":69216,\"start\":69210},{\"end\":69233,\"start\":69225},{\"end\":69689,\"start\":69683},{\"end\":69709,\"start\":69704},{\"end\":69727,\"start\":69721},{\"end\":70169,\"start\":70163},{\"end\":70187,\"start\":70178},{\"end\":70209,\"start\":70199},{\"end\":70682,\"start\":70678},{\"end\":70702,\"start\":70694},{\"end\":70718,\"start\":70712},{\"end\":70738,\"start\":70731},{\"end\":70751,\"start\":70747},{\"end\":71162,\"start\":71156},{\"end\":71176,\"start\":71170},{\"end\":71579,\"start\":71569},{\"end\":71596,\"start\":71590},{\"end\":71619,\"start\":71611},{\"end\":71634,\"start\":71627},{\"end\":71649,\"start\":71644},{\"end\":72147,\"start\":72141},{\"end\":72157,\"start\":72151},{\"end\":72168,\"start\":72159},{\"end\":72556,\"start\":72551},{\"end\":72574,\"start\":72567},{\"end\":72590,\"start\":72582},{\"end\":72606,\"start\":72601},{\"end\":72620,\"start\":72615},{\"end\":72641,\"start\":72634},{\"end\":72659,\"start\":72650},{\"end\":73069,\"start\":73065},{\"end\":73082,\"start\":73078},{\"end\":73095,\"start\":73092},{\"end\":73110,\"start\":73104},{\"end\":73133,\"start\":73120},{\"end\":73550,\"start\":73543},{\"end\":73817,\"start\":73810},{\"end\":73832,\"start\":73827},{\"end\":73851,\"start\":73842},{\"end\":73863,\"start\":73855},{\"end\":73879,\"start\":73876},{\"end\":73886,\"start\":73881},{\"end\":74317,\"start\":74311},{\"end\":74327,\"start\":74319},{\"end\":74568,\"start\":74563},{\"end\":75890,\"start\":75885},{\"end\":75916,\"start\":75899},{\"end\":75927,\"start\":75925},{\"end\":75941,\"start\":75936},{\"end\":75959,\"start\":75954},{\"end\":76601,\"start\":76593},{\"end\":76617,\"start\":76612},{\"end\":76628,\"start\":76619},{\"end\":77054,\"start\":77051},{\"end\":77065,\"start\":77061},{\"end\":77080,\"start\":77073},{\"end\":77095,\"start\":77091}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":5991514},\"end\":53599,\"start\":53262},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":12128797},\"end\":53795,\"start\":53601},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":3163444},\"end\":54375,\"start\":53797},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":15881819},\"end\":54699,\"start\":54377},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":10538888},\"end\":55170,\"start\":54701},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":206856272},\"end\":55634,\"start\":55172},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":15642180},\"end\":56135,\"start\":55636},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":25003307},\"end\":56688,\"start\":56137},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":13139064},\"end\":57184,\"start\":56690},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":22631454},\"end\":57593,\"start\":57186},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":18718066},\"end\":57954,\"start\":57595},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":49318394},\"end\":58303,\"start\":57956},{\"attributes\":{\"id\":\"b12\"},\"end\":58479,\"start\":58305},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":3989134},\"end\":59033,\"start\":58481},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":52180036},\"end\":59587,\"start\":59035},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":2358856},\"end\":59898,\"start\":59589},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":12382075},\"end\":60118,\"start\":59900},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":4857659},\"end\":60629,\"start\":60120},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":47018163},\"end\":61200,\"start\":60631},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2398095},\"end\":61631,\"start\":61202},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":49562084},\"end\":62166,\"start\":61633},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":13252554},\"end\":62528,\"start\":62168},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":195298513},\"end\":63058,\"start\":62530},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":207183913},\"end\":63604,\"start\":63060},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":2907348},\"end\":64205,\"start\":63606},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":8706419},\"end\":64715,\"start\":64207},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":13878403},\"end\":65332,\"start\":64717},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":195298559},\"end\":65892,\"start\":65334},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":3480894},\"end\":66359,\"start\":65894},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":57573691},\"end\":66894,\"start\":66361},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":207198722},\"end\":67494,\"start\":66896},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":206492732},\"end\":67979,\"start\":67496},{\"attributes\":{\"id\":\"b32\"},\"end\":68458,\"start\":67981},{\"attributes\":{\"id\":\"b33\"},\"end\":68844,\"start\":68460},{\"attributes\":{\"id\":\"b34\"},\"end\":69121,\"start\":68846},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":171091011},\"end\":69601,\"start\":69123},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":3330905},\"end\":70078,\"start\":69603},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":16320921},\"end\":70590,\"start\":70080},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":9084703},\"end\":71075,\"start\":70592},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":52012325},\"end\":71481,\"start\":71077},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":4509026},\"end\":72065,\"start\":71483},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":4472906},\"end\":72462,\"start\":72067},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":7710214},\"end\":72995,\"start\":72464},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":3480894},\"end\":73462,\"start\":72997},{\"attributes\":{\"id\":\"b44\"},\"end\":73746,\"start\":73464},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":3828085},\"end\":74218,\"start\":73748},{\"attributes\":{\"id\":\"b46\"},\"end\":74520,\"start\":74220},{\"attributes\":{\"id\":\"b47\"},\"end\":74717,\"start\":74522},{\"attributes\":{\"id\":\"b48\"},\"end\":74922,\"start\":74719},{\"attributes\":{\"id\":\"b49\"},\"end\":75149,\"start\":74924},{\"attributes\":{\"id\":\"b50\"},\"end\":75375,\"start\":75151},{\"attributes\":{\"id\":\"b51\"},\"end\":75601,\"start\":75377},{\"attributes\":{\"id\":\"b52\"},\"end\":75827,\"start\":75603},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":49273631},\"end\":76558,\"start\":75829},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":10905510},\"end\":77009,\"start\":76560},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":1843404},\"end\":77312,\"start\":77011},{\"attributes\":{\"id\":\"b56\"},\"end\":77538,\"start\":77314},{\"attributes\":{\"id\":\"b57\"},\"end\":77764,\"start\":77540},{\"attributes\":{\"id\":\"b58\"},\"end\":77994,\"start\":77766},{\"attributes\":{\"id\":\"b59\"},\"end\":78211,\"start\":77996}]", "bib_title": "[{\"end\":53332,\"start\":53262},{\"end\":53657,\"start\":53601},{\"end\":53905,\"start\":53797},{\"end\":54458,\"start\":54377},{\"end\":54745,\"start\":54701},{\"end\":55248,\"start\":55172},{\"end\":55720,\"start\":55636},{\"end\":56228,\"start\":56137},{\"end\":56760,\"start\":56690},{\"end\":57230,\"start\":57186},{\"end\":57663,\"start\":57595},{\"end\":57993,\"start\":57956},{\"end\":58558,\"start\":58481},{\"end\":59119,\"start\":59035},{\"end\":59659,\"start\":59589},{\"end\":59945,\"start\":59900},{\"end\":60198,\"start\":60120},{\"end\":60751,\"start\":60631},{\"end\":61244,\"start\":61202},{\"end\":61695,\"start\":61633},{\"end\":62253,\"start\":62168},{\"end\":62609,\"start\":62530},{\"end\":63130,\"start\":63060},{\"end\":63701,\"start\":63606},{\"end\":64259,\"start\":64207},{\"end\":64801,\"start\":64717},{\"end\":65409,\"start\":65334},{\"end\":65957,\"start\":65894},{\"end\":66431,\"start\":66361},{\"end\":66970,\"start\":66896},{\"end\":67551,\"start\":67496},{\"end\":68035,\"start\":67981},{\"end\":68595,\"start\":68460},{\"end\":69188,\"start\":69123},{\"end\":69671,\"start\":69603},{\"end\":70154,\"start\":70080},{\"end\":70668,\"start\":70592},{\"end\":71149,\"start\":71077},{\"end\":71562,\"start\":71483},{\"end\":72129,\"start\":72067},{\"end\":72543,\"start\":72464},{\"end\":73060,\"start\":72997},{\"end\":73801,\"start\":73748},{\"end\":75214,\"start\":75151},{\"end\":75440,\"start\":75377},{\"end\":75666,\"start\":75603},{\"end\":75875,\"start\":75829},{\"end\":76586,\"start\":76560},{\"end\":77045,\"start\":77011},{\"end\":77377,\"start\":77314},{\"end\":77603,\"start\":77540},{\"end\":77829,\"start\":77766}]", "bib_author": "[{\"end\":53352,\"start\":53334},{\"end\":53365,\"start\":53352},{\"end\":53382,\"start\":53365},{\"end\":53668,\"start\":53659},{\"end\":53673,\"start\":53668},{\"end\":53922,\"start\":53907},{\"end\":53937,\"start\":53922},{\"end\":53946,\"start\":53937},{\"end\":53959,\"start\":53946},{\"end\":54479,\"start\":54460},{\"end\":54492,\"start\":54479},{\"end\":54765,\"start\":54747},{\"end\":54776,\"start\":54765},{\"end\":54794,\"start\":54776},{\"end\":54802,\"start\":54794},{\"end\":55279,\"start\":55250},{\"end\":55294,\"start\":55279},{\"end\":55308,\"start\":55294},{\"end\":55315,\"start\":55308},{\"end\":55736,\"start\":55722},{\"end\":55752,\"start\":55736},{\"end\":55765,\"start\":55752},{\"end\":55777,\"start\":55765},{\"end\":55797,\"start\":55777},{\"end\":55817,\"start\":55797},{\"end\":56245,\"start\":56230},{\"end\":56267,\"start\":56245},{\"end\":56279,\"start\":56267},{\"end\":56299,\"start\":56279},{\"end\":56313,\"start\":56299},{\"end\":56329,\"start\":56313},{\"end\":56342,\"start\":56329},{\"end\":56776,\"start\":56762},{\"end\":56790,\"start\":56776},{\"end\":56808,\"start\":56790},{\"end\":56824,\"start\":56808},{\"end\":56844,\"start\":56824},{\"end\":57241,\"start\":57232},{\"end\":57256,\"start\":57241},{\"end\":57271,\"start\":57256},{\"end\":57287,\"start\":57271},{\"end\":57674,\"start\":57665},{\"end\":57693,\"start\":57674},{\"end\":57711,\"start\":57693},{\"end\":57726,\"start\":57711},{\"end\":58021,\"start\":57995},{\"end\":58034,\"start\":58021},{\"end\":58050,\"start\":58034},{\"end\":58067,\"start\":58050},{\"end\":58082,\"start\":58067},{\"end\":58337,\"start\":58322},{\"end\":58578,\"start\":58560},{\"end\":58592,\"start\":58578},{\"end\":58610,\"start\":58592},{\"end\":58625,\"start\":58610},{\"end\":59139,\"start\":59121},{\"end\":59157,\"start\":59139},{\"end\":59172,\"start\":59157},{\"end\":59670,\"start\":59661},{\"end\":59960,\"start\":59947},{\"end\":59976,\"start\":59960},{\"end\":60212,\"start\":60200},{\"end\":60227,\"start\":60212},{\"end\":60240,\"start\":60227},{\"end\":60253,\"start\":60240},{\"end\":60767,\"start\":60753},{\"end\":60790,\"start\":60767},{\"end\":60798,\"start\":60790},{\"end\":61253,\"start\":61246},{\"end\":61265,\"start\":61253},{\"end\":61279,\"start\":61265},{\"end\":61298,\"start\":61279},{\"end\":61711,\"start\":61697},{\"end\":61724,\"start\":61711},{\"end\":61742,\"start\":61724},{\"end\":61759,\"start\":61742},{\"end\":62268,\"start\":62255},{\"end\":62279,\"start\":62268},{\"end\":62295,\"start\":62279},{\"end\":62303,\"start\":62295},{\"end\":62625,\"start\":62611},{\"end\":62640,\"start\":62625},{\"end\":62654,\"start\":62640},{\"end\":63154,\"start\":63132},{\"end\":63172,\"start\":63154},{\"end\":63190,\"start\":63172},{\"end\":63203,\"start\":63190},{\"end\":63716,\"start\":63703},{\"end\":63726,\"start\":63716},{\"end\":63736,\"start\":63726},{\"end\":63753,\"start\":63736},{\"end\":63772,\"start\":63753},{\"end\":63781,\"start\":63772},{\"end\":64276,\"start\":64261},{\"end\":64290,\"start\":64276},{\"end\":64304,\"start\":64290},{\"end\":64321,\"start\":64304},{\"end\":64337,\"start\":64321},{\"end\":64814,\"start\":64803},{\"end\":64829,\"start\":64814},{\"end\":64850,\"start\":64829},{\"end\":64856,\"start\":64850},{\"end\":65443,\"start\":65411},{\"end\":65464,\"start\":65443},{\"end\":65474,\"start\":65464},{\"end\":65968,\"start\":65959},{\"end\":65981,\"start\":65968},{\"end\":65994,\"start\":65981},{\"end\":66009,\"start\":65994},{\"end\":66032,\"start\":66009},{\"end\":66446,\"start\":66433},{\"end\":66461,\"start\":66446},{\"end\":66470,\"start\":66461},{\"end\":66484,\"start\":66470},{\"end\":66501,\"start\":66484},{\"end\":66985,\"start\":66972},{\"end\":67001,\"start\":66985},{\"end\":67016,\"start\":67001},{\"end\":67034,\"start\":67016},{\"end\":67052,\"start\":67034},{\"end\":67067,\"start\":67052},{\"end\":67565,\"start\":67553},{\"end\":67583,\"start\":67565},{\"end\":67596,\"start\":67583},{\"end\":67609,\"start\":67596},{\"end\":68047,\"start\":68037},{\"end\":68063,\"start\":68047},{\"end\":68070,\"start\":68063},{\"end\":68613,\"start\":68597},{\"end\":68911,\"start\":68897},{\"end\":68930,\"start\":68911},{\"end\":68951,\"start\":68930},{\"end\":68966,\"start\":68951},{\"end\":68979,\"start\":68966},{\"end\":69204,\"start\":69190},{\"end\":69218,\"start\":69204},{\"end\":69235,\"start\":69218},{\"end\":69691,\"start\":69673},{\"end\":69711,\"start\":69691},{\"end\":69729,\"start\":69711},{\"end\":70171,\"start\":70156},{\"end\":70189,\"start\":70171},{\"end\":70211,\"start\":70189},{\"end\":70684,\"start\":70670},{\"end\":70704,\"start\":70684},{\"end\":70720,\"start\":70704},{\"end\":70740,\"start\":70720},{\"end\":70753,\"start\":70740},{\"end\":71164,\"start\":71151},{\"end\":71178,\"start\":71164},{\"end\":71581,\"start\":71564},{\"end\":71598,\"start\":71581},{\"end\":71621,\"start\":71598},{\"end\":71636,\"start\":71621},{\"end\":71651,\"start\":71636},{\"end\":72149,\"start\":72131},{\"end\":72159,\"start\":72149},{\"end\":72170,\"start\":72159},{\"end\":72558,\"start\":72545},{\"end\":72576,\"start\":72558},{\"end\":72592,\"start\":72576},{\"end\":72608,\"start\":72592},{\"end\":72622,\"start\":72608},{\"end\":72643,\"start\":72622},{\"end\":72661,\"start\":72643},{\"end\":73071,\"start\":73062},{\"end\":73084,\"start\":73071},{\"end\":73097,\"start\":73084},{\"end\":73112,\"start\":73097},{\"end\":73135,\"start\":73112},{\"end\":73552,\"start\":73536},{\"end\":73819,\"start\":73803},{\"end\":73834,\"start\":73819},{\"end\":73853,\"start\":73834},{\"end\":73865,\"start\":73853},{\"end\":73881,\"start\":73865},{\"end\":73888,\"start\":73881},{\"end\":74319,\"start\":74309},{\"end\":74329,\"start\":74319},{\"end\":74570,\"start\":74554},{\"end\":75892,\"start\":75877},{\"end\":75918,\"start\":75892},{\"end\":75929,\"start\":75918},{\"end\":75943,\"start\":75929},{\"end\":75961,\"start\":75943},{\"end\":76603,\"start\":76588},{\"end\":76619,\"start\":76603},{\"end\":76630,\"start\":76619},{\"end\":77056,\"start\":77047},{\"end\":77067,\"start\":77056},{\"end\":77082,\"start\":77067},{\"end\":77097,\"start\":77082}]", "bib_venue": "[{\"end\":54090,\"start\":54033},{\"end\":54951,\"start\":54885},{\"end\":56940,\"start\":56899},{\"end\":58772,\"start\":58707},{\"end\":59319,\"start\":59254},{\"end\":59752,\"start\":59706},{\"end\":60384,\"start\":60327},{\"end\":60929,\"start\":60872},{\"end\":61918,\"start\":61847},{\"end\":62801,\"start\":62736},{\"end\":63346,\"start\":63283},{\"end\":63916,\"start\":63857},{\"end\":64472,\"start\":64413},{\"end\":65043,\"start\":64958},{\"end\":65621,\"start\":65556},{\"end\":66632,\"start\":66575},{\"end\":67210,\"start\":67147},{\"end\":67751,\"start\":67687},{\"end\":68239,\"start\":68163},{\"end\":69366,\"start\":69309},{\"end\":69864,\"start\":69805},{\"end\":70346,\"start\":70287},{\"end\":71786,\"start\":71727},{\"end\":76242,\"start\":76110},{\"end\":76799,\"start\":76723},{\"end\":53417,\"start\":53382},{\"end\":53686,\"start\":53673},{\"end\":54031,\"start\":53959},{\"end\":54522,\"start\":54492},{\"end\":54883,\"start\":54802},{\"end\":55380,\"start\":55315},{\"end\":55865,\"start\":55817},{\"end\":56390,\"start\":56342},{\"end\":56897,\"start\":56844},{\"end\":57368,\"start\":57287},{\"end\":57760,\"start\":57726},{\"end\":58123,\"start\":58082},{\"end\":58320,\"start\":58305},{\"end\":58705,\"start\":58625},{\"end\":59252,\"start\":59172},{\"end\":59704,\"start\":59670},{\"end\":59993,\"start\":59976},{\"end\":60325,\"start\":60253},{\"end\":60870,\"start\":60798},{\"end\":61395,\"start\":61298},{\"end\":61845,\"start\":61759},{\"end\":62333,\"start\":62303},{\"end\":62734,\"start\":62654},{\"end\":63281,\"start\":63203},{\"end\":63855,\"start\":63781},{\"end\":64411,\"start\":64337},{\"end\":64956,\"start\":64856},{\"end\":65554,\"start\":65474},{\"end\":66106,\"start\":66032},{\"end\":66573,\"start\":66501},{\"end\":67145,\"start\":67067},{\"end\":67685,\"start\":67609},{\"end\":68161,\"start\":68070},{\"end\":68643,\"start\":68613},{\"end\":68895,\"start\":68846},{\"end\":69307,\"start\":69235},{\"end\":69803,\"start\":69729},{\"end\":70285,\"start\":70211},{\"end\":70819,\"start\":70753},{\"end\":71258,\"start\":71178},{\"end\":71725,\"start\":71651},{\"end\":72244,\"start\":72170},{\"end\":72709,\"start\":72661},{\"end\":73209,\"start\":73135},{\"end\":73534,\"start\":73464},{\"end\":73962,\"start\":73888},{\"end\":74307,\"start\":74220},{\"end\":74552,\"start\":74522},{\"end\":74793,\"start\":74719},{\"end\":74996,\"start\":74924},{\"end\":75219,\"start\":75216},{\"end\":75445,\"start\":75442},{\"end\":75671,\"start\":75668},{\"end\":76108,\"start\":75961},{\"end\":76721,\"start\":76630},{\"end\":77138,\"start\":77097},{\"end\":77382,\"start\":77379},{\"end\":77608,\"start\":77605},{\"end\":77839,\"start\":77831},{\"end\":78059,\"start\":77996}]"}}}, "year": 2023, "month": 12, "day": 17}