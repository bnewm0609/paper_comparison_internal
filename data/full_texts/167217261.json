{"id": 167217261, "updated": "2023-10-07 02:08:53.362", "metadata": {"title": "EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks", "authors": "[{\"first\":\"Mingxing\",\"last\":\"Tan\",\"middle\":[]},{\"first\":\"Quoc\",\"last\":\"Le\",\"middle\":[\"V.\"]}]", "venue": "ICML 2019", "journal": null, "publication_date": {"year": 2019, "month": null, "day": null}, "abstract": "Convolutional Neural Networks (ConvNets) are commonly developed at a fixed resource budget, and then scaled up for better accuracy if more resources are available. In this paper, we systematically study model scaling and identify that carefully balancing network depth, width, and resolution can lead to better performance. Based on this observation, we propose a new scaling method that uniformly scales all dimensions of depth/width/resolution using a simple yet highly effective compound coefficient. We demonstrate the effectiveness of this method on scaling up MobileNets and ResNet. To go even further, we use neural architecture search to design a new baseline network and scale it up to obtain a family of models, called EfficientNets, which achieve much better accuracy and efficiency than previous ConvNets. In particular, our EfficientNet-B7 achieves state-of-the-art 84.4% top-1 / 97.1% top-5 accuracy on ImageNet, while being 8.4x smaller and 6.1x faster on inference than the best existing ConvNet. Our EfficientNets also transfer well and achieve state-of-the-art accuracy on CIFAR-100 (91.7%), Flowers (98.8%), and 3 other transfer learning datasets, with an order of magnitude fewer parameters. Source code is at https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet.", "fields_of_study": "[\"Computer Science\",\"Mathematics\"]", "external_ids": {"arxiv": "1905.11946", "mag": "2955425717", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icml/TanL19", "doi": null}}, "content": {"source": {"pdf_hash": "30c2eab9d164d4b8f5dcec6a7d186d885406c1d2", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1905.11946v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "b2c969ce63efeafa3de7b9a7a99e8acedef31a99", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/30c2eab9d164d4b8f5dcec6a7d186d885406c1d2.txt", "contents": "\nEfficientNet: Rethinking Model Scaling for Convolutional Neural Networks\n\n\nMingxing Tan \nQuoc V Le \nEfficientNet: Rethinking Model Scaling for Convolutional Neural Networks\n\nConvolutional Neural Networks (ConvNets) are commonly developed at a fixed resource budget, and then scaled up for better accuracy if more resources are available. In this paper, we systematically study model scaling and identify that carefully balancing network depth, width, and resolution can lead to better performance. Based on this observation, we propose a new scaling method that uniformly scales all dimensions of depth/width/resolution using a simple yet highly effective compound coefficient. We demonstrate the effectiveness of this method on scaling up MobileNets and ResNet.To go even further, we use neural architecture search to design a new baseline network and scale it up to obtain a family of models, called EfficientNets, which achieve much better accuracy and efficiency than previous ConvNets. In particular, our EfficientNet-B7 achieves stateof-the-art 84.4% top-1 / 97.1% top-5 accuracy on ImageNet, while being 8.4x smaller and 6.1x faster on inference than the best existing ConvNet. Our EfficientNets also transfer well and achieve state-of-the-art accuracy on CIFAR-100 (91.7%), Flowers (98.8%), and 3 other transfer learning datasets, with an order of magnitude fewer parameters. Source code is at https: //github.com/tensorflow/tpu/tree/ master/models/official/efficientnet.\n\nIntroduction\n\nScaling up ConvNets is widely used to achieve better accuracy. For example, ResNet (He et al., 2016) can be scaled up from ResNet-18 to ResNet-200 by using more layers; Recently, GPipe   EfficientNet-B7 Top1 Acc. #Params ResNet-152 (He et al., 2016) 77.8% 60M EfficientNet-B1 78.8% 7.8M ResNeXt-101 (Xie et al., 2017) 80.9% 84M EfficientNet-B3 81.1% 12M SENet  82.7% 146M NASNet-A  82.7% 89M EfficientNet-B4 82.6% 19M GPipe  84.3% 556M EfficientNet-B7 84.4% 66M \u2020 Not plotted Figure 1. Model Size vs. ImageNet Accuracy. All numbers are for single-crop, single-model. Our EfficientNets significantly outperform other ConvNets. In particular, EfficientNet-B7 achieves new state-of-the-art 84.4% top-1 accuracy but being 8.4x smaller and 6.1x faster than GPipe. EfficientNet-B1 is 7.6x smaller and 5.7x faster than ResNet-152. Details are in Table 2 and 4. has never been well understood and there are currently many ways to do it. The most common way is to scale up Con-vNets by their depth (He et al., 2016) or width (Zagoruyko & Komodakis, 2016). Another less common, but increasingly popular, method is to scale up models by image resolution . In previous work, it is common to scale only one of the three dimensions -depth, width, and image size. Though it is possible to scale two or three dimensions arbitrarily, arbitrary scaling requires tedious manual tuning and still often yields sub-optimal accuracy and efficiency.\n\nIn this paper, we want to study and rethink the process of scaling up ConvNets. In particular, we investigate the central question: is there a principled method to scale up ConvNets that can achieve better accuracy and efficiency? Our empirical study shows that it is critical to balance all dimensions of network width/depth/resolution, and surprisingly such balance can be achieved by simply scaling each of them with constant ratio. Based on this observation, we propose a simple yet effective compound scaling method. Unlike conventional practice that arbitrary scales these factors, our method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use 2 N times more computational resources, then we can simply increase the network depth by \u03b1 N , width by \u03b2 N , and image size by \u03b3 N , where \u03b1, \u03b2, \u03b3 are constant coefficients determined by a small grid search on the original small model. Figure 2 illustrates the difference between our scaling method and conventional methods.\n\nIntuitively, the compound scaling method makes sense because if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image. In fact, previous theoretical (Raghu et al., 2017;Lu et al., 2018) and empirical results (Zagoruyko & Komodakis, 2016) both show that there exists certain relationship between network width and depth, but to our best knowledge, we are the first to empirically quantify the relationship among all three dimensions of network width, depth, and resolution.\n\nWe demonstrate that our scaling method work well on existing MobileNets (Howard et al., 2017;Sandler et al., 2018) and ResNet (He et al., 2016). Notably, the effectiveness of model scaling heavily depends on the baseline network; to go even further, we use neural architecture search (Zoph & Le, 2017;Tan et al., 2019) to develop a new baseline network, and scale it up to obtain a family of models, called EfficientNets. Figure 1 summarizes the ImageNet performance, where our EfficientNets significantly outperform other ConvNets. In particular, our EfficientNet-B7 surpasses the best existing GPipe accuracy , but using 8.4x fewer parameters and running 6.1x faster on inference. Compared to the widely used ResNet-50 (He et al., 2016), our EfficientNet-B4 improves the top-1 accuracy from 76.3% to 82.6% (+6.3%) with similar FLOPS. Besides ImageNet, EfficientNets also transfer well and achieve stateof-the-art accuracy on 5 out of 8 widely used datasets, while reducing parameters by up to 21x than existing ConvNets.\n\n\nRelated Work\n\nConvNet Accuracy: Since AlexNet (Krizhevsky et al., 2012) won the 2012 ImageNet competition, ConvNets have become increasingly more accurate by going bigger: while the 2014 ImageNet winner GoogleNet  achieves 74.8% top-1 accuracy with about 6.8M parameters, the 2017 ImageNet winner SENet  achieves 82.7% top-1 accuracy with 145M parameters. Recently, GPipe  further pushes the state-of-the-art ImageNet top-1 validation accuracy to 84.3% using 557M parameters: it is so big that it can only be trained with a specialized pipeline parallelism library by partitioning the network and spreading each part to a different accelerator. While these models are mainly designed for ImageNet, recent studies have shown better ImageNet models also perform better across a variety of transfer learning datasets (Kornblith et al., 2019), and other computer vision tasks such as object detection (He et al., 2016;Tan et al., 2019). Although higher accuracy is critical for many applications, we have already hit the hardware memory limit, and thus further accuracy gain needs better efficiency.\n\nConvNet Efficiency: Deep ConvNets are often overparameterized. Model compression He et al., 2018;Yang et al., 2018) is a common way to reduce model size by trading accuracy for efficiency. As mobile phones become ubiquitous, it is also common to handcraft efficient mobile-size ConvNets, such as SqueezeNets (Iandola et al., 2016;Gholami et al., 2018), MobileNets (Howard et al., 2017;Sandler et al., 2018), and ShuffleNets Ma et al., 2018). Recently, neural archi-tecture search becomes increasingly popular in designing efficient mobile-size ConvNets (Tan et al., 2019;Cai et al., 2019), and achieves even better efficiency than hand-crafted mobile ConvNets by extensively tuning the network width, depth, convolution kernel types and sizes. However, it is unclear how to apply these techniques for larger models that have much larger design space and much more expensive tuning cost. In this paper, we aim to study model efficiency for super large ConvNets that surpass state-of-the-art accuracy. To achieve this goal, we resort to model scaling.\n\nModel Scaling: There are many ways to scale a Con-vNet for different resource constraints: ResNet (He et al., 2016) can be scaled down (e.g., ResNet-18) or up (e.g., ResNet-200) by adjusting network depth (#layers), while WideResNet (Zagoruyko & Komodakis, 2016) and Mo-bileNets (Howard et al., 2017) can be scaled by network width (#channels). It is also well-recognized that bigger input image size will help accuracy with the overhead of more FLOPS. Although prior studies (Raghu et al., 2017;Lin & Jegelka, 2018;Sharir & Shashua, 2018;Lu et al., 2018) \n\n\nCompound Model Scaling\n\nIn this section, we will formulate the scaling problem, study different approaches, and propose our new scaling method.\n\n\nProblem Formulation\n\nA ConvNet Layer i can be defined as a function:\nY i = F i (X i ), where F i is the operator, Y i is output tensor, X i is input tensor, with tensor shape H i , W i , C i 1 ,\nwhere H i and W i are spatial dimension and C i is the channel dimension. A ConvNet N can be represented by a list of composed layers:\nN = F k ... F 2 F 1 (X 1 ) = j=1...k F j (X 1 ).\nIn practice, ConvNet layers are often partitioned into multiple stages and all layers in each stage share the same architecture: for example, ResNet (He et al., 2016) has five stages, and all layers in each stage has the same convolutional type except the first layer performs down-sampling. Therefore, we can define a ConvNet as:\nN = i=1...s F Li i X Hi,Wi,Ci(1)\nwhere F Li i denotes layer F i is repeated L i times in stage i, H i , W i , C i denotes the shape of input tensor X of layer 1 For the sake of simplicity, we omit batch dimension.\n\ni. Figure 2(a) illustrate a representative ConvNet, where the spatial dimension is gradually shrunk but the channel dimension is expanded over layers, for example, from initial input shape 224, 224, 3 to final output shape 7, 7, 512 .\n\nUnlike regular ConvNet designs that mostly focus on finding the best layer architecture F i , model scaling tries to expand the network length (L i ), width (C i ), and/or resolution (H i , W i ) without changing F i predefined in the baseline network. By fixing F i , model scaling simplifies the design problem for new resource constraints, but it still remains a large design space to explore different L i , C i , H i , W i for each layer. In order to further reduce the design space, we restrict that all layers must be scaled uniformly with constant ratio. Our target is to maximize the model accuracy for any given resource constraints, which can be formulated as an optimization problem:\nmax d,w,r Accuracy N (d, w, r) s.t. N (d, w, r) = i=1...sF d\u00b7Li i X r\u00b7\u0124i,r\u00b7\u0174i,w\u00b7\u0108i Memory(N ) \u2264 target memory FLOPS(N ) \u2264 target flops (2)\nwhere w, d, r are coefficients for scaling network width, depth, and resolution; Table 1 as an example).\nF i ,L i ,\u0124 i ,\u0174 i ,\u0108 i are predefined pa- rameters in baseline network (see\n\nScaling Dimensions\n\nThe main difficulty of problem 2 is that the optimal d, w, r depend on each other and the values change under different resource constraints. Due to this difficulty, conventional methods mostly scale ConvNets in one of these dimensions:\nDepth (d d d):\nScaling network depth is the most common way used by many ConvNets (He et al., 2016;Huang et al., 2017;Szegedy et al., 2015;. The intuition is that deeper ConvNet can capture richer and more complex features, and generalize well on new tasks. However, deeper networks are also more difficult to train due to the vanishing gradient problem (Zagoruyko & Komodakis, 2016). Although several techniques, such as skip connections (He et al., 2016) and batch normalization (Ioffe & Szegedy, 2015), alleviate the training problem, the accuracy gain of very deep network diminishes: for example, ResNet-1000 has similar accuracy as ResNet-101 even though it has much more layers. Figure  3 (middle) shows our empirical study on scaling a baseline model with different depth coefficient d, further suggesting the diminishing accuracy return for very deep ConvNets.\n\nWidth (w w w): Scaling network width is commonly used for small size models (Howard et al., 2017;Sandler et al., 2018;  (r) Coefficients. Bigger networks with larger width, depth, or resolution tend to achieve higher accuracy, but the accuracy gain quickly saturate after reaching 80%, demonstrating the limitation of single dimension scaling. Baseline network is described in Table 1. Tan et al., 2019) 2 . As discussed in (Zagoruyko & Komodakis, 2016), wider networks tend to be able to capture more fine-grained features and are easier to train. However, extremely wide but shallow networks tend to have difficulties in capturing higher level features. Our empirical results in Figure 3 (left) show that the accuracy quickly saturates when networks become much wider with larger w.\n\nResolution (r r r): With higher resolution input images, Con-vNets can potentially capture more fine-grained patterns. Starting from 224x224 in early ConvNets, modern Con-vNets tend to use 299x299 (Szegedy et al., 2016) or 331x331  for better accuracy. Recently, GPipe  achieves state-of-the-art ImageNet accuracy with 480x480 resolution. Higher resolutions, such as 600x600, are also widely used in object detection ConvNets Lin et al., 2017). Figure 3 (right) shows the results of scaling network resolutions, where indeed higher resolutions improve accuracy, but the accuracy gain diminishes for very high resolutions (r = 1.0 denotes resolution 224x224 and r = 2.5 denotes resolution 560x560).\n\nThe above analyses lead us to the first observation:\n\nObservation 1 -Scaling up any dimension of network width, depth, or resolution improves accuracy, but the accuracy gain diminishes for bigger models.\n\n\nCompound Scaling\n\nWe empirically observe that different scaling dimensions are not independent. Intuitively, for higher resolution images, we should increase network depth, such that the larger receptive fields can help capture similar features that include more pixels in bigger images. Correspondingly, we should also increase network width when resolution is higher, in 2 In some literature, scaling number of channels is called \"depth multiplier\", which means the same as our width coefficient w.  order to capture more fine-grained patterns with more pixels in high resolution images. These intuitions suggest that we need to coordinate and balance different scaling dimensions rather than conventional single-dimension scaling.\n\nTo validate our intuitions, we compare width scaling under different network depths and resolutions, as shown in Figure  4. If we only scale network width w without changing depth (d=1.0) and resolution (r=1.0), the accuracy saturates quickly. With deeper (d=2.0) and higher resolution (r=2.0), width scaling achieves much better accuracy under the same FLOPS cost. These results lead us to the second observation:\n\nObservation 2 -In order to pursue better accuracy and efficiency, it is critical to balance all dimensions of network width, depth, and resolution during ConvNet scaling.\n\nIn fact, a few prior work Real et al., 2019) have already tried to arbitrarily balance network width and depth, but they all require tedious manual tuning.\n\nIn this paper, we propose a new compound scaling method, which use a compound coefficient \u03c6 to uniformly scales network width, depth, and resolution in a principled way:\ndepth: d = \u03b1 \u03c6 width: w = \u03b2 \u03c6 resolution: r = \u03b3 \u03c6 s.t. \u03b1 \u00b7 \u03b2 2 \u00b7 \u03b3 2 \u2248 2 \u03b1 \u2265 1, \u03b2 \u2265 1, \u03b3 \u2265 1(3)\nwhere \u03b1, \u03b2, \u03b3 are constants that can be determined by a small grid search. Intuitively, \u03c6 is a user-specified coefficient that controls how many more resources are available for model scaling, while \u03b1, \u03b2, \u03b3 specify how to assign these extra resources to network width, depth, and resolution respectively. Notably, the FLOPS of a regular convolution op is proportional to d, w 2 , r 2 , i.e., doubling network depth will double FLOPS, but doubling network width or resolution will increase FLOPS by four times. Since convolution ops usually dominate the computation cost in ConvNets, scaling a ConvNet with equation 3 will approximately increase total FLOPS by \u03b1 \u00b7 \u03b2 2 \u00b7 \u03b3 2 \u03c6 . In this paper, we constraint \u03b1 \u00b7 \u03b2 2 \u00b7 \u03b3 2 \u2248 2 such that for any new \u03c6, the total FLOPS will approximately 3 increase by 2 \u03c6 .\n\n\nEfficientNet Architecture\n\nSince model scaling does not change layer operatorsF i in baseline network, having a good baseline network is also critical. We will evaluate our scaling method using existing ConvNets, but in order to better demonstrate the effectiveness of our scaling method, we have also developed a new mobile-size baseline, called EfficientNet. , here we optimize FLOPS rather than latency since we are not targeting any specific hardware device. Our search produces an efficient network, which we name EfficientNet-B0. Since we use the same search space as (Tan et al., 2019), the architecture is similar to Mnas- , to which we also add squeeze-and-excitation optimization .\n\nStarting from the baseline EfficientNet-B0, we apply our compound scaling method to scale it up with two steps:\n\n\u2022 STEP 1: we first fix \u03c6 = 1, assuming twice more resources available, and do a small grid search of \u03b1, \u03b2, \u03b3 based on Equation 2 and 3. In particular, we find the best values for EfficientNet-B0 are \u03b1 = 1.2, \u03b2 = 1.1, \u03b3 = 1.15, under constraint of \u03b1 \u00b7 \u03b2 2 \u00b7 \u03b3 2 \u2248 2.\n\n\u2022 STEP 2: we then fix \u03b1, \u03b2, \u03b3 as constants and scale up baseline network with different \u03c6 using Equation 3, to obtain EfficientNet-B1 to B7 (Details in Table 2).\n\nNotably, it is possible to achieve even better performance by searching for \u03b1, \u03b2, \u03b3 directly around a large model, but the search cost becomes prohibitively more expensive on larger models. Our method solves this issue by only doing search once on the small baseline network (step 1), and then use the same scaling coefficients for all other models (step 2).\n\n\nExperiments\n\nIn this section, we will first evaluate our scaling method on existing ConvNets and the new proposed EfficientNets.\n\n\nScaling Up MobileNets and ResNets\n\nAs a proof of concept, we first apply our scaling method to the widely-used MobileNets (Howard et al., 2017;Sandler et al., 2018) and ResNet (He et al., 2016). Table 3 shows the ImageNet results of scaling them in different ways. Compared to other single-dimension scaling methods, our compound scaling method improves the accuracy on all these models, suggesting the effectiveness of our proposed scaling method for general existing ConvNets.   84.3% 97.0% 557M 8.4x --\n\nWe omit ensemble and multi-crop models , or models pretrained on 3.5B Instagram images (Mahajan et al., 2018).    (Xie et al., 2017) 77.8% 11B EfficientNet-B1 78.8% 0.7B ResNeXt-101 (Xie et al., 2017) 80.9% 32B EfficientNet-B3 81.1% 1.8B SENet  82.7% 42B NASNet-A  80.7% 24B EfficientNet-B4 82.6% 4.2B AmeobaNet-C (Cubuk et al., 2019) 83.5% 41B EfficientNet-B5 83.3% 9.9B Figure 5. FLOPS vs. ImageNet Accuracy -Similar to Figure 1 except it compares FLOPS rather than model size.\n\n\nImageNet Results for EfficientNet\n\nWe train our EfficientNet models on ImageNet using similar settings as (Tan et al., 2019): RMSProp optimizer with decay 0.9 and momentum 0.9; batch norm momentum 0.99; Geo-Mean (4.7x) (9.6x) \u2020 GPipe  trains giant models with specialized pipeline parallelism library. \u2021 DAT denotes domain adaptive transfer learning . Here we only compare ImageNet-based transfer learning results. Transfer accuracy and #params for NASNet , Inception-v4 (Szegedy et al., 2017), ResNet-152 (He et al., 2016) are from (Kornblith et al., 2019). weight decay 1e-5; initial learning rate 0.256 that decays by 0.97 every 2.4 epochs. We also use swish activation (Ramachandran et al., 2018;Elfwing et al., 2018), fixed Au-toAugment policy (Cubuk et al., 2019), and stochastic depth (Huang et al., 2016) with drop connect ratio 0.2. As commonly known that bigger models need more regularization, we linearly increase dropout (Srivastava et al., 2014) ratio from 0.2 for EfficientNet-B0 to 0.5 for EfficientNet-B7. Table 2 shows the performance of all EfficientNet models that are scaled from the same baseline EfficientNet-B0. Our EfficientNet models generally use an order of magnitude fewer parameters and FLOPS than other ConvNets with similar accuracy. In particular, our EfficientNet-B7 achieves 84.4% top1 / 97.1% top-5 accuracy with 66M parameters and 37B FLOPS, being more accurate but 8.4x smaller than the previous best GPipe . Figure 5 illustrates the parameters-accuracy and FLOPS-accuracy curve for representative ConvNets, where our scaled EfficientNet models achieve better accuracy with much fewer parameters and FLOPS than other ConvNets. Notably, our EfficientNet models are not only small, but also computational cheaper. For example, our EfficientNet-B3 achieves higher accuracy than ResNeXt-101 (Xie et al., 2017) using 18x fewer FLOPS.\n\n\nFigure 1 and\n\nTo validate the computational cost, we have also measured the inference latency for a few representative CovNets on a real CPU as shown in Table 4, where we report average latency over 20 runs. Our EfficientNet-B1 runs 5.7x faster than the widely used ResNet-152 (He et al., 2016), while EfficientNet-B7 runs about 6.1x faster than GPipe   Figure 7. Class Activation Map (CAM) (Zhou et al., 2016) for Models with different scaling methods-Our compound scaling method allows the scaled model (last column) to focus on more relevant regions with more object details. Model details are in Table 7.  (Krizhevsky & Hinton, 2009) 50,000 10,000 100 Birdsnap (Berg et al., 2014) 47,386 2,443 500 Stanford Cars (Krause et al., 2013) 8,144 8,041 196 Flowers (Nilsback & Zisserman, 2008) 2,040 6,149 102 FGVC Aircraft (Maji et al., 2013) 6,667 3,333 100 Oxford-IIIT Pets (Parkhi et al., 2012) 3,680 3,369 37 Food-101 (Bossard et al., 2014) 75,750 25,250 101\n\n\nTransfer Learning Results for EfficientNet\n\nWe have also evaluated our EfficientNet on a list of commonly used transfer learning datasets, as shown in Table  6. We borrow the same training settings from (Kornblith et al., 2019) and , which take ImageNet pretrained checkpoints and finetune on new datasets. Table 5 shows the transfer learning performance: (1) Compared to public available models, such as NASNet-A  and Inception-v4 (Szegedy et al., 2017), our Ef-ficientNet models achieve better accuracy with 4.7x average (up to 21x) parameter reduction.\n\n(2) Compared to stateof-the-art models, including DAT ) that dynamically synthesizes training data and GPipe  that is trained with specialized pipeline parallelism, our EfficientNet models still surpass their accuracy in 5 out of 8 datasets, but using 9.6x fewer parameters Figure 6 compares the accuracy-parameters curve for a variety of models. In general, our EfficientNets consistently achieve better accuracy with an order of magnitude fewer parameters than existing models, including ResNet (He et al., 2016), DenseNet (Huang et al., 2017), Inception (Szegedy et al., 2017), and NASNet .\n\n\nDiscussion\n\nTo disentangle the contribution of our proposed scaling method from the EfficientNet architecture, Figure 8 compares the ImageNet performance of different scaling meth-  ods for the same EfficientNet-B0 baseline network. In general, all scaling methods improve accuracy with the cost of more FLOPS, but our compound scaling method can further improve accuracy, by up to 2.5%, than other singledimension scaling methods, suggesting the importance of our proposed compound scaling.\n\nIn order to further understand why our compound scaling method is better than others, Figure 7 compares the class activation map (Zhou et al., 2016) for a few representative models with different scaling methods. All these models are scaled from the same baseline, and their statistics are shown in Table 7. Images are randomly picked from ImageNet validation set. As shown in the figure, the model with compound scaling tends to focus on more relevant regions with more object details, while other models are either lack of object details or unable to capture all objects in the images.\n\n\nConclusion\n\nIn this paper, we systematically study ConvNet scaling and identify that carefully balancing network width, depth, and resolution is an important but missing piece, preventing us from better accuracy and efficiency. To address this issue, we propose a simple and highly effective compound scaling method, which enables us to easily scale up a baseline Con-vNet to any target resource constraints in a more principled way, while maintaining model efficiency. Powered by this compound scaling method, we demonstrate that a mobilesize EfficientNet model can be scaled up very effectively, surpassing state-of-the-art accuracy with an order of magnitude fewer parameters and FLOPS, on both ImageNet and five commonly used transfer learning datasets.\n\n\nachieved 84.3% Ima-geNet top-1 accuracy by scaling up a baseline model four time larger. However, the process of scaling up ConvNets 1 Google Research, Brain Team, Mountain View, CA. Correspondence to: Mingxing Tan <tanmingxing@google.com>. Preprint, to apear in ICML 2019.\n\nFigure 3 .\n3Scaling Up a Baseline Model with Different Network Width (w), Depth (d), and Resolution\n\nFigure 4 .\n4Scaling Network Width for Different Baseline Networks. Each dot in a line denotes a model with different width coefficient (w). All baseline networks are from Table 1. The first baseline network (d=1.0, r=1.0) has 18 convolutional layers with resolution 224x224, while the last baseline (d=2.0, r=1.3) has 36 layers with resolution 299x299.\n\n\nInspired by(Tan et al., 2019), we develop our baseline network by leveraging a multi-objective neural architecture search that optimizes both accuracy and FLOPS. Specifically, we use the same search space as(Tan et al., 2019), and use ACC(m)\u00d7[F LOP S(m)/T ] w as the optimization goal, where ACC(m) and F LOP S(m) denote the accuracy and FLOPS of model m, T is the target FLOPS and w=-0.07 is a hyperparameter for controlling the trade-off between accuracy and FLOPS. Unlike(Tan et al., 2019;Cai et al., 2019)\n\nFigure 6 .\n6Model Parameters vs. Transfer Learning Accuracy -All models are pretrained on ImageNet and finetuned on new datasets.\n\nFigure 8 .\n8Scaling Up EfficientNet-B0 with Different Methods.\n\n\narXiv:1905.11946v2 [cs.LG] 10 Jun 2019(a) baseline \n(b) width scaling \n(c) depth scaling \n(d) resolution scaling \n(e) compound scaling \n\n#channels \n\nlayer_i \n\nresolution HxW \n\nwider \n\ndeeper \n\nhigher \nresolution \nhigher \nresolution \n\ndeeper \n\nwider \n\nFigure 2. Model Scaling. (a) is a baseline network example; (b)-(d) are conventional scaling that only increases one dimension of network \nwidth, depth, or resolution. (e) is our proposed compound scaling method that uniformly scales all three dimensions with a fixed ratio. \n\n\n\n\nhave shown that network deep and width are both important for ConvNets' expressive power, it still remains an open question of how to effectively scale a ConvNet to achieve better efficiency and accuracy. Our work systematically and empirically studies ConvNet scaling for all three dimensions of network width, depth, and resolutions.\n\nTable 1 .\n1EfficientNet-B0 baseline network -Each row describes a stage i withLi layers, with input resolution \u0124 i,\u0174i and output channels\u0108i. Notations are adopted from equation 2.Stage \nOperator \nResolution #Channels #Layers \niF i\u0124i \u00d7\u0174 i\u0108iLi \n\n1 \nConv3x3 \n224 \u00d7 224 \n32 \n1 \n2 \nMBConv1, k3x3 \n112 \u00d7 112 \n16 \n1 \n3 \nMBConv6, k3x3 \n112 \u00d7 112 \n24 \n2 \n4 \nMBConv6, k5x5 \n56 \u00d7 56 \n40 \n2 \n5 \nMBConv6, k3x3 \n28 \u00d7 28 \n80 \n3 \n6 \nMBConv6, k5x5 \n14 \u00d7 14 \n112 \n3 \n7 \nMBConv6, k5x5 \n14 \u00d7 14 \n192 \n4 \n8 \nMBConv6, k3x3 \n7 \u00d7 7 \n320 \n1 \n9 \nConv1x1 & Pooling & FC \n7 \u00d7 7 \n1280 \n1 \n\nNet, except our EfficientNet-B0 is slightly bigger due to \nthe larger FLOPS target (our FLOPS target is 400M). Ta-\nble 1 shows the architecture of EfficientNet-B0. Its main \nbuilding block is mobile inverted bottleneck MBConv (San-\ndler et al., 2018; Tan et al., 2019)\n\nTable 2 .\n2EfficientNet Performance Results on ImageNet(Russakovsky et al., 2015). All EfficientNet models are scaled from our baseline EfficientNet-B0 using different compound coefficient \u03c6 in Equation 3. ConvNets with similar top-1/top-5 accuracy are grouped together for efficiency comparison. Our scaled EfficientNet models consistently reduce parameters and FLOPS by an order of magnitude (up to 8.4x parameter reduction and up to 16x FLOPS reduction) than existing ConvNets.Model \nTop-1 Acc. Top-5 Acc. #Params Ratio-to-EfficientNet #FLOPS Ratio-to-EfficientNet \n\nEfficientNet-B0 \n76.3% \n93.2% \n5.3M \n1x \n0.39B \n1x \nResNet-50 (He et al., 2016) \n76.0% \n93.0% \n26M \n4.9x \n4.1B \n11x \nDenseNet-169 (Huang et al., 2017) \n76.2% \n93.2% \n14M \n2.6x \n3.5B \n8.9x \n\nEfficientNet-B1 \n78.8% \n94.4% \n7.8M \n1x \n0.70B \n1x \nResNet-152 (He et al., 2016) \n77.8% \n93.8% \n60M \n7.6x \n11B \n16x \nDenseNet-264 (Huang et al., 2017) \n77.9% \n93.9% \n34M \n4.3x \n6.0B \n8.6x \nInception-v3 (Szegedy et al., 2016) \n78.8% \n94.4% \n24M \n3.0x \n5.7B \n8.1x \nXception (Chollet, 2017) \n79.0% \n94.5% \n23M \n3.0x \n8.4B \n12x \n\nEfficientNet-B2 \n79.8% \n94.9% \n9.2M \n1x \n1.0B \n1x \nInception-v4 (Szegedy et al., 2017) \n80.0% \n95.0% \n48M \n5.2x \n13B \n13x \nInception-resnet-v2 (Szegedy et al., 2017) \n80.1% \n95.1% \n56M \n6.1x \n13B \n13x \n\nEfficientNet-B3 \n81.1% \n95.5% \n12M \n1x \n1.8B \n1x \nResNeXt-101 (Xie et al., 2017) \n80.9% \n95.6% \n84M \n7.0x \n32B \n18x \nPolyNet (Zhang et al., 2017) \n81.3% \n95.8% \n92M \n7.7x \n35B \n19x \n\nEfficientNet-B4 \n82.6% \n96.3% \n19M \n1x \n4.2B \n1x \nSENet (Hu et al., 2018) \n82.7% \n96.2% \n146M \n7.7x \n42B \n10x \nNASNet-A (Zoph et al., 2018) \n82.7% \n96.2% \n89M \n4.7x \n24B \n5.7x \nAmoebaNet-A (Real et al., 2019) \n82.8% \n96.1% \n87M \n4.6x \n23B \n5.5x \nPNASNet (Liu et al., 2018) \n82.9% \n96.2% \n86M \n4.5x \n23B \n6.0x \n\nEfficientNet-B5 \n83.3% \n96.7% \n30M \n1x \n9.9B \n1x \nAmoebaNet-C (Cubuk et al., 2019) \n83.5% \n96.5% \n155M \n5.2x \n41B \n4.1x \n\nEfficientNet-B6 \n84.0% \n96.9% \n43M \n1x \n19B \n1x \n\nEfficientNet-B7 \n84.4% \n97.1% \n66M \n1x \n37B \n1x \nGPipe \n\nTable 3 .\n3Scaling Up MobileNets and ResNet.Model \nFLOPS Top-1 Acc. \n\nBaseline MobileNetV1 (Howard et al., 2017) \n0.6B \n70.6% \n\nScale MobileNetV1 by width (w=2) \n2.2B \n74.2% \nScale MobileNetV1 by resolution (r=2) \n2.2B \n72.7% \ncompound scale (d d d=1.4, w w w=1.2, r r r=1.3) \n2.3B \n75.6% \n\nBaseline MobileNetV2 (Sandler et al., 2018) \n0.3B \n72.0% \n\nScale MobileNetV2 by depth (d=4) \n1.2B \n76.8% \nScale MobileNetV2 by width (w=2) \n1.1B \n76.4% \nScale MobileNetV2 by resolution (r=2) \n1.2B \n74.8% \nMobileNetV2 compound scale \n1.3B \n77.4% \n\nBaseline ResNet-50 (He et al., 2016) \n4.1B \n76.0% \n\nScale ResNet-50 by depth (d=4) \n16.2B \n78.1% \nScale ResNet-50 by width (w=2) \n14.7B \n77.7% \nScale ResNet-50 by resolution (r=2) \n16.4B \n77.5% \nResNet-50 compound scale \n16.7B \n78.8% \n\n\n\nTable 4 .\n4InferenceLatency Comparison -Latency is measured \nwith batch size 1 on a single core of Intel Xeon CPU E5-2690. \n\nAcc. @ Latency \nAcc. @ Latency \n\nResNet-152 \n77.8% @ 0.554s \nGPipe \n84.3% @ 19.0s \nEfficientNet-B1 78.8% @ 0.098s EfficientNet-B7 \n84.4% @ 3.1s \nSpeedup \n5.7x \nSpeedup \n6.1x \n\n\n\nTable 5 .\n5EfficientNet Performance Results on Transfer Learning Datasets.Our scaled EfficientNet models achieve new state-of-the-\n\n\n\n, suggesting our EfficientNets are indeed fast on real hardware.bakeshop \n\noriginal image \nbaseline model \ndeeper (d=4) \nwider (w=2) \nhigher resolution (r=2) compound scaling \n\nmaze \n\n\n\nTable 6 .\n6Transfer Learning Datasets.Dataset \nTrain Size Test Size #Classes \n\nCIFAR-10 (Krizhevsky & Hinton, 2009) \n50,000 \n10,000 \n10 \nCIFAR-100 \n\nTable 7 .\n7Scaled Models Used in Figure 7. Compound Scale (d d d=1.4, w w w=1.2, r r r=1.3) 1.8B 81.1%Model \nFLOPS Top-1 Acc. \n\nBaseline model (EfficientNet-B0) \n0.4B \n76.3% \n\nScale model by depth (d=4) \n1.8B \n79.0% \nScale model by width (w=2) \n1.8B \n78.9% \nScale model by resolution (r=2) \n1.9B \n79.1% \n\nFLOPS may differ from theocratic value due to rounding.\nAcknowledgementsWe thank Ruoming Pang, Vijay Vasudevan, Alok Aggarwal, Barret Zoph, Hongkun Yu, Xiaodan Song, Samy Bengio, Jeff Dean, and Google Brain team for their help.\nLarge-scale fine-grained visual categorization of birds. CVPR. T Berg, J Liu, S Woo Lee, M L Alexander, D W Jacobs, P N Belhumeur, Birdsnap, Berg, T., Liu, J., Woo Lee, S., Alexander, M. L., Jacobs, D. W., and Belhumeur, P. N. Birdsnap: Large-scale fine-grained visual categorization of birds. CVPR, pp. 2011-2018, 2014.\n\nFood-101-mining discriminative components with random forests. ECCV. L Bossard, M Guillaumin, L Van Gool, Bossard, L., Guillaumin, M., and Van Gool, L. Food-101- mining discriminative components with random forests. ECCV, pp. 446-461, 2014.\n\nH Cai, L Zhu, S Han, Proxylessnas, Direct neural architecture search on target task and hardware. ICLR. Cai, H., Zhu, L., and Han, S. Proxylessnas: Direct neural architecture search on target task and hardware. ICLR, 2019.\n\nXception: Deep learning with depthwise separable convolutions. CVPR. F Chollet, Chollet, F. Xception: Deep learning with depthwise separa- ble convolutions. CVPR, pp. 1610-02357, 2017.\n\nE D Cubuk, B Zoph, D Mane, V Vasudevan, Q V Le, Autoaugment, Learning augmentation policies from data. CVPR. Cubuk, E. D., Zoph, B., Mane, D., Vasudevan, V., and Le, Q. V. Autoaugment: Learning augmentation policies from data. CVPR, 2019.\n\nSigmoid-weighted linear units for neural network function approximation in reinforcement learning. S Elfwing, E Uchibe, K Doya, Neural Networks. 107Elfwing, S., Uchibe, E., and Doya, K. Sigmoid-weighted linear units for neural network function approximation in reinforcement learning. Neural Networks, 107:3-11, 2018.\n\nA Gholami, K Kwon, B Wu, Z Tai, X Yue, P Jin, S Zhao, K Keutzer, Squeezenext, Hardware-aware neural network design. ECV Workshop at CVPR'18. Gholami, A., Kwon, K., Wu, B., Tai, Z., Yue, X., Jin, P., Zhao, S., and Keutzer, K. Squeezenext: Hardware-aware neural network design. ECV Workshop at CVPR'18, 2018.\n\nDeep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. S Han, H Mao, W J Dally, ICLRHan, S., Mao, H., and Dally, W. J. Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding. ICLR, 2016.\n\nDeep residual learning for image recognition. CVPR. K He, X Zhang, S Ren, J Sun, He, K., Zhang, X., Ren, S., and Sun, J. Deep residual learning for image recognition. CVPR, pp. 770-778, 2016.\n\nMask r-cnn. ICCV. K He, G Gkioxari, P Doll\u00e1r, R Girshick, He, K., Gkioxari, G., Doll\u00e1r, P., and Girshick, R. Mask r-cnn. ICCV, pp. 2980-2988, 2017.\n\nAutoml for model compression and acceleration on mobile devices. Y He, J Lin, Z Liu, H Wang, L.-J Li, S Han, Amc, ECCVHe, Y., Lin, J., Liu, Z., Wang, H., Li, L.-J., and Han, S. Amc: Automl for model compression and acceleration on mobile devices. ECCV, 2018.\n\nA G Howard, M Zhu, B Chen, D Kalenichenko, W Wang, T Weyand, M Andreetto, Adam , H Mobilenets, arXiv:1704.04861Efficient convolutional neural networks for mobile vision applications. arXiv preprintHoward, A. G., Zhu, M., Chen, B., Kalenichenko, D., Wang, W., Weyand, T., Andreetto, M., and Adam, H. Mobilenets: Efficient convolutional neural networks for mobile vision applications. arXiv preprint arXiv:1704.04861, 2017.\n\nSqueeze-and-excitation networks. J Hu, L Shen, G Sun, CVPRHu, J., Shen, L., and Sun, G. Squeeze-and-excitation net- works. CVPR, 2018.\n\nG Huang, Y Sun, Z Liu, D Sedra, K Q Weinberger, Deep networks with stochastic depth. ECCV. Huang, G., Sun, Y., Liu, Z., Sedra, D., and Weinberger, K. Q. Deep networks with stochastic depth. ECCV, pp. 646-661, 2016.\n\n. G Huang, Z Liu, L Van Der Maaten, K Weinberger, Huang, G., Liu, Z., Van Der Maaten, L., and Weinberger, K. Q. Densely connected convolutional networks. CVPR, 2017.\n\nY Huang, Y Cheng, D Chen, H Lee, J Ngiam, Q V Le, Chen , Z Gpipe, arXiv:1808.07233Efficient training of giant neural networks using pipeline parallelism. arXiv preprintHuang, Y., Cheng, Y., Chen, D., Lee, H., Ngiam, J., Le, Q. V., and Chen, Z. Gpipe: Efficient training of giant neural networks using pipeline parallelism. arXiv preprint arXiv:1808.07233, 2018.\n\nF N Iandola, S Han, M W Moskewicz, K Ashraf, W J Dally, K Keutzer, Squeezenet, arXiv:1602.07360Alexnet-level accuracy with 50x fewer parameters and <0.5 mb model size. arXiv preprintIandola, F. N., Han, S., Moskewicz, M. W., Ashraf, K., Dally, W. J., and Keutzer, K. Squeezenet: Alexnet-level accuracy with 50x fewer parameters and <0.5 mb model size. arXiv preprint arXiv:1602.07360, 2016.\n\nBatch normalization: Accelerating deep network training by reducing internal covariate shift. ICML. S Ioffe, C Szegedy, Ioffe, S. and Szegedy, C. Batch normalization: Accelerating deep network training by reducing internal covariate shift. ICML, pp. 448-456, 2015.\n\nS Kornblith, J Shlens, Q V Le, Do better imagenet models transfer better? CVPR. Kornblith, S., Shlens, J., and Le, Q. V. Do better imagenet models transfer better? CVPR, 2019.\n\nCollecting a large-scale dataset of fine-grained cars. Second Workshop on Fine-Grained Visual Categorizatio. J Krause, J Deng, M Stark, L Fei-Fei, Krause, J., Deng, J., Stark, M., and Fei-Fei, L. Collecting a large-scale dataset of fine-grained cars. Second Workshop on Fine-Grained Visual Categorizatio, 2013.\n\nLearning multiple layers of features from tiny images. A Krizhevsky, G Hinton, Technical ReportKrizhevsky, A. and Hinton, G. Learning multiple layers of features from tiny images. Technical Report, 2009.\n\nImagenet classification with deep convolutional neural networks. A Krizhevsky, I Sutskever, G E Hinton, NIPS. Krizhevsky, A., Sutskever, I., and Hinton, G. E. Imagenet classification with deep convolutional neural networks. In NIPS, pp. 1097-1105, 2012.\n\nResnet with one-neuron hidden layers is a universal approximator. H Lin, S Jegelka, NeurIPS. Lin, H. and Jegelka, S. Resnet with one-neuron hidden layers is a universal approximator. NeurIPS, pp. 6172- 6181, 2018.\n\nFeature pyramid networks for object detection. T.-Y Lin, P Doll\u00e1r, R Girshick, K He, B Hariharan, S Belongie, Lin, T.-Y., Doll\u00e1r, P., Girshick, R., He, K., Hariharan, B., and Belongie, S. Feature pyramid networks for object detection. CVPR, 2017.\n\n. C Liu, B Zoph, J Shlens, W Hua, L.-J Li, L Fei-Fei, A Yuille, J Huang, Murphy , K , Progressive neural architecture search. ECCV. Liu, C., Zoph, B., Shlens, J., Hua, W., Li, L.-J., Fei-Fei, L., Yuille, A., Huang, J., and Murphy, K. Progressive neural architecture search. ECCV, 2018.\n\nThe expressive power of neural networks: A view from the width. Z Lu, H Pu, F Wang, Z Hu, Wang , L , NeurIPSLu, Z., Pu, H., Wang, F., Hu, Z., and Wang, L. The expres- sive power of neural networks: A view from the width. NeurIPS, 2018.\n\nShufflenet v2: Practical guidelines for efficient cnn architecture design. N Ma, X Zhang, H.-T Zheng, J Sun, ECCVMa, N., Zhang, X., Zheng, H.-T., and Sun, J. Shufflenet v2: Practical guidelines for efficient cnn architecture design. ECCV, 2018.\n\nExploring the limits of weakly supervised pretraining. D Mahajan, R Girshick, V Ramanathan, K He, M Paluri, Y Li, A Bharambe, L Van Der Maaten, arXiv:1805.00932arXiv preprintMahajan, D., Girshick, R., Ramanathan, V., He, K., Paluri, M., Li, Y., Bharambe, A., and van der Maaten, L. Explor- ing the limits of weakly supervised pretraining. arXiv preprint arXiv:1805.00932, 2018.\n\nFine-grained visual classification of aircraft. S Maji, E Rahtu, J Kannala, M Blaschko, A Vedaldi, arXiv:1306.5151arXiv preprintMaji, S., Rahtu, E., Kannala, J., Blaschko, M., and Vedaldi, A. Fine-grained visual classification of aircraft. arXiv preprint arXiv:1306.5151, 2013.\n\nDomain adaptive transfer learning with specialist models. J Ngiam, D Peng, V Vasudevan, S Kornblith, Q V Le, R Pang, arXiv:1811.07056arXiv preprintNgiam, J., Peng, D., Vasudevan, V., Kornblith, S., Le, Q. V., and Pang, R. Domain adaptive transfer learning with spe- cialist models. arXiv preprint arXiv:1811.07056, 2018.\n\nAutomated flower classification over a large number of classes. M.-E Nilsback, A Zisserman, ICVGIP. Nilsback, M.-E. and Zisserman, A. Automated flower clas- sification over a large number of classes. ICVGIP, pp. 722-729, 2008.\n\nO M Parkhi, A Vedaldi, A Zisserman, Jawahar , C , Cats and dogs. CVPR. Parkhi, O. M., Vedaldi, A., Zisserman, A., and Jawahar, C. Cats and dogs. CVPR, pp. 3498-3505, 2012.\n\nM Raghu, B Poole, J Kleinberg, S Ganguli, J Sohl-Dickstein, On the expressive power of deep neural networks. ICML. Raghu, M., Poole, B., Kleinberg, J., Ganguli, S., and Sohl- Dickstein, J. On the expressive power of deep neural networks. ICML, 2017.\n\nSearching for activation functions. P Ramachandran, B Zoph, Q V Le, arXiv:1710.05941arXiv preprintRamachandran, P., Zoph, B., and Le, Q. V. Searching for activation functions. arXiv preprint arXiv:1710.05941, 2018.\n\nRegularized evolution for image classifier architecture search. E Real, A Aggarwal, Y Huang, Q V Le, AAAIReal, E., Aggarwal, A., Huang, Y., and Le, Q. V. Regu- larized evolution for image classifier architecture search. AAAI, 2019.\n\nImagenet large scale visual recognition challenge. O Russakovsky, J Deng, H Su, J Krause, S Satheesh, S Ma, Z Huang, A Karpathy, A Khosla, M Bernstein, International Journal of Computer Vision. 1153Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy, A., Khosla, A., Bernstein, M., et al. Imagenet large scale visual recognition chal- lenge. International Journal of Computer Vision, 115(3): 211-252, 2015.\n\nM Sandler, A Howard, M Zhu, A Zhmoginov, Chen , L.-C , Mobilenetv2: Inverted residuals and linear bottlenecks. CVPR. Sandler, M., Howard, A., Zhu, M., Zhmoginov, A., and Chen, L.-C. Mobilenetv2: Inverted residuals and linear bottlenecks. CVPR, 2018.\n\nOn the expressive power of overlapping architectures of deep learning. O Sharir, A Shashua, ICLRSharir, O. and Shashua, A. On the expressive power of overlapping architectures of deep learning. ICLR, 2018.\n\nDropout: a simple way to prevent neural networks from overfitting. N Srivastava, G Hinton, A Krizhevsky, I Sutskever, R Salakhutdinov, The Journal of Machine Learning Research. 151Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. Dropout: a simple way to prevent neural networks from overfitting. The Journal of Machine Learning Research, 15(1):1929-1958, 2014.\n\n. C Szegedy, W Liu, Y Jia, P Sermanet, S Reed, D Anguelov, D Erhan, V Vanhoucke, A Rabinovich, Going deeper with convolutions. CVPRSzegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D., Vanhoucke, V., and Rabinovich, A. Going deeper with convolutions. CVPR, pp. 1-9, 2015.\n\nRethinking the inception architecture for computer vision. C Szegedy, V Vanhoucke, S Ioffe, J Shlens, Z Wojna, CVPR. Szegedy, C., Vanhoucke, V., Ioffe, S., Shlens, J., and Wojna, Z. Rethinking the inception architecture for computer vision. CVPR, pp. 2818-2826, 2016.\n\nInception-v4, inception-resnet and the impact of residual connections on learning. C Szegedy, S Ioffe, V Vanhoucke, Alemi , A A , 12Szegedy, C., Ioffe, S., Vanhoucke, V., and Alemi, A. A. Inception-v4, inception-resnet and the impact of residual connections on learning. AAAI, 4:12, 2017.\n\nM Tan, B Chen, R Pang, V Vasudevan, M Sandler, A Howard, Q V Le, Mnasnet, Platform-aware neural architecture search for mobile. CVPR. Tan, M., Chen, B., Pang, R., Vasudevan, V., Sandler, M., Howard, A., and Le, Q. V. MnasNet: Platform-aware neural architecture search for mobile. CVPR, 2019.\n\nS Xie, R Girshick, P Doll\u00e1r, Z Tu, K He, Aggregated residual transformations for deep neural networks. CVPR. Xie, S., Girshick, R., Doll\u00e1r, P., Tu, Z., and He, K. Aggre- gated residual transformations for deep neural networks. CVPR, pp. 5987-5995, 2017.\n\nT.-J Yang, A Howard, B Chen, X Zhang, A Go, V Sze, Adam , H Netadapt, Platform-aware neural network adaptation for mobile applications. ECCV. Yang, T.-J., Howard, A., Chen, B., Zhang, X., Go, A., Sze, V., and Adam, H. Netadapt: Platform-aware neural net- work adaptation for mobile applications. ECCV, 2018.\n\nS Zagoruyko, N Komodakis, Wide residual networks. BMVC. Zagoruyko, S. and Komodakis, N. Wide residual networks. BMVC, 2016.\n\nX Zhang, Z Li, C C Loy, D Lin, Polynet, A pursuit of structural diversity in very deep networks. CVPR. Zhang, X., Li, Z., Loy, C. C., and Lin, D. Polynet: A pursuit of structural diversity in very deep networks. CVPR, pp. 3900-3908, 2017.\n\nShufflenet: An extremely efficient convolutional neural network for mobile devices. X Zhang, X Zhou, M Lin, J Sun, CVPRZhang, X., Zhou, X., Lin, M., and Sun, J. Shufflenet: An ex- tremely efficient convolutional neural network for mobile devices. CVPR, 2018.\n\nLearning deep features for discriminative localization. B Zhou, A Khosla, A Lapedriza, A Oliva, A Torralba, CVPR. Zhou, B., Khosla, A., Lapedriza, A., Oliva, A., and Torralba, A. Learning deep features for discriminative localization. CVPR, pp. 2921-2929, 2016.\n\nNeural architecture search with reinforcement learning. B Zoph, Q V Le, Zoph, B. and Le, Q. V. Neural architecture search with reinforcement learning. ICLR, 2017.\n\nLearning transferable architectures for scalable image recognition. B Zoph, V Vasudevan, J Shlens, Q V Le, CVPRZoph, B., Vasudevan, V., Shlens, J., and Le, Q. V. Learning transferable architectures for scalable image recognition. CVPR, 2018.\n", "annotations": {"author": "[{\"end\":89,\"start\":76},{\"end\":100,\"start\":90}]", "publisher": null, "author_last_name": "[{\"end\":88,\"start\":85},{\"end\":99,\"start\":97}]", "author_first_name": "[{\"end\":84,\"start\":76},{\"end\":94,\"start\":90},{\"end\":96,\"start\":95}]", "author_affiliation": null, "title": "[{\"end\":73,\"start\":1},{\"end\":173,\"start\":101}]", "venue": null, "abstract": "[{\"end\":1480,\"start\":175}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1596,\"start\":1579},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1745,\"start\":1728},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":1813,\"start\":1795},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":2502,\"start\":2485},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":2541,\"start\":2512},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":4261,\"start\":4241},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":4277,\"start\":4261},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":4329,\"start\":4300},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4659,\"start\":4638},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":4680,\"start\":4659},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":4709,\"start\":4692},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":4867,\"start\":4850},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":4884,\"start\":4867},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":5304,\"start\":5287},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":5662,\"start\":5637},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":6429,\"start\":6405},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6505,\"start\":6488},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":6522,\"start\":6505},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":6785,\"start\":6769},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":6802,\"start\":6785},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7018,\"start\":6996},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":7039,\"start\":7018},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":7073,\"start\":7052},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":7094,\"start\":7073},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7128,\"start\":7112},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":7259,\"start\":7241},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7276,\"start\":7259},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":7854,\"start\":7837},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":8001,\"start\":7972},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":8039,\"start\":8018},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8235,\"start\":8215},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":8255,\"start\":8235},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":8278,\"start\":8255},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":8294,\"start\":8278},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":8989,\"start\":8972},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":10979,\"start\":10962},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":10998,\"start\":10979},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":11019,\"start\":10998},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":11263,\"start\":11234},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":11336,\"start\":11319},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":11384,\"start\":11361},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":11848,\"start\":11827},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":11868,\"start\":11848},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":12204,\"start\":12175},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":12756,\"start\":12734},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12980,\"start\":12963},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":14809,\"start\":14791},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":16587,\"start\":16569},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":17866,\"start\":17845},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":17887,\"start\":17866},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":17916,\"start\":17899},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":18339,\"start\":18317},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":18362,\"start\":18344},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":18430,\"start\":18412},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":18564,\"start\":18544},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":18836,\"start\":18818},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":19205,\"start\":19183},{\"end\":19235,\"start\":19207},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":19269,\"start\":19245},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":19412,\"start\":19385},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":19433,\"start\":19412},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":19481,\"start\":19461},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19524,\"start\":19504},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":19670,\"start\":19646},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":20555,\"start\":20537},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":20875,\"start\":20858},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":20991,\"start\":20972},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":21218,\"start\":21191},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":21265,\"start\":21246},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":21318,\"start\":21297},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":21371,\"start\":21343},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":21421,\"start\":21402},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":21476,\"start\":21455},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":21523,\"start\":21501},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":21771,\"start\":21747},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":21998,\"start\":21976},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":22615,\"start\":22598},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":22646,\"start\":22626},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":22680,\"start\":22658},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":23337,\"start\":23319},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":25300,\"start\":25282},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":25496,\"start\":25478},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":25763,\"start\":25745},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":25780,\"start\":25763},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":27758,\"start\":27732}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":24813,\"start\":24538},{\"attributes\":{\"id\":\"fig_1\"},\"end\":24914,\"start\":24814},{\"attributes\":{\"id\":\"fig_3\"},\"end\":25268,\"start\":24915},{\"attributes\":{\"id\":\"fig_4\"},\"end\":25780,\"start\":25269},{\"attributes\":{\"id\":\"fig_6\"},\"end\":25911,\"start\":25781},{\"attributes\":{\"id\":\"fig_7\"},\"end\":25975,\"start\":25912},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":26506,\"start\":25976},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":26844,\"start\":26507},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":27675,\"start\":26845},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":29687,\"start\":27676},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":30463,\"start\":29688},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":30766,\"start\":30464},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":30899,\"start\":30767},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":31086,\"start\":30900},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":31235,\"start\":31087},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":31541,\"start\":31236}]", "paragraph": "[{\"end\":2921,\"start\":1496},{\"end\":3974,\"start\":2923},{\"end\":4564,\"start\":3976},{\"end\":5588,\"start\":4566},{\"end\":6686,\"start\":5605},{\"end\":7737,\"start\":6688},{\"end\":8295,\"start\":7739},{\"end\":8441,\"start\":8322},{\"end\":8512,\"start\":8465},{\"end\":8773,\"start\":8639},{\"end\":9153,\"start\":8823},{\"end\":9367,\"start\":9187},{\"end\":9603,\"start\":9369},{\"end\":10300,\"start\":9605},{\"end\":10544,\"start\":10440},{\"end\":10879,\"start\":10643},{\"end\":11749,\"start\":10895},{\"end\":12535,\"start\":11751},{\"end\":13234,\"start\":12537},{\"end\":13288,\"start\":13236},{\"end\":13439,\"start\":13290},{\"end\":14175,\"start\":13460},{\"end\":14591,\"start\":14177},{\"end\":14763,\"start\":14593},{\"end\":14920,\"start\":14765},{\"end\":15091,\"start\":14922},{\"end\":15992,\"start\":15188},{\"end\":16686,\"start\":16022},{\"end\":16799,\"start\":16688},{\"end\":17066,\"start\":16801},{\"end\":17229,\"start\":17068},{\"end\":17589,\"start\":17231},{\"end\":17720,\"start\":17605},{\"end\":18228,\"start\":17758},{\"end\":18709,\"start\":18230},{\"end\":20578,\"start\":18747},{\"end\":21541,\"start\":20595},{\"end\":22099,\"start\":21588},{\"end\":22694,\"start\":22101},{\"end\":23188,\"start\":22709},{\"end\":23777,\"start\":23190},{\"end\":24537,\"start\":23792}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":8638,\"start\":8513},{\"attributes\":{\"id\":\"formula_1\"},\"end\":8822,\"start\":8774},{\"attributes\":{\"id\":\"formula_2\"},\"end\":9186,\"start\":9154},{\"attributes\":{\"id\":\"formula_3\"},\"end\":10439,\"start\":10301},{\"attributes\":{\"id\":\"formula_4\"},\"end\":10621,\"start\":10545},{\"attributes\":{\"id\":\"formula_5\"},\"end\":10894,\"start\":10880},{\"attributes\":{\"id\":\"formula_6\"},\"end\":15187,\"start\":15092}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":2349,\"start\":2335},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":10528,\"start\":10521},{\"attributes\":{\"ref_id\":\"tab_2\"},\"end\":12136,\"start\":12128},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":17227,\"start\":17220},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":17925,\"start\":17918},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":19742,\"start\":19735},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":20741,\"start\":20734},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":21188,\"start\":21181},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":21703,\"start\":21695},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":21858,\"start\":21851},{\"attributes\":{\"ref_id\":\"tab_9\"},\"end\":23496,\"start\":23489}]", "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1494,\"start\":1482},{\"attributes\":{\"n\":\"2.\"},\"end\":5603,\"start\":5591},{\"attributes\":{\"n\":\"3.\"},\"end\":8320,\"start\":8298},{\"attributes\":{\"n\":\"3.1.\"},\"end\":8463,\"start\":8444},{\"attributes\":{\"n\":\"3.2.\"},\"end\":10641,\"start\":10623},{\"attributes\":{\"n\":\"3.3.\"},\"end\":13458,\"start\":13442},{\"attributes\":{\"n\":\"4.\"},\"end\":16020,\"start\":15995},{\"attributes\":{\"n\":\"5.\"},\"end\":17603,\"start\":17592},{\"attributes\":{\"n\":\"5.1.\"},\"end\":17756,\"start\":17723},{\"attributes\":{\"n\":\"5.2.\"},\"end\":18745,\"start\":18712},{\"end\":20593,\"start\":20581},{\"attributes\":{\"n\":\"5.3.\"},\"end\":21586,\"start\":21544},{\"attributes\":{\"n\":\"6.\"},\"end\":22707,\"start\":22697},{\"attributes\":{\"n\":\"7.\"},\"end\":23790,\"start\":23780},{\"end\":24825,\"start\":24815},{\"end\":24926,\"start\":24916},{\"end\":25792,\"start\":25782},{\"end\":25923,\"start\":25913},{\"end\":26855,\"start\":26846},{\"end\":27686,\"start\":27677},{\"end\":29698,\"start\":29689},{\"end\":30474,\"start\":30465},{\"end\":30777,\"start\":30768},{\"end\":31097,\"start\":31088},{\"end\":31246,\"start\":31237}]", "table": "[{\"end\":26506,\"start\":26016},{\"end\":27675,\"start\":27025},{\"end\":29687,\"start\":28157},{\"end\":30463,\"start\":29733},{\"end\":30766,\"start\":30485},{\"end\":30899,\"start\":30842},{\"end\":31086,\"start\":30966},{\"end\":31235,\"start\":31126},{\"end\":31541,\"start\":31339}]", "figure_caption": "[{\"end\":24813,\"start\":24540},{\"end\":24914,\"start\":24827},{\"end\":25268,\"start\":24928},{\"end\":25780,\"start\":25271},{\"end\":25911,\"start\":25794},{\"end\":25975,\"start\":25925},{\"end\":26016,\"start\":25978},{\"end\":26844,\"start\":26509},{\"end\":27025,\"start\":26857},{\"end\":28157,\"start\":27688},{\"end\":29733,\"start\":29700},{\"end\":30485,\"start\":30476},{\"end\":30842,\"start\":30779},{\"end\":30966,\"start\":30902},{\"end\":31126,\"start\":31099},{\"end\":31339,\"start\":31248}]", "figure_ref": "[{\"end\":1980,\"start\":1972},{\"end\":3894,\"start\":3886},{\"end\":4996,\"start\":4988},{\"end\":9380,\"start\":9372},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":11575,\"start\":11566},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":12440,\"start\":12432},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":12990,\"start\":12982},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":14299,\"start\":14290},{\"end\":18610,\"start\":18602},{\"end\":18660,\"start\":18652},{\"end\":20167,\"start\":20159},{\"end\":20943,\"start\":20935},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":22383,\"start\":22375},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":22816,\"start\":22808},{\"end\":23284,\"start\":23276}]", "bib_author_first_name": "[{\"end\":31834,\"start\":31833},{\"end\":31842,\"start\":31841},{\"end\":31849,\"start\":31848},{\"end\":31860,\"start\":31859},{\"end\":31862,\"start\":31861},{\"end\":31875,\"start\":31874},{\"end\":31877,\"start\":31876},{\"end\":31887,\"start\":31886},{\"end\":31889,\"start\":31888},{\"end\":32162,\"start\":32161},{\"end\":32173,\"start\":32172},{\"end\":32187,\"start\":32186},{\"end\":32335,\"start\":32334},{\"end\":32342,\"start\":32341},{\"end\":32349,\"start\":32348},{\"end\":32628,\"start\":32627},{\"end\":32745,\"start\":32744},{\"end\":32747,\"start\":32746},{\"end\":32756,\"start\":32755},{\"end\":32764,\"start\":32763},{\"end\":32772,\"start\":32771},{\"end\":32785,\"start\":32784},{\"end\":32787,\"start\":32786},{\"end\":33084,\"start\":33083},{\"end\":33095,\"start\":33094},{\"end\":33105,\"start\":33104},{\"end\":33304,\"start\":33303},{\"end\":33315,\"start\":33314},{\"end\":33323,\"start\":33322},{\"end\":33329,\"start\":33328},{\"end\":33336,\"start\":33335},{\"end\":33343,\"start\":33342},{\"end\":33350,\"start\":33349},{\"end\":33358,\"start\":33357},{\"end\":33718,\"start\":33717},{\"end\":33725,\"start\":33724},{\"end\":33732,\"start\":33731},{\"end\":33734,\"start\":33733},{\"end\":33953,\"start\":33952},{\"end\":33959,\"start\":33958},{\"end\":33968,\"start\":33967},{\"end\":33975,\"start\":33974},{\"end\":34112,\"start\":34111},{\"end\":34118,\"start\":34117},{\"end\":34130,\"start\":34129},{\"end\":34140,\"start\":34139},{\"end\":34308,\"start\":34307},{\"end\":34314,\"start\":34313},{\"end\":34321,\"start\":34320},{\"end\":34328,\"start\":34327},{\"end\":34339,\"start\":34335},{\"end\":34345,\"start\":34344},{\"end\":34503,\"start\":34502},{\"end\":34505,\"start\":34504},{\"end\":34515,\"start\":34514},{\"end\":34522,\"start\":34521},{\"end\":34530,\"start\":34529},{\"end\":34546,\"start\":34545},{\"end\":34554,\"start\":34553},{\"end\":34564,\"start\":34563},{\"end\":34580,\"start\":34576},{\"end\":34584,\"start\":34583},{\"end\":34959,\"start\":34958},{\"end\":34965,\"start\":34964},{\"end\":34973,\"start\":34972},{\"end\":35062,\"start\":35061},{\"end\":35071,\"start\":35070},{\"end\":35078,\"start\":35077},{\"end\":35085,\"start\":35084},{\"end\":35094,\"start\":35093},{\"end\":35096,\"start\":35095},{\"end\":35280,\"start\":35279},{\"end\":35289,\"start\":35288},{\"end\":35296,\"start\":35295},{\"end\":35314,\"start\":35313},{\"end\":35445,\"start\":35444},{\"end\":35454,\"start\":35453},{\"end\":35463,\"start\":35462},{\"end\":35471,\"start\":35470},{\"end\":35478,\"start\":35477},{\"end\":35487,\"start\":35486},{\"end\":35489,\"start\":35488},{\"end\":35498,\"start\":35494},{\"end\":35502,\"start\":35501},{\"end\":35808,\"start\":35807},{\"end\":35810,\"start\":35809},{\"end\":35821,\"start\":35820},{\"end\":35828,\"start\":35827},{\"end\":35830,\"start\":35829},{\"end\":35843,\"start\":35842},{\"end\":35853,\"start\":35852},{\"end\":35855,\"start\":35854},{\"end\":35864,\"start\":35863},{\"end\":36300,\"start\":36299},{\"end\":36309,\"start\":36308},{\"end\":36466,\"start\":36465},{\"end\":36479,\"start\":36478},{\"end\":36489,\"start\":36488},{\"end\":36491,\"start\":36490},{\"end\":36752,\"start\":36751},{\"end\":36762,\"start\":36761},{\"end\":36770,\"start\":36769},{\"end\":36779,\"start\":36778},{\"end\":37010,\"start\":37009},{\"end\":37024,\"start\":37023},{\"end\":37225,\"start\":37224},{\"end\":37239,\"start\":37238},{\"end\":37252,\"start\":37251},{\"end\":37254,\"start\":37253},{\"end\":37481,\"start\":37480},{\"end\":37488,\"start\":37487},{\"end\":37680,\"start\":37676},{\"end\":37687,\"start\":37686},{\"end\":37697,\"start\":37696},{\"end\":37709,\"start\":37708},{\"end\":37715,\"start\":37714},{\"end\":37728,\"start\":37727},{\"end\":37880,\"start\":37879},{\"end\":37887,\"start\":37886},{\"end\":37895,\"start\":37894},{\"end\":37905,\"start\":37904},{\"end\":37915,\"start\":37911},{\"end\":37921,\"start\":37920},{\"end\":37932,\"start\":37931},{\"end\":37942,\"start\":37941},{\"end\":37956,\"start\":37950},{\"end\":37960,\"start\":37959},{\"end\":38229,\"start\":38228},{\"end\":38235,\"start\":38234},{\"end\":38241,\"start\":38240},{\"end\":38249,\"start\":38248},{\"end\":38258,\"start\":38254},{\"end\":38262,\"start\":38261},{\"end\":38477,\"start\":38476},{\"end\":38483,\"start\":38482},{\"end\":38495,\"start\":38491},{\"end\":38504,\"start\":38503},{\"end\":38703,\"start\":38702},{\"end\":38714,\"start\":38713},{\"end\":38726,\"start\":38725},{\"end\":38740,\"start\":38739},{\"end\":38746,\"start\":38745},{\"end\":38756,\"start\":38755},{\"end\":38762,\"start\":38761},{\"end\":38774,\"start\":38773},{\"end\":39075,\"start\":39074},{\"end\":39083,\"start\":39082},{\"end\":39092,\"start\":39091},{\"end\":39103,\"start\":39102},{\"end\":39115,\"start\":39114},{\"end\":39364,\"start\":39363},{\"end\":39373,\"start\":39372},{\"end\":39381,\"start\":39380},{\"end\":39394,\"start\":39393},{\"end\":39407,\"start\":39406},{\"end\":39409,\"start\":39408},{\"end\":39415,\"start\":39414},{\"end\":39695,\"start\":39691},{\"end\":39707,\"start\":39706},{\"end\":39856,\"start\":39855},{\"end\":39858,\"start\":39857},{\"end\":39868,\"start\":39867},{\"end\":39879,\"start\":39878},{\"end\":39898,\"start\":39891},{\"end\":39902,\"start\":39901},{\"end\":40029,\"start\":40028},{\"end\":40038,\"start\":40037},{\"end\":40047,\"start\":40046},{\"end\":40060,\"start\":40059},{\"end\":40071,\"start\":40070},{\"end\":40316,\"start\":40315},{\"end\":40332,\"start\":40331},{\"end\":40340,\"start\":40339},{\"end\":40342,\"start\":40341},{\"end\":40560,\"start\":40559},{\"end\":40568,\"start\":40567},{\"end\":40580,\"start\":40579},{\"end\":40589,\"start\":40588},{\"end\":40591,\"start\":40590},{\"end\":40780,\"start\":40779},{\"end\":40795,\"start\":40794},{\"end\":40803,\"start\":40802},{\"end\":40809,\"start\":40808},{\"end\":40819,\"start\":40818},{\"end\":40831,\"start\":40830},{\"end\":40837,\"start\":40836},{\"end\":40846,\"start\":40845},{\"end\":40858,\"start\":40857},{\"end\":40868,\"start\":40867},{\"end\":41174,\"start\":41173},{\"end\":41185,\"start\":41184},{\"end\":41195,\"start\":41194},{\"end\":41202,\"start\":41201},{\"end\":41218,\"start\":41214},{\"end\":41225,\"start\":41221},{\"end\":41496,\"start\":41495},{\"end\":41506,\"start\":41505},{\"end\":41699,\"start\":41698},{\"end\":41713,\"start\":41712},{\"end\":41723,\"start\":41722},{\"end\":41737,\"start\":41736},{\"end\":41750,\"start\":41749},{\"end\":42028,\"start\":42027},{\"end\":42039,\"start\":42038},{\"end\":42046,\"start\":42045},{\"end\":42053,\"start\":42052},{\"end\":42065,\"start\":42064},{\"end\":42073,\"start\":42072},{\"end\":42085,\"start\":42084},{\"end\":42094,\"start\":42093},{\"end\":42107,\"start\":42106},{\"end\":42384,\"start\":42383},{\"end\":42395,\"start\":42394},{\"end\":42408,\"start\":42407},{\"end\":42417,\"start\":42416},{\"end\":42427,\"start\":42426},{\"end\":42677,\"start\":42676},{\"end\":42688,\"start\":42687},{\"end\":42697,\"start\":42696},{\"end\":42714,\"start\":42709},{\"end\":42718,\"start\":42717},{\"end\":42720,\"start\":42719},{\"end\":42884,\"start\":42883},{\"end\":42891,\"start\":42890},{\"end\":42899,\"start\":42898},{\"end\":42907,\"start\":42906},{\"end\":42920,\"start\":42919},{\"end\":42931,\"start\":42930},{\"end\":42941,\"start\":42940},{\"end\":42943,\"start\":42942},{\"end\":43177,\"start\":43176},{\"end\":43184,\"start\":43183},{\"end\":43196,\"start\":43195},{\"end\":43206,\"start\":43205},{\"end\":43212,\"start\":43211},{\"end\":43435,\"start\":43431},{\"end\":43443,\"start\":43442},{\"end\":43453,\"start\":43452},{\"end\":43461,\"start\":43460},{\"end\":43470,\"start\":43469},{\"end\":43476,\"start\":43475},{\"end\":43486,\"start\":43482},{\"end\":43490,\"start\":43489},{\"end\":43741,\"start\":43740},{\"end\":43754,\"start\":43753},{\"end\":43866,\"start\":43865},{\"end\":43875,\"start\":43874},{\"end\":43881,\"start\":43880},{\"end\":43883,\"start\":43882},{\"end\":43890,\"start\":43889},{\"end\":44190,\"start\":44189},{\"end\":44199,\"start\":44198},{\"end\":44207,\"start\":44206},{\"end\":44214,\"start\":44213},{\"end\":44422,\"start\":44421},{\"end\":44430,\"start\":44429},{\"end\":44440,\"start\":44439},{\"end\":44453,\"start\":44452},{\"end\":44462,\"start\":44461},{\"end\":44685,\"start\":44684},{\"end\":44693,\"start\":44692},{\"end\":44695,\"start\":44694},{\"end\":44861,\"start\":44860},{\"end\":44869,\"start\":44868},{\"end\":44882,\"start\":44881},{\"end\":44892,\"start\":44891},{\"end\":44894,\"start\":44893}]", "bib_author_last_name": "[{\"end\":31839,\"start\":31835},{\"end\":31846,\"start\":31843},{\"end\":31857,\"start\":31850},{\"end\":31872,\"start\":31863},{\"end\":31884,\"start\":31878},{\"end\":31899,\"start\":31890},{\"end\":31909,\"start\":31901},{\"end\":32170,\"start\":32163},{\"end\":32184,\"start\":32174},{\"end\":32196,\"start\":32188},{\"end\":32339,\"start\":32336},{\"end\":32346,\"start\":32343},{\"end\":32353,\"start\":32350},{\"end\":32367,\"start\":32355},{\"end\":32636,\"start\":32629},{\"end\":32753,\"start\":32748},{\"end\":32761,\"start\":32757},{\"end\":32769,\"start\":32765},{\"end\":32782,\"start\":32773},{\"end\":32790,\"start\":32788},{\"end\":32803,\"start\":32792},{\"end\":33092,\"start\":33085},{\"end\":33102,\"start\":33096},{\"end\":33110,\"start\":33106},{\"end\":33312,\"start\":33305},{\"end\":33320,\"start\":33316},{\"end\":33326,\"start\":33324},{\"end\":33333,\"start\":33330},{\"end\":33340,\"start\":33337},{\"end\":33347,\"start\":33344},{\"end\":33355,\"start\":33351},{\"end\":33366,\"start\":33359},{\"end\":33379,\"start\":33368},{\"end\":33722,\"start\":33719},{\"end\":33729,\"start\":33726},{\"end\":33740,\"start\":33735},{\"end\":33956,\"start\":33954},{\"end\":33965,\"start\":33960},{\"end\":33972,\"start\":33969},{\"end\":33979,\"start\":33976},{\"end\":34115,\"start\":34113},{\"end\":34127,\"start\":34119},{\"end\":34137,\"start\":34131},{\"end\":34149,\"start\":34141},{\"end\":34311,\"start\":34309},{\"end\":34318,\"start\":34315},{\"end\":34325,\"start\":34322},{\"end\":34333,\"start\":34329},{\"end\":34342,\"start\":34340},{\"end\":34349,\"start\":34346},{\"end\":34354,\"start\":34351},{\"end\":34512,\"start\":34506},{\"end\":34519,\"start\":34516},{\"end\":34527,\"start\":34523},{\"end\":34543,\"start\":34531},{\"end\":34551,\"start\":34547},{\"end\":34561,\"start\":34555},{\"end\":34574,\"start\":34565},{\"end\":34595,\"start\":34585},{\"end\":34962,\"start\":34960},{\"end\":34970,\"start\":34966},{\"end\":34977,\"start\":34974},{\"end\":35068,\"start\":35063},{\"end\":35075,\"start\":35072},{\"end\":35082,\"start\":35079},{\"end\":35091,\"start\":35086},{\"end\":35107,\"start\":35097},{\"end\":35286,\"start\":35281},{\"end\":35293,\"start\":35290},{\"end\":35311,\"start\":35297},{\"end\":35325,\"start\":35315},{\"end\":35451,\"start\":35446},{\"end\":35460,\"start\":35455},{\"end\":35468,\"start\":35464},{\"end\":35475,\"start\":35472},{\"end\":35484,\"start\":35479},{\"end\":35492,\"start\":35490},{\"end\":35508,\"start\":35503},{\"end\":35818,\"start\":35811},{\"end\":35825,\"start\":35822},{\"end\":35840,\"start\":35831},{\"end\":35850,\"start\":35844},{\"end\":35861,\"start\":35856},{\"end\":35872,\"start\":35865},{\"end\":35884,\"start\":35874},{\"end\":36306,\"start\":36301},{\"end\":36317,\"start\":36310},{\"end\":36476,\"start\":36467},{\"end\":36486,\"start\":36480},{\"end\":36494,\"start\":36492},{\"end\":36759,\"start\":36753},{\"end\":36767,\"start\":36763},{\"end\":36776,\"start\":36771},{\"end\":36787,\"start\":36780},{\"end\":37021,\"start\":37011},{\"end\":37031,\"start\":37025},{\"end\":37236,\"start\":37226},{\"end\":37249,\"start\":37240},{\"end\":37261,\"start\":37255},{\"end\":37485,\"start\":37482},{\"end\":37496,\"start\":37489},{\"end\":37684,\"start\":37681},{\"end\":37694,\"start\":37688},{\"end\":37706,\"start\":37698},{\"end\":37712,\"start\":37710},{\"end\":37725,\"start\":37716},{\"end\":37737,\"start\":37729},{\"end\":37884,\"start\":37881},{\"end\":37892,\"start\":37888},{\"end\":37902,\"start\":37896},{\"end\":37909,\"start\":37906},{\"end\":37918,\"start\":37916},{\"end\":37929,\"start\":37922},{\"end\":37939,\"start\":37933},{\"end\":37948,\"start\":37943},{\"end\":38232,\"start\":38230},{\"end\":38238,\"start\":38236},{\"end\":38246,\"start\":38242},{\"end\":38252,\"start\":38250},{\"end\":38480,\"start\":38478},{\"end\":38489,\"start\":38484},{\"end\":38501,\"start\":38496},{\"end\":38508,\"start\":38505},{\"end\":38711,\"start\":38704},{\"end\":38723,\"start\":38715},{\"end\":38737,\"start\":38727},{\"end\":38743,\"start\":38741},{\"end\":38753,\"start\":38747},{\"end\":38759,\"start\":38757},{\"end\":38771,\"start\":38763},{\"end\":38789,\"start\":38775},{\"end\":39080,\"start\":39076},{\"end\":39089,\"start\":39084},{\"end\":39100,\"start\":39093},{\"end\":39112,\"start\":39104},{\"end\":39123,\"start\":39116},{\"end\":39370,\"start\":39365},{\"end\":39378,\"start\":39374},{\"end\":39391,\"start\":39382},{\"end\":39404,\"start\":39395},{\"end\":39412,\"start\":39410},{\"end\":39420,\"start\":39416},{\"end\":39704,\"start\":39696},{\"end\":39717,\"start\":39708},{\"end\":39865,\"start\":39859},{\"end\":39876,\"start\":39869},{\"end\":39889,\"start\":39880},{\"end\":40035,\"start\":40030},{\"end\":40044,\"start\":40039},{\"end\":40057,\"start\":40048},{\"end\":40068,\"start\":40061},{\"end\":40086,\"start\":40072},{\"end\":40329,\"start\":40317},{\"end\":40337,\"start\":40333},{\"end\":40345,\"start\":40343},{\"end\":40565,\"start\":40561},{\"end\":40577,\"start\":40569},{\"end\":40586,\"start\":40581},{\"end\":40594,\"start\":40592},{\"end\":40792,\"start\":40781},{\"end\":40800,\"start\":40796},{\"end\":40806,\"start\":40804},{\"end\":40816,\"start\":40810},{\"end\":40828,\"start\":40820},{\"end\":40834,\"start\":40832},{\"end\":40843,\"start\":40838},{\"end\":40855,\"start\":40847},{\"end\":40865,\"start\":40859},{\"end\":40878,\"start\":40869},{\"end\":41182,\"start\":41175},{\"end\":41192,\"start\":41186},{\"end\":41199,\"start\":41196},{\"end\":41212,\"start\":41203},{\"end\":41503,\"start\":41497},{\"end\":41514,\"start\":41507},{\"end\":41710,\"start\":41700},{\"end\":41720,\"start\":41714},{\"end\":41734,\"start\":41724},{\"end\":41747,\"start\":41738},{\"end\":41764,\"start\":41751},{\"end\":42036,\"start\":42029},{\"end\":42043,\"start\":42040},{\"end\":42050,\"start\":42047},{\"end\":42062,\"start\":42054},{\"end\":42070,\"start\":42066},{\"end\":42082,\"start\":42074},{\"end\":42091,\"start\":42086},{\"end\":42104,\"start\":42095},{\"end\":42118,\"start\":42108},{\"end\":42392,\"start\":42385},{\"end\":42405,\"start\":42396},{\"end\":42414,\"start\":42409},{\"end\":42424,\"start\":42418},{\"end\":42433,\"start\":42428},{\"end\":42685,\"start\":42678},{\"end\":42694,\"start\":42689},{\"end\":42707,\"start\":42698},{\"end\":42888,\"start\":42885},{\"end\":42896,\"start\":42892},{\"end\":42904,\"start\":42900},{\"end\":42917,\"start\":42908},{\"end\":42928,\"start\":42921},{\"end\":42938,\"start\":42932},{\"end\":42946,\"start\":42944},{\"end\":42955,\"start\":42948},{\"end\":43181,\"start\":43178},{\"end\":43193,\"start\":43185},{\"end\":43203,\"start\":43197},{\"end\":43209,\"start\":43207},{\"end\":43215,\"start\":43213},{\"end\":43440,\"start\":43436},{\"end\":43450,\"start\":43444},{\"end\":43458,\"start\":43454},{\"end\":43467,\"start\":43462},{\"end\":43473,\"start\":43471},{\"end\":43480,\"start\":43477},{\"end\":43499,\"start\":43491},{\"end\":43751,\"start\":43742},{\"end\":43764,\"start\":43755},{\"end\":43872,\"start\":43867},{\"end\":43878,\"start\":43876},{\"end\":43887,\"start\":43884},{\"end\":43894,\"start\":43891},{\"end\":43903,\"start\":43896},{\"end\":44196,\"start\":44191},{\"end\":44204,\"start\":44200},{\"end\":44211,\"start\":44208},{\"end\":44218,\"start\":44215},{\"end\":44427,\"start\":44423},{\"end\":44437,\"start\":44431},{\"end\":44450,\"start\":44441},{\"end\":44459,\"start\":44454},{\"end\":44471,\"start\":44463},{\"end\":44690,\"start\":44686},{\"end\":44698,\"start\":44696},{\"end\":44866,\"start\":44862},{\"end\":44879,\"start\":44870},{\"end\":44889,\"start\":44883},{\"end\":44897,\"start\":44895}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":32090,\"start\":31770},{\"attributes\":{\"id\":\"b1\"},\"end\":32332,\"start\":32092},{\"attributes\":{\"id\":\"b2\"},\"end\":32556,\"start\":32334},{\"attributes\":{\"id\":\"b3\"},\"end\":32742,\"start\":32558},{\"attributes\":{\"id\":\"b4\"},\"end\":32982,\"start\":32744},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":6940861},\"end\":33301,\"start\":32984},{\"attributes\":{\"id\":\"b6\"},\"end\":33609,\"start\":33303},{\"attributes\":{\"id\":\"b7\"},\"end\":33898,\"start\":33611},{\"attributes\":{\"id\":\"b8\"},\"end\":34091,\"start\":33900},{\"attributes\":{\"id\":\"b9\"},\"end\":34240,\"start\":34093},{\"attributes\":{\"id\":\"b10\"},\"end\":34500,\"start\":34242},{\"attributes\":{\"doi\":\"arXiv:1704.04861\",\"id\":\"b11\"},\"end\":34923,\"start\":34502},{\"attributes\":{\"id\":\"b12\"},\"end\":35059,\"start\":34925},{\"attributes\":{\"id\":\"b13\"},\"end\":35275,\"start\":35061},{\"attributes\":{\"id\":\"b14\"},\"end\":35442,\"start\":35277},{\"attributes\":{\"doi\":\"arXiv:1808.07233\",\"id\":\"b15\"},\"end\":35805,\"start\":35444},{\"attributes\":{\"doi\":\"arXiv:1602.07360\",\"id\":\"b16\"},\"end\":36197,\"start\":35807},{\"attributes\":{\"id\":\"b17\"},\"end\":36463,\"start\":36199},{\"attributes\":{\"id\":\"b18\"},\"end\":36640,\"start\":36465},{\"attributes\":{\"id\":\"b19\"},\"end\":36952,\"start\":36642},{\"attributes\":{\"id\":\"b20\"},\"end\":37157,\"start\":36954},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":195908774},\"end\":37412,\"start\":37159},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":49527065},\"end\":37627,\"start\":37414},{\"attributes\":{\"id\":\"b23\"},\"end\":37875,\"start\":37629},{\"attributes\":{\"id\":\"b24\"},\"end\":38162,\"start\":37877},{\"attributes\":{\"id\":\"b25\"},\"end\":38399,\"start\":38164},{\"attributes\":{\"id\":\"b26\"},\"end\":38645,\"start\":38401},{\"attributes\":{\"doi\":\"arXiv:1805.00932\",\"id\":\"b27\"},\"end\":39024,\"start\":38647},{\"attributes\":{\"doi\":\"arXiv:1306.5151\",\"id\":\"b28\"},\"end\":39303,\"start\":39026},{\"attributes\":{\"doi\":\"arXiv:1811.07056\",\"id\":\"b29\"},\"end\":39625,\"start\":39305},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":15193013},\"end\":39853,\"start\":39627},{\"attributes\":{\"id\":\"b31\"},\"end\":40026,\"start\":39855},{\"attributes\":{\"id\":\"b32\"},\"end\":40277,\"start\":40028},{\"attributes\":{\"doi\":\"arXiv:1710.05941\",\"id\":\"b33\"},\"end\":40493,\"start\":40279},{\"attributes\":{\"id\":\"b34\"},\"end\":40726,\"start\":40495},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":2930547},\"end\":41171,\"start\":40728},{\"attributes\":{\"id\":\"b36\"},\"end\":41422,\"start\":41173},{\"attributes\":{\"id\":\"b37\"},\"end\":41629,\"start\":41424},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":6844431},\"end\":42023,\"start\":41631},{\"attributes\":{\"id\":\"b39\"},\"end\":42322,\"start\":42025},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":206593880},\"end\":42591,\"start\":42324},{\"attributes\":{\"id\":\"b41\"},\"end\":42881,\"start\":42593},{\"attributes\":{\"id\":\"b42\"},\"end\":43174,\"start\":42883},{\"attributes\":{\"id\":\"b43\"},\"end\":43429,\"start\":43176},{\"attributes\":{\"id\":\"b44\"},\"end\":43738,\"start\":43431},{\"attributes\":{\"id\":\"b45\"},\"end\":43863,\"start\":43740},{\"attributes\":{\"id\":\"b46\"},\"end\":44103,\"start\":43865},{\"attributes\":{\"id\":\"b47\"},\"end\":44363,\"start\":44105},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":6789015},\"end\":44626,\"start\":44365},{\"attributes\":{\"id\":\"b49\"},\"end\":44790,\"start\":44628},{\"attributes\":{\"id\":\"b50\"},\"end\":45033,\"start\":44792}]", "bib_title": "[{\"end\":33081,\"start\":32984},{\"end\":37222,\"start\":37159},{\"end\":37478,\"start\":37414},{\"end\":39689,\"start\":39627},{\"end\":40777,\"start\":40728},{\"end\":41696,\"start\":41631},{\"end\":42381,\"start\":42324},{\"end\":44419,\"start\":44365}]", "bib_author": "[{\"end\":31841,\"start\":31833},{\"end\":31848,\"start\":31841},{\"end\":31859,\"start\":31848},{\"end\":31874,\"start\":31859},{\"end\":31886,\"start\":31874},{\"end\":31901,\"start\":31886},{\"end\":31911,\"start\":31901},{\"end\":32172,\"start\":32161},{\"end\":32186,\"start\":32172},{\"end\":32198,\"start\":32186},{\"end\":32341,\"start\":32334},{\"end\":32348,\"start\":32341},{\"end\":32355,\"start\":32348},{\"end\":32369,\"start\":32355},{\"end\":32638,\"start\":32627},{\"end\":32755,\"start\":32744},{\"end\":32763,\"start\":32755},{\"end\":32771,\"start\":32763},{\"end\":32784,\"start\":32771},{\"end\":32792,\"start\":32784},{\"end\":32805,\"start\":32792},{\"end\":33094,\"start\":33083},{\"end\":33104,\"start\":33094},{\"end\":33112,\"start\":33104},{\"end\":33314,\"start\":33303},{\"end\":33322,\"start\":33314},{\"end\":33328,\"start\":33322},{\"end\":33335,\"start\":33328},{\"end\":33342,\"start\":33335},{\"end\":33349,\"start\":33342},{\"end\":33357,\"start\":33349},{\"end\":33368,\"start\":33357},{\"end\":33381,\"start\":33368},{\"end\":33724,\"start\":33717},{\"end\":33731,\"start\":33724},{\"end\":33742,\"start\":33731},{\"end\":33958,\"start\":33952},{\"end\":33967,\"start\":33958},{\"end\":33974,\"start\":33967},{\"end\":33981,\"start\":33974},{\"end\":34117,\"start\":34111},{\"end\":34129,\"start\":34117},{\"end\":34139,\"start\":34129},{\"end\":34151,\"start\":34139},{\"end\":34313,\"start\":34307},{\"end\":34320,\"start\":34313},{\"end\":34327,\"start\":34320},{\"end\":34335,\"start\":34327},{\"end\":34344,\"start\":34335},{\"end\":34351,\"start\":34344},{\"end\":34356,\"start\":34351},{\"end\":34514,\"start\":34502},{\"end\":34521,\"start\":34514},{\"end\":34529,\"start\":34521},{\"end\":34545,\"start\":34529},{\"end\":34553,\"start\":34545},{\"end\":34563,\"start\":34553},{\"end\":34576,\"start\":34563},{\"end\":34583,\"start\":34576},{\"end\":34597,\"start\":34583},{\"end\":34964,\"start\":34958},{\"end\":34972,\"start\":34964},{\"end\":34979,\"start\":34972},{\"end\":35070,\"start\":35061},{\"end\":35077,\"start\":35070},{\"end\":35084,\"start\":35077},{\"end\":35093,\"start\":35084},{\"end\":35109,\"start\":35093},{\"end\":35288,\"start\":35279},{\"end\":35295,\"start\":35288},{\"end\":35313,\"start\":35295},{\"end\":35327,\"start\":35313},{\"end\":35453,\"start\":35444},{\"end\":35462,\"start\":35453},{\"end\":35470,\"start\":35462},{\"end\":35477,\"start\":35470},{\"end\":35486,\"start\":35477},{\"end\":35494,\"start\":35486},{\"end\":35501,\"start\":35494},{\"end\":35510,\"start\":35501},{\"end\":35820,\"start\":35807},{\"end\":35827,\"start\":35820},{\"end\":35842,\"start\":35827},{\"end\":35852,\"start\":35842},{\"end\":35863,\"start\":35852},{\"end\":35874,\"start\":35863},{\"end\":35886,\"start\":35874},{\"end\":36308,\"start\":36299},{\"end\":36319,\"start\":36308},{\"end\":36478,\"start\":36465},{\"end\":36488,\"start\":36478},{\"end\":36496,\"start\":36488},{\"end\":36761,\"start\":36751},{\"end\":36769,\"start\":36761},{\"end\":36778,\"start\":36769},{\"end\":36789,\"start\":36778},{\"end\":37023,\"start\":37009},{\"end\":37033,\"start\":37023},{\"end\":37238,\"start\":37224},{\"end\":37251,\"start\":37238},{\"end\":37263,\"start\":37251},{\"end\":37487,\"start\":37480},{\"end\":37498,\"start\":37487},{\"end\":37686,\"start\":37676},{\"end\":37696,\"start\":37686},{\"end\":37708,\"start\":37696},{\"end\":37714,\"start\":37708},{\"end\":37727,\"start\":37714},{\"end\":37739,\"start\":37727},{\"end\":37886,\"start\":37879},{\"end\":37894,\"start\":37886},{\"end\":37904,\"start\":37894},{\"end\":37911,\"start\":37904},{\"end\":37920,\"start\":37911},{\"end\":37931,\"start\":37920},{\"end\":37941,\"start\":37931},{\"end\":37950,\"start\":37941},{\"end\":37959,\"start\":37950},{\"end\":37963,\"start\":37959},{\"end\":38234,\"start\":38228},{\"end\":38240,\"start\":38234},{\"end\":38248,\"start\":38240},{\"end\":38254,\"start\":38248},{\"end\":38261,\"start\":38254},{\"end\":38265,\"start\":38261},{\"end\":38482,\"start\":38476},{\"end\":38491,\"start\":38482},{\"end\":38503,\"start\":38491},{\"end\":38510,\"start\":38503},{\"end\":38713,\"start\":38702},{\"end\":38725,\"start\":38713},{\"end\":38739,\"start\":38725},{\"end\":38745,\"start\":38739},{\"end\":38755,\"start\":38745},{\"end\":38761,\"start\":38755},{\"end\":38773,\"start\":38761},{\"end\":38791,\"start\":38773},{\"end\":39082,\"start\":39074},{\"end\":39091,\"start\":39082},{\"end\":39102,\"start\":39091},{\"end\":39114,\"start\":39102},{\"end\":39125,\"start\":39114},{\"end\":39372,\"start\":39363},{\"end\":39380,\"start\":39372},{\"end\":39393,\"start\":39380},{\"end\":39406,\"start\":39393},{\"end\":39414,\"start\":39406},{\"end\":39422,\"start\":39414},{\"end\":39706,\"start\":39691},{\"end\":39719,\"start\":39706},{\"end\":39867,\"start\":39855},{\"end\":39878,\"start\":39867},{\"end\":39891,\"start\":39878},{\"end\":39901,\"start\":39891},{\"end\":39905,\"start\":39901},{\"end\":40037,\"start\":40028},{\"end\":40046,\"start\":40037},{\"end\":40059,\"start\":40046},{\"end\":40070,\"start\":40059},{\"end\":40088,\"start\":40070},{\"end\":40331,\"start\":40315},{\"end\":40339,\"start\":40331},{\"end\":40347,\"start\":40339},{\"end\":40567,\"start\":40559},{\"end\":40579,\"start\":40567},{\"end\":40588,\"start\":40579},{\"end\":40596,\"start\":40588},{\"end\":40794,\"start\":40779},{\"end\":40802,\"start\":40794},{\"end\":40808,\"start\":40802},{\"end\":40818,\"start\":40808},{\"end\":40830,\"start\":40818},{\"end\":40836,\"start\":40830},{\"end\":40845,\"start\":40836},{\"end\":40857,\"start\":40845},{\"end\":40867,\"start\":40857},{\"end\":40880,\"start\":40867},{\"end\":41184,\"start\":41173},{\"end\":41194,\"start\":41184},{\"end\":41201,\"start\":41194},{\"end\":41214,\"start\":41201},{\"end\":41221,\"start\":41214},{\"end\":41228,\"start\":41221},{\"end\":41505,\"start\":41495},{\"end\":41516,\"start\":41505},{\"end\":41712,\"start\":41698},{\"end\":41722,\"start\":41712},{\"end\":41736,\"start\":41722},{\"end\":41749,\"start\":41736},{\"end\":41766,\"start\":41749},{\"end\":42038,\"start\":42027},{\"end\":42045,\"start\":42038},{\"end\":42052,\"start\":42045},{\"end\":42064,\"start\":42052},{\"end\":42072,\"start\":42064},{\"end\":42084,\"start\":42072},{\"end\":42093,\"start\":42084},{\"end\":42106,\"start\":42093},{\"end\":42120,\"start\":42106},{\"end\":42394,\"start\":42383},{\"end\":42407,\"start\":42394},{\"end\":42416,\"start\":42407},{\"end\":42426,\"start\":42416},{\"end\":42435,\"start\":42426},{\"end\":42687,\"start\":42676},{\"end\":42696,\"start\":42687},{\"end\":42709,\"start\":42696},{\"end\":42717,\"start\":42709},{\"end\":42723,\"start\":42717},{\"end\":42890,\"start\":42883},{\"end\":42898,\"start\":42890},{\"end\":42906,\"start\":42898},{\"end\":42919,\"start\":42906},{\"end\":42930,\"start\":42919},{\"end\":42940,\"start\":42930},{\"end\":42948,\"start\":42940},{\"end\":42957,\"start\":42948},{\"end\":43183,\"start\":43176},{\"end\":43195,\"start\":43183},{\"end\":43205,\"start\":43195},{\"end\":43211,\"start\":43205},{\"end\":43217,\"start\":43211},{\"end\":43442,\"start\":43431},{\"end\":43452,\"start\":43442},{\"end\":43460,\"start\":43452},{\"end\":43469,\"start\":43460},{\"end\":43475,\"start\":43469},{\"end\":43482,\"start\":43475},{\"end\":43489,\"start\":43482},{\"end\":43501,\"start\":43489},{\"end\":43753,\"start\":43740},{\"end\":43766,\"start\":43753},{\"end\":43874,\"start\":43865},{\"end\":43880,\"start\":43874},{\"end\":43889,\"start\":43880},{\"end\":43896,\"start\":43889},{\"end\":43905,\"start\":43896},{\"end\":44198,\"start\":44189},{\"end\":44206,\"start\":44198},{\"end\":44213,\"start\":44206},{\"end\":44220,\"start\":44213},{\"end\":44429,\"start\":44421},{\"end\":44439,\"start\":44429},{\"end\":44452,\"start\":44439},{\"end\":44461,\"start\":44452},{\"end\":44473,\"start\":44461},{\"end\":44692,\"start\":44684},{\"end\":44700,\"start\":44692},{\"end\":44868,\"start\":44860},{\"end\":44881,\"start\":44868},{\"end\":44891,\"start\":44881},{\"end\":44899,\"start\":44891}]", "bib_venue": "[{\"end\":31831,\"start\":31770},{\"end\":32159,\"start\":32092},{\"end\":32436,\"start\":32369},{\"end\":32625,\"start\":32558},{\"end\":32851,\"start\":32805},{\"end\":33127,\"start\":33112},{\"end\":33442,\"start\":33381},{\"end\":33715,\"start\":33611},{\"end\":33950,\"start\":33900},{\"end\":34109,\"start\":34093},{\"end\":34305,\"start\":34242},{\"end\":34683,\"start\":34613},{\"end\":34956,\"start\":34925},{\"end\":35150,\"start\":35109},{\"end\":35596,\"start\":35526},{\"end\":35973,\"start\":35902},{\"end\":36297,\"start\":36199},{\"end\":36543,\"start\":36496},{\"end\":36749,\"start\":36642},{\"end\":37007,\"start\":36954},{\"end\":37267,\"start\":37263},{\"end\":37505,\"start\":37498},{\"end\":37674,\"start\":37629},{\"end\":38007,\"start\":37963},{\"end\":38226,\"start\":38164},{\"end\":38474,\"start\":38401},{\"end\":38700,\"start\":38647},{\"end\":39072,\"start\":39026},{\"end\":39361,\"start\":39305},{\"end\":39725,\"start\":39719},{\"end\":39924,\"start\":39905},{\"end\":40141,\"start\":40088},{\"end\":40313,\"start\":40279},{\"end\":40557,\"start\":40495},{\"end\":40920,\"start\":40880},{\"end\":41288,\"start\":41228},{\"end\":41493,\"start\":41424},{\"end\":41806,\"start\":41766},{\"end\":42439,\"start\":42435},{\"end\":42674,\"start\":42593},{\"end\":43015,\"start\":42957},{\"end\":43283,\"start\":43217},{\"end\":43571,\"start\":43501},{\"end\":43794,\"start\":43766},{\"end\":43966,\"start\":43905},{\"end\":44187,\"start\":44105},{\"end\":44477,\"start\":44473},{\"end\":44682,\"start\":44628},{\"end\":44858,\"start\":44792}]"}}}, "year": 2023, "month": 12, "day": 17}