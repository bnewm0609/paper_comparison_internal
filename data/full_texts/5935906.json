{"id": 5935906, "updated": "2023-11-10 23:11:34.526", "metadata": {"title": "Quantum Error Correction", "authors": "[{\"first\":\"Dipankar\",\"last\":\"Bhattacharyya\",\"middle\":[]},{\"first\":\"Jyotirmoy\",\"last\":\"Guha\",\"middle\":[]}]", "venue": "Quantum Optics and Quantum Computation", "journal": "Quantum Optics and Quantum Computation", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Abstract : We consider quantum error-correcting codes over alphabets of arbitrary size. We generalize quantum stabilizer codes and develop Calderbank-Shor-Steane construction over quantum systems of arbitrary dimensions using the group structure of alphabets. We also develop a methodology systematically conjoining error-correcting codes into a new class of error-correcting codes. With the help of these methods we give several ways to construct quantum maximum distance separable (MDS) codes and present many families of quantum MDS codes.", "fields_of_study": "[\"Mathematics\"]", "external_ids": {"arxiv": null, "mag": "2475516916", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": null, "doi": "10.1088/978-0-7503-2715-2ch9"}}, "content": {"source": {"pdf_hash": "a6cd27d836547514dee55cbb09b2ae7bb5385b15", "pdf_src": "ScienceParsePlus", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "30f015eb8290903a8b295ed38dde482c0e7f145c", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/a6cd27d836547514dee55cbb09b2ae7bb5385b15.txt", "contents": "\nQuantum Error Correction Lecture notes of the Quantum Error Correction course\n2018/2019.\n\nProf Kastoryano \nat University of Cologne\nWintersemester\n\nQuantum Error Correction Lecture notes of the Quantum Error Correction course\n2018/2019.\n\n\nIntroduction\n\nAt the beginning the theory of quantum error correction was a minor field inside quantum information and quantum computation. Physicists were mainly interested in abstract ideas of entanglement and some connections to thermodynamics. The development of quantum error correction was very slow and it was a fringe topic until Schor came out with the factoring algorithm. The factoring algorithm showed that a quantum computer can factor numbers in a polynomial time, while a classical computer takes exponential time. However, even with this result, physicists at that day did not believe that quantum computation would ever be possible because coherent quantum states were extremely fragile, and thus building a large scale, controllable, quantum system with a small error rate was a chimera. At the beginning of 1995, there were some proposals of codes that were able to correct quantum data. This was one of the major development in the early days in quantum computation and it was the starting point of convincing the physics community that quantum computation was possible. The importance of quantum error correction is easily understood by comparing classical and quantum error rates. In a classical computer the average error rate is 10 \u221218 , while the best quantum computers that exist nowadays have an error rate of 10 \u22124 . Actually, it is almost inconceivable that they will go beyond 10 \u22127 . In other words, in quantum computation we will not be able to perform any relevant computation unless we can are able to perform error correction.\n\nThe first section of this lecture notes is about classical error correction. Concepts such as physical and logical bits and error rates will be explained. Then, we will focus on linear codes will and we will use the generator matrix to represent them. Moreover, the parity-check matrix, which is an equivalent representation for codes, will also be introduced. Afterwards, we will go through the decoding process and we will review what the distance of a code is. To finish the chapter, we will see a threshold that a code should fulfil in order to be considered a good code.\n\nThe second section is another necessary review before delving into quantum error correction (QEC). We go over the basics of classical and quantum information. It starts characterising the state of a classical system and introducing the concept of a classical bit. We explain that there exists only one single-bit operation, but that we can do computation with more than one bit. In this context and to complete the review about classical information, the concept of gate is introduced and some examples of gates and operations are given. The first element of quantum information that we introduce is the qubit. We explain the possibility of representing it using the Bloch sphere. Then, quantum operations are described with particular attention to unitary operations and projective measurements. We introduce a useful decomposition of quantum operations called Kraus decomposition. In quantum information, the concepts of randomness and noise are different than in classical information. We see them in detail in this chapter. Finally, the potential issues that quantum information has to overcome are enumerated and explained.\n\nThe third section of these notes is delved into the Shor code. We explain how it can correct bit and phase errors and linear combinations of them. We also comment why it is not used in practise.\n\nThe forth, fifth and sixth sections are shorter sections that delve into concrete topics. We first review the Knill-Laflamme theorem, which gives conditions for a subspace to be a code space. The physical noise is considered in the fifth section, in particular under the assumption of independent and identically distributed noise. Then, we study continuous time errors and see how they can be discretised.\n\nIn section seven we explain the stabilizer formalism. The Pauli group is defined as starting point and then its tensor product is considered to build stabilizer codes. We explain several properties of them as well as we see them in the concrete example of the Shor code on nine qubits.\n\nThe eighth section is devoted to the toric code. We explain this relevant code introduced by Kitaev in 1998 presenting its stabilizers and logical operators. The toric code has a connection with many-body physics, which is seen in this section. Then, we consider errors in the toric code and three different decoders. The corresponding thresholds are viewed at the end of the section.\n\n\nClassical Error Correction\n\nAs the error rate in a classical computer is very small, it may seem that classical error correction is not an important field. It is true that this field is more fundamental in quantum error correction, but classical error correction has nevertheless some interesting applications in fields such as wireless networks, deep space communication an optical storage 1 . In this chapter we will see some basic concepts of the theory of error correction that will be useful during all the lecture. We will first decompose an error correcting code in four parts and study them. Then, the notion of physical and logical bits and error rates will be defined as well as the Hamming distance and the distance of a code. We will focus on linear codes and explain the generator matrix and the parity-check matrix, which are two equivalent representations of linear codes. We will close this chapter mentioning a threshold that every good code satisfies.\n\nEvery error correcting code can be broken up into four steps (see Fig. 1):\n\n\nSource\n\nThe source, which can also be called logical information, is the information that we want to say or transmit.\n\n\nEncode\n\nWe want to encode the information that we want to transmit in a larger system in order to protect it.\n\n\nNoise\n\nThe noise, which is sometimes also called channel, will corrupt our information. The noise can be of all sorts of different natures.\n\n\nDecode\n\nIn order to illustrate the decomposition of a code, let us consider the wellknown the repetition code as an example\n\nExample 1.1. The four parts of the three-bit repetition code are (see Fig.  1):\n\n\nSource\n\nThe simplest logical information consists of a single bit, {0, 1}.\n\nFigure 1: Every error correcting code can be broken up into four steps: source, encode, noise and decode. The three-bit repetition code is the simplest example of error correcting code.\n\n\nEncode\n\nThe simplest encoding of one bit is to encode it into three bits, i.e., {0, 1} \u2192 {000, 111}. Note that a bit spans an entire space, C 2 , while {000, 111} forms only a subspace.\n\n\nNoise\n\nWe assume that the noise consists of a flip on the middle bit, i.e., it corrupts our information and gives {010, 101}.\n\n\nDecode\n\nThe decoding should map {010, 101} back to {000, 111}. In this case we can do it by majority vote, i.e., 010 is interpreted as 000 because it has more zeros than ones, and analogously for 101.\n\nAs we will see later on, this code is denoted as [3, 1].\n\nOne can naturally extend the three-bit repetition code to the n-bit repetition code. We obtain a two-dimensional subspace spanned by From these examples, we can see that the fundamental principle of error correction is redundancy. Note that the concept of code, C refers to the subspace, i.e., in the example we have C = {000, 111}. Moreover, the strings that span the code are called codewords.\n\nClassical error correction is a broad field and the goal of this chapter is far from being a complete review of classical error correction. In the following sections we will only cover some elements of classical error correction that will be useful for the chapters about quantum error correction, which is our main focus.\n\n\nPhysical error rate\n\nThe theory of error correction analyses the errors at the level of samples, i.e., individual codewords. In this section we will talk about specific type of errors and codewords. However, we have to keep in mind that the error process acts on the individual codeword in a certain probabilistic way. This means that, when we want study global logical errors, the type of analysis that we have to do is at the level of ensembles, instead of codewords.\n\nNoise can occur in many different ways. For example, the errors caused by the optical fibre through which the information is transmitted will not be the same as the noise occurred while storing the information in a magnetic device or a CD. In general, the noise will depend on the physical support and the type of process we want to perform.\n\nIn classical computation there exists only the flip-error, i.e., the error that exchanges 0 and 1. We will assume identically independent distributed (iid) noise on each physical bit. In operational terms, this means that it each bit can individually flip with probability p < 1 2 . Usually, the noise process is going to be a continuous process, but we will break it up into discrete chunks. In every individual chunk, there is a certain probability that a bit is flipped. Note, actually, that the probability p does not represent a single flip, but the union of all odd number of flips because two flips in the same bit ends up in no error.\n\nDefinition 1.1. A logical error is the probability that information is decoded incorrectly.\n\nExample 1.2. Consider again the 3-bit repetition code. If we have a probability p to flip every single bit, the probability to flip two bits of {000, 111} is 3p 2 . As soon as two bits are flipped, decoding by majority vote does not work anymore because the state 000 with two errors (e.g., 110) will be mapped to 111, and vice-versa.\n\nFrom the example above, we can see that, if there are too many flip-errors, the decoding processes will be incorrect, i.e., it will give a global error. Therefore, a logical error can be equivalently described as an error that happens at the end of the process of Fig. 1. Note that the notion of logical error completely depends on the description of the noise process and the choice of decoder.\n\nThe numbers of logical and physical bits are denoted by k and n, respectively. We will use the notation that a [n, k] code encodes k logical bits and in n physical bits. For a code to be consider good, we would like to have k n \u2192 cnt when n \u2192 \u221e. In general, k will depend on n.\n\n\nLinear codes\n\nThere exist different types of classical error codes, but the most useful codes are inside the class of linear codes. In this section we will study this type of codes and see a possible representation called generator matrix.\n\nConsider an n-bit codeword of logical bits, {x 1 , x 2 , . . . , x n } 2 , where x j = {0, 1} \u2200 j. Our goal is to encode these logical bits, x j , into a code, i.e., we want to map {x 1 , x 2 , . . . , x n } into a larger space. For this, we will typically use the so-called generator matrix, G. The generator matrix is an isometry that maps the logical information, x j , onto the representation of the logical information in the physical space, y j , i.e., y j = Gx j .\n\nExample 1.3. The generator matrix of the [3, 1] repetition code is\nG = \uf8ee \uf8ef \uf8f0 1 . . . 1 \uf8f9 \uf8fa \uf8fb \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe n.\nTherefore, when we encode the information of a bit using G, we get\nG[0] = \uf8ee \uf8ef \uf8f0 0 . . . 0 \uf8f9 \uf8fa \uf8fb \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe n and G[1] = \uf8ee \uf8ef \uf8f0 1 . . . 1 \uf8f9 \uf8fa \uf8fb \uf8fc \uf8f4 \uf8fd \uf8f4 \uf8fe n.\nNote that the arithmetic is mod 2.\n\nExample 1.4. Consider now the [6, 2] repetition code. The generator matrix has two map the following elements\n{00} \u2192 {000000}, {01} \u2192 {000111}, {10} \u2192 {111000}, {11} \u2192 {111111}.\nTherefore, we write G as\nG = \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 1 0 1 0 1 0 0 1 0 1 0 1 \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb in such a way that G 0 0 = \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 0 0 0 0 0 0 \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb , G 0 1 = \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 0 0 0 1 1 1 \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb , G 1 0 = \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 1 1 1 0 0 0 \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb , G 1 1 = \uf8ee \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8ef \uf8f0 1 1 1 1 1 1 \uf8f9 \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fa \uf8fb .\nNote that the arithmetic is mod 2.\n\nIn general, the generator matrix has k columns and n rows, i.e.,\nG = \uf8ee \uf8f0 \uf8f9 \uf8fb k n.(1)\nFrom the general form of the generator matrix (Eq. (1)), we can an interesting property of the linear codes. If we have k logical bits, we can encode up to 2 k codewords. We may think that we would need n k bits that represents the encoding, but the representation of linear codes are extremely efficient because, instead of using n k bits to represent the codespace, we only use nk bits. On top of that, the encoding procedure is efficient as it only consists of matrix multiplication. Therefore, the generator matrix is extremely convenient to describe the encoding part of the process in Fig. 1. Nevertheless, it does not tell anything about decoding. We will see later on that classical linear codes have always a natural way of decoding 3 , but before we need to introduce a different representation for linear codes.\n\n\nParity-check matrix\n\nWe have seen in the previous section that linear codes can be represented using the generator matrix. This is not the only possible representation. In this section we will introduce the parity-check matrix, which is an equivalent representation that can be more useful in certain situations.\n\nThe parity-check matrix, H, is representation for linear codes that consists of a (n \u2212 k) \u00d7 n matrix such that\nHy = 0 \u2200 y \u2208 C,(2)\nwhere C is the codespace, i.e., the n-bit space. Therefore, the codespace is the kernel of H according to Eq.\n\n(2). The rows of H are linearly independent, while columns are linearly dependent.\n\nExample 1.5. The parity-check matrix of the [n, 1] repetition code is\nH = \uf8eb \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ed 1 1 0 0 \u00b7 \u00b7 \u00b7 0 0 1 1 0 \u00b7 \u00b7 \u00b7 0 . . . . . . . . . . . . 0 \u00b7 \u00b7 \u00b7 0 1 1 0 0 \u00b7 \u00b7 \u00b7 0 0 1 1 \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f8\nConsider that we initially have the codeword y 0 = {0, . . . , 0} and it occurs an error on the third bit, e = {0, 0, 1, 0, . . . , 0}. Then, the parity-check matrix will detect the error as Hy 0 = 0\nHe = \uf8eb \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ed 0 1 1 0 . . . 0 \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f8\nNote that the capacity of H to detect errors relies on the fact that it is completely insensitive to the codewords by definition. Thus, it only picks up where the errors are.\n\nThere exists an equivalent representation of the parity-check matrix which is called the Tanner graph (see Fig. 2). The Tanner graph consists on lines of boxes where the upper line represents the bits and the lower line shows the parity of two neighbouring bits. If there is an error on the upper line, the boxes of the lower line connected to the box that contains the error will be activated. These \"activations\" are called error syndromes. They give information about where the errors are in the code (see Fig. 2), and thus they are crucial for decoding. \n\n\nDecoding\n\nOnce the information we want to transmit has been encoded and corrupted, the work of decoding is to \"remove errors\" in an intelligent way using the syndrome information of the corrupted codeword. In this section we will see that linear codes have a natural way of decoding.\n\nThe first fact that it is important to note is that, if all zeros are flipped to ones and all ones are flipped to zeros, we get exactly the same syndrome information. The syndromes do not care about the original codeword. Thus, the decoding procedure should not depend on the codeword, but only on the error syndromes.\n\nConsider that {0000000} is the initial codeword and that the information has been corrupted and we have six syndrome bits (see Fig. 3). We have absolutely no way of knowing whether to correct in one direction or the opposite because there are two possible parents of errors. The first one corresponds to the situation that three bits of the initial codeword have been flipped. However, an equivalent parent of errors is the one that hit the conjugate bits, and thus there have been four flip-errors. For these two situations, we would get exactly the same syndrome information. The decoder has to make a choice to correct into one direction or the other. The typical solution is to choose the most likely outcome. It is most probable to have three errors than to have four errors if a bit has on average an error with probability p < 1 2 . Obviously, every once on a while the decoder will make a mistake, and thus the information we will get is not the same information that was sent. Figure 3: An error syndrome has two parents of errors. Given the initial codeword {0000000}, a flip-error on the second, third and sixth bit gives the same error syndrome than a flip-error on the first, forth, fifth and seventh bit. However, the situation with only three errors is more likely.\n\nExample 1.6. Consider the [3, 1] repetition code and an initial string {000}. If the error probability of each individual bit is p < 1 2 , the probability of the initial string, {000}, to become a different codeword is the follwoing\nCodeword Probability {000} (1 \u2212 p) 3 {001} (1 \u2212 p) 2 p {010} (1 \u2212 p) 2 p {100} (1 \u2212 p) 2 p {011} (1 \u2212 p)p 2 {110} (1 \u2212 p)p 2 {101}\n(1 \u2212 p)p 2 {111} p 3\n\nAs p < 1 2 , the probability of {000} having no error is much bigger than the probability of having three errors, and thus becoming {111}.\n\nAs we are assuming iid errors, the decoder will always make the choice of the situation with the fewest number of errors. Note that this does not work if the errors are correlated.\n\n\nDistance of a code\n\nAn important characteristic of an error correcting code is its robustness towards noise. In this section we define the distance of a code, which will give an idea of how robust a code is. For that, we first need the definition of the Hamming distance.\n\nDefinition 1.2 (Hamming distance). Given two codewords, y 1 and y 2 , the Hamming distance, d(y 1 , y 2 ) is the minimum number of bits that must be flipped to transform y 1 into y 2 .\n\nExample 1.7. The distance between y 1 = {1100} and y 2 = {1010} is d = 2.\n\nOnce we know what the Hamming distance is, we can define the distance of a code. Definition 1.3 (Distance of a code). The distance of a code C is the minimal Hamming distance between to different codewords y i and y j , i.e.,\nd(C) \u2261 inf y i ,y j y i =y j d(y i , y j ).\nThe distance of a code gives an idea of how resilient the code is. However, in order to get the full idea, we should consider distributions and entropic factors. It is also worth noting that any d\u22121 2 errors of a linear code can be corrected. Actually, the distance of a code is such an important quantity that codes are usually identified with [n, k, d], where d is the distance of the code and, as mentioned before, n and k are the number of physical and logical bits, respectively.\n\nThe goal of information theory is to understand the limits on the amount of information that can be transmitted through a channel. Information theory was developed in 1950, but the first codes that achieved maximal transmission of information through a channel were proposed only fifteen years ago. These codes are called constant-rate codes and they fulfil that\nk n \u2212 \u2212\u2212 \u2192 n\u2192\u221e cnt, d n \u2212 \u2212\u2212 \u2192 n\u2192\u221e cnt.\nThe fact that both limits go to a constant means that, as n becomes higher and higher, we need to waste fewer and fewer physical bits in order to robustly encode an amount of information proportional to the amount of physical information. These codes exist in classical error correction, but not in quantum error correction.\n\nThe parameters n, k and d of a code are not completely free, i.e., there exist constraints on them such as 4\n\u2022 n \u2265 k \u2022 n \u2265 d \u2022 n \u2212 k \u2265 d \u2212 1\n\nThresholds\n\nIn the last section we have weekly suggested the idea that, if the distance of the code is large, the code is robust. Here we will see that, on top of that, a code is considered a good code if it fulfils the threshold.\n\n[Thereshold for a good code] Given a code, C, with n physical bits and a physical error rate p, it is considered a good code if there exists a probability threshold, p th \u2264 1 2 , such that the logical error rate, P log , satisfies\nP log (n, p) \u2264 ce \u2212\u03b1d \u2200 p \u2264 p th .(3)\nHere it is assumed that d scales with n.\n\nAs this threshold is a strong statement, the exponential decay is sometimes relaxed by only requiring that P log (n, p) decays as a function f (n) such that f (n) \u2192 0 when n \u2192 \u221e. On the contrary, the threshold error rate decays even faster for some codes. For example, the [n, 1] repetition code has an error correction threshold of p th = 1 2 , which is the highest possible 5 . Obviously, this is not the general case.\n\nExample 1.8 (The Hamming code). The Hamming codes are a family of linear codes with [2 r , 2 r \u2212 r, 3], where r is an integer such that r \u2265 1. They are perfect codes, that is, they achieve the highest possible rate k n for codes with minimum distance of three. The party-check matrix of the Hamming code with r = 3 is Note that the rows are linearly independent, but not the columns. In this case, we have n = 7, k = 4 and d = 3, i.e., it is a [7, 4, 3] code. In figure  4 we can see the Tanner graph of the Hamming code with r = 3. From this figure it is obvious that many errors will have the same error syndrome, and thus it will be difficult to know where the error is. Instead of directly delving into quantum error correction (QEC), in the previous section we have seen some elements of classical error correction. This section is also devoted to concepts that are needed before studying QED. Here we review the basics of classical and quantum information. We start explaining the concept of a classical bit and describing the two types of states of a classical system. Then, single-bit operation as well as gates are considered. Some examples are also given. When we move to quantum information, we introduce the qubit and emphasise its representation on the Bloch sphere. Operations in quantum mechanics are described. In particular, we pay attention to unitary operations and projective measurements. The Kraus decomposition is also introduced due to its interpretation in terms of error correction. We then differentiate between the two types of randomness that exist in quantum information, which is an important difference to classical information. After that, noise is characterised using the concept of quantum operations. The last explanation of this section is about the potential issues that we need to overcome in quantum information.\n\n\nClassical information\n\nIn classical information, the fundamental unit of information is the bit, i.e., {0, 1} \u2208 Z 2 . The physical state of the system can be:\n\n\u2022 a certain state, i.e., |0 0| or |1 1|\n\n\u2022 an uncertain state, i.e., q|0 0| + (1 \u2212 q)|1 1| where q \u2208 R with 0 < q \u2264 1. The system being in an uncertain state means that there exists a probability q to find the system in state |0 0| and a probability (1 \u2212 q) that it is in state |1 1|. Therfore, the uncertainty reflects our knowledge of the system.\n\nThe only single-bit operation 6 in classical information is the bit-flip, which consists in\n0 \u2192 1 1 \u2192 0\nNoise in classical information will typically take the system from a certain state to an uncertain state.\n\nExample 2.1. Consider a noise consisting of a flip with probability p < 1, then the state of the system will undergo the following changes\n|0 0| \u2192 p|1 1| + (1 \u2212 p)|0 0| |1 1| \u2192 p|0 0| + (1 \u2212 p)|1 1|\nNote that an operation can be interpreted as the limit case of a noise where p = 1.\n\nComputation is the process of taking several bits and mapping to them in a certain way. In other words, computation consist of operations acting on more than one bit. These operations are also known as gates\n\nExample 2.2. An example of a two-bit gate in classical information is the so-called NAND, which consists of 00 01 01 01 10 01 11 00\n\nThis gate is important in classical computation because it is a universal gate, i.e, once we are able to perform it, we can perform any other gate.\n\nIt is worth mentioning that in the formulation of computation we always represent operations going from a certain state to a certain state. However, in practise, we will always have an uncertain state, which will be mapped to another uncertain state.\n\n\nQuantum information with one qubit\n\nIn this section, we introduce the basics of quantum information. The characterisation of a quantum system is first explained as well as how to operate on it. Then, we will explain the concepts of noise and randomness in quantum information emphasising the difference to classical information. Finally, the potential issues that have to be overcome to do quantum error correction are enumerated.\n\n\nState of the quantum system\n\nIn quantum information the state of the system is a quantum state, i.e., a normalised vector of a two-dimensional Hilbert space, H 2 . Thus, we write |\u03d5 \u2208 H 2 such that \u03d5|\u03d5 = 1.\n\nThe typical physical basis of quantum information is the so-called computational basis, which consists of {|0 , |1 }. We can always write the state of the system as a linear combination of the physical basis such that\n|\u03d5 = \u03b1|0 + \u03b2|1 , where \u03b1, \u03b2 \u2208 C with |\u03b1| 2 + |\u03b2| 2 = 1.\nAs a global phase is not relevant in physics, we can choose \u03b1 to be real and non-negative. This fact, together with |\u03b1| 2 + |\u03b2| 2 = 1, allows to write the two-qubit state as\n|\u03d5 = cos \u03b8 2 |0 + e i\u03c6 sin \u03b8 2 |1 ,\nwhere 0 \u2264 \u03b8 \u2264 \u03c0 and 0 \u2264 \u03c6 \u2264 2\u03c0. The parameter \u03b8 and \u03c6 can be interpreted as spherical coordinates giving rise to a unit sphere in R 3 known as Bloch sphere (see Fig. 5). Each point of the Bloch sphere, which can be characterised by the unit vector n \u2261 (sin \u03b8 cos \u03c6, sin \u03b8 cos \u03c6, cos \u03b8), specifies a two-qubit state. Note that two antipodal points of the Bloch sphere correspond to two orthogonal states. Mixed states can also be represented using the Bloch sphere. Any twodimensional density operator, \u03c1, can be written as\n\u03c1 = 1 2 (I + a \u00b7 \u03c3) ,\nwhere I is the identity matrix, a = (a x , a y , a z ) \u2208 R 3 and \u03c3 \u2261 (\u03c3 x , \u03c3 y , \u03c3 z ) is a vector made of the Pauli matrices with\nX \u2261 \u03c3 x = 0 1 1 0 , Y \u2261 i\u03c3 y = i 0 \u2212i i 0 , Z \u2261 \u03c3 z = 1 0 0 \u22121 .(4)\nDue to normalisation of the density matrix, it is easily proven that | a| 2 \u2264 1 and | a| 2 = 1 if and only if the density matrix is a pure state 7 . In other words, pure states lie on the surface of the Bloch sphere, while mixed state correspond to point in the interior.\n\n\nQuantum operations\n\nA system can undergo many different physical transformations. They are known as operations and represented by a map E :\nB(H A ) \u2192 B(H B )\nwith the following properties. The map must be\n(i) Linear, i.e., E [ i p i \u03c1 i ] = i p i E(\u03c1 i ), (ii) Positive semidefinite, i.e., E(\u03c1) \u2265 0 \u2200\u03c1 \u2265 0, (iii) Completely positive, i.e., (E A \u2297I C ) [\u03c1 AC ] \u2265 0 \u2200\u03c1 AC \u2265 0 and any Hilbert space H C , where \u03c1 AC \u2208 B(H A \u2297 H C ). 8\nNote that (iii) implies (iii). The first two properties guarantee that the output of a quantum operation on a physical state is a physical state as well, while the third one ensures the state will still be physical even if the quantum operation applies only on a subsystem. In summary, a quantum operation is a completely positive (CP) map that describes the transformation of a physical system.\n\nA particular class of quantum operations are unitary transformations. A unitary transformation is a map, U , such that U |\u03d5 = |\u03c8 , where U U \u2020 = I. It is easily proven that any unitary map U can be written as e iH with H an hermitian operator, i.e., H = H \u2020 .\n\nIn quantum information, measurements are another important class of quantum operations. Measurements are observables, which implies that they are represented by hermitian operators. The simplest kind of measurements are the so-called projective measurements. A projective measurement, M , can be written as\nM = k \u03bd k P k ,\nwhere P k are projectors, i.e., P 2 k = P k and \u03bd k = \u00b11. Given an initial state |\u03d5 , the probability of obtaining the result m after the measurement M on |\u03d5 is p m = \u03d5|P m |\u03d5 . The state of the system after the measurement is\n|\u03d5 = P m |\u03d5 \u03d5|P m |\u03d5 Example 2.3. In order to measure if the qubit is in the state |0 0| or in |1 1|, we use the operaation M = Z = |0 0| \u2212 |1 1| = P 0 + (\u22121)P 1 .\nExample 2.4. Consider the measurement\nM = X = |+ +| \u2212 |\u2212 \u2212|, where |\u00b1 = 1 \u221a 2 (|0 \u00b1 |1 ) .\nThe probability of obtaining the result \u00b1 after measuring M = X on a state |\u03d5 is p \u00b1 = | \u00b1|\u03d5 | 2 .\n\nAny quantum operation can be written as\nT (\u03c1) = k E k \u03c1E \u2020 k ,\nwhere E k are maps such that k E \u2020 k E k = I. This decomposition is known as Kraus decomposition and the operators E k are called Kraus operators. Due to linearity of the trace, it is easy to see that the Kraus decomposition guarantees the preservation of the trace. The Kraus decomposition can be easily interpreted in terms of error correction. Consider a state \u03c1 = |\u03d5 \u03d5|, then error operator E k occurs with probability p k = ||E k |\u03d5 || 2 . For this reason, Kraus operators are also known as noise operators.\n\nAnother useful representation of operations in H 2 consists in writing an operation, \u2126, in the basis {I, X, Y, Z}, i.e.,\n\u2126 = a 1 I + a x X + a y Y + a z Z.(5)\n\nRandomness in quantum information\n\nOne of the most important difference between quantum and classical mechanics is the origin of randomness. Randomness in classical physics has to do with the ignorance about the system, while in quantum mechanics it has two forms:\n\n1. Uncertainty When our knowledge of the system is limited, it is described by a mixed state because we do not know exactly the state of the system. For example, if the system is in the state\n\u03c1 = \u03bb 0 |0 0| + (1 \u2212 \u03bb 0 )|1 1|,\nwe know that it is in state |0 0| with probability p = \u03bb 0 and in state |1 1| with probability q = 1 \u2212 \u03bb 0 . This uncertainty introduces randomness which has its origin in lack of information. It is the same randomness that exists in classical information.\n\n\nIntrinsic\n\nIn quantum mechanics, even if we know exactly the state of the system, there is room for randomness. Consider a system in the state |\u03d5 = \u03b1|0 + \u03b2|1 , where |\u03b1| 2 + |\u03b2| 2 = 1. As we have said before, if we measure |\u03d5 , there is a certain probability that we get the outcome 0 and a certain probability for outcome 1. This introduces randomness in the system which comes from intrinsic properties of its state.\n\nNote that if the state of a system is mixed, both kind of randomness can appear. Wdescarhen we perform a measurement, it is not always obvious to know which kind of randomness we are facing.\n\n\nNoise in quantum information\n\nIn quantum information, noise is a general operation (i.e., anything that is physically allowed) between two quantum states. On qubits, this means an operation, T , that takes the system from a density matrix, \u03c1, to another density matrix, \u03c3, i.e., T (\u03c1) = \u03c3. In order T to be a physical operation, it must fulfil the following properties. Given a density matrix X, T has to be \u2022 trace-preserving, i.e., tr [T (X)] = tr(X)\n\n\u2022 complete-positivity preserving in such a way that the state modified by the noise remains as a physical state.\n\nExample 2.5. Consider a noise, T , consisting of a flip with probability p \u2265 0. In other words, with probability (1 \u2212 p) the initial state, \u03c1, remains unchanged an with probability p one of its bits is flipped. The resulting state is\nT (\u03c1) = (1 \u2212 p)\u03c1 + pX\u03c1X,\nwhere X|0 = |1 and X|1 = |0 .\n\n\nPotential issues of quantum information\n\nRecall that the simplest classical EC code is the three-qubit repetition code, where the correction is done by majority vote (see Example 1.1). In quantum mechanics, we would like to have an analogous code, but there exist some potential issues that we have to overcome. We have to face with\n\n\u2022 The no-cloning principle It is well-known that in quantum mechanics there cannot exist a general operation that realises |\u03d5 \u2192 |\u03d5 |\u03d5 |\u03d5 .\n\n\u2022 The collapse of the state In order to correct the errors of a state, we need to measure each qubit. In quantum mechanics, however, measurements collapse the state of the system, and thus they may change it.\n\n\n\u2022 Continuous errors\n\nWe have previously seen that in classical information there exist only flip-bit errors. Nevertheless, in quantum mechanics there are more types of errors. Some of these errors are continuous, i.e., they are described by a continuous parameter. For example, a state could suffer a small rotation such that\n|\u03d5 = \u03b1|0 + \u03b2|1 \u2192 |\u03d5 = \u03b1|0 + e i\u03c6 \u03b2|1 , where 0 \u2264 \u03c6 \u2264 2\u03c0.\n\nThe Shor code\n\nThe Shor code is a quantum error correction code that is able to protect against phase and bit errors. In this section, we first learn to correct bit errors and phase errors independently, and then we concatenate both codes to built the Shor code. Here, the Shor code is studied on nine qubits, but its generalisation to n qubits is straightforward. The Shor code can be interpreted as two classical repetition codes in two different levels. As we see below, the first level acts on individual qubits and corrects against bit errors, while the second l evel considers groups of three qubits in order to correct against phase errors.\n\nThe logical qubits of the Shor code are\n|0 = 1 \u221a 2 3 (|000 + |111 ) (|000 + |111 ) (|000 + |111 ) ,(6)|1 = 1 \u221a 2 3 (|000 \u2212 |111 ) (|000 \u2212 |111 ) (|000 \u2212 |111 ) .(7)\nIt is easy to see that the structure of the logical qubits is three chunks of three qubits. If we focus on a single chunk, we can interpret it as a logical \u00b1 of the classical repetition code, i.e.,\n|\u00b1 = 1 \u221a 2 (|000 \u00b1 |111 ) ,(8)\nwhere the states |000 and |111 play the role of the logical bits of a classical repetition code. This allows to write the logical operators of the Shor code as\n|0 = 1 \u221a 2 3 (|000 + |111 ) \u22973 = |+ (1) \u22973 |1 = 1 \u221a 2 3 (|000 \u2212 |111 ) \u22973 = |\u2212 (1) \u22973\nNote now that |0 can be interpreted at the same time as logical operators of another classical repetition code. In this second level of correction, we are able to against phase flips 9 . Therfore, the Shor code is the simplest example of a concatenated code where at the first level it protects against bit errors and at the second level it protects against phase errors.\n\nHow do we protect against bit errors and phase errors?\n\nAs we have seen in the classical repetition code, the decoding process uses the majority vote. Nevertheless, in quantum error codes we cannot decode using this strategy because the action of measuring the qubits to see which state predominates collapses the system in a post-measurement state. Instead of the majority vote, we quantun error correction decodes using parity measurements because they do not affect the logical information. Classicaly we have already seen the parity measures with the parity-check matrix (see Section 1.3) and the Tanner graph (see Section 1.4). A parity measurement measures if two consecutive qubits are in the state. If they are in the same state, we associate to the result of the measurement a \"+\" sign and say that we have \"even parity\". On contrary, if the state of the qubits is different, we associate to the result of the measurement a \"-\" sign and say that we have \"odd parity\".\n\nIn order to understand the decoding based on parity measurments, let us first consider a bit error and we assume that it happens in the first qubit. The parity measurements for bit errors are Z 1 Z 2 and Z 2 Z 3 . We can write Z 1 Z 2 in terms of projectors such that\nZ 1 Z 2 = (|00 00| + |11 11|) \u2212 (|01 01| + |10 10|) = P + \u2212 P \u2212 ,\nwhere P + \u2261 |00 00|+|11 11| and P \u2212 \u2261 |01 01|+|10 10| are the projectors on the even-parity space and odd-parity space, respectively. Consider that the initial state, |\u03c8 , gets corrupted by X 1 , and thus we have\n|\u03c8 X 1 \u2261 X 1 |\u03c8 = 1 \u221a 2 |100 + |011 .\nThe outcomes of measuring Z 1 Z 2 are\n9 Recall that X|0 = |1 X|1 = |0 and Z|+ = |\u2212 Z|\u2212 = |+ .\nThis means that, in order to perform the equivalence of the repetition code for phases, we have to do it in the basis made of {|\u00b1 }.\n\n\u2022 Even parity with probability \u03c8 X 1 |P + |\u03c8 X 1 = 0,\n\n\u2022 Odd parity with probability \u03c8 X 1 |P \u2212 |\u03c8 X 1 = 1.\n\nThe state of the system after the parity measurement is\nP \u2212 |\u03c8 X 1 \u03c8 X 1 |P \u2212 |\u03c8 X 1 = P \u2212 |\u03c8 X 1 = |\u03c8 X 1\nThus, we have measured Z 1 Z 2 on qubits one and two, we have obtained with certainty that they have odd parity and, in particular, the measurement has not changed the state. The next step is to measure the other parity measurement, Z 2 Z 3 . It is easy to check that in this case we obtain that qubits two and three are in strict even parity. The combination of both results allows to localise the error without changing the state. Now, we can simply apply X 1 to the corrupted state, |\u03c8 X 1 , and we recover the initial state, i.e.,\nX 1 |\u03c8 X 1 = X 1 X 1 |\u03c8 = |\u03c8 .\nDoing the same procedure for all bit errors, we obtain the following recipe, which links the results of the parity measurements with the operation that we have to do to restore the corrupted state. The recipe for bit errors is\nResult of Z 1 Z 2 Result of Z 2 Z 3 Restoring operation + + I - + X 1 + - X 3 - - X 2\nNote that this recipe is only valid if there is only one bit error.\n\nIn order to correct phase errors, we can use the same method as for bit errors, but we have to work on the basis made of {|\u00b1 }. Consider that the initial state is |\u03c6 = | + ++ and that it has been corrupted by Z 2 , i.e., we have |\u03c6 Z 2 = Z 2 |\u03c6 = | + \u2212+ . The parity measurements of phase errors are X 1 X 2 and X 2 X 3 . The operator X 1 X 2 can be written as\nX 1 X 2 = (| + + + + | + | \u2212 \u2212 \u2212 \u2212 |) \u2212 (| + \u2212 + \u2212 | + | \u2212 + \u2212 + |) = Q + \u2212 Q \u2212 , where Q + = | + + + + | + | \u2212 \u2212 \u2212 \u2212 | and Q \u2212 = | + \u2212 + \u2212 | + | \u2212 + \u2212 + |\nare the projectors on the even-parity space and odd-parity space of the X operator, respectively. The outcomes of measuring X 1 X 2 are\n\n\u2022 Even parity with probability \u03c6 Z 2 |Q + |\u03c6 Z 2 = 0.\n\n\u2022 Odd parity with probability \u03c6 Z 2 |Q \u2212 |\u03c6 Z 2 = 1.\n\nIf we now measure X 2 X 3 , we get that the qubits are in strictly odd parity. Thus, we have localised the phase error on the second bit and we can corrected applying a Z 2 on |\u03d5 Z 2 . As for bit errors, we can proceed analogously for all phase-flips and construct the following recipe\n\nResult of X 1 X 2 Result of X 2 X 3 Restoring operation\n+ + I - + Z 1 + - Z 3 - - Z 2\nWe have seen that with three qubits we are able to correct against bit or phase errors, but we cannot correct both at the same time because the restoring operations do not commute. The Shor code, however, solves this problem by using two levels of correction instead of one. For this purpose, it considers a total of nine qubits and, when correcting phase errors, it considers groups of three qubits instead of individual qubits. In other words, the Shor code uses the states |\u00b1 , i.e., logical qubits made of three qubits in such a way that we work at the second level of correction. The parity measurements become, then, (X 1 X 2 X 3 )(X 4 X 5 X 6 ) and (X 4 X 5 X 6 )(X 7 X 8 X 9 ). Note that X 1 X 2 X 3 , X 4 X 5 X 6 and X 7 X 8 X 9 play respectively the role of X\n\n1 , X\n\n2 and X\n\n3 at the first level. Note further that (X 1 X 2 X 3 )(X 4 X 5 X 6 ) and (X 4 X 5 X 6 )(X 7 X 8 X 9 ) have eigenvalues \u00b11, and thus they measure parity, but in the X basis of groups of three qubits. In order to see that, consider an initial state |\u03d5 = |0 . The state is corrupted with a bit-flip and a phase-flip on qubit one, i.e., we have |\u03d5 \u2261 Z 1 X 1 |\u03d5 = (\u2212|100 + |011 ) |+ |+ .\n\nAfter measuring Z 1 Z 2 and Z 2 Z 3 and using the recipe, we detect that the corrupted state has a bit-flip on the first qubit and we apply X 1 to correct it. We obtain\nX 1 |\u03d5 = X 1 Z 1 X 1 |\u03d5 = \u2212Z 1 |\u03d5 = (\u2212|000 + |111 )|+ |+ .\nNow, we measure the parity operators X 1 X 2 X 3 X 4 X 5 X 6 and X 4 X 5 X 6 X 7 X 8 X 9 and the results show that there is a phase-flip on the first logical qubit. We can correct it by simply applying Z 1 , Z 2 or Z 3 on the state. We apply, for example, Z 1 and obtain\nZ 1 (\u2212Z 1 |\u03d5 ) = \u2212|\u03d5 .\nAs global phases have no physical meaning, we have been able to correct both, a bit and a phase error. Note that this analysis also shows that errors given by Y can also be corrected due to Y = iZX. It is easy to see that the process is valid independently of which qubit the error acts on. In conclusion, any single-qubit phase or bit error can be corrected, i.e., there exists a correction operation that takes 1,9] and \u2200|\u03d5 \u2208 C.\nX i Z j |\u03d5 \u2192 e i\u03b1 |\u03d5 \u2200i, j \u2208 [\nSo far we have only considered pure errors, i.e., errors given by X, Y or Z.\n\nWe now want to show that the Shor code can also correct linear combinations of {X i , Y j , Z k } 9 i,j,k=1 . Consider an error operator, E, given by\nE = e x X 1 + e z Z 1 ,\nwhere for simplicity we do not consider a Y operator. The initial state is |\u03d5 = |0 , and thus the corrupted state is E|\u03d5 . If we measure 10 Z 1 Z 2 , we obtain \"even parity\" with probability\n\u03d5|E \u2020 P + E|\u03d5 = 0 |(e * x X 1 + e * z Z 1 )P + (e x X 1 + e z Z 1 )|0 = |e x | 2 0 |X 1 P + X 1 |0 + e * x e z 0 |X 1 P + Z 1 |0 + +e x e * z 0 |Z 1 P + X 1 |0 + |e z | 2 0 |Z 1 P + Z 1 |0 = |e z | 2 .\nThe probability of \"odd parity\" is \u03d5|E \u2020 P \u2212 E|\u03d5 = |e x | 2 . Assume without loss of generality that the measurement yields \"even parity\", then we know that the post-measurement state is\n1 |e z | P + E|\u03d5 = e z |e z | Z 1 |0 ,\nwhere ez |ez| is a phase. Thus, the parity measurement has removed the bit error and we are left with a clean phase flip on |0 . Doing this analysis for all the parity measurements, we see that that the post-measurement state is always a state of the set {|\u03d5 , X j |\u03d5 , Z j |\u03d5 , X j Z j |\u03d5 }. Note that we know how to correct all states of the set. Note further that the collapse of the state after a measurement is crucial to be able to correct errors. In conclusion, if the state has suffered an error which is a linear combination of errors that we know how to correct, we are able to correct it exactly.\n\nWe have just observed that the Shor code can correct against error given by any linear combination of {I, X, Y, Z}. Moreover, in the previous chapter, we have seen that any operator can be written in the basis {I, X, Y, Z} (Eq. (5)). This implies that Shor code is able to correct against any arbitrary single-qubit error.\n\nAs we have mentioned at the beginning of the chapter, the Shor code on n 2 qubits is a concatenation of two [n 2 , 1, n 2 ] classical repetition codes. The error correction threshold is the same as in the classical case, and thus it becomes interesting when n is big (see Section 1.6). In practise, however, the Shor code is not use when n is large because of the following reason. The parity measurement at first level of the Shor code on n 2 are 11\nZ 1 Z 2 , Z 2 Z 3 , . . . , Z n\u22121 Z n , Z n+1 Z n+2 , . . . , Z 2n\u22121 Z 2n , . . . Z n 2 \u2212n+1 Z n 2 \u2212n+2 , . . . , Z n 2 \u22121 Z n 2 , X 1 \u00b7 \u00b7 \u00b7 X n , . . . , X n \u00b7 \u00b7 \u00b7 X 2n .\nNote that the parity measurements for phase errors imply to measure n qubits at the same time. This is a problem because nowadays we are able to apply at most three-qubit operations. Beyond this, measurements are too noisy. Therefore, the Shor code is not practical.\n\n\nQuantum error correction conditions\n\nKnill and Laflamme gave conditions for a subspace to be a code space. In this section, we want to review them and analyse an important consequence.\n\nGiven a Hilbert space 12 , H, a quantum error correcting code is is a subspace, C n \u2208 H \u2297n 2 , that protects against a quantum channel, E(\u03c1) = k E k \u03c1E \u2020 k . In other words, if the error E happens on the system, there exists a recovery channel, R, such that\nR \u2022 E(\u03c1) = \u03c1 \u2200\u03c1 : C \u2192 C.\nTheorem 4.1 (Knill-Laflame theorem). A subspace C is a quantum error code against E(\u03c1) = k E k \u03c1E \u2020 k if and only if\nP C E \u2020 i E j P C = \u03b1 ij P C ,\nwhere P C is the projector on the code space and \u03b1 ij are the matrix elements of an hermitian matrix, i.e., \u03b1 = \u03b1 \u2020 .\n\nGiven a state |\u03d5 \u2208 C, the Knill-Laflame theorem says that an error might take a state out of C, but then we are able to bring it back.\n\nAn important consequence of the Knill-Laflamme theorem is that any linear combination of errors that can be corrected is also correctable. This can be easily proven as follows. Suppose that we can correct against errors given by X 1 and Z 1 . Then, according to the Knill-Laflamme theorem, it is satisfied that P C X 1 Z 1 P C = \u03b1 12 P C .\n\nIf we now consider a linear combination such as E = \u03b1X 1 + \u03b2Z 1 , it can be corrected because\nP C E \u2020 EP C = P C (|\u03b1| 2 X 1 X 1 + \u03b1 * \u03b2X 1 Z 1 + \u03b1\u03b2 * Z 1 X 1 + |\u03b2| 2 Z 1 Z 1 )P C = \u03b1 11 P C + \u03b1 12 P C + \u03b1 21 P C + \u03b1 22 P C \u221d P C .\n\nPhysical noise\n\nIn this section we want to consider cases where noise affects to more than one qubit at the same time under the assumption of independent and identically distributed (idd) noise. This assumption considers that noise acts individually on each bit, and thus there is no correlation between noise on individual systems. This is not always a good assumption, but it is extensively used because it is simple.\n\nGenerically, the noise on a single qubit can be modelled by E(\u03c1) = k E k \u03c1E \u2020 k . Then, considering iid noise, the noise on n qubits is\nE \u2297 \u00b7 \u00b7 \u00b7 \u2297 E n (\u03c1).\nConsider the Shor code on nine qubits and a single-qubit noise given by\nE(\u03c1) = (1 \u2212 p)\u03c1 + p 2 I = (1 \u2212 p)\u03c1 + p 4 (\u03c1 + X\u03c1X + Y \u03c1Y + Z\u03c1Z) ,\nwhich does not change the state with probability 1 \u2212 p and erases any information with probability p. If the error happens on each qubit, the global noise of the nine qubits is characterised by\nE \u22979 (\u03c1) = (1 \u2212 p) 9 \u03c1 + (1 \u2212 p) 8 p 3 9 i=1 \u03b1=1,x,y,z \u03c3 \u03b1 \u03c1\u03c3 \u03b1 + O (1 \u2212 p) 7 p 2 . (9)\nThe first term of Eq. (9) carries no error, and thus we do not need to correct it. The second term of Eq. (9) contains single-qubit errors, which we have seen in the previous chapter that the Shor code can correct. The rest of the terms Eq. (9) correspond to errors on more than one qubit and we do not know a general recovery map for them 13 . This means that the probability with which we can protect against errors on every single-qubit is given by the remaining terms (O ((1 \u2212 p) 7 p 2 )) in Eq. (9). If we consider the Shor code on n 2 , the term O ((1 \u2212 p) 7 p 2 ) is exponentially suppressed.\n\n\nContinuous time errors\n\nIn this section we consider continuous time errors and we see that they can be discretised. Continuous time errors can be modelled by quantum dynamical semigroups. This means that we characterise the noise as a function of a continuous variable, t, as E t (\u03c1) = e tL (\u03c1),\n\nwhere L is generically given by\nL(\u03c1) = i [H, \u03c1] + k L k \u03c1L \u2020 k \u2212 1 2 L \u2020 k L k \u03c1 + L \u2020 k L k \u03c1 ,\nwith H a Hamiltonian and L k jump operators.\n\nConsider the situation of a bit error on the first qubit, X 1 , at rate \u03b3. In this case, the Hamiltonian is zero and there is only one jump operator such that\nL X 1 (\u03c1) = X 1 \u03c1X 1 \u2212 \u03c1. 13\nThe Shor code is able to correct against two-qubit errors such as X 1 Z 2 , but it fails for errors of the form of X 1 X 2 .\n\nWe can expand the error operator as\nE t (\u03c1) = e tL X 1 (\u03c1) = \u03c1 + tL X 1 (\u03c1) + t 2 2! L 2 X 1 (\u03c1) + t 3 3! L 3 X 1 (\u03c1) + \u00b7 \u00b7 \u00b7 = \u03c1 + t(X 1 \u03c1X 1 \u2212 \u03c1) + t 2 2! L X 1 (X 1 \u03c1X 1 \u2212 \u03c1) + t 3 3! L 2 X 1 (X 1 \u03c1X 1 \u2212 \u03c1) + \u00b7 \u00b7 \u00b7 = \u03c1 + t(X 1 \u03c1X 1 \u2212 \u03c1) + t 2 2! 2(X 1 \u03c1X 1 \u2212 \u03c1) + t 3 3! 3(X 1 \u03c1X 1 \u2212 \u03c1) + \u00b7 \u00b7 \u00b7 = \u03c1 1 \u2212 t + 2 t 2 2! \u2212 3 t 3 3 + \u00b7 \u00b7 \u00b7 + X 1 \u03c1X 1 t \u2212 2t 2 2! + 3t 3 3! + \u00b7 \u00b7 \u00b7 = \u03c1 1 \u2212 te \u2212t + X 1 \u03c1X 1 te \u2212t .\nMost errors on the physical world are continuous time errors, but they can be discretised as follows. In a laboratory, the measurements are performed at a certain speed. We can break the continuous time up into a bunch of discrete steps (see Fig. 6), where each individual step is the time required to apply all parity measurements. Then, in practise we can consider each step as a discrete error processes, where the error occurs with probability p = \u2206te \u2212\u2206t . \n\n\nStabilizer codes\n\nIn the section devoted to the Shor code, we have seen that for a system of three qubits we can detect bit errors using the parity measurements Z 1 Z 2 and Z 2 Z 3 . These two operators, Z 1 Z 2 and Z 2 Z 3 , have the states |000 and |111 as common eigenstates with eigenvalue +1 and they also satisfy {X 1 , Z 1 Z 2 } = 0 and [X 1 , Z 2 Z 3 ] = 0. Actually, when we measure the parity measurements on a code state, we are using these property since\nZ 1 Z 2 X 1 |000 = \u2212X 1 Z 1 Z 2 |000 = \u2212X 1 |000 .\nIn this section we want to make use of this properties to construct a more general code on n qubits, the stabilizer code.\n\nIn order to develop the stabilizer formalism, we first need to define the Pauli group.\n\nDefinition 7.1. The Pauli group, P 1 , is the group consisting of the 2 \u00d7 2 identity matrix, I, and the Pauli matrices together with the product of these matrices with the factor \u22121, which are\nP 1 \u2261 {\u00b1I, \u00b1X, \u00b1Y, \u00b1Z},\nwhere X, Y and Z are defined in Eq. (4).\n\nNote that the Pauli group has order eight, |P 1 | = 8, which means that the group has eight elements. These elements are related by the commutation properties of the Pauli matrices, i.e.,\n[X, Y ] = 2Z, [X, Z] = \u22122Y, [Y, Z] = 2X.\nIf we consider the n-fold tensor product of the Pauli group, the resulting set of matrices is also a group. It is denoted by P n and written as\nP n \u2261 {\u00b1I, \u00b1X, \u00b1Y, \u00b1Z} \u2297n \u2261 {\u00b1G \u03b1 },\nwhere for a compact notation we define G \u03b1 = \u03c3 \u03b1 1 \u2297 \u00b7 \u00b7 \u00b7 \u2297 \u03c3 \u03b1n with \u03c3 \u03b1 1 = I, \u03c3 \u03b1 2 = X, \u03c3 \u03b1 3 = Y and \u03c3 \u03b1 4 = Z. Some interesting properties of the group P n are:\n\n\u2022 It is a group of order |P n | = 2 \u00b7 4 n = 2 2n+1 .\n\n\u2022 Any element, G \u03b1 \u2208 P n , satisfies G 2 \u03b1 = I and G \u2020 \u03b1 G \u03b1 = I. \u2022 Given two different elements of the group, G \u03b1 , G \u03b2 \u2208 P n , they either commute, [G \u03b1 , G \u03b2 ] = 0, or anticommute, {G \u03b1 , G \u03b2 }. Note that, in the case that the elements commute, they also share an eigenbasis.\n\nOnce we have seen the Pauli group and its generalisation to n qubits, we can define the stabilizer code.\n\nDefinition 7.2. Let S be an abelian 14 subgroup of P n . Then, a stabilizer code, C, is defined as C \u2261 {|\u03c8 | S|\u03c8 = |\u03c8 \u2200S \u2208 S}.\n\nWe say that S is the stabilizer (group) of the code and that S \u2208 S are stabilizer operators of the code. The stabilizer group fully characterises the code.\n\nStabilizer operators are not linearly independent in general. Note that the concept of linear independence is defined in a vector space, not in a group.\n\nHere, when we talk about linear independence, we formally mean that we map the elements of P n to the vector space (Z 2 ) 2n using \u03d5 :\nP n Z 2 ; \u00b7 \u2212\u2192 (Z 2 ) 2n\nand, then, we consider the concept of linear independence in (Z 2 ) 2n . This translates in a simple way to the elements of the group P n , which is that two elements of P n are linear independent if their product is not in P n . Note that then any product of the elements are also in the group. For convenience, we want to use the minimal number of elements that generate the stabilizer group, which we call generators of the stabilizer group. In other words, the generators of the stabilizer group are the operators {S j } s j=1 , where S j \u2208 S, such that they are commuting and linearly independent. Then, there are k = n \u2212 s logical qubits in the stabilizer code, i.e., C is 2 k -dimensional.\n\nExample 7.1. Consider the Shor code on nine qubits. Its stabilizer group is generated by the eight operators, S =< {S k } 8 k=1 >, which can be written as\nS 1 = Z 1 Z 2 , S 2 = Z 2 Z 3 , S 3 = Z 4 Z 5 , S 4 = Z 5 Z 6 , S 5 = Z 7 Z 8 , S 6 = Z 8 Z 9 ,(10)\nS 7 = X 1 X 2 X 3 X 4 X 5 X 6 , S 8 = X 4 X 5 X 6 X 7 X 8 X 9 .\n\nWe can easily find other stabilizer operators by multiplying any two generators of the stabilizer group. For example,\nS 1 S 2 |\u03d5 = Z 1 Z 3 |\u03d5 = Z 1 Z 3 (\u03b1|0 + \u03b2|1 ) = Z 1 Z 3 (\u03b1| + ++ + \u03b2| \u2212 \u2212\u2212 ) = Z 1 (\u03b1| \u2212 ++ + \u03b2| + \u2212\u2212 ) = (\u03b1| + ++ + \u03b2| \u2212 \u2212\u2212 ) = |\u03d5 ,\nwhere |0 , |1 and |\u00b1 are defined in Eq. (6), Eq. (7) and Eq. (8). Thus, we have S 1 S 2 |\u03d5 = |\u03d5 , which implies that S 1 S 2 \u2208 S.\n\nConsider a state in the code space, |\u03d5 \u2208 C, and an operator T that commutes with all stabilizer operators, i.e., [T, S k ] = 0 \u2200 S k \u2208 S. Then, the state T |\u03d5 is also in the code space because\nT |\u03d5 = T S k |\u03d5 = S k T |\u03d5 \u21d2 S k T |\u03d5 = T |\u03d5 \u21d2 T |\u03d5 \u2208 C.\nMoreover, the operator T is called logical operator because it maps a state in the code space, |\u03d5 \u2208 C, to another state in the code space, |\u03d5 \u2208 C 15 . Note that this is not true in the case that T anticommutes with the stabilizer operators.\n\nExample 7.2. Consider the Shor code on nine qubits. Its logical operators areX\n= X 1 \u00b7 X 9 = 9 j=1 X j andZ = Z 1 \u00b7 Z 9 = 9 j=1 Z j ,(11)\nwhere [X,Z] = 2\u0232 . We are interested in the effect of these operators on the logical qubits, which is\nX|0 = |1 Z |0 = |0 X |1 = |0 Z |1 = \u2212|1\nwhere |0 and |1 are defined in Eq. (6) and Eq. (7). Thus, the operatorsX andZ are the logical Pauli operators X and Z.\n\nGiven |\u03d5 \u2208 C, any operatorXS k is also a logical operator since it maps |\u03d5 \u2208 C to |\u03d5 \u2261X|\u03d5 \u2208 C, which we can easily see as follows\nXS k |\u03d5 =X|\u03d5 = |\u03d5 \u2208 C.\nThis means that logical operators are not uniquely defined.\n\nExample 7.3. Consider the Shor code on nine qubits. More logical operators apart fromX andZ (Eq. (11)) would b\u0113\nXS 8 = X 1 X 2 X 3 , XS 2 = X 1 Y 2 Y 3 X 4 X 5 X 6 X 7 X 8 X 9 , XS 8 2S 8 = X 1 Y 2 Y 3 .\nIt can be shown that the minimal length of all logical operators is the distance of the code. This make sense because, as we have seen, a logical operator maps a logical bit to another logical bit, and thus the minimal length of the logical operator means the minimal number of qubit operations that are necessary to map two different logical states. This is indeed the definition of the distance of the code (see Section 1.5).\n\nConsider a general error, E = e x X + e y Y + e z Z. As we have seen, we can correct error X, Y , Z individually. If the error is in the group P n , E \u03b1 \u2208 P n , each error commutes or anticommutes with the stabilizer operators. Then, if the error commutes, we have\nSE \u03b1 |\u03c8 = E \u03b1 S|\u03c8 = E \u03b1 |\u03c8 ,\nand, if the error anticommutes, we have\nSE \u03b1 |\u03c8 = \u2212E \u03b1 S|\u03c8 = \u2212E \u03b1 |\u03c8 .\nIn other words, given \u03c8 \u2208 C, the state E \u03b1 |\u03c8 is an eigenvector of the stabilizer operators with eigevalue +1 if [E \u03b1 , S] = 0 and \u22121 if {E \u03b1 , S} = 0. This means that the stabilizer can act as parity measurements to detect the errors. Note that the stabilizer formalism is a generalisation of the parity check matrices (see Section 1.3).\n\nLet us remark that in the definition of the stabilizer code we have chosen the subspace with +1 eigenvalue. Nevertheless, we could take another fixed reference value (as it is done in the laboratory). For example, in the Shor code we could have taken S 2 = \u2212Z 2 Z 3 , and then the logical state would have been 1 \u221a 2 (|001 \u00b1 |110 ) |+ |+ .\n\nAnother way to represent the stabilizer codes consists in splitting the stabilizers operators into two independent parity check matrices such that\n\uf8eb \uf8ed H z 0 0 H x \uf8f6 \uf8f8 (12)\nExample 7.4. Consider the Schor code on nine qubits. The parity check \nmatrices are \uf8eb \uf8ed H z 0 0 H x \uf8f6 \uf8f8 = \uf8eb \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ec \uf8ed\uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f7 \uf8f8\nGeneral CSS code, which is a method to go from two classical error correction codes to one quantum code, is another code that can be characterised with parity check matrices of the form of Eq. (12).\n\nThe minimal number of physical qubits that a code must have in order to be able to correct against single-qubit errors is five physical qubits. For this optimal code, the stabilizers and the logical operators are S 1 = X 1 Z 2 Z 3 X 4 I 5 S 2 = I 1 X 2 Z 3 Z 4 X 5X = X 1 \u00b7 \u00b7 \u00b7 X 5 S 3 = X 1 I 2 X 3 Z 4 Z 5Z = Z 1 \u00b7 \u00b7 \u00b7 Z 5 S 4 = Z 1 X 2 I 3 Z 4 X 5\n\n\nToric code\n\nIn this section we use the stabilizer formalism from the last section to explain the toric code, C toric . The toric code was introduced by Alexei Kitaev in 1998 and its relevance relies on the fact that it will probably be the code used on the first generation of quantum computers.\n\nThe name of the toric code comes from the fact that it is defined on a lattice with periodic boundary conditions, which form a torus. (see Fig. 7). As we have already mentioned, the toric code is a stabilizer code and its stabilizers are Figure 7: The topology considered for the toric code is a lattice with periodic boundary conditions, i.e., a torus.\nA X \u2261 X u \u2297 X d \u2297 X l \u2297 X r ,B Z \u2261 Z u \u2297 Z d \u2297 Z l \u2297 Z r ,\nwhere u, d, l, r stand for \"up, down, left and right\", respectively. The operators A X and B Z are defined on every single cross and plaquette of the lattice (see Fig. 8). We often call the operators A X and B Z themselves as cross and plaquette, respectively. Note that the stabilizers of the toric code are local, in contrast to the stabilizers of the Shor code (Eq. (10)). This property makes the toric code much more practical.For an L \u00d7 L lattice, the toric code has n = 2L 2 physical qubits. There are L 2 plaquettes and L 2 crosses. We can easily verify that the stabilizers of the toric code commute. The case [A X , A X ] = 0 and [B Z , B Z ] = 0 are trivial because Z 2 = X 2 = I. The case [A X , B Z ] = 0 is also trivial if A Z and B Z do not overlap. In the case that they overlap, the operators A Z and B Z coincide in two qubits, and thus the phase produced by XZ = \u2212ZX cancels out (see Fig. 8).\n\nThe multiplication of two plaquettes can be easily understood via illustra-tions (see Fig. 9). Consider two plaquettes, B Z 1 and B Z 2 that overlap on the right qubit of the first plaquette, which is the left qubit of the second plaquette. On this qubit two operators Z are applied, one from the first plaquette and one from the second. However, recall that Z 2 = I, and thus the identity is actually applied on this qubit. This leads to a plaquette made of six Z operators (see Fig. 9), which is also a stibilizer. Note that the multiplication of plaquettes will always give open strings. Here we will mainly talk about the plaquettes operators, but the discussion with crosses can be done analogously. Figure 9: The multiplication of two plaquettes, B Z and B Z , gives a bigger plaquette, which is also a stibilizer of the toric code.\n\nIn the section about stabilizer formalism, we have seen that the stabilizer generators must be linearly independent. We can easily check that crosses and plaquettes, A X and B Z , are not linearly independent since all crosses A X = I and all plaquettes B Z = I.\n\nIn order to have a set of independent stabilizers of the toric code, we simply need to remove one plaquette and one cross. Thus, the toric code has s = 2L 2 \u2212 2 independent stabilizers. As we have also explained in the previous section, the number of encoded qubits (logical qubits) in a stabilizer code is k = n \u2212 s. For the toric code, k = 2 logical qubits.\n\nIn order to complete the characterisation of the code space C toric , we need to identify the logical operators. Recall that these operators must commute with the stabilizers without being stabilizers themselves. The logical operators can be either product of Z or product of X. We have seen that multiplying plaquettes gives loops of different sizes, which are also stabilizers, but they never are open strings. Consider a product of Z along a whole horizontal string of the lattice, i.e.,Z 1 \u2261 Z 1 \u2297\u00b7 \u00b7 \u00b7\u2297Z L . It commutes with B Z and A X due to the same reasons that have implied [A X , Fig. 10). Note that this is also true for a product of Z along a whole vertical string,Z 2 , and for a product of X along a whole horizontal and vertical string,X 1 andX 2 (see Fig. 10). Note further that {Z i ,X i } = 0 and [Z i ,X j ] = 0 for i = j and i, j = 1, 2. Defining {|0 1 , |1 1 } as the eigenvectors ofZ 1 , we can easily check that, as expected, the logical operators satisf\u0233\nA X ] = [B Z , B Z ] = [A X , B Z ] = 0 (seeX 1 |0 1 = |1 1 ,Z 1 |0 1 = |0 1 , X 1 |1 1 = |0 1 ,Z 1 |1 1 = \u2212|1 1 .\nWe find analogous equalities forX 2 andZ 2 . Figure 10: Logical operators of the toric code. When the logical operators Z 1 andZ 2 (X 1 andX 2 ) overlap with a cross (plaquette), they do it on two qubits.\n\nRecall from the section 7 that logical operators do not have a unique representation. Indeed, we can obtain a new logical operator multiplying any operatorX 1 ,X 2 ,Z 1 ,Z 2 by any stablizer operator, i.e., by any plaquette or cross. In the toric code, this property translate to the fact thatZ 1 , which is a straight line, can be stretched several times and still represent the same logical operator (see Fig. 11). Note that the same is true forX 1 ,X 2 ,Z 1 ,Z 2 . Therefore, the logical subspace is the subspace spanned by all strings with \"the same topology\".\n\nThe distance of a stabilizer code is the weight of the minimal representation of logical operators, as we have seen in the previous section. For the toric code we have d Toric = L.\n\nIn summary, we can characterise the toric code as a [2L 2 , 2, L] code. Let us remark that the toric code has a topologic flavour because its encoded information is defined by objects that exists only on the topology of the space, Figure 11: Multiplying a plaquette, B Z , by a logical operator, e.g.Z 1 , gives new logical operator. Therefore any string around the torus is a logical operator.\n\ni.e., of the torus.\n\n\nConnection to many-body theory (quantum statistical mechanics)\n\nIn this section we see the connection between the toric code and the manybody theory. In order to do that, let us define a Hamiltonian, H, such that\nH = \u2212 crosses A X \u2212 plaquettes B Z .\nNote that this Hamiltonian, H, is made of a sum of local terms on a lattice, which are typical characteristics of Hamiltonians used in many-body theory.\n\nSince A X and B Z can only have \u00b11 eigenvalues, the ground states of the Hamiltonian, H, are the stabilizer states because they all have +1 eigenvalue. In other words, the ground state subspace is C Toric and the ground state energy is \u22122L 2 .\n\nThis connection is not a property only of the toric code, but of all topological stabilizer codes. Topological stabilizer codes can always be defined as the ground space of a local commuting Hamiltonian. The toric code is the simplest example. This connects coding theory to many-body physics. In particular, one of the most remarkable links is that error correction in the code picture corresponds to topological order in the many-body picture.\n\n\nErrors on the toric code\n\nErrors on the toric code are detected and corrected using the stabilizer formalism. In this section we consider independent and identically distributed (iid) noise produced by local Pauli matrices X and Z and explain how can be corrected. As we have seen in section 7, we can identify the X-errors with the Z stabilizers and the Z-errors with the X stabilizers and treat them independently. For simplicity, here we do the error analysis only for Z errors. Recall that the outcomes -1 of the stabilizer measurements are called syndromes.\n\nConsider an X-error on a qubit. In order to detect it, we measure all plaquette stabilizers, and thus we obtain two syndromes on the plaquettes acting on the corrupted qubit. If we now consider two or more X-errors on the lattice forming a string, we see that we also get two syndromes and they are at the ends of the string error (see Fig. 12). The relation between the error string and the syndrome is not unique, i.e., there exist differnt string errors with the same syndrome (see Fig. 13). Actually, whenever we have two syndromes, they can correspond to any string connecting them and, when we perform the stabilizer measurements, we have absolutely no way of knowing the correct string. As we have seen before, the code space is the ground space of all trivial loops, i.e., all loops that do not wrap around the torus. Therefore, even if we do not know the \"real string\", we simply need to assume that it is one of the shortest and correct it by closing the loop. The only problem comes if we choose the correction that extends the loop to a string around the torus since it creates a logical error (see Fig. 14). In other words, if apply a recovery map, R, which closes the string error creating a trivial loop, we recover the initial state as\nRE|\u03c8 = |\u03c8 .\nHowever, if the recovery map applied, R wrong , creates an string around the torus, we will have\nR wrong E|\u03c8 = O logical |\u03c8 = |\u03c8 ,\nwhere O logical is any logical operator, i.e., O logical \u2208 {X 1 ,Z 1 ,X 2 ,Z 2 }. Figure 13: The correspondence between syndromes and string error is not unique, i.e., two different string error can give the same syndromes.\n\nThe toric code allows to correct d\u22121 2 errors. We can see this as follows. When we have more than d\u22121 2 errors along a line, which are the worst type of errors, the natural choice for correction, i.e., the shortest path to close the loop, gives a straight string. Thus, we get a logical error (see Fig. 15). In a sense this is completely inefficient because on average we have p \u00b7 n errors for iid flip (phase) noise with qubit error rate p<1/2. Asymptotically, n \u223c L Figure 14: The correction operation corresponds on closing the string error to create a loop. Even if there exist several ways of closing the loop, we apply the shortest for convenience. and d \u223c L, thus even if we have asymptotically small p, but constant, we are always going to have more than d\u22121 2 errors. Then, the decoding task is to pair all syndromes such that we do not create a logical operator.\n\nConsider the setting with iid noise with a fixed value of p<1/2. The probability to have n = 0, 1, 2, . . . errors is summarized in the following table\nn 0 1 \u00b7 \u00b7 \u00b7 probability\n(1 \u2212 p) n np(1 \u2212 p) n\u22122 p 2 \u00b7 \u00b7 \u00b7 n d/2 d/2 \u2212 1 \u00b7 \u00b7 \u00b7 probability (\u00b7 \u00b7 \u00b7 )(1 \u2212 p) n\u2212d/2 p d/2 (\u00b7 \u00b7 \u00b7 )(1 \u2212 p) n\u2212d/2\u22121 p d/2+1 \u00b7 \u00b7 \u00b7 n n/2 probability \u223c cnt n where (\u00b7 \u00b7 \u00b7 ) represent factors that are not relevant in this discussion. Let us suppose that we have calculated all these probabilities and that we have a computer that can calculate the minimal distance between two syndromes. Then, it can be shown that there exists a function that gives the most probable source of error for any given syndrome. Although this is the optimal decoding process, it inefficient because we have to keep track of a factorial number of iterations and calculate all the probabilities. Here efficient means Figure 15: 7 \u00d7 7 lattice. When the string error has more than d\u22121 2 , where d = L for the toric code, the shortest way to close the loop creates a logical error.\n\nthat the function that assigns a correction operator to each syndrome is a efficient (i.e., linear or quadratic) function as a function of n; while optimal means that the function never assigns a wrong correction operator. In practise, we use non optimal, but efficient decoders.\n\n\nMinimum weight perfect matching\n\nThe minimum weight perfect matching (MWPM), which is also called Edmonds algorithm, consists in pairing all syndromes. As we have seen, the most likely source of errors gives syndromes which are close. Therefore, the natural choice to bring syndromes together is minimising the total distance. This decoding procedure runs in time n 3 .\n\n\nRenormalisation\n\nConsider a system with a certain number of syndromes and label them. The renormalisation decoder is an iterative processes consists in the following. For each error, we pair up all syndromes in a ball of radius r = r 0 with center in the error. If there was an even number of syndromes in the ball of radius r 0 , there are none left; and, if there was an odd number, there is one syndrome left. Now we have a system with less syndromes and, in particular, we now that all syndromes are in a distance bigger than r 0 . We repeat the pairing using r 1 >r 0 . After repeating the pairing enough times, we will end up either with no syndromes or two syndromes very far apart, which cannot be corrected. It can be shown, however, that the probability that the latter situation happens is exponentially suppressed.\n\n\nThresholds\n\nAs the distance of the toric code is d = L, one would expect that increasing the size of the lattice leads to a more robust code. Nevertheless, the number of errors also increase with L for a idd noise model. This implies that we have to find a trade off between these two phenomena, which is called the threshold.\n\nIn section 1.6, we have seen that a code C with decoder R have threshold, p th <1/2, if for p<p th the probability to have a logical error is exponentially small, i.e., P logical (n, p)<ce \u2212d\u03be .\n\nIf you have a small physical error, p, the probability that the decoder creates a logical error is exponentially small. However, if the physical error, p, is above the threshold, then the decoder will often apply a \"wrong correction\", i.e., it will create a logical error. Only in the first case with small values of physical error rates, increasing the size of the lattice will imply an exponential decay of the logical error rate.\n\nEach decoder has a different error rate depending on the algorithm that it uses. In the case of the toric code, the theoretical optimal threshold is p optimal th = 0, 113. For the decoders we have seen before, the thresholds are p MWPM th = 0, 11 and p renormalisation th = 0, 88.\n\nFor real error correction, we are interested not just in the error correction threshold, but also in fault tolerant threshold, which is when measurement error are also taken into account. The theoretical fault tolerant threshold is p th, FT \u2248 0, 02. In practise, one has to perform measurements on two qubits, which requires that all gates are accurate to rates of 0,005 roughly. Once the fault tolerance threshold is achieved, the rest is making larger and larger codes, which is mainly an engineer problem.\n\n\nLower bound on the threshold\n\nIn this chapter, we show how to estimate the threshold of maximal threshold of the Toric code by analyzing the decoding problem as a classical statistical mechanics model: the random bond Ising model. This mapping was first identified by Dennis et al [?]. Before going into the exact mapping, we will examine why the decoding problem might be related to (classical) statistical mechanics.\n\n\nEntropy and Energy\n\nConsider a CSS code on n qubits. Since the X and Z sectors decouple, we can restrict our attention to the Z sector where errors are bit flips (X). We assume that each qubit is flipped with probability p. Then the logical failure rate is given byP\n(p, n) = E\u2208F \u03c0(E),(13)\nwhere\n\u03c0(E) = (1 \u2212 p) n p 1 \u2212 p \u03c9 .\nis the probability that error configuration E occurs, \u03c9 the weight of error E, i.e., |E| = \u03c9, and F is the set of error configurations leading to a failure for the optimal decoder. Clearly, the difficulty in estimating Eqn. (13) is that the set F is difficult to characterise exactly.\n\nTo make the connection to statistical mechanics more obvious, define an effectiv temperature \u03b2 \u2261 log 1 \u2212 p p >0 for 1>p>0, and rewriteP (p, n) as\nP (p, n) = (1 \u2212 p) n n \u03c9=d/2 N fail (\u03c9)e \u2212\u03b2\u03c9 ,\nwhere the sum on failing configurations has been reorganised into errors of a given weight w. Note that the minimal failing error configuration has weight d/2, determining the lower index in the sum. N fail (\u03c9) accounts for the multiplicity of error configurations with a fixed weight w. Hence we have shifted. The expression can now be reinterpreted as a statistical mechanics model withP\n(p, n) = (1 \u2212 p) n n \u03c9=d/2 e \u2212\u03b2F (\u03c9) , where F (\u03c9) = \u03c9 \u2212 S fail (\u03c9)\n\u03b2 is a free energy with S fail (\u03c9) = log(N fail (\u03c9)) the entropic contribution. The weight w of the error string can be understood as an energy.\n\n\nLower bound on the threshold\n\nWe now turn our attention back to the Toric code. We will provide an upper bound on the logical failure probability (and hence a lower bound on the threshold), by upper bounding the number of error configurations in F. Given two complementary errors, E and E , a loop can be represented by L = EE (multiplication of Pauli operators). Instead of the optimal decoder, we consider a decoder that for any specific error E chooses a correction E . Then to each error E we can associate a loop L (note however that this converse is not true; each loop L is associated with many errors E). We get the following upper bound:\nP (p, n) \u2264 (1 \u2212 p) n L |L| u= |L| 2 n\u2212|L| v=0 |L| u n \u2212 |L| v p 1 \u2212 p u+v .(14)\nThe upper bound can be understood as follows. The first sum runs over all possible non-contractible loops L wrapping around the torus. The second sum, together with the first binomial factor, account for all the ways the errors can be distributed alone L leading to a failure. Any error E along L with |E| \u2265 |L|/2 will lead to a failing correction. The final sum accounts for all of the errors that are not on L, and do not lead to a non-trivial correction. The binomial factor accounts for all of the ways of distribution up to n \u2212 |L| flip errors on the rest of the lattice. Again we will group the first sum into loops of a fixed length l \u2265 d to get\nP (p, n) \u2264 (1 \u2212 p) n n l=d N con (l) l u=l/2 n\u2212l v=0 l u n \u2212 l v p 1 \u2212 p k+v ,(15)\nwhere N con (l) counts the number of non-intersecting loops of length l. Recall\nthat b a = a! (a \u2212 b)!b! ,\nand note the following identities\nn\u2212l v=0 C n\u2212l v p 1 \u2212 p v = (1 \u2212 p) l\u2212n , l n=l/2 C l n p 1 \u2212 p n \u2264 2 l p 1 \u2212 p l/2 .\nThus, the expression can be upper bounded as\nP (p, n) \u2264 n l=d N con (l)2 l p l/2 (1 \u2212 p) l/2 .(16)\nThis expression over-counts, primarily by associating certain failing error configurations to many different failing paths. Asymptotically, the number of non self-intersection paths is given by N con (l) \u2264 N 0 c l , where c \u2248 2.64 is an expansion coefficient, allowing us to obtain the bound\nP \u2264 n l=d N 0 2c p(1 \u2212 p) l .\nThe series will be convergent, wheneer 2c p(1 \u2212 p) \u2264 1. Hence we can associate identify a lower bound on the threshold to any value of p satisfying this bound. The maximal such value gives us our best lower bound on the threshold: p th \u2248 .037.\n\n\nEstimating the optimal threshold\n\nIn order to compute the actual threshold, we need to resort to a different statistical mechanics mapping. The probability of an error configuration E can be written as\nP (E) = l (1 \u2212 p) l p 1 \u2212 p n E (l)\n, where the products are over all of the edges of the lattice, and the function n E (l) = 0 if there is no error on l 1 if there is an error on l .\n\nFor a fixed E, we now seek to describe the probability distribution of errors E that have the same boundary as E. We assume that the (optimal) decoder chooses the operation that maximises the likelihood of correcting to the original homology class. If each path had the same entropic weight, the maximum likelyhood would be given by the minimum weight configuration, which is what the MWPM decoder is based on.\n\nAny correction E can be written as\nE = E + C,\nwhere C is a loop (see Figure 16). We assume that the distribution of loops C is given by the natural distribution of loops on the lattice post-selected on the loops containing the boundary points of E. The edges l of C are given with probability\np 1 \u2212 p n C (l)\n, when n C (l) = 1 n E (l) = 0 when l is occupied by E . and with probability p 1 \u2212 p n C (l)\n\n, when n c (l) = 1 n E (l) = 1 when l is not occupied by E .\n\nThus, the chain E = E + C occurs with probability\nP (E |E) \u221d l e J l u l , where u l = 1 \u2212 2n C (l) \u2208 {\u22121, 1} and J l = \uf8f1 \uf8f2 \uf8f3 p 1\u2212p if l / \u2208 E 1\u2212p p if l \u2208 E\nLet us remark that the one-chain {l|u l = \u22121} is a cycle with a cycle condition that reads l s\nu l = 1,\nwhere s is a point in the dual lattice (see Fig. 17). There exists also a cycle condition for the dual lattice, which is l * \u2208P * u l * = 1.\n\n( Figure 16: A loop C can be represented by two complentary errors, E and E such that C = EE .\n\nIt is easy to see that we can write this constraint as u ij = \u03c3 i \u03c3 j . Thus, the fluctuation of the error chains E that share a bound with E is described by\nZ(J, \u03b7) = {\u03c3 j } exp J <ij> \u03b7 ij \u03c3 i \u03c3 j , with e \u22122J = p 1 \u2212 p and \u03b7 l = 1 if l / \u2208 E * \u22121 if l \u2208 E * .\nAnother important observation is that, if E and E are generated by sampling the same probability distribution, then the values of \u03b7 l are chosen randomly subject to \u03b7 l = 1 with probability (1 \u2212 p) \u22121 with probability p .\n\n\nThe interpretation of this choice is\n\n10 Topological order and QEC\n\nIn section 8, we saw that the toric code had some topological features. For instance, the logical operators of the Toric code can be represented as flexible strings wrapping around one direction of the torus (see Fig. 10). This is a Figure 17: A dual lattice (dashed lines) can be defined for the toric code.\n\nvery specific property of the toric code. In this section, we want to go to a more general system and explain how we can characterise topological order in a lattice system.\n\nWe will consider an extension of Stabilizer codes called commuting projector codes, defined as follows.\n\nDefinition 10.1. Given projectors {P j } such that [P j , P k ] = 0 for all j, k, a commuting projector code (CPC) is defined as\nC = {|\u03c8 such that P j |\u03c8 = |\u03c8 }.\nNote that this definition looks like the stabilizer code (see Definition 7.2), but here P j are not required to be products of Pauli matrices. There exist plenty of commuting projector codes that are not stabilizer codes, but it is not easy to write them down. If all projectors P j are local, i.e., their support is a ball of finite radius, the CPC is called local CPC. In this section we deal with local CPCs.\n\nA commuting projector code, C, is the ground subspace of the Hamiltonian\nH = j Q j , where Q j = 1 2 (I \u2212 P j ) .\nNote that Q j are also projectors, and thus they satisfy Q 2 j = Q j . We can easily see that C is the subspace of H because the projectors Q j annihilate the states in C, i.e., Q j |\u03c8 = 0 \u2200j and \u2200|\u03c8 \u2208 C. Moreover, the Hamiltonian, H, is also frustration free 16 . The projector on the code space, i.e., on the subspace of H, can be written as\nP C = j P j .(17)\n\nDefinition of topological order\n\nTopology is a concept that comes up in different contexts and its definitions is different depending on the subfield of physics. In quantum information, there exists three definitions of topological order defined on large lattices. We explain them in the subsequent sections.\n\n\nTopological order I: Local indistinguishability\n\nConsider two states of the codespace, |\u03c8 1 , |\u03c8 2 \u2208 C, such that \u03c8 1 |\u03c8 2 = 0. The topological order known as local indistinguishability says that, for any local operator O defined on the lattice, it is satisfied that \u03c8 1 |O|\u03c8 1 = \u03c8 2 |O|\u03c8 2 . In other words, the states in the code space have global properties, and thus they cannot be distinguished using local operators. We have already seen local indistinguishability in the toric code with the fact that their logical operators must be completely non-local.\n\nLet us mention that that local indistinguishability can be also stated as\nP C OP C = c(O)P C with c(O) = tr(P O) trP ,(18)\nwhere O is a local operator, P C is the projector on the code space C and c(O) is a constant that depends on the local operator O 17 . Note that Eq. (18) reminds to the error correcting condition (Eq. (3)).\n\n\nTopological order II: topological entanglement entropy\n\nIn order to define topological order as topological entanglement entropy, we first need some definitions. \nS \u03d5 (A) = \u2212tr (\u03c1 A log \u03c1 A ) ,\nwhere \u03c1 A = tr B (|\u03d5 \u03d5|).\n\nDefinition 10.4. Given A, B and C disconnected regions of a lattice, \u039b, and a state, |\u03d5 , defined on the lattice, the conditional mutual information is\nI \u03d5 (A : C|B) = S \u03d5 (AB) + S \u03d5 (BC) \u2212 S \u03d5 (B) \u2212 S \u03d5 (ABC), where AB \u2261 A \u222a B.\nAfter these definitions, we are able to define topological order in the sense of entanglement entropy. Consider a lattice, \u039b, and regions A, B and C such that B shields A from C and A \u222a B \u222a C = \u039b (see Fig. 18a). The system has topological entanglement entropy if I \u03c1 (A : C|B) = 0 \u2200\u03c1 \u2208 C. For the case where the regions are defined as in Figure 18b, the topological entanglement entropy exists if I \u03c1 (A : C|B) = c top \u2200\u03c1 \u2208 C, where c top is a topological constant. Figure 18: Lattice partitions used to define topological entanglement entropy.\n\n\nTopological order III\n\nThe third and last notion of topological order needs the definition of local unitary.\n\nDefinition 10.5. A unitary operator is called local unitary if it can be written as\nU = U 1 \u00b7 \u00b7 \u00b7 U l ,\nwhere l is a constant and each factor U j is local. Now, we can state the third definition of topological order as follows. Given a state |\u03d5 , it has topological order if there exists no local unitary circuit, U , and no product state |0 \u2297\u039b such that \u03d5 = U |0 \u2297\u039b .\n\nAll three definitions of topological order can be stated allowing for small errors. Even in this scenario, it is not known how to connect the different definitions. Some partial implications have been found, but not more. In this notes, we mainly use the first definition of topological order, i.e., the local indistinguishability, because it is related to quantum error correction as we will see.\n\n\nThe Bravyi-Poulin-Terhal (BPT) bound\n\nIn this section we derive a beautiful result by Bravyi, Poulin and Terhal, showing that for a local commuting projector code in two dimensions, the parameters of the code satisfy:\nO( n kd 2 ) = 1(19)\nThis immediately tells us that constant rate and constant distance local topological CP codes do not exist. Recall that a constant rate code has O(k/n) = 1 and a constant distance code has O(d/n) = 1. Up to here we have used arbitrary Pauli matrices as error model. Now, we change it and consider the erasure error model. Erasure noise is a process that, at some discrete interval of time, some qubits are erased. Namely, the noise channel that erases a single qubit is\nN j (\u03c1) = tr j (\u03c1) \u2297 1 2 I j = 1 4 (\u03c1 + X j \u03c1X j + Y j \u03c1Y j + Z j \u03c1Z j ) ,\nand the noise channel that erases a region A is\nN A (\u03c1) = tr A (\u03c1) \u2297 1 d A I A ,(20)\nwhere d A = 2 |A| is the dimension of the Hilbert space on region A. The primary difference between an arbitrary error and an erasure error is that we know where the erasure occurred.\n\nIt turns out that protection against arbitrary errors can be reduced to protection against erasure errors (and visa versa) via the following theorem:\n\nTheorem 10.1. A quantum error correcting code, C, can protect against d erasure errors if and only if it can also protect against d 2 arbitrary errors.\n\nProof. The idea of the proof is the following. The error correction condition requires that P C E i E j P C = cP C , where P C is the projector on the code space (Eq. (17)), while the error detection condition is P C EP C = cP C . The difference on these conditions comes from the fact that detection only requires access to a single Kraus operator, but correction involves many of them. Clearly, if we have d 2 errors and we can take any two-combination of the errors, the E can be represented as having support on a maximum of d sites, and viceversa.\n\nOnce we have restricted ourselves to erasure errors, we can naturally define the notion of correctability for a region of the lattice:\n\nDefinition 10.6 (correctability). Assume the erasure channel (Eq. (20)) and consider a code space, C, defined on a lattice, \u039b, and a region of the lattice, A \u2282 \u039b. The region A is recoverable (correctable) if there exists a recovery map, R, such that R(tr A \u03c1) = \u03c1 \u2200\u03c1 \u2208 C and \u2200A \u2282 \u039b.\n\nWe will also make use of a notion closely related to correctability by a local channel; that certain subsystems on the lattice completely decouple:\n\nDefinition 10.7 (Decoupling). Given a lattice, \u039b, and three regions, A, B and C, such that B shields A from C and ABC = \u039b (see Fig. 18a), then A and C are decoupled on C if for any state \u03c1 \u2208 C,\ntr B \u03c1 = \u03c1 A \u2297 \u03c1 C .\nNote that decoupling is a non-trivial property since, in general, regions A and C are entangled. In order to prove the statement in Eqn. (19), we need to collect some facts about local commuting projector codes.\n\nLemma 10.1. Consider a local commuting projector code and two disconnected regions, A and B, i.e., they are separated by a distance bigger than l * , where l * is the radius of the support of any commuting projector (see Fig.  19) 18 . Then, it is satisfied that Figure 19: Lemma 10.1 requires two disconnected regions, A and B, that are separated by a distance bigger than l * , where l * is the radius of the support of any commuting projector.\n\u03c1 A \u2297 \u03c1 B = \u03c1 AB \u2200\u03c1 \u2208 C.(21)\nProof. Given a state \u03c1, the definition of the covariance between disconnected regions A and B is\nCov(A : B) \u2261 sup{ |tr [X A \u2297 X B (\u03c1 AB \u2212 \u03c1 A \u2297 \u03c1 B )]| such that ||X A || = 1, ||X B || = 1, X A = X \u2020 A , X B = X \u2020 B },\nwhere the operator norm ||X|| equals to the largest eigenvalue of X. The covariance can be related to the trace norm (|| \u00b7 || 1 = tr(\u00b7)) as\n1 min{d A , d B } ||\u03c1 AB \u2212 \u03c1 A \u2297 \u03c1 B || 1 \u2264 Cov(A, B) \u2264 ||\u03c1 AB \u2212 \u03c1 A \u2297 \u03c1 B || 1 .\nThe upper bound is obvious since we only need to replace the supremum over tensor operators by the supremum over operators that exist on AB.\n\nThe lower bound follows from the equivalence of finite dimensional Shatten norms\n1 d X ||X|| 1 \u2264 ||X|| \u221e \u2264 ||X|| 1 ,(22)\nwhere d X is the dimension of the matrix X. We will prove Eq. (21) by showing that the covariance between two regions of a local CPC code is zero.\n\nConsider a state \u03c1 \u2208 C such that C is a local CPC and \u03c1 = tr R (|\u03c8 \u03c8|), where R is a purification system. Then, we can write\ntr [(X A X B )\u03c1 AB ] = \u03c8|X A X B |\u03c8 = \u03c8|P C X A X B P C |\u03c8 = \u03c8|P C P A c X A X B P B c P C |\u03c8 = \u03c8|P C X A P A c P B c X B P C |\u03c8 = \u03c8|P C X A P C X B P C |\u03c8 = \u03c8|P C X A P C P C X B P C |\u03c8 = c(X A )c(X B ) = tr [X A \u03c1 A ] tr [X B \u03c1 B ] = tr [X A \u2297 X B (\u03c1 A \u2297 \u03c1 B )],\nwhere we have used that C is a local CPC, and thus we can split P C in local terms; that for any projector, P , it is satisfied that P 2 = P ; and Eq. (18) with c(X) = \u03c8|X|\u03c8 . This result implies that the convariance and its bounds are zero. Therefore, we have obtained that ||\u03c1 AB \u2212 \u03c1 A \u2297 \u03c1 B || 1 = 0, which is only possible if Eq. (21) is satisfied.\n\nLemma 10.2 (Union lemma). Consider a local commuting projector code and two disconnected regions, A and B, i.e., they are separated by a distance bigger than l * , where l * is the radius of the support of any commuting projector (see Fig. 19). If A and B are correctable, then A \u222a B is correctable.\n\nProof. This proof will be given in an exercise class.\n\nLemma 10.3 (Holographic lemma). Consider a local commuting projector code, C, where l * is the radius of the support of any commuting projector. Given A, B and C regions of C such that B shield A from C (see Fig.  20a) and the width of B is at least l * , if A and B are correctable, A \u222a B is correctable.\n\nProof. As regions A and B are correctable, by definition there exist recovery maps R A and R B such that\nR A [tr A (\u03c1)] = \u03c1 and R B [tr B (\u03c1)] = \u03c1.\nGiven these maps, we want to show that there exists the map R AB that corrects A \u222a B, i.e., that satisfies\n\nIn order to do this, we define the channel, T A , acting only on C such that T A (\u03c1 C ) = \u03c1 A \u2297 \u03c1 C . We can write\n\u03c1 = R B [tr B (\u03c1)] = R B (\u03c1 AC ) = R B (\u03c1 A \u2297 \u03c1 C ) = R B [T A (\u03c1)] = R B \u2022 T A (\u03c1),\nwhere we have used that A and C are disconnected by assumption, and thus \u03c1 A \u2297\u03c1 C = \u03c1 AC according to Lemma 10.1. We have obtained the map R B \u2022T A , that acts on AB and recovers the state \u03c1.\n\nBy definition of distance, we are able to correct any error configuration as long as it has at most d errors. However, it might exist specific error configurations that have many more errors and we are still able to correct them. For example, in the case of the toric code, the critic situation is when errors occur along a string, but, if they are distributed, it is not a problem. As a follow-up of lemma 10.3, we can wonder about the size of the largest correctable square. This is answered with the following fact.\n\nFact 10.1. Given a local commuting projector code, C, with distance d, the largest correctable square region is d \u00d7 d.\n\nProof. The idea of the proof consists in constructing the largest correctable square. Let us start with a region A such that |A| = d, which implies that A is correctable by definition of the distance. Now, we add a region B (see Fig.  20b) around A with |B| \u2264 d. Lemma 10.3 says that AB is correctable. We iterate this as many times as possible until we will reach a situation where |B| saturates to d. Then, we cannot continue increasing B because it will not be correctable anymore. Therefore, we conclude that squares of side length proportional to d are the largest correctable squares.\n\nFact 10.2. Given a local commuting projector code, C, and a correctable region A, it is satisfied that\nS \u03c1 (AA c ) + S \u03c1 (A) = S \u03c1 (A c ) \u2200\u03c1 \u2208 C.(23)\nProof. Consider a state of the code space, \u03c1 AA c \u2208 C, and its purification, \u03a8 AA c R = |\u03c8 \u03c8|. We denote the erasure channel as T [\u00b7] \u2261 tr A (\u00b7).\n\nAs A is correctable by assumption, there exists a correctable operation, R, such that R \u2022 T (\u03c1 AA c ) = \u03c1 AA c . This can be easily transformed to the same statement, but for the purification, i.e.,\nR \u2022 T (\u03a8 AA c R ) = \u03a8 AA c R .(24)\nFigure 20: The largest correctable square region is d \u00d7 d. In order to prove it, we apply Lemma 10.3 iteratively until B is no longer correctable, i.e., |B| \u223c d.\n\nRecalling that entropy decreases under the action of any map and using Eq.\n\n(24), we get the following two inequalities\nS (\u03a8 AA c R ||\u03c1 AA c \u2297 \u03c1 R ) \u2265 S [T (\u03a8 AA c R )||T (\u03c1 AA c \u2297 \u03c1 R )] = S (\u03c1 A c R ||\u03c1 A c \u2297 \u03c1 R ) , S (\u03a8 AA c R ||\u03c1 AA c \u2297 \u03c1 R ) = S [R(\u03c1 A c R )||R(\u03c1 A c \u2297 \u03c1 R )] \u2264 S (\u03c1 A c R ||\u03c1 A c \u2297 \u03c1 R ) . Thus, S (\u03a8 AA c R ||\u03c1 AA c \u2297 \u03c1 R ) = S (\u03c1 A c R ||\u03c1 A c \u2297 \u03c1 R ) .\nIntroducing the definition of conditional entropy, we can write This implies Eq. (23) since \u03a8 AA c R is a pure state, and thus S(AA c R) = 0 and S(A c R) = S(A).\n\nAt this point of the section, we have all ingredients to prove a theorem that does not allow local commuting projector codes to be ideal, i.e., to satisfy Eq. (??). The theorem is stated as follows.\n\nTheorem 10.2. For a local commuting projector code [n, k, d] on a twodimensional lattice, it is satisfied that\nkd 2 \u2264 \u03b1n,(25)\nwhere \u03b1 is a constant.\n\nProof. Consider the state \u03c1 \u2208 C such that \u03c1 = I C tr(I C ) = I C 2 k , where k = S(ABC). Consider also the partition of the lattice in Figure 10. Adding both equations, we get S \u03c1 (ABC) \u2264 S \u03c1 (C) \u2264 |C|.\n\nRecall that k = S(ABC) \u221d |C|. Now, we want to relate the |C| with the size of the lattice. It is easy to see that\n|C| \u223c \u221a n R \u221a n R = n d 2 \u2265 ck,\nwhere c the constant of proportionality. This implies Eq. (25).\n\nFrom Theorem 10.1, we conclude that, if we increase the code size, i.e., n, the ratio kd 2 n is always upper bounded by a constant. In other word, the ideal scenario cannot happen since kd 2 = (cnt)n 3 \u2265 (cnt)n. Note that the toric code (see Section 8) saturates the bound of Eq. (25). There exists similar bounds for three-dimensional codes.\n\nTheorem 10.1 not only give a bound, but also restricts the form of the logical operators. It might not be straightforward, but logical operators must live either in regions A or regions B and must go through regions C. \n\nFigure 2 :\n2Tanner graph of a) the n-bit codeword {0, . . . , 0}, and b) the fivebit codeword {00000} with a flip error on the second bit.\n\nFigure 4 :\n4Tanner graph of the codeword {0000000} of the Hamming code with r = 3.5  We show that in the exercise class 2 Quantum mechanics of one qubit\n\nFigure 5 :\n5Bloch sphere\n\nFigure 6 :\n6Discretisation of the time for continuous time errors.\n\nFigure 8 :\n8All plaquettes and crosses are stabilizers of the toric code. When a plaquette and a cross overlap, they do it always on two qubits.\n\nFigure 12 :\n12Any string error gives always a pair of syndromes at the ends of the string.\n\n\u2212\nS(AA c R) + S(AA c ) + S(R) = \u2212S(A c R) + S(A c ) + S(R).\n\n\n2 with regions A and B taken as large as possible. Fact 10.1 says that |A| and |B| can be at most proportional to d 2 , and thus R \u223c d. The union lemma (Lemma 10.2) states that the union of all regions A is correctable as well as the union of all regions B. Fact 10.2 says that Eq. (23) is fulfilled for regions A and for regions B individually. Thus, we haveS \u03c1 (ABC) + S \u03c1 (A) = S \u03c1 (BC), S \u03c1 (ABC) + S \u03c1 (B) = S \u03c1 (AC).Using the subadditivity of the entropy, these equations can also be written asS \u03c1 (ABC) = S \u03c1 (BC) \u2212 S \u03c1 (A) \u2264 S \u03c1 (B) + S \u03c1 (C) \u2212 S \u03c1 (A), S \u03c1 (ABC) = S \u03c1 (AC) \u2212 S \u03c1 (B) \u2264 S \u03c1 (A) + S \u03c1 (C) \u2212 S \u03c1 (B).\n\nFigure 21 :\n21Partition of the lattice used to prove Theorem 10.1. Regions A and B are taken as large as possible and radius of C is at least l * 2 .\n\n\nDefinition 10.2. The entropy of a density matrix, \u03c1, is given by S(\u03c1) \u2261 \u2212tr (\u03c1 log \u03c1) .16  A Hamiltonian, H, is a frustration free Hamiltonian if all its terms annihilate the ground subspace17  We will show Eq. (18) in the exercise class.Definition 10.3. For a pure state, |\u03d5 , defined on a lattice, the entropy of a region, A, of the lattice is\nFor example, most of the improvement of the capacity of a CD to the capacity of a DVD is mainly due to the introduction of a better error code.\nNote that {x 1 , x 2 , . . . , x n } is not the classical analogy of a vector in a Hilbert space, but only a condensed representation of a specific codeword.\nThis will not be true for quantum codes\nIn the exercise class we will prove the last constraint and show some more.\nWhen we talk about operations, we always think about their action on certain states.\nRecall the density matrix of a pure state, |\u03c8 , is \u03c1 = |\u03c8 \u03c8|. 8 In these notes we do not consider Hilbert spaces with infinite dimension.\nHere we know where the error is, and thus we only measure one parity measurement. In practise, however, one must measure all and then use the recipe.\nWe will see in following chapters these operators are known as stabiliser operators. 12 For convenience, we consider that the Hilbert space, H, is embedded in a Hilbert space that characterises n qubits, H 2 \u2297 \u00b7 \u00b7 \u00b7 \u2297 H 2 = H \u2297n 2 .\nA group is abelian if all its elements commute, i.e., [S 1 , S 2 ] = 0 \u2200S i \u2208 S.\nStabilizer operators are not logical operators because they map a state in the code, |\u03d5 , to itself, not to another state.\nNote that the required separation in Lemma 10.1 can be stated in other words saying that there exists no stabilizer operator that acts on both regions A and B.\nR AB [tr AB (\u03c1)] = \u03c1.\n", "annotations": {"author": "[{\"end\":148,\"start\":91},{\"end\":148,\"start\":91},{\"end\":148,\"start\":91}]", "publisher": null, "author_last_name": "[{\"end\":106,\"start\":96},{\"end\":106,\"start\":96},{\"end\":106,\"start\":96}]", "author_first_name": "[{\"end\":95,\"start\":91},{\"end\":95,\"start\":91},{\"end\":95,\"start\":91}]", "author_affiliation": "[{\"end\":147,\"start\":108},{\"end\":147,\"start\":108},{\"end\":147,\"start\":108}]", "title": "[{\"end\":78,\"start\":1},{\"end\":226,\"start\":149},{\"end\":78,\"start\":1},{\"end\":226,\"start\":149},{\"end\":78,\"start\":1},{\"end\":226,\"start\":149}]", "venue": null, "abstract": null, "bib_ref": "[{\"end\":18574,\"start\":18565},{\"end\":40174,\"start\":40172},{\"end\":40176,\"start\":40174},{\"end\":69554,\"start\":69551},{\"end\":18574,\"start\":18565},{\"end\":40174,\"start\":40172},{\"end\":40176,\"start\":40174},{\"end\":69554,\"start\":69551},{\"end\":18574,\"start\":18565},{\"end\":40174,\"start\":40172},{\"end\":40176,\"start\":40174},{\"end\":69554,\"start\":69551}]", "figure": "[{\"attributes\":{\"id\":\"fig_1\"},\"end\":90730,\"start\":90591},{\"attributes\":{\"id\":\"fig_3\"},\"end\":90884,\"start\":90731},{\"attributes\":{\"id\":\"fig_4\"},\"end\":90910,\"start\":90885},{\"attributes\":{\"id\":\"fig_5\"},\"end\":90978,\"start\":90911},{\"attributes\":{\"id\":\"fig_7\"},\"end\":91124,\"start\":90979},{\"attributes\":{\"id\":\"fig_8\"},\"end\":91216,\"start\":91125},{\"attributes\":{\"id\":\"fig_9\"},\"end\":91277,\"start\":91217},{\"attributes\":{\"id\":\"fig_10\"},\"end\":91903,\"start\":91278},{\"attributes\":{\"id\":\"fig_11\"},\"end\":92054,\"start\":91904},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":92402,\"start\":92055},{\"attributes\":{\"id\":\"fig_1\"},\"end\":90730,\"start\":90591},{\"attributes\":{\"id\":\"fig_3\"},\"end\":90884,\"start\":90731},{\"attributes\":{\"id\":\"fig_4\"},\"end\":90910,\"start\":90885},{\"attributes\":{\"id\":\"fig_5\"},\"end\":90978,\"start\":90911},{\"attributes\":{\"id\":\"fig_7\"},\"end\":91124,\"start\":90979},{\"attributes\":{\"id\":\"fig_8\"},\"end\":91216,\"start\":91125},{\"attributes\":{\"id\":\"fig_9\"},\"end\":91277,\"start\":91217},{\"attributes\":{\"id\":\"fig_10\"},\"end\":91903,\"start\":91278},{\"attributes\":{\"id\":\"fig_11\"},\"end\":92054,\"start\":91904},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":92402,\"start\":92055},{\"attributes\":{\"id\":\"fig_1\"},\"end\":90730,\"start\":90591},{\"attributes\":{\"id\":\"fig_3\"},\"end\":90884,\"start\":90731},{\"attributes\":{\"id\":\"fig_4\"},\"end\":90910,\"start\":90885},{\"attributes\":{\"id\":\"fig_5\"},\"end\":90978,\"start\":90911},{\"attributes\":{\"id\":\"fig_7\"},\"end\":91124,\"start\":90979},{\"attributes\":{\"id\":\"fig_8\"},\"end\":91216,\"start\":91125},{\"attributes\":{\"id\":\"fig_9\"},\"end\":91277,\"start\":91217},{\"attributes\":{\"id\":\"fig_10\"},\"end\":91903,\"start\":91278},{\"attributes\":{\"id\":\"fig_11\"},\"end\":92054,\"start\":91904},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":92402,\"start\":92055}]", "paragraph": "[{\"end\":1801,\"start\":254},{\"end\":2378,\"start\":1803},{\"end\":3508,\"start\":2380},{\"end\":3704,\"start\":3510},{\"end\":4112,\"start\":3706},{\"end\":4399,\"start\":4114},{\"end\":4785,\"start\":4401},{\"end\":5757,\"start\":4816},{\"end\":5833,\"start\":5759},{\"end\":5953,\"start\":5844},{\"end\":6065,\"start\":5964},{\"end\":6207,\"start\":6075},{\"end\":6333,\"start\":6218},{\"end\":6414,\"start\":6335},{\"end\":6491,\"start\":6425},{\"end\":6678,\"start\":6493},{\"end\":6866,\"start\":6689},{\"end\":6994,\"start\":6876},{\"end\":7197,\"start\":7005},{\"end\":7255,\"start\":7199},{\"end\":7652,\"start\":7257},{\"end\":7976,\"start\":7654},{\"end\":8448,\"start\":8000},{\"end\":8791,\"start\":8450},{\"end\":9435,\"start\":8793},{\"end\":9528,\"start\":9437},{\"end\":9864,\"start\":9530},{\"end\":10261,\"start\":9866},{\"end\":10540,\"start\":10263},{\"end\":10782,\"start\":10557},{\"end\":11255,\"start\":10784},{\"end\":11323,\"start\":11257},{\"end\":11429,\"start\":11363},{\"end\":11551,\"start\":11517},{\"end\":11662,\"start\":11553},{\"end\":11755,\"start\":11731},{\"end\":12085,\"start\":12051},{\"end\":12151,\"start\":12087},{\"end\":12994,\"start\":12172},{\"end\":13309,\"start\":13018},{\"end\":13421,\"start\":13311},{\"end\":13550,\"start\":13441},{\"end\":13634,\"start\":13552},{\"end\":13705,\"start\":13636},{\"end\":14025,\"start\":13826},{\"end\":14257,\"start\":14083},{\"end\":14817,\"start\":14259},{\"end\":15103,\"start\":14830},{\"end\":15423,\"start\":15105},{\"end\":16705,\"start\":15425},{\"end\":16939,\"start\":16707},{\"end\":17091,\"start\":17071},{\"end\":17231,\"start\":17093},{\"end\":17413,\"start\":17233},{\"end\":17687,\"start\":17436},{\"end\":17873,\"start\":17689},{\"end\":17948,\"start\":17875},{\"end\":18175,\"start\":17950},{\"end\":18704,\"start\":18220},{\"end\":19068,\"start\":18706},{\"end\":19433,\"start\":19109},{\"end\":19543,\"start\":19435},{\"end\":19807,\"start\":19589},{\"end\":20039,\"start\":19809},{\"end\":20118,\"start\":20078},{\"end\":20540,\"start\":20120},{\"end\":22394,\"start\":20542},{\"end\":22555,\"start\":22420},{\"end\":22596,\"start\":22557},{\"end\":22905,\"start\":22598},{\"end\":22998,\"start\":22907},{\"end\":23116,\"start\":23011},{\"end\":23256,\"start\":23118},{\"end\":23400,\"start\":23317},{\"end\":23609,\"start\":23402},{\"end\":23742,\"start\":23611},{\"end\":23891,\"start\":23744},{\"end\":24143,\"start\":23893},{\"end\":24576,\"start\":24182},{\"end\":24785,\"start\":24608},{\"end\":25004,\"start\":24787},{\"end\":25234,\"start\":25061},{\"end\":25793,\"start\":25271},{\"end\":25947,\"start\":25816},{\"end\":26287,\"start\":26016},{\"end\":26429,\"start\":26310},{\"end\":26494,\"start\":26448},{\"end\":27117,\"start\":26722},{\"end\":27378,\"start\":27119},{\"end\":27686,\"start\":27380},{\"end\":27929,\"start\":27703},{\"end\":28131,\"start\":28094},{\"end\":28283,\"start\":28185},{\"end\":28324,\"start\":28285},{\"end\":28860,\"start\":28348},{\"end\":28982,\"start\":28862},{\"end\":29286,\"start\":29057},{\"end\":29479,\"start\":29288},{\"end\":29769,\"start\":29513},{\"end\":30190,\"start\":29783},{\"end\":30382,\"start\":30192},{\"end\":30837,\"start\":30415},{\"end\":30951,\"start\":30839},{\"end\":31186,\"start\":30953},{\"end\":31241,\"start\":31212},{\"end\":31576,\"start\":31285},{\"end\":31716,\"start\":31578},{\"end\":31926,\"start\":31718},{\"end\":32254,\"start\":31950},{\"end\":32960,\"start\":32328},{\"end\":33001,\"start\":32962},{\"end\":33324,\"start\":33127},{\"end\":33515,\"start\":33356},{\"end\":33973,\"start\":33602},{\"end\":34029,\"start\":33975},{\"end\":34951,\"start\":34031},{\"end\":35220,\"start\":34953},{\"end\":35499,\"start\":35287},{\"end\":35575,\"start\":35538},{\"end\":35764,\"start\":35632},{\"end\":35819,\"start\":35766},{\"end\":35873,\"start\":35821},{\"end\":35930,\"start\":35875},{\"end\":36516,\"start\":35982},{\"end\":36774,\"start\":36548},{\"end\":36928,\"start\":36861},{\"end\":37290,\"start\":36930},{\"end\":37582,\"start\":37447},{\"end\":37637,\"start\":37584},{\"end\":37691,\"start\":37639},{\"end\":37978,\"start\":37693},{\"end\":38035,\"start\":37980},{\"end\":38835,\"start\":38066},{\"end\":38842,\"start\":38837},{\"end\":38851,\"start\":38844},{\"end\":39235,\"start\":38853},{\"end\":39405,\"start\":39237},{\"end\":39735,\"start\":39465},{\"end\":40189,\"start\":39759},{\"end\":40297,\"start\":40221},{\"end\":40448,\"start\":40299},{\"end\":40663,\"start\":40473},{\"end\":41052,\"start\":40866},{\"end\":41699,\"start\":41092},{\"end\":42023,\"start\":41701},{\"end\":42475,\"start\":42025},{\"end\":42914,\"start\":42648},{\"end\":43101,\"start\":42954},{\"end\":43360,\"start\":43103},{\"end\":43502,\"start\":43386},{\"end\":43651,\"start\":43534},{\"end\":43787,\"start\":43653},{\"end\":44128,\"start\":43789},{\"end\":44223,\"start\":44130},{\"end\":44781,\"start\":44378},{\"end\":44918,\"start\":44783},{\"end\":45011,\"start\":44940},{\"end\":45271,\"start\":45078},{\"end\":45959,\"start\":45360},{\"end\":46257,\"start\":45986},{\"end\":46290,\"start\":46259},{\"end\":46400,\"start\":46356},{\"end\":46560,\"start\":46402},{\"end\":46714,\"start\":46590},{\"end\":46751,\"start\":46716},{\"end\":47589,\"start\":47127},{\"end\":48058,\"start\":47610},{\"end\":48231,\"start\":48110},{\"end\":48319,\"start\":48233},{\"end\":48513,\"start\":48321},{\"end\":48578,\"start\":48538},{\"end\":48767,\"start\":48580},{\"end\":48952,\"start\":48809},{\"end\":49157,\"start\":48990},{\"end\":49211,\"start\":49159},{\"end\":49491,\"start\":49213},{\"end\":49597,\"start\":49493},{\"end\":49725,\"start\":49599},{\"end\":49882,\"start\":49727},{\"end\":50036,\"start\":49884},{\"end\":50172,\"start\":50038},{\"end\":50894,\"start\":50198},{\"end\":51050,\"start\":50896},{\"end\":51214,\"start\":51151},{\"end\":51333,\"start\":51216},{\"end\":51598,\"start\":51469},{\"end\":51792,\"start\":51600},{\"end\":52090,\"start\":51850},{\"end\":52170,\"start\":52092},{\"end\":52331,\"start\":52230},{\"end\":52490,\"start\":52372},{\"end\":52621,\"start\":52492},{\"end\":52704,\"start\":52645},{\"end\":52817,\"start\":52706},{\"end\":53337,\"start\":52910},{\"end\":53603,\"start\":53339},{\"end\":53672,\"start\":53633},{\"end\":54042,\"start\":53704},{\"end\":54383,\"start\":54044},{\"end\":54531,\"start\":54385},{\"end\":54627,\"start\":54557},{\"end\":54940,\"start\":54742},{\"end\":55292,\"start\":54942},{\"end\":55590,\"start\":55307},{\"end\":55945,\"start\":55592},{\"end\":56915,\"start\":56005},{\"end\":57755,\"start\":56917},{\"end\":58019,\"start\":57757},{\"end\":58380,\"start\":58021},{\"end\":59361,\"start\":58382},{\"end\":59681,\"start\":59477},{\"end\":60247,\"start\":59683},{\"end\":60429,\"start\":60249},{\"end\":60825,\"start\":60431},{\"end\":60846,\"start\":60827},{\"end\":61061,\"start\":60913},{\"end\":61251,\"start\":61099},{\"end\":61496,\"start\":61253},{\"end\":61943,\"start\":61498},{\"end\":62508,\"start\":61972},{\"end\":63761,\"start\":62510},{\"end\":63870,\"start\":63774},{\"end\":64128,\"start\":63905},{\"end\":65002,\"start\":64130},{\"end\":65155,\"start\":65004},{\"end\":66034,\"start\":65180},{\"end\":66315,\"start\":66036},{\"end\":66687,\"start\":66351},{\"end\":67516,\"start\":66707},{\"end\":67845,\"start\":67531},{\"end\":68041,\"start\":67847},{\"end\":68475,\"start\":68043},{\"end\":68757,\"start\":68477},{\"end\":69267,\"start\":68759},{\"end\":69688,\"start\":69300},{\"end\":69957,\"start\":69711},{\"end\":69986,\"start\":69981},{\"end\":70300,\"start\":70016},{\"end\":70447,\"start\":70302},{\"end\":70884,\"start\":70495},{\"end\":71097,\"start\":70953},{\"end\":71746,\"start\":71130},{\"end\":72479,\"start\":71827},{\"end\":72642,\"start\":72563},{\"end\":72703,\"start\":72670},{\"end\":72834,\"start\":72790},{\"end\":73180,\"start\":72889},{\"end\":73454,\"start\":73211},{\"end\":73658,\"start\":73491},{\"end\":73842,\"start\":73695},{\"end\":74254,\"start\":73844},{\"end\":74290,\"start\":74256},{\"end\":74548,\"start\":74302},{\"end\":74658,\"start\":74565},{\"end\":74720,\"start\":74660},{\"end\":74771,\"start\":74722},{\"end\":74974,\"start\":74880},{\"end\":75124,\"start\":74984},{\"end\":75220,\"start\":75126},{\"end\":75379,\"start\":75222},{\"end\":75706,\"start\":75485},{\"end\":75775,\"start\":75747},{\"end\":76085,\"start\":75777},{\"end\":76259,\"start\":76087},{\"end\":76364,\"start\":76261},{\"end\":76494,\"start\":76366},{\"end\":76939,\"start\":76528},{\"end\":77013,\"start\":76941},{\"end\":77398,\"start\":77055},{\"end\":77726,\"start\":77451},{\"end\":78290,\"start\":77778},{\"end\":78365,\"start\":78292},{\"end\":78621,\"start\":78415},{\"end\":78786,\"start\":78680},{\"end\":78843,\"start\":78818},{\"end\":78996,\"start\":78845},{\"end\":79618,\"start\":79074},{\"end\":79729,\"start\":79644},{\"end\":79814,\"start\":79731},{\"end\":80099,\"start\":79835},{\"end\":80498,\"start\":80101},{\"end\":80718,\"start\":80539},{\"end\":81208,\"start\":80739},{\"end\":81331,\"start\":81284},{\"end\":81552,\"start\":81369},{\"end\":81703,\"start\":81554},{\"end\":81856,\"start\":81705},{\"end\":82410,\"start\":81858},{\"end\":82546,\"start\":82412},{\"end\":82830,\"start\":82548},{\"end\":82979,\"start\":82832},{\"end\":83174,\"start\":82981},{\"end\":83407,\"start\":83196},{\"end\":83855,\"start\":83409},{\"end\":83981,\"start\":83885},{\"end\":84243,\"start\":84104},{\"end\":84466,\"start\":84326},{\"end\":84548,\"start\":84468},{\"end\":84735,\"start\":84589},{\"end\":84861,\"start\":84737},{\"end\":85479,\"start\":85127},{\"end\":85780,\"start\":85481},{\"end\":85835,\"start\":85782},{\"end\":86142,\"start\":85837},{\"end\":86248,\"start\":86144},{\"end\":86398,\"start\":86292},{\"end\":86514,\"start\":86400},{\"end\":86791,\"start\":86600},{\"end\":87311,\"start\":86793},{\"end\":87431,\"start\":87313},{\"end\":88023,\"start\":87433},{\"end\":88127,\"start\":88025},{\"end\":88320,\"start\":88175},{\"end\":88520,\"start\":88322},{\"end\":88717,\"start\":88556},{\"end\":88793,\"start\":88719},{\"end\":88838,\"start\":88795},{\"end\":89260,\"start\":89099},{\"end\":89460,\"start\":89262},{\"end\":89572,\"start\":89462},{\"end\":89610,\"start\":89588},{\"end\":89814,\"start\":89612},{\"end\":89929,\"start\":89816},{\"end\":90025,\"start\":89962},{\"end\":90369,\"start\":90027},{\"end\":90590,\"start\":90371},{\"end\":1801,\"start\":254},{\"end\":2378,\"start\":1803},{\"end\":3508,\"start\":2380},{\"end\":3704,\"start\":3510},{\"end\":4112,\"start\":3706},{\"end\":4399,\"start\":4114},{\"end\":4785,\"start\":4401},{\"end\":5757,\"start\":4816},{\"end\":5833,\"start\":5759},{\"end\":5953,\"start\":5844},{\"end\":6065,\"start\":5964},{\"end\":6207,\"start\":6075},{\"end\":6333,\"start\":6218},{\"end\":6414,\"start\":6335},{\"end\":6491,\"start\":6425},{\"end\":6678,\"start\":6493},{\"end\":6866,\"start\":6689},{\"end\":6994,\"start\":6876},{\"end\":7197,\"start\":7005},{\"end\":7255,\"start\":7199},{\"end\":7652,\"start\":7257},{\"end\":7976,\"start\":7654},{\"end\":8448,\"start\":8000},{\"end\":8791,\"start\":8450},{\"end\":9435,\"start\":8793},{\"end\":9528,\"start\":9437},{\"end\":9864,\"start\":9530},{\"end\":10261,\"start\":9866},{\"end\":10540,\"start\":10263},{\"end\":10782,\"start\":10557},{\"end\":11255,\"start\":10784},{\"end\":11323,\"start\":11257},{\"end\":11429,\"start\":11363},{\"end\":11551,\"start\":11517},{\"end\":11662,\"start\":11553},{\"end\":11755,\"start\":11731},{\"end\":12085,\"start\":12051},{\"end\":12151,\"start\":12087},{\"end\":12994,\"start\":12172},{\"end\":13309,\"start\":13018},{\"end\":13421,\"start\":13311},{\"end\":13550,\"start\":13441},{\"end\":13634,\"start\":13552},{\"end\":13705,\"start\":13636},{\"end\":14025,\"start\":13826},{\"end\":14257,\"start\":14083},{\"end\":14817,\"start\":14259},{\"end\":15103,\"start\":14830},{\"end\":15423,\"start\":15105},{\"end\":16705,\"start\":15425},{\"end\":16939,\"start\":16707},{\"end\":17091,\"start\":17071},{\"end\":17231,\"start\":17093},{\"end\":17413,\"start\":17233},{\"end\":17687,\"start\":17436},{\"end\":17873,\"start\":17689},{\"end\":17948,\"start\":17875},{\"end\":18175,\"start\":17950},{\"end\":18704,\"start\":18220},{\"end\":19068,\"start\":18706},{\"end\":19433,\"start\":19109},{\"end\":19543,\"start\":19435},{\"end\":19807,\"start\":19589},{\"end\":20039,\"start\":19809},{\"end\":20118,\"start\":20078},{\"end\":20540,\"start\":20120},{\"end\":22394,\"start\":20542},{\"end\":22555,\"start\":22420},{\"end\":22596,\"start\":22557},{\"end\":22905,\"start\":22598},{\"end\":22998,\"start\":22907},{\"end\":23116,\"start\":23011},{\"end\":23256,\"start\":23118},{\"end\":23400,\"start\":23317},{\"end\":23609,\"start\":23402},{\"end\":23742,\"start\":23611},{\"end\":23891,\"start\":23744},{\"end\":24143,\"start\":23893},{\"end\":24576,\"start\":24182},{\"end\":24785,\"start\":24608},{\"end\":25004,\"start\":24787},{\"end\":25234,\"start\":25061},{\"end\":25793,\"start\":25271},{\"end\":25947,\"start\":25816},{\"end\":26287,\"start\":26016},{\"end\":26429,\"start\":26310},{\"end\":26494,\"start\":26448},{\"end\":27117,\"start\":26722},{\"end\":27378,\"start\":27119},{\"end\":27686,\"start\":27380},{\"end\":27929,\"start\":27703},{\"end\":28131,\"start\":28094},{\"end\":28283,\"start\":28185},{\"end\":28324,\"start\":28285},{\"end\":28860,\"start\":28348},{\"end\":28982,\"start\":28862},{\"end\":29286,\"start\":29057},{\"end\":29479,\"start\":29288},{\"end\":29769,\"start\":29513},{\"end\":30190,\"start\":29783},{\"end\":30382,\"start\":30192},{\"end\":30837,\"start\":30415},{\"end\":30951,\"start\":30839},{\"end\":31186,\"start\":30953},{\"end\":31241,\"start\":31212},{\"end\":31576,\"start\":31285},{\"end\":31716,\"start\":31578},{\"end\":31926,\"start\":31718},{\"end\":32254,\"start\":31950},{\"end\":32960,\"start\":32328},{\"end\":33001,\"start\":32962},{\"end\":33324,\"start\":33127},{\"end\":33515,\"start\":33356},{\"end\":33973,\"start\":33602},{\"end\":34029,\"start\":33975},{\"end\":34951,\"start\":34031},{\"end\":35220,\"start\":34953},{\"end\":35499,\"start\":35287},{\"end\":35575,\"start\":35538},{\"end\":35764,\"start\":35632},{\"end\":35819,\"start\":35766},{\"end\":35873,\"start\":35821},{\"end\":35930,\"start\":35875},{\"end\":36516,\"start\":35982},{\"end\":36774,\"start\":36548},{\"end\":36928,\"start\":36861},{\"end\":37290,\"start\":36930},{\"end\":37582,\"start\":37447},{\"end\":37637,\"start\":37584},{\"end\":37691,\"start\":37639},{\"end\":37978,\"start\":37693},{\"end\":38035,\"start\":37980},{\"end\":38835,\"start\":38066},{\"end\":38842,\"start\":38837},{\"end\":38851,\"start\":38844},{\"end\":39235,\"start\":38853},{\"end\":39405,\"start\":39237},{\"end\":39735,\"start\":39465},{\"end\":40189,\"start\":39759},{\"end\":40297,\"start\":40221},{\"end\":40448,\"start\":40299},{\"end\":40663,\"start\":40473},{\"end\":41052,\"start\":40866},{\"end\":41699,\"start\":41092},{\"end\":42023,\"start\":41701},{\"end\":42475,\"start\":42025},{\"end\":42914,\"start\":42648},{\"end\":43101,\"start\":42954},{\"end\":43360,\"start\":43103},{\"end\":43502,\"start\":43386},{\"end\":43651,\"start\":43534},{\"end\":43787,\"start\":43653},{\"end\":44128,\"start\":43789},{\"end\":44223,\"start\":44130},{\"end\":44781,\"start\":44378},{\"end\":44918,\"start\":44783},{\"end\":45011,\"start\":44940},{\"end\":45271,\"start\":45078},{\"end\":45959,\"start\":45360},{\"end\":46257,\"start\":45986},{\"end\":46290,\"start\":46259},{\"end\":46400,\"start\":46356},{\"end\":46560,\"start\":46402},{\"end\":46714,\"start\":46590},{\"end\":46751,\"start\":46716},{\"end\":47589,\"start\":47127},{\"end\":48058,\"start\":47610},{\"end\":48231,\"start\":48110},{\"end\":48319,\"start\":48233},{\"end\":48513,\"start\":48321},{\"end\":48578,\"start\":48538},{\"end\":48767,\"start\":48580},{\"end\":48952,\"start\":48809},{\"end\":49157,\"start\":48990},{\"end\":49211,\"start\":49159},{\"end\":49491,\"start\":49213},{\"end\":49597,\"start\":49493},{\"end\":49725,\"start\":49599},{\"end\":49882,\"start\":49727},{\"end\":50036,\"start\":49884},{\"end\":50172,\"start\":50038},{\"end\":50894,\"start\":50198},{\"end\":51050,\"start\":50896},{\"end\":51214,\"start\":51151},{\"end\":51333,\"start\":51216},{\"end\":51598,\"start\":51469},{\"end\":51792,\"start\":51600},{\"end\":52090,\"start\":51850},{\"end\":52170,\"start\":52092},{\"end\":52331,\"start\":52230},{\"end\":52490,\"start\":52372},{\"end\":52621,\"start\":52492},{\"end\":52704,\"start\":52645},{\"end\":52817,\"start\":52706},{\"end\":53337,\"start\":52910},{\"end\":53603,\"start\":53339},{\"end\":53672,\"start\":53633},{\"end\":54042,\"start\":53704},{\"end\":54383,\"start\":54044},{\"end\":54531,\"start\":54385},{\"end\":54627,\"start\":54557},{\"end\":54940,\"start\":54742},{\"end\":55292,\"start\":54942},{\"end\":55590,\"start\":55307},{\"end\":55945,\"start\":55592},{\"end\":56915,\"start\":56005},{\"end\":57755,\"start\":56917},{\"end\":58019,\"start\":57757},{\"end\":58380,\"start\":58021},{\"end\":59361,\"start\":58382},{\"end\":59681,\"start\":59477},{\"end\":60247,\"start\":59683},{\"end\":60429,\"start\":60249},{\"end\":60825,\"start\":60431},{\"end\":60846,\"start\":60827},{\"end\":61061,\"start\":60913},{\"end\":61251,\"start\":61099},{\"end\":61496,\"start\":61253},{\"end\":61943,\"start\":61498},{\"end\":62508,\"start\":61972},{\"end\":63761,\"start\":62510},{\"end\":63870,\"start\":63774},{\"end\":64128,\"start\":63905},{\"end\":65002,\"start\":64130},{\"end\":65155,\"start\":65004},{\"end\":66034,\"start\":65180},{\"end\":66315,\"start\":66036},{\"end\":66687,\"start\":66351},{\"end\":67516,\"start\":66707},{\"end\":67845,\"start\":67531},{\"end\":68041,\"start\":67847},{\"end\":68475,\"start\":68043},{\"end\":68757,\"start\":68477},{\"end\":69267,\"start\":68759},{\"end\":69688,\"start\":69300},{\"end\":69957,\"start\":69711},{\"end\":69986,\"start\":69981},{\"end\":70300,\"start\":70016},{\"end\":70447,\"start\":70302},{\"end\":70884,\"start\":70495},{\"end\":71097,\"start\":70953},{\"end\":71746,\"start\":71130},{\"end\":72479,\"start\":71827},{\"end\":72642,\"start\":72563},{\"end\":72703,\"start\":72670},{\"end\":72834,\"start\":72790},{\"end\":73180,\"start\":72889},{\"end\":73454,\"start\":73211},{\"end\":73658,\"start\":73491},{\"end\":73842,\"start\":73695},{\"end\":74254,\"start\":73844},{\"end\":74290,\"start\":74256},{\"end\":74548,\"start\":74302},{\"end\":74658,\"start\":74565},{\"end\":74720,\"start\":74660},{\"end\":74771,\"start\":74722},{\"end\":74974,\"start\":74880},{\"end\":75124,\"start\":74984},{\"end\":75220,\"start\":75126},{\"end\":75379,\"start\":75222},{\"end\":75706,\"start\":75485},{\"end\":75775,\"start\":75747},{\"end\":76085,\"start\":75777},{\"end\":76259,\"start\":76087},{\"end\":76364,\"start\":76261},{\"end\":76494,\"start\":76366},{\"end\":76939,\"start\":76528},{\"end\":77013,\"start\":76941},{\"end\":77398,\"start\":77055},{\"end\":77726,\"start\":77451},{\"end\":78290,\"start\":77778},{\"end\":78365,\"start\":78292},{\"end\":78621,\"start\":78415},{\"end\":78786,\"start\":78680},{\"end\":78843,\"start\":78818},{\"end\":78996,\"start\":78845},{\"end\":79618,\"start\":79074},{\"end\":79729,\"start\":79644},{\"end\":79814,\"start\":79731},{\"end\":80099,\"start\":79835},{\"end\":80498,\"start\":80101},{\"end\":80718,\"start\":80539},{\"end\":81208,\"start\":80739},{\"end\":81331,\"start\":81284},{\"end\":81552,\"start\":81369},{\"end\":81703,\"start\":81554},{\"end\":81856,\"start\":81705},{\"end\":82410,\"start\":81858},{\"end\":82546,\"start\":82412},{\"end\":82830,\"start\":82548},{\"end\":82979,\"start\":82832},{\"end\":83174,\"start\":82981},{\"end\":83407,\"start\":83196},{\"end\":83855,\"start\":83409},{\"end\":83981,\"start\":83885},{\"end\":84243,\"start\":84104},{\"end\":84466,\"start\":84326},{\"end\":84548,\"start\":84468},{\"end\":84735,\"start\":84589},{\"end\":84861,\"start\":84737},{\"end\":85479,\"start\":85127},{\"end\":85780,\"start\":85481},{\"end\":85835,\"start\":85782},{\"end\":86142,\"start\":85837},{\"end\":86248,\"start\":86144},{\"end\":86398,\"start\":86292},{\"end\":86514,\"start\":86400},{\"end\":86791,\"start\":86600},{\"end\":87311,\"start\":86793},{\"end\":87431,\"start\":87313},{\"end\":88023,\"start\":87433},{\"end\":88127,\"start\":88025},{\"end\":88320,\"start\":88175},{\"end\":88520,\"start\":88322},{\"end\":88717,\"start\":88556},{\"end\":88793,\"start\":88719},{\"end\":88838,\"start\":88795},{\"end\":89260,\"start\":89099},{\"end\":89460,\"start\":89262},{\"end\":89572,\"start\":89462},{\"end\":89610,\"start\":89588},{\"end\":89814,\"start\":89612},{\"end\":89929,\"start\":89816},{\"end\":90025,\"start\":89962},{\"end\":90369,\"start\":90027},{\"end\":90590,\"start\":90371},{\"end\":1801,\"start\":254},{\"end\":2378,\"start\":1803},{\"end\":3508,\"start\":2380},{\"end\":3704,\"start\":3510},{\"end\":4112,\"start\":3706},{\"end\":4399,\"start\":4114},{\"end\":4785,\"start\":4401},{\"end\":5757,\"start\":4816},{\"end\":5833,\"start\":5759},{\"end\":5953,\"start\":5844},{\"end\":6065,\"start\":5964},{\"end\":6207,\"start\":6075},{\"end\":6333,\"start\":6218},{\"end\":6414,\"start\":6335},{\"end\":6491,\"start\":6425},{\"end\":6678,\"start\":6493},{\"end\":6866,\"start\":6689},{\"end\":6994,\"start\":6876},{\"end\":7197,\"start\":7005},{\"end\":7255,\"start\":7199},{\"end\":7652,\"start\":7257},{\"end\":7976,\"start\":7654},{\"end\":8448,\"start\":8000},{\"end\":8791,\"start\":8450},{\"end\":9435,\"start\":8793},{\"end\":9528,\"start\":9437},{\"end\":9864,\"start\":9530},{\"end\":10261,\"start\":9866},{\"end\":10540,\"start\":10263},{\"end\":10782,\"start\":10557},{\"end\":11255,\"start\":10784},{\"end\":11323,\"start\":11257},{\"end\":11429,\"start\":11363},{\"end\":11551,\"start\":11517},{\"end\":11662,\"start\":11553},{\"end\":11755,\"start\":11731},{\"end\":12085,\"start\":12051},{\"end\":12151,\"start\":12087},{\"end\":12994,\"start\":12172},{\"end\":13309,\"start\":13018},{\"end\":13421,\"start\":13311},{\"end\":13550,\"start\":13441},{\"end\":13634,\"start\":13552},{\"end\":13705,\"start\":13636},{\"end\":14025,\"start\":13826},{\"end\":14257,\"start\":14083},{\"end\":14817,\"start\":14259},{\"end\":15103,\"start\":14830},{\"end\":15423,\"start\":15105},{\"end\":16705,\"start\":15425},{\"end\":16939,\"start\":16707},{\"end\":17091,\"start\":17071},{\"end\":17231,\"start\":17093},{\"end\":17413,\"start\":17233},{\"end\":17687,\"start\":17436},{\"end\":17873,\"start\":17689},{\"end\":17948,\"start\":17875},{\"end\":18175,\"start\":17950},{\"end\":18704,\"start\":18220},{\"end\":19068,\"start\":18706},{\"end\":19433,\"start\":19109},{\"end\":19543,\"start\":19435},{\"end\":19807,\"start\":19589},{\"end\":20039,\"start\":19809},{\"end\":20118,\"start\":20078},{\"end\":20540,\"start\":20120},{\"end\":22394,\"start\":20542},{\"end\":22555,\"start\":22420},{\"end\":22596,\"start\":22557},{\"end\":22905,\"start\":22598},{\"end\":22998,\"start\":22907},{\"end\":23116,\"start\":23011},{\"end\":23256,\"start\":23118},{\"end\":23400,\"start\":23317},{\"end\":23609,\"start\":23402},{\"end\":23742,\"start\":23611},{\"end\":23891,\"start\":23744},{\"end\":24143,\"start\":23893},{\"end\":24576,\"start\":24182},{\"end\":24785,\"start\":24608},{\"end\":25004,\"start\":24787},{\"end\":25234,\"start\":25061},{\"end\":25793,\"start\":25271},{\"end\":25947,\"start\":25816},{\"end\":26287,\"start\":26016},{\"end\":26429,\"start\":26310},{\"end\":26494,\"start\":26448},{\"end\":27117,\"start\":26722},{\"end\":27378,\"start\":27119},{\"end\":27686,\"start\":27380},{\"end\":27929,\"start\":27703},{\"end\":28131,\"start\":28094},{\"end\":28283,\"start\":28185},{\"end\":28324,\"start\":28285},{\"end\":28860,\"start\":28348},{\"end\":28982,\"start\":28862},{\"end\":29286,\"start\":29057},{\"end\":29479,\"start\":29288},{\"end\":29769,\"start\":29513},{\"end\":30190,\"start\":29783},{\"end\":30382,\"start\":30192},{\"end\":30837,\"start\":30415},{\"end\":30951,\"start\":30839},{\"end\":31186,\"start\":30953},{\"end\":31241,\"start\":31212},{\"end\":31576,\"start\":31285},{\"end\":31716,\"start\":31578},{\"end\":31926,\"start\":31718},{\"end\":32254,\"start\":31950},{\"end\":32960,\"start\":32328},{\"end\":33001,\"start\":32962},{\"end\":33324,\"start\":33127},{\"end\":33515,\"start\":33356},{\"end\":33973,\"start\":33602},{\"end\":34029,\"start\":33975},{\"end\":34951,\"start\":34031},{\"end\":35220,\"start\":34953},{\"end\":35499,\"start\":35287},{\"end\":35575,\"start\":35538},{\"end\":35764,\"start\":35632},{\"end\":35819,\"start\":35766},{\"end\":35873,\"start\":35821},{\"end\":35930,\"start\":35875},{\"end\":36516,\"start\":35982},{\"end\":36774,\"start\":36548},{\"end\":36928,\"start\":36861},{\"end\":37290,\"start\":36930},{\"end\":37582,\"start\":37447},{\"end\":37637,\"start\":37584},{\"end\":37691,\"start\":37639},{\"end\":37978,\"start\":37693},{\"end\":38035,\"start\":37980},{\"end\":38835,\"start\":38066},{\"end\":38842,\"start\":38837},{\"end\":38851,\"start\":38844},{\"end\":39235,\"start\":38853},{\"end\":39405,\"start\":39237},{\"end\":39735,\"start\":39465},{\"end\":40189,\"start\":39759},{\"end\":40297,\"start\":40221},{\"end\":40448,\"start\":40299},{\"end\":40663,\"start\":40473},{\"end\":41052,\"start\":40866},{\"end\":41699,\"start\":41092},{\"end\":42023,\"start\":41701},{\"end\":42475,\"start\":42025},{\"end\":42914,\"start\":42648},{\"end\":43101,\"start\":42954},{\"end\":43360,\"start\":43103},{\"end\":43502,\"start\":43386},{\"end\":43651,\"start\":43534},{\"end\":43787,\"start\":43653},{\"end\":44128,\"start\":43789},{\"end\":44223,\"start\":44130},{\"end\":44781,\"start\":44378},{\"end\":44918,\"start\":44783},{\"end\":45011,\"start\":44940},{\"end\":45271,\"start\":45078},{\"end\":45959,\"start\":45360},{\"end\":46257,\"start\":45986},{\"end\":46290,\"start\":46259},{\"end\":46400,\"start\":46356},{\"end\":46560,\"start\":46402},{\"end\":46714,\"start\":46590},{\"end\":46751,\"start\":46716},{\"end\":47589,\"start\":47127},{\"end\":48058,\"start\":47610},{\"end\":48231,\"start\":48110},{\"end\":48319,\"start\":48233},{\"end\":48513,\"start\":48321},{\"end\":48578,\"start\":48538},{\"end\":48767,\"start\":48580},{\"end\":48952,\"start\":48809},{\"end\":49157,\"start\":48990},{\"end\":49211,\"start\":49159},{\"end\":49491,\"start\":49213},{\"end\":49597,\"start\":49493},{\"end\":49725,\"start\":49599},{\"end\":49882,\"start\":49727},{\"end\":50036,\"start\":49884},{\"end\":50172,\"start\":50038},{\"end\":50894,\"start\":50198},{\"end\":51050,\"start\":50896},{\"end\":51214,\"start\":51151},{\"end\":51333,\"start\":51216},{\"end\":51598,\"start\":51469},{\"end\":51792,\"start\":51600},{\"end\":52090,\"start\":51850},{\"end\":52170,\"start\":52092},{\"end\":52331,\"start\":52230},{\"end\":52490,\"start\":52372},{\"end\":52621,\"start\":52492},{\"end\":52704,\"start\":52645},{\"end\":52817,\"start\":52706},{\"end\":53337,\"start\":52910},{\"end\":53603,\"start\":53339},{\"end\":53672,\"start\":53633},{\"end\":54042,\"start\":53704},{\"end\":54383,\"start\":54044},{\"end\":54531,\"start\":54385},{\"end\":54627,\"start\":54557},{\"end\":54940,\"start\":54742},{\"end\":55292,\"start\":54942},{\"end\":55590,\"start\":55307},{\"end\":55945,\"start\":55592},{\"end\":56915,\"start\":56005},{\"end\":57755,\"start\":56917},{\"end\":58019,\"start\":57757},{\"end\":58380,\"start\":58021},{\"end\":59361,\"start\":58382},{\"end\":59681,\"start\":59477},{\"end\":60247,\"start\":59683},{\"end\":60429,\"start\":60249},{\"end\":60825,\"start\":60431},{\"end\":60846,\"start\":60827},{\"end\":61061,\"start\":60913},{\"end\":61251,\"start\":61099},{\"end\":61496,\"start\":61253},{\"end\":61943,\"start\":61498},{\"end\":62508,\"start\":61972},{\"end\":63761,\"start\":62510},{\"end\":63870,\"start\":63774},{\"end\":64128,\"start\":63905},{\"end\":65002,\"start\":64130},{\"end\":65155,\"start\":65004},{\"end\":66034,\"start\":65180},{\"end\":66315,\"start\":66036},{\"end\":66687,\"start\":66351},{\"end\":67516,\"start\":66707},{\"end\":67845,\"start\":67531},{\"end\":68041,\"start\":67847},{\"end\":68475,\"start\":68043},{\"end\":68757,\"start\":68477},{\"end\":69267,\"start\":68759},{\"end\":69688,\"start\":69300},{\"end\":69957,\"start\":69711},{\"end\":69986,\"start\":69981},{\"end\":70300,\"start\":70016},{\"end\":70447,\"start\":70302},{\"end\":70884,\"start\":70495},{\"end\":71097,\"start\":70953},{\"end\":71746,\"start\":71130},{\"end\":72479,\"start\":71827},{\"end\":72642,\"start\":72563},{\"end\":72703,\"start\":72670},{\"end\":72834,\"start\":72790},{\"end\":73180,\"start\":72889},{\"end\":73454,\"start\":73211},{\"end\":73658,\"start\":73491},{\"end\":73842,\"start\":73695},{\"end\":74254,\"start\":73844},{\"end\":74290,\"start\":74256},{\"end\":74548,\"start\":74302},{\"end\":74658,\"start\":74565},{\"end\":74720,\"start\":74660},{\"end\":74771,\"start\":74722},{\"end\":74974,\"start\":74880},{\"end\":75124,\"start\":74984},{\"end\":75220,\"start\":75126},{\"end\":75379,\"start\":75222},{\"end\":75706,\"start\":75485},{\"end\":75775,\"start\":75747},{\"end\":76085,\"start\":75777},{\"end\":76259,\"start\":76087},{\"end\":76364,\"start\":76261},{\"end\":76494,\"start\":76366},{\"end\":76939,\"start\":76528},{\"end\":77013,\"start\":76941},{\"end\":77398,\"start\":77055},{\"end\":77726,\"start\":77451},{\"end\":78290,\"start\":77778},{\"end\":78365,\"start\":78292},{\"end\":78621,\"start\":78415},{\"end\":78786,\"start\":78680},{\"end\":78843,\"start\":78818},{\"end\":78996,\"start\":78845},{\"end\":79618,\"start\":79074},{\"end\":79729,\"start\":79644},{\"end\":79814,\"start\":79731},{\"end\":80099,\"start\":79835},{\"end\":80498,\"start\":80101},{\"end\":80718,\"start\":80539},{\"end\":81208,\"start\":80739},{\"end\":81331,\"start\":81284},{\"end\":81552,\"start\":81369},{\"end\":81703,\"start\":81554},{\"end\":81856,\"start\":81705},{\"end\":82410,\"start\":81858},{\"end\":82546,\"start\":82412},{\"end\":82830,\"start\":82548},{\"end\":82979,\"start\":82832},{\"end\":83174,\"start\":82981},{\"end\":83407,\"start\":83196},{\"end\":83855,\"start\":83409},{\"end\":83981,\"start\":83885},{\"end\":84243,\"start\":84104},{\"end\":84466,\"start\":84326},{\"end\":84548,\"start\":84468},{\"end\":84735,\"start\":84589},{\"end\":84861,\"start\":84737},{\"end\":85479,\"start\":85127},{\"end\":85780,\"start\":85481},{\"end\":85835,\"start\":85782},{\"end\":86142,\"start\":85837},{\"end\":86248,\"start\":86144},{\"end\":86398,\"start\":86292},{\"end\":86514,\"start\":86400},{\"end\":86791,\"start\":86600},{\"end\":87311,\"start\":86793},{\"end\":87431,\"start\":87313},{\"end\":88023,\"start\":87433},{\"end\":88127,\"start\":88025},{\"end\":88320,\"start\":88175},{\"end\":88520,\"start\":88322},{\"end\":88717,\"start\":88556},{\"end\":88793,\"start\":88719},{\"end\":88838,\"start\":88795},{\"end\":89260,\"start\":89099},{\"end\":89460,\"start\":89262},{\"end\":89572,\"start\":89462},{\"end\":89610,\"start\":89588},{\"end\":89814,\"start\":89612},{\"end\":89929,\"start\":89816},{\"end\":90025,\"start\":89962},{\"end\":90369,\"start\":90027},{\"end\":90590,\"start\":90371}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":11362,\"start\":11324},{\"attributes\":{\"id\":\"formula_1\"},\"end\":11516,\"start\":11430},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11730,\"start\":11663},{\"attributes\":{\"id\":\"formula_3\"},\"end\":12050,\"start\":11756},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12171,\"start\":12152},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13440,\"start\":13422},{\"attributes\":{\"id\":\"formula_6\"},\"end\":13825,\"start\":13706},{\"attributes\":{\"id\":\"formula_7\"},\"end\":14082,\"start\":14026},{\"attributes\":{\"id\":\"formula_8\"},\"end\":17070,\"start\":16940},{\"attributes\":{\"id\":\"formula_9\"},\"end\":18219,\"start\":18176},{\"attributes\":{\"id\":\"formula_10\"},\"end\":19108,\"start\":19069},{\"attributes\":{\"id\":\"formula_11\"},\"end\":19575,\"start\":19544},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20077,\"start\":20040},{\"attributes\":{\"id\":\"formula_13\"},\"end\":23010,\"start\":22999},{\"attributes\":{\"id\":\"formula_14\"},\"end\":23316,\"start\":23257},{\"attributes\":{\"id\":\"formula_15\"},\"end\":25060,\"start\":25005},{\"attributes\":{\"id\":\"formula_16\"},\"end\":25270,\"start\":25235},{\"attributes\":{\"id\":\"formula_17\"},\"end\":25815,\"start\":25794},{\"attributes\":{\"id\":\"formula_18\"},\"end\":26015,\"start\":25948},{\"attributes\":{\"id\":\"formula_19\"},\"end\":26447,\"start\":26430},{\"attributes\":{\"id\":\"formula_20\"},\"end\":26721,\"start\":26495},{\"attributes\":{\"id\":\"formula_21\"},\"end\":27702,\"start\":27687},{\"attributes\":{\"id\":\"formula_22\"},\"end\":28093,\"start\":27930},{\"attributes\":{\"id\":\"formula_23\"},\"end\":28184,\"start\":28132},{\"attributes\":{\"id\":\"formula_24\"},\"end\":28347,\"start\":28325},{\"attributes\":{\"id\":\"formula_25\"},\"end\":29020,\"start\":28983},{\"attributes\":{\"id\":\"formula_26\"},\"end\":29512,\"start\":29480},{\"attributes\":{\"id\":\"formula_27\"},\"end\":31211,\"start\":31187},{\"attributes\":{\"id\":\"formula_28\"},\"end\":32311,\"start\":32255},{\"attributes\":{\"id\":\"formula_29\"},\"end\":33064,\"start\":33002},{\"attributes\":{\"id\":\"formula_30\"},\"end\":33126,\"start\":33064},{\"attributes\":{\"id\":\"formula_31\"},\"end\":33355,\"start\":33325},{\"attributes\":{\"id\":\"formula_32\"},\"end\":33601,\"start\":33516},{\"attributes\":{\"id\":\"formula_33\"},\"end\":35286,\"start\":35221},{\"attributes\":{\"id\":\"formula_34\"},\"end\":35537,\"start\":35500},{\"attributes\":{\"id\":\"formula_35\"},\"end\":35631,\"start\":35576},{\"attributes\":{\"id\":\"formula_36\"},\"end\":35981,\"start\":35931},{\"attributes\":{\"id\":\"formula_37\"},\"end\":36547,\"start\":36517},{\"attributes\":{\"id\":\"formula_38\"},\"end\":36860,\"start\":36775},{\"attributes\":{\"id\":\"formula_39\"},\"end\":37446,\"start\":37291},{\"attributes\":{\"id\":\"formula_40\"},\"end\":38065,\"start\":38036},{\"attributes\":{\"id\":\"formula_44\"},\"end\":39464,\"start\":39406},{\"attributes\":{\"id\":\"formula_45\"},\"end\":39758,\"start\":39736},{\"attributes\":{\"id\":\"formula_46\"},\"end\":40220,\"start\":40190},{\"attributes\":{\"id\":\"formula_47\"},\"end\":40472,\"start\":40449},{\"attributes\":{\"id\":\"formula_48\"},\"end\":40865,\"start\":40664},{\"attributes\":{\"id\":\"formula_49\"},\"end\":41091,\"start\":41053},{\"attributes\":{\"id\":\"formula_50\"},\"end\":42647,\"start\":42476},{\"attributes\":{\"id\":\"formula_51\"},\"end\":43385,\"start\":43361},{\"attributes\":{\"id\":\"formula_52\"},\"end\":43533,\"start\":43503},{\"attributes\":{\"id\":\"formula_53\"},\"end\":44360,\"start\":44224},{\"attributes\":{\"id\":\"formula_54\"},\"end\":44939,\"start\":44919},{\"attributes\":{\"id\":\"formula_55\"},\"end\":45077,\"start\":45012},{\"attributes\":{\"id\":\"formula_56\"},\"end\":45359,\"start\":45272},{\"attributes\":{\"id\":\"formula_57\"},\"end\":46355,\"start\":46291},{\"attributes\":{\"id\":\"formula_58\"},\"end\":46589,\"start\":46561},{\"attributes\":{\"id\":\"formula_59\"},\"end\":47126,\"start\":46752},{\"attributes\":{\"id\":\"formula_60\"},\"end\":48109,\"start\":48059},{\"attributes\":{\"id\":\"formula_61\"},\"end\":48537,\"start\":48514},{\"attributes\":{\"id\":\"formula_62\"},\"end\":48808,\"start\":48768},{\"attributes\":{\"id\":\"formula_63\"},\"end\":48989,\"start\":48953},{\"attributes\":{\"id\":\"formula_64\"},\"end\":50197,\"start\":50173},{\"attributes\":{\"id\":\"formula_65\"},\"end\":51150,\"start\":51051},{\"attributes\":{\"id\":\"formula_66\"},\"end\":51468,\"start\":51334},{\"attributes\":{\"id\":\"formula_67\"},\"end\":51849,\"start\":51793},{\"attributes\":{\"id\":\"formula_68\"},\"end\":52229,\"start\":52171},{\"attributes\":{\"id\":\"formula_69\"},\"end\":52371,\"start\":52332},{\"attributes\":{\"id\":\"formula_70\"},\"end\":52644,\"start\":52622},{\"attributes\":{\"id\":\"formula_71\"},\"end\":52909,\"start\":52818},{\"attributes\":{\"id\":\"formula_72\"},\"end\":53632,\"start\":53604},{\"attributes\":{\"id\":\"formula_73\"},\"end\":53703,\"start\":53673},{\"attributes\":{\"id\":\"formula_74\"},\"end\":54556,\"start\":54532},{\"attributes\":{\"id\":\"formula_75\"},\"end\":54702,\"start\":54628},{\"attributes\":{\"id\":\"formula_76\"},\"end\":54741,\"start\":54702},{\"attributes\":{\"id\":\"formula_77\"},\"end\":55975,\"start\":55946},{\"attributes\":{\"id\":\"formula_78\"},\"end\":56004,\"start\":55975},{\"attributes\":{\"id\":\"formula_79\"},\"end\":59406,\"start\":59362},{\"attributes\":{\"id\":\"formula_80\"},\"end\":59476,\"start\":59406},{\"attributes\":{\"id\":\"formula_81\"},\"end\":61098,\"start\":61062},{\"attributes\":{\"id\":\"formula_82\"},\"end\":63773,\"start\":63762},{\"attributes\":{\"id\":\"formula_83\"},\"end\":63904,\"start\":63871},{\"attributes\":{\"id\":\"formula_84\"},\"end\":65179,\"start\":65156},{\"attributes\":{\"id\":\"formula_85\"},\"end\":69980,\"start\":69958},{\"attributes\":{\"id\":\"formula_86\"},\"end\":70015,\"start\":69987},{\"attributes\":{\"id\":\"formula_87\"},\"end\":70494,\"start\":70448},{\"attributes\":{\"id\":\"formula_88\"},\"end\":70952,\"start\":70885},{\"attributes\":{\"id\":\"formula_89\"},\"end\":71826,\"start\":71747},{\"attributes\":{\"id\":\"formula_90\"},\"end\":72562,\"start\":72480},{\"attributes\":{\"id\":\"formula_91\"},\"end\":72669,\"start\":72643},{\"attributes\":{\"id\":\"formula_92\"},\"end\":72789,\"start\":72704},{\"attributes\":{\"id\":\"formula_93\"},\"end\":72888,\"start\":72835},{\"attributes\":{\"id\":\"formula_94\"},\"end\":73210,\"start\":73181},{\"attributes\":{\"id\":\"formula_95\"},\"end\":73694,\"start\":73659},{\"attributes\":{\"id\":\"formula_96\"},\"end\":74301,\"start\":74291},{\"attributes\":{\"id\":\"formula_97\"},\"end\":74564,\"start\":74549},{\"attributes\":{\"id\":\"formula_98\"},\"end\":74879,\"start\":74772},{\"attributes\":{\"id\":\"formula_99\"},\"end\":74983,\"start\":74975},{\"attributes\":{\"id\":\"formula_100\"},\"end\":75484,\"start\":75380},{\"attributes\":{\"id\":\"formula_101\"},\"end\":76527,\"start\":76495},{\"attributes\":{\"id\":\"formula_102\"},\"end\":77054,\"start\":77014},{\"attributes\":{\"id\":\"formula_103\"},\"end\":77416,\"start\":77399},{\"attributes\":{\"id\":\"formula_104\"},\"end\":78414,\"start\":78366},{\"attributes\":{\"id\":\"formula_105\"},\"end\":78817,\"start\":78787},{\"attributes\":{\"id\":\"formula_106\"},\"end\":79073,\"start\":78997},{\"attributes\":{\"id\":\"formula_107\"},\"end\":79834,\"start\":79815},{\"attributes\":{\"id\":\"formula_108\"},\"end\":80738,\"start\":80719},{\"attributes\":{\"id\":\"formula_109\"},\"end\":81283,\"start\":81209},{\"attributes\":{\"id\":\"formula_110\"},\"end\":81368,\"start\":81332},{\"attributes\":{\"id\":\"formula_111\"},\"end\":83195,\"start\":83175},{\"attributes\":{\"id\":\"formula_112\"},\"end\":83884,\"start\":83856},{\"attributes\":{\"id\":\"formula_113\"},\"end\":84103,\"start\":83982},{\"attributes\":{\"id\":\"formula_114\"},\"end\":84325,\"start\":84244},{\"attributes\":{\"id\":\"formula_115\"},\"end\":84588,\"start\":84549},{\"attributes\":{\"id\":\"formula_116\"},\"end\":85126,\"start\":84862},{\"attributes\":{\"id\":\"formula_117\"},\"end\":86291,\"start\":86249},{\"attributes\":{\"id\":\"formula_118\"},\"end\":86599,\"start\":86515},{\"attributes\":{\"id\":\"formula_119\"},\"end\":88174,\"start\":88128},{\"attributes\":{\"id\":\"formula_120\"},\"end\":88555,\"start\":88521},{\"attributes\":{\"id\":\"formula_121\"},\"end\":89098,\"start\":88839},{\"attributes\":{\"id\":\"formula_122\"},\"end\":89587,\"start\":89573},{\"attributes\":{\"id\":\"formula_123\"},\"end\":89961,\"start\":89930},{\"attributes\":{\"id\":\"formula_0\"},\"end\":11362,\"start\":11324},{\"attributes\":{\"id\":\"formula_1\"},\"end\":11516,\"start\":11430},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11730,\"start\":11663},{\"attributes\":{\"id\":\"formula_3\"},\"end\":12050,\"start\":11756},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12171,\"start\":12152},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13440,\"start\":13422},{\"attributes\":{\"id\":\"formula_6\"},\"end\":13825,\"start\":13706},{\"attributes\":{\"id\":\"formula_7\"},\"end\":14082,\"start\":14026},{\"attributes\":{\"id\":\"formula_8\"},\"end\":17070,\"start\":16940},{\"attributes\":{\"id\":\"formula_9\"},\"end\":18219,\"start\":18176},{\"attributes\":{\"id\":\"formula_10\"},\"end\":19108,\"start\":19069},{\"attributes\":{\"id\":\"formula_11\"},\"end\":19575,\"start\":19544},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20077,\"start\":20040},{\"attributes\":{\"id\":\"formula_13\"},\"end\":23010,\"start\":22999},{\"attributes\":{\"id\":\"formula_14\"},\"end\":23316,\"start\":23257},{\"attributes\":{\"id\":\"formula_15\"},\"end\":25060,\"start\":25005},{\"attributes\":{\"id\":\"formula_16\"},\"end\":25270,\"start\":25235},{\"attributes\":{\"id\":\"formula_17\"},\"end\":25815,\"start\":25794},{\"attributes\":{\"id\":\"formula_18\"},\"end\":26015,\"start\":25948},{\"attributes\":{\"id\":\"formula_19\"},\"end\":26447,\"start\":26430},{\"attributes\":{\"id\":\"formula_20\"},\"end\":26721,\"start\":26495},{\"attributes\":{\"id\":\"formula_21\"},\"end\":27702,\"start\":27687},{\"attributes\":{\"id\":\"formula_22\"},\"end\":28093,\"start\":27930},{\"attributes\":{\"id\":\"formula_23\"},\"end\":28184,\"start\":28132},{\"attributes\":{\"id\":\"formula_24\"},\"end\":28347,\"start\":28325},{\"attributes\":{\"id\":\"formula_25\"},\"end\":29020,\"start\":28983},{\"attributes\":{\"id\":\"formula_26\"},\"end\":29512,\"start\":29480},{\"attributes\":{\"id\":\"formula_27\"},\"end\":31211,\"start\":31187},{\"attributes\":{\"id\":\"formula_28\"},\"end\":32311,\"start\":32255},{\"attributes\":{\"id\":\"formula_29\"},\"end\":33064,\"start\":33002},{\"attributes\":{\"id\":\"formula_30\"},\"end\":33126,\"start\":33064},{\"attributes\":{\"id\":\"formula_31\"},\"end\":33355,\"start\":33325},{\"attributes\":{\"id\":\"formula_32\"},\"end\":33601,\"start\":33516},{\"attributes\":{\"id\":\"formula_33\"},\"end\":35286,\"start\":35221},{\"attributes\":{\"id\":\"formula_34\"},\"end\":35537,\"start\":35500},{\"attributes\":{\"id\":\"formula_35\"},\"end\":35631,\"start\":35576},{\"attributes\":{\"id\":\"formula_36\"},\"end\":35981,\"start\":35931},{\"attributes\":{\"id\":\"formula_37\"},\"end\":36547,\"start\":36517},{\"attributes\":{\"id\":\"formula_38\"},\"end\":36860,\"start\":36775},{\"attributes\":{\"id\":\"formula_39\"},\"end\":37446,\"start\":37291},{\"attributes\":{\"id\":\"formula_40\"},\"end\":38065,\"start\":38036},{\"attributes\":{\"id\":\"formula_44\"},\"end\":39464,\"start\":39406},{\"attributes\":{\"id\":\"formula_45\"},\"end\":39758,\"start\":39736},{\"attributes\":{\"id\":\"formula_46\"},\"end\":40220,\"start\":40190},{\"attributes\":{\"id\":\"formula_47\"},\"end\":40472,\"start\":40449},{\"attributes\":{\"id\":\"formula_48\"},\"end\":40865,\"start\":40664},{\"attributes\":{\"id\":\"formula_49\"},\"end\":41091,\"start\":41053},{\"attributes\":{\"id\":\"formula_50\"},\"end\":42647,\"start\":42476},{\"attributes\":{\"id\":\"formula_51\"},\"end\":43385,\"start\":43361},{\"attributes\":{\"id\":\"formula_52\"},\"end\":43533,\"start\":43503},{\"attributes\":{\"id\":\"formula_53\"},\"end\":44360,\"start\":44224},{\"attributes\":{\"id\":\"formula_54\"},\"end\":44939,\"start\":44919},{\"attributes\":{\"id\":\"formula_55\"},\"end\":45077,\"start\":45012},{\"attributes\":{\"id\":\"formula_56\"},\"end\":45359,\"start\":45272},{\"attributes\":{\"id\":\"formula_57\"},\"end\":46355,\"start\":46291},{\"attributes\":{\"id\":\"formula_58\"},\"end\":46589,\"start\":46561},{\"attributes\":{\"id\":\"formula_59\"},\"end\":47126,\"start\":46752},{\"attributes\":{\"id\":\"formula_60\"},\"end\":48109,\"start\":48059},{\"attributes\":{\"id\":\"formula_61\"},\"end\":48537,\"start\":48514},{\"attributes\":{\"id\":\"formula_62\"},\"end\":48808,\"start\":48768},{\"attributes\":{\"id\":\"formula_63\"},\"end\":48989,\"start\":48953},{\"attributes\":{\"id\":\"formula_64\"},\"end\":50197,\"start\":50173},{\"attributes\":{\"id\":\"formula_65\"},\"end\":51150,\"start\":51051},{\"attributes\":{\"id\":\"formula_66\"},\"end\":51468,\"start\":51334},{\"attributes\":{\"id\":\"formula_67\"},\"end\":51849,\"start\":51793},{\"attributes\":{\"id\":\"formula_68\"},\"end\":52229,\"start\":52171},{\"attributes\":{\"id\":\"formula_69\"},\"end\":52371,\"start\":52332},{\"attributes\":{\"id\":\"formula_70\"},\"end\":52644,\"start\":52622},{\"attributes\":{\"id\":\"formula_71\"},\"end\":52909,\"start\":52818},{\"attributes\":{\"id\":\"formula_72\"},\"end\":53632,\"start\":53604},{\"attributes\":{\"id\":\"formula_73\"},\"end\":53703,\"start\":53673},{\"attributes\":{\"id\":\"formula_74\"},\"end\":54556,\"start\":54532},{\"attributes\":{\"id\":\"formula_75\"},\"end\":54702,\"start\":54628},{\"attributes\":{\"id\":\"formula_76\"},\"end\":54741,\"start\":54702},{\"attributes\":{\"id\":\"formula_77\"},\"end\":55975,\"start\":55946},{\"attributes\":{\"id\":\"formula_78\"},\"end\":56004,\"start\":55975},{\"attributes\":{\"id\":\"formula_79\"},\"end\":59406,\"start\":59362},{\"attributes\":{\"id\":\"formula_80\"},\"end\":59476,\"start\":59406},{\"attributes\":{\"id\":\"formula_81\"},\"end\":61098,\"start\":61062},{\"attributes\":{\"id\":\"formula_82\"},\"end\":63773,\"start\":63762},{\"attributes\":{\"id\":\"formula_83\"},\"end\":63904,\"start\":63871},{\"attributes\":{\"id\":\"formula_84\"},\"end\":65179,\"start\":65156},{\"attributes\":{\"id\":\"formula_85\"},\"end\":69980,\"start\":69958},{\"attributes\":{\"id\":\"formula_86\"},\"end\":70015,\"start\":69987},{\"attributes\":{\"id\":\"formula_87\"},\"end\":70494,\"start\":70448},{\"attributes\":{\"id\":\"formula_88\"},\"end\":70952,\"start\":70885},{\"attributes\":{\"id\":\"formula_89\"},\"end\":71826,\"start\":71747},{\"attributes\":{\"id\":\"formula_90\"},\"end\":72562,\"start\":72480},{\"attributes\":{\"id\":\"formula_91\"},\"end\":72669,\"start\":72643},{\"attributes\":{\"id\":\"formula_92\"},\"end\":72789,\"start\":72704},{\"attributes\":{\"id\":\"formula_93\"},\"end\":72888,\"start\":72835},{\"attributes\":{\"id\":\"formula_94\"},\"end\":73210,\"start\":73181},{\"attributes\":{\"id\":\"formula_95\"},\"end\":73694,\"start\":73659},{\"attributes\":{\"id\":\"formula_96\"},\"end\":74301,\"start\":74291},{\"attributes\":{\"id\":\"formula_97\"},\"end\":74564,\"start\":74549},{\"attributes\":{\"id\":\"formula_98\"},\"end\":74879,\"start\":74772},{\"attributes\":{\"id\":\"formula_99\"},\"end\":74983,\"start\":74975},{\"attributes\":{\"id\":\"formula_100\"},\"end\":75484,\"start\":75380},{\"attributes\":{\"id\":\"formula_101\"},\"end\":76527,\"start\":76495},{\"attributes\":{\"id\":\"formula_102\"},\"end\":77054,\"start\":77014},{\"attributes\":{\"id\":\"formula_103\"},\"end\":77416,\"start\":77399},{\"attributes\":{\"id\":\"formula_104\"},\"end\":78414,\"start\":78366},{\"attributes\":{\"id\":\"formula_105\"},\"end\":78817,\"start\":78787},{\"attributes\":{\"id\":\"formula_106\"},\"end\":79073,\"start\":78997},{\"attributes\":{\"id\":\"formula_107\"},\"end\":79834,\"start\":79815},{\"attributes\":{\"id\":\"formula_108\"},\"end\":80738,\"start\":80719},{\"attributes\":{\"id\":\"formula_109\"},\"end\":81283,\"start\":81209},{\"attributes\":{\"id\":\"formula_110\"},\"end\":81368,\"start\":81332},{\"attributes\":{\"id\":\"formula_111\"},\"end\":83195,\"start\":83175},{\"attributes\":{\"id\":\"formula_112\"},\"end\":83884,\"start\":83856},{\"attributes\":{\"id\":\"formula_113\"},\"end\":84103,\"start\":83982},{\"attributes\":{\"id\":\"formula_114\"},\"end\":84325,\"start\":84244},{\"attributes\":{\"id\":\"formula_115\"},\"end\":84588,\"start\":84549},{\"attributes\":{\"id\":\"formula_116\"},\"end\":85126,\"start\":84862},{\"attributes\":{\"id\":\"formula_117\"},\"end\":86291,\"start\":86249},{\"attributes\":{\"id\":\"formula_118\"},\"end\":86599,\"start\":86515},{\"attributes\":{\"id\":\"formula_119\"},\"end\":88174,\"start\":88128},{\"attributes\":{\"id\":\"formula_120\"},\"end\":88555,\"start\":88521},{\"attributes\":{\"id\":\"formula_121\"},\"end\":89098,\"start\":88839},{\"attributes\":{\"id\":\"formula_122\"},\"end\":89587,\"start\":89573},{\"attributes\":{\"id\":\"formula_123\"},\"end\":89961,\"start\":89930},{\"attributes\":{\"id\":\"formula_0\"},\"end\":11362,\"start\":11324},{\"attributes\":{\"id\":\"formula_1\"},\"end\":11516,\"start\":11430},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11730,\"start\":11663},{\"attributes\":{\"id\":\"formula_3\"},\"end\":12050,\"start\":11756},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12171,\"start\":12152},{\"attributes\":{\"id\":\"formula_5\"},\"end\":13440,\"start\":13422},{\"attributes\":{\"id\":\"formula_6\"},\"end\":13825,\"start\":13706},{\"attributes\":{\"id\":\"formula_7\"},\"end\":14082,\"start\":14026},{\"attributes\":{\"id\":\"formula_8\"},\"end\":17070,\"start\":16940},{\"attributes\":{\"id\":\"formula_9\"},\"end\":18219,\"start\":18176},{\"attributes\":{\"id\":\"formula_10\"},\"end\":19108,\"start\":19069},{\"attributes\":{\"id\":\"formula_11\"},\"end\":19575,\"start\":19544},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20077,\"start\":20040},{\"attributes\":{\"id\":\"formula_13\"},\"end\":23010,\"start\":22999},{\"attributes\":{\"id\":\"formula_14\"},\"end\":23316,\"start\":23257},{\"attributes\":{\"id\":\"formula_15\"},\"end\":25060,\"start\":25005},{\"attributes\":{\"id\":\"formula_16\"},\"end\":25270,\"start\":25235},{\"attributes\":{\"id\":\"formula_17\"},\"end\":25815,\"start\":25794},{\"attributes\":{\"id\":\"formula_18\"},\"end\":26015,\"start\":25948},{\"attributes\":{\"id\":\"formula_19\"},\"end\":26447,\"start\":26430},{\"attributes\":{\"id\":\"formula_20\"},\"end\":26721,\"start\":26495},{\"attributes\":{\"id\":\"formula_21\"},\"end\":27702,\"start\":27687},{\"attributes\":{\"id\":\"formula_22\"},\"end\":28093,\"start\":27930},{\"attributes\":{\"id\":\"formula_23\"},\"end\":28184,\"start\":28132},{\"attributes\":{\"id\":\"formula_24\"},\"end\":28347,\"start\":28325},{\"attributes\":{\"id\":\"formula_25\"},\"end\":29020,\"start\":28983},{\"attributes\":{\"id\":\"formula_26\"},\"end\":29512,\"start\":29480},{\"attributes\":{\"id\":\"formula_27\"},\"end\":31211,\"start\":31187},{\"attributes\":{\"id\":\"formula_28\"},\"end\":32311,\"start\":32255},{\"attributes\":{\"id\":\"formula_29\"},\"end\":33064,\"start\":33002},{\"attributes\":{\"id\":\"formula_30\"},\"end\":33126,\"start\":33064},{\"attributes\":{\"id\":\"formula_31\"},\"end\":33355,\"start\":33325},{\"attributes\":{\"id\":\"formula_32\"},\"end\":33601,\"start\":33516},{\"attributes\":{\"id\":\"formula_33\"},\"end\":35286,\"start\":35221},{\"attributes\":{\"id\":\"formula_34\"},\"end\":35537,\"start\":35500},{\"attributes\":{\"id\":\"formula_35\"},\"end\":35631,\"start\":35576},{\"attributes\":{\"id\":\"formula_36\"},\"end\":35981,\"start\":35931},{\"attributes\":{\"id\":\"formula_37\"},\"end\":36547,\"start\":36517},{\"attributes\":{\"id\":\"formula_38\"},\"end\":36860,\"start\":36775},{\"attributes\":{\"id\":\"formula_39\"},\"end\":37446,\"start\":37291},{\"attributes\":{\"id\":\"formula_40\"},\"end\":38065,\"start\":38036},{\"attributes\":{\"id\":\"formula_44\"},\"end\":39464,\"start\":39406},{\"attributes\":{\"id\":\"formula_45\"},\"end\":39758,\"start\":39736},{\"attributes\":{\"id\":\"formula_46\"},\"end\":40220,\"start\":40190},{\"attributes\":{\"id\":\"formula_47\"},\"end\":40472,\"start\":40449},{\"attributes\":{\"id\":\"formula_48\"},\"end\":40865,\"start\":40664},{\"attributes\":{\"id\":\"formula_49\"},\"end\":41091,\"start\":41053},{\"attributes\":{\"id\":\"formula_50\"},\"end\":42647,\"start\":42476},{\"attributes\":{\"id\":\"formula_51\"},\"end\":43385,\"start\":43361},{\"attributes\":{\"id\":\"formula_52\"},\"end\":43533,\"start\":43503},{\"attributes\":{\"id\":\"formula_53\"},\"end\":44360,\"start\":44224},{\"attributes\":{\"id\":\"formula_54\"},\"end\":44939,\"start\":44919},{\"attributes\":{\"id\":\"formula_55\"},\"end\":45077,\"start\":45012},{\"attributes\":{\"id\":\"formula_56\"},\"end\":45359,\"start\":45272},{\"attributes\":{\"id\":\"formula_57\"},\"end\":46355,\"start\":46291},{\"attributes\":{\"id\":\"formula_58\"},\"end\":46589,\"start\":46561},{\"attributes\":{\"id\":\"formula_59\"},\"end\":47126,\"start\":46752},{\"attributes\":{\"id\":\"formula_60\"},\"end\":48109,\"start\":48059},{\"attributes\":{\"id\":\"formula_61\"},\"end\":48537,\"start\":48514},{\"attributes\":{\"id\":\"formula_62\"},\"end\":48808,\"start\":48768},{\"attributes\":{\"id\":\"formula_63\"},\"end\":48989,\"start\":48953},{\"attributes\":{\"id\":\"formula_64\"},\"end\":50197,\"start\":50173},{\"attributes\":{\"id\":\"formula_65\"},\"end\":51150,\"start\":51051},{\"attributes\":{\"id\":\"formula_66\"},\"end\":51468,\"start\":51334},{\"attributes\":{\"id\":\"formula_67\"},\"end\":51849,\"start\":51793},{\"attributes\":{\"id\":\"formula_68\"},\"end\":52229,\"start\":52171},{\"attributes\":{\"id\":\"formula_69\"},\"end\":52371,\"start\":52332},{\"attributes\":{\"id\":\"formula_70\"},\"end\":52644,\"start\":52622},{\"attributes\":{\"id\":\"formula_71\"},\"end\":52909,\"start\":52818},{\"attributes\":{\"id\":\"formula_72\"},\"end\":53632,\"start\":53604},{\"attributes\":{\"id\":\"formula_73\"},\"end\":53703,\"start\":53673},{\"attributes\":{\"id\":\"formula_74\"},\"end\":54556,\"start\":54532},{\"attributes\":{\"id\":\"formula_75\"},\"end\":54702,\"start\":54628},{\"attributes\":{\"id\":\"formula_76\"},\"end\":54741,\"start\":54702},{\"attributes\":{\"id\":\"formula_77\"},\"end\":55975,\"start\":55946},{\"attributes\":{\"id\":\"formula_78\"},\"end\":56004,\"start\":55975},{\"attributes\":{\"id\":\"formula_79\"},\"end\":59406,\"start\":59362},{\"attributes\":{\"id\":\"formula_80\"},\"end\":59476,\"start\":59406},{\"attributes\":{\"id\":\"formula_81\"},\"end\":61098,\"start\":61062},{\"attributes\":{\"id\":\"formula_82\"},\"end\":63773,\"start\":63762},{\"attributes\":{\"id\":\"formula_83\"},\"end\":63904,\"start\":63871},{\"attributes\":{\"id\":\"formula_84\"},\"end\":65179,\"start\":65156},{\"attributes\":{\"id\":\"formula_85\"},\"end\":69980,\"start\":69958},{\"attributes\":{\"id\":\"formula_86\"},\"end\":70015,\"start\":69987},{\"attributes\":{\"id\":\"formula_87\"},\"end\":70494,\"start\":70448},{\"attributes\":{\"id\":\"formula_88\"},\"end\":70952,\"start\":70885},{\"attributes\":{\"id\":\"formula_89\"},\"end\":71826,\"start\":71747},{\"attributes\":{\"id\":\"formula_90\"},\"end\":72562,\"start\":72480},{\"attributes\":{\"id\":\"formula_91\"},\"end\":72669,\"start\":72643},{\"attributes\":{\"id\":\"formula_92\"},\"end\":72789,\"start\":72704},{\"attributes\":{\"id\":\"formula_93\"},\"end\":72888,\"start\":72835},{\"attributes\":{\"id\":\"formula_94\"},\"end\":73210,\"start\":73181},{\"attributes\":{\"id\":\"formula_95\"},\"end\":73694,\"start\":73659},{\"attributes\":{\"id\":\"formula_96\"},\"end\":74301,\"start\":74291},{\"attributes\":{\"id\":\"formula_97\"},\"end\":74564,\"start\":74549},{\"attributes\":{\"id\":\"formula_98\"},\"end\":74879,\"start\":74772},{\"attributes\":{\"id\":\"formula_99\"},\"end\":74983,\"start\":74975},{\"attributes\":{\"id\":\"formula_100\"},\"end\":75484,\"start\":75380},{\"attributes\":{\"id\":\"formula_101\"},\"end\":76527,\"start\":76495},{\"attributes\":{\"id\":\"formula_102\"},\"end\":77054,\"start\":77014},{\"attributes\":{\"id\":\"formula_103\"},\"end\":77416,\"start\":77399},{\"attributes\":{\"id\":\"formula_104\"},\"end\":78414,\"start\":78366},{\"attributes\":{\"id\":\"formula_105\"},\"end\":78817,\"start\":78787},{\"attributes\":{\"id\":\"formula_106\"},\"end\":79073,\"start\":78997},{\"attributes\":{\"id\":\"formula_107\"},\"end\":79834,\"start\":79815},{\"attributes\":{\"id\":\"formula_108\"},\"end\":80738,\"start\":80719},{\"attributes\":{\"id\":\"formula_109\"},\"end\":81283,\"start\":81209},{\"attributes\":{\"id\":\"formula_110\"},\"end\":81368,\"start\":81332},{\"attributes\":{\"id\":\"formula_111\"},\"end\":83195,\"start\":83175},{\"attributes\":{\"id\":\"formula_112\"},\"end\":83884,\"start\":83856},{\"attributes\":{\"id\":\"formula_113\"},\"end\":84103,\"start\":83982},{\"attributes\":{\"id\":\"formula_114\"},\"end\":84325,\"start\":84244},{\"attributes\":{\"id\":\"formula_115\"},\"end\":84588,\"start\":84549},{\"attributes\":{\"id\":\"formula_116\"},\"end\":85126,\"start\":84862},{\"attributes\":{\"id\":\"formula_117\"},\"end\":86291,\"start\":86249},{\"attributes\":{\"id\":\"formula_118\"},\"end\":86599,\"start\":86515},{\"attributes\":{\"id\":\"formula_119\"},\"end\":88174,\"start\":88128},{\"attributes\":{\"id\":\"formula_120\"},\"end\":88555,\"start\":88521},{\"attributes\":{\"id\":\"formula_121\"},\"end\":89098,\"start\":88839},{\"attributes\":{\"id\":\"formula_122\"},\"end\":89587,\"start\":89573},{\"attributes\":{\"id\":\"formula_123\"},\"end\":89961,\"start\":89930}]", "table_ref": null, "section_header": "[{\"end\":252,\"start\":240},{\"attributes\":{\"n\":\"1\"},\"end\":4814,\"start\":4788},{\"attributes\":{\"n\":\"1.\"},\"end\":5842,\"start\":5836},{\"attributes\":{\"n\":\"2.\"},\"end\":5962,\"start\":5956},{\"attributes\":{\"n\":\"3.\"},\"end\":6073,\"start\":6068},{\"attributes\":{\"n\":\"4.\"},\"end\":6216,\"start\":6210},{\"attributes\":{\"n\":\"1.\"},\"end\":6423,\"start\":6417},{\"attributes\":{\"n\":\"2.\"},\"end\":6687,\"start\":6681},{\"attributes\":{\"n\":\"3.\"},\"end\":6874,\"start\":6869},{\"attributes\":{\"n\":\"4.\"},\"end\":7003,\"start\":6997},{\"attributes\":{\"n\":\"1.1\"},\"end\":7998,\"start\":7979},{\"attributes\":{\"n\":\"1.2\"},\"end\":10555,\"start\":10543},{\"attributes\":{\"n\":\"1.3\"},\"end\":13016,\"start\":12997},{\"attributes\":{\"n\":\"1.4\"},\"end\":14828,\"start\":14820},{\"attributes\":{\"n\":\"1.5\"},\"end\":17434,\"start\":17416},{\"attributes\":{\"n\":\"1.6\"},\"end\":19587,\"start\":19577},{\"attributes\":{\"n\":\"2.1\"},\"end\":22418,\"start\":22397},{\"attributes\":{\"n\":\"2.2\"},\"end\":24180,\"start\":24146},{\"end\":24606,\"start\":24579},{\"end\":26308,\"start\":26290},{\"end\":29055,\"start\":29022},{\"attributes\":{\"n\":\"2.\"},\"end\":29781,\"start\":29772},{\"end\":30413,\"start\":30385},{\"end\":31283,\"start\":31244},{\"end\":31948,\"start\":31929},{\"attributes\":{\"n\":\"3\"},\"end\":32326,\"start\":32313},{\"attributes\":{\"n\":\"4\"},\"end\":42952,\"start\":42917},{\"attributes\":{\"n\":\"5\"},\"end\":44376,\"start\":44362},{\"attributes\":{\"n\":\"6\"},\"end\":45984,\"start\":45962},{\"attributes\":{\"n\":\"7\"},\"end\":47608,\"start\":47592},{\"attributes\":{\"n\":\"8\"},\"end\":55305,\"start\":55295},{\"attributes\":{\"n\":\"8.1\"},\"end\":60911,\"start\":60849},{\"attributes\":{\"n\":\"8.2\"},\"end\":61970,\"start\":61946},{\"attributes\":{\"n\":\"8.2.1\"},\"end\":66349,\"start\":66318},{\"attributes\":{\"n\":\"8.2.2\"},\"end\":66705,\"start\":66690},{\"attributes\":{\"n\":\"8.3\"},\"end\":67529,\"start\":67519},{\"attributes\":{\"n\":\"9\"},\"end\":69298,\"start\":69270},{\"attributes\":{\"n\":\"9.1\"},\"end\":69709,\"start\":69691},{\"attributes\":{\"n\":\"9.2\"},\"end\":71128,\"start\":71100},{\"attributes\":{\"n\":\"9.3\"},\"end\":73489,\"start\":73457},{\"end\":75745,\"start\":75709},{\"attributes\":{\"n\":\"10.1\"},\"end\":77449,\"start\":77418},{\"attributes\":{\"n\":\"10.1.1\"},\"end\":77776,\"start\":77729},{\"attributes\":{\"n\":\"10.1.2\"},\"end\":78678,\"start\":78624},{\"attributes\":{\"n\":\"10.1.3\"},\"end\":79642,\"start\":79621},{\"attributes\":{\"n\":\"10.2\"},\"end\":80537,\"start\":80501},{\"end\":90602,\"start\":90592},{\"end\":90742,\"start\":90732},{\"end\":90896,\"start\":90886},{\"end\":90922,\"start\":90912},{\"end\":90990,\"start\":90980},{\"end\":91137,\"start\":91126},{\"end\":91219,\"start\":91218},{\"end\":91916,\"start\":91905},{\"end\":252,\"start\":240},{\"attributes\":{\"n\":\"1\"},\"end\":4814,\"start\":4788},{\"attributes\":{\"n\":\"1.\"},\"end\":5842,\"start\":5836},{\"attributes\":{\"n\":\"2.\"},\"end\":5962,\"start\":5956},{\"attributes\":{\"n\":\"3.\"},\"end\":6073,\"start\":6068},{\"attributes\":{\"n\":\"4.\"},\"end\":6216,\"start\":6210},{\"attributes\":{\"n\":\"1.\"},\"end\":6423,\"start\":6417},{\"attributes\":{\"n\":\"2.\"},\"end\":6687,\"start\":6681},{\"attributes\":{\"n\":\"3.\"},\"end\":6874,\"start\":6869},{\"attributes\":{\"n\":\"4.\"},\"end\":7003,\"start\":6997},{\"attributes\":{\"n\":\"1.1\"},\"end\":7998,\"start\":7979},{\"attributes\":{\"n\":\"1.2\"},\"end\":10555,\"start\":10543},{\"attributes\":{\"n\":\"1.3\"},\"end\":13016,\"start\":12997},{\"attributes\":{\"n\":\"1.4\"},\"end\":14828,\"start\":14820},{\"attributes\":{\"n\":\"1.5\"},\"end\":17434,\"start\":17416},{\"attributes\":{\"n\":\"1.6\"},\"end\":19587,\"start\":19577},{\"attributes\":{\"n\":\"2.1\"},\"end\":22418,\"start\":22397},{\"attributes\":{\"n\":\"2.2\"},\"end\":24180,\"start\":24146},{\"end\":24606,\"start\":24579},{\"end\":26308,\"start\":26290},{\"end\":29055,\"start\":29022},{\"attributes\":{\"n\":\"2.\"},\"end\":29781,\"start\":29772},{\"end\":30413,\"start\":30385},{\"end\":31283,\"start\":31244},{\"end\":31948,\"start\":31929},{\"attributes\":{\"n\":\"3\"},\"end\":32326,\"start\":32313},{\"attributes\":{\"n\":\"4\"},\"end\":42952,\"start\":42917},{\"attributes\":{\"n\":\"5\"},\"end\":44376,\"start\":44362},{\"attributes\":{\"n\":\"6\"},\"end\":45984,\"start\":45962},{\"attributes\":{\"n\":\"7\"},\"end\":47608,\"start\":47592},{\"attributes\":{\"n\":\"8\"},\"end\":55305,\"start\":55295},{\"attributes\":{\"n\":\"8.1\"},\"end\":60911,\"start\":60849},{\"attributes\":{\"n\":\"8.2\"},\"end\":61970,\"start\":61946},{\"attributes\":{\"n\":\"8.2.1\"},\"end\":66349,\"start\":66318},{\"attributes\":{\"n\":\"8.2.2\"},\"end\":66705,\"start\":66690},{\"attributes\":{\"n\":\"8.3\"},\"end\":67529,\"start\":67519},{\"attributes\":{\"n\":\"9\"},\"end\":69298,\"start\":69270},{\"attributes\":{\"n\":\"9.1\"},\"end\":69709,\"start\":69691},{\"attributes\":{\"n\":\"9.2\"},\"end\":71128,\"start\":71100},{\"attributes\":{\"n\":\"9.3\"},\"end\":73489,\"start\":73457},{\"end\":75745,\"start\":75709},{\"attributes\":{\"n\":\"10.1\"},\"end\":77449,\"start\":77418},{\"attributes\":{\"n\":\"10.1.1\"},\"end\":77776,\"start\":77729},{\"attributes\":{\"n\":\"10.1.2\"},\"end\":78678,\"start\":78624},{\"attributes\":{\"n\":\"10.1.3\"},\"end\":79642,\"start\":79621},{\"attributes\":{\"n\":\"10.2\"},\"end\":80537,\"start\":80501},{\"end\":90602,\"start\":90592},{\"end\":90742,\"start\":90732},{\"end\":90896,\"start\":90886},{\"end\":90922,\"start\":90912},{\"end\":90990,\"start\":90980},{\"end\":91137,\"start\":91126},{\"end\":91219,\"start\":91218},{\"end\":91916,\"start\":91905},{\"end\":252,\"start\":240},{\"attributes\":{\"n\":\"1\"},\"end\":4814,\"start\":4788},{\"attributes\":{\"n\":\"1.\"},\"end\":5842,\"start\":5836},{\"attributes\":{\"n\":\"2.\"},\"end\":5962,\"start\":5956},{\"attributes\":{\"n\":\"3.\"},\"end\":6073,\"start\":6068},{\"attributes\":{\"n\":\"4.\"},\"end\":6216,\"start\":6210},{\"attributes\":{\"n\":\"1.\"},\"end\":6423,\"start\":6417},{\"attributes\":{\"n\":\"2.\"},\"end\":6687,\"start\":6681},{\"attributes\":{\"n\":\"3.\"},\"end\":6874,\"start\":6869},{\"attributes\":{\"n\":\"4.\"},\"end\":7003,\"start\":6997},{\"attributes\":{\"n\":\"1.1\"},\"end\":7998,\"start\":7979},{\"attributes\":{\"n\":\"1.2\"},\"end\":10555,\"start\":10543},{\"attributes\":{\"n\":\"1.3\"},\"end\":13016,\"start\":12997},{\"attributes\":{\"n\":\"1.4\"},\"end\":14828,\"start\":14820},{\"attributes\":{\"n\":\"1.5\"},\"end\":17434,\"start\":17416},{\"attributes\":{\"n\":\"1.6\"},\"end\":19587,\"start\":19577},{\"attributes\":{\"n\":\"2.1\"},\"end\":22418,\"start\":22397},{\"attributes\":{\"n\":\"2.2\"},\"end\":24180,\"start\":24146},{\"end\":24606,\"start\":24579},{\"end\":26308,\"start\":26290},{\"end\":29055,\"start\":29022},{\"attributes\":{\"n\":\"2.\"},\"end\":29781,\"start\":29772},{\"end\":30413,\"start\":30385},{\"end\":31283,\"start\":31244},{\"end\":31948,\"start\":31929},{\"attributes\":{\"n\":\"3\"},\"end\":32326,\"start\":32313},{\"attributes\":{\"n\":\"4\"},\"end\":42952,\"start\":42917},{\"attributes\":{\"n\":\"5\"},\"end\":44376,\"start\":44362},{\"attributes\":{\"n\":\"6\"},\"end\":45984,\"start\":45962},{\"attributes\":{\"n\":\"7\"},\"end\":47608,\"start\":47592},{\"attributes\":{\"n\":\"8\"},\"end\":55305,\"start\":55295},{\"attributes\":{\"n\":\"8.1\"},\"end\":60911,\"start\":60849},{\"attributes\":{\"n\":\"8.2\"},\"end\":61970,\"start\":61946},{\"attributes\":{\"n\":\"8.2.1\"},\"end\":66349,\"start\":66318},{\"attributes\":{\"n\":\"8.2.2\"},\"end\":66705,\"start\":66690},{\"attributes\":{\"n\":\"8.3\"},\"end\":67529,\"start\":67519},{\"attributes\":{\"n\":\"9\"},\"end\":69298,\"start\":69270},{\"attributes\":{\"n\":\"9.1\"},\"end\":69709,\"start\":69691},{\"attributes\":{\"n\":\"9.2\"},\"end\":71128,\"start\":71100},{\"attributes\":{\"n\":\"9.3\"},\"end\":73489,\"start\":73457},{\"end\":75745,\"start\":75709},{\"attributes\":{\"n\":\"10.1\"},\"end\":77449,\"start\":77418},{\"attributes\":{\"n\":\"10.1.1\"},\"end\":77776,\"start\":77729},{\"attributes\":{\"n\":\"10.1.2\"},\"end\":78678,\"start\":78624},{\"attributes\":{\"n\":\"10.1.3\"},\"end\":79642,\"start\":79621},{\"attributes\":{\"n\":\"10.2\"},\"end\":80537,\"start\":80501},{\"end\":90602,\"start\":90592},{\"end\":90742,\"start\":90732},{\"end\":90896,\"start\":90886},{\"end\":90922,\"start\":90912},{\"end\":90990,\"start\":90980},{\"end\":91137,\"start\":91126},{\"end\":91219,\"start\":91218},{\"end\":91916,\"start\":91905}]", "table": null, "figure_caption": "[{\"end\":90730,\"start\":90604},{\"end\":90884,\"start\":90744},{\"end\":90910,\"start\":90898},{\"end\":90978,\"start\":90924},{\"end\":91124,\"start\":90992},{\"end\":91216,\"start\":91140},{\"end\":91277,\"start\":91220},{\"end\":91903,\"start\":91280},{\"end\":92054,\"start\":91919},{\"end\":92402,\"start\":92057},{\"end\":90730,\"start\":90604},{\"end\":90884,\"start\":90744},{\"end\":90910,\"start\":90898},{\"end\":90978,\"start\":90924},{\"end\":91124,\"start\":90992},{\"end\":91216,\"start\":91140},{\"end\":91277,\"start\":91220},{\"end\":91903,\"start\":91280},{\"end\":92054,\"start\":91919},{\"end\":92402,\"start\":92057},{\"end\":90730,\"start\":90604},{\"end\":90884,\"start\":90744},{\"end\":90910,\"start\":90898},{\"end\":90978,\"start\":90924},{\"end\":91124,\"start\":90992},{\"end\":91216,\"start\":91140},{\"end\":91277,\"start\":91220},{\"end\":91903,\"start\":91280},{\"end\":92054,\"start\":91919},{\"end\":92402,\"start\":92057}]", "figure_ref": "[{\"end\":5831,\"start\":5825},{\"end\":6412,\"start\":6405},{\"end\":10136,\"start\":10130},{\"end\":12769,\"start\":12763},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14372,\"start\":14366},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14774,\"start\":14768},{\"end\":15558,\"start\":15552},{\"end\":16419,\"start\":16411},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21014,\"start\":21005},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":25438,\"start\":25432},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":47375,\"start\":47369},{\"end\":55737,\"start\":55731},{\"end\":55838,\"start\":55830},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56174,\"start\":56168},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56913,\"start\":56907},{\"end\":57009,\"start\":57003},{\"end\":57403,\"start\":57397},{\"end\":57630,\"start\":57622},{\"end\":58980,\"start\":58973},{\"end\":59157,\"start\":59150},{\"end\":59531,\"start\":59522},{\"end\":60097,\"start\":60090},{\"end\":60671,\"start\":60662},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":62853,\"start\":62846},{\"end\":63002,\"start\":62995},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":63629,\"start\":63621},{\"end\":63996,\"start\":63987},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":64435,\"start\":64428},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":64607,\"start\":64598},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":65882,\"start\":65873},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":74334,\"start\":74325},{\"end\":75035,\"start\":75028},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":75137,\"start\":75128},{\"end\":75997,\"start\":75990},{\"end\":76019,\"start\":76010},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79283,\"start\":79275},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79422,\"start\":79412},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79549,\"start\":79540},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":83116,\"start\":83108},{\"end\":83638,\"start\":83630},{\"end\":83681,\"start\":83672},{\"end\":85723,\"start\":85716},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":86054,\"start\":86045},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":87671,\"start\":87662},{\"end\":89756,\"start\":89747},{\"end\":5831,\"start\":5825},{\"end\":6412,\"start\":6405},{\"end\":10136,\"start\":10130},{\"end\":12769,\"start\":12763},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14372,\"start\":14366},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14774,\"start\":14768},{\"end\":15558,\"start\":15552},{\"end\":16419,\"start\":16411},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21014,\"start\":21005},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":25438,\"start\":25432},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":47375,\"start\":47369},{\"end\":55737,\"start\":55731},{\"end\":55838,\"start\":55830},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56174,\"start\":56168},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56913,\"start\":56907},{\"end\":57009,\"start\":57003},{\"end\":57403,\"start\":57397},{\"end\":57630,\"start\":57622},{\"end\":58980,\"start\":58973},{\"end\":59157,\"start\":59150},{\"end\":59531,\"start\":59522},{\"end\":60097,\"start\":60090},{\"end\":60671,\"start\":60662},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":62853,\"start\":62846},{\"end\":63002,\"start\":62995},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":63629,\"start\":63621},{\"end\":63996,\"start\":63987},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":64435,\"start\":64428},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":64607,\"start\":64598},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":65882,\"start\":65873},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":74334,\"start\":74325},{\"end\":75035,\"start\":75028},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":75137,\"start\":75128},{\"end\":75997,\"start\":75990},{\"end\":76019,\"start\":76010},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79283,\"start\":79275},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79422,\"start\":79412},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79549,\"start\":79540},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":83116,\"start\":83108},{\"end\":83638,\"start\":83630},{\"end\":83681,\"start\":83672},{\"end\":85723,\"start\":85716},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":86054,\"start\":86045},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":87671,\"start\":87662},{\"end\":89756,\"start\":89747},{\"end\":5831,\"start\":5825},{\"end\":6412,\"start\":6405},{\"end\":10136,\"start\":10130},{\"end\":12769,\"start\":12763},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14372,\"start\":14366},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":14774,\"start\":14768},{\"end\":15558,\"start\":15552},{\"end\":16419,\"start\":16411},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21014,\"start\":21005},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":25438,\"start\":25432},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":47375,\"start\":47369},{\"end\":55737,\"start\":55731},{\"end\":55838,\"start\":55830},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56174,\"start\":56168},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":56913,\"start\":56907},{\"end\":57009,\"start\":57003},{\"end\":57403,\"start\":57397},{\"end\":57630,\"start\":57622},{\"end\":58980,\"start\":58973},{\"end\":59157,\"start\":59150},{\"end\":59531,\"start\":59522},{\"end\":60097,\"start\":60090},{\"end\":60671,\"start\":60662},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":62853,\"start\":62846},{\"end\":63002,\"start\":62995},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":63629,\"start\":63621},{\"end\":63996,\"start\":63987},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":64435,\"start\":64428},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":64607,\"start\":64598},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":65882,\"start\":65873},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":74334,\"start\":74325},{\"end\":75035,\"start\":75028},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":75137,\"start\":75128},{\"end\":75997,\"start\":75990},{\"end\":76019,\"start\":76010},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79283,\"start\":79275},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79422,\"start\":79412},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":79549,\"start\":79540},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":83116,\"start\":83108},{\"end\":83638,\"start\":83630},{\"end\":83681,\"start\":83672},{\"end\":85723,\"start\":85716},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":86054,\"start\":86045},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":87671,\"start\":87662},{\"end\":89756,\"start\":89747}]", "bib_author_first_name": null, "bib_author_last_name": null, "bib_entry": null, "bib_title": null, "bib_author": null, "bib_venue": null}}}, "year": 2023, "month": 12, "day": 17}