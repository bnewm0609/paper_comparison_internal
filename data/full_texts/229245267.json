{"id": 229245267, "updated": "2023-08-28 15:17:05.862", "metadata": {"title": "Please Remember Me: Security Analysis of U2F Remember Me Implementations in The Wild", "authors": "[{\"first\":\"Gwendal\",\"last\":\"Patat\",\"middle\":[]},{\"first\":\"Mohamed\",\"last\":\"Sabt\",\"middle\":[]}]", "venue": null, "journal": null, "publication_date": {"year": 2020, "month": null, "day": null}, "abstract": ". Users and service providers are increasingly aware of the security issues that arise because of password breaches. Recent studies show that password authentication can be made more secure by relying on second-factor authentication (2FA). Supported by leading web service providers, the FIDO Alliance de\ufb01nes the Universal 2nd Factor (U2F) protocols, an industrial standard that proposes a challenge-response 2FA solution. The U2F protocols have been thoughtfully designed to ensure high security. In particular, U2F solutions using dedicated hardware tokens fare well in term of security compared to other 2FA authentication systems. Thus, numerous service providers propose U2F in their authentication settings. Although much attention was paid to make U2F easy to use, many users express inconvenience because of the repeated extra step that it would take to log in. In order to address this, several service providers o\ufb00er a remember me feature that removes the need for 2FA login on trusted devices. In this paper, we present the \ufb01rst systematic analysis of this undocumented feature, and we show that its security implications are not well understood. After introducing the corresponding threat models, we provide an experimental study of existing implementations of remember me . Here, we consider all the supporting websites considered by Yubico. The \ufb01ndings are worrisome: our analyses indicate how bad implementations can make U2F solutions vulnerable to multiple attacks. Moreover, we show that existing implementations do not correspond to the initial security analysis provided by U2F. We also implement two attacks using the identi\ufb01ed design \ufb02aws. Finally, we discuss several countermeasures that make the remember me feature more secure. We end this work by disclosing a practical attack against Facebook in which an attacker can permanently deactivate the enabled 2FA options of a targeted victim without knowing their authentication credentials.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3035054179", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": null, "doi": null}}, "content": {"source": {"pdf_hash": "ba69b3f0be4e7a746e2366437543c5b63f691634", "pdf_src": "ScienceParsePlus", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "830ad688160e6c42e0ce020371d328f2582df745", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/ba69b3f0be4e7a746e2366437543c5b63f691634.txt", "contents": "\nPlease Remember Me: Security Analysis of U2F Remember Me Implementations in The Wild. Actes SSTIC 2020, 18\u00e8me Symposium sur la s\u00e9curit\u00e9 des technologies de l'information et des communications\nSSTIC 2020. 2020\n\nGwendal Patat \nMohamed Sabt \nPlease Remember Me: Security Analysis of U2F Remember Me Implementations in The Wild. Actes SSTIC 2020, 18\u00e8me Symposium sur la s\u00e9curit\u00e9 des technologies de l'information et des communications\nRennes, France2865105SSTIC 2020. 2020Submitted on 11 Jun 2020HAL Id: hal-02865105 https://inria.hal.science/hal-02865105 HAL is a multi-disciplinary open access archive for the deposit and dissemination of sci-entific research documents, whether they are pub-lished or not. The documents may come from teaching and research institutions in France or abroad, or from public or private research centers. L'archive ouverte pluridisciplinaire HAL, est destin\u00e9e au d\u00e9p\u00f4t et \u00e0 la diffusion de documents scientifiques de niveau recherche, publi\u00e9s ou non, \u00e9manant des \u00e9tablissements d'enseignement et de recherche fran\u00e7ais ou \u00e9trangers, des laboratoires publics ou priv\u00e9s. To cite this version:\nUsers and service providers are increasingly aware of the security issues that arise because of password breaches. Recent studies show that password authentication can be made more secure by relying on second-factor authentication (2FA). Supported by leading web service providers, the FIDO Alliance defines the Universal 2nd Factor (U2F) protocols, an industrial standard that proposes a challenge-response 2FA solution. The U2F protocols have been thoughtfully designed to ensure high security. In particular, U2F solutions using dedicated hardware tokens fare well in term of security compared to other 2FA authentication systems. Thus, numerous service providers propose U2F in their authentication settings. Although much attention was paid to make U2F easy to use, many users express inconvenience because of the repeated extra step that it would take to log in. In order to address this, several service providers offer a remember me feature that removes the need for 2FA login on trusted devices. In this paper, we present the first systematic analysis of this undocumented feature, and we show that its security implications are not well understood. After introducing the corresponding threat models, we provide an experimental study of existing implementations of remember me. Here, we consider all the supporting websites considered by Yubico. The findings are worrisome: our analyses indicate how bad implementations can make U2F solutions vulnerable to multiple attacks. Moreover, we show that existing implementations do not correspond to the initial security analysis provided by U2F. We also implement two attacks using the identified design flaws. Finally, we discuss several countermeasures that make the remember me feature more secure. We end this work by disclosing a practical attack against Facebook in which an attacker can permanently deactivate the enabled 2FA options of a targeted victim without knowing their authentication credentials.\n\nIntroduction\n\nPasswords are by far the most popular method of end-user authentication on the web. Password breaches, due for instance to sophisticated phishing attacks, seriously multiply the risk of authentication compromise.\n\nWorse, these risks are compounded by poor user practices, as illustrated by reusing passwords across multiple accounts [26]. Aware of such security issues, a growing number of service providers couple passwords with another authentication factor: this is known as second factor authentication (2FA). The use of 2FA is not new. However, recent studies show that their adoption rate is stagnant over the last five years because of a fragmented ecosystem [5]. Furthermore, most users still use their mobile phone as second factor which can lead to critical security issues like what happened with Twitter CEO Jack Dorsey [17].\n\nIn this context, Google and Yubico join the effort within the FIDO Alliance to standardize a set of 2FA protocols that they call the Universal Second Factor (U2F) authentication. Their design ambition is to guarantee a strong security level (through hardware tokens and cryptographic operations) while maintaining a pleasant user experience. Several formal analyses theoretically show that the U2F authentication protocol actually achieves its security goals [15,21]. Google describe U2F as an opportunity to \"improve the state of the art for practical authentication for real consumers\" [16].\n\nThe starting point of our work is to underline a practical aspect within the U2F implementations that is often overlooked. Indeed, some U2F solutions provide a remember me feature that, once enabled, allows users to authenticate to a given website without presenting their U2F token on a given device. According to [7], this feature is important for better user acceptability. However, to the best of our knowledge, no document specifies how U2F and remember me shall be combined without negatively affecting the security of the resulted protocol.\n\nWe notice that the lack of specifications of the remember me feature brings confusion and contributes to the misconception of U2F solutions. Thus, motivated by Bonneau's framework [4], we start our work by defining a set of security properties upon which we construct our analysis. We also recall the threat models that should be considered when performing security evaluations of U2F.\n\nIn our work, we achieve the first study about the impact of the remember me feature on the overall security. In particular, we inspect the related implementations of all the websites proposing remember me that are included in the Yubico inventory [30] (67 websites in total). Interestingly, we have found that the analyzed U2F solutions use very diverse implementation choices. Then, we uncover several design aspects that can lead to several attacks. For instance, we show that U2F solutions become vulnerable to Man-in-the-Middle attacks, contrary to what is suggested by FIDO [18]. This is unfortunate, since the U2F protocols are designed to protect against such powerful attackers. We verify the soundness of our analyses by conducting several attacks using the identified flaws. In this regard, our paper invalidates the results of [21] and [15] that formally prove the security of U2F protocols.\n\nOur analysis has also pointed out problems related to the recovery methods defined for lost FIDO authenticators. In particular, we disclose a practical attack against Facebook in which attackers are able to permanently deactivate the enabled U2F option in the victims accounts, thereby removing any interest of using U2F. To our surprise, attackers do not need users credentials in order to achieve their attacks; they solely need to get a code received by SMS on the victim's mobile phone. In summary, this paper makes the following contributions:\n\n-we define a general threat model for U2F implementations; -we analyze all remember me solutions, we report undocumented details about their underlying implementations and we evaluate them using our secure design rules; -we identify attacks and weaknesses in the analyzed websites. For each attack, we provide a proper attacker model and point out the corresponding violations regarding our model; -we implement effective scenarios in which attackers can successfully bypass the second factor using a device that has never been remembered before; -we expand our analysis to include the recovery mechanisms. Here, we show how U2F fails its security goals to replace other 2FA solutions. In particular, we reveal unpublished effective attack against Facebook and show its actual practicality. Impatient readers can refer to our demo video. 1\n\n\nRelated Work\n\n\n2FA Solutions\n\nFor a long time the community has been looking beyond passwords to ensure the security of users accounts against credentials breaches [1,29]. The main trend is to employ two-factor authentication, namely to ask users to prove the possession of \"something they have\" in addition to passwords \"something they know\".\n\nOne-time-password (OTP) codes through SMS are one of the 2FA first methods. Despite their popularity, their use is being recently discouraged by the NIST (National Institute of Standards and Technology) [20]. GoogleAuthenticator [22], installed more than 10,000,000 from Google Play, is an Android app that locally generates OTP codes relying on specific algorithms [12,14]. However, these OTP schemes fail to protect against phishing attacks.\n\nHardware tokens [13,24] are deployed to secure accounts, especially for online banking. Those tokens periodically generate an OTP that is valid for a short period of time. Unfortunately, these OTP tokens do not counter phishing attacks neither. More advanced solutions implement challengeresponse 2FA protocols, such as FIDO U2F [25] and PhoneAuth [8], and thus offer protection against phishing attacks. In spite of their security benefits, hardware-backed 2FA solutions suffer from stagnant adoption, as illustrated by Elie Bursztein in his blog [5]. This is because such solutions may be expensive to deploy, and there might be usability issues if the user authenticates in a machine with a USB-C port while she owns a USB-A token, or vice versa.\n\n\n2FA Usability\n\nSince the seminal work of Bonneau et al. [4], much two-factor authentication research has recognized the need for user-friendly implementations to promote adoption. Indeed, Bonneau et al.'s high-level evaluation rated existing two-factor systems as more secure, but generally less usable than passwords. In response to such concern, subsequent 2FA solutions have strived for better usability, hence FIDO U2F protocols. Lang et al. [16] fervently promote the usability of YubiKeys in enterprise environments. However, later results show that the Google experiments were somehow biased, and complement them with more qualitative evaluation.\n\nIndeed, Das et al. [9] distinguish usability from acceptability. Based on users feedback, authors find out that improving usability does not necessarily lead to greater acceptability. Reynolds et al. [23] yield more insights into the usability of YubiKeys in conducting a laboratory and longitudinal experiments in a non-enterprise environment. They noticed, on one hand, that participants have struggled to set their YubiKeys as a second factor of authentication. On the other hand, they were positive regarding YubiKeys and 2FA in general. For wide adoption, authors in [7] state that almost all participants in their usability survey highlight that using remember me made using 2FA solutions more pleasant, especially when regularly accessing the same accounts from the same devices.\n\n\nU2F Security Analysis\n\nBonneau et al. [4] study the security of different web authentication protocols: they provide a set of security benefits that they informally define in order to capture the most common security threats for authentication services. However, its informal nature raises some issues in the security community.\n\nIn 2017, Pereira et al. presented the first formal analysis of FIDO U2F authentication protocol. They modeled the protocol using applied pi-calculus and prove their model using ProVerif. Their analysis showed that the protocol is secure under their threats model if the FIDO client does not miss the optional step of verifying the appID. Nevertheless, the defined model starts after the establishment of the TLS channel between the FIDO client and the relying party. In order to address this limitation, Jacomme and Kremer [15] performed another formal analysis while taking into account computers malware and communication through TLS. The ProVerif tool was also used to accomplish the automated protocol analysis.\n\nThe formal analysis of [15] includes the remember me functionality. The model assumes that this functionality is only implemented by some secret value that is stored locally in the FIDO client, and that the relying party verifies alongside the fingerprint of users devices (e.g. IP addresses, browsers version, etc.). We can see that their model suffers from a main shortcoming; it does not faithfully consider various aspects of remember me. Indeed, it does not cover any technical detail related to HTTP cookies. In addition, it does not regard the fact that the relying parties actually store the remember me cookies. Moreover, our experiments show that the fingerprint of users device has little or no impact: remember me cookies remain valid even if used from different browsers running on different computers that are connected from different countries. Therefore, the results of [15] have a limited scope, and many of our identified attacks are not relevant to their model.\n\n\nFIDO U2F Protocol\n\nIn this section, we provide an overview of the Universal 2nd Factor (U2F) protocol functionality. This overview covers its two main operations, including the process of registering and authenticating a user to a service provider.\n\n\nIndustrial Context\n\nThe FIDO (Fast IDentity Online) Alliance [2] is an industrial working group that proposes technical standards for online authentication systems reducing or discarding the reliance on passwords. This alliance was formed by PayPal, Lenovo and NokNok Labs in 2013 to define an interoperable set of authentication mechanisms that reinforce a fragmented ecosystem. Two protocols are being developed, namely the Universal Authentication Framework (UAF) [19] and the Universal Second Factor authentication (U2F) [25]. Both protocols might work either together, or independently. Here, we focus solely on the U2F protocols.\n\nIn contrast to UAF, the U2F protocol does not supplant the use of passwords. Indeed, a user logs on using a username and a password, then the protocol prompts the user to present a second factor device for authentication. U2F often requires carrying a distinct hardware token. A popular U2F-compliant token is Yubico Security Key called YubiKey [31]. This device comes mostly as a hardware USB token and can support NFC communications. To use this token, users need only to insert it in the USB port of the computer and to press a button during authentication. An important feature is that it is independent of the operating system.\n\nSince recently, the FIDO U2F gains increasing support from online services and web browsers. Today, 67 service providers achieve U2F compliance [30], including Google Account (such as Gmail and YouTube), Dropbox and Facebook. In addition, major browsers add native support for the U2F protocol: Google Chrome (since version 38), Opera (since version 40) and Firefox (enabled by default since version 67). We include Figure 1 that shows the current U2F adoption status in the most popular browsers. Thus, U2F knows increasing adoption from both websites and hardware token manufacturers.\n\n\nU2F Terminology\n\nFIDO details the U2F specifications by employing a particular set of terminology that we describe. Henceforth, we will restrict ourselves to use the FIDO jargon. The U2F protocol defines three main actors: FIDO Authenticator, FIDO Client and Relying Party. The FIDO Authenticator is responsible for generating asymmetric key pair and signing authentication challenges. For better security, it shall be a special-purpose hardware device that no entity has a direct access to its The FIDO Client is typically a web browser that relays the messages between the FIDO Authenticator and the Relying Party. Moreover, it processes some FIDO messages by performing further verification or collecting more information. The Relying Party (RP) includes two entities: (1) the web server to which the user authenticates, and (2) the server that can verify the authenticity of the used FIDO Authenticator. The RP communicates with the FIDO Client through some JavaScript API [3].\n\n\nProtocol Outline\n\nU2F is a challenge-response protocol. Its core idea is standard public key cryptography in which the FIDO authenticator generates a new key pair and shares the associated public key to the registering relying party. For an ongoing authentication, the RP will send a request to the user's authenticator to be signed. Several cryptographic algorithms can be used. For instance, the Yubikey NEO uses RSA-1024 and RSA-2048. The U2F protocol supports two operations: registration and authentication. The two operations are illustrated in Figures 2 and 3. Below, we provide more details.\n\n\nRegistration\n\nThe goal is to register a FIDO authenticator by binding it with a user account. As shown in Figure 2, it begins by the relying party issuing a random challenge. Upon reception, the FIDO client creates a client data structure that includes the type of the request (registration or authentication) and the received challenge. The client sends the hash of this structure alongside some RP related values, called the origin, to the authenticator. After the device is touched by the user, the authenticator creates a new credential in the form of a public key K pub , a private key K priv and a key handle. The key handle is used to refer to the K priv . The handle and the K pub are returned back to the client with the associated signature to ensure that the client data was not tampered with. The final step of registration concludes with the relying party storing the handle and the K pub that it received from the client.   Authentication The aim of this process, illustrated in Figure 3, is to prove the possession of a registered key pair. After verifying the user's credentials, the relying party retrieves the associated K pub and key handle from the registration process. The RP sends the key handle with a new challenge to the FIDO client. In turn, the client builds a new client data structure (including the challenge) to the authenticator that signs it using the K priv retrieved from the key handle.  \n\n\nThreat Models and Initial Security Analysis\n\nThe primary goal of any authentication system is to prevent attackers from impersonating other users. In 2FA systems, attackers should break the two factors to breach the solution security. In this paper, we focus on the concrete security offered by U2F solutions when coupled with hardware-backed tokens, such as YubiKeys. Thus, we always assume that attackers could guess users passwords. However, we suppose that attackers cannot break into FIDO authenticators, neither compromise cryptographic primitives. In particular, they cannot extract K priv from the related key handle. Now, we introduce the threat model that we use to capture our security analyses. We first define the different attacker capabilities that the U2F specifications take into account in their risk analysis [18]. Second, we recall the definitions of the relevant security benefits from Bonneau et al. [4] in order to account for maximum coherence in our study. Third, we show a brief security analysis of the U2F authentication protocol, as it is presented in [25]. This will play the role of a reference analysis when we examine the effective security of U2F solutions with remember me in Section 6.4.\n\n\nAttacker Capabilities\n\nWe provide a list of attacker capabilities that are relevant to the four entities participating in the U2F protocol: FIDO authenticator, FIDO client, the communication channel, and the relying party. The capabilities are presented in this respective order. The Physical Proximity [PP] capability consists in having closer access to users belongings, including the FIDO authenticator and even to their mobile phones. This capability allows attackers to steal objects or observe the authentication process. The Man-in-the-Browser [MitB] capability allows attackers to compromise the FIDO client. Thus, for instance, attackers might install malicious plugins or read browsers files, such as cookies.\n\nA Man-In-The-Middle [MitM] capability refers to scenarios in which attackers could sneak into the secure communication channels between the FIDO client and the relying party. The Intrusion capability consists in breaking into the relying party, allowing attackers to read, write or execute arbitrary code inside the authentication context of the RP. This capability also concerns curious or malicious relying parties attempting to authenticate to other users' service providers.\n\n\nSecurity Benefits\n\nWe consider the following security benefits that are originally defined by Bonneau et al. [4]. We adapt their definitions to U2F: SB1 Resilient-to-Physical-Observation: Means that attackers cannot impersonate users by observing the authentication process one or several times. This includes shoulder surfing and recording users keyboard.\n\nSB2 Resilient-to-Input-Observation: Intercepting users input by a malicious software (e.g. keylogger) is not sufficient to achieve illegitimate authentication. Our definition covers intercepting communications with the U2F authenticator.\n\nSB3 Resilient-to-Communication-Observation: Eavesdropping all the web communications offers no advantage to attackers.\n\nSB4 Resilient-to-Leaks: Breaking into a relying party does not make impersonations on the same relying party any smoother.\n\n\nSB5 Resilient-to-Leaks-from-Other-Verifiers:\n\nIntrusion into one relying party is of no help when compromising another relying party. This prevents \"hack once, hack everywhere\".\n\nSB6 Resilient-to-Phishing: Spoofing relying parties shall not leverage any attempt of impersonation against the real RP.\n\nSB7 Resilient-to-Theft: Stealing the FIDO authenticator is not enough to be able to use it.\n\nSB8 Long-Term-Resilient-to-Theft: This refers to the ability by users of effortlessly revoking registered authenticators. This is critical, for instance, in case of theft or during the process of deprecating vulnerable hardware tokens.\n\n\nSB9\n\nUnlinkable: This privacy-preserving benefit implies that two or more colluding relying parties cannot find out by combining their information whether the same user is authenticating to both using the same authenticator. \n\n\nYubikey's Security Analysis\n\nHere, we will use the attacker capabilities and the security benefits defined above in order to evaluate the U2F protocol based on the hardware FIDO authenticator from Yubico, namely Yubikey. As already mentioned, we solely focus on the second factor; the first factor, usually based on passwords, is not regarded. Figure 4 shows a summary of our security analysis. We notice that our findings are consistent with Bonneau et al.'s [4] (except for the Resilient-to-Theft). Simply put, YubiKey-backed U2F solutions, as defined in the standard and without considering actual implementations, fare well in security when compared to other authentication solutions.\n\nThe U2F protocol instructs users consent in both registration and authentication. This is achieved by requesting users to press a button on the YubiKey. In fact, the only physical and observable interaction with the YubiKey is this button pressing. Thus, attackers leveraging the Physical Proximity capability can only observe this action that reveals nothing about the used YubiKey. Consequently, this allows U2F solutions to be Resilient-to-Physical-Observation.\n\nAttackers can, by the Physical Proximity capability, steal YubiKeys and effortlessly use them to sign U2F challenges. Therefore, YubiKeys are not Resilient-to-Theft. However, users can limit the damage of theft by revoking their registered FIDO authenticator, hence granting the Long-Term-Resilient-to-Theft benefit.\n\nAttackers have no access to the internal memory of YubiKeys. Indeed, the U2F interface is the only way to communicate with this hardware token. Thus, by one of the MitB, the MitM and the Intrusion capabilities, attackers are able to observe the exchanged data between the authenticator and the relying party: users' K pub , their key handle, fresh session data (e.g. challenges) and valid signatures. In this setting, the security of the U2F protocol is formally proven in [10] and [15] even if the attackers have access to these data. This corresponds to the benefits: Resilient-to-Input-Observation, Resilient-to-Communication-Observation and Resilient-to-Phishing.\n\nMore on the Intrusion capability, according to [18], the security of the U2F authentication should also be guaranteed under the hypothesis of corrupted or malicious relying parties. The U2F protocol specifies that the RP only stores the different K pub and key handles of users. As previously assumed, key handles cryptographically protect K priv , and no attacker can break into this protection. Pereira et al. in [21] prove that such information leak from relying parties is not enough to impersonate users on the same or on another RP. This concerns the Resilient-to-Leaks and Resilient-to-Leaks-from-Other-Verifiers benefits. Moreover, if we do not consider side-channel attacks, colluding relying parties cannot conclude whether the same YubiKey was behind different public and key handles, thereby leading to the Unlinkable benefit.\n\n\nU2F Remember Me\n\nAs shown in the previous section, authentication solutions based on FIDO U2F achieve a decent level of security when associated with a hardware-backed authenticator. Nevertheless, such solutions require from users to constantly carry around yet another object. For Yubikeys, the used authenticator must be inserted into a USB-port to complete their authentication. Very often, users tend to keep their authenticators connected to their personal computers in order to avoid continually repeating this extra step.\n\nRegardless of all the efforts made to improve usability, users still express inconvenience, especially when they regularly log in the same services from the same computers. In [7], authors show the general displeasure of users experimenting the 2FA solution of the Carnegie Mellon University. The study shows that users found it annoying despite its ease of use.\n\nTherefore, some relying parties propose a remember me option making the 2FA login necessary only once in a while for the device or browser on which it is enabled. Once this feature activated, users will solely be asked for their credentials. This option knows wide approval; in [7] study, almost all participants (95%) stated that using remember me made the 2FA authentication more pleasant.\n\nObviously, enabling the remember me functionality vastly improves the user experience. However, this does not come without any security consequence. Indeed, it removes the added security of the U2F protocol if the attacker gains physical access to the victim's computer. Still, the attacker would need the victim's account credentials. If strictly implemented, only authentication attempts from a remembered computer shall succeed without the second factor. In other words, the computer (or the browser) plays the role of the authenticator, except for the step implying consent. Thus, the security analysis of the Section 4.3 should be still valid.\n\nYet, the FIDO U2F standard does not say anything about this feature. As a result, websites did not wait and provided their own solution. Although U2F specifications are public, we could not find any documentation that describes the remember me design, or even assesses its security guarantees. We think that it becomes important to have good understanding of it, since its wide adoption has a profound implication on the security of U2F-compliant authentication services. This is even more important for websites, such as Facebook, in which the remember me option is ticked by default.\n\nIn this section, we first briefly present the overall architecture of remember me solutions. Second, we distill the attributes that should be followed to achieve a good security level.\n\n\nExhaustive Remember Me\n\nThere are 67 services supporting U2F [30]. We do not consider OSbased tools, such as computer login with Linux PAM. Instead, we focus on web service providers. We have done exhaustive research and we only found five relying parties proposing remember me: Gmail, Dropbox, Facebook, FastMail and login.gov. Note that we mention Gmail as an example of the Google Suite (Youtube, Google Apps, etc) as they all provide the same authentication mechanisms.\n\n\nRemember Me Overview\n\nWe notice that all the examined remember me solutions (refer to the next section for more details) rely on browser cookies. The principle is simple: the cookies are stored by the browser that sends them back with the next authentication request to the related relying party. Despite their disparities, all the solutions of remember me share almost the same user experience. Below, we introduce the U2F protocol when we take cookies into consideration.\n\n\nActivate Remember Me while Authentication\n\nWhen not yet enabled, each time users sign in, they can choose to activate remember me by ticking the corresponding box. For Facebook and Google accounts, the checkbox is ticked by default. As for deactivation, there is no trivial way to make the service provider forget the remembered device. Simply put, it is straightforward to remember a device, but not trivial to forget a remembered one.\n\nThe U2F authentication workflow remains almost unchanged from Figure 3: users send their credentials and receive a new challenge from the relying party. The connected authenticator signs the challenge with the private key extracted from the key handle. At this stage, a checkbox proposes to remember the device. If ticked, the relying party generates a cookie after a successful authentication (except for Facebook that generates the cookie before any authentication attempt). The RP stores the generated cookie in its database and sends it to the FIDO client. The browser associates this cookie to the RP domain. The cookie has special enabled flags:\n\nsecure: this means that the cookie is transmitted only over a secure channel, typically HTTP over Transport Layer Security (TLS), so that it cannot be eavesdropped. -httpOnly: this implies that JavaScript cannot read this cookie, thereby mitigating Cross-Site Scripting (XSS) attacks. These flags improve upon the security of these U2F cookies: resist XSS exploitation and are sent only over HTTPS connection. Attackers still can bypass such a protection by the Cross-Site Tracing (XST) attack -a combination of XSS and HTTP TRACE method [11]. It is worth noting that this method is mostly deprecated today, as modern browsers prevent TRACE methods from being made.\n\n\nUse Remember Me While Authentication\n\nOnce the option is activated, the U2F cookies are sent alongside users credentials to the corresponding relying party. The RP verifies that at least one of these cookies is both valid and bound to the authenticating users. Otherwise, the RP starts the U2F second factor mechanism. In contrast to a complete U2F authentication, no explicit consent is provided, since no action is required from users.\n\n\nRemember Me Evaluation Criteria\n\nNote that each relying party has its own solution for remember me. For our comparative study, four properties are distinguished: EC1 Inner-Structure: For each service provider, we look at the content of the generated remember me cookies. In particular, we note several aspects: size, fixed patterns and their different fields when we succeed in decoding them.\n\nEC2 Ephemerality: remember me cookies shall be persistent with short lifetime. The goal is to set a temporal limit to cookie exploits. We consider that any expiring duration greater than one month does not satisfy Ephemerality.\n\nEC3 Effectiveness-of-Revocation: In real life, every once in a while, users might like to revoke some remembered computers because of, for instance, planned replacement of obsolete equipment. Another reason might also be the loss or the theft of personal devices, so that attackers would have shorter time to finish their exploit. Furthemore, relying parties might deprecate some versions of authenticators (because of recently discovered vulnerabilities [6]), hence revoking anything in relation with these authenticators. Here, we do not consider the trivial solution consisting of deleting the U2F cookies on the local storage device, since cookies can be easily copied and stored elsewhere. Surprisingly, no relying party proposes an easy-to-use interface to clear the remember me option. Thus, we explore two less-trivial solutions: (1) revocation by changing the associated FIDO authenticator, and (2) revocation by changing users credentials (i.e. passwords).\n\nEC4 SameSite: Cookies have two security related flags: secure and httpOnly. In addition to these flags, cookies are now using an attribute named SameSite defined by Google and Mozilla in [28].\n\nIt is used to prevent Cross-Site Request Forgery (CSRF) and it takes the values None, Lax or Strict. In Strict mode, the cookie is not sent on cross-site queries, but only on resources that have the cookie domain as the origin. In Lax mode, the browser will send the cookie with a very limited number of cross-site queries, such as GET queries. As its name indicates, the None mode allows cookies to deactivate the SameSite feature. Major browsers, including Chrome, Firefox, Edge, Safari, Opera and their mobile versions, already support this feature [27].\n\n\nU2F Remember Me in the Wild\n\nIn this section, we shed light on the remember me solutions in the wild. We start by describing the settings and the framework of our experiments. Then, we examine the different websites proposing this feature: Google, Dropbox, Facebook, FastMail and login.gov. We end this section by revisiting the security analysis of U2F when remember me is taken into account.\n\n\nExperimentation Settings\n\nIn our experiments, our U2F environment is as follows: - \n\n\nTesting Methodology\n\nAll our observations have been obtained through various experiments. For each relying party, we have created two users with different passwords and different FIDO Authenticators. We used two geographically separate networks with two different computers. Thus, each experiment has been repeated several times with different settings: user, relying party, Authenticator, FIDO Client. We did not observe any different behavior when the settings change for a particular experiment. For our evaluation, we created several cookies for different users on the same device or for different devices of the same user. Then, we test our criteria as follows:\n\n-Inner-Structure: First, we generate three cookies for each user by varying these settings: the user's password, the FIDO Authenticator, and the trusted computer. In total, we obtain six cookies for each service provider. Then, we study whether a fixed pattern exists and relates to a specific setting. Finally, we try to decode their value by using the following encoding schemes: Base64, Base32 and Base16. We also attempt to forge a new valid cookie by modifying the values of the existing cookies. Of course, this says nothing about their (un)forgeability. -Ephemerality: We generate several cookies and look at their expiration date. We are aware that a cookie might be only a pointer to a server database entry, and therefore their lifetime might not be equal to their browser expiration date. Thus, once generated, we waited for one month and also for six months without connection and then tested the cookies again. Of course, our experiments do not prove that a 10-year expiration duration actually means such a lifetime. However, we do at least show that they have an unnecessarily long lifetime. Moreover, to support our results, we have a 3-year-old remember me cookie for a Gmail account and we still can use it to bypass the U2F authentication. -Effectiveness-of-revocation: The authentication page for any relying party does not offer the possibility to \"forget\" a remembered computer. Here, we test other revocation means that may make relying parties clear their database and refuse a previously-generated cookie. Our methodology is: we first generate a remember me cookie on a given device for a given user, then we perform one of our revocation methods, and finally we attempt to log in using the same cookie. If the relying party asks to insert the U2F token, we conclude that the revocation method is effective. As mentioned above, we evaluate two revocation means: (1) changing the associated FIDO authenticator to a new one, or (2) modifying the account password. For each test, we properly log out and clear all session cookies (except for the remember me one) before evaluating the effectiveness of any revocation method. -SameSite: Here, we only look at the corresponding cookie flag and note its value: none, lax or strict.\n\n\nRemember Me Implementations\n\nThroughout this section, for brevity and consistency, each \"Evaluation Criteria\" defined above will be referred to with its short title. Now, we provide our observations regarding widely-deployed remember me implementations. Figure 5 summarizes our findings.\n\nGoogle Google proposes the remember me option across its different services: Gmail, YouTube and G Suites. During authentication, when a second factor is registered, the remember me checkbox is selected by default. After a successful authentication, if no further action taken by the user, a new cookie named SMSV is created and associated to the domain accounts.google.com. The cookie expires after ten years of its creation, thus not satisfying our definition of Ephemerality. Experimentally, we test several remember me cookies and verify that they were still valid after one month, six months and even three years of their generation. Google sets the SameSite attribute to None.\n\nGoogle U2F cookies always begin with the same first six characters that are equal to \"ADHTe-\". Its length is 119 characters. We did not succeed in decoding this structure using different encoding schemes, including Base64, Base32 and Base16. Cookie values seem random, but we have no clue how the cookie values are generated.\n\nRegarding cookies revocation, the effective method is to revoke the associated FIDO authenticator (Effectiveness-of-Revocation (1)). Indeed, a user that changes her password still bypasses the U2F authentication in remembered devices. We also verify the possibility of devices revocation using the Google dashboard. 3 We found that even if users force the remembered devices to sign out or indicate that they do not recognize them, the remember me cookies do not only remain valid, but also browsers do not clear them out.\n\nGoogle maintains only one cookie on the same device even if several users select the remember me option. We noticed that the cookie length grows with respect to the number of remembered users. This shared cookie is not revoked when a new cookie is created. A peculiar observation is that the cookies keep their size despite users revocation. This makes us assume that actual remember me values are stored on the RP side.\n\nDropbox Dropbox allows users to remember their FIDO authenticators. The cookie is associated to the .www.dropbox.com domain. Its name is trusted_$i, where $i is the user's account numerical ID. Its expiration date is set after ten years, thereby breaking the Ephemerality property. In addition, our 1-month and 6-month old cookies were still valid to bypass U2F. The SameSite attribute is set to None. The cookie value, encoded in Base64, has the structure:\n\n{ \" value \" : { \" h \" : $0 , \" tkey \" : $1 } , \" signature \" : $2 } where $0, $1 and $2 are respectively 46, 15 and 46 characters long and are bound together: switching values from different valid tuples is not enough to forge a cookie even for the same user. Despite its decodable structure, we cannot tell exactly how the cookie values are generated, or what cryptographic algorithms are used.\n\nDuring our evaluation, we noticed that the values of tkey and signature systematically change for each newly created cookie. However, h remains constant for a specific account and will only differ when the user modifies their password. In addition, we notice that if users enter an old password again, they do not find previously generated h. Thus, modifying users' passwords is an effective method of cookies revocation (Effectiveness-of-Revocation (2)). However, users who revoke their FIDO authenticator and associate a new one to Dropbox still can log into their account without presenting the recently added authenticator on remembered devices. The consequence is that the RP cannot safely revoke vulnerable authenticators, since new ones (possibly more secure) can be bypassed with cookies generated for the old ones.\n\nThe cookie values are not bound to the remembered device: a valid tuple (h, tkey, signature) remains valid on other devices and browsers. Unlike Google, Dropbox generates a different cookie for each remember me even on the same computer. If different users share the same computer, the browser will transmit all the remember me cookies of all users each time one user attempts to authenticate.\n\nFacebook Facebook, with its 2.41 billion monthly active users [32], implements remember me with two cookies, called datr and sb, linked to the .facebook.com domain. To our surprise, these cookies work independently: users need to transmit only one of them to bypass the U2F authentication. Moreover, erasing only one of them has no apparent impact. Unlike all other relying parties, the remember me cookies are set before users authentication; just when users arrive at Facebook homepage. They expire two years after their creation, hence not satisfying the Ephemerality property. In addition, experimentally, cookies keep their validity even after six months. The SameSite attribute is set to None for both cookies. We could not decode the cookie values.\n\nThe default behavior is to remember authenticating users unless otherwise expressed. If a user does nothing, and so accepts to remember their device, the datr and sb cookies, which are already sent to users, will be linked to their account and stored in the authentication service database. Similar to Google, this makes us think that some entries must be stored in the RP side. This process implies that multiple users can have the same cookie when using the same browser. Thus, dangerously, two users sharing the same computer but using two different FIDO authenticators get the same remember me cookie. This is because the cookies are produced independently of users or their devices (generated before logging in).\n\nAs for revocation, we have not succeeded in revoking valid cookies. Indeed, users who modify their passwords and replace their authenticator by a new one still can bypass U2F when one of the datr and sb cookies is presented. Thus, we think that Effectiveness-of-Revocation is not implemented at all. We argue that this property greatly exacerbates several attacks, since one leaked cookie can never be dissociated from their linked accounts. The scenario becomes worse if multiple users share the same cookie.\n\nFastMail FastMail supports U2F into its authentication system. It provides a remember me implementation similar to the one from Dropbox. After a successful authentication, if the users tick the remember me checkbox, a U2F cookie is set into the FIDO client with the .www.fastmail.com domain. The cookie is called f_$i, where $i is a string of eight hexadecimal numbers representing the user's account ID. The cookie expires ten years after its creation, thus falling Ephemerality property. Similar to the other solutions, a 1-month and a 6-month-old cookies are still valid. As for the SameSite attribute, it is set to None.\n\nWhen we decode the cookies, we observe the following structure:\n1;$0;1;$1\nwhere $0 is the epoch of creation and $1 is the variable size. This string seems random, but we do not know how it was produced. Furthermore, similar to Facebook, there is no way to forget remembered computers: the cookies continue bypassing U2F despite modifying users' FIDO authenticator or setting new password. We can say that Effectiveness-of-Revocation is not available.\n\nlogin.gov login.gov is an official web service of the United States government providing a single sign-on (SSO) solution for multiple participating government agencies. The registration of a 2AF or U2F authenticator is mandatory to sign up in order to increase the authentication security.\n\nSimilar to most relying parties that we study, login.gov creates the remember me cookie after a successful authentication. The option checkbox is not ticked by default. The cookie is named remember_device, and it is linked to the secure.login.gov domain. Its expiration date is set after one month of its creation, which makes it the only site to satisfy our definition of Ephemerality. The implementation of login.gov is distinguished from other relying parties by two characteristics: (1) a cookie cannot be used after one or six months (even if we manually change the browser expiration date), and (2) the SameSite attribute takes the Lax value.\n\nAfter decoding, we observe that cookie values are of size 366 characters. There is no discernible structure that can attest their forgeability. In addition, all valid cookies can be revoked by removing the registered FIDO authenticator and adding a new one (Effectiveness-of-Revocation(1)). Changing users password does not clear the entries of the associated remember me devices.\n\n\nDiscussion.\n\nOur findings highlight four points. First, the structure of remember me cookies are often opaque, which hinders our understanding about their values generation. Second, the implemented solutions set a lifetime unnecessarily long for these cookies. It is true that remember me makes U2F more pleasant, however, there is no study showing that enforcing the second factor on trusted devices every now and then would decrease the acceptability of such solutions. Third, it is peculiar that revocation is not easier. Worse still, two service providers, namely Facebook and FastMail, do not offer such a possibility to invalidate previously generated cookies. This can be partially explained by the fact that cookies are not bound to both the authenticator and the user account (including password). We believe that it is important to be able to forget devices that were remembered in the past. Fourth, the SameSite is still widely overlooked even for major service providers.\n\n\nSecurity Analysis of U2F with Remember Me\n\nHere, we provide more insights by revisiting the security analysis using the security benefits of Section 4. We will show the actual security resulted from a bad remember me implementation when combined with U2F authentication protocols.\n\nAs usual, we consider that attackers can easily defeat the security offered by passwords. We highlight our findings by evaluating the U2F solutions of the examined relying parties through the security benefits that we defined in Section 4.2 and that are widely used across the literature [4]. Our results are summarized in the Figure 6.\n\nFirst of all, the resulted security analysis cannot be better than the one given in Section 4.3. Therefore, current remember me solutions are not Resilient-to-Theft. However, the use of remember me worsens this scenario: the attackers impersonate the victim and remember their computers. Then, the attackers can discreetly return the FIDO authenticator. The generated remember me cookie will allow the attackers to bypass the U2F verification. Thus, the victim might never be aware of the theft. Second, Facebook and FastMail do not allow cookies revocations, and therefore the compromise will remain valid even if the victim replaces their authenticator. Furthermore, the lack of revocations in some relying parties makes the underlying solutions not Long-Term-Resilient-to-Theft.\n\nGiven their nature, cookies are vulnerable to any form of observation: physical, internal and communication. No ephemerality exacerbates the situation: stolen U2F cookies can be used as a long-term master key that bypasses U2F authentication. This is due to the fact that a cookie is independent from its remember me environment, since it is only bound to a user account and a given relying party within a static setting. Furthermore, the current implementations of remember me rely on web cookies that are locally stored with long validity duration. Malicious software inside the browser can achieve their goals by several means. First, the easiest way is to get the cookies and transmit their values to the attackers. Second, because no integrity protection is guaranteed, they can modify the cookies domain or set off their attributes: secure and http-only. Thus, attackers can easily steal the cookies through XSS vulnerabilities or phishing websites. To recapitulate, the physical, Man-inthe-Browser and Man-in-the-Middle capabilities allow attackers to compromise the Resilient-to-Physical-Observation, Resilient-to-Input-Observation and Resilient-to-Communication-Observation security benefits. We note that each compromise leads to a large number of impersonation before the expiration date.\n\nProtection against servers intrusion is ensured by the U2F protocols, since no exploitable data are stored on the RP. Nevertheless, our experiments show that relying parties tend to store the remember me cookies in order to be able to revoke them in case, for instance, the U2F authenticator is replaced by another one. To the best of our knowledge, there is no document specifying how these cookies shall be securely stored. Assuming no secure storage, any intrusion into the RP database allows retrieving all users cookies. Here, we can claim that Facebook implementation is the most vulnerable one, since the cookies are created even before any successful authentication. Simply put, bad remember me implementations are evaluated not to be Resilient-to-Leaks. However, we observe that U2F cookies are implemented, so that they are strongly bound to the generating relying parties. Therefore, we suggest that the examined solutions are Resilient-to-Leaks-from-Other-Verifiers.\n\n\nFig. 6. Comparative Analysis of Authentication Mechanisms Regarding Security Benefits\n\nConcerning the Resilient-to-Phishing property, we note that the direct damage is limited, since the U2F cookies will be only transmitted to the origin domain. However, a malicious website can still set some traps to the user by including some HTML elements to perform CSRF attacks. We consider a successful impersonation via cross-site authentication queries as a kind of phishing attacks.\n\nAs for the Unlinkable property, it is hard to assess anything about it from the structures that we obtained while decoding the cookie values. No technical detail plausibly stipulates any deducible relationship with the associated users account.\n\n\nAttacks and Weaknesses\n\nIn the previous section, we have shown that the analyzed U2F solutions use very diverse remember me implementations that do contain bad design choices, such as long validity duration of more than six months. We now exploit these design flaws to bypass U2F without compromising the trusted remembered devices.\n\nTwo attacks are defined and implemented. For each attack scenario, we provide a detailed description discussing the attacker settings, and how the remember me cookies are exploited. Unless mentioned otherwise, our attacks work successfully against all the previously examined relying parties. We begin this section by recalling the required threats model.\n\n\nThreats Model\n\nIn order to perform our attacks, we consider a weaker version of the capabilities defined in Section 4.1. Indeed, we only consider two capabilities: (1) an attacker who can include a malicious plugin into a browser, and (2) an attacker executing some phishing attacks.\n\nOne may argue that our threats model are not plausible. At first glance, one may say that such attacks will trivially defeat any authentication mechanism. Nevertheless, we argue that many U2F design choices are motivated to mitigate these powerful attackers (access to passwords, Manin-the-Browser, etc.). For instance, the FIDO Security Reference [18] claims to resist \"online attacks by adversaries able to actively manipulate network traffic\". All parties supporting U2F adoption (e.g. Google, W3C) think that such a threat model is reasonable enough for wide adoption. We have just considered the created threat model by FIDO and shown that several attacks are still possible because of the remember me feature.\n\nFurthermore, we suppose that the remembered devices are trustworthy, and no malicious software run on them.\n\n\nRemember Me on Untrusted Device\n\nThe remember me feature, as its currently implemented, shifts the security of the U2F authentication to a small file saved into the browser file system. Recovering the value of this file allows attackers to bypass the U2F verification step from other devices for a long time. The U2F cookies have well-identified names and format for each relying party. Thus, attackers would have no problem pinpointing them if they get access to the remembered devices. However, we suppose that attackers cannot compromise these devices, since we assume that users only remember trusted devices.\n\nOur attack starts from this observation: remember me cookies are not bound to their remembered devices. We validate this observation through various experiments. In particular, for a given user on a given relying party, we generate the remember me cookie on computer \"A\". Then, the cookie is copied into computer \"B\" that was never remembered before. Computers \"A\" and \"B\" use different browsers and are connected to separate networks. Finally, we test if U2F is bypassed on computer \"B\". Our experiments confirm that all the analyzed relying parties have their cookies independent from the remember me environment. We also perform the experiment in which the same cookie is used to establish two parallel connections. We notice that no RP finds this behavior suspicious.\n\nWe implemented the following scenario. The attacker succeeds in installing some malicious browser plugin in an untrusted device. The malicious plugin can copy cookies and modify queries content before transmission. Somehow, the victim would like to access to their account using this untrusted device. Of course, the victim will not tick the remember me option while authenticating. Now, the malicious plugin alters the authentication query by selecting the remember me checkbox, and thereby, unbeknownst to the victim, creating a U2F cookie. This is true because we can remember devices without explicit consent from users. Finally, the plugin copies the cookie and sends it to the attacker who can exploit it. These hijacked cookies in the wild make hopeless some relying parties that do not offer the possibility to revoke them.\n\n\nCross-Site Request Forgery\n\nAs we explained, the remember me cookies are valuable; getting their values is enough for successful impersonation in all the relying parties that we inspected. The previous scenario implies that attackers somehow would put their hands on these values and use them from other computers. Nevertheless, there is another attack vector against cookies: attackers can just ask victims to transmit their cookies to accomplish their malicious queries. At first sight, this assumption does not sound plausible, but this is how browsers deal with cookies by default. Indeed, cookies are sent by the browser to the relying party when an HTTP request starts, and they are sent back from the relying party when their content is edited. This default behavior has caused the well-known Cross-Site Request Forgery (CSRF) attack.\n\nUnfortunately, none of the studied websites, except for login.gov, leverage the SameSite attribute: Google, Dropbox, Facebook and Fast-Mail use the None mode, while login.gov uses the Lax mode. Therefore, attackers can take advantage from this, since any cross-site authentication request from a remembered device would make the browser include the remember me cookie, and thereby bypassing the U2F authentication.\n\nWe implement CSRF by including some HTML elements that force the browser into sending HTTP(s) queries to a remembered relying party. This does not require any user intervention, e.g. invisible forms submitted via JavaScript. The vulnerability comes from the fact that the browser will gladly include all the associated cookies. Therefore, assuming these requests contain valid credentials, U2F is bypassed unless the SameSite flag is properly set.\n\n\nCountermeasures\n\nYubico describes U2F as \"a protocol that offers protection from phishing and Man-in-the-Middle attacks\". U2F gets many of its security properties from its challenge-response nature, and the fact that the cryptographic keys never leave the trusted hardware token. This comes in contradiction with how remember me is implemented through cookies. Indeed, these cookies play the role of a master key that allows users to bypass their second factor. However, we show that these cookies are not just stored on the trusted devices, but also are sent over the Internet and are stored on the RP side. Therefore, phishing and MitM attacks become possible, thereby raising security issues as we demonstrated in the previous sections.\n\nThus, we believe that U2F and remember me cookies do not go well together. As a result, we propose to keep the challenge-response logic even when remember me is activated. Indeed, we suggest that the remember me process triggers the generation of a soft U2F token. Here, the FIDO Client, namely the browser, would generate a random key and a key pair. Then, the latter is encrypted using the former to compute a key handler that is sent to the RP alongside with the associated public key. The RP registers this soft token and associates it to the authenticating user. This will not raise a compatibility issue, since most relying parties already allow users to register more than one authenticator. During authentication on a trusted device, the RP should detect the presence of a soft token, and automatically switches to it. The U2F authentication protocol runs normally except for the step that requires users consent. Indeed, we think that it would be better for acceptability that the RP sets the attribute isFreshUserVerificationRequired from the U2F standard as false in order to carry out the complete authentication without any action from the user.\n\nAssuming that remembered devices are trustworthy, we can easily show that (refer to Section 4) such a solution is Resilient-to-Communication-Observation, Resilient-to-Leaks, Resilient-to-Leaks-from-Other-Verifiers and Resilient-to-Phishing. Obviously, the remember me threat model is not compatible with the Resilient-to-Physical-Observation and Resilient-to-Input-Observation benefits, since this would break the assumption about trusted devices.\n\nWe did not provide any reference implementation, because we believe that each RP would adapt it to suit its own flow. Given our study in Section 6, we recommend the following properties:\n\n-Short-Lifetime: remember me tokens shall be persistent with short lifetime. A secure implementation shall automatically clear out users soft tokens once in a while in order to force the use of the authenticator. -Ease-of-Revocation: users should be able to forget remembered devices in more intuitive way. Moreover, any authenticator revocation or password modification shall result in revoking all the remembered devices by the user. -Notification: users should be informed about newly remembered devices. Enforcing this property limits attacks leveraging the lack of integrity protection of remember me queries. There is still one last property that we discuss: Hard-to-use-Elsewhere. As its name indicates, the remember me feature is intended to recognize some computers as personal or trustworthy. Therefore, the RP should accept the soft tokens if, and only if, they are used from the remembered device in which they were generated. In other words, if an attacker succeeds in retrieving the secret keys of U2F soft tokens, they shall be unable to bypass the U2F second factor authentication by merely using them from another device. This property is hard to accomplish. We leave the question of strong binding with the remembered device for future work.\n\n\nPractical Attack Against Facebook\n\nSimilarly to passwords, the relying parties supporting U2F define a couple of policies in case of losing or forgetting the FIDO authenticator. The most used recovery method is to support alternative authentication methods, so that users can regain access to the account to delete (deassociate) the lost or stolen authenticator from their account. We stress that the recovery method should guarantee a decent level of security, since it allows users to deactivate their U2F authentication. Therefore, sending a reset link to a backup email is not satisfactory, especially when the email provider does not support any 2FA mechanism.\n\nThus, the relying parties enable multiple forms of 2FA, so that users can apply any to access to their account. In practice, we notice that the relying parties always enable at least another 2FA mechanism for recovery purposes; the most popular one is SMS-based OTP. Ironically, the design of FIDO U2F was motivated to replace these 2FA solutions that offer less security. Readers can refer to [16] for in-depth analysis.\n\nIn all the relying parties that we examined (namely Google, Dropbox, Facebook, FastMail and login.gov), the settings interface imperatively asks for a phone number before enabling the U2F authentication. This number is used to receive OTP in case the FIDO authenticator is lost or stolen. Users experience is slightly different for Google, since the phone number is required for the account creation, and is automatically associated when U2F is activated.\n\nIt is straightforward to see that the resulted security is as weak as the weakest enabled 2FA. The deployed U2F solutions allow attackers to target a weaker 2FA mechanism in order to permanently deactivate the enabled U2F authentication. The attack scenario is as follows: the attackers guess users credentials, compromise SMS-based OTP and disable U2F authentication. The remember me feature can make this scenario worse, because users will not detect such a modification in their security settings.\n\nHowever, this scenario relies on the assumption that attackers must first compromise users credentials. Even though such an assumption is quite common, it does not lead to practical attacks. During our analyses, we identified an equivalent attack scenario against Facebook in which attackers are not required to have victims' credentials; they only need to get into the SMS-based OTP once in order to deactivate U2F for good. The recent attack against the CEO of Twitter [17] in September 2019 shows that our scenario can lead to effective attacks in practice.\n\n\nResponsible Disclosure\n\nWe have notified Facebook about this security vulnerability through their bug program. The security team acknowledged the attack and closed our Whitehat report of number #112614246876669 on December 2nd 2019.\n\n\nAttack Description\n\nWe suppose that the victim has already enabled U2F on her Facebook account. We also suppose that the attacker has a Facebook account and knows the victim's phone number. The goal is to make the victim more vulnerable by completely disabling U2F. The attack works as follows:\n\n-The attacker signs in her own Facebook account.\n\n-She enters the victim's number phone while activating the U2F authentication. -Facebook sends a code by SMS to the victim's phone.\n\n-The attacker gets this code by the Physical Proximity capability or by tricking the victim. -When the attacker enters the verification code, Facebook validates the attacker request and associates the phone number to the attacker. -Facebook finds it strange that a phone number is linked to two accounts. Therefore, it decides to silently deactivate all the 2FA mechanisms of the victim's account. Facebook only sends a notification about the association of the phone number, nothing about the deactivation of 2FA. To sum up, Facebook cannot associate the same phone number to two different U2F accounts. Indeed, when the same number is used twice, the first U2F activation is disabled permanently. We claim that this scenario is a serious attack vector for multiple reasons. First, it can be carried out remotely though phishing websites. Indeed, a malicious website can fake some authentication problem and ask the victim to enter the received code. Second, it can be automated if the attacker can read the victim's SMS; which is easier than compromising the FIDO authenticator. Third, it requires to target the victim only once for a permanent 2FA deactivation. Fourth, no security alert is made by Facebook about the deactivation. In addition, the settings are not trivial, so we expect that victims detect the attack much lately.\n\n\nConclusion\n\nThis work provides the first systematic analysis on the undocumented U2F remember me option. We show that its security impact is not well mastered and often underestimated. Our study points out that the solutions found in the wild significantly weaken the initial security proposed by U2F. Our attack against Facebook abusing its 2FA recovery option and new attack vectors led by remember me solutions shows that U2F needs to be better understood to stay secure. Nevertheless, we consider these options essential for usability and acceptability of this protocol by the greatest number. We expect that this paper will highlight current weaknesses and offer the leads for service providers to improve user security.\n\nFig. 1 .\n1Browsers' U2F compliance 2 inner memory. The Authenticator might connect to the users' computer via different interfaces. For example, YubiKeys implement USB HID (Human Interface Device) connection.\n\nFIDO\n\n\nFig. 2 .\n2FIDO U2F Registration\n\nFig. 3 .\n3FIDO U2F Authentication\n\nFig. 4 .\n4Security Benefits of YubiKey-Backed U2F\n\n\nFIDO Authenticators: the Yubikey NEO with the firmware version 3.4.9 and the Security Key by Yubico with the firmware version 5.1.2. -FIDO Clients: Mozilla Firefox 67.0.4 for x86_64-pc-linux-gnu and Google Chrome 75.0.3770.100 Official Build 64-bit. -Relying Parties: Gmail, Dropbox, Facebook, FastMail and login.gov.\n\nFig. 5 .\n5Experimental Analysis of Remember Me Solutions\n\n\nThe FIDO client passes this signature back to the RP that verifies the signature and authenticates the user.FIDO Client \nRelying Party \nFIDO Authenticator \n\nhandle, challenge \n\nh \n\nhash(ClientData), origin, handle \n\nretrieve: kpriv \n\nsign(h) \nClientData, sign(h) \n\ncheck if \nsign(h) is valid \nusing kpub \nauthenticate \n\n\n. https://caniuse.com/#feat=u2f\n. https://myaccount.google.com/device-activity\n\nUsers are not the enemy. Anne Adams, Martina Angela Sasse, Commun. ACM. 4212Anne Adams and Martina Angela Sasse. Users are not the enemy. Commun. ACM, 42(12):40-46, 1999.\n\nSimpler, stronger authentication. Fido Alliance, FIDO Alliance. Simpler, stronger authentication. https://fidoalliance.org. Accessed: 2020-03-01.\n\nFido u2f javascript api v1.0. Dirk Balfanz, Arnar Birgisson, Juan Lang, FIDO AllianceTechnical reportDirk Balfanz, Arnar Birgisson, and Juan Lang. Fido u2f javascript api v1.0. Technical report, FIDO Alliance, May 2015.\n\nThe quest to replace passwords: A framework for comparative evaluation of web authentication schemes. Joseph Bonneau, Cormac Herley, Paul C Van Oorschot, Frank Stajano, IEEE Symposium on Security and Privacy. IEEE Computer SocietyJoseph Bonneau, Cormac Herley, Paul C. van Oorschot, and Frank Stajano. The quest to replace passwords: A framework for comparative evaluation of web authen- tication schemes. In IEEE Symposium on Security and Privacy, pages 553-567. IEEE Computer Society, 2012.\n\nThe bleak picture of two-factor authentication adoption in the wild. Elie Bursztein, Elie Bursztein. The bleak picture of two-factor authentication adoption in the wild. https://elie.net/blog/security/the-bleak-picture-of-two-factor- authentication-adoption-in-the-wild. Accessed: 2020-03-01.\n\nNaked Security by Sophos. Yubico recalls fips yubikey tokens after flaw found. Naked Security by Sophos. Yubico recalls fips yubikey tokens after flaw found. https://bit.ly/2RjiUlL. Accessed: 2020-03-01.\n\nit's not actually that horrible\": Exploring adoption of two-factor authentication at a university. Jessica Colnago, Summer Devlin, Maggie Oates, Chelse Swoopes, Lujo Bauer, CHI. ACM456Lorrie Faith Cranor, and Nicolas ChristinJessica Colnago, Summer Devlin, Maggie Oates, Chelse Swoopes, Lujo Bauer, Lorrie Faith Cranor, and Nicolas Christin. \"it's not actually that horrible\": Exploring adoption of two-factor authentication at a university. In CHI, page 456. ACM, 2018.\n\nStrengthening user authentication through opportunistic cryptographic identity assertions. Alexei Czeskis, Michael Dietz, Tadayoshi Kohno, Dan S Wallach, Dirk Balfanz, ACM Conference on Computer and Communications Security. ACMAlexei Czeskis, Michael Dietz, Tadayoshi Kohno, Dan S. Wallach, and Dirk Balfanz. Strengthening user authentication through opportunistic cryptographic identity assertions. In ACM Conference on Computer and Communications Security, pages 404-414. ACM, 2012.\n\nWhy johnny doesn't use two factor a two-phase usability study of the fido u2f security key. Sanchari Das, Andrew Dingman, L Jean Camp, Financial Cryptography. SpringerSanchari Das, Andrew Dingman, and L Jean Camp. Why johnny doesn't use two factor a two-phase usability study of the fido u2f security key. In Financial Cryptography, Lecture Notes in Computer Science. Springer, 2018.\n\nFormal verification of the yubikey and yubihsm apis in maude-npa. Antonio Gonz\u00e1lez-Burgue\u00f1o, Dami\u00e1n Aparicio-S\u00e1nchez, Santiago Escobar, Catherine A Meadows, Jos\u00e9 Meseguer, LPAR. EasyChair57Antonio Gonz\u00e1lez-Burgue\u00f1o, Dami\u00e1n Aparicio-S\u00e1nchez, Santiago Escobar, Cather- ine A. Meadows, and Jos\u00e9 Meseguer. Formal verification of the yubikey and yubihsm apis in maude-npa. In LPAR, volume 57 of EPiC Series in Computing, pages 400-417. EasyChair, 2018.\n\nCross-site tracing (xst). Jeremiah Grossman, WhiteHat SecurityTechnical reportJeremiah Grossman. Cross-site tracing (xst). Technical report, WhiteHat Security, Janvier 2003.\n\nHotp: An hmac-based one-time password algorithm. Network Working GroupNetwork Working Group. Hotp: An hmac-based one-time password algorithm. https://tools.ietf.org/html/rfc4226. Accessed: 2020-03-01.\n\n. Hsbc. Secure, Key, HSBC. Secure key. https://bit.ly/2KdVY5u. Accessed: 2020-03-01.\n\nTotp: Time-based one-time password algorithm. Internet Engineering Task Force (IETF)Internet Engineering Task Force (IETF). Totp: Time-based one-time password algorithm. https://tools.ietf.org/html/rfc6238. Accessed: 2020-03-01.\n\nAn extensive formal analysis of multi-factor authentication protocols. Charlie Jacomme, Steve Kremer, CSF. IEEE Computer SocietyPlease Remember MeCharlie Jacomme and Steve Kremer. An extensive formal analysis of multi-factor authentication protocols. In CSF, pages 1-15. IEEE Computer Society, 2018. Please Remember Me\n\nSecurity keys: Practical cryptographic second factors for the modern web. Juan Lang, Alexei Czeskis, Dirk Balfanz, Marius Schilder, Sampath Srinivas, Financial Cryptography. Springer9603Juan Lang, Alexei Czeskis, Dirk Balfanz, Marius Schilder, and Sampath Srinivas. Security keys: Practical cryptographic second factors for the modern web. In Financial Cryptography, volume 9603 of Lecture Notes in Computer Science, pages 422-440. Springer, 2016.\n\nTwitter CEO and co-founder Jack Dorsey has account hacked. Dave Lee, Dave Lee. Twitter CEO and co-founder Jack Dorsey has account hacked. https: //www.bbc.com/news/technology-49532244. Accessed: 2020-03-01.\n\nFido security reference v1.0. Technical report, FIDO Alliance. Rolf Lindemann, Davit Baghdasaryan, Brad Hill, Rolf Lindemann, Davit Baghdasaryan, and Brad Hill. Fido security reference v1.0. Technical report, FIDO Alliance, December 2014.\n\nFido uaf architectural overview v1. Salah Machani, Rob Philpott, Sampath Srinivas, John Kemp, Jeff Hodges, 1FIDO AllianceTechnical reportSalah Machani, Rob Philpott, Sampath Srinivas, John Kemp, and Jeff Hodges. Fido uaf architectural overview v1.1. Technical report, FIDO Alliance, February 2017.\n\nNIST. Digital identity guidelines. NIST. Digital identity guidelines. https://pages.nist.gov/800-63-3/sp800- 63b.html. Accessed: 2020-03-01.\n\nFormal analysis of the FIDO 1.x protocol. Olivier Pereira, Florentin Rochet, Cyrille Wiedling, FPS. Springer10723Olivier Pereira, Florentin Rochet, and Cyrille Wiedling. Formal analysis of the FIDO 1.x protocol. In FPS, volume 10723 of Lecture Notes in Computer Science, pages 68-82. Springer, 2017.\n\n. Google Play, Google, Google Play. Google authenticator. https://bit.ly/1kuly5f. Accessed: 2020-03- 01.\n\nA tale of two studies: The best and worst of yubikey usability. Joshua Reynolds, Trevor Smith, Ken Reese, Luke Dickinson, Scott Ruoti, Kent E Seamons, IEEE Symposium on Security and Privacy. IEEE Computer SocietyJoshua Reynolds, Trevor Smith, Ken Reese, Luke Dickinson, Scott Ruoti, and Kent E. Seamons. A tale of two studies: The best and worst of yubikey usability. In IEEE Symposium on Security and Privacy, pages 872-888. IEEE Computer Society, 2018.\n\nRsa securid hardware tokens. RSARSA. Rsa securid hardware tokens. https://www.rsa.com/content/dam/en/data- sheet/rsa-securid-hardware-tokens.pdf. Accessed: 2020-03-01.\n\nUniversal 2nd factor (u2f) overview v1.2. Technical report, FIDO Alliance. Sampath Srinivas, Dirk Balfanz, Eric Tiffany, Alexei Czeskis, Sampath Srinivas, Dirk Balfanz, Eric Tiffany, and Alexei Czeskis. Universal 2nd factor (u2f) overview v1.2. Technical report, FIDO Alliance, April 2017.\n\ni added '!' at the end to make it secure\": Observing password creation in the lab. Blase Ur, Fumiko Noma, Jonathan Bees, Sean M Segreti, Richard Shay, Lujo Bauer, Nicolas Christin, Lorrie Faith Cranor, SOUPS. USENIX AssociationBlase Ur, Fumiko Noma, Jonathan Bees, Sean M. Segreti, Richard Shay, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor. \"i added '!' at the end to make it secure\": Observing password creation in the lab. In SOUPS, pages 123-140. USENIX Association, 2015.\n\n. Can I Use, Samesite cookie attributeCan I Use. Samesite cookie attribute. https://caniuse.com/#feat=same-site- cookie-attribute. Accessed: 2020-03-01.\n\nSame-site cookies. Mike West, Mark Goodwin, Mike West and Mark Goodwin. Same-site cookies. https://tools.ietf.org/ html/draft-ietf-httpbis-cookie-same-site-00. Accessed: 2020-03-01.\n\nPassword memorability and security: Empirical results. Jeff Jianxin Yan, Alan F Blackwell, Ross J Anderson, Alasdair Grant, IEEE Security & Privacy. 25Jeff Jianxin Yan, Alan F. Blackwell, Ross J. Anderson, and Alasdair Grant. Password memorability and security: Empirical results. IEEE Security & Privacy, 2(5):25-31, 2004.\n\nWorks with yubikey catalog. Yubico, Yubico. Works with yubikey catalog. https://www.yubico.com/works-with- yubikey/catalog. Accessed: 2020-03-01.\n\n. Yubico, Yubikey, Yubico. Yubikey. www.yubico.com/products/yubikey-hardware. Accessed: 2020- 03-01.\n\nZEPHORIA. The top 20 valuable facebook statistics -updated july 2019. zephoria. com/top-15-valuable-facebook-statistics. ZEPHORIA. The top 20 valuable facebook statistics -updated july 2019. zephoria. com/top-15-valuable-facebook-statistics. Accessed: 2020-03-01.\n", "annotations": {"author": "[{\"end\":225,\"start\":211},{\"end\":239,\"start\":226}]", "publisher": null, "author_last_name": "[{\"end\":224,\"start\":219},{\"end\":238,\"start\":234}]", "author_first_name": "[{\"end\":218,\"start\":211},{\"end\":233,\"start\":226}]", "author_affiliation": null, "title": "[{\"end\":192,\"start\":1},{\"end\":431,\"start\":240}]", "venue": null, "abstract": "[{\"end\":3084,\"start\":1119}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b25\"},\"end\":3437,\"start\":3433},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3769,\"start\":3766},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":3936,\"start\":3932},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":4402,\"start\":4398},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":4405,\"start\":4402},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4531,\"start\":4527},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":4852,\"start\":4849},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5266,\"start\":5263},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":5721,\"start\":5717},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":6053,\"start\":6049},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":6312,\"start\":6308},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6321,\"start\":6317},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":7933,\"start\":7930},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":7936,\"start\":7933},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":8318,\"start\":8314},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":8344,\"start\":8340},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":8481,\"start\":8477},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":8484,\"start\":8481},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":8576,\"start\":8572},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":8579,\"start\":8576},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":8889,\"start\":8885},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":8907,\"start\":8904},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":9107,\"start\":9104},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":9367,\"start\":9364},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":9758,\"start\":9754},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":9985,\"start\":9982},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":10167,\"start\":10163},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":10538,\"start\":10535},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":10793,\"start\":10790},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":11609,\"start\":11605},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":11826,\"start\":11822},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":12689,\"start\":12685},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":13097,\"start\":13094},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":13504,\"start\":13500},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":13562,\"start\":13558},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":14019,\"start\":14015},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":14452,\"start\":14448},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":15873,\"start\":15870},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":18739,\"start\":18735},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":18832,\"start\":18829},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":18992,\"start\":18988},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20447,\"start\":20444},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":22500,\"start\":22497},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":23988,\"start\":23984},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":23997,\"start\":23993},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":24231,\"start\":24227},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":24599,\"start\":24595},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":25730,\"start\":25727},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":26196,\"start\":26193},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":27797,\"start\":27793},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":30317,\"start\":30313},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":31964,\"start\":31961},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":32665,\"start\":32661},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":33224,\"start\":33220},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":38247,\"start\":38246},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":41018,\"start\":41014},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":46900,\"start\":46897},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":52066,\"start\":52062},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":61337,\"start\":61333},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":62796,\"start\":62792}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":65870,\"start\":65661},{\"attributes\":{\"id\":\"fig_1\"},\"end\":65877,\"start\":65871},{\"attributes\":{\"id\":\"fig_2\"},\"end\":65910,\"start\":65878},{\"attributes\":{\"id\":\"fig_3\"},\"end\":65945,\"start\":65911},{\"attributes\":{\"id\":\"fig_4\"},\"end\":65996,\"start\":65946},{\"attributes\":{\"id\":\"fig_5\"},\"end\":66316,\"start\":65997},{\"attributes\":{\"id\":\"fig_6\"},\"end\":66374,\"start\":66317},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":66697,\"start\":66375}]", "paragraph": "[{\"end\":3312,\"start\":3100},{\"end\":3937,\"start\":3314},{\"end\":4532,\"start\":3939},{\"end\":5081,\"start\":4534},{\"end\":5468,\"start\":5083},{\"end\":6372,\"start\":5470},{\"end\":6922,\"start\":6374},{\"end\":7763,\"start\":6924},{\"end\":8109,\"start\":7796},{\"end\":8554,\"start\":8111},{\"end\":9305,\"start\":8556},{\"end\":9961,\"start\":9323},{\"end\":10749,\"start\":9963},{\"end\":11080,\"start\":10775},{\"end\":11797,\"start\":11082},{\"end\":12779,\"start\":11799},{\"end\":13030,\"start\":12801},{\"end\":13668,\"start\":13053},{\"end\":14302,\"start\":13670},{\"end\":14890,\"start\":14304},{\"end\":15874,\"start\":14910},{\"end\":16476,\"start\":15895},{\"end\":17904,\"start\":16493},{\"end\":19130,\"start\":17952},{\"end\":19852,\"start\":19156},{\"end\":20332,\"start\":19854},{\"end\":20691,\"start\":20354},{\"end\":20930,\"start\":20693},{\"end\":21050,\"start\":20932},{\"end\":21174,\"start\":21052},{\"end\":21354,\"start\":21223},{\"end\":21476,\"start\":21356},{\"end\":21569,\"start\":21478},{\"end\":21806,\"start\":21571},{\"end\":22034,\"start\":21814},{\"end\":22725,\"start\":22066},{\"end\":23191,\"start\":22727},{\"end\":23509,\"start\":23193},{\"end\":24178,\"start\":23511},{\"end\":25018,\"start\":24180},{\"end\":25549,\"start\":25038},{\"end\":25913,\"start\":25551},{\"end\":26306,\"start\":25915},{\"end\":26956,\"start\":26308},{\"end\":27543,\"start\":26958},{\"end\":27729,\"start\":27545},{\"end\":28205,\"start\":27756},{\"end\":28681,\"start\":28230},{\"end\":29120,\"start\":28727},{\"end\":29773,\"start\":29122},{\"end\":30440,\"start\":29775},{\"end\":30880,\"start\":30481},{\"end\":31275,\"start\":30916},{\"end\":31504,\"start\":31277},{\"end\":32472,\"start\":31506},{\"end\":32666,\"start\":32474},{\"end\":33225,\"start\":32668},{\"end\":33621,\"start\":33257},{\"end\":33707,\"start\":33650},{\"end\":34376,\"start\":33731},{\"end\":36628,\"start\":34378},{\"end\":36918,\"start\":36660},{\"end\":37601,\"start\":36920},{\"end\":37928,\"start\":37603},{\"end\":38452,\"start\":37930},{\"end\":38874,\"start\":38454},{\"end\":39333,\"start\":38876},{\"end\":39730,\"start\":39335},{\"end\":40555,\"start\":39732},{\"end\":40950,\"start\":40557},{\"end\":41707,\"start\":40952},{\"end\":42426,\"start\":41709},{\"end\":42937,\"start\":42428},{\"end\":43563,\"start\":42939},{\"end\":43628,\"start\":43565},{\"end\":44015,\"start\":43639},{\"end\":44306,\"start\":44017},{\"end\":44956,\"start\":44308},{\"end\":45338,\"start\":44958},{\"end\":46324,\"start\":45354},{\"end\":46607,\"start\":46370},{\"end\":46945,\"start\":46609},{\"end\":47728,\"start\":46947},{\"end\":49029,\"start\":47730},{\"end\":50009,\"start\":49031},{\"end\":50488,\"start\":50099},{\"end\":50734,\"start\":50490},{\"end\":51069,\"start\":50761},{\"end\":51426,\"start\":51071},{\"end\":51712,\"start\":51444},{\"end\":52429,\"start\":51714},{\"end\":52538,\"start\":52431},{\"end\":53154,\"start\":52574},{\"end\":53927,\"start\":53156},{\"end\":54760,\"start\":53929},{\"end\":55604,\"start\":54791},{\"end\":56020,\"start\":55606},{\"end\":56469,\"start\":56022},{\"end\":57211,\"start\":56489},{\"end\":58371,\"start\":57213},{\"end\":58820,\"start\":58373},{\"end\":59008,\"start\":58822},{\"end\":60269,\"start\":59010},{\"end\":60937,\"start\":60307},{\"end\":61360,\"start\":60939},{\"end\":61817,\"start\":61362},{\"end\":62319,\"start\":61819},{\"end\":62881,\"start\":62321},{\"end\":63116,\"start\":62908},{\"end\":63413,\"start\":63139},{\"end\":63463,\"start\":63415},{\"end\":63596,\"start\":63465},{\"end\":64932,\"start\":63598},{\"end\":65660,\"start\":64947}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":43638,\"start\":43629}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":3098,\"start\":3086},{\"attributes\":{\"n\":\"2\"},\"end\":7778,\"start\":7766},{\"attributes\":{\"n\":\"2.1\"},\"end\":7794,\"start\":7781},{\"attributes\":{\"n\":\"2.2\"},\"end\":9321,\"start\":9308},{\"attributes\":{\"n\":\"2.3\"},\"end\":10773,\"start\":10752},{\"attributes\":{\"n\":\"3\"},\"end\":12799,\"start\":12782},{\"attributes\":{\"n\":\"3.1\"},\"end\":13051,\"start\":13033},{\"attributes\":{\"n\":\"3.2\"},\"end\":14908,\"start\":14893},{\"attributes\":{\"n\":\"3.3\"},\"end\":15893,\"start\":15877},{\"end\":16491,\"start\":16479},{\"attributes\":{\"n\":\"4\"},\"end\":17950,\"start\":17907},{\"attributes\":{\"n\":\"4.1\"},\"end\":19154,\"start\":19133},{\"attributes\":{\"n\":\"4.2\"},\"end\":20352,\"start\":20335},{\"end\":21221,\"start\":21177},{\"end\":21812,\"start\":21809},{\"attributes\":{\"n\":\"4.3\"},\"end\":22064,\"start\":22037},{\"attributes\":{\"n\":\"5\"},\"end\":25036,\"start\":25021},{\"attributes\":{\"n\":\"5.1\"},\"end\":27754,\"start\":27732},{\"attributes\":{\"n\":\"5.2\"},\"end\":28228,\"start\":28208},{\"end\":28725,\"start\":28684},{\"end\":30479,\"start\":30443},{\"attributes\":{\"n\":\"5.3\"},\"end\":30914,\"start\":30883},{\"attributes\":{\"n\":\"6\"},\"end\":33255,\"start\":33228},{\"attributes\":{\"n\":\"6.1\"},\"end\":33648,\"start\":33624},{\"attributes\":{\"n\":\"6.2\"},\"end\":33729,\"start\":33710},{\"attributes\":{\"n\":\"6.3\"},\"end\":36658,\"start\":36631},{\"end\":45352,\"start\":45341},{\"attributes\":{\"n\":\"6.4\"},\"end\":46368,\"start\":46327},{\"end\":50097,\"start\":50012},{\"attributes\":{\"n\":\"7\"},\"end\":50759,\"start\":50737},{\"attributes\":{\"n\":\"7.1\"},\"end\":51442,\"start\":51429},{\"attributes\":{\"n\":\"7.2\"},\"end\":52572,\"start\":52541},{\"attributes\":{\"n\":\"7.3\"},\"end\":54789,\"start\":54763},{\"attributes\":{\"n\":\"8\"},\"end\":56487,\"start\":56472},{\"attributes\":{\"n\":\"9\"},\"end\":60305,\"start\":60272},{\"attributes\":{\"n\":\"9.1\"},\"end\":62906,\"start\":62884},{\"attributes\":{\"n\":\"9.2\"},\"end\":63137,\"start\":63119},{\"attributes\":{\"n\":\"10\"},\"end\":64945,\"start\":64935},{\"end\":65670,\"start\":65662},{\"end\":65876,\"start\":65872},{\"end\":65887,\"start\":65879},{\"end\":65920,\"start\":65912},{\"end\":65955,\"start\":65947},{\"end\":66326,\"start\":66318}]", "table": "[{\"end\":66697,\"start\":66485}]", "figure_caption": "[{\"end\":65870,\"start\":65672},{\"end\":65910,\"start\":65889},{\"end\":65945,\"start\":65922},{\"end\":65996,\"start\":65957},{\"end\":66316,\"start\":65999},{\"end\":66374,\"start\":66328},{\"end\":66485,\"start\":66377}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":14728,\"start\":14720},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":16443,\"start\":16428},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":16593,\"start\":16585},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":17480,\"start\":17472},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":22389,\"start\":22381},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":29192,\"start\":29184},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":36893,\"start\":36885},{\"end\":46944,\"start\":46936}]", "bib_author_first_name": "[{\"end\":66807,\"start\":66803},{\"end\":66822,\"start\":66815},{\"end\":66829,\"start\":66823},{\"end\":67131,\"start\":67127},{\"end\":67146,\"start\":67141},{\"end\":67162,\"start\":67158},{\"end\":67426,\"start\":67420},{\"end\":67442,\"start\":67436},{\"end\":67455,\"start\":67451},{\"end\":67457,\"start\":67456},{\"end\":67477,\"start\":67472},{\"end\":67885,\"start\":67881},{\"end\":68417,\"start\":68410},{\"end\":68433,\"start\":68427},{\"end\":68448,\"start\":68442},{\"end\":68462,\"start\":68456},{\"end\":68476,\"start\":68472},{\"end\":68880,\"start\":68874},{\"end\":68897,\"start\":68890},{\"end\":68914,\"start\":68905},{\"end\":68925,\"start\":68922},{\"end\":68927,\"start\":68926},{\"end\":68941,\"start\":68937},{\"end\":69369,\"start\":69361},{\"end\":69381,\"start\":69375},{\"end\":69397,\"start\":69391},{\"end\":69727,\"start\":69720},{\"end\":69753,\"start\":69747},{\"end\":69780,\"start\":69772},{\"end\":69799,\"start\":69790},{\"end\":69801,\"start\":69800},{\"end\":69815,\"start\":69811},{\"end\":70137,\"start\":70129},{\"end\":70874,\"start\":70867},{\"end\":70889,\"start\":70884},{\"end\":71194,\"start\":71190},{\"end\":71207,\"start\":71201},{\"end\":71221,\"start\":71217},{\"end\":71237,\"start\":71231},{\"end\":71255,\"start\":71248},{\"end\":71628,\"start\":71624},{\"end\":71840,\"start\":71836},{\"end\":71857,\"start\":71852},{\"end\":71876,\"start\":71872},{\"end\":72054,\"start\":72049},{\"end\":72067,\"start\":72064},{\"end\":72085,\"start\":72078},{\"end\":72100,\"start\":72096},{\"end\":72111,\"start\":72107},{\"end\":72503,\"start\":72496},{\"end\":72522,\"start\":72513},{\"end\":72538,\"start\":72531},{\"end\":72763,\"start\":72757},{\"end\":72931,\"start\":72925},{\"end\":72948,\"start\":72942},{\"end\":72959,\"start\":72956},{\"end\":72971,\"start\":72967},{\"end\":72988,\"start\":72983},{\"end\":73000,\"start\":72996},{\"end\":73002,\"start\":73001},{\"end\":73568,\"start\":73561},{\"end\":73583,\"start\":73579},{\"end\":73597,\"start\":73593},{\"end\":73613,\"start\":73607},{\"end\":73865,\"start\":73860},{\"end\":73876,\"start\":73870},{\"end\":73891,\"start\":73883},{\"end\":73902,\"start\":73898},{\"end\":73904,\"start\":73903},{\"end\":73921,\"start\":73914},{\"end\":73932,\"start\":73928},{\"end\":73947,\"start\":73940},{\"end\":73964,\"start\":73958},{\"end\":73970,\"start\":73965},{\"end\":74441,\"start\":74437},{\"end\":74452,\"start\":74448},{\"end\":74668,\"start\":74656},{\"end\":74678,\"start\":74674},{\"end\":74680,\"start\":74679},{\"end\":74696,\"start\":74692},{\"end\":74698,\"start\":74697},{\"end\":74717,\"start\":74709}]", "bib_author_last_name": "[{\"end\":66813,\"start\":66808},{\"end\":66835,\"start\":66830},{\"end\":66997,\"start\":66984},{\"end\":67139,\"start\":67132},{\"end\":67156,\"start\":67147},{\"end\":67167,\"start\":67163},{\"end\":67434,\"start\":67427},{\"end\":67449,\"start\":67443},{\"end\":67470,\"start\":67458},{\"end\":67485,\"start\":67478},{\"end\":67895,\"start\":67886},{\"end\":68425,\"start\":68418},{\"end\":68440,\"start\":68434},{\"end\":68454,\"start\":68449},{\"end\":68470,\"start\":68463},{\"end\":68482,\"start\":68477},{\"end\":68888,\"start\":68881},{\"end\":68903,\"start\":68898},{\"end\":68920,\"start\":68915},{\"end\":68935,\"start\":68928},{\"end\":68949,\"start\":68942},{\"end\":69373,\"start\":69370},{\"end\":69389,\"start\":69382},{\"end\":69402,\"start\":69398},{\"end\":69745,\"start\":69728},{\"end\":69770,\"start\":69754},{\"end\":69788,\"start\":69781},{\"end\":69809,\"start\":69802},{\"end\":69824,\"start\":69816},{\"end\":70146,\"start\":70138},{\"end\":70494,\"start\":70482},{\"end\":70499,\"start\":70496},{\"end\":70882,\"start\":70875},{\"end\":70896,\"start\":70890},{\"end\":71199,\"start\":71195},{\"end\":71215,\"start\":71208},{\"end\":71229,\"start\":71222},{\"end\":71246,\"start\":71238},{\"end\":71264,\"start\":71256},{\"end\":71632,\"start\":71629},{\"end\":71850,\"start\":71841},{\"end\":71870,\"start\":71858},{\"end\":71881,\"start\":71877},{\"end\":72062,\"start\":72055},{\"end\":72076,\"start\":72068},{\"end\":72094,\"start\":72086},{\"end\":72105,\"start\":72101},{\"end\":72118,\"start\":72112},{\"end\":72511,\"start\":72504},{\"end\":72529,\"start\":72523},{\"end\":72547,\"start\":72539},{\"end\":72768,\"start\":72764},{\"end\":72776,\"start\":72770},{\"end\":72940,\"start\":72932},{\"end\":72954,\"start\":72949},{\"end\":72965,\"start\":72960},{\"end\":72981,\"start\":72972},{\"end\":72994,\"start\":72989},{\"end\":73010,\"start\":73003},{\"end\":73577,\"start\":73569},{\"end\":73591,\"start\":73584},{\"end\":73605,\"start\":73598},{\"end\":73621,\"start\":73614},{\"end\":73868,\"start\":73866},{\"end\":73881,\"start\":73877},{\"end\":73896,\"start\":73892},{\"end\":73912,\"start\":73905},{\"end\":73926,\"start\":73922},{\"end\":73938,\"start\":73933},{\"end\":73956,\"start\":73948},{\"end\":73977,\"start\":73971},{\"end\":74275,\"start\":74266},{\"end\":74446,\"start\":74442},{\"end\":74460,\"start\":74453},{\"end\":74672,\"start\":74669},{\"end\":74690,\"start\":74681},{\"end\":74707,\"start\":74699},{\"end\":74723,\"start\":74718},{\"end\":74960,\"start\":74954},{\"end\":75081,\"start\":75075},{\"end\":75090,\"start\":75083}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":1883850},\"end\":66948,\"start\":66778},{\"attributes\":{\"id\":\"b1\"},\"end\":67095,\"start\":66950},{\"attributes\":{\"id\":\"b2\"},\"end\":67316,\"start\":67097},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":7847705},\"end\":67810,\"start\":67318},{\"attributes\":{\"id\":\"b4\"},\"end\":68104,\"start\":67812},{\"attributes\":{\"id\":\"b5\"},\"end\":68309,\"start\":68106},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":5041135},\"end\":68781,\"start\":68311},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":3425458},\"end\":69267,\"start\":68783},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":4606963},\"end\":69652,\"start\":69269},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":49317637},\"end\":70101,\"start\":69654},{\"attributes\":{\"id\":\"b10\"},\"end\":70276,\"start\":70103},{\"attributes\":{\"id\":\"b11\"},\"end\":70478,\"start\":70278},{\"attributes\":{\"id\":\"b12\"},\"end\":70564,\"start\":70480},{\"attributes\":{\"id\":\"b13\"},\"end\":70794,\"start\":70566},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":51970375},\"end\":71114,\"start\":70796},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":2085487},\"end\":71563,\"start\":71116},{\"attributes\":{\"id\":\"b16\"},\"end\":71771,\"start\":71565},{\"attributes\":{\"id\":\"b17\"},\"end\":72011,\"start\":71773},{\"attributes\":{\"id\":\"b18\"},\"end\":72310,\"start\":72013},{\"attributes\":{\"id\":\"b19\"},\"end\":72452,\"start\":72312},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":905571},\"end\":72753,\"start\":72454},{\"attributes\":{\"id\":\"b21\"},\"end\":72859,\"start\":72755},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":44175277},\"end\":73315,\"start\":72861},{\"attributes\":{\"id\":\"b23\"},\"end\":73484,\"start\":73317},{\"attributes\":{\"id\":\"b24\"},\"end\":73775,\"start\":73486},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":7320191},\"end\":74262,\"start\":73777},{\"attributes\":{\"id\":\"b26\"},\"end\":74416,\"start\":74264},{\"attributes\":{\"id\":\"b27\"},\"end\":74599,\"start\":74418},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":206485325},\"end\":74924,\"start\":74601},{\"attributes\":{\"id\":\"b29\"},\"end\":75071,\"start\":74926},{\"attributes\":{\"id\":\"b30\"},\"end\":75173,\"start\":75073},{\"attributes\":{\"id\":\"b31\"},\"end\":75438,\"start\":75175}]", "bib_title": "[{\"end\":66801,\"start\":66778},{\"end\":67418,\"start\":67318},{\"end\":68408,\"start\":68311},{\"end\":68872,\"start\":68783},{\"end\":69359,\"start\":69269},{\"end\":69718,\"start\":69654},{\"end\":70865,\"start\":70796},{\"end\":71188,\"start\":71116},{\"end\":72494,\"start\":72454},{\"end\":72923,\"start\":72861},{\"end\":73858,\"start\":73777},{\"end\":74654,\"start\":74601}]", "bib_author": "[{\"end\":66815,\"start\":66803},{\"end\":66837,\"start\":66815},{\"end\":66999,\"start\":66984},{\"end\":67141,\"start\":67127},{\"end\":67158,\"start\":67141},{\"end\":67169,\"start\":67158},{\"end\":67436,\"start\":67420},{\"end\":67451,\"start\":67436},{\"end\":67472,\"start\":67451},{\"end\":67487,\"start\":67472},{\"end\":67897,\"start\":67881},{\"end\":68427,\"start\":68410},{\"end\":68442,\"start\":68427},{\"end\":68456,\"start\":68442},{\"end\":68472,\"start\":68456},{\"end\":68484,\"start\":68472},{\"end\":68890,\"start\":68874},{\"end\":68905,\"start\":68890},{\"end\":68922,\"start\":68905},{\"end\":68937,\"start\":68922},{\"end\":68951,\"start\":68937},{\"end\":69375,\"start\":69361},{\"end\":69391,\"start\":69375},{\"end\":69404,\"start\":69391},{\"end\":69747,\"start\":69720},{\"end\":69772,\"start\":69747},{\"end\":69790,\"start\":69772},{\"end\":69811,\"start\":69790},{\"end\":69826,\"start\":69811},{\"end\":70148,\"start\":70129},{\"end\":70496,\"start\":70482},{\"end\":70501,\"start\":70496},{\"end\":70884,\"start\":70867},{\"end\":70898,\"start\":70884},{\"end\":71201,\"start\":71190},{\"end\":71217,\"start\":71201},{\"end\":71231,\"start\":71217},{\"end\":71248,\"start\":71231},{\"end\":71266,\"start\":71248},{\"end\":71634,\"start\":71624},{\"end\":71852,\"start\":71836},{\"end\":71872,\"start\":71852},{\"end\":71883,\"start\":71872},{\"end\":72064,\"start\":72049},{\"end\":72078,\"start\":72064},{\"end\":72096,\"start\":72078},{\"end\":72107,\"start\":72096},{\"end\":72120,\"start\":72107},{\"end\":72513,\"start\":72496},{\"end\":72531,\"start\":72513},{\"end\":72549,\"start\":72531},{\"end\":72770,\"start\":72757},{\"end\":72778,\"start\":72770},{\"end\":72942,\"start\":72925},{\"end\":72956,\"start\":72942},{\"end\":72967,\"start\":72956},{\"end\":72983,\"start\":72967},{\"end\":72996,\"start\":72983},{\"end\":73012,\"start\":72996},{\"end\":73579,\"start\":73561},{\"end\":73593,\"start\":73579},{\"end\":73607,\"start\":73593},{\"end\":73623,\"start\":73607},{\"end\":73870,\"start\":73860},{\"end\":73883,\"start\":73870},{\"end\":73898,\"start\":73883},{\"end\":73914,\"start\":73898},{\"end\":73928,\"start\":73914},{\"end\":73940,\"start\":73928},{\"end\":73958,\"start\":73940},{\"end\":73979,\"start\":73958},{\"end\":74277,\"start\":74266},{\"end\":74448,\"start\":74437},{\"end\":74462,\"start\":74448},{\"end\":74674,\"start\":74656},{\"end\":74692,\"start\":74674},{\"end\":74709,\"start\":74692},{\"end\":74725,\"start\":74709},{\"end\":74962,\"start\":74954},{\"end\":75083,\"start\":75075},{\"end\":75092,\"start\":75083}]", "bib_venue": "[{\"end\":66848,\"start\":66837},{\"end\":66982,\"start\":66950},{\"end\":67125,\"start\":67097},{\"end\":67525,\"start\":67487},{\"end\":67879,\"start\":67812},{\"end\":68183,\"start\":68106},{\"end\":68487,\"start\":68484},{\"end\":69005,\"start\":68951},{\"end\":69426,\"start\":69404},{\"end\":69830,\"start\":69826},{\"end\":70127,\"start\":70103},{\"end\":70325,\"start\":70278},{\"end\":70610,\"start\":70566},{\"end\":70901,\"start\":70898},{\"end\":71288,\"start\":71266},{\"end\":71622,\"start\":71565},{\"end\":71834,\"start\":71773},{\"end\":72047,\"start\":72013},{\"end\":72345,\"start\":72312},{\"end\":72552,\"start\":72549},{\"end\":73050,\"start\":73012},{\"end\":73344,\"start\":73317},{\"end\":73559,\"start\":73486},{\"end\":73984,\"start\":73979},{\"end\":74435,\"start\":74418},{\"end\":74748,\"start\":74725},{\"end\":74952,\"start\":74926},{\"end\":75294,\"start\":75175}]"}}}, "year": 2023, "month": 12, "day": 17}