{"id": 11227891, "updated": "2023-09-29 03:41:25.582", "metadata": {"title": "Reinforcement Learning with Deep Energy-Based Policies", "authors": "[{\"first\":\"Tuomas\",\"last\":\"Haarnoja\",\"middle\":[]},{\"first\":\"Haoran\",\"last\":\"Tang\",\"middle\":[]},{\"first\":\"Pieter\",\"last\":\"Abbeel\",\"middle\":[]},{\"first\":\"Sergey\",\"last\":\"Levine\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2017, "month": 2, "day": 27}, "abstract": "We propose a method for learning expressive energy-based policies for continuous states and actions, which has been feasible only in tabular domains before. We apply our method to learning maximum entropy policies, resulting into a new algorithm, called soft Q-learning, that expresses the optimal policy via a Boltzmann distribution. We use the recently proposed amortized Stein variational gradient descent to learn a stochastic sampling network that approximates samples from this distribution. The benefits of the proposed algorithm include improved exploration and compositionality that allows transferring skills between tasks, which we confirm in simulated experiments with swimming and walking robots. We also draw a connection to actor-critic methods, which can be viewed performing approximate inference on the corresponding energy-based model.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "1702.08165", "mag": "2949561945", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/HaarnojaTAL17", "doi": null}}, "content": {"source": {"pdf_hash": "d009ed56a1d1139465a769c2026575c8a643c607", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1702.08165v2.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "e30b2db36f46235b6d5f94d29c4b7bdac40c96be", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/d009ed56a1d1139465a769c2026575c8a643c607.txt", "contents": "\nReinforcement Learning with Deep Energy-Based Policies\n\n\nTuomas Haarnoja \nHaoran Tang \nPieter Abbeel \nSergey Levine \nReinforcement Learning with Deep Energy-Based Policies\n\nWe propose a method for learning expressive energy-based policies for continuous states and actions, which has been feasible only in tabular domains before. We apply our method to learning maximum entropy policies, resulting into a new algorithm, called soft Q-learning, that expresses the optimal policy via a Boltzmann distribution. We use the recently proposed amortized Stein variational gradient descent to learn a stochastic sampling network that approximates samples from this distribution. The benefits of the proposed algorithm include improved exploration and compositionality that allows transferring skills between tasks, which we confirm in simulated experiments with swimming and walking robots. We also draw a connection to actorcritic methods, which can be viewed performing approximate inference on the corresponding energy-based model.\n\nIntroduction\n\nDeep reinforcement learning (deep RL) has emerged as a promising direction for autonomous acquisition of complex behaviors (Mnih et al., 2015;Silver et al., 2016), due to its ability to process complex sensory input (Jaderberg et al., 2016) and to acquire elaborate behavior skills using general-purpose neural network representations (Levine et al., 2016). Deep reinforcement learning methods can be used to optimize deterministic (Lillicrap et al., 2015) and stochastic (Schulman et al., 2015a;Mnih et al., 2016) policies. However, most deep RL methods operate on the conventional deterministic notion of optimality, where the optimal solution, at least under full observability, is always a deterministic policy (Sutton & Barto, 1998). Although stochastic policies are desirable for exploration, this exploration is typically attained heuristically, for example by injecting noise (Silver et al., 2014;Lillicrap et al., 2015;Mnih et al., 2015) or initializing a stochastic policy with high entropy (Kakade, 2002;Schulman et al., 2015a;Mnih et al., 2016).\n\nIn some cases, we might actually prefer to learn stochastic behaviors. In this paper, we explore two potential reasons for this: exploration in the presence of multimodal objectives, and compositionality attained via pretraining. Other benefits include robustness in the face of uncertain dynamics (Ziebart, 2010), imitation learning (Ziebart et al., 2008), and improved convergence and computational properties (Gu et al., 2016a). Multi-modality also has application in real robot tasks, as demonstrated in (Daniel et al., 2012). However, in order to learn such policies, we must define an objective that promotes stochasticity.\n\nIn which cases is a stochastic policy actually the optimal solution? As discussed in prior work, a stochastic policy emerges as the optimal answer when we consider the connection between optimal control and probabilistic inference (Todorov, 2008). While there are multiple instantiations of this framework, they typically include the cost or reward function as an additional factor in a factor graph, and infer the optimal conditional distribution over actions conditioned on states. The solution can be shown to optimize an entropy-augmented reinforcement learning objective or to correspond to the solution to a maximum entropy learning problem (Toussaint, 2009). Intuitively, framing control as inference produces policies that aim to capture not only the single deterministic behavior that has the lowest cost, but the entire range of low-cost behaviors, explicitly maximizing the entropy of the corresponding policy. Instead of learning the best way to perform the task, the resulting policies try to learn all of the ways of performing the task. It should now be apparent why such policies might be preferred: if we can learn all of the ways that a given task might be performed, the resulting policy can serve as a good initialization for finetuning to a more specific behavior (e.g. first learning all the ways that a robot could move forward, and then using this as an initialization to learn separate running and bounding skills); a better exploration mechanism for seeking out the best mode in a multimodal reward landscape; and a more robust behavior in the arXiv:1702.08165v2 [cs.LG] 21 Jul 2017 face of adversarial perturbations, where the ability to perform the same task in multiple different ways can provide the agent with more options to recover from perturbations.\n\nUnfortunately, solving such maximum entropy stochastic policy learning problems in the general case is challenging. A number of methods have been proposed, including Z-learning (Todorov, 2007), maximum entropy inverse RL (Ziebart et al., 2008), approximate inference using message passing (Toussaint, 2009), \u03a8-learning (Rawlik et al., 2012), and G-learning (Fox et al., 2016), as well as more recent proposals in deep RL such as PGQ (O'Donoghue et al., 2016), but these generally operate either on simple tabular representations, which are difficult to apply to continuous or high-dimensional domains, or employ a simple parametric representation of the policy distribution, such as a conditional Gaussian. Therefore, although the policy is optimized to perform the desired skill in many different ways, the resulting distribution is typically very limited in terms of its representational power, even if the parameters of that distribution are represented by an expressive function approximator, such as a neural network.\n\nHow can we extend the framework of maximum entropy policy search to arbitrary policy distributions? In this paper, we borrow an idea from energy-based models, which in turn reveals an intriguing connection between Q-learning, actor-critic algorithms, and probabilistic inference. In our method, we formulate a stochastic policy as a (conditional) energy-based model (EBM), with the energy function corresponding to the \"soft\" Q-function obtained when optimizing the maximum entropy objective. In highdimensional continuous spaces, sampling from this policy, just as with any general EBM, becomes intractable. We borrow from the recent literature on EBMs to devise an approximate sampling procedure based on training a separate sampling network, which is optimized to produce unbiased samples from the policy EBM. This sampling network can then be used both for updating the EBM and for action selection. In the parlance of reinforcement learning, the sampling network is the actor in an actor-critic algorithm. This reveals an intriguing connection: entropy regularized actorcritic algorithms can be viewed as approximate Q-learning methods, with the actor serving the role of an approximate sampler from an intractable posterior. We explore this connection further in the paper, and in the course of this discuss connections to popular deep RL methods such as deterministic policy gradient (DPG) (Silver et al., 2014;Lillicrap et al., 2015), normalized advantage functions (NAF) (Gu et al., 2016b), andPGQ (O'Donoghue et al., 2016).\n\nThe principal contribution of this work is a tractable, efficient algorithm for optimizing arbitrary multimodal stochastic policies represented by energy-based models, as well as a discussion that relates this method to other recent algorithms in RL and probabilistic inference. In our experimental evaluation, we explore two potential applications of our approach. First, we demonstrate improved exploration performance in tasks with multi-modal reward landscapes, where conventional deterministic or unimodal methods are at high risk of falling into suboptimal local optima. Second, we explore how our method can be used to provide a degree of compositionality in reinforcement learning by showing that stochastic energy-based policies can serve as a much better initialization for learning new skills than either random policies or policies pretrained with conventional maximum reward objectives.\n\n\nPreliminaries\n\nIn this section, we will define the reinforcement learning problem that we are addressing and briefly summarize the maximum entropy policy search objective. We will also present a few useful identities that we will build on in our algorithm, which will be presented in Section 3.\n\n\nMaximum Entropy Reinforcement Learning\n\nWe will address learning of maximum entropy policies with approximate inference for reinforcement learning in continuous action spaces. Our reinforcement learning problem can be defined as policy search in an infinite-horizon Markov decision process (MDP), which consists of the tuple (S, A, p s , r), The state space S and action space A are assumed to be continuous, and the state transition probability p s : S \u00d7 S \u00d7 A \u2192 [0, \u221e) represents the probability density of the next state s t+1 \u2208 S given the current state s t \u2208 S and action a t \u2208 A. The environment emits a reward r : S \u00d7 A \u2192 [r min , r max ] on each transition, which we will abbreviate as r t r(s t , a t ) to simplify notation. We will also use \u03c1 \u03c0 (s t ) and \u03c1 \u03c0 (s t , a t ) to denote the state and state-action marginals of the trajectory distribution induced by a policy \u03c0(a t |s t ).\n\nOur goal is to learn a policy \u03c0(a t |s t ). We can define the standard reinforcement learning objective in terms of the above quantities as\n\u03c0 * std = arg max \u03c0 t E (st,at)\u223c\u03c1\u03c0 [r(s t , a t )] .(1)\nMaximum entropy RL augments the reward with an entropy term, such that the optimal policy aims to maximize its entropy at each visited state:\n\n(2)\n\u03c0 * MaxEnt = arg max \u03c0 t E (st,at)\u223c\u03c1\u03c0 [r(s t , a t )+\u03b1H(\u03c0( \u00b7 |s t ))] ,\nwhere \u03b1 is an optional but convenient parameter that can be used to determine the relative importance of entropy and reward. 1 Optimization problems of this type have been explored in a number of prior works (Kappen, 2005;Todorov, 2007;Ziebart et al., 2008), which are covered in more detail in Section 4. Note that this objective differs qualitatively from the behavior of Boltzmann exploration (Sallans & Hinton, 2004) and PGQ (O'Donoghue et al., 2016), which greedily maximize entropy at the current time step, but do not explicitly optimize for policies that aim to reach states where they will have high entropy in the future. This distinction is crucial, since the maximum entropy objective can be shown to maximize the entropy of the entire trajectory distribution for the policy \u03c0, while the greedy Boltzmann exploration approach does not (Ziebart et al., 2008;Levine & Abbeel, 2014). As we will discuss in Section 5, this maximum entropy formulation has a number of benefits, such as improved exploration in multimodal problems and better pretraining for later adaptation.\n\nIf we wish to extend either the conventional or the maximum entropy RL objective to infinite horizon problems, it is convenient to also introduce a discount factor \u03b3 to ensure that the sum of expected rewards (and entropies) is finite.\n\nIn the context of policy search algorithms, the use of a discount factor is actually a somewhat nuanced choice, and writing down the precise objective that is optimized when using the discount factor is non-trivial (Thomas, 2014). We defer the full derivation of the discounted objective to Appendix A, since it is unwieldy to write out explicitly, but we will use the discount \u03b3 in the following derivations and in our final algorithm.\n\n\nSoft Value Functions and Energy-Based Models\n\nOptimizing the maximum entropy objective in (2) provides us with a framework for training stochastic policies, but we must still choose a representation for these policies. The choices in prior work include discrete multinomial distributions (O'Donoghue et al., 2016) and Gaussian distributions (Rawlik et al., 2012). However, if we want to use a very general class of distributions that can represent complex, multimodal behaviors, we can instead opt for using general energy-based policies of the form\n\u03c0(a t |s t ) \u221d exp (\u2212E(s t , a t )) ,(3)\nwhere E is an energy function that could be represented, for example, by a deep neural network. If we use a universal function approximator for E, we can represent any distribution \u03c0(a t |s t ). There is a close connection between such energy-based models and soft versions of value functions and Q-functions, where we set E(s t , a t ) = \u2212 1 \u03b1 Q soft (s t , a t ) and use the following theorem: Theorem 1. Let the soft Q-function be defined by\nQ * soft (s t , a t ) = r t +(4)E (st+1,... )\u223c\u03c1\u03c0 \u221e l=1\n\u03b3 l (r t+l +\u03b1H (\u03c0 * MaxEnt ( \u00b7 |s t+l ))) , and soft value function by\nV * soft (s t ) = \u03b1 log A exp 1 \u03b1 Q * soft (s t , a ) da . (5)\nThen the optimal policy for (2) is given by\n\u03c0 * MaxEnt (a t |s t ) = exp 1 \u03b1 (Q * soft (s t , a t )\u2212V * soft (s t )) . (6)\nProof. See Appendix A.1 as well as (Ziebart, 2010).\n\nTheorem 1 connects the maximum entropy objective in (2) and energy-based models, where 1 \u03b1 Q soft (s t , a t ) acts as the negative energy, and 1 \u03b1 V soft (s t ) serves as the log-partition function. As with the standard Q-function and value function, we can relate the Q-function to the value function at a future state via a soft Bellman equation:\n\nTheorem 2. The soft Q-function in (4) satisfies the soft Bellman equation\nQ * soft (s t , a t ) = r t + \u03b3 E st+1\u223cps [V * soft (s t+1 )] ,(7)\nwhere the soft value function V * soft is given by (5). Proof. See Appendix A.2, as well as (Ziebart, 2010).\n\nThe soft Bellman equation is a generalization of the conventional (hard) equation, where we can recover the more standard equation as \u03b1 \u2192 0, which causes (5) to approach a hard maximum over the actions. In the next section, we will discuss how we can use these identities to derive a Q-learning style algorithm for learning maximum entropy policies, and how we can make this practical for arbitrary Q-function representations via an approximate inference procedure.\n\n\nTraining Expressive Energy-Based Models via Soft Q-Learning\n\nIn this section, we will present our proposed reinforcement learning algorithm, which is based on the soft Q-function described in the previous section, but can be implemented via a tractable stochastic gradient descent procedure with approximate sampling. We will first describe the general case of soft Q-learning, and then present the inference procedure that makes it tractable to use with deep neural network representations in high-dimensional continuous state and action spaces. In the process, we will relate this Qlearning procedure to inference in energy-based models and actor-critic algorithms.\n\n\nSoft Q-Iteration\n\nWe can obtain a solution to (7) by iteratively updating estimates of V * soft and Q * soft . This leads to a fixed-point iteration that resembles Q-iteration:\n\nTheorem 3. Soft Q-iteration. Let Q soft ( \u00b7 , \u00b7 ) and V soft ( \u00b7 ) be bounded and assume that A exp( 1 \u03b1 Q soft (\u00b7, a ))da <\u221e and that Q * soft < \u221e exists. Then the fixed-point iteration\nQ soft (s t , a t ) \u2190 r t +\u03b3 E st+1\u223cps [V soft (s t+1 )] , \u2200s t , a t (8) V soft (s t ) \u2190 \u03b1 log A exp 1 \u03b1 Q soft (s t , a ) da , \u2200s t (9)\nconverges to Q * soft and V * soft , respectively. Proof. See Appendix A.2 as well as (Fox et al., 2016).\n\nWe refer to the updates in (8) and (9) as the soft Bellman backup operator that acts on the soft value function, and denote it by T . The maximum entropy policy in (6) can then be recovered by iteratively applying this operator until convergence. However, there are several practicalities that need to be considered in order to make use of the algorithm. First, the soft Bellman backup cannot be performed exactly in continuous or large state and action spaces, and second, sampling from the energy-based model in (6) is intractable in general. We will address these challenges in the following sections.\n\n\nSoft Q-Learning\n\nThis section discusses how the Bellman backup in Theorem 3 can be implemented in a practical algorithm that uses a finite set of samples from the environment, resulting in a method similar to Q-learning. Since the soft Bellman backup is a contraction (see Appendix A.2), the optimal value function is the fixed point of the Bellman backup, and we can find it by optimizing for a Q-function for which the soft Bellman error |T Q \u2212 Q| is minimized at all states and actions. While this procedure is still intractable due to the integral in (9) and the infinite set of all states and actions, we can express it as a stochastic optimization, which leads to a stochastic gradient descent update procedure. We will model the soft Q-function with a function approximator with parameters \u03b8 and denote it as Q \u03b8 soft (s t , a t ). To convert Theorem 3 into a stochastic optimization problem, we first express the soft value function in terms of an expectation via importance sampling:\nV \u03b8 soft (s t ) = \u03b1 log E q a exp 1 \u03b1 Q \u03b8 soft (s t , a ) q a (a ) ,(10)\nwhere q a can be an arbitrary distribution over the action space. Second, by noting the identity\ng 1 (x) = g 2 (x) \u2200x \u2208 X \u21d4 E x\u223cq (g 1 (x) \u2212 g 2 (x)) 2 = 0,\nwhere q can be any strictly positive density function on X, we can express the soft Q-iteration in an equivalent form as minimizing\nJ Q (\u03b8) = E st\u223cqs t ,at\u223cqa t 1 2 Q\u03b8 soft (s t , a t )\u2212Q \u03b8 soft (s t , a t ) 2 ,(11)\nwhere q st , q at are positive over S and A respectively, Q\u03b8 soft (s t , a t ) = r t + \u03b3E st+1\u223cps [V\u03b8 soft (s t+1 )] is a target Qvalue, with V\u03b8 soft (s t+1 ) given by (10) and \u03b8 being replaced by the target parameters,\u03b8.\n\nThis stochastic optimization problem can be solved approximately using stochastic gradient descent using sampled states and actions. While the sampling distributions q st and q at can be arbitrary, we typically use real samples from rollouts of the current policy \u03c0(a t |s t ) \u221d exp 1 \u03b1 Q \u03b8 soft (s t , a t ) . For q a we have more options. A convenient choice is a uniform distribution. However, this choice can scale poorly to high dimensions. A better choice is to use the current policy, which produces an unbiased estimate of the soft value as can be confirmed by substitution. This overall procedure yields an iterative approach that optimizes over the Q-values, which we summarize in Section 3.4.\n\nHowever, in continuous spaces, we still need a tractable way to sample from the policy \u03c0(a t |s t ) \u221d exp 1 \u03b1 Q \u03b8 soft (s t , a t ) , both to take on-policy actions and, if so desired, to generate action samples for estimating the soft value function. Since the form of the policy is so general, sampling from it is intractable. We will therefore use an approximate sampling procedure, as discussed in the following section.\n\n\nApproximate Sampling and Stein Variational Gradient Descent (SVGD)\n\nIn this section we describe how we can approximately sample from the soft Q-function. Existing approaches that sample from energy-based distributions generally fall into two categories: methods that use Markov chain Monte Carlo (MCMC) based sampling (Sallans & Hinton, 2004), and methods that learn a stochastic sampling network trained to output approximate samples from the target distribution (Zhao et al., 2016;Kim & Bengio, 2016). Since sampling via MCMC is not tractable when the inference must be performed online (e.g. when executing a policy), we will use a sampling network based on Stein variational gradient descent (SVGD) (Liu & Wang, 2016) and amortized SVGD (Wang & Liu, 2016). Amortized SVGD has several intriguing properties: First, it provides us with a stochastic sampling network that we can query for extremely fast sample generation. Second, it can be shown to converge to an accurate estimate of the posterior distribution of an EBM. Third, the resulting algorithm, as we will show later, strongly resembles actor-critic algorithm, which provides for a simple and computationally efficient implementation and sheds light on the connection between our algorithm and prior actor-critic methods.\n\nFormally, we want to learn a state-conditioned stochastic neural network a t = f \u03c6 (\u03be; s t ), parametrized by \u03c6, that maps noise samples \u03be drawn from a normal Gaussian, or other arbitrary distribution, into unbiased action samples from the target EBM corresponding to Q \u03b8 soft . We denote the induced distribution of the actions as \u03c0 \u03c6 (a t |s t ), and we want to find parameters \u03c6 so that the induced distribution approximates the energy-based distribution in terms of the KL divergence J \u03c0 (\u03c6; s t ) = (12)\nD KL \u03c0 \u03c6 ( \u00b7 |s t ) exp 1 \u03b1 Q \u03b8 soft (s t , \u00b7 ) \u2212 V \u03b8 soft .\nSuppose we \"perturb\" a set of independent samples a Wang, 2016) provides the most greedy directions as a functional\n(i) t = f \u03c6 (\u03be (i) ; s t ) in appropriate directions \u2206f \u03c6 (\u03be (i) ; s t ), the in- duced KL divergence can be reduced. Stein variational gra- dient descent (Liu &\u2206f \u03c6 ( \u00b7 ; s t ) = E at\u223c\u03c0 \u03c6 \u03ba(a t , f \u03c6 ( \u00b7 ; s t ))\u2207 a Q \u03b8 soft (s t , a ) a =at (13) + \u03b1 \u2207 a \u03ba(a , f \u03c6 ( \u00b7 ; s t )) a =at ,\nwhere \u03ba is a kernel function (typically Gaussian, see details in Appendix D.1). To be precise, \u2206f \u03c6 is the optimal direction in the reproducing kernel Hilbert space of \u03ba, and is thus not strictly speaking the gradient of (12), but it turns out that we can set \u2202J\u03c0 \u2202at \u221d \u2206f \u03c6 as explained in (Wang & Liu, 2016). With this assumption, we can use the chain rule and backpropagate the Stein variational gradient into the policy network according to\n\u2202J \u03c0 (\u03c6; s t ) \u2202\u03c6 \u221d E \u03be \u2206f \u03c6 (\u03be; s t ) \u2202f \u03c6 (\u03be; s t ) \u2202\u03c6 ,(14)\nand use any gradient-based optimization method to learn the optimal sampling network parameters. The sampling network f \u03c6 can be viewed as an actor in an actor-critic algorithm. We will discuss this connection in Section 4, but first we will summarize our complete maximum entropy policy learning algorithm.\n\n\nAlgorithm Summary\n\nTo summarize, we propose the soft Q-learning algorithm for learning maximum entropy policies in continuous domains. The algorithm proceeds by alternating between collecting new experience from the environment, and updating the soft Q-function and sampling network parameters. The experience is stored in a replay memory buffer D as standard in deep Q-learning (Mnih et al., 2013), and the parameters are updated using random minibatches from this memory. The soft Q-function updates use a delayed version of the target values (Mnih et al., 2015). For optimization, we use the ADAM (Kingma & Ba, 2015) optimizer and empirical estimates of the gradients, which we denote by\u2207. The exact formulae used to compute the gradient estimates is deferred to Appendix C, which also discusses other implementation details, but we summarize an overview of soft Q-learning in Algorithm 1.\n\n\nRelated Work\n\nMaximum entropy policies emerge as the solution when we cast optimal control as probabilistic inference. In the Algorithm 1 Soft Q-learning \u03b8, \u03c6 \u223c some initialization distributions. Assign target parameters:\u03b8 \u2190 \u03b8,\u03c6 \u2190 \u03c6. D \u2190 empty replay memory. for each epoch do for each t do Collect experience Sample an action for s t using f \u03c6 :\na t \u2190 f \u03c6 (\u03be; s t ) where \u03be \u223c N (0, I).\nSample next state from the environment: s t+1 \u223c p s (s t+1 |s t , a t ). Save the new experience in the replay memory: (10). Compute empirical gradient\u2207 \u03b8 J Q of (11). Update \u03b8 according to\u2207 \u03b8 J Q using ADAM.\nD \u2190 D \u222a {(s t , a t , r(s t , a t ), s t+1 )} . Sample a minibatch from the replay memory {(s (i) t , a (i) t , r (i) t , s (i) t+1 )} N i=0 \u223c D. Update the soft Q-function parameters Sample {a (i,j) } M j=0 \u223c q a for each s (i) t+1 . Compute empirical soft valuesV\u03b8 soft (s (i) t+1 ) in\n\nUpdate policy\n\nSample\n{\u03be (i,j) } M j=0 \u223c N (0, I) for each s (i) t . Compute actions a (i,j) t = f \u03c6 (\u03be (i,j) , s (i) t ).\nCompute \u2206f \u03c6 using empirical estimate of (13). Compute empiricial estimate of (14):\u2207 \u03c6 J \u03c0 . Update \u03c6 according to\u2207 \u03c6 J \u03c0 using ADAM. end for if epoch mod update interval = 0 then Update target parameters:\u03b8 \u2190 \u03b8,\u03c6 \u2190 \u03c6. end if end for case of linear-quadratic systems, the mean of the maximum entropy policy is exactly the optimal deterministic policy (Todorov, 2008), which has been exploited to construct practical path planning methods based on iterative linearization and probabilistic inference techniques (Toussaint, 2009). In discrete state spaces, the maximum entropy policy can be obtained exactly. This has been explored in the context of linearly solvable MDPs (Todorov, 2007) and, in the case of inverse reinforcement learning, MaxEnt IRL (Ziebart et al., 2008). In continuous systems and continuous time, path integral control studies maximum entropy policies and maximum entropy planning (Kappen, 2005). In contrast to these prior methods, our work is focused on extending the maximum entropy policy search framework to high-dimensional continuous spaces and highly multimodal objectives, via expressive general-purpose energy functions represented by deep neural networks. A number of related methods have also used maximum entropy policy optimization as an intermediate step for optimizing policies under a standard expected reward objective (Pe-ters et al., 2010;Neumann, 2011;Rawlik et al., 2012;Fox et al., 2016). Among these, the work of Rawlik et al. (2012) resembles ours in that it also makes use of a temporal difference style update to a soft Q-function. However, unlike this prior work, we focus on general-purpose energy functions with approximate sampling, rather than analytically normalizable distributions. A recent work (Liu et al., 2017) also considers an entropy regularized objective, though the entropy is on policy parameters, not on sampled actions. Thus the resulting policy may not represent an arbitrarily complex multi-modal distribution with a single parameter. The form of our sampler resembles the stochastic networks proposed in recent work on hierarchical learning (Florensa et al., 2017). However this prior work uses a task-specific reward bonus system to encourage stochastic behavior, while our approach is derived from optimizing a general maximum entropy objective.\n\nA closely related concept to maximum entropy policies is Boltzmann exploration, which uses the exponential of the standard Q-function as the probability of an action (Kaelbling et al., 1996). A number of prior works have also explored representing policies as energy-based models, with the Q-value obtained from an energy model such as a restricted Boltzmann machine (RBM) (Sallans & Hinton, 2004;Elfwing et al., 2010;Otsuka et al., 2010;Heess et al., 2012). Although these methods are closely related, they have not, to our knowledge, been extended to the case of deep network models, have not made extensive use of approximate inference techniques, and have not been demonstrated on the complex continuous tasks. More recently, O'Donoghue et al. (2016) drew a connection between Boltzmann exploration and entropy-regularized policy gradient, though in a theoretical framework that differs from maximum entropy policy search: unlike the full maximum entropy framework, the approach of O'Donoghue et al. (2016) only optimizes for maximizing entropy at the current time step, rather than planning for visiting future states where entropy will be further maximized. This prior method also does not demonstrate learning complex multimodal policies in continuous action spaces.\n\nAlthough we motivate our method as Q-learning, its structure resembles an actor-critic algorithm. It is particularly instructive to observe the connection between our approach and the deep deterministic policy gradient method (DDPG) (Lillicrap et al., 2015), which updates a Qfunction critic according to (hard) Bellman updates, and then backpropagates the Q-value gradient into the actor, similarly to NFQCA (Hafner & Riedmiller, 2011). Our actor update differs only in the addition of the \u03ba term. Indeed, without this term, our actor would estimate a maximum a posteriori (MAP) action, rather than capturing the entire EBM distribution. This suggests an intriguing connection between our method and DDPG: if we simply modify the DDPG critic updates to estimate soft Q-values, we recover the MAP variant of our method. Furthermore, this connection allows us to cast DDPG as simply an approximate Q-learning method, where the actor serves the role of an approximate maximizer. This helps explain the good performance of DDPG on off-policy data. We can also make a connection between our method and policy gradients. In Appendix B, we show that the policy gradient for a policy represented as an energy-based model closely corresponds to the update in soft Q-learning. Similar derivation is presented in a concurrent work (Schulman et al., 2017).\n\n\nExperiments\n\nOur experiments aim to answer the following questions:\n\n(1) Does our soft Q-learning method accurately capture a multi-modal policy distribution? (2) Can soft Q-learning with energy-based policies aid exploration for complex tasks that require tracking multiple modes? (3) Can a maximum entropy policy serve as a good initialization for finetuning on different tasks, when compared to pretraining with a standard deterministic objective? We compare our algorithm to DDPG (Lillicrap et al., 2015), which has been shown to achieve better sample efficiency on the continuous control problems that we consider than other recent techniques such as REINFORCE (Williams, 1992), TRPO (Schulman et al., 2015a), and A3C . This comparison is particularly interesting since, as discussed in Section 4, DDPG closely corresponds to a deterministic maximum a posteriori variant of our method. The detailed experimental setup can be found in Appendix D. Videos of all experiments 2 and example source code 3 are available online.\n\n\nDidactic Example: Multi-Goal Environment\n\nIn order to verify that amortized SVGD can correctly draw samples from energy-based policies of the form exp Q \u03b8 soft (s, a) , and that our complete algorithm can successful learn to represent multi-modal behavior, we designed a simple \"multi-goal\" environment, in which the agent is a 2D point mass trying to reach one of four symmetrically placed goals. The reward is defined as a mixture of Gaussians, with means placed at the goal positions. An optimal strategy is to go to an arbitrary goal, and the optimal maximum entropy policy should be able to choose each of the four goals at random. The final policy obtained with our method is illustrated in Figure 1. The Q-values indeed have complex shapes, being unimodal at s = (\u22122, 0), convex at s = (0, 0), and bimodal at s = (2.5, 2.5). The stochastic policy samples actions closely following the energy landscape, hence learning diverse trajectories that lead to all four goals. In comparison, a policy trained with DDPG randomly commits to a single goal. . The x and y axes correspond to 2D velocity (actions) bounded between -1 and 1. Actions sampled from the policy are shown as blue stars. Note that, in regions (e.g. (2.5, 2.5)) between the goals, the method chooses multimodal actions.\n\n\nLearning Multi-Modal Policies for Exploration\n\nThough not all environments have a clear multi-modal reward landscape as in the \"multi-goal\" example, multimodality is prevalent in a variety of tasks. For example, a chess player might try various strategies before settling on one that seems most effective, and an agent navigating a maze may need to try various paths before finding the exit. During the learning process, it is often best to keep trying multiple available options until the agent is confident that one of them is the best (similar to a bandit problem (Lai & Robbins, 1985)). However, deep RL algorithms for continuous control typically use unimodal action distributions, which are not well suited to capture such multi-modality. As a consequence, such algorithms may prematurely commit to one mode and converge to suboptimal behavior.\n\nTo evaluate how maximum entropy policies might aid exploration, we constructed simulated continuous control environments where tracking multiple modes is important for success. The first experiment uses a simulated swimming snake (see Figure 2), which receives a reward equal to its speed along the x-axis, either forward or backward. However, once the swimmer swims far enough forward, it crosses a \"finish line\" and receives a larger reward. Therefore, the best learning strategy is to explore in both directions until the bonus reward is discovered, and then commit to swimming forward. As illustrated in Figure 6 in Appendix D.3, our method is able to recover this strategy, keeping track of both modes until the finish line is discovered. All stochastic policies eventually commit to swim- (a) Swimmer (higher is better) (b) Quadruped (lower is better) Figure 3. Comparison of soft Q-learning and DDPG on the swimmer snake task and the quadrupedal robot maze task. (a) Shows the maximum traveled forward distance since the beginning of training for several runs of each algorithm; there is a large reward after crossing the finish line. (b) Shows our method was able to reach a low distance to the goal faster and more consistently. The different lines show the minimum distance to the goal since the beginning of training. For both domains, all runs of our method cross the threshold line, acquiring the more optimal strategy, while some runs of DDPG do not. ming forward. The deterministic DDPG method shown in the comparison commits to a mode prematurely, with only 80% of the policies converging on a forward motion, and 20% choosing the suboptimal backward mode.\n\nThe second experiment studies a more complex task with a continuous range of equally good options prior to discovery of a sparse reward goal. In this task, a quadrupedal 3D robot (adapted from Schulman et al. (2015b)) needs to find a path through a maze to a target position (see Figure 2). The reward function is a Gaussian centered at the target. The agent may choose either the upper or lower passage, which appear identical at first, but the upper passage is blocked by a barrier. Similar to the swimmer experiment, the optimal strategy requires exploring both directions and choosing the better one. Figure 3(b) compares the performance of DDPG and our method. The curves show the minimum distance to the target achieved so far and the threshold equals the minimum possible distance if the robot chooses the upper passage. Therefore, successful exploration means reaching below the threshold. All policies trained with our method manage to succeed, while only 60% policies trained with DDPG converge to choosing the lower passage. Figure 4. Quadrupedal robot (a) was trained to walk in random directions in an empty pretraining environment (details in Figure 7, see Appendix D.3), and then finetuned on a variety of tasks, including a wide (b), narrow (c), and U-shaped hallway (d).\n(a) (b) (c) (d)\n\nAccelerating Training on Complex Tasks with Pretrained Maximum Entropy Policies\n\nA standard way to accelerate deep neural network training is task-specific initialization (Goodfellow et al., 2016), where a network trained for one task is used as initialization for another task. The first task might be something highly general, such as classifying a large image dataset, while the second task might be more specific, such as finegrained classification with a small dataset. Pretraining has also been explored in the context of RL (Shelhamer et al., 2016). However, in RL, near-optimal policies are often near-deterministic, which makes them poor initializers for new tasks. In this section, we explore how our energybased policies can be trained with fairly broad objectives to produce an initializer for more quickly learning more specific tasks.\n\nWe demonstrate this on a variant of the quadrupedal robot task. The pretraining phase involves learning to locomote in an arbitrary direction, with a reward that simply equals the speed of the center of mass. The resulting policy moves the agent quickly to an randomly chosen direction. An overhead plot of the center of mass traces is shown above to illustrate this. This pretraining is similar in some ways to recent work on modulated controllers (Heess et al., 2016) and hierarchical models (Florensa et al., 2017). However, in contrast to these prior works, we do not require any taskspecific high-level goal generator or reward. Figure 4 also shows a variety of test environments that we used to finetune the running policy for a specific task. In the hallway environments, the agent receives the same reward, but the walls block sideways motion, so the optimal solution requires learning to run in a particular direction. Narrow hallways require choosing a more specific direction, but also allow the agent to use the walls to funnel itself. The U-shaped maze requires the agent to learn a curved trajectory in order to arrive at the target, with the reward given by a Gaussian bump at the target location.\n\nAs illustrated in Figure 7 in Appendix D.3, the pretrained policy explores the space extensively and in all directions. This gives a good initialization for the policy, allowing it to Figure 5. Performance in the downstream task with fine-tuning (MaxEnt) or training from scratch (DDPG). The x-axis shows the training iterations. The y-axis shows the average discounted return. Solid lines are average values over 10 random seeds. Shaded regions correspond to one standard deviation.\n\nlearn the behaviors in the test environments more quickly than training a policy with DDPG from a random initialization, as shown in Figure 5. We also evaluated an alternative pretraining method based on deterministic policies learned with DDPG. However, deterministic pretraining chooses an arbitrary but consistent direction in the training environment, providing a poor initialization for finetuning to a specific task, as shown in the results plots.\n\n\nDiscussion and Future Work\n\nWe presented a method for learning stochastic energybased policies with approximate inference via Stein variational gradient descent (SVGD). Our approach can be viewed as a type of soft Q-learning method, with the additional contribution of using approximate inference to obtain complex multimodal policies. The sampling network trained as part of SVGD can also be viewed as tking the role of an actor in an actor-critic algorithm. Our experimental results show that our method can effectively capture complex multi-modal behavior on problems ranging from toy point mass tasks to complex torque control of simulated walking and swimming robots. The applications of training such stochastic policies include improved exploration in the case of multimodal objectives and compositionality via pretraining general-purpose stochastic policies that can then be efficiently finetuned into task-specific behaviors.\n\nWhile our work explores some potential applications of energy-based policies with approximate inference, an exciting avenue for future work would be to further study their capability to represent complex behavioral repertoires and their potential for composability. In the context of linearly solvable MDPs, several prior works have shown that policies trained for different tasks can be composed to create new optimal policies (Da Silva et al., 2009;Todorov, 2009). While these prior works have only explored simple, tractable representations, our method could be used to extend these results to complex and highly multi-modal deep neural network models, making them suitable for composable control of complex high-dimensional systems, such as humanoid robots. This composability could be used in future work to create a huge variety of near-optimal skills from a collection of energy-based policy building blocks. \n\n\nAppendices\n\n\nA. Policy Improvement Proofs\n\nIn this appendix, we present proofs for the theorems that allow us to show that soft Q-learning leads to policy improvement with respect to the maximum entropy objective. First, we define a slightly more nuanced version of the maximum entropy objective that allows us to incorporate a discount factor. This definition is complicated by the fact that, when using a discount factor for policy gradient methods, we typically do not discount the state distribution, only the rewards. In that sense, discounted policy gradients typically do not optimize the true discounted objective. Instead, they optimize average reward, with the discount serving to reduce variance, as discussed by Thomas (2014). However, for the purposes of the derivation, we can define the objective that is optimized under a discount factor as\n\u03c0 * MaxEnt = arg max \u03c0 t E (st,at)\u223c\u03c1\u03c0 \u221e l=t \u03b3 l\u2212t E (s l ,a l ) [r(s t , a t ) + \u03b1H(\u03c0( \u00b7 |s t ))|s t , a t ] .\nThis objective corresponds to maximizing the discounted expected reward and entropy for future states originating from every state-action tuple (s t , a t ) weighted by its probability \u03c1 \u03c0 under the current policy. Note that this objective still takes into account the entropy of the policy at future states, in contrast to greedy objectives such as Boltzmann exploration or the approach proposed by O'Donoghue et al. (2016).\n\nWe can now derive policy improvement results for soft Q-learning. We start with the definition of the soft Q-value Q \u03c0 soft for any policy \u03c0 as the expectation under \u03c0 of the discounted sum of rewards and entropy :\nQ \u03c0 soft (s, a) r 0 + E \u03c4 \u223c\u03c0,s0=s,a0=a \u221e t=1 \u03b3 t (r t + H(\u03c0( \u00b7 |s t ))) .(15)\nHere, \u03c4 = (s 0 , a 0 , s 1 , a 1 , . . .) denotes the trajectory originating at (s, a). Notice that for convenience, we set the entropy parameter \u03b1 to 1. The theory can be easily adapted by dividing rewards by \u03b1.\n\nThe discounted maximum entropy policy objective can now be defined as\nJ(\u03c0) t E (st,at)\u223c\u03c1\u03c0 [Q \u03c0 soft (s t , a t ) + \u03b1H(\u03c0( \u00b7 |s t ))] .(16)\n\nA.1. The Maximum Entropy Policy\n\nIf the objective function is the expected discounted sum of rewards, the policy improvement theorem (Sutton & Barto, 1998) describes how policies can be improved monotonically. There is a similar theorem we can derive for the maximum entropy objective:\n\nTheorem 4. (Policy improvement theorem) Given a policy \u03c0, define a new policy\u03c0 as \u03c0( \u00b7 |s) \u221d exp Q \u03c0 soft (s, \u00b7 ) , \u2200s.\n\nAssume that throughout our computation, Q is bounded and exp(Q(s, a)) da is bounded for any s (for both \u03c0 and\u03c0). Then Q\u03c0 soft (s, a) \u2265 Q \u03c0 soft (s, a) \u2200s, a.\n\nThe proof relies on the following observation: if one greedily maximize the sum of entropy and value with one-step look-ahead, then one obtains\u03c0 from \u03c0:\nH(\u03c0( \u00b7 |s)) + E a\u223c\u03c0 [Q \u03c0 soft (s, a)] \u2264 H(\u03c0( \u00b7 |s)) + E a\u223c\u03c0 [Q \u03c0 soft (s, a)] .(18)\nThe proof is straight-forward by noticing that H(\u03c0( \u00b7 |s)) + E a\u223c\u03c0 [Q \u03c0 soft (s, a)] = \u2212D KL (\u03c0( \u00b7 |s) \u03c0( \u00b7 |s)) + log exp (Q \u03c0 soft (s, a)) da\n\nThen we can show that Q \u03c0 soft (s, a) = E s1 [r 0 + \u03b3(H(\u03c0( \u00b7 |s 1 )) + E a1\u223c\u03c0 [Q \u03c0 soft (s 1 , a 1 )])] \u2264 E s1 [r 0 + \u03b3(H(\u03c0( \u00b7 |s 1 )) + E a1\u223c\u03c0 [Q \u03c0 soft (s 1 , a 1 )])] = E s1 [r 0 + \u03b3(H(\u03c0( \u00b7 |s 1 )) + r 1 )] + \u03b3 2 E s2 [H(\u03c0( \u00b7 |s 2 )) + E a2\u223c\u03c0 [Q \u03c0 soft (s 2 , a 2 )]] \u2264 E s1 [r 0 + \u03b3(H(\u03c0( \u00b7 |s 1 )) + r 1 ] + \u03b3 2 E s2 [H(\u03c0( \u00b7 |s 2 )) + E a2\u223c\u03c0 [Q \u03c0 soft (s 2 , a 2 )]] = E s1 a2\u223c\u03c0,s2 r 0 + \u03b3(H(\u03c0( \u00b7 |s 1 )) + r 1 ) + \u03b3 2 (H(\u03c0( \u00b7 |s 2 )) + r\n2 ) + \u03b3 3 E s3 [H(\u03c0( \u00b7 |s 3 )) + E a3\u223c\u03c0 [Q \u03c0 soft (s 3 , a 3 )]] . . . \u2264 E \u03c4 \u223c\u03c0 r 0 + \u221e t=1 \u03b3 t (H(\u03c0( \u00b7 |s t )) + r t ) = Q\u03c0 soft (s, a).(20)\nWith Theorem 4, we start from an arbitrary policy \u03c0 0 and define the policy iteration as\n\u03c0 i+1 ( \u00b7 |s) \u221d exp (Q \u03c0i soft (s, \u00b7 )) .(21)\nThen Q \u03c0i soft (s, a) improves monotonically. Under certain regularity conditions, \u03c0 i converges to \u03c0 \u221e . Obviously, we have \u03c0 \u221e (a|s) \u221d a exp (Q \u03c0\u221e (s, a)). Since any non-optimal policy can be improved this way, the optimal policy must satisfy this energy-based form. Therefore we have proven Theorem 1.\n\n\nA.2. Soft Bellman Equation and Soft Value Iteration\n\nRecall the definition of the soft value function:\nV \u03c0 soft (s) log exp (Q \u03c0 soft (s, a)) da.(22)\nSuppose \u03c0(a|s) = exp (Q \u03c0 soft (s, a) \u2212 V \u03c0 soft (s)). Then we can show that Q \u03c0 soft (s, a) = r(s, a) + \u03b3 E s \u223cps H(\u03c0( \u00b7 |s )) + E a \u223c\u03c0( \u00b7 |s ) [Q \u03c0 soft (s , a )] = r(s, a) + \u03b3 E s \u223cps [V \u03c0 soft (s )] .\n\nThis completes the proof of Theorem 2.\n\nFinally, we show that the soft value iteration operator T , defined as T Q(s, a) r(s, a) + \u03b3 E s \u223cps log exp Q(s , a ) da ,\n\nis a contraction. Then Theorem 3 follows immediately.\n\nThe following proof has also been presented by Fox et al. (2016). Define a norm on Q-values as\nQ 1 \u2212 Q 2 max s,a |Q 1 (s, a) \u2212 Q 2 (s, a)|. Suppose \u03b5 = Q 1 \u2212 Q 2 . Then log exp(Q 1 (s , a )) da \u2264 log exp(Q 2 (s , a ) + \u03b5) da = log exp(\u03b5) exp Q 2 (s , a ) da = \u03b5 + log exp Q 2 (a , a ) da .(25)\nSimilarly, log exp Q 1 (s , a ) da \u2265 \u2212\u03b5 + log exp Q 2 (s , a ) da . Therefore T Q 1 \u2212 T Q 2 \u2264 \u03b3\u03b5 = \u03b3 Q 1 \u2212 Q 2 . So T is a contraction. As a consequence, only one Q-value satisfies the soft Bellman equation, and thus the optimal policy presented in Theorem 1 is unique.\n\n\nB. Connection between Policy Gradient and Q-Learning\n\nWe show that entropy-regularized policy gradient can be viewed as performing soft Q-learning on the maximum-entropy objective. First, suppose that we parametrize a stochastic policy as\n\u03c0 \u03c6 (a t |s t ) exp E \u03c6 (s t , a t ) \u2212\u0112 \u03c6 (s t ) ,(26)\nwhere E \u03c6 (s t , a t ) is an energy function with parameters \u03c6, and\u0112 \u03c6 (s t ) = log A exp E \u03c6 (s t , a t )da t is the corresponding partition function. This is the most general class of policies, as we can trivially transform any given distribution p into exponential form by defining the energy as log p. We can write an entropy-regularized policy gradient as follows:\n\u2207 \u03c6 J PG (\u03c6) = E (st,at)\u223c\u03c1 \u03c0 \u03c6 \u2207 \u03c6 log \u03c0 \u03c6 (a t |s t ) Q \u03c0 \u03c6 (s t , a t ) + b \u03c6 (s t ) + \u2207 \u03c6 E st\u223c\u03c1 \u03c0 \u03c6 H(\u03c0 \u03c6 ( \u00b7 |s t )) ,(27)\nwhere \u03c1 \u03c0 \u03c6 (s t , a t ) is the distribution induced by the policy,Q \u03c0 \u03c6 (s t , a t ) is an empirical estimate of the Q-value of the policy, and b \u03c6 (s t ) is a state-dependent baseline that we get to choose. The gradient of the entropy term is given by\n\u2207 \u03c6 H(\u03c0 \u03c6 ) = \u2212 \u2207 \u03c6 E st\u223c\u03c1 \u03c0 \u03c6 E at\u223c\u03c0 \u03c6 (at|st) log \u03c0 \u03c6 (a t |s t ) = \u2212 E (st,at)\u223c\u03c1 \u03c0 \u03c6 \u2207 \u03c6 log \u03c0 \u03c6 (a t |s t ) log \u03c0 \u03c6 (a t |s t ) + \u2207 \u03c6 log \u03c0 \u03c6 (a t |s t ) = \u2212 E (st,at)\u223c\u03c1 \u03c0 \u03c6 \u2207 \u03c6 log \u03c0 \u03c6 (a t |s t ) 1 + log \u03c0 \u03c6 (a t |s t ) ,(28)\nand after substituting this back into (27), noting (26), and choosing b \u03c6 (s t ) =\u0112 \u03c6 (s t ) + 1, we arrive at a simple form for the policy gradient:\n= E (st,at)\u223c\u03c1 \u03c0 \u03c6 \u2207 \u03c6 E \u03c6 (s t , a t ) \u2212 \u2207 \u03c6\u0112 \u03c6 (s t ) Q \u03c0 \u03c6 (s t , a t ) \u2212 E \u03c6 (s t , a t ) .(29)\nTo show that (29) indeed correponds to soft Q-learning update, we consider the Bellman error\nJ Q (\u03b8) = E st\u223cqs t ,at\u223cqa t 1 2 Q \u03b8 soft (s t , a t ) \u2212 Q \u03b8 soft (s t , a t ) 2 ,(30)\nwhereQ \u03b8 soft is an empirical estimate of the soft Q-function. There are several valid alternatives for this estimate, but in order to show a connection to policy gradient, we choose a specific form\nQ \u03b8 soft (s t , a t ) =\u00c2\u03b8 soft (s t , a t ) + V \u03b8 soft (s t ),(31)\nwhere\u00c2\u03b8 soft is an empirical soft advantage function that is assumed not to contribute the gradient computation. With this choice, the gradient of the Bellman error becomes\n\u2207 \u03b8 J Q (\u03b8) = E st\u223cqs t ,at\u223cqa t \u2207 \u03b8 Q \u03b8 soft (s t , a t ) \u2212 \u2207 \u03b8 V \u03b8 soft (s t ) \u00c2\u03b8 soft (s t , a t ) + V \u03b8 soft (s t , a t ) \u2212 Q \u03b8 soft (s t , a t ) = E st\u223cqs t ,at\u223cqa t \u2207 \u03b8 Q \u03b8 soft (s t , a t ) \u2212 \u2207 \u03b8 V \u03b8 soft (s t ) Q \u03b8 soft (s t , a t ) \u2212 Q \u03b8 soft (s t , a t ) .(32)\nNow, if we choose E \u03c6 (s t , a t ) Q \u03b8 soft (s t , a t ) and q st (s t )q at (a t ) \u03c1 \u03c0 \u03c6 (s t , a t ), we recover the policy gradient in (29). Note that the choice of using an empirical estimate of the soft advantage rather than soft Q-value makes the target independent of the soft value, and at convergence, Q \u03b8 soft approximates the soft Q-value up to an additive constant. The resulting policy is still correct, since the Boltzmann distribution in (26) is independent of constant shift in the energy function.\n\nC. Implementation\n\n\nC.1. Computing the Policy Update\n\nHere we explain in full detail how the policy update direction\u2207 \u03c6 J \u03c0 in Algorithm 1 is computed. We reuse the indices i, j in this section with a different meaning than in the body of the paper for the sake of providing a cleaner presentation.\n\nExpectations appear in amortized SVGD in two places. First, SVGD approximates the optimal descent direction \u03c6( \u00b7 ) in Equation (13) with an empirical average over the samples a (i) t = f \u03c6 (\u03be (i) ). Similarly, SVGD approximates the expectation in Equation (14) with samples\u00e3 (j) t = f \u03c6 (\u03be (j) ), which can be the same or different from a (i) t . Substituting (13) into (14) and taking the gradient gives the empirical estimat\u00ea\n\u2207 \u03c6 J \u03c0 (\u03c6; s t ) = 1 KM K j=1 M i=1 \u03ba(a (i) t ,\u00e3 (j) t )\u2207 a Q soft (s t , a ) a =a (i) t + \u2207 a \u03ba(a ,\u00e3 (j) t ) a =a (i) t \u2207 \u03c6 f \u03c6 (\u03be (j) ; s t ).\nFinally, the update direction\u2207 \u03c6 J \u03c0 is the average of\u2207 \u03c6 J \u03c0 (\u03c6; s t ), where s t is drawn from a mini-batch.\n\n\nC.2. Computing the Density of Sampled Actions\n\nEquation (10) states that the soft value can be computed by sampling from a distribution q a and that q a ( \u00b7 ) \u221d exp 1 \u03b1 Q \u03c6 soft (s, \u00b7 ) is optimal. A direct solution is to obtain actions from the sampling network: a = f \u03c6 (\u03be ; s). If the samples \u03be and actions a have the same dimension, and if the jacobian matrix \u2202a \u2202\u03be is non-singular, then the probability density is\nq a (a ) = p \u03be (\u03be ) 1 det \u2202a \u2202\u03be .(33)\nIn practice, the Jacobian is usually singular at the beginning of training, when the sampler f \u03c6 is not fully trained. A simple solution is to begin with uniform action sampling and then switch to f \u03c6 later, which is reasonable, since an untrained sampler is unlikely to produce better samples for estimating the partition function anyway.\n\n\nD. Experiments\n\n\nD.1. Hyperparameters\n\nThroughout all experiments, we use the following parameters for both DDPG and soft Q-learning. The Q-values are updated using ADAM with learning rate 0.001. The DDPG policy and soft Q-learning sampling network use ADAM with a learning rate of 0.0001. The algorithm uses a replay pool of size one million. Training does not start until the replay pool has at least 10,000 samples. Every mini-batch has size 64. Each training iteration consists of 10000 time steps, and both the Q-values and policy / sampling network are trained at every time step. All experiments are run for 500 epochs, except that the multi-goal task uses 100 epochs and the fine-tuning tasks are trained for 200 epochs. Both the Q-value and policy / sampling network are neural networks comprised of two hidden layers, with 200 hidden units at each layer and ReLU nonlinearity. Both DDPG and soft Q-learning use additional OU Noise (Uhlenbeck & Ornstein, 1930;Lillicrap et al., 2015) to improve exploration. The parameters are \u03b8 = 0.15 and \u03c3 = 0.3. In addition, we found that updating the target parameters too frequently can destabilize training. Therefore we freeze target parameters for every 1000 time steps (except for the swimming snake experiment, which freezes for 5000 epochs), and then copy the current network parameters to the target networks directly (\u03c4 = 1).\n\nSoft Q-learning uses K = M = 32 action samples (see Appendix C.1) to compute the policy update, except that the multigoal experiment uses K = M = 100. The number of additional action samples to compute the soft value is K V = 50. The kernel \u03ba is a radial basis function, written as \u03ba(a, a ) = exp(\u2212 1 h a \u2212 a 2 2 ), where h = d 2 log(M +1) , with d equal to the median of pairwise distance of sampled actions a (i) t . Note that the step size h changes dynamically depending on the state s, as suggested in (Liu & Wang, 2016).\n\nThe entropy coefficient \u03b1 is 10 for multi-goal environment, and 0.1 for the swimming snake, maze, hallway (pretraining) and U-shaped maze (pretraining) experiments.\n\nAll fine-tuning tasks anneal the entropy coefficient \u03b1 quickly in order to improve performance, since the goal during finetuning is to recover a near-deterministic policy on the fine-tuning task. In particular, \u03b1 is annealed log-linearly to 0.001 within 20 epochs of fine-tuning. Moreover, the samples \u03be are fixed to a set {\u03be i } K \u03be i=1 and K \u03be is reduced linearly to 1 within 20 epochs.\n\n\nD.2. Task description\n\nAll tasks have a horizon of T = 500, except the multi-goal task, which uses T = 20. We add an additional termination condition to the quadrupedal 3D robot to discourage it from flipping over. . Forward swimming distance achieved by each policy. Each row is a policy with a unique random seed. x: training iteration, y: distance (positive: forward, negative: backward). Red line: the \"finish line.\" The blue shaded region is bounded by the maximum and minimum distance (which are equal for DDPG). The plot shows that our method is able to explore equally well in both directions before it commits to the better one.  Figure 7. The plot shows trajectories of the quadrupedal robot during maximum entropy pretraining. The robot has diverse behavior and explores multiple directions. The four columns correspond to entropy coefficients \u03b1 = 10, 1, 0.1, 0.01 respectively. Different rows correspond to policies trained with different random seeds. The x and y axes show the x and y coordinates of the center-of-mass. As \u03b1 decreases, the training process focuses more on high rewards, therefore exploring the training ground more extensively. However, low \u03b1 also tends to produce less diverse behavior. Therefore the trajectories are more concentrated in the fourth column.\n\nFigure 1 .\n1Illustration of the 2D multi-goal environment. Left: trajectories from a policy learned with our method (solid blue lines). The x and y axes correspond to 2D positions (states). The agent is initialized at the origin. The goals are depicted as red dots, and the level curves show the reward. Right: Q-values at three selected states, depicted by level curves (red: high values, blue: low values)\n\nFigure 2 .\n2Simulated robots used in our experiments.\n\n\nKappen, H. J. Path integrals and symmetry breaking for optimal control theory. Journal of Statistical Mechanics: Theory And Experiment, 2005(11):P11011, 2005. Kim, T. and Bengio, Y. Deep directed generative models with energy-based probability estimation. arXiv preprint arXiv:1606.03439, 2016. Kingma, D. and Ba, J. Adam: A method for stochastic optimization. 2015. Lai, T. L. and Robbins, H. Asymptotically efficient adaptive allocation rules. Advances in Applied Mathematics, 6(1):4-22, 1985. Levine, S. and Abbeel, P. Learning neural network policies with guided policy search under unknown dynamics. In Advances in Neural Information Processing Systems, pp. 1071-1079, 2014. Levine, S., Finn, C., Darrell, T., and Abbeel, P. End-to-end training of deep visuomotor policies. Journal of Machine Learning Research, 17(39):1-40, 2016. Lillicrap, T. P., Hunt, J. J., Pritzel, A., Heess, N., Erez, T., Tassa, Y., Silver, D., and Wierstra, D. Continuous control with deep reinforcement learning. arXiv preprint arXiv:1509.02971, 2015. Liu, Q. and Wang, D. Stein variational gradient descent: A general purpose bayesian inference algorithm. In Advances In Neural Information Processing Systems, pp. 2370-2378, 2016. Liu, Y., Ramachandran, P., Liu, Q., and Peng, J. Stein variational policy gradient. arXiv preprint arXiv:1704.02399, 2017. Mnih, V., Kavukcuoglu, K., Silver, D., Graves, A., Antonoglou, I., Wierstra, D., and Riedmiller, M. Playing atari with deep reinforcement learning. arXiv preprint arXiv:1312.5602, 2013. Mnih, V., Kavukcuoglu, K., Silver, D., Rusu, A. A, Veness, J., Bellemare, M. G., Graves, A., Riedmiller, M., Fidjeland, A. K., Ostrovski, G., et al. Human-level control through deep reinforcement learning. Nature, 518 (7540):529-533, 2015.\n\nFigure 6\n6Figure 6. Forward swimming distance achieved by each policy. Each row is a policy with a unique random seed. x: training iteration, y: distance (positive: forward, negative: backward). Red line: the \"finish line.\" The blue shaded region is bounded by the maximum and minimum distance (which are equal for DDPG). The plot shows that our method is able to explore equally well in both directions before it commits to the better one.\nIn principle, 1/\u03b1 can be folded into the reward function, eliminating the need for an explicit multiplier, but in practice, it is often convenient to keep \u03b1 as a hyperparameter.\nhttps://sites.google.com/view/softqlearning/home 3 https://github.com/haarnoja/softqlearning\nAcknowledgementsWe thank Qiang Liu for insightful discussion of SVGD, and thank Vitchyr Pong and Shane Gu for help with implementing DDPG. Haoran Tang and Tuomas Haarnoja are supported by Berkeley Deep Drive.\nLinear Bellman combination for control of character animation. Da Silva, M Durand, F Popovi\u0107, J , ACM Trans. on Graphs. 28382Da Silva, M., Durand, F., and Popovi\u0107, J. Linear Bellman combination for control of character animation. ACM Trans. on Graphs, 28(3):82, 2009.\n\nHierarchical relative entropy policy search. C Daniel, G Neumann, J Peters, AISTATS. Daniel, C., Neumann, G., and Peters, J. Hierarchical rel- ative entropy policy search. In AISTATS, pp. 273-281, 2012.\n\nFreeenergy based reinforcement learning for vision-based navigation with high-dimensional sensory inputs. S Elfwing, M Otsuka, E Uchibe, K Doya, Int. Conf. on Neural Information Processing. SpringerElfwing, S., Otsuka, M., Uchibe, E., and Doya, K. Free- energy based reinforcement learning for vision-based navigation with high-dimensional sensory inputs. In Int. Conf. on Neural Information Processing, pp. 215-222. Springer, 2010.\n\nStochastic neural networks for hierarchical reinforcement learning. C Florensa, Y Duan, P Abbeel, Int. Conf. on Learning Representations. Florensa, C., Duan, Y., and P., Abbeel. Stochastic neural networks for hierarchical reinforcement learning. In Int. Conf. on Learning Representations, 2017.\n\nTaming the noise in reinforcement learning via soft updates. R Fox, A Pakman, N Tishby, Conf. on Uncertainty in Artificial Intelligence. Fox, R., Pakman, A., and Tishby, N. Taming the noise in reinforcement learning via soft updates. In Conf. on Uncertainty in Artificial Intelligence, 2016.\n\n. Ian Goodfellow, Yoshua Bengio, Aaron Courville, MIT PressDeep learning. chapter 8.7.4.Goodfellow, Ian, Bengio, Yoshua, and Courville, Aaron. Deep learning. chapter 8.7.4. MIT Press, 2016. http: //www.deeplearningbook.org.\n\nS Gu, T Lillicrap, Z Ghahramani, R E Turner, S Levine, arXiv:1611.02247Sample-efficient policy gradient with an off-policy critic. arXiv preprintGu, S., Lillicrap, T., Ghahramani, Z., Turner, R. E., and Levine, S. Q-prop: Sample-efficient policy gradient with an off-policy critic. arXiv preprint arXiv:1611.02247, 2016a.\n\nContinuous deep Q-learning with model-based acceleration. S Gu, T Lillicrap, I Sutskever, S Levine, Int. Conf. on Machine Learning. Gu, S., Lillicrap, T., Sutskever, I., and Levine, S. Contin- uous deep Q-learning with model-based acceleration. In Int. Conf. on Machine Learning, pp. 2829-2838, 2016b.\n\nReinforcement learning in feedback control. R Hafner, M Riedmiller, Machine Learning. 84Hafner, R. and Riedmiller, M. Reinforcement learning in feedback control. Machine Learning, 84(1-2):137-169, 2011.\n\nActor-critic reinforcement learning with energy-based policies. N Heess, D Silver, Y W Teh, Workshop on Reinforcement Learning. Citeseer43Heess, N., Silver, D., and Teh, Y. W. Actor-critic reinforce- ment learning with energy-based policies. In Workshop on Reinforcement Learning, pp. 43. Citeseer, 2012.\n\nLearning and transfer of modulated locomotor controllers. N Heess, G Wayne, Y Tassa, T Lillicrap, M Riedmiller, D Silver, arXiv:1610.05182arXiv preprintHeess, N., Wayne, G., Tassa, Y., Lillicrap, T., Riedmiller, M., and Silver, D. Learning and transfer of modulated locomotor controllers. arXiv preprint arXiv:1610.05182, 2016.\n\nReinforcement learning with unsupervised auxiliary tasks. M Jaderberg, V Mnih, W M Czarnecki, T Schaul, J Z Leibo, D Silver, K Kavukcuoglu, arXiv:1611.05397arXiv preprintJaderberg, M., Mnih, V., Czarnecki, W. M., Schaul, T., Leibo, J. Z., Silver, D., and Kavukcuoglu, K. Reinforce- ment learning with unsupervised auxiliary tasks. arXiv preprint arXiv:1611.05397, 2016.\n\nReinforcement learning: A survey. L P Kaelbling, M L Littman, A W Moore, Journal of artificial intelligence research. 4Kaelbling, L. P., Littman, M. L., and Moore, A. W. Rein- forcement learning: A survey. Journal of artificial intel- ligence research, 4:237-285, 1996.\n\nA natural policy gradient. S Kakade, Advances in Neural Information Processing Systems. 2Kakade, S. A natural policy gradient. Advances in Neural Information Processing Systems, 2:1531-1538, 2002.\n\nAsynchronous methods for deep reinforcement learning. V Mnih, A P Badia, M Mirza, A Graves, T P Lillicrap, T Harley, D Silver, K Kavukcuoglu, Int. Conf. on Machine Learning. Mnih, V., Badia, A. P., Mirza, M., Graves, A., Lillicrap, T. P., Harley, T., Silver, D., and Kavukcuoglu, K. Asyn- chronous methods for deep reinforcement learning. In Int. Conf. on Machine Learning, 2016.\n\nVariational inference for policy search in changing situations. G Neumann, Int. Conf. on Machine Learning. Neumann, G. Variational inference for policy search in changing situations. In Int. Conf. on Machine Learning, pp. 817-824, 2011.\n\nB O&apos;donoghue, R Munos, K Kavukcuoglu, V Mnih, Pgq, arXiv:1611.01626Combining policy gradient and Q-learning. arXiv preprintO'Donoghue, B., Munos, R., Kavukcuoglu, K., and Mnih, V. PGQ: Combining policy gradient and Q-learning. arXiv preprint arXiv:1611.01626, 2016.\n\nFree-energybased reinforcement learning in a partially observable environment. M Otsuka, J Yoshimoto, K Doya, ESANN. Otsuka, M., Yoshimoto, J., and Doya, K. Free-energy- based reinforcement learning in a partially observable environment. In ESANN, 2010.\n\nRelative entropy policy search. J Peters, K M\u00fclling, Altun , Y , AAAI Conf. on Artificial Intelligence. Peters, J., M\u00fclling, K., and Altun, Y. Relative entropy pol- icy search. In AAAI Conf. on Artificial Intelligence, pp. 1607-1612, 2010.\n\nOn stochastic optimal control and reinforcement learning by approximate inference. K Rawlik, M Toussaint, S Vijayakumar, Proceedings of Robotics: Science and Systems VIII. Robotics: Science and Systems VIIIRawlik, K., Toussaint, M., and Vijayakumar, S. On stochastic optimal control and reinforcement learning by approximate inference. Proceedings of Robotics: Sci- ence and Systems VIII, 2012.\n\nReinforcement learning with factored states and actions. B Sallans, G E Hinton, Journal of Machine Learning Research. 5Sallans, B. and Hinton, G. E. Reinforcement learning with factored states and actions. Journal of Machine Learning Research, 5(Aug):1063-1088, 2004.\n\nTrust region policy optimization. J Schulman, S Levine, P Abbeel, M I Jordan, P Moritz, Int. Conf on Machine Learning. Schulman, J., Levine, S., Abbeel, P., Jordan, M. I., and Moritz, P. Trust region policy optimization. In Int. Conf on Machine Learning, pp. 1889-1897, 2015a.\n\nHigh-dimensional continuous control using generalized advantage estimation. J Schulman, P Moritz, S Levine, M Jordan, Abbeel , P , arXiv:1506.02438arXiv preprintSchulman, J., Moritz, P., Levine, S., Jordan, M., and Abbeel, P. High-dimensional continuous control us- ing generalized advantage estimation. arXiv preprint arXiv:1506.02438, 2015b.\n\nJ Schulman, P Abbeel, Chen , X , arXiv:1704.06440Equivalence between policy gradients and soft Q-learning. arXiv preprintSchulman, J., Abbeel, P., and Chen, X. Equivalence between policy gradients and soft Q-learning. arXiv preprint arXiv:1704.06440, 2017.\n\nLoss is its own reward: Self-supervision for reinforcement learning. E Shelhamer, P Mahmoudieh, M Argus, Darrell , T , arXiv:1612.07307arXiv preprintShelhamer, E., Mahmoudieh, P., Argus, M., and Darrell, T. Loss is its own reward: Self-supervision for reinforce- ment learning. arXiv preprint arXiv:1612.07307, 2016.\n\nDeterministic policy gradient algorithms. D Silver, G Lever, N Heess, T Degris, D Wierstra, M Riedmiller, Int. Conf on Machine Learning. Silver, D., Lever, G., Heess, N., Degris, T., Wierstra, D., and Riedmiller, M. Deterministic policy gradient algo- rithms. In Int. Conf on Machine Learning, 2014.\n\nMastering the game of go with deep neural networks and tree search. D Silver, A Huang, C J Maddison, A Guez, L Sifre, G Van Den Driessche, J Schrittwieser, I Antonoglou, V Panneershelvam, M Lanctot, S Dieleman, D Grewe, J Nham, N Kalchbrenner, I Sutskever, T Lillicrap, M Leach, K Kavukcuoglu, T Graepel, D Hassabis, 0028-0836. ArticleNature. 5297587Silver, D., Huang, A., Maddison, C. J., Guez, A., Sifre, L., van den Driessche, G., Schrittwieser, J., Antonoglou, I., Panneershelvam, V., Lanctot, M., Dieleman, S., Grewe, D., Nham, J., Kalchbrenner, N., Sutskever, I., Lillicrap, T., Leach, M., Kavukcuoglu, K., Graepel, T., and Has- sabis, D. Mastering the game of go with deep neural networks and tree search. Nature, 529(7587):484-489, Jan 2016. ISSN 0028-0836. Article.\n\nReinforcement learning: An introduction. R S Sutton, A G Barto, MIT press Cambridge1Sutton, R. S. and Barto, A. G. Reinforcement learning: An introduction, volume 1. MIT press Cambridge, 1998.\n\nBias in natural actor-critic algorithms. P Thomas, Int. Conf. on Machine Learning. Thomas, P. Bias in natural actor-critic algorithms. In Int. Conf. on Machine Learning, pp. 441-448, 2014.\n\nLinearly-solvable Markov decision problems. E Todorov, Advances in Neural Information Processing Systems. MIT PressTodorov, E. Linearly-solvable Markov decision problems. In Advances in Neural Information Processing Systems, pp. 1369-1376. MIT Press, 2007.\n\nGeneral duality between optimal control and estimation. E Todorov, IEEE Conf. on Decision and Control. IEEETodorov, E. General duality between optimal control and estimation. In IEEE Conf. on Decision and Control, pp. 4286-4292. IEEE, 2008.\n\nCompositionality of optimal control laws. E Todorov, Advances in Neural Information Processing Systems. Todorov, E. Compositionality of optimal control laws. In Advances in Neural Information Processing Systems, pp. 1856-1864, 2009.\n\nRobot trajectory optimization using approximate inference. M Toussaint, Int. Conf. on Machine Learning. ACMToussaint, M. Robot trajectory optimization using approx- imate inference. In Int. Conf. on Machine Learning, pp. 1049-1056. ACM, 2009.\n\nOn the theory of the brownian motion. G E Uhlenbeck, L S Ornstein, Physical review. 365823Uhlenbeck, G. E. and Ornstein, L. S. On the theory of the brownian motion. Physical review, 36(5):823, 1930.\n\nLearning to draw samples: With application to amortized mle for generative adversarial learning. D Wang, Q Liu, arXiv:1611.01722arXiv preprintWang, D. and Liu, Q. Learning to draw samples: With application to amortized mle for generative adversarial learning. arXiv preprint arXiv:1611.01722, 2016.\n\nSimple statistical gradient-following algorithms for connectionist reinforcement learning. Ronald J Williams, Machine learning. 83-4Williams, Ronald J. Simple statistical gradient-following algorithms for connectionist reinforcement learning. Machine learning, 8(3-4):229-256, 1992.\n\nEnergybased generative adversarial network. J Zhao, M Mathieu, Y Lecun, arXiv:1609.03126arXiv preprintZhao, J., Mathieu, M., and LeCun, Y. Energy- based generative adversarial network. arXiv preprint arXiv:1609.03126, 2016.\n\nModeling purposeful adaptive behavior with the principle of maximum causal entropy. B D Ziebart, PhD thesisZiebart, B. D. Modeling purposeful adaptive behavior with the principle of maximum causal entropy. PhD thesis, 2010.\n\nMaximum entropy inverse reinforcement learning. B D Ziebart, A L Maas, J A Bagnell, A K Dey, AAAI Conference on Artificial Intelligence. Ziebart, B. D., Maas, A. L., Bagnell, J. A., and Dey, A. K. Maximum entropy inverse reinforcement learning. In AAAI Conference on Artificial Intelligence, pp. 1433- 1438, 2008.\n", "annotations": {"author": "[{\"end\":74,\"start\":58},{\"end\":87,\"start\":75},{\"end\":102,\"start\":88},{\"end\":117,\"start\":103}]", "publisher": null, "author_last_name": "[{\"end\":73,\"start\":65},{\"end\":86,\"start\":82},{\"end\":101,\"start\":95},{\"end\":116,\"start\":110}]", "author_first_name": "[{\"end\":64,\"start\":58},{\"end\":81,\"start\":75},{\"end\":94,\"start\":88},{\"end\":109,\"start\":103}]", "author_affiliation": null, "title": "[{\"end\":55,\"start\":1},{\"end\":172,\"start\":118}]", "venue": null, "abstract": "[{\"end\":1027,\"start\":174}]", "bib_ref": "[{\"end\":1185,\"start\":1166},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":1205,\"start\":1185},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":1283,\"start\":1259},{\"end\":1399,\"start\":1378},{\"end\":1499,\"start\":1475},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":1539,\"start\":1515},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":1557,\"start\":1539},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":1780,\"start\":1758},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":1948,\"start\":1927},{\"end\":1971,\"start\":1948},{\"end\":1989,\"start\":1971},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2058,\"start\":2044},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":2081,\"start\":2058},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":2099,\"start\":2081},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":2415,\"start\":2400},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":2458,\"start\":2436},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2532,\"start\":2514},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2631,\"start\":2610},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2979,\"start\":2964},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":3397,\"start\":3380},{\"end\":4326,\"start\":4322},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":4711,\"start\":4696},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":4762,\"start\":4740},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":4825,\"start\":4808},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4859,\"start\":4838},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4894,\"start\":4876},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4977,\"start\":4952},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":6961,\"start\":6940},{\"end\":6984,\"start\":6961},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":7046,\"start\":7023},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7075,\"start\":7046},{\"end\":9810,\"start\":9796},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":9824,\"start\":9810},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":9845,\"start\":9824},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":10008,\"start\":9984},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":10042,\"start\":10017},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":10457,\"start\":10435},{\"end\":10479,\"start\":10457},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":11137,\"start\":11123},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":11660,\"start\":11635},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":11709,\"start\":11688},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":12745,\"start\":12730},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13347,\"start\":13332},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":15095,\"start\":15077},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":18841,\"start\":18817},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":18982,\"start\":18963},{\"end\":19001,\"start\":18982},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":19258,\"start\":19240},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":20417,\"start\":20406},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":21066,\"start\":21048},{\"end\":21973,\"start\":21954},{\"end\":22139,\"start\":22120},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":23843,\"start\":23828},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":24003,\"start\":23987},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":24163,\"start\":24148},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":24249,\"start\":24227},{\"end\":24392,\"start\":24378},{\"end\":24856,\"start\":24834},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":24870,\"start\":24856},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24890,\"start\":24870},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":24907,\"start\":24890},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":24954,\"start\":24934},{\"end\":25246,\"start\":25228},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":25611,\"start\":25588},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":25986,\"start\":25962},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":26193,\"start\":26169},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":26214,\"start\":26193},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26234,\"start\":26214},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":26253,\"start\":26234},{\"end\":27328,\"start\":27304},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":27507,\"start\":27480},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":28415,\"start\":28392},{\"end\":28927,\"start\":28898},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":29101,\"start\":29085},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":29132,\"start\":29108},{\"end\":31326,\"start\":31305},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":33480,\"start\":33457},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":34765,\"start\":34740},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":35124,\"start\":35100},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":35888,\"start\":35868},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":35936,\"start\":35913},{\"end\":36919,\"start\":36913},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":38961,\"start\":38942},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":38975,\"start\":38961},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":40166,\"start\":40153},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":40821,\"start\":40797},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":41625,\"start\":41603},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":44086,\"start\":44069},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":50276,\"start\":50248},{\"end\":50299,\"start\":50276},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":51215,\"start\":51197}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":53473,\"start\":53065},{\"attributes\":{\"id\":\"fig_1\"},\"end\":53528,\"start\":53474},{\"attributes\":{\"id\":\"fig_2\"},\"end\":55292,\"start\":53529},{\"attributes\":{\"id\":\"fig_3\"},\"end\":55734,\"start\":55293}]", "paragraph": "[{\"end\":2100,\"start\":1043},{\"end\":2731,\"start\":2102},{\"end\":4517,\"start\":2733},{\"end\":5541,\"start\":4519},{\"end\":7076,\"start\":5543},{\"end\":7977,\"start\":7078},{\"end\":8274,\"start\":7995},{\"end\":9171,\"start\":8317},{\"end\":9312,\"start\":9173},{\"end\":9510,\"start\":9369},{\"end\":9515,\"start\":9512},{\"end\":10669,\"start\":9588},{\"end\":10906,\"start\":10671},{\"end\":11344,\"start\":10908},{\"end\":11896,\"start\":11393},{\"end\":12382,\"start\":11938},{\"end\":12508,\"start\":12438},{\"end\":12615,\"start\":12572},{\"end\":12746,\"start\":12695},{\"end\":13097,\"start\":12748},{\"end\":13172,\"start\":13099},{\"end\":13348,\"start\":13240},{\"end\":13815,\"start\":13350},{\"end\":14485,\"start\":13879},{\"end\":14664,\"start\":14506},{\"end\":14852,\"start\":14666},{\"end\":15096,\"start\":14991},{\"end\":15702,\"start\":15098},{\"end\":16697,\"start\":15722},{\"end\":16867,\"start\":16771},{\"end\":17059,\"start\":16928},{\"end\":17365,\"start\":17144},{\"end\":18070,\"start\":17367},{\"end\":18496,\"start\":18072},{\"end\":19782,\"start\":18567},{\"end\":20292,\"start\":19784},{\"end\":20469,\"start\":20354},{\"end\":21201,\"start\":20757},{\"end\":21572,\"start\":21265},{\"end\":22467,\"start\":21594},{\"end\":22816,\"start\":22484},{\"end\":23065,\"start\":22857},{\"end\":23376,\"start\":23370},{\"end\":25794,\"start\":23478},{\"end\":27069,\"start\":25796},{\"end\":28416,\"start\":27071},{\"end\":28486,\"start\":28432},{\"end\":29445,\"start\":28488},{\"end\":30735,\"start\":29490},{\"end\":31588,\"start\":30785},{\"end\":33262,\"start\":31590},{\"end\":34551,\"start\":33264},{\"end\":35417,\"start\":34650},{\"end\":36631,\"start\":35419},{\"end\":37116,\"start\":36633},{\"end\":37571,\"start\":37118},{\"end\":38508,\"start\":37602},{\"end\":39426,\"start\":38510},{\"end\":40285,\"start\":39472},{\"end\":40822,\"start\":40397},{\"end\":41038,\"start\":40824},{\"end\":41329,\"start\":41117},{\"end\":41400,\"start\":41331},{\"end\":41755,\"start\":41503},{\"end\":41876,\"start\":41757},{\"end\":42035,\"start\":41878},{\"end\":42189,\"start\":42037},{\"end\":42417,\"start\":42274},{\"end\":42861,\"start\":42419},{\"end\":43092,\"start\":43004},{\"end\":43443,\"start\":43139},{\"end\":43548,\"start\":43499},{\"end\":43800,\"start\":43596},{\"end\":43840,\"start\":43802},{\"end\":43965,\"start\":43842},{\"end\":44020,\"start\":43967},{\"end\":44116,\"start\":44022},{\"end\":44585,\"start\":44316},{\"end\":44826,\"start\":44642},{\"end\":45251,\"start\":44882},{\"end\":45633,\"start\":45380},{\"end\":46015,\"start\":45866},{\"end\":46207,\"start\":46115},{\"end\":46493,\"start\":46295},{\"end\":46733,\"start\":46561},{\"end\":47519,\"start\":47005},{\"end\":47538,\"start\":47521},{\"end\":47819,\"start\":47575},{\"end\":48248,\"start\":47821},{\"end\":48505,\"start\":48395},{\"end\":48926,\"start\":48555},{\"end\":49304,\"start\":48965},{\"end\":50688,\"start\":49346},{\"end\":51216,\"start\":50690},{\"end\":51382,\"start\":51218},{\"end\":51772,\"start\":51384},{\"end\":53064,\"start\":51798}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":9368,\"start\":9313},{\"attributes\":{\"id\":\"formula_1\"},\"end\":9587,\"start\":9516},{\"attributes\":{\"id\":\"formula_2\"},\"end\":11937,\"start\":11897},{\"attributes\":{\"id\":\"formula_3\"},\"end\":12415,\"start\":12383},{\"attributes\":{\"id\":\"formula_4\"},\"end\":12437,\"start\":12415},{\"attributes\":{\"id\":\"formula_5\"},\"end\":12571,\"start\":12509},{\"attributes\":{\"id\":\"formula_6\"},\"end\":12694,\"start\":12616},{\"attributes\":{\"id\":\"formula_7\"},\"end\":13239,\"start\":13173},{\"attributes\":{\"id\":\"formula_8\"},\"end\":14990,\"start\":14853},{\"attributes\":{\"id\":\"formula_9\"},\"end\":16770,\"start\":16698},{\"attributes\":{\"id\":\"formula_10\"},\"end\":16927,\"start\":16868},{\"attributes\":{\"id\":\"formula_11\"},\"end\":17143,\"start\":17060},{\"attributes\":{\"id\":\"formula_12\"},\"end\":20353,\"start\":20293},{\"attributes\":{\"id\":\"formula_13\"},\"end\":20631,\"start\":20470},{\"attributes\":{\"id\":\"formula_14\"},\"end\":20756,\"start\":20631},{\"attributes\":{\"id\":\"formula_15\"},\"end\":21264,\"start\":21202},{\"attributes\":{\"id\":\"formula_16\"},\"end\":22856,\"start\":22817},{\"attributes\":{\"id\":\"formula_17\"},\"end\":23353,\"start\":23066},{\"attributes\":{\"id\":\"formula_18\"},\"end\":23477,\"start\":23377},{\"attributes\":{\"id\":\"formula_19\"},\"end\":34567,\"start\":34552},{\"attributes\":{\"id\":\"formula_20\"},\"end\":40396,\"start\":40286},{\"attributes\":{\"id\":\"formula_21\"},\"end\":41116,\"start\":41039},{\"attributes\":{\"id\":\"formula_22\"},\"end\":41468,\"start\":41401},{\"attributes\":{\"id\":\"formula_24\"},\"end\":42273,\"start\":42190},{\"attributes\":{\"id\":\"formula_26\"},\"end\":43003,\"start\":42862},{\"attributes\":{\"id\":\"formula_27\"},\"end\":43138,\"start\":43093},{\"attributes\":{\"id\":\"formula_28\"},\"end\":43595,\"start\":43549},{\"attributes\":{\"id\":\"formula_31\"},\"end\":44315,\"start\":44117},{\"attributes\":{\"id\":\"formula_32\"},\"end\":44881,\"start\":44827},{\"attributes\":{\"id\":\"formula_33\"},\"end\":45379,\"start\":45252},{\"attributes\":{\"id\":\"formula_34\"},\"end\":45865,\"start\":45634},{\"attributes\":{\"id\":\"formula_35\"},\"end\":46114,\"start\":46016},{\"attributes\":{\"id\":\"formula_36\"},\"end\":46294,\"start\":46208},{\"attributes\":{\"id\":\"formula_37\"},\"end\":46560,\"start\":46494},{\"attributes\":{\"id\":\"formula_38\"},\"end\":47004,\"start\":46734},{\"attributes\":{\"id\":\"formula_39\"},\"end\":48394,\"start\":48249},{\"attributes\":{\"id\":\"formula_40\"},\"end\":48964,\"start\":48927}]", "table_ref": null, "section_header": "[{\"attributes\":{\"n\":\"1.\"},\"end\":1041,\"start\":1029},{\"attributes\":{\"n\":\"2.\"},\"end\":7993,\"start\":7980},{\"attributes\":{\"n\":\"2.1.\"},\"end\":8315,\"start\":8277},{\"attributes\":{\"n\":\"2.2.\"},\"end\":11391,\"start\":11347},{\"attributes\":{\"n\":\"3.\"},\"end\":13877,\"start\":13818},{\"attributes\":{\"n\":\"3.1.\"},\"end\":14504,\"start\":14488},{\"attributes\":{\"n\":\"3.2.\"},\"end\":15720,\"start\":15705},{\"attributes\":{\"n\":\"3.3.\"},\"end\":18565,\"start\":18499},{\"attributes\":{\"n\":\"3.4.\"},\"end\":21592,\"start\":21575},{\"attributes\":{\"n\":\"4.\"},\"end\":22482,\"start\":22470},{\"end\":23368,\"start\":23355},{\"attributes\":{\"n\":\"5.\"},\"end\":28430,\"start\":28419},{\"attributes\":{\"n\":\"5.1.\"},\"end\":29488,\"start\":29448},{\"attributes\":{\"n\":\"5.2.\"},\"end\":30783,\"start\":30738},{\"attributes\":{\"n\":\"5.3.\"},\"end\":34648,\"start\":34569},{\"attributes\":{\"n\":\"6.\"},\"end\":37600,\"start\":37574},{\"end\":39439,\"start\":39429},{\"end\":39470,\"start\":39442},{\"end\":41501,\"start\":41470},{\"end\":43497,\"start\":43446},{\"end\":44640,\"start\":44588},{\"end\":47573,\"start\":47541},{\"end\":48553,\"start\":48508},{\"end\":49321,\"start\":49307},{\"end\":49344,\"start\":49324},{\"end\":51796,\"start\":51775},{\"end\":53076,\"start\":53066},{\"end\":53485,\"start\":53475},{\"end\":55302,\"start\":55294}]", "table": null, "figure_caption": "[{\"end\":53473,\"start\":53078},{\"end\":53528,\"start\":53487},{\"end\":55292,\"start\":53531},{\"end\":55734,\"start\":55304}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":30153,\"start\":30145},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":31833,\"start\":31825},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":32206,\"start\":32198},{\"end\":32456,\"start\":32448},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":33553,\"start\":33544},{\"end\":33877,\"start\":33869},{\"end\":34308,\"start\":34300},{\"end\":34429,\"start\":34421},{\"end\":36061,\"start\":36053},{\"end\":36659,\"start\":36651},{\"end\":36825,\"start\":36817},{\"end\":37259,\"start\":37251},{\"end\":52422,\"start\":52414}]", "bib_author_first_name": "[{\"end\":56280,\"start\":56278},{\"end\":56289,\"start\":56288},{\"end\":56299,\"start\":56298},{\"end\":56310,\"start\":56309},{\"end\":56530,\"start\":56529},{\"end\":56540,\"start\":56539},{\"end\":56551,\"start\":56550},{\"end\":56795,\"start\":56794},{\"end\":56806,\"start\":56805},{\"end\":56816,\"start\":56815},{\"end\":56826,\"start\":56825},{\"end\":57191,\"start\":57190},{\"end\":57203,\"start\":57202},{\"end\":57211,\"start\":57210},{\"end\":57480,\"start\":57479},{\"end\":57487,\"start\":57486},{\"end\":57497,\"start\":57496},{\"end\":57716,\"start\":57713},{\"end\":57735,\"start\":57729},{\"end\":57749,\"start\":57744},{\"end\":57937,\"start\":57936},{\"end\":57943,\"start\":57942},{\"end\":57956,\"start\":57955},{\"end\":57970,\"start\":57969},{\"end\":57972,\"start\":57971},{\"end\":57982,\"start\":57981},{\"end\":58318,\"start\":58317},{\"end\":58324,\"start\":58323},{\"end\":58337,\"start\":58336},{\"end\":58350,\"start\":58349},{\"end\":58607,\"start\":58606},{\"end\":58617,\"start\":58616},{\"end\":58831,\"start\":58830},{\"end\":58840,\"start\":58839},{\"end\":58850,\"start\":58849},{\"end\":58852,\"start\":58851},{\"end\":59131,\"start\":59130},{\"end\":59140,\"start\":59139},{\"end\":59149,\"start\":59148},{\"end\":59158,\"start\":59157},{\"end\":59171,\"start\":59170},{\"end\":59185,\"start\":59184},{\"end\":59460,\"start\":59459},{\"end\":59473,\"start\":59472},{\"end\":59481,\"start\":59480},{\"end\":59483,\"start\":59482},{\"end\":59496,\"start\":59495},{\"end\":59506,\"start\":59505},{\"end\":59508,\"start\":59507},{\"end\":59517,\"start\":59516},{\"end\":59527,\"start\":59526},{\"end\":59807,\"start\":59806},{\"end\":59809,\"start\":59808},{\"end\":59822,\"start\":59821},{\"end\":59824,\"start\":59823},{\"end\":59835,\"start\":59834},{\"end\":59837,\"start\":59836},{\"end\":60071,\"start\":60070},{\"end\":60296,\"start\":60295},{\"end\":60304,\"start\":60303},{\"end\":60306,\"start\":60305},{\"end\":60315,\"start\":60314},{\"end\":60324,\"start\":60323},{\"end\":60334,\"start\":60333},{\"end\":60336,\"start\":60335},{\"end\":60349,\"start\":60348},{\"end\":60359,\"start\":60358},{\"end\":60369,\"start\":60368},{\"end\":60687,\"start\":60686},{\"end\":60861,\"start\":60860},{\"end\":60880,\"start\":60879},{\"end\":60889,\"start\":60888},{\"end\":60904,\"start\":60903},{\"end\":61212,\"start\":61211},{\"end\":61222,\"start\":61221},{\"end\":61235,\"start\":61234},{\"end\":61420,\"start\":61419},{\"end\":61430,\"start\":61429},{\"end\":61445,\"start\":61440},{\"end\":61449,\"start\":61448},{\"end\":61712,\"start\":61711},{\"end\":61722,\"start\":61721},{\"end\":61735,\"start\":61734},{\"end\":62082,\"start\":62081},{\"end\":62093,\"start\":62092},{\"end\":62095,\"start\":62094},{\"end\":62328,\"start\":62327},{\"end\":62340,\"start\":62339},{\"end\":62350,\"start\":62349},{\"end\":62360,\"start\":62359},{\"end\":62362,\"start\":62361},{\"end\":62372,\"start\":62371},{\"end\":62648,\"start\":62647},{\"end\":62660,\"start\":62659},{\"end\":62670,\"start\":62669},{\"end\":62680,\"start\":62679},{\"end\":62695,\"start\":62689},{\"end\":62699,\"start\":62698},{\"end\":62917,\"start\":62916},{\"end\":62929,\"start\":62928},{\"end\":62942,\"start\":62938},{\"end\":62946,\"start\":62945},{\"end\":63244,\"start\":63243},{\"end\":63257,\"start\":63256},{\"end\":63271,\"start\":63270},{\"end\":63286,\"start\":63279},{\"end\":63290,\"start\":63289},{\"end\":63535,\"start\":63534},{\"end\":63545,\"start\":63544},{\"end\":63554,\"start\":63553},{\"end\":63563,\"start\":63562},{\"end\":63573,\"start\":63572},{\"end\":63585,\"start\":63584},{\"end\":63862,\"start\":63861},{\"end\":63872,\"start\":63871},{\"end\":63881,\"start\":63880},{\"end\":63883,\"start\":63882},{\"end\":63895,\"start\":63894},{\"end\":63903,\"start\":63902},{\"end\":63912,\"start\":63911},{\"end\":63933,\"start\":63932},{\"end\":63950,\"start\":63949},{\"end\":63964,\"start\":63963},{\"end\":63982,\"start\":63981},{\"end\":63993,\"start\":63992},{\"end\":64005,\"start\":64004},{\"end\":64014,\"start\":64013},{\"end\":64022,\"start\":64021},{\"end\":64038,\"start\":64037},{\"end\":64051,\"start\":64050},{\"end\":64064,\"start\":64063},{\"end\":64073,\"start\":64072},{\"end\":64088,\"start\":64087},{\"end\":64099,\"start\":64098},{\"end\":64611,\"start\":64610},{\"end\":64613,\"start\":64612},{\"end\":64623,\"start\":64622},{\"end\":64625,\"start\":64624},{\"end\":64805,\"start\":64804},{\"end\":64998,\"start\":64997},{\"end\":65268,\"start\":65267},{\"end\":65496,\"start\":65495},{\"end\":65747,\"start\":65746},{\"end\":65970,\"start\":65969},{\"end\":65972,\"start\":65971},{\"end\":65985,\"start\":65984},{\"end\":65987,\"start\":65986},{\"end\":66229,\"start\":66228},{\"end\":66237,\"start\":66236},{\"end\":66528,\"start\":66522},{\"end\":66530,\"start\":66529},{\"end\":66760,\"start\":66759},{\"end\":66768,\"start\":66767},{\"end\":66779,\"start\":66778},{\"end\":67025,\"start\":67024},{\"end\":67027,\"start\":67026},{\"end\":67214,\"start\":67213},{\"end\":67216,\"start\":67215},{\"end\":67227,\"start\":67226},{\"end\":67229,\"start\":67228},{\"end\":67237,\"start\":67236},{\"end\":67239,\"start\":67238},{\"end\":67250,\"start\":67249},{\"end\":67252,\"start\":67251}]", "bib_author_last_name": "[{\"end\":56286,\"start\":56281},{\"end\":56296,\"start\":56290},{\"end\":56307,\"start\":56300},{\"end\":56537,\"start\":56531},{\"end\":56548,\"start\":56541},{\"end\":56558,\"start\":56552},{\"end\":56803,\"start\":56796},{\"end\":56813,\"start\":56807},{\"end\":56823,\"start\":56817},{\"end\":56831,\"start\":56827},{\"end\":57200,\"start\":57192},{\"end\":57208,\"start\":57204},{\"end\":57218,\"start\":57212},{\"end\":57484,\"start\":57481},{\"end\":57494,\"start\":57488},{\"end\":57504,\"start\":57498},{\"end\":57727,\"start\":57717},{\"end\":57742,\"start\":57736},{\"end\":57759,\"start\":57750},{\"end\":57940,\"start\":57938},{\"end\":57953,\"start\":57944},{\"end\":57967,\"start\":57957},{\"end\":57979,\"start\":57973},{\"end\":57989,\"start\":57983},{\"end\":58321,\"start\":58319},{\"end\":58334,\"start\":58325},{\"end\":58347,\"start\":58338},{\"end\":58357,\"start\":58351},{\"end\":58614,\"start\":58608},{\"end\":58628,\"start\":58618},{\"end\":58837,\"start\":58832},{\"end\":58847,\"start\":58841},{\"end\":58856,\"start\":58853},{\"end\":59137,\"start\":59132},{\"end\":59146,\"start\":59141},{\"end\":59155,\"start\":59150},{\"end\":59168,\"start\":59159},{\"end\":59182,\"start\":59172},{\"end\":59192,\"start\":59186},{\"end\":59470,\"start\":59461},{\"end\":59478,\"start\":59474},{\"end\":59493,\"start\":59484},{\"end\":59503,\"start\":59497},{\"end\":59514,\"start\":59509},{\"end\":59524,\"start\":59518},{\"end\":59539,\"start\":59528},{\"end\":59819,\"start\":59810},{\"end\":59832,\"start\":59825},{\"end\":59843,\"start\":59838},{\"end\":60078,\"start\":60072},{\"end\":60301,\"start\":60297},{\"end\":60312,\"start\":60307},{\"end\":60321,\"start\":60316},{\"end\":60331,\"start\":60325},{\"end\":60346,\"start\":60337},{\"end\":60356,\"start\":60350},{\"end\":60366,\"start\":60360},{\"end\":60381,\"start\":60370},{\"end\":60695,\"start\":60688},{\"end\":60877,\"start\":60862},{\"end\":60886,\"start\":60881},{\"end\":60901,\"start\":60890},{\"end\":60909,\"start\":60905},{\"end\":60914,\"start\":60911},{\"end\":61219,\"start\":61213},{\"end\":61232,\"start\":61223},{\"end\":61240,\"start\":61236},{\"end\":61427,\"start\":61421},{\"end\":61438,\"start\":61431},{\"end\":61719,\"start\":61713},{\"end\":61732,\"start\":61723},{\"end\":61747,\"start\":61736},{\"end\":62090,\"start\":62083},{\"end\":62102,\"start\":62096},{\"end\":62337,\"start\":62329},{\"end\":62347,\"start\":62341},{\"end\":62357,\"start\":62351},{\"end\":62369,\"start\":62363},{\"end\":62379,\"start\":62373},{\"end\":62657,\"start\":62649},{\"end\":62667,\"start\":62661},{\"end\":62677,\"start\":62671},{\"end\":62687,\"start\":62681},{\"end\":62926,\"start\":62918},{\"end\":62936,\"start\":62930},{\"end\":63254,\"start\":63245},{\"end\":63268,\"start\":63258},{\"end\":63277,\"start\":63272},{\"end\":63542,\"start\":63536},{\"end\":63551,\"start\":63546},{\"end\":63560,\"start\":63555},{\"end\":63570,\"start\":63564},{\"end\":63582,\"start\":63574},{\"end\":63596,\"start\":63586},{\"end\":63869,\"start\":63863},{\"end\":63878,\"start\":63873},{\"end\":63892,\"start\":63884},{\"end\":63900,\"start\":63896},{\"end\":63909,\"start\":63904},{\"end\":63930,\"start\":63913},{\"end\":63947,\"start\":63934},{\"end\":63961,\"start\":63951},{\"end\":63979,\"start\":63965},{\"end\":63990,\"start\":63983},{\"end\":64002,\"start\":63994},{\"end\":64011,\"start\":64006},{\"end\":64019,\"start\":64015},{\"end\":64035,\"start\":64023},{\"end\":64048,\"start\":64039},{\"end\":64061,\"start\":64052},{\"end\":64070,\"start\":64065},{\"end\":64085,\"start\":64074},{\"end\":64096,\"start\":64089},{\"end\":64108,\"start\":64100},{\"end\":64620,\"start\":64614},{\"end\":64631,\"start\":64626},{\"end\":64812,\"start\":64806},{\"end\":65006,\"start\":64999},{\"end\":65276,\"start\":65269},{\"end\":65504,\"start\":65497},{\"end\":65757,\"start\":65748},{\"end\":65982,\"start\":65973},{\"end\":65996,\"start\":65988},{\"end\":66234,\"start\":66230},{\"end\":66241,\"start\":66238},{\"end\":66539,\"start\":66531},{\"end\":66765,\"start\":66761},{\"end\":66776,\"start\":66769},{\"end\":66785,\"start\":66780},{\"end\":67035,\"start\":67028},{\"end\":67224,\"start\":67217},{\"end\":67234,\"start\":67230},{\"end\":67247,\"start\":67240},{\"end\":67256,\"start\":67253}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":7955063},\"end\":56482,\"start\":56215},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":11711975},\"end\":56686,\"start\":56484},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":2334282},\"end\":57120,\"start\":56688},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":7774489},\"end\":57416,\"start\":57122},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":2374643},\"end\":57709,\"start\":57418},{\"attributes\":{\"id\":\"b5\"},\"end\":57934,\"start\":57711},{\"attributes\":{\"doi\":\"arXiv:1611.02247\",\"id\":\"b6\"},\"end\":58257,\"start\":57936},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":890737},\"end\":58560,\"start\":58259},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":207211627},\"end\":58764,\"start\":58562},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":7756162},\"end\":59070,\"start\":58766},{\"attributes\":{\"doi\":\"arXiv:1610.05182\",\"id\":\"b10\"},\"end\":59399,\"start\":59072},{\"attributes\":{\"doi\":\"arXiv:1611.05397\",\"id\":\"b11\"},\"end\":59770,\"start\":59401},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":1708582},\"end\":60041,\"start\":59772},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":14540458},\"end\":60239,\"start\":60043},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":6875312},\"end\":60620,\"start\":60241},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":10815139},\"end\":60858,\"start\":60622},{\"attributes\":{\"doi\":\"arXiv:1611.01626\",\"id\":\"b16\"},\"end\":61130,\"start\":60860},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":2097121},\"end\":61385,\"start\":61132},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":2984847},\"end\":61626,\"start\":61387},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":2168740},\"end\":62022,\"start\":61628},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":17045473},\"end\":62291,\"start\":62024},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":16046818},\"end\":62569,\"start\":62293},{\"attributes\":{\"doi\":\"arXiv:1506.02438\",\"id\":\"b22\"},\"end\":62914,\"start\":62571},{\"attributes\":{\"doi\":\"arXiv:1704.06440\",\"id\":\"b23\"},\"end\":63172,\"start\":62916},{\"attributes\":{\"doi\":\"arXiv:1612.07307\",\"id\":\"b24\"},\"end\":63490,\"start\":63174},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":13928442},\"end\":63791,\"start\":63492},{\"attributes\":{\"doi\":\"0028-0836. Article\",\"id\":\"b26\",\"matched_paper_id\":515925},\"end\":64567,\"start\":63793},{\"attributes\":{\"id\":\"b27\"},\"end\":64761,\"start\":64569},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":254721},\"end\":64951,\"start\":64763},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":393501},\"end\":65209,\"start\":64953},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":11319606},\"end\":65451,\"start\":65211},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":2989022},\"end\":65685,\"start\":65453},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":838406},\"end\":65929,\"start\":65687},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":93073745},\"end\":66129,\"start\":65931},{\"attributes\":{\"doi\":\"arXiv:1611.01722\",\"id\":\"b34\"},\"end\":66429,\"start\":66131},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":2332513},\"end\":66713,\"start\":66431},{\"attributes\":{\"doi\":\"arXiv:1609.03126\",\"id\":\"b36\"},\"end\":66938,\"start\":66715},{\"attributes\":{\"id\":\"b37\"},\"end\":67163,\"start\":66940},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":336219},\"end\":67478,\"start\":67165}]", "bib_title": "[{\"end\":56276,\"start\":56215},{\"end\":56527,\"start\":56484},{\"end\":56792,\"start\":56688},{\"end\":57188,\"start\":57122},{\"end\":57477,\"start\":57418},{\"end\":58315,\"start\":58259},{\"end\":58604,\"start\":58562},{\"end\":58828,\"start\":58766},{\"end\":59804,\"start\":59772},{\"end\":60068,\"start\":60043},{\"end\":60293,\"start\":60241},{\"end\":60684,\"start\":60622},{\"end\":61209,\"start\":61132},{\"end\":61417,\"start\":61387},{\"end\":61709,\"start\":61628},{\"end\":62079,\"start\":62024},{\"end\":62325,\"start\":62293},{\"end\":63532,\"start\":63492},{\"end\":63859,\"start\":63793},{\"end\":64802,\"start\":64763},{\"end\":64995,\"start\":64953},{\"end\":65265,\"start\":65211},{\"end\":65493,\"start\":65453},{\"end\":65744,\"start\":65687},{\"end\":65967,\"start\":65931},{\"end\":66520,\"start\":66431},{\"end\":67211,\"start\":67165}]", "bib_author": "[{\"end\":56288,\"start\":56278},{\"end\":56298,\"start\":56288},{\"end\":56309,\"start\":56298},{\"end\":56313,\"start\":56309},{\"end\":56539,\"start\":56529},{\"end\":56550,\"start\":56539},{\"end\":56560,\"start\":56550},{\"end\":56805,\"start\":56794},{\"end\":56815,\"start\":56805},{\"end\":56825,\"start\":56815},{\"end\":56833,\"start\":56825},{\"end\":57202,\"start\":57190},{\"end\":57210,\"start\":57202},{\"end\":57220,\"start\":57210},{\"end\":57486,\"start\":57479},{\"end\":57496,\"start\":57486},{\"end\":57506,\"start\":57496},{\"end\":57729,\"start\":57713},{\"end\":57744,\"start\":57729},{\"end\":57761,\"start\":57744},{\"end\":57942,\"start\":57936},{\"end\":57955,\"start\":57942},{\"end\":57969,\"start\":57955},{\"end\":57981,\"start\":57969},{\"end\":57991,\"start\":57981},{\"end\":58323,\"start\":58317},{\"end\":58336,\"start\":58323},{\"end\":58349,\"start\":58336},{\"end\":58359,\"start\":58349},{\"end\":58616,\"start\":58606},{\"end\":58630,\"start\":58616},{\"end\":58839,\"start\":58830},{\"end\":58849,\"start\":58839},{\"end\":58858,\"start\":58849},{\"end\":59139,\"start\":59130},{\"end\":59148,\"start\":59139},{\"end\":59157,\"start\":59148},{\"end\":59170,\"start\":59157},{\"end\":59184,\"start\":59170},{\"end\":59194,\"start\":59184},{\"end\":59472,\"start\":59459},{\"end\":59480,\"start\":59472},{\"end\":59495,\"start\":59480},{\"end\":59505,\"start\":59495},{\"end\":59516,\"start\":59505},{\"end\":59526,\"start\":59516},{\"end\":59541,\"start\":59526},{\"end\":59821,\"start\":59806},{\"end\":59834,\"start\":59821},{\"end\":59845,\"start\":59834},{\"end\":60080,\"start\":60070},{\"end\":60303,\"start\":60295},{\"end\":60314,\"start\":60303},{\"end\":60323,\"start\":60314},{\"end\":60333,\"start\":60323},{\"end\":60348,\"start\":60333},{\"end\":60358,\"start\":60348},{\"end\":60368,\"start\":60358},{\"end\":60383,\"start\":60368},{\"end\":60697,\"start\":60686},{\"end\":60879,\"start\":60860},{\"end\":60888,\"start\":60879},{\"end\":60903,\"start\":60888},{\"end\":60911,\"start\":60903},{\"end\":60916,\"start\":60911},{\"end\":61221,\"start\":61211},{\"end\":61234,\"start\":61221},{\"end\":61242,\"start\":61234},{\"end\":61429,\"start\":61419},{\"end\":61440,\"start\":61429},{\"end\":61448,\"start\":61440},{\"end\":61452,\"start\":61448},{\"end\":61721,\"start\":61711},{\"end\":61734,\"start\":61721},{\"end\":61749,\"start\":61734},{\"end\":62092,\"start\":62081},{\"end\":62104,\"start\":62092},{\"end\":62339,\"start\":62327},{\"end\":62349,\"start\":62339},{\"end\":62359,\"start\":62349},{\"end\":62371,\"start\":62359},{\"end\":62381,\"start\":62371},{\"end\":62659,\"start\":62647},{\"end\":62669,\"start\":62659},{\"end\":62679,\"start\":62669},{\"end\":62689,\"start\":62679},{\"end\":62698,\"start\":62689},{\"end\":62702,\"start\":62698},{\"end\":62928,\"start\":62916},{\"end\":62938,\"start\":62928},{\"end\":62945,\"start\":62938},{\"end\":62949,\"start\":62945},{\"end\":63256,\"start\":63243},{\"end\":63270,\"start\":63256},{\"end\":63279,\"start\":63270},{\"end\":63289,\"start\":63279},{\"end\":63293,\"start\":63289},{\"end\":63544,\"start\":63534},{\"end\":63553,\"start\":63544},{\"end\":63562,\"start\":63553},{\"end\":63572,\"start\":63562},{\"end\":63584,\"start\":63572},{\"end\":63598,\"start\":63584},{\"end\":63871,\"start\":63861},{\"end\":63880,\"start\":63871},{\"end\":63894,\"start\":63880},{\"end\":63902,\"start\":63894},{\"end\":63911,\"start\":63902},{\"end\":63932,\"start\":63911},{\"end\":63949,\"start\":63932},{\"end\":63963,\"start\":63949},{\"end\":63981,\"start\":63963},{\"end\":63992,\"start\":63981},{\"end\":64004,\"start\":63992},{\"end\":64013,\"start\":64004},{\"end\":64021,\"start\":64013},{\"end\":64037,\"start\":64021},{\"end\":64050,\"start\":64037},{\"end\":64063,\"start\":64050},{\"end\":64072,\"start\":64063},{\"end\":64087,\"start\":64072},{\"end\":64098,\"start\":64087},{\"end\":64110,\"start\":64098},{\"end\":64622,\"start\":64610},{\"end\":64633,\"start\":64622},{\"end\":64814,\"start\":64804},{\"end\":65008,\"start\":64997},{\"end\":65278,\"start\":65267},{\"end\":65506,\"start\":65495},{\"end\":65759,\"start\":65746},{\"end\":65984,\"start\":65969},{\"end\":65998,\"start\":65984},{\"end\":66236,\"start\":66228},{\"end\":66243,\"start\":66236},{\"end\":66541,\"start\":66522},{\"end\":66767,\"start\":66759},{\"end\":66778,\"start\":66767},{\"end\":66787,\"start\":66778},{\"end\":67037,\"start\":67024},{\"end\":67226,\"start\":67213},{\"end\":67236,\"start\":67226},{\"end\":67249,\"start\":67236},{\"end\":67258,\"start\":67249}]", "bib_venue": "[{\"end\":61834,\"start\":61800},{\"end\":56333,\"start\":56313},{\"end\":56567,\"start\":56560},{\"end\":56876,\"start\":56833},{\"end\":57258,\"start\":57220},{\"end\":57553,\"start\":57506},{\"end\":58065,\"start\":58007},{\"end\":58389,\"start\":58359},{\"end\":58646,\"start\":58630},{\"end\":58892,\"start\":58858},{\"end\":59128,\"start\":59072},{\"end\":59457,\"start\":59401},{\"end\":59888,\"start\":59845},{\"end\":60129,\"start\":60080},{\"end\":60413,\"start\":60383},{\"end\":60727,\"start\":60697},{\"end\":60972,\"start\":60932},{\"end\":61247,\"start\":61242},{\"end\":61489,\"start\":61452},{\"end\":61798,\"start\":61749},{\"end\":62140,\"start\":62104},{\"end\":62410,\"start\":62381},{\"end\":62645,\"start\":62571},{\"end\":63021,\"start\":62965},{\"end\":63241,\"start\":63174},{\"end\":63627,\"start\":63598},{\"end\":64134,\"start\":64128},{\"end\":64608,\"start\":64569},{\"end\":64844,\"start\":64814},{\"end\":65057,\"start\":65008},{\"end\":65312,\"start\":65278},{\"end\":65555,\"start\":65506},{\"end\":65789,\"start\":65759},{\"end\":66013,\"start\":65998},{\"end\":66226,\"start\":66131},{\"end\":66557,\"start\":66541},{\"end\":66757,\"start\":66715},{\"end\":67022,\"start\":66940},{\"end\":67300,\"start\":67258}]"}}}, "year": 2023, "month": 12, "day": 17}