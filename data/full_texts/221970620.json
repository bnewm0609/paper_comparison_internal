{"id": 221970620, "updated": "2023-11-08 14:44:59.203", "metadata": {"title": "Sense and Learn: Self-Supervision for Omnipresent Sensors", "authors": "[{\"first\":\"Aaqib\",\"last\":\"Saeed\",\"middle\":[]},{\"first\":\"Victor\",\"last\":\"Ungureanu\",\"middle\":[]},{\"first\":\"Beat\",\"last\":\"Gfeller\",\"middle\":[]}]", "venue": "ArXiv", "journal": "ArXiv", "publication_date": {"year": 2020, "month": 9, "day": 28}, "abstract": "Learning general-purpose representations from multisensor data produced by the omnipresent sensing systems (or IoT in general) has numerous applications in diverse use cases. Existing purely supervised end-to-end deep learning techniques depend on the availability of a massive amount of well-curated data, acquiring which is notoriously difficult but required to achieve a sufficient level of generalization on a task of interest. In this work, we leverage the self-supervised learning paradigm towards realizing the vision of continual learning from unlabeled inputs. We present a generalized framework named Sense and Learn for representation or feature learning from raw sensory data. It consists of several auxiliary tasks that can learn high-level and broadly useful features entirely from unannotated data without any human involvement in the tedious labeling process. We demonstrate the efficacy of our approach on several publicly available datasets from different domains and in various settings, including linear separability, semi-supervised or few shot learning, and transfer learning. Our methodology achieves results that are competitive with the supervised approaches and close the gap through fine-tuning a network while learning the downstream tasks in most cases. In particular, we show that the self-supervised network can be utilized as initialization to significantly boost the performance in a low-data regime with as few as 5 labeled instances per class, which is of high practical importance to real-world problems. Likewise, the learned representations with self-supervision are found to be highly transferable between related datasets, even when few labeled instances are available from the target domains. The self-learning nature of our methodology opens up exciting possibilities for on-device continual learning.", "fields_of_study": "[\"Computer Science\",\"Mathematics\"]", "external_ids": {"arxiv": "2009.13233", "mag": "3088808810", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/abs-2009-13233", "doi": "10.1016/j.mlwa.2021.100152"}}, "content": {"source": {"pdf_hash": "4372430203600aa7521da93edf222a4fd8b89eb3", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2009.13233v2.pdf\"]", "oa_url_match": false, "oa_info": {"license": "CCBY", "open_access_url": "https://doi.org/10.1016/j.mlwa.2021.100152", "status": "GOLD"}}, "grobid": {"id": "86ef3bb6596d5d869238f33f03d7e7afcc87490e", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/4372430203600aa7521da93edf222a4fd8b89eb3.txt", "contents": "\nSense and Learn: Self-Supervision for Omnipresent Sensors\n\n\nAaqib Saeed \nEindhoven University of Technology\nThe Netherlands VICTOR UNGUREANU\nGoogle Research\nSwitzerland\n\nBEAT GFELLER\nGoogle Research\nSwitzerland\n\nSense and Learn: Self-Supervision for Omnipresent Sensors\nAdditional Key Words and Phrases: self-supervised learninglow-datasensorsunsupervised learningactivity recognitionsleep stage scoringneural networkstime-series\nLearning general-purpose representations from multisensor data produced by the omnipresent sensing systems (or IoT in general) has numerous applications in diverse use cases. Existing purely supervised end-to-end deep learning techniques depend on the availability of a massive amount of well-curated data, acquiring which is notoriously difficult but required to achieve a sufficient level of generalization on a task of interest. In this work, we leverage the self-supervised learning paradigm towards realizing the vision of continual learning from unlabeled inputs. We present a generalized framework named Sense and Learn for representation or feature learning from raw sensory data. It consists of several auxiliary tasks that can learn high-level and broadly useful features entirely from unannotated data without any human involvement in the tedious labeling process. We demonstrate the efficacy of our approach on several publicly available datasets from different domains and in various settings, including linear separability, semi-supervised or few shot learning, and transfer learning. Our methodology achieves results that are competitive with the supervised approaches and close the gap through fine-tuning a network while learning the downstream tasks in most cases. In particular, we show that the self-supervised network can be utilized as initialization to significantly boost the performance in a low-data regime with as few as 5 labeled instances per class, which is of high practical importance to real-world problems. Likewise, the learned representations with self-supervision are found to be highly transferable between related datasets, even when few labeled instances are available from the target domains. The self-learning nature of our methodology opens up exciting possibilities for on-device continual learning.\n\nINTRODUCTION\n\nThe rise of deep neural networks for learning general-purpose representations in an end-to-end manner has led to numerous breakthroughs in different areas of artificial intelligence, including object recognition [42], complex gameplay [51], and language modeling [7]. These advancements have brought their widespread adoption to other domains, particularly for problems involving time-series or sensory inputs, which, crucially, depended on ad-hoc feature extraction with shallow learning techniques. The efficiency of deep learning algorithms substantially improved the state-ofthe-art in these fields [17,31,41,46,53]; while largely dismissing manual feature design strategies. However, this success is due to supervised learning models, which require a huge amount of wellcurated data to solve the desired task. Compared to computer vision or other realms, semanticallylabeled sensory data (such as electrooculography, heart rate variability, and inertial signals) is much more difficult to acquire, owing to: privacy issues, complicated experimental set-ups and the prerequisite of expert-level knowledge for data labeling.\n\nDue to these limitations, unsupervised learning holds an enormous potential to leverage a vast amount of unlabeled data produced via omnipresent sensing systems. For instance, an average smartphone or smartwatch is equipped with a multitude of sensors, such as IMUs, microphone, proximity, ambient light and heart rate monitors producing a wealth of data that can be utilized for solving challenging problems and can enable novel use cases through harnessing the power of machine learning. Past efforts to learn from sensory (or time-series) data were mainly limited to the use of autoencoding based approaches [3,27,31,40] that can learn to compress the data, but fail to learn semantically useful features [38]. More recently, generative adversarial networks (GANs) have been explored to some extent for unsupervised learning from sensory inputs [59], but GANs are infamous for being notoriously unstable during training and suffer from mode collapse, making it a great challenge to use them in practice, for now [55]. It might also be excessive to use GANs as a pre-training strategy when synthesizing data is not a core focus, as the number of parameters in the network that need to be learned increases extensively. Moreover, transfer learning has been utilized to a limited extent for tackling the issue of unavailability of massive well-annotated sensory datasets for training deep models. It has been explored to improve the performance in a supervised setting through joint-training on labeled source and target datasets [5,13]. In these cases, the features transferred from supervised models may not be general and are mostly tied to a specific task; therefore, they might not generalize well to other tasks of interest, compared to methods that learn task-agnostic features, in an unsupervised manner. Likewise, existing methods did not focus on learning in low-data regimes nor from unlabeled input which is available in much larger quantities (see section 2 for related work). In this paper, we show that the emerging paradigm of self-supervised learning offers an efficient way for learning semantically-meaningful representations from sensory data that can be used for solving a diverse set of downstream tasks 1 . The self-supervised approaches exploit the inherent structure of the input to derive a supervisory signal. The idea is to define a pretext task, for which annotations can be acquired without human involvement (directly from the raw data) and can be solved using some form of unsupervised learning techniques. This intriguing property essentially renders a deep sensing model, that is developed based on the earlier described principle of \"self-learning\" in nature: a system that can be trained continuously on massive, readily-accessible data in an unsupervised manner [44,49]. However, in this case, the challenge lies in designing complex auxiliary tasks that can force the deep neural network to capture meaningful features of the input, while avoiding shortcuts [11] (i.e., simple unintended ways to trivially solve the auxiliary task without learning anything useful that generalizes beyond the auxiliary task).\n\nOver the last few years, given the large potential of self-supervised learning in exploiting unlabeled data, multiple surrogate or auxiliary tasks have been proposed for feature learning to ultimately solve complex problems in different domains [7,12,38]. Particularly in the vision community, a surge has been seen in developing self-supervised methods, owing to the availability of a wide variety of large scale datasets and well-established deep network architectures. In this realm, the most straightforward strategy is the reconstruction of contextual information based on partially observable input [8]. The prediction of color values for grayscale images [64] and the detection of the angle of rotation [12] are recent attempts found to be useful in learning visual representations. Similarly, the temporal synchronization of multimodal data is exploited to learn audio-visual representations [24]. Likewise, contrastive learning is another highly promising technique that aim to capture shared information among multiple views of the data [38,56], including successes in robotic imitation learning [50]. Thus, we conjecture that self-supervision is fruitful for automatically extracting generic latent embeddings from sensory data that can improve much-needed label efficiency, as acquiring well-labeled sensory data is extremely challenging in the real world. Furthermore, due to its annotation-free nature, this learning strategy is not only effective and scalable, but can also be directly leveraged in a federated learning environment [4], to learn from widely distributed and decentralized data without aggregating it in a centralized repository, which can preserve users' privacy [33].\n\nIn this paper, we present a principled framework for self-supervised learning of multisensor representations from unlabeled data. Our objective is to have numerous tasks, with each perhaps imposing a distinct prior on to the learning process, resulting in varying quality features that may differ across sensing datasets. Specifically, as proxy tasks and modalities could be of more or less relevance to the downstream task's performance, it is essential to explore and compare several pretext tasks so as to discover the ones with better generalization properties. The broad aim is to have many auxiliary tasks in a user's toolbox such that, either experimentally or based on prior knowledge, a relevant task can be selected for training deep models. Particularly, the objective is to have proxy tasks that enable learning of representations invariant to several input deformations that commonly arise in the temporal data, such as sensor noise and sampling-rate disparities, or that can be used jointly in a multi-task learning setting. To this end, we develop eight novel auxiliary tasks that intrinsically obtain supervision from the unlabeled input signals to learn general-purpose features with a temporal convolutional network, such that the pre-trained model generalizes well to the end tasks.\n\nOur approach comprises of pre-training a network through self-supervision with unlabeled data so that it captures high-level semantics and can be used either as a feature extractor 2 or utilized as initialization for making successive tasks of interest easier to solve with few labeled data. To develop the auxiliary tasks, we take advantage of the synchronized multisensor (or multimodal) data as it belongs to the same underlying phenomena and we exploit it to create proxy tasks that can capture broadly useful features. Specifically, it can substantially help in learning powerful representations of each modality, and ultimately learn more abstract concepts in a joint-embedding space. Thus, we use a multi-stream neural network architecture to solve proxy tasks so that it can learn modality-specific features with a distinct encoder per modality and subsequently learn a shared embedding space with a modality-agnostic encoder. The fundamental structure of our framework is illustrated in Figure 1. We adopt a small model architecture in this work to highlight a) effectiveness of self-supervised tasks (i.e. improvement is not due to complex architecture) and b) potential of deployment on resource-constrained devices for training and inference.\n\nWe demonstrate that a relatively straightforward suite of auxiliary tasks results in meaningful features for diverse problems, including: activity recognition, stress detection, sleep stage scoring, and WiFi sensing. First, we show that the self-supervised representations are highly competitive with those learned with a fully-supervised model, by training a linear classifier on top of the frozen network, as it is a standard evaluation protocol for assessing the quality of self-supervised tasks [38,54]. Second, we explore fine-tuning the last layer of the encoder to gain further improvements over training from scratch. Third, we investigate the effectiveness of the learned representations in low-data regime 3 . Using our pre-trained network as initialization, we achieve a significant performance boost with as little as 5 to 10 labeled instances per class, which clearly highlights the value of self-supervised learning. Lastly, we evaluate the transferability of the features across related datasets/tasks to show the generality of our method in an unsupervised transfer learning setting.\n\nIn summary, our main contributions are as follows:\n\n\u2022 We propose Sense and Learn, a generalized self-supervised learning framework comprising several surrogate tasks to extract semantic structural concepts inherent to diverse types of sensory or time-series data.  1. Illustration of our Sense and Learn representation learning framework. A deep neural network is pre-trained with self-supervision using input modalities from large unlabeled sensory data, such as inertial measurements (or electroencephalogram, heart rate, and channel state information). The learned network can then be utilized as a feature-extractor or initialization for rapidly solving downstream tasks of interest with few labeled data.\n\n\u2022 We extensively evaluate our self-supervised tasks on various problems (e.g. sleep stage scoring, activity recognition, stress detection, and WiFi sensing) and learning settings (i.e. transfer and semi-supervised) to significantly improve the data efficiency or lower the requirement of collecting large-scale labeled datasets. \u2022 Our results demonstrate that self-supervision provides an effective initialization of the network (and powerful embeddings) that improves performance significantly with minimal fine-tuning, and works well in a low-data regime, which is of high importance for real-world use cases. \u2022 The developed auxiliary tasks require an equivalent computational cost as standard supervised learning and has fewer parameters than autoencoding methods, but provide better generalization with greatly improved sample efficiency. \u2022 We utilize a small network architecture to show the capability of self-supervision and its prospective usage on resource-constrained devices. In particular, the majority of our proposed tasks are designed around the principle that self-supervised data generation should not be computationally expensive; thus, it can be readily used for on-device learning. \u2022 We briefly discuss how to use our framework in practice, as well as its limitations.\n\nIn the following sections, we present the relevant literature to our work in Section 2. Our selfsupervised methodology is described in Section 3. The experimental results are discussed in Section 4, real-world impact and limitations in Section 5, and conclusions and directions for future work are presented in Section 6.\n\n2 RELATED WORK 2.1 Unsupervised and Self-Supervised Learning Deep learning has revolutionized several areas of research with an intuitive property of learning discriminative features directly from the raw data and eliminating the need of manual feature extraction [16,17,31,41]. The success of deep learning is largely attributed to the massive labeled datasets apart from other factors, such as availability of computational power and better neural architectures. Obtaining semantically labeled data required for training supervised models is an expensive and time-consuming process. Therefore, unsupervised learning has seen growing interest in the last couple of years as unlabeled data is available in huge quantities, especially on decentralized edge devices. A classical illustration of unsupervised feature learning is the autoencoder, which learns to map an input onto a lower-dimensional embedding so that reconstructing the original input from such a space incurs a lower error. However, the decoding-based strategies deplete the network capacity through attending to low-level details instead of capturing semantically meaningful features. Therefore, the focus of recent studies is on providing an alternative form of supervision, where annotations can be intrinsically extracted from the data itself.\n\nThe field of self-supervised learning exploits the natural supervision available within the input signal to define a surrogate task that can force the network to learn broadly-usable representations. To that end, numerous pretext tasks are proposed in different domains. [37] established the task of predicting the relative position of randomly cropped image patches. [26,64] inferred color values for grayscale pictures, [50] utilize time-contrastive loss as a way to minimize the embedding distances of the same scene recorded from multiple viewpoints, while maximizing the distances for those captured at different timesteps. A similar technique is proposed in [56] to learn from multiple views of the data. [54] defined self-supervised tasks for audio, inspired by word2vec [34]. [24] showed that video representations could be learned by exploiting audio-visual temporal synchronization. Timecontrastive learning is suggested in [21] for extracting features from time-series, in an unsupervised manner, through predicting segment IDs. Likewise, autoregressive modeling has been combined with predictive coding to learn compact latent embeddings for various domains [38]. For natural language modeling, self-supervised objectives, such as predicting masked tokens from surrounding ones and predicting the next sentence, turn out to be powerful methods for learning generic representations of text [7]. Similarly, for learning inertial sensory features, [45] presented a signal transformation recognition task. Lately, self-supervised learning has been shown to be beneficial for semi-supervised learning, through jointly optimizing supervised and self-supervised losses [62]. In this work, we develop several self-supervised tasks for learning representations from a wide range of sensory data such as electroencephalography, electrodermal activity and inertial signals. We show that pre-training with self-supervision using unlabeled data helps in learning highly generalizable features that improve data efficiency and transfer well to a related set of tasks.\n\n\nLearning Sensing Models with Machine Learning\n\nAn understanding of human contexts, activities and states is an important area of research in ambient computing and pervasive sensing due to the fact that it can play a central role in several application domains including: health, wellness, assistance, monitoring, and human computer interaction. To achieve the earlier described objective, the data is collected from users through wearables or other sensors, under varied environments, for learning a task-specific model. For instance, prior work on activity recognition explored various methodologies with inertial sensors embedded in smartphones or smartwatches [16,19,52]. Emotional state recognition is widely achieved with physiological signals, such as skin conductance and heart rate variability [31,39,46]. Similarly in sleep analysis, the electrical brain activity is captured with an electroencephalogram to classify sleep into different stages [15,25,53]. Importantly, for device-free sensing systems, channel state information from WiFi is utilized to infer participants' activities in a non-intrusive manner [60]. Earlier developed methods for these problems heavily relied on manual feature extraction from sensory data to infer a user's activity, emotional state or sleep score and these methods were limited depending on the domain knowledge available to extract discriminative features. With the tremendous progress in end-to-end supervised learning via deep networks, it has been shown that the features can be learned directly from data instead of hand-crafting them based on domain knowledge [16,17,31,41].\n\nConsequently, 1D convolutional and recurrent neural networks have become standard techniques for achieving state-of-the-art performance on problems involving temporal data [16,17,46,53]. Nevertheless, these approaches have heavily relied on the availability of large-annotated datasets, which are notoriously difficult to acquire in the real-world. Due to this, in recent years, few work explored unsupervised feature learning to exploit the availability of vast amounts of unlabeled data, while mainly focusing on input reconstruction via autoencoders and related variants, such as restricted Boltzmann machines and sparse coding [3,27,31,40]. There has also been work on utilizing generative adversarial networks for modeling data distributions without supervision [9,28] and in semi-supervised learning for sensing models [59]. Furthermore, transfer learning has also been leveraged to improve neural network generalization in domains where large labeled data is difficult to obtain, but focused on transfer from supervised models [5,13]. More recently, [45] proposed a self-supervised task of signal transformation recognition for feature learning that achieved significant improvement in activity recognition over autoencoding, though focusing only on unimodal input and the activity recognition problem. As opposed to earlier works, we present a general framework for learning multimodal representations from a diverse set of sensors in a self-supervised way and compared to [45] we simplify the problem formulation of transformation recognition (see section 3.2); our novel proxy tasks work on-par and can be used when transforming the input is not desirable or when it may lead to unintended outcomes (e.g. ECG signals). Furthermore, pre-training models with our auxiliary tasks significantly lower the amount of labeled data required to achieve better generalization and opens up the possibility of on-device learning from decentralized unlabeled data.\n\n\nMETHODOLOGY\n\nIn this section, we begin with a motivation and an overview of our self-supervised framework for learning sensory representations. Next, we provide a formalization of the auxiliary tasks and discuss an end-to-end approach for mutli-modal learning. Subsequently, we describe the network architecture design, its implementation, and the optimization procedure.\n\n\nMotivation and Overview\n\nThe key insight behind our technique is that the self-supervised pre-training acts as a prior that can give rise to varying quality representations that encode underlying signal semantics at different levels, which may or may not be useful for a downstream-task of interest. Therefore, it is vital to employ multiple auxiliary tasks to discover the suitable inductive bias necessary to obtain optimal performance on the desired end-task. This intuition is important considering that the time-series (or sensory) data shows peculiar characteristics (e.g. signal-to-noise ratio, amplitude variances, and sampling rates) depending on the nature of phenomena being recorded. Likewise, there should be an array of tasks to choose from depending on the learning problem and device type (e.g. available resources, sensor types etc.). Importantly, we want the self-supervised model to learn generic features rather than focusing on low-level input details, as a pre-trained network has to provide a strong initialization for learning with limited labeled data and generalize to other related tasks. Thus, instead of relying on a single auxiliary task, we learn latent representations with a broad set of tasks based on different objective functions.\n\nWe propose a generalized framework comprising of eight pretext tasks that can be used to learn features from heterogeneous multisensor data. To achieve this, we utilize a temporal convolutional network (TCN) with a distinct encoder for each input modality and a shared encoder for multi-modal representation extraction. We choose to use TCN as an embedding network for sequence modeling due to its effectiveness in capturing long-term dependencies and parallelizability at a significantly lower cost than recurrent networks [2]. For every learning problem, we consider unlabeled multisensor (or multimodal) data\nD = {(u 1 , v 1 ), (u 2 , v 2 ), . . . (u , v )} consisting of examples.\nHere, u and v denote the samples of different modalities (e.g. accelerometer and gyroscope) of the \u210e example. The defined pretext tasks exploit the inherent properties of the data to obtain supervision from the input pairs without requiring any manual annotation to optimize a certain loss function. Specifically, each surrogate task employs its own loss function for learning differently. For instance, an input reconstruction task employs mean-square error loss, while another task, concerning the detection of odd segments within a signal, uses negative log-likelihood; we discuss these in detail in the subsequent section. At a high-level, we utilize these objectives as necessary proxies for sensory representation learning without focusing on how well the model performs on them but on an end-task. After pre-training, captures a joint embedding space of the inputs, and thus it can be utilized either as a feature extractor or as initialization for rapidly learning to solve other problems. Finally, it is important to note that proxy tasks cannot be applied arbitrarily to any type of input and tasks like blend detection can only be used when modalities are related to each other, e.g. as accelerometer and gyroscope.\n\n\nSelf-Supervised Tasks\n\nIn order to achieve self-supervised learning of disentangled semantic representations from unannotated sensory data, we develop eight surrogate tasks for the network. To solve these tasks, we assume u = { 1 , 2 , . . . , } and v = { 1 , 2 , . . . , } denote multi-channel signals of length from different modalities (e.g. accelerometer and gyroscope). Let = (u) and = (v) be the low-dimensional embeddings computed from the corresponding input signals with respective encoders. Likewise, = ( (u), (v)) provides a shared embedding of the inputs through fusion that may capture more abstract features. A high-level illustration of the self-supervised learning procedure is shown in Figure 1. A self-supervised data generation module produces annotated input from unlabeled multisensor data for learning . We utilize this formulation to define the self-supervised objectives in the following subsections.\n\n\nBlend Detection\n\nTo take advantage of the multisensor signals, we define an auxiliary task of detecting input blending as a multi-class classification problem. Given an unlabeled input batch = \u222a | | =1 {(u, v)} , we generate three types of instances. First, we keep the original samples as belonging to a class . Second, we perform a weighted blending of an instance from one modality with another randomly selected example from a different modality as class . Third and last, the instances of the same modalities are blended to have instances for a class . The blending weight is sampled from a uniform distribution, i.e. \u223c U (0, 1). The network is trained with a negative log-likelihood loss L for learning to differentiate between examples of blended and clean classes ( ) on the entire training set D :\nL = \u2212 1 \u2211\ufe01 =1 \u00d7 log( (u, v))\n\nFusion Magnitude Prediction\n\nWe create a variant of the earlier defined task that uses a similar data generation strategy but differs fundamentally in terms of the objective it optimizes. The data generation process is similar to the mixup strategy, widely used for data augmentation in supervised learning [63]. Here, we task the network with predicting the magnitude , which defines the blending (or weighting) factor of the signals. We assign = 0 to the clean examples, while assigning weight \u223c U (0, 1) to the blended examples, as earlier. In this case, a natural choice is to adopt mean-square loss as learning objective. However, we experimentally discovered that utilizing binary cross-entropy with a logistic function in the network's output layer results in better generalization; thus the network is trained to minimize the following loss L for each input modality:\nL = \u2212( \u00d7 log( (u, v)) + (1 \u2212 ) \u00d7 log(1 \u2212 (u, v)))\n\nFeature Prediction from Masked Window\n\nIt is observed that networks which try to reconstruct every bit of the input waste capacity on modeling low-level details [38]. Instead, in this auxiliary task we ask the network to approximate summary statistics of a masked temporal segment within a signal. To generate the data, we randomly sample the segment length \u223c U ( , \u210e \u210e ) and starting point \u223c U (0, \u2212 ). From the selected subsequence, we extract 8 basic features: mean, standard deviation, maximum, minimum, median, kurtosis, skewness, number of peaks; and then mask the segment with zeros. The multi-head network is trained with Huber loss L to predict the statistics of the missing subsequence for all modalities at the same time:\nL = 1 2 \u00d7 2 , if | | \u2264 \u00d7 (| | \u2212 2 ), otherwise | | > , where = (u, v) \u2212\n\nTransformation Recognition\n\nThe signal transformation recognition is presented in [45] as an auxiliary task, where it is posed as a set of binary classification problems solved with a multi-task network to determine whether a signal is a transformed version or not. Here, we simplify the problem formulation and treat the task as multi-class classification, to learn a network that can directly recognize the applied transformation on an input from one out of classes. The benefits of our formulation are that it does not require specifying weights for task-specific losses and the network can be efficiently optimized with categorical cross-entropy objective L . Another key difference is that we address the problem of learning from multimodal data as opposed to a unimodal signal. To produce taskspecific data, we generate transformed versions of each instance utilizing eight transformation functions: permutation , channel shuffle, timewarp, scale, noise, rotation, flip, negation), and an identity operation while assigning the function type as the corresponding class. During network training, we feed a batch of data consisting of examples for all the classes (inclusive of originals) and optimize a separate loss function for each input signal.\n\n\nTemporal Shift Prediction\n\nThis conceptually straight-forward task consists of estimating the number of steps by which the samples are circularly-shifted in their temporal dimension. We pose this problem such that it can be treated either as a classification or as a regression task. We define a range of shift intervals, depending on the input resolution. For instance, in the activity recognition task, the considered ranges are: [(0, 5), (6, 10), (11,20), (21,50), (51, 100), (101, 200), (201, 300)]. For producing shifted inputs, we first select a pair at random from the defined ranges, and second we sample a shifting factor within the defined boundary of the selected range. Last, we temporally shift the values of an input segment with the sampled factor. The network can be trained to predict either the range index (treating each entry as a class, with 7 classes in total) or regress the factor. In our experiments, we notice that solving it as a regression problem results in better generalization on the end-task. Thus, the network is trained by minimizing mean-square error loss L for each sensing modality:\nL = \u2225 (u, v) \u2212 \u2225\n\nModality Denoising\n\nThis task's objective is to decompose a signal for obtaining a clean target through input reconstruction, i.e. isolating the mixed noise. It is similar in spirit to source separation in audio [29,61] and to a denoising autoencoder, but without random noise [58]. The fundamental intuition here is that if the network is tasked to reconstruct the original input from corrupted or mixed modality signals, then it forces the network to identify core signal characteristics while learning usable representations in the process. In our case, instead of mixing arbitrary noise, we exploit the availability of multisensor data to generate instances that might be of sufficient difficulty for the network to denoise. Specifically, we utilize a weighted blending operation u \u00d7 (1 \u2212 ) + v \u00d7 to mix instances of different modalities, i.e. we produce samples through combining the clean instances of accelerometer with gyroscope and vice versa while keeping the original samples as additional data points. The encoder-decoder network is trained end-to-end to minimize the mean-square error loss L between ground truth and corrupted input pairs.\n\n\nOdd Segment Recognition\n\nThe goal of odd segment recognition is to identify the unrelated subsegment that does not belong to the input under consideration, where the rest of the sequences are in the correct order. The high-level idea behind the task is that if the network can spot artifacts in the signal, it should then also learn about useful input features. There are multiple ways to generate examples with odd subsegments; we approach it as an input consisting of an irregular segment of fixed length that is selected randomly from a different input modality. To generate proxy task examples, we begin with splitting an instance into equal-length sequences (e.g. of length 100). Then, 2 sequences from different modalities are randomly selected, that are either directly swapped or blended before applying a substitution operation. The index of the interchanged slices is used as the class, where valid inputs are assigned a distinct class. The network is asked to predict an index (out of 4 classes) of the odd sequence in each input modality. For this task, we minimize a categorical cross-entropy loss L to train a multi-head network.\n\n\nMetric Learning with Triplet Loss\n\nAs we are interested in learning from multisensor data, we take advantage of multiple input modalities to formulate a metric learning objective. For this purpose, we utilize a symmetric triplet loss [65], which encourages the representations of similar inputs, while the representations of dissimilar inputs to be further apart. To optimize the specified loss, we need to generate input triplets consisting of an anchor, which can be an original instance, a positive sample that should be related (i.e. provides a complementary view of the input) to the anchor, and a negative sample which must be entirely different from the former pair. The loss then minimizes the distance between the anchor and the positive samples, while maximizing the distance of the negative samples from the anchor and the positive samples. For metric learning under this formulation, we generate the examples as follows: the actual instances are treated as anchors, and positive instances are generated by applying selected transformations at random on each anchor; whereas the negative instances are sampled from a different modality (i.e. for accelerometer, we treat samples from gyroscope as negatives). We then optimize with triplet loss L to produce a smaller distance on associated samples and a more considerable distance on unrelated ones:\nL = max[0, ( , ) \u2212 1 2 \u00d7 ( ( , ) + ( , )) + ],\nwhere , , are the embeddings of anchor, positive and negative samples respectively, represents the distance margin, and denotes squared-euclidean distance.\n\n\nAlgorithm 1: Sense and Learn\n\nInput: Multisensory unlabeled data D and labeled data D , auxiliary task , number of iterations , batch size , L2 regularization rate Output: Self-supervised pre-trained network initialize a representation learning network with parameters initialize a linear classifier with parameter for a down-stream task initialize self-labeling data generation procedure based on task initialize proxy-task and end-task loss functions L and L , respectively\nfor iteration \u2208 { 1, . . ., } do\nRandomly sample a mini-batch of instances from D as { 1 , 2 , . . . , } Generate labeled (self-supervised) samples {( , ) 1 , ( , ) 2 , . . ., and ( , ) } with Update by descending along its gradient\n\u2207 1 =1 L ( ( ), ) + \u2225 \u2225 2 end for iteration \u2208 { 1, . . ., } do\nRandomly sample a mini-batch of labeled instances from D as {( , ) 1 , ( , ) 2 , . . ., and ( , ) } Extract latent embeddings z from encoder within (x) Update by descending along its gradient\n\u2207 1 =1 L ( ( ), ) end\nWe use Adam optimizer [23] for computing gradient-based parameter updates in all the experiments.\n\n\nNetwork Architecture Design\n\nWe implement the learning network as a multi-stream temporal convolutional model (TCN). The part of the motivation to use TCN came from [2] where it has been shown that convolutional networks perform remarkably well on sequence modeling tasks. Likewise, they have a low footprint for training and inference as compared to other methods and can be pruned easily to further compress the network [35]. The subnetworks share the same architecture, which is followed by a modality-agnostic network that fuses and learns a shared representation from the multimodal input. Jointly, we refer to these modules as encoder , which is embedded within . Importantly, we add an extra block connected to , which is discarded after self-supervised pre-training. The intuition behind this strategy is that the model's last layers capture features that are primarily task-specific and do not generalize well on the end-task of interest. Therefore, the additional layers allow the base encoder to capture more generic features, while solving the auxiliary tasks. Figure 2 illustrates the architecture design by precisely highlighting these main building blocks. The modality-specific encoder consists of three 1D convolutional layers with 32, 64, and 96 feature maps and a kernel size of 24, 16, and 8, respectively. The max-pooling layer, with a pooling size of 4 and a stride of 2, is added after the initial convolutional layers. A dropout is used with a rate of 0.1 at the end of the block. The shared encoder consists of a single convolutional layer with 128 feature maps and a kernel size of 4, which takes concatenated features as input. The supplementary layers in the pre-training block consist of a convolutional layer with 64 feature maps and a kernel size of 4 and a dense layer having 512 hidden units. Importantly, a separate output layer is used for each input modality for all the surrogate tasks except 'sensor blend,' which, based on its formulation, does not require this. Likewise, we use global pooling as the last layer in the representation learning network that aggregates discriminative features. L2 regularization with a rate of 0.0001 is applied to the weights of all the layers to avoid overfitting. Moreover, we employ SELU as non-linearity except on the output layer; the network is trained with a learning rate of 0.0001 for a maximum of 30 epochs unless stated otherwise.\n\nWe utilize a fixed network architecture for all the considered tasks (both auxiliary and downstream), the intuition behind this choice being threefold. Firstly, we want to minimize the architectural differences to discover the true potential of self-supervision, i.e. it can be used with minimal effort on architecture tuning to extract semantic representations across diverse datasets. Secondly, our aim is to show that self-supervision has a huge prospect to be utilized for on-device learning. Having a smaller architecture and given the annotation-free nature of the proposed approach opens several exciting avenues in learning and inference with devices having limited processing capabilities. However, the further investigation of this is beyond the scope of our work and we leave it for future work. Lastly, our multi-modal architectural specification provides the flexibility to incorporate other modalities effortlessly. Furthermore, we highlight that in this work our focus is on individual task proposal and evaluation, but the framework can be used for jointly solving proxy tasks (i.e. in multi-task learning setting) as they share the same architecture, but differ fundamentally in terms of the loss function being optimized.\n\nThe high-level description of the learning procedure is summarized in Algorithm 1. Given an unlabeled data D and a specified auxiliary task , we optimize with task-specific data that is generated on-the-fly, as described in the preceding section. Once pre-training converges, the layers specific to self-supervised learning are discarded, and the encoder is saved. Then, the second round of training on a down-stream task of interest begins with labeled data D . Depending on the evaluation criteria, the following can be done: a) the network is either kept frozen and used as a generic feature extractor for learning a linear classifier 4 , b) the modality-agnostic encoder is fine-tuned during learning an end-task, or c) the self-supervised network is used as initialization for rapidly solving the final-task, e.g., fine-tuning a model with little labeled data. The encoder network shown in Figure 2 represents the module that is kept frozen, while depending on the learning setting the shared layers are further fine-tuned.\n\n\nEXPERIMENTS\n\nWe perform a comprehensive evaluation of our framework on four different application domains: a) activity recognition, b) sleep-stage scoring, c) stress detection, and d) WiFi sensing. For every area, we train the self-supervised networks with each proposed task and determine the quality of the learned representation with either a linear classifier or by fine-tuning with few labeled instances. Furthermore, we also examine the knowledge transferability between related datasets. In the following, we describe the utilized datasets, pre-processing steps, and assessment strategy, including the baselines.\n\n\nDatasets\n\nWe assess the performance of Sense and Learn on 8 publicly available multisensor datasets from diverse domains. The brief description of each utilized data source is provided below, with Table 1 summarizing their major characteristics. Table 1. Key characteristics of the datasets used in the experiements. The relative class distribution of each dataset is given in Figure 6 of appendix A.1. Activity Recognition. For smartphone-based human activity recognition, we select 5 datasets containing accelerometer and gyroscope signals, namely: HHAR, MobiAct, UCI HAR, MotionSense, and HAPT. The Heterogeneity Human Activity Recognition (HHAR) dataset [52] is collected from 9 participants, each performing 6 basic activities (i.e. sitting, standing, walking, stairs-up, stairsdown and biking) for 5 minutes. A broad range of devices is used for the systematic analysis of sensor, device, and workload-specific heterogeneities across manufacturers. Specifically, each user carried 8 smartphones on different body locations that were selected from a pool of 36 devices of different models and brands. Likewise, the sampling rate differs considerably across phones with values ranging between 50Hz-200Hz. The MotionSense dataset [30] is recorded with the aim of inferring personal attributes, such as physical and demographics, in addition to the activities. The iPhone6s is placed in the users' front pocket during the collection phase, while they performed 15 trials of 6 activities in the same experimental setting. In total, 24 subjects of varying height, weight, age and gender performed the following 6 activities: walking, jogging, sitting, standing, downstairs and upstairs. We use this data only for the detection of activities without concerning with the identification of other attributes. UCI HAR [1] comprises data obtained from 30 subjects with waist-mounted Samsung Galaxy S2 devices sampling at 50Hz. Each participant completed 6 activities of daily living (i.e. standing, sitting, lying down, walking, downstairs and upstairs) during 2 trials with a 5 seconds resting condition in-between. The MobiAct [57] contains inertial sensors data collected from 66 participants with Samsung Galaxy S3 phones through more than 3200 trails. The subjects freely placed the device in their trouser's pocket to mimic real-life phone usage and placement. We utilize the data of 61 subjects for whom data of any of the following 11 activity classes is available: walking, jogging, jumping, upstairs, downstairs, sitting, stand to sit, sit to stand, sitting on a chair, car step-in and car step-out. The Human Activities and Postural Transitions (HAPT) dataset [43] is collected from a group of 30 volunteers with Samsung Galaxy S2 devices sampling at 50Hz. The phone was mounted on the waist of each subject who completed 3 dynamic activities (walking, upstairs, downstairs), 3 static posture activities (lying, sitting, standing), and 6 postural transitions (sit-to-lie, lie-to-sit, stand-to-sit, sit-to-stand, stand-to-lie, and lie-to-stand); resulting in 12 classes.\n\n\nDataset #Subjects #Classes\n\nSleep Stage Scoring. We use the PhysioNet Sleep-EDF 5 dataset [14,22] consisting of 61 polysomnograms (PSGs) from 20 subjects. It is comprised of participants from 2 different studies: a) effect of age on sleep and b) Temazepam effect on sleep. We use the 2 whole-night PSGs sleep recording sampled at 100Hz from the former study. Each record contains 2 electroencephalogram (EEG) signals from Fpz-Cz and Pz-Oz electrode locations, electrooculography (EOG), electromyography (EMG) and event markers. Some instances also have oro-nasal respiration and body temperature. The hypnograms (30-seconds1 epochs) were manually annotated by sleep expert with one of the 8 sleep classes (Wake, N1, N2, N3, N4, Rapid Eye Movement, Movement, Unknown), based on the R&K standard. We utilize EEG (Fpz-Cz) and EOG signals in our evaluation. Following previous work [53], we merged N3 and N4 into a single class N3 and discarded Movement and unscored samples, to have 5 sleep stages.\n\nStress Detection. For physiological stress recognition, we utilize the MIT DriverDb dataset [14,18], which is collected during a real-world driving experiment in a city, on a highway and in a resting condition. The publicly-available version on PhysioNet consists of 17 drives out of 24, each lasted between 1-1.5 hours. The following physiological signals are recorded: EMG, electrocardiography (ECG), galvanic skin response (GSR) from hand and foot, heart rate (HR; derived from ECG), and breathing rate. The signals were originally sampled at different rates but downsampled to 15.5Hz. The 'marker' signal provided in the dataset is used to derive the binary ground truth, indicating a change-of-drive (i.e. resting, city or highway driving), which is found to be correlated with distress level through post-driving video analysis by experts [18]. We use the following 10 drives 04, 05, 06, 07, 08, 09, 10, 11, 12 and 16 in our experiments, which have HR and GSR (from hand), given collection of other signals in real-life is quite problematic.\n\nWiFi Sensing. Device-free context recognition with WiFi is an emerging area of research. To show the robustness of our self-supervised methods on this task, particularly on a unimodal signal, we utilize the WiFi channel state information (CSI) dataset [60] for activity recognition. This dataset is collected in a controlled office environment, where the transmitting (router) and receiving (Intel 5300 NIC) devices were 3m apart, and the channel state information (CSI) was recorded at 1kHz. The 6 subjects performed 20 trials for each of the following 7 activities: lying down, falling, walking, running, sitting down, standing up and picking something up. The ground truth was obtained from videos recorded during the data collection process, and CSI amplitude is used for learning a model.\n\n\nPre-processing and Assessment Strategy\n\nTo prepare the data for sequence modeling with a temporal convolutional network, we utilize a sliding window approach to segment the signals into fixed-sized inputs. In the case of the activity recognition task, we choose a window size of 400 samples with a 50% overlap, except for the HAPT dataset where a segment size of 200 samples is used, due to the short duration of posture-transition activities. We found these windows sizes to be optimal based on earlier experiments, as each activity dataset has a different sampling rate. We did not perform resampling as the sampling rate differences among phones does not vary significantly and 1D convolutional layers with wide kernel sizes learn to adapt to the specific characteristics of the input signal. However, if the sampling rate varies considerably it might be essential to do resampling. For Sleep-EDF, we applied minimal pre-processing based on existing work [53] to formulate the problem as a 5-stage sleep classification and used the 30 seconds epochs as model input. In the WiFi sensing task, we process the input same as the original work that open-sourced the data and utilize a downsampled CSI signal of 500Hz as [60], which corresponds to an input window of 1 second. The heart rate and skin conductance signals from MIT DriverDb are processed to remove artifacts and these signals are mean normalized using the 'mean' and 'standard deviation' calculated from the baseline (or resting phase) of the data collection following [47] for each subject. We use a window size of 30 seconds with 50% overlap to generate input segments for the model. We randomly split the datasets based on subjects into train and test sets withholding 70% users for training and the rest 30% for testing. We further divide the training set to obtain a validation set of size 20%, which is used for hyper-parameter tuning and early stopping. Most importantly, we also perform 5-fold cross-validation for thorough performance analysis whenever it is applicable. Furthermore, we z-normalize the samples with mean and standard deviation calculated from the training set. For self-supervision, we pre-train the models using only the training set, including for the transfer learning experiments. The self-labeled examples are generated for each task on-the-fly during the learning phase, as defined earlier in Section 3.2.\n\nFor each recognition problem, we treat a fully-supervised model directly trained (in an end-to-end manner) with the annotated data of an end-task as a 'baseline. ' Likewise, we compare self-supervised tasks against pre-training with a standard autoencoder. As explained earlier, we assess the quality of the self-supervised representation (including in the transfer-learning setting) through training a linear classifier or fine-tuning the last convolutional layer of the encoder on the downstream tasks. For learning in the low-data regime, we use a self-supervised network as initialization to quickly learn a model with few labeled examples. In all the cases, we assess the network performance with a weighted version of F-score and Cohen's kappa (see appendix A.2); as these metrics are robust to unbalanced class distributions while being sensitive to misclassifications. Table 2. Performance evaluation (weighted F-score) of self-supervised representations with a linear classifier. The unsupervised pre-trained networks achieve competitive performance with the fully-supervised networks. In WiFi-CSI sub-table, the entries with hyphen indicate auxiliary tasks that cannot be applied to unimodal signals. See Table 6 \n\n\nResults and Discussion\n\nLinear separability and effects of fine-tuning the shared encoder. For assessing the quality of the self-supervised embeddings, we conduct experiments with a linear classifier on the end-tasks. Linear separability is a standard way of measuring the power of self-supervised-learned features in the literature [12,38,54], i.e. if the representations disentangle factors of variations in the input, then it becomes easier to solve subsequent tasks. Here, we train a linear classifier (i.e. logistic regression) 10-times on top of a frozen network (pre-trained with self-supervision) using annotated data of the downstream task. Table 2 summarizes the results on eight benchmark datasets from four application domains. We compare the performance against a fully-supervised network that is trained in an end-to-end manner (directly with annotated data). We also consider unsupervised pre-training with a standard autoencoder to analyze the improvements of self-supervision. Likewise, a linear model is also trained with random features (i.e. from a randomly initialized frozen network) to estimate its learning capacity. On the activity recognition problem, the self-supervised features achieve very close results on multiple benchmarks to training an entire network with annotated instances. On the HHAR dataset, the transformation and fusion magnitude prediction tasks improve the F-score by 7 points. On other datasets with a large number of classes, such as HAPT and MobiAct, our simple proxy tasks learn features that are generalizable to end-tasks. In the case of sleep stage scoring, linear layers trained with features from the modality denoising and the fusion magnitude tasks achieve a kappa of 0.70, which is impressive given that the representations are learned from completely unlabeled data. Similarly, in a stress classification problem, the self-supervised networks outperform a fully-supervised model with a large margin. The transformations and modality denoising tasks achieve kappa scores of 0.80 and 0.79, respectively. We believe it is because pre-training results in generic features, whereas a model trained directly on the end-task suffers from overfitting. Lastly, we evaluate on the device-free sensing problem using the amplitude of WiFi CSI. Although we designed the auxiliary tasks for multisensorinput, we find a subset of these to be applicable for self-supervision with a unimodal input. We achieve good results with self-supervised features even though the dataset size is relatively small, and input is noisy, complex and high-dimensional. The linear layer trained on top of the feature-prediction task representations achieves an F-score of 83% compared to the end-to-end training F-score of 96%. Table 3. Improvement in recognition rate (weighted F-score) by fine-tuning the shared layers of the encoder while training on the end-task. We observe a significant increase in performance across datasets with self-supervised networks, either surpassing or achieving results on-par with the baseline. See Table 7  In Table 3, we notice a substantial improvement on the downstream tasks if the last convolutional layer of the encoder (see Figure 2) is fine-tuned while training the linear classifier. Comparing with the results given in Table 2, it can be seen that the recognition rate of the models improved significantly, achieving similar results as the fully-supervised baselines; while features learned by input reconstruction with an autoencoder scored low compared to our proposed surrogate tasks even after fine-tuning, except for the WiFi sensing task. On the MobiAct dataset, transformations and sensor blend tasks gain 2 points improvement in kappa. Likewise, for MotionSense, HAPT and UCI HAR, we bridge the gap between fully-supervised and self-supervised models. Interestingly, fine-tuning did not help much with MIT DriverDb compared to training a linear classifier. These results agree with our intuition that training on an end-task directly in this case results in overfitting.\n\nIn summary, the evaluation with a linear classifier trained on top of a pre-trained (self-supervised) feature extractor highlights that the representations learned with auxiliary tasks are broadly useful and better than autoencoding-based approaches. It also confirms our hypothesis that generalpurpose representations can be learned directly from raw input without any strongly (task-specific) labeled data. It is important to note we did not aim to surpass fully-supervised approaches in this setting. Supervised methods will be better because they have direct access to task-specific labels, while self-supervised objectives train a network without any foresight of the end-task. It can also be seen from the results of fine-tuning the encoder, as presented in Table 3, that the network performance matches the supervised methods or improves upon, when shared layers are further trained on the downstream tasks. Likewise, it might be possible to improve generalization of self-supervised models through pre-training on larger unlabeled datasets in a real-world setting.\n\nImpact on learning in low-data regime. We next investigate the performance of our approach in a semi-supervised (or low-data) setting. For this purpose, we pre-train an encoder using unlabeled instances for each self-supervised task and utilize it as initialization for efficiently learning with few labeled instances on the end-task; for the end-task, we add a randomly-initialized dense layer with 1024 hidden units before a linear output layer. The non-linear classifier is then learned and the encoder is fine-tuned with the specified number of instances per class. Specifically, for the defined auxiliary tasks and datasets, we use 5 and 10 examples for each category. We want to highlight that in a on-device learning case, a few labeled instances can be pooled from multiple users quite easily (e.g. 2-3 examples per user) as compared to accumulating several hundred for learning fully-supervised models. Likewise, personalization can also be achieved through precisely asking for a few labels for targeted classes. In Figure 3, we provide an average weighted F-score of 10 independent experiment runs, comparing training from scratch (FS) with the pre-training as an effective initialization for learning a robust classifier. We show that in contrast to the purely supervised approach, leveraging unlabeled data for learning network parameters improves the performance on the end-task. Specifically, our self-supervised models greatly improve the F-score in the low-data setting, in some cases achieving F-scores nearly as good as networks trained with the entire labeled data. Similarly, the self-supervised trained models perform better than the autoencoder, which shows that, despite the simplicity, our proposed auxiliary tasks force the network to learn highly-generalizable features. For each experiment run, we randomly sample the stated number of annotated instances and use these to train all the networks, including fullysupervised baselines.\n\nOn activity recognition, our methodology significantly improves the performance in low-data; for example, on the HHAR dataset with 5 and 10 instances, temporal shift and transformations tasks gain 4 and 7 points over the fully-supervised models' F-score of 0.60 and 0.68. respectively. Similarly, for MobiAct, pre-training with the temporal shift task helps achieve an F-score of 0.75 (5 instances) and 0.82 (10 instances), compared to 0.61 and 0.73 respectively for networks learned from scratch. Furthermore, we achieve identical improvements on UCI HAR, HAPT, and MotionSense with 5 instances per class. The attained F-scores are 0.91, 0.77 and 0.83 in contrast to 0.90, 0.59, and 0.77 of fully-supervised models, respectively. Our method represents a 26 points increase in F-score on the challenging problem of sleep stage scoring. Likewise, on physiological stress detection and device-free sensing problems, the benefit of pre-training with auxiliary tasks is further apparent, where the presented methods achieve 12 points improvement in F-score over the baseline. These results suggest that self-supervision can greatly help with learning general-purpose representations that work well in the low-data regime. We also want to highlight that although the selection of an equal number of instances results in a balanced training set, we use the full test sets (as in earlier experiments) for evaluation, which could be imbalanced. Importantly, utilizing even bigger unlabeled datasets and combining weak-supervision methods can boost the quality of the learned representations.\n\nWe emphasize that the broader objective of self-supervised methods is to learn high-level semantic features that can be used to solve an array of downstream tasks with minimal labeled data. The evaluation of our presented auxiliary tasks clearly highlights the benefit of pre-training the network with unlabeled data to achieve better generalization on the tasks of interest, with very few labeled instances. To the best of our knowledge, we, for the first time, evaluate self-supervised methods in a semi-supervised setting for problems involving multisensor data as earlier work developed fullysupervised network architectures or used classical autoencoding-based approaches for pre-training, followed by network fine-tuning with the entire labeled data. Overall, our approach provides a base for further work in developing sensing techniques that can achieve on-device personalization and perform continual, and few-shot learning, as the presented framework considerably reduces the requirement of labeled data from human annotators to learn the end-task models.\n\nEffectiveness in a transfer learning setting. In a real-world learning setup, there is a high chance that we are interested in a different dataset and downstream task than the one originating from the unlabeled data accessible for pre-training. A broadly useful auxiliary task is thus one that produces generalizable representations that transfer well to other related end tasks. To examine the transferability property of the features learned with our proxy tasks, we evaluate their performance on the activity recognition datasets. To this end, we pre-train the feature extractor with each self-supervised objective (i.e. by discarding the semantic class labels) for all the five datasets (see section 4.1) and investigate their performance through a) training a linear classifier with the entire target annotated data and b) fine-tuning it end-to-end with few labeled data (i.e. learning an activity classifier with 5 and 10 instances of each class from target dataset). Figure 4 provides the results of the source-to-target transfer of self-supervised models trained with nine different auxiliary losses. The diagonal entries of each subplot represent the F-scores when the source and target datasets are the same. In comparison with autoencoder pre-training, features learned with our tasks transfer well between datasets. We observe that even leveraging smaller unlabeled datasets produces useful features, as with sensor-blend-task-learned features on UCI HAR scored 0.91 F-score on the HHAR dataset. On the HAPT dataset of low input resolution (i.e. a segment size of 200 samples) and complex postural activities, transfer learning improves the performance with approximately 8 percentage points in F-score over pre-training on the same dataset. Importantly, our results are also competitive with the fully-supervised baselines on the respective datasets.\n\nWe further examine if the transferred self-supervised models are beneficial in learning from low-data; i.e. few labeled instances are available from the target data, but separate unannotated data is available for pre-training. We utilize the same network configuration as discussed earlier for low-data experiments and we fine-tune the model end-to-end. We randomly sample a specified number of instances and perform experiments 10 times while utilizing the same instances for both types of networks (i.e. pre-trained and baseline) and report average F-score. In Figure 5 3. Contribution of self-supervised pre-training for improving end-task performance with few labeled data. We utilize pre-trained self-supervised models as initialization for learning in a semi-supervised setting. The subplots provide the mean F-score of 10 independent runs, where randomly selected instances are used to train the models. The bars with gray color represent the results of the networks trained only on the labeled instances while vertical black line shows results of fully-supervised model trained with entire data.  4. Generalization of the self-supervised representations under transfer learning setting. We evaluate the features transferability on activity recognition task by pre-training networks with each auxiliary task for every dataset. For solving downstream tasks, we train a linear classifier on-top of the frozen feature extractor 10 times, independently, and report the average F-score. The diagonal entries denote the numbers when the source and target datasets are the same with the x-axis and y-axis representing target and source datasets, respectively.\n\nsource data results in an F-score of 0.68 and 0.78 compared to the training from scratch F-score of 0.61 and 0.73, respectively. Similarly, with HAPT as a target, transferring from the UCI HAR using the sensor blend task, the F-score improved from 0.59 to 0.68 and 0.72 to 0.78. Interestingly, on UCI HAR and MotionSense, the performance attained with our approach is very close to the purely supervised models trained with entirely labeled data (see Table 2). Learning generalizable representations that can be reused for solving related tasks is an important property to have in a learning system. Our investigation of transferring unsupervised pre-trained models consistently highlights substantial performance improvements, indicating that the selfsupervised features are broadly useful across different subjects, devices, environments and data collection protocols. In particular, the data efficiency enabled by our method in a low-data regime provides further evidence of semantic feature learning without merely over-fitting on the source dataset. It is also important to note that compared to earlier work which focuses on supervised transfer or joint-training on source and target datasets, we provide evaluation of unsupervised transfer and its ability to boost performance even with few-labeled data. Likewise, self-supervised learning has other benefits as it has been shown to improve adversarial robustness and uncertainty of deep models as compared to purely supervised methods [? ]. Although we did not study these aspects explicitly in this work, the results of transfer learning across domains hint that our auxiliary tasks also enhance the model's robustness; we leave an in-depth study for future work.\n\nCross-validation to determine robustness against subject variations. To validate the stability of our methodology against variations in subjects' data utilized for pre-training and downstream task evaluation, we perform 5-fold cross-validation based on user split (i.e. the train and test division (80 \u2212 20) is based on users with no overlap among them; train/test users are entirely independent); and we follow the same experimental setup as earlier. For each fold's data and surrogate task, we pre-train the models and train a linear classifier on top of the frozen network. The fully-supervised baseline is trained in an end-to-end manner, directly with the semantic labels. Table 4 summarizes the results averaged across 5 folds on eight considered datasets. We observe that the results achieved with self-supervision are consistent with earlier experiments. This highlights that our approach for sensory representation learning works well with different users' data and it is robust to subjects' differences. On the MobiAct dataset, the feature prediction and transformation recognition tasks achieve 0.90 F-score, which is very close to a fully-supervised model's F-score of 0.91. Likewise, on MIT DriverDb, self-supervision provides an impressive improvement over training from scratch. To summarize, these results suggest that the learned representations with unlabeled data learn useful features that can be used to a large extent for solving the end-task with a simple linear layer. Furthermore, we explore fine-tuning the last convolutional layer of the encoder while training a linear layer on downstream tasks. In Table 5, we show that fine-tuning a shared layer leads to a better performance than the fully-supervised model training from scratch on most of the datasets. The feature prediction task on the HHAR dataset achieved an F-score of 0.87, which is 5 points above the baseline. Likewise, on other datasets and tasks, our technique either bridges the gap or achieves broadly similar results as the supervised models. We think that careful finetuning of the architecture and related hyper-parameters could further improve the recognition rate of self-supervised networks. We note that a direct comparison of our approach with existing methods is not feasible as we learn representations from unlabeled data and evaluate through training a linear classifier, whereas, prior methods focus on fully-supervised learning with different architectures and evaluation strategies. However, to be comparative, we summarize related results here, which are only indicative. On MotionSense, our sensor blend task achieves an F-score of 0.92 compared to 0.95 and 0.86 accuracy for trial-and subject-wise evaluation in [30]. For SleepEDF, our fusion magnitude task scores a kappa of 0.72 compared to 0.76 of a sophisticated fully-supervised model [53]. Likewise, on WiFi sensing task, feature prediction proxy task results in an F-score of 0.85 compared to the 0.90 accuracy of an LSTM-based model [60] over six classes.\n\nWe wondered whether pre-training with our auxiliary tasks is invariant to utilized subjects' data, as it is critical for learning in a real-world setting due to the non-curated nature of the data. We found that proxy tasks are highly stable and result in a similar performance as earlier, when a linear classifier is trained on top of self-supervised feature extractors. This analysis further shows that the self-supervised features are not necessarily subject-specific, but are general in nature. Moreover, our evaluation demonstrates there is a room for improvement through selecting problemor task-specific network architectures and using larger unlabeled datasets for unsupervised learning. Specifically, it would be valuable to explore unifying supervised and self-supervised objectives in a multi-task setting to personalize or adapt sensing models directly on user devices.   5. Contribution of self-supervised learning, and fine-tuning of the transferred networks in learning from few-data. We utilize a pre-trained model on each source data and train a non-linear classifier on the target task to assess the effectiveness of self-supervision for improving the recognition rate. The networks are fine-tuned with a specified number of instances per class 10 times. For each source data, we provide mean results only of the best performing auxiliary task in order to improve readability. Table 4. Comparison of self-supervised representation learning to fully-supervised approach with 5-fold cross-validation based on user-split. We pre-train the feature extractors for each fold's data and learn a linear classifier for the end-task as usual. We report weighted F-score averaged over the 5 folds, highlighting the robustness of our method to subject variations. See Table 8 \n\n\nIMPACT AND LIMITATIONS\n\nOur Sense and Learn framework shows that it is possible to use unlabeled data, in addition to smaller amounts of labeled data, when learning features for varied classification problems. We believe our method is useful in practice, where obtaining labeled data is difficult and costly. Since the same approach, with a fixed neural network structure, provides gains for quite different application areas, ranging from activity recognition to sleep stage scoring, we also believe the method is applicable in practice. While it is true that a practitioner cannot be certain which self-supervised task will work best for a new application, the range of experiments we present should provide a valuable starting point as to which tasks are most promising. Moreover, our fine-tuning experiments (Table 3) show that e.g. the Transformations task provides significant gains across all datasets even when using all available supervised data. Finally, self-supervised tasks don't need any labels while learning the representations, which opens up the possibility of using our framework for on-device Federated Learning [4], where the sensor data never leaves the users' device (e.g., smartphone). Self-supervised learning provides a scalable, inexpensive, and data efficient way to learn highlevel features with deep neural networks without requiring strong labels, which could be unclear, noisy or limited for many real-world problems. However, there are limitations of these approaches which are also applicable to our methodology. First, deep neural networks are prone to learning Table 5. The effect of fine-tuning modality-agnostic encoder while learning downstream task under 5-folds cross-validation as evaluated through weighted F-score. See Table 9 in appendix A.2 for kappa scores. via shortcuts through exploiting low-level cues in the input e.g. object textures and other local artifacts in image classification [11]. The unintended cue learning is not limited to supervised methods, but is a problem for self-supervised methods too, as networks can use shortcuts to solve proxy task without learning anything useful (e.g. chromatic aberration in vision models [36]). For time-series or multisensor inputs discovering, a model relying on shortcuts is an unsolved problem and could be challenging to detect. Second, as getting access to large unlabeled and labeled sensory datasets is difficult, evaluating how auxiliary tasks will perform on non-curated data or learning in an open-world environment needs further exploration. Third and last, interpretability and understanding the decision mechanism of deep models is another open area of research to address issues of model uncertainty, bias and fairness. The features learned with deep network could be non-interpretable, but we think that unifying shallow models using hand-crafted features with deep networks consuming raw input through knowledge distillation [20] might shed light on the importance of certain features.\n\n\nMethod\n\n\nCONCLUSION AND FUTURE WORK\n\nWe proposed a self-supervised framework for multisensor representation learning from unlabeled data, produced by the omnipresent sensors. To realize the vision of unsupervised learning for sensing systems and IoT in general, we developed eight novel auxiliary tasks that acquire their supervision signal directly from the raw input, without any human involvement. The defined proxy objectives are utilized to learn general and effective deep models for a wide variety of problems. Through extensive evaluation on eight publicly available datasets from four application domains, we demonstrate that the self-supervised networks learn useful semantic representations that are competitive with fully-supervised models (i.e. trained end-to-end with labeled data). In summary, we demonstrated that the straight-forward and computationally-inexpensive surrogate tasks perform well on downstream tasks of interest by learning a linear classifier on top of frozen feature extractors. We further showed that fine-tuning a pre-trained modality-agnostic encoder further improved the detection rate of a network. As the key objective of leveraging unannotated data is to reduce the labeled data required for the end-tasks, we have also shown that our approach significantly improves the performance in the low-data regime. In particular, with as few as 5 to 10 labeled examples per class, the self-supervised initialized networks achieve an F-score between 0.70-0.80. Furthermore, we examined the effectiveness of learned representations in an unsupervised transfer setting with linear separability analysis and semi-supervised learning, achieving much better results than training from scratch. While in this work, we individually evaluate the quality of learned features for each auxiliary task, an interesting direction for future research is to jointly solve these problems in a multi-task setting, in order to learn more discriminative features. Likewise, an important area of investigation is to utilize the proposed tasks in a large-scale federated learning setting on distributed data. We believe this will truly highlight the potential of self-supervision for continual on-device (e.g., smartphones) learning and improving personalization. Finally, the general nature of our methodology offers the opportunity for leveraging self-supervision in other application areas, where labeled data accumulation is naturally difficult, such as arrhythmia detection.\n\n\nA APPENDIX\n\nA.   Table 8. Comparison of self-supervised representation learning to fully-supervised approach with 5-fold cross-validation based on user-split. See Section 4.3 for more details.\n\n\n, we present the results of optimal auxiliary tasks for each combination of the source to target transfer, where gray-colored bars show a fully-supervised baseline. Our experiments show that the features learned from different but related datasets do transfer well and improve the recognition rate even when as little as 5 examples per class are available. On the MobiAct dataset, our approach with HAPT as TL: triplet loss, OS: odd segment, MD: modality denoising, TS: temporal shift, TP: transformation prediction, FP: feature prediction, FM: fusion magnitude, SB: sensor blend, AE: autoencoder, FS: fully-supervised\n\nFig.\nFig. 3. Contribution of self-supervised pre-training for improving end-task performance with few labeled data. We utilize pre-trained self-supervised models as initialization for learning in a semi-supervised setting. The subplots provide the mean F-score of 10 independent runs, where randomly selected instances are used to train the models. The bars with gray color represent the results of the networks trained only on the labeled instances while vertical black line shows results of fully-supervised model trained with entire data.\n\n\nTL: triplet loss, OS: odd segment, MD: modality denoising, TS: temporal shift, TP: transformation prediction, FP: feature prediction, FM: fusion magnitude, SB: sensor blend, AE: autoencoder, FS: fully-supervised\n\nFig.\nFig. 5. Contribution of self-supervised learning, and fine-tuning of the transferred networks in learning from few-data. We utilize a pre-trained model on each source data and train a non-linear classifier on the target task to assess the effectiveness of self-supervision for improving the recognition rate. The networks are fine-tuned with a specified number of instances per class 10 times. For each source data, we provide mean results only of the best performing auxiliary task in order to improve readability.\n\nFig. 6 .\n6Class distribution of the datasets used in evaluation.\n\n\nFig. 2. A multistream neural network architecture for learning representations from multiple sensory inputs. A distinct stream (with an identical architecture) is used for each modality, as depicted on the right.Dense -512 \nGlobal Pooling \n\n1 x 4 Conv -128 \n\nConcatenate \n\nSoftmax or Linear \n\n1 x 24 Conv -32 Max Pooling \n\nDropout \nInput \n\nRaw sensory \nvalues \n\nLatent embeddings \n\nPretraining-specific layers \n\nDense -#Output \n\n1 x 4 Conv -64 \n\nDistinct modality-specific network \nfor each input modality \n\nMax Pooling \n\n1 x 16 Conv -64 \n1 x 8 Conv -96 \n\nEncoder network \n\nModality A \n\nModality B \n\nShared layers \n\n\n\n\nin appendix A.2 for kappa scores.Method \nHHAR \nMobiAct \nMotionSense UCI HAR \nFully Supervised \n0.794\u00b10.014 0.934\u00b10.005 \n0.952\u00b10.007 \n0.962\u00b10.006 \nRandom Init. \n0.218\u00b10.062 0.383\u00b10.109 \n0.246\u00b10.090 \n0.221\u00b10.079 \nAutoencoder \n0.777\u00b10.003 0.726\u00b10.001 \n0.675\u00b10.019 \n0.782\u00b10.042 \nSensor Blend \n0.823\u00b10.006 0.912\u00b10.001 \n0.911\u00b10.009 \n0.902\u00b10.010 \nFusion Magnitude 0.848\u00b10.005 0.905\u00b10.001 \n0.925\u00b10.011 0.895\u00b10.010 \nFeature Prediction 0.817\u00b10.005 0.902\u00b10.001 \n0.849\u00b10.010 \n0.899\u00b10.010 \nTransformations \n0.854\u00b10.005 0.911\u00b10.002 \n0.869\u00b10.013 \n0.906\u00b10.011 \nTemporal Shift \n0.834\u00b10.008 0.909\u00b10.003 \n0.851\u00b10.016 \n0.747\u00b10.027 \nModality Denoise. 0.807\u00b10.006 0.817\u00b10.004 \n0.675\u00b10.019 \n0.798\u00b10.035 \nOdd Segment \n0.835\u00b10.006 0.901\u00b10.001 \n0.869\u00b10.012 \n0.888\u00b10.010 \nTripet Loss \n0.773\u00b10.005 0.841\u00b10.002 \n0.910\u00b10.008 \n0.905\u00b10.011 \n\nMethod \nHAPT \nSleep-EDF MIT DriverDb WiFi CSI \nFully Supervised 0.899\u00b10.009 0.825\u00b10.005 \n0.824\u00b10.029 \n0.964\u00b10.007 \nRandom Init. \n0.119\u00b10.041 0.149\u00b10.127 \n0.321\u00b10.198 \n0.153\u00b10.04 \nAutoencoder \n0.669\u00b10.003 0.679\u00b10.012 \n0.876\u00b10.002 \n0.767\u00b10.005 \nSensor Blend \n0.818\u00b10.006 0.779\u00b10.004 \n0.890\u00b10.002 \n-\nFusion Magnitude 0.815\u00b10.004 0.782\u00b10.006 \n0.892\u00b10.004 \n-\nFeature Prediction 0.822\u00b10.002 0.671\u00b10.022 \n0.866\u00b10.000 \n0.837\u00b10.005 \nTransformations 0.841\u00b10.003 0.778\u00b10.006 \n0.908\u00b10.001 \n0.768\u00b10.007 \nTemporal Shift \n0.782\u00b10.004 0.707\u00b10.012 \n0.883\u00b10.005 \n0.731\u00b10.011 \nModality Denoise. 0.738\u00b10.002 0.784\u00b10.002 \n0.902\u00b10.001 \n-\nOdd Segment \n0.790\u00b10.003 0.772\u00b10.003 \n0.885\u00b10.002 \n0.774\u00b10.008 \nTripet Loss \n0.815\u00b10.002 0.775\u00b10.003 \n0.891\u00b10.001 \n0.749\u00b10.009 \n\n\n\n\nin appendix A.2 for kappa scores.Method \nHHAR \nMobiAct \nMotionSense UCI HAR \nFully Supervised 0.844\u00b10.090 0.917\u00b10.017 \n0.960\u00b10.007 \n0.951\u00b10.025 \nRandom Init. \n0.199\u00b10.047 0.394\u00b10.086 \n0.284\u00b10.086 \n0.268\u00b10.208 \nAutoencoder \n0.722\u00b10.085 0.736\u00b10.021 \n0.752\u00b10.050 \n0.831\u00b10.041 \nSensor Blend \n0.829\u00b10.061 0.886\u00b10.010 \n0.920\u00b10.019 \n0.915\u00b10.038 \nFusion Magnitude 0.841\u00b10.040 0.889\u00b10.014 \n0.924\u00b10.025 \n0.899\u00b10.049 \nFeature Prediction 0.820\u00b10.068 0.900\u00b10.016 \n0.900\u00b10.025 \n0.896\u00b10.043 \nTransformations 0.822\u00b10.059 0.900\u00b10.011 \n0.898\u00b10.013 \n0.916\u00b10.018 \nTemporal Shift \n0.811\u00b10.057 0.890\u00b10.017 \n0.889\u00b10.027 \n0.793\u00b10.030 \nModality Denoise. 0.798\u00b10.077 0.834\u00b10.029 \n0.780\u00b10.058 \n0.829\u00b10.056 \nOdd Segment \n0.812\u00b10.079 0.890\u00b10.015 \n0.901\u00b10.014 \n0.861\u00b10.015 \nTripet Loss \n0.749\u00b10.065 0.822\u00b10.013 \n0.917\u00b10.022 \n0.893\u00b10.036 \n\nMethod \nHAPT \nSleep-EDF MIT DriverDb WiFi CSI \nFully Supervised 0.897\u00b10.053 0.822\u00b10.025 \n0.789\u00b10.122 \n0.959\u00b10.005 \nRandom Init. \n0.155\u00b10.061 0.072\u00b10.021 \n0.206\u00b10.015 \n0.214\u00b10.044 \nAutoencoder \n0.818\u00b10.064 0.701\u00b10.026 \n0.850\u00b10.054 \n0.793\u00b10.014 \nSensor Blend \n0.855\u00b10.044 0.788\u00b10.014 \n0.824\u00b10.106 \n-\nFusion Magnitude 0.840\u00b10.040 0.795\u00b10.025 \n0.859\u00b10.061 \n-\nFeature Prediction 0.859\u00b10.040 0.777\u00b10.033 \n0.843\u00b10.045 \n0.855\u00b10.024 \nTransformations 0.863\u00b10.045 0.788\u00b10.028 \n0.860\u00b10.060 \n0.770\u00b10.032 \nTemporal Shift \n0.837\u00b10.042 0.753\u00b10.027 \n0.844\u00b10.082 \n0.729\u00b10.015 \nModality Denoise. 0.835\u00b10.050 0.797\u00b10.029 \n0.864\u00b10.061 \n-\nOdd Segment \n0.821\u00b10.043 0.767\u00b10.037 \n0.839\u00b10.071 \n0.793\u00b10.018 \nTripet Loss \n0.845\u00b10.044 0.789\u00b10.027 \n0.860\u00b10.059 \n0.769\u00b10.022 \n\n\n\n\nFusion Magnitude 0.884\u00b10.051 0.808\u00b10.023 0.788\u00b10.148 -Feature Prediction 0.893\u00b10.055 0.794\u00b10.031 0.795\u00b10.143 0.857\u00b10.040 Transformations 0.896\u00b10.051 0.801\u00b10.029HHAR \nMobiAct \nMotionSense UCI HAR \nFully Supervised 0.844\u00b10.090 0.917\u00b10.017 \n0.960\u00b10.007 \n0.951\u00b10.025 \nRandom Init. \n0.199\u00b10.047 0.394\u00b10.086 \n0.284\u00b10.086 \n0.268\u00b10.208 \nAutoencoder \n0.891\u00b10.049 0.914\u00b10.019 \n0.961\u00b10.010 \n0.936\u00b10.051 \nSensor Blend \n0.893\u00b10.062 0.919\u00b10.011 \n0.964\u00b10.011 \n0.949\u00b10.036 \nFusion Magnitude 0.885\u00b10.054 0.918\u00b10.011 \n0.961\u00b10.013 \n0.942\u00b10.039 \nFeature Prediction 0.894\u00b10.050 0.930\u00b10.014 \n0.962\u00b10.003 \n0.943\u00b10.047 \nTransformations 0.893\u00b10.052 0.933\u00b10.0126 \n0.968\u00b10.007 \n0.949\u00b10.033 \nTemporal Shift \n0.885\u00b10.055 0.920\u00b10.014 \n0.941\u00b10.012 \n0.915\u00b10.050 \nModality Denoise. 0.886\u00b10.061 0.929\u00b10.015 \n0.966\u00b10.011 \n0.933\u00b10.054 \nOdd Segment \n0.894\u00b10.067 0.927\u00b10.011 \n0.962\u00b10.004 \n0.951\u00b10.030 \nTripet Loss \n0.856\u00b10.055 0.904\u00b10.020 \n0.957\u00b10.006 \n0.944\u00b10.044 \n\nMethod \nHAPT \nSleep-EDF MIT DriverDb WiFi CSI \nFully Supervised 0.897\u00b10.053 0.822\u00b10.025 \n0.789\u00b10.122 \n0.959\u00b10.005 \nRandom Init. \n0.155\u00b10.061 0.072\u00b10.021 \n0.206\u00b10.015 \n0.214\u00b10.044 \nAutoencoder \n0.883\u00b10.059 0.764\u00b10.028 \n0.804\u00b10.132 \n0.911\u00b10.032 \nSensor Blend \n0.892\u00b10.052 0.801\u00b10.020 \n0.793\u00b10.149 \n-\n0.806\u00b10.127 \n0.805\u00b10.051 \nTemporal Shift \n0.890\u00b10.052 0.781\u00b10.027 \n0.805\u00b10.133 \n0.758\u00b10.048 \nModality Denoise. 0.882\u00b10.051 0.796\u00b10.028 \n0.858\u00b10.051 \n-\nOdd Segment \n0.888\u00b10.048 0.778\u00b10.035 \n0.849\u00b10.050 \n0.854\u00b10.032 \nTripet Loss \n0.888\u00b10.056 0.792\u00b10.031 \n0.806\u00b10.128 \n0.765\u00b10.022 \n\n\n\n\n1 Class DistributionStand \n16.8% \n\nSit \n\n18.4% \nWalk 19.6% \n\nStairs down \n\n13.9% \n\nStairs_up \n\n15.6% \nBike \n\n15.8% \n\nHHAR \n\n(a) HHAR \n\nSIT \n7.6% \n\nCHU \n0.3% \n\nSTD \n\n31.1% \nCSI \n\n2.1% \nCSO \n2.2% \nJOG \n7.7% \n\nJUM \n7.5% \n\nWAK \n\n32.1% \nSTU \n\n4.3% \nSCH \n1.2% \nSTN \n4.0% \n\nMobiAct \n\n(b) MobiAct \n\nStairs down \n16.8% \n\nJogging \n\n18.4% \nSitting 19.6% \n\nStanding \n\n13.9% \n\nStairs up \n\n15.6% \nWalking \n15.8% \n\nMotionSense \n\n(c) MotionSense \n\nWalking \n16.9% \n\nStairs up \n\n13.0% \n\nStairs down \n\n10.3% \n\nSitting 18.6% \n\nStanding \n\n20.6% \nLaying \n\n20.6% \n\nUCI HAR \n\n(d) UCI HAR \n\nWake \n\n19.6% \n\nN1 \n\n6.6% \n\nN2 \n42.1% \n\nN3 \n\n13.5% \nREM \n\n18.2% \n\nSleep-EDF \n\n(e) Sleep-EDF \n\nNo Stress \n\n36.8% \n\nStress \n\n63.2% \n\nMIT DriverDb \n\n(f) MIT DriverDb \n\nOn Bed \n13.2% \n\nFall \n\n8.9% \n\nPick Up \n\n29.5% \n\nRun \n10.0% \n\nSit down \n\n24.3% \nStand up \n\n8.0% \nWalk \n6.1% \n\nWiFi CSI \n\n(g) WiFi CSI \n\nWalking \n15.3% \n\nUpstairs \n\n13.6% \n\nDownstairs \n\n12.9% \n\nSitting \n15.9% \n\nStanding \n\n17.0% \n\nLaying \n\n17.1% \nStand to sit \n\n1.3% \nSit to stand \n\n0.9% \nSit to lie \n1.5% \nLie to sit \n1.4% \nStand to lie \n1.8% \nLie to stand \n1.3% \n\nHAPT \n\n(h) HAPT \n\n\ndownstream or end tasks referred to the tasks of interest e.g., sleep stage scoring.\ni.e. leveraging representations from intermediate layers of the deep neural network 3 or in a semi-supervised setting\nversion 1\nACKNOWLEDGEMENTSThe authors would like to thank F\u00e9lix de Chaumont Quitry, Marco Tagliasacchi and Richard F. Lyon for their valuable feedback and help with this work. Various icons used in the figure are created by Sriramteja SRT, Berkah Icon, Ben Davis, Eucalyp, ibrandify, Clockwise, Aenne Brielmann, Anuar Zhumaev, and Tim Madle from the Noun Project.A.2Supplementary results with Cohen's kappa score\nA public domain dataset for human activity recognition using smartphones. D Anguita, A Ghio, L Oneto, X Parra, J L Reyes-Ortiz, EsannAnguita, D., Ghio, A., Oneto, L., Parra, X., Reyes-Ortiz, J.L., 2013. A public domain dataset for human activity recognition using smartphones., in: Esann.\n\nAn empirical evaluation of generic convolutional and recurrent networks for sequence modeling. S Bai, J Z Kolter, V Koltun, arXiv:1803.01271arXiv preprintBai, S., Kolter, J.Z., Koltun, V., 2018. An empirical evaluation of generic convolutional and recurrent networks for sequence modeling. arXiv preprint arXiv:1803.01271 .\n\nUsing unlabeled data in a sparse-coding framework for human activity recognition. S Bhattacharya, P Nurmi, N Hammerla, T Pl\u00f6tz, Pervasive and Mobile Computing. 15Bhattacharya, S., Nurmi, P., Hammerla, N., Pl\u00f6tz, T., 2014. Using unlabeled data in a sparse-coding framework for human activity recognition. Pervasive and Mobile Computing 15, 242-262.\n\nK Bonawitz, H Eichner, W Grieskamp, D Huba, A Ingerman, V Ivanov, C Kiddon, J Konecny, S Mazzocchi, H B Mcmahan, arXiv:1902.01046Towards federated learning at scale: System design. arXiv preprintBonawitz, K., Eichner, H., Grieskamp, W., Huba, D., Ingerman, A., Ivanov, V., Kiddon, C., Konecny, J., Mazzocchi, S., McMahan, H.B., et al., 2019. Towards federated learning at scale: System design. arXiv preprint arXiv:1902.01046 .\n\nCross-position activity recognition with stratified transfer learning. Y Chen, J Wang, M Huang, H Yu, Pervasive and Mobile Computing. 57Chen, Y., Wang, J., Huang, M., Yu, H., 2019. Cross-position activity recognition with stratified transfer learning. Pervasive and Mobile Computing 57, 1-13.\n\nTime-series change point detection with self-supervised contrastive predictive coding. S Deldari, D V Smith, H Xue, F D Salim, arXiv:2011.14097arXiv preprintDeldari, S., Smith, D.V., Xue, H., Salim, F.D., 2020. Time-series change point detection with self-supervised contrastive predictive coding. arXiv preprint arXiv:2011.14097 .\n\nBert: Pre-training of deep bidirectional transformers for language understanding. J Devlin, M W Chang, K Lee, K Toutanova, arXiv:1810.04805arXiv preprintDevlin, J., Chang, M.W., Lee, K., Toutanova, K., 2018. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805 .\n\nUnsupervised visual representation learning by context prediction. C Doersch, A Gupta, A A Efros, Proceedings of the IEEE International Conference on Computer Vision. the IEEE International Conference on Computer VisionDoersch, C., Gupta, A., Efros, A.A., 2015. Unsupervised visual representation learning by context prediction, in: Proceedings of the IEEE International Conference on Computer Vision, pp. 1422-1430.\n\nReal-valued (medical) time series generation with recurrent conditional gans. C Esteban, S L Hyland, G R\u00e4tsch, arXiv:1706.02633arXiv preprintEsteban, C., Hyland, S.L., R\u00e4tsch, G., 2017. Real-valued (medical) time series generation with recurrent conditional gans. arXiv preprint arXiv:1706.02633 .\n\nOn the personalization of classification models for human activity recognition. A Ferrari, D Micucci, M Mobilio, P Napoletano, 10.1109/ACCESS.2020.2973425IEEE Access. 8Ferrari, A., Micucci, D., Mobilio, M., Napoletano, P., 2020. On the personalization of classification models for human activity recognition. IEEE Access 8, 32066-32079. doi:10.1109/ACCESS.2020.2973425.\n\nR Geirhos, J H Jacobsen, C Michaelis, R Zemel, W Brendel, M Bethge, F A Wichmann, arXiv:2004.07780Shortcut learning in deep neural networks. arXiv preprintGeirhos, R., Jacobsen, J.H., Michaelis, C., Zemel, R., Brendel, W., Bethge, M., Wichmann, F.A., 2020. Shortcut learning in deep neural networks. arXiv preprint arXiv:2004.07780 .\n\nUnsupervised representation learning by predicting image rotations. S Gidaris, P Singh, N Komodakis, arXiv:1803.07728arXiv preprintGidaris, S., Singh, P., Komodakis, N., 2018. Unsupervised representation learning by predicting image rotations. arXiv preprint arXiv:1803.07728 .\n\nCross-dataset deep transfer learning for activity recognition. M Gjoreski, S Kalabakov, M Lu\u0161trek, M Gams, H Gjoreski, Adjunct Proceedings of the 2019 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2019 ACM International Symposium on Wearable Computers. Gjoreski, M., Kalabakov, S., Lu\u0161trek, M., Gams, M., Gjoreski, H., 2019. Cross-dataset deep transfer learning for activity recognition, in: Adjunct Proceedings of the 2019 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2019 ACM International Symposium on Wearable Computers, pp. 714-718.\n\nPhysiobank, physiotoolkit, and physionet: components of a new research resource for complex physiologic signals. A L Goldberger, L A Amaral, L Glass, J M Hausdorff, P C Ivanov, R G Mark, J E Mietus, G B Moody, C K Peng, H E Stanley, Circulation. 101Goldberger, A.L., Amaral, L.A., Glass, L., Hausdorff, J.M., Ivanov, P.C., Mark, R.G., Mietus, J.E., Moody, G.B., Peng, C.K., Stanley, H.E., 2000. Physiobank, physiotoolkit, and physionet: components of a new research resource for complex physiologic signals. Circulation 101, e215-e220.\n\nEfficient sleep stage recognition system based on eeg signal using k-means clustering based feature weighting. S G\u00fcne\u015f, K Polat, \u015e Yosunkaya, Expert Systems with Applications. 37G\u00fcne\u015f, S., Polat, K., Yosunkaya, \u015e., 2010. Efficient sleep stage recognition system based on eeg signal using k-means clustering based feature weighting. Expert Systems with Applications 37, 7922-7928.\n\nDeep, convolutional, and recurrent models for human activity recognition using wearables. N Y Hammerla, S Halloran, T Pl\u00f6tz, arXiv:1604.08880arXiv preprintHammerla, N.Y., Halloran, S., Pl\u00f6tz, T., 2016. Deep, convolutional, and recurrent models for human activity recognition using wearables. arXiv preprint arXiv:1604.08880 .\n\nCardiologist-level arrhythmia detection and classification in ambulatory electrocardiograms using a deep neural network. A Y Hannun, P Rajpurkar, M Haghpanahi, G H Tison, C Bourn, M P Turakhia, A Y Ng, Nature medicine. 2565Hannun, A.Y., Rajpurkar, P., Haghpanahi, M., Tison, G.H., Bourn, C., Turakhia, M.P., Ng, A.Y., 2019. Cardiologist-level arrhythmia detection and classification in ambulatory electrocardiograms using a deep neural network. Nature medicine 25, 65.\n\nDetecting stress during real-world driving tasks using physiological sensors. J A Healey, R W Picard, IEEE Transactions on intelligent transportation systems. 6Healey, J.A., Picard, R.W., 2005. Detecting stress during real-world driving tasks using physiological sensors. IEEE Transactions on intelligent transportation systems 6, 156-166.\n\nTime series segmentation for context recognition in mobile devices. J Himberg, K Korpiaho, H Mannila, J Tikanmaki, H T Toivonen, Proceedings 2001 IEEE International Conference on Data Mining. 2001 IEEE International Conference on Data MiningIEEEHimberg, J., Korpiaho, K., Mannila, H., Tikanmaki, J., Toivonen, H.T., . Time series segmentation for context recognition in mobile devices, in: Proceedings 2001 IEEE International Conference on Data Mining, IEEE. pp. 203-210.\n\nG Hinton, O Vinyals, J Dean, arXiv:1503.02531Distilling the knowledge in a neural network. arXiv preprintHinton, G., Vinyals, O., Dean, J., 2015. Distilling the knowledge in a neural network. arXiv preprint arXiv:1503.02531 .\n\nUnsupervised feature extraction by time-contrastive learning and nonlinear ica. A Hyvarinen, H Morioka, Advances in Neural Information Processing Systems. Hyvarinen, A., Morioka, H., 2016. Unsupervised feature extraction by time-contrastive learning and nonlinear ica, in: Advances in Neural Information Processing Systems, pp. 3765-3773.\n\nAnalysis of a sleep-dependent neuronal feedback loop: the slow-wave microcontinuity of the eeg. B Kemp, A H Zwinderman, B Tuk, H A Kamphuisen, J J Oberye, IEEE Transactions on Biomedical Engineering. 47Kemp, B., Zwinderman, A.H., Tuk, B., Kamphuisen, H.A., Oberye, J.J., 2000. Analysis of a sleep-dependent neuronal feedback loop: the slow-wave microcontinuity of the eeg. IEEE Transactions on Biomedical Engineering 47, 1185-1194.\n\nAdam: A method for stochastic optimization. D P Kingma, J Ba, arXiv:1412.6980arXiv preprintKingma, D.P., Ba, J., 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 .\n\nCooperative learning of audio and video models from self-supervised synchronization. B Korbar, D Tran, L Torresani, Advances in Neural Information Processing Systems. Korbar, B., Tran, D., Torresani, L., 2018. Cooperative learning of audio and video models from self-supervised synchronization, in: Advances in Neural Information Processing Systems, pp. 7763-7774.\n\nLearning machines and sleeping brains: automatic sleep stage classification using decision-tree multi-class support vector machines. T Lajnef, S Chaibi, P Ruby, P E Aguera, J B Eichenlaub, M Samet, A Kachouri, K Jerbi, Journal of neuroscience methods. 250Lajnef, T., Chaibi, S., Ruby, P., Aguera, P.E., Eichenlaub, J.B., Samet, M., Kachouri, A., Jerbi, K., 2015. Learning machines and sleeping brains: automatic sleep stage classification using decision-tree multi-class support vector machines. Journal of neuroscience methods 250, 94-105.\n\nLearning representations for automatic colorization. G Larsson, M Maire, G Shakhnarovich, European Conference on Computer Vision. SpringerLarsson, G., Maire, M., Shakhnarovich, G., 2016. Learning representations for automatic colorization, in: European Conference on Computer Vision, Springer. pp. 577-593.\n\nUnsupervised feature learning for human activity recognition using smartphone sensors, in: Mining intelligence and knowledge exploration. Y Li, D Shi, B Ding, D Liu, SpringerLi, Y., Shi, D., Ding, B., Liu, D., 2014. Unsupervised feature learning for human activity recognition using smartphone sensors, in: Mining intelligence and knowledge exploration. Springer, pp. 99-107.\n\nMultivariate time series imputation with generative adversarial networks. Y Luo, X Cai, Y Zhang, J Xu, Advances in Neural Information Processing Systems. Luo, Y., Cai, X., Zhang, Y., Xu, J., et al., 2018. Multivariate time series imputation with generative adversarial networks, in: Advances in Neural Information Processing Systems, pp. 1596-1607.\n\nConv-tasnet: Surpassing ideal time-frequency magnitude masking for speech separation. Y Luo, N Mesgarani, IEEE/ACM Trans. Audio, Speech and Lang. Proc. 27Luo, Y., Mesgarani, N., 2019. Conv-tasnet: Surpassing ideal time-frequency magnitude masking for speech separation. IEEE/ACM Trans. Audio, Speech and Lang. Proc. 27, 1256-1266.\n\nProtecting sensory data against sensitive inferences. M Malekzadeh, R G Clegg, A Cavallaro, H Haddadi, Proceedings of the 1st Workshop on Privacy by Design in Distributed Systems. the 1st Workshop on Privacy by Design in Distributed Systems2Malekzadeh, M., Clegg, R.G., Cavallaro, A., Haddadi, H., 2018. Protecting sensory data against sensitive inferences, in: Proceedings of the 1st Workshop on Privacy by Design in Distributed Systems, ACM. p. 2.\n\nLearning deep physiological models of affect. H P Martinez, Y Bengio, G N Yannakakis, IEEE Computational intelligence magazine. 8Martinez, H.P., Bengio, Y., Yannakakis, G.N., 2013. Learning deep physiological models of affect. IEEE Computational intelligence magazine 8, 20-33.\n\nIncremental real-time personalization in human activity recognition using domain adaptive batch normalization. A Mazankiewicz, K B\u00f6hm, M Berg\u00e9s, Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies. the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies4Mazankiewicz, A., B\u00f6hm, K., Berg\u00e9s, M., 2020. Incremental real-time personalization in human activity recognition using domain adaptive batch normalization. Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies 4, 1-20.\n\nCommunication-efficient learning of deep networks from decentralized data. B Mcmahan, E Moore, D Ramage, S Hampson, B A Arcas, PMLRArtificial Intelligence and Statistics. McMahan, B., Moore, E., Ramage, D., Hampson, S., y Arcas, B.A., 2017. Communication-efficient learning of deep networks from decentralized data, in: Artificial Intelligence and Statistics, PMLR. pp. 1273-1282.\n\nDistributed representations of words and phrases and their compositionality. T Mikolov, I Sutskever, K Chen, G S Corrado, J Dean, Advances in neural information processing systems. Mikolov, T., Sutskever, I., Chen, K., Corrado, G.S., Dean, J., 2013. Distributed representations of words and phrases and their compositionality, in: Advances in neural information processing systems, pp. 3111-3119.\n\nPruning convolutional neural networks for resource efficient inference. P Molchanov, S Tyree, T Karras, T Aila, J Kautz, arXiv:1611.06440arXiv preprintMolchanov, P., Tyree, S., Karras, T., Aila, T., Kautz, J., 2016. Pruning convolutional neural networks for resource efficient inference. arXiv preprint arXiv:1611.06440 .\n\nImprovements to context based self-supervised learning. Nathan Mundhenk, T Ho, D Chen, B Y , Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. the IEEE Conference on Computer Vision and Pattern RecognitionNathan Mundhenk, T., Ho, D., Chen, B.Y., 2018. Improvements to context based self-supervised learning, in: Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 9339-9348.\n\nUnsupervised learning of visual representations by solving jigsaw puzzles. M Noroozi, P Favaro, European Conference on Computer Vision. SpringerNoroozi, M., Favaro, P., 2016. Unsupervised learning of visual representations by solving jigsaw puzzles, in: European Conference on Computer Vision, Springer. pp. 69-84.\n\nA Oord, Y Li, O Vinyals, arXiv:1807.03748Representation learning with contrastive predictive coding. arXiv preprintOord, A.v.d., Li, Y., Vinyals, O., 2018. Representation learning with contrastive predictive coding. arXiv preprint arXiv:1807.03748 .\n\nToward machine emotional intelligence: Analysis of affective physiological state. R W Picard, E Vyzas, J Healey, IEEE Transactions on Pattern Analysis & Machine Intelligence. Picard, R.W., Vyzas, E., Healey, J., 2001. Toward machine emotional intelligence: Analysis of affective physiological state. IEEE Transactions on Pattern Analysis & Machine Intelligence , 1175-1191.\n\nFeature learning for activity recognition in ubiquitous computing. T Pl\u00f6tz, N Y Hammerla, P L Olivier, Twenty-second international joint conference on artificial intelligence. Pl\u00f6tz, T., Hammerla, N.Y., Olivier, P.L., 2011. Feature learning for activity recognition in ubiquitous computing, in: Twenty-second international joint conference on artificial intelligence.\n\nMultimodal deep learning for activity and context recognition. V Radu, C Tong, S Bhattacharya, N D Lane, C Mascolo, M K Marina, F Kawsar, Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies. 1Radu, V., Tong, C., Bhattacharya, S., Lane, N.D., Mascolo, C., Marina, M.K., Kawsar, F., 2018. Multimodal deep learning for activity and context recognition. Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies 1, 1-27.\n\nFaster r-cnn: Towards real-time object detection with region proposal networks. S Ren, K He, R Girshick, J Sun, Advances in neural information processing systems. Ren, S., He, K., Girshick, R., Sun, J., 2015. Faster r-cnn: Towards real-time object detection with region proposal networks, in: Advances in neural information processing systems, pp. 91-99.\n\nTransition-aware human activity recognition using smartphones. J L Reyes-Ortiz, L Oneto, A Sam\u00e0, X Parra, D Anguita, Neurocomputing. 171Reyes-Ortiz, J.L., Oneto, L., Sam\u00e0, A., Parra, X., Anguita, D., 2016. Transition-aware human activity recognition using smartphones. Neurocomputing 171, 754-767.\n\nLearning classification with unlabeled data. V R De Sa, Advances in neural information processing systems. de Sa, V.R., 1994. Learning classification with unlabeled data, in: Advances in neural information processing systems, pp. 112-119.\n\nMulti-task self-supervised learning for human activity detection. A Saeed, T Ozcelebi, J Lukkien, Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies. the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies361Saeed, A., Ozcelebi, T., Lukkien, J., 2019. Multi-task self-supervised learning for human activity detection. Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies 3, 61.\n\nModel adaptation and personalization for physiological stress detection. A Saeed, T Ozcelebi, J Lukkien, J Van Erp, S Trajanovski, 2018 IEEE 5th International Conference on Data Science and Advanced Analytics (DSAA). IEEESaeed, A., Ozcelebi, T., Lukkien, J., van Erp, J., Trajanovski, S., 2018. Model adaptation and personalization for physiological stress detection, in: 2018 IEEE 5th International Conference on Data Science and Advanced Analytics (DSAA), IEEE. pp. 209-216.\n\nPersonalized driver stress detection with multi-task neural networks using physiological signals. A Saeed, S Trajanovski, arXiv:1711.06116arXiv preprintSaeed, A., Trajanovski, S., 2017. Personalized driver stress detection with multi-task neural networks using physiological signals. arXiv preprint arXiv:1711.06116 .\n\nSelf-supervised ecg representation learning for emotion recognition. P Sarkar, A Etemad, IEEE Transactions on Affective Computing. Sarkar, P., Etemad, A., 2020. Self-supervised ecg representation learning for emotion recognition. IEEE Transactions on Affective Computing .\n\nMaking the world differentiable: On using self-supervised fully recurrent neural networks for dynamic reinforcement learning and planning in non-stationary environments. J Schmidhuber, Schmidhuber, J., 1990. Making the world differentiable: On using self-supervised fully recurrent neural networks for dynamic reinforcement learning and planning in non-stationary environments .\n\nTime-contrastive networks: Self-supervised learning from video. P Sermanet, C Lynch, Y Chebotar, J Hsu, E Jang, S Schaal, S Levine, Proceedings of International Conference in Robotics and Automation (ICRA). International Conference in Robotics and Automation (ICRA)Sermanet, P., Lynch, C., Chebotar, Y., Hsu, J., Jang, E., Schaal, S., Levine, S., . Time-contrastive networks: Self-supervised learning from video. Proceedings of International Conference in Robotics and Automation (ICRA) .\n\nMastering the game of go without human knowledge. D Silver, J Schrittwieser, K Simonyan, I Antonoglou, A Huang, A Guez, T Hubert, L Baker, M Lai, A Bolton, Nature. 550354Silver, D., Schrittwieser, J., Simonyan, K., Antonoglou, I., Huang, A., Guez, A., Hubert, T., Baker, L., Lai, M., Bolton, A., et al., 2017. Mastering the game of go without human knowledge. Nature 550, 354.\n\nSmart devices are different: Assessing and mitigatingmobile sensing heterogeneities for activity recognition. A Stisen, H Blunck, S Bhattacharya, T S Prentow, M B Kjaergaard, A Dey, T Sonne, M M Jensen, Proceedings of the 13th ACM Conference on Embedded Networked Sensor Systems, ACM. the 13th ACM Conference on Embedded Networked Sensor Systems, ACMStisen, A., Blunck, H., Bhattacharya, S., Prentow, T.S., Kjaergaard, M.B., Dey, A., Sonne, T., Jensen, M.M., 2015. Smart devices are different: Assessing and mitigatingmobile sensing heterogeneities for activity recognition, in: Proceedings of the 13th ACM Conference on Embedded Networked Sensor Systems, ACM. pp. 127-140.\n\nDeepsleepnet: A model for automatic sleep stage scoring based on raw single-channel eeg. A Supratak, H Dong, C Wu, Y Guo, IEEE Transactions on Neural Systems and Rehabilitation Engineering. 25Supratak, A., Dong, H., Wu, C., Guo, Y., 2017. Deepsleepnet: A model for automatic sleep stage scoring based on raw single-channel eeg. IEEE Transactions on Neural Systems and Rehabilitation Engineering 25, 1998-2008.\n\nSelf-supervised audio representation learning for mobile devices. M Tagliasacchi, B Gfeller, F De Chaumont Quitry, D Roblek, arXiv:1905.11796arXiv preprintTagliasacchi, M., Gfeller, B., de Chaumont Quitry, F., Roblek, D., 2019. Self-supervised audio representation learning for mobile devices. arXiv preprint arXiv:1905.11796 .\n\nImproving generalization and stability of generative adversarial networks. H Thanh-Tung, T Tran, S Venkatesh, arXiv:1902.03984arXiv preprintThanh-Tung, H., Tran, T., Venkatesh, S., 2019. Improving generalization and stability of generative adversarial networks. arXiv preprint arXiv:1902.03984 .\n\nY Tian, D Krishnan, P Isola, arXiv:1906.05849Contrastive multiview coding. arXiv preprintTian, Y., Krishnan, D., Isola, P., 2019. Contrastive multiview coding. arXiv preprint arXiv:1906.05849 .\n\nThe mobifall dataset: Fall detection and classification with a smartphone. G Vavoulas, M Pediaditis, C Chatzaki, E G Spanakis, M Tsiknakis, 2Vavoulas, G., Pediaditis, M., Chatzaki, C., Spanakis, E.G., Tsiknakis, M., 2014. The mobifall dataset: Fall detection and classification with a smartphone. IJMSTR 2, 44-56.\n\nStacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion. P Vincent, H Larochelle, I Lajoie, Y Bengio, P A Manzagol, L Bottou, Journal of machine learning research. 11Vincent, P., Larochelle, H., Lajoie, I., Bengio, Y., Manzagol, P.A., Bottou, L., 2010. Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion. Journal of machine learning research 11.\n\nSensegan: Enabling deep learning for internet of things with a semi-supervised framework. S Yao, Y Zhao, H Shao, C Zhang, A Zhang, S Hu, D Liu, S Liu, L Su, T Abdelzaher, Proceedings of the ACM on interactive, mobile, wearable and ubiquitous technologies. the ACM on interactive, mobile, wearable and ubiquitous technologies2Yao, S., Zhao, Y., Shao, H., Zhang, C., Zhang, A., Hu, S., Liu, D., Liu, S., Su, L., Abdelzaher, T., 2018. Sensegan: Enabling deep learning for internet of things with a semi-supervised framework. Proceedings of the ACM on interactive, mobile, wearable and ubiquitous technologies 2, 1-21.\n\nA survey on behavior recognition using wifi channel state information. S Yousefi, H Narui, S Dayal, S Ermon, S Valaee, IEEE Communications Magazine. 55Yousefi, S., Narui, H., Dayal, S., Ermon, S., Valaee, S., 2017. A survey on behavior recognition using wifi channel state information. IEEE Communications Magazine 55, 98-104.\n\nWavesplit: End-to-end speech separation by speaker clustering. N Zeghidour, D Grangier, arXiv:2002.08933arXiv preprintZeghidour, N., Grangier, D., 2020. Wavesplit: End-to-end speech separation by speaker clustering. arXiv preprint arXiv:2002.08933 .\n\nS4l: Self-supervised semi-supervised learning. X Zhai, A Oliver, A Kolesnikov, L Beyer, arXiv:1905.03670arXiv preprintZhai, X., Oliver, A., Kolesnikov, A., Beyer, L., 2019. S4l: Self-supervised semi-supervised learning. arXiv preprint arXiv:1905.03670 .\n\nH Zhang, M Cisse, Y N Dauphin, D Lopez-Paz, arXiv:1710.09412mixup: Beyond empirical risk minimization. arXiv preprintZhang, H., Cisse, M., Dauphin, Y.N., Lopez-Paz, D., 2017. mixup: Beyond empirical risk minimization. arXiv preprint arXiv:1710.09412 .\n\nColorful image colorization. R Zhang, P Isola, A A Efros, SpringerZhang, R., Isola, P., Efros, A.A., 2016a. Colorful image colorization, in: European conference on computer vision, Springer. pp. 649-666.\n\nTracking persons-of-interest via adaptive discriminative features. S Zhang, Y Gong, J B Huang, J Lim, J Wang, N Ahuja, M H Yang, SpringerZhang, S., Gong, Y., Huang, J.B., Lim, J., Wang, J., Ahuja, N., Yang, M.H., 2016b. Tracking persons-of-interest via adaptive discriminative features, in: European conference on computer vision, Springer. pp. 415-433.\n", "annotations": {"author": "[{\"end\":212,\"start\":61}]", "publisher": null, "author_last_name": "[{\"end\":72,\"start\":67}]", "author_first_name": "[{\"end\":66,\"start\":61}]", "author_affiliation": "[{\"end\":169,\"start\":74},{\"end\":211,\"start\":171}]", "title": "[{\"end\":58,\"start\":1},{\"end\":270,\"start\":213}]", "venue": null, "abstract": "[{\"end\":2274,\"start\":431}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b41\"},\"end\":2506,\"start\":2502},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":2529,\"start\":2525},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2556,\"start\":2553},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":2897,\"start\":2893},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":2900,\"start\":2897},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":2903,\"start\":2900},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":2906,\"start\":2903},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":2909,\"start\":2906},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":4033,\"start\":4030},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":4036,\"start\":4033},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4039,\"start\":4036},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":4042,\"start\":4039},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":4131,\"start\":4127},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":4271,\"start\":4267},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":4438,\"start\":4434},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":4952,\"start\":4949},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4955,\"start\":4952},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":6222,\"start\":6218},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":6225,\"start\":6222},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":6419,\"start\":6415},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6815,\"start\":6812},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":6818,\"start\":6815},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":6821,\"start\":6818},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":7175,\"start\":7172},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":7233,\"start\":7229},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":7281,\"start\":7277},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":7471,\"start\":7467},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":7618,\"start\":7614},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":7621,\"start\":7618},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":7677,\"start\":7673},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8117,\"start\":8114},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":8265,\"start\":8261},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":11330,\"start\":11326},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":11333,\"start\":11330},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":14521,\"start\":14517},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":14524,\"start\":14521},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":14527,\"start\":14524},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":14530,\"start\":14527},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":15842,\"start\":15838},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":15939,\"start\":15935},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":15942,\"start\":15939},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":15993,\"start\":15989},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":16235,\"start\":16231},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":16282,\"start\":16278},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":16349,\"start\":16345},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":16355,\"start\":16351},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":16505,\"start\":16501},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":16741,\"start\":16737},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":16971,\"start\":16968},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":17028,\"start\":17024},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":17245,\"start\":17241},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":18302,\"start\":18298},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":18305,\"start\":18302},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":18308,\"start\":18305},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":18441,\"start\":18437},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":18444,\"start\":18441},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":18447,\"start\":18444},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":18593,\"start\":18589},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":18596,\"start\":18593},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":18599,\"start\":18596},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":18759,\"start\":18755},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":19250,\"start\":19246},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19253,\"start\":19250},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":19256,\"start\":19253},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":19259,\"start\":19256},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":19438,\"start\":19434},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":19441,\"start\":19438},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":19444,\"start\":19441},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":19447,\"start\":19444},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":19896,\"start\":19893},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":19899,\"start\":19896},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":19902,\"start\":19899},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":19905,\"start\":19902},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":20032,\"start\":20029},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":20035,\"start\":20032},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":20091,\"start\":20087},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":20299,\"start\":20296},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":20302,\"start\":20299},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":20323,\"start\":20319},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":20747,\"start\":20743},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":23395,\"start\":23392},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":26857,\"start\":26853},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":27638,\"start\":27634},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":28365,\"start\":28361},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":29989,\"start\":29985},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":29992,\"start\":29989},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":29998,\"start\":29994},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":30001,\"start\":29998},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":30890,\"start\":30886},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":30893,\"start\":30890},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":30955,\"start\":30951},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":33213,\"start\":33209},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":35552,\"start\":35548},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":35794,\"start\":35791},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":36052,\"start\":36048},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":41597,\"start\":41593},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":42172,\"start\":42168},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":42751,\"start\":42748},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":43062,\"start\":43058},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":43604,\"start\":43600},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":44106,\"start\":44102},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":44109,\"start\":44106},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":44894,\"start\":44890},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":45105,\"start\":45101},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":45108,\"start\":45105},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":45858,\"start\":45854},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":46314,\"start\":46310},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":47816,\"start\":47812},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":48076,\"start\":48072},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":48389,\"start\":48385},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":50818,\"start\":50814},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":50821,\"start\":50818},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":50824,\"start\":50821},{\"end\":65242,\"start\":65238},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":68197,\"start\":68193},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":68325,\"start\":68321},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":68476,\"start\":68472},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":71415,\"start\":71412},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":72221,\"start\":72217},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":72470,\"start\":72466},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":73224,\"start\":73220}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":76588,\"start\":75968},{\"attributes\":{\"id\":\"fig_1\"},\"end\":77131,\"start\":76589},{\"attributes\":{\"id\":\"fig_2\"},\"end\":77345,\"start\":77132},{\"attributes\":{\"id\":\"fig_3\"},\"end\":77867,\"start\":77346},{\"attributes\":{\"id\":\"fig_4\"},\"end\":77933,\"start\":77868},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":78552,\"start\":77934},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":80110,\"start\":78553},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":81668,\"start\":80111},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":83178,\"start\":81669},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":84292,\"start\":83179}]", "paragraph": "[{\"end\":3417,\"start\":2290},{\"end\":6565,\"start\":3419},{\"end\":8266,\"start\":6567},{\"end\":9569,\"start\":8268},{\"end\":10825,\"start\":9571},{\"end\":11926,\"start\":10827},{\"end\":11978,\"start\":11928},{\"end\":12637,\"start\":11980},{\"end\":13928,\"start\":12639},{\"end\":14251,\"start\":13930},{\"end\":15565,\"start\":14253},{\"end\":17632,\"start\":15567},{\"end\":19260,\"start\":17682},{\"end\":21223,\"start\":19262},{\"end\":21597,\"start\":21239},{\"end\":22866,\"start\":21625},{\"end\":23479,\"start\":22868},{\"end\":24779,\"start\":23553},{\"end\":25706,\"start\":24805},{\"end\":26515,\"start\":25726},{\"end\":27421,\"start\":26575},{\"end\":28205,\"start\":27512},{\"end\":29532,\"start\":28307},{\"end\":30655,\"start\":29562},{\"end\":31826,\"start\":30694},{\"end\":32972,\"start\":31854},{\"end\":34334,\"start\":33010},{\"end\":34537,\"start\":34382},{\"end\":35015,\"start\":34570},{\"end\":35248,\"start\":35049},{\"end\":35503,\"start\":35312},{\"end\":35623,\"start\":35526},{\"end\":38039,\"start\":35655},{\"end\":39280,\"start\":38041},{\"end\":40310,\"start\":39282},{\"end\":40932,\"start\":40326},{\"end\":44009,\"start\":40945},{\"end\":45007,\"start\":44040},{\"end\":46056,\"start\":45009},{\"end\":46851,\"start\":46058},{\"end\":49253,\"start\":46894},{\"end\":50478,\"start\":49255},{\"end\":54529,\"start\":50505},{\"end\":55603,\"start\":54531},{\"end\":57565,\"start\":55605},{\"end\":59150,\"start\":57567},{\"end\":60217,\"start\":59152},{\"end\":62082,\"start\":60219},{\"end\":63743,\"start\":62084},{\"end\":65467,\"start\":63745},{\"end\":68494,\"start\":65469},{\"end\":70277,\"start\":68496},{\"end\":73280,\"start\":70304},{\"end\":75772,\"start\":73320},{\"end\":75967,\"start\":75787}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":23552,\"start\":23480},{\"attributes\":{\"id\":\"formula_1\"},\"end\":26544,\"start\":26516},{\"attributes\":{\"id\":\"formula_2\"},\"end\":27471,\"start\":27422},{\"attributes\":{\"id\":\"formula_3\"},\"end\":28277,\"start\":28206},{\"attributes\":{\"id\":\"formula_4\"},\"end\":30672,\"start\":30656},{\"attributes\":{\"id\":\"formula_5\"},\"end\":34381,\"start\":34335},{\"attributes\":{\"id\":\"formula_6\"},\"end\":35048,\"start\":35016},{\"attributes\":{\"id\":\"formula_7\"},\"end\":35311,\"start\":35249},{\"attributes\":{\"id\":\"formula_8\"},\"end\":35525,\"start\":35504}]", "table_ref": "[{\"end\":41139,\"start\":41132},{\"end\":41188,\"start\":41181},{\"end\":50139,\"start\":50132},{\"end\":50477,\"start\":50470},{\"end\":51138,\"start\":51131},{\"end\":53241,\"start\":53234},{\"end\":53546,\"start\":53539},{\"end\":53558,\"start\":53551},{\"end\":53777,\"start\":53770},{\"end\":55302,\"start\":55295},{\"end\":64203,\"start\":64196},{\"end\":66154,\"start\":66147},{\"end\":67103,\"start\":67096},{\"end\":69897,\"start\":69890},{\"end\":70276,\"start\":70269},{\"end\":71101,\"start\":71092},{\"end\":71884,\"start\":71877},{\"end\":72050,\"start\":72043},{\"end\":75799,\"start\":75792}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2288,\"start\":2276},{\"attributes\":{\"n\":\"2.2\"},\"end\":17680,\"start\":17635},{\"attributes\":{\"n\":\"3\"},\"end\":21237,\"start\":21226},{\"attributes\":{\"n\":\"3.1\"},\"end\":21623,\"start\":21600},{\"attributes\":{\"n\":\"3.2\"},\"end\":24803,\"start\":24782},{\"end\":25724,\"start\":25709},{\"end\":26573,\"start\":26546},{\"end\":27510,\"start\":27473},{\"end\":28305,\"start\":28279},{\"end\":29560,\"start\":29535},{\"end\":30692,\"start\":30674},{\"end\":31852,\"start\":31829},{\"end\":33008,\"start\":32975},{\"end\":34568,\"start\":34540},{\"attributes\":{\"n\":\"3.3\"},\"end\":35653,\"start\":35626},{\"attributes\":{\"n\":\"4\"},\"end\":40324,\"start\":40313},{\"attributes\":{\"n\":\"4.1\"},\"end\":40943,\"start\":40935},{\"end\":44038,\"start\":44012},{\"attributes\":{\"n\":\"4.2\"},\"end\":46892,\"start\":46854},{\"attributes\":{\"n\":\"4.3\"},\"end\":50503,\"start\":50481},{\"attributes\":{\"n\":\"5\"},\"end\":70302,\"start\":70280},{\"end\":73289,\"start\":73283},{\"attributes\":{\"n\":\"6\"},\"end\":73318,\"start\":73292},{\"end\":75785,\"start\":75775},{\"end\":76594,\"start\":76590},{\"end\":77351,\"start\":77347},{\"end\":77877,\"start\":77869}]", "table": "[{\"end\":78552,\"start\":78148},{\"end\":80110,\"start\":78588},{\"end\":81668,\"start\":80146},{\"end\":83178,\"start\":81831},{\"end\":84292,\"start\":83201}]", "figure_caption": "[{\"end\":76588,\"start\":75970},{\"end\":77131,\"start\":76595},{\"end\":77345,\"start\":77134},{\"end\":77867,\"start\":77352},{\"end\":77933,\"start\":77879},{\"end\":78148,\"start\":77936},{\"end\":78588,\"start\":78555},{\"end\":80146,\"start\":80113},{\"end\":81831,\"start\":81671},{\"end\":83201,\"start\":83181}]", "figure_ref": "[{\"end\":10575,\"start\":10567},{\"end\":12194,\"start\":12193},{\"end\":25493,\"start\":25485},{\"end\":36707,\"start\":36699},{\"end\":40185,\"start\":40177},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":41320,\"start\":41312},{\"end\":53680,\"start\":53672},{\"end\":56639,\"start\":56631},{\"end\":61201,\"start\":61193},{\"end\":62655,\"start\":62647},{\"end\":62657,\"start\":62656},{\"end\":63190,\"start\":63189},{\"end\":69380,\"start\":69379}]", "bib_author_first_name": "[{\"end\":84984,\"start\":84983},{\"end\":84995,\"start\":84994},{\"end\":85003,\"start\":85002},{\"end\":85012,\"start\":85011},{\"end\":85021,\"start\":85020},{\"end\":85023,\"start\":85022},{\"end\":85295,\"start\":85294},{\"end\":85302,\"start\":85301},{\"end\":85304,\"start\":85303},{\"end\":85314,\"start\":85313},{\"end\":85607,\"start\":85606},{\"end\":85623,\"start\":85622},{\"end\":85632,\"start\":85631},{\"end\":85644,\"start\":85643},{\"end\":85874,\"start\":85873},{\"end\":85886,\"start\":85885},{\"end\":85897,\"start\":85896},{\"end\":85910,\"start\":85909},{\"end\":85918,\"start\":85917},{\"end\":85930,\"start\":85929},{\"end\":85940,\"start\":85939},{\"end\":85950,\"start\":85949},{\"end\":85961,\"start\":85960},{\"end\":85974,\"start\":85973},{\"end\":85976,\"start\":85975},{\"end\":86374,\"start\":86373},{\"end\":86382,\"start\":86381},{\"end\":86390,\"start\":86389},{\"end\":86399,\"start\":86398},{\"end\":86684,\"start\":86683},{\"end\":86695,\"start\":86694},{\"end\":86697,\"start\":86696},{\"end\":86706,\"start\":86705},{\"end\":86713,\"start\":86712},{\"end\":86715,\"start\":86714},{\"end\":87012,\"start\":87011},{\"end\":87022,\"start\":87021},{\"end\":87024,\"start\":87023},{\"end\":87033,\"start\":87032},{\"end\":87040,\"start\":87039},{\"end\":87322,\"start\":87321},{\"end\":87333,\"start\":87332},{\"end\":87342,\"start\":87341},{\"end\":87344,\"start\":87343},{\"end\":87751,\"start\":87750},{\"end\":87762,\"start\":87761},{\"end\":87764,\"start\":87763},{\"end\":87774,\"start\":87773},{\"end\":88052,\"start\":88051},{\"end\":88063,\"start\":88062},{\"end\":88074,\"start\":88073},{\"end\":88085,\"start\":88084},{\"end\":88343,\"start\":88342},{\"end\":88354,\"start\":88353},{\"end\":88356,\"start\":88355},{\"end\":88368,\"start\":88367},{\"end\":88381,\"start\":88380},{\"end\":88390,\"start\":88389},{\"end\":88401,\"start\":88400},{\"end\":88411,\"start\":88410},{\"end\":88413,\"start\":88412},{\"end\":88746,\"start\":88745},{\"end\":88757,\"start\":88756},{\"end\":88766,\"start\":88765},{\"end\":89020,\"start\":89019},{\"end\":89032,\"start\":89031},{\"end\":89045,\"start\":89044},{\"end\":89056,\"start\":89055},{\"end\":89064,\"start\":89063},{\"end\":89710,\"start\":89709},{\"end\":89712,\"start\":89711},{\"end\":89726,\"start\":89725},{\"end\":89728,\"start\":89727},{\"end\":89738,\"start\":89737},{\"end\":89747,\"start\":89746},{\"end\":89749,\"start\":89748},{\"end\":89762,\"start\":89761},{\"end\":89764,\"start\":89763},{\"end\":89774,\"start\":89773},{\"end\":89776,\"start\":89775},{\"end\":89784,\"start\":89783},{\"end\":89786,\"start\":89785},{\"end\":89796,\"start\":89795},{\"end\":89798,\"start\":89797},{\"end\":89807,\"start\":89806},{\"end\":89809,\"start\":89808},{\"end\":89817,\"start\":89816},{\"end\":89819,\"start\":89818},{\"end\":90245,\"start\":90244},{\"end\":90254,\"start\":90253},{\"end\":90263,\"start\":90262},{\"end\":90605,\"start\":90604},{\"end\":90607,\"start\":90606},{\"end\":90619,\"start\":90618},{\"end\":90631,\"start\":90630},{\"end\":90963,\"start\":90962},{\"end\":90965,\"start\":90964},{\"end\":90975,\"start\":90974},{\"end\":90988,\"start\":90987},{\"end\":91002,\"start\":91001},{\"end\":91004,\"start\":91003},{\"end\":91013,\"start\":91012},{\"end\":91022,\"start\":91021},{\"end\":91024,\"start\":91023},{\"end\":91036,\"start\":91035},{\"end\":91038,\"start\":91037},{\"end\":91390,\"start\":91389},{\"end\":91392,\"start\":91391},{\"end\":91402,\"start\":91401},{\"end\":91404,\"start\":91403},{\"end\":91721,\"start\":91720},{\"end\":91732,\"start\":91731},{\"end\":91744,\"start\":91743},{\"end\":91755,\"start\":91754},{\"end\":91768,\"start\":91767},{\"end\":91770,\"start\":91769},{\"end\":92126,\"start\":92125},{\"end\":92136,\"start\":92135},{\"end\":92147,\"start\":92146},{\"end\":92433,\"start\":92432},{\"end\":92446,\"start\":92445},{\"end\":92789,\"start\":92788},{\"end\":92797,\"start\":92796},{\"end\":92799,\"start\":92798},{\"end\":92813,\"start\":92812},{\"end\":92820,\"start\":92819},{\"end\":92822,\"start\":92821},{\"end\":92836,\"start\":92835},{\"end\":92838,\"start\":92837},{\"end\":93170,\"start\":93169},{\"end\":93172,\"start\":93171},{\"end\":93182,\"start\":93181},{\"end\":93408,\"start\":93407},{\"end\":93418,\"start\":93417},{\"end\":93426,\"start\":93425},{\"end\":93822,\"start\":93821},{\"end\":93832,\"start\":93831},{\"end\":93842,\"start\":93841},{\"end\":93850,\"start\":93849},{\"end\":93852,\"start\":93851},{\"end\":93862,\"start\":93861},{\"end\":93864,\"start\":93863},{\"end\":93878,\"start\":93877},{\"end\":93887,\"start\":93886},{\"end\":93899,\"start\":93898},{\"end\":94284,\"start\":94283},{\"end\":94295,\"start\":94294},{\"end\":94304,\"start\":94303},{\"end\":94677,\"start\":94676},{\"end\":94683,\"start\":94682},{\"end\":94690,\"start\":94689},{\"end\":94698,\"start\":94697},{\"end\":94990,\"start\":94989},{\"end\":94997,\"start\":94996},{\"end\":95004,\"start\":95003},{\"end\":95013,\"start\":95012},{\"end\":95352,\"start\":95351},{\"end\":95359,\"start\":95358},{\"end\":95652,\"start\":95651},{\"end\":95666,\"start\":95665},{\"end\":95668,\"start\":95667},{\"end\":95677,\"start\":95676},{\"end\":95690,\"start\":95689},{\"end\":96095,\"start\":96094},{\"end\":96097,\"start\":96096},{\"end\":96109,\"start\":96108},{\"end\":96119,\"start\":96118},{\"end\":96121,\"start\":96120},{\"end\":96439,\"start\":96438},{\"end\":96455,\"start\":96454},{\"end\":96463,\"start\":96462},{\"end\":96953,\"start\":96952},{\"end\":96964,\"start\":96963},{\"end\":96973,\"start\":96972},{\"end\":96983,\"start\":96982},{\"end\":96994,\"start\":96993},{\"end\":96996,\"start\":96995},{\"end\":97337,\"start\":97336},{\"end\":97348,\"start\":97347},{\"end\":97361,\"start\":97360},{\"end\":97369,\"start\":97368},{\"end\":97371,\"start\":97370},{\"end\":97382,\"start\":97381},{\"end\":97730,\"start\":97729},{\"end\":97743,\"start\":97742},{\"end\":97752,\"start\":97751},{\"end\":97762,\"start\":97761},{\"end\":97770,\"start\":97769},{\"end\":98042,\"start\":98036},{\"end\":98054,\"start\":98053},{\"end\":98060,\"start\":98059},{\"end\":98068,\"start\":98067},{\"end\":98070,\"start\":98069},{\"end\":98492,\"start\":98491},{\"end\":98503,\"start\":98502},{\"end\":98733,\"start\":98732},{\"end\":98741,\"start\":98740},{\"end\":98747,\"start\":98746},{\"end\":99066,\"start\":99065},{\"end\":99068,\"start\":99067},{\"end\":99078,\"start\":99077},{\"end\":99087,\"start\":99086},{\"end\":99426,\"start\":99425},{\"end\":99435,\"start\":99434},{\"end\":99437,\"start\":99436},{\"end\":99449,\"start\":99448},{\"end\":99451,\"start\":99450},{\"end\":99791,\"start\":99790},{\"end\":99799,\"start\":99798},{\"end\":99807,\"start\":99806},{\"end\":99823,\"start\":99822},{\"end\":99825,\"start\":99824},{\"end\":99833,\"start\":99832},{\"end\":99844,\"start\":99843},{\"end\":99846,\"start\":99845},{\"end\":99856,\"start\":99855},{\"end\":100284,\"start\":100283},{\"end\":100291,\"start\":100290},{\"end\":100297,\"start\":100296},{\"end\":100309,\"start\":100308},{\"end\":100623,\"start\":100622},{\"end\":100625,\"start\":100624},{\"end\":100640,\"start\":100639},{\"end\":100649,\"start\":100648},{\"end\":100657,\"start\":100656},{\"end\":100666,\"start\":100665},{\"end\":100904,\"start\":100903},{\"end\":100906,\"start\":100905},{\"end\":101165,\"start\":101164},{\"end\":101174,\"start\":101173},{\"end\":101186,\"start\":101185},{\"end\":101628,\"start\":101627},{\"end\":101637,\"start\":101636},{\"end\":101649,\"start\":101648},{\"end\":101660,\"start\":101659},{\"end\":101671,\"start\":101670},{\"end\":102131,\"start\":102130},{\"end\":102140,\"start\":102139},{\"end\":102421,\"start\":102420},{\"end\":102431,\"start\":102430},{\"end\":102796,\"start\":102795},{\"end\":103070,\"start\":103069},{\"end\":103082,\"start\":103081},{\"end\":103091,\"start\":103090},{\"end\":103103,\"start\":103102},{\"end\":103110,\"start\":103109},{\"end\":103118,\"start\":103117},{\"end\":103128,\"start\":103127},{\"end\":103546,\"start\":103545},{\"end\":103556,\"start\":103555},{\"end\":103573,\"start\":103572},{\"end\":103585,\"start\":103584},{\"end\":103599,\"start\":103598},{\"end\":103608,\"start\":103607},{\"end\":103616,\"start\":103615},{\"end\":103626,\"start\":103625},{\"end\":103635,\"start\":103634},{\"end\":103642,\"start\":103641},{\"end\":103984,\"start\":103983},{\"end\":103994,\"start\":103993},{\"end\":104004,\"start\":104003},{\"end\":104020,\"start\":104019},{\"end\":104022,\"start\":104021},{\"end\":104033,\"start\":104032},{\"end\":104035,\"start\":104034},{\"end\":104049,\"start\":104048},{\"end\":104056,\"start\":104055},{\"end\":104065,\"start\":104064},{\"end\":104067,\"start\":104066},{\"end\":104638,\"start\":104637},{\"end\":104650,\"start\":104649},{\"end\":104658,\"start\":104657},{\"end\":104664,\"start\":104663},{\"end\":105026,\"start\":105025},{\"end\":105042,\"start\":105041},{\"end\":105053,\"start\":105052},{\"end\":105075,\"start\":105074},{\"end\":105364,\"start\":105363},{\"end\":105378,\"start\":105377},{\"end\":105386,\"start\":105385},{\"end\":105586,\"start\":105585},{\"end\":105594,\"start\":105593},{\"end\":105606,\"start\":105605},{\"end\":105856,\"start\":105855},{\"end\":105868,\"start\":105867},{\"end\":105882,\"start\":105881},{\"end\":105894,\"start\":105893},{\"end\":105896,\"start\":105895},{\"end\":105908,\"start\":105907},{\"end\":106212,\"start\":106211},{\"end\":106223,\"start\":106222},{\"end\":106237,\"start\":106236},{\"end\":106247,\"start\":106246},{\"end\":106257,\"start\":106256},{\"end\":106259,\"start\":106258},{\"end\":106271,\"start\":106270},{\"end\":106656,\"start\":106655},{\"end\":106663,\"start\":106662},{\"end\":106671,\"start\":106670},{\"end\":106679,\"start\":106678},{\"end\":106688,\"start\":106687},{\"end\":106697,\"start\":106696},{\"end\":106703,\"start\":106702},{\"end\":106710,\"start\":106709},{\"end\":106717,\"start\":106716},{\"end\":106723,\"start\":106722},{\"end\":107253,\"start\":107252},{\"end\":107264,\"start\":107263},{\"end\":107273,\"start\":107272},{\"end\":107282,\"start\":107281},{\"end\":107291,\"start\":107290},{\"end\":107573,\"start\":107572},{\"end\":107586,\"start\":107585},{\"end\":107808,\"start\":107807},{\"end\":107816,\"start\":107815},{\"end\":107826,\"start\":107825},{\"end\":107840,\"start\":107839},{\"end\":108016,\"start\":108015},{\"end\":108025,\"start\":108024},{\"end\":108034,\"start\":108033},{\"end\":108036,\"start\":108035},{\"end\":108047,\"start\":108046},{\"end\":108298,\"start\":108297},{\"end\":108307,\"start\":108306},{\"end\":108316,\"start\":108315},{\"end\":108318,\"start\":108317},{\"end\":108541,\"start\":108540},{\"end\":108550,\"start\":108549},{\"end\":108558,\"start\":108557},{\"end\":108560,\"start\":108559},{\"end\":108569,\"start\":108568},{\"end\":108576,\"start\":108575},{\"end\":108584,\"start\":108583},{\"end\":108593,\"start\":108592},{\"end\":108595,\"start\":108594}]", "bib_author_last_name": "[{\"end\":84992,\"start\":84985},{\"end\":85000,\"start\":84996},{\"end\":85009,\"start\":85004},{\"end\":85018,\"start\":85013},{\"end\":85035,\"start\":85024},{\"end\":85299,\"start\":85296},{\"end\":85311,\"start\":85305},{\"end\":85321,\"start\":85315},{\"end\":85620,\"start\":85608},{\"end\":85629,\"start\":85624},{\"end\":85641,\"start\":85633},{\"end\":85650,\"start\":85645},{\"end\":85883,\"start\":85875},{\"end\":85894,\"start\":85887},{\"end\":85907,\"start\":85898},{\"end\":85915,\"start\":85911},{\"end\":85927,\"start\":85919},{\"end\":85937,\"start\":85931},{\"end\":85947,\"start\":85941},{\"end\":85958,\"start\":85951},{\"end\":85971,\"start\":85962},{\"end\":85984,\"start\":85977},{\"end\":86379,\"start\":86375},{\"end\":86387,\"start\":86383},{\"end\":86396,\"start\":86391},{\"end\":86402,\"start\":86400},{\"end\":86692,\"start\":86685},{\"end\":86703,\"start\":86698},{\"end\":86710,\"start\":86707},{\"end\":86721,\"start\":86716},{\"end\":87019,\"start\":87013},{\"end\":87030,\"start\":87025},{\"end\":87037,\"start\":87034},{\"end\":87050,\"start\":87041},{\"end\":87330,\"start\":87323},{\"end\":87339,\"start\":87334},{\"end\":87350,\"start\":87345},{\"end\":87759,\"start\":87752},{\"end\":87771,\"start\":87765},{\"end\":87781,\"start\":87775},{\"end\":88060,\"start\":88053},{\"end\":88071,\"start\":88064},{\"end\":88082,\"start\":88075},{\"end\":88096,\"start\":88086},{\"end\":88351,\"start\":88344},{\"end\":88365,\"start\":88357},{\"end\":88378,\"start\":88369},{\"end\":88387,\"start\":88382},{\"end\":88398,\"start\":88391},{\"end\":88408,\"start\":88402},{\"end\":88422,\"start\":88414},{\"end\":88754,\"start\":88747},{\"end\":88763,\"start\":88758},{\"end\":88776,\"start\":88767},{\"end\":89029,\"start\":89021},{\"end\":89042,\"start\":89033},{\"end\":89053,\"start\":89046},{\"end\":89061,\"start\":89057},{\"end\":89073,\"start\":89065},{\"end\":89723,\"start\":89713},{\"end\":89735,\"start\":89729},{\"end\":89744,\"start\":89739},{\"end\":89759,\"start\":89750},{\"end\":89771,\"start\":89765},{\"end\":89781,\"start\":89777},{\"end\":89793,\"start\":89787},{\"end\":89804,\"start\":89799},{\"end\":89814,\"start\":89810},{\"end\":89827,\"start\":89820},{\"end\":90251,\"start\":90246},{\"end\":90260,\"start\":90255},{\"end\":90273,\"start\":90264},{\"end\":90616,\"start\":90608},{\"end\":90628,\"start\":90620},{\"end\":90637,\"start\":90632},{\"end\":90972,\"start\":90966},{\"end\":90985,\"start\":90976},{\"end\":90999,\"start\":90989},{\"end\":91010,\"start\":91005},{\"end\":91019,\"start\":91014},{\"end\":91033,\"start\":91025},{\"end\":91041,\"start\":91039},{\"end\":91399,\"start\":91393},{\"end\":91411,\"start\":91405},{\"end\":91729,\"start\":91722},{\"end\":91741,\"start\":91733},{\"end\":91752,\"start\":91745},{\"end\":91765,\"start\":91756},{\"end\":91779,\"start\":91771},{\"end\":92133,\"start\":92127},{\"end\":92144,\"start\":92137},{\"end\":92152,\"start\":92148},{\"end\":92443,\"start\":92434},{\"end\":92454,\"start\":92447},{\"end\":92794,\"start\":92790},{\"end\":92810,\"start\":92800},{\"end\":92817,\"start\":92814},{\"end\":92833,\"start\":92823},{\"end\":92845,\"start\":92839},{\"end\":93179,\"start\":93173},{\"end\":93185,\"start\":93183},{\"end\":93415,\"start\":93409},{\"end\":93423,\"start\":93419},{\"end\":93436,\"start\":93427},{\"end\":93829,\"start\":93823},{\"end\":93839,\"start\":93833},{\"end\":93847,\"start\":93843},{\"end\":93859,\"start\":93853},{\"end\":93875,\"start\":93865},{\"end\":93884,\"start\":93879},{\"end\":93896,\"start\":93888},{\"end\":93905,\"start\":93900},{\"end\":94292,\"start\":94285},{\"end\":94301,\"start\":94296},{\"end\":94318,\"start\":94305},{\"end\":94680,\"start\":94678},{\"end\":94687,\"start\":94684},{\"end\":94695,\"start\":94691},{\"end\":94702,\"start\":94699},{\"end\":94994,\"start\":94991},{\"end\":95001,\"start\":94998},{\"end\":95010,\"start\":95005},{\"end\":95016,\"start\":95014},{\"end\":95356,\"start\":95353},{\"end\":95369,\"start\":95360},{\"end\":95663,\"start\":95653},{\"end\":95674,\"start\":95669},{\"end\":95687,\"start\":95678},{\"end\":95698,\"start\":95691},{\"end\":96106,\"start\":96098},{\"end\":96116,\"start\":96110},{\"end\":96132,\"start\":96122},{\"end\":96452,\"start\":96440},{\"end\":96460,\"start\":96456},{\"end\":96470,\"start\":96464},{\"end\":96961,\"start\":96954},{\"end\":96970,\"start\":96965},{\"end\":96980,\"start\":96974},{\"end\":96991,\"start\":96984},{\"end\":97002,\"start\":96997},{\"end\":97345,\"start\":97338},{\"end\":97358,\"start\":97349},{\"end\":97366,\"start\":97362},{\"end\":97379,\"start\":97372},{\"end\":97387,\"start\":97383},{\"end\":97740,\"start\":97731},{\"end\":97749,\"start\":97744},{\"end\":97759,\"start\":97753},{\"end\":97767,\"start\":97763},{\"end\":97776,\"start\":97771},{\"end\":98051,\"start\":98043},{\"end\":98057,\"start\":98055},{\"end\":98065,\"start\":98061},{\"end\":98500,\"start\":98493},{\"end\":98510,\"start\":98504},{\"end\":98738,\"start\":98734},{\"end\":98744,\"start\":98742},{\"end\":98755,\"start\":98748},{\"end\":99075,\"start\":99069},{\"end\":99084,\"start\":99079},{\"end\":99094,\"start\":99088},{\"end\":99432,\"start\":99427},{\"end\":99446,\"start\":99438},{\"end\":99459,\"start\":99452},{\"end\":99796,\"start\":99792},{\"end\":99804,\"start\":99800},{\"end\":99820,\"start\":99808},{\"end\":99830,\"start\":99826},{\"end\":99841,\"start\":99834},{\"end\":99853,\"start\":99847},{\"end\":99863,\"start\":99857},{\"end\":100288,\"start\":100285},{\"end\":100294,\"start\":100292},{\"end\":100306,\"start\":100298},{\"end\":100313,\"start\":100310},{\"end\":100637,\"start\":100626},{\"end\":100646,\"start\":100641},{\"end\":100654,\"start\":100650},{\"end\":100663,\"start\":100658},{\"end\":100674,\"start\":100667},{\"end\":100912,\"start\":100907},{\"end\":101171,\"start\":101166},{\"end\":101183,\"start\":101175},{\"end\":101194,\"start\":101187},{\"end\":101634,\"start\":101629},{\"end\":101646,\"start\":101638},{\"end\":101657,\"start\":101650},{\"end\":101668,\"start\":101661},{\"end\":101683,\"start\":101672},{\"end\":102137,\"start\":102132},{\"end\":102152,\"start\":102141},{\"end\":102428,\"start\":102422},{\"end\":102438,\"start\":102432},{\"end\":102808,\"start\":102797},{\"end\":103079,\"start\":103071},{\"end\":103088,\"start\":103083},{\"end\":103100,\"start\":103092},{\"end\":103107,\"start\":103104},{\"end\":103115,\"start\":103111},{\"end\":103125,\"start\":103119},{\"end\":103135,\"start\":103129},{\"end\":103553,\"start\":103547},{\"end\":103570,\"start\":103557},{\"end\":103582,\"start\":103574},{\"end\":103596,\"start\":103586},{\"end\":103605,\"start\":103600},{\"end\":103613,\"start\":103609},{\"end\":103623,\"start\":103617},{\"end\":103632,\"start\":103627},{\"end\":103639,\"start\":103636},{\"end\":103649,\"start\":103643},{\"end\":103991,\"start\":103985},{\"end\":104001,\"start\":103995},{\"end\":104017,\"start\":104005},{\"end\":104030,\"start\":104023},{\"end\":104046,\"start\":104036},{\"end\":104053,\"start\":104050},{\"end\":104062,\"start\":104057},{\"end\":104074,\"start\":104068},{\"end\":104647,\"start\":104639},{\"end\":104655,\"start\":104651},{\"end\":104661,\"start\":104659},{\"end\":104668,\"start\":104665},{\"end\":105039,\"start\":105027},{\"end\":105050,\"start\":105043},{\"end\":105072,\"start\":105054},{\"end\":105082,\"start\":105076},{\"end\":105375,\"start\":105365},{\"end\":105383,\"start\":105379},{\"end\":105396,\"start\":105387},{\"end\":105591,\"start\":105587},{\"end\":105603,\"start\":105595},{\"end\":105612,\"start\":105607},{\"end\":105865,\"start\":105857},{\"end\":105879,\"start\":105869},{\"end\":105891,\"start\":105883},{\"end\":105905,\"start\":105897},{\"end\":105918,\"start\":105909},{\"end\":106220,\"start\":106213},{\"end\":106234,\"start\":106224},{\"end\":106244,\"start\":106238},{\"end\":106254,\"start\":106248},{\"end\":106268,\"start\":106260},{\"end\":106278,\"start\":106272},{\"end\":106660,\"start\":106657},{\"end\":106668,\"start\":106664},{\"end\":106676,\"start\":106672},{\"end\":106685,\"start\":106680},{\"end\":106694,\"start\":106689},{\"end\":106700,\"start\":106698},{\"end\":106707,\"start\":106704},{\"end\":106714,\"start\":106711},{\"end\":106720,\"start\":106718},{\"end\":106734,\"start\":106724},{\"end\":107261,\"start\":107254},{\"end\":107270,\"start\":107265},{\"end\":107279,\"start\":107274},{\"end\":107288,\"start\":107283},{\"end\":107298,\"start\":107292},{\"end\":107583,\"start\":107574},{\"end\":107595,\"start\":107587},{\"end\":107813,\"start\":107809},{\"end\":107823,\"start\":107817},{\"end\":107837,\"start\":107827},{\"end\":107846,\"start\":107841},{\"end\":108022,\"start\":108017},{\"end\":108031,\"start\":108026},{\"end\":108044,\"start\":108037},{\"end\":108057,\"start\":108048},{\"end\":108304,\"start\":108299},{\"end\":108313,\"start\":108308},{\"end\":108324,\"start\":108319},{\"end\":108547,\"start\":108542},{\"end\":108555,\"start\":108551},{\"end\":108566,\"start\":108561},{\"end\":108573,\"start\":108570},{\"end\":108581,\"start\":108577},{\"end\":108590,\"start\":108585},{\"end\":108600,\"start\":108596}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\"},\"end\":85197,\"start\":84909},{\"attributes\":{\"doi\":\"arXiv:1803.01271\",\"id\":\"b1\"},\"end\":85522,\"start\":85199},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":15321881},\"end\":85871,\"start\":85524},{\"attributes\":{\"doi\":\"arXiv:1902.01046\",\"id\":\"b3\"},\"end\":86300,\"start\":85873},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":49428582},\"end\":86594,\"start\":86302},{\"attributes\":{\"doi\":\"arXiv:2011.14097\",\"id\":\"b5\"},\"end\":86927,\"start\":86596},{\"attributes\":{\"doi\":\"arXiv:1810.04805\",\"id\":\"b6\"},\"end\":87252,\"start\":86929},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":9062671},\"end\":87670,\"start\":87254},{\"attributes\":{\"doi\":\"arXiv:1706.02633\",\"id\":\"b8\"},\"end\":87969,\"start\":87672},{\"attributes\":{\"doi\":\"10.1109/ACCESS.2020.2973425\",\"id\":\"b9\",\"matched_paper_id\":211298107},\"end\":88340,\"start\":87971},{\"attributes\":{\"doi\":\"arXiv:2004.07780\",\"id\":\"b10\"},\"end\":88675,\"start\":88342},{\"attributes\":{\"doi\":\"arXiv:1803.07728\",\"id\":\"b11\"},\"end\":88954,\"start\":88677},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":202159122},\"end\":89594,\"start\":88956},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":642375},\"end\":90131,\"start\":89596},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":5188097},\"end\":90512,\"start\":90133},{\"attributes\":{\"doi\":\"arXiv:1604.08880\",\"id\":\"b15\"},\"end\":90839,\"start\":90514},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":57574627},\"end\":91309,\"start\":90841},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":1409560},\"end\":91650,\"start\":91311},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":15416918},\"end\":92123,\"start\":91652},{\"attributes\":{\"doi\":\"arXiv:1503.02531\",\"id\":\"b19\"},\"end\":92350,\"start\":92125},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":1056320},\"end\":92690,\"start\":92352},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":837298},\"end\":93123,\"start\":92692},{\"attributes\":{\"doi\":\"arXiv:1412.6980\",\"id\":\"b22\"},\"end\":93320,\"start\":93125},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":53280782},\"end\":93686,\"start\":93322},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":20026435},\"end\":94228,\"start\":93688},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":7023610},\"end\":94536,\"start\":94230},{\"attributes\":{\"id\":\"b26\"},\"end\":94913,\"start\":94538},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":54024655},\"end\":95263,\"start\":94915},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":52310361},\"end\":95595,\"start\":95265},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":3610884},\"end\":96046,\"start\":95597},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":8088093},\"end\":96325,\"start\":96048},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":218870258},\"end\":96875,\"start\":96327},{\"attributes\":{\"doi\":\"PMLR\",\"id\":\"b32\",\"matched_paper_id\":14955348},\"end\":97257,\"start\":96877},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":16447573},\"end\":97655,\"start\":97259},{\"attributes\":{\"doi\":\"arXiv:1611.06440\",\"id\":\"b34\"},\"end\":97978,\"start\":97657},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":4448336},\"end\":98414,\"start\":97980},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":187547},\"end\":98730,\"start\":98416},{\"attributes\":{\"doi\":\"arXiv:1807.03748\",\"id\":\"b37\"},\"end\":98981,\"start\":98732},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":16726452},\"end\":99356,\"start\":98983},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":8020936},\"end\":99725,\"start\":99358},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":3337633},\"end\":100201,\"start\":99727},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":10328909},\"end\":100557,\"start\":100203},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":207110862},\"end\":100856,\"start\":100559},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":9890353},\"end\":101096,\"start\":100858},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":195357258},\"end\":101552,\"start\":101098},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":59600251},\"end\":102030,\"start\":101554},{\"attributes\":{\"doi\":\"arXiv:1711.06116\",\"id\":\"b46\"},\"end\":102349,\"start\":102032},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":211069320},\"end\":102623,\"start\":102351},{\"attributes\":{\"id\":\"b48\"},\"end\":103003,\"start\":102625},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":3997350},\"end\":103493,\"start\":103005},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":205261034},\"end\":103871,\"start\":103495},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":5687667},\"end\":104546,\"start\":103873},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":206761818},\"end\":104957,\"start\":104548},{\"attributes\":{\"doi\":\"arXiv:1905.11796\",\"id\":\"b53\"},\"end\":105286,\"start\":104959},{\"attributes\":{\"doi\":\"arXiv:1902.03984\",\"id\":\"b54\"},\"end\":105583,\"start\":105288},{\"attributes\":{\"doi\":\"arXiv:1906.05849\",\"id\":\"b55\"},\"end\":105778,\"start\":105585},{\"attributes\":{\"id\":\"b56\"},\"end\":106093,\"start\":105780},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":17804904},\"end\":106563,\"start\":106095},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":52296788},\"end\":107179,\"start\":106565},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":21329383},\"end\":107507,\"start\":107181},{\"attributes\":{\"doi\":\"arXiv:2002.08933\",\"id\":\"b60\"},\"end\":107758,\"start\":107509},{\"attributes\":{\"doi\":\"arXiv:1905.03670\",\"id\":\"b61\"},\"end\":108013,\"start\":107760},{\"attributes\":{\"doi\":\"arXiv:1710.09412\",\"id\":\"b62\"},\"end\":108266,\"start\":108015},{\"attributes\":{\"id\":\"b63\"},\"end\":108471,\"start\":108268},{\"attributes\":{\"id\":\"b64\"},\"end\":108826,\"start\":108473}]", "bib_title": "[{\"end\":85604,\"start\":85524},{\"end\":86371,\"start\":86302},{\"end\":87319,\"start\":87254},{\"end\":88049,\"start\":87971},{\"end\":89017,\"start\":88956},{\"end\":89707,\"start\":89596},{\"end\":90242,\"start\":90133},{\"end\":90960,\"start\":90841},{\"end\":91387,\"start\":91311},{\"end\":91718,\"start\":91652},{\"end\":92430,\"start\":92352},{\"end\":92786,\"start\":92692},{\"end\":93405,\"start\":93322},{\"end\":93819,\"start\":93688},{\"end\":94281,\"start\":94230},{\"end\":94987,\"start\":94915},{\"end\":95349,\"start\":95265},{\"end\":95649,\"start\":95597},{\"end\":96092,\"start\":96048},{\"end\":96436,\"start\":96327},{\"end\":96950,\"start\":96877},{\"end\":97334,\"start\":97259},{\"end\":98034,\"start\":97980},{\"end\":98489,\"start\":98416},{\"end\":99063,\"start\":98983},{\"end\":99423,\"start\":99358},{\"end\":99788,\"start\":99727},{\"end\":100281,\"start\":100203},{\"end\":100620,\"start\":100559},{\"end\":100901,\"start\":100858},{\"end\":101162,\"start\":101098},{\"end\":101625,\"start\":101554},{\"end\":102418,\"start\":102351},{\"end\":103067,\"start\":103005},{\"end\":103543,\"start\":103495},{\"end\":103981,\"start\":103873},{\"end\":104635,\"start\":104548},{\"end\":106209,\"start\":106095},{\"end\":106653,\"start\":106565},{\"end\":107250,\"start\":107181}]", "bib_author": "[{\"end\":84994,\"start\":84983},{\"end\":85002,\"start\":84994},{\"end\":85011,\"start\":85002},{\"end\":85020,\"start\":85011},{\"end\":85037,\"start\":85020},{\"end\":85301,\"start\":85294},{\"end\":85313,\"start\":85301},{\"end\":85323,\"start\":85313},{\"end\":85622,\"start\":85606},{\"end\":85631,\"start\":85622},{\"end\":85643,\"start\":85631},{\"end\":85652,\"start\":85643},{\"end\":85885,\"start\":85873},{\"end\":85896,\"start\":85885},{\"end\":85909,\"start\":85896},{\"end\":85917,\"start\":85909},{\"end\":85929,\"start\":85917},{\"end\":85939,\"start\":85929},{\"end\":85949,\"start\":85939},{\"end\":85960,\"start\":85949},{\"end\":85973,\"start\":85960},{\"end\":85986,\"start\":85973},{\"end\":86381,\"start\":86373},{\"end\":86389,\"start\":86381},{\"end\":86398,\"start\":86389},{\"end\":86404,\"start\":86398},{\"end\":86694,\"start\":86683},{\"end\":86705,\"start\":86694},{\"end\":86712,\"start\":86705},{\"end\":86723,\"start\":86712},{\"end\":87021,\"start\":87011},{\"end\":87032,\"start\":87021},{\"end\":87039,\"start\":87032},{\"end\":87052,\"start\":87039},{\"end\":87332,\"start\":87321},{\"end\":87341,\"start\":87332},{\"end\":87352,\"start\":87341},{\"end\":87761,\"start\":87750},{\"end\":87773,\"start\":87761},{\"end\":87783,\"start\":87773},{\"end\":88062,\"start\":88051},{\"end\":88073,\"start\":88062},{\"end\":88084,\"start\":88073},{\"end\":88098,\"start\":88084},{\"end\":88353,\"start\":88342},{\"end\":88367,\"start\":88353},{\"end\":88380,\"start\":88367},{\"end\":88389,\"start\":88380},{\"end\":88400,\"start\":88389},{\"end\":88410,\"start\":88400},{\"end\":88424,\"start\":88410},{\"end\":88756,\"start\":88745},{\"end\":88765,\"start\":88756},{\"end\":88778,\"start\":88765},{\"end\":89031,\"start\":89019},{\"end\":89044,\"start\":89031},{\"end\":89055,\"start\":89044},{\"end\":89063,\"start\":89055},{\"end\":89075,\"start\":89063},{\"end\":89725,\"start\":89709},{\"end\":89737,\"start\":89725},{\"end\":89746,\"start\":89737},{\"end\":89761,\"start\":89746},{\"end\":89773,\"start\":89761},{\"end\":89783,\"start\":89773},{\"end\":89795,\"start\":89783},{\"end\":89806,\"start\":89795},{\"end\":89816,\"start\":89806},{\"end\":89829,\"start\":89816},{\"end\":90253,\"start\":90244},{\"end\":90262,\"start\":90253},{\"end\":90275,\"start\":90262},{\"end\":90618,\"start\":90604},{\"end\":90630,\"start\":90618},{\"end\":90639,\"start\":90630},{\"end\":90974,\"start\":90962},{\"end\":90987,\"start\":90974},{\"end\":91001,\"start\":90987},{\"end\":91012,\"start\":91001},{\"end\":91021,\"start\":91012},{\"end\":91035,\"start\":91021},{\"end\":91043,\"start\":91035},{\"end\":91401,\"start\":91389},{\"end\":91413,\"start\":91401},{\"end\":91731,\"start\":91720},{\"end\":91743,\"start\":91731},{\"end\":91754,\"start\":91743},{\"end\":91767,\"start\":91754},{\"end\":91781,\"start\":91767},{\"end\":92135,\"start\":92125},{\"end\":92146,\"start\":92135},{\"end\":92154,\"start\":92146},{\"end\":92445,\"start\":92432},{\"end\":92456,\"start\":92445},{\"end\":92796,\"start\":92788},{\"end\":92812,\"start\":92796},{\"end\":92819,\"start\":92812},{\"end\":92835,\"start\":92819},{\"end\":92847,\"start\":92835},{\"end\":93181,\"start\":93169},{\"end\":93187,\"start\":93181},{\"end\":93417,\"start\":93407},{\"end\":93425,\"start\":93417},{\"end\":93438,\"start\":93425},{\"end\":93831,\"start\":93821},{\"end\":93841,\"start\":93831},{\"end\":93849,\"start\":93841},{\"end\":93861,\"start\":93849},{\"end\":93877,\"start\":93861},{\"end\":93886,\"start\":93877},{\"end\":93898,\"start\":93886},{\"end\":93907,\"start\":93898},{\"end\":94294,\"start\":94283},{\"end\":94303,\"start\":94294},{\"end\":94320,\"start\":94303},{\"end\":94682,\"start\":94676},{\"end\":94689,\"start\":94682},{\"end\":94697,\"start\":94689},{\"end\":94704,\"start\":94697},{\"end\":94996,\"start\":94989},{\"end\":95003,\"start\":94996},{\"end\":95012,\"start\":95003},{\"end\":95018,\"start\":95012},{\"end\":95358,\"start\":95351},{\"end\":95371,\"start\":95358},{\"end\":95665,\"start\":95651},{\"end\":95676,\"start\":95665},{\"end\":95689,\"start\":95676},{\"end\":95700,\"start\":95689},{\"end\":96108,\"start\":96094},{\"end\":96118,\"start\":96108},{\"end\":96134,\"start\":96118},{\"end\":96454,\"start\":96438},{\"end\":96462,\"start\":96454},{\"end\":96472,\"start\":96462},{\"end\":96963,\"start\":96952},{\"end\":96972,\"start\":96963},{\"end\":96982,\"start\":96972},{\"end\":96993,\"start\":96982},{\"end\":97004,\"start\":96993},{\"end\":97347,\"start\":97336},{\"end\":97360,\"start\":97347},{\"end\":97368,\"start\":97360},{\"end\":97381,\"start\":97368},{\"end\":97389,\"start\":97381},{\"end\":97742,\"start\":97729},{\"end\":97751,\"start\":97742},{\"end\":97761,\"start\":97751},{\"end\":97769,\"start\":97761},{\"end\":97778,\"start\":97769},{\"end\":98053,\"start\":98036},{\"end\":98059,\"start\":98053},{\"end\":98067,\"start\":98059},{\"end\":98073,\"start\":98067},{\"end\":98502,\"start\":98491},{\"end\":98512,\"start\":98502},{\"end\":98740,\"start\":98732},{\"end\":98746,\"start\":98740},{\"end\":98757,\"start\":98746},{\"end\":99077,\"start\":99065},{\"end\":99086,\"start\":99077},{\"end\":99096,\"start\":99086},{\"end\":99434,\"start\":99425},{\"end\":99448,\"start\":99434},{\"end\":99461,\"start\":99448},{\"end\":99798,\"start\":99790},{\"end\":99806,\"start\":99798},{\"end\":99822,\"start\":99806},{\"end\":99832,\"start\":99822},{\"end\":99843,\"start\":99832},{\"end\":99855,\"start\":99843},{\"end\":99865,\"start\":99855},{\"end\":100290,\"start\":100283},{\"end\":100296,\"start\":100290},{\"end\":100308,\"start\":100296},{\"end\":100315,\"start\":100308},{\"end\":100639,\"start\":100622},{\"end\":100648,\"start\":100639},{\"end\":100656,\"start\":100648},{\"end\":100665,\"start\":100656},{\"end\":100676,\"start\":100665},{\"end\":100914,\"start\":100903},{\"end\":101173,\"start\":101164},{\"end\":101185,\"start\":101173},{\"end\":101196,\"start\":101185},{\"end\":101636,\"start\":101627},{\"end\":101648,\"start\":101636},{\"end\":101659,\"start\":101648},{\"end\":101670,\"start\":101659},{\"end\":101685,\"start\":101670},{\"end\":102139,\"start\":102130},{\"end\":102154,\"start\":102139},{\"end\":102430,\"start\":102420},{\"end\":102440,\"start\":102430},{\"end\":102810,\"start\":102795},{\"end\":103081,\"start\":103069},{\"end\":103090,\"start\":103081},{\"end\":103102,\"start\":103090},{\"end\":103109,\"start\":103102},{\"end\":103117,\"start\":103109},{\"end\":103127,\"start\":103117},{\"end\":103137,\"start\":103127},{\"end\":103555,\"start\":103545},{\"end\":103572,\"start\":103555},{\"end\":103584,\"start\":103572},{\"end\":103598,\"start\":103584},{\"end\":103607,\"start\":103598},{\"end\":103615,\"start\":103607},{\"end\":103625,\"start\":103615},{\"end\":103634,\"start\":103625},{\"end\":103641,\"start\":103634},{\"end\":103651,\"start\":103641},{\"end\":103993,\"start\":103983},{\"end\":104003,\"start\":103993},{\"end\":104019,\"start\":104003},{\"end\":104032,\"start\":104019},{\"end\":104048,\"start\":104032},{\"end\":104055,\"start\":104048},{\"end\":104064,\"start\":104055},{\"end\":104076,\"start\":104064},{\"end\":104649,\"start\":104637},{\"end\":104657,\"start\":104649},{\"end\":104663,\"start\":104657},{\"end\":104670,\"start\":104663},{\"end\":105041,\"start\":105025},{\"end\":105052,\"start\":105041},{\"end\":105074,\"start\":105052},{\"end\":105084,\"start\":105074},{\"end\":105377,\"start\":105363},{\"end\":105385,\"start\":105377},{\"end\":105398,\"start\":105385},{\"end\":105593,\"start\":105585},{\"end\":105605,\"start\":105593},{\"end\":105614,\"start\":105605},{\"end\":105867,\"start\":105855},{\"end\":105881,\"start\":105867},{\"end\":105893,\"start\":105881},{\"end\":105907,\"start\":105893},{\"end\":105920,\"start\":105907},{\"end\":106222,\"start\":106211},{\"end\":106236,\"start\":106222},{\"end\":106246,\"start\":106236},{\"end\":106256,\"start\":106246},{\"end\":106270,\"start\":106256},{\"end\":106280,\"start\":106270},{\"end\":106662,\"start\":106655},{\"end\":106670,\"start\":106662},{\"end\":106678,\"start\":106670},{\"end\":106687,\"start\":106678},{\"end\":106696,\"start\":106687},{\"end\":106702,\"start\":106696},{\"end\":106709,\"start\":106702},{\"end\":106716,\"start\":106709},{\"end\":106722,\"start\":106716},{\"end\":106736,\"start\":106722},{\"end\":107263,\"start\":107252},{\"end\":107272,\"start\":107263},{\"end\":107281,\"start\":107272},{\"end\":107290,\"start\":107281},{\"end\":107300,\"start\":107290},{\"end\":107585,\"start\":107572},{\"end\":107597,\"start\":107585},{\"end\":107815,\"start\":107807},{\"end\":107825,\"start\":107815},{\"end\":107839,\"start\":107825},{\"end\":107848,\"start\":107839},{\"end\":108024,\"start\":108015},{\"end\":108033,\"start\":108024},{\"end\":108046,\"start\":108033},{\"end\":108059,\"start\":108046},{\"end\":108306,\"start\":108297},{\"end\":108315,\"start\":108306},{\"end\":108326,\"start\":108315},{\"end\":108549,\"start\":108540},{\"end\":108557,\"start\":108549},{\"end\":108568,\"start\":108557},{\"end\":108575,\"start\":108568},{\"end\":108583,\"start\":108575},{\"end\":108592,\"start\":108583},{\"end\":108602,\"start\":108592}]", "bib_venue": "[{\"end\":84981,\"start\":84909},{\"end\":85292,\"start\":85199},{\"end\":85682,\"start\":85652},{\"end\":86052,\"start\":86002},{\"end\":86434,\"start\":86404},{\"end\":86681,\"start\":86596},{\"end\":87009,\"start\":86929},{\"end\":87419,\"start\":87352},{\"end\":87748,\"start\":87672},{\"end\":88136,\"start\":88125},{\"end\":88481,\"start\":88440},{\"end\":88743,\"start\":88677},{\"end\":89257,\"start\":89075},{\"end\":89840,\"start\":89829},{\"end\":90307,\"start\":90275},{\"end\":90602,\"start\":90514},{\"end\":91058,\"start\":91043},{\"end\":91468,\"start\":91413},{\"end\":91842,\"start\":91781},{\"end\":92214,\"start\":92170},{\"end\":92505,\"start\":92456},{\"end\":92890,\"start\":92847},{\"end\":93167,\"start\":93125},{\"end\":93487,\"start\":93438},{\"end\":93938,\"start\":93907},{\"end\":94358,\"start\":94320},{\"end\":94674,\"start\":94538},{\"end\":95067,\"start\":95018},{\"end\":95415,\"start\":95371},{\"end\":95775,\"start\":95700},{\"end\":96174,\"start\":96134},{\"end\":96555,\"start\":96472},{\"end\":97046,\"start\":97008},{\"end\":97438,\"start\":97389},{\"end\":97727,\"start\":97657},{\"end\":98150,\"start\":98073},{\"end\":98550,\"start\":98512},{\"end\":98831,\"start\":98773},{\"end\":99156,\"start\":99096},{\"end\":99532,\"start\":99461},{\"end\":99948,\"start\":99865},{\"end\":100364,\"start\":100315},{\"end\":100690,\"start\":100676},{\"end\":100963,\"start\":100914},{\"end\":101279,\"start\":101196},{\"end\":101769,\"start\":101685},{\"end\":102128,\"start\":102032},{\"end\":102480,\"start\":102440},{\"end\":102793,\"start\":102625},{\"end\":103210,\"start\":103137},{\"end\":103657,\"start\":103651},{\"end\":104156,\"start\":104076},{\"end\":104736,\"start\":104670},{\"end\":105023,\"start\":104959},{\"end\":105361,\"start\":105288},{\"end\":105658,\"start\":105630},{\"end\":105853,\"start\":105780},{\"end\":106316,\"start\":106280},{\"end\":106819,\"start\":106736},{\"end\":107328,\"start\":107300},{\"end\":107570,\"start\":107509},{\"end\":107805,\"start\":107760},{\"end\":108116,\"start\":108075},{\"end\":108295,\"start\":108268},{\"end\":108538,\"start\":108473},{\"end\":87473,\"start\":87421},{\"end\":91893,\"start\":91844},{\"end\":95837,\"start\":95777},{\"end\":96625,\"start\":96557},{\"end\":98214,\"start\":98152},{\"end\":101349,\"start\":101281},{\"end\":103270,\"start\":103212},{\"end\":104223,\"start\":104158},{\"end\":106889,\"start\":106821}]"}}}, "year": 2023, "month": 12, "day": 17}