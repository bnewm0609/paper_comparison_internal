{"id": 28991729, "updated": "2022-11-18 15:40:58.126", "metadata": {"title": "Non-malleable Randomness Encoders and their Applications", "authors": "[{\"first\":\"Bhavana\",\"last\":\"Kanukurthi\",\"middle\":[]},{\"first\":\"Sai\",\"last\":\"Obbattu\",\"middle\":[\"Lakshmi\",\"Bhavana\"]},{\"first\":\"Sruthi\",\"last\":\"Sekar\",\"middle\":[]}]", "venue": "EUROCRYPT", "journal": "589-617", "publication_date": {"year": 2018, "month": null, "day": null}, "abstract": ". Non-malleable Codes (NMCs), introduced by Dziembowski, Peitrzak and Wichs (ITCS 2010), serve the purpose of preventing \u201cre-lated tampering\u201d of encoded messages. The most popular tampering model considered is the 2-split-state model where a codeword consists of 2 states, each of which can be tampered independently. While NMCs in the 2-split state model provide the strongest security guarantee, despite much research in the area we only know how to build them with poor rate ( \u2126 ( 1 logn ), where n is the codeword length). However, in many applications of NMCs one only needs to be able to encode randomness i.e., security is not required to hold for arbitrary, adversarially chosen messages. For example, in applications of NMCs to tamper-resilient security, the messages that are encoded are typically randomly generated secret keys. To exploit this, in this work, we introduce the notion of \u201c Nonmalleable Randomness Encoders \u201d (NMREs) as a relaxation of NMCs in the following sense: NMREs output a random message along with its corresponding non-malleable encoding. Our main result is the construction of a 2-split state, rate- 12 NMRE. While NMREs are interesting in their own right and can be directly used in applications such as in the construction of tamper-resilient cryptographic primitives, we also show how to use them, in a black-box man-ner, to build a 3-split-state (standard) NMCs with rate 13 . This improves both the number of states, as well as the rate, of existing constant-rate NMCs.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2953124467", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/eurocrypt/KanukurthiOS18", "doi": "10.1007/978-3-319-78372-7_19"}}, "content": {"source": {"pdf_hash": "9c308b017876b3435e9f17f0bef36e284c74e605", "pdf_src": "ScienceParsePlus", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "6f42f5e5b8266f702148f02a5081c3969425faac", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/9c308b017876b3435e9f17f0bef36e284c74e605.txt", "contents": "\nNon-malleable Randomness Encoders and their Applications\n\n\nBhavana Kanukurthi \nIndian Institute Of Science\nBangalore\n\nSai Lakshmi \nIndian Institute Of Science\nBangalore\n\nBhavana Obbattu \nIndian Institute Of Science\nBangalore\n\nSruthi Sekar \nIndian Institute Of Science\nBangalore\n\nNon-malleable Randomness Encoders and their Applications\n\nNon-malleable Codes (NMCs), introduced by Dziembowski, Peitrzak and Wichs (ITCS 2010), serve the purpose of preventing \"related tampering\" of encoded messages. The most popular tampering model considered is the 2-split-state model where a codeword consists of 2 states, each of which can be tampered independently. While NMCs in the 2-split state model provide the strongest security guarantee, despite much research in the area we only know how to build them with poor rate (\u2126( 1 logn ), where n is the codeword length). However, in many applications of NMCs one only needs to be able to encode randomness i.e., security is not required to hold for arbitrary, adversarially chosen messages. For example, in applications of NMCs to tamper-resilient security, the messages that are encoded are typically randomly generated secret keys. To exploit this, in this work, we introduce the notion of \"Nonmalleable Randomness Encoders\" (NMREs) as a relaxation of NMCs in the following sense: NMREs output a random message along with its corresponding non-malleable encoding. Our main result is the construction of a 2-split state, rate-1 2 NMRE. While NMREs are interesting in their own right and can be directly used in applications such as in the construction of tamper-resilient cryptographic primitives, we also show how to use them, in a black-box manner, to build a 3-split-state (standard) NMCs with rate 1 3 . This improves both the number of states, as well as the rate, of existing constant-rate NMCs.\n\nappropriately limited. Dziembowski, Peitrzak and Wichs [DPW10], introduced an important variant of ECCs based on the well-established intuition in eryptography that, often times, tampering data into something independent doesn't threaten the security of the underlying cryptosystem. (For example, an adversary who obtains signatures on an independently generated signing key, will not be able to forge signatures with respect to the original secret key.) Specifically, they introduced Non-malleable Codes which provide a guarantee that an adversary cannot tamper the codeword of message m into the codeword of a related message m .\n\nAs observed in [DPW10], it is impossible to build NMCs secure against all functions. Therefore, NMCs are defined with respect to a family of tampering functions. A natural class of tampering functions that have been considered is the t\u2212split state model where a codeword consists of t states, each of which is tampered independently by the adversary. An important parameter of interest for NMCs is its Rate = k n where k = message length and n = codeword length. Prior to this work, the best known results for various t-state tampering models were given in Table 1.\n\n\nResult States Rate [CG14b]\n\nn 1 [KOS17] 4 1/3 [Li17]\n\n2 \u2126( 1 logn ) Table 1 As we can see, while 2-split-state NMCs provide the strongest security guarantee, despite significant effort in this direction, we only know how to build them with poor rate of \u2126( 1 logn ). An important observation about the definition of non-malleable codes is that they ensure non-malleability of the codeword of any message, even adversarially chosen ones. However, in most applications of non-malleable codes, such as tamper-resilient security, the message is not adversarially controlled. In fact, it is typically a randomly chosen secret key. With that in mind, in this work, we ask the following question: encoding C. Instead of storing the secret key k directly, we store C in the secret state. The advantage is that this secret state is now reslient to tampering attacks. Of course, this will require us to decode C and regenerate the secret key k whenever we need to use it. Therefore, the applicability of NMREs is for scenarios where key generation is an efficient process.\n\nAs another application of NMREs, we show that NMREs can be used, in a black-box, to improve the current state of the art of standard non-malleable codes. Specifically, we build 3-state Non-malleable Codes with a rate of 1 3 .\n\n\nPrior Work\n\nWe now survey the main results in the area of Non-malleable Codes. For the sake of completeness, we may revisit some of the terminology introduced in the previous section. Informally, a non-malleable code (NMC) [DPW10] provides the following guarantee -a codeword of message m, if tampered, will decode to one of the following:\n\n-\u22a5 i.e., it detects tampering.\n\nthe original message m itself i.e., the tampering did not change the message something independent of m While each of these cases may occur with varying probabilities (for example, a tampering function that maps codeword to identity always results in Case 2), the probability with which these cases occur need to be independent of the underlying message. In [DPW10], the authors observe that it is impossible to build NMCs which are secure against unrestricted tampering. Specifically, a function f (c) def = Enc(Dec(c) + 1) clearly tampers m = Dec(c) into a related m + 1. This necessitates the need to define non-malleable codes with respect to the class of functions they protect against. ( [DPW10] show the existence of non-malleable codes w.r.t tampering families of size less than 2 2 n , where n is the codeword length.)\n\nTampering Families and Rate. One family that has been considered in several works is that of t-state tampering families: here, a codeword consists of t blocks or states and the adversary tampers each of these independently. The family of functions F therefore consists of t-functions f 1 , . . . , f t . For t = n, the model is referred to as the bit-wise tampering model. Dziembowski et al. [DPW10] constructed non-malleable codes resilient against this family. In addition to the class of tampering functions, another important parameter is that of Rate = message length codeword length they achieve. Cheraghchi and Guruswami [CG14b] built an explicit construction of an optimal rate NMC in the bit-wise tampering model. While building NMCs for this model is technically challenging, a disadvantage is that, from a practical stand point, requiring each bit of the codeword to be stored in an independent state makes the model less desirable. Indeed, the best possible t-split state model would be where t = 2. On this front, the first efficient solution was obtained for 1-bit messages by Dziembowski, Kazana and Obremski [DKO13]. The first construction for encoding arbitrary-length messages, was\n\nan \u2126(n \u22126/7 )-rate construction due to Aggarwal \n\n\nOur Results\n\nIn this work, we introduce Non-malleable Randomness Encoders. Informally, NMREs allow for the generation of randomness r along with its corresponding non-malleable encoding C. The non-malleability is, as for standard NMCs, defined with respect to F, a family of tampering functions. Note that any nonmalleable code NMC is, by default, a secure NMRE (simply generate randomness r at random and let the codeword be the output of NMC). The main challenge is in building a rate-optimal, state-optimal NMRE. We give an overview of our construction which uses Information-theoretic one-time message authentication codes (MACs) as well as Randomness Extractors.\n\nRandomness extractors Ext are objects that allow us to generate randomness from a source W with a Min-entropy guarantee using a short seed (s) of true randomness. Message authentication codes MAC = (Tag, Vrfy) are secret key primitives which guarantee that even given Tag(m; k), an adversary cannot generate m , t such that m = m and Vrfy(m , t ) = 1. Our construction makes a black-box use of a 2-split-state non-malleable code NMEnc.\n\nRecall that our goal is to construct a 2-state NMRE with constant rate. For now, consider a 3-state codeword C = W ||L||R where (L, R) \u2190 N M C(s) where W is the source of the extractor and s is a randomly chosen seed. We can see that this is a three-state NMRE resilient to f ID , f 2 , f 3 where f ID is the identity function, f 2 and f 3 are arbitrary functions. The idea is that since L, R is the output of an NMC, any independent tampering of L, R respectively renders a tampered s , if not \u22a5, to be indepdent of s. From here, extractor security can be used-recall that W remains unchanged by our choice of the function familyto argue non-malleability. (This argument isn't trivial. Particularly, to complete it, we must show how Ext(W ; s ) can be simulated to complete the proof of non-malleability. While we don't go into the details, it can be done.) Note also that this argument crucially relies on f 1 being f ID . Indeed, if we let W to be tampered to W , then there is no extractor security. (One can come up with concocted constructions of randomness extractors such that tampering w to a related w and keeping s the same, can result in a related extractor output.) To prevent tampering of W , we use a one-time message authentication code: we let (L, R) \u2190 N M C(s, k, Tag k (W )). This gives us a 3-split-state construction (C = W ||L||R), i.e., one that is resilient to (f 1 , f 2 , f 3 ) where each f i acts independently on each state.\n\nWe note that our techniques are similar in spirit to those of [KOS17]'s 4-state NMC. However, our goal here is to build 2-state NMREs. So, on the one hand, we can leverage the fact that the security we are trying to achieve is weaker. On the other hand, the task of bringing down the number of states to 3 while retaining good rate is challenging. To bring down the number of states in our current proposed 3-state NMRE, we wish to explore possibility of combining two of the states. Can we combine W with, say, L? Without going into too much detail regarding the definition of a NMC, an adversary breaking non-malleability can be viewed as consisting of two parts: one that specifies the tampering functions and the other that actually distinguishes the output of the tampering experiment from the simulated experiment.\n\nWhen we combine W with L, to use the underlying NMC, we would need to be able to do two things: a) specify the tampering functions that act on L and R and b) use the distinguisher of the NMRE to build a distinguisher for the NMC. Indeed, the former can be done by merely hardwiring the value of W . Unfortunately, we will not be able to use the distinguisher for the NMRE for the simple reason that we won't know how W was tampered. It is for this reason that we require our NMCs to satisfy a stronger property of \"augmented non-malleability\". An augmented nonmalleable code is one that remains nonmalleable even when the adversary, after specifying the tampering function, additionally obtains one of the states along with the decoded (tampered) message. In our proof, we carefully use the augmented non-malleability of the underlying NMC to argue non-malleability of 2-split state NMRE.\n\nThe question still remains of how to instantiate the underlying augmented NMC. We note that the Augmented Non-malleable Codes due to [ADL14] would, asymptotically, indeed give us a constant-rate solution. However, the parameters would be less desirable in terms of tradeoffs between the error and the rate. (Given that this isn't our final construction, a more detailed parameter calculation would be tedious.) To overcome these shortcomings, we instead resort to Li's 2-state construction which has the so-far best-known rate. Since Li only proves the standard non-malleability of his scheme, in Appendix A, we give a proof that it is indeed augmented non-malleable. (This follows by revisitig the connection between seedless non-malleable extractors and non-malleable codes due to [CG14b] and reproving it to achieve augmented non-malleability from strong NME.) Combining this with the outline laid out above, we get our final NMRE construction.\n\nBuilding NMCs from NMRE as a black-box. Our next goal is to use NMREs in a black-box to build NMCs for arbitrary messages m. To do so, we use the \"random message\" encoded as a part of the NMRE to both compute the ciphertext (using a one-time pad) c = Enc ke (m) as well as authenticate the ciphertext i.e., compute t = Tag k2 (Enc ke (m)). In order to build it in a black-box using the NMRE, it is important that we do not use anything pertaining to the message m in our underlying NMRE. The codeword now needs to have the codeword of NMRE and, additionally, c, t. In the proof, we show that the non-malleability of k a , k e essentially suffices to argue the over-all non-malleability and achieve constant rate. Further we show that c, t can stored jointly in a single state giving us a 3-state NMC for arbitrary messages with rate 1/3.\n\n\nOrganization of the Paper\n\nWe write preliminaries and building blocks in Sections 2 and 3. We give definition of NMRE in Section 4.1, an explicit construction of NMRE in 4.3, security proof of the construction in Section 4.4, instantiate it and analyze rate and error in rest of the Section 4 . We show how to build a 3-state augmented non-malleable code from an NMRE, prove security, instantiate and analyze in Sections 5.1,5.2 and 5.3 respectively. We add concluding remarks in Section 6. Appendix B gives details about [Li17]'s 2-state NMC being augmented.\n\n\nPreliminaries\n\nNotation. \u03ba denotes security parameter throughout. s \u2208 R S denotes uniform sampling from set S. x \u2190 X denotes sampling from a probability distribution X. x||y represents concatenation of two binary strings x and y. |x| denotes length of binary string x. U l denotes the uniform distribution on {0, 1} l . All logarithms are base 2.\n\nStatistical distance and Entropy. Let X 1 , X 2 be two probability distributions over some set S. Their statistical distance is\nSD (X 1 , X 2 ) def = max T \u2286S {Pr[X 1 \u2208 T ] \u2212 Pr[X 2 \u2208 T ]} = 1 2 s\u2208S Pr X1 [s] \u2212 Pr X2 [s] (they are said to be \u03b5-close if SD (X 1 , X 2 ) \u2264 \u03b5 and denoted by X 1 \u2248 \u03b5 X 2 ). The min-entropy of a random variable W is H \u221e (W ) = \u2212 log(max w Pr[W = w]). For a joint distribution (W, E), define the (average) conditional min-entropy of W given E [DORS08] as H \u221e (W |E) \u2265 t.\nWe now state some Lemmata about statistical distance and average entropy loss.\n\nProposition 1. Let A 1 , ..., A n be mutually exclusive and exhaustive events. Then, for probability distributions X 1 , X 2 over some set S, we have: We now state the definition of non-malleable codes, as given in [CG14b].\nSD (X 1 , X 2 ) \u2264 n i=1 Pr[A i ].SD (X 1 |A i , X 2 |A i ) where X j |A i is the distribution of X j conditioned on the event A i . Lemma 1. For any random variables A, B, C if (A, B) \u2248 (A, C), then B \u2248 C Lemma 2. For any random variables A, B if A \u2248 B, then for any function f, f (A) \u2248 f (B) Lemma 3. [KOS17] Let A, B be correlated random variables over A, B. For randomized functions F : A \u2192 X , G : A \u2192 X (randomness used is independent of B) if \u2200 a \u2208 A, F (a) \u2248 G(a), then (B, A, F (A)) \u2248 (B, A, G(A)) Lemma 4. [DORS08] If B has at most 2 \u03bb possible values, then H \u221e (A | B) \u2265 H \u221e (A, B) \u2212 \u03bb \u2265 H \u221e (A) \u2212 \u03bb. and, more generally, H \u221e (A | B, C) \u2265 H \u221e (A, B | C) \u2212 \u03bb \u2265 H \u221e (A | C) \u2212 \u03bb 2.1 Definitions\nDefinition 2. A coding scheme (Enc, Dec) with message and codeword spaces as {0, 1} l , {0, 1} n respectively, is -non-malleable with respect to a function family\nF \u2286 {f : {0, 1} n \u2192 {0, 1} n } if \u2200 f \u2208 F, \u2203 a distribution Sim f over {0, 1} l \u222a {same * , \u22a5} such that \u2200 m \u2208 {0, 1} l Tamper m f \u2248 Copy m Sim f\nwhere Tamper m f denotes the distribution Dec(f (Enc(m))) and Copy m Sim f is defined asm\n\u2190 Sim f Copy m Sim f = m ifm = same * m otherwise\nSim f should be efficiently samplable given oracle access to f (.).\n\nWe now generalize the definition of 2-state augmented-NMC as defined in [AAG + 16], to a j-augmented NMC for t-split state family, i.e., j of the t-states is also simulatable independent of the message (where j < t).\n\nDefinition 3. A coding scheme (Enc, Dec) with message and codeword spaces as\n{0, 1} \u03b1 , ({0, 1} \u03b2 ) t respectively, is [ , j]-augmented-non-malleable (where j < t) with respect to the function family F = {(f 1 , \u00b7 \u00b7 \u00b7 , f t ) : f i : {0, 1} \u03b2 \u2192 {0, 1} \u03b2 } if \u2200 (f 1 , \u00b7 \u00b7 \u00b7 , f t ) \u2208 F, \u2203 a distribution Sim f1,\u00b7\u00b7\u00b7 ,ft over ({0, 1} \u03b2 ) j \u00d7 ({0, 1} \u03b1 \u222a {same * , \u22a5}) such that \u2200 m \u2208 {0, 1} \u03b1 Tamper m f1,\u00b7\u00b7\u00b7 ,ft \u2248 Copy m Sim f 1 ,\u00b7\u00b7\u00b7 ,f t where Tamper m f,g denotes the distribution (X i1 , \u00b7 \u00b7 \u00b7 , X ij , Dec(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t ))), where Enc(m) = (X 1 , \u00b7 \u00b7 \u00b7 , X t ) and (X i1 , \u00b7 \u00b7 \u00b7 , X ij ) represents some j states of the total t states. Copy m Sim f 1 ,\u00b7\u00b7\u00b7 ,f t is defined as (X i1 , \u00b7 \u00b7 \u00b7 , X ij ,m) \u2190 Sim f1,\u00b7\u00b7\u00b7 ,ft Copy m Sim f 1 ,\u00b7\u00b7\u00b7 ,f t = (X i1 , \u00b7 \u00b7 \u00b7 , X ij , m) if (X i1 , \u00b7 \u00b7 \u00b7 , X ij ,m) = (X i1 , \u00b7 \u00b7 \u00b7 , X ij , same * ) (X i1 , \u00b7 \u00b7 \u00b7 , X ij ,m) otherwise\nSim f1,\u00b7\u00b7\u00b7 ,ft should be efficiently samplable given oracle access to (f 1 , \u00b7 \u00b7 \u00b7 , f t )(.).\n\n\nBuilding blocks\n\nWe use information-theoretic message authentication codes, strong average case extractor and an augmented non-malleable code for 2-split-state family , as building blocks to our construction. We define these building blocks below.\n\n\nOne-Time Message Authentication Codes\n\nA family of pair of functions {Tag ka : \n{0, 1} \u03b3 \u2192 {0, 1} \u03b4 , Vrfy ka : {0, 1} \u03b3 \u00d7 {0, 1} \u03b4 \u2192 {0, 1}} ka\u2208{0,1} \u03c4 is said to be a \u00b5 \u2212 secure one time MAC if 1. For k a \u2208 R {0, 1} \u03c4 , \u2200 m \u2208 {0, 1} \u03b3 , Pr[Vrfy ka (m, Tag ka (m)) = 1] = 1 2. For any m = m , t, t , Pr ka [Tag ka (m) = t|Tag ka (m ) = t ] \u2264 \u00b5 for k a \u2208 R {0,(W |I) \u2265 t, we have SD ((Ext(W ; X), X, I), (U, X, I)) , where X is uniform on {0, 1} d .\nWe now formally define non-malleable randomness encoding and give a construction for the same.\n\n\nDefinition\n\nWe first formalize the definition of a non-malleable randomness encoder. The goal is to argue that the original message looks random, even given the modified message. But, here the message and the codeword are both generated within the tampering experiment and the experiment outputs the message along with the modified message. This is where the non-malleability definition will defer from the regular NMC definition 2. We capture the goal by saying that, we are able to simulate the modified message, such that its joint distribution with a message chosen independently uniformly at random is statistically close to the tampering experiment's output. The case where the simulator outputs same * is a technicality, which we address in the definition below.\nDefinition 5. Let (NMREnc, NMRDec) be s.t. NMREnc : {0, 1} r \u2192 {0, 1} k \u00d7 ({0, 1} n1 \u00d7 {0, 1} n2 ) is defined as NMREnc(r) = (NMREnc 1 (r), NMREnc 2 (r)) = (m, (x, y)) and NMRDec : {0, 1} n1 \u00d7 {0, 1} n2 \u2192 {0, 1} k .\nWe say that (NMREnc, NMRDec) is a -non-malleable randomness encoder with message space {0, 1} k and codeword space {0, 1} n1 \u00d7{0, 1} n2 , for the distribution R on {0, 1} r with respect to the 2-split-state family F if the following is satisfied:\n\n-Correctness:\nPr r\u2190R [NMRDec(NMREnc 2 (r)) = NMREnc 1 (r)] = 1 -Non-malleability: For each (f, g) \u2208 F, \u2203 a distribution NMRSim f,g over {0, 1} k \u222a {same * , \u22a5} such that NMRTamper f,g \u2248 Copy(U k , NMRSim f,g )\nwhere\nNMRTamper f,g denotes the distribution (NMREnc 1 (R), NMRDec((f, g)(NMREnc 2 (R))) 1 and Copy(U k , NMRSim f,g ) is defined as: u \u2190 U k ;m \u2190 NMRSim f,g Copy(u,m) = (u, u), ifm = same * (u,m), otherwise\nNMRSim f,g should be efficiently samplable given oracle access to (f, g)(.).\n\nFurther, the rate of this code is defined as k/(n 1 + n 2 ) While the non-malleability condition above, in flavor, resembles the seedless nonmalleable extractors (the decoder function in the above protocol behaves like a seedless non-malleable extractor), the key difference is that, here the two states being tampered are correlated (through the encoder), while in a 2-source seedless NME, the sources need to be independent.\n\n\nNotation\n\n-NMEnc, NMDec be an [\u03b5 1 , 1]-augmented-non-malleable code for 2-split state family over message and codeword spaces as {0, 1} \u03b1 , {0, 1} \u03b21 \u00d7 {0, 1} \u03b22 respectively (as in Def 3), with the message length \u03b1 and the length of the 2 states, \u03b2 1 , \u03b2 2 , respectively. NMTamper m f,g , NMSim f,g denote the tampered message distribution of m and the simulator of NMEnc, NMDec with respect to tampering functions (f, g) -Tag , Vrfy be an information theoretic \u03b5 2 -secure one time MAC over key, message, tag spaces as {0, 1} \u03c41 , {0, 1} n , {0, 1} \u03b41 respectively. -Ext be an (n, t, d, l + \u03c4, \u03b5 3 ) average case strong extractor.\n\nThe parameters will be chosen such that \u03b1 = \u03c4 1 + \u03b4 1 + d and n > 2 + l + \u03c4 + t. (Refer to Section 4.5 for details)\n\n\nConstruction Overview\n\nWe now build a non-malleable randomness encoder, where the randomness is generated as the output of an extractor. To encode the seed, we use a regular 2-state aug-NMC. As mentioned in the introduction, in order to ensure that the source is not modified, when the seed is the same, we authenticate it using a MAC and encode the MAC key and tag along with the seed. In addition, to obtain a 2-state code, we combine the source with one of the states of the underlying aug-NMC.\n\n\nNMREnc(r) :\n\n-Parse r as s||w||k a1 k e ||k a2 = Ext(w; s) t 1 = Tag ka 1 (w) -(L, R) \u2190 NMEnc(k a1 ||t 1 ||s) -O/P: (k e ||k a2 , (L||w, R)) NMRDec(L||w, R) :\n-k a1 ||t 1 ||s = NMDec(L, R) -If k a1 ||t 1 ||s = \u22a5 output \u22a5 -else if Vrfy ka 1 (w, t 1 ) = 1\nOutput Ext(w, s) else Output \u22a5 Theorem 1. Let NMEnc, NMDec be an [\u03b5 1 , 1]-augmented-non-malleable code for the 2-split state family, Tag , Vrfy be an information theoretic \u03b5 2 -secure one time MAC given above. Let Ext be an (n, t, d, l + \u03c4, \u03b5 3 ) average case strong extractor. Let \u03b1 = \u03c4 1 + \u03b4 1 + d and n > 2 + l + \u03c4 + t. Then (NMREnc, NMRDec) is a non-malleable randomness encoding for the uniform distribution on {0, 1} d+n+\u03c41 , with respect to the 2-split-state family. Further, the above construction can be instantiated, as in Section 4.5, to achieve a constant rate of 1 2 + \u03b6 , for any \u03b6 > 0 and an error of 2 \u2212\u2126(l/ log \u03c1+1 l) , for any\n\u03c1 > 0.\nProof. We give the proof in two steps. Firstly, we prove that the proposed construction is a non-malleable randomness encoding scheme (Section 4.4). Secondly, we set the parameters to achieve the desired rate and error (Section 4.5).\n\n\nSecurity proof\n\nDefine the 2-split-state tampering family for the above construction as\nF = {(f, g) : f : {0, 1} \u03b21 \u00d7 {0, 1} n \u2192 {0, 1} \u03b21 \u00d7 {0, 1} n , g : {0, 1} \u03b22 \u2192 {0, 1} \u03b22 }\nCorrectness of the construction follows by its definition.\n\nTo show that (NMREnc, NMRDec) satisfies non-malleability, we need to show that \u2200 (f, g) \u2208 F, \u2203 NMRSim f,g such that\nNMRTamper f,g \u2248 \u03b5 Copy(U k , NMRSim f,g ).\nLet f, g \u2208 F. We define the simulator NMRSim f,g as follows:\n\nNMRSim f,g : // where f L is the function f with L hardcoded.// 4. Ifk a1 ||t 1 ||s = same * :\n1. w \u2208 R {0,\n\u2022 Ifw = w output same * \u2022 else output \u22a5 5. Else if Vrfy k a 1 (w,t 1 ) = 1 output Ext(w;s) 6. Else output \u22a5 We now prove the closeness of NMRTamper f,g and Copy(U k , NMRSim f,g ) through a sequence of hybrids:\nNMRTamper f,g : 1. r \u2208 R {0, 1} d+n+\u03c41 ;\nParse r as s||w||k a1 2. t 1 = Tag ka 1 (w) 3. (L,k a1 ||t 1 ||s) \u2190 NMTamper ka 1 ||t1||s fw,g 4.w = f L (w) 5. k e ||k a2 = Ext(w; s) 6. If Vrfy k a 1 (w,t 1 ) = 1 output k e ||k a2 , Ext(w;s) 7. Else output k e ||k a2 , \u22a5.\n\nHybrid1 f,g :\n1. r \u2208 R {0, 1} d+n+\u03c41\nParse r as s||w||k a1 2. t 1 = Tag ka 1 (w) 3. (L,k a1 ||t 1 ||s) \u2190 NMSim fw,g Ifk a1 ||t 1 ||s = same * , setk a1 ||t 1 ||s = k a1 ||t 1 ||s 4.w = f L (w) 5. k e ||k a2 = Ext(w; s) 6. If Vrfy k a 1 (w,t 1 ) = 1 output k e ||k a2 , Ext(w;s) Else output k e ||k a2 , \u22a5.\n\nHybrid2 f,g :\n1. s||w \u2208 R {0, 1} d+n 2. (L,k a1 ||t 1 ||s) \u2190 NMSim fw,g 3.w = f L (w) 4\n. k e ||k a2 = Ext(w; s) 5. Ifk a1 ||t 1 ||s = same * :\n\n\u2022 Ifw = w output k e ||k a2 , k e ||k a2 \u2022 else output k e ||k a2 , \u22a5 Else if Vrfy k a 1 (w,t 1 ) = 1 output k e ||k a2 , Ext(w;s) Else output k e ||k a2 , \u22a5 Hybrid3 f,g :\n\n1. w \u2208 R {0, 1} n 2. (L,k a1 ||t 1 ||s) \u2190 NMSim fw,g 3.w = f L (w) 4. k e ||k a2 \u2208 R {0, 1} l+\u03c4 5. Ifk a1 ||t 1 ||s = same * :\n\n\u2022 Ifw = w output k e ||k a2 , k e ||k a2 \u2022 else output k e ||k a2 , \u22a5 Else if Vrfy k a 1 (w,t 1 ) = 1 output k e ||k a2 , Ext(w;s) Else output k e ||k a2 , \u22a5 Claim 1. If (NMEnc, NMDec) is a \u03b5 1 -augmented-non-malleable code, then NMRTamper f,g \u2248 \u03b51 Hybrid1 f,g .\n\nProof. By augmented non-malleability of (NMEnc, NMDec), we get NMTamper ka 1 ||t1||s fw,g \u2248 \u03b51 Copy ka 1 ||t1||s NMSim fw ,g By using Lemma 3, we get w, k a1 ||t 1 ||s, NMTamper ka 1 ||t1||s fw,g \u2248 \u03b51 w, k a1 ||t 1 ||s, Copy ka 1 ||t1||s NMSim fw ,g Proof. If same * is not the value sampled from NMSim h1,h2 , then the output of the two hybrids are identical. Therefore, the statistical distance is zero in this case. When same * is sampled, the key difference between Hybrid1 f,g and Hybrid2 f,g is that, corresponding to this case, we remove the two verify checks in Hybrid2 f,g and simply replace it with the equality checks. Intuitively, in this case, the statistical closeness would hold due to unforgeability of MAC. The full proof can be found in Appendix A.1.\n\nClaim 3. If Ext is an (n, t, d, l + \u03c4, \u03b5 3 ) average case extractor, then Hybrid2 f,g \u2248 \u03b53 Hybrid3 f,g . 2 Proof. We first consider the following random variables, which capture the auxiliary information. We then use extractor security and Lemma 2 to prove the closeness of the two hybrids. We consider the output of NMSim fw,g , which is (L,k a1 ||t 1 ||s) and define the following random variables, dependent on this: We start with b same * , which indicates whether NMSim fw,g has output same * or not b same * = 1 ifk a1 ||t 1 ||s = same * 0 otherwise Further, b \u22a5 is an indicator of whether NMSim fw,g output \u22a5 or not.\n\nb \u22a5 = 1 ifk a1 ||t 1 ||s = \u22a5 0 otherwise\n\nWe also have:\neq(w) = 0 if f L (w) = w 1 if f L (w) = w\nwhich is an indicator of whetherw is modified or not. And,\nV erif y(w) = Vrfy k a 1 (f L (w),t 1 )\nwhich is the indicator of the MAC verification bit. Further define:\nY (w, b 1 , b 2 ) := \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 eq(w) if b 1 = 1 (V erif y(w), Ext(w;s)) if b 1 = 0 \u2227 b 2 = 0 \u22a5 otherwise\nWe now define the auxiliary information by\u00ca = (b same * , b \u22a5 , Y (W, b same * , b \u22a5 )). We now define the following function G(e, k) :\n-Parse e = (b same * , b \u22a5 , y = Y (w, b same * , b \u22a5 )) 3 . -If b same * = 1: \u2022 If y = 1, output (k, k)\n\u2022 Else output (k, \u22a5) -Else:\n\n\u2022 If b \u22a5 = 1, output (k, \u22a5).\n\n\u2022 Else parse y = (V erif y(w), Ext(w;s)). * if V erif y(w) = 1 output (k, Ext(w;s)) * else output (k, \u22a5)\n\nThe outputs of Hybrid2 f,g and Hybrid3 f,g are G(\u00ca, Ext(W ; S)) and G(\u00ca, U l+\u03c4 ) respectively, where G is deterministic. So, to prove this claim it suffices to sho\u0175\nE, Ext(W ; S) \u2248 \u03b53\u00ca , U l+\u03c4(1)\nObserve that\u00ca depends on NMSim fw,g and w, which are independent of the seed s. Therefore it can be captured as auxiliary information.\u00ca takes at most 2 3+l+\u03c4 possible values. Hence, H \u221e (W |\u00ca) \u2265 H \u221e (W ) \u2212 (3 + l + \u03c4 ) = n \u2212 (3 + l + \u03c4 ), by Lemma 4. As n \u2212 (3 + l + \u03c4 ) > t (due to the way we set parameters in section 4.5), by security of average case extractor, Equation 1 holds. This proves the claim.\n\nFrom above Claims 1,2 and 3, we get:\nNMRTamper f,g \u2248\u03b5 1 Hybrid1 f,g \u2248\u03b5 2 Hybrid2 f,g \u2248\u03b5 3 Hybrid3 f,g \u2261 Copy(U k , NMRSim f,g )\ni.e., NMRTamper f,g \u2248 \u03b51+\u03b52+\u03b53 Copy(U k , NMRSim f,g )\n\n\nRate and Error analysis\n\nWe now present the details of the rate of the code as well as the error it achieves. We instantiate the above construction using specific MAC construction, average case extractor Ext and non-malleable code (NMEnc, NMDec), as given in the lemmata below. As we are encoding the seed of the extractor using the underlying non-malleable code, it is important that the strong extractor we use has short seed length. This is guaranteed by the following lemma. Now, as we give some auxiliary information about the source, we require the security of the extractor to hold, even given this information. Hence, we use average case extractors, given in the following lemma.\n\nLemma 6. [DORS08] For any \u00b5 > 0, if Ext is a (worst case)(n, t, d, l, )\u2212strong extractor, then Ext is also an average-case (n, t + log( 1 \u00b5 ), d, l, + \u00b5) strong extractor.\n\nWe now combine the Lemmata 5 and 6 to get an average case extractor with optimal seed length. Now, we also encode the authentication keys and tags using the underlying nonmalleable code. Hence, we require them to have short lengths. This is guaranteed by the following lemma [JKS93]:\n\nLemma 7. For any n , \u03b5 2 > 0 there is an efficient \u03b5 2 \u2212secure one time MAC with \u03b4 \u2264 (log(n ) + log( 1 \u03b5 2 )), \u03c4 \u2264 2\u03b4, where \u03c4, n , \u03b4 are key, message, tag length respectively. Further, we show in Appendix B (Corollary 2) that the construction corresponding to Lemma 8 is in fact an [2 \u2212\u2126(\u03b2/log \u03b2) , 1]-augmented-non-malleable code for the two split-state family with the same rate as above.\n\n\nSetting parameters\n\nWe instantiate our construction using (NMEnc, NMDec) as in Corollary 2, strong average case extractors, as in Corollary 1 and one time information theoretic MAC, as in Lemma 7.\n\n-We set the error parameters as , \u00b5, \u03b5 1 , \u03b5 2 = 2 \u2212\u03bb and \u03b5 3 = + \u00b5.\n\n-The message length and codeword length in the construction of (NMREnc, NMRDec) above, are l + \u03c4 and 2\u03b2 + n respectively. Here we take k a2 to be of size \u03c4 = O(log l + \u03bb). -We estimate the length of the source (n). As we saw in the Claim 3 of the proof (Section 4.4), we leak auxiliary information of length at most 3 + l + \u03c4 . Hence, by Lemma 4, the average entropy of the source, given auxiliary information is \u2265 n \u2212 (3 + l + \u03c4 ).\n\nTo use extractor security, we require that the average entropy is at least the entropy threshold t + log( 1 \u00b5 ), i.e., n \u2212 (3 + l + \u03c4 ) \u2265 t + log( 1 \u00b5 ). By Corollary 1 (with output length of extractor l + \u03c4 ), we have\nt = (l + \u03c4 + O(log(n) + log( 1 ))) 1 1 \u2212 \u03bd .\nHence, taking \u03bd as a very small constant close to 0, we get: for some constant \u03b6 close to 0 n = (2 + \u03b6)l + O(log l + \u03bb)\n\n(2)\n\n-We now estimate the codeword length 2\u03b2, of the underlying NMC. The message size for this codeword is \u03b1 = \u03c4 1 + \u03b4 1 + d. By Lemma 7 and Corollary 1, we get \u03b1 = O(log(l) + \u03bb). By using the rate in Lemma 8, we get:\n\u03b2 = O((log(l)) 2 + \u03bb log(\u03bb) + 2\u03bb log(l)) (3)\n\nRate\n\nThe rate of our construction of non-malleable randomness encoding is:\nR = l + \u03c4 2\u03b2 + n\nBy substituting n and \u03b2 from Equations 2 and 3, respectively and \u03c4 as described above, we get:\nR = l + O(log l + \u03bb) O((log(l)) 2 + \u03bb log(\u03bb) + 2\u03bb log(l)) + (2 + \u03b6)l + O(log l + \u03bb)\nFor large l, and taking \u03bb = o( l log l ), we get R \u2265 1 2 + \u03b6 Hence, the construction given achieves rate atleast 1 2+\u03b6 , for some \u03b6 close to 0.\n\n\nError\n\nError of the protocol, as seen in the proof, is \u03b5 1 +\u03b5 2 +\u03b5 3 = 4(2 \u2212\u03bb ). Since, \u03bb = o( l log l ), the error will be at least 2 \u2212 l log l . For any \u03c1 > 0, fixing \u03bb = l log \u03c1+1 l , the error would be at most 4.2 \u2212 l log \u03c1+1 l . Setting \u03ba = \u03bb \u2212 log 5 the error would be 2 \u2212\u03ba = 2 \u2212\u2126(l/ log \u03c1+1 l) .\n\n\nNon-malleable Codes from Non-malleable Randomness Encoders\n\nAs an application of non-malleable randomness encoding, we build a 3-state 1-augmented-non-malleable code, using non-malleable randomness encoding in black-box. For achieving an explicit constant rate and a specific error, we instantiate the construction using the construction in Section 4.\n\n\nConstruction overview\n\nTo encode the message, we first hide the message using one part of the randomness generated in the underlying NMRE. To ensure that this ciphertext is not modified, we authenticate it using a MAC. We show that we can use NMRE's \"random messages\" as the keys for encryption as well authentication. The fact that the tag t does not need to be non-malleably encoded, and can instead be combined with c, is what allows us to get a 3-state NMC construction while only making a black-box use of the underlying NMRE. Details follow.\nAEnc(m) -r \u2208 R {0, 1} r -(k a ||k e , y 1 , y 2 ) \u2190 NMREnc(r) -c = m \u2295 k e -t = Tag ka (c) -Output (y 1 , y 2 , c||t) ADec(\u1ef9 1 ,\u1ef9 2 ,c||t)\n-k e ||k a = NMRDec(\u1ef9 1 ,\u1ef9 2 ) -If Vrfyk a (c,t) = 1 Outputc \u2295k e else Output \u22a5 Theorem 2. Let (NMREnc, NMRDec) be a 2-state 1 -non-malleable randomness encoding scheme for the uniform distribution on {0, 1} r , for messages in {0, 1} l+\u03c4 and (Tag, Vrfy) be an information theoretic 2 -secure onetime MAC with key, message and tag spaces being {0, 1} \u03c4 , {0, 1} l , {0, 1} \u03b4 . Then (AEnc, ADec), as defined above, is a 3-state [ 1 + 2 , 1]-augmented non-malleable code for messages of length l(with the augmented state being c||t). Further, instantiating the construction with (NMREnc, NMRDec) achieving rate and error, as in Section 4.5, we can achieve a constant rate of 1 3+\u03b6 , for any \u03b6 > 0 and an error of 2 \u2212\u2126(l/ log \u03c1+1 l) , for any \u03c1 > 0.\n\n\nSecurity Proof\nLet (f 1 , f 2 , g) \u2208 F 3 (3-split state tampering family) where f 1 : {0, 1} \u03b21 \u2192 {0, 1} \u03b21 , f 2 : {0, 1} \u03b22 \u2192 {0, 1} \u03b22 , g : {0, 1} l+\u03b4 \u2192 {0, 1} l+\u03b4 .\nWe propose the following distribution as simulator for (AEnc, ADec).\nASim f1,f2,g -k e ||k a \u2208 R {0, 1} l+\u03c4 -k e ||k a \u2190 NMRSim f1,f2 -c = 0 \u2295 k e -t = Tag ka (c) -c||t = g(c||t)\n-Ifk e ||k a = same * Ifc = c, Output c, t, same * Else output c, t, \u22a5 Else if Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5\n\nWe prove that ASim f1,f2,g is the simulator of (AEnc, ADec) through a sequence of hybrids.\n\nClaim 1 If (NMREnc, NMRDec) is a non-malleable randomness encoding scheme, then ATamper m f1,f2,g \u2248 1 Hybrid1 m f1,f2,g .\n\nProof. By non-malleability of (NMREnc, NMRDec), we have\nNMRTamper f1,f2 \u2248 1 Copy(U k , NMRSim f1,f2 )\nAs m is independent we have m, NMRTamper f1,f2 \u2248 1 m, Copy(U k , NMRSim f1,f2 )\n\nBy Lemma 2 we have, m, c, t, NMRTamper f1,f2 \u2248 1 m, c, t, Copy(U k , NMRSim f1,f2 )\n\nThe outputs of ATamper m f1,f2,g , Hybrid1 m f1,f2,g are determined by a deterministic function of above distributions. Therefore by Lemma 2 we have m, ATamper m f1,f2,g \u2248 1 m, Hybrid1 m f1,f2,g ATamper m f1,f2,g k e ||k a ,k e ||k a \u2190 NMRTamper f1,f2\n-c = m \u2295 k e -t = Tag ka (c) -c||t = g(c||t) -If Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5 Hybrid1 m f1,f2,g -k e ||k a \u2208 R {0, 1} l+\u03c4 -k e ||k a \u2190 NMRSim f1,f2 -Ifk e ||k a = same * setk e ||k a = k e ||k a -c = m \u2295 k e -t = Tag ka (c) -c||t = g(c||t) -If Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5 Hybrid2 m f1,f2,g -k e ||k a \u2208 R {0, 1} l+\u03c4 -k e ||k a \u2190 NMRSim f1,f2 -c = m \u2295 k e -t = Tag ka (c) -c||t = g(c||t) -Ifk e ||k a = same * setk e ||k a = k e ||k a -If Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5 Hybrid3 m f1,f2,g -k e ||k a \u2208 R {0, 1} l+\u03c4 -k e ||k a \u2190 NMRSim f1,f2 -c = m \u2295 k e -t = Tag ka (c) -c||t = g(c||t) -Ifk e ||k a = same * Ifc = c Output c, t, m Else output c, t, \u22a5 Else if Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5 Hybrid4 m f1,f2,g -k e ||k a \u2208 R {0, 1} l+\u03c4 -k e ||k a \u2190 NMRSim f1,f2 -c = 0 \u2295 k e -t = Tag ka (c) -c||t = g(c||t)\n-Ifk e ||k a = same * Ifc = c Output c, t, m Else output c, t, \u22a5 Else if Vrfyk a (c,t) = 1 Output c, t,c \u2295k e Else Output c, t, \u22a5 Claim 2 Hybrid1 m f1,f2,g \u2261 Hybrid2 m f1,f2,g\n\nProof. The claim trivially follows because Hybrid2 m f1,f2,g is rewriting of Hybrid1 m f1,f2,g . k e , k a , NMRSim f1,f2 \u2261 k e , k a , NMRSim f1,f2 m, c, t, k e , k a , NMRSim f1,f2 \u2261 m, c, t, k e , k a , NMRSim f1,f2 m, Hybrid1 m f1,f2,g \u2261 m, Hybrid2 m f1,f2,g All equations follow by Lemma 2\n\nClaim 3 If (Tag, Vrfy) is an 2 IT-secure-One-time Mac, then Hybrid2 m f1,f2,g \u2248 2 Hybrid3 m f1,f2,g Proof. Let E denote the eventk e ,k a = same * , and\u1ebc, its compliment. Given E, both the hybrids are identical. Given\u1ebc the statistical distance of the hybrids is at most Pr\nka [Vrfy ka (c,t) = 1|t = Tag ka (c),c||t = f (c||t)] \u2264 2\nTherefore claim follows.\n\n\nClaim 4 By semantic security of One Time Pad encryption\n\nHybrid3 m f1,f2,g \u2261 Hybrid4 m f1,f2,g\n\nProof. By semantic security,\nm, m \u2295 k e \u2261 m, 0 \u2295 k e m, t, m \u2295 k e , k a \u2261 m, t, 0 \u2295 k e , k a\nThe outputs of the hybrids 3 and 4 are a randomized function of above distributions. Therefore\n\nHybrid3 m f1,f2,g \u2261 Hybrid4 m f1,f2,g \u2261 Copy m\n\nAsim f 1 ,f 2 ,g\n\nCombining the above Claims 1,2,3 and 4, we have\n\nATamper m f1,f2,g \u2248 1+ 2 Copy m Asim f 1 ,f 2 ,g\n\n\nRate and error analysis\n\nFrom Section 4.5, we have a non-malleable randomness encoding (NMREnc, NMRDec) with a constant rate of R \u2265 1 2 + \u03b6 , for any \u03b6 > 0 and an error of 1 = 2 \u2212\u2126(l/ log \u03c1+1 l) , for any \u03c1 > 0.\n\n\nRate\n\nThe rate of (AEnc, ADec) is:\nR = l 1 R .(l + \u03c4 ) + l + \u03b4 = l (2 + \u03b6).(l + \u03c4 ) + l + \u03b4\nwhere, \u03b4 is size of tag t. Hence, R = l (3 + \u03b6)l + (2 + \u03b6)\u03c4 + \u03b4 By using Lemma 7, we know that for \u03bb = o(l/ log l), we get \u03c4 + \u03b4 \u2264 3(log l + o(l/ log l)). Hence, we get, for large l: R \u2265 1 3 + \u03b6 5.3.2 Error By setting 2 = 2 \u2212\u03bb , we get that the error of (AEnc, ADec) is 1 + 2 = 2 \u2212\u2126(l/ log \u03c1+1 l) , for any \u03c1 > 0.\n\n\nConclusion\n\nIn this work, we introduced Non-malleable Randomness Encoders as a relaxation of NMCs, applicable in settings where randomness is encoded. We built a 1/2-rate, 2-state NMRE. In cases where NMREs suffice, this presents a significant advantage over using a poor-rate 2-state NMC. It would be interesting to find other applications of NMREs in addition to the ones presented in this paper i.e., to tamper-resilient security and to building 3-state (standard) with rate 1 3 in a black-box. (Infact, our techniques can be generalized to show that (t + 1)-state augmented NMCs can be constructed from t-state NMREs in black box manner.) While we know that the optimal achievable rate for 2-state NMCs is 1/2, it would be interesting to see what the optimal achievable rate for 2-state NMREs is and, more generally, for t-state NMREs. Of course, the crux of this long, compelling line of research, which is to build constant rate efficient 2-state NMCs, still remains open and would be fascinating to solve. A Proofs of Claims 2 and 3 in Section 4.4\n\nA.1 Proof of Claim 2 in Section 4.4\n\nWe define the following events:\n\n-Let E be the event that same * is sampled from NMSim fw,g and\u1ebc be its compliment.\n\n-Let F be the event thatw = w andF its complement.\n\nBy Proposition 1 we get:  Claim 3. If Ext is an (n, t, d, l + \u03c4, \u03b5 3 ) average case extractor, then Hybrid2 f,g \u2248 \u03b53 Hybrid3 f,g .\nSD\nProof. As the function modifying the state L, f w , is dependent on W , hence NMSim fw,g is also dependent on W . Hence, before analyzing the auxiliary information leaked in each case, corresponding to the value of NMSim fw,g , we define the following indicator random variables, which are also auxiliary information, w.r.t. to the source W :\nb same * = 1 ifk a1 ||t 1 ||s = same * 0 otherwise b \u22a5 = 1 ifk a1 ||t 1 ||s = \u22a5 0 otherwise\nBy Proposition 1, we get: SD Hybrid2 f,g , Hybrid3 f,g \u2264 P r[bsame * = 1] SD Hybrid2 f,g |bsame * = 1, Hybrid3 f,g |bsame * = 1\n+ P r[bsame * = 0 \u2227 b \u22a5 = 1] SD \uf8eb \uf8ed Hybrid2 f,g ; Hybrid3 f,g |bsame * = 0 \u2227 b \u22a5 = 1 \uf8f6 \uf8f8 + P r[bsame * = 0 \u2227 b \u22a5 = 0] SD \uf8eb \uf8ed Hybrid2 f,g ; Hybrid3 f,g |bsame * = 0 \u2227 b \u22a5 = 0 \uf8f6 \uf8f8 (4)\nNow, in order to analyze the auxiliary information leaked in each of the three cases, and use the extractor security, we first consider the conditional distribution on W , when conditioned on each of the three cases. We denote the three conditional distributions by: W 1 := W |b same * = 1, W 2 := W |b same * = 0\u2227b \u22a5 = 1 and W 3 := W |b same * = 0 \u2227 b \u22a5 = 0. By [Lemma 2.2a, [DORS08]], we get: [DORS08]]further gives:\nPr[H \u221e (W 1 ) \u2265 H \u221e (W |b same * ) \u2212 \u03bb] \u2265 1 \u2212 2 \u2212\u03bb which by [Lemma 2.2b,Pr[H \u221e (W 1 ) \u2265 n \u2212 1 \u2212 \u03bb] \u2265 1 \u2212 2 \u2212\u03bb Similarly, we get Pr[H \u221e (W 2 ) \u2265 n \u2212 2 \u2212 \u03bb] \u2265 1 \u2212 2 \u2212\u03bb Pr[H \u221e (W 3 ) \u2265 n \u2212 2 \u2212 \u03bb] \u2265 1 \u2212 2 \u2212\u03bb\nNow, we analyze the additional auxiliary information in each subcase:\nCase1 : b same * = 1\nIn this case , the additional auxiliary information just includes a single bit, indicating whether w is modified or remains the same. So, we first define this indicator function:\neq(w) = 0 if f L (w) = w 1 if f L (w) = w\nLet the auxiliary information be denoted by E 1 \u2261 eq(W ). E 1 is independent of S because E 1 is determined given W and W is independent of S. Now, E 1 and W are correlated and E 1 can take at most two possible values.\nHence, H \u221e (W 1 |E 1 ) \u2265 H \u221e (W 1 ) \u2212 1 \u2265 n \u2212 1 \u2212 \u03bb \u2212 1 w.p. \u2265 1 \u2212 2 \u2212\u03bb . Let G 1 denote the event H \u221e (W 1 |E 1 ) \u2265 n \u2212 \u03bb \u2212 2.\nAs n \u2212 \u03bb \u2212 2 > t, by security of average case extractor, we get:\nE 1 , Ext(W 1 ; S)|G 1 \u2248 \u03b53 E 1 , U l |G 1\nNow, clearly, in this case, the output of Hybrid2 f,g and Hybrid3 f,g are functions of above random variables. Hence, by Lemma 2, we get:\n\nHybrid2 f,g |b same * = 1, G 1 \u2248 \u03b53 Hybrid3 f,g |b same * = 1, G 1\n\nHence, by further using Proposition 1, as Pr[G c 1 ] \u2264 2 \u2212\u03bb , we get:\n\nHybrid2 f,g |b same * = 1 \u2248 \u03b53+2 \u2212\u03bb Hybrid3 f,g |b same * = 1 (5)\nCase2 : b same * = 0\nThis case is further divided into two mutually exclusive events of Case2.\nCase2a : b \u22a5 = 1 Now, let G 2 denote the event H \u221e (W 2 ) \u2265 n \u2212 2 \u2212 \u03bb.\nThen as Pr[G c 2 ] \u2264 2 \u2212\u03bb and using extractor security, we get:\nSD Hybrid2 f,g |b same * = 0 \u2227 b \u22a5 = 1, Hybrid2 f,g |b same * = 0 \u2227 b \u22a5 = 1 \u2264 \u03b5 3 + 2 \u2212\u03bb (6) Case2b : b \u22a5 = 0\nIn this case, the additional auxiliary information consists of an indicator of verification ofw and the extractor output on modified source and seed. We first define the indicator of verification bit:\nV erif y(w) = Vrfy k a 1 (f L (w),t 1 )\nNow, let the auxiliary information be denoted by E 2 \u2261 (V erif y(W ), Ext(W ;S)), whereK a1 ,T 1 ,S denote the distributions on the authentication key, tag spaces and the seed, when sampled from the simulator conditioned on the event Case2b. E 2 is clearly a deterministic function ofK a1 ,W ,T 1 ,S, all of which are independent of S (as we use the simulator). Hence, E 2 is independent of S. Now, E 2 and W are correlated. E 2 can take at most 2 1+l+\u03c4 possible values.\nHence, H \u221e (W 3 |E 2 ) \u2265 H \u221e (W 3 ) \u2212 (1 + l + \u03c4 ) \u2265 n \u2212 2 \u2212 \u03bb \u2212 (1 + l + \u03c4 ) w.p. \u2265 1 \u2212 2 \u2212\u03bb . Let G 3 denote the event H \u221e (W 3 |E 2 ) \u2265 n \u2212 (3 + \u03bb + l + \u03c4 ).\nAs n \u2212 (3 + \u03bb + l + \u03c4 ) > t (if we set parameters appropriately), by security of average case extractor and using Proposition 1, we get:\nE 2 , Ext(W ; S)|G 3 \u2248 \u03b53 E 2 , U l |G 3\nNow, clearly, in this case, the output of Hybrid2 f,g and Hybrid3 f,g are functions of above random variables. Hence, by Lemma 2, we get:\nHybrid2 f,g |b same * = 0 \u2227 b \u22a5 = 0, G 3 \u2248 \u03b53 Hybrid3 f,g |b same * = 0 \u2227 b \u22a5 = 0, G 3\nFurther, since Pr[G c 3 ] \u2264 2 \u2212\u03bb , using Proposition 1, we get\nHybrid2 f,g |b same * = 0 \u2227 b \u22a5 = 0 \u2248 \u03b53+2 \u2212\u03bb Hybrid3 f,g |b same * = 0 \u2227 b \u22a5 = 0 (7)\nHence, by Proposition 1, Equations 4, 5, 6 and 7 give:\nHybrid2 f,g \u2248 \u03b53+2 \u2212\u03bb Hybrid3 f,g B Appendix:\nFrom t-source strong non-malleable extractors to t-state 1-augmented NMC\n\nWe generalize the connection known between seedless non-malleable extractors for t independent sources and non-malleable codes for the t-split-state family ([CG14b]), to establish a connection between strong seedless non-malleable extractors for t independent sources and augmented non-malleable codes for t-splitstate family. We first define strong seedless non-malleable t-source extractor.\n\nDefinition 6.\n\n[Li17] A function nmExt : ({0, 1} n ) t \u2192 {0, 1} m is a (k, )seedless strong non-malleable extractor for t independent sources w.r.t. family F = {(f 1 , \u00b7 \u00b7 \u00b7 f t ) : f i : {0, 1} n \u2192 {0, 1} n }, if it satisfies the following property: Let X 1 , \u00b7 \u00b7 \u00b7 , X t be t independent (n, k)-sources and (f 1 , \u00b7 \u00b7 \u00b7 , f t ) \u2208 F be t arbitrary functions such that there exists an f j with no fixed points, then for every i:\n(nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), nmExt(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t )), X i ) \u2248 (U m , nmExt(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t )), X i )\nNow, we formulate an alternate definition of a t-source relaxed strong nonmalleable extractor, generalizing the definition of seedless relaxed non-malleable extractors in [CG14b]. This definition captures the property that the output of non-malleable extractor on the modified sources along with one of the source, is simulatable independent of the output of non-malleable extractor on original sources.\n\n\nDefinition 7. A function nmExt\n\n:\n\n({0, 1} n ) t \u2192 {0, 1} m is a (k, )-seedless relaxed strong non-malleable extractor for t independent sources w.r.t. family F = {(f 1 , \u00b7 \u00b7 \u00b7 f t ) : f i : {0, 1} n \u2192 {0, 1} n and \u2203 at least one j s.t. f j has no fixed point}, if it satisfies the following property: Let X 1 , \u00b7 \u00b7 \u00b7 , X t be t independent (n, k)-sources and (f 1 , \u00b7 \u00b7 \u00b7 , f t ) \u2208 F, then the following hold:\n\n-nmExt is a t-source extractor for (X 1 , \u00b7 \u00b7 \u00b7 , X t ), i.e., nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ) \u2248 U m . -There exists a distribution D over {0, 1} n \u00d7 ({0, 1} m \u222a {same * }) s.t. for an independent (X 1 , Y ) \u223c D,\n\n(nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), X 1 , nmExt(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t ))) \u2248 (nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), copy((X 1 , Y ), (X 1 , nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t )))) Remark 1. It is clear that the non-malleability condition in Def 6 (for i = 1) is sufficient for the conditions in Def 7 to be satisfied.\n\nBut then, this relaxed notion of strong non-malleable extractor is equivalent to the following general notion of strong non-malleable extractor (where, the tampering functions can have fixed points) upto a slight loss of parameters. (This proof follows from [Lemma 5.6, [CG14b]]).\n\nDefinition 8. A function nmExt : ({0, 1} n ) t \u2192 {0, 1} m is a (k, )-seedless strong non-malleable extractor for t independent sources w.r.t. family F = {(f 1 , \u00b7 \u00b7 \u00b7 f t ) : f i : {0, 1} n \u2192 {0, 1} n }, if it satisfies the following property: Let X 1 , \u00b7 \u00b7 \u00b7 , X t be t independent (n, k)-sources and (f 1 , \u00b7 \u00b7 \u00b7 , f t ) \u2208 F, then the following hold:\n\n-nmExt is a t-source extractor for (X 1 , \u00b7 \u00b7 \u00b7 , X t ), i.e., nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ) \u2248 U m . -There exists a distribution D over {0, 1} n \u00d7 ({0, 1} m \u222a {same * }) s.t. for an independent (X 1 , Y ) \u223c D,\n\n(nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), X 1 , nmExt(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t ))) \u2248 (nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), copy((X 1 , Y ), (X 1 , nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t )))) Hence, we take the above Def 8 for strong non-malleable extractors and prove the following theorem.\n\nProposition 2. Let nmExt : ({0, 1} n ) t \u2192 {0, 1} k be a (n, )-seedless strong non-malleable extractor for t independent sources (by Def 8). Define a coding scheme (Enc, Dec) with message length k and block length tn as follows. The decoder Dec is defined by\n\nDec(x 1 , \u00b7 \u00b7 \u00b7 , x t ) = nmExt(x 1 , \u00b7 \u00b7 \u00b7 , x t )\n\nThe encoder Enc is defined as:\n\nEnc(m) := x 1 , \u00b7 \u00b7 \u00b7 , x t $ \u2190 \u2212 nmExt \u22121 (m) o/p : (x 1 , \u00b7 \u00b7 \u00b7 , x t ) Then, (Enc, Dec) is a [ , 1]-augmented non-malleable code with error = (2 k + 1) for the t-split state family and with rate = k tn .\n\nProof. Let m \u2208 {0, 1} k and f = (f 1 , \u00b7 \u00b7 \u00b7 , f t ) \u2208 F, the t-split-state family be arbitrary. Since Dec = nmExt is a strong non-malleable extractor, by Def 8, \u2203 a distribution D s.t. for (X 1 , Y ) \u223c D f1,\u00b7\u00b7\u00b7 ,ft , we have:\n\n(nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), X 1 , nmExt(f 1 (X 1 ), \u00b7 \u00b7 \u00b7 , f t (X t ))) \u2248 (nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t ), copy((X 1 , Y ), (X 1 , nmExt(X 1 , \u00b7 \u00b7 \u00b7 , X t )))) (8)\n\nClaim. Enc(U k ) is -close to uniform.\n\nProof. By extractor security, we have:\nDec(U tn ) \u2248 U k\nFurther, as Enc(.) samples uniformly random element of nmExt \u22121 (.), it follows that Enc(Dec(U tn )) = U tn Hence, we get Enc(U k ) \u2248 Enc(Dec(U tn )) = U tn .\n\nThus, at cost of increase in error, we assume codeword is of uniform distribution.\n\nLet (X 1 , Y ) \u223c D f1,\u00b7\u00b7\u00b7 ,ft . Now by Eq 8, just by substitution, we get:\n\n(M, X 1 , Dec(f (Enc(M ))) \u2248 (M, copy((X 1 , Y ), (X 1 , M ))) Now, for the arbitrary m that we chose, we get:\n\n(m, X 1 , Dec(f (Enc(m))) \u2248 2 k (m, copy((X 1 , Y ), (X 1 , m))) which proves the theorem.\n\nAugmented-non-malleability of 2-state construction in [Li17]:\n\nCorollary 2. For any \u03b2 \u2208 N there exists an explicit augmented-non-malleable code with efficient encoder/decoder in 2-split state model with block length 2\u03b2,\n\nrate \u2126 1 log \u03b2 and error = 2\n\n\u2212\u2126 \uf8eb \uf8ed \u03b2 log \u03b2 \uf8f6 \uf8f8\n\nDefinition 1 .\n1A (possibly randomized) function Enc : {0, 1} l \u2192 {0, 1} n and a deterministic function Dec : {0, 1} n \u2192 {0, 1} l \u222a{\u22a5} is said to be a coding scheme if \u2200 m \u2208 {0, 1} l , Pr[Dec(Enc(m)) = m] = 1. l is called the message length and n is called the block length or the codeword length. Rate of a coding scheme is given by l n .\n\n1} n 2 .\n2(L,k a1 ||t 1 ||s) \u2190 NMSim fw,g // where f w is the function f with w hardcoded.// 3.w = f L (w)\n\nLemma 5 .\n5[GUV07] For every constant \u03bd > 0 all integers n \u2265 t and all \u2265 0, there is an explicit (efficient) (n, t, d, l, )\u2212strong extractor with l = (1 \u2212 \u03bd)t \u2212 O(log(n) + log( 1 )) and d = O(log(n) + log( 1 )).\n\nCorollary 1 .\n1For any \u00b5 > 0 and every constant \u03bd > 0 all integers n \u2265 t and all \u2265 0, there is an explicit (efficient) (n, t+log( 1 \u00b5 ), d, l, +\u00b5)\u2212 average case strong extractor with l = (1 \u2212 \u03bd)t \u2212 O(log(n) + log( 1 )) and d = O(log(n) + log( 1 )).\n\n\nLiu and Anna Lysyanskaya. Tamper and leakage resilience in the split-state model. IACR Cryptology ePrint Archive, 2012:297, 2012.\n\n(\nPr[Hybri d1 f,g = (m,m)|E, F ] \u2212 Pr[Hybrid2 f,g = (m,m)|E, F ] =0 as given E and F both the hybrids are identical )+Pr[F|E]. (Pr[Hybri d1 f,g = (m,m)|E,F ] \u2212 Pr[Hybrid2 f,g = (m,m)|E,F ])| = Pr[E] m\u2208{0,1} l+\u03c4 m\u2208{0,1} l+\u03c4 \u222a{\u22a5} Pr[F |E](| Pr[Hybrid1 f,g = (m,m)|E,F ] \u2212 Pr[Hybrid2 f,g = (m,m)|E,F ]|) = Pr[E] Pr[F |E]( m\u2208{0,1} l+\u03c4 m\u2208{0,1} l+\u03c4 |Pr[Hybri d1 f,g = (m,m)|E,F ] \u2212 Pr[Hybrid2 f,g = (m,m)|E,F ] = 0 as given E,F Hybrid 2 outputs \u22a5 as second component | + m\u2208{0,1} l+\u03c4 |Pr[Hybri d1 f,g = (m, \u22a5)|E,F ] \u2212 Pr[Hybrid2 f,g = (m, \u22a5)|E,F ]|) = Pr[F ](1 + m\u2208{0,1} l+\u03c4 (( m\u2208{0,1} l+\u03c4 Pr[Hybrid1 f,g = (m,m)|E,F ]) \u2212 Pr[Hybrid1 f,g = (m, \u22a5)|E,F ])) = 2 Pr[F ]( Pr[Second component of output of Hybrid1 f,g = \u22a5|E,t1 = Tag ka 1 (w)|E,F ] = 2 Pr[F ] Pr[Vrfy ka 1 (w, t1) = 1 \u2227 t1 = Tag ka 1 (w)|F ] \u2264 2(\u03b52) \u2234 Hybrid1 f,g \u2248 \u03b52 Hybrid2 f,g A.2 Alternate proof of Claim 3 in Section 4.4\n\n\n,Dodis and Lovett [ADL14]. At the same time, in[CG14a], Cheraghchi and Guruswami show a 1 \u2212 1/t upper bound on best achievable rate for the t-split state family (and, specifically, 1/2 when t = 2). The first constant rate construction for any t = o(n), was due to Chattopadhyay and Zuckerman [CZ14]. Specifically, they build a constant rate, 10-state NMC. Recently, Kanukurthi, Obbattu and Sekar[KOS17] obtained a 4\u2212state construction (i.e., t = 4) with rate 1 3 . For t = 2, the current best known construction is due to Li [Li17] with a rate of \u2126(1/ log n).In other results, Aggarwal et al. [ADKO15] demonstrated connections between various split-state models and Agrawal et al. [AGM + 15] build optimal NMCs which are simultaneously resilient to permutation attacks as well as bit-wise tampering attacks. On the computational front, there are constructions in the 2-split-state model such as [LL12] and the optimal construction of [AAG + 16]. Variants of Non-malleable codes Since the introduction of Non-malleable codes several variants of Non-malleable codes have been considered. Some of them are Continuous NMCs [FMNV14,JW15,AKO15,DNO17], Locally updatable and decodable NMCs [DLSZ14,DKS17,CKR16].\n\n\n1} \u03c4 3.2 Average-case Extractors Definition 4. [DORS08, Section 2.5] Let Ext : {0, 1} n \u00d7 {0, 1} d \u2192 {0, 1} l be a polynomial time computable function. We say that Ext is an efficient average-case (n, t, d, l, )-strong extractor if for all pairs of random variables (W, I) such that W is an n-bit string satisfying H \u221e\n\n\nFurther, we use the 2-split-state non-malleable code by [Li17] to instantiate our construction.Lemma 8. [Li17, Theorem 7.12] For any \u03b2 \u2208 N there exists an explicit nonmalleable code with efficient encoder/decoder in 2-split state model with blocklength 2\u03b2, rate \u2126 \n1 \nlog \u03b2 \nand error = 2 \n\n\u2212\u2126 \n\n\uf8eb \n\n\uf8ed \n\n\u03b2 \nlog \u03b2 \n\n\uf8f6 \n\n\uf8f8 \n\n\nHere (f, g)(NMREnc2(R)) just denotes the tampering by the split-state tampering functions f and g on the corresponding states.\nWe refer the reader to Appendix A.2 for an alternate proof of this claim\nHere, we abuse the notation: bsame * and b \u22a5 represent the particular values taken by the corresponding random variables\nAcknowledgementWe thank Eshan Chattopadhyay for helpful discussions on connections between non-malleable codes and extractors. We also thank the reviewers of Eurocrypt for their useful comments.\nOptimal computational splitstate non-malleable codes. Aag + 16. Divesh, Shashank Aggarwal, Divya Agrawal, Gupta, K Hemanta, Omkant Maji, Manoj Pandey, Prabhakaran, Theory of Cryptography -13th International Conference, TCC 2016-A. Tel Aviv, IsraelProceedings, Part IIAAG + 16. Divesh Aggarwal, Shashank Agrawal, Divya Gupta, Hemanta K. Maji, Omkant Pandey, and Manoj Prabhakaran. Optimal computational split- state non-malleable codes. In Theory of Cryptography -13th International Conference, TCC 2016-A, Tel Aviv, Israel, January 10-13, 2016, Proceed- ings, Part II, pages 393-417, 2016.\n\nNon-malleable codes from additive combinatorics. Divesh Aggarwal, Yevgeniy Dodis, Tomasz Kazana, Maciej Obremski, Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015. the Forty-Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015Portland, OR, USA; New York, NY, USASymposium on Theory of Computing, STOCDivesh Aggarwal, Yevgeniy Dodis, Tomasz Kazana, and Maciej Obremski. Non-malleable reductions and applications. In Proceedings of the Forty- Seventh Annual ACM on Symposium on Theory of Computing, STOC 2015, Portland, OR, USA, June 14-17, 2015, pages 459-468, 2015. ADL14. Divesh Aggarwal, Yevgeniy Dodis, and Shachar Lovett. Non-malleable codes from additive combinatorics. In Symposium on Theory of Computing, STOC 2014, New York, NY, USA, May 31 -June 03, 2014, pages 774-783, 2014.\n\nA rate-optimizing compiler for non-malleable codes against bit-wise tampering and permutations. Divya Agm + 15. Shashank Agrawal, Gupta, K Hemanta, Omkant Maji, Manoj Pandey, Prabhakaran, Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015. Warsaw, PolandProceedings, Part IAGM + 15. Shashank Agrawal, Divya Gupta, Hemanta K. Maji, Omkant Pandey, and Manoj Prabhakaran. A rate-optimizing compiler for non-malleable codes against bit-wise tampering and permutations. In Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I, pages 375-397, 2015.\n\nInception makes non-malleable codes stronger. Ako15 Divesh Aggarwal, Tomasz Kazana, Maciej Obremski, IACR Cryptology ePrint Archive. 1013AKO15. Divesh Aggarwal, Tomasz Kazana, and Maciej Obremski. Inception makes non-malleable codes stronger. IACR Cryptology ePrint Archive, 2015:1013, 2015.\n\nCG14b. Mahdi Cheraghchi and Venkatesan Guruswami. Non-malleable coding against bit-wise and split-state tampering. Mahdi Cheraghchi, Venkatesan Guruswami, Theory of Cryptography -11th Theory of Cryptography Conference. NJ, USA; San Diego, CA, USAPrincetonProceedingsMahdi Cheraghchi and Venkatesan Guruswami. Capacity of non-malleable codes. In Innovations in Theoretical Computer Science, ITCS'14, Prince- ton, NJ, USA, January 12-14, 2014, pages 155-168, 2014. CG14b. Mahdi Cheraghchi and Venkatesan Guruswami. Non-malleable coding against bit-wise and split-state tampering. In Theory of Cryptography - 11th Theory of Cryptography Conference, TCC 2014, San Diego, CA, USA, February 24-26, 2014. Proceedings, pages 440-464, 2014.\n\nInformation-theoretic local non-malleable codes and their applications. Nishanth Chandran, Bhavana Kanukurthi, Srinivasan Raghuraman, 55th IEEE Annual Symposium on Foundations of Computer Science, FOCS. CZ14. Eshan Chattopadhyay and David ZuckermanTel Aviv, Israel; Philadelphia, PA, USATheory of Cryptography -13th International Conference, TCC 2016-ANishanth Chandran, Bhavana Kanukurthi, and Srinivasan Raghuraman. Information-theoretic local non-malleable codes and their applications. In Theory of Cryptography -13th International Conference, TCC 2016-A, Tel Aviv, Israel, January 10-13, 2016, Proceedings, Part II, pages 367-392, 2016. CZ14. Eshan Chattopadhyay and David Zuckerman. Non-malleable codes against constant split-state tampering. In 55th IEEE Annual Symposium on Foun- dations of Computer Science, FOCS 2014, Philadelphia, PA, USA, October 18-21, 2014, pages 306-315, 2014.\n\nNon-malleable codes from two-source extractors. Stefan Dziembowski, Tomasz Kazana, Maciej Obremski, Au- gust 18-22Advances in Cryptology -CRYPTO 2013 -33rd Annual Cryptology Conference. Santa Barbara, CA, USAProceedings, Part IIStefan Dziembowski, Tomasz Kazana, and Maciej Obremski. Non-malleable codes from two-source extractors. In Advances in Cryptology -CRYPTO 2013 -33rd Annual Cryptology Conference, Santa Barbara, CA, USA, Au- gust 18-22, 2013. Proceedings, Part II, pages 239-257, 2013.\n\nTight upper and lower bounds for leakage-resilient, locally decodable and updatable nonmalleable codes. Dana Dachman-Soled, Mukul Kulkarni, Aria Shahverdi, IACR Cryptology ePrint Archive. 15Dana Dachman-Soled, Mukul Kulkarni, and Aria Shahverdi. Tight upper and lower bounds for leakage-resilient, locally decodable and updatable non- malleable codes. IACR Cryptology ePrint Archive, 2017:15, 2017.\n\nLocally decodable and updatable non-malleable codes and their applications. Dana Dachman-Soled, Feng-Hao Liu, Elaine Shi, Hong-Sheng Zhou, IACR Cryptology ePrint Archive. 663Dana Dachman-Soled, Feng-Hao Liu, Elaine Shi, and Hong-Sheng Zhou. Lo- cally decodable and updatable non-malleable codes and their applications. IACR Cryptology ePrint Archive, 2014:663, 2014.\n\nInformation theoretic continuously non-malleable codes in the constant split-state model. Nico D\u00f6ttling, Jesper Buus Nielsen, Maciej Obremski, Electronic Colloquium on Computational Complexity (ECCC). 2478Nico D\u00f6ttling, Jesper Buus Nielsen, and Maciej Obremski. Information the- oretic continuously non-malleable codes in the constant split-state model. Electronic Colloquium on Computational Complexity (ECCC), 24:78, 2017.\n\nFuzzy extractors: How to generate strong keys from biometrics and other noisy data. Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, Adam Smith, arXiv:cs/0602007SIAM Journal on Computing. 381Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, and Adam Smith. Fuzzy extractors: How to generate strong keys from biometrics and other noisy data. SIAM Journal on Computing, 38(1):97-139, 2008. arXiv:cs/0602007.\n\nNon-malleable codes. Stefan Dziembowski, Krzysztof Pietrzak, Daniel Wichs, Innovations in Computer Science -ICS 2010. Beijing, ChinaProceedingsStefan Dziembowski, Krzysztof Pietrzak, and Daniel Wichs. Non-malleable codes. In Innovations in Computer Science -ICS 2010, Tsinghua Univer- sity, Beijing, China, January 5-7, 2010. Proceedings, pages 434-452, 2010.\n\nContinuous non-malleable codes. Sebastian Faust, Pratyay Mukherjee, Jesper Buus Nielsen, Daniele Venturi, Theory of Cryptography -11th Theory of Cryptography Conference, TCC 2014. San Diego, CA, USASebastian Faust, Pratyay Mukherjee, Jesper Buus Nielsen, and Daniele Venturi. Continuous non-malleable codes. In Theory of Cryptography - 11th Theory of Cryptography Conference, TCC 2014, San Diego, CA, USA, February 24-26, 2014. Proceedings, pages 465-488, 2014.\n\nUnbalanced expanders and randomness extractors from Parvaresh-Vardy codes. Venkatesan Guruswami, Christopher Umans, Salil P Vadhan, ; Jks93. Thomas Johansson, Gregory Kabatianskii, Ben J M Smeets, Advances in Cryptology -EUROCRYPT '93, Workshop on the Theory and Application of of Cryptographic Techniques. Lofthus, NorwayProceedingsVenkatesan Guruswami, Christopher Umans, and Salil P. Vadhan. Unbal- anced expanders and randomness extractors from Parvaresh-Vardy codes. In IEEE Conference on Computational Complexity, pages 96-108, 2007. JKS93. Thomas Johansson, Gregory Kabatianskii, and Ben J. M. Smeets. On the relation between a-codes and codes correcting independent errors. In Ad- vances in Cryptology -EUROCRYPT '93, Workshop on the Theory and Application of of Cryptographic Techniques, Lofthus, Norway, May 23-27, 1993, Proceedings, pages 1-11, 1993.\n\nTamper detection and continuous nonmalleable codes. Zahra Jafargholi, Daniel Wichs, Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015. Warsaw, PolandProceedings, Part IZahra Jafargholi and Daniel Wichs. Tamper detection and continuous non- malleable codes. In Theory of Cryptography -12th Theory of Cryptography Conference, TCC 2015, Warsaw, Poland, March 23-25, 2015, Proceedings, Part I, pages 451-480, 2015.\n\nImproved non-malleable extractors, non-malleable codes and independent source extractors. Bhavana Kanukurthi, Sai Lakshmi Bhavana, Sruthi Obbattu, Sekar, Theory of Cryptography -15th International Conference. Baltimore, MD, USA; Montreal, CanadaLi17. Xin LiSymposium on Theory of ComputingBhavana Kanukurthi, Sai Lakshmi Bhavana Obbattu, and Sruthi Sekar. Four-state non-malleable codes with explicit constant rate. In Theory of Cryptography -15th International Conference, TCC 2017, Baltimore, MD, USA, November 12-15, 2017, Proceedings, Part II, pages 344-375, 2017. Li17. Xin Li. Improved non-malleable extractors, non-malleable codes and inde- pendent source extractors. In Symposium on Theory of Computing, STOC 2017, Montreal, Canada, June 19-23, 2017, 2017.\n\nthe seedless 2 source non-malleable extractor constructed in [Li17] satisfies: For any (f, g) in 2-split-state family, such that atleast one of f or g has no fixed point, we have: nmExt. X, Y ), X, nmExt(f (X), g(Y )) \u2248 U m , XTheorem 7.9. nmExt(f (X), g(Y )Proof. As proved in [Theorem 7.9, [Li17]], the seedless 2 source non-malleable extractor constructed in [Li17] satisfies: For any (f, g) in 2-split-state family, such that atleast one of f or g has no fixed point, we have: nmExt(X, Y ), X, nmExt(f (X), g(Y )) \u2248 U m , X, nmExt(f (X), g(Y ))\n\nFurther, the specific non-malleable extractor of [Li17] gives error and rate parameters for the augmented-non-malleable code, exactly as obtained in Lemma 8. Further, the specific non-malleable extractor of [Li17] gives error and rate pa- rameters for the augmented-non-malleable code, exactly as obtained in Lemma 8.\n", "annotations": {"author": "[{\"end\":118,\"start\":60},{\"end\":170,\"start\":119},{\"end\":226,\"start\":171},{\"end\":279,\"start\":227}]", "publisher": null, "author_last_name": "[{\"end\":78,\"start\":68},{\"end\":130,\"start\":123},{\"end\":186,\"start\":179},{\"end\":239,\"start\":234}]", "author_first_name": "[{\"end\":67,\"start\":60},{\"end\":122,\"start\":119},{\"end\":178,\"start\":171},{\"end\":233,\"start\":227}]", "author_affiliation": "[{\"end\":117,\"start\":80},{\"end\":169,\"start\":132},{\"end\":225,\"start\":188},{\"end\":278,\"start\":241}]", "title": "[{\"end\":57,\"start\":1},{\"end\":336,\"start\":280}]", "venue": null, "abstract": "[{\"end\":1841,\"start\":338}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b11\"},\"end\":1905,\"start\":1898},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2498,\"start\":2491},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3083,\"start\":3076},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":4565,\"start\":4558},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5073,\"start\":5066},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5409,\"start\":5402},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5936,\"start\":5929},{\"end\":6172,\"start\":6140},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6668,\"start\":6661},{\"end\":6785,\"start\":6777},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":9418,\"start\":9411},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":28065,\"start\":28057},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":39328,\"start\":39320},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":39347,\"start\":39339},{\"end\":43746,\"start\":43739},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":48290,\"start\":48283},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":49802,\"start\":49795},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":50150,\"start\":50143}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":48162,\"start\":47822},{\"attributes\":{\"id\":\"fig_1\"},\"end\":48270,\"start\":48163},{\"attributes\":{\"id\":\"fig_2\"},\"end\":48483,\"start\":48271},{\"attributes\":{\"id\":\"fig_3\"},\"end\":48733,\"start\":48484},{\"attributes\":{\"id\":\"fig_4\"},\"end\":48865,\"start\":48734},{\"attributes\":{\"id\":\"fig_5\"},\"end\":49745,\"start\":48866},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":50952,\"start\":49746},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":51273,\"start\":50953},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":51599,\"start\":51274}]", "paragraph": "[{\"end\":2474,\"start\":1843},{\"end\":3041,\"start\":2476},{\"end\":3096,\"start\":3072},{\"end\":4105,\"start\":3098},{\"end\":4332,\"start\":4107},{\"end\":4674,\"start\":4347},{\"end\":4706,\"start\":4676},{\"end\":5535,\"start\":4708},{\"end\":6736,\"start\":5537},{\"end\":6786,\"start\":6738},{\"end\":7456,\"start\":6802},{\"end\":7893,\"start\":7458},{\"end\":9347,\"start\":7895},{\"end\":10169,\"start\":9349},{\"end\":11059,\"start\":10171},{\"end\":12008,\"start\":11061},{\"end\":12847,\"start\":12010},{\"end\":13409,\"start\":12877},{\"end\":13758,\"start\":13427},{\"end\":13887,\"start\":13760},{\"end\":14337,\"start\":14259},{\"end\":14562,\"start\":14339},{\"end\":15427,\"start\":15265},{\"end\":15663,\"start\":15574},{\"end\":15781,\"start\":15714},{\"end\":15999,\"start\":15783},{\"end\":16077,\"start\":16001},{\"end\":16980,\"start\":16886},{\"end\":17230,\"start\":17000},{\"end\":17312,\"start\":17272},{\"end\":17777,\"start\":17683},{\"end\":18549,\"start\":17792},{\"end\":19012,\"start\":18766},{\"end\":19027,\"start\":19014},{\"end\":19229,\"start\":19224},{\"end\":19508,\"start\":19432},{\"end\":19936,\"start\":19510},{\"end\":20573,\"start\":19949},{\"end\":20690,\"start\":20575},{\"end\":21190,\"start\":20716},{\"end\":21351,\"start\":21206},{\"end\":22092,\"start\":21447},{\"end\":22333,\"start\":22100},{\"end\":22423,\"start\":22352},{\"end\":22574,\"start\":22516},{\"end\":22691,\"start\":22576},{\"end\":22795,\"start\":22735},{\"end\":22891,\"start\":22797},{\"end\":23115,\"start\":22905},{\"end\":23381,\"start\":23157},{\"end\":23396,\"start\":23383},{\"end\":23688,\"start\":23420},{\"end\":23703,\"start\":23690},{\"end\":23833,\"start\":23778},{\"end\":24006,\"start\":23835},{\"end\":24134,\"start\":24008},{\"end\":24398,\"start\":24136},{\"end\":25168,\"start\":24400},{\"end\":25793,\"start\":25170},{\"end\":25835,\"start\":25795},{\"end\":25850,\"start\":25837},{\"end\":25951,\"start\":25893},{\"end\":26059,\"start\":25992},{\"end\":26300,\"start\":26165},{\"end\":26433,\"start\":26406},{\"end\":26463,\"start\":26435},{\"end\":26569,\"start\":26465},{\"end\":26735,\"start\":26571},{\"end\":27172,\"start\":26767},{\"end\":27210,\"start\":27174},{\"end\":27356,\"start\":27302},{\"end\":28046,\"start\":27384},{\"end\":28219,\"start\":28048},{\"end\":28504,\"start\":28221},{\"end\":28897,\"start\":28506},{\"end\":29096,\"start\":28920},{\"end\":29166,\"start\":29098},{\"end\":29600,\"start\":29168},{\"end\":29820,\"start\":29602},{\"end\":29985,\"start\":29866},{\"end\":29990,\"start\":29987},{\"end\":30204,\"start\":29992},{\"end\":30326,\"start\":30257},{\"end\":30438,\"start\":30344},{\"end\":30666,\"start\":30523},{\"end\":30971,\"start\":30676},{\"end\":31325,\"start\":31034},{\"end\":31875,\"start\":31351},{\"end\":32761,\"start\":32015},{\"end\":33002,\"start\":32934},{\"end\":33248,\"start\":33113},{\"end\":33340,\"start\":33250},{\"end\":33463,\"start\":33342},{\"end\":33520,\"start\":33465},{\"end\":33646,\"start\":33567},{\"end\":33731,\"start\":33648},{\"end\":33984,\"start\":33733},{\"end\":35072,\"start\":34897},{\"end\":35368,\"start\":35074},{\"end\":35642,\"start\":35370},{\"end\":35725,\"start\":35701},{\"end\":35822,\"start\":35785},{\"end\":35852,\"start\":35824},{\"end\":36013,\"start\":35919},{\"end\":36061,\"start\":36015},{\"end\":36079,\"start\":36063},{\"end\":36128,\"start\":36081},{\"end\":36178,\"start\":36130},{\"end\":36392,\"start\":36206},{\"end\":36429,\"start\":36401},{\"end\":36800,\"start\":36487},{\"end\":37857,\"start\":36815},{\"end\":37894,\"start\":37859},{\"end\":37927,\"start\":37896},{\"end\":38011,\"start\":37929},{\"end\":38063,\"start\":38013},{\"end\":38195,\"start\":38065},{\"end\":38541,\"start\":38199},{\"end\":38761,\"start\":38634},{\"end\":39362,\"start\":38944},{\"end\":39636,\"start\":39567},{\"end\":39836,\"start\":39658},{\"end\":40097,\"start\":39879},{\"end\":40290,\"start\":40226},{\"end\":40471,\"start\":40334},{\"end\":40539,\"start\":40473},{\"end\":40610,\"start\":40541},{\"end\":40677,\"start\":40612},{\"end\":40772,\"start\":40699},{\"end\":40907,\"start\":40844},{\"end\":41218,\"start\":41018},{\"end\":41729,\"start\":41259},{\"end\":42027,\"start\":41891},{\"end\":42206,\"start\":42069},{\"end\":42356,\"start\":42294},{\"end\":42497,\"start\":42443},{\"end\":42616,\"start\":42544},{\"end\":43010,\"start\":42618},{\"end\":43025,\"start\":43012},{\"end\":43440,\"start\":43027},{\"end\":43971,\"start\":43568},{\"end\":44007,\"start\":44006},{\"end\":44384,\"start\":44009},{\"end\":44592,\"start\":44386},{\"end\":44887,\"start\":44594},{\"end\":45169,\"start\":44889},{\"end\":45523,\"start\":45171},{\"end\":45731,\"start\":45525},{\"end\":45988,\"start\":45733},{\"end\":46248,\"start\":45990},{\"end\":46301,\"start\":46250},{\"end\":46333,\"start\":46303},{\"end\":46541,\"start\":46335},{\"end\":46769,\"start\":46543},{\"end\":46930,\"start\":46771},{\"end\":46970,\"start\":46932},{\"end\":47010,\"start\":46972},{\"end\":47186,\"start\":47028},{\"end\":47270,\"start\":47188},{\"end\":47346,\"start\":47272},{\"end\":47458,\"start\":47348},{\"end\":47550,\"start\":47460},{\"end\":47613,\"start\":47552},{\"end\":47771,\"start\":47615},{\"end\":47801,\"start\":47773},{\"end\":47821,\"start\":47803}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":14258,\"start\":13888},{\"attributes\":{\"id\":\"formula_1\"},\"end\":15264,\"start\":14563},{\"attributes\":{\"id\":\"formula_2\"},\"end\":15573,\"start\":15428},{\"attributes\":{\"id\":\"formula_3\"},\"end\":15713,\"start\":15664},{\"attributes\":{\"id\":\"formula_4\"},\"end\":16885,\"start\":16078},{\"attributes\":{\"id\":\"formula_5\"},\"end\":17593,\"start\":17313},{\"attributes\":{\"id\":\"formula_6\"},\"end\":17682,\"start\":17593},{\"attributes\":{\"id\":\"formula_7\"},\"end\":18765,\"start\":18550},{\"attributes\":{\"id\":\"formula_8\"},\"end\":19223,\"start\":19028},{\"attributes\":{\"id\":\"formula_9\"},\"end\":19431,\"start\":19230},{\"attributes\":{\"id\":\"formula_10\"},\"end\":21446,\"start\":21352},{\"attributes\":{\"id\":\"formula_11\"},\"end\":22099,\"start\":22093},{\"attributes\":{\"id\":\"formula_12\"},\"end\":22515,\"start\":22424},{\"attributes\":{\"id\":\"formula_13\"},\"end\":22734,\"start\":22692},{\"attributes\":{\"id\":\"formula_14\"},\"end\":22904,\"start\":22892},{\"attributes\":{\"id\":\"formula_15\"},\"end\":23156,\"start\":23116},{\"attributes\":{\"id\":\"formula_16\"},\"end\":23419,\"start\":23397},{\"attributes\":{\"id\":\"formula_17\"},\"end\":23777,\"start\":23704},{\"attributes\":{\"id\":\"formula_18\"},\"end\":25892,\"start\":25851},{\"attributes\":{\"id\":\"formula_19\"},\"end\":25991,\"start\":25952},{\"attributes\":{\"id\":\"formula_20\"},\"end\":26164,\"start\":26060},{\"attributes\":{\"id\":\"formula_21\"},\"end\":26405,\"start\":26301},{\"attributes\":{\"id\":\"formula_22\"},\"end\":26766,\"start\":26736},{\"attributes\":{\"id\":\"formula_23\"},\"end\":27301,\"start\":27211},{\"attributes\":{\"id\":\"formula_24\"},\"end\":29865,\"start\":29821},{\"attributes\":{\"id\":\"formula_25\"},\"end\":30249,\"start\":30205},{\"attributes\":{\"id\":\"formula_26\"},\"end\":30343,\"start\":30327},{\"attributes\":{\"id\":\"formula_27\"},\"end\":30522,\"start\":30439},{\"attributes\":{\"id\":\"formula_28\"},\"end\":32014,\"start\":31876},{\"attributes\":{\"id\":\"formula_29\"},\"end\":32933,\"start\":32779},{\"attributes\":{\"id\":\"formula_30\"},\"end\":33112,\"start\":33003},{\"attributes\":{\"id\":\"formula_31\"},\"end\":33566,\"start\":33521},{\"attributes\":{\"id\":\"formula_32\"},\"end\":34896,\"start\":33985},{\"attributes\":{\"id\":\"formula_33\"},\"end\":35700,\"start\":35643},{\"attributes\":{\"id\":\"formula_34\"},\"end\":35918,\"start\":35853},{\"attributes\":{\"id\":\"formula_35\"},\"end\":36486,\"start\":36430},{\"attributes\":{\"id\":\"formula_36\"},\"end\":38198,\"start\":38196},{\"attributes\":{\"id\":\"formula_37\"},\"end\":38633,\"start\":38542},{\"attributes\":{\"id\":\"formula_38\"},\"end\":38943,\"start\":38762},{\"attributes\":{\"id\":\"formula_39\"},\"end\":39435,\"start\":39363},{\"attributes\":{\"id\":\"formula_40\"},\"end\":39566,\"start\":39435},{\"attributes\":{\"id\":\"formula_41\"},\"end\":39657,\"start\":39637},{\"attributes\":{\"id\":\"formula_42\"},\"end\":39878,\"start\":39837},{\"attributes\":{\"id\":\"formula_43\"},\"end\":40225,\"start\":40098},{\"attributes\":{\"id\":\"formula_44\"},\"end\":40333,\"start\":40291},{\"attributes\":{\"id\":\"formula_45\"},\"end\":40698,\"start\":40678},{\"attributes\":{\"id\":\"formula_46\"},\"end\":40843,\"start\":40773},{\"attributes\":{\"id\":\"formula_47\"},\"end\":41017,\"start\":40908},{\"attributes\":{\"id\":\"formula_48\"},\"end\":41258,\"start\":41219},{\"attributes\":{\"id\":\"formula_49\"},\"end\":41890,\"start\":41730},{\"attributes\":{\"id\":\"formula_50\"},\"end\":42068,\"start\":42028},{\"attributes\":{\"id\":\"formula_51\"},\"end\":42293,\"start\":42207},{\"attributes\":{\"id\":\"formula_52\"},\"end\":42442,\"start\":42357},{\"attributes\":{\"id\":\"formula_53\"},\"end\":42543,\"start\":42498},{\"attributes\":{\"id\":\"formula_54\"},\"end\":43567,\"start\":43441},{\"attributes\":{\"id\":\"formula_55\"},\"end\":47027,\"start\":47011}]", "table_ref": "[{\"end\":3040,\"start\":3033},{\"end\":3119,\"start\":3112}]", "section_header": "[{\"end\":3070,\"start\":3044},{\"attributes\":{\"n\":\"1.1\"},\"end\":4345,\"start\":4335},{\"attributes\":{\"n\":\"1.2\"},\"end\":6800,\"start\":6789},{\"attributes\":{\"n\":\"1.3\"},\"end\":12875,\"start\":12850},{\"attributes\":{\"n\":\"2\"},\"end\":13425,\"start\":13412},{\"attributes\":{\"n\":\"3\"},\"end\":16998,\"start\":16983},{\"attributes\":{\"n\":\"3.1\"},\"end\":17270,\"start\":17233},{\"attributes\":{\"n\":\"4.1\"},\"end\":17790,\"start\":17780},{\"attributes\":{\"n\":\"4.2\"},\"end\":19947,\"start\":19939},{\"attributes\":{\"n\":\"4.3\"},\"end\":20714,\"start\":20693},{\"end\":21204,\"start\":21193},{\"attributes\":{\"n\":\"4.4\"},\"end\":22350,\"start\":22336},{\"attributes\":{\"n\":\"4.5\"},\"end\":27382,\"start\":27359},{\"attributes\":{\"n\":\"4.5.1\"},\"end\":28918,\"start\":28900},{\"attributes\":{\"n\":\"4.5.2\"},\"end\":30255,\"start\":30251},{\"attributes\":{\"n\":\"4.5.3\"},\"end\":30674,\"start\":30669},{\"attributes\":{\"n\":\"5\"},\"end\":31032,\"start\":30974},{\"attributes\":{\"n\":\"5.1\"},\"end\":31349,\"start\":31328},{\"attributes\":{\"n\":\"5.2\"},\"end\":32778,\"start\":32764},{\"end\":35783,\"start\":35728},{\"attributes\":{\"n\":\"5.3\"},\"end\":36204,\"start\":36181},{\"attributes\":{\"n\":\"5.3.1\"},\"end\":36399,\"start\":36395},{\"attributes\":{\"n\":\"6\"},\"end\":36813,\"start\":36803},{\"end\":44004,\"start\":43974},{\"end\":47837,\"start\":47823},{\"end\":48172,\"start\":48164},{\"end\":48281,\"start\":48272},{\"end\":48498,\"start\":48485},{\"end\":48868,\"start\":48867}]", "table": "[{\"end\":51599,\"start\":51522}]", "figure_caption": "[{\"end\":48162,\"start\":47839},{\"end\":48270,\"start\":48174},{\"end\":48483,\"start\":48283},{\"end\":48733,\"start\":48500},{\"end\":48865,\"start\":48736},{\"end\":49745,\"start\":48869},{\"end\":50952,\"start\":49748},{\"end\":51273,\"start\":50955},{\"end\":51522,\"start\":51276}]", "figure_ref": "[{\"end\":22247,\"start\":22234}]", "bib_author_first_name": "[{\"end\":52196,\"start\":52188},{\"end\":52212,\"start\":52207},{\"end\":52230,\"start\":52229},{\"end\":52246,\"start\":52240},{\"end\":52258,\"start\":52253},{\"end\":52762,\"start\":52756},{\"end\":52781,\"start\":52773},{\"end\":52795,\"start\":52789},{\"end\":52810,\"start\":52804},{\"end\":53650,\"start\":53645},{\"end\":53687,\"start\":53686},{\"end\":53703,\"start\":53697},{\"end\":53715,\"start\":53710},{\"end\":54242,\"start\":54237},{\"end\":54249,\"start\":54243},{\"end\":54266,\"start\":54260},{\"end\":54281,\"start\":54275},{\"end\":54604,\"start\":54599},{\"end\":54627,\"start\":54617},{\"end\":55297,\"start\":55289},{\"end\":55315,\"start\":55308},{\"end\":55338,\"start\":55328},{\"end\":56165,\"start\":56159},{\"end\":56185,\"start\":56179},{\"end\":56200,\"start\":56194},{\"end\":56716,\"start\":56712},{\"end\":56737,\"start\":56732},{\"end\":56752,\"start\":56748},{\"end\":57088,\"start\":57084},{\"end\":57112,\"start\":57104},{\"end\":57124,\"start\":57118},{\"end\":57140,\"start\":57130},{\"end\":57470,\"start\":57466},{\"end\":57487,\"start\":57481},{\"end\":57508,\"start\":57502},{\"end\":57894,\"start\":57886},{\"end\":57908,\"start\":57902},{\"end\":57926,\"start\":57920},{\"end\":57939,\"start\":57935},{\"end\":58235,\"start\":58229},{\"end\":58258,\"start\":58249},{\"end\":58275,\"start\":58269},{\"end\":58610,\"start\":58601},{\"end\":58625,\"start\":58618},{\"end\":58643,\"start\":58637},{\"end\":58665,\"start\":58658},{\"end\":59117,\"start\":59107},{\"end\":59140,\"start\":59129},{\"end\":59153,\"start\":59148},{\"end\":59155,\"start\":59154},{\"end\":59179,\"start\":59164},{\"end\":59198,\"start\":59191},{\"end\":59216,\"start\":59213},{\"end\":59220,\"start\":59217},{\"end\":59952,\"start\":59947},{\"end\":59971,\"start\":59965},{\"end\":60427,\"start\":60420},{\"end\":60467,\"start\":60461}]", "bib_author_last_name": "[{\"end\":52186,\"start\":52170},{\"end\":52205,\"start\":52197},{\"end\":52220,\"start\":52213},{\"end\":52227,\"start\":52222},{\"end\":52238,\"start\":52231},{\"end\":52251,\"start\":52247},{\"end\":52265,\"start\":52259},{\"end\":52278,\"start\":52267},{\"end\":52771,\"start\":52763},{\"end\":52787,\"start\":52782},{\"end\":52802,\"start\":52796},{\"end\":52819,\"start\":52811},{\"end\":53677,\"start\":53651},{\"end\":53684,\"start\":53679},{\"end\":53695,\"start\":53688},{\"end\":53708,\"start\":53704},{\"end\":53722,\"start\":53716},{\"end\":53735,\"start\":53724},{\"end\":54258,\"start\":54250},{\"end\":54273,\"start\":54267},{\"end\":54290,\"start\":54282},{\"end\":54615,\"start\":54605},{\"end\":54637,\"start\":54628},{\"end\":55306,\"start\":55298},{\"end\":55326,\"start\":55316},{\"end\":55349,\"start\":55339},{\"end\":56177,\"start\":56166},{\"end\":56192,\"start\":56186},{\"end\":56209,\"start\":56201},{\"end\":56730,\"start\":56717},{\"end\":56746,\"start\":56738},{\"end\":56762,\"start\":56753},{\"end\":57102,\"start\":57089},{\"end\":57116,\"start\":57113},{\"end\":57128,\"start\":57125},{\"end\":57145,\"start\":57141},{\"end\":57479,\"start\":57471},{\"end\":57500,\"start\":57488},{\"end\":57517,\"start\":57509},{\"end\":57900,\"start\":57895},{\"end\":57918,\"start\":57909},{\"end\":57933,\"start\":57927},{\"end\":57945,\"start\":57940},{\"end\":58247,\"start\":58236},{\"end\":58267,\"start\":58259},{\"end\":58281,\"start\":58276},{\"end\":58616,\"start\":58611},{\"end\":58635,\"start\":58626},{\"end\":58656,\"start\":58644},{\"end\":58673,\"start\":58666},{\"end\":59127,\"start\":59118},{\"end\":59146,\"start\":59141},{\"end\":59162,\"start\":59156},{\"end\":59189,\"start\":59180},{\"end\":59211,\"start\":59199},{\"end\":59227,\"start\":59221},{\"end\":59963,\"start\":59953},{\"end\":59977,\"start\":59972},{\"end\":60438,\"start\":60428},{\"end\":60459,\"start\":60440},{\"end\":60475,\"start\":60468},{\"end\":60482,\"start\":60477}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":6767352},\"end\":52705,\"start\":52116},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":2575057},\"end\":53547,\"start\":52707},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":13348226},\"end\":54189,\"start\":53549},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":274052},\"end\":54482,\"start\":54191},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":1470207},\"end\":55215,\"start\":54484},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":5373990},\"end\":56109,\"start\":55217},{\"attributes\":{\"doi\":\"Au- gust 18-22\",\"id\":\"b6\",\"matched_paper_id\":415299},\"end\":56606,\"start\":56111},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":26593237},\"end\":57006,\"start\":56608},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":17042867},\"end\":57374,\"start\":57008},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":578034},\"end\":57800,\"start\":57376},{\"attributes\":{\"doi\":\"arXiv:cs/0602007\",\"id\":\"b10\",\"matched_paper_id\":2095658},\"end\":58206,\"start\":57802},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":3635922},\"end\":58567,\"start\":58208},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":565041},\"end\":59030,\"start\":58569},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":20233192},\"end\":59893,\"start\":59032},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1165875},\"end\":60328,\"start\":59895},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":1523893},\"end\":61094,\"start\":60330},{\"attributes\":{\"id\":\"b16\"},\"end\":61644,\"start\":61096},{\"attributes\":{\"id\":\"b17\"},\"end\":61963,\"start\":61646}]", "bib_title": "[{\"end\":52168,\"start\":52116},{\"end\":52754,\"start\":52707},{\"end\":53643,\"start\":53549},{\"end\":54235,\"start\":54191},{\"end\":54597,\"start\":54484},{\"end\":55287,\"start\":55217},{\"end\":56157,\"start\":56111},{\"end\":56710,\"start\":56608},{\"end\":57082,\"start\":57008},{\"end\":57464,\"start\":57376},{\"end\":57884,\"start\":57802},{\"end\":58227,\"start\":58208},{\"end\":58599,\"start\":58569},{\"end\":59105,\"start\":59032},{\"end\":59945,\"start\":59895},{\"end\":60418,\"start\":60330}]", "bib_author": "[{\"end\":52188,\"start\":52170},{\"end\":52207,\"start\":52188},{\"end\":52222,\"start\":52207},{\"end\":52229,\"start\":52222},{\"end\":52240,\"start\":52229},{\"end\":52253,\"start\":52240},{\"end\":52267,\"start\":52253},{\"end\":52280,\"start\":52267},{\"end\":52773,\"start\":52756},{\"end\":52789,\"start\":52773},{\"end\":52804,\"start\":52789},{\"end\":52821,\"start\":52804},{\"end\":53679,\"start\":53645},{\"end\":53686,\"start\":53679},{\"end\":53697,\"start\":53686},{\"end\":53710,\"start\":53697},{\"end\":53724,\"start\":53710},{\"end\":53737,\"start\":53724},{\"end\":54260,\"start\":54237},{\"end\":54275,\"start\":54260},{\"end\":54292,\"start\":54275},{\"end\":54617,\"start\":54599},{\"end\":54639,\"start\":54617},{\"end\":55308,\"start\":55289},{\"end\":55328,\"start\":55308},{\"end\":55351,\"start\":55328},{\"end\":56179,\"start\":56159},{\"end\":56194,\"start\":56179},{\"end\":56211,\"start\":56194},{\"end\":56732,\"start\":56712},{\"end\":56748,\"start\":56732},{\"end\":56764,\"start\":56748},{\"end\":57104,\"start\":57084},{\"end\":57118,\"start\":57104},{\"end\":57130,\"start\":57118},{\"end\":57147,\"start\":57130},{\"end\":57481,\"start\":57466},{\"end\":57502,\"start\":57481},{\"end\":57519,\"start\":57502},{\"end\":57902,\"start\":57886},{\"end\":57920,\"start\":57902},{\"end\":57935,\"start\":57920},{\"end\":57947,\"start\":57935},{\"end\":58249,\"start\":58229},{\"end\":58269,\"start\":58249},{\"end\":58283,\"start\":58269},{\"end\":58618,\"start\":58601},{\"end\":58637,\"start\":58618},{\"end\":58658,\"start\":58637},{\"end\":58675,\"start\":58658},{\"end\":59129,\"start\":59107},{\"end\":59148,\"start\":59129},{\"end\":59164,\"start\":59148},{\"end\":59191,\"start\":59164},{\"end\":59213,\"start\":59191},{\"end\":59229,\"start\":59213},{\"end\":59965,\"start\":59947},{\"end\":59979,\"start\":59965},{\"end\":60440,\"start\":60420},{\"end\":60461,\"start\":60440},{\"end\":60477,\"start\":60461},{\"end\":60484,\"start\":60477}]", "bib_venue": "[{\"end\":52363,\"start\":52347},{\"end\":53024,\"start\":52913},{\"end\":53825,\"start\":53811},{\"end\":54730,\"start\":54703},{\"end\":55504,\"start\":55465},{\"end\":56319,\"start\":56297},{\"end\":58340,\"start\":58326},{\"end\":58767,\"start\":58749},{\"end\":59354,\"start\":59339},{\"end\":60067,\"start\":60053},{\"end\":60575,\"start\":60539},{\"end\":52345,\"start\":52280},{\"end\":52911,\"start\":52821},{\"end\":53809,\"start\":53737},{\"end\":54322,\"start\":54292},{\"end\":54701,\"start\":54639},{\"end\":55418,\"start\":55351},{\"end\":56295,\"start\":56225},{\"end\":56794,\"start\":56764},{\"end\":57177,\"start\":57147},{\"end\":57575,\"start\":57519},{\"end\":57988,\"start\":57963},{\"end\":58324,\"start\":58283},{\"end\":58747,\"start\":58675},{\"end\":59337,\"start\":59229},{\"end\":60051,\"start\":59979},{\"end\":60537,\"start\":60484},{\"end\":61281,\"start\":61096},{\"end\":61802,\"start\":61646}]"}}}, "year": 2023, "month": 12, "day": 17}