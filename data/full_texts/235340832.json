{"id": 235340832, "updated": "2022-01-11 18:43:53.917", "metadata": {"title": "Real Time early Multi Stage Attack Detection", "authors": "[{\"middle\":[\"Sanjayrao\"],\"last\":\"Takey\",\"first\":\"Yuvraj\"},{\"middle\":[\"Gopal\"],\"last\":\"Tatikayala\",\"first\":\"Sai\"},{\"middle\":[\"Sarma\"],\"last\":\"Samavedam\",\"first\":\"Satyanadha\"},{\"middle\":[\"R\"],\"last\":\"Lakshmi Eswari\",\"first\":\"P\"},{\"middle\":[\"Uttam\"],\"last\":\"Patil\",\"first\":\"Mahesh\"}]", "venue": "2021 7th International Conference on Advanced Computing and Communication Systems (ICACCS)", "journal": "2021 7th International Conference on Advanced Computing and Communication Systems (ICACCS)", "publication_date": {"year": 2021, "month": null, "day": null}, "abstract": "In recent times, attackers are continuously developing advanced techniques for evading security, stealing personal financial data, Intellectual Property (IP) and sensitive information. These attacks often employ multiple attack vectors for gaining initial access to the systems. Analysts are often challenged to identify malware objective, initial attack vectors, attack propagation, evading techniques, protective mechanisms and unseen techniques. Most of these attacks are frequently referred to as Multi stage attacks and pose a grave threat to organizations, individuals and the government. Early multistage attack detection is a crucial measure to counter malware and deactivate it. Most traditional security solutions use signature-based detection, which frequently fails to thwart zero-day attacks. Manual analysis of these samples requires enormous effort for effectively counter exponential growth of malware samples. In this paper, we present a novel approach leveraging Machine Learning and MITRE Adversary Tactic Technique and Common knowledge (ATT&CK) framework for early multistage attack detection in real time. Firstly, we have developed a run-time engine that receives notification while malicious executable is downloaded via browser or a launch of a new process in the system. Upon notification, the engine extracts the features from static executable for learning if the executable is malicious. Secondly, we use the MITRE ATT&CK framework, evolved based on the real-world observations of the cyber attacks, that best describes the multistage attack with respect to the adversary Tactics, Techniques and Procedure (TTP) for detecting the malicious executable as well as predict the stages that the malware executes during the attack. Lastly, we propose a real-time system that combines both these techniques for early multistage attack detection. The proposed model has been tested on 6000 unpacked malware samples and it achieves 98 % accuracy. The other major contribution in this paper is identifying the Windows API calls for each of the adversary techniques based on the MITRE ATT&CK", "fields_of_study": null, "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": null, "doi": "10.1109/icaccs51430.2021.9441956"}}, "content": {"source": {"pdf_hash": "55c327dd4d9d83267f271c7fbcd5260d8713446f", "pdf_src": "IEEE", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "79fa8c09ce5cae51c003572db5b1e48ce67291c9", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/55c327dd4d9d83267f271c7fbcd5260d8713446f.txt", "contents": "\nReal Time early Multi Stage Attack Detection\n\n\nYuvraj Sanjayrao Takey \nCentre for Development of Advanced Computing (C-DAC\nHyderabadIndia\n\nSai Gopal Tatikayala \nCentre for Development of Advanced Computing (C-DAC) Hyderabad\nIndia\n\nSatyanadha Sarma Samavedam \nComputer Emergency Response Team -India Cert-In\nIndia\n\nLakshmi Eswari :prleswari@cdac.in \nCentre for Development of Advanced Computing (C-DAC) Hyderabad\nIndia\n\nP R \nCentre for Development of Advanced Computing (C-DAC) Hyderabad\nIndia\n\nMahesh Uttam Patil :maheshp@cdac.in \nCentre for Development of Advanced Computing (C-DAC) Hyderabad\nIndia\n\nReal Time early Multi Stage Attack Detection\n10.1109/ICACCS51430.2021.9441956Index Terms-Windows APImachine learningmalware de- tectionstatic analysisAPI callsPortable Executable (PE)Malicious codeTactics Techniques Procedure (TTP)Multistage attackMITREStatic Analysis\nIn recent times, attackers are continuously developing advanced techniques for evading security, stealing personal financial d ata, I ntellectual P roperty ( IP) a nd sensitive information. These attacks often employ multiple attack vectors for gaining initial access to the systems. Analysts are often challenged to identify malware objective, initial attack vectors, attack propagation, evading techniques, protective mechanisms and unseen techniques. Most of these attacks are frequently referred to as Multi stage attacks and pose a grave threat to organizations, individuals and the government. Early multistage attack detection is a crucial measure to counter malware and deactivate it. Most traditional security solutions use signaturebased detection, which frequently fails to thwart zero-day attacks. Manual analysis of these samples requires enormous effort for effectively counter exponential growth of malware samples. In this paper, we present a novel approach leveraging Machine Learning and MITRE Adversary Tactic Technique and Common knowledge (ATT&CK) framework for early multistage attack detection in real time. Firstly, we have developed a run-time engine that receives notification w hile m alicious e xecutable is downloaded via browser or a launch of a new process in the system. Upon notification, the e ngine e xtracts the f eatures from static executable for learning if the executable is malicious. Secondly, we use the MITRE ATT&CK framework, evolved based on the real-world observations of the cyber attacks, that best describes the multistage attack with respect to the adversary Tactics, Techniques and Procedure (TTP) for detecting the malicious executable as well as predict the stages that the malware executes during the attack. Lastly, we propose a real-time system that combines both these techniques for early multistage attack detection. The proposed model has been tested on 6000 unpacked malware samples and it achieves 98 % accuracy. The other major contribution in this paper is identifying the Windows API calls for each of the adversary techniques based on the MITRE ATT&CK\n\nI. INTRODUCTION\n\nWith the continuously evolving cyber threat landscape, organizations are constantly tracking the internal network and external access points to defend against the attacks. A security breach would compromise the client's data, damage the company's reputation and risk employee's data, Intellectual property, and physical data loss. It is challenging to provide assurance for cyber-attacks because of the accessibility of information across an organization's global connectivity, information accessibility for outside users and emerging new technologies. The rise of the targeted attacks continues to pose a serious threat to the organization as they continue to evolve and refine t heir t ools and t actics. T hese t argeted a ttacks are likely performed by a nation-state or state-sponsored groups, commonly referred to as an Advanced Threat Group (APT). APT targets government, defense, financial, l egal, industrial, manufacturing, Healthcare, Banking and many more to steal, spy, disrupt and cause financial damage. APT attacks gain an initial foothold through multiple attack vectors such as spear phishing, watering hole, social engineering, and exploiting Internet-facing application vulnerabilities. Once an attacker gains an initial foothold, malware spreads across the internal network, moving from one system to another system slowly to evade detection and finally accomplish the attacker's objective to steal, spy, disrupt and hide their tracks. These APT attacks often fall under multistage attack During the multistage attacks, attackers drop malign executable on the target system and attempt to spread across the organizations to achieve the final goal. These executable evade detection as most of the antivirus follows signature-based detection. The attacker repeatedly either employs obfuscation techniques to generate polymorphic malware or discover new tactics and techniques to evade detection. Detection of malign executable hinders the detection of multistage attacks. Many approaches have been developed to detect malicious executable, but most of the solutions identify the executable based on the characteristics of the malware families like viruses, worms, Trojans, bots etc [1]- [3]. There has been a steady rise in the solutions leveraging Machine Learning (ML) and deep learning for detecting malicious executable [4], [5]. ML is a method of data analysis that learns itself without explicit programming and facilitates in discovering the hidden patterns and makes decisions with minimal human 978-1-6654-0521-8/21/$31.00 \u00a92021 IEEE intervention. Most of the researchers focused on static and dynamic analysis for detecting malicious executable [1], [6]. In static analysis, PE structure is examined for anomalies without actually executing it [7]- [9]. PE attributes, API calls, API sequence, opcode and byte sequence, Printable Strings(PSI), Function length Frequency are the most commonly used features for detecting the malicious executable [2], [10]- [12]. However the API and opcode sequences are challenging if the executable is obfuscated.Though there has been a lot of research on detecting the malicious executable in the past, it mainly focuses on the limited set of Windows API calls and none of them are comprehensive [13]- [15]. In this paper, we focus on static analysis as it yields rich information without executing the malware In this paper, we propose a novel framework for early multistage attack detection in real time. We have investigated the MITRE ATT&CK framework for understanding the adversary Tactics, Techniques, and Procedures (TTP) which are based on real observation of the cyber attacks [16], [17]. TTP plays a significant role for the analyst to understand the enemy or threat actor, identify the blind spots, and facilitate in implementing corrective measures in advance. In this study, extensive research has been carried out to understand Adversary techniques for identifying potential Windows API calls. The outcome of the research facilitates in identifying the potential API for each of the TTP. For instance, input capture is one technique popularly used by adversaries for obtaining credentials for accounts. Most frequently used API calls for input capture are SetWindowsHookEx, GetKeyState, GetWindow-Text, ProcessKeyboardInputWorker, GetKeyboardState, Reg-isterHotKey, WriteFile. Similarly, we have identified around 240 plus potential windows API calls from 300+ TTP. The knowledge gained in MITRE serves two purposes \u2022 Predicting the stages that malware will execute during the attack \u2022 Building a malware dataset with 240 API calls along with binary file metadata Various machine learning models are built using malware dataset to determine the malicious executables. A run-time engine is developed to deploy the solution in real time. To summarize our contribution for early multi stage attack detection, our proposed system would perform static analysis on the Portable Executable (PE) binary, predict the malicious binaries by leveraging machine learning and map these binaries with the potential techniques employed by the adversary.\n\nThe rest of the paper is organized as follows. In Section II, discusses current research related to multistage attack detection. Section III presents a brief overview of the MITRE ATT&CK and readers familiar with it can skip this section. Section IV describes proposed methodology in early detection of multistage attack. Section V shows the results of our experimentation. We conclude our study in section VI.\n\n\nII. Re l a t e d Wo r k\n\nIn this section, we discuss related work carried out in Multi-Stage attack detection. Emmanouil Vasilomanolakis et al. [18] proposed multi-stage attack detection using honeypots for Industrial Control System (ICS). The author proposes novel architecture detects multi-stage attacks and automatically generates signatures. This signature would be fed to the Intrusion detection system for detecting and blocking future attacks.\n\nThe Authors [19] propose a framework which leverages Intrusion Kill Chain and defense patterns for detecting multistage attacks. The framework is evaluated on a pdf and demonstrated the multi-stage attack.Though it includes the CKC concept in the design, it didn't consider the adversary techniques as it plays an critical role in detecting the multistage attack Sunu Mathew et al. [20] propose real time Multi-stage attack that categorizes classification of intrusion detection sensor alerts based on their role as part of goal oriented multistage attacks. The authors demonstrated multistage attack incorporating awareness indicators as well as attack stage progression. However, this paper focus on the network traffic for detecting multi-stage and didn't correlate the host events across end system for detecting multi-stage attacks Francisco et al. [21] propose multi-stage attack detection using contextual information. The author proposes a new approach of identifying the Point of Entry (PoE) to a target system which an attacker would be using for exploiting the system. The author claims that the proposed solution detected 58% of attacks in real-time.However, this system didn't correlate the network and host events. Instead focus mainly on PoE of the target system There is a lot of research on classification of malware based on the API [10]- [15]. But none on identifying and predicting the adversary techniques using Window's Native API. In this paper, we focus on predicting whether the binary is malicious or not and map the binary to the adversary technique based on the windows native API. Compared to other researcher's work, we have conducted a broad investigation/analysis to satisfy the gaps and concentrated on the main aspect for detecting the multi-stage attack.\n\n\nIII. Ba c k g r o u n d\n\nLockheed Martin proposed Cyber Kill Chain (CKC) framework for identification and prevention of cyber attacks. CKC is an adversary model that describes the sequence of stages in the Multistage attack. Each stage accommodates a specific goal and the adversary needs to execute a chain of stages for achieving the attackers final objective. CKC framework is a powerful concept to detect multistage attack and defend against the attack by breaking the chain. CKC proposes seven distinct stages namely Reconnaissance, Weaponization, Delivery, Exploitation, Installation, Command & Control (C&C) and Actions on objectives. CKC provides an intelligence framework in understanding the multistage attack, but fails to provide the information about adversaries Tactics and Techniques. However, CKC is a starting point for understanding the multistage attack. In contrast, MITRE ATT&CK focus on the adversary Tactics, Techniques and procedure (TTP) derived from the real time attacks. It defines 12 Tactics which have  Figure 1 shows the overall architecture for early detection of multistage attack. Major component present are 1) Run Time Engine 2) Machine Learning components \u2022 Feature Extractor \u2022 ML Engine \u2022 Dataset 3) MITRE Adversary Technique Run-time engine reads the process events from Windows Operating System (OS) to determine whether the executable is malicious or not. It is a core component which is invoked either a process is created or a file download from the web browser. Windows OS provides event-logging service for applications and Operating System (OS) to record software and hardware events. All system and applications registry with event logging service to notify the changes in the OS. All the events are stored under a specific category in the C:/Windows/system32/config. Typically, these events are used for diagnosing and troubleshooting the system. However, events generated are huge and event raw data doesn't provide much information related to malicious activities unless correlated with the other events. On the other hand, Microsoft System Monitor (Sysmon) offers more concrete evidence of malicious events that facilitate the discovery of the malware. Runtime engine register with Sysmon for collecting detailed information about information about process creation, network connections and modification to file creation time . Sysmon is an application monitor that writes critical events to the Applications and Services Logs/Microsoft/Windows/Sysmon/Operational. Sysmon allows 23 critical events to be notified for the registered application. Out of 23 events, we have opted for two events \u2022 Event ID 1: Process creation -Event provides information about the newly created process \u2022 Event ID 15: FileCreateStreamHash -Most malware drop executables or configuration settings via browser download. This event facilitates capturing these malicious events. Even this feature helps in identifying the spear phishing attack Upon receiving the process creation event or Web browser file download, the run-time engine reads the executable file and passes it to the next stage. The next stage extracts the features from the static binary and pass it to the machine learning for detection of malicious executable.\n\nBefore proceeding to feature extraction, we first discuss on the dataset to understand how the distinguished features are identified for detecting multistage attack. As mentioned earlier, MITRE TTP are employed to gain insight of the adversary technique. Each adversary technique has been mapped to the Data Sources (DS) and these DS facilitates in detecting the multistage attack. MITRE has defined 52 DS for identifying the multistage attacks namely API Monitoring, System calls, Process use of network, Binary File Metadata, DLL Monitoring, Malware Reverse Engineering, Network Protocol Analysis, Network Intrusion Detection System, Application logs, process monitoring and many more. In this research,   Figure 2 process of labeling the dataset. The major challenge is to identify potential features from adversary techniques and build a labeled dataset. We have examined various adversary techniques that are identified using API, Binary File Meta data and DLL monitoring DS. Based on the literature survey and real time observations of the attack, potential features are identified [1], [10], [11], [13]- [16], [22]. Table-II shows the potential features for each DS, a total of 245 potential features are identified.\n\nFeature extraction is a critical component of machine learning which reads the PE file passed from the runtime engine and extracts the features. To extract features from PE file, python along with a pefile library is used. Model would take the features as the input and label the executable as malign or benign. If the executable is malicious, it predicts the stages that the malware executes during the attack. After examining the MITRE TTP, we have identified the API calls for various adversary techniques. Table-III  In this discussion, we discuss the testbed for evaluating the Machine learning model. Figure 3 shows the experimental setup for training the machine learning models and deployment of the model in real time. As explained earlier, the dataset generation is carried out by identifying the potential features from MITRE adversary technique and literature survey. Malware samples are collected from the publicly available sites, Cert-In, India and Honeypot and are kept in the malware repository. For each malware sample features are extracted from windows executable and labeled as malign. Similarly, we have collected the all executable present in the C folder from a freshly installed Windows 10 System, extracted features and labeled as benign. Labeled dataset contains 7699 entries out of which 4076 are labeled as malign and 3623 are labeled as benign. Naive Bayes, Decision Tree, KNN, SVM and Random Forest machine learning models are trained on the labeled dataset . After applying Principal Component Analysis (PCA) for reducing the feature size, feature size is 160 as compared to 257. The accuracy achieved is 98.18 %. Fig 4 shows   In this paper, we present a novel approach leveraging Machine Learning and MITRE Adversary Tactic Technique and Common knowledge (ATT&CK) framework for early multistage attack detection in real time. We have a evolved a real time solution that monitors the process creation, dropped binaries through the browser and determines the executable is malicious or not based on PE structure. To identify potential features, a lot of literature has been explored, experimented along with the understanding of Adversary TTP. In addition, we have investigated the Adversary techniques and identified the potential API for each of the possible adversary technique. Eventually, the proposed solution will predict the stages that the malware executes during the attack based on the API identified using MITRE framework. The results demonstrate that leveraging Machine learning and MITRE is a powerful method for detecting and predicting Multi-Stage attack\n\nIn future work, we intend to develop more sophisticated techniques for identifying the multistage attack. The planned solution will incorporate the real time events generated from the remaining Data Sources and map with the MITRE adversary techniques. Thus, early multistage detection along with the planned work would facilitate in detection of advanced Multi-Stage attack. This could be valuable for discovering new adversary techniques employed and also to understand the complete end to end activities carried out during the attack.\n\nRe f e r e n c e s\n\nFig. 2 .\n2Labeled Dataset\n\n\nshows the API that would be executed for each adversary technique V. Ex p e r i m e n t a l Re s u l t s\n\nTABLE I MITRE\nITa c t ic M ITR E Tactic through which adversary run malicious code on local or remote system Control Panel items, Execution through API Persistence Techniques for keeping access to system across reboots Logon scripts, New service Privilege escalation Techniques for gaining high level permissions on a system or network Bypass User Access Control, Hooking Defensive Evasion Techniques to avoid detection of security solutions Access Token Manipulation, code signing Credential access Techniques for stealing username and password details Hooking, Input Capture Discovery Techniques for gaining knowledge of the host and network environment Account Discovery,Network Service Scanning Lateral Movement Techniques to enter and control remote system in the network Pass the Hash, Remote Desktop Protocol Collection Techniques for gathering information of target system Audio capture, screen capture Command & Control Techniques to communicate with victim system and issue command Data Encoding, Data obfuscation Impact Technique to disrupt availability or compromise integrity Data Destruction, Account access Removal earlier been referred to as stages in CKC. Many adversary techniques are discovered based on the real observation of attack data for each tactic and the adversary chose one technique out of many to accomplish the specific tactic. Along with adversary technique, detailed procedure of the technique which includes registry, configuration, startup services, file creation/modification/deletion and network changes. MITRE ATT&CK is a collection of 300 plus adversary TTP's . Table-I shows MITRE Tactics and their corresponding adversary techniques. For simplicity, only two adversary techniques are listed under each tactic IV. Pr o p o s e d Me t h o d o l o g yObjective \nAdversary Techniques \n\nInitial Access \nAdversary employ multiple attack vector to gain initial footholds within a network \nDrive-by-Download, Spear-phishing \nExecution \nDifferent mechanism \n\nTABLE II F\nIIe a t u r e s d e r iv e d f r o m MITRE D a t a S o u r c eD ata Source \nF eature N am e \nF eature N u m ber \n\nAPI \nAPI calls \nF1-F244 \nExport Table \nF245 \nImport Table \nF246 \nOrdinal present \nF247 \nArchitecture \nF248 \nValidEntryPoint \nF249 \nValidRawSize \nF250 \nValidHeader \nF251 \nBinary \nStdSection \nF252 \nFile \nSigned \nF253 \nMetadata \nSection count \nF254 \nFunction count \nF255 \nSize of Initialized data \nF256 \nispacked \nF257 \nisdebug \nF258 \nDLL Monitoring \nDLL count \nF259 \n\nwe are focusing on the DS which would be extracted from \nthe Windows Portable Executable (PE). PE format describes \nthe structure of executable, Dynamic Linking Library (DLL) \nand object files which are compatible with all versions of \nWindows OS. PE files encapsulate different sections which \ncontain information for Windows loader to manage and wrap \nthe executable code [8]. PE file header contains MS-DOS \nstub, File header, optional header, section header and their \ncorresponding sections. \n\n\n\n\nthe predicted adversary techniques executed by the malware and predicted stages are highlightedExecution \nPersistence \nPrivilege_Escalation Defense_Evasion \nC redenti al_Access \n\nControl Panel Items \nAccount \nManipulation \n\nAccess Token \nManipulation \n\nAccess Token \nManipulation \nInput Capture \n\nDynamic Data \nExchange \nBITS Jobs \nExtra Window \nMemory Injection \nBITS Jobs \nAccount Manipulation \n\nExecution through \nAPI \nBootkit \nHooking \nComponent \nFirmware \nCredential Dumping \n\nExecution through \nModule Load \n\nComponent \nFirmware \nPort Monitors \nControl Panel Items Hooking \n\nTwo-Factor \nLSASS Driver \nHooking \nProcess Injection \nDC Shadow \nAuthentication \nInterception \n\nLSASS Driver \nSID-History Injection \nDisabling Security \nTools \n-\n\nPort Monitors \nExtra Window \nMemory Injection \nSIP and Trust \nFile System Logical \nProvider Hijacking \nOffsets \n\n-\nSystem Firmware \n-\nIndicator Removal \non Host \n-\n\n-\nTime Providers \n-\nNTFS File Attributes -\nProcess \nDoppelgan ging \n-\n-\n-\nProcess Hollowing -\n\n' \n\u25a0 \n\u25a0 \nProcess Injection \nSIP and Trust \n\n\u25a0 \n\nProvider Hijacking \n\nDiscovery \n\nAccount Discovery \n\nLateral_Movement Collection Impact Extras \nAnti-\nDebugging \n\nDistributed Component \nObject Model \n\nAudio \nService \nCapture \nStop \nApplication \nWindow Discovery \nBrowser Bookmark \nDiscovery \nDomain Trust \nDiscovery \n\nPermission Groups \nDiscovery \n\nSystem Time \nDiscovery \n\nAnti-VM \n\nFig. 4. Mapping Binary to MITRE phases \n\n\n\nTABLE III :\nIIIMITRE Adversary Techniques and their corresponding API Distributed Component Object Model CreateObject, CoCreatelnstanceEx, ColnitializeEx, CreateSession, Co-GetMalloc, CoInstall, CoLoadLibrary, CoQueryClientBlanket, Initialize, RpcBindingCreate, RpcBindingBind, StringFromCLSID, CoReg-isterClassObject, RpcServerListen, listen, accept, connect, socket, send, recv, recvfrom, sendto, bind SetWindowsHookEx, GetKeyState, GetAsyncK-eyState, GetWindowText, GetKeyboardState, ProcessKeyboardlnput-Worker, ProcessKeyboardInput, GetCursorPos Screen Capture SetWindowsHookEx, BitBlt, WriteFile, SelectObject, CreateCom-patibleBitmap, CreateBitmap, CreateCompatibleDC, GetDeviceCaps, GetDC, GetWindowDC Impact Service Stop ChangeServiceConfig, ControlService, CloseServiceHandle, Create-Service, DeleteService, OpenSCManager, OpenService, QueryService-Config, EnumServicesStatusEx, StartService, QueryServiceStatusEx, SetServiceObjectSecurity VI. Co n c l u s i o nMITRE Tactic \nAdversary Technique \nAPI calls \n\nExecution \n\nControl Panel Items \nControl_RunDLL, Control_RunDLLAsUser \nDynamic Data Exchange \nDdeSetQualityOfService, FreeDDElParam, ImpersonateDdeClien-\ntWindow, PackDDElParam, ReuseDDElParam, UnpackDDElParam \nExecution through API \nCreateProcess, CreateProcessAsUser, CreateProcessInternal, Cre-\nateProcessWithLogon, \nLoadLibrary, LoadLibraryEx, LoadModule, LoadPackagedLibrary, \nWinExec, ShellExecute, ShellExecuteEx \nExecution through Module \nLoad \n\nLoadLibrary, CreateProcess \n\nPersistence \n\nBITS Jobs \nCoInitializeEx, CoCreateInstance, CreateJob, GetJob, AddFile, Set-\nNotifyFlags, SetCredentials, Resume, GetProxySettings, SetPriority, \nTakeOwnership \nHooking \nSetWindowsHookEx, CallNextHookEx, CreateToolhelp32Snapshot, \nProcess32First, Process32Next, Thread32First, Thread32Next, Load-\nLibrary, GetProcAddress \nPort Monitors \nAddMonitor, WinINet, EnumMonitors, EnumPrinters, GetPrinter-\nDriver, GetCorePrinterDrivers, GetPrinterDriverPackagePath, Get-\nPrintProcessorDirectory, InstallPrinterDriverFromPackage, Upload-\nPrinterDriverPackage \nSIP and Trust Provider Hi-\njacking \n\nCryptSIPDllGetSignedDataMsg, \nCryptSIPDllVerifyIndirectData, \nCryptSIPLoad, CryptSIPRetrieveSubjectGuid, CryptSIPAddProvider \nTime Providers \nGetSystemTimePreciseAsFileTime, \nAlertSamplesAvailFunc, \nGetTimeSysInfoFunc, LogTimeProvEventFunc, TimeProvOpen \n\nPrivilege \nEscalation \n\nAccess Token Manipulation DuplicateToken, ImpersonateLoggedOnUser, SetThreadToken, Dupli-\ncateToken, CreateProcessWithToken, LogonUser \nExtra Window Memory In-\njection \n\nSetWindowLong, GetWindowLong, SendNotifyMessage \n\nHooking \nSetWindowsHookEx, CallNextHookEx, CreateToolhelp32Snapshot, \nProcess32First, Process32Next, Thread32First, Thread32Next, Load-\nLibrary, GetProcAddress \nPort Monitors \nAddMonitor, WinINet, EnumMonitors, EnumPrinters, GetPrinter-\nDriver, GetCorePrinterDrivers, GetPrinterDriverPackagePath, Get-\nPrintProcessorDirectory, InstallPrinterDriverFromPackage, Upload-\nPrinterDriverPackage \nSID-History Injection \nDsAddSidHistory \nProcess Injection \nWriteProcessMemory, \nCreateRemoteThread, \nOpenProcess, \nVirtualAllocEx, \nCreateToolhelp32Snapshot, \nProcess32First, \nProcess32Next, Thread32First, Thread32Next, GetThreadContext, \nCreateProcess, NtUnmapViewOfSection, ZwUnmapViewOfSection, \nSetThreadContext, ResumeThread, RegCreateKeyEx, RegSetValueEx, \nCreateProcessAsUser, \nCreateProcessWithLogon, \nCreatePro-\ncessWithToken, \nWinExec, \nQueueUserAPC, \nSetWindowLong, \nGetWindowLong, \nSendNotifyMessage, \nCreateWindowEx, \nVirtualProtect, GetStartupInfo, HeapCreate, IsValidCodePage \nParent PID Spoofing \nCreateProcess, UpdateProcThreadAttribute \nAccess Token Manipulation DuplicateToken, ImpersonateLoggedOnUser, SetThreadToken, Dupli-\ncateToken, CreateProcessWithToken, LogonUser \n\nDefense \nEvasion \n\nBITS Jobs \nCoInitializeEx, CoCreateInstance, CreateJob, GetJob, AddFile, Set-\nNotifyFlags, SetCredentials, Resume, GetProxySettings, SetPriority, \nTakeOwnership \nControl Panel Items \nControLRunDLL, Control_RunDLLAsUser \nExtra Window Memory In-\njection \n\nSetWindowLong, GetWindowLong, SendNotifyMessage \n\nNTFS File Attributes \nZwSetEaFile, ZwQueryEaFile \nProcess Doppelganging \nCreateTranscation, \nCommitTransaction, \nCreateFileTransacted, \nCreateDirectoryTransacted, RollbackTransaction, NtCreateProcessEx, \nNtCreateThreadEx, WriteProcessMemory \nProcess Hollowing \nWriteProcessMemory, \nCreateRemoteThread, \nOpenProcess, \nVirtualAllocEx, \nCreateToolhelp32Snapshot, \nProcess32First, \nProcess32Next, Thread32First, Thread32Next, GetThreadContext, \nCreateProcess, NtUnmapViewOfSection, ZwUnmapViewOfSection, \nSetThreadContext, ResumeThread, RegCreateKeyEx, RegSetValueEx, \nCreateProcessAsUser, CreateProcessWithLogon, CreateProcessWith-\nToken, WinExec, QueueUserAPC, SetWindowLong, GetWindowLong, \nSendNotifyMessage, CreateWindowEx, VirtualProtect \nSIP and Trust Provider Hi-\njacking \n\nCryptSIPDllGetSignedDataMsg, \nCryptSIPDllVerifyIndirectData, \nCryptSIPLoad, CryptSIPRetrieveSubjectGuid, CryptSIPAddProvider \nParent PID Spoofing \nCreateProcess, UpdateProcThreadAttribute \n\nCredential \nAccess \n\nInput Capture \nSetWindowsHook, SetWindowsHookEx, GetKeyState, GetAsyncK-\neyState, GetWindowText, GetKeyboardState, ProcessKeyboardInput-\nWorker, ProcessKeyboardInput, GetCursorPos \nHooking \nSetWindowsHookEx, CallNextHookEx, CreateToolhelp32Snapshot, \nProcess32First, Process32Next, Thread32First, Thread32Next, Load-\nLibrary, GetProcAddress \nCredential Dumping \nOpenSamUser, CloseSamUser, InitSecurityInterface, QuerySecu-\nrityPackageInfo, AcquireCredentialsHandle, ExportSecurityContext, \nQueryCredentialsAttributes, ImportSecurityContext, AcceptSecurity-\nContext, CompleteAuthToken, ImpersonateSecurityContext, Initial-\nizeSecurityContext, QueryContextAttributes, DecryptMessage, En-\ncryptMessage, LsaApCallPackage, LsaApInitializePackage, LsaApL-\nogonUser, SpAcceptCredentials, SpAcquireCredentialsHandle, SpAc-\nceptLsaModeContext, SpAddCredentials, SpGetCredentials, SplnitL-\nsaModeContext, SPInitialize, LsaCallAuthenticationPackage, LsaCon-\nnectUntrusted, LsaEnumerateLogonSessions, LsaLogonUser, LsaReg-\nisterLogonProcess, AddCredential, AllocateLsaHeap, DeleteCreden-\ntial, CredUIConfirmCredentials, CredUIReadSSOCred, CredEnu-\nmerate, CredFindBestCredential, CredRead, CredRename, Cred-\nWrite, CredWriteDomainCredentials, NPLogonNotify, CredGetTar-\ngetInfo, SaslAcceptSecurityContext, SaslEnumerateProfiles, SaslGet-\nContextOption, SaslInitializeSecurityContext, SaslSetContextOption, \nChangeAccountPassword, LsaManageSidNameMapping, LsaOpen-\nPolicy, SpLsaModeInitialize, AddSecurityPackage, DeleteSecurity-\nPackage \n\nDiscovery \n\nAccount Discovery \nColnitializeEx, ColnitializeSecurity, CoSetProxyBlanket, CoCreateln-\nstance, ConnectServer \nDomain Trust Discovery \nDSEnumerateDomainTrusts, LsaQueryTrustedDomainInfo, LsaCre-\nateTrustedDomainEx, LsaDeleteTrustedDomain, LsaSetTrustedDo-\nmainInformation \nSystem Time Discovery \nGetSystemTime, GetSystemTimeAsFileTime, GetSystemTimeAdjust-\nment, SetSystemTimeAdjustment, GetTickCount \nLateral \nMovement \n\nCollection \n\nAudio Capture \nActivateAudioInterfaceAsync, wavelnOpen \nClipboard Data \nGetClipboardSequenceNumber, SetClipboardViewer, GetClipboard-\nViewer, ChangeClipboardChain, OpenClipboard, CloseClipboard, \nEmptyClipboard, RegisterClipboardFormat, GetClipboardData, Set-\nClipboardData \nInput Capture \nSetWindowsHook, \n7th International Conference on Advanced Computing and Communication Systems (ICACCS)\n\nMalware classification using early stage behavioral analysis. N Kumar, S Mukhopadhyay, M Gupta, A Handa, S K Shukla, 2019N. Kumar, S. Mukhopadhyay, M. Gupta, A. Handa, and S. K. Shukla, \"Malware classification using early stage behavioral analysis,\" in 2019\n\n. Asia Joint Conference on Information Security (AsiaJCIS). IEEE. Asia Joint Conference on Information Security (AsiaJCIS). IEEE, 2019, pp. 16-23.\n\nClassification of malware based on string and function feature selection. R Islam, R Tian, L Batten, S Versteeg, 2010 Second Cybercrime and Trustworthy Computing Workshop. IEEER. Islam, R. Tian, L. Batten, and S. Versteeg, \"Classification of mal- ware based on string and function feature selection,\" in 2010 Second Cybercrime and Trustworthy Computing Workshop. IEEE, 2010, pp. 9-17.\n\nInvestigation of malicious portable executable file detection on the network using supervised learning techniques. R Vyas, X Luo, N Mcfarland, C Justice, 2017IFIP/IEEE Symposium on Integrated Network and Service Management (IM). IEEER. Vyas, X. Luo, N. McFarland, and C. Justice, \"Investigation of malicious portable executable file detection on the network using super- vised learning techniques,\" in 2017IFIP/IEEE Symposium on Integrated Network and Service Management (IM). IEEE, 2017, pp. 941-946.\n\nDeepsign: Deep learning for automatic malware signature generation and classification. O E David, N S Netanyahu, 2015 International Joint Conference on Neural Networks (IJCNN). IEEEO. E. David and N. S. Netanyahu, \"Deepsign: Deep learning for automatic malware signature generation and classification,\" in 2015 International Joint Conference on Neural Networks (IJCNN). IEEE, 2015, pp. 1-8.\n\nDlgraph: Malware detection using deep learning and graph embedding. H Jiang, T Turki, J T Wang, 2018 17th IEEE international conference on machine learning and applications (ICMLA). IEEEH. Jiang, T. Turki, and J. T. Wang, \"Dlgraph: Malware detection using deep learning and graph embedding,\" in 2018 17th IEEE international conference on machine learning and applications (ICMLA). IEEE, 2018, pp. 1029-1033.\n\nStatic detection of malware and benign executable using machine learning algorithm. D Kim, S Woo, D Lee, T Chung, INTERNET 2016: The Eighth International Conference on Evolving Internet. D. Kim, S. Woo, D. Lee, and T. Chung, \"Static detection of malware and benign executable using machine learning algorithm,\" in INTERNET 2016: The Eighth International Conference on Evolving Internet, 2016, pp. 14-19.\n\nDetecting unknown malicious executables using portable executable headers. T.-Y Wang, C.-H Wu, C.-C Hsieh, 2009 Fifth International Joint Conference on INC, IMS and IDC. IEEET.-Y. Wang, C.-H. Wu, and C.-C. Hsieh, \"Detecting unknown malicious executables using portable executable headers,\" in 2009 Fifth Interna- tional Joint Conference on INC, IMS and IDC. IEEE, 2009, pp. 278- 284.\n\nPe-miner: Mining structural information to detect malicious executables in realtime. M Z Shafiq, S M Tabish, F Mirza, M Farooq, Recent Advances in Intrusion Detection. E. Kirda, S. Jha, and D. BalzarottiBerlin, Heidelberg; Berlin HeidelbergSpringerM. Z. Shafiq, S. M. Tabish, F. Mirza, and M. Farooq, \"Pe-miner: Mining structural information to detect malicious executables in realtime,\" in Re- cent Advances in Intrusion Detection, E. Kirda, S. Jha, and D. Balzarotti, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2009, pp. 121- 141.\n\nLearning the pe header, malware detection with minimal domain knowledge. E Raff, J Sylvester, C Nicholas, Proceedings o f the 10th ACM Workshop on Artificial Intelligence and Security. o f the 10th ACM Workshop on Artificial Intelligence and SecurityE. Raff, J. Sylvester, and C. Nicholas, \"Learning the pe header, malware detection with minimal domain knowledge,\" in Proceedings o f the 10th ACM Workshop on Artificial Intelligence and Security, 2017, pp. 121- 132.\n\nMalware detection via api calls, topic models and machine learning. G G Sundarkumar, V Ravi, I Nwogu, V Govindaraju, 2015 IEEE International Conference on Automation Science and Engineering (CASE). IEEEG. G. Sundarkumar, V. Ravi, I. Nwogu, and V. Govindaraju, \"Malware detection via api calls, topic models and machine learning,\" in 2015 IEEE International Conference on Automation Science and Engineering (CASE). IEEE, 2015, pp. 1212-1217.\n\nStatistical study of imported apis by pe type malware. M Belaoued, S Mazouzi, 2014 International Conference on Advanced Networking Distributed Systems and Applications. IEEEM. Belaoued and S. Mazouzi, \"Statistical study of imported apis by pe type malware,\" in 2014 International Conference on Advanced Networking Distributed Systems and Applications. IEEE, 2014, pp. 82-86.\n\nNative api based windows anomaly intrusion detection method using svm. M Wang, C Zhang, J Yu, IEEE International Conference on Sensor Networks, Ubiquitous, and Trustworthy Computing (SUTC'06). IEEE16M. Wang, C. Zhang, and J. Yu, \"Native api based windows anomaly intrusion detection method using svm,\" in IEEE International Con- ference on Sensor Networks, Ubiquitous, and Trustworthy Computing (SUTC'06), vol. 1. IEEE, 2006, pp. 6-pp.\n\nAn information retrieval approach for malware classification based on windows api calls. J Y Cheng, T.-S Tsai, C.-S Yang, 2013 International conference on machine learning and cybernetics. IEEE4J. Y.-C. Cheng, T.-S. Tsai, and C.-S. Yang, \"An information retrieval approach for malware classification based on windows api calls,\" in 2013 International conference on machine learning and cybernetics, vol. 4. IEEE, 2013, pp. 1678-1683.\n\nMalware classification based on api calls and behaviour analysis. A , T Acarman, IET Information Security. 122A. Pekta \u00a7 and T. Acarman, \"Malware classification based on api calls and behaviour analysis,\" IET Information Security, vol. 12, no. 2, pp. 107-117, 2018.\n\nUsing spatiotemporal information in api calls with machine learning algorithms for malware detection. F Ahmed, H Hameed, M Z Shafiq, M Farooq, Proceedings o f the 2nd ACM workshop on Security. o f the 2nd ACM workshop on SecurityF. Ahmed, H. Hameed, M. Z. Shafiq, and M. Farooq, \"Using spatio- temporal information in api calls with machine learning algorithms for malware detection,\" in Proceedings o f the 2nd ACM workshop on Security and artificial intelligence, 2009, pp. 55-62.\n\nMitre att&ck: Design and philosophy. B E Strom, A Applebaum, D P Miller, K C Nickels, A G Pennington, C B Thomas, Technical reportB. E. Strom, A. Applebaum, D. P. Miller, K. C. Nickels, A. G. Pennington, and C. B. Thomas, \"Mitre att&ck: Design and philosophy,\" Technical report, 2018.\n\nMitre attck. \"Mitre attck,\" https://attack.mitre.org/.\n\nMulti-stage attack detection and signature generation with ics honeypots. E Vasilomanolakis, S Srinivasa, C G Cordero, M M\u00fchlhauser, NOMS 2016-2016 IEEE/IFIP Network Operations and Management Symposium. IEEEE. Vasilomanolakis, S. Srinivasa, C. G. Cordero, and M. M\u00fchlhauser, \"Multi-stage attack detection and signature generation with ics hon- eypots,\" in NOMS 2016-2016 IEEE/IFIP Network Operations and Management Symposium. IEEE, 2016, pp. 1227-1232.\n\nTowards a framework to detect multi-stage advanced persistent threats attacks. P Bhatt, E T Yano, P Gustavsson, 2014 IEEE 8th international symposium on service oriented system engineering. P. Bhatt, E. T. Yano, and P. Gustavsson, \"Towards a framework to detect multi-stage advanced persistent threats attacks,\" in 2014 IEEE 8th international symposium on service oriented system engineering.\n\n. IEEE. IEEE, 2014, pp. 390-395.\n\nReal-time multistage attack awareness through enhanced intrusion alert clustering. S Mathew, D Britt, R Giomundo, S Upadhyaya, M Sudit, A Stotz, MILCOM 2005-2005 IEEE Military Communications Conference. IEEES. Mathew, D. Britt, R. Giomundo, S. Upadhyaya, M. Sudit, and A. Stotz, \"Real-time multistage attack awareness through enhanced intrusion alert clustering,\" in MILCOM 2005-2005 IEEE Military Com- munications Conference. IEEE, 2005, pp. 1801-1806.\n\nMulti-stage attack detection using contextual information. F J Aparicio-Navarro, K G Kyriakopoulos, I Ghafir, S Lambotharan, J A Chambers, MILCOM 2018-2018 IEEE Military Communications Conference (MILCOM). IEEEF. J. Aparicio-Navarro, K. G. Kyriakopoulos, I. Ghafir, S. Lambotharan, and J. A. Chambers, \"Multi-stage attack detection using contextual information,\" in MILCOM 2018-2018 IEEE Military Communications Conference (MILCOM). IEEE, 2018, pp. 1-9.\n\nSelecting features to classify malware. K Raman, InfoSec Southwest. 2012K. Raman et al., \"Selecting features to classify malware,\" InfoSec Southwest, vol. 2012, 2012.\n", "annotations": {"author": "[{\"start\":\"48\",\"end\":\"139\"},{\"start\":\"140\",\"end\":\"231\"},{\"start\":\"232\",\"end\":\"314\"},{\"start\":\"315\",\"end\":\"419\"},{\"start\":\"420\",\"end\":\"494\"},{\"start\":\"495\",\"end\":\"601\"}]", "publisher": null, "author_last_name": "[{\"start\":\"65\",\"end\":\"70\"},{\"start\":\"144\",\"end\":\"160\"},{\"start\":\"249\",\"end\":\"258\"},{\"start\":\"323\",\"end\":\"329\"},{\"start\":\"508\",\"end\":\"513\"}]", "author_first_name": "[{\"start\":\"48\",\"end\":\"54\"},{\"start\":\"55\",\"end\":\"64\"},{\"start\":\"140\",\"end\":\"143\"},{\"start\":\"232\",\"end\":\"242\"},{\"start\":\"243\",\"end\":\"248\"},{\"start\":\"315\",\"end\":\"322\"},{\"start\":\"420\",\"end\":\"421\"},{\"start\":\"422\",\"end\":\"423\"},{\"start\":\"495\",\"end\":\"501\"},{\"start\":\"502\",\"end\":\"507\"}]", "author_affiliation": "[{\"start\":\"72\",\"end\":\"138\"},{\"start\":\"162\",\"end\":\"230\"},{\"start\":\"260\",\"end\":\"313\"},{\"start\":\"350\",\"end\":\"418\"},{\"start\":\"425\",\"end\":\"493\"},{\"start\":\"532\",\"end\":\"600\"}]", "title": "[{\"start\":\"1\",\"end\":\"45\"},{\"start\":\"602\",\"end\":\"646\"}]", "venue": null, "abstract": "[{\"start\":\"871\",\"end\":\"2989\"}]", "bib_ref": "[{\"start\":\"5209\",\"end\":\"5212\",\"attributes\":{\"ref_id\":\"b0\"}},{\"start\":\"5214\",\"end\":\"5217\",\"attributes\":{\"ref_id\":\"b3\"}},{\"start\":\"5351\",\"end\":\"5354\",\"attributes\":{\"ref_id\":\"b4\"}},{\"start\":\"5356\",\"end\":\"5359\",\"attributes\":{\"ref_id\":\"b5\"}},{\"start\":\"5682\",\"end\":\"5685\",\"attributes\":{\"ref_id\":\"b0\"}},{\"start\":\"5687\",\"end\":\"5690\",\"attributes\":{\"ref_id\":\"b6\"}},{\"start\":\"5781\",\"end\":\"5784\",\"attributes\":{\"ref_id\":\"b7\"}},{\"start\":\"5786\",\"end\":\"5789\",\"attributes\":{\"ref_id\":\"b9\"}},{\"start\":\"5982\",\"end\":\"5985\",\"attributes\":{\"ref_id\":\"b2\"}},{\"start\":\"5987\",\"end\":\"5991\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"5993\",\"end\":\"5997\",\"attributes\":{\"ref_id\":\"b12\"}},{\"start\":\"6268\",\"end\":\"6272\",\"attributes\":{\"ref_id\":\"b13\"}},{\"start\":\"6274\",\"end\":\"6278\",\"attributes\":{\"ref_id\":\"b15\"}},{\"start\":\"6658\",\"end\":\"6662\",\"attributes\":{\"ref_id\":\"b16\"}},{\"start\":\"6664\",\"end\":\"6668\",\"attributes\":{\"ref_id\":\"b17\"}},{\"start\":\"8682\",\"end\":\"8686\",\"attributes\":{\"ref_id\":\"b18\"}},{\"start\":\"9003\",\"end\":\"9007\",\"attributes\":{\"ref_id\":\"b19\"}},{\"start\":\"9373\",\"end\":\"9377\",\"attributes\":{\"ref_id\":\"b21\"}},{\"start\":\"9845\",\"end\":\"9849\",\"attributes\":{\"ref_id\":\"b22\"}},{\"start\":\"10348\",\"end\":\"10352\",\"attributes\":{\"ref_id\":\"b15\"}},{\"start\":\"15129\",\"end\":\"15132\",\"attributes\":{\"ref_id\":\"b0\"}},{\"start\":\"15134\",\"end\":\"15138\",\"attributes\":{\"ref_id\":\"b10\"}},{\"start\":\"15140\",\"end\":\"15144\",\"attributes\":{\"ref_id\":\"b11\"}},{\"start\":\"15146\",\"end\":\"15150\",\"attributes\":{\"ref_id\":\"b13\"}},{\"start\":\"15152\",\"end\":\"15156\",\"attributes\":{\"ref_id\":\"b16\"}},{\"start\":\"15158\",\"end\":\"15162\",\"attributes\":{\"ref_id\":\"b23\"}}]", "figure": "[{\"start\":\"18427\",\"end\":\"18453\",\"attributes\":{\"id\":\"fig_0\"}},{\"start\":\"18454\",\"end\":\"18560\",\"attributes\":{\"id\":\"fig_1\"}},{\"start\":\"18561\",\"end\":\"20552\",\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"}},{\"start\":\"20553\",\"end\":\"21544\",\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"}},{\"start\":\"21545\",\"end\":\"22975\",\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"}},{\"start\":\"22976\",\"end\":\"30356\",\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"}}]", "paragraph": "[{\"start\":\"3008\",\"end\":\"8123\"},{\"start\":\"8125\",\"end\":\"8535\"},{\"start\":\"8563\",\"end\":\"8989\"},{\"start\":\"8991\",\"end\":\"10780\"},{\"start\":\"10808\",\"end\":\"14039\"},{\"start\":\"14041\",\"end\":\"15264\"},{\"start\":\"15266\",\"end\":\"17868\"},{\"start\":\"17870\",\"end\":\"18406\"},{\"start\":\"18408\",\"end\":\"18426\"}]", "formula": null, "table_ref": "[{\"start\":\"15164\",\"end\":\"15172\",\"attributes\":{\"ref_id\":\"tab_0\"}},{\"start\":\"15776\",\"end\":\"15785\",\"attributes\":{\"ref_id\":\"tab_0\"}}]", "section_header": "[{\"start\":\"2991\",\"end\":\"3006\"},{\"start\":\"8538\",\"end\":\"8561\"},{\"start\":\"10783\",\"end\":\"10806\"},{\"start\":\"18428\",\"end\":\"18436\"},{\"start\":\"18562\",\"end\":\"18575\"},{\"start\":\"20554\",\"end\":\"20564\"},{\"start\":\"22977\",\"end\":\"22988\"}]", "table": "[{\"start\":\"20352\",\"end\":\"20552\"},{\"start\":\"20627\",\"end\":\"21544\"},{\"start\":\"21642\",\"end\":\"22975\"},{\"start\":\"23949\",\"end\":\"30356\"}]", "figure_caption": "[{\"start\":\"18438\",\"end\":\"18453\"},{\"start\":\"18456\",\"end\":\"18560\"},{\"start\":\"18577\",\"end\":\"20352\"},{\"start\":\"20567\",\"end\":\"20627\"},{\"start\":\"21547\",\"end\":\"21642\"},{\"start\":\"22992\",\"end\":\"23949\"}]", "figure_ref": "[{\"start\":\"11816\",\"end\":\"11824\"},{\"start\":\"14749\",\"end\":\"14757\",\"attributes\":{\"ref_id\":\"fig_0\"}},{\"start\":\"15873\",\"end\":\"15881\"},{\"start\":\"16912\",\"end\":\"16923\"}]", "bib_author_first_name": "[{\"start\":\"30506\",\"end\":\"30507\"},{\"start\":\"30515\",\"end\":\"30516\"},{\"start\":\"30531\",\"end\":\"30532\"},{\"start\":\"30540\",\"end\":\"30541\"},{\"start\":\"30549\",\"end\":\"30550\"},{\"start\":\"30551\",\"end\":\"30552\"},{\"start\":\"30925\",\"end\":\"30926\"},{\"start\":\"30934\",\"end\":\"30935\"},{\"start\":\"30942\",\"end\":\"30943\"},{\"start\":\"30952\",\"end\":\"30953\"},{\"start\":\"31352\",\"end\":\"31353\"},{\"start\":\"31360\",\"end\":\"31361\"},{\"start\":\"31367\",\"end\":\"31368\"},{\"start\":\"31380\",\"end\":\"31381\"},{\"start\":\"31827\",\"end\":\"31828\"},{\"start\":\"31829\",\"end\":\"31830\"},{\"start\":\"31838\",\"end\":\"31839\"},{\"start\":\"31840\",\"end\":\"31841\"},{\"start\":\"32200\",\"end\":\"32201\"},{\"start\":\"32209\",\"end\":\"32210\"},{\"start\":\"32218\",\"end\":\"32219\"},{\"start\":\"32220\",\"end\":\"32221\"},{\"start\":\"32625\",\"end\":\"32626\"},{\"start\":\"32632\",\"end\":\"32633\"},{\"start\":\"32639\",\"end\":\"32640\"},{\"start\":\"32646\",\"end\":\"32647\"},{\"start\":\"33021\",\"end\":\"33025\"},{\"start\":\"33032\",\"end\":\"33036\"},{\"start\":\"33041\",\"end\":\"33045\"},{\"start\":\"33416\",\"end\":\"33417\"},{\"start\":\"33418\",\"end\":\"33419\"},{\"start\":\"33428\",\"end\":\"33429\"},{\"start\":\"33430\",\"end\":\"33431\"},{\"start\":\"33440\",\"end\":\"33441\"},{\"start\":\"33449\",\"end\":\"33450\"},{\"start\":\"33948\",\"end\":\"33949\"},{\"start\":\"33956\",\"end\":\"33957\"},{\"start\":\"33969\",\"end\":\"33970\"},{\"start\":\"34411\",\"end\":\"34412\"},{\"start\":\"34413\",\"end\":\"34414\"},{\"start\":\"34428\",\"end\":\"34429\"},{\"start\":\"34436\",\"end\":\"34437\"},{\"start\":\"34445\",\"end\":\"34446\"},{\"start\":\"34840\",\"end\":\"34841\"},{\"start\":\"34852\",\"end\":\"34853\"},{\"start\":\"35232\",\"end\":\"35233\"},{\"start\":\"35240\",\"end\":\"35241\"},{\"start\":\"35249\",\"end\":\"35250\"},{\"start\":\"35687\",\"end\":\"35688\"},{\"start\":\"35689\",\"end\":\"35690\"},{\"start\":\"35698\",\"end\":\"35702\"},{\"start\":\"35709\",\"end\":\"35713\"},{\"start\":\"36099\",\"end\":\"36100\"},{\"start\":\"36103\",\"end\":\"36104\"},{\"start\":\"36402\",\"end\":\"36403\"},{\"start\":\"36411\",\"end\":\"36412\"},{\"start\":\"36421\",\"end\":\"36422\"},{\"start\":\"36423\",\"end\":\"36424\"},{\"start\":\"36433\",\"end\":\"36434\"},{\"start\":\"36821\",\"end\":\"36822\"},{\"start\":\"36823\",\"end\":\"36824\"},{\"start\":\"36832\",\"end\":\"36833\"},{\"start\":\"36845\",\"end\":\"36846\"},{\"start\":\"36847\",\"end\":\"36848\"},{\"start\":\"36857\",\"end\":\"36858\"},{\"start\":\"36859\",\"end\":\"36860\"},{\"start\":\"36870\",\"end\":\"36871\"},{\"start\":\"36872\",\"end\":\"36873\"},{\"start\":\"36886\",\"end\":\"36887\"},{\"start\":\"36888\",\"end\":\"36889\"},{\"start\":\"37200\",\"end\":\"37201\"},{\"start\":\"37219\",\"end\":\"37220\"},{\"start\":\"37232\",\"end\":\"37233\"},{\"start\":\"37234\",\"end\":\"37235\"},{\"start\":\"37245\",\"end\":\"37246\"},{\"start\":\"37659\",\"end\":\"37660\"},{\"start\":\"37668\",\"end\":\"37669\"},{\"start\":\"37670\",\"end\":\"37671\"},{\"start\":\"37678\",\"end\":\"37679\"},{\"start\":\"38091\",\"end\":\"38092\"},{\"start\":\"38101\",\"end\":\"38102\"},{\"start\":\"38110\",\"end\":\"38111\"},{\"start\":\"38122\",\"end\":\"38123\"},{\"start\":\"38135\",\"end\":\"38136\"},{\"start\":\"38144\",\"end\":\"38145\"},{\"start\":\"38522\",\"end\":\"38523\"},{\"start\":\"38524\",\"end\":\"38525\"},{\"start\":\"38544\",\"end\":\"38545\"},{\"start\":\"38546\",\"end\":\"38547\"},{\"start\":\"38563\",\"end\":\"38564\"},{\"start\":\"38573\",\"end\":\"38574\"},{\"start\":\"38588\",\"end\":\"38589\"},{\"start\":\"38590\",\"end\":\"38591\"},{\"start\":\"38958\",\"end\":\"38959\"}]", "bib_author_last_name": "[{\"start\":\"30508\",\"end\":\"30513\"},{\"start\":\"30517\",\"end\":\"30529\"},{\"start\":\"30533\",\"end\":\"30538\"},{\"start\":\"30542\",\"end\":\"30547\"},{\"start\":\"30553\",\"end\":\"30559\"},{\"start\":\"30927\",\"end\":\"30932\"},{\"start\":\"30936\",\"end\":\"30940\"},{\"start\":\"30944\",\"end\":\"30950\"},{\"start\":\"30954\",\"end\":\"30962\"},{\"start\":\"31354\",\"end\":\"31358\"},{\"start\":\"31362\",\"end\":\"31365\"},{\"start\":\"31369\",\"end\":\"31378\"},{\"start\":\"31382\",\"end\":\"31389\"},{\"start\":\"31831\",\"end\":\"31836\"},{\"start\":\"31842\",\"end\":\"31851\"},{\"start\":\"32202\",\"end\":\"32207\"},{\"start\":\"32211\",\"end\":\"32216\"},{\"start\":\"32222\",\"end\":\"32226\"},{\"start\":\"32627\",\"end\":\"32630\"},{\"start\":\"32634\",\"end\":\"32637\"},{\"start\":\"32641\",\"end\":\"32644\"},{\"start\":\"32648\",\"end\":\"32653\"},{\"start\":\"33026\",\"end\":\"33030\"},{\"start\":\"33037\",\"end\":\"33039\"},{\"start\":\"33046\",\"end\":\"33051\"},{\"start\":\"33420\",\"end\":\"33426\"},{\"start\":\"33432\",\"end\":\"33438\"},{\"start\":\"33442\",\"end\":\"33447\"},{\"start\":\"33451\",\"end\":\"33457\"},{\"start\":\"33950\",\"end\":\"33954\"},{\"start\":\"33958\",\"end\":\"33967\"},{\"start\":\"33971\",\"end\":\"33979\"},{\"start\":\"34415\",\"end\":\"34426\"},{\"start\":\"34430\",\"end\":\"34434\"},{\"start\":\"34438\",\"end\":\"34443\"},{\"start\":\"34447\",\"end\":\"34458\"},{\"start\":\"34842\",\"end\":\"34850\"},{\"start\":\"34854\",\"end\":\"34861\"},{\"start\":\"35234\",\"end\":\"35238\"},{\"start\":\"35242\",\"end\":\"35247\"},{\"start\":\"35251\",\"end\":\"35253\"},{\"start\":\"35691\",\"end\":\"35696\"},{\"start\":\"35703\",\"end\":\"35707\"},{\"start\":\"35714\",\"end\":\"35718\"},{\"start\":\"36105\",\"end\":\"36112\"},{\"start\":\"36404\",\"end\":\"36409\"},{\"start\":\"36413\",\"end\":\"36419\"},{\"start\":\"36425\",\"end\":\"36431\"},{\"start\":\"36435\",\"end\":\"36441\"},{\"start\":\"36825\",\"end\":\"36830\"},{\"start\":\"36834\",\"end\":\"36843\"},{\"start\":\"36849\",\"end\":\"36855\"},{\"start\":\"36861\",\"end\":\"36868\"},{\"start\":\"36874\",\"end\":\"36884\"},{\"start\":\"36890\",\"end\":\"36896\"},{\"start\":\"37202\",\"end\":\"37217\"},{\"start\":\"37221\",\"end\":\"37230\"},{\"start\":\"37236\",\"end\":\"37243\"},{\"start\":\"37247\",\"end\":\"37257\"},{\"start\":\"37661\",\"end\":\"37666\"},{\"start\":\"37672\",\"end\":\"37676\"},{\"start\":\"37680\",\"end\":\"37690\"},{\"start\":\"38093\",\"end\":\"38099\"},{\"start\":\"38103\",\"end\":\"38108\"},{\"start\":\"38112\",\"end\":\"38120\"},{\"start\":\"38124\",\"end\":\"38133\"},{\"start\":\"38137\",\"end\":\"38142\"},{\"start\":\"38146\",\"end\":\"38151\"},{\"start\":\"38526\",\"end\":\"38542\"},{\"start\":\"38548\",\"end\":\"38561\"},{\"start\":\"38565\",\"end\":\"38571\"},{\"start\":\"38575\",\"end\":\"38586\"},{\"start\":\"38592\",\"end\":\"38600\"},{\"start\":\"38960\",\"end\":\"38965\"}]", "bib_entry": "[{\"start\":\"30444\",\"end\":\"30701\",\"attributes\":{\"id\":\"b0\"}},{\"start\":\"30703\",\"end\":\"30849\",\"attributes\":{\"id\":\"b1\"}},{\"start\":\"30851\",\"end\":\"31235\",\"attributes\":{\"matched_paper_id\":\"13667704\",\"id\":\"b2\"}},{\"start\":\"31237\",\"end\":\"31738\",\"attributes\":{\"matched_paper_id\":\"12981008\",\"id\":\"b3\"}},{\"start\":\"31740\",\"end\":\"32130\",\"attributes\":{\"matched_paper_id\":\"5699158\",\"id\":\"b4\"}},{\"start\":\"32132\",\"end\":\"32539\",\"attributes\":{\"matched_paper_id\":\"58671914\",\"id\":\"b5\"}},{\"start\":\"32541\",\"end\":\"32944\",\"attributes\":{\"id\":\"b6\"}},{\"start\":\"32946\",\"end\":\"33329\",\"attributes\":{\"matched_paper_id\":\"32252051\",\"id\":\"b7\"}},{\"start\":\"33331\",\"end\":\"33873\",\"attributes\":{\"matched_paper_id\":\"35082037\",\"id\":\"b8\"}},{\"start\":\"33875\",\"end\":\"34341\",\"attributes\":{\"matched_paper_id\":\"8200635\",\"id\":\"b9\"}},{\"start\":\"34343\",\"end\":\"34783\",\"attributes\":{\"matched_paper_id\":\"18926568\",\"id\":\"b10\"}},{\"start\":\"34785\",\"end\":\"35159\",\"attributes\":{\"matched_paper_id\":\"136014\",\"id\":\"b11\"}},{\"start\":\"35161\",\"end\":\"35596\",\"attributes\":{\"matched_paper_id\":\"18984200\",\"id\":\"b12\"}},{\"start\":\"35598\",\"end\":\"36031\",\"attributes\":{\"matched_paper_id\":\"11126385\",\"id\":\"b13\"}},{\"start\":\"36033\",\"end\":\"36298\",\"attributes\":{\"matched_paper_id\":\"3729396\",\"id\":\"b14\"}},{\"start\":\"36300\",\"end\":\"36782\",\"attributes\":{\"matched_paper_id\":\"14728452\",\"id\":\"b15\"}},{\"start\":\"36784\",\"end\":\"37068\",\"attributes\":{\"id\":\"b16\"}},{\"start\":\"37070\",\"end\":\"37124\",\"attributes\":{\"id\":\"b17\"}},{\"start\":\"37126\",\"end\":\"37578\",\"attributes\":{\"matched_paper_id\":\"16797431\",\"id\":\"b18\"}},{\"start\":\"37580\",\"end\":\"37972\",\"attributes\":{\"matched_paper_id\":\"11815578\",\"id\":\"b19\"}},{\"start\":\"37974\",\"end\":\"38006\",\"attributes\":{\"id\":\"b20\"}},{\"start\":\"38008\",\"end\":\"38461\",\"attributes\":{\"matched_paper_id\":\"17174839\",\"id\":\"b21\"}},{\"start\":\"38463\",\"end\":\"38916\",\"attributes\":{\"matched_paper_id\":\"57376546\",\"id\":\"b22\"}},{\"start\":\"38918\",\"end\":\"39084\",\"attributes\":{\"matched_paper_id\":\"53400910\",\"id\":\"b23\"}}]", "bib_title": "[{\"start\":\"30851\",\"end\":\"30923\"},{\"start\":\"31237\",\"end\":\"31350\"},{\"start\":\"31740\",\"end\":\"31825\"},{\"start\":\"32132\",\"end\":\"32198\"},{\"start\":\"32541\",\"end\":\"32623\"},{\"start\":\"32946\",\"end\":\"33019\"},{\"start\":\"33331\",\"end\":\"33414\"},{\"start\":\"33875\",\"end\":\"33946\"},{\"start\":\"34343\",\"end\":\"34409\"},{\"start\":\"34785\",\"end\":\"34838\"},{\"start\":\"35161\",\"end\":\"35230\"},{\"start\":\"35598\",\"end\":\"35685\"},{\"start\":\"36033\",\"end\":\"36097\"},{\"start\":\"36300\",\"end\":\"36400\"},{\"start\":\"37126\",\"end\":\"37198\"},{\"start\":\"37580\",\"end\":\"37657\"},{\"start\":\"38008\",\"end\":\"38089\"},{\"start\":\"38463\",\"end\":\"38520\"},{\"start\":\"38918\",\"end\":\"38956\"}]", "bib_author": "[{\"start\":\"30506\",\"end\":\"30515\"},{\"start\":\"30515\",\"end\":\"30531\"},{\"start\":\"30531\",\"end\":\"30540\"},{\"start\":\"30540\",\"end\":\"30549\"},{\"start\":\"30549\",\"end\":\"30561\"},{\"start\":\"30925\",\"end\":\"30934\"},{\"start\":\"30934\",\"end\":\"30942\"},{\"start\":\"30942\",\"end\":\"30952\"},{\"start\":\"30952\",\"end\":\"30964\"},{\"start\":\"31352\",\"end\":\"31360\"},{\"start\":\"31360\",\"end\":\"31367\"},{\"start\":\"31367\",\"end\":\"31380\"},{\"start\":\"31380\",\"end\":\"31391\"},{\"start\":\"31827\",\"end\":\"31838\"},{\"start\":\"31838\",\"end\":\"31853\"},{\"start\":\"32200\",\"end\":\"32209\"},{\"start\":\"32209\",\"end\":\"32218\"},{\"start\":\"32218\",\"end\":\"32228\"},{\"start\":\"32625\",\"end\":\"32632\"},{\"start\":\"32632\",\"end\":\"32639\"},{\"start\":\"32639\",\"end\":\"32646\"},{\"start\":\"32646\",\"end\":\"32655\"},{\"start\":\"33021\",\"end\":\"33032\"},{\"start\":\"33032\",\"end\":\"33041\"},{\"start\":\"33041\",\"end\":\"33053\"},{\"start\":\"33416\",\"end\":\"33428\"},{\"start\":\"33428\",\"end\":\"33440\"},{\"start\":\"33440\",\"end\":\"33449\"},{\"start\":\"33449\",\"end\":\"33459\"},{\"start\":\"33948\",\"end\":\"33956\"},{\"start\":\"33956\",\"end\":\"33969\"},{\"start\":\"33969\",\"end\":\"33981\"},{\"start\":\"34411\",\"end\":\"34428\"},{\"start\":\"34428\",\"end\":\"34436\"},{\"start\":\"34436\",\"end\":\"34445\"},{\"start\":\"34445\",\"end\":\"34460\"},{\"start\":\"34840\",\"end\":\"34852\"},{\"start\":\"34852\",\"end\":\"34863\"},{\"start\":\"35232\",\"end\":\"35240\"},{\"start\":\"35240\",\"end\":\"35249\"},{\"start\":\"35249\",\"end\":\"35255\"},{\"start\":\"35687\",\"end\":\"35698\"},{\"start\":\"35698\",\"end\":\"35709\"},{\"start\":\"35709\",\"end\":\"35720\"},{\"start\":\"36099\",\"end\":\"36103\"},{\"start\":\"36103\",\"end\":\"36114\"},{\"start\":\"36402\",\"end\":\"36411\"},{\"start\":\"36411\",\"end\":\"36421\"},{\"start\":\"36421\",\"end\":\"36433\"},{\"start\":\"36433\",\"end\":\"36443\"},{\"start\":\"36821\",\"end\":\"36832\"},{\"start\":\"36832\",\"end\":\"36845\"},{\"start\":\"36845\",\"end\":\"36857\"},{\"start\":\"36857\",\"end\":\"36870\"},{\"start\":\"36870\",\"end\":\"36886\"},{\"start\":\"36886\",\"end\":\"36898\"},{\"start\":\"37200\",\"end\":\"37219\"},{\"start\":\"37219\",\"end\":\"37232\"},{\"start\":\"37232\",\"end\":\"37245\"},{\"start\":\"37245\",\"end\":\"37259\"},{\"start\":\"37659\",\"end\":\"37668\"},{\"start\":\"37668\",\"end\":\"37678\"},{\"start\":\"37678\",\"end\":\"37692\"},{\"start\":\"38091\",\"end\":\"38101\"},{\"start\":\"38101\",\"end\":\"38110\"},{\"start\":\"38110\",\"end\":\"38122\"},{\"start\":\"38122\",\"end\":\"38135\"},{\"start\":\"38135\",\"end\":\"38144\"},{\"start\":\"38144\",\"end\":\"38153\"},{\"start\":\"38522\",\"end\":\"38544\"},{\"start\":\"38544\",\"end\":\"38563\"},{\"start\":\"38563\",\"end\":\"38573\"},{\"start\":\"38573\",\"end\":\"38588\"},{\"start\":\"38588\",\"end\":\"38602\"},{\"start\":\"38958\",\"end\":\"38967\"}]", "bib_venue": "[{\"start\":\"33534\",\"end\":\"33571\"},{\"start\":\"34060\",\"end\":\"34125\"},{\"start\":\"36493\",\"end\":\"36529\"},{\"start\":\"30444\",\"end\":\"30504\"},{\"start\":\"30705\",\"end\":\"30767\"},{\"start\":\"30964\",\"end\":\"31021\"},{\"start\":\"31391\",\"end\":\"31464\"},{\"start\":\"31853\",\"end\":\"31915\"},{\"start\":\"32228\",\"end\":\"32312\"},{\"start\":\"32655\",\"end\":\"32726\"},{\"start\":\"33053\",\"end\":\"33114\"},{\"start\":\"33459\",\"end\":\"33497\"},{\"start\":\"33981\",\"end\":\"34058\"},{\"start\":\"34460\",\"end\":\"34539\"},{\"start\":\"34863\",\"end\":\"34952\"},{\"start\":\"35255\",\"end\":\"35352\"},{\"start\":\"35720\",\"end\":\"35785\"},{\"start\":\"36114\",\"end\":\"36138\"},{\"start\":\"36443\",\"end\":\"36491\"},{\"start\":\"36784\",\"end\":\"36819\"},{\"start\":\"37070\",\"end\":\"37081\"},{\"start\":\"37259\",\"end\":\"37327\"},{\"start\":\"37692\",\"end\":\"37768\"},{\"start\":\"37976\",\"end\":\"37980\"},{\"start\":\"38153\",\"end\":\"38209\"},{\"start\":\"38602\",\"end\":\"38667\"},{\"start\":\"38967\",\"end\":\"38984\"}]"}}}, "year": 2023, "month": 12, "day": 17}