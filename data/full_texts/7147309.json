{"id": 7147309, "updated": "2023-11-11 05:54:54.405", "metadata": {"title": "Sequence Level Training with Recurrent Neural Networks", "authors": "[{\"first\":\"Marc'Aurelio\",\"last\":\"Ranzato\",\"middle\":[]},{\"first\":\"Sumit\",\"last\":\"Chopra\",\"middle\":[]},{\"first\":\"Michael\",\"last\":\"Auli\",\"middle\":[]},{\"first\":\"Wojciech\",\"last\":\"Zaremba\",\"middle\":[]}]", "venue": "ICLR", "journal": "arXiv: Learning", "publication_date": {"year": 2015, "month": 11, "day": 20}, "abstract": "Many natural language processing applications use language models to generate text. These models are typically trained to predict the next word in a sequence, given the previous words and some context such as an image. However, at test time the model is expected to generate the entire sequence from scratch. This discrepancy makes generation brittle, as errors may accumulate along the way. We address this issue by proposing a novel sequence level training algorithm that directly optimizes the metric used at test time, such as BLEU or ROUGE. On three different tasks, our approach outperforms several strong baselines for greedy generation. The method is also competitive when these baselines employ beam search, while being several times faster.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "2963248296", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "journals/corr/RanzatoCAZ15", "doi": null}}, "content": {"source": {"pdf_hash": "83761fa69d40ade1e3b3d97bf33f203b29026f46", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/1511.06732v7.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "1507de67e179d76b175d23d1bfd8fd3b5962d4a5", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/83761fa69d40ade1e3b3d97bf33f203b29026f46.txt", "contents": "\nSEQUENCE LEVEL TRAINING WITH RECURRENT NEURAL NETWORKS\n\n\nMarc &apos; Aurelio Ranzato ranzato@fb.com \nFacebook AI Research\n\n\nSumit Chopra spchopra@fb.com \nFacebook AI Research\n\n\nMichael Auli michealauli@fb.com \nFacebook AI Research\n\n\nWojciech Zaremba wojciech@fb.com \nFacebook AI Research\n\n\nSEQUENCE LEVEL TRAINING WITH RECURRENT NEURAL NETWORKS\nPublished as a conference paper at ICLR 2016\nMany natural language processing applications use language models to generate text. These models are typically trained to predict the next word in a sequence, given the previous words and some context such as an image. However, at test time the model is expected to generate the entire sequence from scratch. This discrepancy makes generation brittle, as errors may accumulate along the way. We address this issue by proposing a novel sequence level training algorithm that directly optimizes the metric used at test time, such as BLEU or ROUGE. On three different tasks, our approach outperforms several strong baselines for greedy generation. The method is also competitive when these baselines employ beam search, while being several times faster.\n\nINTRODUCTION\n\nNatural language is the most natural form of communication for humans. It is therefore essential that interactive AI systems are capable of generating text (Reiter & Dale, 2000). A wide variety of applications rely on text generation, including machine translation, video/text summarization, question answering, among others. From a machine learning perspective, text generation is the problem of predicting a syntactically and semantically correct sequence of consecutive words given some context. For instance, given an image, generate an appropriate caption or given a sentence in English language, translate it into French.\n\nPopular choices for text generation models are language models based on n-grams (Kneser & Ney, 1995), feed-forward neural networks (Morin & Bengio, 2005), and recurrent neural networks (RNNs; Mikolov et al., 2010). These models when used as is to generate text suffer from two major drawbacks. First, they are trained to predict the next word given the previous ground truth words as input. However, at test time, the resulting models are used to generate an entire sequence by predicting one word at a time, and by feeding the generated word back as input at the next time step. This process is very brittle because the model was trained on a different distribution of inputs, namely, words drawn from the data distribution, as opposed to words drawn from the model distribution. As a result the errors made along the way will quickly accumulate. We refer to this discrepancy as exposure bias which occurs when a model is only exposed to the training data distribution, instead of its own predictions. Second, the loss function used to train these models is at the word level. A popular choice is the cross-entropy loss used to maximize the probability of the next correct word. However, the performance of these models is typically evaluated using discrete metrics. One such metric is called BLEU (Papineni et al., 2002) for instance, which measures the n-gram overlap between the model generation and the reference text. Training these models to directly optimize metrics like BLEU is hard because a) these are not differentiable (Rosti et al., 2011), and b) combinatorial optimization is required to determine which sub-string maximizes them given some context. Prior attempts (McAllester et al., 2010;He & Deng, 2012) at optimizing test metrics were restricted to linear models, or required a large number of samples to work well (Auli & Gao, 2014). This paper proposes a novel training algorithm which results in improved text generation compared to standard models. The algorithm addresses the two issues discussed above as follows. First, while training the generative model we avoid the exposure bias by using model predictions at training time. Second, we directly optimize for our final evaluation metric. Our proposed methodology bor-rows ideas from the reinforcement learning literature (Sutton & Barto, 1988). In particular, we build on the REINFORCE algorithm proposed by Williams (1992), to achieve the above two objectives. While sampling from the model during training is quite a natural step for the REINFORCE algorithm, optimizing directly for any test metric can also be achieved by it. REINFORCE side steps the issues associated with the discrete nature of the optimization by not requiring rewards (or losses) to be differentiable. While REINFORCE appears to be well suited to tackle the text generation problem, it suffers from a significant issue. The problem setting of text generation has a very large action space which makes it extremely difficult to learn with an initial random policy. Specifically, the search space for text generation is of size O(W T ), where W is the number of words in the vocabulary (typically around 10 4 or more) and T is the length of the sentence (typically around 10 to 30).\n\nTowards that end, we introduce Mixed Incremental Cross-Entropy Reinforce (MIXER), which is our first major contribution of this work. MIXER is an easy-to-implement recipe to make REINFORCE work well for text generation applications. It is based on two key ideas: incremental learning and the use of a hybrid loss function which combines both REINFORCE and cross-entropy (see Sec. 3.2.2 for details). Both ingredients are essential to training with large action spaces. In MIXER, the model starts from the optimal policy given by cross-entropy training (as opposed to a random one), from which it then slowly deviates, in order to make use of its own predictions, as is done at test time.\n\nOur second contribution is a thorough empirical evaluation on three different tasks, namely, Text Summarization, Machine Translation and Image Captioning. We compare against several strong baselines, including, RNNs trained with cross-entropy and Data as Demonstrator (DAD) Venkatraman et al., 2015). We also compare MIXER with another simple yet novel model that we propose in this paper. We call it the End-to-End BackProp model (see Sec. 3.1.3 for details). Our results show that MIXER with a simple greedy search achieves much better accuracy compared to the baselines on all the three tasks. In addition we show that MIXER with greedy search is even more accurate than the cross entropy model augmented with beam search at inference time as a post-processing step. This is particularly remarkable because MIXER with greedy search is at least 10 times faster than the cross entropy model with a beam of size 10. Lastly, we note that MIXER and beam search are complementary to each other and can be combined to further improve performance, although the extent of the improvement is task dependent. 1 2 RELATED WORK Sequence models are typically trained to predict the next word using the cross-entropy loss. At test time, it is common to use beam search to explore multiple alternative paths (Sutskever et al., 2014;Bahdanau et al., 2015;Rush et al., 2015). While this improves generation by typically one or two BLEU points (Papineni et al., 2002), it makes the generation at least k times slower, where k is the number of active paths in the beam (see Sec. 3.1.1 for more details).\n\nThe idea of improving generation by letting the model use its own predictions at training time (the key proposal of this work) was first advocated by Daume III et al. (2009). In their seminal work, the authors first noticed that structured prediction problems can be cast as a particular instance of reinforcement learning. They then proposed SEARN, an algorithm to learn such structured prediction tasks. The basic idea is to let the model use its own predictions at training time to produce a sequence of actions (e.g., the choice of the next word). Then, a search algorithm is run to determine the optimal action at each time step, and a classifier (a.k.a. policy) is trained to predict that action. A similar idea was later proposed by Ross et al. (2011) in an imitation learning framework. Unfortunately, for text generation it is generally intractable to compute an oracle of the optimal target word given the words predicted so far. The oracle issue was later addressed by an algorithm called Data As Demonstrator (DAD) (Venkatraman et al., 2015) and applied for text generation by Bengio et al. (2015), whereby the target action at step k is the k-th action taken by the optimal policy (ground truth sequence) regardless of which input is fed to the system, whether it is ground truth, or the model's prediction. While DAD usually improves generation, it seems unsatisfactory to force the model to predict a certain word regardless of the preceding words (see sec. 3.1.2 for more details).  Table 1: Text generation models can be described across three dimensions: whether they suffer from exposure bias, whether they are trained in an end-to-end manner using back-propagation, and whether they are trained to predict one word ahead or the whole sequence.\n\nFinally, REINFORCE has already been used for other applications, such as in computer vision (Mnih et al., 2014;Xu et al., 2015;Ba et al.), and for speech recognition Graves & Jaitly (2014). While they simply pre-trained with cross-entropy loss, we found that the use of a mixed loss and a more gentle incremental learning scheduling to be important for all the tasks we considered.\n\n\nMODELS\n\nThe learning algorithms we describe in the following sections are agnostic to the choice of the underlying model, as long as it is parametric. In this work, we focus on Recurrent Neural Networks (RNNs) as they are a popular choice for text generation. In particular, we use standard Elman RNNs (Elman, 1990) and LSTMs (Hochreiter & Schmidhuber, 1997). For the sake of simplicity but without loss of generality, we discuss next Elman RNNs. This is a parametric model that at each time step t, takes as input a word w t \u2208 W as its input, together with an internal representation h t . W is the the vocabulary of input words. This internal representation h t is a real-valued vector which encodes the history of words the model has seen so far. Optionally, the RNN can also take as input an additional context vector c t , which encodes the context to be used while generating the output.\n\nIn our experiments c t is computed using an attentive decoder inspired by Bahdanau et al. (2015) and Rush et al. (2015), the details of which are given in Section 6.2 of the supplementary material. The RNN learns a recursive function to compute h t and outputs the distribution over the next word:\nh t+1 = \u03c6 \u03b8 (w t , h t , c t ), (1) w t+1 \u223c p \u03b8 (w|w t , h t+1 ) = p \u03b8 (w|w t , \u03c6 \u03b8 (w t , h t , c t )).(2)\nThe parametric expression for p \u03b8 and \u03c6 \u03b8 depends on the type of RNN. For Elman RNNs we have:\nh t+1 = \u03c3(M i 1(w t ) + M h h t + M c c t ),(3)o t+1 = M o h t+1 , (4) w t+1 \u223c softmax(o t+1 ),(5)\nwhere the parameters of the model \u03b8 are the set of matrices {M o , M i , M h , M c } and also the additional parameters used to compute c t . Softmax(x) is a vector whose components are e xj / k e x k , and 1(i) is an indicator vector with only the i-th component set to 1 and the rest to 0. We assume the first word of the sequence is a special token indicating the beginning of a sequence, denoted by w 1 = \u2205. All entries of the first hidden state h 1 are set to a constant value.\n\nNext, we are going to introduce both baselines and the model we propose. As we describe these models, it is useful to keep in mind the key characteristics of a text generation system, as outlined in Table 1. There are three dimensions which are important when training a model for text generation: the exposure bias which can adversely affect generation at test time, the ability to fully back-propagate gradients (including with respect to the chosen inputs at each time step), and a loss operating at the sequence level. We will start discussing models that do not possess any of these desirable features, and then move towards models that better satisfy our requirements. The last model we propose, dubbed MIXER, has all the desiderata.\n\n\nWORD-LEVEL TRAINING\n\nWe now review a collection of methodologies used for training text generation models which optimize the prediction of only one word ahead of time. We start with the simplest and the most popular method which optimizes the cross-entropy loss at every time step. We then discuss a recently proposed modification to it which explicitly uses the model predictions during training. We finish by Figure 1: RNN training using XENT (top), and how it is used at test time for generation (bottom). The RNN is unfolded for three time steps in this example. The red oval is a module computing a loss, while the rectangles represent the computation done by the RNN at one step. At the first step, all inputs are given. In the remaining steps, the input words are clamped to ground truth at training time, while they are clamped to model predictions (denoted by w g t ) at test time. Predictions are produced by either taking the argmax or by sampling from the distribution over words.\nh 2 = \u2713 (;, h 1 ) h 3 = \u2713 (w 2 , h 2 ) p \u2713 (w|;, h 1 ) XENT h 1 ; w 2 XENT w 3 p \u2713 (w|w 2 , h 2 ) h 2 = \u2713 (;, h 1 ) p \u2713 (w|;, h 1 ) h 1 ; w g 2 argmax p \u2713 (w|w g 2 , h 2 ) w g 3 h 3 = \u2713 (w g 2 , h 2 ) argmax\nproposing a simple yet novel baseline which uses its model prediction during training and also has the ability to back propagate the gradients through the entire sequence. While these extensions tend to make generation more robust, they still lack explicit supervision at the sequence level.\n\n\nCROSS ENTROPY TRAINING (XENT)\n\nCross-entropy loss (XENT) maximizes the probability of the observed sequence according to the model. If the target sequence is [w 1 , w 2 , . . . , w T ], then XENT training involves minimizing:\nL = \u2212 log p(w 1 , . . . , w T ) = \u2212 log T t=1 p(w t |w 1 , . . . , w t\u22121 ) = \u2212 T t=1 log p(w t |w 1 , . . . , w t\u22121 ). (6)\nWhen using an RNN, each term p(w t |w 1 , . . . , w t\u22121 ) is modeled as a parametric function as given in Equation (5). This loss function trains the model to be good at greedily predicting the next word at each time step without considering the whole sequence. Training proceeds by truncated backpropagation through time (Rumelhart et al., 1986) with gradient clipping (Mikolov et al., 2010).\n\nOnce trained, one can use the model to generate an entire sequence as follows. Let w g t denote the word generated by the model at the t-th time step. Then the next word is generated by:\nw g t+1 = argmax w p \u03b8 (w|w g t , h t+1 ).(7)\nNotice that, the model is trained to maximize p \u03b8 (w|w t , h t+1 ), where w t is the word in the ground truth sequence. However, during generation the model is used as p \u03b8 (w|w g t , h t+1 ). In other words, during training the model is only exposed to the ground truth words. However, at test time the model has only access to its own predictions, which may not be correct. As a result, during generation the model can potentially deviate quite far from the actual sequence to be generated. Figure 1 illustrates this discrepancy.\n\nThe generation described by Eq. (7) is a greedy left-to-right process which does not necessarily produce the most likely sequence according to the model, because:\nT t=1 max wt+1 p \u03b8 (w t+1 |w g t , h t+1 ) \u2264 max w1,...,w T T t=1 p \u03b8 (w t+1 |w g t , h t+1 )\nThe most likely sequence [w 1 , w 2 , . . . , w T ] might contain a word w t which is sub-optimal at an intermediate time-step t. This phenomena is commonly known as a search error. One popular way\nh2 = \u2713 (;, h1) p\u2713(w|;, h1) XENT h1 ; w2 w3 sampler w g 2 w 0 XENT sampler w g 3 w 00 p\u2713(w|w 0 , h2) h3 = \u2713 (w 0 , h2)\nFigure 2: Illustration of DAD Venkatraman et al., 2015). Training proceeds similar to XENT, except that at each time step we choose with a certain probability whether to take the previous model prediction or the ground truth word. Notice how a) gradients are not backpropagated through the eventual model predictions w g t , and b) the XENT loss always uses as target the next word in the reference sequence, even when the input is w g t .\n\nto reduce the effect of search error is to pursue not only one but k next word candidates at each point. While still approximate, this strategy can recover higher scoring sequences that are often also better in terms of our final evaluation metric. This process is commonly know as Beam Search.\n\nThe downside of using beam search is that it significantly slows down the generation process. The time complexity grows linearly in the number of beams k, because we need to perform k forward passes for our network, which is the most time intensive operation. The details of the Beam Search algorithm are described in Section 6.3.\n\n\nDATA AS DEMONSTRATOR (DAD)\n\nConventional training with XENT suffers from exposure bias since training uses ground truth words as opposed to model predictions. DAD, proposed in (Venkatraman et al., 2015) and also used in  for sequence generation, addresses this issue by mixing the ground truth training data with model predictions. At each time step and with a certain probability, DAD takes as input either the prediction from the model at the previous time step or the ground truth data. Bengio et al. (2015) proposed different annealing schedules for the probability of choosing the ground truth word. The annealing schedules are such that at the beginning, the algorithm always chooses the ground truth words. However, as the training progresses the model predictions are selected more often. This has the effect of making the model somewhat more aware of how it will be used at test time. Figure 2 illustrates the algorithm.\n\nA major limitation of DAD is that at every time step the target labels are always selected from the ground truth data, regardless of how the input was chosen. As a result, the targets may not be aligned with the generated sequence, forcing the model to predict a potentially incorrect sequence. For instance, if the ground truth sequence is \"I took a long walk\" and the model has so far predicted \"I took a walk\", DAD will force the model to predict the word \"walk\" a second time. Finally, gradients are not back-propagated through the samples drawn by the model and the XENT loss is still at the word level. It is not well understood how these problems affect generation.\n\n\nEND-TO-END BACKPROP (E2E)\n\nThe novel E2E algorithm is perhaps the most natural and na\u00efve approach approximating sequence level training, which can also be interpreted as a computationally efficient approximation to beam search. The key idea is that at time step t + 1 we propagate as input the top k words predicted at the previous time step instead of the ground truth word. Specifically, we take the output distribution over words from the previous time step t, and pass it through a k-max layer. This layer zeros all but the k largest values and re-normalizes them to sum to one. We thus have:\n{i t+1,j , v t+1,j } j=1,...,k = k-max p \u03b8 (w t+1 |w t , h t ),(8)\nwhere i t+1,j are indexes of the words with k largest probabilities and v t+1,j are their corresponding scores. At the time step t + 1, we take the k largest scoring previous words as input whose contributions is weighted by their scores v's. Smoothing the input this way makes the whole process differentiable and trainable using standard back-propagation. Compared to beam search, this can be interpreted as fusing the k possible next hypotheses together into a single path, as illustrated in Figure 3. In practice we also employ a schedule, whereby we use only the ground truth words at the beginning and gradually let the model use its own top-k predictions as training proceeds.\nh 2 = \u2713 (;, h 1 ) p \u2713 (w|;, h 1 ) XENT h 1 ; w 2 w 3 XENT top-k w 0 1,...,k p \u2713 (w|w 0 1,...,k , h 2 ) w 00 1,...,k h 3 = \u2713 (w 0 1,...,k , h 2 )\ntop-k Figure 3: Illustration of the End-to-End BackProp method. The first steps of the unrolled sequence (here just the first step) are exactly the same as in a regular RNN trained with cross-entropy. However, in the remaining steps the input to each module is a sparse vector whose non-zero entries are the k largest probabilities of the distribution predicted at the previous time step. Errors are backpropagated through these inputs as well.\n\nWhile this algorithm is a simple way to expose the model to its own predictions, the loss function optimized is still XENT at each time step. There is no explicit supervision at the sequence level while training the model.\n\n\nSEQUENCE LEVEL TRAINING\n\nWe now introduce a novel algorithm for sequence level training, which we call Mixed Incremental Cross-Entropy Reinforce (MIXER). The proposed method avoids the exposure bias problem, and also directly optimizes for the final evaluation metric. Since MIXER is an extension of the REIN-FORCE algorithm, we first describe REINFORCE from the perspective of sequence generation.\n\n\nREINFORCE\n\nIn order to apply the REINFORCE algorithm (Williams, 1992;Zaremba & Sutskever, 2015) to the problem of sequence generation we cast our problem in the reinforcement learning (RL) framework (Sutton & Barto, 1988). Our generative model (the RNN) can be viewed as an agent, which interacts with the external environment (the words and the context vector it sees as input at every time step). The parameters of this agent defines a policy, whose execution results in the agent picking an action. In the sequence generation setting, an action refers to predicting the next word in the sequence at each time step. After taking an action the agent updates its internal state (the hidden units of RNN). Once the agent has reached the end of a sequence, it observes a reward. We can choose any reward function. Here, we use BLEU (Papineni et al., 2002) and ROUGE-2 (Lin & Hovy, 2003) since these are the metrics we use at test time. BLEU is essentially a geometric mean over n-gram precision scores as well as a brevity penalty (Liang et al., 2006); in this work, we consider up to 4-grams. ROUGE-2 is instead recall over bi-grams. Like in imitation learning, we have a training set of optimal sequences of actions. During training we choose actions according to the current policy and only observe a reward at the end of the sequence (or after maximum sequence length), by comparing the sequence of actions from the current policy against the optimal action sequence. The goal of training is to find the parameters of the agent that maximize the expected reward. We define our loss as the negative expected reward:\nL \u03b8 = \u2212 w g 1 ,...,w g T p \u03b8 (w g 1 , . . . , w g T )r(w g 1 , . . . , w g T ) = \u2212E [w g 1 ,...w g T ]\u223cp \u03b8 r(w g 1 , . . . , w g T ),(9)\nwhere w g n is the word chosen by our model at the n-th time step, and r is the reward associated with the generated sequence. In practice, we approximate this expectation with a single sample from the distribution of actions implemented by the RNN (right hand side of the equation above and Figure 9 of Supplementary Material). We refer the reader to prior work (Zaremba & Sutskever, 2015;Williams, 1992) for the full derivation of the gradients. Here, we directly report the partial derivatives and their interpretation. The derivatives w.r.t. parameters are:\n\u2202L \u03b8 \u2202\u03b8 = t \u2202L \u03b8 \u2202o t \u2202o t \u2202\u03b8(10)\nwhere o t is the input to the softmax. The gradient of the loss L \u03b8 with respect to o t is given by:\n\u2202L \u03b8 \u2202o t = (r(w g 1 , . . . , w g T ) \u2212r t+1 ) p \u03b8 (w t+1 |w g t , h t+1 , c t ) \u2212 1(w g t+1 ) ,(11)\nwherer t+1 is the average reward at time t + 1.\n\nThe interpretation of this weight update rule is straightforward. While Equation 10 is standard backpropagation (a.k.a. chain rule), Equation 11 is almost exactly the same as the gradient of a multiclass logistic regression classifier. In logistic regression, the gradient is the difference between the prediction and the actual 1-of-N representation of the target word:\n\u2202L XENT \u03b8 \u2202o t = p \u03b8 (w t+1 |w t , h t+1 , c t ) \u2212 1(w t+1 )\nTherefore, Equation 11 says that the chosen word w g t+1 acts like a surrogate target for our output distribution, p \u03b8 (w t+1 |w g t , h t+1 , c t ) at time t. REINFORCE first establishes a baseliner t+1 , and then either encourages a word choice w g t+1 if r >r t+1 , or discourages it if r <r t+1 . The actual derivation suggests that the choice of this average rewardr t is useful to decrease the variance of the gradient estimator since in Equation 9 we use a single sample from the distribution of actions.\n\nIn our implementation, the baseliner t is estimated by a linear regressor which takes as input the hidden states h t of the RNN. The regressor is an unbiased estimator of future rewards since it only uses past information. The parameters of the regressor are trained by minimizing the mean squared loss: ||r t \u2212 r|| 2 . In order to prevent feedback loops, we do not backpropagate this error through the recurrent network (Zaremba & Sutskever, 2015).\n\nREINFORCE is an elegant algorithm to train at the sequence level using any user-defined reward. In this work, we use BLEU and ROUGE-2 as reward, however one could just as easily use any other metric. When presented as is, one major drawback associated with the algorithm is that it assumes a random policy to start with. This assumption can make the learning for large action spaces very challenging. Unfortunately, text generation is such a setting where the cardinality of the action set is in the order of 10 4 (the number of words in the vocabulary). This leads to a very high branching factor where it is extremely hard for a random policy to improve in any reasonable amount of time.\n\nIn the next section we describe the MIXER algorithm which addresses these issues, better targeting text generation applications.\n\n\nMIXED INCREMENTAL CROSS-ENTROPY REINFORCE (MIXER)\n\nThe MIXER algorithm borrows ideas both from DAGGER (Ross et al., 2011) and DAD (Venkatraman et al., 2015;Bengio et al., 2015) and modifies the REINFORCE appropriately. The first key idea is to change the initial policy of REINFORCE to make sure the model can effectively deal with the large action space of text generation. Instead of starting from a poor random policy and training the model to converge towards the optimal policy, we do the exact opposite. We start from the optimal policy and then slowly deviate from it to let the model explore and make use of its own predictions. We first train the RNN with the cross-entropy loss for N XENT epochs using the ground truth sequences. This ensures that we start off with a much better policy than random because now the model can focus on a good part of the search space. This can be better understood by comparing the perplexity of a language model that is randomly initialized versus one that is trained. Perplexity is a measure of uncertainty of the prediction and, roughly speaking, it corresponds to the average number of words the model is 'hesitating' about when making a prediction. A good language model trained on one of our data sets has perplexity of 50, whereas a random model is likely to have perplexity close to the size of the vocabulary, which is about 10, 000.\n\nThe second idea is to introduce model predictions during training with an annealing schedule in order to gradually teach the model to produce stable sequences. Let T be the length of the sequence. After the initial N XENT epochs, we continue training the model for N XE+R epochs, such that, for every sequence we use the XENT loss for the first (T \u2212 \u2206) steps, and the REINFORCE algorithm for the remaining \u2206 steps. In our experiments \u2206 is typically set to two or three. Next we anneal the number of steps for which we use the XENT loss for every sequence to (T \u2212 2\u2206) and repeat the training for another N XE+R epochs. We repeat this process until only REINFORCE is used to train the whole sequence. See Algorithm 1 for the pseudo-code. Figure 4: Illustration of MIXER. In the first s unrolling steps (here s = 1), the network resembles a standard RNN trained by XENT. In the remaining steps, the input to each module is a sample from the distribution over words produced at the previous time step. Once the end of sentence is reached (or the maximum sequence length), a reward is computed, e.g., BLEU. REINFORCE is then used to back-propagate the gradients through the sequence of samplers. We employ an annealing schedule on s, starting with s equal to the maximum sequence length T and finishing with s = 1. We call this algorithm Mixed Incremental Cross-Entropy Reinforce (MIXER) because we combine both XENT and REINFORCE, and we use incremental learning (a.k.a. curriculum learning). The overall algorithm is illustrated in Figure 4. By the end of training, the model can make effective use of its own predictions in-line with its use at test time.\nh 2 = \u2713 (;, h 1 ) p \u2713 (w|;, h 1 ) XENT h 1 ; w 2 sampler sampler w g 2 p \u2713 (w|w g 2 , h 2 ) w g 3 BLEU [w g 1 , . . . , w g T ] [w 1 , . . . , w T ] h 3 = \u2713 (w g 2 , h 2 )\n\nEXPERIMENTS\n\nIn all our experiments, we train conditional RNNs by unfolding them up to a certain maximum length. We chose this length to cover about 95% of the target sentences in the data sets we consider. The remaining sentences are cropped to the chosen maximum length. For training, we use stochastic gradient descent with mini-batches of size 32 and we reset the hidden states at the beginning of each sequence. Before updating the parameters we re-scale the gradients if their norm is above 10 (Mikolov et al., 2010). We search over the values of hyper-parameter, such as the initial learning rate, the various scheduling parameters, number of epochs, etc., using a held-out validation set. We then take the model that performed best on the validation set and compute BLEU or ROUGE score on the test set. In the following sections we report results on the test set only. Greedy generation is performed by taking the most likely word at each time step. 2\n\n\nTEXT SUMMARIZATION\n\nWe consider the problem of abstractive summarization where, given a piece of \"source\" text, we aim at generating its summary (the \"target\" text) such that its meaning is intact. The data set we use to train and evaluate our models consists of a subset of the Gigaword corpus (Graff et al., 2003) as described in Rush et al. (2015). This is a collection of news articles taken from different sources over the past two decades. Our version is organized as a set of example pairs, where each pair is composed of the first sentence of a news article (the source sentence) and its corresponding headline (the target sentence). We pre-process the data in the same way as in (Rush et al., 2015), which consists of lower-casing and replacing the infrequent words with a special token denoted by \"<unk>\". After pre-processing there are 12321 unique words in the source dictionary and 6828 words in the target dictionary. The number of sample pairs in the training, validation and test set are 179414, 22568, and 22259 respectively. The average sequence length of the target headline is about 10 words. We considered sequences up to 15 words to comply with our initial constraint of covering at least 95% of the data.\n\nOur generative model is a conditional Elman RNN (Equation 3) with 128 hidden units, where the conditioning vector c t is provided by a convolutional attentive encoder, similar to the one described in Section 3.2 of Rush et al. (2015) and inspired by Bahdanau et al. (2015). The details of our attentive encoder are mentioned in Section 6.2 of the Supplementary Material. We also tried LSTMs as our generative model for this task, however it did not improve performance. We conjecture this is due to the fact that the target sentences in this data set are rather short.\n\n\nMACHINE TRANSLATION\n\nFor the translation task, our generative model is an LSTM with 256 hidden units and it uses the same attentive encoder architecture as the one used for summarization. We use data from the German-English machine translation track of the IWSLT 2014 evaluation campaign (Cettolo et al., 2014). The corpus consists of sentence-aligned subtitles of TED and TEDx talks. We pre-process the training data using the tokenizer of the Moses toolkit (Koehn et al., 2007) and remove sentences longer than 50 words as well as casing. The training data comprises of about 153000 sentences where the average English sentence is 17.5 words long and the average German sentence is 18.5 words long. In order to retain at least 95% of this data, we unrolled our RNN for 25 steps. Our validation set comprises of 6969 sentence pairs which was taken from the training data. The test set is a concatenation of dev2010, dev2012, tst2010, tst2011 and tst2012 which results in 6750 sentence pairs. The English dictionary has 22822 words while the German has 32009 words.\n\n\nIMAGE CAPTIONING\n\nFor the image captioning task, we use the MSCOCO dataset (Lin et al., 2014). We use the entire training set provided by the authors, which consists of around 80k images. We then took the original validation set (consisting of around 40k images) and randomly sampled (without replacement) 5000 images for validation and another 5000 for test. There are 5 different captions for each image. At training time we sample one of these captions, while at test time we report the maximum BLEU score across the five captions. The context is represented by 1024 features extracted by a Convolutional Neural Network (CNN) trained on the Imagenet dataset (Deng et al., 2009); we do not back-propagate through these features. We use a similar experimental set up as described in Bengio et al. (2015). The RNN is a single layer LSTM with 512 hidden units and the image features are provided to the generative model as the first word in the sequence. We pre-process the captions by lower-casing all words and replacing all the words which appear less than 3 times with a special token \"<unk>\". As a result the total number of unique words in our dataset is 10012. Keeping in mind the 95% rule, we unroll the RNN for 15 steps.\n\n\nRESULTS\n\nIn order to validate MIXER, we compute BLEU score on the machine translation and image captioning task, and ROUGE on the summarization task. The input provided to the system is only the context and the beginning of sentence token. We apply the same protocol to the baseline methods as well. The scores on the test set are reported in Figure 5.\n\nWe observe that MIXER produces the best generations and improves generation over XENT by 1 to 3 points across all the tasks. Unfortunately the E2E approach did not prove to be very effective. Training at the sequence level and directly optimizing for testing score yields better generations than turning a sequence of discrete decisions into a differentiable process amenable to standard back-propagation of the error. DAD is usually better than the XENT, but not as good as MIXER.\n\nOverall, these experiments demonstrate the importance of optimizing for the metric used at test time. In summarization for instance, XENT and MIXER trained with ROUGE achieve a poor performance in terms of BLEU (8.16 and 5.80    Next, we experimented with beam search. The results in Figure 6 suggest that all methods, including MIXER, improve the quality of their generation by using beam search. However, the extent of the improvement is very much task dependent. We observe that the greedy performance of MIXER (i.e., without beam search) cannot be matched by baselines using beam search in two out of the three tasks. Moreover, MIXER is several times faster since it relies only on greedy search.\n\nIt is worth mentioning that the REINFORCE baseline did not work for these applications. Exploration from a random policy has little chance of success. We do not report it since we were never able to make it converge within a reasonable amount of time. Using the hybrid XENT-REINFORCE loss without incremental learning is also insufficient to make training take off from random chance. In order to gain some insight on what kind of schedule works, we report in Table 2 \n\n\nCONCLUSIONS\n\nOur work is motivated by two major deficiencies in training the current generative models for text generation: exposure bias and a loss which does not operate at the sequence level. While Reinforcement learning can potentially address these issues, it struggles in settings when there are very large action spaces, such as in text generation. Towards that end, we propose the MIXER algorithm, which deals with these issues and enables successful training of reinforcement learning models for text generation. We achieve this by replacing the initial random policy with the optimal policy of a cross-entropy trained model and by gradually exposing the model more and more to its own predictions in an incremental learning framework.\n\nOur results show that MIXER outperforms three strong baselines for greedy generation and it is very competitive with beam search. The approach we propose is agnostic to the underlying model or the form of the reward function. In future work we would like to design better estimation techniques for the average rewardr t , because poor estimates can lead to slow convergence of both REINFORCE and MIXER. Finally, our training algorithm relies on a single sample while it would be interesting to investigate the effect of more comprehensive search methods at training time.\n\n6 SUPPLEMENTARY MATERIAL 6.1 EXPERIMENTS\n\n\nQUALITATIVE COMPARISON\n\nCONTEXT: a chinese government official on sunday dismissed reports that the government was delaying the issuing of third generation -lrb-#g -rrb-mobile phone licenses in order to give a developing <unk> system an advantage GROUND TRUTH: foreign phone operators to get equal access to china 's #g market XENT:\n\nchina dismisses report of #g mobile phone phone DAD:\n\nchina denies <unk> <unk> mobile phone licenses E2E:\n\nchina 's mobile phone licenses delayed MIXER:\n\nchina official dismisses reports of #g mobile licenses CONTEXT: greece risks bankruptcy if it does not take radical extra measures to fix its finances , prime minister george papandreou warned on tuesday , saying the country was in a '' wartime situation GROUND TRUTH: greece risks bankruptcy without radical action XENT:\n\ngreece warns <unk> measures to <unk> finances DAD:\n\ngreece says no measures to <unk> <unk> E2E:\n\ngreece threatens to <unk> measures to <unk> finances MIXER:\n\ngreece does not take radical measures to <unk> deficit CONTEXT: the indonesian police were close to identify the body parts resulted from the deadly explosion in front of the australian embassy by the dna test , police chief general <unk> <unk> said on wednesday GROUND TRUTH: indonesian police close to <unk> australian embassy bomber XENT:\n\nindonesian police close to <unk> DAD:\n\nindonesian police close to <unk> E2E:\n\nindonesian police close to monitor deadly australia MIXER:\n\nindonesian police close to <unk> parts of australian embassy CONTEXT: hundreds of catholic and protestant youths attacked security forces with <unk> bombs in a flashpoint area of north belfast late thursday as violence erupted for the second night in a row , police said GROUND TRUTH: second night of violence erupts in north belfast XENT: urgent hundreds of catholic and <unk> <unk> in <unk> DAD:\n\nhundreds of belfast <unk> <unk> in n. belfast E2E:\n\nhundreds of catholic protestant , <unk> clash with <unk> MIXER:\n\nhundreds of catholic <unk> attacked in north belfast CONTEXT: uganda 's lord 's resistance army -lrb-lra -rrb-rebel leader joseph <unk> is planning to join his commanders in the ceasefire area ahead of talks with the government , ugandan army has said GROUND TRUTH: rebel leader to move to ceasefire area XENT:\n\nuganda 's <unk> rebel leader to join ceasefire DAD:\n\nugandan rebel leader to join ceasefire talks E2E:\n\nugandan rebels <unk> rebel leader MIXER:\n\nugandan rebels to join ceasefire in <unk> CONTEXT: a russian veterinary official reported a fourth outbreak of dead domestic poultry in a suburban moscow district sunday as experts tightened <unk> following confirmation of the presence of the deadly h#n# bird flu strain GROUND TRUTH: tests confirm h#n# bird flu strain in # <unk> moscow <unk> XENT:\n\nrussian official reports fourth flu in <unk> DAD: bird flu outbreak in central china E2E: russian official official says outbreak outbreak outbreak in <unk> MIXER: russian official reports fourth bird flu CONTEXT: a jewish human rights group announced monday that it will offer <unk> a dlrs ##,### reward for information that helps them track down those suspected of participating in nazi atrocities during world war ii GROUND TRUTH: jewish human rights group offers reward for information on nazi suspects in lithuania XENT:\n\njewish rights group announces <unk> to reward for war during world war DAD: rights group announces <unk> dlrs dlrs dlrs reward E2E: jewish rights group offers reward for <unk> MIXER:\n\njewish human rights group to offer reward for <unk> CONTEXT: a senior u.s. envoy reassured australia 's opposition labor party on saturday that no decision had been made to take military action against iraq and so no military assistance had been sought from australia GROUND TRUTH: u.s. envoy meets opposition labor party to discuss iraq XENT:\n\naustralian opposition party makes progress on military action against iraq DAD:\n\naustralian opposition party says no military action against iraq E2E:\n\nus envoy says no decision to take australia 's labor MIXER:\n\nu.s. envoy says no decision to military action against iraq CONTEXT: republican u.s. presidential candidate rudy giuliani met privately wednesday with iraqi president jalal talabani and indicated that he would keep a u.s. presence in iraq for as long as necessary , campaign aides said GROUND TRUTH: giuliani meets with iraqi president , discusses war XENT:\n\n<unk> meets with president of iraqi president DAD:\n\nrepublican presidential candidate meets iraqi president E2E:\n\nu.s. president meets with iraqi president MIXER: u.s. presidential candidate giuliani meets with iraqi president Figure 7: Examples of greedy generations after conditioning on sentences from the test summarization dataset. The \"<unk>\" token is produced by our tokenizer and it replaces rare words.  Training in expectation (Reinforce) Greedy training such as XENT optimizes only the probability of the next word. The model may consider choices indicated by the green arrows, but it starts off from words taken from the ground truth sequence. The model experiences exposure bias, since it sees only words branching off the ground truth path; (Right) REINFORCE and MIXER optimize over all possible sequences, using the predictions made by the model itself. In practice, the model samples only a single path indicated by the blue solid line. The model does not suffer from exposure bias; the model is trained as it is tested.\n\nFigure 5 :\n5Left: BLEU-4 (translation and image captioning) and ROUGE-2 (summarization) scores using greedy generation. Right: Relative gains produced by DAD, E2E and MIXER on the three tasks. The relative gain is computed as the ratio between the score of a model over the score of the reference XENT model on the same task. The horizontal line indicates the performance of XENT.\n\nFigure 6 :\n6Test score (ROUGE for summarization and BLEU for machine translation and image captioning) as a function of the number of hypotheses k in the beam search. Beam search always improves performance, although the amount depends on the task. The dark line shows the performance of MIXER using greedy generation, while the gray line shows MIXER using beam search with k = 10.trained with BLEU does not achieve as good ROUGE score as a MIXER optimizing ROUGE at training time as well (15.1 versus 16.22, see also Figure 8 in Supplementary Material).\n\n\nof Supplementary Material the best values we found after grid search over the hyper-parameters of MIXER. Finally, we report some anecdotal examples of MIXER generation in Figure 7 of Supplementary Material.\n\nFigure 9 :\n9Search space for the toy case of a binary vocabulary and sequences of length 4. The trees represent all the 2 4 possible sequences. The solid black line is the ground truth sequence. (Left)\n\n\nData: a set of sequences with their corresponding context. Result: RNN optimized for generation. Initialize RNN at random and set N XENT , N XE+R and \u2206; for s = T , 1, \u2212\u2206 do if s == T then train RNN for N XENT epochs using XENT only; else train RNN for N XE+R epochs. Use XENT loss in the first s steps, and REINFORCE (sampling from the model) in the remaining T \u2212 s steps; end end Algorithm 1: MIXER pseudo-code.\n\n\nversus 9.32 of MIXER trained with BLEU); likewise, MIXERTASK \nXENT DAD \nE2E \nMIXER \nsummarization \n13.01 \n12.18 12.78 16.22 \ntranslation \n17.74 \n20.12 17.77 20.73 \nimage captioning 27.8 \n28.16 26.42 29.16 \n\n\n\nTable 2 :\n2Best scheduling parameters found by hyper-parameter search of MIXER. 6.1.3 RELATIVE GAINS Figure 8: Relative gains on summarization with respect to the XENT baseline. Left: relative BLEU score. Right: relative ROUGE-2. The models are: DAD, E2E, MIXER trained for the objective used at test time (method proposed in this paper), and MIXER trained with a different metric. When evaluating for BLEU, the last column on the left reports the evaluation of MIXER trained using ROUGE-2. When evaluating for ROUGE-2, the last column on the right reports the evaluation of MIXER trained using BLEU.w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w... w...Time \n\nw \n\nw 0 \nw 1 \n\nw 00 \nw 01 \nw 10 \nw 11 \n\nw 000 \nw 001 \nw 010 \nw 011 \nw 100 \nw 101 \nw 110 \nw 111 \n\nTraining with exposure bias \n\nw \n\nw 0 \nw 1 \n\nw 00 \nw 01 \nw 10 \nw 11 \n\nw 000 \nw 001 \nw 010 \nw 011 \nw 100 \nw 101 \nw 110 \nw 111 \n\nw 000 \nw 001 \nw 010 \nw 011 \nw 100 \nw 101 \nw 110 \nw 111 \n\n\nCode available at: https://github.com/facebookresearch/MIXER\nCode available at: https://github.com/facebookresearch/MIXER\nACKNOWLEDGMENTSThe authors would like to thank David Grangier, Tomas Mikolov, Leon Bottou, Ronan Collobert and Laurens van der Maaten for their insightful comments. We also would like to thank Alexander M. Rush for his help in preparing the data set for the summarization task and Sam Gross for providing the image features.Here we explain in detail how we generate the conditioning vector c t for our RNN using the source sentence and the current hidden state h t . Let us denote by s the source sentence which is composed of a sequence of M words s = [w 1 , . . . , w M ]. With a slight overload of notation let w i also denote the d dimensional learnable embedding of the i-th word (w i \u2208 R d ). In addition the position i of the word w i is also associated with a learnable embedding l i of size d (l i \u2208 R d ). Then the full embedding for the i-th word in the input sentence is given by a i = w i + l i . In order for the embeddings to capture local context, we associate an aggregate embedding z i to each word in the source sentence. In particular for a word in the i-th position, its aggregate embedding z i is computed by taking a window of q consecutive words centered at position i and averaging the embeddings of all the words in this window. More precisely, the aggregate embedding z i is given by:In our experiments the width q was set to 5. In order to account for the words at the two boundaries of the input sentence we first pad the sequence on both sides with dummy words before computing the aggregate vectors z i s. Given these aggregate vectors of words, we compute the context vector c t (the final output of the encoder) as:where the weights \u03b1 j,t are computed as6.3 BEAM SEARCH ALGORITHM Equation 7 always chooses the highest scoring next word candidate at each time step. At test time we can reduce the effect of search error by pursuing not only one but k next word candidates at each point, which is commonly known as beam search. While still approximate, this strategy can recover higher scoring sequences that are often also better in terms of our final evaluation metric. The algorithm maintains the k highest scoring partial sequences, where k is a hyper-parameter. Setting k = 1 reduces the algorithm to a greedy left-to-right search (Eq.(7)).Input: model p \u03b8 , beam size k Result: sequence of words [w g 1 , w g 2 , . . . , w g n ] empty heaps {H t } t=1,...T ; an empty hidden state vector h 1 ;\nDecoder integration and expected bleu training for recurrent neural network language models. M Auli, J Gao, Proc. of ACL. of ACLAuli, M. and Gao, J. Decoder integration and expected bleu training for recurrent neural network language models. In Proc. of ACL, June 2014.\n\nMultiple object recognition with visual attention. J L Ba, V Mnih, K Kavukcuoglu, Ba, J.L., Mnih, V., and Kavukcuoglu, K. Multiple object recognition with visual attention.\n\nNeural machine translation by jointly learning to align and translate. D Bahdanau, K Cho, Y Bengio, ICLR. Bahdanau, D., Cho, K., and Bengio, Y. Neural machine translation by jointly learning to align and translate. In ICLR, 2015.\n\nScheduled sampling for sequence prediction with recurrent neural networks. S Bengio, O Vinyals, N Jaitly, N Shazeer, NIPS. Bengio, S., Vinyals, O., Jaitly, N., and Shazeer, N. Scheduled sampling for sequence prediction with recurrent neural networks. In NIPS, 2015.\n\nReport on the 11th iwslt evaluation campaign. M Cettolo, J Niehues, S St\u00fcker, L Bentivogli, Federico , M , Proc. of IWSLT. of IWSLTCettolo, M., Niehues, J., St\u00fcker, S., Bentivogli, L., , and Federico, M. Report on the 11th iwslt evaluation campaign. In Proc. of IWSLT, 2014.\n\nSearch-based structured prediction as classification. Iii Daume, H Langford, J Marcu, D , Machine Learning Journal. Daume III, H., Langford, J., and Marcu, D. Search-based structured prediction as classification. Machine Learning Journal, 2009.\n\nImagenet: a large-scale hierarchical image database. J Deng, W Dong, R Socher, L J Li, K Li, L Fei-Fei, IEEE Conference on Computer Vision and Pattern Recognition. Deng, J., Dong, W., Socher, R., Li, L.J., Li, K., and Fei-Fei, L. Imagenet: a large-scale hierarchical image database. In IEEE Conference on Computer Vision and Pattern Recognition, 2009.\n\nFinding structure in time. Jeffrey L Elman, Cognitive Science. 142Elman, Jeffrey L. Finding structure in time. Cognitive Science, 14(2):179-211, 1990.\n\n. D Graff, J Kong, K Chen, K Maeda, English Gigaword, Technical reportGraff, D., Kong, J., Chen, K., and Maeda, K. English gigaword. Technical report, 2003.\n\nTowards end-to-end speech recognition with recurrent neural networks. A Graves, N Jaitly, ICML. Graves, A. and Jaitly, N. Towards end-to-end speech recognition with recurrent neural networks. In ICML, 2014.\n\nMaximum expected bleu training of phrase and lexicon translation models. X He, L Deng, ACL. He, X. and Deng, L. Maximum expected bleu training of phrase and lexicon translation models. In ACL, 2012.\n\nLong short-term memory. S Hochreiter, J Schmidhuber, Neural Computation. 98Hochreiter, S. and Schmidhuber, J. Long short-term memory. Neural Computation, 9(8):1735-1780, 1997.\n\nImproved backing-off for M-gram language modeling. Reinhard Kneser, Hermann Ney, Proc. of the International Conference on Acoustics, Speech, and Signal Processing. of the International Conference on Acoustics, Speech, and Signal essingKneser, Reinhard and Ney, Hermann. Improved backing-off for M-gram language modeling. In Proc. of the International Conference on Acoustics, Speech, and Signal Processing, pp. 181-184, May 1995.\n\nMoses: Open source toolkit for statistical machine translation. Philipp Koehn, Hoang, Hieu, Alexandra Birch, Chris Callison-Burch, Federico, Marcello, Bertoldi, Nicola, Cowan, Brooke, Shen, Wade, Christine Moran, Zens, Richard, Chris Dyer, Bojar, Ondrej, Alexandra Constantin, Evan Herbst, Proc. of ACL Demo and Poster Sessions. of ACL Demo and Poster SessionsKoehn, Philipp, Hoang, Hieu, Birch, Alexandra, Callison-Burch, Chris, Federico, Marcello, Bertoldi, Nicola, Cowan, Brooke, Shen, Wade, Moran, Christine, Zens, Richard, Dyer, Chris, Bojar, Ondrej, Constantin, Alexandra, and Herbst, Evan. Moses: Open source toolkit for statisti- cal machine translation. In Proc. of ACL Demo and Poster Sessions, Jun 2007.\n\nAn end-to-end discriminative approach to machine translation. Percy Liang, Alexandre Bouchard-C\u00f4t\u00e9, Ben Taskar, Dan Klein, acl-coling2006. Liang, Percy, Bouchard-C\u00f4t\u00e9, Alexandre, Taskar, Ben, and Klein, Dan. An end-to-end discrimina- tive approach to machine translation. In acl-coling2006, pp. 761-768, Jul 2006.\n\nAutomatic evaluation of summaries using n-gram co-occurrence statistics. C Y Lin, E H Hovy, HLT-NAACL. Lin, C.Y. and Hovy, E.H. Automatic evaluation of summaries using n-gram co-occurrence statistics. In HLT-NAACL, 2003.\n\nMicrosoft coco: Common objects in context. T Y Lin, M Maire, S Belongie, J Hays, P Perona, D Ramanan, P Dollar, C L Zitnick, Technical reportLin, T.Y., Maire, M., Belongie, S., Hays, J., Perona, P., Ramanan, D., Dollar, P., and Zitnick, C.L. Microsoft coco: Common objects in context. Technical report, 2014.\n\nDirect loss minimization for structured prediction. D Mcallester, T Hazan, J Keshet, NIPS. McAllester, D., Hazan, T., and Keshet, J. Direct loss minimization for structured prediction. In NIPS, 2010.\n\nRecurrent neural network based language model. T Mikolov, M Karafit, L Burget, J Cernock, S Khudanpur, INTERSPEECH. Mikolov, T., Karafit, M., Burget, L., Cernock, J., and Khudanpur, S. Recurrent neural network based language model. In INTERSPEECH, 2010.\n\nRecurrent models of visual attention. V Mnih, N Heess, A Graves, K Kavukcuoglu, NIPS. Mnih, V., Heess N., Graves, A., and Kavukcuoglu, K. Recurrent models of visual attention. In NIPS, 2014.\n\nHierarchical probabilistic neural network language model. F Morin, Y Bengio, AISTATS. Morin, F. and Bengio, Y. Hierarchical probabilistic neural network language model. In AISTATS, 2005.\n\nBleu: a method for automatic evaluation of machine translation. K Papineni, S Roukos, T Ward, W J Zhu, ACL. Papineni, K., Roukos, S., Ward, T., and Zhu, W.J. Bleu: a method for automatic evaluation of machine translation. In ACL, 2002.\n\nBuilding natural language generation systems. E Reiter, R Dale, Cambridge university pressReiter, E. and Dale, R. Building natural language generation systems. Cambridge university press, 2000.\n\nA reduction of imitation learning and structured prediction to no-regret online learning. S Ross, G J Gordon, J A Bagnell, AISTATS. Ross, S., Gordon, G.J., and Bagnell, J.A. A reduction of imitation learning and structured prediction to no-regret online learning. In AISTATS, 2011.\n\nExpected bleu training for graphs: Bbn system description for wmt11 system combination task. Antti-Veikko I Rosti, Zhang, Bing, Spyros Matsoukas, Richard Schwartz, Proc. of WMT. of WMTAssociation for Computational LinguisticsRosti, Antti-Veikko I, Zhang, Bing, Matsoukas, Spyros, and Schwartz, Richard. Expected bleu training for graphs: Bbn system description for wmt11 system combination task. In Proc. of WMT, pp. 159-165. Association for Computational Linguistics, July 2011.\n\nLearning internal representations by backpropagating errors. D E Rumelhart, G E Hinton, R J Williams, Nature. 323Rumelhart, D.E., Hinton, G.E., and Williams, R.J. Learning internal representations by back- propagating errors. Nature, 323:533-536, 1986.\n\nA neural attention model for abstractive sentence summarization. A M Rush, S Chopra, Weston , J , EMNLP. Rush, A.M., Chopra, S., and Weston, J. A neural attention model for abstractive sentence summa- rization. In EMNLP, 2015.\n\nSequence to sequence learning with neural networks. Sutskever, Ilya, Oriol Vinyals, Quoc Le, Proc. of NIPS. of NIPSSutskever, Ilya, Vinyals, Oriol, and Le, Quoc. Sequence to sequence learning with neural networks. In Proc. of NIPS, 2014.\n\nReinforcement learning: An introduction. R S Sutton, A G Barto, MIT PressSutton, R.S. and Barto, A.G. Reinforcement learning: An introduction. MIT Press, 1988.\n\nImproving multi-step prediction of learned time series models. A Venkatraman, M Hebert, J A Bagnell, AAAI. Venkatraman, A., Hebert, M., and Bagnell, J.A. Improving multi-step prediction of learned time series models. In AAAI, 2015.\n\nSimple statistical gradient-following algorithms for connectionist reinforcement learning. R J Williams, Machine Learning. 8Williams, R. J. Simple statistical gradient-following algorithms for connectionist reinforcement learning. Machine Learning, 8:229-256, 1992.\n\nShow, attend and tell: Neural image caption generation with visual attention. X Xu, J Ba, R Kiros, A Courville, R Salakhutdinov, R Zemel, Y Bengio, ICML. Xu, X., Ba, J., Kiros, R., Courville, A., Salakhutdinov, R., Zemel, R., and Bengio, Y. Show, attend and tell: Neural image caption generation with visual attention. In ICML, 2015.\n\nas follows: \u2022 on the summarization task, we report results using both ROUGE-2 and BLEU to demonstrate that MIXER can work with any metric. W Zaremba, I Sutskever, Technical reportReinforcement learning neural turing machinesZaremba, W. and Sutskever, I. Reinforcement learning neural turing machines. Technical report, 2015. as follows: \u2022 on the summarization task, we report results using both ROUGE-2 and BLEU to demon- strate that MIXER can work with any metric.\n\n\u2022 on machine translation and image captioning we use LSTM instead of Elman RNN to demonstrate the MIXER can work with any underlying parametric model. \u2022 on machine translation and image captioning we use LSTM instead of Elman RNN to demonstrate the MIXER can work with any underlying parametric model.\n\n\u2022 BLEU is evaluated using up to 4-grams, and it is computed at the corpus level (except in the image captioning case) as this seems the most common practice in the summarization and machine translation literature. \u2022 BLEU is evaluated using up to 4-grams, and it is computed at the corpus level (except in the image captioning case) as this seems the most common practice in the summarization and machine translation literature.\n", "annotations": {"author": "[{\"end\":124,\"start\":58},{\"end\":177,\"start\":125},{\"end\":233,\"start\":178},{\"end\":290,\"start\":234}]", "publisher": null, "author_last_name": "[{\"end\":85,\"start\":78},{\"end\":137,\"start\":131},{\"end\":190,\"start\":186},{\"end\":250,\"start\":243}]", "author_first_name": "[{\"end\":62,\"start\":58},{\"end\":77,\"start\":63},{\"end\":130,\"start\":125},{\"end\":185,\"start\":178},{\"end\":242,\"start\":234}]", "author_affiliation": "[{\"end\":123,\"start\":102},{\"end\":176,\"start\":155},{\"end\":232,\"start\":211},{\"end\":289,\"start\":268}]", "title": "[{\"end\":55,\"start\":1},{\"end\":345,\"start\":291}]", "venue": null, "abstract": "[{\"end\":1141,\"start\":391}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b22\"},\"end\":1334,\"start\":1313},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":1886,\"start\":1866},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":1939,\"start\":1917},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":1999,\"start\":1978},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":3108,\"start\":3085},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":3339,\"start\":3319},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3492,\"start\":3467},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3508,\"start\":3492},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3639,\"start\":3621},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":4108,\"start\":4086},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4188,\"start\":4173},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":6009,\"start\":5984},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":7029,\"start\":7005},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":7051,\"start\":7029},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7069,\"start\":7051},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":7161,\"start\":7138},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":7471,\"start\":7448},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":8056,\"start\":8038},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":8351,\"start\":8325},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":8407,\"start\":8387},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":9174,\"start\":9155},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":9190,\"start\":9174},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":9200,\"start\":9190},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":9251,\"start\":9229},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":9762,\"start\":9749},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":9805,\"start\":9773},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":10438,\"start\":10416},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":10461,\"start\":10443},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":14357,\"start\":14333},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":14403,\"start\":14381},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":15799,\"start\":15774},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":17016,\"start\":16990},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":17324,\"start\":17304},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":21054,\"start\":21038},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":21080,\"start\":21054},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":21205,\"start\":21184},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":21838,\"start\":21815},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":21869,\"start\":21851},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":22034,\"start\":22014},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":23129,\"start\":23102},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":23144,\"start\":23129},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":24980,\"start\":24953},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":25926,\"start\":25907},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":25961,\"start\":25935},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":25981,\"start\":25961},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":29540,\"start\":29518},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":30295,\"start\":30275},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":30330,\"start\":30312},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":30687,\"start\":30668},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":31442,\"start\":31424},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":31481,\"start\":31459},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":32090,\"start\":32068},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":32259,\"start\":32239},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":32941,\"start\":32923},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":33527,\"start\":33509},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":33652,\"start\":33632},{\"end\":35141,\"start\":35122}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":43272,\"start\":42891},{\"attributes\":{\"id\":\"fig_1\"},\"end\":43828,\"start\":43273},{\"attributes\":{\"id\":\"fig_2\"},\"end\":44037,\"start\":43829},{\"attributes\":{\"id\":\"fig_3\"},\"end\":44240,\"start\":44038},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":44656,\"start\":44241},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":44866,\"start\":44657},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":45995,\"start\":44867}]", "paragraph": "[{\"end\":1784,\"start\":1157},{\"end\":5019,\"start\":1786},{\"end\":5708,\"start\":5021},{\"end\":7296,\"start\":5710},{\"end\":9061,\"start\":7298},{\"end\":9444,\"start\":9063},{\"end\":10340,\"start\":9455},{\"end\":10639,\"start\":10342},{\"end\":10841,\"start\":10748},{\"end\":11423,\"start\":10941},{\"end\":12164,\"start\":11425},{\"end\":13159,\"start\":12188},{\"end\":13659,\"start\":13368},{\"end\":13887,\"start\":13693},{\"end\":14404,\"start\":14011},{\"end\":14592,\"start\":14406},{\"end\":15169,\"start\":14639},{\"end\":15333,\"start\":15171},{\"end\":15625,\"start\":15428},{\"end\":16183,\"start\":15744},{\"end\":16479,\"start\":16185},{\"end\":16811,\"start\":16481},{\"end\":17743,\"start\":16842},{\"end\":18417,\"start\":17745},{\"end\":19016,\"start\":18447},{\"end\":19767,\"start\":19084},{\"end\":20357,\"start\":19913},{\"end\":20581,\"start\":20359},{\"end\":20982,\"start\":20609},{\"end\":22601,\"start\":20996},{\"end\":23300,\"start\":22739},{\"end\":23435,\"start\":23335},{\"end\":23585,\"start\":23538},{\"end\":23957,\"start\":23587},{\"end\":24530,\"start\":24019},{\"end\":24981,\"start\":24532},{\"end\":25672,\"start\":24983},{\"end\":25802,\"start\":25674},{\"end\":27189,\"start\":25856},{\"end\":28844,\"start\":27191},{\"end\":29977,\"start\":29031},{\"end\":31207,\"start\":30000},{\"end\":31777,\"start\":31209},{\"end\":32845,\"start\":31801},{\"end\":34076,\"start\":32866},{\"end\":34431,\"start\":34088},{\"end\":34914,\"start\":34433},{\"end\":35616,\"start\":34916},{\"end\":36086,\"start\":35618},{\"end\":36833,\"start\":36102},{\"end\":37406,\"start\":36835},{\"end\":37448,\"start\":37408},{\"end\":37783,\"start\":37475},{\"end\":37837,\"start\":37785},{\"end\":37890,\"start\":37839},{\"end\":37937,\"start\":37892},{\"end\":38260,\"start\":37939},{\"end\":38312,\"start\":38262},{\"end\":38357,\"start\":38314},{\"end\":38418,\"start\":38359},{\"end\":38761,\"start\":38420},{\"end\":38800,\"start\":38763},{\"end\":38839,\"start\":38802},{\"end\":38899,\"start\":38841},{\"end\":39298,\"start\":38901},{\"end\":39350,\"start\":39300},{\"end\":39415,\"start\":39352},{\"end\":39727,\"start\":39417},{\"end\":39780,\"start\":39729},{\"end\":39831,\"start\":39782},{\"end\":39873,\"start\":39833},{\"end\":40224,\"start\":39875},{\"end\":40751,\"start\":40226},{\"end\":40935,\"start\":40753},{\"end\":41280,\"start\":40937},{\"end\":41361,\"start\":41282},{\"end\":41432,\"start\":41363},{\"end\":41493,\"start\":41434},{\"end\":41852,\"start\":41495},{\"end\":41904,\"start\":41854},{\"end\":41966,\"start\":41906},{\"end\":42890,\"start\":41968}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10747,\"start\":10640},{\"attributes\":{\"id\":\"formula_1\"},\"end\":10889,\"start\":10842},{\"attributes\":{\"id\":\"formula_2\"},\"end\":10940,\"start\":10889},{\"attributes\":{\"id\":\"formula_3\"},\"end\":13367,\"start\":13160},{\"attributes\":{\"id\":\"formula_4\"},\"end\":14010,\"start\":13888},{\"attributes\":{\"id\":\"formula_5\"},\"end\":14638,\"start\":14593},{\"attributes\":{\"id\":\"formula_6\"},\"end\":15427,\"start\":15334},{\"attributes\":{\"id\":\"formula_7\"},\"end\":15743,\"start\":15626},{\"attributes\":{\"id\":\"formula_8\"},\"end\":19083,\"start\":19017},{\"attributes\":{\"id\":\"formula_9\"},\"end\":19912,\"start\":19768},{\"attributes\":{\"id\":\"formula_10\"},\"end\":22738,\"start\":22602},{\"attributes\":{\"id\":\"formula_11\"},\"end\":23334,\"start\":23301},{\"attributes\":{\"id\":\"formula_12\"},\"end\":23537,\"start\":23436},{\"attributes\":{\"id\":\"formula_13\"},\"end\":24018,\"start\":23958},{\"attributes\":{\"id\":\"formula_14\"},\"end\":29016,\"start\":28845}]", "table_ref": "[{\"end\":8804,\"start\":8797},{\"end\":11631,\"start\":11624},{\"attributes\":{\"ref_id\":\"tab_4\"},\"end\":36085,\"start\":36078}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":1155,\"start\":1143},{\"attributes\":{\"n\":\"3\"},\"end\":9453,\"start\":9447},{\"attributes\":{\"n\":\"3.1\"},\"end\":12186,\"start\":12167},{\"attributes\":{\"n\":\"3.1.1\"},\"end\":13691,\"start\":13662},{\"attributes\":{\"n\":\"3.1.2\"},\"end\":16840,\"start\":16814},{\"attributes\":{\"n\":\"3.1.3\"},\"end\":18445,\"start\":18420},{\"attributes\":{\"n\":\"3.2\"},\"end\":20607,\"start\":20584},{\"attributes\":{\"n\":\"3.2.1\"},\"end\":20994,\"start\":20985},{\"attributes\":{\"n\":\"3.2.2\"},\"end\":25854,\"start\":25805},{\"attributes\":{\"n\":\"4\"},\"end\":29029,\"start\":29018},{\"attributes\":{\"n\":\"4.1\"},\"end\":29998,\"start\":29980},{\"attributes\":{\"n\":\"4.2\"},\"end\":31799,\"start\":31780},{\"attributes\":{\"n\":\"4.3\"},\"end\":32864,\"start\":32848},{\"attributes\":{\"n\":\"4.4\"},\"end\":34086,\"start\":34079},{\"attributes\":{\"n\":\"5\"},\"end\":36100,\"start\":36089},{\"attributes\":{\"n\":\"6.1.1\"},\"end\":37473,\"start\":37451},{\"end\":42902,\"start\":42892},{\"end\":43284,\"start\":43274},{\"end\":44049,\"start\":44039},{\"end\":44877,\"start\":44868}]", "table": "[{\"end\":44866,\"start\":44715},{\"end\":45995,\"start\":45707}]", "figure_caption": "[{\"end\":43272,\"start\":42904},{\"end\":43828,\"start\":43286},{\"end\":44037,\"start\":43831},{\"end\":44240,\"start\":44051},{\"end\":44656,\"start\":44243},{\"end\":44715,\"start\":44659},{\"end\":45707,\"start\":44879}]", "figure_ref": "[{\"end\":12586,\"start\":12578},{\"end\":15139,\"start\":15131},{\"end\":17716,\"start\":17708},{\"end\":19587,\"start\":19579},{\"end\":19927,\"start\":19919},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":23039,\"start\":23031},{\"end\":27935,\"start\":27927},{\"end\":28728,\"start\":28720},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":34430,\"start\":34422},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":35208,\"start\":35200},{\"end\":42089,\"start\":42081}]", "bib_author_first_name": "[{\"end\":48643,\"start\":48642},{\"end\":48651,\"start\":48650},{\"end\":48872,\"start\":48871},{\"end\":48874,\"start\":48873},{\"end\":48880,\"start\":48879},{\"end\":48888,\"start\":48887},{\"end\":49066,\"start\":49065},{\"end\":49078,\"start\":49077},{\"end\":49085,\"start\":49084},{\"end\":49301,\"start\":49300},{\"end\":49311,\"start\":49310},{\"end\":49322,\"start\":49321},{\"end\":49332,\"start\":49331},{\"end\":49539,\"start\":49538},{\"end\":49550,\"start\":49549},{\"end\":49561,\"start\":49560},{\"end\":49571,\"start\":49570},{\"end\":49592,\"start\":49584},{\"end\":49596,\"start\":49595},{\"end\":49825,\"start\":49822},{\"end\":49834,\"start\":49833},{\"end\":49846,\"start\":49845},{\"end\":49855,\"start\":49854},{\"end\":50068,\"start\":50067},{\"end\":50076,\"start\":50075},{\"end\":50084,\"start\":50083},{\"end\":50094,\"start\":50093},{\"end\":50096,\"start\":50095},{\"end\":50102,\"start\":50101},{\"end\":50108,\"start\":50107},{\"end\":50401,\"start\":50394},{\"end\":50403,\"start\":50402},{\"end\":50522,\"start\":50521},{\"end\":50531,\"start\":50530},{\"end\":50539,\"start\":50538},{\"end\":50547,\"start\":50546},{\"end\":50748,\"start\":50747},{\"end\":50758,\"start\":50757},{\"end\":50959,\"start\":50958},{\"end\":50965,\"start\":50964},{\"end\":51110,\"start\":51109},{\"end\":51124,\"start\":51123},{\"end\":51321,\"start\":51313},{\"end\":51337,\"start\":51330},{\"end\":51764,\"start\":51757},{\"end\":51794,\"start\":51785},{\"end\":51807,\"start\":51802},{\"end\":51898,\"start\":51889},{\"end\":51926,\"start\":51921},{\"end\":51957,\"start\":51948},{\"end\":51974,\"start\":51970},{\"end\":52476,\"start\":52471},{\"end\":52493,\"start\":52484},{\"end\":52512,\"start\":52509},{\"end\":52524,\"start\":52521},{\"end\":52798,\"start\":52797},{\"end\":52800,\"start\":52799},{\"end\":52807,\"start\":52806},{\"end\":52809,\"start\":52808},{\"end\":52990,\"start\":52989},{\"end\":52992,\"start\":52991},{\"end\":52999,\"start\":52998},{\"end\":53008,\"start\":53007},{\"end\":53020,\"start\":53019},{\"end\":53028,\"start\":53027},{\"end\":53038,\"start\":53037},{\"end\":53049,\"start\":53048},{\"end\":53059,\"start\":53058},{\"end\":53061,\"start\":53060},{\"end\":53309,\"start\":53308},{\"end\":53323,\"start\":53322},{\"end\":53332,\"start\":53331},{\"end\":53505,\"start\":53504},{\"end\":53516,\"start\":53515},{\"end\":53527,\"start\":53526},{\"end\":53537,\"start\":53536},{\"end\":53548,\"start\":53547},{\"end\":53751,\"start\":53750},{\"end\":53759,\"start\":53758},{\"end\":53768,\"start\":53767},{\"end\":53778,\"start\":53777},{\"end\":53963,\"start\":53962},{\"end\":53972,\"start\":53971},{\"end\":54157,\"start\":54156},{\"end\":54169,\"start\":54168},{\"end\":54179,\"start\":54178},{\"end\":54187,\"start\":54186},{\"end\":54189,\"start\":54188},{\"end\":54376,\"start\":54375},{\"end\":54386,\"start\":54385},{\"end\":54615,\"start\":54614},{\"end\":54623,\"start\":54622},{\"end\":54625,\"start\":54624},{\"end\":54635,\"start\":54634},{\"end\":54637,\"start\":54636},{\"end\":54914,\"start\":54900},{\"end\":54941,\"start\":54935},{\"end\":54960,\"start\":54953},{\"end\":55350,\"start\":55349},{\"end\":55352,\"start\":55351},{\"end\":55365,\"start\":55364},{\"end\":55367,\"start\":55366},{\"end\":55377,\"start\":55376},{\"end\":55379,\"start\":55378},{\"end\":55608,\"start\":55607},{\"end\":55610,\"start\":55609},{\"end\":55618,\"start\":55617},{\"end\":55633,\"start\":55627},{\"end\":55637,\"start\":55636},{\"end\":55844,\"start\":55839},{\"end\":55858,\"start\":55854},{\"end\":56051,\"start\":56050},{\"end\":56053,\"start\":56052},{\"end\":56063,\"start\":56062},{\"end\":56065,\"start\":56064},{\"end\":56234,\"start\":56233},{\"end\":56249,\"start\":56248},{\"end\":56259,\"start\":56258},{\"end\":56261,\"start\":56260},{\"end\":56495,\"start\":56494},{\"end\":56497,\"start\":56496},{\"end\":56749,\"start\":56748},{\"end\":56755,\"start\":56754},{\"end\":56761,\"start\":56760},{\"end\":56770,\"start\":56769},{\"end\":56783,\"start\":56782},{\"end\":56800,\"start\":56799},{\"end\":56809,\"start\":56808},{\"end\":57145,\"start\":57144},{\"end\":57156,\"start\":57155}]", "bib_author_last_name": "[{\"end\":48648,\"start\":48644},{\"end\":48655,\"start\":48652},{\"end\":48877,\"start\":48875},{\"end\":48885,\"start\":48881},{\"end\":48900,\"start\":48889},{\"end\":49075,\"start\":49067},{\"end\":49082,\"start\":49079},{\"end\":49092,\"start\":49086},{\"end\":49308,\"start\":49302},{\"end\":49319,\"start\":49312},{\"end\":49329,\"start\":49323},{\"end\":49340,\"start\":49333},{\"end\":49547,\"start\":49540},{\"end\":49558,\"start\":49551},{\"end\":49568,\"start\":49562},{\"end\":49582,\"start\":49572},{\"end\":49831,\"start\":49826},{\"end\":49843,\"start\":49835},{\"end\":49852,\"start\":49847},{\"end\":50073,\"start\":50069},{\"end\":50081,\"start\":50077},{\"end\":50091,\"start\":50085},{\"end\":50099,\"start\":50097},{\"end\":50105,\"start\":50103},{\"end\":50116,\"start\":50109},{\"end\":50409,\"start\":50404},{\"end\":50528,\"start\":50523},{\"end\":50536,\"start\":50532},{\"end\":50544,\"start\":50540},{\"end\":50553,\"start\":50548},{\"end\":50571,\"start\":50555},{\"end\":50755,\"start\":50749},{\"end\":50765,\"start\":50759},{\"end\":50962,\"start\":50960},{\"end\":50970,\"start\":50966},{\"end\":51121,\"start\":51111},{\"end\":51136,\"start\":51125},{\"end\":51328,\"start\":51322},{\"end\":51341,\"start\":51338},{\"end\":51770,\"start\":51765},{\"end\":51777,\"start\":51772},{\"end\":51783,\"start\":51779},{\"end\":51800,\"start\":51795},{\"end\":51822,\"start\":51808},{\"end\":51832,\"start\":51824},{\"end\":51842,\"start\":51834},{\"end\":51852,\"start\":51844},{\"end\":51860,\"start\":51854},{\"end\":51867,\"start\":51862},{\"end\":51875,\"start\":51869},{\"end\":51881,\"start\":51877},{\"end\":51887,\"start\":51883},{\"end\":51904,\"start\":51899},{\"end\":51910,\"start\":51906},{\"end\":51919,\"start\":51912},{\"end\":51931,\"start\":51927},{\"end\":51938,\"start\":51933},{\"end\":51946,\"start\":51940},{\"end\":51968,\"start\":51958},{\"end\":51981,\"start\":51975},{\"end\":52482,\"start\":52477},{\"end\":52507,\"start\":52494},{\"end\":52519,\"start\":52513},{\"end\":52530,\"start\":52525},{\"end\":52804,\"start\":52801},{\"end\":52814,\"start\":52810},{\"end\":52996,\"start\":52993},{\"end\":53005,\"start\":53000},{\"end\":53017,\"start\":53009},{\"end\":53025,\"start\":53021},{\"end\":53035,\"start\":53029},{\"end\":53046,\"start\":53039},{\"end\":53056,\"start\":53050},{\"end\":53069,\"start\":53062},{\"end\":53320,\"start\":53310},{\"end\":53329,\"start\":53324},{\"end\":53339,\"start\":53333},{\"end\":53513,\"start\":53506},{\"end\":53524,\"start\":53517},{\"end\":53534,\"start\":53528},{\"end\":53545,\"start\":53538},{\"end\":53558,\"start\":53549},{\"end\":53756,\"start\":53752},{\"end\":53765,\"start\":53760},{\"end\":53775,\"start\":53769},{\"end\":53790,\"start\":53779},{\"end\":53969,\"start\":53964},{\"end\":53979,\"start\":53973},{\"end\":54166,\"start\":54158},{\"end\":54176,\"start\":54170},{\"end\":54184,\"start\":54180},{\"end\":54193,\"start\":54190},{\"end\":54383,\"start\":54377},{\"end\":54391,\"start\":54387},{\"end\":54620,\"start\":54616},{\"end\":54632,\"start\":54626},{\"end\":54645,\"start\":54638},{\"end\":54920,\"start\":54915},{\"end\":54927,\"start\":54922},{\"end\":54933,\"start\":54929},{\"end\":54951,\"start\":54942},{\"end\":54969,\"start\":54961},{\"end\":55362,\"start\":55353},{\"end\":55374,\"start\":55368},{\"end\":55388,\"start\":55380},{\"end\":55615,\"start\":55611},{\"end\":55625,\"start\":55619},{\"end\":55831,\"start\":55822},{\"end\":55837,\"start\":55833},{\"end\":55852,\"start\":55845},{\"end\":55861,\"start\":55859},{\"end\":56060,\"start\":56054},{\"end\":56071,\"start\":56066},{\"end\":56246,\"start\":56235},{\"end\":56256,\"start\":56250},{\"end\":56269,\"start\":56262},{\"end\":56506,\"start\":56498},{\"end\":56752,\"start\":56750},{\"end\":56758,\"start\":56756},{\"end\":56767,\"start\":56762},{\"end\":56780,\"start\":56771},{\"end\":56797,\"start\":56784},{\"end\":56806,\"start\":56801},{\"end\":56816,\"start\":56810},{\"end\":57153,\"start\":57146},{\"end\":57166,\"start\":57157}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":5467830},\"end\":48818,\"start\":48549},{\"attributes\":{\"id\":\"b1\"},\"end\":48992,\"start\":48820},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":11212020},\"end\":49223,\"start\":48994},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":1820089},\"end\":49490,\"start\":49225},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":21661214},\"end\":49766,\"start\":49492},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":19018753},\"end\":50012,\"start\":49768},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":57246310},\"end\":50365,\"start\":50014},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":2763403},\"end\":50517,\"start\":50367},{\"attributes\":{\"id\":\"b8\"},\"end\":50675,\"start\":50519},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":1166498},\"end\":50883,\"start\":50677},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":6411150},\"end\":51083,\"start\":50885},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":1915014},\"end\":51260,\"start\":51085},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":9685476},\"end\":51691,\"start\":51262},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":794019},\"end\":52407,\"start\":51693},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":1391785},\"end\":52722,\"start\":52409},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":16292125},\"end\":52944,\"start\":52724},{\"attributes\":{\"id\":\"b16\"},\"end\":53254,\"start\":52946},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":1495057},\"end\":53455,\"start\":53256},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":17048224},\"end\":53710,\"start\":53457},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":17195923},\"end\":53902,\"start\":53712},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":1326925},\"end\":54090,\"start\":53904},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":11080756},\"end\":54327,\"start\":54092},{\"attributes\":{\"id\":\"b22\"},\"end\":54522,\"start\":54329},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":103456},\"end\":54805,\"start\":54524},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":1318875},\"end\":55286,\"start\":54807},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":59859558},\"end\":55540,\"start\":55288},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":1918428},\"end\":55768,\"start\":55542},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":7961699},\"end\":56007,\"start\":55770},{\"attributes\":{\"id\":\"b28\"},\"end\":56168,\"start\":56009},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":15080650},\"end\":56401,\"start\":56170},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":2332513},\"end\":56668,\"start\":56403},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":1055111},\"end\":57003,\"start\":56670},{\"attributes\":{\"id\":\"b32\"},\"end\":57470,\"start\":57005},{\"attributes\":{\"id\":\"b33\"},\"end\":57773,\"start\":57472},{\"attributes\":{\"id\":\"b34\"},\"end\":58202,\"start\":57775}]", "bib_title": "[{\"end\":48640,\"start\":48549},{\"end\":49063,\"start\":48994},{\"end\":49298,\"start\":49225},{\"end\":49536,\"start\":49492},{\"end\":49820,\"start\":49768},{\"end\":50065,\"start\":50014},{\"end\":50392,\"start\":50367},{\"end\":50745,\"start\":50677},{\"end\":50956,\"start\":50885},{\"end\":51107,\"start\":51085},{\"end\":51311,\"start\":51262},{\"end\":51755,\"start\":51693},{\"end\":52469,\"start\":52409},{\"end\":52795,\"start\":52724},{\"end\":53306,\"start\":53256},{\"end\":53502,\"start\":53457},{\"end\":53748,\"start\":53712},{\"end\":53960,\"start\":53904},{\"end\":54154,\"start\":54092},{\"end\":54612,\"start\":54524},{\"end\":54898,\"start\":54807},{\"end\":55347,\"start\":55288},{\"end\":55605,\"start\":55542},{\"end\":55820,\"start\":55770},{\"end\":56231,\"start\":56170},{\"end\":56492,\"start\":56403},{\"end\":56746,\"start\":56670}]", "bib_author": "[{\"end\":48650,\"start\":48642},{\"end\":48657,\"start\":48650},{\"end\":48879,\"start\":48871},{\"end\":48887,\"start\":48879},{\"end\":48902,\"start\":48887},{\"end\":49077,\"start\":49065},{\"end\":49084,\"start\":49077},{\"end\":49094,\"start\":49084},{\"end\":49310,\"start\":49300},{\"end\":49321,\"start\":49310},{\"end\":49331,\"start\":49321},{\"end\":49342,\"start\":49331},{\"end\":49549,\"start\":49538},{\"end\":49560,\"start\":49549},{\"end\":49570,\"start\":49560},{\"end\":49584,\"start\":49570},{\"end\":49595,\"start\":49584},{\"end\":49599,\"start\":49595},{\"end\":49833,\"start\":49822},{\"end\":49845,\"start\":49833},{\"end\":49854,\"start\":49845},{\"end\":49858,\"start\":49854},{\"end\":50075,\"start\":50067},{\"end\":50083,\"start\":50075},{\"end\":50093,\"start\":50083},{\"end\":50101,\"start\":50093},{\"end\":50107,\"start\":50101},{\"end\":50118,\"start\":50107},{\"end\":50411,\"start\":50394},{\"end\":50530,\"start\":50521},{\"end\":50538,\"start\":50530},{\"end\":50546,\"start\":50538},{\"end\":50555,\"start\":50546},{\"end\":50573,\"start\":50555},{\"end\":50757,\"start\":50747},{\"end\":50767,\"start\":50757},{\"end\":50964,\"start\":50958},{\"end\":50972,\"start\":50964},{\"end\":51123,\"start\":51109},{\"end\":51138,\"start\":51123},{\"end\":51330,\"start\":51313},{\"end\":51343,\"start\":51330},{\"end\":51772,\"start\":51757},{\"end\":51779,\"start\":51772},{\"end\":51785,\"start\":51779},{\"end\":51802,\"start\":51785},{\"end\":51824,\"start\":51802},{\"end\":51834,\"start\":51824},{\"end\":51844,\"start\":51834},{\"end\":51854,\"start\":51844},{\"end\":51862,\"start\":51854},{\"end\":51869,\"start\":51862},{\"end\":51877,\"start\":51869},{\"end\":51883,\"start\":51877},{\"end\":51889,\"start\":51883},{\"end\":51906,\"start\":51889},{\"end\":51912,\"start\":51906},{\"end\":51921,\"start\":51912},{\"end\":51933,\"start\":51921},{\"end\":51940,\"start\":51933},{\"end\":51948,\"start\":51940},{\"end\":51970,\"start\":51948},{\"end\":51983,\"start\":51970},{\"end\":52484,\"start\":52471},{\"end\":52509,\"start\":52484},{\"end\":52521,\"start\":52509},{\"end\":52532,\"start\":52521},{\"end\":52806,\"start\":52797},{\"end\":52816,\"start\":52806},{\"end\":52998,\"start\":52989},{\"end\":53007,\"start\":52998},{\"end\":53019,\"start\":53007},{\"end\":53027,\"start\":53019},{\"end\":53037,\"start\":53027},{\"end\":53048,\"start\":53037},{\"end\":53058,\"start\":53048},{\"end\":53071,\"start\":53058},{\"end\":53322,\"start\":53308},{\"end\":53331,\"start\":53322},{\"end\":53341,\"start\":53331},{\"end\":53515,\"start\":53504},{\"end\":53526,\"start\":53515},{\"end\":53536,\"start\":53526},{\"end\":53547,\"start\":53536},{\"end\":53560,\"start\":53547},{\"end\":53758,\"start\":53750},{\"end\":53767,\"start\":53758},{\"end\":53777,\"start\":53767},{\"end\":53792,\"start\":53777},{\"end\":53971,\"start\":53962},{\"end\":53981,\"start\":53971},{\"end\":54168,\"start\":54156},{\"end\":54178,\"start\":54168},{\"end\":54186,\"start\":54178},{\"end\":54195,\"start\":54186},{\"end\":54385,\"start\":54375},{\"end\":54393,\"start\":54385},{\"end\":54622,\"start\":54614},{\"end\":54634,\"start\":54622},{\"end\":54647,\"start\":54634},{\"end\":54922,\"start\":54900},{\"end\":54929,\"start\":54922},{\"end\":54935,\"start\":54929},{\"end\":54953,\"start\":54935},{\"end\":54971,\"start\":54953},{\"end\":55364,\"start\":55349},{\"end\":55376,\"start\":55364},{\"end\":55390,\"start\":55376},{\"end\":55617,\"start\":55607},{\"end\":55627,\"start\":55617},{\"end\":55636,\"start\":55627},{\"end\":55640,\"start\":55636},{\"end\":55833,\"start\":55822},{\"end\":55839,\"start\":55833},{\"end\":55854,\"start\":55839},{\"end\":55863,\"start\":55854},{\"end\":56062,\"start\":56050},{\"end\":56073,\"start\":56062},{\"end\":56248,\"start\":56233},{\"end\":56258,\"start\":56248},{\"end\":56271,\"start\":56258},{\"end\":56508,\"start\":56494},{\"end\":56754,\"start\":56748},{\"end\":56760,\"start\":56754},{\"end\":56769,\"start\":56760},{\"end\":56782,\"start\":56769},{\"end\":56799,\"start\":56782},{\"end\":56808,\"start\":56799},{\"end\":56818,\"start\":56808},{\"end\":57155,\"start\":57144},{\"end\":57168,\"start\":57155}]", "bib_venue": "[{\"end\":48677,\"start\":48671},{\"end\":49623,\"start\":49615},{\"end\":51497,\"start\":51426},{\"end\":52053,\"start\":52022},{\"end\":54991,\"start\":54985},{\"end\":55885,\"start\":55878},{\"end\":48669,\"start\":48657},{\"end\":48869,\"start\":48820},{\"end\":49098,\"start\":49094},{\"end\":49346,\"start\":49342},{\"end\":49613,\"start\":49599},{\"end\":49882,\"start\":49858},{\"end\":50176,\"start\":50118},{\"end\":50428,\"start\":50411},{\"end\":50771,\"start\":50767},{\"end\":50975,\"start\":50972},{\"end\":51156,\"start\":51138},{\"end\":51424,\"start\":51343},{\"end\":52020,\"start\":51983},{\"end\":52546,\"start\":52532},{\"end\":52825,\"start\":52816},{\"end\":52987,\"start\":52946},{\"end\":53345,\"start\":53341},{\"end\":53571,\"start\":53560},{\"end\":53796,\"start\":53792},{\"end\":53988,\"start\":53981},{\"end\":54198,\"start\":54195},{\"end\":54373,\"start\":54329},{\"end\":54654,\"start\":54647},{\"end\":54983,\"start\":54971},{\"end\":55396,\"start\":55390},{\"end\":55645,\"start\":55640},{\"end\":55876,\"start\":55863},{\"end\":56048,\"start\":56009},{\"end\":56275,\"start\":56271},{\"end\":56524,\"start\":56508},{\"end\":56822,\"start\":56818},{\"end\":57142,\"start\":57005},{\"end\":57621,\"start\":57472},{\"end\":57987,\"start\":57775}]"}}}, "year": 2023, "month": 12, "day": 17}