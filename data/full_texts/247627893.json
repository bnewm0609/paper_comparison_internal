{"id": 247627893, "updated": "2023-10-05 15:55:44.558", "metadata": {"title": "Out-of-Core Edge Partitioning at Linear Run-Time", "authors": "[{\"first\":\"Ruben\",\"last\":\"Mayer\",\"middle\":[]},{\"first\":\"Kamil\",\"last\":\"Orujzade\",\"middle\":[]},{\"first\":\"Hans-Arno\",\"last\":\"Jacobsen\",\"middle\":[]}]", "venue": "ArXiv", "journal": null, "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Graph edge partitioning is an important preprocessing step to optimize distributed computing jobs on graph-structured data. The edge set of a given graph is split into $k$ equally-sized partitions, such that the replication of vertices across partitions is minimized. Out-of-core edge partitioning algorithms are able to tackle the problem with low memory overhead. Exsisting out-of-core algorithms mainly work in a streaming manner and can be grouped into two types. While \\emph{stateless} streaming edge partitioning is fast and yields low partitioning quality, stateful streaming edge partitioning yields better quality, but is expensive, as it requires a scoring function to be evaluated for every edge on every partition, leading to a time complexity of $\\mathcal{O}(|E|*k)$. In this paper, we propose 2PS-L, a novel out-of-core edge partitioning algorithm that builds upon the stateful streaming model, but achieves linear run-time (i.e., $\\mathcal{O}(|E|)$). 2PS-L consists of two phases. In the first phase, vertices are separated into clusters by a lightweight streaming clustering algorithm. In the second phase, the graph is re-streamed and vertex clustering from the first phase is exploited to reduce the search space of graph partitioning to only two target partitions for every edge. Our evaluations show that 2PS-L can achieve better partitioning quality than existing stateful streaming edge partitioners while having a much lower run-time. As a consequence, the total run-time of partitioning and subsequent distributed graph processing can be significantly reduced.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2203.12721", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icde/MayerOJ22", "doi": "10.1109/icde53745.2022.00242"}}, "content": {"source": {"pdf_hash": "f9f90706befa12f70dd77390985df63f375c3c56", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2203.12721v1.pdf\"]", "oa_url_match": false, "oa_info": null}, "grobid": {"id": "f61aad1db6c18db333eaf4ff42ec299c26ca465d", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/f9f90706befa12f70dd77390985df63f375c3c56.txt", "contents": "\nOut-of-Core Edge Partitioning at Linear Run-Time\n\n\nRuben Mayer ruben.mayer@tum.de \nTechnical University of Munich\nTechnical University of Munich\nUniversity of Toronto\n\n\nKamil Orujzade kamil.orujzade@tum.de \nTechnical University of Munich\nTechnical University of Munich\nUniversity of Toronto\n\n\nHans-Arno Jacobsen jacobsen@eecg.toronto.edu \nTechnical University of Munich\nTechnical University of Munich\nUniversity of Toronto\n\n\nOut-of-Core Edge Partitioning at Linear Run-Time\n\n\n\nI. INTRODUCTION\n\nIn the recent past, many distributed data analytics systems have emerged that process graph-structured data. Among the most prominent examples are distributed graph processing systems such as Spark/GraphX [1], PowerGraph [2], Pregel [3], and Giraph [4], iterative machine learning systems such as GraphLab [5], distributed graph databases like Neo4j [6], and, more recently, distributed graph neural network (GNN) processing frameworks like DGL [7] and ROC [8]. These systems commonly apply graph partitioning to cut the graph data into partitions. By minimizing the cut size, the communication overhead in distributed computations is minimized, as each cut through the graph induces message transfer between the compute nodes while performing distributed computations.\n\nThere are two major partitioning strategies. Vertex partitioning separates the vertices of the graph by cutting through the edges, while edge partitioning separates the edges of the graph by cutting through the vertices. In edge partitioning, a vertex cut leads to vertex replication, i.e., the vertex is adjacent to edges of multiple different partitions. When the distribution of vertex degrees in a graph is highly skewed (e.g., in so-called \"power-law graphs\"), it has been shown that edge partitioning is more effective than vertex partitioning in finding good cuts [9]. The edge partitioning problem is known to be NP-hard, and hence, can only be solved heuristically for large graphs [10].\n\nExisting approaches to solve the edge partitioning problem can be categorized into two groups. In-memory partitioners [11], [12], [13], [10], [14] load the complete graph into memory and then perform partitioning on it. In contrast to this, out-of-core partitioners [15], [16], [17], [18], [19] forgo materializing a representation of the complete graph in memory. Instead, they commonly ingest the graph as a stream of edges, i.e., edge by edge, and assign each edge of the stream to a partition. The latter approach has the advantage that graphs can be partitioned with low memory overhead, as the edge set does not need to be completely kept in memory. This way, the monetary costs of graph partitioning can be reduced, as smaller machines can be used for partitioning very large graphs. For example, partitioning the Twitter graph into 32 partitions with the state-of-the-art in-memory partitioner NE [10] takes 28 GB of memory, while it only takes 2.7 GB with our proposed out-of-core partitioner 2PS-L.\n\nThere are two different kinds of streaming algorithms which are key to out-of-core partitioners: Stateless and stateful streaming edge partitioning. Stateless partitioning commonly assigns edges to partitions without taking into account previous assignments. Instead, partitioning is performed based on hashing over the IDs of the associated vertices. Contrary to this, stateful streaming edge partitioning keeps information about which vertex is already replicated on which partition. When assigning an edge e to a partition, the partitioner computes a score for each of the k partitions, and then assigns e to the partition that yields the best score. This score takes into account the vertex replication and can also use additional graph properties such as the vertex degrees. Stateful partitioning often yields better partitioning quality than stateless partitioning, as exploiting partitioning state and graph properties help to make better informed partitioning decisions [20], [21], [22]. However, this comes at the cost of higher time complexity. As stateless partitioning uses a constant-time hashing function to assign each edge to a partition, the time complexity is in O(|E|). But in stateful partitioning, the scoring function is computed for every combination of edges and partitions, yielding a time complexity of O(|E| * k). Thus, when k is high, stateful streaming edge partitioning becomes very slow. This is problematic when designing an out-of-core edge partitioning algorithm based on streaming.\n\nRecent trends in graph processing pose the demand for partitioning graphs into an increasing number of components (i.e., require a growing value of k) [23]. First, real-world graphs are growing in size (see Figure 1). Second, graph computations are growing in complexity. While classical graph processing algorithms like PageRank or Connected Components involve low-complexity vertex functions such as simple aggregations of neighbors' values, emerging workloads are increasingly complex, e.g., GNN training requires for each vertex to compute a multi-layer neural network function in every iteration [8], [24]. These two ongoing trends make it necessary to distribute the input graph onto a growing number of compute nodes. This development poses existing stateful streaming graph partitioning algorithms at risk of losing their practical relevance, as their run-time is becoming prohibitively large at large k. In practice, this problem already leads to the design of systems that forego the increased locality of high-quality graph partitioning with stateful partitioning and instead simply hash the input graph (e.g., the GNN processing framework P 3 [24]). As a consequence, the potential for efficiency gains due to higher data locality using a high-quality graph partitioner remains unexploited.\n\nIn this paper, we overcome the described limitations of stateful streaming edge partitioning by proposing a novel outof-core algorithm that has linear run-time. This way, we push the scalability of out-of-core graph partitioning along a new dimension, namely, the number of partitions k, opening up new possibilities for graph partitioning applications in nextgeneration graph data management systems. We achieve this by combining a preprocessing phase, in which the vertices are clustered, with a streaming phase in which vertex clustering is exploited to reduce the search space of edge partitioning. Our contributions are as follows:\n\n1) We propose 2PS-L, a novel two-phase out-of-core algorithm for edge partitioning. In the first phase, 2PS-L gathers information about the global graph structure by performing streaming clustering. In the second phase, clustering information is exploited to perform high-quality edge partitioning. This way, we exploit the flexibility of graph clustering and at the same time solve the more rigid edge partitioning problem. 2) We propose a new constant-time scoring mechanism for streaming edge partitioning that only computes a score for two partitions-independent of the number of partitions. As part of this new mechanism, we introduce a new scoring function that not only takes into account vertex degrees and replication state, but also the volume of vertex clusters. As a result, the partitioning quality achieved with 2PS-L is in most cases better than existing stateful streaming edge partitioners, at a much lower runtime. Our approach introduces a novel stateful streaming mechanism that does not involve computing a scoring function for every edge on every partition. 3) We provide a thorough theoretical analysis of 2PS-L regarding time and space complexity. We show that time complexity of 2PS-L is linear in the number of edges, and space complexity is linear in the number of vertices and partitions. Hence, 2PS-L has a better time complexity than existing stateful streaming edge partitioners, while the space complexity remains the same. 2PS-L is among the first out-of-core edge partitioning algorithms that has a linear run-time in the number of edges, independent of the number of partitions. Therefore, it is particularly efficient when the number of partitions is high, where state-of-the-art out-of-core (streaming) partitioning algorithms would suffer from extremely high run-time. This way, 2PS-L can achieve a lower end-to-end run-time than existing out-of-core edge partitioners. Hence, 2PS-L closes an important research gap that had so far been overlooked. 4) We perform extensive evaluations on large real-world graphs, showing the favorable performance of 2PS-L compared to other out-of-core and in-memory partitioners. Due to its fast run-time, 2PS-L can reduce the total run-time of partitioning and subsequent distributed graph processing jobs significantly compared to other partitioners. The rest of the paper is organized as follows. In Section II, we formalize the problem of edge partitioning. In Section III, we introduce the 2PS-L out-of-core edge partitioning algorithm. Section IV contains a thorough theoretical analysis of 2PS-L. In Section V, we perform extensive evaluations of 2PS-L on a variety of real-world graphs. Finally, in Section VI, we discuss related work and then conclude the paper in Section VII.\n\n\nII. PROBLEM ANALYSIS\n\n\nA. Edge Partitioning Problem\n\nFormalization. The problem of edge partitioning is commonly specified as follows (cf. also [10], [9]). The graph G = (V, E) is undirected or directed and consists of a set of vertices V and a set of edges E \u2286 V \u00d7 V . Now, E shall be split into k > 1, k \u2208 N partitions P = {p 1 , ..., p k } such that i=1,...,k p i = E and p i \u2229 p j = \u2205, i = j, while a balancing constraint is met: \u2200p i \u2208 P : |p i | \u2264 \u03b1 * |E| k for a given \u03b1 \u2265 1, \u03b1 \u2208 R. The balancing constraint ensures that the largest partition does not exceed the expected number of edges multiplied by an imbalance factor \u03b1 that limits the acceptable imbalance. We define V (p i ) = {x \u2208 V |\u2203y \u2208 V : (x, y) \u2208 p i \u2228 (y, x) \u2208 p i } as the set of vertices covered by a partition p i \u2208 P , i.e., the set of vertices that are adjacent to an edge in p i . The optimization objective of edge partitioning is to minimize the replication factor RF(p 1 , . . . ,\np k ) = 1 |V | i=1,...,k |V (p i )|.\nInterpretation. The replication of a vertex on multiple partitions induces synchronization overhead in distributed processing. The lower the replication factor, the lower is the synchronization overhead. This has positive effects on the performance of distributed computations. For instance, numerous studies [10], [14], [20] show that there is a direct correlation between replication factor in edge partitioning and run-time of distributed graph processing.\n\n\nB. Streaming Edge Partitioning\n\nStreaming is the dominant way of performing out-ofcore edge partitioning. In particular, the space complexity of streaming partitioning is independent of the number of edges in the graph. To do so, the graph is ingested edge by edge (one edge at a time), and each edge is immediately assigned to a partition. Depending on how the edge assignment is computed, we can differentiate between stateless and stateful streaming edge partitioning.\n\nStateless. In stateless streaming edge partitioning, the assignment decision of a given edge e is performed independently of the assignment of other edges. This is commonly achieved by hashing on the vertex IDs of the adjacent vertices of e. As a practical example, degree-based hashing (DBH) [16] computes a hash on the vertex ID of the vertex that has the lower degree.\n\nStateful. In stateful streaming edge partitioning, the assignment of an edge to a partition is performed based on a scoring function that is computed for every partition. The scoring function can take into account graph properties (e.g., the known or estimated degrees of the adjacent vertices of the edge [16], [17]) as well as partitioning state (e.g., the vertex cover sets of the partitions and the current size of the partitions [17]). The size of the partitioning state is limited to O(|V |), i.e., to only vertex-related information. As a practical example, HDRF [17] is a streaming partitioner that assigns an edge e = (u, v) to the partition p which maximizes a scoring function C HDRF (u, v, p) = C REP (u, v, p)+C BAL (p), where C REP (u, v, p) is a degree-weighted replication score and C BAL (p) is a balancing score. C REP (u, v, p) is highest if both vertices u and v adjacent to an edge e are in the vertex cover set of the same partition p; C BAL (p) is highest when p contains the least number of edges.\n\nDiscussion: Stateful partitioning yields in most cases a lower replication factor than stateless partitioning [22], [21], [20]. However, as the run-time of stateful partitioning increases linearly with the number of partitions, for a growing number of partitions, it becomes less and less profitable to perform stateful partitioning. The core problem of stateful streaming edge partitioning is that the scoring function is computed for    every edge on every partition, making it inefficient at high values of k. We argue that if we gather information on the graph structure in a preprocessing step, we can reduce the search space of stateful streaming edge partitioning from all k partitions to only two partitions (regardless of k). With our novel partitioning algorithm 2PS-L, we thus achieve linear runtime at competitive partitioning quality.\n\nIn Figure 2, we perform streaming edge partitioning with DBH (a representative of stateless partitioning) and HDRF (stateful partitioning) at a growing number of partitions k. While the replication factor achieved with HDRF is better than with DBH, the run-time overhead increases considerably: At k = 256, HDRF takes more than 5 minutes to partition the OK graph, while DBH is done in 7 seconds. In many cases, investing so much time into partitioning will not pay off. 2PS-L with its linear time complexity can build 256 partitions in 21 seconds and achieves the lowest replication factor at the same time.\n\n\nIII. APPROACH\n\nOur main hypothesis is that the global clustering structure of the vertices in the graph can guide stateful streaming partitioning in such a way that for a given edge, only two partitions need to be considered regardless of k. In particular, an edge assigment can be performed solely depending on the clusters of the two adjacent vertices. We introduce our new two-phase out-of-core algorithm 2PS-L (2-Phase Streaming in Linear runtime). It consists of (1) a streaming clustering phase, where vertices are assigned to clusters based on their neighborhood relationships, and (2) a streaming edge partitioning phase, where vertex clusters are exploited to achieve a low replication factor at linear run-time.\n\nA. Phase 1: Clustering 1) Intuition: We observe that in edge partitioning, a group of vertices should be replicated on the same partition if there are many edges between vertices of that group, i.e., the group is densely connected. This way, many edges can be assigned to a partition while only few vertices are added to the vertex cover set of that partition, leading to a low overall replication factor. Finding groups of vertices that are densely connected is a well-known problem called clustering or community detection [25], [26]. In existing streaming partitioners, e.g., HDRF [17] or Greedy [2], it is unknown to the partitioning algorithm whether an incoming edge is an intra-cluster edge or not, i.e., whether it is incident to vertices of the same cluster. Instead, these algorithms only consider the vertex degrees, which can be misleading, as it is not always best to cut through the highest-degree vertices. Introducing an edge buffer, as in ADWISE [18], allows for \"looking into the future\" in the stream to detect clusters within that buffer. However, as shown in our evaluations (cf. Section V), the buffer-based approach fails for very large graphs, as the buffer only covers a small fraction of the complete graph and, hence, cannot detect all clusters.\n\nIn 2PS-L, we go a different way: We first analyze the entire graph in a streaming pre-processing phase to find the vertex clusters, and then exploit the global knowledge in the partitioning phase. Figure 3 illustrates this idea. In the lefthand side figure, we depict a graph structure that has two clusters, a green one and a blue one. Most of the edges are intra-cluster edges (solid lines); there are only two inter-cluster edges (dashed lines). If partitioning is performed unaware of the clustering structure of the graph, this may lead to the distribution of intra-cluster edges onto different partitions, and as a consequence, leads to a low partitioning quality. On the other hand, if partitioning is performed aware of the clustering structure of the graph, intra-cluster edges are assigned to the same partition, which leads to a high partitioning quality.\n\n2) Streaming Clustering Algorithm: In spite of similarities, clustering and edge partitioning have a different nature and, hence, are addressed with different algorithms [25]. In particular, clustering is a less constrained problem than partitioning. First, the size of the different clusters does not have to be balanced, i.e., clusters are allowed to have different sizes (although they may have to adhere to a maximum size). Contrary to this, in edge partitioning, every partition has to cover an equal (up to the imbalance factor \u03b1) number of edges. Second, the number of clusters is not necessarily predetermined, but may originate from the structure of the graph. Contrary to this, in edge partitioning, the number of partitions is determined by the user. The less constrained nature of clustering allows for devising a more efficient and flexible streaming algorithm.\n\nAnother advantage of clustering over edge partitioning is the possibility to change the assignment of a vertex to a cluster Algorithm 1 2PS-L Phase 1: Clustering map of vertex id to cluster id 4: int max vol maximum cluster volume 5: int next id \u2190 0 id of next new cluster 6: procedure STREAMINGCLUSTERING 7:\n\nperformStreamingPass() 8:\n\nOptional: Further streaming passes.\n\n9: procedure PERFORMSTREAMINGPASS 10:\n\nfor each e \u2208 edge stream do 11:\n\nfor each v \u2208 e do 12:\n\nif multiple times in one single pass through the edge stream. A vertex of degree d is adjacent to d edges, and therefore, is visited d times in one single pass through the edge stream. Every time a vertex is visited, its assignment to a cluster can be refined, taking into account new information that has been gathered since the last time the vertex was visited. Contrary to this, in edge partitioning, in a single pass through the edge list, every edge is only visited once and is immediately assigned to a partition. It is not trivially possible to revoke an edgeto-partition assignment at a later point in time when more information about the graph structure is accumulated. To reassign edges to different partitions would require to track the mapping of edges to partitions. Such mapping, however, can not be kept in memory for graphs with a large edge set. Our streaming clustering algorithm is an extension of an algorithm by Hollocou et al. [27]. The intuition of Hollocou's algorithm is as follows. A given random edge from the input stream is more likely an intra-cluster edge than an inter-cluster edge-this follows directly from the understanding of a cluster as a densly connected sub-part of the graph. Therefore, when meeting an edge e = (u, v) where vertices u and v are currently assigned to different clusters, we draw either u or v into the cluster of its corresponding neighbor. We prioritize the cluster with the larger volume (i.e., the sum of the degrees of its vertices), as a vertex is more likely to have more connections to the larger cluster than to the smaller cluster. Algorithm 1 processes the stream edge by edge (line 10). If u or v have no cluster yet, we create a new cluster and assign the vertex to it (lines [11][12][13][14][15]. Now, we compare the cluster volumes of the clusters of u and v. The vertex that is currently assigned to the cluster with the lower volume migrates to the neighboring cluster that has the higher volume (lines [16][17][18][19][20][21][22]. However, such migration is only allowed if the new volume of the larger cluster does not exceed a volume bound.\nv2c[v] = NULL then 13: v2c[v] \u2190 next id 14: vol[next id] \u2190 d[v] 15: next id \u2190 next id + 1 16: if vol[v2c[v]] \u2264 max vol \u2200v \u2208 e then 17: vs \u2190 v i \u2208 e : vol[v2c[v i ]] -d[v i ] \u2264 vol[v2c[v j ]] -d[v j ] 18: v l \u2190 v j \u2208 e : v j = vs 19: if vol[v2c[v l ]] + d[vs] \u2264 max vol then 20: vol[v2c[v l ]] \u2190 vol[v2c[v l ]] +\nOur extension introduces two novelties: bounded cluster volumes and re-streaming. (1) The original algorithm by Hollocou et al. [27] cannot guarantee that cluster volumes are bounded. This is problematic for our use case because if there are too many intra-cluster edges, we have to cut through the clusters in the subsequent partitioning phase of 2PS-L to keep the balancing constraint, which can lead to a loss of partitioning quality. Therefore, different from Hollocou et al., we compute the degree of each vertex upfront (if not already known) and use the actual vertex degree instead of the partial degree in order to compute cluster volumes. The degree of each vertex is computed in a pass through the edge set, keeping a counter for each vertex ID that is seen in an edge, which is a lightweight, linear-time operation. Furthermore, we enforce an explicit volume cap on the clusters. As we consider the actual degree of vertices instead of the partial degree, we can enforce such volume cap effectively. (2) Hollocou et al. [27] do not consider to apply re-streaming [28] to their clustering algorithm. In re-streaming, we perform another pass through the edge list and apply exactly the same clustering algorithm, using the state from the previous pass. We evaluate the impact of the number of streaming passes on the clustering quality in our evaluations (Section V-C, Fig. 7 and 8).\n\n\nB. Phase 2: Partitioning\n\nThe edge partitioning algorithm (Algorithm 2) has three steps. First, clusters are mapped to partitions. Second, a subset of edges are pre-partitioned by exploiting vertex clustering. Third, remaining edges are partitioned by linear-time stateful streaming edge partitioning.\n\nStep 1: Mapping Clusters to Partitions. Our objective in the first step is to map clusters to partitions, such that the total volume of clusters across partitions is balanced. We model this problem as an instance of the classical Makespan Scheduling Problem on Identical Machines (MSP-IM). The problem can be defined as follows [29]:\n\nGiven a set of k machines M 1 , ..., M k and a list of n jobs j 1 , ..., j n with corresponding run-time a 1 , ..., a n , assign each job to a machine such that the makespan (i.e., the time to complete all jobs) is minimized. We apply our cluster assignment problem to MSP-IM as follows. Partitions are corresponding to \"machines\", clusters to \"jobs\" and volumes of the clusters to \"run-times\" of the jobs. The optimization goal is to minimize the cumulative volume of the largest partition.\n\nMSP-IM is NP-hard [30] so that we solve it by approximation. The sorted list scheduling algorithm by Graham [29] is a 4 3 -approximation of MSP-IM, i.e., its result is at most 4 3 times as large as the true optimum. Applied to our cluster assignment problem, sorted list scheduling means that the clusters are sorted by decreasing volume (Algorithm 2, line 12) and then assigned one by one to the currently least loaded partition (lines 13 to 15).\n\nStep 2: Pre-Partitioning. In the second step, we exploit the clustering of vertices to pre-partition a subset of edges. To do Algorithm 2 2PS-L Phase 2: Streaming Partitioning output: e is assigned to target p so, the pre-partitioning algorithm performs one pass through the complete edge stream (Algorithm 2, line 17). For each edge e = (e.first, e.second), it checks if both adjacent vertices e.first and e.second are either in the same cluster or their clusters are assigned to the same partition p (cf.\n\nStep 1 discussed above). In this case, e is applicable to pre-partitioning and shall be assigned to p (lines 18 to 21). If p is already occupied to its maximum capacity \u03b1 * |E| k , e is assigned to a different partition instead, using linear-time stateful streaming edge partitioning (as in Step 3).\n\nStep 3: Streaming Partitioning. Edges between vertices of different clusters that are mapped to different partitions are remaining. Partitioning the remaining edges is performed with linear-time scoring-based streaming edge partitioning. We enforce a hard balancing cap, i.e., we guarantee that no partition gets more than \u03b1 * |E| k edges assigned. Existing stateful streaming partitioning algorithms are not aware of the vertex clustering. This induces three problems.\n\nFirst and foremost, the streaming algorithm has no guidance which partitions could be most suitable to place an edge on. Therefore, a scoring function is computed for every partition. Second, the streaming algorithm starts with an empty partitioning state. Therefore, early edges in the stream are partitioned randomly at low partitioning quality. Third, the global structure of the graph is disregarded, which can lead to low partitioning quality despite of expensive scoring.\n\nIn our linear-time scoring-based partitioning algorithm, we tackle these shortcomings as follows. First, we constrain the scoring function to only take into account two different partitions, namely, the partitions associated to the clusters of the adjacent vertices (see Step 1). This is reasonable because it is highly likely that a vertex is already replicated on the partition that is associated to its cluster; it is much less likely that a vertex is replicated on any of the other k \u2212 1 partitions, so that we can forego checking every partition's state. Second, we exploit the partitioning state from pre-partitioning (see Step 2). This way, we avoid the \"cold start\" or \"uninformed assignment\" problem of streaming edge partitioning, where early edges in the stream are assigned to partitions randomly as all partitioning state is empty [18]. Third, in the scoring function, we take into account the cluster volumes. If a cluster has a higher volume, it is more likely that further edges that have vertices incident to the cluster will be seen in the edge stream. Thus, we assign a higher score to placing an edge on the partition that is associated with the higher-volume cluster.\n\nScoring function: We denote with d v the degree of a vertex v, with c v the cluster of a vertex v, and with vol (c v ) the volume of the cluster of a vertex v. Then, the scoring function for an edge (u, v) is defined as follows:\ns(u, v, p) = g u + g v + sc u + sc v g {u,v} = 1 + (1 \u2212 d {u,v} du+dv ) if {u,v} is replicated on p, 0 else. sc {u,v} = vol(c {u,v} ) vol(cu)+vol(cv) if c {u,v} is assigned to p, 0 else.\nTo perform streaming partitioning, 2PS-L makes a complete pass through the edge stream (Algorithm 2, line 28). First, it determines whether an edge has already been pre-partitioned by checking the conditions for pre-partitioning (adjacent vertices are in the same cluster or in clusters that are mapped to the same partition). If the conditions for pre-partitioning are met, the edge is skipped (lines 29 to 33) as it has already been assigned. Else, scoring is performed on the two target partitions to determine the highest-scoring partition. If this partition has already reached its capacity bound, we hash the edge using the ID of the vertex that has the highest degree. If the hashed partition is fully occupied as well, we assign the edge to the currently least loaded partition as a last resort (not shown in the pseudo code).\n\nAfter\n\nStep 3 is finished, all edges have been assigned to partitions and none of the partitions have more than \u03b1 * |E| k edges. This concludes the 2PS-L algorithm.   \n\n\nIV. THEORETICAL ANALYSIS\n\n\nA. Time Complexity\n\nWe analyze each phase of 2PS-L separately. Phase 1, specified in Algorithm 1, performs a fixed number of passes through the edge set. In each pass, a constant number of operations is performed on each edge. Hence, the time complexity of the first phase is in O(|E|). Phase 2, specified in Algorithm 2, consists of three steps. First, clusters are mapped to partitions in decreasing volume order. To sort clusters by volume is in O(|V | * log |V |), as in the worst case, there are as many clusters as vertices (note that, in natural graphs, we can expect the number of clusters to be orders of magnitude smaller than the number of vertices). Each cluster is assigned to the currently least loaded partition, which can be performed in O(|V | * log k) time, provided that we keep the k partitions sorted by their accumulated volume while assigning clusters to them. Second, edges are pre-partitioned, such that edges whose adjacent vertices are both in clusters of the same partition are assigned to that partition. This is a constant-time operation per edge, resulting in O(|E|) time complexity. Third, the remaining edges are partitioned using stateful streaming, which is done in O(|E|) time, as for each edge, we need to compute the score against two partitions. In summary, the second phase of 2PS-L has a time complexity of O(|E|), as |E| >> |V |. The total time complexity of 2PS-L is, hence, in O(|E|), i.e., linear in the number of edges.\n\nIn Table I, we compare the time complexity of 2PS-L to known results from the literature 1 . 2PS-L is the only stateful out-of-core edge partitioner that has linear time complexity.  \n\n\nB. Space Complexity\n\nWe analyze the data structures used in 2PS-L. In Algorithm 1, we use arrays to store the vertex degrees, cluster volumes and the mapping of vertices to clusters. Each of these data structures has a space complexity of O(|V |). In Algorithm 2, besides these arrays, we use additional arrays to map the clusters to partitions and to keep the volumes of clusters per partition. These arrays all have a space complexity of O(|V |). Finally, we use a vertex-to-partition replication matrix, which has a space complexity of O(|V | * k). Hence, the overall 2PS-L algorithm has a space complexity of O(|V | * k). In particular, the space complexity is independent of the number of edges in the graph. The preprocessing phase has no additional memory overhead in excess of the streaming partitioning phase. All data structures needed for clustering (i.e., vertex-to-cluster assignments, vertex degrees and cluster volumes) are directly used in the partitioning phase. In Table II, we compare the space complexity of 2PS-L to known results from the literature. 2PS-L has the same space complexity as other stateful out-of-core (streaming) partitioners. In-memory partitioners, by definition, have a space complexity that is at least linear in the number of edges.\n\n\nV. EVALUATIONS\n\nData Sets. We evaluate on real-world graphs (cf. Table III) that represent a good mix of social networks and web graphs of different sizes. OK is notoriously difficult to partition; IT, TW and FR [31], [32] are used as baselines in many graph partitioning papers [14], [19], [10], [17], [18]. UK, GSH [33], [34], [35] and WDC [36] represent very large graphs. Baselines. We compare to eight strong baselines that yield a low replication factor among the streaming partitioners and among the in-memory partitioners, respectively. In the following, we discuss our choice of baselines.\n\n(1) Streaming Partitioners. From the group of streaming partitioners, we compare to HDRF [17], DBH [16], SNE (a streaming version of the in-memory partitioning algorithm NE [10]), and ADWISE [18]. HDRF delivers a low replication factor at modest run-time and memory overhead. DBH is based on hashing and is the fastest streaming partitioner with the lowest memory overhead. SNE delivers a lower replication factor than HDRF, albeit at a significantly higher run-time and memory overhead. ADWISE uses a buffer to reorder the edge stream in order to achieve a better replication factor at the cost of higher run-time. Other streaming partitioners (Greedy [2], Grid [37], Perfect Difference Sets [37]) are outperformed by our chosen baselines in terms of replication factor and are not considered in our study.\n\n(2) In-Memory Partitioners. From the group of inmemory partitioners, we compare to NE [10], DNE [14] and METIS [11]. These are currently the partitioners that achieve the lowest replication factors (NE, METIS) and the best scalability (DNE). NE and METIS are single-threaded, while DNE is a parallel algorithm. KaHiP [12] is reported to provide very good partitioning quality, but it ran out of memory even on our large machine. Other partitioners like Spinner [38], ParMETIS [39], XtraPulp [40], and Sheep [13] are outperformed by DNE in terms of replication factor on a large number of real-world graphs [14].\n\n(3) Hybrid Partitioning. We also compare ourselves to Hybrid Edge Partitioner (HEP) [19] which operates between inmemory and streaming partitioning using a tunable parameter \u03c4 . We set \u03c4 to different values (100, 10, 1) as in the original publication [19]. With a high setting of \u03c4 = 100, HEP behaves more like an in-memory partitioner, while with a low setting of \u03c4 = 1, HEP behaves more like a streaming partitioner.\n\nWe discuss other partitioners extensively in Section VI and detail our experimental settings in the appendix.\n\n\nA. Partitioning of Real-World Graphs\n\nWe perform our experiments for k = {4, 32, 128, 256} partitions. We repeat each experiment 3 times and report the mean value along with error bars that show the standard deviation.\n\nThe key performance metrics we report are replication factor, partitioning run-time, and memory overhead. We also track balancing. In most cases, the balancing constraint \u03b1 = 1.05 is met by all partitioners; if this is not the case, we report the measured \u03b1 in the plot. The results comprise all costs of 2PS-L, including any preprocessing.\n\nTo allow for a separate analysis of the effects of I/O speeds on the performance of 2PS-L, in the following experiments, we perform several subsequent runs, so that the graph data is factually cached by the operating system in memory. We also perform evaluations with disabled caching in Section V-F to evaluate the effect of I/O bottlenecks in memory-constrained scenarios.\n\nMain Observations. In Figure 4, we depict all performance measurements. Our main observations are as follows.\n\n(1) The run-time of 2PS-L is independent of the number of partitions. Therefore, 2PS-L is significantly faster than all other stateful partitioners (streaming as well as in-memory partitioners) at higher number of partitions (k = 128 and k = 256). For instance, at k = 256 on the TW graph, 2PS-L is 5.8\u00d7 faster than HEP-100, 13.4\u00d7 faster than HEP-10, 25.7\u00d7 faster than HEP-1, 630\u00d7 faster than ADWISE, 12.3\u00d7 faster than HDRF, 2500\u00d7 faster than METIS, and 5.0\u00d7 faster than DNE. Even at k = 4 and k = 32, 2PS-L is the fastest stateful partitioner in almost all cases. Only DBH, a stateless partitioner based on hashing, is faster than 2PS-L. Hence, 2PS-L is the first stateful partitioner with a run-time          that is competitive to stateless partitioning. This way, 2PS-L can be used in scenarios where existing heavy-weight stateful partitioning would not pay off in an end-to-end comparison when considering the sum of partitioning and subsequent distributed graph processing run-time.\n\n(2) 2PS-L yields a comparably good replication factor. In most cases, 2PS-L yields a lower replication factor than HDRF and ADWISE, which are stateful streaming partitioners that have much higher run-time (see discussion above). While inmemory partitioning (HEP, NE, DNE, METIS) still yields a better replication factor than 2PS-L, these partitioners also have a higher run-time and higher memory overhead. When comparing the partitioning quality of 2PS-L with DBH-the only partitioner that is continuously faster,-we see that 2PS-L yields significantly better replication factors on all graphs except for TW. The highest advantage of 2PS-L over DBH is on the GSH graph, where at k = 256, the replication factor of DBH is 6.4\u00d7 higher.\n\nIn summary, 2PS-L as an out-of-core edge partitioner shows superior performance to stateful streaming edge partitioning. We can reduce both replication factor and run-time at the same time. Therefore, 2PS-L is an attractive new choice for outof-core graph partitioning when both partitioning quality and run-time are critical.\n\n\nB. Run-Time of Different Phases in 2PS-L.\n\nIn Figure 5, we dissect the total run-time of 2PS-L into its two phases, i.e., clustering and partitioning, and also report the time for calculating the vertex degrees. Between 7 and 20 % of the run-time are spent on degree calculations. This time could be saved if the vertex degrees are already known (which may be the case in practice, depending on the data source and format). Clustering takes between 16 and 22 % of the runtime. This time will increase when more streaming clustering passes are performed (see Section V-C). Finally, between 58 and 77 % of the run-time are accounted for in the partitioning phase, which includes the assignment of clusters to partitions, the pre-partitioning and the scoring-based partitioning pass.\n\nWe see similar patterns in the distribution of run-time between the degree calculation, clustering and partitioning phases among the group of social network graphs (OK, TW, FR) and web graphs (IT, UK, GSH, WDC). This correlates to the ratio of the two different parts of the streaming partitioning phase, i.e., prepartitioning (assigning edges of commonly placed clusters to the single candidate partition) and partitioning of remaining edges (using the scoring function to decide between two candidate partitions). We show this ratio for the evaluated graphs in Figure 6. Different from social network graphs, prepartitioning dominates in web graphs, which is faster than scoring-based partitioning although it has the same algorithmic time complexity. Therefore, web graphs exhibit a lower overall partitioning time and a lower fraction of the run-time is associated with partitioning.\n\n\nC. Re-Streaming\n\nWe further evaluate how the partitioning quality is improved by re-streaming in the clustering phase of 2PS-L. We measured the relative gain in replication factor as compared to singlepass clustering in Figure 7 as well as the run-time in Figure 8. In terms of replication factor, the gains for re-streaming clustering are somewhat limited (up to 3.5 % reduction). This needs to be paid for by a larger run-time; however, the increase in run-time is not proportional to the number of streaming passes. For example, for 8 streaming passes, the run-time roughly doubles as compared to single-pass clustering. This is because clustering only takes a minor portion of the total partitioning run-time (cf. Section V-B). In the end, it depends on the concrete use cases to decide whether re-streaming pays off. Our recommended standard setting for 2PS-L is to perform a single streaming clustering pass, i.e., not apply re-streaming. Different from existing methods to reduce replication factors in out-of-core edge partitioning (e.g., ADWISE [18]), 2PS-L with re-streaming has a run-time that is independent of the number of partitions, so that the cost of re-streaming is still moderate compared to prior approaches.\n\n\nD. Comparison to HDRF Scoring\n\nWe implemented an alternative version of 2PS-L that employs \"traditional\" stateful streaming partitioning with the HDRF scoring function [17] in the second phase instead of linear-time streaming partitioning as in 2PS-L. We call this version 2PS-HDRF. In the following, we compare the replication factor and the run-time of 2PS-HDRF with 2PS-L (see Figure 9).\n\nUsing the HDRF scoring function improves the replication factor by up to 50 %. However, it comes at the cost of higher run-time with increasing number of partitions as a score is computed for every edge on every partition. At k = 4, there is almost no run-time difference between 2PS-L and 2PS-HDRF. But at k = 256, 2PS-L is up to 12\u00d7 faster than 2PS-HDRF. Our recommendation is as follows: For a low number of partitions (like k = 4), it pays off to use 2PS-HDRF, as the run-time is similar to 2PS-L, but the replication   factor is lower. For a higher number of partitions (k > 4), the question of whether to use 2PS-L or 2PS-HDRF depends on the subsequent graph processing workload. It may pay off to invest more run-time into graph partitioning to yield a better partitioning quality that leads to faster graph processing, but it requires profiling of the graph processing performance to determine whether this is indeed the case. In Section V-E, we study the performance of graph processing under different partitionings to shed more light onto this question.\n\n\nE. Distributed Graph Processing\n\nWe evaluate the distributed graph processing performance under different graph partitionings. To this end, we set up a cluster of 8 machines on which we equally distribute 32 Spark executors; details can be found in the appendix. We deploy Spark/GraphX version 3.0.0 and use static PageRank (PR) with 100 iterations as graph processing workload. We partitioned the graphs into the respective number of executors used, i.e., k = 32. As baselines, we used state-of-the-art streaming edge partitioners, as well as HEP-1 (i.e., HEP with \u03c4 = 1.0) which is an out-of-core partitioner that comes close to stateful streaming partitioners in terms of memory overhead [19]. Due to memory overheads in Spark (which internally uses property graphs represented as resilient distributed datasets), we could not process large graphs with more than one billion edges on our cluster. Therefore, we perform graph processing experiments on the OK graph (see Table III) and a Wikipedia graph (WI) with 14 M vertices and 437 M edges [41]. Table IV shows the resulting replication factor, partitioning run-time and graph processing run-time (average of 3 runs). Neither the best partitioning quality (HEP-1 on OK, SNE on WI) nor the fastest partitioning (DBH) resulted in the best total run-time. HEP-1 and SNE yield the best replication factors, but as their partitioning run-time is relatively high, they do not perform best in an end-to-end comparison. On the other hand, DBH is the fastest partitioner. However, it also yields the worst replication factors, which makes graph processing slower. Therefore, in an end-to-end comparison, DBH does  not perform best either. Even worse, due to a large replication factor on the WI graph, Spark/GraphX could not perform graph processing when the graph was partitioned with DBH. Instead, it ran out of disk space (35 GB per worker machine), as too much shuffling occurred due to the high replication factor.\n\nWe conclude that there is a need for good partitioning quality, but partitioning run-time is equally important. 2PS-L takes into account both factors, as it is fast and yields a good replication factor at the same time. As a consequence, the total run-time was always lowest when partitioning the graph with 2PS-L. 2PS-HDRF achieved a better replication factor and a lower graph processing run-time; however, due to its higher partitioning run-time, it did not perform better in terms of total run-time.\n\n\nF. External Storage\n\nLoading the graph data from external storage may slow down the performance of 2PS-L, in particular, as multiple passes through the edge list need to be performed. To evaluate the impact of I/O on partitioning time, we set up a server with two different storage devices: a local SSD and a local HDD. We profiled the sequential read speed using fio (singlethreaded reading of a single file of 5 GB size in 100 MB blocks, average of 3 runs), resulting in 938 MB/s for the SSD and 158 MB/s for the HDD. To force 2PS-L to read the graph in every streaming iteration completely from disk, we drop the page cache [42] after each streaming pass which invalidates the cached disk blocks for subsequent streaming passes. In Table V, we compare the partitioning run-time under different storage solutions (page cache, SSD, HDD). The SSD is between 7 % and 22 % slower on social network graphs, and between 13 % and 40 % slower on web graphs, respectively, compared to reading the graph data from the page cache. Using an HDD comes with a performance penalty of 54 % to 159 % on social network graphs and 200 % to 308 % on web graphs, respectively. In conclusion, we recommend to employ a fast storage that achieves at least 1 GB/s sequential read speed when using 2PS-L in memory-constrained situations where none of the graph data can be cached in memory.\n\n\nVI. RELATED WORK\n\nGraph partitioning is a problem with a long history in research [43]. It has numerous applications in solving optimization problems, e.g., in VLSI design [11], operator placement in stream processing systems [44] and data management in graph-based data analytics systems [2], [1], [5], [6]. For both vertex partitioning and edge partitioning, in-memory partitioners as well as out-of-core partitioners have been proposed.\n\nIn-memory partitioners load the complete graph into memory of either a single machine or a cluster of multiple machines before partitioning. A classical approach to in-memory partitioning are multi-level partitioners such as SCOTCH [45], METIS [11] or KaHiP [12]. They work on the principle of coarsening the graph, splitting the coarsened graph, and then refining the splitting to the original graph which results in the final partitioning. While 2PS-L shares the idea of building an intermediary graph representation (i.e., the vertex clustering), it does not perform partitioning on different levels, but instead only partitions the graph once in the final streaming phase. Other in-memory partitioners build different intermediary data structures, e.g., elimination trees [13] or split graphs [12], or they materialize the original graph in memory using variants of the compressed sparse row representation [10], [14]. None of these intermediary data structures can easily be built in a streaming fashion, and we wanted to avoid an in-memory materialization of the complete graph. TLP [46] is a semistreaming algorithm that consists of multiple phases; however, the unpartitioned graph data needs to be repeatedly sorted and streamed in different breadth-first-search orderings, which induces prohibitively large overhead.\n\nStanton and Kliot [15] proposed a streaming model for vertex partitioning that is also used in the FENNEL [47] partitioner. In this model, different from streaming edge partitioning, adjacency lists are ingested and vertices are assigned to partitions with the goal of minimizing the number of cut edges. Awadelkarim and Ugander [48] analyze the impact of the stream order on streaming vertex partitioning; this could also be interesting for streaming clustering. In streaming edge partitioning, besides stateless partitioning based on hashing (e.g., DBH [16] and Grid [37]), stateful partitioners have received growing attention. Here, by gathering state about past assignments, future edges in the stream can be partitioned with a lower replication factor. Different scoring functions have been proposed, e.g., Greedy [2] or HDRF [17], but their time complexity is linear in the number of edges and number of partitions (i.e., O(|E| * k)), making them expensive. Further, these approaches suffer from the uninformed assignment problem. To overcome this problem, ADWISE [18] introduced a buffer for re-ordering edges. However, ADWISE only considers edges within the buffer, which does not work well for very large graphs. Different from that, 2PS-L preprocesses the entire graph and, hence, has a global view of the graph structure. Hence, 2PS-L is effective on graphs of any size. RBSEP [49] in this sense is similar to ADWISE, as it also relies on buffering edges and thus, suffers from the same limitations. Quasi-streaming [50] is a heuristic that consumes the edge stream as a set of non-overlapping chunks (e.g., 6,400 edges per chunk) and assigns these edges to partitions based on a game-theoretical problem formulation. This way, memory overhead can be kept low while the achieved replication factor is better than with pure streaming algorithms. However, quasi-streaming has a large run-time, which is comparable to METIS, while 2PS-L is up to several orders of magnitude faster than METIS. Another approach to out-of-core edge partitioning is Hybrid Edge Partitioner (HEP) [19], a hybrid between in-memory and streaming partitioning. However, HEP uses the HDRF scoring function in its streaming phase, thus leading to high run-time of streaming partitioning.\n\nSome of the edge partitioning algorithms in the literature report theoretical bounds on the replication factor [17], [10], [16]. These bounds commonly rely on the assumption that the input graph strictly follows a power-law degree distribution. However, not all real-world graphs are \"true\" power-law graphs, which has unforeseeable consequences on the validity of the bounds. A further problem is that the community structure of graphs is neglected in those bounds, although it plays a major role in graph partitioning. In particular, analysis techniques from other graph partitioning approaches to determine quality bounds are not directly applicable to 2PS-L [17], [10], [16], as the result of the clustering phase influences the quality of the partitioning phase. In conclusion, we think that there needs to be more work on the theoretical foundations of partitioning quality before such bounds become practical for assessing the real-world performance of partitioners. Instead of relying on theoretical bounds, we compared the replication factor of 2PS-L to its competitors experimentally on a large set of real-world graphs which provides a realistic picture of what to expect at real workloads.\n\nWhile we focus on devising an efficient out-of-core edge partitioning algorithm, other works extend the concept of streaming partitioning to support dynamic graphs and parallelization. Following the approach proposed by Fan et al. [51], 2PS-L could be transformed into an incremental algorithm to efficiently handle dynamic graphs with edge insertions and deletions without recomputing the complete partitioning from scratch. Li et al. [52] propose a complementary approach to re-assign edges to partitions under dynamic graph updates. CuSP [53] is a framework for parallelizing streaming edge partitioning algorithms. While our focus is not on parallelization but on reducing time complexity, 2PS-L could be integrated into the CuSP framework to speed up the partitioning. However, parallelization comes with a cost, as staleness in state synchronization of multiple partitioner instances can lead to lower partitioning quality. Fan et al. [54] propose a machine learning based approach to refine a given partitioning to better suit a given graph processing problem. In this respect, 2PS-L can be used as an efficient initial partitioner.\n\nGraph partitioning is tightly related to the vertex separator problem, i.e., finding a set of vertices that split a graph into equally-sized components. Brandt and Wattenhofer [55] propose a random Las Vegas algorithm. However, their work has not been implemented and evaluated on real workloads, does not exploit power-law degree distributions or clustering and does not suit the out-of-core setting that we target.\n\nThere are many graph clustering algorithms, such as label propagation [56] or incremental aggregation [57]. We base our work on Hollocou's algorithm [27], as it only induces little memory overheads and has linear run-time, but other clustering algorithms could possibly be integrated with 2PS-L.\n\nSome graph processing systems employ special execution models that require a specific style of graph pre-processing. PowerLyra [58] is a hybrid distributed graph processing system that uses a combination of vertex-centric and edge-centric processing. Therefore, it also employs its own hybrid partitioning strategy that combines vertex partitioning and edge partitioning. Gemini [59] performs chunk-based partitioning of vertices, exploiting locality within the graph (neighboring vertices being expected to have similar IDs).\n\nOut-of-core graph processing systems like GraphChi [60], GridGraph [61] and Mosaic [62] employ different graph preprocessing methods that involve specific graph partitioning problems. While these systems perform graph computations using external memory, they are not tailored to efficiently solve the edge partitioning problem.\n\nA related problem is hypergraphs partitioning. In hypergraphs, an edge (called hyperedge) can connect more than two vertices. This way, group relationships can be modeled. Hypergraph partitioning has also been tackled by streaming [63] as well as in-memory algorithms [64], [65], [66], [67].\n\n\nVII. CONCLUSIONS\n\nIn this paper, we propose the new two-phase out-of-core algorithm 2PS-L for edge partitioning of large graphs. We make use of the great flexibility of graph clustering in the first phase before we finalize and materialize the actual partitioning in the second phase. This way, we achieve stateof-the-art results in replication factor while maintaining low space complexity. Furthermore, we introduce a new lineartime scoring mechanism and function in 2PS-L, which reduces time complexity. Finally, we show that partitioning with 2PS-L can lead to improved end-to-end runtime of partititoning plus distributed graph processing. In future work, we plan to investigate the generalization of 2PS-L to hypergraphs.\n\n\nAPPENDIX: EXPERIMENTAL SETTINGS\n\nExperiments in Section V.A-E are performed on a server with 4 x 8 Intel(R) Xeon(R) CPU E5-46500@2.70GHz and 528 GB of memory with Ubuntu 18.04.2 LTS; in Section V.F, we used a server with 4 x 14 Intel(R) Xeon(R) CPU E7-4850 v3 @ 2.20GHz and 528 GB of memory with Ubuntu 20.04.2 LTS. To evaluate the distributed graph processing performance in Section V.E, we set up a cluster of 4 compute nodes with 10 GBit Ethernet links, each having 41 GiB of RAM and 16 CPU cores, hosted on an OpenStack private compute cloud. We configured the system parameters of the baseline partitioners according to the respective authors' recommendations as follows. For HDRF, we set \u03bb = 1.1. For SNE, we used a cache size of 2 * |V |. For DNE, we set an expansion ratio of 0.1. For 2PS-L, we perform only one streaming pass in the clustering phase (no re-streaming).\n\nWe implemented 2PS-L as a separate process that reads the graph data as a file from a given storage, partitions the edges, and writes back the partitioned graph data to storage. This partitioned graph data can then be ingested by a data loader into the data processing framework of choice for subsequent processing. For a fair comparison, we re-implemented the HDRF algorithm in C++ and use the same implementation of HDRF also for edge partitioning in the second phase of 2PS-HDRF. We also re-implemented DBH, using the same framework that we developed for HDRF and 2PS-L. For NE, SNE, DNE, HEP and ADWISE, we use the reference implementation of the respective authors. All implementations that we use, except for DNE, METIS and ADWISE, ingest the graph in the same binary input format (i.e., binary edge list with 32-bit vertex IDs). DNE, METIS and ADWISE ingest ASCII edge or adjacency lists due to their implementation. However, the graph ingestion time of these systems is still negligible, as they either have a large total run-time (ADWISE and METIS) or perform parallel ingestion (DNE).\n\nFor each experiment, we re-compiled the partitioners with optimal settings. For 2PS, HDRF and DNE, we set the maximum number of partitions to the k used in the corresponding experiment; this optimizes their respective memory overheads. Further, we compiled DNE with 32-bit vertex IDs, which minimizes its memory overhead; all other partitioners use 32bit vertex IDs already by default. In DNE, for each partition, a separate process is spawned. As our evaluation machine offers 64 hardware threads, we assigned each process 64 k threads. Different from the other partitioners, for ADWISE and METIS we only performed each partitioning experiment once, as they take a lot of time. For each set of experiments, we perform an initial warm-up run which does not count toward the results. To use our limited server time efficiently, we aborted experiments after 12 hours for the smaller graphs with less than 10 B edges, except for some runs of ADWISE and METIS which we let run longer in order to gather enough data points. Due to long run-times, experiments on GSH and WDC graphs were performed only once.\n\nADWISE allows for setting a run-time bound that controls the buffer size, and thus, the partitioning quality. To get the best possible result in terms of replication factor, we set the run-time bound of ADWISE generously to 40 times the run-time of HDRF (which it did not keep at all times). Furthermore, we set a minimum buffer size of 10 edges in order to force ADWISE to still use a buffer even if the run-time bound would be exceeded. Under these favorable conditions, ADWISE was able to reach better replication factors than HDRF on the smaller graphs (OK and IT). However, on the larger graphs, the buffer size of ADWISE still was not large enough to yield an improvement over HDRF.\n\nCode availability. Our source code is available online (https://github.com/mayerrn/two phase streaming). We also provide links to all datasets that we have used in our paper.\n\nFig. 1 .\n1Size (in number of edges) of the largest real-world graph used in landmark publications on distributed graph processing and graph partitioning of the past 10 years. Synthetic graphs are not considered.\n\nFig. 2 .\n2Replication factor and run-time of 2PS-L against stateful (HDRF) and stateless (DBH) streaming partitioning on OK graph (cf.\n\nFig. 3 .\n3The awareness of graph clustering in edge partitioning leads to better partitioning quality.\n\n\n) GSH: Run-time (logscale).\n\n\n) GSH: Mem. overhead (log.).\n\n\n) WDC: Replication factor.\n\n\n) WDC: Run-time (logscale).\n\n\n) WDC: Mem. overhead (log.).\n\nFig. 4 .\n4Performance results on real-world graphs.\n\nFig. 8 .\n8Normalized total 2PS-L runtime (y-axis) vs. streaming clustering passes (x-axis) at k = 32.\n\nFig. 9 .\n9Performance of 2PS-HDRF, normalized to the results of 2PS-L (blue line).\n\nTable III )\nIIIat different numbers of partitions.\n\n\nfor each p i \u2208 {c2p[v2c[e.first]], c2p[v2c[e.second]]} do 36: score \u2190 s(e.first, e.second, p i )1: int[] d \nvertex degrees (from Phase 1) \n2: int[] vol \ncluster volumes (from Phase 1) \n3: int[] v2c \nmap of vertex id to cluster id (from Phase 1) \n4: int[] c2p \nmap of cluster id to partition id \n5: int[] vol p \nsum of volumes of clusters per partition \n6: int[][] v2p \nvertex id to partition id replication bit matrix \n7: procedure STREAMINGPARTITIONING \n8: \nmapClustersToPartitions() \n9: \nprepartitionEdges() \n10: \npartitionRemainingEdges() \n11: procedure MAPCLUSTERSTOPARTITIONS \n12: \nsort clusters by volume (descending) \n13: \nfor each cluster c do (from largest to smallest) \n14: \ntarget p \u2190 arg min p i \u2208P vol p[p i ] \n15: \nc2p[c] \u2190 target p \n16: procedure PREPARTITIONEDGES \n17: \nfor each e \u2208 edge stream do \n18: \nc 1 \u2190 v2c[e.first] \n19: \nc 2 \u2190 v2c[e.sec] \n20: \nif c 1 = c 2 OR c2p[c 1] = c2p[c 2] then \n21: \ntarget p \u2190 c2p[c 1] \n22: \nif -target p-> \u03b1  *  \n\n|E| \n\nk then \n23: \ntarget p is determined via scoring \n24: \nv2p[e.first][target p] \u2190 true \n25: \nv2p[e.sec][target p] \u2190 true \n26: \noutput: e assigned to target p \n27: procedure PARTITIONREMAININGEDGES \n28: \nfor each e \u2208 edge stream do \n29: \nc 1 \u2190 v2c[e.first] \n30: \nc 2 \u2190 v2c[e.sec] \n31: \nif c 1 = c 2 OR c2p[c 1] = c2p[c 2] then \n32: \ncontinue \nskip pre-partitioned edge \n33: \nbestScore \u2190 0 \n34: \ntarget p \u2190 NULL \n35: \nscoring function \n37: \nif score > bestScore then \n38: \nbestScore \u2190 score \n39: \ntarget p \u2190 p i \n40: \nif -target p-> \u03b1  *  \n\n|E| \n\nk then \ndegree-based hashing \n41: \ntarget p \u2190 hash(arg max v\u2208{e.first,e.second} d[v]) \n\n42: \nv2p[e.first][target p] \u2190 true \n43: \nv2p[e.sec][target p] \u2190 true \n44: \n\n\nTABLE I COMPARISON\nIOF TIME COMPLEXITY.Name \nType \nSpace Complexity \n2PS-L \nStateful Out-of-Core O(|V |  *  k) \n\nHDRF \nStateful Streaming \nO(|V |  *  k) \nADWISE \nStateful Streaming \nO(|V | * k +b) with b = buffer size \n\nDBH \nStateless Streaming \nO(|V |) \nGrid \nStateless Streaming \nO(1) \n\n-\nIn-memory \n\u2265 O(|E|) \n\n\n\nTABLE II COMPARISON\nIIOF SPACE COMPLEXITY.\n\nTABLE III REAL\nIII-WORLD GRAPH DATASETS. SIZE REFERS TO THE GRAPH REPRESENTATION AS BINARY EDGE LIST WITH 32-BIT VERTEX IDS.\n\nTABLE IV PARTITIONING\nIVTIME AND GRAPH PROCESSING TIME (IN SECONDS).\n\nTABLE V PARTITIONING\nVTIME USING DIFFERENT STORAGE DEVICES.\nMETIS figures: http://glaros.dtc.umn.edu/gkhome/node/419\n\nGraphx: Graph processing in a distributed dataflow framework. J E Gonzalez, R S Xin, A Dave, D Crankshaw, M J Franklin, I Stoica, 11th USENIX Symposium on Operating Systems Design and Implementation. Broomfield, COUSENIX AssociationJ. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J. Franklin, and I. Stoica, \"Graphx: Graph processing in a distributed dataflow framework,\" in 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14). Broomfield, CO: USENIX Association, 2014, pp. 599-613.\n\nPowergraph: Distributed graph-parallel computation on natural graphs. J E Gonzalez, Y Low, H Gu, D Bickson, C Guestrin, 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12). Hollywood, CAUSENIXJ. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin, \"Power- graph: Distributed graph-parallel computation on natural graphs,\" in 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12). Hollywood, CA: USENIX, 2012, pp. 17-30.\n\nPregel: A system for large-scale graph processing. G Malewicz, M H Austern, A J Bik, J C Dehnert, I Horn, N Leiser, G Czajkowski, Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '10. the 2010 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '10New York, NY, USAACMG. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser, and G. Czajkowski, \"Pregel: A system for large-scale graph processing,\" in Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '10. New York, NY, USA: ACM, 2010, pp. 135-146.\n\nApache Giraph. N N , N.N., \"Apache Giraph.\" [Online]. Available: https://giraph.apache.org/\n\nDistributed graphlab: A framework for machine learning and data mining in the cloud. Y Low, D Bickson, J Gonzalez, C Guestrin, A Kyrola, J M Hellerstein, Proc. VLDB Endow. 58Y. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and J. M. Hellerstein, \"Distributed graphlab: A framework for machine learning and data mining in the cloud,\" Proc. VLDB Endow., vol. 5, no. 8, p. 716-727, Apr. 2012.\n\nA programmatic introduction to neo4j. J Webber, Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity, ser. SPLASH '12. the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity, ser. SPLASH '12New York, NY, USAACMJ. Webber, \"A programmatic introduction to neo4j,\" in Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity, ser. SPLASH '12. New York, NY, USA: ACM, 2012, p. 217-218.\n\nDeep graph library. N N , 2021N.N., \"Deep graph library,\" https://www.dgl.ai/, 2021.\n\nImproving the accuracy, scalability, and performance of graph neural networks with roc. Z Jia, S Lin, M Gao, M Zaharia, A Aiken, Proceedings of Machine Learning and Systems. I. Dhillon, D. Papailiopoulos, and V. SzeMachine Learning and Systems2Z. Jia, S. Lin, M. Gao, M. Zaharia, and A. Aiken, \"Improving the accuracy, scalability, and performance of graph neural networks with roc,\" in Proceedings of Machine Learning and Systems, I. Dhillon, D. Papailiopoulos, and V. Sze, Eds., vol. 2, 2020, pp. 187-198.\n\nBalanced graph edge partition. F Bourse, M Lelarge, M Vojnovic, Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '14. the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '14New York, NY, USAACMF. Bourse, M. Lelarge, and M. Vojnovic, \"Balanced graph edge parti- tion,\" in Proceedings of the 20th ACM SIGKDD International Confer- ence on Knowledge Discovery and Data Mining, ser. KDD '14. New York, NY, USA: ACM, 2014, pp. 1456-1465.\n\nGraph edge partitioning via neighborhood heuristic. C Zhang, F Wei, Q Liu, Z G Tang, Z Li, Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '17. the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '17New York, NY, USAACMC. Zhang, F. Wei, Q. Liu, Z. G. Tang, and Z. Li, \"Graph edge partitioning via neighborhood heuristic,\" in Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '17. New York, NY, USA: ACM, 2017, pp. 605-614.\n\nA fast and high quality multilevel scheme for partitioning irregular graphs. G Karypis, V Kumar, SIAM J. Sci. Comput. 201G. Karypis and V. Kumar, \"A fast and high quality multilevel scheme for partitioning irregular graphs,\" SIAM J. Sci. Comput., vol. 20, no. 1, pp. 359-392, Dec. 1998.\n\nScalable edge partitioning. S Schlag, C Schulz, D Seemaier, D Strash, 2019 Proceedings of the Twenty-First Workshop on Algorithm Engineering and Experiments (ALENEX). SIAM. S. Schlag, C. Schulz, D. Seemaier, and D. Strash, \"Scalable edge partitioning,\" in 2019 Proceedings of the Twenty-First Workshop on Algorithm Engineering and Experiments (ALENEX). SIAM, 2019, pp. 211-225.\n\nA scalable distributed graph partitioner. D Margo, M Seltzer, Proc. VLDB Endow. 812D. Margo and M. Seltzer, \"A scalable distributed graph partitioner,\" Proc. VLDB Endow., vol. 8, no. 12, pp. 1478-1489, Aug. 2015.\n\nDistributed edge partitioning for trillion-edge graphs. M Hanai, T Suzumura, W J Tan, E Liu, G Theodoropoulos, W Cai, Proc. VLDB Endow. 1213M. Hanai, T. Suzumura, W. J. Tan, E. Liu, G. Theodoropoulos, and W. Cai, \"Distributed edge partitioning for trillion-edge graphs,\" Proc. VLDB Endow., vol. 12, no. 13, p. 2379-2392, Sep. 2019.\n\nStreaming graph partitioning for large distributed graphs. I Stanton, G Kliot, Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '12. the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '12New York, NY, USAACMI. Stanton and G. Kliot, \"Streaming graph partitioning for large dis- tributed graphs,\" in Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '12. New York, NY, USA: ACM, 2012, pp. 1222-1230.\n\nDistributed power-law graph computing: Theoretical and empirical analysis. C Xie, L Yan, W.-J Li, Z Zhang, Advances in Neural Information Processing Systems. 27C. Xie, L. Yan, W.-J. Li, and Z. Zhang, \"Distributed power-law graph computing: Theoretical and empirical analysis,\" in Advances in Neural Information Processing Systems 27, 2014, pp. 1673-1681.\n\nHdrf: Stream-based partitioning for power-law graphs. F Petroni, L Querzoni, K Daudjee, S Kamali, G Iacoboni, Proceedings of the 24th ACM International on Conference on Information and Knowledge Management, ser. CIKM '15. the 24th ACM International on Conference on Information and Knowledge Management, ser. CIKM '15New York, NY, USAACMF. Petroni, L. Querzoni, K. Daudjee, S. Kamali, and G. Iacoboni, \"Hdrf: Stream-based partitioning for power-law graphs,\" in Proceedings of the 24th ACM International on Conference on Information and Knowledge Management, ser. CIKM '15. New York, NY, USA: ACM, 2015, pp. 243-252.\n\nAdwise: Adaptive window-based streaming edge partitioning for high-speed graph processing. C Mayer, R Mayer, M A Tariq, H Geppert, L Laich, L Rieger, K Rothermel, 2018 IEEE 38th International Conference on Distributed Computing Systems (ICDCS). C. Mayer, R. Mayer, M. A. Tariq, H. Geppert, L. Laich, L. Rieger, and K. Rothermel, \"Adwise: Adaptive window-based streaming edge partitioning for high-speed graph processing,\" in 2018 IEEE 38th International Conference on Distributed Computing Systems (ICDCS), July 2018, pp. 685-695.\n\nHybrid edge partitioner: Partitioning large power-law graphs under memory constraints. R Mayer, H.-A Jacobsen, Proceedings of the 2021 International Conference on Management of Data, ser. SIGMOD/PODS '21. the 2021 International Conference on Management of Data, ser. SIGMOD/PODS '21New York, NY, USAAssociation for Computing MachineryR. Mayer and H.-A. Jacobsen, \"Hybrid edge partitioner: Partitioning large power-law graphs under memory constraints,\" in Proceedings of the 2021 International Conference on Management of Data, ser. SIGMOD/PODS '21. New York, NY, USA: Association for Computing Machinery, 2021, p. 1289-1302.\n\nExperimental analysis of streaming algorithms for graph partitioning. A Pacaci, M T \u00d6zsu, Proceedings of the 2019 International Conference on Management of Data, ser. SIGMOD '19. the 2019 International Conference on Management of Data, ser. SIGMOD '19New York, NY, USAACMA. Pacaci and M. T.\u00d6zsu, \"Experimental analysis of streaming algo- rithms for graph partitioning,\" in Proceedings of the 2019 International Conference on Management of Data, ser. SIGMOD '19. New York, NY, USA: ACM, 2019, pp. 1375-1392.\n\nStreaming graph partitioning: An experimental study. Z Abbas, V Kalavri, P Carbone, V Vlassov, Proc. VLDB Endow. VLDB Endow11Z. Abbas, V. Kalavri, P. Carbone, and V. Vlassov, \"Streaming graph partitioning: An experimental study,\" Proc. VLDB Endow., vol. 11, no. 11, pp. 1590-1603, Jul. 2018.\n\nAn experimental comparison of partitioning strategies in distributed graph processing. S Verma, L M Leslie, Y Shin, I Gupta, Proc. VLDB Endow. 105S. Verma, L. M. Leslie, Y. Shin, and I. Gupta, \"An experimental comparison of partitioning strategies in distributed graph processing,\" Proc. VLDB Endow., vol. 10, no. 5, pp. 493-504, Jan. 2017.\n\nThe future is big graphs: A community view on graph processing systems. S Sakr, A Bonifati, H Voigt, A Iosup, K Ammar, R Angles, W Aref, M Arenas, M Besta, P A Boncz, K Daudjee, E D Valle, S Dumbrava, O Hartig, B Haslhofer, T Hegeman, J Hidders, K Hose, A Iamnitchi, V Kalavri, H Kapp, W Martens, M T \u00d6zsu, E Peukert, S Plantikow, M Ragab, M R Ripeanu, S Salihoglu, C Schulz, P Selmer, J F Sequeda, J Shinavier, G Sz\u00e1rnyas, R Tommasini, A Tumeo, A Uta, A L Varbanescu, H.-Y Wu, N Yakovets, D Yan, E Yoneki, Commun. ACM. 649S. Sakr, A. Bonifati, H. Voigt, A. Iosup, K. Ammar, R. Angles, W. Aref, M. Arenas, M. Besta, P. A. Boncz, K. Daudjee, E. D. Valle, S. Dumbrava, O. Hartig, B. Haslhofer, T. Hegeman, J. Hidders, K. Hose, A. Iamnitchi, V. Kalavri, H. Kapp, W. Martens, M. T.\u00d6zsu, E. Peukert, S. Plantikow, M. Ragab, M. R. Ripeanu, S. Salihoglu, C. Schulz, P. Selmer, J. F. Sequeda, J. Shinavier, G. Sz\u00e1rnyas, R. Tommasini, A. Tumeo, A. Uta, A. L. Varbanescu, H.-Y. Wu, N. Yakovets, D. Yan, and E. Yoneki, \"The future is big graphs: A community view on graph processing systems,\" Commun. ACM, vol. 64, no. 9, p. 62-71, Aug. 2021.\n\nP3: Distributed deep graph learning at scale. S Gandhi, A P Iyer, 15th {USENIX} Symposium on Operating Systems Design and Implementation. S. Gandhi and A. P. Iyer, \"P3: Distributed deep graph learning at scale,\" in 15th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 21), 2021, pp. 551-568.\n\nModularity and community structure in networks. M E J Newman, Proceedings of the National Academy of Sciences. 10323M. E. J. Newman, \"Modularity and community structure in networks,\" Proceedings of the National Academy of Sciences, vol. 103, no. 23, pp. 8577-8582, 2006.\n\nCommunity detection in graphs. S Fortunato, Physics Reports. 4863S. Fortunato, \"Community detection in graphs,\" Physics Reports, vol. 486, no. 3, pp. 75 -174, 2010.\n\nA streaming algorithm for graph clustering. A Hollocou, J Maudet, T Bonald, M Lelarge, NIPS 2017-Wokshop on Advances in Modeling and Learning Interactions from Complex Data. A. Hollocou, J. Maudet, T. Bonald, and M. Lelarge, \"A streaming algorithm for graph clustering,\" in NIPS 2017-Wokshop on Advances in Modeling and Learning Interactions from Complex Data, 2017, pp. 1-10.\n\nRestreaming graph partitioning: Simple versatile algorithms for advanced balancing. J Nishimura, J Ugander, Proceedings of the 19th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '13. the 19th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '13New York, NY, USAACMJ. Nishimura and J. Ugander, \"Restreaming graph partitioning: Simple versatile algorithms for advanced balancing,\" in Proceedings of the 19th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ser. KDD '13. New York, NY, USA: ACM, 2013, pp. 1106-1114.\n\nBounds on multiprocessing timing anomalies. R L Graham, SIAM journal on Applied Mathematics. 172R. L. Graham, \"Bounds on multiprocessing timing anomalies,\" SIAM journal on Applied Mathematics, vol. 17, no. 2, pp. 416-429, 1969.\n\nNp-complete scheduling problems. J D Ullman, J. Comput. Syst. Sci. 103J. D. Ullman, \"Np-complete scheduling problems,\" J. Comput. Syst. Sci., vol. 10, no. 3, pp. 384-393, Jun. 1975.\n\nDefining and evaluating network communities based on ground-truth. J Yang, J Leskovec, 2012 IEEE 12th International Conference on Data Mining. J. Yang and J. Leskovec, \"Defining and evaluating network communities based on ground-truth,\" in 2012 IEEE 12th International Conference on Data Mining, Dec 2012, pp. 745-754.\n\nSNAP Datasets: Stanford large network dataset collection. J Leskovec, A Krevl, J. Leskovec and A. Krevl, \"SNAP Datasets: Stanford large network dataset collection,\" http://snap.stanford.edu/data, Jun. 2014.\n\nBUbiNG: Massive crawling for the masses. P Boldi, A Marino, M Santini, S Vigna, Proceedings of the Companion Publication of the 23rd International Conference on World Wide Web. the Companion Publication of the 23rd International Conference on World Wide WebACMP. Boldi, A. Marino, M. Santini, and S. Vigna, \"BUbiNG: Massive crawling for the masses,\" in Proceedings of the Companion Publication of the 23rd International Conference on World Wide Web. ACM, 2014, pp. 227-228.\n\nLayered label propagation: A multiresolution coordinate-free ordering for compressing social networks. P Boldi, M Rosa, M Santini, S Vigna, Proceedings of the 20th international conference on World Wide Web. the 20th international conference on World Wide WebACM PressP. Boldi, M. Rosa, M. Santini, and S. Vigna, \"Layered label propaga- tion: A multiresolution coordinate-free ordering for compressing social networks,\" in Proceedings of the 20th international conference on World Wide Web. ACM Press, 2011, pp. 587-596.\n\nThe WebGraph framework I: Compression techniques. P Boldi, S Vigna, Proc. of the Thirteenth International World Wide Web Conference. of the Thirteenth International World Wide Web ConferenceManhattan, USAACMP. Boldi and S. Vigna, \"The WebGraph framework I: Compression techniques,\" in Proc. of the Thirteenth International World Wide Web Conference (WWW 2004). Manhattan, USA: ACM, 2004, pp. 595- 601.\n\nWDC graph. N N , N.N., \"WDC graph.\" [Online]. Available: http://webdatacommons.org/ hyperlinkgraph/\n\nGraphbuilder: Scalable graph etl framework. N Jain, G Liao, T L Willke, First International Workshop on Graph Data Management Experiences and Systems, ser. GRADES '13. New York, NY, USAACM4N. Jain, G. Liao, and T. L. Willke, \"Graphbuilder: Scalable graph etl framework,\" in First International Workshop on Graph Data Manage- ment Experiences and Systems, ser. GRADES '13. New York, NY, USA: ACM, 2013, pp. 4:1-4:6.\n\nSpinner: Scalable graph partitioning in the cloud. C Martella, D Logothetis, A Loukas, G Siganos, 2017 IEEE 33rd International Conference on Data Engineering (ICDE). C. Martella, D. Logothetis, A. Loukas, and G. Siganos, \"Spinner: Scal- able graph partitioning in the cloud,\" in 2017 IEEE 33rd International Conference on Data Engineering (ICDE), April 2017, pp. 1083-1094.\n\nParallel multilevel k-way partitioning scheme for irregular graphs. G Karypis, V Kumar, Proceedings of the 1996 ACM/IEEE Conference on Supercomputing, ser. Supercomputing '96. the 1996 ACM/IEEE Conference on Supercomputing, ser. Supercomputing '96USAIEEE Computer Society35G. Karypis and V. Kumar, \"Parallel multilevel k-way partitioning scheme for irregular graphs,\" in Proceedings of the 1996 ACM/IEEE Conference on Supercomputing, ser. Supercomputing '96. USA: IEEE Computer Society, 1996, p. 35-es.\n\nPartitioning trillion-edge graphs in minutes. G M Slota, S Rajamanickam, K Devine, K Madduri, 2017 IEEE International Parallel and Distributed Processing Symposium (IPDPS). G. M. Slota, S. Rajamanickam, K. Devine, and K. Madduri, \"Partitioning trillion-edge graphs in minutes,\" in 2017 IEEE International Parallel and Distributed Processing Symposium (IPDPS), May 2017, pp. 646-655.\n\nKonect: The koblenz network collection. J Kunegis, Proceedings of the 22Nd International Conference on World Wide Web, ser. WWW '13 Companion. the 22Nd International Conference on World Wide Web, ser. WWW '13 CompanionNew York, NY, USAACMJ. Kunegis, \"Konect: The koblenz network collection,\" in Proceedings of the 22Nd International Conference on World Wide Web, ser. WWW '13 Companion. New York, NY, USA: ACM, 2013, pp. 1343-1350.\n\nThe Linux Kernel documentation. last Accessed 02/2022. [Online\"The Linux Kernel documentation,\" last Accessed 02/2022. [On- line]. Available: https://www.kernel.org/doc/html/latest/admin-guide/ mm/concepts.html#page-cache\n\nA Bulu\u00e7, H Meyerhenke, I Safro, P Sanders, C Schulz, Recent Advances in Graph Partitioning. ChamSpringer International PublishingA. Bulu\u00e7, H. Meyerhenke, I. Safro, P. Sanders, and C. Schulz, Recent Advances in Graph Partitioning. Cham: Springer International Pub- lishing, 2016, pp. 117-158.\n\nCola: Optimizing stream processing applications via graph partitioning. R Khandekar, K Hildrum, S Parekh, D Rajan, J Wolf, K.-L Wu, H Andrade, B Gedik, Middleware 2009, J. M. Bacon and B. F. CooperSpringerBerlin, Heidelberg; Berlin HeidelbergR. Khandekar, K. Hildrum, S. Parekh, D. Rajan, J. Wolf, K.-L. Wu, H. Andrade, and B. Gedik, \"Cola: Optimizing stream processing appli- cations via graph partitioning,\" in Middleware 2009, J. M. Bacon and B. F. Cooper, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2009, pp. 308-327.\n\nScotch: A software package for static mapping by dual recursive bipartitioning of process and architecture graphs. F Pellegrini, J Roman, Proceedings of the International Conference and Exhibition on High-Performance Computing and Networking, ser. HPCN Europe. the International Conference and Exhibition on High-Performance Computing and Networking, ser. HPCN EuropeBerlin, HeidelbergSpringer-VerlagF. Pellegrini and J. Roman, \"Scotch: A software package for static mapping by dual recursive bipartitioning of process and architecture graphs,\" in Proceedings of the International Conference and Exhibition on High-Performance Computing and Networking, ser. HPCN Europe 1996. Berlin, Heidelberg: Springer-Verlag, 1996, p. 493-498.\n\nLocal graph edge partitioning with a twostage heuristic method. S Ji, C Bu, L Li, X Wu, 2019 IEEE 39th International Conference on Distributed Computing Systems (ICDCS). S. Ji, C. Bu, L. Li, and X. Wu, \"Local graph edge partitioning with a two- stage heuristic method,\" in 2019 IEEE 39th International Conference on Distributed Computing Systems (ICDCS), 2019, pp. 228-237.\n\nFennel: Streaming graph partitioning for massive scale graphs. C Tsourakakis, C Gkantsidis, B Radunovic, M Vojnovic, Proceedings of the 7th ACM International Conference on Web Search and Data Mining, ser. WSDM '14. the 7th ACM International Conference on Web Search and Data Mining, ser. WSDM '14New York, NY, USAACMC. Tsourakakis, C. Gkantsidis, B. Radunovic, and M. Vojnovic, \"Fennel: Streaming graph partitioning for massive scale graphs,\" in Proceedings of the 7th ACM International Conference on Web Search and Data Mining, ser. WSDM '14. New York, NY, USA: ACM, 2014, pp. 333- 342.\n\nPrioritized restreaming algorithms for balanced graph partitioning. A Awadelkarim, J Ugander, Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. the 26th ACM SIGKDD International Conference on Knowledge Discovery and Data MiningNew York, NY, USAACMA. Awadelkarim and J. Ugander, \"Prioritized restreaming algorithms for balanced graph partitioning,\" in Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. New York, NY, USA: ACM, 2020, p. 1877-1887.\n\nRbsep: a reassignment and buffer based streaming edge partitioning approach. M Taimouri, H Saadatfar, Journal of Big Data. 61M. Taimouri and H. Saadatfar, \"Rbsep: a reassignment and buffer based streaming edge partitioning approach,\" Journal of Big Data, vol. 6, no. 1, pp. 1-17, 2019.\n\nQuasi-streaming graph partitioning: A game theoretical approach. Q.-S Hua, Y Li, D Yu, H Jin, IEEE Transactions on Parallel and Distributed Systems. 307Q.-S. Hua, Y. Li, D. Yu, and H. Jin, \"Quasi-streaming graph partitioning: A game theoretical approach,\" IEEE Transactions on Parallel and Distributed Systems, vol. 30, no. 7, pp. 1643-1656, 2019.\n\nIncrementalization of graph partitioning algorithms. W Fan, M Liu, C Tian, R Xu, J Zhou, Proc. VLDB Endow. 138W. Fan, M. Liu, C. Tian, R. Xu, and J. Zhou, \"Incrementalization of graph partitioning algorithms,\" Proc. VLDB Endow., vol. 13, no. 8, 2020.\n\nGroup reassignment for dynamic edge partitioning. H Li, H Yuan, J Huang, J Cui, X Ma, S Wang, J Yoo, P S Yu, IEEE Transactions on Parallel and Distributed Systems. 3210H. Li, H. Yuan, J. Huang, J. Cui, X. Ma, S. Wang, J. Yoo, and P. S. Yu, \"Group reassignment for dynamic edge partitioning,\" IEEE Transactions on Parallel and Distributed Systems, vol. 32, no. 10, pp. 2477-2490, 2021.\n\nCusp: A customizable streaming edge partitioner for distributed graph analytics. L Hoang, R Dathathri, G Gill, K Pingali, 2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS). L. Hoang, R. Dathathri, G. Gill, and K. Pingali, \"Cusp: A customizable streaming edge partitioner for distributed graph analytics,\" in 2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS), May 2019, pp. 439-450.\n\nApplication driven graph partitioning. W Fan, R Jin, M Liu, P Lu, X Luo, R Xu, Q Yin, W Yu, J Zhou, 10.1145/3318464.3389745Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '20. the 2020 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '20New York, NY, USAAssociation for Computing MachineryW. Fan, R. Jin, M. Liu, P. Lu, X. Luo, R. Xu, Q. Yin, W. Yu, and J. Zhou, \"Application driven graph partitioning,\" in Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data, ser. SIGMOD '20. New York, NY, USA: Association for Computing Machinery, 2020, p. 1765-1779. [Online]. Available: https://doi.org/10.1145/3318464.3389745\n\nApproximating small balanced vertex separators in almost linear time. S Brandt, R Wattenhofer, Algorithms and Data Structures. F. Ellen, A. Kolokolova, and J.-R. SackSpringer International Publishing[55] S. Brandt and R. Wattenhofer, \"Approximating small balanced vertex separators in almost linear time,\" in Algorithms and Data Structures, F. Ellen, A. Kolokolova, and J.-R. Sack, Eds. Cham: Springer International Publishing, 2017, pp. 229-240.\n\nNear linear time algorithm to detect community structures in large-scale networks. U N Raghavan, R Albert, S Kumara, Physical review E. 76336106U. N. Raghavan, R. Albert, and S. Kumara, \"Near linear time algorithm to detect community structures in large-scale networks,\" Physical review E, vol. 76, no. 3, p. 036106, 2007.\n\nFast algorithm for modularity-based graph clustering. H Shiokawa, Y Fujiwara, M Onizuka, Twenty-Seventh AAAI Conference on Artificial Intelligence. H. Shiokawa, Y. Fujiwara, and M. Onizuka, \"Fast algorithm for modularity-based graph clustering,\" in Twenty-Seventh AAAI Conference on Artificial Intelligence, 2013.\n\nPowerlyra: Differentiated graph computation and partitioning on skewed graphs. R Chen, J Shi, Y Chen, H Chen, Proceedings of the Tenth European Conference on Computer Systems, ser. EuroSys '15. the Tenth European Conference on Computer Systems, ser. EuroSys '15New York, NY, USAACM115R. Chen, J. Shi, Y. Chen, and H. Chen, \"Powerlyra: Differentiated graph computation and partitioning on skewed graphs,\" in Proceedings of the Tenth European Conference on Computer Systems, ser. EuroSys '15. New York, NY, USA: ACM, 2015, pp. 1:1-1:15.\n\nGemini: A computationcentric distributed graph processing system. X Zhu, W Chen, W Zheng, X Ma, 12th USENIX Symposium on Operating Systems Design and Implementation. 16X. Zhu, W. Chen, W. Zheng, and X. Ma, \"Gemini: A computation- centric distributed graph processing system,\" in 12th USENIX Sym- posium on Operating Systems Design and Implementation (OSDI 16).\n\n. G A Savannah, USENIX AssociationSavannah, GA: USENIX Association, Nov. 2016, pp. 301-316.\n\nGraphchi: Large-scale graph computation on just a PC. A Kyrola, G Blelloch, C Guestrin, Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12). Hollywood, CAUSENIXA. Kyrola, G. Blelloch, and C. Guestrin, \"Graphchi: Large-scale graph computation on just a PC,\" in Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12). Hollywood, CA: USENIX, 2012, pp. 31-46.\n\nGridgraph: Large-scale graph processing on a single machine using 2-level hierarchical partitioning. X Zhu, W Han, W Chen, 2015 USENIX Annual Technical Conference (USENIX ATC 15). Santa Clara, CAUSENIX AssociationX. Zhu, W. Han, and W. Chen, \"Gridgraph: Large-scale graph processing on a single machine using 2-level hierarchical partitioning,\" in 2015 USENIX Annual Technical Conference (USENIX ATC 15). Santa Clara, CA: USENIX Association, Jul. 2015, pp. 375-386.\n\nMosaic: Processing a trillion-edge graph on a single machine. S Maass, C Min, S Kashyap, W Kang, M Kumar, T Kim, Proceedings of the Twelfth European Conference on Computer Systems, ser. EuroSys '17. the Twelfth European Conference on Computer Systems, ser. EuroSys '17New York, NY, USAACMS. Maass, C. Min, S. Kashyap, W. Kang, M. Kumar, and T. Kim, \"Mosaic: Processing a trillion-edge graph on a single machine,\" in Proceedings of the Twelfth European Conference on Computer Systems, ser. EuroSys '17. New York, NY, USA: ACM, 2017, pp. 527-543.\n\nStreaming min-max hypergraph partitioning. D Alistarh, J Iglesias, M Vojnovic, Proceedings of the 28th International Conference on Neural Information Processing Systems. the 28th International Conference on Neural Information Processing SystemsCambridge, MA, USAMIT Press2ser. NIPS'15D. Alistarh, J. Iglesias, and M. Vojnovic, \"Streaming min-max hyper- graph partitioning,\" in Proceedings of the 28th International Conference on Neural Information Processing Systems -Volume 2, ser. NIPS'15. Cambridge, MA, USA: MIT Press, 2015, pp. 1900-1908.\n\nParallel hypergraph partitioning for scientific computing. K D Devine, E G Boman, R T Heaphy, R H Bisseling, U V Catalyurek, Proceedings 20th IEEE International Parallel Distributed Processing Symposium. 20th IEEE International Parallel Distributed Processing Symposium10K. D. Devine, E. G. Boman, R. T. Heaphy, R. H. Bisseling, and U. V. Catalyurek, \"Parallel hypergraph partitioning for scientific computing,\" in Proceedings 20th IEEE International Parallel Distributed Processing Symposium, April 2006, pp. 10 pp.-.\n\nParallel multilevel algorithms for hypergraph partitioning. A Trifunovi\u0107, W J Knottenbelt, Journal of Parallel and Distributed Computing. 685A. Trifunovi\u0107 and W. J. Knottenbelt, \"Parallel multilevel algorithms for hypergraph partitioning,\" Journal of Parallel and Distributed Comput- ing, vol. 68, no. 5, pp. 563 -581, 2008.\n\nSocial hash partitioner: A scalable distributed hypergraph partitioner. I Kabiljo, B Karrer, M Pundir, S Pupyrev, A Shalita, Proc. VLDB Endow. 1011I. Kabiljo, B. Karrer, M. Pundir, S. Pupyrev, and A. Shalita, \"Social hash partitioner: A scalable distributed hypergraph partitioner,\" Proc. VLDB Endow., vol. 10, no. 11, pp. 1418-1429, Aug. 2017.\n\nHype: Massive hypergraph partitioning with neighborhood expansion. C Mayer, R Mayer, S Bhowmik, L Epple, K Rothermel, 2018 IEEE International Conference on Big Data (Big Data). C. Mayer, R. Mayer, S. Bhowmik, L. Epple, and K. Rothermel, \"Hype: Massive hypergraph partitioning with neighborhood expansion,\" in 2018 IEEE International Conference on Big Data (Big Data), Dec 2018, pp. 458-467.\n", "annotations": {"author": "[{\"end\":169,\"start\":52},{\"end\":293,\"start\":170},{\"end\":425,\"start\":294}]", "publisher": null, "author_last_name": "[{\"end\":63,\"start\":58},{\"end\":184,\"start\":176},{\"end\":312,\"start\":304}]", "author_first_name": "[{\"end\":57,\"start\":52},{\"end\":175,\"start\":170},{\"end\":303,\"start\":294}]", "author_affiliation": "[{\"end\":168,\"start\":84},{\"end\":292,\"start\":208},{\"end\":424,\"start\":340}]", "title": "[{\"end\":49,\"start\":1},{\"end\":474,\"start\":426}]", "venue": null, "abstract": null, "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":703,\"start\":700},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":719,\"start\":716},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":731,\"start\":728},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":747,\"start\":744},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":804,\"start\":801},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":848,\"start\":845},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":943,\"start\":940},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":955,\"start\":952},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":1840,\"start\":1837},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":1961,\"start\":1957},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":2086,\"start\":2082},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":2092,\"start\":2088},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":2098,\"start\":2094},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2104,\"start\":2100},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":2110,\"start\":2106},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":2234,\"start\":2230},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":2240,\"start\":2236},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":2246,\"start\":2242},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":2252,\"start\":2248},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":2258,\"start\":2254},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2873,\"start\":2869},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3956,\"start\":3952},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3962,\"start\":3958},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":3968,\"start\":3964},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":4647,\"start\":4643},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5096,\"start\":5093},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5102,\"start\":5098},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":5651,\"start\":5647},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":9343,\"start\":9339},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":9348,\"start\":9345},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":10505,\"start\":10501},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":10511,\"start\":10507},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":10517,\"start\":10513},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":11424,\"start\":11420},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":11810,\"start\":11806},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":11816,\"start\":11812},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":11938,\"start\":11934},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":12074,\"start\":12070},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":12637,\"start\":12633},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":12643,\"start\":12639},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":12649,\"start\":12645},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":15235,\"start\":15231},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":15241,\"start\":15237},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":15294,\"start\":15290},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":15308,\"start\":15305},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":15673,\"start\":15669},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":17022,\"start\":17018},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":19146,\"start\":19142},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":19943,\"start\":19939},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":19947,\"start\":19943},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":19951,\"start\":19947},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":19955,\"start\":19951},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":19959,\"start\":19955},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":20174,\"start\":20170},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":20178,\"start\":20174},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":20182,\"start\":20178},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":20186,\"start\":20182},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":20190,\"start\":20186},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":20194,\"start\":20190},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":20198,\"start\":20194},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":20756,\"start\":20752},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":21660,\"start\":21656},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":21703,\"start\":21699},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":22655,\"start\":22651},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":23173,\"start\":23169},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":23263,\"start\":23259},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":23328,\"start\":23327},{\"end\":25637,\"start\":25630},{\"end\":25995,\"start\":25988},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":26207,\"start\":26203},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":31144,\"start\":31140},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":31150,\"start\":31146},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":31211,\"start\":31207},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":31217,\"start\":31213},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31223,\"start\":31219},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":31229,\"start\":31225},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":31235,\"start\":31231},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":31249,\"start\":31245},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":31255,\"start\":31251},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":31261,\"start\":31257},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":31274,\"start\":31270},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":31621,\"start\":31617},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":31631,\"start\":31627},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":31705,\"start\":31701},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":31723,\"start\":31719},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":32184,\"start\":32181},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":32195,\"start\":32191},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":32225,\"start\":32221},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":32427,\"start\":32423},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":32437,\"start\":32433},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":32452,\"start\":32448},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":32658,\"start\":32654},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":32802,\"start\":32798},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":32817,\"start\":32813},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":32832,\"start\":32828},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":32848,\"start\":32844},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":32947,\"start\":32943},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33038,\"start\":33034},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":33205,\"start\":33201},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":39317,\"start\":39313},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":39663,\"start\":39659},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":41645,\"start\":41641},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":41999,\"start\":41995},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":44054,\"start\":44050},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":44878,\"start\":44874},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":44968,\"start\":44964},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":45022,\"start\":45018},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":45084,\"start\":45081},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":45089,\"start\":45086},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":45094,\"start\":45091},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":45099,\"start\":45096},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":45469,\"start\":45465},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":45481,\"start\":45477},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":45495,\"start\":45491},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":46013,\"start\":46009},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":46034,\"start\":46030},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":46148,\"start\":46144},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":46154,\"start\":46150},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":46326,\"start\":46322},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":46583,\"start\":46579},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":46671,\"start\":46667},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":46894,\"start\":46890},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":47120,\"start\":47116},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":47134,\"start\":47130},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":47384,\"start\":47381},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":47397,\"start\":47393},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":47636,\"start\":47632},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":47954,\"start\":47950},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":48093,\"start\":48089},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":48650,\"start\":48646},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":48948,\"start\":48944},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":48954,\"start\":48950},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":48960,\"start\":48956},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":49499,\"start\":49495},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":49505,\"start\":49501},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":49511,\"start\":49507},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":50271,\"start\":50267},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":50476,\"start\":50472},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":50581,\"start\":50577},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":50981,\"start\":50977},{\"end\":51357,\"start\":51330},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":51669,\"start\":51665},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":51701,\"start\":51697},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":51748,\"start\":51744},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":52023,\"start\":52019},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":52275,\"start\":52271},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":52475,\"start\":52471},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":52491,\"start\":52487},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":52507,\"start\":52503},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":52984,\"start\":52980},{\"attributes\":{\"ref_id\":\"b64\"},\"end\":53021,\"start\":53017},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":53027,\"start\":53023},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":53033,\"start\":53029},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":53039,\"start\":53035}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":57928,\"start\":57716},{\"attributes\":{\"id\":\"fig_3\"},\"end\":58064,\"start\":57929},{\"attributes\":{\"id\":\"fig_4\"},\"end\":58168,\"start\":58065},{\"attributes\":{\"id\":\"fig_7\"},\"end\":58198,\"start\":58169},{\"attributes\":{\"id\":\"fig_8\"},\"end\":58229,\"start\":58199},{\"attributes\":{\"id\":\"fig_9\"},\"end\":58258,\"start\":58230},{\"attributes\":{\"id\":\"fig_10\"},\"end\":58288,\"start\":58259},{\"attributes\":{\"id\":\"fig_11\"},\"end\":58319,\"start\":58289},{\"attributes\":{\"id\":\"fig_12\"},\"end\":58372,\"start\":58320},{\"attributes\":{\"id\":\"fig_13\"},\"end\":58475,\"start\":58373},{\"attributes\":{\"id\":\"fig_14\"},\"end\":58559,\"start\":58476},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":58611,\"start\":58560},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":60289,\"start\":58612},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":60604,\"start\":60290},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":60648,\"start\":60605},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":60774,\"start\":60649},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":60844,\"start\":60775},{\"attributes\":{\"id\":\"tab_13\",\"type\":\"table\"},\"end\":60905,\"start\":60845}]", "paragraph": "[{\"end\":1264,\"start\":495},{\"end\":1962,\"start\":1266},{\"end\":2972,\"start\":1964},{\"end\":4490,\"start\":2974},{\"end\":5794,\"start\":4492},{\"end\":6432,\"start\":5796},{\"end\":9192,\"start\":6434},{\"end\":10154,\"start\":9248},{\"end\":10651,\"start\":10192},{\"end\":11125,\"start\":10686},{\"end\":11498,\"start\":11127},{\"end\":12521,\"start\":11500},{\"end\":13370,\"start\":12523},{\"end\":13980,\"start\":13372},{\"end\":14704,\"start\":13998},{\"end\":15978,\"start\":14706},{\"end\":16846,\"start\":15980},{\"end\":17722,\"start\":16848},{\"end\":18032,\"start\":17724},{\"end\":18059,\"start\":18034},{\"end\":18096,\"start\":18061},{\"end\":18135,\"start\":18098},{\"end\":18168,\"start\":18137},{\"end\":18191,\"start\":18170},{\"end\":20311,\"start\":18193},{\"end\":22017,\"start\":20624},{\"end\":22321,\"start\":22046},{\"end\":22656,\"start\":22323},{\"end\":23149,\"start\":22658},{\"end\":23598,\"start\":23151},{\"end\":24106,\"start\":23600},{\"end\":24407,\"start\":24108},{\"end\":24878,\"start\":24409},{\"end\":25357,\"start\":24880},{\"end\":26547,\"start\":25359},{\"end\":26777,\"start\":26549},{\"end\":27799,\"start\":26965},{\"end\":27806,\"start\":27801},{\"end\":27968,\"start\":27808},{\"end\":29463,\"start\":28018},{\"end\":29648,\"start\":29465},{\"end\":30925,\"start\":29672},{\"end\":31526,\"start\":30944},{\"end\":32335,\"start\":31528},{\"end\":32948,\"start\":32337},{\"end\":33368,\"start\":32950},{\"end\":33479,\"start\":33370},{\"end\":33700,\"start\":33520},{\"end\":34042,\"start\":33702},{\"end\":34418,\"start\":34044},{\"end\":34529,\"start\":34420},{\"end\":35520,\"start\":34531},{\"end\":36256,\"start\":35522},{\"end\":36584,\"start\":36258},{\"end\":37367,\"start\":36630},{\"end\":38256,\"start\":37369},{\"end\":39488,\"start\":38276},{\"end\":39881,\"start\":39522},{\"end\":40947,\"start\":39883},{\"end\":42915,\"start\":40983},{\"end\":43420,\"start\":42917},{\"end\":44789,\"start\":43444},{\"end\":45231,\"start\":44810},{\"end\":46559,\"start\":45233},{\"end\":48831,\"start\":46561},{\"end\":50034,\"start\":48833},{\"end\":51175,\"start\":50036},{\"end\":51593,\"start\":51177},{\"end\":51890,\"start\":51595},{\"end\":52418,\"start\":51892},{\"end\":52747,\"start\":52420},{\"end\":53040,\"start\":52749},{\"end\":53770,\"start\":53061},{\"end\":54650,\"start\":53806},{\"end\":55746,\"start\":54652},{\"end\":56849,\"start\":55748},{\"end\":57539,\"start\":56851},{\"end\":57715,\"start\":57541}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":10191,\"start\":10155},{\"attributes\":{\"id\":\"formula_1\"},\"end\":20623,\"start\":20312},{\"attributes\":{\"id\":\"formula_2\"},\"end\":26964,\"start\":26778}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":29475,\"start\":29468},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":30642,\"start\":30634},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":31003,\"start\":30993},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":41931,\"start\":41922},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":42009,\"start\":42001},{\"attributes\":{\"ref_id\":\"tab_13\"},\"end\":44165,\"start\":44158}]", "section_header": "[{\"end\":493,\"start\":478},{\"end\":9215,\"start\":9195},{\"end\":9246,\"start\":9218},{\"end\":10684,\"start\":10654},{\"end\":13996,\"start\":13983},{\"end\":22044,\"start\":22020},{\"end\":27995,\"start\":27971},{\"end\":28016,\"start\":27998},{\"end\":29670,\"start\":29651},{\"end\":30942,\"start\":30928},{\"end\":33518,\"start\":33482},{\"end\":36628,\"start\":36587},{\"end\":38274,\"start\":38259},{\"end\":39520,\"start\":39491},{\"end\":40981,\"start\":40950},{\"end\":43442,\"start\":43423},{\"end\":44808,\"start\":44792},{\"end\":53059,\"start\":53043},{\"end\":53804,\"start\":53773},{\"end\":57725,\"start\":57717},{\"end\":57938,\"start\":57930},{\"end\":58074,\"start\":58066},{\"end\":58329,\"start\":58321},{\"end\":58382,\"start\":58374},{\"end\":58485,\"start\":58477},{\"end\":58572,\"start\":58561},{\"end\":60309,\"start\":60291},{\"end\":60625,\"start\":60606},{\"end\":60664,\"start\":60650},{\"end\":60797,\"start\":60776},{\"end\":60866,\"start\":60846}]", "table": "[{\"end\":60289,\"start\":58710},{\"end\":60604,\"start\":60330}]", "figure_caption": "[{\"end\":57928,\"start\":57727},{\"end\":58064,\"start\":57940},{\"end\":58168,\"start\":58076},{\"end\":58198,\"start\":58171},{\"end\":58229,\"start\":58201},{\"end\":58258,\"start\":58232},{\"end\":58288,\"start\":58261},{\"end\":58319,\"start\":58291},{\"end\":58372,\"start\":58331},{\"end\":58475,\"start\":58384},{\"end\":58559,\"start\":58487},{\"end\":58611,\"start\":58576},{\"end\":58710,\"start\":58614},{\"end\":60330,\"start\":60311},{\"end\":60648,\"start\":60628},{\"end\":60774,\"start\":60668},{\"end\":60844,\"start\":60800},{\"end\":60905,\"start\":60868}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":4707,\"start\":4699},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":13383,\"start\":13375},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":16185,\"start\":16177},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":22016,\"start\":22003},{\"attributes\":{\"ref_id\":\"fig_12\"},\"end\":34450,\"start\":34442},{\"end\":36641,\"start\":36633},{\"end\":37940,\"start\":37932},{\"end\":38487,\"start\":38479},{\"attributes\":{\"ref_id\":\"fig_13\"},\"end\":38523,\"start\":38515},{\"attributes\":{\"ref_id\":\"fig_14\"},\"end\":39879,\"start\":39871}]", "bib_author_first_name": "[{\"end\":61027,\"start\":61026},{\"end\":61029,\"start\":61028},{\"end\":61041,\"start\":61040},{\"end\":61043,\"start\":61042},{\"end\":61050,\"start\":61049},{\"end\":61058,\"start\":61057},{\"end\":61071,\"start\":61070},{\"end\":61073,\"start\":61072},{\"end\":61085,\"start\":61084},{\"end\":61551,\"start\":61550},{\"end\":61553,\"start\":61552},{\"end\":61565,\"start\":61564},{\"end\":61572,\"start\":61571},{\"end\":61578,\"start\":61577},{\"end\":61589,\"start\":61588},{\"end\":62009,\"start\":62008},{\"end\":62021,\"start\":62020},{\"end\":62023,\"start\":62022},{\"end\":62034,\"start\":62033},{\"end\":62036,\"start\":62035},{\"end\":62043,\"start\":62042},{\"end\":62045,\"start\":62044},{\"end\":62056,\"start\":62055},{\"end\":62064,\"start\":62063},{\"end\":62074,\"start\":62073},{\"end\":62599,\"start\":62598},{\"end\":62601,\"start\":62600},{\"end\":62762,\"start\":62761},{\"end\":62769,\"start\":62768},{\"end\":62780,\"start\":62779},{\"end\":62792,\"start\":62791},{\"end\":62804,\"start\":62803},{\"end\":62814,\"start\":62813},{\"end\":62816,\"start\":62815},{\"end\":63114,\"start\":63113},{\"end\":63616,\"start\":63615},{\"end\":63618,\"start\":63617},{\"end\":63770,\"start\":63769},{\"end\":63777,\"start\":63776},{\"end\":63784,\"start\":63783},{\"end\":63791,\"start\":63790},{\"end\":63802,\"start\":63801},{\"end\":64222,\"start\":64221},{\"end\":64232,\"start\":64231},{\"end\":64243,\"start\":64242},{\"end\":64778,\"start\":64777},{\"end\":64787,\"start\":64786},{\"end\":64794,\"start\":64793},{\"end\":64801,\"start\":64800},{\"end\":64803,\"start\":64802},{\"end\":64811,\"start\":64810},{\"end\":65389,\"start\":65388},{\"end\":65400,\"start\":65399},{\"end\":65628,\"start\":65627},{\"end\":65638,\"start\":65637},{\"end\":65648,\"start\":65647},{\"end\":65660,\"start\":65659},{\"end\":66021,\"start\":66020},{\"end\":66030,\"start\":66029},{\"end\":66249,\"start\":66248},{\"end\":66258,\"start\":66257},{\"end\":66270,\"start\":66269},{\"end\":66272,\"start\":66271},{\"end\":66279,\"start\":66278},{\"end\":66286,\"start\":66285},{\"end\":66304,\"start\":66303},{\"end\":66585,\"start\":66584},{\"end\":66596,\"start\":66595},{\"end\":67162,\"start\":67161},{\"end\":67169,\"start\":67168},{\"end\":67179,\"start\":67175},{\"end\":67185,\"start\":67184},{\"end\":67497,\"start\":67496},{\"end\":67508,\"start\":67507},{\"end\":67520,\"start\":67519},{\"end\":67531,\"start\":67530},{\"end\":67541,\"start\":67540},{\"end\":68151,\"start\":68150},{\"end\":68160,\"start\":68159},{\"end\":68169,\"start\":68168},{\"end\":68171,\"start\":68170},{\"end\":68180,\"start\":68179},{\"end\":68191,\"start\":68190},{\"end\":68200,\"start\":68199},{\"end\":68210,\"start\":68209},{\"end\":68679,\"start\":68678},{\"end\":68691,\"start\":68687},{\"end\":69288,\"start\":69287},{\"end\":69298,\"start\":69297},{\"end\":69300,\"start\":69299},{\"end\":69779,\"start\":69778},{\"end\":69788,\"start\":69787},{\"end\":69799,\"start\":69798},{\"end\":69810,\"start\":69809},{\"end\":70106,\"start\":70105},{\"end\":70115,\"start\":70114},{\"end\":70117,\"start\":70116},{\"end\":70127,\"start\":70126},{\"end\":70135,\"start\":70134},{\"end\":70433,\"start\":70432},{\"end\":70441,\"start\":70440},{\"end\":70453,\"start\":70452},{\"end\":70462,\"start\":70461},{\"end\":70471,\"start\":70470},{\"end\":70480,\"start\":70479},{\"end\":70490,\"start\":70489},{\"end\":70498,\"start\":70497},{\"end\":70508,\"start\":70507},{\"end\":70517,\"start\":70516},{\"end\":70519,\"start\":70518},{\"end\":70528,\"start\":70527},{\"end\":70539,\"start\":70538},{\"end\":70541,\"start\":70540},{\"end\":70550,\"start\":70549},{\"end\":70562,\"start\":70561},{\"end\":70572,\"start\":70571},{\"end\":70585,\"start\":70584},{\"end\":70596,\"start\":70595},{\"end\":70607,\"start\":70606},{\"end\":70615,\"start\":70614},{\"end\":70628,\"start\":70627},{\"end\":70639,\"start\":70638},{\"end\":70647,\"start\":70646},{\"end\":70658,\"start\":70657},{\"end\":70660,\"start\":70659},{\"end\":70668,\"start\":70667},{\"end\":70679,\"start\":70678},{\"end\":70692,\"start\":70691},{\"end\":70701,\"start\":70700},{\"end\":70703,\"start\":70702},{\"end\":70714,\"start\":70713},{\"end\":70727,\"start\":70726},{\"end\":70737,\"start\":70736},{\"end\":70747,\"start\":70746},{\"end\":70749,\"start\":70748},{\"end\":70760,\"start\":70759},{\"end\":70773,\"start\":70772},{\"end\":70785,\"start\":70784},{\"end\":70798,\"start\":70797},{\"end\":70807,\"start\":70806},{\"end\":70814,\"start\":70813},{\"end\":70816,\"start\":70815},{\"end\":70833,\"start\":70829},{\"end\":70839,\"start\":70838},{\"end\":70851,\"start\":70850},{\"end\":70858,\"start\":70857},{\"end\":71540,\"start\":71539},{\"end\":71550,\"start\":71549},{\"end\":71552,\"start\":71551},{\"end\":71861,\"start\":71860},{\"end\":71865,\"start\":71862},{\"end\":72116,\"start\":72115},{\"end\":72295,\"start\":72294},{\"end\":72307,\"start\":72306},{\"end\":72317,\"start\":72316},{\"end\":72327,\"start\":72326},{\"end\":72713,\"start\":72712},{\"end\":72726,\"start\":72725},{\"end\":73290,\"start\":73289},{\"end\":73292,\"start\":73291},{\"end\":73508,\"start\":73507},{\"end\":73510,\"start\":73509},{\"end\":73725,\"start\":73724},{\"end\":73733,\"start\":73732},{\"end\":74036,\"start\":74035},{\"end\":74048,\"start\":74047},{\"end\":74227,\"start\":74226},{\"end\":74236,\"start\":74235},{\"end\":74246,\"start\":74245},{\"end\":74257,\"start\":74256},{\"end\":74764,\"start\":74763},{\"end\":74773,\"start\":74772},{\"end\":74781,\"start\":74780},{\"end\":74792,\"start\":74791},{\"end\":75233,\"start\":75232},{\"end\":75242,\"start\":75241},{\"end\":75597,\"start\":75596},{\"end\":75599,\"start\":75598},{\"end\":75731,\"start\":75730},{\"end\":75739,\"start\":75738},{\"end\":75747,\"start\":75746},{\"end\":75749,\"start\":75748},{\"end\":76154,\"start\":76153},{\"end\":76166,\"start\":76165},{\"end\":76180,\"start\":76179},{\"end\":76190,\"start\":76189},{\"end\":76546,\"start\":76545},{\"end\":76557,\"start\":76556},{\"end\":77028,\"start\":77027},{\"end\":77030,\"start\":77029},{\"end\":77039,\"start\":77038},{\"end\":77055,\"start\":77054},{\"end\":77065,\"start\":77064},{\"end\":77406,\"start\":77405},{\"end\":78022,\"start\":78021},{\"end\":78031,\"start\":78030},{\"end\":78045,\"start\":78044},{\"end\":78054,\"start\":78053},{\"end\":78065,\"start\":78064},{\"end\":78387,\"start\":78386},{\"end\":78400,\"start\":78399},{\"end\":78411,\"start\":78410},{\"end\":78421,\"start\":78420},{\"end\":78430,\"start\":78429},{\"end\":78441,\"start\":78437},{\"end\":78447,\"start\":78446},{\"end\":78458,\"start\":78457},{\"end\":78963,\"start\":78962},{\"end\":78977,\"start\":78976},{\"end\":79644,\"start\":79643},{\"end\":79650,\"start\":79649},{\"end\":79656,\"start\":79655},{\"end\":79662,\"start\":79661},{\"end\":80018,\"start\":80017},{\"end\":80033,\"start\":80032},{\"end\":80047,\"start\":80046},{\"end\":80060,\"start\":80059},{\"end\":80612,\"start\":80611},{\"end\":80627,\"start\":80626},{\"end\":81167,\"start\":81166},{\"end\":81179,\"start\":81178},{\"end\":81445,\"start\":81441},{\"end\":81452,\"start\":81451},{\"end\":81458,\"start\":81457},{\"end\":81464,\"start\":81463},{\"end\":81779,\"start\":81778},{\"end\":81786,\"start\":81785},{\"end\":81793,\"start\":81792},{\"end\":81801,\"start\":81800},{\"end\":81807,\"start\":81806},{\"end\":82028,\"start\":82027},{\"end\":82034,\"start\":82033},{\"end\":82042,\"start\":82041},{\"end\":82051,\"start\":82050},{\"end\":82058,\"start\":82057},{\"end\":82064,\"start\":82063},{\"end\":82072,\"start\":82071},{\"end\":82079,\"start\":82078},{\"end\":82081,\"start\":82080},{\"end\":82445,\"start\":82444},{\"end\":82454,\"start\":82453},{\"end\":82467,\"start\":82466},{\"end\":82475,\"start\":82474},{\"end\":82842,\"start\":82841},{\"end\":82849,\"start\":82848},{\"end\":82856,\"start\":82855},{\"end\":82863,\"start\":82862},{\"end\":82869,\"start\":82868},{\"end\":82876,\"start\":82875},{\"end\":82882,\"start\":82881},{\"end\":82889,\"start\":82888},{\"end\":82895,\"start\":82894},{\"end\":83587,\"start\":83586},{\"end\":83597,\"start\":83596},{\"end\":84048,\"start\":84047},{\"end\":84050,\"start\":84049},{\"end\":84062,\"start\":84061},{\"end\":84072,\"start\":84071},{\"end\":84343,\"start\":84342},{\"end\":84355,\"start\":84354},{\"end\":84367,\"start\":84366},{\"end\":84683,\"start\":84682},{\"end\":84691,\"start\":84690},{\"end\":84698,\"start\":84697},{\"end\":84706,\"start\":84705},{\"end\":85206,\"start\":85205},{\"end\":85213,\"start\":85212},{\"end\":85221,\"start\":85220},{\"end\":85230,\"start\":85229},{\"end\":85504,\"start\":85503},{\"end\":85506,\"start\":85505},{\"end\":85649,\"start\":85648},{\"end\":85659,\"start\":85658},{\"end\":85671,\"start\":85670},{\"end\":86154,\"start\":86153},{\"end\":86161,\"start\":86160},{\"end\":86168,\"start\":86167},{\"end\":86582,\"start\":86581},{\"end\":86591,\"start\":86590},{\"end\":86598,\"start\":86597},{\"end\":86609,\"start\":86608},{\"end\":86617,\"start\":86616},{\"end\":86626,\"start\":86625},{\"end\":87109,\"start\":87108},{\"end\":87121,\"start\":87120},{\"end\":87133,\"start\":87132},{\"end\":87670,\"start\":87669},{\"end\":87672,\"start\":87671},{\"end\":87682,\"start\":87681},{\"end\":87684,\"start\":87683},{\"end\":87693,\"start\":87692},{\"end\":87695,\"start\":87694},{\"end\":87705,\"start\":87704},{\"end\":87707,\"start\":87706},{\"end\":87720,\"start\":87719},{\"end\":87722,\"start\":87721},{\"end\":88191,\"start\":88190},{\"end\":88205,\"start\":88204},{\"end\":88207,\"start\":88206},{\"end\":88529,\"start\":88528},{\"end\":88540,\"start\":88539},{\"end\":88550,\"start\":88549},{\"end\":88560,\"start\":88559},{\"end\":88571,\"start\":88570},{\"end\":88870,\"start\":88869},{\"end\":88879,\"start\":88878},{\"end\":88888,\"start\":88887},{\"end\":88899,\"start\":88898},{\"end\":88908,\"start\":88907}]", "bib_author_last_name": "[{\"end\":61038,\"start\":61030},{\"end\":61047,\"start\":61044},{\"end\":61055,\"start\":61051},{\"end\":61068,\"start\":61059},{\"end\":61082,\"start\":61074},{\"end\":61092,\"start\":61086},{\"end\":61562,\"start\":61554},{\"end\":61569,\"start\":61566},{\"end\":61575,\"start\":61573},{\"end\":61586,\"start\":61579},{\"end\":61598,\"start\":61590},{\"end\":62018,\"start\":62010},{\"end\":62031,\"start\":62024},{\"end\":62040,\"start\":62037},{\"end\":62053,\"start\":62046},{\"end\":62061,\"start\":62057},{\"end\":62071,\"start\":62065},{\"end\":62085,\"start\":62075},{\"end\":62766,\"start\":62763},{\"end\":62777,\"start\":62770},{\"end\":62789,\"start\":62781},{\"end\":62801,\"start\":62793},{\"end\":62811,\"start\":62805},{\"end\":62828,\"start\":62817},{\"end\":63121,\"start\":63115},{\"end\":63774,\"start\":63771},{\"end\":63781,\"start\":63778},{\"end\":63788,\"start\":63785},{\"end\":63799,\"start\":63792},{\"end\":63808,\"start\":63803},{\"end\":64229,\"start\":64223},{\"end\":64240,\"start\":64233},{\"end\":64252,\"start\":64244},{\"end\":64784,\"start\":64779},{\"end\":64791,\"start\":64788},{\"end\":64798,\"start\":64795},{\"end\":64808,\"start\":64804},{\"end\":64814,\"start\":64812},{\"end\":65397,\"start\":65390},{\"end\":65406,\"start\":65401},{\"end\":65635,\"start\":65629},{\"end\":65645,\"start\":65639},{\"end\":65657,\"start\":65649},{\"end\":65667,\"start\":65661},{\"end\":66027,\"start\":66022},{\"end\":66038,\"start\":66031},{\"end\":66255,\"start\":66250},{\"end\":66267,\"start\":66259},{\"end\":66276,\"start\":66273},{\"end\":66283,\"start\":66280},{\"end\":66301,\"start\":66287},{\"end\":66308,\"start\":66305},{\"end\":66593,\"start\":66586},{\"end\":66602,\"start\":66597},{\"end\":67166,\"start\":67163},{\"end\":67173,\"start\":67170},{\"end\":67182,\"start\":67180},{\"end\":67191,\"start\":67186},{\"end\":67505,\"start\":67498},{\"end\":67517,\"start\":67509},{\"end\":67528,\"start\":67521},{\"end\":67538,\"start\":67532},{\"end\":67550,\"start\":67542},{\"end\":68157,\"start\":68152},{\"end\":68166,\"start\":68161},{\"end\":68177,\"start\":68172},{\"end\":68188,\"start\":68181},{\"end\":68197,\"start\":68192},{\"end\":68207,\"start\":68201},{\"end\":68220,\"start\":68211},{\"end\":68685,\"start\":68680},{\"end\":68700,\"start\":68692},{\"end\":69295,\"start\":69289},{\"end\":69305,\"start\":69301},{\"end\":69785,\"start\":69780},{\"end\":69796,\"start\":69789},{\"end\":69807,\"start\":69800},{\"end\":69818,\"start\":69811},{\"end\":70112,\"start\":70107},{\"end\":70124,\"start\":70118},{\"end\":70132,\"start\":70128},{\"end\":70141,\"start\":70136},{\"end\":70438,\"start\":70434},{\"end\":70450,\"start\":70442},{\"end\":70459,\"start\":70454},{\"end\":70468,\"start\":70463},{\"end\":70477,\"start\":70472},{\"end\":70487,\"start\":70481},{\"end\":70495,\"start\":70491},{\"end\":70505,\"start\":70499},{\"end\":70514,\"start\":70509},{\"end\":70525,\"start\":70520},{\"end\":70536,\"start\":70529},{\"end\":70547,\"start\":70542},{\"end\":70559,\"start\":70551},{\"end\":70569,\"start\":70563},{\"end\":70582,\"start\":70573},{\"end\":70593,\"start\":70586},{\"end\":70604,\"start\":70597},{\"end\":70612,\"start\":70608},{\"end\":70625,\"start\":70616},{\"end\":70636,\"start\":70629},{\"end\":70644,\"start\":70640},{\"end\":70655,\"start\":70648},{\"end\":70665,\"start\":70661},{\"end\":70676,\"start\":70669},{\"end\":70689,\"start\":70680},{\"end\":70698,\"start\":70693},{\"end\":70711,\"start\":70704},{\"end\":70724,\"start\":70715},{\"end\":70734,\"start\":70728},{\"end\":70744,\"start\":70738},{\"end\":70757,\"start\":70750},{\"end\":70770,\"start\":70761},{\"end\":70782,\"start\":70774},{\"end\":70795,\"start\":70786},{\"end\":70804,\"start\":70799},{\"end\":70811,\"start\":70808},{\"end\":70827,\"start\":70817},{\"end\":70836,\"start\":70834},{\"end\":70848,\"start\":70840},{\"end\":70855,\"start\":70852},{\"end\":70865,\"start\":70859},{\"end\":71547,\"start\":71541},{\"end\":71557,\"start\":71553},{\"end\":71872,\"start\":71866},{\"end\":72126,\"start\":72117},{\"end\":72304,\"start\":72296},{\"end\":72314,\"start\":72308},{\"end\":72324,\"start\":72318},{\"end\":72335,\"start\":72328},{\"end\":72723,\"start\":72714},{\"end\":72734,\"start\":72727},{\"end\":73299,\"start\":73293},{\"end\":73517,\"start\":73511},{\"end\":73730,\"start\":73726},{\"end\":73742,\"start\":73734},{\"end\":74045,\"start\":74037},{\"end\":74054,\"start\":74049},{\"end\":74233,\"start\":74228},{\"end\":74243,\"start\":74237},{\"end\":74254,\"start\":74247},{\"end\":74263,\"start\":74258},{\"end\":74770,\"start\":74765},{\"end\":74778,\"start\":74774},{\"end\":74789,\"start\":74782},{\"end\":74798,\"start\":74793},{\"end\":75239,\"start\":75234},{\"end\":75248,\"start\":75243},{\"end\":75736,\"start\":75732},{\"end\":75744,\"start\":75740},{\"end\":75756,\"start\":75750},{\"end\":76163,\"start\":76155},{\"end\":76177,\"start\":76167},{\"end\":76187,\"start\":76181},{\"end\":76198,\"start\":76191},{\"end\":76554,\"start\":76547},{\"end\":76563,\"start\":76558},{\"end\":77036,\"start\":77031},{\"end\":77052,\"start\":77040},{\"end\":77062,\"start\":77056},{\"end\":77073,\"start\":77066},{\"end\":77414,\"start\":77407},{\"end\":78028,\"start\":78023},{\"end\":78042,\"start\":78032},{\"end\":78051,\"start\":78046},{\"end\":78062,\"start\":78055},{\"end\":78072,\"start\":78066},{\"end\":78397,\"start\":78388},{\"end\":78408,\"start\":78401},{\"end\":78418,\"start\":78412},{\"end\":78427,\"start\":78422},{\"end\":78435,\"start\":78431},{\"end\":78444,\"start\":78442},{\"end\":78455,\"start\":78448},{\"end\":78464,\"start\":78459},{\"end\":78974,\"start\":78964},{\"end\":78983,\"start\":78978},{\"end\":79647,\"start\":79645},{\"end\":79653,\"start\":79651},{\"end\":79659,\"start\":79657},{\"end\":79665,\"start\":79663},{\"end\":80030,\"start\":80019},{\"end\":80044,\"start\":80034},{\"end\":80057,\"start\":80048},{\"end\":80069,\"start\":80061},{\"end\":80624,\"start\":80613},{\"end\":80635,\"start\":80628},{\"end\":81176,\"start\":81168},{\"end\":81189,\"start\":81180},{\"end\":81449,\"start\":81446},{\"end\":81455,\"start\":81453},{\"end\":81461,\"start\":81459},{\"end\":81468,\"start\":81465},{\"end\":81783,\"start\":81780},{\"end\":81790,\"start\":81787},{\"end\":81798,\"start\":81794},{\"end\":81804,\"start\":81802},{\"end\":81812,\"start\":81808},{\"end\":82031,\"start\":82029},{\"end\":82039,\"start\":82035},{\"end\":82048,\"start\":82043},{\"end\":82055,\"start\":82052},{\"end\":82061,\"start\":82059},{\"end\":82069,\"start\":82065},{\"end\":82076,\"start\":82073},{\"end\":82084,\"start\":82082},{\"end\":82451,\"start\":82446},{\"end\":82464,\"start\":82455},{\"end\":82472,\"start\":82468},{\"end\":82483,\"start\":82476},{\"end\":82846,\"start\":82843},{\"end\":82853,\"start\":82850},{\"end\":82860,\"start\":82857},{\"end\":82866,\"start\":82864},{\"end\":82873,\"start\":82870},{\"end\":82879,\"start\":82877},{\"end\":82886,\"start\":82883},{\"end\":82892,\"start\":82890},{\"end\":82900,\"start\":82896},{\"end\":83594,\"start\":83588},{\"end\":83609,\"start\":83598},{\"end\":84059,\"start\":84051},{\"end\":84069,\"start\":84063},{\"end\":84079,\"start\":84073},{\"end\":84352,\"start\":84344},{\"end\":84364,\"start\":84356},{\"end\":84375,\"start\":84368},{\"end\":84688,\"start\":84684},{\"end\":84695,\"start\":84692},{\"end\":84703,\"start\":84699},{\"end\":84711,\"start\":84707},{\"end\":85210,\"start\":85207},{\"end\":85218,\"start\":85214},{\"end\":85227,\"start\":85222},{\"end\":85233,\"start\":85231},{\"end\":85515,\"start\":85507},{\"end\":85656,\"start\":85650},{\"end\":85668,\"start\":85660},{\"end\":85680,\"start\":85672},{\"end\":86158,\"start\":86155},{\"end\":86165,\"start\":86162},{\"end\":86173,\"start\":86169},{\"end\":86588,\"start\":86583},{\"end\":86595,\"start\":86592},{\"end\":86606,\"start\":86599},{\"end\":86614,\"start\":86610},{\"end\":86623,\"start\":86618},{\"end\":86630,\"start\":86627},{\"end\":87118,\"start\":87110},{\"end\":87130,\"start\":87122},{\"end\":87142,\"start\":87134},{\"end\":87679,\"start\":87673},{\"end\":87690,\"start\":87685},{\"end\":87702,\"start\":87696},{\"end\":87717,\"start\":87708},{\"end\":87733,\"start\":87723},{\"end\":88202,\"start\":88192},{\"end\":88219,\"start\":88208},{\"end\":88537,\"start\":88530},{\"end\":88547,\"start\":88541},{\"end\":88557,\"start\":88551},{\"end\":88568,\"start\":88561},{\"end\":88579,\"start\":88572},{\"end\":88876,\"start\":88871},{\"end\":88885,\"start\":88880},{\"end\":88896,\"start\":88889},{\"end\":88905,\"start\":88900},{\"end\":88918,\"start\":88909}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":2693696},\"end\":61478,\"start\":60964},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":13396177},\"end\":61955,\"start\":61480},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":53034533},\"end\":62581,\"start\":61957},{\"attributes\":{\"id\":\"b3\"},\"end\":62674,\"start\":62583},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":11819780},\"end\":63073,\"start\":62676},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":22401246},\"end\":63593,\"start\":63075},{\"attributes\":{\"id\":\"b6\"},\"end\":63679,\"start\":63595},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":219850480},\"end\":64188,\"start\":63681},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":2586639},\"end\":64723,\"start\":64190},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":10689680},\"end\":65309,\"start\":64725},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":3628209},\"end\":65597,\"start\":65311},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":52054566},\"end\":65976,\"start\":65599},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":6815550},\"end\":66190,\"start\":65978},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":201058730},\"end\":66523,\"start\":66192},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":3142693},\"end\":67084,\"start\":66525},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":5957760},\"end\":67440,\"start\":67086},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":79300},\"end\":68057,\"start\":67442},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":25372358},\"end\":68589,\"start\":68059},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":232320204},\"end\":69215,\"start\":68591},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":195259340},\"end\":69723,\"start\":69217},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":52001074},\"end\":70016,\"start\":69725},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":17308756},\"end\":70358,\"start\":70018},{\"attributes\":{\"id\":\"b22\"},\"end\":71491,\"start\":70360},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":236992607},\"end\":71810,\"start\":71493},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":2774707},\"end\":72082,\"start\":71812},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":10211629},\"end\":72248,\"start\":72084},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":5472503},\"end\":72626,\"start\":72250},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":14950070},\"end\":73243,\"start\":72628},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":16216499},\"end\":73472,\"start\":73245},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":40001207},\"end\":73655,\"start\":73474},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":9136948},\"end\":73975,\"start\":73657},{\"attributes\":{\"id\":\"b31\"},\"end\":74183,\"start\":73977},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":1364237},\"end\":74658,\"start\":74185},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":1689835},\"end\":75180,\"start\":74660},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":14428620},\"end\":75583,\"start\":75182},{\"attributes\":{\"id\":\"b35\"},\"end\":75684,\"start\":75585},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":1447679},\"end\":76100,\"start\":75686},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":2138943},\"end\":76475,\"start\":76102},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":72733},\"end\":76979,\"start\":76477},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":1077172},\"end\":77363,\"start\":76981},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":15005100},\"end\":77796,\"start\":77365},{\"attributes\":{\"id\":\"b41\"},\"end\":78019,\"start\":77798},{\"attributes\":{\"id\":\"b42\"},\"end\":78312,\"start\":78021},{\"attributes\":{\"id\":\"b43\"},\"end\":78845,\"start\":78314},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":42052160},\"end\":79577,\"start\":78847},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":196197710},\"end\":79952,\"start\":79579},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":9590483},\"end\":80541,\"start\":79954},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":220333451},\"end\":81087,\"start\":80543},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":204786279},\"end\":81374,\"start\":81089},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":67894465},\"end\":81723,\"start\":81376},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":218475777},\"end\":81975,\"start\":81725},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":233331735},\"end\":82361,\"start\":81977},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":85458781},\"end\":82800,\"start\":82363},{\"attributes\":{\"doi\":\"10.1145/3318464.3389745\",\"id\":\"b53\",\"matched_paper_id\":218982049},\"end\":83514,\"start\":82802},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":794929},\"end\":83962,\"start\":83516},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":18741059},\"end\":84286,\"start\":83964},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":16026750},\"end\":84601,\"start\":84288},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":59337241},\"end\":85137,\"start\":84603},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":3625061},\"end\":85499,\"start\":85139},{\"attributes\":{\"id\":\"b59\"},\"end\":85592,\"start\":85501},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":2227285},\"end\":86050,\"start\":85594},{\"attributes\":{\"id\":\"b61\",\"matched_paper_id\":17191560},\"end\":86517,\"start\":86052},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":12681321},\"end\":87063,\"start\":86519},{\"attributes\":{\"id\":\"b63\",\"matched_paper_id\":8340340},\"end\":87608,\"start\":87065},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":2444665},\"end\":88128,\"start\":87610},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":15864421},\"end\":88454,\"start\":88130},{\"attributes\":{\"id\":\"b66\",\"matched_paper_id\":5622833},\"end\":88800,\"start\":88456},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":53083809},\"end\":89192,\"start\":88802}]", "bib_title": "[{\"end\":61024,\"start\":60964},{\"end\":61548,\"start\":61480},{\"end\":62006,\"start\":61957},{\"end\":62759,\"start\":62676},{\"end\":63111,\"start\":63075},{\"end\":63767,\"start\":63681},{\"end\":64219,\"start\":64190},{\"end\":64775,\"start\":64725},{\"end\":65386,\"start\":65311},{\"end\":65625,\"start\":65599},{\"end\":66018,\"start\":65978},{\"end\":66246,\"start\":66192},{\"end\":66582,\"start\":66525},{\"end\":67159,\"start\":67086},{\"end\":67494,\"start\":67442},{\"end\":68148,\"start\":68059},{\"end\":68676,\"start\":68591},{\"end\":69285,\"start\":69217},{\"end\":69776,\"start\":69725},{\"end\":70103,\"start\":70018},{\"end\":70430,\"start\":70360},{\"end\":71537,\"start\":71493},{\"end\":71858,\"start\":71812},{\"end\":72113,\"start\":72084},{\"end\":72292,\"start\":72250},{\"end\":72710,\"start\":72628},{\"end\":73287,\"start\":73245},{\"end\":73505,\"start\":73474},{\"end\":73722,\"start\":73657},{\"end\":74224,\"start\":74185},{\"end\":74761,\"start\":74660},{\"end\":75230,\"start\":75182},{\"end\":75728,\"start\":75686},{\"end\":76151,\"start\":76102},{\"end\":76543,\"start\":76477},{\"end\":77025,\"start\":76981},{\"end\":77403,\"start\":77365},{\"end\":78960,\"start\":78847},{\"end\":79641,\"start\":79579},{\"end\":80015,\"start\":79954},{\"end\":80609,\"start\":80543},{\"end\":81164,\"start\":81089},{\"end\":81439,\"start\":81376},{\"end\":81776,\"start\":81725},{\"end\":82025,\"start\":81977},{\"end\":82442,\"start\":82363},{\"end\":82839,\"start\":82802},{\"end\":83584,\"start\":83516},{\"end\":84045,\"start\":83964},{\"end\":84340,\"start\":84288},{\"end\":84680,\"start\":84603},{\"end\":85203,\"start\":85139},{\"end\":85646,\"start\":85594},{\"end\":86151,\"start\":86052},{\"end\":86579,\"start\":86519},{\"end\":87106,\"start\":87065},{\"end\":87667,\"start\":87610},{\"end\":88188,\"start\":88130},{\"end\":88526,\"start\":88456},{\"end\":88867,\"start\":88802}]", "bib_author": "[{\"end\":61040,\"start\":61026},{\"end\":61049,\"start\":61040},{\"end\":61057,\"start\":61049},{\"end\":61070,\"start\":61057},{\"end\":61084,\"start\":61070},{\"end\":61094,\"start\":61084},{\"end\":61564,\"start\":61550},{\"end\":61571,\"start\":61564},{\"end\":61577,\"start\":61571},{\"end\":61588,\"start\":61577},{\"end\":61600,\"start\":61588},{\"end\":62020,\"start\":62008},{\"end\":62033,\"start\":62020},{\"end\":62042,\"start\":62033},{\"end\":62055,\"start\":62042},{\"end\":62063,\"start\":62055},{\"end\":62073,\"start\":62063},{\"end\":62087,\"start\":62073},{\"end\":62604,\"start\":62598},{\"end\":62768,\"start\":62761},{\"end\":62779,\"start\":62768},{\"end\":62791,\"start\":62779},{\"end\":62803,\"start\":62791},{\"end\":62813,\"start\":62803},{\"end\":62830,\"start\":62813},{\"end\":63123,\"start\":63113},{\"end\":63621,\"start\":63615},{\"end\":63776,\"start\":63769},{\"end\":63783,\"start\":63776},{\"end\":63790,\"start\":63783},{\"end\":63801,\"start\":63790},{\"end\":63810,\"start\":63801},{\"end\":64231,\"start\":64221},{\"end\":64242,\"start\":64231},{\"end\":64254,\"start\":64242},{\"end\":64786,\"start\":64777},{\"end\":64793,\"start\":64786},{\"end\":64800,\"start\":64793},{\"end\":64810,\"start\":64800},{\"end\":64816,\"start\":64810},{\"end\":65399,\"start\":65388},{\"end\":65408,\"start\":65399},{\"end\":65637,\"start\":65627},{\"end\":65647,\"start\":65637},{\"end\":65659,\"start\":65647},{\"end\":65669,\"start\":65659},{\"end\":66029,\"start\":66020},{\"end\":66040,\"start\":66029},{\"end\":66257,\"start\":66248},{\"end\":66269,\"start\":66257},{\"end\":66278,\"start\":66269},{\"end\":66285,\"start\":66278},{\"end\":66303,\"start\":66285},{\"end\":66310,\"start\":66303},{\"end\":66595,\"start\":66584},{\"end\":66604,\"start\":66595},{\"end\":67168,\"start\":67161},{\"end\":67175,\"start\":67168},{\"end\":67184,\"start\":67175},{\"end\":67193,\"start\":67184},{\"end\":67507,\"start\":67496},{\"end\":67519,\"start\":67507},{\"end\":67530,\"start\":67519},{\"end\":67540,\"start\":67530},{\"end\":67552,\"start\":67540},{\"end\":68159,\"start\":68150},{\"end\":68168,\"start\":68159},{\"end\":68179,\"start\":68168},{\"end\":68190,\"start\":68179},{\"end\":68199,\"start\":68190},{\"end\":68209,\"start\":68199},{\"end\":68222,\"start\":68209},{\"end\":68687,\"start\":68678},{\"end\":68702,\"start\":68687},{\"end\":69297,\"start\":69287},{\"end\":69307,\"start\":69297},{\"end\":69787,\"start\":69778},{\"end\":69798,\"start\":69787},{\"end\":69809,\"start\":69798},{\"end\":69820,\"start\":69809},{\"end\":70114,\"start\":70105},{\"end\":70126,\"start\":70114},{\"end\":70134,\"start\":70126},{\"end\":70143,\"start\":70134},{\"end\":70440,\"start\":70432},{\"end\":70452,\"start\":70440},{\"end\":70461,\"start\":70452},{\"end\":70470,\"start\":70461},{\"end\":70479,\"start\":70470},{\"end\":70489,\"start\":70479},{\"end\":70497,\"start\":70489},{\"end\":70507,\"start\":70497},{\"end\":70516,\"start\":70507},{\"end\":70527,\"start\":70516},{\"end\":70538,\"start\":70527},{\"end\":70549,\"start\":70538},{\"end\":70561,\"start\":70549},{\"end\":70571,\"start\":70561},{\"end\":70584,\"start\":70571},{\"end\":70595,\"start\":70584},{\"end\":70606,\"start\":70595},{\"end\":70614,\"start\":70606},{\"end\":70627,\"start\":70614},{\"end\":70638,\"start\":70627},{\"end\":70646,\"start\":70638},{\"end\":70657,\"start\":70646},{\"end\":70667,\"start\":70657},{\"end\":70678,\"start\":70667},{\"end\":70691,\"start\":70678},{\"end\":70700,\"start\":70691},{\"end\":70713,\"start\":70700},{\"end\":70726,\"start\":70713},{\"end\":70736,\"start\":70726},{\"end\":70746,\"start\":70736},{\"end\":70759,\"start\":70746},{\"end\":70772,\"start\":70759},{\"end\":70784,\"start\":70772},{\"end\":70797,\"start\":70784},{\"end\":70806,\"start\":70797},{\"end\":70813,\"start\":70806},{\"end\":70829,\"start\":70813},{\"end\":70838,\"start\":70829},{\"end\":70850,\"start\":70838},{\"end\":70857,\"start\":70850},{\"end\":70867,\"start\":70857},{\"end\":71549,\"start\":71539},{\"end\":71559,\"start\":71549},{\"end\":71874,\"start\":71860},{\"end\":72128,\"start\":72115},{\"end\":72306,\"start\":72294},{\"end\":72316,\"start\":72306},{\"end\":72326,\"start\":72316},{\"end\":72337,\"start\":72326},{\"end\":72725,\"start\":72712},{\"end\":72736,\"start\":72725},{\"end\":73301,\"start\":73289},{\"end\":73519,\"start\":73507},{\"end\":73732,\"start\":73724},{\"end\":73744,\"start\":73732},{\"end\":74047,\"start\":74035},{\"end\":74056,\"start\":74047},{\"end\":74235,\"start\":74226},{\"end\":74245,\"start\":74235},{\"end\":74256,\"start\":74245},{\"end\":74265,\"start\":74256},{\"end\":74772,\"start\":74763},{\"end\":74780,\"start\":74772},{\"end\":74791,\"start\":74780},{\"end\":74800,\"start\":74791},{\"end\":75241,\"start\":75232},{\"end\":75250,\"start\":75241},{\"end\":75602,\"start\":75596},{\"end\":75738,\"start\":75730},{\"end\":75746,\"start\":75738},{\"end\":75758,\"start\":75746},{\"end\":76165,\"start\":76153},{\"end\":76179,\"start\":76165},{\"end\":76189,\"start\":76179},{\"end\":76200,\"start\":76189},{\"end\":76556,\"start\":76545},{\"end\":76565,\"start\":76556},{\"end\":77038,\"start\":77027},{\"end\":77054,\"start\":77038},{\"end\":77064,\"start\":77054},{\"end\":77075,\"start\":77064},{\"end\":77416,\"start\":77405},{\"end\":78030,\"start\":78021},{\"end\":78044,\"start\":78030},{\"end\":78053,\"start\":78044},{\"end\":78064,\"start\":78053},{\"end\":78074,\"start\":78064},{\"end\":78399,\"start\":78386},{\"end\":78410,\"start\":78399},{\"end\":78420,\"start\":78410},{\"end\":78429,\"start\":78420},{\"end\":78437,\"start\":78429},{\"end\":78446,\"start\":78437},{\"end\":78457,\"start\":78446},{\"end\":78466,\"start\":78457},{\"end\":78976,\"start\":78962},{\"end\":78985,\"start\":78976},{\"end\":79649,\"start\":79643},{\"end\":79655,\"start\":79649},{\"end\":79661,\"start\":79655},{\"end\":79667,\"start\":79661},{\"end\":80032,\"start\":80017},{\"end\":80046,\"start\":80032},{\"end\":80059,\"start\":80046},{\"end\":80071,\"start\":80059},{\"end\":80626,\"start\":80611},{\"end\":80637,\"start\":80626},{\"end\":81178,\"start\":81166},{\"end\":81191,\"start\":81178},{\"end\":81451,\"start\":81441},{\"end\":81457,\"start\":81451},{\"end\":81463,\"start\":81457},{\"end\":81470,\"start\":81463},{\"end\":81785,\"start\":81778},{\"end\":81792,\"start\":81785},{\"end\":81800,\"start\":81792},{\"end\":81806,\"start\":81800},{\"end\":81814,\"start\":81806},{\"end\":82033,\"start\":82027},{\"end\":82041,\"start\":82033},{\"end\":82050,\"start\":82041},{\"end\":82057,\"start\":82050},{\"end\":82063,\"start\":82057},{\"end\":82071,\"start\":82063},{\"end\":82078,\"start\":82071},{\"end\":82086,\"start\":82078},{\"end\":82453,\"start\":82444},{\"end\":82466,\"start\":82453},{\"end\":82474,\"start\":82466},{\"end\":82485,\"start\":82474},{\"end\":82848,\"start\":82841},{\"end\":82855,\"start\":82848},{\"end\":82862,\"start\":82855},{\"end\":82868,\"start\":82862},{\"end\":82875,\"start\":82868},{\"end\":82881,\"start\":82875},{\"end\":82888,\"start\":82881},{\"end\":82894,\"start\":82888},{\"end\":82902,\"start\":82894},{\"end\":83596,\"start\":83586},{\"end\":83611,\"start\":83596},{\"end\":84061,\"start\":84047},{\"end\":84071,\"start\":84061},{\"end\":84081,\"start\":84071},{\"end\":84354,\"start\":84342},{\"end\":84366,\"start\":84354},{\"end\":84377,\"start\":84366},{\"end\":84690,\"start\":84682},{\"end\":84697,\"start\":84690},{\"end\":84705,\"start\":84697},{\"end\":84713,\"start\":84705},{\"end\":85212,\"start\":85205},{\"end\":85220,\"start\":85212},{\"end\":85229,\"start\":85220},{\"end\":85235,\"start\":85229},{\"end\":85517,\"start\":85503},{\"end\":85658,\"start\":85648},{\"end\":85670,\"start\":85658},{\"end\":85682,\"start\":85670},{\"end\":86160,\"start\":86153},{\"end\":86167,\"start\":86160},{\"end\":86175,\"start\":86167},{\"end\":86590,\"start\":86581},{\"end\":86597,\"start\":86590},{\"end\":86608,\"start\":86597},{\"end\":86616,\"start\":86608},{\"end\":86625,\"start\":86616},{\"end\":86632,\"start\":86625},{\"end\":87120,\"start\":87108},{\"end\":87132,\"start\":87120},{\"end\":87144,\"start\":87132},{\"end\":87681,\"start\":87669},{\"end\":87692,\"start\":87681},{\"end\":87704,\"start\":87692},{\"end\":87719,\"start\":87704},{\"end\":87735,\"start\":87719},{\"end\":88204,\"start\":88190},{\"end\":88221,\"start\":88204},{\"end\":88539,\"start\":88528},{\"end\":88549,\"start\":88539},{\"end\":88559,\"start\":88549},{\"end\":88570,\"start\":88559},{\"end\":88581,\"start\":88570},{\"end\":88878,\"start\":88869},{\"end\":88887,\"start\":88878},{\"end\":88898,\"start\":88887},{\"end\":88907,\"start\":88898},{\"end\":88920,\"start\":88907}]", "bib_venue": "[{\"end\":61178,\"start\":61164},{\"end\":61693,\"start\":61680},{\"end\":62287,\"start\":62187},{\"end\":63371,\"start\":63247},{\"end\":63924,\"start\":63896},{\"end\":64482,\"start\":64368},{\"end\":65044,\"start\":64930},{\"end\":66832,\"start\":66718},{\"end\":67776,\"start\":67664},{\"end\":68890,\"start\":68796},{\"end\":69485,\"start\":69396},{\"end\":69848,\"start\":69838},{\"end\":72964,\"start\":72850},{\"end\":74442,\"start\":74362},{\"end\":74919,\"start\":74868},{\"end\":75386,\"start\":75315},{\"end\":75871,\"start\":75854},{\"end\":76727,\"start\":76653},{\"end\":77600,\"start\":77508},{\"end\":78117,\"start\":78113},{\"end\":79232,\"start\":79108},{\"end\":80267,\"start\":80169},{\"end\":80837,\"start\":80737},{\"end\":83125,\"start\":83025},{\"end\":84881,\"start\":84797},{\"end\":85800,\"start\":85787},{\"end\":86247,\"start\":86232},{\"end\":86804,\"start\":86718},{\"end\":87327,\"start\":87235},{\"end\":87879,\"start\":87814},{\"end\":61162,\"start\":61094},{\"end\":61678,\"start\":61600},{\"end\":62185,\"start\":62087},{\"end\":62596,\"start\":62583},{\"end\":62846,\"start\":62830},{\"end\":63245,\"start\":63123},{\"end\":63613,\"start\":63595},{\"end\":63853,\"start\":63810},{\"end\":64366,\"start\":64254},{\"end\":64928,\"start\":64816},{\"end\":65427,\"start\":65408},{\"end\":65770,\"start\":65669},{\"end\":66056,\"start\":66040},{\"end\":66326,\"start\":66310},{\"end\":66716,\"start\":66604},{\"end\":67242,\"start\":67193},{\"end\":67662,\"start\":67552},{\"end\":68302,\"start\":68222},{\"end\":68794,\"start\":68702},{\"end\":69394,\"start\":69307},{\"end\":69836,\"start\":69820},{\"end\":70159,\"start\":70143},{\"end\":70878,\"start\":70867},{\"end\":71629,\"start\":71559},{\"end\":71921,\"start\":71874},{\"end\":72143,\"start\":72128},{\"end\":72422,\"start\":72337},{\"end\":72848,\"start\":72736},{\"end\":73336,\"start\":73301},{\"end\":73539,\"start\":73519},{\"end\":73798,\"start\":73744},{\"end\":74033,\"start\":73977},{\"end\":74360,\"start\":74265},{\"end\":74866,\"start\":74800},{\"end\":75313,\"start\":75250},{\"end\":75594,\"start\":75585},{\"end\":75852,\"start\":75758},{\"end\":76266,\"start\":76200},{\"end\":76651,\"start\":76565},{\"end\":77152,\"start\":77075},{\"end\":77506,\"start\":77416},{\"end\":77828,\"start\":77798},{\"end\":78111,\"start\":78074},{\"end\":78384,\"start\":78314},{\"end\":79106,\"start\":78985},{\"end\":79747,\"start\":79667},{\"end\":80167,\"start\":80071},{\"end\":80735,\"start\":80637},{\"end\":81210,\"start\":81191},{\"end\":81523,\"start\":81470},{\"end\":81830,\"start\":81814},{\"end\":82139,\"start\":82086},{\"end\":82562,\"start\":82485},{\"end\":83023,\"start\":82925},{\"end\":83641,\"start\":83611},{\"end\":84098,\"start\":84081},{\"end\":84434,\"start\":84377},{\"end\":84795,\"start\":84713},{\"end\":85303,\"start\":85235},{\"end\":85785,\"start\":85682},{\"end\":86230,\"start\":86175},{\"end\":86716,\"start\":86632},{\"end\":87233,\"start\":87144},{\"end\":87812,\"start\":87735},{\"end\":88266,\"start\":88221},{\"end\":88597,\"start\":88581},{\"end\":88977,\"start\":88920}]"}}}, "year": 2023, "month": 12, "day": 17}