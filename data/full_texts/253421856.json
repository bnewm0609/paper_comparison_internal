{"id": 253421856, "updated": "2023-12-01 22:20:24.888", "metadata": {"title": "CommentFinder: a simpler, faster, more accurate code review comments recommendation", "authors": "[{\"first\":\"Yang\",\"last\":\"Hong\",\"middle\":[]},{\"first\":\"Chakkrit\",\"last\":\"Tantithamthavorn\",\"middle\":[]},{\"first\":\"Patanamon\",\"last\":\"Thongtanunam\",\"middle\":[]},{\"first\":\"Aldeida\",\"last\":\"Aleti\",\"middle\":[]}]", "venue": null, "journal": "Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering", "publication_date": {"year": 2022, "month": null, "day": null}, "abstract": "Code review is an effective quality assurance practice, but can be labor-intensive since developers have to manually review the code and provide written feedback. Recently, a Deep Learning (DL)-based approach was introduced to automatically recommend code review comments based on changed methods. While the approach showed promising results, it requires expensive computational resource and time which limits its use in practice. To address this limitation, we propose CommentFinder \u2013 a retrieval-based approach to recommend code review comments. Through an empirical evaluation of 151,019 changed methods, we evaluate the effectiveness and efficiency of CommentFinder against the state-of-the-art approach. We find that when recommending the best-1 review comment candidate, our CommentFinder is 32% better than prior work in recommending the correct code review comment. In addition, CommentFinder is 49 times faster than the prior work. These findings highlight that our CommentFinder could help reviewers to reduce the manual efforts by recommending code review comments, while requiring less computational time.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/sigsoft/HongTTA22", "doi": "10.1145/3540250.3549119"}}, "content": {"source": {"pdf_hash": "b396e61972c13e78e9f8e5e118f01559e809fd9c", "pdf_src": "ACM", "pdf_uri": null, "oa_url_match": false, "oa_info": null}, "grobid": {"id": "31df7fde5cddb48f646cf07755b7cb7a241fa4e8", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/b396e61972c13e78e9f8e5e118f01559e809fd9c.txt", "contents": "\nCommentFinder: A Simpler, Faster, More Accurate Code Review Comments Recommendation CCS CONCEPTS \u2022 Software and its engineering; KEYWORDS Software Quality Assurance, Modern Code Review ACM Reference Format\nNovember 14-18, 2022\n\nYang Hong yang.hong1@monash.edu \nChakkrit Tantithamthavorn chakkrit@monash.edu \nPatanamon Thongtanunam patanamon.t@unimelb.edu.au \nAldeida Aleti aldeida.aleti@monash.edu \nYang Hong \nChakkrit Tantithamthavorn \nPatanamon Thongtanunam \nAldeida Aleti \n\nMonash University\nAustralia\n\n\nMonash University\nAustralia\n\n\nThe University of Melbourne\nAustralia\n\n\nMonash University\nAustralia\n\nCommentFinder: A Simpler, Faster, More Accurate Code Review Comments Recommendation CCS CONCEPTS \u2022 Software and its engineering; KEYWORDS Software Quality Assurance, Modern Code Review ACM Reference Format\nSingapore, Singapore22November 14-18, 202210.1145/3540250.3549119. 2022. CommentFinder: A Simpler, Faster, More Ac-curate Code Review Comments Recommendation. In Proceedings of the * The corresponding author 30th ACM Joint European Software Engineering Conference and Sympo-sium on the Foundations of Software Engineering (ESEC/FSE '22), Novem-ber 14-18, 2022, Singapore, Singapore. ACM, New York, NY, USA, 13 pages.\nCode review is an effective quality assurance practice, but can be labor-intensive since developers have to manually review the code and provide written feedback. Recently, a Deep Learning (DL)-based approach was introduced to automatically recommend code review comments based on changed methods. While the approach showed promising results, it requires expensive computational resources and time which limits its use in practice. To address this limitation, we propose CommentFinder \u015b a retrieval-based approach to recommend code review comments. Through an empirical evaluation of 151,019 changed methods, we evaluate the effectiveness and efficiency of CommentFinder against the state-of-the-art approach. We find that when recommending the best-1 review comment candidate, our CommentFinder is 32% better than prior work in recommending the correct code review comment. In addition, CommentFinder is 49 times faster than the prior work. These findings highlight that our CommentFinder could help reviewers reduce manual efforts by recommending code review comments, while requiring less computational time.\n\nINTRODUCTION\n\nCode review is a well-established quality assurance practice that is widely adopted in modern software development in both commercial and open-source projects [2,6]. In the code review process, reviewers (i.e., developers other than the code author) manually examine the newly developed code and provide written feedback (called code review comment, henceforth, see Figure 1). The source code is then revised based on the feedback and integrated into the code repository once the reviewers approve it [2,31]. Several studies have found that the code review process helps to improve the overall quality of software systems including reducing software defects [5,36,56] and improving software maintainability [6,37,49].\n\nDue to the excessive reviewing effort required, performing code review becomes one of the top challenges faced by industry [4,18,19]. In particular, code review is labor-intensive since reviewers have to manually review the code and provide written feedback. In addition, to perform a scrutinized review, reviewers also need to spend time understanding the associated code and the purpose of the changes [2]. As projects are becoming more complex and large, the number of reviews is increasing over time (e.g., 3K reviews per month in Microsoft Bing [46] and 500 reviews per month in Linux [47]). Given this large number of reviews, prior research also found that the code authors may have to wait 15-64 hours unnecessarily at a time until they receive the code review comments from reviewers [22]. Hence, an approach that can automatically recommend code review comments for a given code change would be beneficial to save manual efforts in the code review process. With the goal of helping developers save the code review effort, a Deep Learning (DL)-based approach [61] is proposed to automatically generate code review comments based on a given changed method. Particularly, Tufano et al. [61] formulated the code review comment recommendation as a Neural Machine Translation task (Code\u2192Text) using a Text-To-Text Transfer Transformer (T5) architecture. Despite the promising results, the DL-based approach is complex and requires expensive computational time and resources. For example, Feng et al. built a pre-trained CodeBERT language model on the CodeSearchNet corpus which requires an NVIDIA DGX-2 with 16\u00d7NVIDIA Tesla V100 with 32GB memory with an approx. hardware cost of $400K [12]. Unfortunately, the majority of software organizations may have limited access to such premium computing resources.\n\nRecent studies [16,20,30,33,40] found that a simpler approach may achieve better performance than the DL-based approach with less computational time and resources. Importantly, Tufano et al. [61] do not evaluate their approach with any baseline approaches, raising an important concern if such the DL-based approach is the most accurate code review comment recommendation approach. Yet, little is known about whether a simpler approach can achieve higher accuracy than Tufano et al. [61] for the code review comment recommendation task. This central question is practically and significantly important for under-resourced software organizations, since practitioners may prefer simple over complex solutions [16].\n\nIn this paper, we propose CommentFinder \u00d0 a retrieval-based code review comment recommendation approach. Our intuition is that similar newly submitted code is likely to receive similar code review comments. Thus, our CommentFinder is formulated as an information retrieval task. Given a corpus of code-comment pairs (i.e., a pair of a changed method and its associated humanwritten code review comment), CommentFinder will use a given changed method as a query to search for the most similar changed methods in the code-comment corpus. Then, the associated code review comments are then used as the comment candidates for the given changed method. To expedite the search for the most similar changed methods, CommentFinder performs the two-step similarity measurement. Specifically, CommentFinder first measures a cosine distance between the given changed method and all changed methods in the corpus based on the Bag-of-Words model in order to select the ten nearest changed methods (i.e., lowest cosine distance). Then, CommentFinder uses a text similarity metric called Gestalt Pattern Matching (GPM) to identify the most similar changed methods based on the character-wise comparison.\n\nThrough an empirical evaluation of 151,019 changed methods that span across 11,289 large-scale open-source software projects that performed code reviews (i.e., 4,901 GitHub projects and 6,388 Gerrit projects), we address the following research questions: Significance & Contributions. These results lead us to conclude that CommentFinder provides a substantial improvement for automatically recommending the code review comments in the context of code review. More specifically, our CommentFinder is more effective (RQ1) and more efficient (RQ2) than the state-of-theart approach [61], which suggests that our CommentFinder could help developers save their efforts in a code review process better than the state-of-the-art approach. Based on our findings and insights in this work, we suggest that researchers should consider exploring simple solutions as it may achieve similar or better accuracy than a sophisticated DL-based approach, while requiring a less computational cost.\n(RQ1)\nNovelty. This paper is the first to:\n\n\u2022 Present CommentFinder \u015b A retrieval-based code review comment recommendation approach. \u2022 Demonstrate that, for the code review comment recommendation task, the retrieval-based approach of Com-mentFinder is more effective and efficient than the state-ofthe-art DL-based approach. \u2022 Demonstrate that, among the nine commonly-used similarity techniques, the use of cosine distance and GPM is the most cost-effective combination for our CommentFinder.\n\nOpen Science.\n\nTo support the open science initiative, we publish a replication package, which is publicly available on GitHub (https: //github.com/awsm-research/CommentFinder).\n\nPaper Organization. The paper is organized as follows. Section 2 describes background, motivation and limitation of the stateof-the-art approach. Section 3 presents our CommentFinder. Section 4 describes our experimental setup. Section 5 presents the experimental results. Section 6 discusses the results of our Com-mentFinder. Section 7 presents the related work. Section 8 discloses the threats to validity. Section 9 draws the conclusion.\n\n\nBACKGROUND\n\nIn this section, we describe a code review process and situate the challenge based on the literature. We also briefly describe the stateof-the-art approach and its limitations.\n\n\nCode Review Process\n\nCode review is one of the well-established Software Quality Assurance (SQA) activities in modern collaborative software development practices [46,49]. A code review process consists of five main steps (see Figure 2). Broadly speaking, in step 1 , a code author will first submit a newly developed code (i.e., new code changes) to the code review tool (e.g., Gerrit, GitHub, or GitLab). Then, in step 2 , to examine the newly developed code, the code author will invite reviewer(s) (i.e., the developers other than the code author) to review the newly developed code. In step 3 , the reviewer(s) will inspect the code. If the reviewer(s) discover any issues in the submitted code, they will provide feedback (i.e., code review comments) to the specific areas of code. Figure 1 presents an example of a code review comment of a reviewer on the specific area of code in the Android project. 1 After that, in step 4 , the reviewer(s) will make a decision on whether this submitted code can be merged into the code repository. In Step 5 , if the reviewer(s) suggest that the submitted code is not ready to be merged and a revision is needed, the code author will revise the code to address the code review comments. Finally, if the submitted code has sufficient quality, the reviewer(s) will approve the submitted code to be integrated into the code repository.\n\n\nMotivation & Usage Scenario\n\nAt the heart of the code review process is the code review comments. Such code review comments play an important role to guide developers to improve their submitted code [7]. Unfortunately, to identify issues and write code review comments, reviewers are required to take a considerable amount of time to understand the purpose and the context of the code [2]. Hong et al. [22] find that the code authors can wait for 15-64 hours to receive code review comments from reviewers. Such a long wait time may also stall the development process [10]. Hence, as projects become more complex and large with an increasing number of reviews over time, timely providing code review comments becomes one of the top challenges faced by development teams [7,28].\n\nGiven the limited time and the large number of reviews, it is challenging for reviewers to thoroughly inspect the entire submitted code. Thus, an automated approach that can recommend code review comments for the submitted code would be beneficial to help developers save time. Figure 2 depicts a usage scenario of how our CommentFinder could help reviewers to address this challenge. In step 3 , instead of writing all new code review comments, our CommentFinder recommends code review comments to the reviewers and code authors based on similar code artifacts that have received previous comments. Hence, the reviewers can effectively spend their efforts on reviewing other complex parts of the submitted code, which helps reduce the waiting time of code authors for code review comments and shorten the overall time between each revision of submitted code.\n\n\nThe State-of-the-art Approach on Code Review Comment Recommendation\n\nTufano et al. [61] proposed a deep learning approach to automatically generate code review comments for a given changed methods (i.e., the changed or added methods in the submitted code). The approach by Tufano et al. employs a Neural Machine Translation (NMT) model to learn the mapping between an input sequence of the source code in a given changed method and an output sequence of a human-written code review comment associated with that changed method. To do so, Tufano et al. use a Text-To-Text Transfer Transformer (T5) architecture [43] to build a pre-trained language model based on a large text corpus from Stack Overflow and a large codebase from CodeSearchNet [23]. Then, they build a DL-based code review recommendation model by fine-tuning their pre-trained T5 model on their code review dataset (i.e., a corpus of code-comment pairs). Finally, they apply their fine-tuned T5 model on the testing dataset to generate code review comments. Although the Tufano et al. approach achieves promising results, its deep learning approach is still expensive in terms of computational time and resources. Many studies [16,20,30,33] found that simpler approaches may perform similar or better than the DLbased approaches for various software engineering tasks. For example, Hellendoorn et al. [20] found that a careful implementation of natural language process approaches like N-gram could outperform the deep learning approaches. Liu et al. [30] introduced a simple nearest-neighbor approach that achieves better performance than the state-of-the-art neural machine translation approach. Pornprasit and Tantithamthavorn [40] proposed a simple JITLine approach to identify the defective lines, which outperforms a DL-based approach CC2Vec [21]. Yet, little is known about whether a simpler approach can achieve higher accuracy than Tufano et al. [61] for the code review comment recommendation task.\n\n\nCOMMENTFINDER: A RETRIEVAL-BASED CODE REVIEW COMMENT RECOMMENDATION APPROACH\n\nIn this section, we present an overview of our CommentFinder. The goal of our CommentFinder is to recommend code review comments to the given changed methods. The underlying intuition in this paper is that similar submitted codes are likely to receive similar code review comments.\n\nOverview. CommentFinder leverages an Information Retrieval (IR) technique to recommend code review comments. Unlike deep learning techniques, IR techniques do not require the model training phase which will substantially save computational time. Similar to prior work [61], CommentFinder takes a changed method in the testing data as input. This given changed method will be used as a query to search for similar changed methods in the training dataset. Specifically, the given changed method and the changed methods in the training data will be represented in a form of code token vectors based on the Bag-of-Words model. Then, CommentFinder computes the distances between the vector of the given changed method and each of the vectors of the changed methods in the training dataset. The ten nearest changed methods will be retrieved. Since the Bag-of-Words model does not consider the order of the code tokens (i.e., considering only the frequencies), we use a text similarity metric called Gestalt Pattern Matching (GPM) to measure the similarity between the given changed method and the ten retrieved changed methods while taking the order of the code tokens into account. Then, the code review comments of the most similar changed methods based on GPM will be recommended as code review comments for the given changed method. Figure 3 provides an overview of our approach which consists of three main steps. We describe the details of each step below.\n\n(Step 1) Changed Method Vectorization. We represent all changed methods in the training dataset and test dataset as vectors using the Bag-of-Words model. To do so, we perform code tokenization to break each changed method into a sequence of code tokens. As suggested by Rahman et al. [44], we remove punctuation characters to ensure that the code tokens will not be artificially repetitive. After that, for each method, we convert the sequence of code tokens into the frequency vector of code tokens using the Countvectorize function of the Scikit-Learn Python library [39]. Since our studied programming language is case-sensitive, we neither perform lowercase nor techniques to reduce inflectional forms (i.e., stemming and lemmatization). Otherwise, the meaning of code tokens may be discarded. The vocabulary size is a common concern when using a Natural Language Processing (NLP) approach for predictions. To reduce the dimensions of our code token vector, we remove the code tokens that commonly appear across the methods (i.e., tokens that appear more than 50% of methods).\n\n(\n\nStep 2) Changed Methods Retrieval. To retrieve the similar changed methods from the training dataset for a given changed method in the test dataset, we compute the cosine distance between the code token vector of the given method and each of the code token vectors of changed methods in the training dataset. The cosine distance is a mathematical model that estimates the lexical similarity between two text documents (i.e., changed methods in our context) [1,30,48]. Given the code token vectors of the changed methods (i.e., M train , M test ), the cosine distance using a calculation of 1 \u2212 M train \u00b7M test \u2225M train \u2225 \u2225M test \u2225 . The lower cosine distance indicates that the two methods have a higher lexical similarity. In this work, we use the SequenceMatcher function implemented in the difflib Python library to compute the cosine distance between the changed methods. Then, the ten nearest methods (i.e., the lowest cosine distance) will be retrieved from all the changed methods in the training dataset.\n\n(\n\nStep 3) Comment Recommendation. Based on our intuition, the code review comments associated with the retrieved changed method from Step 2 should be able to be recommended as code review comments for the given changed method in the testing data. However, the cosine distance model does not consider the order of the tokens. It is possible that the order of code tokens of retrieved changed methods may be different (which can be syntactically different) from the given method. Therefore, we use a text similarity approach called Gestalt Pattern Matching (GPM) to measure the text similarity and take the order of code tokens into account. Given a changed method and each of the ten retrieved methods, GMP first finds all the longest common substrings (LCSs) between the source code of the two methods. Then, it counts the total number of matching characters (i.e., N common ) in the common substrings. Then, the text similarity score is calculated using a formula of 2\u00d7N common N changed +N retrieved , where N changed is the number of characters in the changed method and N retrieved is the number of characters in the similar method. Note that in this step, we use the actual source code of the methods without performing any preprocessing to reserve semantical and syntactical information of the code based on the GPM scores, the ten retrieved methods are then ranked. A changed method with the highest text similarity score is regarded as the most similar changed method for the given method in the test dataset. After that, the code review comments of the most similar methods based on GPM will be used as the recommended code review comments for the given method.\n\n\nEXPERIMENTAL SETUP\n\nIn this section, we present the motivation for our research questions and describe the experimental dataset and our evaluation measures.\n\n\nResearch Questions\n\nTo evaluate our CommentFinder, we formulate the following three research questions.\n\n(RQ1) How Effective is the CommentFinder Compared to the State-of-the-art Approach? Motivation. In this work, we propose CommentFinder to automatically recommend code review comments for given changed methods. Unlike the state-of-the-art approach [61] which leverages a deep learning technique, CommentFinder leverages an IR technique to recommend code review comments by retrieving similar changed methods in the training dataset. Our underlying intuition is that similar submitted codes are likely to receive similar code review comments. Hence, we formulate this RQ to evaluate whether our Com-mentFinder can recommend the code review comments that  \n\n\nExperimental Dataset\n\nIn this work, we use the same training and testing datasets as used in the work of Tufano et al. [61] for a fair comparison between our CommentFinder and the Tufano et al. approach. Table 1 describes the statistics of the dataset. The dataset consists of 151,019 changed methods from 4,901 GitHub projects and 6,388 Gerrit projects. For each changed method, it includes a pair of source code of a changed method and a code review comment. To minimize noises in the dataset, Tufano et al. have carefully curated and verified through a rigorous data cleansing and manual examination to exclude nonreviewer comments (i.e., written by the authors or automatically generated by bots), non-relevant comments (e.g., \"looks good to me\", \"\n\nLGTM\", \"thank you\"), and non-English comments. For changed methods in their dataset, at the median, the length of tokens and the length of characters in the changed method are 46 and 537. For code review comments in their dataset, at the median, the length of tokens and the length of characters in code review comments are 13 and 80. In addition, 7.5% of changed methods share the duplicate code review comments as other changed methods. We found that the majority of duplicate comments are a reserved programming language keyword (i.e., \"final\" for Java) that appears 133 times in the dataset.\n\n\nEvaluation Measures\n\nTo evaluate the performance of our CommentFinder and Tufano et al. approach, we measure the number of changed methods that achieve a perfect prediction (PP), i.e., the recommended comment exactly matches the ground truth (i.e., the actual code review comment provided by a reviewer). In our work, we use four different best-candidates (i.e., = 1, 3, 5, 10) for recommended code review comments. If one of candidates exactly matches the ground truth, we consider that our CommentFinder achieves a perfect prediction, i.e, the comment is correctly recommended. For the given changed method, to quantify the magnitude of improvement of our CommentFinder, we measure the percentage improvement of the perfect prediction using a calculation of (PP our \u2212PP Tufano )\u00d7100% PP Tufano , where PP our is the number of perfect prediction achieved by our CommentFinder and PP Tufano is the number of perfect predictions achieved by our Tufano et al. approach.\n\nBesides calculating the perfect prediction, we also compute the BLEU (Bilingual Evaluation Understudy) scores between our recommended code review comments and the ground truths [38]. BLEU evaluates how textually similar the recommended code review comment is to the ground truth. A BLEU score value of 1 indicates that the recommended comment is identical to the ground truth. In our work, we use the BLUE-4 variant (N-gram precision is 4). We also quantify the percentage improvement of BLEU score using the calculation of (BLEU our \u2212BLEU Tufano )\u00d7100% BLEU Tufano\n\n, where BLEU our is the mean of the BLEU score achieved by our CommentFinder and BLEU Tufano is the mean of the BLEU score achieved by the Tufano et al. approach\n\n\nEXPERIMENTAL RESULTS\n\nIn this section, we present approaches and results with respect to our three research questions.\n\n(RQ1) How Effective is the CommentFinder Compared to the State-of-the-art Approach?\n\nApproach. In our RQ1, we evaluate how well our CommentFinder can recommend the code review comments given changed methods, comparing against Tufano et al. approach [61]. In order to establish a fair comparison, we use the same training and test dataset as Tufano et al. 's work (see Table 1). Then, we use CommentFinder to recommend code review comments for each of changed methods in the test dataset. For each recommendation, CommentFinder provides best-candidates (i.e., the code review comments of the most similar methods in the training dataset based on GPM). Finally, we measure the accuracy of CommentFinder and the Tufano et al. 's approach based on the two measures (i.e., Perfect prediction and BLEU score).\n\nResult. Table 2 presents the results of CommentFinder and the Tufano et al. approach for 16,780 changed methods. We measure the results based on four tiers of best-candidates ( = 1, 3, 5, 10), where is the number of recommended code review comments for a given changed method.\n\nOur CommentFinder achieves a perfect prediction 32%-51% higher than Tufano et al. approach. Table 2 shows the accuracy of our CommentFinder and the Tufano et al. approach. We find that when the best-candidate is 1, our CommentFinder achieves the perfect prediction for 470 changed methods. The Tufano et al. approach achieves the perfect prediction for 356 changed methods. This result shows that our CommentFinder achieves the perfect prediction 32% higher than the Tufano et al. approach. When the number of the best candidates is 3, 5, and 10, respectively, comparing with the Tufano et al. approach, the perfect predictions of our CommentFinder increase by 49%-51% (see Table 2). These results indicate that CommentFinder substantially outperforms the Tufano et al. approach.\n\nFor the mean of BLEU score, our Com-mentFinder achieves 3%-28% higher than the Tufano et al. approach. Table 2 shows that for the best-1 candidate, CommentFinder achieves a mean BLEU score of 0.124, while the Tufano et al. approach achieves the mean BLUE score of 0.12. which is 3% lower than CommentFinder. Even when we increase the number of best candidates to 3, 5, and 10, our CommentFinder can achieve a higher BLEU score than the Tufano et al. approach by 22% for the best-3 candidates, 27% for the best-5 candidates, and 28% for the best-10 candidates. These results suggest that the quality of the code review comments recommended by CommentFinder is better than the Tufano et al. approach.\n\nSummary: CommentFinder achieves perfect predictions 32% -51% and BLEU scores 3% -28% higher the Tufano et al. approach. These results suggest that CommentFinder can effectively recommend code review comments that are the same or similar to the actual code review comments written by reviewers than the state-of-the-art approach.   (RQ3) What is the Impact of Similarity Techniques on the Effectiveness and Efficiency of CommentFinder?\n\n\n(RQ2) How Efficient is the\n\nApproach. To address RQ3, we conduct two experiments to examine the perfect prediction and computational time when the distance metric used in Step 2 and the text similarity metric used in\n\nStep 3 of CommentFinder are varied. Specifically, we vary the distance metrics from the cosine distance to the other two commonlyused distance metrics: (1) Euclidian distance and (2) Manhattan distance [9]. For the text similarity metrics, we vary from GPM to the other five commonly-used metrics: (1) Normalized Levenshtein (NL), (2) Metric Longest Common Subsequence (MLCS), (3) Damerau-Levenshtein (DL), (4) Levenshtein (L), and (5) Jaro-Winkler (JW) [3,29,65,67,69]. Note that when we analyze the impact of the distance metrics, we keep using the original text similarity measure (i.e. GPM). Therefore, we measure the accuracy and computational time for (1) Euclidean Distance + GPM and (2) Manhattan Distance + GPM. Similarly, when we analyze the impact of the text similarity measure, we keep using the original distance metrics (i.e., cosine distance). Hence, we measure the accuracy and computational time for other five combinations: (1) Cosine distance + NL, (2) Cosine distance + MLCS, (3) Cosine distance + DL, (4) Cosine distance + L, and (5) Cosine distance + JW. The analysis results are based on the best-1 candidate.\n\nResults. Table 4 presents the perfect predictions and computational time of our CommentFinder (Cosine distance + GPM) and the seven additional combinations.\n\nWhen using Euclidean or Manhattan distances instead of cosine distance, the perfect predictions decrease by 4% -12%. Table 4 shows that comparing against our CommentFinder, the perfect prediction decreases by 12% and 4% when using Euclidean distance and Manhattan distance instead of the cosine distance. We also observe that the computational time of these two combinations also increases (i.e., 50%). This result highlights that the accuracy and computational time are moderately impacted when the distance metric of CommentFinder is changed to Euclidean or Manhattan distances.\n\nWhen using the other five commonly-used text similarity metrics instead of GPM, the computational time increases by 425% -25,750%. Table 4 shows that the computational time increases by 425% -25,750% when the text similarity metric is changed from GPM to the other techniques. For example, when Damerau-Levenshtein (DL) is used, the computational time increases by 25,750%, and the perfect prediction also decreases by 6%. Although Table 4 shows that the use of Normalized Levenshtein (NL) could slightly increase the perfect prediction (i.e., 1% increase), this technique takes significantly computational time compared to GPM (i.e., 10,825% increase). Therefore, when considering both accuracy and computational time, GPM performs the best among the studied text similarity metrics. This result suggests that the choice of text similarity metrics can have a large impact on the computational time for our approach. Summary: When the distance and text similarity metrics are changed to the other commonly-used metrics, the computational time significantly increases by 425% -25,750%, while the accuracy is slightly changed (i.e., 1% -9%). These results suggest that the choice of text similarity metrics plays an important role in the efficiency of CommentFinder, and the use of cosine distance and GPM is the most cost-effective combination for CommentFinder.\n\n\nDISCUSSION\n\nIn this section, we discuss the experimental results, the contributions, and the limitation of our CommentFinder.\n\n\nResult Discussion\n\nWe now further discuss the performance of CommentFinder based on the experimental results. Why does CommentFinder can effectively and efficiently recommend code review comments? Our RQ1 results highlight that we can recommend code review comments by retrieving similar changed methods. Figure 4 presents an example of the correctly recommended code review comment by CommentFinder. The red text highlights the common substrings identified by GPM between the given method in the test dataset and the most similar method in the training dataset, confirming that both methods are very similar and receive the same concern. However, measuring the text similarity for the whole training dataset can be time-consuming. This highlights the benefit of using the cosine distance and the Bag-of-Words model to save computational time by retrieving a small set of nearest methods before measuring the character-wise text similarity of GPM. The results of RQ2 also show that the cosine distance takes only 1 minute to retrieve the ten nearest changed methods for each of the changed methods in the testing dataset. Lastly, our RQ3 also confirms that the cosine distance and GPM used by our CommentFinder is more cost-effective than the other commonly-used distance metrics and text similarity metrics.\n\nAre the code review comments that are incorrectly recommended by CommentFinder still considered valuable for the submitted code? Although our RQ1 has shown that Com-mentFinder achieves perfect predictions (i.e., can correctly recommend code review comments) higher than the Tufano et al. approach, it is possible that the incorrect recommendations (i.e., nonperfect predictions) may also provide the comments that are semantically equivalent to the actual comments written by reviewers.\n\nHence, similar to the prior work [61], we manually examine a sample of 100 changed methods to gain intuition on the number of valuable recommendations. Since we want to compare the manual result with the Tufano et al. approach, we use the same sample as used in the prior work, which is provided in their replication package [61]. We classify the code review comments recommended by Com-mentFinder into one of the four categories: (1) perfect prediction, i.e., the recommended code review comment is exactly the same as the actual comment written by reviewers; (2) semantically equivalent, i.e., the recommended code review comment is semantically equivalent to the actual comment; (3) alternative solution, i.e., the recommended code review comment is not semantically equivalent to the actual comment but valuable for the submitted code; and (4) incorrect, i.e., the recommended code review comment is not meaningful for the submitted code. Table 5 presents the results of our manual analysis on the recommendations of CommentFinder. Although in most cases, the recommended code review comments of CommentFinder are considered incorrect, it is worth noting that our CommentFinder can recommend the correct code review comments (i.e., perfect prediction) for four changed methods while the Tufano et al. approach cannot. We also observe that 39% of the code review comments recommended by CommentFinder are considered valuable (i.e., 30% for semantically equivalent and 9% for alternative solution).     Figure 6 provides an example of the alternative solution code review comment recommended by Com-mentFinder, showing that the recommended comment is different but still relevant to the submitted code.\n\n\nContributions\n\nBelow, we discuss how our work will be beneficial to researchers and practitioners.\n\nFor researchers. Our results show that CommentFinder which leverages an information retrieval technique performs better than the Tufano et al. approach which leverages a deep learning technique. Prior studies [16,20,30,33] also show that a simple approach can outperform the DL-based approach in other software engineering tasks. For example, Liu et al. [30] proposed a -nearest neighbor approach to automatically generate the commit message which outperforms the neural machine translation approach. Fu et al. [16] and Majumder et al. [33] aim to link the related questions in a programmer discussion forum with simple approaches. Fu et al. [16] showed that their approach is 84 times faster than the deep learning approach. In addition, Majumder et al. [33] introduced an approach that has similar performance as the deep learning approach but it is over 500 times faster. Therefore, based on our results and prior studies, simple automated solutions should be first also be considered for software engineering tasks.\n\nFor practitioners. Our results highlight the potential of Com-mentFinder to reduces human effort during the code review process by recommending code review comments. Moreover, compared with the deep learning approach, CommentFinder requires much less computational time, which is often preferred by underresourced software organizations [13]. In addition, as our Com-mentFinder is a simple approach, it will be easier to implement and deploy, increasing the chance to be adopted by practitioners [16,33]. Nevertheless, our CommentFinder is designed for recommending a code review comment for a given changed method. The recommendation of code review comment for the finer granularity of source code (e.g., line level) may help developers better focus on the smaller scope of source code [22,40,64]. Hence, to increase the likelihood of adopting the approach in the practice, future work should further investigate a code review recommendation approach for the finer grain of source code.\n\nIt also is important to note that the ultimate goal of our work is to support developers on repetitive tasks, not to fully automate the code review process. Therefore, developers still play an important role in the code review process. In addition, at the current stage of the work, CommentFinder would be suitable for software components that tolerate false positives as it is still a long way for research to achieve highly accurate code review comment recommendations.\n\n\nLimitation\n\nAlthough our results have highlighted that CommentFinder is more effective and efficient than the Tufano et al. approach, the key limitation of CommentFinder is that it cannot generate a new code review comment. In other words, CommentFinder highly relies on the existing code review comments in the training dataset. If the submitted code is completely different from the submitted code in the training data, it is likely that CommentFinder will cannot recommend correct code review comments. On the other hand, the deep learning approach can learn the patterns between the submitted code and code review comments. Thus, it can generate a new code review comment which may be valuable. Table 5 also shows that the deep learning approach of Tufano et al.can recommend more code review comments that are considered semantically equivalent or alternative solutions than our approach. Therefore, to improve the accuracy, future work should consider investigating approaches to leverage both retrieval-based and deep learning-based techniques for code review comment recommendation.\n\n\nRELATED WORK\n\nIn this section, we discuss the empirical studies related to code review to properly define the scope of our work and discuss the technological studies for automated code review to define the novelty of our work.\n\nCode Review Comments. Prior studies found that code review comments from reviewers play a major role in the code review process in order to guide code authors to improve the quality of their submitted code [2,28]. For example, Bacchelli et al. [2] found that the quality of code reviews is highly associated with code review comments. Many studies found that they play an important role in finding software defects [8,34] or designing impactful changes in the source code [63]. However, it is common for reviewers to spend a substantial amount of effort in writing high-quality code review comments. The survey study of Kononenko et al. [28] also showed that providing code review feedback can be slow or not responsive due to the required amount of effort that reviewers have to spend.\n\nMotivated by the findings of the prior work, this paper aims to address this challenge by proposing an automated approach that recommends code review comments for the repetitive parts of source code in order to reduce manual effort, enabling the reviewers to effectively spend time focusing on the more complex and critical parts of the software system.\n\nAI for Code Review. Although modern code review is widely used in practice at various organizations, the code review practice is still manual and expensive. Thus, recent works leverage many Artificial Intelligence (AI) techniques to speed up the code review process. Importantly, prior studies proposed various recommendation approaches for the code review process. For example, code review prioritization approaches based on the characteristics of code changes [11,32,57] and the defect-proneness [14, 25\u015b27, 35, 40\u015b 42, 45, 51\u015b54, 64], reviewer recommendation approaches [4,19,55,59,66,68], automated code transformation [15,58,60,62].\n\nDifferent from prior studies, this paper focuses on the code review comments recommendation task, which is currently rarely explored in software engineering, highlighting the significant contributions and novelty of our CommentFinder.\n\nCode Review Comments Recommendation. There exist a few approaches for code review comments recommendation. For example, Guo et al. [17] implemented a review-sharing approach to recommend the code review comments based on Convolutional Neural Network (CNN). Gupta et al. [18] presented a deep learning based-approach called DeepCodeReviewer that learns the relevance of a code snippet and recommends a code review comment from a repository of common comments. Siow et al. [50] proposed CORE, which is a deep learning-based code review comment recommendation approach that leverages a multi-level embedding and an attentional Long Short-Term Memory (LSTM) model. Later, Tufano et al. [61] leverages a modern and more advanced deep learning architecture called T5 [43] to automatically recommend code review comments. Different from prior code review comments recommendation approaches, this paper is the first to propose a retrieval-based code review comments recommendation approach. Our results demonstrate that our CommentFinder is more efficient and effective than the state-of-the-art approach, i.e., the Tufano et al. approach [61], highlighting that a simpler solution like using an IR technique can achieve higher accuracy than a sophisticated DL-based approach. Moreover, the simplicity of the approach is often preferred by practitioners, especially for under-resourced organization [16].\n\n\nTHREATS TO VALIDITY\n\nAlthough we carefully design the experiment to ensure that our results are robust, there can be possible threats to the validity of our results and conclusions. Below, we discuss threats that may impact the results of our study.\n\nThreats to the external validity relate to the degree to which our findings can be generalized to and across other projects and contexts. Our experiment is based on the large-scale dataset of 151,019 changed methods that span across a total of 11,289 software projects, which is provided by Tufano et al. [61]. Yet, these studied software projects mainly use the Java programming language. Hence, it is possible that our results may not be generalized to software projects that use other programming languages.\n\nThreats to the construct validity relate to the granularity level of code changes, the quality of datasets, and the baseline selection. Our CommentFinder is specifically designed to work at the method level for a fair comparison with the Tufano et al. approach which is also designed for recommending a code review comment for a given changed method [61], The results of our CommentFinder may be different for the different source code granularity (e.g., line level). Thus, the performance of our CommentFinder may need to be revisited when the granularity of the source code is changed.\n\nThe quality of datasets may impact the results of our Com-mentFinder. However, we note that Tufano et al. performed rigorous data cleaning and data filtering steps to mitigate the noise in the datasets (e.g., removing non-English code review comments, duplicated code review comments, bot comments). Yet, unknown noise may still creep into the studied datasets, which may impact the results of our CommentFinder. Thus, future work should further discover unknown noise and explore how do they impact code review recommendation approaches.\n\nWhile all these four approaches show efficiency in recommending the code review comments, we only select Tufano et al. 's approach as the baseline in our work due to the following reasons. On the one hand, Tufano et al. 's approach is based on a transformer which is known to be more efficient and effective than the techniques (i.e., CNN and LSTM) employed by the other three approaches. On the other hand, unlike the other three approaches, Tufano et al. 's work is publicly available. Thus, to\n\nWe select Tufano et al. [61] as a baseline comparison, instead of other code review recommendation approaches [17,18,50] due to the following reasons. First, Guo et al. [17] employed a CNN-based approach, and Siow et al. [50] and Gupta [18] leveraged an RNNbased NMT approach (e.g., Word Embedding and Long Short-Term Memory), which are known to be less accurate than Transformerbased NMT approach used by Tufano et al. [61]. Second, the work of Tufano et al. [61] is publicly available, whereas the other three approaches [17,18,50] are not public. Selecting the publicly accessible approach as the baseline approach could mitigate the bias when reproducing the result of the baseline approach and increase the transparency for the experimental result comparison. Thus, Tufano et al. [61] is likely to be the most competitive baseline.\n\nThreats to the internal validity relate to the text similarity component of our CommentFinder. Our CommentFinder employs the cosine distance and Gestalt Pattern Matching (GPM) techniques to retrieve and rank the similar changed methods in the training dataset for a given method in the testing dataset. However, other text similarity metrics may impact the recommendations of our CommentFinder. Although our RQ3 examines this potential impact, our analysis is based on three commonly-used distance metrics and six commonly-used text similarity metrics. Finding an optimal text similarity metric can be very computationally expensive. Instead, the main goal of our work is not to find the best text similarity metric for our CommentFinder, but to demonstrate that a retrieval-based approach can outperform the deep learning-based approach for the code review comment recommendation.\n\n\nCONCLUSION\n\nWith the goal of helping developers save the code review effort, recent work proposed a Deep Learning (DL)-based approach [61] to recommend code review comments based on a given changed method. However, several studies raised concerns that the DL techniques are often complex and expensive in terms of computational time, hindering the adoption of the approach in the practice. Hence, in this paper, we propose CommentFinder \u00d0 a retrieval-based code review recommendation approach. Unlike the prior work, CommentFinder leverages an Information Retrieval (IR) technique to recommend code review comments by retrieving similar changed methods. Our underlying intuition is that the similar submitted code is likely to receive similar comments. Through an empirical evaluation based on 151,019 changed methods spanned across 11,289 software projects, our results show that our CommentFinder can accurately recommend code review comments with perfect predictions for 470 -619 changed methods which are 32% -51% higher than the state-of-the-art approach. Moreover, in terms of the total computational time, CommentFinder is 49 times faster than the prior work. These results highlight that our CommentFinder is more effective and efficient than the state-of-the-art approach. Based on the results, our CommentFinder could potentially be beneficial to developers to reduce review effort by recommending code review comments for the repetitive parts of source code, enabling the reviewers to effectively spend time focusing on the more complex and critical parts.\n\nAlthough our CommentFinder provides a substantial improvement for the code review comment recommendation, we acknowledge that it is still a long way for researchers to develop a highly accurate and efficient code review comment recommendation approach. To increase the adoption in the practice, future work should explore approaches that recommend code review comments to any kind of source code (even for the completely different one) with a finer granularity (e.g., line level) and with lower false positives.\n\nACKNOWLEDGEMENT Chakkrit Tantithamthavorn was supported by the ARC's Discovery Early Career Researcher Award (DE200100941). Patanamon Thongtanunam was supported by the ARC's Discovery Early Career Researcher Award (DE210101091).\n\nFigure 1 :\n1An example of a code review comment for a code snippet in the Android project.\n\nFigure 2 :\n2A usage scenario of CommentFinder in the code review process.\n\nFigure 3 :\n3An overview of CommentFinder for recommending the code review comments.\n\nFigure 4 :\n4An example of the correctly recommended code review comment by CommentFinder.\n\nFigure 5 :\n5An example of the semantically equivalent code review comment recommended by CommentFinder.\n\nFigure 6 :\n6An example that recommended by Com-mentFinderas alternative solution code review comment.\n\nFigure 5\n5provides an example of the semantically equivalent code review comment that is recommended by CommentFinder, showing that both actual and recommended comments have the same underline meaning or intention.\n\n\nHow Effective is the CommentFinder Compared tothe State-of-the-art Approach? \nResults. CommentFinder can correctly recommend code \nreview comments for 470 -619 changed methods which \nare 32% -51% higher than the Tufano et al. approach (i.e., \n356 -410 changed methods). In addition, with respect to the \nBLEU score (i.e., a measure to evaluate the similarity of the \nrecommended code review comments against the ground \ntruth), CommentFinder achieves a mean BLEU score 3%-\n28% better than the state-of-the-art approach, indicating that \nCommentFinder can recommend code review comments \n\nthat are more similar to the actual code review comments \nwritten by reviewers than the state-of-the-art approach. \n(RQ2) How Efficient is the CommentFinder Compared to \nthe State-of-the-art Approach? \nResults. CommentFinder requires a total computational \ntime of 4 minutes. The state-of-the-art approach, on the other \nhand, requires a total computational time of 194 minutes for \ntraining and recommending code review comments. This \nresult shows that CommentFinder is 49 times faster than \nthe state-of-the-art approach, highlighting the efficiency of \nCommentFinder. \n(RQ3) What is the Impact of Similarity Techniques on the \nEffectiveness and Efficiency of CommentFinder? \nResults. When changing the distance metric from the co-\nsine distance to the other two commonly-used metrics, the \naccuracy decreases by 4% -12%, and the computational time \nincreases by 50%. Similarly, when changing the text similarity \nmetric from GPM to the other five commonly-used metrics, \nthe computational time significantly increases (i.e., 425% -\n25,750%) while the accuracy is slightly changed (i.e., 1% -9%). \nThese results suggest that while the distance metric can have \na small impact on the effectiveness of CommentFinder, the \nchoice of the text similarity metrics plays an important role \nin the efficiency of CommentFinder. \n\n\n\nTable 1 :\n1The statistics of the experimental dataset obtained from the prior work[61]. are the same (or similar) as the actual code review comments written by reviewers. (RQ2) How Efficient is the CommentFinder Compared to the State-of-the-art Approach? Motivation. Several studies raised concerns that deep learning techniques are often complex and expensive in terms of computational time[24,33,40]. For example, a prior study shows that the DL-based approach for automatically generating a commit message requires 38 hours for training the models[24]. Since the IR technique used in our Com-mentFinder does not require model training, we hypothesize that this will substantially reduce the computational time. Thus, we formulate this RQ to evaluate the efficiency of CommentFinder and the state-of-the-art approach[61] in terms of computational time. (RQ3) What is the Impact of Similarity Techniques on the Effectiveness and Efficiency of CommentFinder? Motivation. To recommend code review comments, Com-mentFinder leverages the cosine distance to retrieve the ten nearest changed methods and GPM to identify the most similar changed methods. Although other distances and text similarity metrics are available, they may provide different results. Yet, little is known about the impact that these similarity techniques can have on the effectiveness and efficiency of our CommentFinder. Hence, we formulate this RQ to further investigate the possible impact when the distance metrics or text similarity metrics in CommentFinder are changed.#Pairs of \nChanged Methods and \nCode Review Comments \n\n#Vocabulary \nSize \n\n#Code Tokens \n#Characters \n\n1 st Q Med 3 rd Q 1 st Q Med 3 rd Q \n151,019 \n(Training:134,239; Test: 16,780) \n\nChanged Methods \n637,343 \n25 \n46 \n78 \n290 \n537 \n924 \nCode Review Comments \n-\n7 \n13 \n23 \n43 \n80 \n142 \n\n\n\n\nCommentFinder Compared to the State-of-the-art Approach? Approach. To address this RQ, we examine the computational time required by CommentFinder and the Tufano et al. approach. To measure the computational time for CommentFinder, we measure the time required to recommend code review comments for all changed methods in the test dataset. We run the experiment for CommentFinder on a machine with AMD Ryzen 9 5950X CPU and 64GM of RAM. To ensure that our measurement is accurate, we reserve all resources for our experiment with no other tasks running. To measure the computational time of the Tufano et al. approach, we follow the implementation of the Tufano et al. approach and reproduce their experiment on Google Colaboratory. 2 Since the Tufano et al. approach requires Tensor Processing Units (TPU)3 to train the deep learning model. For the testing phase, we run the deep learning model of Tufano et al. on the same machine which also has an NVIDIA GeForce RTX 3090 for GPU. The computational time is measured based on recommending the best-1 candidate. Note that for the Tufano et al. approach, we use the same hyper-parameter setting (e.g., batch size, learning rate) as the prior work[61]. We also do not measure the computational time for building a pre-trained model in the Tufano et al. approach because this pre-trained model can be re-used.Result. Our CommentFinder is 49 times faster than the Tufano et al. approach for recommending the code review comments.Table 3presents the computational time of our Com-mentFinder and the Tufano et al. approach. As described in Section 3, CommentFinder is based on the IR approach which does\n\nTable 2 :\n2The accuracy of our CommentFinder comparing to Tufano et al. approach. The percentage value in the parenthesis indicates the percentage improvement of our CommentFinder.Approach \nBest-candidates = 1 Best-candidates = 3 Best-candidates = 5 Best-candidates = 10 \n\n#PP \nMean of \nBLEU score \n#PP \nMean of \nBLEU score \n#PP \nMean of \nBLEU score \n#PP \nMean of \nBLEU score \nOur approach \n470 0.124 \n566 0.183 \n605 0.209 \n619 0.238 \nTufano et al. [61] 356 0.120 \n381 0.150 \n402 0.164 \n410 0.186 \n% Accuracy \nImprovement \n32% 3% \n49% 22% \n50% 27% \n51% 28% \n\n\n\nTable 3 :\n3Computational Time of CommentFinder and the Tufano et al. approach minutes to recommend code review comments for all the changed methods in the testing dataset, while the Tufano et al. approach takes 32 minutes. In total, our CommentFinder required 4 minutes which is 49 times faster than the Tufano et al. approach with a total computational time of 194 minutes. These results indicate that CommentFinder is more efficient than the Tufano et al. approach in terms of requiring less computational time.Summary: CommentFinder takes a total computational time of four minutes to recommend code review comments for all changed methods in the testing dataset, which is 49 times faster than the Tufano et al. approach. This result shows that Com-mentFinder requires significantly less computation time, highlighting it is more efficient than the state-of-the-art approach.Approach \nTotal Time \nTraining Phase \nTesting Phase \nDevice Training Time Device \nTesting Time \nCommentFinder 4 min \n-\n-\nCPU \n1 min (Cosine distance) + 3 min (GPM) \nTufano et al. \n194 min \nTPU \n162 min \nRTX 3090 32 min \n\nnot require a training phase. Hence, we do not have the computa-\ntional time for training. On the other hand, Table 2 shows that the \nmodel training time of the Tufano et al. DL-based approach takes \n162 minutes. In addition, for the testing phase, our approach takes 4 \n\n\nTable 4 :\n4The perfect prediction and computational time of the different combinations; and the percentage change compared to CommentFinder.Combination \n#PP Computational Time (minutes) \nCommentFinder \n470 \n4 \n(Cosine + GPM) \nDistance \nMetrics \n\nEuclidean + GPM \n414 (-12%) \n6 (+50%) \nManhattan + GPM \n450 (-4%) \n6 (+50%) \n\nText \nSimilarity \n\nCosine + NL \n477 (+1%) \n437 (+10,825%) \nCosine + MLCS \n464 (-1%) \n405 (+10,025%) \nCosine + DL \n443 (-6%) \n1034 (+25,750%) \nCosine + L \n443 (-6%) \n438 (+10,850%) \nCosine + JW \n428 (-9%) \n21 (+425%) \n\n\n\nTable 5 :\n5The manual analysis of the code review comments recommended by our CommentFinder and Tufano et al. approach based on the 100 sampled changed methods.Category \nCommentFinder Tufano \nPerfect prediction \n4 \n0 \nSemantically Equivalent 30 \n36 \nAlternative Solution \n9 \n10 \nIncorrect \n57 \n54 \n\n\nhttps://android-review.googlesource.com/c/device/google/cuttlefish/+/1486302/2/ tests/recovery/src/com/android/cuttlefish/tests/RecoveryTest.java\nhttps://research.google.com/colaboratory/faq.html 3 https://colab.research.google.com/github/zaidalyafeai/Notebooks/blob/master/ GPUvsTPU.ipynb#scrollTo=5moeHHv4shGw\n\nRecovering traceability links between code and documentation. Giuliano Antoniol, Gerardo Canfora, Gerardo Casazza, Andrea De Lucia, Ettore Merlo, IEEE transactions on software engineering. 28Giuliano Antoniol, Gerardo Canfora, Gerardo Casazza, Andrea De Lucia, and Et- tore Merlo. 2002. Recovering traceability links between code and documentation. IEEE transactions on software engineering 28, 10 (2002), 970\u015b983.\n\nExpectations, outcomes, and challenges of modern code review. Alberto Bacchelli, Christian Bird, Proceedings of the International Conference on Software Engineering (ICSE). the International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEE PressAlberto Bacchelli and Christian Bird. 2013. Expectations, outcomes, and chal- lenges of modern code review. In Proceedings of the International Conference on Software Engineering (ICSE). IEEE Press, San Francisco, CA, USA, 712\u015b721.\n\nAn LCS-based string metric. Daniel Bakkelund, Olso, NorwayUniversity of OsloDaniel Bakkelund. 2009. An LCS-based string metric. Olso, Norway: University of Oslo (2009).\n\nReducing human effort and improving quality in peer code reviews using automatic static analysis and reviewer recommendation. Vipin Balachandran, Proceedings of the International Conference on Software Engineering (ICSE). the International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEEVipin Balachandran. 2013. Reducing human effort and improving quality in peer code reviews using automatic static analysis and reviewer recommendation. In Proceedings of the International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA, USA, 931\u015b940.\n\nFour eyes are better than two: On the impact of code reviews on software quality. Gabriele Bavota, Barbara Russo, Proceedings of IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE International Conference on Software Maintenance and Evolution (ICSME)San Francisco, CA, USAIEEEGabriele Bavota and Barbara Russo. 2015. Four eyes are better than two: On the impact of code reviews on software quality. In Proceedings of IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, San Francisco, CA, USA, 81\u015b90.\n\nModern code reviews in open-source projects: Which problems do they fix. Moritz Beller, Alberto Bacchelli, Andy Zaidman, Elmar Juergens, Proceedings of the working conference on mining software repositories (MSR). the working conference on mining software repositories (MSR)New York, NY, USAAssociation for Computing MachineryMoritz Beller, Alberto Bacchelli, Andy Zaidman, and Elmar Juergens. 2014. Mod- ern code reviews in open-source projects: Which problems do they fix?. In Proceed- ings of the working conference on mining software repositories (MSR). Association for Computing Machinery, New York, NY, USA, 202\u015b211.\n\nCharacteristics of useful code reviews: An empirical study at microsoft. Amiangshu Bosu, Michaela Greiler, Christian Bird, Proceedings of the IEEE/ACM Working Conference on Mining Software Repositories (MSR). the IEEE/ACM Working Conference on Mining Software Repositories (MSR)San Francisco, CA, USAIEEEAmiangshu Bosu, Michaela Greiler, and Christian Bird. 2015. Characteristics of useful code reviews: An empirical study at microsoft. In Proceedings of the IEEE/ACM Working Conference on Mining Software Repositories (MSR). IEEE, San Francisco, CA, USA, 146\u015b156.\n\nAssessing the Students Understanding and their Mistakes in Code Review Checklists\u015bAn Experience Report of 1,791 Code Review Checklists from 394. Chun Yong Chong, Patanamon Thongtanunam, Chakkrit Tantithamthavorn, Chun Yong Chong, Patanamon Thongtanunam, and Chakkrit Tantithamthavorn. 2021. Assessing the Students Understanding and their Mistakes in Code Review Checklists\u015bAn Experience Report of 1,791 Code Review Checklists from 394\n\nStudents, Proceedings of the International Conference on Software Engineering: Joint Software Engineering Education and Training track (ICSE-JSEET). the International Conference on Software Engineering: Joint Software Engineering Education and Training track (ICSE-JSEET)San Francisco, CA, USAIEEEStudents. In Proceedings of the International Conference on Software Engineering: Joint Software Engineering Education and Training track (ICSE-JSEET). IEEE, San Francisco, CA, USA, 20\u015b29.\n\nManhattan Distance. Susan Craw, 10.1007/978-0-387-30164-8_506Springer USBoston, MA, 639\u015b639Susan Craw. 2010. Manhattan Distance. Springer US, Boston, MA, 639\u015b639. https://doi.org/10.1007/978-0-387-30164-8_506\n\nCode reviews do not find bugs. how the current code review best practice slows us down. Jacek Czerwonka, Michaela Greiler, Jack Tilford, Proceedings of the IEEE/ACM IEEE International Conference on Software Engineering (ICSE). the IEEE/ACM IEEE International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEE2Jacek Czerwonka, Michaela Greiler, and Jack Tilford. 2015. Code reviews do not find bugs. how the current code review best practice slows us down. In Proceedings of the IEEE/ACM IEEE International Conference on Software Engineering (ICSE), Vol. 2. IEEE, San Francisco, CA, USA, 27\u015b28.\n\nEarly prediction of merged code changes to prioritize reviewing tasks. Yuanrui Fan, Xin Xia, David Lo, Shanping Li, Empirical Software Engineering. 23Yuanrui Fan, Xin Xia, David Lo, and Shanping Li. 2018. Early prediction of merged code changes to prioritize reviewing tasks. Empirical Software Engineering 23, 6 (2018), 3346\u015b3393.\n\nZhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xiaocheng Feng, Ming Gong, Linjun Shou, Bing Qin, Ting Liu, Daxin Jiang, arXiv:2002.08155Codebert: A pre-trained model for programming and natural languages. arXiv preprintZhangyin Feng, Daya Guo, Duyu Tang, Nan Duan, Xiaocheng Feng, Ming Gong, Linjun Shou, Bing Qin, Ting Liu, Daxin Jiang, et al. 2020. Codebert: A pre-trained model for programming and natural languages. arXiv preprint arXiv:2002.08155 (2020), 1536\u015b1547.\n\nInteractions with big data analytics. Danyel Fisher, Rob Deline, Mary Czerwinski, Steven Drucker, Interactions. 19Danyel Fisher, Rob DeLine, Mary Czerwinski, and Steven Drucker. 2012. Interac- tions with big data analytics. Interactions 19, 3 (2012), 50\u015b59.\n\nLineVul: A Transformerbased Line-Level Vulnerability Prediction. Michael Fu, Chakkrit Tantithamthavorn, 2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR). San Francisco, CA, USAIEEEMichael Fu and Chakkrit Tantithamthavorn. 2022. LineVul: A Transformer- based Line-Level Vulnerability Prediction. In 2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR). IEEE, San Francisco, CA, USA, 608\u015b620.\n\nVulRepair: A T5-Based Automated Software Vulnerability Repair. Michael Fu, Chakkrit Tantithamthavorn, Trung Le, Van Nguyen, Dinh Phung, Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Soft-ware Engineering (ESEC/FSE'22). the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Soft-ware Engineering (ESEC/FSE'22)To AppearMichael Fu, Chakkrit Tantithamthavorn, Trung Le, Van Nguyen, and Dinh Phung. 2022. VulRepair: A T5-Based Automated Software Vulnerability Repair. In In Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Soft-ware Engineering (ESEC/FSE'22). To Appear.\n\nEasy over hard: A case study on deep learning. Wei Fu, Tim Menzies, Proceedings of the Joint Meeting on Foundations of Software Engineering (FSE). the Joint Meeting on Foundations of Software Engineering (FSE)New York, NY, USAAssociation for Computing MachineryWei Fu and Tim Menzies. 2017. Easy over hard: A case study on deep learning. In Proceedings of the Joint Meeting on Foundations of Software Engineering (FSE). Association for Computing Machinery, New York, NY, USA, 49\u015b60.\n\nReview sharing via deep semi-supervised code clone detection. Chenkai Guo, Hui Yang, Dengrong Huang, Jianwen Zhang, Naipeng Dong, Jing Xu, Jingwen Zhu, IEEE Access. 8Chenkai Guo, Hui Yang, Dengrong Huang, Jianwen Zhang, Naipeng Dong, Jing Xu, and Jingwen Zhu. 2020. Review sharing via deep semi-supervised code clone detection. IEEE Access 8 (2020), 24948\u015b24965.\n\nIntelligent code reviews using deep learning. Anshul Gupta, Neel Sundaresan, Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD'18) Deep Learning Day. the 24th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD'18) Deep Learning DayNew York, NY, United StatesAssociation for Computing MachineryAnshul Gupta and Neel Sundaresan. 2018. Intelligent code reviews using deep learning. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD'18) Deep Learning Day. Association for Computing Machinery, New York, NY, United States.\n\nAutomatically recommending code reviewers based on their expertise: An empirical comparison. Christoph Hannebauer, Michael Patalas, Sebastian St\u00fcnkel, Volker Gruhn, Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE). the IEEE/ACM International Conference on Automated Software Engineering (ASE)San Francisco, CA, USAIEEEChristoph Hannebauer, Michael Patalas, Sebastian St\u00fcnkel, and Volker Gruhn. 2016. Automatically recommending code reviewers based on their expertise: An empirical comparison. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, San Francisco, CA, USA, 99\u015b110.\n\nAre deep neural networks the best choice for modeling source code. J Vincent, Premkumar Hellendoorn, Devanbu, Proceedings of the Joint Meeting on Foundations of Software Engineering (ESEC/FSE). the Joint Meeting on Foundations of Software Engineering (ESEC/FSE)New York, NY, USAAssociation for Computing MachineryVincent J Hellendoorn and Premkumar Devanbu. 2017. Are deep neural networks the best choice for modeling source code?. In Proceedings of the Joint Meeting on Foundations of Software Engineering (ESEC/FSE). Association for Computing Machinery, New York, NY, USA, 763\u015b773.\n\nCc2vec: Distributed representations of code changes. Thong Hoang, Hong Jin Kang, David Lo, Julia Lawall, Proceedings of the ACM/IEEE International Conference on Software Engineering (ICSE). the ACM/IEEE International Conference on Software Engineering (ICSE)New York, NY, USAAssociation for Computing MachineryThong Hoang, Hong Jin Kang, David Lo, and Julia Lawall. 2020. Cc2vec: Dis- tributed representations of code changes. In Proceedings of the ACM/IEEE Inter- national Conference on Software Engineering (ICSE). Association for Computing Machinery, New York, NY, USA, 518\u015b529.\n\nWhere Should I Look at? Recommending Lines that Reviewers Should Pay Attention To. Yang Hong, Chakkrit Tantithamthavorn, Patanamon Thongtanunam, Proceedings of IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)San Francisco, CA, USAIEEEYang Hong, Chakkrit Tantithamthavorn, and Patanamon Thongtanunam. 2022. Where Should I Look at? Recommending Lines that Reviewers Should Pay At- tention To. In Proceedings of IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, San Francisco, CA, USA, 1023\u015b1034.\n\nCodesearchnet challenge: Evaluating the state of semantic code search. Hamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, Marc Brockschmidt, arXiv:1909.09436arXiv preprintHamel Husain, Ho-Hsiang Wu, Tiferet Gazit, Miltiadis Allamanis, and Marc Brockschmidt. 2019. Codesearchnet challenge: Evaluating the state of semantic code search. arXiv preprint arXiv:1909.09436 (2019).\n\nAutomatically generating commit messages from diffs using neural machine translation. Siyuan Jiang, Ameer Armaly, Collin Mcmillan, Proceedings of the International Conference on Automated Software Engineering (ASE). the International Conference on Automated Software Engineering (ASE)San Francisco, CA, USAIEEESiyuan Jiang, Ameer Armaly, and Collin McMillan. 2017. Automatically generat- ing commit messages from diffs using neural machine translation. In Proceedings of the International Conference on Automated Software Engineering (ASE). IEEE, San Francisco, CA, USA, 135\u015b146.\n\nAn Empirical Study of Model-Agnostic Techniques for Defect Prediction Models. Jirayus Jiarpakdee, Chakkrit Tantithamthavorn, Hoa Khanh Dam, John Grundy, IEEE Transactions on Software Engineering (TSE). 48Jirayus Jiarpakdee, Chakkrit Tantithamthavorn, Hoa Khanh Dam, and John Grundy. 2020. An Empirical Study of Model-Agnostic Techniques for Defect Prediction Models. IEEE Transactions on Software Engineering (TSE) 48, 1 (2020), 166\u015b185.\n\nA large-scale empirical study of just-in-time quality assurance. Yasutaka Kamei, Emad Shihab, Bram Adams, Ahmed E Hassan, Audris Mockus, Anand Sinha, Naoyasu Ubayashi, IEEE Transactions on Software Engineering. 39Yasutaka Kamei, Emad Shihab, Bram Adams, Ahmed E Hassan, Audris Mockus, Anand Sinha, and Naoyasu Ubayashi. 2012. A large-scale empirical study of just-in-time quality assurance. IEEE Transactions on Software Engineering 39, 6 (2012), 757\u015b773.\n\nMorakot Choetkiertikul, Chaiyong Ragkhitwetsagul, and Thanwadee Sunetnanta. Chaiyakarn Khanan, Worawit Luewichana, Krissakorn Pruktharathikoon, Jirayus Jiarpakdee, Chakkrit Tantithamthavorn, IEEE/ACM International Conference on Automated Software Engineering. IEEEJITBot: An Explainable Just-In-Time Defect Prediction BotChaiyakarn Khanan, Worawit Luewichana, Krissakorn Pruktharathikoon, Ji- rayus Jiarpakdee, Chakkrit Tantithamthavorn, Morakot Choetkiertikul, Chaiy- ong Ragkhitwetsagul, and Thanwadee Sunetnanta. 2020. JITBot: An Explainable Just-In-Time Defect Prediction Bot. In 2020 35th IEEE/ACM International Confer- ence on Automated Software Engineering (ASE). IEEE, San Francisco, CA, USA, 1336\u015b1339.\n\nCode Review Quality: How Developers See It. Oleksii Kononenko, Olga Baysal, Michael W Godfrey, Proceedings of the international conference on software engineering (ICSE). the international conference on software engineering (ICSE)San Francisco, CA, USAIEEEOleksii Kononenko, Olga Baysal, and Michael W Godfrey. 2016. Code Review Quality: How Developers See It. In Proceedings of the international conference on software engineering (ICSE). IEEE, San Francisco, CA, USA, 1028\u015b1038.\n\nBinary codes capable of correcting deletions, insertions, and reversals. Vladimir I Levenshtein, Soviet physics doklady. 10Vladimir I Levenshtein et al. 1966. Binary codes capable of correcting deletions, insertions, and reversals. In Soviet physics doklady, Vol. 10. Soviet Union, 707\u015b710.\n\nNeural-machine-translation-based commit message generation: how far are we. Zhongxin Liu, Xin Xia, Ahmed E Hassan, David Lo, Zhenchang Xing, Xinyu Wang, Proceedings of the International Conference on Automated Software Engineering (ASE). the International Conference on Automated Software Engineering (ASE)New York, NY, USAAssociation for Computing MachineryZhongxin Liu, Xin Xia, Ahmed E Hassan, David Lo, Zhenchang Xing, and Xinyu Wang. 2018. Neural-machine-translation-based commit message generation: how far are we?. In Proceedings of the International Conference on Automated Software Engineering (ASE). Association for Computing Machinery, New York, NY, USA, 373\u015b384.\n\nCode Reviewing in the Trenches. Laura Macleod, Michaela Greiler, Margaret-Anne Storey, Christian Bird, Jacek Czerwonka, IEEE Software. 35Laura MacLeod, Michaela Greiler, Margaret-Anne Storey, Christian Bird, and Jacek Czerwonka. 2018. Code Reviewing in the Trenches. IEEE Software 35 (2018), 34\u015b42.\n\nPredicting pull request completion time: a case study on large scale cloud services. Chandra Maddila, Chetan Bansal, Nachiappan Nagappan, Proceedings of acm joint meeting on european software engineering conference and symposium on the foundations of software engineering (ESEC/FSE). acm joint meeting on european software engineering conference and symposium on the foundations of software engineering (ESEC/FSE)New York, NY, USAAssociation for Computing MachineryChandra Maddila, Chetan Bansal, and Nachiappan Nagappan. 2019. Predicting pull request completion time: a case study on large scale cloud services. In Proceedings of acm joint meeting on european software engineering conference and symposium on the foundations of software engineering (ESEC/FSE). Association for Computing Machinery, New York, NY, USA, 874\u015b882.\n\n500+ Times Faster than Deep Learning: A Case Study Exploring Faster Methods for Text Mining Stackoverflow. Suvodeep Majumder, Nikhila Balaji, Katie Brey, Wei Fu, Tim Menzies, Proceedings of the International Conference on Mining Software Repositories (MSR) (MSR '18). the International Conference on Mining Software Repositories (MSR) (MSR '18)New York, NY, USAAssociation for Computing MachinerySuvodeep Majumder, Nikhila Balaji, Katie Brey, Wei Fu, and Tim Menzies. 2018. 500+ Times Faster than Deep Learning: A Case Study Exploring Faster Methods for Text Mining Stackoverflow. In Proceedings of the International Conference on Mining Software Repositories (MSR) (MSR '18). Association for Computing Machinery, New York, NY, USA, 554\u015b563.\n\nWhat types of defects are really discovered in code reviews?. V Mika, Casper M\u00e4ntyl\u00e4, Lassenius, IEEE Transactions on Software Engineering. 35Mika V M\u00e4ntyl\u00e4 and Casper Lassenius. 2008. What types of defects are really discovered in code reviews? IEEE Transactions on Software Engineering 35, 3 (2008), 430\u015b448.\n\nAre fix-inducing changes a moving target? a longitudinal case study of just-in-time defect prediction. Shane Mcintosh, Yasutaka Kamei, IEEE Transactions on Software Engineering. TSEShane McIntosh and Yasutaka Kamei. 2017. Are fix-inducing changes a mov- ing target? a longitudinal case study of just-in-time defect prediction. IEEE Transactions on Software Engineering (TSE) 44 (2017), 412\u015b428.\n\nThe impact of code review coverage and code review participation on software quality: A case study of the qt, vtk, and itk projects. Shane Mcintosh, Yasutaka Kamei, Bram Adams, Ahmed E Hassan, Proceedings of the Working Conference on Mining Software Repositories (MSR). the Working Conference on Mining Software Repositories (MSR)New York, NY, USAAssociation for Computing MachineryShane McIntosh, Yasutaka Kamei, Bram Adams, and Ahmed E Hassan. 2014. The impact of code review coverage and code review participation on software quality: A case study of the qt, vtk, and itk projects. In Proceedings of the Working Conference on Mining Software Repositories (MSR). Association for Computing Machinery, New York, NY, USA, 192\u015b201.\n\nDo code review practices impact design quality? a case study of the qt, vtk, and itk projects. Rodrigo Morales, Shane Mcintosh, Foutse Khomh, Proceedings of the international conference on software analysis, evolution, and reengineering (SANER). the international conference on software analysis, evolution, and reengineering (SANER)New York, NY, USAAssociation for Computing MachineryRodrigo Morales, Shane McIntosh, and Foutse Khomh. 2015. Do code review practices impact design quality? a case study of the qt, vtk, and itk projects. In Proceedings of the international conference on software analysis, evolution, and reengineering (SANER). Association for Computing Machinery, New York, NY, USA, 171\u015b180.\n\nBleu: a method for automatic evaluation of machine translation. Kishore Papineni, Salim Roukos, Todd Ward, Wei-Jing Zhu, Proceedings of the annual meeting of the Association for Computational Linguistics (ACL). the annual meeting of the Association for Computational Linguistics (ACL)USAAssociation for Computational LinguisticsKishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. 2002. Bleu: a method for automatic evaluation of machine translation. In Proceedings of the annual meeting of the Association for Computational Linguistics (ACL). Association for Computational Linguistics, USA, 311\u015b318.\n\nScikit-learn: Machine Learning in Python. F Pedregosa, G Varoquaux, A Gramfort, V Michel, B Thirion, O Grisel, M Blondel, P Prettenhofer, R Weiss, V Dubourg, J Vanderplas, A Passos, D Cournapeau, M Brucher, M Perrot, E Duchesnay, Journal of Machine Learning Research. 12F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cour- napeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12 (2011), 2825\u015b2830.\n\nChanathip Pornprasit, Chakkrit Tantithamthavorn, arXiv:2103.07068JITLine: A Simpler, Better, Faster, Finer-grained Just-In-Time Defect Prediction. arXiv preprintChanathip Pornprasit and Chakkrit Tantithamthavorn. 2021. JITLine: A Sim- pler, Better, Faster, Finer-grained Just-In-Time Defect Prediction. arXiv preprint arXiv:2103.07068 (2021), 369\u015b379.\n\nDeepLineDP: Towards a Deep Learning Approach for Line-Level Defect Prediction. Chanathip Pornprasit, Chakkrit Tantithamthavorn, IEEE Transactions on Software Engineering. Chanathip Pornprasit and Chakkrit Tantithamthavorn. 2022. DeepLineDP: To- wards a Deep Learning Approach for Line-Level Defect Prediction. IEEE Trans- actions on Software Engineering (2022), 1\u015b1.\n\nPyExplainer: Explaining the Predictions of Just-In-Time Defect Models. Chanathip Pornprasit, Chakkrit Tantithamthavorn, Jirayus Jiarpakdee, Michael Fu, Patanamon Thongtanunam, proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE). the IEEE/ACM International Conference on Automated Software Engineering (ASE)San Francisco, CA, USAIEEEChanathip Pornprasit, Chakkrit Tantithamthavorn, Jirayus Jiarpakdee, Michael Fu, and Patanamon Thongtanunam. 2021. PyExplainer: Explaining the Predictions of Just-In-Time Defect Models. In proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, San Francisco, CA, USA, 407\u015b418.\n\nExploring the limits of transfer learning with a unified text-to-text transformer. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J Liu, arXiv:1910.1068321arXiv preprintColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. 2019. Exploring the lim- its of transfer learning with a unified text-to-text transformer. arXiv preprint arXiv:1910.10683 21, 1 (2019), 67 pages.\n\nNatural software revisited. Musfiqur Rahman, Dharani Palani, Peter C Rigby, Proceedings of the IEEE/ACM International Conference on Software Engineering (ICSE). the IEEE/ACM International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEEMusfiqur Rahman, Dharani Palani, and Peter C Rigby. 2019. Natural software revisited. In Proceedings of the IEEE/ACM International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA, USA, 37\u015b48.\n\nSQAPlanner: Generating datainformed software quality improvement plans. Dilini Rajapaksha, Chakkrit Tantithamthavorn, Christoph Bergmeir, Wray Buntine, Jirayus Jiarpakdee, John Grundy, IEEE Transactions on Software Engineering. 48Dilini Rajapaksha, Chakkrit Tantithamthavorn, Christoph Bergmeir, Wray Bun- tine, Jirayus Jiarpakdee, and John Grundy. 2021. SQAPlanner: Generating data- informed software quality improvement plans. IEEE Transactions on Software Engineering 48, 8 (2021), 2814\u015b2835.\n\nConvergent Contemporary Software Peer Review Practices. C Peter, Christian Rigby, Bird, Proceedings of the European Software Engineering Conference and the International Symposium on the Foundations of Software Engineering (ESEC/FSE). the European Software Engineering Conference and the International Symposium on the Foundations of Software Engineering (ESEC/FSE)New York, NY, USAAssociation for Computing MachineryPeter C Rigby and Christian Bird. 2013. Convergent Contemporary Software Peer Review Practices. In Proceedings of the European Software Engineering Conference and the International Symposium on the Foundations of Software Engineering (ESEC/FSE). Association for Computing Machinery, New York, NY, USA, 202\u015b 212.\n\nPeer review on open-source software projects: Parameters, statistical models, and theory. C Peter, Rigby, M Daniel, Laura German, Margaret-Anne Cowen, Storey, ACM Transactions on Software Engineering and Methodology (TOSEM). 23Peter C Rigby, Daniel M German, Laura Cowen, and Margaret-Anne Storey. 2014. Peer review on open-source software projects: Parameters, statistical models, and theory. ACM Transactions on Software Engineering and Methodology (TOSEM) 23, 4 (2014), 1\u015b33.\n\nA Novel Phishing Page Detection Mechanism Using HTML Source Code Comparison and Cosine Similarity. S Roopak, Tony Thomas, 10.1109/ICACC.2014.47proceedings of the International Conference on Advances in Computing and Communications (ICACC). 167\u015b170. the International Conference on Advances in Computing and Communications (ICACC). 167\u015b170S. Roopak and Tony Thomas. 2014. A Novel Phishing Page Detection Mechanism Using HTML Source Code Comparison and Cosine Similarity. In proceedings of the International Conference on Advances in Computing and Communications (ICACC). 167\u015b170. https://doi.org/10.1109/ICACC.2014.47\n\nModern Code Review: A Case Study at Google. Caitlin Sadowski, Emma S\u00f6derberg, Luke Church, Michal Sipko, Alberto Bacchelli, Proceedings of ICSE (Companion). ICSE (Companion)San Francisco, CA, USAIEEECaitlin Sadowski, Emma S\u00f6derberg, Luke Church, Michal Sipko, and Alberto Bacchelli. 2018. Modern Code Review: A Case Study at Google. In Proceedings of ICSE (Companion). IEEE, San Francisco, CA, USA, 181\u015b190.\n\nCore: Automating review recommendation for code changes. Kai Jing, Cuiyun Siow, Lingling Gao, Sen Fan, Yang Chen, Liu, proceedings of the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER). the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)San Francisco, CA, USAIEEEJing Kai Siow, Cuiyun Gao, Lingling Fan, Sen Chen, and Yang Liu. 2020. Core: Automating review recommendation for code changes. In proceedings of the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, San Francisco, CA, USA, 284\u015b295.\n\nActionable Analytics: Stop Telling Me What It Is; Please Tell Me What To Do. Chakkrit Tantithamthavorn, Jirayus Jiarpakdee, John Grundy, IEEE Software. 38Chakkrit Tantithamthavorn, Jirayus Jiarpakdee, and John Grundy. 2021. Action- able Analytics: Stop Telling Me What It Is; Please Tell Me What To Do. IEEE Software 38, 4 (2021), 115\u015b120.\n\nAutomated Parameter Optimization of Classification Techniques for Defect Prediction Models. Chakkrit Tantithamthavorn, Shane Mcintosh, Ahmed E Hassan, Kenichi Matsumoto, Proceedings of the 38th International Conference on Software Engineering (ICSE). the 38th International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEEChakkrit Tantithamthavorn, Shane McIntosh, Ahmed E Hassan, and Kenichi Mat- sumoto. 2016. Automated Parameter Optimization of Classification Techniques for Defect Prediction Models. In Proceedings of the 38th International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA, USA, 321\u015b332.\n\nAn empirical comparison of model validation techniques for defect prediction models. Chakkrit Tantithamthavorn, Shane Mcintosh, Ahmed E Hassan, Kenichi Matsumoto, IEEE Transactions on Software Engineering. 43Chakkrit Tantithamthavorn, Shane McIntosh, Ahmed E Hassan, and Kenichi Matsumoto. 2016. An empirical comparison of model validation techniques for defect prediction models. IEEE Transactions on Software Engineering 43, 1 (2016), 1\u015b18.\n\nAn Empirical Comparison of Model Validation Techniques for Defect Prediction Models. Chakkrit Tantithamthavorn, Shane Mcintosh, Ahmed E Hassan, Kenichi Matsumoto, IEEE Transactions on Software Engineering (TSE). 43Chakkrit Tantithamthavorn, Shane McIntosh, Ahmed E Hassan, and Kenichi Matsumoto. 2017. An Empirical Comparison of Model Validation Techniques for Defect Prediction Models. IEEE Transactions on Software Engineering (TSE) 43, 1 (2017), 1\u015b18.\n\nImproving code review effectiveness through reviewer recommendations. Patanamon Thongtanunam, Raula Gaikovina Kula, Ana Erika , Camargo Cruz, Norihiro Yoshida, Hajimu Iida, Proceedings of the International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE). the International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)New York, NY, USAAssociation for Computing MachineryPatanamon Thongtanunam, Raula Gaikovina Kula, Ana Erika Camargo Cruz, Norihiro Yoshida, and Hajimu Iida. 2014. Improving code review effectiveness through reviewer recommendations. In Proceedings of the International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE). Association for Computing Machinery, New York, NY, USA, 119\u015b122.\n\nInvestigating Code Review Practices in Defective Files: An Empirical Study of the Qt System. Patanamon Thongtanunam, Shane Mcintosh, Ahmed E Hassan, Hajimu Iida, Proceedings of the IEEE/ACM Working Conference on Mining Software Repositories (MSR). the IEEE/ACM Working Conference on Mining Software Repositories (MSR)San Francisco, CA, USAIEEEPatanamon Thongtanunam, Shane McIntosh, Ahmed E. Hassan, and Hajimu Iida. 2015. Investigating Code Review Practices in Defective Files: An Empirical Study of the Qt System. In Proceedings of the IEEE/ACM Working Conference on Mining Software Repositories (MSR). IEEE, San Francisco, CA, USA, 168\u015b179.\n\nReview participation in modern code review: An empirical study of the Android, Qt, and OpenStack projects (journal-first abstract). Patanamon Thongtanunam, Shane Mcintosh, Ahmed E Hassan, Hajimu Iida, Proceedings of the International Conference on Software Analysis, Evolution and Reengineering (SANER). the International Conference on Software Analysis, Evolution and Reengineering (SANER)San Francisco, CA, USAIEEEPatanamon Thongtanunam, Shane McIntosh, Ahmed E Hassan, and Hajimu Iida. 2018. Review participation in modern code review: An empirical study of the Android, Qt, and OpenStack projects (journal-first abstract). In Proceedings of the International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, San Francisco, CA, USA, 475\u015b475.\n\nAutoTransform: Automated Code Transformation to Support Modern Code Review Process. Patanamon Thongtanunam, Chanathip Pornprasit, and Chakkrit Tantithamthavorn. 2022. Patanamon Thongtanunam, Chanathip Pornprasit, and Chakkrit Tantithamtha- vorn. 2022. AutoTransform: Automated Code Transformation to Support Modern Code Review Process. (2022), 237\u015b248.\n\nWho should review my code? a file location-based code-reviewer recommendation approach for modern code review. Patanamon Thongtanunam, Chakkrit Tantithamthavorn, Raula Gaikovina Kula, Norihiro Yoshida, Hajimu Iida, Ken-Ichi Matsumoto, Proceedings of the IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER). the IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)San Francisco, CA, USAIEEEPatanamon Thongtanunam, Chakkrit Tantithamthavorn, Raula Gaikovina Kula, Norihiro Yoshida, Hajimu Iida, and Ken-ichi Matsumoto. 2015. Who should review my code? a file location-based code-reviewer recommendation approach for modern code review. In Proceedings of the IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE, San Francisco, CA, USA, 141\u015b150.\n\nOn learning meaningful code changes via neural machine translation. Michele Tufano, Jevgenija Pantiuchina, Cody Watson, Gabriele Bavota, Denys Poshyvanyk, 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). San Francisco, CA, USAIEEEMichele Tufano, Jevgenija Pantiuchina, Cody Watson, Gabriele Bavota, and Denys Poshyvanyk. 2019. On learning meaningful code changes via neural machine translation. In 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA, USA, 25\u015b36.\n\nUsing Pre-Trained Models to Boost Code Review Automation. Rosalia Tufano, Simone Masiero, Antonio Mastropaolo, Luca Pascarella, Denys Poshyvanyk, Gabriele Bavota, arXiv:2201.06850arXiv preprintRosalia Tufano, Simone Masiero, Antonio Mastropaolo, Luca Pascarella, Denys Poshyvanyk, and Gabriele Bavota. 2022. Using Pre-Trained Models to Boost Code Review Automation. arXiv preprint arXiv:2201.06850 (2022), 2291\u015b2302.\n\nTowards Automating Code Review Activities. Rosalia Tufano, Luca Pascarella, Michele Tufano, Denys Poshyvanykz, Gabriele Bavota, Proceedings of the International Conference on Software Engineering (ICSE). the International Conference on Software Engineering (ICSE)San Francisco, CA, USAIEEERosalia Tufano, Luca Pascarella, Michele Tufano, Denys Poshyvanykz, and Gabriele Bavota. 2021. Towards Automating Code Review Activities. In Pro- ceedings of the International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA, USA, 163\u015b174.\n\n. Anderson Uch\u00f4a, Caio Barbosa, Daniel Coutinho, Willian Oizumi, K G Wesley, Silvia Regina Assun\u00e7ao, Juliana Alves Vergilio, Anderson Pereira, Oliveira, Anderson Uch\u00f4a, Caio Barbosa, Daniel Coutinho, Willian Oizumi, Wesley KG Assun\u00e7ao, Silvia Regina Vergilio, Juliana Alves Pereira, Anderson Oliveira, and\n\nPredicting Design Impactful Changes in Modern Code Review: A Large-Scale Empirical Study. Alessandro Garcia, Proceedings of the IEEE/ACM International Conference on Mining Software Repositories (MSR). the IEEE/ACM International Conference on Mining Software Repositories (MSR)San Francisco, CA, USAIEEEAlessandro Garcia. 2021. Predicting Design Impactful Changes in Modern Code Review: A Large-Scale Empirical Study. In Proceedings of the IEEE/ACM Interna- tional Conference on Mining Software Repositories (MSR). IEEE, San Francisco, CA, USA, 471\u015b482.\n\nPredicting defective lines using a model-agnostic technique. Supatsara Wattanakriengkrai, Patanamon Thongtanunam, Chakkrit Tantithamthavorn, Hideaki Hata, Kenichi Matsumoto, IEEE Transactions on Software Engineering (TSE). 48Supatsara Wattanakriengkrai, Patanamon Thongtanunam, Chakkrit Tan- tithamthavorn, Hideaki Hata, and Kenichi Matsumoto. 2020. Predicting defective lines using a model-agnostic technique. IEEE Transactions on Software Engineering (TSE) 48, 5 (2020), 1480\u015b1496.\n\nString comparator metrics and enhanced decision rules in the Fellegi-Sunter model of record linkage. E William, Winkler, William E Winkler. 1990. String comparator metrics and enhanced decision rules in the Fellegi-Sunter model of record linkage. (1990).\n\nReviewer recommender of pull-requests in GitHub. Yue Yu, Huaimin Wang, Gang Yin, Charles X Ling, Proceedings of IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE International Conference on Software Maintenance and Evolution (ICSME)San Francisco, CA, USAIEEEYue Yu, Huaimin Wang, Gang Yin, and Charles X Ling. 2014. Reviewer recom- mender of pull-requests in GitHub. In Proceedings of IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, San Francisco, CA, USA, 609\u015b612.\n\nA normalized Levenshtein distance metric. Li Yujian, Liu Bo, 29Li Yujian and Liu Bo. 2007. A normalized Levenshtein distance metric. IEEE transactions on pattern analysis and machine intelligence 29, 6 (2007), 1091\u015b1095.\n\nAutomatically recommending peer reviewers in modern code review. Huzefa Motahareh Bahrami Zanjani, Christian Kagdi, Bird, IEEE Transactions on Software Engineering. 42Motahareh Bahrami Zanjani, Huzefa Kagdi, and Christian Bird. 2015. Automati- cally recommending peer reviewers in modern code review. IEEE Transactions on Software Engineering 42, 6 (2015), 530\u015b543.\n\nString correction using the Damerau-Levenshtein distance. Chunchun Zhao, Sartaj Sahni, BMC bioinformatics. 20Chunchun Zhao and Sartaj Sahni. 2019. String correction using the Damerau- Levenshtein distance. BMC bioinformatics 20, 11 (2019), 1\u015b28.\n", "annotations": {"author": "[{\"end\":261,\"start\":229},{\"end\":308,\"start\":262},{\"end\":359,\"start\":309},{\"end\":399,\"start\":360},{\"end\":410,\"start\":400},{\"end\":437,\"start\":411},{\"end\":461,\"start\":438},{\"end\":476,\"start\":462},{\"end\":506,\"start\":477},{\"end\":536,\"start\":507},{\"end\":576,\"start\":537},{\"end\":606,\"start\":577}]", "publisher": null, "author_last_name": "[{\"end\":238,\"start\":234},{\"end\":287,\"start\":271},{\"end\":331,\"start\":319},{\"end\":373,\"start\":368},{\"end\":409,\"start\":405},{\"end\":436,\"start\":420},{\"end\":460,\"start\":448},{\"end\":475,\"start\":470}]", "author_first_name": "[{\"end\":233,\"start\":229},{\"end\":270,\"start\":262},{\"end\":318,\"start\":309},{\"end\":367,\"start\":360},{\"end\":404,\"start\":400},{\"end\":419,\"start\":411},{\"end\":447,\"start\":438},{\"end\":469,\"start\":462}]", "author_affiliation": "[{\"end\":505,\"start\":478},{\"end\":535,\"start\":508},{\"end\":575,\"start\":538},{\"end\":605,\"start\":578}]", "title": "[{\"end\":206,\"start\":1},{\"end\":812,\"start\":607}]", "venue": null, "abstract": "[{\"end\":2341,\"start\":1230}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2519,\"start\":2516},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2521,\"start\":2519},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2861,\"start\":2858},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":2864,\"start\":2861},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3018,\"start\":3015},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":3021,\"start\":3018},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":3024,\"start\":3021},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":3067,\"start\":3064},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":3070,\"start\":3067},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":3073,\"start\":3070},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":3202,\"start\":3199},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":3205,\"start\":3202},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":3208,\"start\":3205},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":3483,\"start\":3480},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":3630,\"start\":3626},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":3670,\"start\":3666},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":3873,\"start\":3869},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":4148,\"start\":4144},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":4273,\"start\":4269},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4769,\"start\":4765},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":4906,\"start\":4902},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":4909,\"start\":4906},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4912,\"start\":4909},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":4915,\"start\":4912},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":4918,\"start\":4915},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":5082,\"start\":5078},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":5374,\"start\":5370},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":5598,\"start\":5594},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":7375,\"start\":7371},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":9248,\"start\":9244},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":9251,\"start\":9248},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":9991,\"start\":9990},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":10663,\"start\":10660},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":10849,\"start\":10846},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":10867,\"start\":10863},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":11033,\"start\":11029},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":11234,\"start\":11231},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":11237,\"start\":11234},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":12189,\"start\":12185},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":12715,\"start\":12711},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":12847,\"start\":12843},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":13297,\"start\":13293},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13300,\"start\":13297},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":13303,\"start\":13300},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":13306,\"start\":13303},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13471,\"start\":13467},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":13621,\"start\":13617},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":13800,\"start\":13796},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":13918,\"start\":13914},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":14025,\"start\":14021},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":14710,\"start\":14706},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":16184,\"start\":16180},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":16469,\"start\":16465},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":17441,\"start\":17438},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":17444,\"start\":17441},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":17447,\"start\":17444},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":20184,\"start\":20180},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":20712,\"start\":20708},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":23091,\"start\":23087},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":24014,\"start\":24010},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":27185,\"start\":27182},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":27437,\"start\":27434},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":27440,\"start\":27437},{\"attributes\":{\"ref_id\":\"b66\"},\"end\":27443,\"start\":27440},{\"attributes\":{\"ref_id\":\"b68\"},\"end\":27446,\"start\":27443},{\"attributes\":{\"ref_id\":\"b70\"},\"end\":27449,\"start\":27446},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":32182,\"start\":32178},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":32474,\"start\":32470},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":34165,\"start\":34161},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":34168,\"start\":34165},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":34171,\"start\":34168},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":34174,\"start\":34171},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":34310,\"start\":34306},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":34467,\"start\":34463},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":34492,\"start\":34488},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":34598,\"start\":34594},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":34711,\"start\":34707},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":35314,\"start\":35310},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":35473,\"start\":35469},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":35476,\"start\":35473},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":35764,\"start\":35760},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":35767,\"start\":35764},{\"attributes\":{\"ref_id\":\"b65\"},\"end\":35770,\"start\":35767},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":37966,\"start\":37963},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":37969,\"start\":37966},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":38004,\"start\":38001},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":38175,\"start\":38172},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":38178,\"start\":38175},{\"attributes\":{\"ref_id\":\"b63\"},\"end\":38233,\"start\":38229},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":38398,\"start\":38394},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":39366,\"start\":39362},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":39369,\"start\":39366},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":39372,\"start\":39369},{\"end\":39436,\"start\":39398},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":39476,\"start\":39473},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":39479,\"start\":39476},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":39482,\"start\":39479},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":39485,\"start\":39482},{\"attributes\":{\"ref_id\":\"b67\"},\"end\":39488,\"start\":39485},{\"attributes\":{\"ref_id\":\"b69\"},\"end\":39491,\"start\":39488},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":39527,\"start\":39523},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":39530,\"start\":39527},{\"attributes\":{\"ref_id\":\"b60\"},\"end\":39533,\"start\":39530},{\"attributes\":{\"ref_id\":\"b62\"},\"end\":39536,\"start\":39533},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":39910,\"start\":39906},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":40049,\"start\":40045},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":40250,\"start\":40246},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":40461,\"start\":40457},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":40540,\"start\":40536},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":40910,\"start\":40906},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":41170,\"start\":41166},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":41734,\"start\":41730},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":42291,\"start\":42287},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":43592,\"start\":43588},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":43678,\"start\":43674},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":43681,\"start\":43678},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":43684,\"start\":43681},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":43737,\"start\":43733},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":43789,\"start\":43785},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":43804,\"start\":43800},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":43988,\"start\":43984},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":44028,\"start\":44024},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":44091,\"start\":44087},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":44094,\"start\":44091},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":44097,\"start\":44094},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":44353,\"start\":44349},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":45424,\"start\":45420},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":50366,\"start\":50362},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":50675,\"start\":50671},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":50678,\"start\":50675},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":50681,\"start\":50678},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":50834,\"start\":50830},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":51102,\"start\":51098},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":52920,\"start\":52919},{\"attributes\":{\"ref_id\":\"b61\"},\"end\":53313,\"start\":53309}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":47688,\"start\":47597},{\"attributes\":{\"id\":\"fig_1\"},\"end\":47763,\"start\":47689},{\"attributes\":{\"id\":\"fig_2\"},\"end\":47848,\"start\":47764},{\"attributes\":{\"id\":\"fig_3\"},\"end\":47939,\"start\":47849},{\"attributes\":{\"id\":\"fig_4\"},\"end\":48044,\"start\":47940},{\"attributes\":{\"id\":\"fig_5\"},\"end\":48147,\"start\":48045},{\"attributes\":{\"id\":\"fig_6\"},\"end\":48363,\"start\":48148},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":50278,\"start\":48364},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":52110,\"start\":50279},{\"attributes\":{\"id\":\"tab_2\",\"type\":\"table\"},\"end\":53761,\"start\":52111},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":54322,\"start\":53762},{\"attributes\":{\"id\":\"tab_4\",\"type\":\"table\"},\"end\":55694,\"start\":54323},{\"attributes\":{\"id\":\"tab_5\",\"type\":\"table\"},\"end\":56238,\"start\":55695},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":56539,\"start\":56239}]", "paragraph": "[{\"end\":3074,\"start\":2357},{\"end\":4885,\"start\":3076},{\"end\":5599,\"start\":4887},{\"end\":6789,\"start\":5601},{\"end\":7771,\"start\":6791},{\"end\":7814,\"start\":7778},{\"end\":8265,\"start\":7816},{\"end\":8280,\"start\":8267},{\"end\":8444,\"start\":8282},{\"end\":8887,\"start\":8446},{\"end\":9078,\"start\":8902},{\"end\":10458,\"start\":9102},{\"end\":11238,\"start\":10490},{\"end\":12099,\"start\":11240},{\"end\":14074,\"start\":12171},{\"end\":14436,\"start\":14155},{\"end\":15894,\"start\":14438},{\"end\":16976,\"start\":15896},{\"end\":16979,\"start\":16978},{\"end\":17993,\"start\":16981},{\"end\":17996,\"start\":17995},{\"end\":19666,\"start\":17998},{\"end\":19825,\"start\":19689},{\"end\":19931,\"start\":19848},{\"end\":20586,\"start\":19933},{\"end\":21341,\"start\":20611},{\"end\":21938,\"start\":21343},{\"end\":22908,\"start\":21962},{\"end\":23475,\"start\":22910},{\"end\":23638,\"start\":23477},{\"end\":23759,\"start\":23663},{\"end\":23844,\"start\":23761},{\"end\":24564,\"start\":23846},{\"end\":24842,\"start\":24566},{\"end\":25623,\"start\":24844},{\"end\":26323,\"start\":25625},{\"end\":26759,\"start\":26325},{\"end\":26978,\"start\":26790},{\"end\":28113,\"start\":26980},{\"end\":28271,\"start\":28115},{\"end\":28853,\"start\":28273},{\"end\":30216,\"start\":28855},{\"end\":30344,\"start\":30231},{\"end\":31655,\"start\":30366},{\"end\":32143,\"start\":31657},{\"end\":33849,\"start\":32145},{\"end\":33950,\"start\":33867},{\"end\":34971,\"start\":33952},{\"end\":35960,\"start\":34973},{\"end\":36433,\"start\":35962},{\"end\":37526,\"start\":36448},{\"end\":37755,\"start\":37543},{\"end\":38543,\"start\":37757},{\"end\":38898,\"start\":38545},{\"end\":39537,\"start\":38900},{\"end\":39773,\"start\":39539},{\"end\":41171,\"start\":39775},{\"end\":41423,\"start\":41195},{\"end\":41935,\"start\":41425},{\"end\":42524,\"start\":41937},{\"end\":43064,\"start\":42526},{\"end\":43562,\"start\":43066},{\"end\":44400,\"start\":43564},{\"end\":45283,\"start\":44402},{\"end\":46853,\"start\":45298},{\"end\":47366,\"start\":46855},{\"end\":47596,\"start\":47368}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":7777,\"start\":7772}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":20800,\"start\":20793},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":24136,\"start\":24129},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":24581,\"start\":24574},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":24943,\"start\":24936},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":25525,\"start\":25518},{\"attributes\":{\"ref_id\":\"tab_3\"},\"end\":25735,\"start\":25728},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":28131,\"start\":28124},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":28397,\"start\":28390},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":28993,\"start\":28986},{\"attributes\":{\"ref_id\":\"tab_5\"},\"end\":29294,\"start\":29287},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":33095,\"start\":33088},{\"attributes\":{\"ref_id\":\"tab_6\"},\"end\":37147,\"start\":37135}]", "section_header": "[{\"attributes\":{\"n\":\"1\"},\"end\":2355,\"start\":2343},{\"attributes\":{\"n\":\"2\"},\"end\":8900,\"start\":8890},{\"attributes\":{\"n\":\"2.1\"},\"end\":9100,\"start\":9081},{\"attributes\":{\"n\":\"2.2\"},\"end\":10488,\"start\":10461},{\"attributes\":{\"n\":\"2.3\"},\"end\":12169,\"start\":12102},{\"attributes\":{\"n\":\"3\"},\"end\":14153,\"start\":14077},{\"attributes\":{\"n\":\"4\"},\"end\":19687,\"start\":19669},{\"attributes\":{\"n\":\"4.1\"},\"end\":19846,\"start\":19828},{\"attributes\":{\"n\":\"4.2\"},\"end\":20609,\"start\":20589},{\"attributes\":{\"n\":\"4.3\"},\"end\":21960,\"start\":21941},{\"attributes\":{\"n\":\"5\"},\"end\":23661,\"start\":23641},{\"end\":26788,\"start\":26762},{\"attributes\":{\"n\":\"6\"},\"end\":30229,\"start\":30219},{\"attributes\":{\"n\":\"6.1\"},\"end\":30364,\"start\":30347},{\"attributes\":{\"n\":\"6.2\"},\"end\":33865,\"start\":33852},{\"attributes\":{\"n\":\"6.3\"},\"end\":36446,\"start\":36436},{\"attributes\":{\"n\":\"7\"},\"end\":37541,\"start\":37529},{\"attributes\":{\"n\":\"8\"},\"end\":41193,\"start\":41174},{\"attributes\":{\"n\":\"9\"},\"end\":45296,\"start\":45286},{\"end\":47608,\"start\":47598},{\"end\":47700,\"start\":47690},{\"end\":47775,\"start\":47765},{\"end\":47860,\"start\":47850},{\"end\":47951,\"start\":47941},{\"end\":48056,\"start\":48046},{\"end\":48157,\"start\":48149},{\"end\":50289,\"start\":50280},{\"end\":53772,\"start\":53763},{\"end\":54333,\"start\":54324},{\"end\":55705,\"start\":55696},{\"end\":56249,\"start\":56240}]", "table": "[{\"end\":50278,\"start\":48412},{\"end\":52110,\"start\":51824},{\"end\":54322,\"start\":53943},{\"end\":55694,\"start\":55202},{\"end\":56238,\"start\":55836},{\"end\":56539,\"start\":56400}]", "figure_caption": "[{\"end\":47688,\"start\":47610},{\"end\":47763,\"start\":47702},{\"end\":47848,\"start\":47777},{\"end\":47939,\"start\":47862},{\"end\":48044,\"start\":47953},{\"end\":48147,\"start\":48058},{\"end\":48363,\"start\":48159},{\"end\":48412,\"start\":48366},{\"end\":51824,\"start\":50291},{\"end\":53761,\"start\":52113},{\"end\":53943,\"start\":53774},{\"end\":55202,\"start\":54335},{\"end\":55836,\"start\":55707},{\"end\":56400,\"start\":56251}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":2731,\"start\":2723},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":9316,\"start\":9308},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":9877,\"start\":9869},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":11526,\"start\":11518},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":15777,\"start\":15769},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":30660,\"start\":30652},{\"attributes\":{\"ref_id\":\"fig_5\"},\"end\":33658,\"start\":33650}]", "bib_author_first_name": "[{\"end\":56923,\"start\":56915},{\"end\":56941,\"start\":56934},{\"end\":56958,\"start\":56951},{\"end\":56974,\"start\":56968},{\"end\":56977,\"start\":56975},{\"end\":56991,\"start\":56985},{\"end\":57338,\"start\":57331},{\"end\":57359,\"start\":57350},{\"end\":57800,\"start\":57794},{\"end\":58604,\"start\":58596},{\"end\":58620,\"start\":58613},{\"end\":59156,\"start\":59150},{\"end\":59172,\"start\":59165},{\"end\":59188,\"start\":59184},{\"end\":59203,\"start\":59198},{\"end\":59783,\"start\":59774},{\"end\":59798,\"start\":59790},{\"end\":59817,\"start\":59808},{\"end\":60421,\"start\":60412},{\"end\":60438,\"start\":60429},{\"end\":60461,\"start\":60453},{\"end\":61215,\"start\":61210},{\"end\":61493,\"start\":61488},{\"end\":61513,\"start\":61505},{\"end\":61527,\"start\":61523},{\"end\":62091,\"start\":62084},{\"end\":62100,\"start\":62097},{\"end\":62111,\"start\":62106},{\"end\":62124,\"start\":62116},{\"end\":62354,\"start\":62346},{\"end\":62365,\"start\":62361},{\"end\":62375,\"start\":62371},{\"end\":62385,\"start\":62382},{\"end\":62401,\"start\":62392},{\"end\":62412,\"start\":62408},{\"end\":62425,\"start\":62419},{\"end\":62436,\"start\":62432},{\"end\":62446,\"start\":62442},{\"end\":62457,\"start\":62452},{\"end\":62861,\"start\":62855},{\"end\":62873,\"start\":62870},{\"end\":62886,\"start\":62882},{\"end\":62905,\"start\":62899},{\"end\":63148,\"start\":63141},{\"end\":63161,\"start\":63153},{\"end\":63600,\"start\":63593},{\"end\":63613,\"start\":63605},{\"end\":63637,\"start\":63632},{\"end\":63645,\"start\":63642},{\"end\":63658,\"start\":63654},{\"end\":64316,\"start\":64313},{\"end\":64324,\"start\":64321},{\"end\":64819,\"start\":64812},{\"end\":64828,\"start\":64825},{\"end\":64843,\"start\":64835},{\"end\":64858,\"start\":64851},{\"end\":64873,\"start\":64866},{\"end\":64884,\"start\":64880},{\"end\":64896,\"start\":64889},{\"end\":65166,\"start\":65160},{\"end\":65178,\"start\":65174},{\"end\":65875,\"start\":65866},{\"end\":65895,\"start\":65888},{\"end\":65914,\"start\":65905},{\"end\":65930,\"start\":65924},{\"end\":66514,\"start\":66513},{\"end\":66533,\"start\":66524},{\"end\":67089,\"start\":67084},{\"end\":67101,\"start\":67097},{\"end\":67105,\"start\":67102},{\"end\":67117,\"start\":67112},{\"end\":67127,\"start\":67122},{\"end\":67701,\"start\":67697},{\"end\":67716,\"start\":67708},{\"end\":67744,\"start\":67735},{\"end\":68358,\"start\":68353},{\"end\":68376,\"start\":68367},{\"end\":68388,\"start\":68381},{\"end\":68405,\"start\":68396},{\"end\":68421,\"start\":68417},{\"end\":68763,\"start\":68757},{\"end\":68776,\"start\":68771},{\"end\":68791,\"start\":68785},{\"end\":69337,\"start\":69330},{\"end\":69358,\"start\":69350},{\"end\":69380,\"start\":69377},{\"end\":69386,\"start\":69381},{\"end\":69396,\"start\":69392},{\"end\":69764,\"start\":69756},{\"end\":69776,\"start\":69772},{\"end\":69789,\"start\":69785},{\"end\":69802,\"start\":69797},{\"end\":69804,\"start\":69803},{\"end\":69819,\"start\":69813},{\"end\":69833,\"start\":69828},{\"end\":69848,\"start\":69841},{\"end\":70234,\"start\":70224},{\"end\":70250,\"start\":70243},{\"end\":70273,\"start\":70263},{\"end\":70299,\"start\":70292},{\"end\":70320,\"start\":70312},{\"end\":70912,\"start\":70905},{\"end\":70928,\"start\":70924},{\"end\":70946,\"start\":70937},{\"end\":71719,\"start\":71711},{\"end\":71728,\"start\":71725},{\"end\":71739,\"start\":71734},{\"end\":71741,\"start\":71740},{\"end\":71755,\"start\":71750},{\"end\":71769,\"start\":71760},{\"end\":71781,\"start\":71776},{\"end\":72348,\"start\":72343},{\"end\":72366,\"start\":72358},{\"end\":72389,\"start\":72376},{\"end\":72407,\"start\":72398},{\"end\":72419,\"start\":72414},{\"end\":72703,\"start\":72696},{\"end\":72719,\"start\":72713},{\"end\":72738,\"start\":72728},{\"end\":73554,\"start\":73546},{\"end\":73572,\"start\":73565},{\"end\":73586,\"start\":73581},{\"end\":73596,\"start\":73593},{\"end\":73604,\"start\":73601},{\"end\":74245,\"start\":74244},{\"end\":74258,\"start\":74252},{\"end\":74602,\"start\":74597},{\"end\":74621,\"start\":74613},{\"end\":75028,\"start\":75023},{\"end\":75047,\"start\":75039},{\"end\":75059,\"start\":75055},{\"end\":75072,\"start\":75067},{\"end\":75074,\"start\":75073},{\"end\":75723,\"start\":75716},{\"end\":75738,\"start\":75733},{\"end\":75755,\"start\":75749},{\"end\":76402,\"start\":76395},{\"end\":76418,\"start\":76413},{\"end\":76431,\"start\":76427},{\"end\":76446,\"start\":76438},{\"end\":76984,\"start\":76983},{\"end\":76997,\"start\":76996},{\"end\":77010,\"start\":77009},{\"end\":77022,\"start\":77021},{\"end\":77032,\"start\":77031},{\"end\":77043,\"start\":77042},{\"end\":77053,\"start\":77052},{\"end\":77064,\"start\":77063},{\"end\":77080,\"start\":77079},{\"end\":77089,\"start\":77088},{\"end\":77100,\"start\":77099},{\"end\":77114,\"start\":77113},{\"end\":77124,\"start\":77123},{\"end\":77138,\"start\":77137},{\"end\":77149,\"start\":77148},{\"end\":77159,\"start\":77158},{\"end\":77538,\"start\":77529},{\"end\":77559,\"start\":77551},{\"end\":77970,\"start\":77961},{\"end\":77991,\"start\":77983},{\"end\":78330,\"start\":78321},{\"end\":78351,\"start\":78343},{\"end\":78377,\"start\":78370},{\"end\":78397,\"start\":78390},{\"end\":78411,\"start\":78402},{\"end\":79034,\"start\":79029},{\"end\":79047,\"start\":79043},{\"end\":79061,\"start\":79057},{\"end\":79080,\"start\":79071},{\"end\":79092,\"start\":79086},{\"end\":79108,\"start\":79101},{\"end\":79122,\"start\":79117},{\"end\":79132,\"start\":79129},{\"end\":79144,\"start\":79137},{\"end\":79491,\"start\":79483},{\"end\":79507,\"start\":79500},{\"end\":79523,\"start\":79516},{\"end\":80000,\"start\":79994},{\"end\":80021,\"start\":80013},{\"end\":80049,\"start\":80040},{\"end\":80064,\"start\":80060},{\"end\":80081,\"start\":80074},{\"end\":80098,\"start\":80094},{\"end\":80476,\"start\":80475},{\"end\":80493,\"start\":80484},{\"end\":81240,\"start\":81239},{\"end\":81256,\"start\":81255},{\"end\":81270,\"start\":81265},{\"end\":81292,\"start\":81279},{\"end\":81729,\"start\":81728},{\"end\":81742,\"start\":81738},{\"end\":82298,\"start\":82291},{\"end\":82313,\"start\":82309},{\"end\":82329,\"start\":82325},{\"end\":82344,\"start\":82338},{\"end\":82359,\"start\":82352},{\"end\":82716,\"start\":82713},{\"end\":82729,\"start\":82723},{\"end\":82744,\"start\":82736},{\"end\":82753,\"start\":82750},{\"end\":82763,\"start\":82759},{\"end\":83364,\"start\":83356},{\"end\":83390,\"start\":83383},{\"end\":83407,\"start\":83403},{\"end\":83720,\"start\":83712},{\"end\":83744,\"start\":83739},{\"end\":83760,\"start\":83755},{\"end\":83762,\"start\":83761},{\"end\":83778,\"start\":83771},{\"end\":84360,\"start\":84352},{\"end\":84384,\"start\":84379},{\"end\":84400,\"start\":84395},{\"end\":84402,\"start\":84401},{\"end\":84418,\"start\":84411},{\"end\":84804,\"start\":84796},{\"end\":84828,\"start\":84823},{\"end\":84844,\"start\":84839},{\"end\":84846,\"start\":84845},{\"end\":84862,\"start\":84855},{\"end\":85246,\"start\":85237},{\"end\":85266,\"start\":85261},{\"end\":85286,\"start\":85283},{\"end\":85292,\"start\":85287},{\"end\":85302,\"start\":85295},{\"end\":85317,\"start\":85309},{\"end\":85333,\"start\":85327},{\"end\":86051,\"start\":86042},{\"end\":86071,\"start\":86066},{\"end\":86087,\"start\":86082},{\"end\":86089,\"start\":86088},{\"end\":86104,\"start\":86098},{\"end\":86735,\"start\":86726},{\"end\":86755,\"start\":86750},{\"end\":86771,\"start\":86766},{\"end\":86773,\"start\":86772},{\"end\":86788,\"start\":86782},{\"end\":87460,\"start\":87451},{\"end\":87841,\"start\":87832},{\"end\":87864,\"start\":87856},{\"end\":87888,\"start\":87883},{\"end\":87913,\"start\":87905},{\"end\":87929,\"start\":87923},{\"end\":87944,\"start\":87936},{\"end\":88655,\"start\":88648},{\"end\":88673,\"start\":88664},{\"end\":88691,\"start\":88687},{\"end\":88708,\"start\":88700},{\"end\":88722,\"start\":88717},{\"end\":89184,\"start\":89177},{\"end\":89199,\"start\":89193},{\"end\":89216,\"start\":89209},{\"end\":89234,\"start\":89230},{\"end\":89252,\"start\":89247},{\"end\":89273,\"start\":89265},{\"end\":89587,\"start\":89580},{\"end\":89600,\"start\":89596},{\"end\":89620,\"start\":89613},{\"end\":89634,\"start\":89629},{\"end\":89656,\"start\":89648},{\"end\":90095,\"start\":90087},{\"end\":90107,\"start\":90103},{\"end\":90123,\"start\":90117},{\"end\":90141,\"start\":90134},{\"end\":90151,\"start\":90150},{\"end\":90153,\"start\":90152},{\"end\":90168,\"start\":90162},{\"end\":90175,\"start\":90169},{\"end\":90193,\"start\":90186},{\"end\":90199,\"start\":90194},{\"end\":90218,\"start\":90210},{\"end\":90492,\"start\":90482},{\"end\":91016,\"start\":91007},{\"end\":91045,\"start\":91036},{\"end\":91068,\"start\":91060},{\"end\":91094,\"start\":91087},{\"end\":91108,\"start\":91101},{\"end\":91533,\"start\":91532},{\"end\":91739,\"start\":91736},{\"end\":91751,\"start\":91744},{\"end\":91762,\"start\":91758},{\"end\":91777,\"start\":91768},{\"end\":92265,\"start\":92263},{\"end\":92277,\"start\":92274},{\"end\":92514,\"start\":92508},{\"end\":92551,\"start\":92542},{\"end\":92876,\"start\":92868},{\"end\":92889,\"start\":92883}]", "bib_author_last_name": "[{\"end\":56932,\"start\":56924},{\"end\":56949,\"start\":56942},{\"end\":56966,\"start\":56959},{\"end\":56983,\"start\":56978},{\"end\":56997,\"start\":56992},{\"end\":57348,\"start\":57339},{\"end\":57364,\"start\":57360},{\"end\":57810,\"start\":57801},{\"end\":58080,\"start\":58062},{\"end\":58611,\"start\":58605},{\"end\":58626,\"start\":58621},{\"end\":59163,\"start\":59157},{\"end\":59182,\"start\":59173},{\"end\":59196,\"start\":59189},{\"end\":59212,\"start\":59204},{\"end\":59788,\"start\":59784},{\"end\":59806,\"start\":59799},{\"end\":59822,\"start\":59818},{\"end\":60427,\"start\":60422},{\"end\":60451,\"start\":60439},{\"end\":60478,\"start\":60462},{\"end\":60711,\"start\":60703},{\"end\":61220,\"start\":61216},{\"end\":61503,\"start\":61494},{\"end\":61521,\"start\":61514},{\"end\":61535,\"start\":61528},{\"end\":62095,\"start\":62092},{\"end\":62104,\"start\":62101},{\"end\":62114,\"start\":62112},{\"end\":62127,\"start\":62125},{\"end\":62359,\"start\":62355},{\"end\":62369,\"start\":62366},{\"end\":62380,\"start\":62376},{\"end\":62390,\"start\":62386},{\"end\":62406,\"start\":62402},{\"end\":62417,\"start\":62413},{\"end\":62430,\"start\":62426},{\"end\":62440,\"start\":62437},{\"end\":62450,\"start\":62447},{\"end\":62463,\"start\":62458},{\"end\":62868,\"start\":62862},{\"end\":62880,\"start\":62874},{\"end\":62897,\"start\":62887},{\"end\":62913,\"start\":62906},{\"end\":63151,\"start\":63149},{\"end\":63178,\"start\":63162},{\"end\":63603,\"start\":63601},{\"end\":63630,\"start\":63614},{\"end\":63640,\"start\":63638},{\"end\":63652,\"start\":63646},{\"end\":63664,\"start\":63659},{\"end\":64319,\"start\":64317},{\"end\":64332,\"start\":64325},{\"end\":64823,\"start\":64820},{\"end\":64833,\"start\":64829},{\"end\":64849,\"start\":64844},{\"end\":64864,\"start\":64859},{\"end\":64878,\"start\":64874},{\"end\":64887,\"start\":64885},{\"end\":64900,\"start\":64897},{\"end\":65172,\"start\":65167},{\"end\":65189,\"start\":65179},{\"end\":65886,\"start\":65876},{\"end\":65903,\"start\":65896},{\"end\":65922,\"start\":65915},{\"end\":65936,\"start\":65931},{\"end\":66522,\"start\":66515},{\"end\":66545,\"start\":66534},{\"end\":66554,\"start\":66547},{\"end\":67095,\"start\":67090},{\"end\":67110,\"start\":67106},{\"end\":67120,\"start\":67118},{\"end\":67134,\"start\":67128},{\"end\":67706,\"start\":67702},{\"end\":67733,\"start\":67717},{\"end\":67757,\"start\":67745},{\"end\":68365,\"start\":68359},{\"end\":68379,\"start\":68377},{\"end\":68394,\"start\":68389},{\"end\":68415,\"start\":68406},{\"end\":68434,\"start\":68422},{\"end\":68769,\"start\":68764},{\"end\":68783,\"start\":68777},{\"end\":68800,\"start\":68792},{\"end\":69348,\"start\":69338},{\"end\":69375,\"start\":69359},{\"end\":69390,\"start\":69387},{\"end\":69403,\"start\":69397},{\"end\":69770,\"start\":69765},{\"end\":69783,\"start\":69777},{\"end\":69795,\"start\":69790},{\"end\":69811,\"start\":69805},{\"end\":69826,\"start\":69820},{\"end\":69839,\"start\":69834},{\"end\":69857,\"start\":69849},{\"end\":70241,\"start\":70235},{\"end\":70261,\"start\":70251},{\"end\":70290,\"start\":70274},{\"end\":70310,\"start\":70300},{\"end\":70337,\"start\":70321},{\"end\":70922,\"start\":70913},{\"end\":70935,\"start\":70929},{\"end\":70954,\"start\":70947},{\"end\":71438,\"start\":71416},{\"end\":71723,\"start\":71720},{\"end\":71732,\"start\":71729},{\"end\":71748,\"start\":71742},{\"end\":71758,\"start\":71756},{\"end\":71774,\"start\":71770},{\"end\":71786,\"start\":71782},{\"end\":72356,\"start\":72349},{\"end\":72374,\"start\":72367},{\"end\":72396,\"start\":72390},{\"end\":72412,\"start\":72408},{\"end\":72429,\"start\":72420},{\"end\":72711,\"start\":72704},{\"end\":72726,\"start\":72720},{\"end\":72747,\"start\":72739},{\"end\":73563,\"start\":73555},{\"end\":73579,\"start\":73573},{\"end\":73591,\"start\":73587},{\"end\":73599,\"start\":73597},{\"end\":73612,\"start\":73605},{\"end\":74250,\"start\":74246},{\"end\":74266,\"start\":74259},{\"end\":74277,\"start\":74268},{\"end\":74611,\"start\":74603},{\"end\":74627,\"start\":74622},{\"end\":75037,\"start\":75029},{\"end\":75053,\"start\":75048},{\"end\":75065,\"start\":75060},{\"end\":75081,\"start\":75075},{\"end\":75731,\"start\":75724},{\"end\":75747,\"start\":75739},{\"end\":75761,\"start\":75756},{\"end\":76411,\"start\":76403},{\"end\":76425,\"start\":76419},{\"end\":76436,\"start\":76432},{\"end\":76450,\"start\":76447},{\"end\":76994,\"start\":76985},{\"end\":77007,\"start\":76998},{\"end\":77019,\"start\":77011},{\"end\":77029,\"start\":77023},{\"end\":77040,\"start\":77033},{\"end\":77050,\"start\":77044},{\"end\":77061,\"start\":77054},{\"end\":77077,\"start\":77065},{\"end\":77086,\"start\":77081},{\"end\":77097,\"start\":77090},{\"end\":77111,\"start\":77101},{\"end\":77121,\"start\":77115},{\"end\":77135,\"start\":77125},{\"end\":77146,\"start\":77139},{\"end\":77156,\"start\":77150},{\"end\":77169,\"start\":77160},{\"end\":77549,\"start\":77539},{\"end\":77576,\"start\":77560},{\"end\":77981,\"start\":77971},{\"end\":78008,\"start\":77992},{\"end\":78341,\"start\":78331},{\"end\":78368,\"start\":78352},{\"end\":78388,\"start\":78378},{\"end\":78400,\"start\":78398},{\"end\":78424,\"start\":78412},{\"end\":79041,\"start\":79035},{\"end\":79055,\"start\":79048},{\"end\":79069,\"start\":79062},{\"end\":79084,\"start\":79081},{\"end\":79099,\"start\":79093},{\"end\":79115,\"start\":79109},{\"end\":79127,\"start\":79123},{\"end\":79135,\"start\":79133},{\"end\":79148,\"start\":79145},{\"end\":79498,\"start\":79492},{\"end\":79514,\"start\":79508},{\"end\":79529,\"start\":79524},{\"end\":80011,\"start\":80001},{\"end\":80038,\"start\":80022},{\"end\":80058,\"start\":80050},{\"end\":80072,\"start\":80065},{\"end\":80092,\"start\":80082},{\"end\":80105,\"start\":80099},{\"end\":80482,\"start\":80477},{\"end\":80499,\"start\":80494},{\"end\":80505,\"start\":80501},{\"end\":81246,\"start\":81241},{\"end\":81253,\"start\":81248},{\"end\":81263,\"start\":81257},{\"end\":81277,\"start\":81271},{\"end\":81298,\"start\":81293},{\"end\":81306,\"start\":81300},{\"end\":81736,\"start\":81730},{\"end\":81749,\"start\":81743},{\"end\":82307,\"start\":82299},{\"end\":82323,\"start\":82314},{\"end\":82336,\"start\":82330},{\"end\":82350,\"start\":82345},{\"end\":82369,\"start\":82360},{\"end\":82721,\"start\":82717},{\"end\":82734,\"start\":82730},{\"end\":82748,\"start\":82745},{\"end\":82757,\"start\":82754},{\"end\":82768,\"start\":82764},{\"end\":82773,\"start\":82770},{\"end\":83381,\"start\":83365},{\"end\":83401,\"start\":83391},{\"end\":83414,\"start\":83408},{\"end\":83737,\"start\":83721},{\"end\":83753,\"start\":83745},{\"end\":83769,\"start\":83763},{\"end\":83788,\"start\":83779},{\"end\":84377,\"start\":84361},{\"end\":84393,\"start\":84385},{\"end\":84409,\"start\":84403},{\"end\":84428,\"start\":84419},{\"end\":84821,\"start\":84805},{\"end\":84837,\"start\":84829},{\"end\":84853,\"start\":84847},{\"end\":84872,\"start\":84863},{\"end\":85259,\"start\":85247},{\"end\":85281,\"start\":85267},{\"end\":85307,\"start\":85303},{\"end\":85325,\"start\":85318},{\"end\":85338,\"start\":85334},{\"end\":86064,\"start\":86052},{\"end\":86080,\"start\":86072},{\"end\":86096,\"start\":86090},{\"end\":86109,\"start\":86105},{\"end\":86748,\"start\":86736},{\"end\":86764,\"start\":86756},{\"end\":86780,\"start\":86774},{\"end\":86793,\"start\":86789},{\"end\":87473,\"start\":87461},{\"end\":87854,\"start\":87842},{\"end\":87881,\"start\":87865},{\"end\":87903,\"start\":87889},{\"end\":87921,\"start\":87914},{\"end\":87934,\"start\":87930},{\"end\":87954,\"start\":87945},{\"end\":88662,\"start\":88656},{\"end\":88685,\"start\":88674},{\"end\":88698,\"start\":88692},{\"end\":88715,\"start\":88709},{\"end\":88733,\"start\":88723},{\"end\":89191,\"start\":89185},{\"end\":89207,\"start\":89200},{\"end\":89228,\"start\":89217},{\"end\":89245,\"start\":89235},{\"end\":89263,\"start\":89253},{\"end\":89280,\"start\":89274},{\"end\":89594,\"start\":89588},{\"end\":89611,\"start\":89601},{\"end\":89627,\"start\":89621},{\"end\":89646,\"start\":89635},{\"end\":89663,\"start\":89657},{\"end\":90101,\"start\":90096},{\"end\":90115,\"start\":90108},{\"end\":90132,\"start\":90124},{\"end\":90148,\"start\":90142},{\"end\":90160,\"start\":90154},{\"end\":90184,\"start\":90176},{\"end\":90208,\"start\":90200},{\"end\":90226,\"start\":90219},{\"end\":90236,\"start\":90228},{\"end\":90499,\"start\":90493},{\"end\":91034,\"start\":91017},{\"end\":91058,\"start\":91046},{\"end\":91085,\"start\":91069},{\"end\":91099,\"start\":91095},{\"end\":91118,\"start\":91109},{\"end\":91541,\"start\":91534},{\"end\":91550,\"start\":91543},{\"end\":91742,\"start\":91740},{\"end\":91756,\"start\":91752},{\"end\":91766,\"start\":91763},{\"end\":91782,\"start\":91778},{\"end\":92272,\"start\":92266},{\"end\":92280,\"start\":92278},{\"end\":92540,\"start\":92515},{\"end\":92557,\"start\":92552},{\"end\":92563,\"start\":92559},{\"end\":92881,\"start\":92877},{\"end\":92895,\"start\":92890}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":1270085},\"end\":57267,\"start\":56853},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":220663293},\"end\":57764,\"start\":57269},{\"attributes\":{\"id\":\"b2\"},\"end\":57934,\"start\":57766},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":15823436},\"end\":58512,\"start\":57936},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":4499379},\"end\":59075,\"start\":58514},{\"attributes\":{\"id\":\"b5\",\"matched_paper_id\":220477502},\"end\":59699,\"start\":59077},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":9094329},\"end\":60265,\"start\":59701},{\"attributes\":{\"id\":\"b7\"},\"end\":60701,\"start\":60267},{\"attributes\":{\"id\":\"b8\"},\"end\":61188,\"start\":60703},{\"attributes\":{\"doi\":\"10.1007/978-0-387-30164-8_506\",\"id\":\"b9\"},\"end\":61398,\"start\":61190},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":29074469},\"end\":62011,\"start\":61400},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":4330806},\"end\":62344,\"start\":62013},{\"attributes\":{\"doi\":\"arXiv:2002.08155\",\"id\":\"b12\"},\"end\":62815,\"start\":62346},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":10099051},\"end\":63074,\"start\":62817},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":249929673},\"end\":63528,\"start\":63076},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":253421714},\"end\":64264,\"start\":63530},{\"attributes\":{\"id\":\"b16\",\"matched_paper_id\":4516646},\"end\":64748,\"start\":64266},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":211119979},\"end\":65112,\"start\":64750},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":52219239},\"end\":65771,\"start\":65114},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":17364576},\"end\":66444,\"start\":65773},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":21164835},\"end\":67029,\"start\":66446},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":212675399},\"end\":67612,\"start\":67031},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":250970643},\"end\":68280,\"start\":67614},{\"attributes\":{\"doi\":\"arXiv:1909.09436\",\"id\":\"b23\"},\"end\":68669,\"start\":68282},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":9237290},\"end\":69250,\"start\":68671},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":216284235},\"end\":69689,\"start\":69252},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":18077633},\"end\":70146,\"start\":69691},{\"attributes\":{\"id\":\"b27\"},\"end\":70859,\"start\":70148},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":6147950},\"end\":71341,\"start\":70861},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":60827152},\"end\":71633,\"start\":71343},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":52070089},\"end\":72309,\"start\":71635},{\"attributes\":{\"id\":\"b31\"},\"end\":72609,\"start\":72311},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":199501654},\"end\":73437,\"start\":72611},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":3326662},\"end\":74180,\"start\":73439},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":17570489},\"end\":74492,\"start\":74182},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":21675120},\"end\":74888,\"start\":74494},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":3257395},\"end\":75619,\"start\":74890},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":14892409},\"end\":76329,\"start\":75621},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":11080756},\"end\":76939,\"start\":76331},{\"attributes\":{\"id\":\"b39\",\"matched_paper_id\":10659969},\"end\":77527,\"start\":76941},{\"attributes\":{\"doi\":\"arXiv:2103.07068\",\"id\":\"b40\"},\"end\":77880,\"start\":77529},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":246206099},\"end\":78248,\"start\":77882},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":246081055},\"end\":78944,\"start\":78250},{\"attributes\":{\"doi\":\"arXiv:1910.10683\",\"id\":\"b43\"},\"end\":79453,\"start\":78946},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":174799701},\"end\":79920,\"start\":79455},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":231979249},\"end\":80417,\"start\":79922},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":11163811},\"end\":81147,\"start\":80419},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":207212563},\"end\":81627,\"start\":81149},{\"attributes\":{\"doi\":\"10.1109/ICACC.2014.47\",\"id\":\"b48\",\"matched_paper_id\":18678035},\"end\":82245,\"start\":81629},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":49217999},\"end\":82654,\"start\":82247},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":209439473},\"end\":83277,\"start\":82656},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":235617809},\"end\":83618,\"start\":83279},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":16339266},\"end\":84265,\"start\":83620},{\"attributes\":{\"id\":\"b53\",\"matched_paper_id\":9439971},\"end\":84709,\"start\":84267},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":9439971},\"end\":85165,\"start\":84711},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":14554272},\"end\":85947,\"start\":85167},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":7546709},\"end\":86592,\"start\":85949},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":4807407},\"end\":87365,\"start\":86594},{\"attributes\":{\"id\":\"b58\",\"matched_paper_id\":249929568},\"end\":87719,\"start\":87367},{\"attributes\":{\"id\":\"b59\",\"matched_paper_id\":7129493},\"end\":88578,\"start\":87721},{\"attributes\":{\"id\":\"b60\",\"matched_paper_id\":59316445},\"end\":89117,\"start\":88580},{\"attributes\":{\"doi\":\"arXiv:2201.06850\",\"id\":\"b61\"},\"end\":89535,\"start\":89119},{\"attributes\":{\"id\":\"b62\",\"matched_paper_id\":230799433},\"end\":90083,\"start\":89537},{\"attributes\":{\"id\":\"b63\"},\"end\":90390,\"start\":90085},{\"attributes\":{\"id\":\"b64\",\"matched_paper_id\":232256243},\"end\":90944,\"start\":90392},{\"attributes\":{\"id\":\"b65\",\"matched_paper_id\":221534234},\"end\":91429,\"start\":90946},{\"attributes\":{\"id\":\"b66\"},\"end\":91685,\"start\":91431},{\"attributes\":{\"id\":\"b67\",\"matched_paper_id\":2515326},\"end\":92219,\"start\":91687},{\"attributes\":{\"id\":\"b68\"},\"end\":92441,\"start\":92221},{\"attributes\":{\"id\":\"b69\",\"matched_paper_id\":6348859},\"end\":92808,\"start\":92443},{\"attributes\":{\"id\":\"b70\",\"matched_paper_id\":174798479},\"end\":93055,\"start\":92810}]", "bib_title": "[{\"end\":56913,\"start\":56853},{\"end\":57329,\"start\":57269},{\"end\":58060,\"start\":57936},{\"end\":58594,\"start\":58514},{\"end\":59148,\"start\":59077},{\"end\":59772,\"start\":59701},{\"end\":61486,\"start\":61400},{\"end\":62082,\"start\":62013},{\"end\":62853,\"start\":62817},{\"end\":63139,\"start\":63076},{\"end\":63591,\"start\":63530},{\"end\":64311,\"start\":64266},{\"end\":64810,\"start\":64750},{\"end\":65158,\"start\":65114},{\"end\":65864,\"start\":65773},{\"end\":66511,\"start\":66446},{\"end\":67082,\"start\":67031},{\"end\":67695,\"start\":67614},{\"end\":68755,\"start\":68671},{\"end\":69328,\"start\":69252},{\"end\":69754,\"start\":69691},{\"end\":70222,\"start\":70148},{\"end\":70903,\"start\":70861},{\"end\":71414,\"start\":71343},{\"end\":71709,\"start\":71635},{\"end\":72341,\"start\":72311},{\"end\":72694,\"start\":72611},{\"end\":73544,\"start\":73439},{\"end\":74242,\"start\":74182},{\"end\":74595,\"start\":74494},{\"end\":75021,\"start\":74890},{\"end\":75714,\"start\":75621},{\"end\":76393,\"start\":76331},{\"end\":76981,\"start\":76941},{\"end\":77959,\"start\":77882},{\"end\":78319,\"start\":78250},{\"end\":79481,\"start\":79455},{\"end\":79992,\"start\":79922},{\"end\":80473,\"start\":80419},{\"end\":81237,\"start\":81149},{\"end\":81726,\"start\":81629},{\"end\":82289,\"start\":82247},{\"end\":82711,\"start\":82656},{\"end\":83354,\"start\":83279},{\"end\":83710,\"start\":83620},{\"end\":84350,\"start\":84267},{\"end\":84794,\"start\":84711},{\"end\":85235,\"start\":85167},{\"end\":86040,\"start\":85949},{\"end\":86724,\"start\":86594},{\"end\":87449,\"start\":87367},{\"end\":87830,\"start\":87721},{\"end\":88646,\"start\":88580},{\"end\":89578,\"start\":89537},{\"end\":90480,\"start\":90392},{\"end\":91005,\"start\":90946},{\"end\":91734,\"start\":91687},{\"end\":92506,\"start\":92443},{\"end\":92866,\"start\":92810}]", "bib_author": "[{\"end\":56934,\"start\":56915},{\"end\":56951,\"start\":56934},{\"end\":56968,\"start\":56951},{\"end\":56985,\"start\":56968},{\"end\":56999,\"start\":56985},{\"end\":57350,\"start\":57331},{\"end\":57366,\"start\":57350},{\"end\":57812,\"start\":57794},{\"end\":58082,\"start\":58062},{\"end\":58613,\"start\":58596},{\"end\":58628,\"start\":58613},{\"end\":59165,\"start\":59150},{\"end\":59184,\"start\":59165},{\"end\":59198,\"start\":59184},{\"end\":59214,\"start\":59198},{\"end\":59790,\"start\":59774},{\"end\":59808,\"start\":59790},{\"end\":59824,\"start\":59808},{\"end\":60429,\"start\":60412},{\"end\":60453,\"start\":60429},{\"end\":60480,\"start\":60453},{\"end\":60713,\"start\":60703},{\"end\":61222,\"start\":61210},{\"end\":61505,\"start\":61488},{\"end\":61523,\"start\":61505},{\"end\":61537,\"start\":61523},{\"end\":62097,\"start\":62084},{\"end\":62106,\"start\":62097},{\"end\":62116,\"start\":62106},{\"end\":62129,\"start\":62116},{\"end\":62361,\"start\":62346},{\"end\":62371,\"start\":62361},{\"end\":62382,\"start\":62371},{\"end\":62392,\"start\":62382},{\"end\":62408,\"start\":62392},{\"end\":62419,\"start\":62408},{\"end\":62432,\"start\":62419},{\"end\":62442,\"start\":62432},{\"end\":62452,\"start\":62442},{\"end\":62465,\"start\":62452},{\"end\":62870,\"start\":62855},{\"end\":62882,\"start\":62870},{\"end\":62899,\"start\":62882},{\"end\":62915,\"start\":62899},{\"end\":63153,\"start\":63141},{\"end\":63180,\"start\":63153},{\"end\":63605,\"start\":63593},{\"end\":63632,\"start\":63605},{\"end\":63642,\"start\":63632},{\"end\":63654,\"start\":63642},{\"end\":63666,\"start\":63654},{\"end\":64321,\"start\":64313},{\"end\":64334,\"start\":64321},{\"end\":64825,\"start\":64812},{\"end\":64835,\"start\":64825},{\"end\":64851,\"start\":64835},{\"end\":64866,\"start\":64851},{\"end\":64880,\"start\":64866},{\"end\":64889,\"start\":64880},{\"end\":64902,\"start\":64889},{\"end\":65174,\"start\":65160},{\"end\":65191,\"start\":65174},{\"end\":65888,\"start\":65866},{\"end\":65905,\"start\":65888},{\"end\":65924,\"start\":65905},{\"end\":65938,\"start\":65924},{\"end\":66524,\"start\":66513},{\"end\":66547,\"start\":66524},{\"end\":66556,\"start\":66547},{\"end\":67097,\"start\":67084},{\"end\":67112,\"start\":67097},{\"end\":67122,\"start\":67112},{\"end\":67136,\"start\":67122},{\"end\":67708,\"start\":67697},{\"end\":67735,\"start\":67708},{\"end\":67759,\"start\":67735},{\"end\":68367,\"start\":68353},{\"end\":68381,\"start\":68367},{\"end\":68396,\"start\":68381},{\"end\":68417,\"start\":68396},{\"end\":68436,\"start\":68417},{\"end\":68771,\"start\":68757},{\"end\":68785,\"start\":68771},{\"end\":68802,\"start\":68785},{\"end\":69350,\"start\":69330},{\"end\":69377,\"start\":69350},{\"end\":69392,\"start\":69377},{\"end\":69405,\"start\":69392},{\"end\":69772,\"start\":69756},{\"end\":69785,\"start\":69772},{\"end\":69797,\"start\":69785},{\"end\":69813,\"start\":69797},{\"end\":69828,\"start\":69813},{\"end\":69841,\"start\":69828},{\"end\":69859,\"start\":69841},{\"end\":70243,\"start\":70224},{\"end\":70263,\"start\":70243},{\"end\":70292,\"start\":70263},{\"end\":70312,\"start\":70292},{\"end\":70339,\"start\":70312},{\"end\":70924,\"start\":70905},{\"end\":70937,\"start\":70924},{\"end\":70956,\"start\":70937},{\"end\":71440,\"start\":71416},{\"end\":71725,\"start\":71711},{\"end\":71734,\"start\":71725},{\"end\":71750,\"start\":71734},{\"end\":71760,\"start\":71750},{\"end\":71776,\"start\":71760},{\"end\":71788,\"start\":71776},{\"end\":72358,\"start\":72343},{\"end\":72376,\"start\":72358},{\"end\":72398,\"start\":72376},{\"end\":72414,\"start\":72398},{\"end\":72431,\"start\":72414},{\"end\":72713,\"start\":72696},{\"end\":72728,\"start\":72713},{\"end\":72749,\"start\":72728},{\"end\":73565,\"start\":73546},{\"end\":73581,\"start\":73565},{\"end\":73593,\"start\":73581},{\"end\":73601,\"start\":73593},{\"end\":73614,\"start\":73601},{\"end\":74252,\"start\":74244},{\"end\":74268,\"start\":74252},{\"end\":74279,\"start\":74268},{\"end\":74613,\"start\":74597},{\"end\":74629,\"start\":74613},{\"end\":75039,\"start\":75023},{\"end\":75055,\"start\":75039},{\"end\":75067,\"start\":75055},{\"end\":75083,\"start\":75067},{\"end\":75733,\"start\":75716},{\"end\":75749,\"start\":75733},{\"end\":75763,\"start\":75749},{\"end\":76413,\"start\":76395},{\"end\":76427,\"start\":76413},{\"end\":76438,\"start\":76427},{\"end\":76452,\"start\":76438},{\"end\":76996,\"start\":76983},{\"end\":77009,\"start\":76996},{\"end\":77021,\"start\":77009},{\"end\":77031,\"start\":77021},{\"end\":77042,\"start\":77031},{\"end\":77052,\"start\":77042},{\"end\":77063,\"start\":77052},{\"end\":77079,\"start\":77063},{\"end\":77088,\"start\":77079},{\"end\":77099,\"start\":77088},{\"end\":77113,\"start\":77099},{\"end\":77123,\"start\":77113},{\"end\":77137,\"start\":77123},{\"end\":77148,\"start\":77137},{\"end\":77158,\"start\":77148},{\"end\":77171,\"start\":77158},{\"end\":77551,\"start\":77529},{\"end\":77578,\"start\":77551},{\"end\":77983,\"start\":77961},{\"end\":78010,\"start\":77983},{\"end\":78343,\"start\":78321},{\"end\":78370,\"start\":78343},{\"end\":78390,\"start\":78370},{\"end\":78402,\"start\":78390},{\"end\":78426,\"start\":78402},{\"end\":79043,\"start\":79029},{\"end\":79057,\"start\":79043},{\"end\":79071,\"start\":79057},{\"end\":79086,\"start\":79071},{\"end\":79101,\"start\":79086},{\"end\":79117,\"start\":79101},{\"end\":79129,\"start\":79117},{\"end\":79137,\"start\":79129},{\"end\":79150,\"start\":79137},{\"end\":79500,\"start\":79483},{\"end\":79516,\"start\":79500},{\"end\":79531,\"start\":79516},{\"end\":80013,\"start\":79994},{\"end\":80040,\"start\":80013},{\"end\":80060,\"start\":80040},{\"end\":80074,\"start\":80060},{\"end\":80094,\"start\":80074},{\"end\":80107,\"start\":80094},{\"end\":80484,\"start\":80475},{\"end\":80501,\"start\":80484},{\"end\":80507,\"start\":80501},{\"end\":81248,\"start\":81239},{\"end\":81255,\"start\":81248},{\"end\":81265,\"start\":81255},{\"end\":81279,\"start\":81265},{\"end\":81300,\"start\":81279},{\"end\":81308,\"start\":81300},{\"end\":81738,\"start\":81728},{\"end\":81751,\"start\":81738},{\"end\":82309,\"start\":82291},{\"end\":82325,\"start\":82309},{\"end\":82338,\"start\":82325},{\"end\":82352,\"start\":82338},{\"end\":82371,\"start\":82352},{\"end\":82723,\"start\":82713},{\"end\":82736,\"start\":82723},{\"end\":82750,\"start\":82736},{\"end\":82759,\"start\":82750},{\"end\":82770,\"start\":82759},{\"end\":82775,\"start\":82770},{\"end\":83383,\"start\":83356},{\"end\":83403,\"start\":83383},{\"end\":83416,\"start\":83403},{\"end\":83739,\"start\":83712},{\"end\":83755,\"start\":83739},{\"end\":83771,\"start\":83755},{\"end\":83790,\"start\":83771},{\"end\":84379,\"start\":84352},{\"end\":84395,\"start\":84379},{\"end\":84411,\"start\":84395},{\"end\":84430,\"start\":84411},{\"end\":84823,\"start\":84796},{\"end\":84839,\"start\":84823},{\"end\":84855,\"start\":84839},{\"end\":84874,\"start\":84855},{\"end\":85261,\"start\":85237},{\"end\":85283,\"start\":85261},{\"end\":85295,\"start\":85283},{\"end\":85309,\"start\":85295},{\"end\":85327,\"start\":85309},{\"end\":85340,\"start\":85327},{\"end\":86066,\"start\":86042},{\"end\":86082,\"start\":86066},{\"end\":86098,\"start\":86082},{\"end\":86111,\"start\":86098},{\"end\":86750,\"start\":86726},{\"end\":86766,\"start\":86750},{\"end\":86782,\"start\":86766},{\"end\":86795,\"start\":86782},{\"end\":87475,\"start\":87451},{\"end\":87856,\"start\":87832},{\"end\":87883,\"start\":87856},{\"end\":87905,\"start\":87883},{\"end\":87923,\"start\":87905},{\"end\":87936,\"start\":87923},{\"end\":87956,\"start\":87936},{\"end\":88664,\"start\":88648},{\"end\":88687,\"start\":88664},{\"end\":88700,\"start\":88687},{\"end\":88717,\"start\":88700},{\"end\":88735,\"start\":88717},{\"end\":89193,\"start\":89177},{\"end\":89209,\"start\":89193},{\"end\":89230,\"start\":89209},{\"end\":89247,\"start\":89230},{\"end\":89265,\"start\":89247},{\"end\":89282,\"start\":89265},{\"end\":89596,\"start\":89580},{\"end\":89613,\"start\":89596},{\"end\":89629,\"start\":89613},{\"end\":89648,\"start\":89629},{\"end\":89665,\"start\":89648},{\"end\":90103,\"start\":90087},{\"end\":90117,\"start\":90103},{\"end\":90134,\"start\":90117},{\"end\":90150,\"start\":90134},{\"end\":90162,\"start\":90150},{\"end\":90186,\"start\":90162},{\"end\":90210,\"start\":90186},{\"end\":90228,\"start\":90210},{\"end\":90238,\"start\":90228},{\"end\":90501,\"start\":90482},{\"end\":91036,\"start\":91007},{\"end\":91060,\"start\":91036},{\"end\":91087,\"start\":91060},{\"end\":91101,\"start\":91087},{\"end\":91120,\"start\":91101},{\"end\":91543,\"start\":91532},{\"end\":91552,\"start\":91543},{\"end\":91744,\"start\":91736},{\"end\":91758,\"start\":91744},{\"end\":91768,\"start\":91758},{\"end\":91784,\"start\":91768},{\"end\":92274,\"start\":92263},{\"end\":92282,\"start\":92274},{\"end\":92542,\"start\":92508},{\"end\":92559,\"start\":92542},{\"end\":92565,\"start\":92559},{\"end\":92883,\"start\":92868},{\"end\":92897,\"start\":92883}]", "bib_venue": "[{\"end\":57523,\"start\":57442},{\"end\":58239,\"start\":58158},{\"end\":58817,\"start\":58720},{\"end\":59368,\"start\":59291},{\"end\":60001,\"start\":59910},{\"end\":60996,\"start\":60852},{\"end\":61722,\"start\":61627},{\"end\":63285,\"start\":63263},{\"end\":63945,\"start\":63814},{\"end\":64492,\"start\":64413},{\"end\":65455,\"start\":65318},{\"end\":66131,\"start\":66032},{\"end\":66724,\"start\":66640},{\"end\":67306,\"start\":67221},{\"end\":67972,\"start\":67863},{\"end\":68977,\"start\":68887},{\"end\":71113,\"start\":71032},{\"end\":71958,\"start\":71873},{\"end\":73041,\"start\":72895},{\"end\":73800,\"start\":73707},{\"end\":75237,\"start\":75160},{\"end\":75971,\"start\":75867},{\"end\":76618,\"start\":76542},{\"end\":78619,\"start\":78520},{\"end\":79706,\"start\":79616},{\"end\":80801,\"start\":80654},{\"end\":81967,\"start\":81878},{\"end\":82442,\"start\":82404},{\"end\":82996,\"start\":82883},{\"end\":83957,\"start\":83871},{\"end\":85556,\"start\":85448},{\"end\":86288,\"start\":86197},{\"end\":87006,\"start\":86898},{\"end\":88179,\"start\":88065},{\"end\":88833,\"start\":88811},{\"end\":89822,\"start\":89741},{\"end\":90690,\"start\":90593},{\"end\":91973,\"start\":91876},{\"end\":57040,\"start\":56999},{\"end\":57440,\"start\":57366},{\"end\":57792,\"start\":57766},{\"end\":58156,\"start\":58082},{\"end\":58718,\"start\":58628},{\"end\":59289,\"start\":59214},{\"end\":59908,\"start\":59824},{\"end\":60410,\"start\":60267},{\"end\":60850,\"start\":60713},{\"end\":61208,\"start\":61190},{\"end\":61625,\"start\":61537},{\"end\":62159,\"start\":62129},{\"end\":62548,\"start\":62481},{\"end\":62927,\"start\":62915},{\"end\":63261,\"start\":63180},{\"end\":63812,\"start\":63666},{\"end\":64411,\"start\":64334},{\"end\":64913,\"start\":64902},{\"end\":65316,\"start\":65191},{\"end\":66030,\"start\":65938},{\"end\":66638,\"start\":66556},{\"end\":67219,\"start\":67136},{\"end\":67861,\"start\":67759},{\"end\":68351,\"start\":68282},{\"end\":68885,\"start\":68802},{\"end\":69452,\"start\":69405},{\"end\":69900,\"start\":69859},{\"end\":70406,\"start\":70339},{\"end\":71030,\"start\":70956},{\"end\":71462,\"start\":71440},{\"end\":71871,\"start\":71788},{\"end\":72444,\"start\":72431},{\"end\":72893,\"start\":72749},{\"end\":73705,\"start\":73614},{\"end\":74320,\"start\":74279},{\"end\":74670,\"start\":74629},{\"end\":75158,\"start\":75083},{\"end\":75865,\"start\":75763},{\"end\":76540,\"start\":76452},{\"end\":77207,\"start\":77171},{\"end\":77674,\"start\":77594},{\"end\":78051,\"start\":78010},{\"end\":78518,\"start\":78426},{\"end\":79027,\"start\":78946},{\"end\":79614,\"start\":79531},{\"end\":80148,\"start\":80107},{\"end\":80652,\"start\":80507},{\"end\":81372,\"start\":81308},{\"end\":81876,\"start\":81772},{\"end\":82402,\"start\":82371},{\"end\":82881,\"start\":82775},{\"end\":83429,\"start\":83416},{\"end\":83869,\"start\":83790},{\"end\":84471,\"start\":84430},{\"end\":84921,\"start\":84874},{\"end\":85446,\"start\":85340},{\"end\":86195,\"start\":86111},{\"end\":86896,\"start\":86795},{\"end\":87532,\"start\":87475},{\"end\":88063,\"start\":87956},{\"end\":88809,\"start\":88735},{\"end\":89175,\"start\":89119},{\"end\":89739,\"start\":89665},{\"end\":90591,\"start\":90501},{\"end\":91167,\"start\":91120},{\"end\":91530,\"start\":91431},{\"end\":91874,\"start\":91784},{\"end\":92261,\"start\":92221},{\"end\":92606,\"start\":92565},{\"end\":92915,\"start\":92897}]"}}}, "year": 2023, "month": 12, "day": 17}