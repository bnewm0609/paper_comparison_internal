{"id": 231839456, "updated": "2023-10-06 06:09:32.511", "metadata": {"title": "Evaluating SZZ Implementations Through a Developer-informed Oracle", "authors": "[{\"first\":\"Giovanni\",\"last\":\"Rosa\",\"middle\":[]},{\"first\":\"Luca\",\"last\":\"Pascarella\",\"middle\":[]},{\"first\":\"Simone\",\"last\":\"Scalabrino\",\"middle\":[]},{\"first\":\"Rosalia\",\"last\":\"Tufano\",\"middle\":[]},{\"first\":\"Gabriele\",\"last\":\"Bavota\",\"middle\":[]},{\"first\":\"Michele\",\"last\":\"Lanza\",\"middle\":[]},{\"first\":\"Rocco\",\"last\":\"Oliveto\",\"middle\":[]}]", "venue": "2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)", "journal": "2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)", "publication_date": {"year": 2021, "month": 2, "day": 5}, "abstract": "The SZZ algorithm for identifying bug-inducing changes has been widely used to evaluate defect prediction techniques and to empirically investigate when, how, and by whom bugs are introduced. Over the years, researchers have proposed several heuristics to improve the SZZ accuracy, providing various implementations of SZZ. However, fairly evaluating those implementations on a reliable oracle is an open problem: SZZ evaluations usually rely on (i) the manual analysis of the SZZ output to classify the identified bug-inducing commits as true or false positives; or (ii) a golden set linking bug-fixing and bug-inducing commits. In both cases, these manual evaluations are performed by researchers with limited knowledge of the studied subject systems. Ideally, there should be a golden set created by the original developers of the studied systems. We propose a methodology to build a\"developer-informed\"oracle for the evaluation of SZZ variants. We use Natural Language Processing (NLP) to identify bug-fixing commits in which developers explicitly reference the commit(s) that introduced a fixed bug. This was followed by a manual filtering step aimed at ensuring the quality and accuracy of the oracle. Once built, we used the oracle to evaluate several variants of the SZZ algorithm in terms of their accuracy. Our evaluation helped us to distill a set of lessons learned to further improve the SZZ algorithm.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": "2102.03300", "mag": null, "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/icse/RosaPSTBLO21", "doi": "10.1109/icse43902.2021.00049"}}, "content": {"source": {"pdf_hash": "5e8ce0c69b0c1872b5f2e9b12d627be926db8dab", "pdf_src": "Arxiv", "pdf_uri": "[\"https://arxiv.org/pdf/2102.03300v1.pdf\"]", "oa_url_match": true, "oa_info": {"license": null, "open_access_url": "http://arxiv.org/pdf/2102.03300", "status": "GREEN"}}, "grobid": {"id": "78a7843142ba0fbd9c8173517b0e85e744d0e46e", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/5e8ce0c69b0c1872b5f2e9b12d627be926db8dab.txt", "contents": "\nEvaluating SZZ Implementations Through a Developer-informed Oracle\n\n\nGiovanni Rosa \nLuca Pascarella \nSoftware Institute\nUSI Universit\u00e0 della Svizzera italiana\nSwitzerland\n\nSimone Scalabrino \nRosalia Tufano \nSoftware Institute\nUSI Universit\u00e0 della Svizzera italiana\nSwitzerland\n\nGabriele Bavota \nSoftware Institute\nUSI Universit\u00e0 della Svizzera italiana\nSwitzerland\n\nMichele Lanza \nSoftware Institute\nUSI Universit\u00e0 della Svizzera italiana\nSwitzerland\n\nRocco Oliveto \n\nUniversity of Molise\nItaly\n\nEvaluating SZZ Implementations Through a Developer-informed Oracle\nIndex Terms-SZZDefect PredictionEmpirical Study\nThe SZZ algorithm for identifying bug-inducing changes has been widely used to evaluate defect prediction techniques and to empirically investigate when, how, and by whom bugs are introduced. Over the years, researchers have proposed several heuristics to improve the SZZ accuracy, providing various implementations of SZZ. However, fairly evaluating those implementations on a reliable oracle is an open problem: SZZ evaluations usually rely on (i) the manual analysis of the SZZ output to classify the identified bug-inducing commits as true or false positives; or (ii) a golden set linking bug-fixing and buginducing commits. In both cases, these manual evaluations are performed by researchers with limited knowledge of the studied subject systems. Ideally, there should be a golden set created by the original developers of the studied systems.We propose a methodology to build a \"developer-informed\" oracle for the evaluation of SZZ variants. We use Natural Language Processing (NLP) to identify bug-fixing commits in which developers explicitly reference the commit(s) that introduced a fixed bug. This was followed by a manual filtering step aimed at ensuring the quality and accuracy of the oracle. Once built, we used the oracle to evaluate several variants of the SZZ algorithm in terms of their accuracy. Our evaluation helped us to distill a set of lessons learned to further improve the SZZ algorithm.\n\nI. INTRODUCTION\n\nThe SZZ algorithm, proposed by\u015aliwerski, Zimmermann, and Zeller [1] at MSR 2005, identifies, given a bug-fixing commit C BF , the commits that likely introduced the bug fixed in C BF . These commits are termed \"bug-inducing\" commits. In essence, given C BF as input, SZZ identifies the last change (commit) to each source code line changed in C BF (i.e., changed to fix the bug). This is done by relying on the annotation/blame feature of versioning systems. The identified commits are considered as the ones that later on triggered the bug-fixing commit C BF .\n\nSZZ has been widely adopted to (i) design and evaluate defect prediction techniques [2]- [6], and to (ii) run empirical studies aimed at investigating under which circumstances bugs are introduced [7]- [10]. The relevance of the SZZ algorithm was recognized a decade later with a MIP (Most Influential Paper award) presented at the 12th Working Conference on Mining Software Repositories (MSR 2015).\n\nSeveral researchers have proposed variants of the original algorithm, with the goal of boosting its accuracy [11]- [16].\n\nFor example, one issue with the basic SZZ implementation is that it considers changes to code comments and whitespaces like any other change.\n\nThis means that if a comment is modified in C BF , the latest change to that comment is mistakenly considered as a buginducing commit. An improvement by Kim et al. [11] was therefore to ignore changes to code comments and blank lines as candidate bug-inducing commits.\n\nDespite the major advances made on the accuracy of SZZ, Alencar da Costa et al. [14] highlighted the major difficulties in fairly evaluating and comparing the SZZ variants proposed in the literature. They observed that the studies presenting and evaluating SZZ variants mostly rely on manual analysis of a small sample of SZZ results [1], [11]- [13], with the goal of evaluating its accuracy. Such an evaluation is usually performed by the researchers who-not being the original developers of the studied systems-do not always have the knowledge needed to correctly identify the bug introducing commit. Also, due to the high cost of such a manual analysis, it is usually performed on a small sample of the identified buginducing commits. Other researchers built instead a ground truth to evaluate the performance of the SZZ algorithm [16]. However, also in these cases, the ground truth is produced by the researchers. Alencar da Costa et al. [14] called for evaluations performed with \"domain experts (e.g., developers or testers)\" reporting however that \"such an analysis is impractical\" since \"the experts would need to verify a large sample of bug-introducing changes, which is difficult to scale up to the size of modern defect datasets\" [14].\n\nWe present a methodology to build a \"developer-informed\" oracle for the evaluation of SZZ implementations. To explain its idea, let us take as example commit a8a97bd from the apache/thrift GitHub project, accompanied by a commit message saying: \"THRIFT-4513: fix bug in comparator introduced by e58f75d\". The developer fixing the bug is explicitly documenting the commit that introduced such a bug. Based on this observation, we defined a number of strict NLP-based heuristics to automatically identify notes in bugfixing commits in which developers explicitly reference the commit(s) that introduced the fixed bug. We applied these heuristics to a total of 19,603,736 mined through GH Archive [39], which archives all public events on GitHub.\n\nOur goal with the above described process is not to be exhaustive, i.e., we do not want to identify all bug-fixing commits in which developers indicated the bug-inducing commit(s), but rather to obtain a high-quality dataset of commits that were certainly of the bug-inducing kind.  [3], [4], [17]- [24] // // // AG- SZZ Kim et al. [11] B-SZZ [2], [8], [25]- [31] Manually defined (researchers) 2 301 DJ- SZZ Williams and Spacco [12] AG-SZZ [6], [7], [32]- [37] Manually defined (researchers) 1 25 L-SZZ & R- SZZ Davies et al. [13] AG-SZZ [14] Manually defined (researchers) 3 174 MA-SZZ da Costa et al. [14] AG-SZZ [6], [9], [10], [15], [16], [38] Automatically computed metrics 10 2,637 RA- SZZ Neto et al. [15] MA-SZZ [5], [6], [15] Manually defined (researchers) 10 365 RA-SZZ * Neto et al. [16] RA-SZZ None Manually defined (researchers) 10 365 For each one, we specify (i) the algorithm on which it is based, (ii) references of works using it, (iii) the oracle used in the evaluation (how it was built, number of projects and bug fixes considered).\n\nWe mined the time period between March 2011 and April 2020, obtaining 3,585 commits. To further increase the intrinsic quality of the dataset, we manually validated the 3,585 commits, to (i) verify if, from the commit message, it was clear that the developer was documenting the bug-inducing commit; and (ii) taking note of any issue referenced in the commit message (e.g., issue THRIFT-4513 in the previous example). Information from the issue tracker is exploited by some of the SZZ implementations and we wanted our dataset to include it.\n\nAs output of this process, we obtained a dataset of 1,930 validated bug-fixing commits in which developers documented the commit(s) that introduced the bug, with 212 also including information about the fixed issue(s). To the best of our knowledge, our work is the first presenting a dataset for the SZZ evaluation built by using information about the bug-inducing commit(s) explicitly reported by the bug fixer.\n\nWe tested nine variants of SZZ on our dataset. Besides reporting their precision and recall, we analyzed their complementarity and focused on the set of bug-fixes where all SZZ variants fail. A qualitative analysis of those cases allowed to distill lessons learned useful to further improve the SZZ algorithm in the future. Summarizing, our contributions are: 1) A methodology to build a \"developer-informed\" oracle for the evaluation of SZZ implementations, which does not require major manual efforts as compared to the classical manual identification of bug-inducing commits. 2) A first, easily extensible dataset built using our methodology and featuring 1,930 validated bug-fixing commits. 3) An empirical study comparing the effectiveness of several SZZ implementations. 4) A comprehensive replication package featuring (i) the dataset, and (ii) the implemented SZZ variants [40].\n\nII. BACKGROUND AND RELATED WORK We start by presenting several variants of the SZZ algorithm [1] proposed in the literature over the years. Then, we discuss how those variants have been used in SE research community. Table I presents the SZZ variants proposed in the literature. We report for each of them its name and reference, the approach it builds upon (i.e., the starting point on which the authors provide improvements), some references to works that used it, and information about the oracle used for the evaluation. Specifically, we report how the oracle was built and the number of projects/bug reports considered.\n\n\nA. SZZ and its variants\n\nAll the approaches that aim at identifying bug-inducing commits (BICs) rely on two elements: (i) the revision history of the software project, and (ii) an issue tracking system (optional, needed only by some SZZ implementations).\n\nThe original SZZ algorithm was proposed by\u015aliwerski et al. [1] (we refer to it as B-SZZ, following the notation provided by da Costa et al. [14]). B-SZZ takes as input a bug report from an issue tracking system, and tries to find the commit that fixes the bug. To do this, B-SZZ uses a two-level confidence level: syntactic (possible references to the bug ID in the issue tracker) and semantic (e.g., the bug description is contained in the commit message). B-SZZ relies on the CVS diff command to detect the lines changed in the fix commit and the annotate command to find the commits in which the lines were modified. Using this procedure, B-SZZ determines the earlier change at the location of the fix. Potential buginducing commits performed after the bug was reported are always ignored.\n\nKim et al. [11] noticed that B-SZZ has limitations mostly related to formatting/cosmetic changes (e.g., moving a bracket to the next line). Such changes can deceive B-SZZ: B-SZZ (i) can report as BIC a revision which only changed the code formatting, and (ii) it can consider as part of a bug-fix a formatting change unrelated to the actual fix. They introduce a variant (AG-SZZ) in which they used an annotation graph, a data structure associating the modified lines with the containing function/method. AG-SZZ also ignores the cosmetic parts of the bug-fixes to provide more precise results.\n\nWilliams and Spacco [12] improved the AG-SZZ algorithm in two ways: first, they use a line-number mapping approach [41] instead of the annotation graph introduced by Kim et al. [11]; second, they use DiffJ [42], a Java syntax-aware diff tool, which allows their approach (which we call DJ-SZZ) to exclude non-executable changes (e.g., import statements).\n\nDavies et al. [13] propose two variations on the criterion used to select the BIC among the candidates: L-SZZ uses the largest candidate, while R-SZZ uses the latest one. These improvements were done on top of the AG-SZZ algorithm.\n\nMA-SZZ, introduced by da Costa et al. [14], excludes from the candidate BICs all the meta-changes, i.e., commits that do not change the source code. This includes (i) branch changes, which are copy operations from one branch to another, (ii) merge changes, which consist in applying the changes performed in a branch to another one, and (iii) property changes, which only modify file properties (e.g., permissions).\n\nTo further reduce the false positives, two new variants were introduced by Neto et al., RA-SZZ [15] and RA-SZZ * [16]. Both exclude from the BIC candidates the refactoring operations, i.e., changes that should not modify the behavior of the program. Both approaches use state-of-the-art tools: RA-SZZ uses RefDiff [43], while RA-SZZ * uses Refactoring Miner [44], with the second one being more effective [16].\n\nThe original SZZ was not empirically evaluated [1]. Instead, all its variants, except MA-SZZ, were manually evaluated by their authors. One of them, RA-SZZ * [16], used an external dataset, i.e., Defect4J [45]. MA-SZZ was evaluated using automated metrics, namely earliest bug appearance, future impact of a change, and realism of bug introduction [14].\n\nIn Table II we list the open-source implementations of SZZ.  SZZ Unleashed [33] partially implements DJ-SZZ: it uses line-number mapping [12] but it does not rely on DiffJ [42] for computing diffs, also working on non-Java files. It does not take into account meta-changes [14] and refactorings [16].\n\nOpenSZZ [46] implements the basic version of the approach, B-SZZ. Since it is based on the git blame command, it implicitly uses the annotated graph [11].\n\nPYDRILLER [47], a general purpose tool for analyzing git repositories, also implements B-SZZ. It uses a simple heuristic for ignoring C-and Python-style comment lines, as proposed by Kim et al. [11]. We do not report in Table II a comprehensive list of all the SZZ implementations that can be found on GitHub, but only the ones presented in papers.\n\n\nB. SZZ in Software Engineering Research\n\nThe original SZZ algorithm and its variations were used in a plethora of studies. We discuss some examples, while for a complete list we refer to the extensive literature review by Rodr\u00edguez-P\u00e9rez et al. [37], featuring 187 papers.\n\nSZZ has been used to run several empirical investigations having different goals [7]- [10], [17], [18], [20], [22]- [25], [27]- [31], [35], [37]. For example, Aman et al. [9] studied the role of local variable names in fault-introducing commits and they used SZZ to retrieve such commits, while Palomba et al. [17] focused on the impact of code smells, and used SZZ to determine whether an artifact was smelly when a fault was introduced. Many studies also leverage SZZ to evaluate defect prediction approaches [2]- [6], [19], [21], [26], [34], [38].\n\nLooking at Table I it is worth noting that, despite its clear limitations [11], many studies, even recent ones, still rely on B-SZZ [3], [4], [17]- [24] (the approaches that use git implicitly use the annotation graph defined by Kim et al. [11]). Improvements are only slowly adopted in the literature, possibly due to the fact that some of them are not released as tools and that the two standalone tools providing a public SZZ implementation were released only recently [33], [46].\n\nThe studies most similar to ours are the one by da Costa et al. [14] and the one by Rodr\u00edguez-P\u00e9rez et al. [36]. Both report a comparison of different SZZ variants. Da Costa et al. [14] defined and used a set of metrics for evaluating SZZ implementations without relying on a manually defined oracle. However, they specify that, ideally, domain experts should be involved in the construction of the dataset [14], which motivated our study. Rodr\u00edguez-P\u00e9rez et al. [37] introduced a model for distinguishing bugs caused by modifications to the source code (the ones that SZZ algorithms can detect) and the ones that are introduced due to problems with external dependencies. They also used the model to define a manually curated dataset on which they evaluated SZZ variants. Their dataset is created by researchers and not domain experts. In our study, instead, we rely on the explicit information provided by domain experts in their commit messages.\n\n\nIII. BUILDING A DEVELOPER-INFORMED DATASET OF BUG-INDUCING COMMITS\n\nWe present a methodology to build a dataset of bug-inducing commits by exploiting information provided by developers when fixing bugs. Our methodology reduces the manual effort required for building such a dataset and more important, does not assume technical knowledge of the involved source code on the researchers' side.\n\nThe proposed methodology involves two main steps: (i) automatic mining from open-source repositories of bug-fixing commits in which developers explicitly indicate the commit(s) that introduced the fixed bug, and (ii) a manual filtering aimed at improving the dataset quality by removing ambiguous commit messages that do not give confidence in the information provided by the developer. In the following, we detail these two steps. The whole process is depicted in Fig. 1.\n\n\nA. Mining Bug-fixing and Bug-inducing Commits\n\nThere are two main approaches proposed in the literature for selecting bug-fixing commits. The first one relies on the linking between commits and issues [48]: issues labeled with \"bug\", \"defect\", etc. are mined from the issue tracking system, storing their issue ID (e.g., THRIFT-4513). Then, commits referencing the issue ID are mined from the versioning system and identified as bug-fixing commit. While such a heuristic is fairly precise, it has two important drawbacks that make it unsuitable for our work. First, the link to the issue tracking system must be known and a specific crawler for each different type of issue tracker (e.g., Jira, Bugzilla, GitHub, etc.) must be built.\n\nSecond, projects can use a customized set of labels to indicate bug-related issues. Manually extracting this information for a large set of repositories is expensive. The basic idea behind this first phase is to use the commit messages to identify bug-fixing commits: we automatically analyze bug-fixing commit messages searching for those explicitly referencing bug-inducing commits.  Fig. 1: Process used for building the dataset.\n\nAs a preliminary step, we mined GH ARCHIVE [39] which provides, on a regular basis, a snapshot of public events generated on GitHub in the form of JSON files.\n\nWe mined the time period going from March 1 st 2011 to April 30 th 2020, extracting 19,603,736 commits performed in the context of push events: such events gather the commits done by a developer on a repository before performing the push action. Considering the goal of building an oracle for SZZ algorithms, we are not interested in any specific programming language. We performed three steps to select a candidate set of commits to manually analyze in the second phase: (i) we selected a first candidate set of bug-fixing commits, (ii) we used syntax-aware heuristics to refine such a set, and (iii) we removed duplicates.\n\n1) Word-Based Bug-Fixing Selection: To identify bugfixing commits, we first apply a lightweight regular expression on all the commits we gathered, as done in previous work [49], [50]. We mark as potential bug-fixes all commits accompanied by a message including at least a fix-related word 1 and a bugrelated word 2 . We exclude the messages that include the word merge to ignore merge commits. Note that we do not need such a heuristic to be 100% precise, since two additional and more precise steps will be performed on the identified set of candidate fixing commits to exclude false positives (i.e., a NLP-based step and a manual analysis).\n\n2) Syntax-Aware Filtering: We needed to select from the set of candidate bug-fixing commits only the ones in which developers likely documented the bug-inducing commit(s). We used the syntax-aware heuristics described below to do this. The first author defined such heuristics through a trial-anderror procedure, taking a 1-month time period of events on GH Archive to test and refine different versions of the heuristics, manually inspecting the achieved results after each run. The final version has been consolidated with the feedback of two additional authors.\n\nAs a preliminary step, we used the doc.sents function of the SPACY 3 Python module for NLP to extract the set S c of sentences composing each commit message c.\n\nFor each sentence s i \u2208 S c , we used SPACY to build its word dependency tree t i , i.e., a tree containing the syntactic relationships between the words composing the sentence. Fig. 2 provides an example of t i generated for the sentence \"fixes a search bug introduced by 2508e12\". By navigating the word dependency tree, we can infer that the verb \"fix\" refers to the noun \"bug\", and that the verb \"introduced\" is linked to commit id 2508e12 through the \"by\" apposition.\n\nH1: Exclude Commits Without Reference and Reverts. We split each s i \u2208 S c into words and we select all its commit hashes H(s i ) using a regular expression 4 . We ignore all the s i for which H(s i ) is empty (i.e., which do not mention any commit hash). Similarly, we filter out all the s i that either (i) start with a commit hash, or (ii) include the verb \"revert\" referring to any h j \u2208 H(s i ). We keep all the remaining s i . We exclude the commits that do not contain any valid sentence as for this heuristic. We use the H(s i ) extracted with this heuristic also for the following heuristics.\n\nH2: Coarsely Filter Explicit Introducing References. If one of the ancestors of h j is the verb \"introduce\" (in any declension), as it happens in Fig. 2, we consider this as a strong indication of the fact that the developer is indicating h j as (one of) the bug-inducing commit(s). In this case, we check if h j also includes at least one of the fix-related words 1 and one of the bug-related words 2 as one of its ancestors or children. At least one of the two words (i.e., the one indicating the fixing activity or the one referring to a bug) must be an ancestor. We do this to avoid erroneously selecting sentences such as \"Improving feature introduced in 2508e12 and fixed a bug\", in which both the fix-related and the bug-related word are children of h j .\n\nFor example, the h j in Fig. 2 meets this constraint since it has among its ancestors both fix and bug. We also exclude the cases in which the words attempt or test (again, in different declensions) appear as ancestors of h j . We do this to exclude false positives observed while experimenting with earlier versions of this heuristic.\n\nFor example, the sentence \"Remove attempt to fix error introduced in 2f780609\" belongs to a commit that aims at reverting previous changes. Similarly, the sentence \"Add tests for the fix of the bug introduced in 2f780609\" most likely belongs to the message of a test-introduction commit.\n\nH3: Finely Filter Non-Explicit Introducing References. If h j does not contain the verb \"introduce\" as one of its ancestors, we apply a finer filtering heuristic: both a word indicating a fixing activity and a word indicating a bug must appear as one of h j 's ancestors. Also, we define a list of stop-words that must not appear either in the h j 's ancestor as well as in the dependencies (i.e., ancestors and children) of the \"fixing activity\" word. Such a stop-word list, derived through a trial-and-error procedure, includes eight additional words (was, been, seem, solved, fixed, try, trie (to capture tries and tried), and by), besides attempt and test also used in H2. This allows, for example, to exclude sentences such as \"This definitely fixes the bug I tried to fix in commit 26f3fe2\", meets all selection criteria for H3 but it is a false positive.\n\n3) Duplicate Deletion: We saved the list of commits including at least one sentence s i meeting H1 and either H2 or H3 in a MySQL database. Since we analyzed a large set of projects, it was frequent that some commits were duplicated due to the fact that different forks of a given project are available. As a final step, we removed such duplicates, keeping only the commit of the main project repository.\n\nOut of the 19,603,736 parsed commits, the automated filtering selected 3,585 commits. Our goal with the above described process is not to be exhaustive, i.e., we do not want to identify all bug-fixing commits in which developers indicated the bug-inducing commit(s), but rather to obtain a high-quality dataset of commits that were certainly of the bug-inducing kind. The quality of the dataset is then further increased during the subsequent step of manual analysis.\n\n\nB. Manual Analysis\n\nFour of the authors (from now on, evaluators) manually inspected the 3,585 commits produced by the previous step. The evaluators have different backgrounds (graduate student, faculty member, junior and a senior researcher with two years of industrial experience). The goal of the manual validation was to verify (i) whether the commit was an actual bug-fix, and (ii) if it included in the commit message a non-ambiguous sentence clearly indicating the commit(s) in which the fixed bug was introduced. For both steps the evaluators mostly relied on the commit message and, if available, on possible references to the issue tracker. Those references could be issue IDs or links that the evaluators inspected to (i) ensure that the fixed issue was a bug, and (ii) store for each commit the links to the mentioned issues and, for each issue, its opening date.\n\nThe latter is an information that may be required by an SZZ implementation (e.g., SZZ Unleashed [33] and OpenSZZ [46] require the link to the issue) to exclude from the candidate list of bug-inducing commits those performed after the opening of the fixed issue.\n\nIndeed, if the fixed bug has been already reported at date d i , a commit performed on date d j > d i cannot be responsible for its introduction. Since the commits to inspect come from a variety of software systems, they rely on different issue trackers. When an explicit link was not available but an issue was mentioned in the commit message (e.g., see the commit message shown in the introduction), the evaluators searched for the project's issue tracker, looking on the GitHub repository for documentation pointing to it (in case the project did not use the GitHub issue tracker itself). If no information was found, an additional Google search was performed, looking for the project website or directly searching for the issue ID mentioned in the commit message.\n\nThe manual validation was supported by a web-based application we developed that assigns to each evaluator the candidate commits to review, showing for each of them its commit message and a clickable link to the commit GITHUB page. Using a form, the evaluator indicated whether the commit was relevant for the oracle (i.e., an actual bug-fix documenting the bug-inducing commit) or not, and listing mentioned issues together with their opening date. Each commit was assigned by the web application to two different evaluators, for a total of 7,170 evaluations. To be more conservative and to have higher confidence in our oracle, we decided to not resolve conflicts (i.e., cases in which one evaluator marked the commit as relevant and the other as irrelevant): we excluded from our oracle all commits with at least one \"irrelevant\" flag.\n\n\nC. The Obtained SZZ Oracles\n\nOut of the 3,585 manually validated commits, 1,930 (55.6%) passed our manual filtering, of which 212 include references to a valid issue (i.e., an issue labeled as a bug that can be found online). This indicates that SZZ implementations that rely on information from issue trackers can only be run on a minority of bug-fixing commits. Indeed, the 1,930 instances we report have been manually checked as true positive bugfixes, and only 212 of these (11.0%) mention the fixed issue. The dataset is available in our replication package [40].\n\nThese 1,930 commits and their related bug-inducing commits impact files written in many different languages. All the implementations of the SZZ algorithm (except for B-SZZ) perform some language-specific parsing to ignore changes performed to code comments.\n\nIn our study (Section IV) we experimented several versions of the SZZ including those requiring the parsing of comments. We implemented support for the top-8 programming languages present in our oracle (i.e., the ones responsible for more code commits): C, C++, C#, Java, JavaScript, Ruby, PHP, and Python. This led to the creation of the dataset we use in our experimentation, only including bug-fixing/inducing commits impacting files written in one of the eight programming languages we support. This dataset is also available in our replication package [40]. Table III summarizes the main characteristics of the overall dataset and of the languagefiltered one.  C  350  433  52  297  366  41  Python  271  304  36  249  279  35  C++  198  241  31  138  162  20  JS  169  180  26  127  135  18  Java  88  101  14  72  80  10  PHP  63  71  6  56  64  5  Ruby  43  47  5  36  37  4  C#  25  32  3  20  27  1  Others  498  588  48  0  0   It is worth noting that a repository or even a commit can involve several programming languages: for this reason, the total may be lower than the sum of the per-language values (i.e., a repository can be counted in two or more languages).\n\nBesides sharing the datasets as JSON files, we also share the cloned repositories from which the bug-fixing commits have been extracted. This enables the replication of our study and the use of the datasets for the assessment of future SZZ improvements.\n\n\nIV. STUDY DESIGN\n\nThe goal of this study is to experiment several implementations of the SZZ algorithm on the previously defined languagefiltered dataset (context of our study). The perspective is that of researchers interested in assessing the effectiveness of the state-of-the-art implementations and identify possible improvements that can be implemented to further improve the accuracy of the SZZ algorithm. To achieve such a goal, we aim to answer the following research question:\n\nHow do different variants of SZZ perform in identifying bug-inducing changes?\n\n\nA. Data Collection\n\nWe focused our experiment on several variants of the SZZ algorithm. Specifically, we (i) re-implemented all the main approaches available in the literature (presented in Section II) in a new tool, and (ii) adapted three existing tools (PYDRILLER [47], SZZ Unleashed [33], and OpenSZZ [46]) to work with our dataset. We provide in our replication package [40] both our tool and the adapted versions of the other tools, including detailed instructions on how to run them.\n\nWe report the details about all the implementations we compare in Table IV and, for each of them, we explicitly mention (i) how it filters the lines changed in the fix (e.g., it removes cosmetic changes), (ii) which methodology it uses for identifying the preliminary set of bug-inducing commits (e.g., annotation graph), (iii) how it filters such a preliminary set (e.g., it removes meta-changes), and (iv) if it uses a heuristic for selecting a single bug-inducing commit and, if so, which one (e.g., most recent commit).\n\nWe also explicitly mention any difference between our implementations and the approaches as described in the original papers presenting them.\n\nIt is worth noting that we intentionally made all our reimplementations optionally independent from the issue-tracker systems: we did this because most of the instances of our dataset do not provide links to the bug-report (\u223c88%). This is the reason why we did not implement the \"Issue-date\" as a BIC filtering technique by default, despite it is reported in the respective papers (e.g., for B-SZZ). However, we experiment all techniques with and without such a filtering applied.\n\nAs for the tools, instead, we did not modify their implementation of the BIC-finding procedures: e.g., we did not remove the filtering by issue date from SZZ Unleashed. On the other hand, we implemented wrappers for such tools that allowed us to run them with our dataset. SZZ Unleashed depends on a specific issue-tracker system (i.e., Jira) for filtering commits done after the bug-report was opened. We made it independent from it by adapting our datasets to the input it expects (i.e., Jira issues in JSON format). It is worth noting that, despite the complexity of such files, SZZ Unleashed only uses the issue opening date in its implementation. For this reason, we only provide such field and we set the others to null.\n\nNote that some of the original implementations listed in Table IV can identify bug-fixing commits. In our study, we did not want to test such a feature: we test a scenario in which the implementations already have the bug-fixing commits for which they should detect the bug-inducing commit(s).\n\nTo evaluate the previously described implementations, we defined two datasets extracted from the language-filtered dataset: (i) the oracle all dataset, featuring 1,115 bug-fixes, which includes both the ones with and without issue information, and (ii) the oracle issues dataset, featuring 129 instances, which includes only instances with issue information. Also, we defined two additional datasets, oracle J all (80 instances) and oracle J issues (10 instances), obtained by considering only Java-related commits from the oracle all and oracle issues , respectively. We did this because two implementations, i.e., RA-SZZ *5 and OpenSZZ, only work on Java files.\n\nWe ran all the implementations on all the datasets on which they can be executed (i.e., we did not run RA-SZZ * and OpenSZZ on the datasets including non-Java files). It is worth noting that SZZ Unleashed requires the issue date in order to work, so it would not be possible to run it on the oracle all dataset. To avoid this problem, we simulated the best-case-scenario for such commits: we pretended that an issue about the bug was created few seconds after the last buginducing commit was done. Consider the bug-fixing commit BF without issue information and its set of bug-inducing commits BIC; we assumed that the issue mentioned in BF had max b\u2208BIC (date(b)) + \u03b4 as opening date, where \u03b4 is a small time interval (we used 60 seconds).\n\n\nB. Data Analysis\n\nGiven the defined oracle and the set of bug-inducing commits detected by the experimented implementations, we evaluated its accuracy by using two widely-adopted Information Retrieval (IR) metrics, namely recall and precision [52]. i.e., we implicitly use an annotation graph [11]. We do not filter BICs based on the issue creation date.\n\nAG-SZZ Cosmetic changes [11] Annotation Graph [11] // // No differences.\n\n\nMA-SZZ\n\nCosmetic changes [11] Annotation Graph [11] Meta-Changes [14] // No differences.\n\nL-SZZ Cosmetic Changes [11] Annotation Graph [11] Meta-Changes [14] Largest [13] We filter meta-changes [14].\n\nR-SZZ Cosmetic Changes [11] Annotation Graph [11] Meta-Changes [14] Latest [13] We filter meta-changes [14].\n\nRA-SZZ * Cosmetic Changes [11] Refactorings [16] Annotation Graph [11] Meta-Changes [14] // We use Refactoring Miner 2.0 [51].\n\n\nSZZ@PYD\n\nCosmetic Changes [11] Annotation Graph [11] // // We implement a wrapper for PYDRILLER [47].\n\n\nSZZ@UNL\n\nCosmetic Changes [11] Line-number Mapping [12] Issue-date [1] // We implement a wrapper for SZZ Unleashed [33].\n\nSZZ@OPN // Annotation Graph [11] // // We implement a wrapper for OpenSZZ [46].\n\nWe computed them using the following formulas:\nrecall = |correct \u2229 identified| |correct| precision = |correct \u2229 identified| |identified|\nwhere correct and identified represent the set of true positive bug-inducing commits (those indicated by the developers in the commit message) and the set of bug-inducing commits detected by the experimented algorithm, respectively. As an aggregate indicator of precision and recall, we report the Fmeasure [52], defined as the harmonic mean of precision and recall. Such metrics were also used in previous work for evaluating SZZ variants (e.g., Neto et al. [16]). Given the set of experimented SZZ variants/tools SZZ exp = {v 1 , v 2 , . . . v n }, we also analyze their complementarity by computing the following metrics for each v i [53]:\ncorrectv i \u2229v j = |correctv i \u2229 correctv j | |correctv i \u222a correctv j | correct v i \\(SZZ exp \\v i ) = |correctv i \\ correct (SZZ exp \\v i ) | |correctv i \u222a correct (SZZ exp \\v i |\nwhere correct vi represents the set of correct bug-inducing commits detected by v i and correct (SZZexp\\vi) the correct bug-inducing commits detected by all other techniques but v i . correct vi\u2229vj measures the overlap between the set of correct bug-inducing commits identified by two given implementations: we computed it between all the pairs of SZZ variants and present the results using a heatmap. correct vi\\(SZZ exp \\vi) , instead, measures the correct bug-inducing commits identified only by technique v i and missed by all others. It is worth clarifying that, when we compute the overlap metrics, we compare all the implementations among them on the same dataset. This means, for example, that we do not compute the overlap between a variant tested on oracle all and another variant tested on oracle issues .\n\nAs a last step in our analysis, we compute the set of bugfixing commits for which none of the experimented techniques was able to correctly identify the bug-inducing commit(s). We qualitatively discuss these cases to understand their peculiarities and point to future improvements of the SZZ algorithm.  The top part of the table shows the results when the issue date filter has not been applied, while the bottom part relates to the application of the date filter. With \"issue date filter\" we refer to the process through which we remove from the list of candidate bug-inducing commits returned by a given technique all those performed after the issue documenting the bug has been opened. Those are known to be false positives. For this reason, such a filter is expected to not have any impact on recall (since the discarded bug-inducing commits should all be false positives) while increasing precision. The left part of Table V shows the results achieved on oracle all , while the right part focuses on oracle issue .\n\n\nV. RESULTS DISCUSSION\n\nThe first result to extrapolate from Table V is the general trend concerning the performance of the SZZ implementations.\n\nWhen not using the issue date filtering (top part), the highest achieved F-Measure is 61% (R-SZZ). R-SZZ uses the annotation graph, ignores cosmetic changes and meta-changes, and only considers as bug-inducing commits the latest change that impacted a line changed to fix the bug.\n\nSuch a combination of heuristics make the R-SZZ the most precise on both oracles, achieving a 66% precision on oracle all and 64% on oracle issue . With respect to recall/precision tradeoff, there is a price to pay in terms of recall that, however, it is not dramatically worse compared to the best approach in terms of recall: SZZ@UNL (SZZ Unleashed). The latter achieves a 72% recall on both oracle all and oracle issue datasets, with, however, a precision of 9% and 6%, respectively. We investigated the reasons behind such a low precision, finding that it is mainly due to a set of outlier bug-fixing commits for which SZZ@UNL identifies a high number of (false positive) bug-inducing commits. For example, three bug-fixing commits are responsible for 72 identified buginducing commits, out of which only three are correct. We analyzed the distribution of bug-inducing commits reported by SZZ@UNL for the different bug-fixing commits. Cases for which more than 20 bug-inducing commits are identified for a single bug-fix can be considered outliers. By ignoring those cases, the recall and precision of SZZ@UNL are 67% and 18%, respectively on oracle all , and 67% and 17% on oracle issue . By lowering the outlier threshold to 10 buginducing, the precision grows in both datasets to 24%. We believe that the low precision of SZZ@UNL may be due to misbehavior of the tool in few isolated cases.\n\nTwo implementations (i.e., RA-SZZ * and SZZ@OPN) only work with Java files. In this case, we compute their recall and precision assuming by only considering the bug-fixing commits impacting Java files. Both of them exhibit limited recall and precision. While this is due in part to limitations of the implementations, it is also worth noting that the number of Java-related commits in our datasets is quite limited (i.e., 80 in oracle all and only 10 in oracle issue ). Thus, failing on a few of those cases penalizes in terms of performance metrics. Still, we found the low precision of RA-SZZ * surprising, considering the expensive mechanism it uses to limit false positives (i.e., ignoring lines impacted by refactoring operations detected by Refactoring Miner [51].\n\nB-SZZ, the simplest SZZ version, exhibits a good recall of 69% on both datasets, making it the second-best algorithm after SZZ@UNL. Nonetheless, B-SZZ pays in precision, making it the fourth algorithm together with the PyDriller implementation for oracle all and the fifth for oracle issue . The similarity between B-SZZ and the PyDriller implementation results in very similar performances.\n\nAG-SZZ, L-SZZ, and MA-SZZ exhibit, as compared to others, good performance for both recall and precision. These algorithms provide a good balance between recall and precision, as also shown by their F-Measure (\u223c50%).\n\nThe bottom of Table V shows the results achieved by the same algorithms when using the issue data filter.\n\nAs expected, the recall remains equal to the previous scenario in all cases, with marginal improvements in precision (thanks to the removal of some false positives). While most of the algorithms improve their precision by 1%-4%, two algorithms obtain substantial improvements in the oracle all dataset: RA-SZZ * (+8%) and R-SZZ (+7%). This boosts the latter to a very good 73% precision on oracle all , and 67% on oracle issue (+3%).\n\nTo summarize the achieved results: We found that R-SZZ is the most precise variant on our datasets, with a precision \u223c70% when the issue date filter is applied. Thus, we recommend it when precision is more important than recall (e.g., when a set of bug-inducing commits must be mined for qualitative analysis). SZZ@UNL ensures instead a high recall at, however, a high precision cost. If the focus is on recall, the current recommendation is to rely on B-SZZ, using, for example, the implementation provided by PyDriller. Finally, looking at Table V, it is clear that there are still margins of improvement for the accuracy of the SZZ algorithm. We discuss possible directions for future work in Section V-A.  This metric measures the correct bug-inducing commits identified only by technique v i and missed by all the others. Fig. 3a and Fig. 3b depicts the correct vi\u2229vj metric computed between each pair of SZZ variants when not filtering based on the issue date, while Fig. 4a and Fig. 4b show the same metric when the issue filter has been applied. Given the metric definition, the depicted heatmaps are symmetric (i.e., correct vi\u2229vj = correct vj \u2229vi ). The only technique able to identify bug-inducing commits missed by all others SZZ implementations is SZZ@UNL (20 on oracle all and 3 on oracle issue ) - Table VI. This is not surprising considering the high SZZ@UNL recall and the high number of bug-inducing commits it returns for certain bug-fixes. It also explains why none of the other implementations identifies bug-inducing commits missed by all the others: Given 804 as cardinality of the intersection of the true positives identified by all SZZ techniques, SZZ@UNL correctly retrieves 800 of them.\n\nLooking at the overlap metrics in Fig. 3 and Fig. 4, two observations can be made. First, the overlap in the identified true positives is substantial. Excluding SZZ@OPN, 21 of the 28 comparisons have an overlap in the identified true positives \u226570% and the lower values are still in the range 60-70%. The low overlap values observed for SZZ@OPN are instead due to the its low recall. Second, the complementarity between the different SZZ variants is quite low, which indicates that there is a set of bug-fixing commits for which all of the variants fail in identifying the correct bug-inducing commit(s).  We manually analyzed those cases to derive possible future improvements to the SZZ.\n\n\nA. Improvements to SZZ\n\nThe manual analysis of 311 bug-fixing commits on which all SZZ variants fail allowed us to identify recurring patterns and distill three possible ways to improve the SZZ algorithm.\n\n1) The buggy line is not always impacted in the bug-fix: In some cases, fixing a bug introduced in line l may not result in changes performed to l. An example in Java is the addition of an if guard statement checking for null values before accessing a variable.\n\nIn this case, while the bug has been introduced with the code accessing the variable without checking whether it is null, the bug-fixing commit does not impact such a line, it just adds the needed if statement. An example from our dataset is the bug-fixing commit from the thcrap repository [54] in which line 289 is modified to fix a bug introduced in commit b67116d, as pointed by the developer in the commit message. However, the bug was introduced with changes performed on line 290 [54]. Thus, running git blame on line 289 of the fix commit will retrieve a wrong bug-inducing commit. Defining approaches to identify the correct bug-inducing commit in these cases is far from trivial. However, by manually analyzing a large dataset of bugfixing commits, it should be possible to identify fixing patterns with associated buggy lines. Such a dataset could be used to train a model able, given a bug-fixing commit, to point to the location of the bug.\n\n2) SZZ is sensible to history rewritings: Bird et al. [55] highlighted some of the peril of mining git repositories, among which the possibility for developers to rewrite the change history. This can be achieved through rebasing, for example: using such a strategy can have an impact on mining the change history [56], and, therefore, on the performance of the SZZ algorithm. Besides rebasing, git allows to partially rewrite history by reverting changes introduced in one or more commits in the past. This action is often performed by developers when a task they are working on leads to dead end. Once run, the revert command results in new commits in the change history that turn back the indicated changes. Consequently, SZZ can improperly show one of these commits as candidate bug-inducing.\n\nFor example, in the message of commit 5d8cee1 from the xkb-switch project [57], the developer indicates that the bug she is fixing has been introduced in commit 42abcc. By performing a blame on the fix commit, git returns as a buginducing commit 8b9cf29 [58], which is a revert commit. By performing an additional blame step, the correct bug-inducing commit pointed by the developer can be retrieved [59]. Future SZZ variants should handle revert commits, and properly deal with them when analyzing the change history.\n\n3) Looking at the \"big picture\" in code changes: In several bug-fixing commits we inspected, the implemented changes included both added and modified/deleted lines. SZZ implementations focus on the latter, since there is no way to blame a newly added line. However, we found cases in which the added lines were responsible for the bug-fixing, while the modified/deleted ones were unrelated. There have been a recent attempt to address this problem: Sahal and Tosun [60] proposed an SZZ extension that considers past history of all the lines in the block in which the added line appears. However, the research in this aspect is still at the beginning.\n\nAn example is commit ca11949 from the snake repository [61], in which two lines are added and two deleted to fix a bug. The deleted lines, while being the target of SZZ, are unrelated to the bug-fix, as clear from the commit message pointing to commit 315a64b [62] as the one responsible for the bug introduction. In the bug-inducing commit, the developer refactored the code to simplify an if condition. While refactoring the code, she introduced a bug (i.e., she missed an else branch). The fixing adds the else branch to the sequence of if/else if branches introduced in the buginducing commit. In this case, by relying on static analysis, it should be possible to link the added lines, representing the else branch, to the set of if/else if statements preceding it. While the added lines cannot be blamed, lines related to them (e.g., acting on the same variable, being part of the same \"high-level construct\" like in this case) could be blamed to increase the chances of identifying the bug-inducing commit.\n\nWhile this would help recall, it would penalize precision without careful heuristics aimed at filtering out false positives.\n\n\nVI. THREATS TO VALIDITY\n\nConstruct validity. During the manual validation, the evaluators mainly relied on the commit message and the linked issue(s), when available, to confirm that a mined commit was a bug-fixing commit. Misleading information in the commit message could result in the introduction of false positive instances in our dataset. However, all commits have been checked by at least two evaluators and doubtful cases have been excluded, privileging a conservative approach. To build our dataset, we considered all the projects from GitHub, without explicitly defining criteria to select only projects that are invested in software quality. Our assumption is that the fact that developers take care of documenting the bugintroducing commit(s) is an indication that they care about software quality. To ensure that the commits in our dataset are from projects that take quality into account, we manually analyzed 123 projects from our dataset, which allowed us to cover a significant sample of commits (286 out of 1,115, with 95%\u00b15% confidence level). For each of them, we checked if they contained elements that indicate a certain degree of attention to software quality, i.e., (i) unit test cases, (ii) code reviews (through pull requests), (iii) and continuous integration pipelines. We found that in 95% of the projects, developers (i) wrote unit test cases, and (ii) conducted code reviews through pull requests. Also, we found CI pipelines in 75% of the projects.\n\nInternal validity. There is a possible subjectiveness introduced of the manual analysis, which has been mitigated with multiple evaluators per bug-fix. Also, we reimplemented most of the experimented SZZ approaches, thus possibly introducing variations as compared to what proposed by the original authors. We followed the description of the approaches in the original papers, documented in Table IV any difference between our implementations and the original proposals, and share our implementations [40]. Also, note that the differences documented in Table IV always aim at improving the performance of the SZZ variants and, thus, should not be detrimental for their performance.\n\nExternal validity. While it is true that we mined millions of commits to build our dataset, we used very strict filtering criteria that resulted in 1,930 instances for our oracle. Also, the SZZ implementations have been experimented on a smaller dataset of 1,115 instances that is, however, still larger than those used in previous works. Finally, our dataset represents a subset of the bug-fixes performed by developers. This is due to our design choice, where we used strict selection criteria when building our oracle to prefer quality over quantity. It is possible that our dataset is biased towards a specific type of bug-fixing commits: there might be an inherent difference between the bug fixes for which developers document the buginducing commit(s) (i.e., the only ones we considered) and other bug fixes.\n\nVII. CONCLUSION When an algorithm like SZZ becomes so prominent in software engineering research, it is more than just necessary to explore ways to ameliorate its performance. Still, it is crucial to create a platform that allows for a sound and fair comparison of any new variant.\n\nOur goal was to create such a platform, exemplified in a publicly available and extensible oracle of multiple and documented datasets, together with open source re-implementations of a considerable number of variants.\n\nMoreover, as we used our oracle to compare the variants and check our re-implementation validity, we came up with several concrete improvements to the existing SZZ variants.\n\nGiven the pivotal role of SZZ for various research endeavors, for example, in the context of defect analysis and prediction, and the whole field of MSR (mining software repositories), we believe our work can set the stage for numerous and, above all, comparable ameliorations of the seminal SZZ algorithm.\n\n1Fig. 2 :\n2fix or solve 2 bug, issue, problem, error, or misfeature 3 https://spacy.io/ Example of word dependency tree built by SPACY.\n\nFig. 3 :\n3Overlap between SZZ variants when no issue date filter is applied.\n\nFig. 4 :\n4Overlap between SZZ variants when the issue date filter is applied.\n\nTABLE I :\nIVariants of the SZZ algorithm.\n\nTABLE II :\nIIOpen-source tools implementing SZZ.\n\nTABLE III :\nIIIFeatures of the language-filtered/overall datasets.\n\nTABLE IV :\nIVCharacteristics of the SZZ implementations we compare in our study. We mark with a \" \" our re-implementations.Acronym \nFix Line Filtering \nBIC Identification Method \nBIC Filtering \nBIC Selection \nDifferences w.r.t. the original paper \n\nB-SZZ \n// \nAnnotation Graph [11] \n// \n// \nWe use git blame instead of the CVS annotate, \n\n\nTable V\nVreports the results achieved by the experimented SZZ variants and tools.\n\nTABLE V :\nVPrecision, recall, and F-measure calculated for all SZZ algorithms. \u2020 Java only files.Algorithm \noracle all \noracleissue \nRecall \nPrecision \nF1 \nRecall \nPrecision \nF1 \n\nNo issue date filter \n\nB-SZZ \n0.69 \n0.39 \n0.50 \n0.69 \n0.38 \n0.49 \nAG-SZZ \n0.60 \n0.45 \n0.52 \n0.62 \n0.43 \n0.51 \nL-SZZ \n0.45 \n0.52 \n0.48 \n0.43 \n0.49 \n0.46 \nR-SZZ \n0.57 \n0.66 \n0.61 \n0.56 \n0.64 \n0.60 \nMA-SZZ \n0.64 \n0.36 \n0.46 \n0.65 \n0.36 \n0.47 \n \u2020RA-SZZ * \n0.45 \n0.35 \n0.39 \n0.40 \n0.57 \n0.47 \nSZZ@PYD \n0.67 \n0.39 \n0.49 \n0.68 \n0.39 \n0.50 \nSZZ@UNL \n0.72 \n0.09 \n0.16 \n0.72 \n0.06 \n0.12 \n \u2020SZZ@OPN \n0.19 \n0.32 \n0.24 \n0.10 \n0.50 \n0.17 \n\nWith date filter \n\nB-SZZ \n0.69 \n0.42 \n0.53 \n0.69 \n0.39 \n0.50 \nAG-SZZ \n0.60 \n0.49 \n0.54 \n0.62 \n0.44 \n0.52 \nL-SZZ \n0.45 \n0.54 \n0.49 \n0.43 \n0.50 \n0.46 \nR-SZZ \n0.57 \n0.73 \n0.64 \n0.56 \n0.67 \n0.61 \nMA-SZZ \n0.64 \n0.39 \n0.48 \n0.65 \n0.37 \n0.47 \n \u2020RA-SZZ * \n0.45 \n0.43 \n0.44 \n0.40 \n0.57 \n0.47 \nSZZ@PYD \n0.67 \n0.42 \n0.52 \n0.68 \n0.41 \n0.51 \nSZZ@UNL \n0.72 \n0.09 \n0.16 \n0.72 \n0.06 \n0.12 \n \u2020SZZ@OPN \n0.19 \n0.33 \n0.24 \n0.10 \n0.50 \n0.17 \n\n\n\nTable\nVI shows the correct vi\\(SZZ exp \\vi) metric we computed for each SZZ variant v i .\n\nTABLE VI :\nVIBug inducing commits correctly identified exclusively by the v i algorithm. \u2020 Java only files.Algorithm \nNo date filter \nWith date filter \noracle all \noracleissue \noracle all \noracleissue \n\nB-SZZ \n0/804 \n0/94 \n0/804 \n0/94 \nAG-SZZ \n0/804 \n0/94 \n0/804 \n0/94 \nL-SZZ \n0/804 \n0/94 \n0/804 \n0/94 \nR-SZZ \n0/804 \n0/94 \n0/804 \n0/94 \nMA-SZZ \n0/804 \n0/94 \n0/804 \n0/94 \n \u2020RA-SZZ * \n0/56 \n0/7 \n0/56 \n0/7 \nSZZ@PYD \n0/804 \n0/94 \n0/804 \n0/94 \nSZZ@UNL \n20/804 (2.5%) \n3/94 (3.2%) \n20/804 (2.5%) \n3/94 (2.2%) \n \u2020SZZ@OPN \n0/56 \n0/7 \n0/56 \n0/7 \n\n\n[0-9a-f]{6,40}\nIt relies on Refactoring Miner[51] which only works on Java files.\nACKNOWLEDGMENT This project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation programme (grant agreement No. 851720). We are grateful for the support by the Swiss National Science foundation (SNF) and JSPS (Project \"SEN-SOR\").\nWhen do changes induce fixes. J \u015aliwerski, T Zimmermann, A Zeller, ACM sigsoft software engineering notes. 30J.\u015aliwerski, T. Zimmermann, and A. Zeller, \"When do changes induce fixes?\" ACM sigsoft software engineering notes, vol. 30, no. 4, pp. 1-5, 2005.\n\nBug prediction based on finegrained module histories. H Hata, O Mizuno, T Kikuno, 2012 34th international conference on software engineering (ICSE). IEEEH. Hata, O. Mizuno, and T. Kikuno, \"Bug prediction based on fine- grained module histories,\" in 2012 34th international conference on software engineering (ICSE). IEEE, 2012, pp. 200-210.\n\nOnline defect prediction for imbalanced data. M Tan, L Tan, S Dara, C Mayeux, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering. IEEE2M. Tan, L. Tan, S. Dara, and C. Mayeux, \"Online defect prediction for imbalanced data,\" in 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, vol. 2. IEEE, 2015, pp. 99-108.\n\nFine-grained just-in-time defect prediction. L Pascarella, F Palomba, A Bacchelli, Journal of Systems and Software. 150L. Pascarella, F. Palomba, and A. Bacchelli, \"Fine-grained just-in-time defect prediction,\" Journal of Systems and Software, vol. 150, pp. 22-36, 2019.\n\nJust-in-time defect identification and localization: A two-phase framework. M Yan, X Xia, Y Fan, A E Hassan, D Lo, S Li, IEEE Transactions on Software Engineering. M. Yan, X. Xia, Y. Fan, A. E. Hassan, D. Lo, and S. Li, \"Just-in-time defect identification and localization: A two-phase framework,\" IEEE Transactions on Software Engineering, 2020.\n\nThe impact of changes mislabeled by szz on just-in-time defect prediction. Y Fan, X Xia, D A Da Costa, D Lo, A E Hassan, S Li, IEEE Transactions on Software Engineering. Y. Fan, X. Xia, D. A. da Costa, D. Lo, A. E. Hassan, and S. Li, \"The impact of changes mislabeled by szz on just-in-time defect prediction,\" IEEE Transactions on Software Engineering, 2019.\n\nFour eyes are better than two: On the impact of code reviews on software quality. G Bavota, B Russo, 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEEG. Bavota and B. Russo, \"Four eyes are better than two: On the impact of code reviews on software quality,\" in 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, 2015, pp. 81-90.\n\nAn empirical study on developer-related factors characterizing fix-inducing commits. M Tufano, G Bavota, D Poshyvanyk, M Di Penta, R Oliveto, A De Lucia, Journal of Software: Evolution and Process. 2911797M. Tufano, G. Bavota, D. Poshyvanyk, M. Di Penta, R. Oliveto, and A. De Lucia, \"An empirical study on developer-related factors characterizing fix-inducing commits,\" Journal of Software: Evolution and Process, vol. 29, no. 1, p. e1797, 2017.\n\nEmpirical study of fault introduction focusing on the similarity among local variable names. H Aman, S Amasaki, T Yokogawa, M Kawahara, QuASoQ@ APSEC. H. Aman, S. Amasaki, T. Yokogawa, and M. Kawahara, \"Empirical study of fault introduction focusing on the similarity among local variable names,\" in QuASoQ@ APSEC, 2019, pp. 3-11.\n\nExtracting and studying the logging-codeissue-introducing changes in java-based large-scale open source software systems. B Chen, Z M J Jiang, Empirical Software Engineering. 244B. Chen and Z. M. J. Jiang, \"Extracting and studying the logging-code- issue-introducing changes in java-based large-scale open source software systems,\" Empirical Software Engineering, vol. 24, no. 4, pp. 2285- 2322, 2019.\n\nAutomatic identification of bug-introducing changes. S Kim, T Zimmermann, K Pan, E JamesJr, 21st IEEE/ACM international conference on automated software engineering (ASE'06). IEEES. Kim, T. Zimmermann, K. Pan, E. James Jr et al., \"Automatic iden- tification of bug-introducing changes,\" in 21st IEEE/ACM international conference on automated software engineering (ASE'06). IEEE, 2006, pp. 81-90.\n\nSzz revisited: verifying when changes induce fixes. C Williams, J Spacco, Proceedings of the 2008 workshop on Defects in large software systems. the 2008 workshop on Defects in large software systemsC. Williams and J. Spacco, \"Szz revisited: verifying when changes induce fixes,\" in Proceedings of the 2008 workshop on Defects in large software systems, 2008, pp. 32-36.\n\nComparing text-based and dependence-based approaches for determining the origins of bugs. S Davies, M Roper, M Wood, Journal of Software: Evolution and Process. 261S. Davies, M. Roper, and M. Wood, \"Comparing text-based and dependence-based approaches for determining the origins of bugs,\" Journal of Software: Evolution and Process, vol. 26, no. 1, pp. 107- 139, 2014.\n\nA framework for evaluating the results of the szz approach for identifying bug-introducing changes. D A Da Costa, S Mcintosh, W Shang, U Kulesza, R Coelho, A E Hassan, IEEE Transactions on Software Engineering. 437D. A. Da Costa, S. McIntosh, W. Shang, U. Kulesza, R. Coelho, and A. E. Hassan, \"A framework for evaluating the results of the szz approach for identifying bug-introducing changes,\" IEEE Transactions on Software Engineering, vol. 43, no. 7, pp. 641-657, 2016.\n\nThe impact of refactoring changes on the szz algorithm: An empirical study. E C Neto, D A Da Costa, U Kulesza, 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEEE. C. Neto, D. A. da Costa, and U. Kulesza, \"The impact of refactoring changes on the szz algorithm: An empirical study,\" in 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, 2018, pp. 380-390.\n\nRevisiting and improving szz implementations. 2019--, \"Revisiting and improving szz implementations,\" in 2019\n\nACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). IEEEACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). IEEE, 2019, pp. 1-12.\n\nOn the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation. F Palomba, G Bavota, M Di Penta, F Fasano, R Oliveto, A De Lucia, Empirical Software Engineering. 233F. Palomba, G. Bavota, M. Di Penta, F. Fasano, R. Oliveto, and A. De Lucia, \"On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation,\" Empirical Software Engineering, vol. 23, no. 3, pp. 1188-1221, 2018.\n\nEffect of developer collaboration activity on software quality in two large scale projects. B , A B Bener, Journal of Systems and Software. 118B. \u00c7 aglayan and A. B. Bener, \"Effect of developer collaboration activity on software quality in two large scale projects,\" Journal of Systems and Software, vol. 118, pp. 288-296, 2016.\n\nLocus: Locating bugs from software changes. M Wen, R Wu, S.-C Cheung, 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEEM. Wen, R. Wu, and S.-C. Cheung, \"Locus: Locating bugs from software changes,\" in 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 2016, pp. 262-273.\n\nDual ecological measures of focus in software development. D Posnett, R Souza, P Devanbu, V Filkov, 2013 35th International Conference on Software Engineering (ICSE). IEEED. Posnett, R. D'Souza, P. Devanbu, and V. Filkov, \"Dual ecological measures of focus in software development,\" in 2013 35th International Conference on Software Engineering (ICSE). IEEE, 2013, pp. 452-461.\n\nClassifying software changes: Clean or buggy?. S Kim, E J Whitehead, Y Zhang, IEEE Transactions on Software Engineering. 342S. Kim, E. J. Whitehead, and Y. Zhang, \"Classifying software changes: Clean or buggy?\" IEEE Transactions on Software Engineering, vol. 34, no. 2, pp. 181-196, 2008.\n\nInvestigating code review quality: Do people and participation matter. O Kononenko, O Baysal, L Guerrouj, Y Cao, M W Godfrey, 2015 IEEE international conference on software maintenance and evolution (ICSME). IEEEO. Kononenko, O. Baysal, L. Guerrouj, Y. Cao, and M. W. Godfrey, \"Investigating code review quality: Do people and participation matter?\" in 2015 IEEE international conference on software maintenance and evolution (ICSME). IEEE, 2015, pp. 111-120.\n\nExamining the impact of selfadmitted technical debt on software quality. S Wehaibi, E Shihab, L Guerrouj, 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE1S. Wehaibi, E. Shihab, and L. Guerrouj, \"Examining the impact of self- admitted technical debt on software quality,\" in 2016 IEEE 23rd Interna- tional Conference on Software Analysis, Evolution, and Reengineering (SANER), vol. 1. IEEE, 2016, pp. 179-188.\n\nAre sonarqube rules inducing bugs. V Lenarduzzi, F Lomio, H Huttunen, D Taibi, 2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEEV. Lenarduzzi, F. Lomio, H. Huttunen, and D. Taibi, \"Are sonarqube rules inducing bugs?\" in 2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, 2020, pp. 501-511.\n\nThe relation between developers' communication and fixinducing changes: An empirical study. M L Bernardi, G Canfora, G A Di Lucca, M Di Penta, D Distante, Journal of Systems and Software. 140M. L. Bernardi, G. Canfora, G. A. Di Lucca, M. Di Penta, and D. Distante, \"The relation between developers' communication and fix- inducing changes: An empirical study,\" Journal of Systems and Software, vol. 140, pp. 111-125, 2018.\n\nBugcache for inspections: hit or miss. F Rahman, D Posnett, A Hindle, E Barr, P Devanbu, Proceedings of the 19th ACM SIG-SOFT symposium and the 13th European conference on Foundations of software engineering. the 19th ACM SIG-SOFT symposium and the 13th European conference on Foundations of software engineeringF. Rahman, D. Posnett, A. Hindle, E. Barr, and P. Devanbu, \"Bugcache for inspections: hit or miss?\" in Proceedings of the 19th ACM SIG- SOFT symposium and the 13th European conference on Foundations of software engineering, 2011, pp. 322-331.\n\nCorrelations between bugginess and time-based commit characteristics. J Eyolfson, L Tan, P Lam, Empirical Software Engineering. 194J. Eyolfson, L. Tan, and P. Lam, \"Correlations between bugginess and time-based commit characteristics,\" Empirical Software Engineering, vol. 19, no. 4, pp. 1009-1039, 2014.\n\nStudying high impact fixinducing changes. A T Misirli, E Shihab, Y Kamei, Empirical Software Engineering. 212A. T. Misirli, E. Shihab, and Y. Kamei, \"Studying high impact fix- inducing changes,\" Empirical Software Engineering, vol. 21, no. 2, pp. 605-641, 2016.\n\nHow long does a bug survive? an empirical study. G Canfora, M Ceccarelli, L Cerulo, M Di Penta, 2011 18th Working Conference on Reverse Engineering. IEEEG. Canfora, M. Ceccarelli, L. Cerulo, and M. Di Penta, \"How long does a bug survive? an empirical study,\" in 2011 18th Working Conference on Reverse Engineering. IEEE, 2011, pp. 191-200.\n\nWhy software repositories are not used for defect-insertion circumstance analysis more often: A case study. L Prechelt, A Pepper, Information and Software Technology. 5610L. Prechelt and A. Pepper, \"Why software repositories are not used for defect-insertion circumstance analysis more often: A case study,\" Information and Software Technology, vol. 56, no. 10, pp. 1377-1389, 2014.\n\nFair and balanced? bias in bug-fix datasets. C Bird, A Bachmann, E Aune, J Duffy, A Bernstein, V Filkov, P Devanbu, Proceedings of the 7th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering. the 7th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software EngineeringC. Bird, A. Bachmann, E. Aune, J. Duffy, A. Bernstein, V. Filkov, and P. Devanbu, \"Fair and balanced? bias in bug-fix datasets,\" in Proceedings of the 7th joint meeting of the European Software Engineering Confer- ence and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, 2009, pp. 121-130.\n\nCovrig: A framework for the analysis of code, test, and coverage evolution in real software. P Marinescu, P Hosek, C Cadar, Proceedings of the 2014 international symposium on software testing and analysis. the 2014 international symposium on software testing and analysisP. Marinescu, P. Hosek, and C. Cadar, \"Covrig: A framework for the analysis of code, test, and coverage evolution in real software,\" in Proceedings of the 2014 international symposium on software testing and analysis, 2014, pp. 93-104.\n\nSzz unleashed: an open implementation of the szz algorithm-featuring example usage in a study of just-in-time bug prediction for the jenkins project. M Borg, O Svensson, K Berg, D Hansson, Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation. the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality EvaluationM. Borg, O. Svensson, K. Berg, and D. Hansson, \"Szz unleashed: an open implementation of the szz algorithm-featuring example usage in a study of just-in-time bug prediction for the jenkins project,\" in Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation, 2019, pp. 7-12.\n\nA public bug database of github projects and its application in bug prediction. Z T\u00f3th, P Gyimesi, R Ferenc, Computational Science and Its Applications -ICCSA 2016. Springer International PublishingZ. T\u00f3th, P. Gyimesi, and R. Ferenc, \"A public bug database of github projects and its application in bug prediction,\" in Computational Science and Its Applications -ICCSA 2016. Springer International Publishing, 2016, pp. 625-638.\n\nHow often do single-statement bugs occur? the manysstubs4j dataset. R.-M Karampatsis, C Sutton, Proceedings of the 17th International Conference on Mining Software Repositories, MSR. the 17th International Conference on Mining Software Repositories, MSRTo appearR.-M. Karampatsis and C. Sutton, \"How often do single-statement bugs occur? the manysstubs4j dataset,\" in Proceedings of the 17th International Conference on Mining Software Repositories, MSR, 2020, p. To appear.\n\nHow bugs are born: a model to identify how bugs are introduced in software components. G Rodr\u00edguez-P\u00e9rez, G Robles, A Serebrenik, A Zaidman, D M Germ\u00e1n, J M Gonzalez-Barahona, Empirical Software Engineering. G. Rodr\u00edguez-P\u00e9rez, G. Robles, A. Serebrenik, A. Zaidman, D. M. Germ\u00e1n, and J. M. Gonzalez-Barahona, \"How bugs are born: a model to identify how bugs are introduced in software components,\" Empirical Software Engineering, pp. 1-47, 2020.\n\nReproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the szz algorithm. G Rodr\u00edguez-P\u00e9rez, G Robles, J M Gonz\u00e1lez-Barahona, Information and Software Technology. 99G. Rodr\u00edguez-P\u00e9rez, G. Robles, and J. M. Gonz\u00e1lez-Barahona, \"Repro- ducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the szz algorithm,\" Information and Software Technology, vol. 99, pp. 164-176, 2018.\n\nBetter data labelling with emblem (and how that impacts defect prediction). H Tu, Z Yu, T Menzies, IEEE Transactions on Software Engineering. H. Tu, Z. Yu, and T. Menzies, \"Better data labelling with emblem (and how that impacts defect prediction),\" IEEE Transactions on Software Engineering, 2020.\n\nGitHub Archive. I Grigorik, I. Grigorik, \"GitHub Archive,\" https://www.githubarchive.org, 2012.\n\n. G Rosa, L Pascarella, S Scalabrino, R Tufano, G Bavota, M Lanza, R Oliveto, Replication packageG. Rosa, L. Pascarella, S. Scalabrino, R. Tufano, G. Bavota, M. Lanza, and R. Oliveto, Replication package, https://github.com/ grosa1/icse2021-szz-replication-package.\n\nBranching and merging in the repository. C C Williams, J W Spacco, Proceedings of the 2008 international working conference on Mining software repositories. the 2008 international working conference on Mining software repositoriesC. C. Williams and J. W. Spacco, \"Branching and merging in the repository,\" in Proceedings of the 2008 international working conference on Mining software repositories, 2008, pp. 19-22.\n\nA tool which compares java files based on content. J Pace, J. Pace, \"A tool which compares java files based on content,\" 2007, http://www.incava.org/projects/java/diffj.\n\nRefdiff: detecting refactorings in version histories. D Silva, M T Valente, 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR). IEEED. Silva and M. T. Valente, \"Refdiff: detecting refactorings in version histories,\" in 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR). IEEE, 2017, pp. 269-279.\n\nAccurate and efficient refactoring detection in commit history. N Tsantalis, M Mansouri, L Eshkevari, D Mazinanian, D Dig, 2018N. Tsantalis, M. Mansouri, L. Eshkevari, D. Mazinanian, and D. Dig, \"Accurate and efficient refactoring detection in commit history,\" in 2018\n\nIEEE/ACM 40th International Conference on Software Engineering (ICSE). IEEEIEEE/ACM 40th International Conference on Software Engineering (ICSE). IEEE, 2018, pp. 483-494.\n\nDefects4j: A database of existing faults to enable controlled testing studies for java programs. R Just, D Jalali, M D Ernst, Proceedings of the 2014 International Symposium on Software Testing and Analysis. the 2014 International Symposium on Software Testing and AnalysisR. Just, D. Jalali, and M. D. Ernst, \"Defects4j: A database of existing faults to enable controlled testing studies for java programs,\" in Pro- ceedings of the 2014 International Symposium on Software Testing and Analysis, 2014, pp. 437-440.\n\nOpenszz: A free, open-source, web-accessible implementation of the szz algorithm. V Lenarduzzi, F Palomba, D Taibi, D A Tamburri, Proceedings of the 28th IEEE/ACM International Conference on Program Comprehension. the 28th IEEE/ACM International Conference on Program ComprehensionTo appearV. Lenarduzzi, F. Palomba, D. Taibi, and D. A. Tamburri, \"Openszz: A free, open-source, web-accessible implementation of the szz algorithm,\" in Proceedings of the 28th IEEE/ACM International Conference on Program Comprehension, 2020, p. To appear.\n\nPyDriller: Python framework for mining software repositories. D Spadini, M Aniche, A Bacchelli, Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering -ESEC/FSE 2018. the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering -ESEC/FSE 2018New York, New York, USAACM PressD. Spadini, M. Aniche, and A. Bacchelli, \"PyDriller: Python framework for mining software repositories,\" in Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering -ESEC/FSE 2018. New York, New York, USA: ACM Press, 2018, pp. 908-911. [Online]. Available: http://dl.acm.org/citation.cfm?doid= 3236024.3264598\n\nEmpirical evaluation of bug linking. T F Bissyande, F Thung, S W , D Lo, L Jiang, L Reveillere, 2013 17th European Conference on Software Maintenance and Reengineering. T. F. Bissyande, F. Thung, S. W. an?d D. Lo, L. Jiang, and L. Reveillere, \"Empirical evaluation of bug linking,\" in 2013 17th European Confer- ence on Software Maintenance and Reengineering, 2013, pp. 89-98.\n\nPopulating a release history database from version control and bug tracking systems. M Fischer, M Pinzger, H C Gall, 19th International Conference on Software Maintenance (ICSM 2003). Amsterdam, The Netherlands23The Architecture of Existing SystemsM. Fischer, M. Pinzger, and H. C. Gall, \"Populating a release history database from version control and bug tracking systems,\" in 19th International Conference on Software Maintenance (ICSM 2003), The Architecture of Existing Systems, 22-26 September 2003, Amsterdam, The Netherlands, 2003, p. 23.\n\nAn empirical study on learning bug-fixing patches in the wild via neural machine translation. M Tufano, C Watson, G Bavota, M D Penta, M White, D Poshyvanyk, ACM Trans. Softw. Eng. Methodol. 28429M. Tufano, C. Watson, G. Bavota, M. D. Penta, M. White, and D. Poshyvanyk, \"An empirical study on learning bug-fixing patches in the wild via neural machine translation,\" ACM Trans. Softw. Eng. Methodol., vol. 28, no. 4, pp. 19:1-19:29, 2019.\n\nRefactoringminer 2.0. N Tsantalis, A Ketkar, D Dig, IEEE Transactions on Software Engineering. N. Tsantalis, A. Ketkar, and D. Dig, \"Refactoringminer 2.0,\" IEEE Transactions on Software Engineering, 2020.\n\nR Baeza-Yates, B Ribeiro-Neto, Modern Information Retrieval. Addison-WesleyR. Baeza-Yates and B. Ribeiro-Neto, Modern Information Retrieval. Addison-Wesley, 1999.\n\nOn the equivalence of information retrieval methods for automated traceability link recovery. R Oliveto, M Gethers, D Poshyvanyk, A D Lucia, Proceedings of the 18th IEEE International Conference on Program Comprehension. the 18th IEEE International Conference on Program ComprehensionIEEE Computer SocietyR. Oliveto, M. Gethers, D. Poshyvanyk, and A. D. Lucia, \"On the equivalence of information retrieval methods for automated traceability link recovery,\" in Proceedings of the 18th IEEE International Conference on Program Comprehension. IEEE Computer Society, 2010, pp. 68-71.\n\nThe promises and perils of mining git. C Bird, P C Rigby, E T Barr, D J Hamilton, D M German, P Devanbu, 2009 6th IEEE International Working Conference on Mining Software Repositories. IEEEC. Bird, P. C. Rigby, E. T. Barr, D. J. Hamilton, D. M. German, and P. Devanbu, \"The promises and perils of mining git,\" in 2009 6th IEEE International Working Conference on Mining Software Repositories. IEEE, 2009, pp. 1-10.\n\nMining file histories: Should we consider branches. V Kovalenko, F Palomba, A Bacchelli, Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. the 33rd ACM/IEEE International Conference on Automated Software EngineeringV. Kovalenko, F. Palomba, and A. Bacchelli, \"Mining file histories: Should we consider branches?\" in Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, 2018, pp. 202-213.\n\nIdentifying bug-inducing changes for code additions. E Sahal, A Tosun, Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement. the 12th ACM/IEEE International Symposium on Empirical Software Engineering and MeasurementE. Sahal and A. Tosun, \"Identifying bug-inducing changes for code addi- tions,\" in Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, 2018, pp. 1-2.\n\nBlock bug-inducing commit wrong. Block bug-inducing commit wrong, https://github.com/krmpotic/snake/ commit/ca119496290f4ba8594c1e298a77336825c71e77.\n\nBlock bug-inducing commit wrong. Block bug-inducing commit wrong, https://github.com/krmpotic/snake/ commit/315a64b1bd627246b5a2c899ffdd47107d2b7fa6.\n", "annotations": {"author": "[{\"end\":84,\"start\":70},{\"end\":172,\"start\":85},{\"end\":191,\"start\":173},{\"end\":278,\"start\":192},{\"end\":366,\"start\":279},{\"end\":452,\"start\":367},{\"end\":467,\"start\":453},{\"end\":496,\"start\":468}]", "publisher": null, "author_last_name": "[{\"end\":83,\"start\":79},{\"end\":100,\"start\":90},{\"end\":190,\"start\":180},{\"end\":206,\"start\":200},{\"end\":294,\"start\":288},{\"end\":380,\"start\":375},{\"end\":466,\"start\":459}]", "author_first_name": "[{\"end\":78,\"start\":70},{\"end\":89,\"start\":85},{\"end\":179,\"start\":173},{\"end\":199,\"start\":192},{\"end\":287,\"start\":279},{\"end\":374,\"start\":367},{\"end\":458,\"start\":453}]", "author_affiliation": "[{\"end\":171,\"start\":102},{\"end\":277,\"start\":208},{\"end\":365,\"start\":296},{\"end\":451,\"start\":382},{\"end\":495,\"start\":469}]", "title": "[{\"end\":67,\"start\":1},{\"end\":563,\"start\":497}]", "venue": null, "abstract": "[{\"end\":2027,\"start\":612}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b0\"},\"end\":2113,\"start\":2110},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":2696,\"start\":2693},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":2701,\"start\":2698},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":2809,\"start\":2806},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2815,\"start\":2811},{\"end\":3007,\"start\":2997},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3123,\"start\":3119},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":3129,\"start\":3125},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3443,\"start\":3439},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":3629,\"start\":3625},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":3882,\"start\":3879},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":3888,\"start\":3884},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":3894,\"start\":3890},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":4383,\"start\":4379},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4492,\"start\":4488},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":4792,\"start\":4788},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":5493,\"start\":5489},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":5826,\"start\":5823},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":5831,\"start\":5828},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":5837,\"start\":5833},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":5843,\"start\":5839},{\"end\":5860,\"start\":5857},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":5876,\"start\":5872},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":5886,\"start\":5883},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":5891,\"start\":5888},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":5897,\"start\":5893},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":5903,\"start\":5899},{\"end\":5948,\"start\":5945},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":5973,\"start\":5969},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":5984,\"start\":5981},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":5989,\"start\":5986},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":5995,\"start\":5991},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":6001,\"start\":5997},{\"end\":6052,\"start\":6049},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":6071,\"start\":6067},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6083,\"start\":6079},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":6148,\"start\":6144},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6159,\"start\":6156},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":6164,\"start\":6161},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":6170,\"start\":6166},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6176,\"start\":6172},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":6182,\"start\":6178},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":6188,\"start\":6184},{\"end\":6236,\"start\":6233},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6253,\"start\":6249},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":6264,\"start\":6261},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6269,\"start\":6266},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6275,\"start\":6271},{\"end\":6322,\"start\":6321},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":6339,\"start\":6335},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":8438,\"start\":8434},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":8537,\"start\":8534},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":9386,\"start\":9383},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":9468,\"start\":9464},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10133,\"start\":10129},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":10737,\"start\":10733},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":10832,\"start\":10828},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":10894,\"start\":10890},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":10923,\"start\":10919},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":11087,\"start\":11083},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":11344,\"start\":11340},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":11818,\"start\":11814},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":11836,\"start\":11832},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":12037,\"start\":12033},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":12081,\"start\":12077},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":12128,\"start\":12124},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":12181,\"start\":12178},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":12293,\"start\":12289},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":12340,\"start\":12336},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":12483,\"start\":12479},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":12565,\"start\":12561},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":12627,\"start\":12623},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":12662,\"start\":12658},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":12763,\"start\":12759},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":12785,\"start\":12781},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":12800,\"start\":12796},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":12941,\"start\":12937},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":12958,\"start\":12954},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":13142,\"start\":13138},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13544,\"start\":13540},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":13653,\"start\":13650},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":13659,\"start\":13655},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":13665,\"start\":13661},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":13671,\"start\":13667},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":13677,\"start\":13673},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":13683,\"start\":13679},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":13689,\"start\":13685},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":13695,\"start\":13691},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":13701,\"start\":13697},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":13707,\"start\":13703},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":13713,\"start\":13709},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":13743,\"start\":13740},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":13883,\"start\":13879},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":14083,\"start\":14080},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":14088,\"start\":14085},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":14094,\"start\":14090},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":14100,\"start\":14096},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":14106,\"start\":14102},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":14112,\"start\":14108},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":14118,\"start\":14114},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":14199,\"start\":14195},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":14256,\"start\":14253},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":14261,\"start\":14258},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":14267,\"start\":14263},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":14273,\"start\":14269},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":14365,\"start\":14361},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":14597,\"start\":14593},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":14603,\"start\":14599},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":14674,\"start\":14670},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":14717,\"start\":14713},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":14791,\"start\":14787},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":15017,\"start\":15013},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":15073,\"start\":15069},{\"attributes\":{\"ref_id\":\"b49\"},\"end\":16630,\"start\":16626},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":17641,\"start\":17637},{\"attributes\":{\"ref_id\":\"b50\"},\"end\":18556,\"start\":18552},{\"attributes\":{\"ref_id\":\"b51\"},\"end\":18562,\"start\":18558},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":20384,\"start\":20383},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":21195,\"start\":21194},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":24935,\"start\":24931},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":24952,\"start\":24948},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":27275,\"start\":27271},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":28098,\"start\":28094},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":29809,\"start\":29805},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":29829,\"start\":29825},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":29847,\"start\":29843},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":29917,\"start\":29913},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":33858,\"start\":33854},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":33908,\"start\":33904},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":33995,\"start\":33991},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34017,\"start\":34013},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34071,\"start\":34067},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34093,\"start\":34089},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34111,\"start\":34107},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34159,\"start\":34155},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34181,\"start\":34177},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34199,\"start\":34195},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":34212,\"start\":34208},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34240,\"start\":34236},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34270,\"start\":34266},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34292,\"start\":34288},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34310,\"start\":34306},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":34322,\"start\":34318},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34350,\"start\":34346},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34383,\"start\":34379},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":34401,\"start\":34397},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34423,\"start\":34419},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":34441,\"start\":34437},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":34478,\"start\":34474},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34512,\"start\":34508},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34534,\"start\":34530},{\"attributes\":{\"ref_id\":\"b48\"},\"end\":34582,\"start\":34578},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34616,\"start\":34612},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":34641,\"start\":34637},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":34656,\"start\":34653},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":34705,\"start\":34701},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":34740,\"start\":34736},{\"attributes\":{\"ref_id\":\"b47\"},\"end\":34786,\"start\":34782},{\"attributes\":{\"ref_id\":\"b53\"},\"end\":35237,\"start\":35233},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":35389,\"start\":35385},{\"attributes\":{\"ref_id\":\"b54\"},\"end\":35567,\"start\":35563},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":40186,\"start\":40182},{\"end\":44710,\"start\":44706},{\"attributes\":{\"ref_id\":\"b55\"},\"end\":45232,\"start\":45228},{\"attributes\":{\"ref_id\":\"b56\"},\"end\":45491,\"start\":45487},{\"end\":46375,\"start\":46371},{\"attributes\":{\"ref_id\":\"b57\"},\"end\":46960,\"start\":46956},{\"attributes\":{\"ref_id\":\"b58\"},\"end\":47202,\"start\":47198},{\"attributes\":{\"ref_id\":\"b59\"},\"end\":47407,\"start\":47403},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":50271,\"start\":50267},{\"attributes\":{\"ref_id\":\"b52\"},\"end\":54837,\"start\":54833}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":52385,\"start\":52249},{\"attributes\":{\"id\":\"fig_2\"},\"end\":52463,\"start\":52386},{\"attributes\":{\"id\":\"fig_3\"},\"end\":52542,\"start\":52464},{\"attributes\":{\"id\":\"tab_1\",\"type\":\"table\"},\"end\":52585,\"start\":52543},{\"attributes\":{\"id\":\"tab_3\",\"type\":\"table\"},\"end\":52635,\"start\":52586},{\"attributes\":{\"id\":\"tab_6\",\"type\":\"table\"},\"end\":52703,\"start\":52636},{\"attributes\":{\"id\":\"tab_7\",\"type\":\"table\"},\"end\":53043,\"start\":52704},{\"attributes\":{\"id\":\"tab_8\",\"type\":\"table\"},\"end\":53126,\"start\":53044},{\"attributes\":{\"id\":\"tab_9\",\"type\":\"table\"},\"end\":54156,\"start\":53127},{\"attributes\":{\"id\":\"tab_10\",\"type\":\"table\"},\"end\":54247,\"start\":54157},{\"attributes\":{\"id\":\"tab_11\",\"type\":\"table\"},\"end\":54787,\"start\":54248}]", "paragraph": "[{\"end\":2607,\"start\":2046},{\"end\":3008,\"start\":2609},{\"end\":3130,\"start\":3010},{\"end\":3273,\"start\":3132},{\"end\":3543,\"start\":3275},{\"end\":4793,\"start\":3545},{\"end\":5538,\"start\":4795},{\"end\":6594,\"start\":5540},{\"end\":7137,\"start\":6596},{\"end\":7551,\"start\":7139},{\"end\":8439,\"start\":7553},{\"end\":9065,\"start\":8441},{\"end\":9322,\"start\":9093},{\"end\":10116,\"start\":9324},{\"end\":10711,\"start\":10118},{\"end\":11067,\"start\":10713},{\"end\":11300,\"start\":11069},{\"end\":11717,\"start\":11302},{\"end\":12129,\"start\":11719},{\"end\":12484,\"start\":12131},{\"end\":12786,\"start\":12486},{\"end\":12942,\"start\":12788},{\"end\":13292,\"start\":12944},{\"end\":13567,\"start\":13336},{\"end\":14119,\"start\":13569},{\"end\":14604,\"start\":14121},{\"end\":15554,\"start\":14606},{\"end\":15948,\"start\":15625},{\"end\":16422,\"start\":15950},{\"end\":17158,\"start\":16472},{\"end\":17592,\"start\":17160},{\"end\":17752,\"start\":17594},{\"end\":18378,\"start\":17754},{\"end\":19023,\"start\":18380},{\"end\":19589,\"start\":19025},{\"end\":19750,\"start\":19591},{\"end\":20224,\"start\":19752},{\"end\":20827,\"start\":20226},{\"end\":21591,\"start\":20829},{\"end\":21928,\"start\":21593},{\"end\":22217,\"start\":21930},{\"end\":23080,\"start\":22219},{\"end\":23486,\"start\":23082},{\"end\":23955,\"start\":23488},{\"end\":24833,\"start\":23978},{\"end\":25096,\"start\":24835},{\"end\":25865,\"start\":25098},{\"end\":26705,\"start\":25867},{\"end\":27276,\"start\":26737},{\"end\":27535,\"start\":27278},{\"end\":28714,\"start\":27537},{\"end\":28969,\"start\":28716},{\"end\":29457,\"start\":28990},{\"end\":29536,\"start\":29459},{\"end\":30028,\"start\":29559},{\"end\":30553,\"start\":30030},{\"end\":30696,\"start\":30555},{\"end\":31178,\"start\":30698},{\"end\":31906,\"start\":31180},{\"end\":32201,\"start\":31908},{\"end\":32866,\"start\":32203},{\"end\":33608,\"start\":32868},{\"end\":33965,\"start\":33629},{\"end\":34039,\"start\":33967},{\"end\":34130,\"start\":34050},{\"end\":34241,\"start\":34132},{\"end\":34351,\"start\":34243},{\"end\":34479,\"start\":34353},{\"end\":34583,\"start\":34491},{\"end\":34706,\"start\":34595},{\"end\":34787,\"start\":34708},{\"end\":34835,\"start\":34789},{\"end\":35568,\"start\":34926},{\"end\":36566,\"start\":35750},{\"end\":37588,\"start\":36568},{\"end\":37734,\"start\":37614},{\"end\":38016,\"start\":37736},{\"end\":39415,\"start\":38018},{\"end\":40187,\"start\":39417},{\"end\":40580,\"start\":40189},{\"end\":40798,\"start\":40582},{\"end\":40905,\"start\":40800},{\"end\":41340,\"start\":40907},{\"end\":43056,\"start\":41342},{\"end\":43747,\"start\":43058},{\"end\":43954,\"start\":43774},{\"end\":44217,\"start\":43956},{\"end\":45172,\"start\":44219},{\"end\":45969,\"start\":45174},{\"end\":46489,\"start\":45971},{\"end\":47141,\"start\":46491},{\"end\":48155,\"start\":47143},{\"end\":48281,\"start\":48157},{\"end\":49764,\"start\":48309},{\"end\":50447,\"start\":49766},{\"end\":51264,\"start\":50449},{\"end\":51547,\"start\":51266},{\"end\":51766,\"start\":51549},{\"end\":51941,\"start\":51768},{\"end\":52248,\"start\":51943}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":34925,\"start\":34836},{\"attributes\":{\"id\":\"formula_1\"},\"end\":35749,\"start\":35569}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":8665,\"start\":8658},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":12497,\"start\":12489},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":13172,\"start\":13164},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":14139,\"start\":14132},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":28109,\"start\":28100},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":28473,\"start\":28203},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":30104,\"start\":30096},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":31973,\"start\":31965},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":37498,\"start\":37491},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":37658,\"start\":37651},{\"attributes\":{\"ref_id\":\"tab_8\"},\"end\":40821,\"start\":40814},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":42663,\"start\":42655},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":50165,\"start\":50157},{\"attributes\":{\"ref_id\":\"tab_1\"},\"end\":50327,\"start\":50319}]", "section_header": "[{\"end\":2044,\"start\":2029},{\"end\":9091,\"start\":9068},{\"end\":13334,\"start\":13295},{\"end\":15623,\"start\":15557},{\"end\":16470,\"start\":16425},{\"end\":23976,\"start\":23958},{\"end\":26735,\"start\":26708},{\"end\":28988,\"start\":28972},{\"end\":29557,\"start\":29539},{\"end\":33627,\"start\":33611},{\"end\":34048,\"start\":34042},{\"end\":34489,\"start\":34482},{\"end\":34593,\"start\":34586},{\"end\":37612,\"start\":37591},{\"end\":43772,\"start\":43750},{\"end\":48307,\"start\":48284},{\"end\":52259,\"start\":52250},{\"end\":52395,\"start\":52387},{\"end\":52473,\"start\":52465},{\"end\":52553,\"start\":52544},{\"end\":52597,\"start\":52587},{\"end\":52648,\"start\":52637},{\"end\":52715,\"start\":52705},{\"end\":53052,\"start\":53045},{\"end\":53137,\"start\":53128},{\"end\":54163,\"start\":54158},{\"end\":54259,\"start\":54249}]", "table": "[{\"end\":53043,\"start\":52828},{\"end\":54156,\"start\":53225},{\"end\":54787,\"start\":54356}]", "figure_caption": "[{\"end\":52385,\"start\":52261},{\"end\":52463,\"start\":52397},{\"end\":52542,\"start\":52475},{\"end\":52585,\"start\":52555},{\"end\":52635,\"start\":52600},{\"end\":52703,\"start\":52652},{\"end\":52828,\"start\":52718},{\"end\":53126,\"start\":53054},{\"end\":53225,\"start\":53139},{\"end\":54247,\"start\":54164},{\"end\":54356,\"start\":54262}]", "figure_ref": "[{\"end\":16421,\"start\":16415},{\"end\":17552,\"start\":17546},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":19936,\"start\":19930},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":20981,\"start\":20975},{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":21623,\"start\":21617},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":42176,\"start\":42169},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":42188,\"start\":42181},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":42322,\"start\":42315},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":42334,\"start\":42327},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":43098,\"start\":43092},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":43109,\"start\":43103}]", "bib_author_first_name": "[{\"end\":55204,\"start\":55203},{\"end\":55217,\"start\":55216},{\"end\":55231,\"start\":55230},{\"end\":55484,\"start\":55483},{\"end\":55492,\"start\":55491},{\"end\":55502,\"start\":55501},{\"end\":55818,\"start\":55817},{\"end\":55825,\"start\":55824},{\"end\":55832,\"start\":55831},{\"end\":55840,\"start\":55839},{\"end\":56172,\"start\":56171},{\"end\":56186,\"start\":56185},{\"end\":56197,\"start\":56196},{\"end\":56475,\"start\":56474},{\"end\":56482,\"start\":56481},{\"end\":56489,\"start\":56488},{\"end\":56496,\"start\":56495},{\"end\":56498,\"start\":56497},{\"end\":56508,\"start\":56507},{\"end\":56514,\"start\":56513},{\"end\":56822,\"start\":56821},{\"end\":56829,\"start\":56828},{\"end\":56836,\"start\":56835},{\"end\":56838,\"start\":56837},{\"end\":56850,\"start\":56849},{\"end\":56856,\"start\":56855},{\"end\":56858,\"start\":56857},{\"end\":56868,\"start\":56867},{\"end\":57190,\"start\":57189},{\"end\":57200,\"start\":57199},{\"end\":57597,\"start\":57596},{\"end\":57607,\"start\":57606},{\"end\":57617,\"start\":57616},{\"end\":57631,\"start\":57630},{\"end\":57634,\"start\":57632},{\"end\":57643,\"start\":57642},{\"end\":57654,\"start\":57653},{\"end\":58053,\"start\":58052},{\"end\":58061,\"start\":58060},{\"end\":58072,\"start\":58071},{\"end\":58084,\"start\":58083},{\"end\":58414,\"start\":58413},{\"end\":58422,\"start\":58421},{\"end\":58426,\"start\":58423},{\"end\":58748,\"start\":58747},{\"end\":58755,\"start\":58754},{\"end\":58769,\"start\":58768},{\"end\":58776,\"start\":58775},{\"end\":59144,\"start\":59143},{\"end\":59156,\"start\":59155},{\"end\":59554,\"start\":59553},{\"end\":59564,\"start\":59563},{\"end\":59573,\"start\":59572},{\"end\":59935,\"start\":59934},{\"end\":59937,\"start\":59936},{\"end\":59949,\"start\":59948},{\"end\":59961,\"start\":59960},{\"end\":59970,\"start\":59969},{\"end\":59981,\"start\":59980},{\"end\":59991,\"start\":59990},{\"end\":59993,\"start\":59992},{\"end\":60386,\"start\":60385},{\"end\":60388,\"start\":60387},{\"end\":60396,\"start\":60395},{\"end\":60398,\"start\":60397},{\"end\":60410,\"start\":60409},{\"end\":61202,\"start\":61201},{\"end\":61213,\"start\":61212},{\"end\":61223,\"start\":61222},{\"end\":61226,\"start\":61224},{\"end\":61235,\"start\":61234},{\"end\":61245,\"start\":61244},{\"end\":61256,\"start\":61255},{\"end\":61651,\"start\":61650},{\"end\":61655,\"start\":61654},{\"end\":61657,\"start\":61656},{\"end\":61933,\"start\":61932},{\"end\":61940,\"start\":61939},{\"end\":61949,\"start\":61945},{\"end\":62300,\"start\":62299},{\"end\":62311,\"start\":62310},{\"end\":62320,\"start\":62319},{\"end\":62331,\"start\":62330},{\"end\":62667,\"start\":62666},{\"end\":62674,\"start\":62673},{\"end\":62676,\"start\":62675},{\"end\":62689,\"start\":62688},{\"end\":62981,\"start\":62980},{\"end\":62994,\"start\":62993},{\"end\":63004,\"start\":63003},{\"end\":63016,\"start\":63015},{\"end\":63023,\"start\":63022},{\"end\":63025,\"start\":63024},{\"end\":63444,\"start\":63443},{\"end\":63455,\"start\":63454},{\"end\":63465,\"start\":63464},{\"end\":63873,\"start\":63872},{\"end\":63887,\"start\":63886},{\"end\":63896,\"start\":63895},{\"end\":63908,\"start\":63907},{\"end\":64329,\"start\":64328},{\"end\":64331,\"start\":64330},{\"end\":64343,\"start\":64342},{\"end\":64354,\"start\":64353},{\"end\":64356,\"start\":64355},{\"end\":64368,\"start\":64367},{\"end\":64371,\"start\":64369},{\"end\":64380,\"start\":64379},{\"end\":64700,\"start\":64699},{\"end\":64710,\"start\":64709},{\"end\":64721,\"start\":64720},{\"end\":64731,\"start\":64730},{\"end\":64739,\"start\":64738},{\"end\":65287,\"start\":65286},{\"end\":65299,\"start\":65298},{\"end\":65306,\"start\":65305},{\"end\":65565,\"start\":65564},{\"end\":65567,\"start\":65566},{\"end\":65578,\"start\":65577},{\"end\":65588,\"start\":65587},{\"end\":65835,\"start\":65834},{\"end\":65846,\"start\":65845},{\"end\":65860,\"start\":65859},{\"end\":65870,\"start\":65869},{\"end\":66235,\"start\":66234},{\"end\":66247,\"start\":66246},{\"end\":66556,\"start\":66555},{\"end\":66564,\"start\":66563},{\"end\":66576,\"start\":66575},{\"end\":66584,\"start\":66583},{\"end\":66593,\"start\":66592},{\"end\":66606,\"start\":66605},{\"end\":66616,\"start\":66615},{\"end\":67334,\"start\":67333},{\"end\":67347,\"start\":67346},{\"end\":67356,\"start\":67355},{\"end\":67899,\"start\":67898},{\"end\":67907,\"start\":67906},{\"end\":67919,\"start\":67918},{\"end\":67927,\"start\":67926},{\"end\":68586,\"start\":68585},{\"end\":68594,\"start\":68593},{\"end\":68605,\"start\":68604},{\"end\":69007,\"start\":69003},{\"end\":69022,\"start\":69021},{\"end\":69499,\"start\":69498},{\"end\":69518,\"start\":69517},{\"end\":69528,\"start\":69527},{\"end\":69542,\"start\":69541},{\"end\":69553,\"start\":69552},{\"end\":69555,\"start\":69554},{\"end\":69565,\"start\":69564},{\"end\":69567,\"start\":69566},{\"end\":70012,\"start\":70011},{\"end\":70031,\"start\":70030},{\"end\":70041,\"start\":70040},{\"end\":70043,\"start\":70042},{\"end\":70462,\"start\":70461},{\"end\":70468,\"start\":70467},{\"end\":70474,\"start\":70473},{\"end\":70702,\"start\":70701},{\"end\":70785,\"start\":70784},{\"end\":70793,\"start\":70792},{\"end\":70807,\"start\":70806},{\"end\":70821,\"start\":70820},{\"end\":70831,\"start\":70830},{\"end\":70841,\"start\":70840},{\"end\":70850,\"start\":70849},{\"end\":71091,\"start\":71090},{\"end\":71093,\"start\":71092},{\"end\":71105,\"start\":71104},{\"end\":71107,\"start\":71106},{\"end\":71518,\"start\":71517},{\"end\":71692,\"start\":71691},{\"end\":71701,\"start\":71700},{\"end\":71703,\"start\":71702},{\"end\":72061,\"start\":72060},{\"end\":72074,\"start\":72073},{\"end\":72086,\"start\":72085},{\"end\":72099,\"start\":72098},{\"end\":72113,\"start\":72112},{\"end\":72536,\"start\":72535},{\"end\":72544,\"start\":72543},{\"end\":72554,\"start\":72553},{\"end\":72556,\"start\":72555},{\"end\":73037,\"start\":73036},{\"end\":73051,\"start\":73050},{\"end\":73062,\"start\":73061},{\"end\":73071,\"start\":73070},{\"end\":73073,\"start\":73072},{\"end\":73556,\"start\":73555},{\"end\":73567,\"start\":73566},{\"end\":73577,\"start\":73576},{\"end\":74372,\"start\":74371},{\"end\":74374,\"start\":74373},{\"end\":74387,\"start\":74386},{\"end\":74396,\"start\":74395},{\"end\":74398,\"start\":74397},{\"end\":74402,\"start\":74401},{\"end\":74408,\"start\":74407},{\"end\":74417,\"start\":74416},{\"end\":74798,\"start\":74797},{\"end\":74809,\"start\":74808},{\"end\":74820,\"start\":74819},{\"end\":74822,\"start\":74821},{\"end\":75354,\"start\":75353},{\"end\":75364,\"start\":75363},{\"end\":75374,\"start\":75373},{\"end\":75384,\"start\":75383},{\"end\":75386,\"start\":75385},{\"end\":75395,\"start\":75394},{\"end\":75404,\"start\":75403},{\"end\":75722,\"start\":75721},{\"end\":75735,\"start\":75734},{\"end\":75745,\"start\":75744},{\"end\":75906,\"start\":75905},{\"end\":75921,\"start\":75920},{\"end\":76164,\"start\":76163},{\"end\":76175,\"start\":76174},{\"end\":76186,\"start\":76185},{\"end\":76200,\"start\":76199},{\"end\":76202,\"start\":76201},{\"end\":76690,\"start\":76689},{\"end\":76698,\"start\":76697},{\"end\":76700,\"start\":76699},{\"end\":76709,\"start\":76708},{\"end\":76711,\"start\":76710},{\"end\":76719,\"start\":76718},{\"end\":76721,\"start\":76720},{\"end\":76733,\"start\":76732},{\"end\":76735,\"start\":76734},{\"end\":76745,\"start\":76744},{\"end\":77119,\"start\":77118},{\"end\":77132,\"start\":77131},{\"end\":77143,\"start\":77142},{\"end\":77592,\"start\":77591},{\"end\":77601,\"start\":77600}]", "bib_author_last_name": "[{\"end\":55214,\"start\":55205},{\"end\":55228,\"start\":55218},{\"end\":55238,\"start\":55232},{\"end\":55489,\"start\":55485},{\"end\":55499,\"start\":55493},{\"end\":55509,\"start\":55503},{\"end\":55822,\"start\":55819},{\"end\":55829,\"start\":55826},{\"end\":55837,\"start\":55833},{\"end\":55847,\"start\":55841},{\"end\":56183,\"start\":56173},{\"end\":56194,\"start\":56187},{\"end\":56207,\"start\":56198},{\"end\":56479,\"start\":56476},{\"end\":56486,\"start\":56483},{\"end\":56493,\"start\":56490},{\"end\":56505,\"start\":56499},{\"end\":56511,\"start\":56509},{\"end\":56517,\"start\":56515},{\"end\":56826,\"start\":56823},{\"end\":56833,\"start\":56830},{\"end\":56847,\"start\":56839},{\"end\":56853,\"start\":56851},{\"end\":56865,\"start\":56859},{\"end\":56871,\"start\":56869},{\"end\":57197,\"start\":57191},{\"end\":57206,\"start\":57201},{\"end\":57604,\"start\":57598},{\"end\":57614,\"start\":57608},{\"end\":57628,\"start\":57618},{\"end\":57640,\"start\":57635},{\"end\":57651,\"start\":57644},{\"end\":57663,\"start\":57655},{\"end\":58058,\"start\":58054},{\"end\":58069,\"start\":58062},{\"end\":58081,\"start\":58073},{\"end\":58093,\"start\":58085},{\"end\":58419,\"start\":58415},{\"end\":58432,\"start\":58427},{\"end\":58752,\"start\":58749},{\"end\":58766,\"start\":58756},{\"end\":58773,\"start\":58770},{\"end\":58782,\"start\":58777},{\"end\":59153,\"start\":59145},{\"end\":59163,\"start\":59157},{\"end\":59561,\"start\":59555},{\"end\":59570,\"start\":59565},{\"end\":59578,\"start\":59574},{\"end\":59946,\"start\":59938},{\"end\":59958,\"start\":59950},{\"end\":59967,\"start\":59962},{\"end\":59978,\"start\":59971},{\"end\":59988,\"start\":59982},{\"end\":60000,\"start\":59994},{\"end\":60393,\"start\":60389},{\"end\":60407,\"start\":60399},{\"end\":60418,\"start\":60411},{\"end\":61210,\"start\":61203},{\"end\":61220,\"start\":61214},{\"end\":61232,\"start\":61227},{\"end\":61242,\"start\":61236},{\"end\":61253,\"start\":61246},{\"end\":61265,\"start\":61257},{\"end\":61663,\"start\":61658},{\"end\":61937,\"start\":61934},{\"end\":61943,\"start\":61941},{\"end\":61956,\"start\":61950},{\"end\":62308,\"start\":62301},{\"end\":62317,\"start\":62312},{\"end\":62328,\"start\":62321},{\"end\":62338,\"start\":62332},{\"end\":62671,\"start\":62668},{\"end\":62686,\"start\":62677},{\"end\":62695,\"start\":62690},{\"end\":62991,\"start\":62982},{\"end\":63001,\"start\":62995},{\"end\":63013,\"start\":63005},{\"end\":63020,\"start\":63017},{\"end\":63033,\"start\":63026},{\"end\":63452,\"start\":63445},{\"end\":63462,\"start\":63456},{\"end\":63474,\"start\":63466},{\"end\":63884,\"start\":63874},{\"end\":63893,\"start\":63888},{\"end\":63905,\"start\":63897},{\"end\":63914,\"start\":63909},{\"end\":64340,\"start\":64332},{\"end\":64351,\"start\":64344},{\"end\":64365,\"start\":64357},{\"end\":64377,\"start\":64372},{\"end\":64389,\"start\":64381},{\"end\":64707,\"start\":64701},{\"end\":64718,\"start\":64711},{\"end\":64728,\"start\":64722},{\"end\":64736,\"start\":64732},{\"end\":64747,\"start\":64740},{\"end\":65296,\"start\":65288},{\"end\":65303,\"start\":65300},{\"end\":65310,\"start\":65307},{\"end\":65575,\"start\":65568},{\"end\":65585,\"start\":65579},{\"end\":65594,\"start\":65589},{\"end\":65843,\"start\":65836},{\"end\":65857,\"start\":65847},{\"end\":65867,\"start\":65861},{\"end\":65879,\"start\":65871},{\"end\":66244,\"start\":66236},{\"end\":66254,\"start\":66248},{\"end\":66561,\"start\":66557},{\"end\":66573,\"start\":66565},{\"end\":66581,\"start\":66577},{\"end\":66590,\"start\":66585},{\"end\":66603,\"start\":66594},{\"end\":66613,\"start\":66607},{\"end\":66624,\"start\":66617},{\"end\":67344,\"start\":67335},{\"end\":67353,\"start\":67348},{\"end\":67362,\"start\":67357},{\"end\":67904,\"start\":67900},{\"end\":67916,\"start\":67908},{\"end\":67924,\"start\":67920},{\"end\":67935,\"start\":67928},{\"end\":68591,\"start\":68587},{\"end\":68602,\"start\":68595},{\"end\":68612,\"start\":68606},{\"end\":69019,\"start\":69008},{\"end\":69029,\"start\":69023},{\"end\":69515,\"start\":69500},{\"end\":69525,\"start\":69519},{\"end\":69539,\"start\":69529},{\"end\":69550,\"start\":69543},{\"end\":69562,\"start\":69556},{\"end\":69585,\"start\":69568},{\"end\":70028,\"start\":70013},{\"end\":70038,\"start\":70032},{\"end\":70061,\"start\":70044},{\"end\":70465,\"start\":70463},{\"end\":70471,\"start\":70469},{\"end\":70482,\"start\":70475},{\"end\":70711,\"start\":70703},{\"end\":70790,\"start\":70786},{\"end\":70804,\"start\":70794},{\"end\":70818,\"start\":70808},{\"end\":70828,\"start\":70822},{\"end\":70838,\"start\":70832},{\"end\":70847,\"start\":70842},{\"end\":70858,\"start\":70851},{\"end\":71102,\"start\":71094},{\"end\":71114,\"start\":71108},{\"end\":71523,\"start\":71519},{\"end\":71698,\"start\":71693},{\"end\":71711,\"start\":71704},{\"end\":72071,\"start\":72062},{\"end\":72083,\"start\":72075},{\"end\":72096,\"start\":72087},{\"end\":72110,\"start\":72100},{\"end\":72117,\"start\":72114},{\"end\":72541,\"start\":72537},{\"end\":72551,\"start\":72545},{\"end\":72562,\"start\":72557},{\"end\":73048,\"start\":73038},{\"end\":73059,\"start\":73052},{\"end\":73068,\"start\":73063},{\"end\":73082,\"start\":73074},{\"end\":73564,\"start\":73557},{\"end\":73574,\"start\":73568},{\"end\":73587,\"start\":73578},{\"end\":74384,\"start\":74375},{\"end\":74393,\"start\":74388},{\"end\":74405,\"start\":74403},{\"end\":74414,\"start\":74409},{\"end\":74428,\"start\":74418},{\"end\":74806,\"start\":74799},{\"end\":74817,\"start\":74810},{\"end\":74827,\"start\":74823},{\"end\":75361,\"start\":75355},{\"end\":75371,\"start\":75365},{\"end\":75381,\"start\":75375},{\"end\":75392,\"start\":75387},{\"end\":75401,\"start\":75396},{\"end\":75415,\"start\":75405},{\"end\":75732,\"start\":75723},{\"end\":75742,\"start\":75736},{\"end\":75749,\"start\":75746},{\"end\":75918,\"start\":75907},{\"end\":75934,\"start\":75922},{\"end\":76172,\"start\":76165},{\"end\":76183,\"start\":76176},{\"end\":76197,\"start\":76187},{\"end\":76208,\"start\":76203},{\"end\":76695,\"start\":76691},{\"end\":76706,\"start\":76701},{\"end\":76716,\"start\":76712},{\"end\":76730,\"start\":76722},{\"end\":76742,\"start\":76736},{\"end\":76753,\"start\":76746},{\"end\":77129,\"start\":77120},{\"end\":77140,\"start\":77133},{\"end\":77153,\"start\":77144},{\"end\":77598,\"start\":77593},{\"end\":77607,\"start\":77602}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":5832984},\"end\":55427,\"start\":55173},{\"attributes\":{\"id\":\"b1\",\"matched_paper_id\":6343927},\"end\":55769,\"start\":55429},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":9438267},\"end\":56124,\"start\":55771},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":57869281},\"end\":56396,\"start\":56126},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":215890805},\"end\":56744,\"start\":56398},{\"attributes\":{\"id\":\"b5\"},\"end\":57105,\"start\":56746},{\"attributes\":{\"id\":\"b6\",\"matched_paper_id\":4499379},\"end\":57509,\"start\":57107},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":18098194},\"end\":57957,\"start\":57511},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":208731180},\"end\":58289,\"start\":57959},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":71144509},\"end\":58692,\"start\":58291},{\"attributes\":{\"id\":\"b10\",\"matched_paper_id\":14788283},\"end\":59089,\"start\":58694},{\"attributes\":{\"id\":\"b11\",\"matched_paper_id\":10755249},\"end\":59461,\"start\":59091},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":32517396},\"end\":59832,\"start\":59463},{\"attributes\":{\"id\":\"b13\",\"matched_paper_id\":2017285},\"end\":60307,\"start\":59834},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":4614056},\"end\":60771,\"start\":60309},{\"attributes\":{\"id\":\"b15\"},\"end\":60882,\"start\":60773},{\"attributes\":{\"id\":\"b16\"},\"end\":61091,\"start\":60884},{\"attributes\":{\"id\":\"b17\",\"matched_paper_id\":216919554},\"end\":61556,\"start\":61093},{\"attributes\":{\"id\":\"b18\",\"matched_paper_id\":30796594},\"end\":61886,\"start\":61558},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":13048843},\"end\":62238,\"start\":61888},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":3234596},\"end\":62617,\"start\":62240},{\"attributes\":{\"id\":\"b21\",\"matched_paper_id\":14525572},\"end\":62907,\"start\":62619},{\"attributes\":{\"id\":\"b22\",\"matched_paper_id\":14127293},\"end\":63368,\"start\":62909},{\"attributes\":{\"id\":\"b23\",\"matched_paper_id\":14108538},\"end\":63835,\"start\":63370},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":209415221},\"end\":64234,\"start\":63837},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":4631588},\"end\":64658,\"start\":64236},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":46530},\"end\":65214,\"start\":64660},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":7747774},\"end\":65520,\"start\":65216},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":7357253},\"end\":65783,\"start\":65522},{\"attributes\":{\"id\":\"b29\",\"matched_paper_id\":30617219},\"end\":66124,\"start\":65785},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":10662655},\"end\":66508,\"start\":66126},{\"attributes\":{\"id\":\"b31\",\"matched_paper_id\":6545957},\"end\":67238,\"start\":66510},{\"attributes\":{\"id\":\"b32\",\"matched_paper_id\":12372782},\"end\":67746,\"start\":67240},{\"attributes\":{\"id\":\"b33\",\"matched_paper_id\":67877147},\"end\":68503,\"start\":67748},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":33138628},\"end\":68933,\"start\":68505},{\"attributes\":{\"id\":\"b35\",\"matched_paper_id\":173188438},\"end\":69409,\"start\":68935},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":203693795},\"end\":69856,\"start\":69411},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":46894288},\"end\":70383,\"start\":69858},{\"attributes\":{\"id\":\"b38\",\"matched_paper_id\":208006436},\"end\":70683,\"start\":70385},{\"attributes\":{\"id\":\"b39\"},\"end\":70780,\"start\":70685},{\"attributes\":{\"id\":\"b40\"},\"end\":71047,\"start\":70782},{\"attributes\":{\"id\":\"b41\",\"matched_paper_id\":16746121},\"end\":71464,\"start\":71049},{\"attributes\":{\"id\":\"b42\"},\"end\":71635,\"start\":71466},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":11506870},\"end\":71994,\"start\":71637},{\"attributes\":{\"id\":\"b44\"},\"end\":72264,\"start\":71996},{\"attributes\":{\"id\":\"b45\"},\"end\":72436,\"start\":72266},{\"attributes\":{\"id\":\"b46\",\"matched_paper_id\":12796895},\"end\":72952,\"start\":72438},{\"attributes\":{\"id\":\"b47\",\"matched_paper_id\":221638464},\"end\":73491,\"start\":72954},{\"attributes\":{\"id\":\"b48\",\"matched_paper_id\":215818375},\"end\":74332,\"start\":73493},{\"attributes\":{\"id\":\"b49\",\"matched_paper_id\":15462915},\"end\":74710,\"start\":74334},{\"attributes\":{\"id\":\"b50\",\"matched_paper_id\":17716088},\"end\":75257,\"start\":74712},{\"attributes\":{\"id\":\"b51\",\"matched_paper_id\":56517510},\"end\":75697,\"start\":75259},{\"attributes\":{\"id\":\"b52\",\"matched_paper_id\":225538546},\"end\":75903,\"start\":75699},{\"attributes\":{\"id\":\"b53\"},\"end\":76067,\"start\":75905},{\"attributes\":{\"id\":\"b54\",\"matched_paper_id\":4823379},\"end\":76648,\"start\":76069},{\"attributes\":{\"id\":\"b55\",\"matched_paper_id\":883483},\"end\":77064,\"start\":76650},{\"attributes\":{\"id\":\"b56\",\"matched_paper_id\":52068573},\"end\":77536,\"start\":77066},{\"attributes\":{\"id\":\"b57\",\"matched_paper_id\":52938657},\"end\":78013,\"start\":77538},{\"attributes\":{\"id\":\"b58\"},\"end\":78164,\"start\":78015},{\"attributes\":{\"id\":\"b59\"},\"end\":78315,\"start\":78166}]", "bib_title": "[{\"end\":55201,\"start\":55173},{\"end\":55481,\"start\":55429},{\"end\":55815,\"start\":55771},{\"end\":56169,\"start\":56126},{\"end\":56472,\"start\":56398},{\"end\":56819,\"start\":56746},{\"end\":57187,\"start\":57107},{\"end\":57594,\"start\":57511},{\"end\":58050,\"start\":57959},{\"end\":58411,\"start\":58291},{\"end\":58745,\"start\":58694},{\"end\":59141,\"start\":59091},{\"end\":59551,\"start\":59463},{\"end\":59932,\"start\":59834},{\"end\":60383,\"start\":60309},{\"end\":61199,\"start\":61093},{\"end\":61648,\"start\":61558},{\"end\":61930,\"start\":61888},{\"end\":62297,\"start\":62240},{\"end\":62664,\"start\":62619},{\"end\":62978,\"start\":62909},{\"end\":63441,\"start\":63370},{\"end\":63870,\"start\":63837},{\"end\":64326,\"start\":64236},{\"end\":64697,\"start\":64660},{\"end\":65284,\"start\":65216},{\"end\":65562,\"start\":65522},{\"end\":65832,\"start\":65785},{\"end\":66232,\"start\":66126},{\"end\":66553,\"start\":66510},{\"end\":67331,\"start\":67240},{\"end\":67896,\"start\":67748},{\"end\":68583,\"start\":68505},{\"end\":69001,\"start\":68935},{\"end\":69496,\"start\":69411},{\"end\":70009,\"start\":69858},{\"end\":70459,\"start\":70385},{\"end\":71088,\"start\":71049},{\"end\":71689,\"start\":71637},{\"end\":72533,\"start\":72438},{\"end\":73034,\"start\":72954},{\"end\":73553,\"start\":73493},{\"end\":74369,\"start\":74334},{\"end\":74795,\"start\":74712},{\"end\":75351,\"start\":75259},{\"end\":75719,\"start\":75699},{\"end\":76161,\"start\":76069},{\"end\":76687,\"start\":76650},{\"end\":77116,\"start\":77066},{\"end\":77589,\"start\":77538}]", "bib_author": "[{\"end\":55216,\"start\":55203},{\"end\":55230,\"start\":55216},{\"end\":55240,\"start\":55230},{\"end\":55491,\"start\":55483},{\"end\":55501,\"start\":55491},{\"end\":55511,\"start\":55501},{\"end\":55824,\"start\":55817},{\"end\":55831,\"start\":55824},{\"end\":55839,\"start\":55831},{\"end\":55849,\"start\":55839},{\"end\":56185,\"start\":56171},{\"end\":56196,\"start\":56185},{\"end\":56209,\"start\":56196},{\"end\":56481,\"start\":56474},{\"end\":56488,\"start\":56481},{\"end\":56495,\"start\":56488},{\"end\":56507,\"start\":56495},{\"end\":56513,\"start\":56507},{\"end\":56519,\"start\":56513},{\"end\":56828,\"start\":56821},{\"end\":56835,\"start\":56828},{\"end\":56849,\"start\":56835},{\"end\":56855,\"start\":56849},{\"end\":56867,\"start\":56855},{\"end\":56873,\"start\":56867},{\"end\":57199,\"start\":57189},{\"end\":57208,\"start\":57199},{\"end\":57606,\"start\":57596},{\"end\":57616,\"start\":57606},{\"end\":57630,\"start\":57616},{\"end\":57642,\"start\":57630},{\"end\":57653,\"start\":57642},{\"end\":57665,\"start\":57653},{\"end\":58060,\"start\":58052},{\"end\":58071,\"start\":58060},{\"end\":58083,\"start\":58071},{\"end\":58095,\"start\":58083},{\"end\":58421,\"start\":58413},{\"end\":58434,\"start\":58421},{\"end\":58754,\"start\":58747},{\"end\":58768,\"start\":58754},{\"end\":58775,\"start\":58768},{\"end\":58786,\"start\":58775},{\"end\":59155,\"start\":59143},{\"end\":59165,\"start\":59155},{\"end\":59563,\"start\":59553},{\"end\":59572,\"start\":59563},{\"end\":59580,\"start\":59572},{\"end\":59948,\"start\":59934},{\"end\":59960,\"start\":59948},{\"end\":59969,\"start\":59960},{\"end\":59980,\"start\":59969},{\"end\":59990,\"start\":59980},{\"end\":60002,\"start\":59990},{\"end\":60395,\"start\":60385},{\"end\":60409,\"start\":60395},{\"end\":60420,\"start\":60409},{\"end\":61212,\"start\":61201},{\"end\":61222,\"start\":61212},{\"end\":61234,\"start\":61222},{\"end\":61244,\"start\":61234},{\"end\":61255,\"start\":61244},{\"end\":61267,\"start\":61255},{\"end\":61654,\"start\":61650},{\"end\":61665,\"start\":61654},{\"end\":61939,\"start\":61932},{\"end\":61945,\"start\":61939},{\"end\":61958,\"start\":61945},{\"end\":62310,\"start\":62299},{\"end\":62319,\"start\":62310},{\"end\":62330,\"start\":62319},{\"end\":62340,\"start\":62330},{\"end\":62673,\"start\":62666},{\"end\":62688,\"start\":62673},{\"end\":62697,\"start\":62688},{\"end\":62993,\"start\":62980},{\"end\":63003,\"start\":62993},{\"end\":63015,\"start\":63003},{\"end\":63022,\"start\":63015},{\"end\":63035,\"start\":63022},{\"end\":63454,\"start\":63443},{\"end\":63464,\"start\":63454},{\"end\":63476,\"start\":63464},{\"end\":63886,\"start\":63872},{\"end\":63895,\"start\":63886},{\"end\":63907,\"start\":63895},{\"end\":63916,\"start\":63907},{\"end\":64342,\"start\":64328},{\"end\":64353,\"start\":64342},{\"end\":64367,\"start\":64353},{\"end\":64379,\"start\":64367},{\"end\":64391,\"start\":64379},{\"end\":64709,\"start\":64699},{\"end\":64720,\"start\":64709},{\"end\":64730,\"start\":64720},{\"end\":64738,\"start\":64730},{\"end\":64749,\"start\":64738},{\"end\":65298,\"start\":65286},{\"end\":65305,\"start\":65298},{\"end\":65312,\"start\":65305},{\"end\":65577,\"start\":65564},{\"end\":65587,\"start\":65577},{\"end\":65596,\"start\":65587},{\"end\":65845,\"start\":65834},{\"end\":65859,\"start\":65845},{\"end\":65869,\"start\":65859},{\"end\":65881,\"start\":65869},{\"end\":66246,\"start\":66234},{\"end\":66256,\"start\":66246},{\"end\":66563,\"start\":66555},{\"end\":66575,\"start\":66563},{\"end\":66583,\"start\":66575},{\"end\":66592,\"start\":66583},{\"end\":66605,\"start\":66592},{\"end\":66615,\"start\":66605},{\"end\":66626,\"start\":66615},{\"end\":67346,\"start\":67333},{\"end\":67355,\"start\":67346},{\"end\":67364,\"start\":67355},{\"end\":67906,\"start\":67898},{\"end\":67918,\"start\":67906},{\"end\":67926,\"start\":67918},{\"end\":67937,\"start\":67926},{\"end\":68593,\"start\":68585},{\"end\":68604,\"start\":68593},{\"end\":68614,\"start\":68604},{\"end\":69021,\"start\":69003},{\"end\":69031,\"start\":69021},{\"end\":69517,\"start\":69498},{\"end\":69527,\"start\":69517},{\"end\":69541,\"start\":69527},{\"end\":69552,\"start\":69541},{\"end\":69564,\"start\":69552},{\"end\":69587,\"start\":69564},{\"end\":70030,\"start\":70011},{\"end\":70040,\"start\":70030},{\"end\":70063,\"start\":70040},{\"end\":70467,\"start\":70461},{\"end\":70473,\"start\":70467},{\"end\":70484,\"start\":70473},{\"end\":70713,\"start\":70701},{\"end\":70792,\"start\":70784},{\"end\":70806,\"start\":70792},{\"end\":70820,\"start\":70806},{\"end\":70830,\"start\":70820},{\"end\":70840,\"start\":70830},{\"end\":70849,\"start\":70840},{\"end\":70860,\"start\":70849},{\"end\":71104,\"start\":71090},{\"end\":71116,\"start\":71104},{\"end\":71525,\"start\":71517},{\"end\":71700,\"start\":71691},{\"end\":71713,\"start\":71700},{\"end\":72073,\"start\":72060},{\"end\":72085,\"start\":72073},{\"end\":72098,\"start\":72085},{\"end\":72112,\"start\":72098},{\"end\":72119,\"start\":72112},{\"end\":72543,\"start\":72535},{\"end\":72553,\"start\":72543},{\"end\":72564,\"start\":72553},{\"end\":73050,\"start\":73036},{\"end\":73061,\"start\":73050},{\"end\":73070,\"start\":73061},{\"end\":73084,\"start\":73070},{\"end\":73566,\"start\":73555},{\"end\":73576,\"start\":73566},{\"end\":73589,\"start\":73576},{\"end\":74386,\"start\":74371},{\"end\":74395,\"start\":74386},{\"end\":74401,\"start\":74395},{\"end\":74407,\"start\":74401},{\"end\":74416,\"start\":74407},{\"end\":74430,\"start\":74416},{\"end\":74808,\"start\":74797},{\"end\":74819,\"start\":74808},{\"end\":74829,\"start\":74819},{\"end\":75363,\"start\":75353},{\"end\":75373,\"start\":75363},{\"end\":75383,\"start\":75373},{\"end\":75394,\"start\":75383},{\"end\":75403,\"start\":75394},{\"end\":75417,\"start\":75403},{\"end\":75734,\"start\":75721},{\"end\":75744,\"start\":75734},{\"end\":75751,\"start\":75744},{\"end\":75920,\"start\":75905},{\"end\":75936,\"start\":75920},{\"end\":76174,\"start\":76163},{\"end\":76185,\"start\":76174},{\"end\":76199,\"start\":76185},{\"end\":76210,\"start\":76199},{\"end\":76697,\"start\":76689},{\"end\":76708,\"start\":76697},{\"end\":76718,\"start\":76708},{\"end\":76732,\"start\":76718},{\"end\":76744,\"start\":76732},{\"end\":76755,\"start\":76744},{\"end\":77131,\"start\":77118},{\"end\":77142,\"start\":77131},{\"end\":77155,\"start\":77142},{\"end\":77600,\"start\":77591},{\"end\":77609,\"start\":77600}]", "bib_venue": "[{\"end\":59290,\"start\":59236},{\"end\":64972,\"start\":64869},{\"end\":66927,\"start\":66785},{\"end\":67511,\"start\":67446},{\"end\":68164,\"start\":68059},{\"end\":69188,\"start\":69118},{\"end\":71279,\"start\":71206},{\"end\":72711,\"start\":72646},{\"end\":73235,\"start\":73168},{\"end\":73923,\"start\":73753},{\"end\":74922,\"start\":74896},{\"end\":76353,\"start\":76290},{\"end\":77324,\"start\":77248},{\"end\":77808,\"start\":77717},{\"end\":55278,\"start\":55240},{\"end\":55576,\"start\":55511},{\"end\":55921,\"start\":55849},{\"end\":56240,\"start\":56209},{\"end\":56560,\"start\":56519},{\"end\":56914,\"start\":56873},{\"end\":57288,\"start\":57208},{\"end\":57707,\"start\":57665},{\"end\":58108,\"start\":58095},{\"end\":58464,\"start\":58434},{\"end\":58867,\"start\":58786},{\"end\":59234,\"start\":59165},{\"end\":59622,\"start\":59580},{\"end\":60043,\"start\":60002},{\"end\":60517,\"start\":60420},{\"end\":60817,\"start\":60773},{\"end\":60973,\"start\":60884},{\"end\":61297,\"start\":61267},{\"end\":61696,\"start\":61665},{\"end\":62041,\"start\":61958},{\"end\":62405,\"start\":62340},{\"end\":62738,\"start\":62697},{\"end\":63115,\"start\":63035},{\"end\":63574,\"start\":63476},{\"end\":64013,\"start\":63916},{\"end\":64422,\"start\":64391},{\"end\":64867,\"start\":64749},{\"end\":65342,\"start\":65312},{\"end\":65626,\"start\":65596},{\"end\":65932,\"start\":65881},{\"end\":66291,\"start\":66256},{\"end\":66783,\"start\":66626},{\"end\":67444,\"start\":67364},{\"end\":68057,\"start\":67937},{\"end\":68668,\"start\":68614},{\"end\":69116,\"start\":69031},{\"end\":69617,\"start\":69587},{\"end\":70098,\"start\":70063},{\"end\":70525,\"start\":70484},{\"end\":70699,\"start\":70685},{\"end\":71204,\"start\":71116},{\"end\":71515,\"start\":71466},{\"end\":71794,\"start\":71713},{\"end\":72058,\"start\":71996},{\"end\":72335,\"start\":72266},{\"end\":72644,\"start\":72564},{\"end\":73166,\"start\":73084},{\"end\":73751,\"start\":73589},{\"end\":74501,\"start\":74430},{\"end\":74894,\"start\":74829},{\"end\":75448,\"start\":75417},{\"end\":75792,\"start\":75751},{\"end\":75964,\"start\":75936},{\"end\":76288,\"start\":76210},{\"end\":76833,\"start\":76755},{\"end\":77246,\"start\":77155},{\"end\":77715,\"start\":77609},{\"end\":78046,\"start\":78015},{\"end\":78197,\"start\":78166}]"}}}, "year": 2023, "month": 12, "day": 17}