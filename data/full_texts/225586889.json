{"id": 225586889, "updated": "2023-10-06 12:56:35.321", "metadata": {"title": "How Different Encodings Affect Performance and Diversification when Evolving the Morphology and Control of 2D Virtual Creatures", "authors": "[{\"first\":\"Frank\",\"last\":\"Veenstra\",\"middle\":[]},{\"first\":\"Kyrre\",\"last\":\"Glette\",\"middle\":[]}]", "venue": "The 2020 Conference on Artificial Life", "journal": "The 2020 Conference on Artificial Life", "publication_date": {"year": 2020, "month": null, "day": null}, "abstract": "A challenge in evolutionary robotics is the in parallel adaptation of morphologies and controllers. Here, we considered encoding methods for morphogenesis of 2D virtual creatures that can be created from directed trees. Using an evolutionary algorithm, we optimized locomotion in these virtual creatures and compared a direct encoding, an L-System, and two types of encodings that produce neural networks\u2014a Compositional Pattern Producing Network (CPPN) and a Cellular Encoding (CE). We evaluated these encodings based on performance and diversification, and we introduced an OpenAI gym environment as a computationally inexpensive benchmark for exploring morphological evolution. The direct encoding and L-System generated more fit solutions compared to the network strategies. Considering morphological diversity, the direct encoding finds solutions more locally in the morphological search space, the L-System made larger jumps across this search space, and both network approaches also make larger jumps though find fewer solutions in this space. With these results we show how encodings exhibit different characteristics as developmental approaches. Since the genotype-phenotype mapping plays a major role in evolutionary robotics, further modifications using more complex tasks and environments can lead to a better understanding of morphogenesis and thereby improve how morphologies and controllers of robots are evolved.", "fields_of_study": "[\"Computer Science\"]", "external_ids": {"arxiv": null, "mag": "3042738023", "acl": null, "pubmed": null, "pubmedcentral": null, "dblp": "conf/isalalife/VeenstraG20", "doi": "10.1162/isal_a_00295"}}, "content": {"source": {"pdf_hash": "ed546211ba83abb8d5d80cb93449423b84a37540", "pdf_src": "MergedPDFExtraction", "pdf_uri": null, "oa_url_match": false, "oa_info": {"license": "CCBY", "open_access_url": "https://www.duo.uio.no/bitstream/10852/79395/5/isal_a_00295.pdf", "status": "GREEN"}}, "grobid": {"id": "7848e6b1067a27cd48160b7165eef8a7528d362b", "type": "plain-text", "url": "s3://ai2-s2-pdf-extraction-prod/parse-results/s2orc_worker/ed546211ba83abb8d5d80cb93449423b84a37540.txt", "contents": "\nHow Different Encodings Affect Performance and Diversification when Evolving the Morphology and Control of 2D Virtual Creatures\n\n\nFrank Veenstra frankvee@ifi.uio.no \nDepartment of Informatics\nUniversity of Oslo\nNorway\n\nKyrre Glette \nDepartment of Informatics\nUniversity of Oslo\nNorway\n\nRITMO\nUniversity of Oslo\nNorway\n\nHow Different Encodings Affect Performance and Diversification when Evolving the Morphology and Control of 2D Virtual Creatures\n\nA challenge in evolutionary robotics is the in parallel adaptation of morphologies and controllers. Here, we considered encoding methods for morphogenesis of 2D virtual creatures that can be created from directed trees. Using an evolutionary algorithm, we optimized locomotion in these virtual creatures and compared a direct encoding, an L-System, and two types of encodings that produce neural networks-a Compositional Pattern Producing Network (CPPN) and a Cellular Encoding (CE). We evaluated these encodings based on performance and diversification, and we introduced an OpenAI gym environment as a computationally inexpensive benchmark for exploring morphological evolution. The direct encoding and L-System generated more fit solutions compared to the network strategies. Considering morphological diversity, the direct encoding finds solutions more locally in the morphological search space, the L-System made larger jumps across this search space, and both network approaches also make larger jumps though find fewer solutions in this space. With these results we show how encodings exhibit different characteristics as developmental approaches. Since the genotype-phenotype mapping plays a major role in evolutionary robotics, further modifications using more complex tasks and environments can lead to a better understanding of morphogenesis and thereby improve how morphologies and controllers of robots are evolved.\n\nIntroduction\n\nA major challenge in Evolutionary Robotics (ER) is concerned with optimizing both the morphology and control of robots. For virtual creatures, it is still surprising much work barely surpasses that of what Sims (Sims, 1994) accomplished two and half decades ago (Kriegman, 2019). Many of the challenges in ER can be associated with the design of the algorithms that optimize and construct the robots (Cheney et al., 2016). Mostly, recent advances have been made by altering the Evolutionary Algorithms (EAs) to either promote diversity (Lehman and Stanley, 2011), or find gradients in the search space to exploit (Hansen et al., 2003). Evolving populations in nature convey a blind process of adaptation while still needing to adhere to principles of possessing evolvability. Wagner and Altenberg (1996) stated that a critical factor in shaping this evolvability in biological organisms is the representation problem, or genotype-phenotype The encodings contain the evolvable parameters (genes) and the blueprint entails how to construct a robot in Box2D.\n\nmapping (Nolfi and Floreano, 2000). In contrast to the optimization strategies that operate on the phylogenetic time scale (Pfeifer and Bongard, 2006) of evolving populations, we address the workings of the genotype-phenotype mapping by looking at various encoding strategies as developmental abstractions that can be used for optimizing both the control and morphology of 2D virtual creatures.\n\nGenotype-phenotype mappings can be created through direct encodings (one-to-one mappings), and various types of indirect (generative) encodings. For the creation of virtual creatures, indirect encodings have been implemented in the form of rewriting systems (Sims, 1994;Hornby et al., 2003;Veenstra et al., 2017), morphogen-based (Turing, 1952) / cell chemistry approaches (Stanley and Miikkulainen, 2003;Bongard and Pfeifer, 2003), and neural networks (Stanley, 2007;Auerbach and Bongard, 2010;Cheney et al., 2014;Ha, 2019), to name a few. Even though these types of encodings can alleviate some design requirements for EAs, challenges such as prematurely converging morphologies (Joachimczak et al., 2016;Cheney et al., 2018) are still prevalent. Even when comparing encodings when evolving virtual creatures, significant differences in diversification aren't always detectable (Miras et al., 2018). Design challenges for creating real-world robots from evolved components (Lund et al., 1997;Lipson and Pollack, 2000;Fa\u00ed\u00f1a et al., 2013), could greatly benefit from designs that allow for the reuse and recursion of specific components, as is usually done in modular robots (Stoy et al., 2010;Auerbach et al., 2014).\n\nRobot and virtual creature components are commonly organized in lattices or articulated chains. In voxel-based soft robots (VSR), a lattice of similarly sized volumetric components is constructed where individual components directly affect neighboring components via joints (Hiller and Lipson, 2014). The big advantage of this method is that the entire robot morphology can be defined in cartesian coordinates. When using articulated chains however, representing components in cartesian space is challenging when sizes and orientations of components vary. The hierarchical component dependency in the chain type approach does allow for morphologies to be generated from directed trees. Since many robot simulators have a similar hierarchical component dependency, we evaluate four types of encodings that can generate directed trees, which serve as blueprints for the morphologies of virtual creatures ( Figure 1).\n\nHa (2019) experimented with adjusting the morphology of a virtual creature as its design, especially in reinforcement learning, is rarely considered for optimization for the task at hand. In addition, we would therefore like to emphasize that it becomes even more challenging when the body of a robot changes its number of inputs and outputs during the optimization process. Withdrawing from using advanced robotics simulators, here, we focused on a minimal testbed with low computational requirements using the Box2D physics engine (Catto, 2019). This has been implemented by creating a new environment for OpenAI gym (Brockman et al., 2016), which aims to expose benchmark problems to a common interface. In this environment, we created a simple scenario for investigating the genotype-phenotype mappings for evolving directed treebased blueprints for virtual creatures. We believe that this can be a unifying, easy-to-use testbed for experimenting with morphological evolution. As the bipedal walker testbed is widely used for optimization methods (Klimov, 2019), we employ a similar environment using a fixed random seed for creating terrain that becomes progressively rougher. While utilizing the Distributed Evolutionary Algorithms in Python (DEAP) (Fortin et al., 2012) for the EAs, we added a simple generator network architecture that allowed robots to be constructed from neural networks. We use the term generator network to define neural networks that are queried for the construction of the blueprints for the virtual creatures.\n\nIn our experiments we evaluated a direct encoding, a para-metric Lindenmayer-System (L-System) (Lindenmayer and J\u00fcrgensen, 1992), and two neural network implementations as our generator networks. The first neural network is a Compositional Pattern Producing Network (CPPN), a type of neural network that has been frequently used for morphogenesis in evolving virtual creatures robotics (Auerbach and Bongard, 2011;Cheney et al., 2014). The second is a network created using a Cellular Encoding (CE) (Gruau et al., 1994). With these implementations we hope to align a few concepts for the generation of virtual creatures and modular ER; using encoding strategies that will be compatible with various optimization methods and simulation environments. Apart from evaluating the performance of these encodings, we are also interested in how they exhibit search space traversal. Our contribution is twofold. Firstly, we implemented various encoding strategies and evaluated them based on performance and diversity when optimized using a standard EA. Secondly, the testbed introduced in this paper will allow users to test optimization strategies for morphological evolution. Additional neural network strategies that might be useful for morphogenesis can be included by using them as an encoding defined by the generator network. With the implementation of the testbed as an OpenAI gym environment, we hope that the machine learning community will be able to experiment with various optimization methods for evolving both morphology and control systems that are useful for virtual creatures and robotics.\n\n\nMethods\n\nOur experiments were conducted using the OpenAI gym framework where we introduce a new gym environment for morphological evolution in modular robotics 1 . In this framework, we focus on morphological evolution of robots that are created through directed trees. Different encoding strategies can be used to construct these directed trees. These trees that serve as blueprints can be interpreted into a virtual creature. The trees are built by initially creating an axiom node (root of the tree), and iteratively expanding the tree structure by adding new nodes. Every node in this tree encapsulates information about a module that can be created in the simulation environment. The modules that were used could have up to three other modules attached to them. A module consists of one specific component, which can have various shapes and control systems.\n\nIn addition to measuring the performance of the virtual creatures, we measured a simplified tree edit distance (TED) for each individual in a population compared to all other individuals in the population. Here we only counted the number of vertex insertions or deletions between two trees without counting substitutions. This measure gave us an indica-tion of the existing morphological diversity within a population at any given time. The tree blueprints of the elites were also plotted to see how populations traversed the morphological solution space.\n\nThe original bipedalwalkerv2 environment (Klimov, 2019) rewards agents based on how far they moved within a certain amount of time. Since our approach can create many individuals that through random mutation might perform badly, or even move in the opposite direction, we added a feature in the environment that stops evaluating an individual if it is does not move forward quickly enough. We modeled this feature by adding a vertical line that slowly moves forward, ending the evaluation when it crosses the root module of an individual being evaluated. We modified the environment to become progressively more challenging. This is implemented through increasing a noise factor that generates the environment. For the experiments we fixed the random seed for procedurally generating an environment that was deemed suitable (Figure 2). This environment does not contain any large downward slopes and ends with a large hill. The task for the virtual creatures, that are created near the flagpole, is to move to the right as far as possible.\n\n\nModules\n\nIn our experiments, modules are basic components of the robot that encapsulate part of the functionality of the entire robot (Stoy et al., 2010). However, for simplicity, and ensuring not to introduce many convoluting factors, we limited ourselves to using simple primitive shapes as our modules. In addition, we excluded any collisions between modules in our implementation. Each module contains three connection sites where other modules can attach (top, left and right). The top connection site attaches a new child module directly where the relative y vector of the parent module crosses the simulated edge of the parent module. The left and right connection sites attach a new module at a specified angle relative to the parent module's coordinates and orientation-left being defined as the negative angle, right as a positive angle.\n\nFor controlling our robots, we implemented an open-loop controller where each module contained a simple sine wave function:\ny(t) = A sin(\u03c9t + \u03d5) + D(1)\nwhere A is the amplitude, \u03c9 is the frequency, \u03d5 represents the phase and D is the joint angle offset. In addition to the equation, a maximum angle was defined as \u03c0/2-the negative and positive values determined the outer bounds of y. The controller mutation operator changes the amplitude, frequency, phase and offset of the sinusoidal wave function using a gaussian distribution random number generator. All controller values as stored in the genotype were normalized between -1.0 and 1.0. \n\n\nEvolutionary Algorithm\n\nThe implemented EA came from the DEAP (Fortin et al., 2012) framework. This EA consisted of a (\u03bb, \u00b5) (Eiben et al., 2003) strategy-we used tournament selection (tournament size 4) as our offspring selection mechanism, and a generational replacement operator (Floreano and Mattiussi, 2008) where the offspring population replaces the parent population completely. It is known that this generational replacement operator can lead to noisy evolutionary progressions, though we used this type of operator since we noticed a dramatic decreased morphological convergence when compared to more elitist approaches (Veenstra et al., 2019). The mutation operators for our encodings was divided between morphological mutations and controller mutations. The mutation rates determined the probability with which respective parameters were mutated. A fixed sigma value was implemented for adjusting the parameters of the genotype.\n\nFor finding suitable parameters for evolving our virtual creatures, we ran a mutation rate sweep of 256 evolutionary runs for each encoding with different mutation parameters. We used a combination of 8 different parameters for the controller mutation rate, and the morphological mutation rate. The evolutionary runs of the sweep were simulated for 500 generations, using a population size of 100 (50,000 evaluations). We ran 4 duplicates with different random seeds for each unique combination of parameters. From this sweep, we chose parameters that we set for 20 duplicates of longer evolutionary runs for each encoding (100,000 evaluations per duplicate; population size of 100; each duplicate again using a different random seed). The parameters adjusted for the experiments can be found in Table 1.\n\n\nCreating robots from blueprints\n\nAll encodings used for our experiments resulted in a common blueprint format, a directed tree. This blueprint was interpreted by the Box2D environment into both the morphology and controller of the virtual creature. The different encodings that create these blueprints each handled mutations differently. Mutations in the direct encoding directly affect the directed tree. The mutations in the L-System only affect the rewrite rules. The mutation operators in the generator networks affected how the network topology, activation functions, and weights were altered. For each encoding, we supplied a list containing eight modules that served as template modules. For the indirect encodings, this list was mutated, which altered the controller and morphology of each module in the L-System, and just the morphology in the generator networks. We limited the depth of the directed tree to 8 nodes, and set the maximum number of modules that could be created to 20 for one robot. Each node in the tree contained information about (1) the module type, (2) the morphological parameters associated with the module type, and (3) the controller. Any modules that happened to be located below the terrain when the tree was intepreted, were removed from the virtual creature. Hence, it is not guaranteed that nodes from the blueprint were expressed in the phenotype. The following sections illustrate how each encoding is used to create the blueprints.\n\n\nDirect Encoding\n\nThe direct encoding manipulates the directed tree that forms the blueprint of the robot. The mutation operators used for the direct encoding were: (1) remove node (and sub-nodes), (2) add node, and (3) mutate controller. When mutating a direct encoding genome, we looped through each node and evaluate whether these mutation operators should be called for individual nodes. To ensure that we add, on average, the same number of modules in a mutation step, the probability of adding a module was divided by the total number of nodes already present in the tree. The add node mutation operator is called with a probability for each available connection site on a node. Since the remove node mutation removes all subnodes as well, the probability of this mutation happening was set half the probability of an add node mutation.\n\n\nL-System\n\nThe L-System implementation is based on a parametric L-System (Lindenmayer and J\u00fcrgensen, 1992), where the grammar rewrite rules act directly on symbols defined in our alphabet that reference the parameters stored in nodes. This approach is similar to a CE that has been used as a rewrite system for directed graphs (Gruau, 1993). In our case, since we used two different module types, we added four symbols for each module type to which we associated specific rewrite rules. This means that eight rules in total were employed for generating the entire robot's morphology and controller. We only allowed the tree to expand by adding new leaf nodes based on their associated rules-nodes that were created did not change. Each symbol also contains a reference to a specific controller. Therefore, every similar symbol expressed in the tree contains a deep copy of the same controller. The controller mutation operator changed the controllers stored in the symbols. The morphological mutations changed the rewrite rules directly associated with each symbol.\n\nNeuroevolution The generator networks were created through a direct and indirect representation. The direct representation utilizes a CPPN (Stanley, 2007). The CPPN has originally been created to work in conjunction with Neuroevolution through Augmenting Topologies (NEAT) (Stanley and Miikkulainen, 2002), which contains an evolutionary algorithm. However, to isolate the results of the encoding itself, we decided to use DEAP's standardized evolutionary algorithms instead. The indirectly encoded generator network was created through a CE (Gruau et al., 1994). To illustrate how each encoding results in different expression patterns, we illustrate how these networks can generate 2D images by having the x and y coordinates of a screen as its inputs, and RGB values as its outputs (Figure 3b). The figure shows that the CPPN creates smoother gradients when compared to the CE. To clarify, the CE and CPPN encodings both create compositional pattern producing networks (the generator network) but we would like to emphasize that with CE and CPPN we refer to the encoding, not the network.\n\nFor creating virtual creatures, we queried the networks iteratively. For a query, we gave each network three inputs of a single available connection site. The three inputs were, (1) the current depth of the connection site normalized between values of -1.0 to 1.0, (2) the parent module index from the module list (the 8 template modules) normalized between -1.0 and 1.0, and (3)  site (left = -1.0, top = 0.0, and right = 1.0). The network in turn produced 6 outputs determining: (1) whether a module should be attached or not, (2) which module should be connected, and (3) four outputs determining the parameters of the controller of the module (amplitude, phase, frequency and offset). As mentioned, the morphology of the modules is changed in the supplied template list separately and the generator networks' second output determined which module from this template to use.\n\nCPPN The CPPN was based on the implementation from neat-python (McIntyre et al., 2019). We altered the CPPN through simply calling the mutation operator build in the library. We set the values of the conn add prob, conn delete prob, node add prob, node delete prob, and bias replace rate equal to the morphological mutation rate parameter that we used since these attributes alter the topology of the network. The controller mutation rate altered activation mutate rate, weight replace rate, weight mutate rate and bias mutate rate in a similar manner. The sigma value we use was set to alter weight mutate power, bias mutate power and the response mutate power. To the best of our knowledge, this was a decent mapping from our mutation rate parameters to mutation settings of the CPPN.\n\n\nCellular Encoding\n\nThe cellular encoding used to create the generator network was based on Gruau et al. (1994). In this encoding, a network was generated by initially having a single cell (or node) connected to an input and output node. This cell is then divided, according to division rules, into more cells through either sequential or parallel division. The rules we implemented for generating this network were (1) change the node type, (2) divide sequentially, and (3) divide in parallel. The weights and activation functions were attached to the rules determining how the division happened. We limited the number of node that could be produced by the CE to 50. This limitation was set as more nodes led to a computational bottleneck. We limited the number of rewrite rules the cellular encoding could use to 10. Each node object contained information about the type of node, and the weights of the node's output edges.\n\nTo generate the network, we iterated 10 times over the nodes present in the network to determine how each node should be rewritten. This process was terminated early if the maximum number of allowable nodes was reached. A node could also contain any activation function that were also available to the CPPN.\n\n\nResults\n\nMutation rate sweep The performance of each encoding differs greatly with regards to the parameters we set. As can be seen from Figure 4, the morphological mutation rate parameter has a bigger effect on the L-System than on the Direct encoding. The diversity measured by the TEDs within a population was also greatly affected by the mutation parameters we set ( Figure 4). Since this distance metric only measures morphological parameters of the tree blueprint, we can see that the controller mutation rate did not affect the TEDs in the direct encoding, L-System or CE, whereas it did affect the CPPN. Similarly, the morphological mutation rate parameter has the opposite effect-the CPPN was not affected whereas the other encodings were. Based on these results, we chose the parameters for the experimental runs that can be seen in Table 1.\n\n\nPerformance analysis\n\nThe performance of all runs for each encoding is presented in Figure 5, and the difference in performance between the accumulated fitness values is shown in Figure 6. For comparing any significant differ- ences, we performed six two-sided Mann-Whitney U tests. There was no significant difference between the direct encoding and the L-System (p-value > 0.2), but there was between the direct encoding and the CPPN (p-value < 0.001), and the direct encoding and the CE (p-value < 0.001). Similarly, the L-System was significantly different from the CPPN (p-value < 0.001) and the CE (p-value < 0.001) as well. Furthermore, the CPPN and cellular encoding also showed a significant difference in performance (p-value < 0.002). We also observed that the performance of the direct encoding and CPPN is less spread out across runs whereas the L-System and the cellular encoding produced more outliers (e.g. see the dotted lines in Figure 5).\n\n\nDiversity analysis\n\nThe diversity based on the TED measured within a population over time is shown in Figure 7.\n\nHere, the L-System seems to maintain the highest TED in the population followed by the CE, CPPN and direct encoding respectively indicating that the indirect encodings keep a larger morphological diversity within the population. Figure 8 displays how the blueprints of the elites of each run change over time. From these images it can be qualitatively seen that elites differ most from one another in the direct encoding and L-System, whereas elites seem to converge quicker in the network generator approaches. The tree structures depicted in Figure 8 were also plotted for all individuals taken at intervals of 20 generations. Since each node in the representation has a specific positional coordinate when plotted, we summed up the x and y coordinates of each position of each node to get a new abstract positional coordinate (note that different trees can map to the same coordinates). Through rasterizing these values, a map of elites, similar to visualizations shown in MAP-Elites implementations Mouret and Clune (2015), can be constructed. Figure 9 depicts the cumulative fitness score for each individual of each encoding in every morphological solution space that was found. From this figure one can see that the direct encoding spreads out locally, individuals in an area having roughly the same fitness. The L-System seems to jump across the morphological space where high fit solutions are rarely found in clusters. The generator networks jump across the search space in a similar arbitrary manner, though not many unique morphological solutions were found.\n\n\nDiscussion\n\nIn this article we looked at how different methods can be used as developmental abstraction for the genotypephenotype mapping when evolving the morphology and control of 2D virtual creatures. Performance wise, we saw that the direct encoding and L-System outperformed the implemented generator network strategies based on fitness. In addition, our results indicate that the encoding strategies greatly affect how the solution space is traversed. Mainly, the direct encoding, traverses the morphological solution space more locally (Figure 9) whereas the indirect encodings make larger jumps across this search space.\n\nOther types of neural networks, or different inputs and output definitions, can likely improve the performance of the generator networks. However, the purpose of this implementation is also to start considering a unified approach for morphogenetic strategies that result in directed trees. Different encoding types can hereby contribute to the exploration vs exploitation trade-off. Users familiar with neural networks can incorporate any type of neural network for optimizing these directed trees, which potentially lead to interesting designs and aid us in understanding artificial developmental processes.\n\nA challenge of the generator network approaches for creating robot morphologies is concerned with tuning the many adjustable parameters. Although we have tuned some of these parameters through the parameter sweep, it is unknown whether the decreased performance is related to the plethora of parameters or perhaps the mapping of the input and outputs of the networks. In contrast, the L-System only contains a few rewrite rules and has the least parameters to optimize, making it easy to implement. The limitation of the L-System is that controllers cannot be fine-tuned if they are of the same type. This limitation does create a few interesting points of potential improvement for the L-System. The encoding could be improved by, for example, allowing for the dynamic splitting of rewrite rules over time. One rule can be split up into two sub-rules that can subsequently enable fine-tuning of individual modules. Since we used open-loop controllers defined by sine wave generators, an additional improvement for all encodings could be a sensory feedback loop that adjusts the controllers dynamically or online (Sproewitz et al., 2008;Moreno and Gomez, 2010;Nordmoen et al., 2019). Since all virtual creatures created for this project went through an intermediate directed tree blueprint, this blueprint can also be transformed back into a direct encoding. This adds the possibility of incremental evolution and hybrid encodings. One could for example start evolving a virtual creature using an indirect encoding and at some point, during optimization, switch from indirect encoding to direct encoding. This could allow for individuals that jumped across the search space to be fine-tuned, which is difficult to implement using the original indirect encodings.\n\nSince there is a big difference in how the encodings traverse the search space, it would be interesting to see what effect diversification mechanism for EAs would have on the performance of the encodings presented. We are unsure whether the performance of various strategies in this 2D platform will translate well to 3D problem spaces, and we would like to investigate this in the future by deploying the same methods using 3D testbeds such as presented in James et al. (2019); Coumans and Bai (2017). Another interesting method could hereby be to simulate various environments similar to Wang et al. (2019), where these environments could include 3D simulators. Through quick explorative experiments done using the 2D testbed, more complex 3D environment can be used when indicative hyperparameters are set. Using directed trees also enables the creation of more realistic morphology changing simulated robots (Alattas et al., 2018).\n\nWith the presented testbed and encoding results, we hope to have given some insights in how morphological evolution for virtual creatures is shaped by encoding strategies. A potentially unifying approach for using these strategies in the OpenAI gym environment can ease the process of evolving both the morphology and control of simple virtual creatures. In addition, it can enable the exploration of genotypephenotype mechanisms for increasing performance in artificial system, and potentially gain insight in developmental strategies seen in natural systems.\n\n\nConclusion\n\nDifferent types of encodings can be utilized to construct virtual creatures. Considering the effectiveness of each the encodings we used, the L-System and direct encoding performed best. We did see that diversification across evolutionary runs differed for each encoding. Namely, the direct encoding tended to explore local areas of the morphological search space in contrast to bigger jumps that were made using the indirect approaches. The testbed introduced in this paper is an OpenAI gym environment for the generation of 2D virtual creatures. This testbed is a computationally inexpensive benchmark for experimenting with morphological evolution of virtual creatures. This method can be useful to get a better understanding in what genotype-phenotype mapping to use for evolving simple virtual creatures. Ultimately, if this understanding can translate to more complex tasks and environments, it can aid in enhance design principles for creating other simulated and physical robots.\n\nFigure 1 :\n1Illustration of how encodings generate virtual creatures. The solid lines represent a direct encoding step whereas the dotted lines represent an indirect encoding step.\n\nFigure 2 :\n2Box2D environment used for experiments. Note that the flag is not scaled.\n\nFigure 3 :\n3Typical RGB output values after randomly initializing the CPPN and the CE. For both networks, the x and y coordinates were used as inputs to the network.\n\nFigure 4 :\n4the value of the angle of the connection Results of the mutation rate sweep. The accumulative maximum fitness values are presented for each encoding. The top two figures show the fitness progression influenced by the mutation rate (a) and the morphological mutation rate (b) for each encoding. The bottom two figures display how the TED changes during the evolutionary run as influenced by the mutation rate (c) and the morphological mutation rate (d). The legend indicates the values of either the controller mutation rate (left) or the morphological mutation rate (right).\n\nFigure 5 :\n5Evolutionary progression of all encodings. The shaded area represents the 25 th to 75 th percentiles. The dotted line shows the maximum fitness of the best run.\n\nFigure 6 :Figure 7 :\n67Boxplot TED measured over generations. For each encoding, the lines show the cumulative TED. The shaded area represents the 95% confidence interval.\n\nFigure 8 :\n8Blueprints of elites of plotted across generations. The blueprints are shown across generations (from light yellow [generation 0] to dark blue [generation 1000]).\n\nFitnessFigure 9 :\n9Heat maps showing how each encoding explores the search space. Figures on the left show the cumulative exploration for each encoding. Figures on the right show the exploration of a single run.\n\nTable 1 :\n1Experimental settings. The values within parenthesis were only used for the parameter sweep.Shared parameters \nEvaluations \n100,000 \n(50,000) \nDuplicates \n20 \n(4) \nPopulation size \n100 \nMutation Sigma \n0.2 \nDirect L-system CPPN CE \nMutation rate \n0.32 \n0.16 \n0.02 \n0.08 \nMorph. mut. rate \n0.16 \n0.04 \n0.02 \n0.08 \n\n\nsource code of the platform can be found at https:// github.com/FrankVeenstra/gym_rem2D\nDownloaded from http://direct.mit.edu/isal/proceedings-pdf/isal2020/32/592/1908500/isal_a_00295.pdf by guest on 22 May 2021\nAcknowledgementsThis work was supported by the Research Council of Norway through its Centres of Excellence scheme, project number 262762. Computational resources were supplied by UNINETT Sigma2. Special thanks to J\u00f8rgen Halvorsen Nordmoen for his valuable contributions to the experiments conducted in this paper.\nEvolutionary modular robotics: Survey and analysis. R Alattas, S Patel, T Sobh, Journal of Intelligent & Robotic Systems. Alattas, R., Patel, S., and Sobh, T. (2018). Evolutionary modu- lar robotics: Survey and analysis. Journal of Intelligent & Robotic Systems.\n\nRobogen: Robot generation through artificial evolution. J Auerbach, D Aydin, A Maesani, P Kornatowski, T Cieslewski, G Heitz, P Fernando, I Loshchilov, L Daler, D Floreano, Auerbach, J., Aydin, D., Maesani, A., Kornatowski, P., Cieslewski, T., Heitz, G., Fernando, P., Loshchilov, I., Daler, L., and Flo- reano, D. (2014). Robogen: Robot generation through artifi- cial evolution. pages 136-137.\n\nEvolving cppns to grow three-dimensional physical structures. J E Auerbach, J C Bongard, Proceedings of the 12th annual conference on Genetic and evolutionary computation. the 12th annual conference on Genetic and evolutionary computationAuerbach, J. E. and Bongard, J. C. (2010). Evolving cppns to grow three-dimensional physical structures. In Proceedings of the 12th annual conference on Genetic and evolutionary compu- tation, pages 627-634.\n\nEvolving complete robots with cppn-neat: the utility of recurrent connections. J E Auerbach, J C Bongard, Proceedings of the 13th annual conference on Genetic and evolutionary computation. the 13th annual conference on Genetic and evolutionary computationAuerbach, J. E. and Bongard, J. C. (2011). Evolving complete robots with cppn-neat: the utility of recurrent connections. In Proceedings of the 13th annual conference on Genetic and evolutionary computation, pages 1475-1482.\n\nEvolving complete agents using artificial ontogeny. J C Bongard, R Pfeifer, Morpho-functional Machines: The New Species. Hara, F. and Pfeifer, R.Tokyo; JapanSpringerBongard, J. C. and Pfeifer, R. (2003). Evolving complete agents using artificial ontogeny. In Hara, F. and Pfeifer, R., editors, Morpho-functional Machines: The New Species, pages 237- 258, Tokyo. Springer Japan.\n\n. G Brockman, V Cheung, L Pettersson, J Schneider, J Schulman, J Tang, W Zaremba, Openai gym. CoRR, abs/1606.01540Brockman, G., Cheung, V., Pettersson, L., Schneider, J., Schulman, J., Tang, J., and Zaremba, W. (2016). Openai gym. CoRR, abs/1606.01540.\n\n. E Catto, 2Catto, E. (2019). Box2d, https://box2d.org/.\n\nScalable co-optimization of morphology and control in embodied machines. N Cheney, J Bongard, V Sunspiral, H Lipson, Journal of The Royal Society Interface. 1514320170937Cheney, N., Bongard, J., SunSpiral, V., and Lipson, H. (2018). Scalable co-optimization of morphology and control in em- bodied machines. Journal of The Royal Society Interface, 15(143):20170937.\n\nUnshackling evolution: evolving soft robots with multiple materials and a powerful generative encoding. N Cheney, R Maccurdy, J Clune, H Lipson, ACM SIGEVOlution. 71Cheney, N., MacCurdy, R., Clune, J., and Lipson, H. (2014). Un- shackling evolution: evolving soft robots with multiple mate- rials and a powerful generative encoding. ACM SIGEVOlu- tion, 7(1):11-23.\n\nOn the difficulty of co-optimizing morphology and control in evolved virtual creatures. N Cheney, V Sunspiral, J Bongard, H Lipson, Artificial Life Conference Proceedings 13. MIT PressCheney, N., Sunspiral, V., Bongard, J., and Lipson, H. (2016). On the difficulty of co-optimizing morphology and control in evolved virtual creatures. In Artificial Life Conference Pro- ceedings 13, pages 226-233. MIT Press.\n\nPybullet, a python module for physics simulation in robotics, games and machine learning. E Coumans, Y Bai, Coumans, E. and Bai, Y. (2017). Pybullet, a python module for physics simulation in robotics, games and machine learning.\n\nIntroduction to evolutionary computing. A E Eiben, J E Smith, Springer53Eiben, A. E., Smith, J. E., et al. (2003). Introduction to evolution- ary computing, volume 53. Springer.\n\nEdhmor: Evolutionary designer of heterogeneous modular robots. A Fa\u00ed\u00f1a, F Bellas, F L\u00f3pez-Pe\u00f1a, R J Duro, Engineering Applications of Artificial Intelligence. 2610Fa\u00ed\u00f1a, A., Bellas, F., L\u00f3pez-Pe\u00f1a, F., and Duro, R. J. (2013). Edhmor: Evolutionary designer of heterogeneous modular robots. Engineering Applications of Artificial Intelligence, 26(10):2408 -2423.\n\nD Floreano, C Mattiussi, Bio-Inspired Artificial Intelligence: Theories, Methods, and Technologies. The MIT PressFloreano, D. and Mattiussi, C. (2008). Bio-Inspired Artificial In- telligence: Theories, Methods, and Technologies. The MIT Press.\n\nDEAP: Evolutionary algorithms made easy. F.-A Fortin, F.-M De Rainville, M.-A Gardner, M Parizeau, C Gagn\u00e9, Journal of Machine Learning Research. 13Fortin, F.-A., De Rainville, F.-M., Gardner, M.-A., Parizeau, M., and Gagn\u00e9, C. (2012). DEAP: Evolutionary algorithms made easy. Journal of Machine Learning Research, 13:2171-2175.\n\nCellular encoding as a graph grammar. F Gruau, Theory, Applications and Alternatives. Gruau, F. (1993). Cellular encoding as a graph grammar. IEE Colloquium on Grammatical Inference: Theory, Applications and Alternatives, pages 17/1-1710.\n\nNeural network synthesis using cellular encoding and the genetic algorithm. F Gruau, Gruau, F. et al. (1994). Neural network synthesis using cellular encoding and the genetic algorithm.\n\nReinforcement learning for improving agent design. D Ha, 31697584Artificial Life. 254Ha, D. (2019). Reinforcement learning for improving agent design. Artificial Life, 25(4):352-365. PMID: 31697584.\n\nReducing the time complexity of the derandomized evolution strategy with covariance matrix adaptation (cma-es). Evolutionary computation. N Hansen, S D M\u00fcller, P Koumoutsakos, 11Hansen, N., M\u00fcller, S. D., and Koumoutsakos, P. (2003). Reduc- ing the time complexity of the derandomized evolution strat- egy with covariance matrix adaptation (cma-es). Evolution- ary computation, 11(1):1-18.\n\nDynamic simulation of soft multimaterial 3d-printed objects. J Hiller, H Lipson, Soft robotics. 11Hiller, J. and Lipson, H. (2014). Dynamic simulation of soft mul- timaterial 3d-printed objects. Soft robotics, 1(1):88-101.\n\nGenerative representations for the automated design of modular physical robots. G S Hornby, H Lipson, J B Pollack, IEEE transactions on Robotics and Automation. 194Hornby, G. S., Lipson, H., and Pollack, J. B. (2003). Generative representations for the automated design of modular physi- cal robots. IEEE transactions on Robotics and Automation, 19(4):703-719.\n\nS James, M Freese, A J Davison, arXiv:1906.11176Pyrep: Bringing v-rep to deep robot learning. arXiv preprintJames, S., Freese, M., and Davison, A. J. (2019). Pyrep: Bringing v-rep to deep robot learning. arXiv preprint arXiv:1906.11176.\n\nArtificial metamorphosis: Evolutionary design of transforming, soft-bodied robots. M Joachimczak, R Suzuki, Arita , T , 27139940Artificial Life. 223Joachimczak, M., Suzuki, R., and Arita, T. (2016). Artificial meta- morphosis: Evolutionary design of transforming, soft-bodied robots. Artificial Life, 22(3):271-298. PMID: 27139940.\n\n. O Klimov, bipedal walkerKlimov, O. (2019). bipedal walker, https://github.com/ openai/gym/blob/master/gym/envs/box2d/ bipedal_walker.py.\n\nWhy virtual creatures matter. S Kriegman, Nature Machine Intelligence. 110Kriegman, S. (2019). Why virtual creatures matter. Nature Ma- chine Intelligence, 1(10):492-492.\n\nNovelty search and the problem with objectives. J Lehman, K O Stanley, Genetic programming theory and practice IX. SpringerLehman, J. and Stanley, K. O. (2011). Novelty search and the problem with objectives. In Genetic programming theory and practice IX, pages 37-56. Springer.\n\nGrammars of Development: Discrete-State Models for Growth, Differentiation, and Gene Expression in Modular Organisms. A Lindenmayer, H J\u00fcrgensen, Lindenmayer Systems: Impacts on Theoretical Computer Science. Rozenberg, G. and Salomaa, A.Berlin Heidelberg; BerlinSpringerLindenmayer, A. and J\u00fcrgensen, H. (1992). Grammars of Develop- ment: Discrete-State Models for Growth, Differentiation, and Gene Expression in Modular Organisms. In Rozenberg, G. and Salomaa, A., editors, Lindenmayer Systems: Impacts on Theoretical Computer Science, Computer Graphics, and De- velopmental Biology, chapter 1, pages 3-21. Springer Berlin Heidelberg, Berlin.\n\nAutomatic design and manufacture of robotic lifeforms. H Lipson, J B Pollack, Nature. 4066799974Lipson, H. and Pollack, J. B. (2000). Automatic design and manu- facture of robotic lifeforms. Nature, 406(6799):974.\n\nEvolving robot morphology. H H Lund, J Hallam, W.-P Lee, Proceedings of 1997 IEEE International Conference on Evolutionary Computation (ICEC'97). 1997 IEEE International Conference on Evolutionary Computation (ICEC'97)IEEELund, H. H., Hallam, J., and Lee, W.-P. (1997). Evolving robot morphology. In Proceedings of 1997 IEEE International Conference on Evolutionary Computation (ICEC'97), pages 197-202. IEEE.\n\n. A Mcintyre, M Kallada, C G Miguel, C F Silva, neat-pythonMcIntyre, A., Kallada, M., Miguel, C. G., and da Silva, C. F. (2019). neat-python, https://github.com/ CodeReclaimers/neat-python.\n\nSearch space analysis of evolvable robot morphologies. K Miras, E Haasdijk, K Glette, A E Eiben, Applications of Evolutionary Computation -21st International Conference. EvoApplicationsSpringer10784Miras, K., Haasdijk, E., Glette, K., and Eiben, A. E. (2018). Search space analysis of evolvable robot morphologies. In Applica- tions of Evolutionary Computation -21st International Con- ference, EvoApplications 2018, volume 10784 of Lecture Notes in Computer Science, pages 703-718. Springer.\n\nA hybrid control strategy for a chain type modular robot. Modular Robots: The State of the Art. R Moreno, J Gomez, 111Moreno, R. and Gomez, J. (2010). A hybrid control strategy for a chain type modular robot. Modular Robots: The State of the Art, page 111.\n\nIlluminating search spaces by mapping elites. J.-B Mouret, J Clune, arXiv:1504.04909arXiv preprintMouret, J.-B. and Clune, J. (2015). Illuminating search spaces by mapping elites. arXiv preprint arXiv:1504.04909.\n\nS Nolfi, D Floreano, Evolutionary Robotics: The Biology,Intelligence,and Technology. Cambridge, MA, USAMIT PressNolfi, S. and Floreano, D. (2000). Evolutionary Robotics: The Biology,Intelligence,and Technology. MIT Press, Cambridge, MA, USA.\n\nEvolved embodied phase coordination enables robust quadruped robot locomotion. J Nordmoen, T F Nygaard, K O Ellefsen, K Glette, Proceedings of the Genetic and Evolutionary Computation Conference, GECCO '19. the Genetic and Evolutionary Computation Conference, GECCO '19ACMNordmoen, J., Nygaard, T. F., Ellefsen, K. O., and Glette, K. (2019). Evolved embodied phase coordination enables ro- bust quadruped robot locomotion. In Proceedings of the Ge- netic and Evolutionary Computation Conference, GECCO '19, pages 133-141. ACM.\n\nHow the Body Shapes the Way We Think: A New View of Intelligence (Bradford Books). R Pfeifer, J C Bongard, The MIT PressPfeifer, R. and Bongard, J. C. (2006). How the Body Shapes the Way We Think: A New View of Intelligence (Bradford Books). The MIT Press.\n\nEvolving virtual creatures. K Sims, Proceedings of the 21st Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH '94. the 21st Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH '94New York, NY, USAAssociation for Computing MachinerySims, K. (1994). Evolving virtual creatures. In Proceedings of the 21st Annual Conference on Computer Graphics and Inter- active Techniques, SIGGRAPH '94, page 15-22, New York, NY, USA. Association for Computing Machinery.\n\nLearning to move in modular robots using central pattern generators and online optimization. A Sproewitz, R Moeckel, J Maye, A J Ijspeert, The International Journal of Robotics Research. 273-4Sproewitz, A., Moeckel, R., Maye, J., and Ijspeert, A. J. (2008). Learning to move in modular robots using central pattern gen- erators and online optimization. The International Journal of Robotics Research, 27(3-4):423-443.\n\nCompositional pattern producing networks: A novel abstraction of development. Genetic programming and evolvable machines. K O Stanley, 8Stanley, K. O. (2007). Compositional pattern producing networks: A novel abstraction of development. Genetic programming and evolvable machines, 8(2):131-162.\n\nEvolving neural networks through augmenting topologies. K O Stanley, R Miikkulainen, 10Evolutionary computationStanley, K. O. and Miikkulainen, R. (2002). Evolving neural net- works through augmenting topologies. Evolutionary compu- tation, 10(2):99-127.\n\nA taxonomy for artificial embryogeny. K O Stanley, R Miikkulainen, Artificial Life. 92Stanley, K. O. and Miikkulainen, R. (2003). A taxonomy for artifi- cial embryogeny. Artificial Life, 9(2):93-130.\n\nK Stoy, D Brandt, D Christensen, Self-Reconfigurable Robots: An Introduction. Stoy, K., Brandt, D., and Christensen, D. (2010). Self- Reconfigurable Robots: An Introduction.\n\nThe chemical basis of morphogenesis. A Turing, Philosophical Transactions of the Royal Society B. 237Turing, A. (1952). The chemical basis of morphogenesis. Philo- sophical Transactions of the Royal Society B, 237:37-72.\n\nEvolution and morphogenesis of simulated modular robots: a comparison between a direct and generative encoding. F Veenstra, A Faina, S Risi, K Stoy, European Conference on the Applications of Evolutionary Computation. SpringerVeenstra, F., Faina, A., Risi, S., and Stoy, K. (2017). Evolution and morphogenesis of simulated modular robots: a compari- son between a direct and generative encoding. In European Conference on the Applications of Evolutionary Computa- tion, pages 870-885. Springer.\n\nComparing encodings for performance and phenotypic exploration in evolving modular robots. F Veenstra, E Hart, E Buchanan, W Li, M D Carlo, A E Eiben, GECCO '19. Veenstra, F., Hart, E., Buchanan, E., Li, W., Carlo, M. D., and Eiben, A. E. (2019). Comparing encodings for performance and phenotypic exploration in evolving modular robots. In GECCO '19.\n\nPerspective: Complex adaptations and the evolution of evolvability. G P Wagner, L Altenberg, Evolution. 503Wagner, G. P. and Altenberg, L. (1996). Perspective: Complex adaptations and the evolution of evolvability. Evolution, 50(3):967-976.\n\nPaired open-ended trailblazer (POET): endlessly generating increasingly complex and diverse learning environments and their solutions. R Wang, J Lehman, J Clune, K O Stanley, abs/1901.01753CoRRWang, R., Lehman, J., Clune, J., and Stanley, K. O. (2019). Paired open-ended trailblazer (POET): endlessly generating increas- ingly complex and diverse learning environments and their solutions. CoRR, abs/1901.01753.\n", "annotations": {"author": "[{\"end\":219,\"start\":131},{\"end\":319,\"start\":220}]", "publisher": null, "author_last_name": "[{\"end\":145,\"start\":137},{\"end\":232,\"start\":226}]", "author_first_name": "[{\"end\":136,\"start\":131},{\"end\":225,\"start\":220}]", "author_affiliation": "[{\"end\":218,\"start\":167},{\"end\":285,\"start\":234},{\"end\":318,\"start\":287}]", "title": "[{\"end\":128,\"start\":1},{\"end\":447,\"start\":320}]", "venue": null, "abstract": "[{\"end\":1877,\"start\":449}]", "bib_ref": "[{\"attributes\":{\"ref_id\":\"b36\"},\"end\":2116,\"start\":2104},{\"attributes\":{\"ref_id\":\"b24\"},\"end\":2171,\"start\":2155},{\"attributes\":{\"ref_id\":\"b9\"},\"end\":2314,\"start\":2293},{\"attributes\":{\"ref_id\":\"b25\"},\"end\":2455,\"start\":2429},{\"attributes\":{\"ref_id\":\"b18\"},\"end\":2527,\"start\":2506},{\"attributes\":{\"ref_id\":\"b45\"},\"end\":2696,\"start\":2669},{\"attributes\":{\"ref_id\":\"b33\"},\"end\":2984,\"start\":2958},{\"attributes\":{\"ref_id\":\"b35\"},\"end\":3100,\"start\":3073},{\"attributes\":{\"ref_id\":\"b36\"},\"end\":3616,\"start\":3604},{\"attributes\":{\"ref_id\":\"b20\"},\"end\":3636,\"start\":3616},{\"attributes\":{\"ref_id\":\"b43\"},\"end\":3658,\"start\":3636},{\"attributes\":{\"ref_id\":\"b42\"},\"end\":3690,\"start\":3676},{\"attributes\":{\"ref_id\":\"b40\"},\"end\":3751,\"start\":3719},{\"attributes\":{\"ref_id\":\"b4\"},\"end\":3777,\"start\":3751},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":3814,\"start\":3799},{\"attributes\":{\"ref_id\":\"b2\"},\"end\":3841,\"start\":3814},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":3861,\"start\":3841},{\"attributes\":{\"ref_id\":\"b17\"},\"end\":3870,\"start\":3861},{\"attributes\":{\"ref_id\":\"b22\"},\"end\":4053,\"start\":4027},{\"attributes\":{\"ref_id\":\"b7\"},\"end\":4073,\"start\":4053},{\"attributes\":{\"ref_id\":\"b30\"},\"end\":4246,\"start\":4226},{\"attributes\":{\"ref_id\":\"b28\"},\"end\":4340,\"start\":4321},{\"attributes\":{\"ref_id\":\"b27\"},\"end\":4365,\"start\":4340},{\"attributes\":{\"ref_id\":\"b12\"},\"end\":4384,\"start\":4365},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":4540,\"start\":4521},{\"attributes\":{\"ref_id\":\"b1\"},\"end\":4562,\"start\":4540},{\"attributes\":{\"ref_id\":\"b19\"},\"end\":4864,\"start\":4839},{\"attributes\":{\"ref_id\":\"b6\"},\"end\":6027,\"start\":6014},{\"attributes\":{\"ref_id\":\"b5\"},\"end\":6123,\"start\":6100},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":6546,\"start\":6532},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":6757,\"start\":6736},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":7152,\"start\":7119},{\"attributes\":{\"ref_id\":\"b3\"},\"end\":7438,\"start\":7410},{\"attributes\":{\"ref_id\":\"b8\"},\"end\":7458,\"start\":7438},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":7543,\"start\":7523},{\"attributes\":{\"ref_id\":\"b23\"},\"end\":10102,\"start\":10088},{\"attributes\":{\"ref_id\":\"b41\"},\"end\":11242,\"start\":11223},{\"attributes\":{\"ref_id\":\"b14\"},\"end\":12666,\"start\":12645},{\"attributes\":{\"ref_id\":\"b11\"},\"end\":12728,\"start\":12708},{\"attributes\":{\"ref_id\":\"b13\"},\"end\":12895,\"start\":12865},{\"attributes\":{\"ref_id\":\"b44\"},\"end\":13236,\"start\":13213},{\"attributes\":{\"ref_id\":\"b26\"},\"end\":16757,\"start\":16724},{\"attributes\":{\"ref_id\":\"b15\"},\"end\":16991,\"start\":16978},{\"attributes\":{\"ref_id\":\"b38\"},\"end\":17872,\"start\":17857},{\"attributes\":{\"ref_id\":\"b39\"},\"end\":18023,\"start\":17991},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":18280,\"start\":18260},{\"attributes\":{\"ref_id\":\"b29\"},\"end\":19776,\"start\":19753},{\"attributes\":{\"ref_id\":\"b16\"},\"end\":20589,\"start\":20570},{\"attributes\":{\"ref_id\":\"b32\"},\"end\":24668,\"start\":24645},{\"attributes\":{\"ref_id\":\"b37\"},\"end\":27592,\"start\":27568},{\"attributes\":{\"ref_id\":\"b31\"},\"end\":27615,\"start\":27592},{\"attributes\":{\"ref_id\":\"b34\"},\"end\":27637,\"start\":27615},{\"attributes\":{\"ref_id\":\"b21\"},\"end\":28696,\"start\":28677},{\"attributes\":{\"ref_id\":\"b10\"},\"end\":28720,\"start\":28698},{\"attributes\":{\"ref_id\":\"b46\"},\"end\":28827,\"start\":28809},{\"attributes\":{\"ref_id\":\"b0\"},\"end\":29153,\"start\":29131}]", "figure": "[{\"attributes\":{\"id\":\"fig_0\"},\"end\":30900,\"start\":30719},{\"attributes\":{\"id\":\"fig_1\"},\"end\":30987,\"start\":30901},{\"attributes\":{\"id\":\"fig_2\"},\"end\":31154,\"start\":30988},{\"attributes\":{\"id\":\"fig_3\"},\"end\":31742,\"start\":31155},{\"attributes\":{\"id\":\"fig_4\"},\"end\":31916,\"start\":31743},{\"attributes\":{\"id\":\"fig_5\"},\"end\":32089,\"start\":31917},{\"attributes\":{\"id\":\"fig_6\"},\"end\":32265,\"start\":32090},{\"attributes\":{\"id\":\"fig_7\"},\"end\":32478,\"start\":32266},{\"attributes\":{\"id\":\"tab_0\",\"type\":\"table\"},\"end\":32805,\"start\":32479}]", "paragraph": "[{\"end\":2948,\"start\":1893},{\"end\":3344,\"start\":2950},{\"end\":4563,\"start\":3346},{\"end\":5479,\"start\":4565},{\"end\":7022,\"start\":5481},{\"end\":8623,\"start\":7024},{\"end\":9488,\"start\":8635},{\"end\":10045,\"start\":9490},{\"end\":11086,\"start\":10047},{\"end\":11936,\"start\":11098},{\"end\":12061,\"start\":11938},{\"end\":12580,\"start\":12090},{\"end\":13523,\"start\":12607},{\"end\":14329,\"start\":13525},{\"end\":15805,\"start\":14365},{\"end\":16649,\"start\":15825},{\"end\":17716,\"start\":16662},{\"end\":18809,\"start\":17718},{\"end\":19688,\"start\":18811},{\"end\":20476,\"start\":19690},{\"end\":21403,\"start\":20498},{\"end\":21712,\"start\":21405},{\"end\":22566,\"start\":21724},{\"end\":23526,\"start\":22591},{\"end\":23640,\"start\":23549},{\"end\":25212,\"start\":23642},{\"end\":25843,\"start\":25227},{\"end\":26453,\"start\":25845},{\"end\":28217,\"start\":26455},{\"end\":29154,\"start\":28219},{\"end\":29716,\"start\":29156},{\"end\":30718,\"start\":29731}]", "formula": "[{\"attributes\":{\"id\":\"formula_0\"},\"end\":12089,\"start\":12062}]", "table_ref": "[{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":14328,\"start\":14321},{\"attributes\":{\"ref_id\":\"tab_0\"},\"end\":22565,\"start\":22558}]", "section_header": "[{\"end\":1891,\"start\":1879},{\"end\":8633,\"start\":8626},{\"end\":11096,\"start\":11089},{\"end\":12605,\"start\":12583},{\"end\":14363,\"start\":14332},{\"end\":15823,\"start\":15808},{\"end\":16660,\"start\":16652},{\"end\":20496,\"start\":20479},{\"end\":21722,\"start\":21715},{\"end\":22589,\"start\":22569},{\"end\":23547,\"start\":23529},{\"end\":25225,\"start\":25215},{\"end\":29729,\"start\":29719},{\"end\":30730,\"start\":30720},{\"end\":30912,\"start\":30902},{\"end\":30999,\"start\":30989},{\"end\":31166,\"start\":31156},{\"end\":31754,\"start\":31744},{\"end\":31938,\"start\":31918},{\"end\":32101,\"start\":32091},{\"end\":32284,\"start\":32267},{\"end\":32489,\"start\":32480}]", "table": "[{\"end\":32805,\"start\":32583}]", "figure_caption": "[{\"end\":30900,\"start\":30732},{\"end\":30987,\"start\":30914},{\"end\":31154,\"start\":31001},{\"end\":31742,\"start\":31168},{\"end\":31916,\"start\":31756},{\"end\":32089,\"start\":31941},{\"end\":32265,\"start\":32103},{\"end\":32478,\"start\":32286},{\"end\":32583,\"start\":32491}]", "figure_ref": "[{\"attributes\":{\"ref_id\":\"fig_0\"},\"end\":5477,\"start\":5469},{\"attributes\":{\"ref_id\":\"fig_1\"},\"end\":10880,\"start\":10871},{\"attributes\":{\"ref_id\":\"fig_2\"},\"end\":18513,\"start\":18503},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":21860,\"start\":21852},{\"attributes\":{\"ref_id\":\"fig_3\"},\"end\":22094,\"start\":22086},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":22661,\"start\":22653},{\"end\":22756,\"start\":22748},{\"attributes\":{\"ref_id\":\"fig_4\"},\"end\":23524,\"start\":23516},{\"end\":23639,\"start\":23631},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":23879,\"start\":23871},{\"attributes\":{\"ref_id\":\"fig_6\"},\"end\":24194,\"start\":24186},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":24698,\"start\":24690},{\"attributes\":{\"ref_id\":\"fig_7\"},\"end\":25767,\"start\":25758}]", "bib_author_first_name": "[{\"end\":33386,\"start\":33385},{\"end\":33397,\"start\":33396},{\"end\":33406,\"start\":33405},{\"end\":33654,\"start\":33653},{\"end\":33666,\"start\":33665},{\"end\":33675,\"start\":33674},{\"end\":33686,\"start\":33685},{\"end\":33701,\"start\":33700},{\"end\":33715,\"start\":33714},{\"end\":33724,\"start\":33723},{\"end\":33736,\"start\":33735},{\"end\":33750,\"start\":33749},{\"end\":33759,\"start\":33758},{\"end\":34057,\"start\":34056},{\"end\":34059,\"start\":34058},{\"end\":34071,\"start\":34070},{\"end\":34073,\"start\":34072},{\"end\":34521,\"start\":34520},{\"end\":34523,\"start\":34522},{\"end\":34535,\"start\":34534},{\"end\":34537,\"start\":34536},{\"end\":34975,\"start\":34974},{\"end\":34977,\"start\":34976},{\"end\":34988,\"start\":34987},{\"end\":35304,\"start\":35303},{\"end\":35316,\"start\":35315},{\"end\":35326,\"start\":35325},{\"end\":35340,\"start\":35339},{\"end\":35353,\"start\":35352},{\"end\":35365,\"start\":35364},{\"end\":35373,\"start\":35372},{\"end\":35558,\"start\":35557},{\"end\":35687,\"start\":35686},{\"end\":35697,\"start\":35696},{\"end\":35708,\"start\":35707},{\"end\":35721,\"start\":35720},{\"end\":36085,\"start\":36084},{\"end\":36095,\"start\":36094},{\"end\":36107,\"start\":36106},{\"end\":36116,\"start\":36115},{\"end\":36435,\"start\":36434},{\"end\":36445,\"start\":36444},{\"end\":36458,\"start\":36457},{\"end\":36469,\"start\":36468},{\"end\":36847,\"start\":36846},{\"end\":36858,\"start\":36857},{\"end\":37028,\"start\":37027},{\"end\":37030,\"start\":37029},{\"end\":37039,\"start\":37038},{\"end\":37041,\"start\":37040},{\"end\":37230,\"start\":37229},{\"end\":37239,\"start\":37238},{\"end\":37249,\"start\":37248},{\"end\":37263,\"start\":37262},{\"end\":37265,\"start\":37264},{\"end\":37529,\"start\":37528},{\"end\":37541,\"start\":37540},{\"end\":37818,\"start\":37814},{\"end\":37831,\"start\":37827},{\"end\":37850,\"start\":37846},{\"end\":37861,\"start\":37860},{\"end\":37873,\"start\":37872},{\"end\":38142,\"start\":38141},{\"end\":38420,\"start\":38419},{\"end\":38582,\"start\":38581},{\"end\":38869,\"start\":38868},{\"end\":38879,\"start\":38878},{\"end\":38881,\"start\":38880},{\"end\":38891,\"start\":38890},{\"end\":39183,\"start\":39182},{\"end\":39193,\"start\":39192},{\"end\":39426,\"start\":39425},{\"end\":39428,\"start\":39427},{\"end\":39438,\"start\":39437},{\"end\":39448,\"start\":39447},{\"end\":39450,\"start\":39449},{\"end\":39708,\"start\":39707},{\"end\":39717,\"start\":39716},{\"end\":39727,\"start\":39726},{\"end\":39729,\"start\":39728},{\"end\":40029,\"start\":40028},{\"end\":40044,\"start\":40043},{\"end\":40058,\"start\":40053},{\"end\":40062,\"start\":40061},{\"end\":40281,\"start\":40280},{\"end\":40449,\"start\":40448},{\"end\":40639,\"start\":40638},{\"end\":40649,\"start\":40648},{\"end\":40651,\"start\":40650},{\"end\":40989,\"start\":40988},{\"end\":41004,\"start\":41003},{\"end\":41571,\"start\":41570},{\"end\":41581,\"start\":41580},{\"end\":41583,\"start\":41582},{\"end\":41758,\"start\":41757},{\"end\":41760,\"start\":41759},{\"end\":41768,\"start\":41767},{\"end\":41781,\"start\":41777},{\"end\":42144,\"start\":42143},{\"end\":42156,\"start\":42155},{\"end\":42167,\"start\":42166},{\"end\":42169,\"start\":42168},{\"end\":42179,\"start\":42178},{\"end\":42181,\"start\":42180},{\"end\":42388,\"start\":42387},{\"end\":42397,\"start\":42396},{\"end\":42409,\"start\":42408},{\"end\":42419,\"start\":42418},{\"end\":42421,\"start\":42420},{\"end\":42923,\"start\":42922},{\"end\":42933,\"start\":42932},{\"end\":43134,\"start\":43130},{\"end\":43144,\"start\":43143},{\"end\":43299,\"start\":43298},{\"end\":43308,\"start\":43307},{\"end\":43621,\"start\":43620},{\"end\":43633,\"start\":43632},{\"end\":43635,\"start\":43634},{\"end\":43646,\"start\":43645},{\"end\":43648,\"start\":43647},{\"end\":43660,\"start\":43659},{\"end\":44153,\"start\":44152},{\"end\":44164,\"start\":44163},{\"end\":44166,\"start\":44165},{\"end\":44356,\"start\":44355},{\"end\":44926,\"start\":44925},{\"end\":44939,\"start\":44938},{\"end\":44950,\"start\":44949},{\"end\":44958,\"start\":44957},{\"end\":44960,\"start\":44959},{\"end\":45374,\"start\":45373},{\"end\":45376,\"start\":45375},{\"end\":45604,\"start\":45603},{\"end\":45606,\"start\":45605},{\"end\":45617,\"start\":45616},{\"end\":45842,\"start\":45841},{\"end\":45844,\"start\":45843},{\"end\":45855,\"start\":45854},{\"end\":46005,\"start\":46004},{\"end\":46013,\"start\":46012},{\"end\":46023,\"start\":46022},{\"end\":46217,\"start\":46216},{\"end\":46514,\"start\":46513},{\"end\":46526,\"start\":46525},{\"end\":46535,\"start\":46534},{\"end\":46543,\"start\":46542},{\"end\":46989,\"start\":46988},{\"end\":47001,\"start\":47000},{\"end\":47009,\"start\":47008},{\"end\":47021,\"start\":47020},{\"end\":47027,\"start\":47026},{\"end\":47029,\"start\":47028},{\"end\":47038,\"start\":47037},{\"end\":47040,\"start\":47039},{\"end\":47319,\"start\":47318},{\"end\":47321,\"start\":47320},{\"end\":47331,\"start\":47330},{\"end\":47628,\"start\":47627},{\"end\":47636,\"start\":47635},{\"end\":47646,\"start\":47645},{\"end\":47655,\"start\":47654},{\"end\":47657,\"start\":47656}]", "bib_author_last_name": "[{\"end\":33394,\"start\":33387},{\"end\":33403,\"start\":33398},{\"end\":33411,\"start\":33407},{\"end\":33663,\"start\":33655},{\"end\":33672,\"start\":33667},{\"end\":33683,\"start\":33676},{\"end\":33698,\"start\":33687},{\"end\":33712,\"start\":33702},{\"end\":33721,\"start\":33716},{\"end\":33733,\"start\":33725},{\"end\":33747,\"start\":33737},{\"end\":33756,\"start\":33751},{\"end\":33768,\"start\":33760},{\"end\":34068,\"start\":34060},{\"end\":34081,\"start\":34074},{\"end\":34532,\"start\":34524},{\"end\":34545,\"start\":34538},{\"end\":34985,\"start\":34978},{\"end\":34996,\"start\":34989},{\"end\":35313,\"start\":35305},{\"end\":35323,\"start\":35317},{\"end\":35337,\"start\":35327},{\"end\":35350,\"start\":35341},{\"end\":35362,\"start\":35354},{\"end\":35370,\"start\":35366},{\"end\":35381,\"start\":35374},{\"end\":35564,\"start\":35559},{\"end\":35694,\"start\":35688},{\"end\":35705,\"start\":35698},{\"end\":35718,\"start\":35709},{\"end\":35728,\"start\":35722},{\"end\":36092,\"start\":36086},{\"end\":36104,\"start\":36096},{\"end\":36113,\"start\":36108},{\"end\":36123,\"start\":36117},{\"end\":36442,\"start\":36436},{\"end\":36455,\"start\":36446},{\"end\":36466,\"start\":36459},{\"end\":36476,\"start\":36470},{\"end\":36855,\"start\":36848},{\"end\":36862,\"start\":36859},{\"end\":37036,\"start\":37031},{\"end\":37047,\"start\":37042},{\"end\":37236,\"start\":37231},{\"end\":37246,\"start\":37240},{\"end\":37260,\"start\":37250},{\"end\":37270,\"start\":37266},{\"end\":37538,\"start\":37530},{\"end\":37551,\"start\":37542},{\"end\":37825,\"start\":37819},{\"end\":37844,\"start\":37832},{\"end\":37858,\"start\":37851},{\"end\":37870,\"start\":37862},{\"end\":37879,\"start\":37874},{\"end\":38148,\"start\":38143},{\"end\":38426,\"start\":38421},{\"end\":38585,\"start\":38583},{\"end\":38876,\"start\":38870},{\"end\":38888,\"start\":38882},{\"end\":38904,\"start\":38892},{\"end\":39190,\"start\":39184},{\"end\":39200,\"start\":39194},{\"end\":39435,\"start\":39429},{\"end\":39445,\"start\":39439},{\"end\":39458,\"start\":39451},{\"end\":39714,\"start\":39709},{\"end\":39724,\"start\":39718},{\"end\":39737,\"start\":39730},{\"end\":40041,\"start\":40030},{\"end\":40051,\"start\":40045},{\"end\":40288,\"start\":40282},{\"end\":40458,\"start\":40450},{\"end\":40646,\"start\":40640},{\"end\":40659,\"start\":40652},{\"end\":41001,\"start\":40990},{\"end\":41014,\"start\":41005},{\"end\":41578,\"start\":41572},{\"end\":41591,\"start\":41584},{\"end\":41765,\"start\":41761},{\"end\":41775,\"start\":41769},{\"end\":41785,\"start\":41782},{\"end\":42153,\"start\":42145},{\"end\":42164,\"start\":42157},{\"end\":42176,\"start\":42170},{\"end\":42187,\"start\":42182},{\"end\":42394,\"start\":42389},{\"end\":42406,\"start\":42398},{\"end\":42416,\"start\":42410},{\"end\":42427,\"start\":42422},{\"end\":42930,\"start\":42924},{\"end\":42939,\"start\":42934},{\"end\":43141,\"start\":43135},{\"end\":43150,\"start\":43145},{\"end\":43305,\"start\":43300},{\"end\":43317,\"start\":43309},{\"end\":43630,\"start\":43622},{\"end\":43643,\"start\":43636},{\"end\":43657,\"start\":43649},{\"end\":43667,\"start\":43661},{\"end\":44161,\"start\":44154},{\"end\":44174,\"start\":44167},{\"end\":44361,\"start\":44357},{\"end\":44936,\"start\":44927},{\"end\":44947,\"start\":44940},{\"end\":44955,\"start\":44951},{\"end\":44969,\"start\":44961},{\"end\":45384,\"start\":45377},{\"end\":45614,\"start\":45607},{\"end\":45630,\"start\":45618},{\"end\":45852,\"start\":45845},{\"end\":45868,\"start\":45856},{\"end\":46010,\"start\":46006},{\"end\":46020,\"start\":46014},{\"end\":46035,\"start\":46024},{\"end\":46224,\"start\":46218},{\"end\":46523,\"start\":46515},{\"end\":46532,\"start\":46527},{\"end\":46540,\"start\":46536},{\"end\":46548,\"start\":46544},{\"end\":46998,\"start\":46990},{\"end\":47006,\"start\":47002},{\"end\":47018,\"start\":47010},{\"end\":47024,\"start\":47022},{\"end\":47035,\"start\":47030},{\"end\":47046,\"start\":47041},{\"end\":47328,\"start\":47322},{\"end\":47341,\"start\":47332},{\"end\":47633,\"start\":47629},{\"end\":47643,\"start\":47637},{\"end\":47652,\"start\":47647},{\"end\":47665,\"start\":47658}]", "bib_entry": "[{\"attributes\":{\"id\":\"b0\",\"matched_paper_id\":115520837},\"end\":33595,\"start\":33333},{\"attributes\":{\"id\":\"b1\"},\"end\":33992,\"start\":33597},{\"attributes\":{\"id\":\"b2\",\"matched_paper_id\":7304951},\"end\":34439,\"start\":33994},{\"attributes\":{\"id\":\"b3\",\"matched_paper_id\":1731222},\"end\":34920,\"start\":34441},{\"attributes\":{\"id\":\"b4\",\"matched_paper_id\":14977894},\"end\":35299,\"start\":34922},{\"attributes\":{\"id\":\"b5\"},\"end\":35553,\"start\":35301},{\"attributes\":{\"id\":\"b6\"},\"end\":35611,\"start\":35555},{\"attributes\":{\"id\":\"b7\",\"matched_paper_id\":24560725},\"end\":35978,\"start\":35613},{\"attributes\":{\"id\":\"b8\",\"matched_paper_id\":8801394},\"end\":36344,\"start\":35980},{\"attributes\":{\"id\":\"b9\",\"matched_paper_id\":4495353},\"end\":36754,\"start\":36346},{\"attributes\":{\"id\":\"b10\"},\"end\":36985,\"start\":36756},{\"attributes\":{\"id\":\"b11\"},\"end\":37164,\"start\":36987},{\"attributes\":{\"id\":\"b12\",\"matched_paper_id\":625018},\"end\":37526,\"start\":37166},{\"attributes\":{\"id\":\"b13\"},\"end\":37771,\"start\":37528},{\"attributes\":{\"id\":\"b14\",\"matched_paper_id\":15629107},\"end\":38101,\"start\":37773},{\"attributes\":{\"id\":\"b15\",\"matched_paper_id\":120420350},\"end\":38341,\"start\":38103},{\"attributes\":{\"id\":\"b16\"},\"end\":38528,\"start\":38343},{\"attributes\":{\"doi\":\"31697584\",\"id\":\"b17\",\"matched_paper_id\":52945447},\"end\":38728,\"start\":38530},{\"attributes\":{\"id\":\"b18\"},\"end\":39119,\"start\":38730},{\"attributes\":{\"id\":\"b19\",\"matched_paper_id\":137545303},\"end\":39343,\"start\":39121},{\"attributes\":{\"id\":\"b20\",\"matched_paper_id\":10946184},\"end\":39705,\"start\":39345},{\"attributes\":{\"doi\":\"arXiv:1906.11176\",\"id\":\"b21\"},\"end\":39943,\"start\":39707},{\"attributes\":{\"doi\":\"27139940\",\"id\":\"b22\",\"matched_paper_id\":25168705},\"end\":40276,\"start\":39945},{\"attributes\":{\"id\":\"b23\"},\"end\":40416,\"start\":40278},{\"attributes\":{\"id\":\"b24\",\"matched_paper_id\":213103827},\"end\":40588,\"start\":40418},{\"attributes\":{\"id\":\"b25\",\"matched_paper_id\":58799661},\"end\":40868,\"start\":40590},{\"attributes\":{\"id\":\"b26\",\"matched_paper_id\":82702175},\"end\":41513,\"start\":40870},{\"attributes\":{\"id\":\"b27\",\"matched_paper_id\":4317402},\"end\":41728,\"start\":41515},{\"attributes\":{\"id\":\"b28\",\"matched_paper_id\":16333108},\"end\":42139,\"start\":41730},{\"attributes\":{\"id\":\"b29\"},\"end\":42330,\"start\":42141},{\"attributes\":{\"id\":\"b30\",\"matched_paper_id\":3793088},\"end\":42824,\"start\":42332},{\"attributes\":{\"id\":\"b31\"},\"end\":43082,\"start\":42826},{\"attributes\":{\"doi\":\"arXiv:1504.04909\",\"id\":\"b32\"},\"end\":43296,\"start\":43084},{\"attributes\":{\"id\":\"b33\"},\"end\":43539,\"start\":43298},{\"attributes\":{\"id\":\"b34\",\"matched_paper_id\":102352273},\"end\":44067,\"start\":43541},{\"attributes\":{\"id\":\"b35\"},\"end\":44325,\"start\":44069},{\"attributes\":{\"id\":\"b36\",\"matched_paper_id\":28435},\"end\":44830,\"start\":44327},{\"attributes\":{\"id\":\"b37\",\"matched_paper_id\":15066954},\"end\":45249,\"start\":44832},{\"attributes\":{\"id\":\"b38\"},\"end\":45545,\"start\":45251},{\"attributes\":{\"id\":\"b39\"},\"end\":45801,\"start\":45547},{\"attributes\":{\"id\":\"b40\",\"matched_paper_id\":2124332},\"end\":46002,\"start\":45803},{\"attributes\":{\"id\":\"b41\"},\"end\":46177,\"start\":46004},{\"attributes\":{\"id\":\"b42\",\"matched_paper_id\":937133},\"end\":46399,\"start\":46179},{\"attributes\":{\"id\":\"b43\",\"matched_paper_id\":13521955},\"end\":46895,\"start\":46401},{\"attributes\":{\"id\":\"b44\",\"matched_paper_id\":195877767},\"end\":47248,\"start\":46897},{\"attributes\":{\"id\":\"b45\",\"matched_paper_id\":21040413},\"end\":47490,\"start\":47250},{\"attributes\":{\"doi\":\"abs/1901.01753\",\"id\":\"b46\"},\"end\":47903,\"start\":47492}]", "bib_title": "[{\"end\":33383,\"start\":33333},{\"end\":34054,\"start\":33994},{\"end\":34518,\"start\":34441},{\"end\":34972,\"start\":34922},{\"end\":35684,\"start\":35613},{\"end\":36082,\"start\":35980},{\"end\":36432,\"start\":36346},{\"end\":37227,\"start\":37166},{\"end\":37812,\"start\":37773},{\"end\":38139,\"start\":38103},{\"end\":38579,\"start\":38530},{\"end\":39180,\"start\":39121},{\"end\":39423,\"start\":39345},{\"end\":40026,\"start\":39945},{\"end\":40446,\"start\":40418},{\"end\":40636,\"start\":40590},{\"end\":40986,\"start\":40870},{\"end\":41568,\"start\":41515},{\"end\":41755,\"start\":41730},{\"end\":42385,\"start\":42332},{\"end\":43618,\"start\":43541},{\"end\":44353,\"start\":44327},{\"end\":44923,\"start\":44832},{\"end\":45839,\"start\":45803},{\"end\":46214,\"start\":46179},{\"end\":46511,\"start\":46401},{\"end\":46986,\"start\":46897},{\"end\":47316,\"start\":47250}]", "bib_author": "[{\"end\":33396,\"start\":33385},{\"end\":33405,\"start\":33396},{\"end\":33413,\"start\":33405},{\"end\":33665,\"start\":33653},{\"end\":33674,\"start\":33665},{\"end\":33685,\"start\":33674},{\"end\":33700,\"start\":33685},{\"end\":33714,\"start\":33700},{\"end\":33723,\"start\":33714},{\"end\":33735,\"start\":33723},{\"end\":33749,\"start\":33735},{\"end\":33758,\"start\":33749},{\"end\":33770,\"start\":33758},{\"end\":34070,\"start\":34056},{\"end\":34083,\"start\":34070},{\"end\":34534,\"start\":34520},{\"end\":34547,\"start\":34534},{\"end\":34987,\"start\":34974},{\"end\":34998,\"start\":34987},{\"end\":35315,\"start\":35303},{\"end\":35325,\"start\":35315},{\"end\":35339,\"start\":35325},{\"end\":35352,\"start\":35339},{\"end\":35364,\"start\":35352},{\"end\":35372,\"start\":35364},{\"end\":35383,\"start\":35372},{\"end\":35566,\"start\":35557},{\"end\":35696,\"start\":35686},{\"end\":35707,\"start\":35696},{\"end\":35720,\"start\":35707},{\"end\":35730,\"start\":35720},{\"end\":36094,\"start\":36084},{\"end\":36106,\"start\":36094},{\"end\":36115,\"start\":36106},{\"end\":36125,\"start\":36115},{\"end\":36444,\"start\":36434},{\"end\":36457,\"start\":36444},{\"end\":36468,\"start\":36457},{\"end\":36478,\"start\":36468},{\"end\":36857,\"start\":36846},{\"end\":36864,\"start\":36857},{\"end\":37038,\"start\":37027},{\"end\":37049,\"start\":37038},{\"end\":37238,\"start\":37229},{\"end\":37248,\"start\":37238},{\"end\":37262,\"start\":37248},{\"end\":37272,\"start\":37262},{\"end\":37540,\"start\":37528},{\"end\":37553,\"start\":37540},{\"end\":37827,\"start\":37814},{\"end\":37846,\"start\":37827},{\"end\":37860,\"start\":37846},{\"end\":37872,\"start\":37860},{\"end\":37881,\"start\":37872},{\"end\":38150,\"start\":38141},{\"end\":38428,\"start\":38419},{\"end\":38587,\"start\":38581},{\"end\":38878,\"start\":38868},{\"end\":38890,\"start\":38878},{\"end\":38906,\"start\":38890},{\"end\":39192,\"start\":39182},{\"end\":39202,\"start\":39192},{\"end\":39437,\"start\":39425},{\"end\":39447,\"start\":39437},{\"end\":39460,\"start\":39447},{\"end\":39716,\"start\":39707},{\"end\":39726,\"start\":39716},{\"end\":39739,\"start\":39726},{\"end\":40043,\"start\":40028},{\"end\":40053,\"start\":40043},{\"end\":40061,\"start\":40053},{\"end\":40065,\"start\":40061},{\"end\":40290,\"start\":40280},{\"end\":40460,\"start\":40448},{\"end\":40648,\"start\":40638},{\"end\":40661,\"start\":40648},{\"end\":41003,\"start\":40988},{\"end\":41016,\"start\":41003},{\"end\":41580,\"start\":41570},{\"end\":41593,\"start\":41580},{\"end\":41767,\"start\":41757},{\"end\":41777,\"start\":41767},{\"end\":41787,\"start\":41777},{\"end\":42155,\"start\":42143},{\"end\":42166,\"start\":42155},{\"end\":42178,\"start\":42166},{\"end\":42189,\"start\":42178},{\"end\":42396,\"start\":42387},{\"end\":42408,\"start\":42396},{\"end\":42418,\"start\":42408},{\"end\":42429,\"start\":42418},{\"end\":42932,\"start\":42922},{\"end\":42941,\"start\":42932},{\"end\":43143,\"start\":43130},{\"end\":43152,\"start\":43143},{\"end\":43307,\"start\":43298},{\"end\":43319,\"start\":43307},{\"end\":43632,\"start\":43620},{\"end\":43645,\"start\":43632},{\"end\":43659,\"start\":43645},{\"end\":43669,\"start\":43659},{\"end\":44163,\"start\":44152},{\"end\":44176,\"start\":44163},{\"end\":44363,\"start\":44355},{\"end\":44938,\"start\":44925},{\"end\":44949,\"start\":44938},{\"end\":44957,\"start\":44949},{\"end\":44971,\"start\":44957},{\"end\":45386,\"start\":45373},{\"end\":45616,\"start\":45603},{\"end\":45632,\"start\":45616},{\"end\":45854,\"start\":45841},{\"end\":45870,\"start\":45854},{\"end\":46012,\"start\":46004},{\"end\":46022,\"start\":46012},{\"end\":46037,\"start\":46022},{\"end\":46226,\"start\":46216},{\"end\":46525,\"start\":46513},{\"end\":46534,\"start\":46525},{\"end\":46542,\"start\":46534},{\"end\":46550,\"start\":46542},{\"end\":47000,\"start\":46988},{\"end\":47008,\"start\":47000},{\"end\":47020,\"start\":47008},{\"end\":47026,\"start\":47020},{\"end\":47037,\"start\":47026},{\"end\":47048,\"start\":47037},{\"end\":47330,\"start\":47318},{\"end\":47343,\"start\":47330},{\"end\":47635,\"start\":47627},{\"end\":47645,\"start\":47635},{\"end\":47654,\"start\":47645},{\"end\":47667,\"start\":47654}]", "bib_venue": "[{\"end\":34232,\"start\":34166},{\"end\":34696,\"start\":34630},{\"end\":35079,\"start\":35067},{\"end\":41132,\"start\":41107},{\"end\":41948,\"start\":41876},{\"end\":42517,\"start\":42502},{\"end\":43401,\"start\":43383},{\"end\":43810,\"start\":43748},{\"end\":44573,\"start\":44468},{\"end\":33453,\"start\":33413},{\"end\":33651,\"start\":33597},{\"end\":34164,\"start\":34083},{\"end\":34628,\"start\":34547},{\"end\":35041,\"start\":34998},{\"end\":35768,\"start\":35730},{\"end\":36141,\"start\":36125},{\"end\":36519,\"start\":36478},{\"end\":36844,\"start\":36756},{\"end\":37025,\"start\":36987},{\"end\":37323,\"start\":37272},{\"end\":37626,\"start\":37553},{\"end\":37917,\"start\":37881},{\"end\":38187,\"start\":38150},{\"end\":38417,\"start\":38343},{\"end\":38610,\"start\":38595},{\"end\":38866,\"start\":38730},{\"end\":39215,\"start\":39202},{\"end\":39504,\"start\":39460},{\"end\":39799,\"start\":39755},{\"end\":40088,\"start\":40073},{\"end\":40487,\"start\":40460},{\"end\":40703,\"start\":40661},{\"end\":41076,\"start\":41016},{\"end\":41599,\"start\":41593},{\"end\":41874,\"start\":41787},{\"end\":42500,\"start\":42429},{\"end\":42920,\"start\":42826},{\"end\":43128,\"start\":43084},{\"end\":43381,\"start\":43319},{\"end\":43746,\"start\":43669},{\"end\":44150,\"start\":44069},{\"end\":44466,\"start\":44363},{\"end\":45017,\"start\":44971},{\"end\":45371,\"start\":45251},{\"end\":45601,\"start\":45547},{\"end\":45885,\"start\":45870},{\"end\":46080,\"start\":46037},{\"end\":46275,\"start\":46226},{\"end\":46617,\"start\":46550},{\"end\":47057,\"start\":47048},{\"end\":47352,\"start\":47343},{\"end\":47625,\"start\":47492}]"}}}, "year": 2023, "month": 12, "day": 17}